{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09600c480fe685a0cd565a9b53f6fe8c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdd36eafe30519e99af02098ed43d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "commitAfterChange": "a460dab1d90a50493c5778c6266a2505ebe8bca6", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, boolean newIsCleaning, IClasspathEntry[] otherClasspathWithOutput) \t\tthrows JavaModelException", "diff": ["-\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput)", "+\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, boolean newIsCleaning, IClasspathEntry[] otherClasspathWithOutput)", "-\t\t\t\tif (otherClasspathWithOutput[length - 1].getContentKind()", "-\t\t\t\t\t== ClasspathEntry.K_OUTPUT", "-\t\t\t\t\t&& otherClasspathWithOutput[length - 1].getPath().equals(newOutputLocation))", "+\t\t\t\tIClasspathEntry output = otherClasspathWithOutput[length - 1];", "+\t\t\t\tif (output.getContentKind() == ClasspathEntry.K_OUTPUT", "+\t\t\t\t\t\t&& output.getPath().equals(newOutputLocation)", "+\t\t\t\t\t\t&& output.isCleaningOutputLocation() == newIsCleaning)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f7860949c97e2bf056fcefc347422f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "commitAfterChange": "54e21838d5d72a577ad5b83bd2ddcc9c60b93259", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "diff": ["-\t\ttry {", "-\t\t\t// attempt to prove the classpath has not changed", "-\t\t\tString fileClasspathString = getSharedProperty(CLASSPATH_FILENAME);", "-\t\t\tif (fileClasspathString != null) {", "-\t\t\t\tIClasspathEntry[] fileEntries = readPaths(fileClasspathString);", "-\t\t\t\tif (isClasspathEqualsTo(newClasspath, newOutputLocation, fileEntries)) {", "-\t\t\t\t\t// no need to save it, it is the same", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t} catch (RuntimeException e) {", "-\t\t} catch (CoreException e) {", "+\t\tIClasspathEntry[] fileEntries = readClasspathFile(false /*don't create markers*/, false/*don't log problems*/);", "+\t\tif (fileEntries != null && isClasspathEqualsTo(newClasspath, newOutputLocation, fileEntries)) {", "+\t\t\t// no need to save it, it is the same", "+\t\t\treturn false;"]}], "num": 49186}
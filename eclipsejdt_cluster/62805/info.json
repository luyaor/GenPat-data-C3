{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12a32d7f03fdc247ecacac17d3c1001f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec222c6c4eba852a9f643500ff27476a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void open(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void open(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tsuper.open(monitor);", "-\t\t", "-\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t\tif (this.problemRequestor != null && this.problemRequestor.isActive()){", "-\t\t\tthis.problemRequestor.beginReporting();", "-\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, monitor); ", "-\t\t\tthis.problemRequestor.endReporting();", "+\t\tthis.computeProblems = this.problemRequestor != null && this.problemRequestor.isActive();", "+", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tObject info = null;", "+\t\tsynchronized(manager) {", "+\t\t\tif (!isOpen()) {", "+\t\t\t\tinfo = openWhenClosed(monitor);", "+\t\t\t} else {", "+\t\t\t\tinfo = manager.getInfo(this);", "+\t\t\t}", "+", "+\t\t// report problems outside the JavaModelManager lock", "+\t\tif (monitor != null && monitor.isCanceled()) return;", "+\t\treportProblemsIfNeeded((WorkingCopyElementInfo)info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbf579a763ded5bffafe85273f402cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "54f8c764df139e127205c9c64b7e35616e69430a", "commitAfterChange": "a7f4b41f607887556f37fdf0f48cc653d6ceaf2a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic synchronized void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\tpublic synchronized void initializeRoots() {", "-\t\t// remember roots infos as old roots infos", "-\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "-\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;", "+\tpublic void initializeRoots() {", "-\t\tif (!this.rootsAreStale) return;", "+\t\tHashtable newRoots = null;", "+\t\tHashtable newOtherRoots = null;", "+\t\tHashtable newSourceAttachments = null;", "+\t\tif (this.rootsAreStale) {", "-\t\tthis.roots = new Hashtable();", "-\t\tthis.otherRoots = new Hashtable();", "-\t\tthis.sourceAttachments = new Hashtable();", "-\t\t", "-\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\tIJavaProject[] projects;", "-\t\ttry {", "-\t\t\tprojects = model.getJavaProjects();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// nothing can be done", "-\t\t\treturn;", "-\t\t}", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tIJavaProject project = projects[i];", "-\t\t\tIClasspathEntry[] classpath;", "+\t\t\tnewRoots = new Hashtable();", "+\t\t\tnewOtherRoots = new Hashtable();", "+\t\t\tnewSourceAttachments = new Hashtable();", "+\t", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects;", "-\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t// continue with next project", "-\t\t\t\tcontinue;", "+\t\t\t\t// nothing can be done", "+\t\t\t\treturn;", "-\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t", "-\t\t\t\t// root path", "-\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\tif (this.roots.get(path) == null) {", "-\t\t\t\t\tthis.roots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t} else {", "-\t\t\t\t\tArrayList rootList = (ArrayList)this.otherRoots.get(path);", "-\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\tthis.otherRoots.put(path, rootList);", "-\t\t\t\t\t}", "-\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// source attachment path", "-\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\tString propertyString = null;", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// continue with next project", "-\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t} else {", "-\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t}", "-\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\tthis.sourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t", "+\t\t\t\t\t// root path", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "+\t\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// source attachment path", "+\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\t\tString propertyString = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\t}", "-\t\tthis.rootsAreStale = false;", "+\t\tsynchronized(this) {", "+\t\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "+\t\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;\t\t\t", "+\t\t\tif (newRoots != null) {", "+\t\t\t\tthis.roots = newRoots;", "+\t\t\t\tthis.otherRoots = newOtherRoots;", "+\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "+\t\t\t\tthis.rootsAreStale = false;", "+\t\t\t}", "+\t\t}"]}], "num": 62805}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "085bbae6dacfe40ef2e03dbfe4ae7766", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7892d16f3e0f83812f4e9360a8bdb4d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bb49ae1f5759ef970a2a314fd9778e459f4c097c", "commitAfterChange": "31d45554331a458304a632ad1dfc3ad3337a9ef2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "diff": ["-\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.valueTable[i];", "-\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "-\t\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "-\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t\t", "+\t\t\t\t\tObject value = this.packageFragments.valueTable[i];", "+\t\t\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) value;", "+\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\t\t\tfor (int j = 0, length2 = roots.length; j < length2; j++) {", "+\t\t\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[j];", "+\t\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(pkgName));\t\t\t\t\t", "+\t\t\t\t\t\t}", "-\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(splittedName);", "-\t\t\tif (roots != null) {", "-\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "-\t\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "-\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(splittedName));", "+\t\t\tObject value = this.packageFragments.get(splittedName);", "+\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\trequestor.acceptPackageFragment(((PackageFragmentRoot) value).getPackageFragment(splittedName));", "+\t\t\t} else {", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\tif (roots != null) {", "+\t\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "+\t\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(splittedName));", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8023c5f0e7fef98f7e7be4fb77a89493", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "38437076b7a492cbe65acea37c6da2899990885f", "commitAfterChange": "a85dd3772bf40e01ede4717af426d44844307345", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["+\t\t\t// Decide whether we have a constructor or not", "+\t\t\tboolean isConstructor = false;", "-\t\t\t\tif (name == null) {", "+\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[0], name);", "+\t\t\t\ttypeRef = new ImplicitDocTypeReference(name, this.memberStart);", "+\t\t\t} else {", "+\t\t\t\tchar[] name = null;", "+\t\t\t\tif (typeRef instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tname = ((JavadocSingleTypeReference)typeRef).token;", "+\t\t\t\t} else if (typeRef instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\tchar[][] tokens = ((JavadocQualifiedTypeReference)typeRef).tokens;", "+\t\t\t\t\tname = tokens[tokens.length-1];", "+\t\t\t\t} else {", "-\t\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "+\t\t\t\tisConstructor = CharOperation.equals(this.identifierStack[0], name);", "-\t\t\t// Decide whether we have a constructor or not", "-\t\t\tchar[][] receiverTokens = typeRef.getTypeName();", "-\t\t\tchar[] memberName = this.identifierStack[0];", "-\t\t\tboolean isConstructor = CharOperation.equals(memberName, receiverTokens[receiverTokens.length-1]);"]}], "num": 58541}
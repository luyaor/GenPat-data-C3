{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6c2dc827da1f90afc7ce80eb8549ff7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab2b49034c0574aadf1418472aa3312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tboolean receiverCast = false, argumentsCast = false; ", "+\tboolean receiverCast = false, argsContainCast = false; ", "-\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.receiver);\t\t", "+\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)this.receiver);\t\t", "+\t// resolve type arguments (for generic constructor call)", "+\tif (this.typeArguments != null) {", "+\t\tint length = this.typeArguments.length;", "+\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\targHasError = true;", "+\t\t\t}", "+\t\t}", "+\t\tif (argHasError) {", "+\t\t\treturn null;", "+\t\t}", "+\t}\t", "-\t\t\t\targumentsCast = true;", "+\t\t\t\targsContainCast = true;", "-\t\t\t\tthis.codegenBinding = this.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "+\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "-\tif (this.receiverType == null)", "+\tif (this.receiverType == null) {", "-", "+\t}", "-\tthis.codegenBinding = this.binding = ", "+\tthis.binding = ", "-\t\t// record the closest match, for clients who may still need hint about possible method match", "-\t\tif (binding instanceof ProblemMethodBinding){", "-\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "-\t\t\tif (closestMatch != null) this.codegenBinding = this.binding = closestMatch;", "+\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\tswitch (this.binding.problemId()) {", "+\t\t\tcase ProblemReasons.Ambiguous :", "+\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\tcase ProblemReasons.NonStaticReferenceInConstructorInvocation :", "+\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\tcase ProblemReasons.ReceiverTypeNotVisible :", "+\t\t\tcase ProblemReasons.ParameterBoundMismatch :", "+\t\t\t\t// only steal returnType in cases listed above", "+\t\t\t\tif (closestMatch != null) this.resolvedType = closestMatch.returnType;", "+\t\t\tdefault :", "-\t\treturn this.resolvedType = this.binding == null ? null : this.binding.returnType;", "+\t\t// record the closest match, for clients who may still need hint about possible method match", "+\t\tif (closestMatch != null) this.binding = closestMatch;", "+\t\treturn this.resolvedType;", "-\tif (arguments != null) {", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t}", "-\t\tif (argumentsCast) {", "-\t\t\tCastExpression.checkNeedForArgumentCasts(scope, this.receiver, receiverType, binding, this.arguments, argumentTypes, this);", "-\t\t}", "-\t}", "+\tif (this.arguments != null) ", "+\t\tcheckInvocationArguments(scope, this.receiver, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+", "-\treturn this.resolvedType = binding.returnType;", "+\treturn this.resolvedType = this.binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd53824c178993ed0a03e989bf3d8f8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "0218d2fde27ae288f3eb227e030a2aee2bd32f49", "commitAfterChange": "025f6a96e3e3c149e01b0d88c99b73f42c4c49af", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tprivate static String toUnresolvedTypeSignature(char[] signature)", "signatureAfterChange": "  \tprivate static int toUnresolvedTypeSignature(char[] signature, int start, int length, StringBuffer buffer)", "diff": ["-\tprivate static String toUnresolvedTypeSignature(char[] signature) {", "-\t\tint length = signature.length;", "-\t\tif (length <= 1) {", "-\t\t\treturn new String(signature);", "-\t\t}", "-\t\tStringBuffer buffer = new StringBuffer(length);", "-\t\ttoUnresolvedTypeSignature(signature, 0, length, buffer);", "-\t\treturn String.valueOf(buffer);", "-\t}", "+\tprivate static int toUnresolvedTypeSignature(char[] signature, int start, int length, StringBuffer buffer) {", "+\t\t\t\ti = toUnresolvedTypeSignature(signature, i+1, length, buffer);"]}], "num": 7111}
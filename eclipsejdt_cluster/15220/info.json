{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60d9a82ba31ef573a0e0800cec4bfbdf", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb1bd435203539117896eeb858d74927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "-\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "-\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "-\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "-\t\t\t\t\t\t\tlines.add(currentLine);\r", "-\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "+\t\t\t\t\t\tint lookAhead = 0;\r", "+\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "+\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "+\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcurrentLine.add(\r", "-\t\t\t\t\t\t\tnew StringLiteral(\r", "-\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "-\t\t\t\t\t\t\t\tstartPosition, \r", "-\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "+\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "-\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6954ceeb410e90e91527c583b2cce7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "-\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "-\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "-\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "-\t\t\t\t\t\t\tlines.add(currentLine);\r", "-\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "+\t\t\t\t\t\tint lookAhead = 0;\r", "+\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "+\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "+\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcurrentLine.add(\r", "-\t\t\t\t\t\t\tnew StringLiteral(\r", "-\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "-\t\t\t\t\t\t\t\tstartPosition, \r", "-\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "+\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "-\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "-\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "-\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "-\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "-\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "+\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r"]}], "num": 15220}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d19f2c2146ef3593ead9531614599ebe", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6806b5d4f77818413ef74e37b1b49cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods)", "diff": ["-void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length) {", "+void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods) {", "-\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod);", "+\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, otherInheritedMethods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbd7d57b97de4992963658b2e4a84ca5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcheckForNameClash(currentMethod, inheritedMethod);", "-\t\t\t\t\tcheckAgainstInheritedMethods(currentMethod, matchingInherited, index + 1); // pass in the length of matching", "+\t\t\t\t\tcheckAgainstInheritedMethods(currentMethod, matchingInherited, index + 1, inherited); // pass in the length of matching", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcheckForInheritedNameClash(inheritedMethod, otherInheritedMethod);"]}], "num": 40950}
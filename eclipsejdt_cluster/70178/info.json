{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a36db00e575416ab9d43fad7aaa8b03", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f6de46d70566376e496a789f1a19b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding reportError(BlockScope scope)", "diff": ["-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)\r", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){\r", "+\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){\r", "+\t\t// will not support innerclass emulation inside delegate\r", "+\t\tbinding = scope.getField(delegateThis.type, this.tokens[0], this);\r", "+\t\tif (!binding.isValidBinding()) return super.reportError(scope);\r", "+\t\treturn checkFieldAccess(scope);\r", "+\t}\r", "+\r", "+\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){\r", "-\t\tif (!fieldBinding.isValidBinding()) {\r", "-\t\t\tif (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {\r", "-\t\t\t\t// manage the access to a private field of the enclosing type\r", "-\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "-\t\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);\r", "-\t\t\t\tif (binding.isValidBinding()) {\r", "-\t\t\t\t\treturn checkFieldAccess(scope);\t\t\t\t\t\t\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tif (!fieldBinding.isValidBinding()) return super.reportError(scope);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae18a9d39f74d98d72e2888cb0499ce0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding reportError(BlockScope scope)", "diff": ["-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)\r", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){\r", "+\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){\r", "+\t\t// will not support innerclass emulation inside delegate\r", "+\t\tbinding = scope.getField(delegateThis.type, this.tokens[0], this);\r", "+\t\tif (!binding.isValidBinding()) return super.reportError(scope);\r", "+\t\treturn checkFieldAccess(scope);\r", "+\t}\r", "+\r", "+\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){\r", "-\t\tif (!fieldBinding.isValidBinding()) {\r", "-\t\t\tif (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {\r", "-\t\t\t\t// manage the access to a private field of the enclosing type\r", "-\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "-\t\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);\r", "-\t\t\t\tif (binding.isValidBinding()) {\r", "-\t\t\t\t\treturn checkFieldAccess(scope);\t\t\t\t\t\t\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tif (!fieldBinding.isValidBinding()) return super.reportError(scope);\r"]}], "num": 70178}
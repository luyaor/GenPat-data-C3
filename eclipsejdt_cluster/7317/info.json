{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6be9346fe5dbaa8ebaa95f6ab9718098", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34690fe04c284b49dda9058a77c4df33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "3d73760dc9e0c52d27b28aa6b5ee7c1a07bc4ccf", "commitAfterChange": "510e79670ef0450a78c7882799bbb7cd266ab2e6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate TypeBinding cacheDerivedType(TypeBinding keyType, TypeBinding derivedType)", "signatureAfterChange": " \t \tprivate TypeBinding cacheDerivedType(TypeBinding keyType, TypeBinding derivedType)", "diff": ["-\t\tint i = 0, length = derivedTypes.length;", "-\t\twhile (i < length && derivedTypes[i] != null) {", "-\t\t\ti++;", "-\t\t}", "+\t\t// binary search for the *earliest* slot with a null reference. By design and construction, a null value will never be followed by a valid derived type.", "+\t\tint first, last,length = derivedTypes.length;", "+\t\tfirst = 0; last = length;", "+\t\tint i = (first + last) / 2;", "+\t\tdo {", "+\t\t\t  if (derivedTypes[i] == null) {", "+\t\t\t\t  if (i == first || i > 0 && derivedTypes[i - 1] != null)", "+\t\t\t\t\t  break;", "+\t\t\t\t  last = i - 1;", "+\t\t\t  } else { ", "+\t\t\t\t  first = i + 1;", "+\t\t\t  }", "+\t\t\t  i = (first + last) / 2;", "+\t\t} while (i < length && first <= last);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa69f087f96794276fa8f84f7f8cbb5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "db786a60645f0738c3e4c93c03142c921978dbe9", "commitAfterChange": "841e5207182e4cce5a1b83b4f81bf082fd69694f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public FieldBinding[] fields()", "signatureAfterChange": " public FieldBinding[] fields()", "diff": ["-\t\tfor (int i = 0, length = this.fields.length; i < length; i++) {", "-\t\t\tif (resolveTypeFor(this.fields[i]) == null) {", "+\t\tFieldBinding[] fieldsSnapshot = this.fields;", "+\t\tfor (int i = 0, length = fieldsSnapshot.length; i < length; i++) {", "+\t\t\tif (resolveTypeFor(fieldsSnapshot[i]) == null) {", "-\t\t\t\tif (resolvedFields == this.fields) {", "-\t\t\t\t\tSystem.arraycopy(this.fields, 0, resolvedFields = new FieldBinding[length], 0, length);", "+\t\t\t\tif (resolvedFields == fieldsSnapshot) {", "+\t\t\t\t\tSystem.arraycopy(fieldsSnapshot, 0, resolvedFields = new FieldBinding[length], 0, length);"]}], "num": 7317}
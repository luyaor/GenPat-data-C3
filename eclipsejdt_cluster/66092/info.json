{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d57c6bcb40b1b81bf1fd7d2b7d4f2f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad5a4bf9e24a462a88f9c605eef76737", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\tMethodBinding original = compileTimeDecl.original();", "+\t\t\tMethodBinding original = compileTimeDecl.shallowOriginal();", "+\t\t\tTypeBinding compileTypeReturn = original.isConstructor() ? original.declaringClass : original.returnType;", "-\t\t\t\t\t&& ((original.typeVariables() != Binding.NO_TYPE_VARIABLES && r.mentionsAny(original.typeVariables(), -1))", "+\t\t\t\t\t&& ((original.typeVariables() != Binding.NO_TYPE_VARIABLES && compileTypeReturn.mentionsAny(original.typeVariables(), -1))", "-\t\t\t\tSuspendedInferenceRecord prevInvocation = inferenceContext.enterPolyInvocation(reference, null/*no invocation arguments available*/);", "+\t\t\t\tSuspendedInferenceRecord prevInvocation = inferenceContext.enterPolyInvocation(reference, reference.createPseudoExpressions(functionType.parameters));", "-\t\t\t\t\tinferInvocationApplicability(inferenceContext, original, functionType.parameters, original.isConstructor()/*mimic a diamond?*/, inferenceContext.inferenceKind);", "+\t\t\t\t\tinferInvocationApplicability(inferenceContext, original, functionType.parameters, original.isConstructor()/*mimic a diamond?*/, reference.inferenceKind);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdf3f31c5ee98106b26b49879c48df56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8d1d658761d5e634e1f9986cdb54c46ecd8cbc2e", "commitAfterChange": "f4d9deb41a71301595419326392826169e31b674", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t\tif (this.tiebreakMethod == null) {", "-\t\t\tTypeVariableBinding[] originalVariables = this.originalMethod.typeVariables;", "-\t\t\tint length = originalVariables.length;", "-\t\t\tTypeBinding[] newArguments = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "-\t\t\t\tif (originalVariable.boundsCount() <= 1) {", "-\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(originalVariable.upperBound(), false /*do not force conversion of enclosing types*/);", "-\t\t\t\t} else {", "-\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(", "-\t\t\t\t\t\t\t// use an intersection type to retain full bound information", "-\t\t\t\t\t\t\tthis.environment.createWildcard(null, 0, originalVariable.superclass(), originalVariable.superInterfaces(), Wildcard.EXTENDS), false /*do not force conversion of enclosing types*/);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.tiebreakMethod = this.environment.createParameterizedGenericMethod(this.originalMethod, newArguments);", "-\t\t}", "+\t\tif (this.tiebreakMethod == null)", "+\t\t\tthis.tiebreakMethod = this.originalMethod.asRawMethod(this.environment);"]}], "num": 66092}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "465491793650ce80dca286857e29c0d7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d9560049e53ec4f2d9fdaef0e92ef56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8ae7ffc3de1911b69637cebec8d2d7f29a7dfa5", "commitAfterChange": "2118453a33ea6b9573a716041df3762f01e3c85f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void consumeMethodHeaderNameWithTypeParameters()", "signatureAfterChange": " protected void consumeMethodHeaderNameWithTypeParameters()", "diff": ["-\t// MethodHeaderName ::= Modifiersopt TypeParameters Type 'Identifier' '('", "-\tSourceMethodDeclaration md = new SourceMethodDeclaration(this.compilationUnit.compilationResult);", "-", "-\t//name", "-\tmd.selector = this.identifierStack[this.identifierPtr];", "-\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-\t//type", "-\tmd.returnType = getTypeReference(this.intStack[this.intPtr--]);", "-\t", "-\t// consume type parameters", "-\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "-\tthis.genericsPtr -= length;", "-\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, md.typeParameters = new TypeParameter[length], 0, length);", "-\t", "-\t//modifiers", "-\tmd.declarationSourceStart = this.intStack[this.intPtr--];", "-\tmd.modifiers = this.intStack[this.intPtr--];", "-\t// consume annotations", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\t(this.expressionPtr -= length) + 1, ", "-\t\t\tmd.annotations = new Annotation[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t}\t", "-\t// javadoc", "-\tmd.javadoc = this.javadoc;", "-\tthis.javadoc = null;", "-", "-\t//highlight starts at selector start", "-\tmd.sourceStart = (int) (selectorSourcePositions >>> 32);", "-\tmd.selectorSourceEnd = (int) selectorSourcePositions;", "-\tpushOnAstStack(md);", "-\tmd.sourceEnd = this.lParenPos;", "-\tmd.bodyStart = this.lParenPos+1;", "-\tthis.listLength = 0; // initialize this.listLength before reading parameters/throws", "-\t", "-\t// recovery", "-\tif (this.currentElement != null){", "-\t\tif (this.currentElement instanceof RecoveredType ", "-\t\t\t//|| md.modifiers != 0", "-\t\t\t|| (this.scanner.getLineNumber(md.returnType.sourceStart)", "-\t\t\t\t\t== this.scanner.getLineNumber(md.sourceStart))){", "-\t\t\tthis.lastCheckPoint = md.bodyStart;", "-\t\t\tthis.currentElement = this.currentElement.add(md, 0);", "-\t\t\tthis.lastIgnoredToken = -1;", "-\t\t} else {", "-\t\t\tthis.lastCheckPoint = md.sourceStart;", "-\t\t\tthis.restartRecovery = true;", "-\t\t}", "-\t}\t\t", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr];", "+\tint selectorSourceEnd = (int) selectorSourcePositions;", "+\tint currentAstPtr = this.astPtr;", "+\tsuper.consumeMethodHeaderNameWithTypeParameters();", "+\tif (this.astPtr > currentAstPtr) // if ast node was pushed on the ast stack", "+\t\tthis.sourceEnds.put(this.astStack[this.astPtr], selectorSourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7323548621e2768d08a1ffa023611cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8ae7ffc3de1911b69637cebec8d2d7f29a7dfa5", "commitAfterChange": "2118453a33ea6b9573a716041df3762f01e3c85f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void consumeMethodHeaderName()", "signatureAfterChange": " protected void consumeMethodHeaderName()", "diff": ["-\t// MethodHeaderName ::= Modifiersopt Type 'Identifier' '('", "-\tSourceMethodDeclaration md = new SourceMethodDeclaration(this.compilationUnit.compilationResult);", "-", "-\t//name", "-\tmd.selector = this.identifierStack[identifierPtr];", "-\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-\t//type", "-\tmd.returnType = getTypeReference(this.intStack[this.intPtr--]);", "-\t//modifiers", "-\tmd.declarationSourceStart = this.intStack[this.intPtr--];", "-\tmd.modifiers = this.intStack[this.intPtr--];", "-\t// consume annotations", "-\tint length;", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\t(this.expressionPtr -= length) + 1, ", "-\t\t\tmd.annotations = new Annotation[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t}", "-\t// javadoc", "-\tmd.javadoc = this.javadoc;", "-\tthis.javadoc = null;", "-", "-\t//highlight starts at selector start", "-\tmd.sourceStart = (int) (selectorSourcePositions >>> 32);", "-\tmd.selectorSourceEnd = (int) selectorSourcePositions;", "-\tpushOnAstStack(md);", "-\tmd.sourceEnd = this.lParenPos;", "-\tmd.bodyStart = this.lParenPos+1;", "-\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-\t", "-\t// recovery", "-\tif (this.currentElement != null){", "-\t\tif (this.currentElement instanceof RecoveredType ", "-\t\t\t//|| md.modifiers != 0", "-\t\t\t|| (this.scanner.getLineNumber(md.returnType.sourceStart)", "-\t\t\t\t\t== this.scanner.getLineNumber(md.sourceStart))){", "-\t\t\tthis.lastCheckPoint = md.bodyStart;", "-\t\t\tthis.currentElement = currentElement.add(md, 0);", "-\t\t\tthis.lastIgnoredToken = -1;\t\t\t", "-\t\t} else {", "-\t\t\tthis.lastCheckPoint = md.sourceStart;", "-\t\t\tthis.restartRecovery = true;", "-\t\t}", "-\t}\t\t", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr];", "+\tint selectorSourceEnd = (int) selectorSourcePositions;", "+\tint currentAstPtr = this.astPtr;", "+\tsuper.consumeMethodHeaderName();", "+\tif (this.astPtr > currentAstPtr) // if ast node was pushed on the ast stack", "+\t\tthis.sourceEnds.put(this.astStack[this.astPtr], selectorSourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85f1ba4ba39d2c79a6aa35dddd54716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "e8ae7ffc3de1911b69637cebec8d2d7f29a7dfa5", "commitAfterChange": "2118453a33ea6b9573a716041df3762f01e3c85f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void consumeConstructorHeaderNameWithTypeParameters()", "signatureAfterChange": " protected void consumeConstructorHeaderNameWithTypeParameters()", "diff": ["-", "-\t/* recovering - might be an empty message send */", "-\tif (this.currentElement != null){", "-\t\tif (this.lastIgnoredToken == TokenNamenew){ // was an allocation expression", "-\t\t\tthis.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position\t\t\t\t", "-\t\t\tthis.restartRecovery = true;", "-\t\t\treturn;", "-\t\t}", "-\t}", "-\t", "-\t// ConstructorHeaderName ::=  Modifiersopt TypeParameters 'Identifier' '('", "-\tSourceConstructorDeclaration cd = new SourceConstructorDeclaration(this.compilationUnit.compilationResult);", "-", "-\t//name -- this is not really revelant but we do .....", "-\tcd.selector = this.identifierStack[this.identifierPtr];", "-\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-", "-\t// consume type parameters", "-\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "-\tthis.genericsPtr -= length;", "-\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, cd.typeParameters = new TypeParameter[length], 0, length);", "-\t", "-\t//modifiers", "-\tcd.declarationSourceStart = this.intStack[this.intPtr--];", "-\tcd.modifiers = this.intStack[this.intPtr--];", "-\t// consume annotations", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\t(this.expressionPtr -= length) + 1, ", "-\t\t\tcd.annotations = new Annotation[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t}", "-\t// javadoc", "-\tcd.javadoc = this.javadoc;", "-\tthis.javadoc = null;", "-", "-\t//highlight starts at the selector starts", "-\tcd.sourceStart = (int) (selectorSourcePositions >>> 32);", "-\tcd.selectorSourceEnd = (int) selectorSourcePositions;", "-\tpushOnAstStack(cd);", "-\tcd.sourceEnd = this.lParenPos;", "-\tcd.bodyStart = this.lParenPos+1;", "-\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-", "-\t// recovery", "-\tif (this.currentElement != null){", "-\t\tthis.lastCheckPoint = cd.bodyStart;", "-\t\tif ((this.currentElement instanceof RecoveredType && this.lastIgnoredToken != TokenNameDOT)", "-\t\t\t|| cd.modifiers != 0){", "-\t\t\tthis.currentElement = this.currentElement.add(cd, 0);", "-\t\t\tthis.lastIgnoredToken = -1;", "-\t\t}", "-\t}\t", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr];", "+\tint selectorSourceEnd = (int) selectorSourcePositions;", "+\tint currentAstPtr = this.astPtr;", "+\tsuper.consumeConstructorHeaderNameWithTypeParameters();", "+\tif (this.astPtr > currentAstPtr) // if ast node was pushed on the ast stack", "+\t\tthis.sourceEnds.put(this.astStack[this.astPtr], selectorSourceEnd);"]}], "num": 69689}
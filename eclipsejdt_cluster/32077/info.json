{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63096b79ad447525379a6af1b9ff913d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8497ad57dac1c13d5ed4affb65d04a8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument)", "diff": ["-\tint nullStatus = argument.nullStatus(flowInfo, flowContext); // slight loss of precision: should also use the null info from the receiver.", "-\tint severity = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType, nullStatus);", "-\tswitch (severity) {", "-\t\tcase 2:", "-\t\t\t// immediate reporting:", "-\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, severity);", "-\t\t\treturn;", "-\t\tcase 1:", "-\t\t\tflowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);", "-\t\t\treturn;", "-\t}", "-\tif ((expectedType.tagBits & TagBits.AnnotationNonNull) != 0 && nullStatus != FlowInfo.NON_NULL) {", "+\tint nullStatus = argument.nullStatus(flowInfo, flowContext);", "+\tNullAnnotationStatus annotationStatus = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType, nullStatus);", "+\tif (annotationStatus.isDefiniteMismatch()) {", "+\t\t// immediate reporting:", "+\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, annotationStatus);", "+\t} else if (annotationStatus.isUnchecked()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db1ef52e67757fe6f2dde2b36a8cd66f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "04b1f777f72aaed365425972c86158987dc99f47", "commitAfterChange": "627e74400f5d869da7cccfccaf9f22c5e00c372a", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": "  \tprivate void findVariableName( \t\t\tchar[] token, \t\t\tchar[] qualifiedPackageName, \t\t\tchar[] qualifiedSourceName, \t\t\tchar[] sourceName, \t\t\tfinal TypeBinding typeBinding, \t\t\tchar[][] discouragedNames, \t\t\tfinal char[][] forbiddenNames, \t\t\tboolean forCollection, \t\t\tint dim, \t\t\tint kind, \t\t\tint modifiers)", "signatureAfterChange": "  \tprivate void findVariableName( \t\t\tchar[] token, \t\t\tchar[] qualifiedPackageName, \t\t\tchar[] qualifiedSourceName, \t\t\tchar[] sourceName, \t\t\tfinal TypeBinding typeBinding, \t\t\tchar[][] discouragedNames, \t\t\tfinal char[][] forbiddenNames, \t\t\tboolean forCollection, \t\t\tint dim, \t\t\tint kind)", "diff": ["-\t\t\tint kind,", "-\t\t\tint modifiers){", "+\t\t\tint kind){", "-\t\tswitch (kind) {", "-\t\t\tcase FIELD :", "-\t\t\t\tInternalNamingConventions.suggestFieldNames(", "-\t\t\t\t\tthis.javaProject,", "-\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tdim,", "-\t\t\t\t\tmodifiers,", "-\t\t\t\t\ttoken,", "-\t\t\t\t\tdiscouragedNames,", "-\t\t\t\t\tnamingRequestor);", "-\t\t\t\tbreak;", "-\t\t\tcase LOCAL :", "-\t\t\t\tInternalNamingConventions.suggestLocalVariableNames(", "-\t\t\t\t\tthis.javaProject,", "-\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tdim,", "-\t\t\t\t\ttoken,", "-\t\t\t\t\tdiscouragedNames,", "-\t\t\t\t\tnamingRequestor);", "-\t\t\t\tbreak;", "-\t\t\tcase ARGUMENT :", "-\t\t\t\tInternalNamingConventions.suggestArgumentNames(", "-\t\t\t\t\tthis.javaProject,", "-\t\t\t\t\tqualifiedPackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tdim,", "-\t\t\t\t\ttoken,", "-\t\t\t\t\tdiscouragedNames,", "-\t\t\t\t\tnamingRequestor);", "-\t\t\t\tbreak;", "-\t\t}", "+\t\tInternalNamingConventions.suggestVariableNames(", "+\t\t\t\tkind,", "+\t\t\t\tInternalNamingConventions.BK_SIMPLE_TYPE_NAME,", "+\t\t\t\tqualifiedSourceName,", "+\t\t\t\tthis.javaProject,", "+\t\t\t\tdim,", "+\t\t\t\ttoken,", "+\t\t\t\tdiscouragedNames,", "+\t\t\t\ttrue,", "+\t\t\t\tnamingRequestor);"]}], "num": 32077}
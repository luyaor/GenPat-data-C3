{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5629f4bff472202f3b798df839ddebf0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97a197dda9ac80aebe4aa44cfaa77171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java", "commitBeforeChange": "1969b0dd61291076568cfdfb1ff1ea784dc5a41b", "commitAfterChange": "e40af538d1995fb0d329df0a6e732c64ce0687f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\tfResultElements = new IJavaElement[] {getCompilationUnit()};\r", "-\tfor (int i = 0; i < fResultElements.length; i++) {\r", "-\t\tdelta.added(fResultElements[i]);\r", "-\t}\r", "-\taddDelta(delta);\r", "+\tfResultElements = new IJavaElement[] {unit};\r", "+\tif (unit.getParent().exists()) {\r", "+\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "+\t\t\tdelta.added(fResultElements[i]);\r", "+\t\t}\r", "+\t\taddDelta(delta);\r", "+\t} // else unit is created outside classpath\r", "+\t  // non-java resource delta will be notified by delta processor\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8122177472ac197d2c2fcd83df0b7f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void forceClasspathReload(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tflushClasspathProblemMarkers(false, true);", "-\t\t\tif (fileEntries == null)", "+\t\t\tif (fileEntries == null) {", "+\t\t\t}", "-\t\t\tif (getProject().isAccessible()) {", "-\t\t\t\tif (e.getJavaModelStatus().getException() instanceof CoreException) {", "-\t\t\t\t\t// happens if the .classpath could not be written to disk", "-\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.couldNotWriteClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "-\t\t\t\t}\t\t\t", "+\t\t\tif (!ResourcesPlugin.getWorkspace().isTreeLocked()) {", "+\t\t\t\tif (getProject().isAccessible()) {", "+\t\t\t\t\tif (e.getJavaModelStatus().getException() instanceof CoreException) {", "+\t\t\t\t\t\t// happens if the .classpath could not be written to disk", "+\t\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.couldNotWriteClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcreateClasspathProblemMarker(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", getElementName(), e.getMessage()))); //$NON-NLS-1$", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t}"]}], "num": 41716}
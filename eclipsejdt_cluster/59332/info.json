{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb7b3bbf15c090a4af3fcbd38e2fb909", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbfc5c0cdca4659ee92d6f0ae9de1ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/srcext/org/eclipse/jdt/apt/tests/external/annotations/batch/BatchProcessor.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void process()", "signatureAfterChange": " \tpublic void process()", "diff": ["-\t\tTIMES_CALLED++;", "-\t\t", "-\t\t// Since we're a batch processor, we should never be called more than once", "-\t\tif (TIMES_CALLED > 1) {", "-\t\t\tmsger.printError(\"BatchProcessor called more than once: \" + TIMES_CALLED);", "+\t\tif( TIMES_CALLED == 0 ){", "+\t\t\t", "+\t\t\tfinal Collection<String> expectedList = new HashSet<String>();", "+\t\t\texpectedList.add(\"p1.A\");", "+\t\t\texpectedList.add(\"p1.B\");", "+\t\t\texpectedList.add(\"p1.C\");", "+\t\t\texpectedList.add(\"p1.D\");", "+\t\t\tfinal Collection<TypeDeclaration> allTypes = _env.getSpecifiedTypeDeclarations();", "+\t\t\tfor( TypeDeclaration type : allTypes ){", "+\t\t\t\texpectedList.remove(type.getQualifiedName());", "+\t\t\t}", "+\t\t\t", "+\t\t\tif( !expectedList.isEmpty() ){", "+\t\t\t\tmsger.printError(\"failed to find type \" + expectedList);", "+\t\t\t}", "+\t\t\t", "+\t\t\tfinal Collection<String> expectedAnnotated = new HashSet<String>();", "+\t\t\texpectedList.add(\"p1.A\");", "+\t\t\texpectedList.add(\"p1.C\");", "+\t\t\tfinal AnnotationTypeDeclaration batchAnnoDecl = ", "+\t\t\t\t(AnnotationTypeDeclaration)_env.getTypeDeclaration(Batch.class.getName());", "+\t\t\tfinal Collection<Declaration> decls = _env.getDeclarationsAnnotatedWith(batchAnnoDecl);", "+\t\t\tfor( Declaration decl : decls  ){", "+\t\t\t\tif( decl instanceof TypeDeclaration )", "+\t\t\t\t\texpectedAnnotated.remove( ((TypeDeclaration)decl).getQualifiedName() );", "+\t\t\t}", "+\t\t\tif( !expectedAnnotated.isEmpty() ){", "+\t\t\t\tmsger.printError(\"failed to find annotated type \" + expectedAnnotated );\t\t\t", "+\t\t\t}", "+\t\t\t", "+\t\t\tmsger.printWarning(\"CompletedSuccessfully\");", "+\t\t}", "+\t\telse{", "+\t\t\tmsger.printWarning(\"Called \" + (TIMES_CALLED + 1) + \" times.\");", "-\t\tfinal Collection<String> expectedList = new HashSet<String>();", "-\t\texpectedList.add(\"p1.A\");", "-\t\texpectedList.add(\"p1.B\");", "-\t\texpectedList.add(\"p1.C\");", "-\t\tfinal Collection<TypeDeclaration> allTypes = _env.getSpecifiedTypeDeclarations();", "-\t\tfor( TypeDeclaration type : allTypes ){", "-\t\t\texpectedList.remove(type.getQualifiedName());", "-\t\t}", "-\t\t", "-\t\tif( !expectedList.isEmpty() ){", "-\t\t\tmsger.printError(\"failed to find type \" + expectedList);", "-\t\t}", "-\t\t", "-\t\tfinal Collection<String> expectedAnnotated = new HashSet<String>();", "-\t\texpectedList.add(\"p1.A\");", "-\t\texpectedList.add(\"p1.C\");", "-\t\tfinal AnnotationTypeDeclaration batchAnnoDecl = ", "-\t\t\t(AnnotationTypeDeclaration)_env.getTypeDeclaration(Batch.class.getName());", "-\t\tfinal Collection<Declaration> decls = _env.getDeclarationsAnnotatedWith(batchAnnoDecl);", "-\t\tfor( Declaration decl : decls  ){", "-\t\t\tif( decl instanceof TypeDeclaration )", "-\t\t\t\texpectedAnnotated.remove( ((TypeDeclaration)decl).getQualifiedName() );", "-\t\t}", "-\t\tif( !expectedAnnotated.isEmpty() ){", "-\t\t\tmsger.printError(\"failed to find annotated type \" + expectedAnnotated );\t\t\t", "-\t\t}", "-\t\t", "-\t\tmsger.printWarning(\"CompletedSuccessfully\");", "+\t\tTIMES_CALLED++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7c5f739837eba48c9ebc88aa73b1fd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8abf03ebc64c5dfaa72b42e56c19fb01c4c7861e", "commitAfterChange": "5b58321cc6529786ed20cb721ece7536a2d99088", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\t\tswitch(result.getNodeType()) {", "-\t\t\t\tcase ASTNode.ENUM_DECLARATION:", "-\t\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\t\tfinal TypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setDeclaration((EnumDeclaration) result);", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDecl = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t\t}", "+\t\t\t// annotation and enum type declarations are not returned by the parser inside method bodies", "+\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) result;", "+\t\t\tTypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "+\t\t\ttypeDeclarationStatement.setDeclaration(typeDeclaration);", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.internalGetTypeDeclaration();", "+\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION :", "-\t\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\t\treturn createFakeEmptyStatement(statement);", "-\t\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setDeclaration((AnnotationTypeDeclaration) result);", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDecl = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\t\treturn typeDeclarationStatement;", "-\t\t\t\t\t}", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "+\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());", "-\t\t\t\tdefault:", "-\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) result;", "-\t\t\t\t\tTypeDeclarationStatement typeDeclarationStatement = new TypeDeclarationStatement(this.ast);", "-\t\t\t\t\ttypeDeclarationStatement.setDeclaration(typeDeclaration);", "-\t\t\t\t\tswitch(this.ast.apiLevel) {", "-\t\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\t\t\tTypeDeclaration typeDecl = typeDeclarationStatement.internalGetTypeDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDecl.getStartPosition(), typeDecl.getLength());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase AST.JLS3 :", "-\t\t\t\t\t\t\tAbstractTypeDeclaration typeDeclAST3 = typeDeclarationStatement.getDeclaration();", "-\t\t\t\t\t\t\ttypeDeclarationStatement.setSourceRange(typeDeclAST3.getStartPosition(), typeDeclAST3.getLength());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn typeDeclarationStatement;", "+\t\t\treturn typeDeclarationStatement;"]}], "num": 59332}
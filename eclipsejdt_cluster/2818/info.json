{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6da9d76677dc09e174948e9d29e9eb5d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129c48a7fa9e791c0710ece1c99bef48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic boolean isStructureKnown() throws JavaModelException", "signatureAfterChange": " \tpublic LambdaExpression(JavaElement parent, String name, String interphase, int sourceStart, int sourceEnd, int arrowPosition)", "diff": ["+\t// Construction from memento", "+\tpublic LambdaExpression(JavaElement parent, String name, String interphase, int sourceStart, int sourceEnd, int arrowPosition) {", "+\t\tsuper(parent, name);", "+\t\tthis.sourceStart = sourceStart;", "+\t\tthis.sourceEnd = sourceEnd;", "+\t\tthis.arrowPosition = arrowPosition;", "+\t\tthis.interphase = interphase;", "+\t\tthis.elementInfo = makeTypeElementInfo(this, interphase, this.sourceStart = sourceStart, sourceEnd, arrowPosition);", "+\t\t// Method is in the process of being fabricated, will be attached shortly.", "-\t@Override", "-\tpublic boolean isStructureKnown() throws JavaModelException {", "-\t\treturn true;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "983e063ab003074f362f09725f6ccb1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic String[] getSuperInterfaceTypeSignatures() throws JavaModelException", "signatureAfterChange": " \tpublic LambdaExpression(JavaElement parent, String name, String interphase, int sourceStart, int sourceEnd, int arrowPosition, LambdaMethod lambdaMethod)", "diff": ["+\t// Construction from subtypes.", "+\tpublic LambdaExpression(JavaElement parent, String name, String interphase, int sourceStart, int sourceEnd, int arrowPosition, LambdaMethod lambdaMethod) {", "+\t\tsuper(parent, name);", "+\t\tthis.sourceStart = sourceStart;", "+\t\tthis.sourceEnd = sourceEnd;", "+\t\tthis.arrowPosition = arrowPosition;", "+\t\tthis.interphase = interphase;", "+\t\tthis.elementInfo = makeTypeElementInfo(this, interphase, this.sourceStart = sourceStart, sourceEnd, arrowPosition);", "+\t\tthis.elementInfo.children = new IJavaElement[] { this.lambdaMethod = lambdaMethod };", "-", "-\t@Override", "-\tpublic String[] getSuperInterfaceTypeSignatures() throws JavaModelException {", "-\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.READ_ONLY, this));", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06b679bd0c0b30527f2bb1feaa751e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tpublic boolean isAnnotation() throws JavaModelException", "signatureAfterChange": " \t \tpublic boolean equals(Object o)", "diff": ["+\t", "+\tpublic boolean equals(Object o) {", "+\t\tif (this == o)", "+\t\t\treturn true;", "+\t\t/* I see cases where equal lambdas are dismissed as unequal on account of working copy owner.", "+\t\t   This results in spurious failures. See JavaSearchBugs8Tests.testBug400905_0021()", "+\t\t   For now exclude the working copy owner and compare", "+\t\t*/", "+\t\tif (o instanceof LambdaExpression) {", "+\t\t\tLambdaExpression that = (LambdaExpression) o;", "+\t\t\tif (this.sourceStart != that.sourceStart)", "+\t\t\t\treturn false;", "+\t\t\tCompilationUnit thisCU = (CompilationUnit) this.getCompilationUnit();", "+\t\t\tCompilationUnit thatCU = (CompilationUnit) that.getCompilationUnit();", "+\t\t\treturn thisCU.getElementName().equals(thatCU.getElementName()) && thisCU.parent.equals(thatCU.parent);", "+\t\t}", "-", "-\t@Override", "-\tpublic boolean isAnnotation() throws JavaModelException {", "-\t\treturn false;", "-\t}"]}], "num": 2818}
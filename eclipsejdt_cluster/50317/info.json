{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32e674da5124f11dffe8047378386b05", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d2e1a9797f57d394c4cf022c984a30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\tpatterns = getAccessibleFiles();", "-\t\tif ((length = patterns == null ? 0 : patterns.length) > 0) {", "-\t\t\tbuffer.append(\"[accessible files:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tbuffer.append(patterns[i]);", "-\t\t\t\tif (i != length-1) {", "-\t\t\t\t\tbuffer.append('|');", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tbuffer.append(']');", "-\t\t}", "-\t\tpatterns = getNonAccessibleFiles();", "-\t\tif ((length = patterns == null ? 0 : patterns.length) > 0) {", "-\t\t\tbuffer.append(\"[non accessible files:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tbuffer.append(patterns[i]);", "-\t\t\t\tif (i != length-1) {", "-\t\t\t\t\tbuffer.append('|');", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif (this.accessRuleSet != null) {", "+\t\t\tbuffer.append('[');", "+\t\t\tbuffer.append(this.accessRuleSet);", "-\t\t\tbuffer.append(\"[combine access restrictions:\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(this.combineAccessRestrictions);", "+\t\t\tbuffer.append(\"[combine access rules:\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(this.combineAccessRules);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0176565b7195c097b0ea5e4ad26efdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "06734c9185cf2920c0b21b4263e30c1ea3cbc085", "commitAfterChange": "753a6a1eefe385cd875ac1931b6199ee406e2292", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\tbuffer.append(getDeclaringClass().getKey());", "+\t\t\tTypeBinding typeBinding = (TypeBinding) getDeclaringClass();", "+\t\t\ttypeBinding.appendKey(buffer);", "-\t\t\tITypeBinding[] types = getTypeParameters();", "-\t\t\tif (types.length > 0) {", "-\t\t\t\tbuffer.append('<');", "-\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "-\t\t\t\t\tTypeBinding typeParameter = (TypeBinding) types[i];", "-\t\t\t\t\ttypeParameter.appendParameterKey(buffer);", "-\t\t\t\t\tITypeBinding[] bounds = typeParameter.getTypeBounds();", "-\t\t\t\t\tfor (int j = 0, length = bounds.length; j < length; j++) {", "-\t\t\t\t\t\tTypeBinding bound = (TypeBinding) bounds[j];", "-\t\t\t\t\t\tbuffer.append(':');", "-\t\t\t\t\t\tbound.appendParameterKey(buffer);", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t}", "-\t\t\t\tbuffer.append('>');", "-\t\t\t}", "+\t\t\t", "+\t\t\t// only one of the type parameters or type arguments is non-empty at the same time", "+\t\t\ttypeBinding.appendTypeParameters(buffer, getTypeParameters());", "+\t\t\ttypeBinding.appendTypeArguments(buffer, getTypeArguments());", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92f51d98491d17f58645b0f5a084189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "4aa9bc6aa2cb666fb0721f9b95f7c7e969829a0c", "commitAfterChange": "39745a85705361f7e5b8ca890f80a07d85799adc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "signatureAfterChange": "\r \r boolean includes(char[] simpleName)", "diff": ["+\r", "+boolean includes(char[] simpleName) {\r", "+\tfor (int i = 0, l = simpleNameReferences.length; i < l; i++)\r", "+\t\tif (simpleName == simpleNameReferences[i]) return true;\r", "+\treturn false;\r", "+}\r", "-\tfor (int i = 0, a = simpleNames.length; i < a; i++) {\r", "-\t\tchar[] simpleName = simpleNames[i];\r", "-\t\tfor (int j = 0, b = simpleNameReferences.length; j < b; j++) {\r", "-\t\t\tif (simpleName == simpleNameReferences[j]) {\r", "-\t\t\t\tfor (int k = 0, c = qualifiedNames.length; k < c; k++) {\r", "-\t\t\t\t\tchar[][] qualifiedName = qualifiedNames[k];\r", "-\t\t\t\t\tfor (int l = 0, d = qualifiedReferences.length; l < d; l++) {\r", "-\t\t\t\t\t\tif (qualifiedName == qualifiedReferences[l]) {\r", "-\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\t\t\tSystem.out.println(\"  found match with \" //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\t+ new String(simpleName) + \" in \" + CharOperation.toString(qualifiedName)); //$NON-NLS-1$\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\treturn false;\r"]}], "num": 50317}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "681bfd13134872f31826c7b947e89370", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b962ab13452f2d2fddffea90106a3f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, DeltaProcessingState.ProjectUpdateInfo[] updates)", "signatureAfterChange": " \tprivate void validateClasspaths(IResourceDelta delta)", "diff": ["-\tprivate void updateClasspathMarkers(IResourceDelta delta, DeltaProcessingState.ProjectUpdateInfo[] updates) {", "-\t\t", "-\t\tMap preferredClasspaths = new HashMap(5);", "-\t\tMap preferredOutputs = new HashMap(5);", "+\tprivate void validateClasspaths(IResourceDelta delta) {", "-\t\t", "-\t\t// read .classpath files that have changed, and create markers if format is wrong or if an entry cannot be found", "-\t\tJavaModel.flushExternalFileCache();", "-\t\tupdateClasspathMarkers(delta, affectedProjects, preferredClasspaths, preferredOutputs); ", "+\t\tvalidateClasspaths(delta, affectedProjects); ", "-\t\t// update .classpath format markers for affected projects (dependent projects ", "+\t\t// validate classpaths of affected projects (dependent projects ", "-\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "-\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/); // allowed to reuse model cache", "-\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "-\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "-\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "-\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "-\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "-\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "-\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "-\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tIPath projectPath = project.getFullPath();", "+\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(); // allowed to reuse model cache", "+\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "+\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\tthis.state.addClasspathValidation(javaProject);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "+\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "+\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "+\t\t\t\t\t\t\t\t\tthis.state.addClasspathValidation(javaProject);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t// project no longer exists", "+\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t// project no longer exists", "-\t\t\t}", "-\t\t}", "-\t\tif (!affectedProjects.isEmpty() || updates != null) {", "-\t\t\t// update all cycle markers since the given delta may have affected cycles", "-\t\t\tif (updates != null) {", "-\t\t\t\tfor (int i = 0, length = updates.length; i < length; i++) {", "-\t\t\t\t\tDeltaProcessingState.ProjectUpdateInfo info = updates[i];", "-\t\t\t\t\tif (!preferredClasspaths.containsKey(info.project))", "-\t\t\t\t\t\tpreferredClasspaths.put(info.project, info.newResolvedPath);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\tJavaProject.updateAllCycleMarkers(preferredClasspaths);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project no longer exist"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e563519192e77d108bd6736ff28cdeac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "971e2fa24df05f7d9d41f2c3609bd94749f176a3", "commitAfterChange": "f83c2944a38669b110704525c995d9536dd29d76", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, DeltaProcessingState.ProjectUpdateInfo[] updates)", "diff": ["-\tprivate void updateClasspathMarkers(IResourceDelta delta) {", "+\tprivate void updateClasspathMarkers(IResourceDelta delta, DeltaProcessingState.ProjectUpdateInfo[] updates) {", "-\t\t\ttry {", "-\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "-\t\t\t\tint length = projects.length;", "-\t\t\t\tfor (int i = 0; i < length; i++){", "-\t\t\t\t\tIProject project = projects[i];", "-\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "-\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/); // allowed to reuse model cache", "-\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "-\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "-\t\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "-\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "-\t\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "-\t\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "-\t\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "-\t\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "+\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\t\tint length = projects.length;", "+\t\t\tfor (int i = 0; i < length; i++){", "+\t\t\t\tIProject project = projects[i];", "+\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIPath projectPath = project.getFullPath();", "+\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/); // allowed to reuse model cache", "+\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {", "+\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:", "+\t\t\t\t\t\t\t\t\tif (affectedProjects.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\t\t\t\t\tIPath libProjectPath = entryPath.removeLastSegments(entryPath.segmentCount()-1);", "+\t\t\t\t\t\t\t\t\tif (!libProjectPath.equals(projectPath) // if library contained in another project", "+\t\t\t\t\t\t\t\t\t\t\t&& affectedProjects.contains(libProjectPath)) {", "+\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t\t// project no longer exists", "+\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t// project no longer exists", "-", "-\t\t\t\t// update all cycle markers", "+\t\t\t}", "+\t\t}", "+\t\tif (!affectedProjects.isEmpty() || updates != null) {", "+\t\t\t// update all cycle markers since the given delta may have affected cycles", "+\t\t\tif (updates != null) {", "+\t\t\t\tfor (int i = 0, length = updates.length; i < length; i++) {", "+\t\t\t\t\tDeltaProcessingState.ProjectUpdateInfo info = updates[i];", "+\t\t\t\t\tif (!preferredClasspaths.containsKey(info.project))", "+\t\t\t\t\t\tpreferredClasspaths.put(info.project, info.newResolvedPath);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\ttry {", "-\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t// project no longer exists", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project no longer exist"]}], "num": 31510}
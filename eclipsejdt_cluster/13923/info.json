{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cee4ca90f1b795dcf1c8d0e4a9515722", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea989e420bf950cb83f1b3f475475ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tconstant = NotAConstant;", "-\tthis.resolvedType = type.resolveType(scope); // will check for null after args are resolved", "+\tthis.constant = NotAConstant;", "+\tthis.resolvedType = this.type.resolveType(scope); // will check for null after args are resolved", "-\tif (arguments != null) {", "+\tif (this.arguments != null) {", "-\t\tint length = arguments.length;", "+\t\tint length = this.arguments.length;", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null) {", "+\t\t\tif ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null) {", "-\t\tscope.problemReporter().cannotInstantiate(type, this.resolvedType);", "+\t\tscope.problemReporter().cannotInstantiate(this.type, this.resolvedType);", "-\tif (!(binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {", "-\t\tif (binding instanceof ProblemMethodBinding", "-\t\t\t&& ((ProblemMethodBinding) binding).problemId() == NotVisible) {", "+\tif (!(this.binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemMethodBinding", "+\t\t\t&& ((ProblemMethodBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\tif (delegateThis == null) {", "-\t\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\tif (this.delegateThis == null) {", "+\t\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)delegateThis.type, argumentTypes, this);", "+\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)this.delegateThis.type, argumentTypes, this);", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\t\tbinding = privateBinding;", "+\t\t\t\tthis.binding = privateBinding;", "-\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\tif (arguments != null) {", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "+\tif (this.arguments != null) {", "+\t\tfor (int i = 0; i < this.arguments.length; i++) {", "+\t\t\tthis.arguments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c0ec809c83a5ec8fc8f7f018e0f83ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "c99d716fa975f313809c9a758c093b0027fd52fe", "commitAfterChange": "cb63167d7ae8e51f68c8f4ae8680682adf1ffd54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public int match(Expression node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(FieldDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-public int match(Expression node, MatchingNodeSet nodeSet) { // interested in Assignment", "-\tif (this.pattern.writeAccess) {", "-\t\tif (this.pattern.readAccess) return IMPOSSIBLE_MATCH; // already checked the lhs in match(Reference...) before we reached here", "-", "-\t\tif (node instanceof Assignment) {", "-\t\t\tExpression lhs = ((Assignment) node).lhs;", "-\t\t\tif (lhs instanceof Reference)", "-\t\t\t\treturn matchReference((Reference) lhs, nodeSet, true);", "-\t\t}", "-\t} else if (this.pattern.readAccess) {", "-\t\tif (node instanceof Assignment && !(node instanceof CompoundAssignment)) {", "-\t\t\t// the lhs of a simple assignment may be added in match(Reference...) before we reach here", "-\t\t\t// for example, the fieldRef to 'this.x' in the statement this.x = x; is not considered a readAccess", "-\t\t\tExpression lhs = ((Assignment) node).lhs;", "-\t\t\tnodeSet.removePossibleMatch(lhs);", "-\t\t\tnodeSet.removeTrustedMatch(lhs);", "-\t\t}", "-\t}", "-\treturn IMPOSSIBLE_MATCH;", "-}", "+\t\t\t\tif (matchesTypeReference(((FieldPattern)this.pattern).typeSimpleName, node.type))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b60cb827a86a150c87caed13c1574f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = Constant.NotAConstant;", "+\t\tthis.constant = Constant.NotAConstant;", "-\t\tif (enclosingInstance != null) {", "-\t\t\tif (enclosingInstance instanceof CastExpression) {", "-\t\t\t\tenclosingInstance.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\tif (this.enclosingInstance != null) {", "+\t\t\tif (this.enclosingInstance instanceof CastExpression) {", "+\t\t\t\tthis.enclosingInstance.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\tif ((enclosingInstanceType = enclosingInstance.resolveType(scope)) == null){", "+\t\t\tif ((enclosingInstanceType = this.enclosingInstance.resolveType(scope)) == null){", "-\t\t\t\t\tenclosingInstance);", "+\t\t\t\t\tthis.enclosingInstance);", "-\t\t\t} else if (type instanceof QualifiedTypeReference) {", "-\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)type);", "+\t\t\t} else if (this.type instanceof QualifiedTypeReference) {", "+\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)this.type);", "-\t\t\t\treceiverType = ((SingleTypeReference) type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "+\t\t\t\treceiverType = ((SingleTypeReference) this.type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "-\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "+\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, this.enclosingInstance, enclosingInstanceType, receiverType);", "-\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(this.type, receiverType);", "-\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\tif (arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\t\t\targument.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\t\tif (isMethodUseDeprecated(binding, scope, true)) {", "+\t\t\t\tif (isMethodUseDeprecated(this.binding, scope, true)) {", "-\t\t\t\tcheckInvocationArguments(scope, null, allocationType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "-\t\t\t\tenclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "+\t\t\t\tthis.enclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "-\t\t} else if (type != null && receiverType.isEnum()) { // tolerate enum constant body", "-\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t} else if (this.type != null && receiverType.isEnum()) { // tolerate enum constant body", "+\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\tif (this.superTypeBinding.erasure().id == T_JavaLangEnum) {", "+\t\tif (this.superTypeBinding.erasure().id == TypeIds.T_JavaLangEnum) {", "-\t\t\tscope.problemReporter().superTypeCannotUseWildcard(anonymousType.binding, this.type, receiverType);", "+\t\t\tscope.problemReporter().superTypeCannotUseWildcard(this.anonymousType.binding, this.type, receiverType);", "-\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\tif (enclosingInstance != null) {", "+\t\tif (this.enclosingInstance != null) {", "-\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, (ReferenceBinding)receiverType);", "-\t\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, (ReferenceBinding)receiverType);", "+\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, targetEnclosing, enclosingInstance);", "-\t\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, targetEnclosing, this.enclosingInstance);", "+\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\t\tenclosingInstance.computeConversion(scope, targetEnclosing, enclosingInstanceType);", "+\t\t\tthis.enclosingInstance.computeConversion(scope, targetEnclosing, enclosingInstanceType);", "-\t\tbinding = anonymousType.createDefaultConstructorWithBinding(inheritedBinding);", "-\t\treturn this.resolvedType = anonymousType.binding; // 1.2 change", "+\t\tthis.binding = this.anonymousType.createDefaultConstructorWithBinding(inheritedBinding);", "+\t\treturn this.resolvedType = this.anonymousType.binding; // 1.2 change"]}], "num": 13923}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c9873f8166dda818bc596865f626bf0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13981ef5a4b0026912c18a896ce345de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "1740233a8dca1d707aa9811c9f07a7ace8f5d808", "commitAfterChange": "36542264af3396595138a00ba7efc11cead3cfc1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "signatureAfterChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "diff": ["+\t// substitute compilation units with working copies\r", "+\tHashMap wcPaths = new HashMap(); // a map from path to working copies\r", "+\tint wcLength;\r", "+\tIWorkingCopy[] workingCopies = this.getWokingCopies();\r", "+\tif (workingCopies != null && (wcLength = workingCopies.length) > 0) {\r", "+\t\tString[] newPaths = new String[wcLength];\r", "+\t\tfor (int i = 0; i < wcLength; i++) {\r", "+\t\t\tIWorkingCopy workingCopy = workingCopies[i];\r", "+\t\t\tString path = workingCopy.getOriginalElement().getPath().toString();\r", "+\t\t\twcPaths.put(path, workingCopy);\r", "+\t\t\tnewPaths[i] = path;\r", "+\t\t}\r", "+\t\tint potentialSubtypesLength = allPotentialSubTypes.length;\r", "+\t\tSystem.arraycopy(allPotentialSubTypes, 0, allPotentialSubTypes = new String[potentialSubtypesLength+wcLength], 0, potentialSubtypesLength);\r", "+\t\tSystem.arraycopy(newPaths, 0, allPotentialSubTypes, potentialSubtypesLength, wcLength);\r", "+\t}\r", "+\t\t\t\r", "-\t\t\tOpenable handle = \r", "-\t\t\t\tresourcePath.equals(focusPath) ? \r", "-\t\t\t\t\tfocusCU :\r", "-\t\t\t\t\tfactory.createOpenable(resourcePath);\r", "-\t\t\tif (handle == null) continue; // match is outside classpath\r", "+\t\t\tOpenable handle;\r", "+\t\t\tIWorkingCopy workingCopy = (IWorkingCopy)wcPaths.get(resourcePath);\r", "+\t\t\tif (workingCopy != null) {\r", "+\t\t\t\thandle = (Openable)workingCopy;\r", "+\t\t\t} else {\r", "+\t\t\t\thandle = \r", "+\t\t\t\t\tresourcePath.equals(focusPath) ? \r", "+\t\t\t\t\t\tfocusCU :\r", "+\t\t\t\t\t\tfactory.createOpenable(resourcePath);\r", "+\t\t\t\tif (handle == null) continue; // match is outside classpath\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba91014b819002fafeab1e117f205f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7c0534e311ca23dad63801edecab8ecfaf54c055", "commitAfterChange": "f0126485e71d6e9762ea26c839590b2bf7e1a885", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "signatureAfterChange": "\r private void buildFromPotentialSubtypes(String[] allPotentialSubTypes)", "diff": ["+\tIType focusType = this.getType();\r", "+\t\t\r", "+\tint length = allPotentialSubTypes.length;\r", "+\r", "+\t// inject the compilation unit of the focus type (so that types in\r", "+\t// this cu have special visibility permission (this is also usefull\r", "+\t// when the cu is a working copy)\r", "+\tOpenable focusCU = (Openable)focusType.getCompilationUnit();\r", "+\tString focusPath = null;\r", "+\tif (focusCU != null) {\r", "+\t\ttry {\r", "+\t\t\tIResource underlyingResource;\r", "+\t\t\tif (focusCU instanceof WorkingCopy) {\r", "+\t\t\t\tunderlyingResource = ((WorkingCopy)focusCU).getOriginalElement().getUnderlyingResource();\r", "+\t\t\t} else {\r", "+\t\t\t\tunderlyingResource = focusCU.getUnderlyingResource();\r", "+\t\t\t}\r", "+\t\t\tfocusPath = underlyingResource.getFullPath().toString();\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// type does not exist\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tif (length > 0) {\r", "+\t\t\tSystem.arraycopy(allPotentialSubTypes, 0, allPotentialSubTypes = new String[length+1], 0, length);\r", "+\t\t\tallPotentialSubTypes[length] = focusPath;\t\r", "+\t\t} else {\r", "+\t\t\tallPotentialSubTypes = new String[] {focusPath};\r", "+\t\t}\r", "+\t\tlength++;\r", "+\t}\r", "+\t\r", "-\tIType focusType = this.getType();\r", "-\r", "-\tfor (int i = 0, length = allPotentialSubTypes.length; i < length; i++) {\r", "+\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tOpenable handle = factory.createOpenable(resourcePath);\r", "-\t\t\tif (handle == null) continue; // match is outside classpath\r", "-\t\t\t// working copies take precedence over compilation units\r", "-\t\t\tObject workingCopy = this.handleToWorkingCopy.get(handle);\r", "-\t\t\tif (workingCopy != null) {\r", "-\t\t\t\thandle = (Openable)workingCopy;\r", "-\t\t\t}\r", "+\t\t\t// skip duplicate paths (e.g. if focus path was injected when it was already a potential subtype)\r", "+\t\t\tif (i > 0 && resourcePath.equals(allPotentialSubTypes[i-1])) continue;\r", "+\t\t\t\r", "+\t\t\tOpenable handle = \r", "+\t\t\t\tresourcePath.equals(focusPath) ? \r", "+\t\t\t\t\tfocusCU :\r", "+\t\t\t\t\tfactory.createOpenable(resourcePath);\r", "+\t\t\tif (handle == null) continue; // match is outside classpath\r", "+\t\t\t\t// build current project\r", "+\t\r", "+\t// build last project\r"]}], "num": 14898}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aff9b2623bc6307e6b372c823db99380", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "257e5a5a6f252c6750d0d6cf4c1c5a28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void match(MessageSend node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MessageSend node, MatchingNodeSet nodeSet)", "diff": ["-public void match(MessageSend node, MatchingNodeSet nodeSet) {", "-\tif (!this.pattern.findReferences) return;", "+public int match(MessageSend node, MatchingNodeSet nodeSet) {", "+\tif (!this.pattern.findReferences) return IMPOSSIBLE_MATCH;", "-\tif (!matchesName(this.pattern.selector, node.selector)) return;", "+\tif (!matchesName(this.pattern.selector, node.selector)) return IMPOSSIBLE_MATCH;", "-\t\tif (length != argsLength) return;", "+\t\tif (length != argsLength) return IMPOSSIBLE_MATCH;", "-\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a26373cc3f8e63bfa549dcfaf5ebc40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void match(AstNode node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(AstNode node, MatchingNodeSet nodeSet)", "diff": ["-public void match(AstNode node, MatchingNodeSet nodeSet) { // interested in ExplicitConstructorCall", "-\tif (!this.pattern.findReferences) return;", "-\tif (!(node instanceof ExplicitConstructorCall)) return;", "+public int match(AstNode node, MatchingNodeSet nodeSet) { // interested in ExplicitConstructorCall", "+\tif (!this.pattern.findReferences) return IMPOSSIBLE_MATCH;", "+\tif (!(node instanceof ExplicitConstructorCall)) return IMPOSSIBLE_MATCH;", "-\t\tif (length != argsLength) return;", "+\t\tif (length != argsLength) return IMPOSSIBLE_MATCH;", "-\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}], "num": 64842}
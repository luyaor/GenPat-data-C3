{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba1073465d168fb2487c95f4804caaf9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "296b27fe714743b41a444ff6c91233b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementRequestorAdapter.java", "commitBeforeChange": "7743b78aa7dc3095d1fff9fa367431511a686bf2", "commitAfterChange": "b58d1fc27f9ff610f636780f14ddc1ed4b984666", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void enterField(FieldInfo fieldInfo)", "signatureAfterChange": " \tpublic void enterField(FieldInfo fieldInfo)", "diff": ["-\t\tenterField(fieldInfo.declarationStart, fieldInfo.modifiers, fieldInfo.type, fieldInfo.name, fieldInfo.nameSourceStart, fieldInfo.nameSourceEnd);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543c7d1a2eb36c48f9aa97c9c1ba5b9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementRequestorAdapter.java", "commitBeforeChange": "7743b78aa7dc3095d1fff9fa367431511a686bf2", "commitAfterChange": "b58d1fc27f9ff610f636780f14ddc1ed4b984666", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void enterInterface(TypeInfo typeInfo)", "signatureAfterChange": "  \tpublic void enterInterface(TypeInfo typeInfo)", "diff": ["-\t\tenterInterface(typeInfo.declarationStart, typeInfo.modifiers, typeInfo.name, typeInfo.nameSourceStart, typeInfo.nameSourceEnd, typeInfo.superinterfaces, null, null);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a51ad7004d8e784b57636c5926cf4657", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementRequestorAdapter.java", "commitBeforeChange": "7743b78aa7dc3095d1fff9fa367431511a686bf2", "commitAfterChange": "b58d1fc27f9ff610f636780f14ddc1ed4b984666", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void enterClass(TypeInfo typeInfo)", "signatureAfterChange": "  \tpublic void enterClass(TypeInfo typeInfo)", "diff": ["-\t\tenterClass(typeInfo.declarationStart, typeInfo.modifiers, typeInfo.name, typeInfo.nameSourceStart, typeInfo.nameSourceEnd, typeInfo.superclass, typeInfo.superinterfaces, null, null);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6d4d443f2d23abef2a6efa407b4bf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "3c07df5b27f3cc9bb0f32fc7f0a08746454bdc9d", "commitAfterChange": "6de7ced9858f2246a9379efd0dd8834bcae6044c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   \tpublic static final Constant computeConstantOperation(Constant left, int leftId, int operator, Constant right, int rightId)", "signatureAfterChange": "   \tpublic static final Constant computeConstantOperation(Constant left, int leftId, int operator, Constant right, int rightId)", "diff": ["-\t\t\tcase AND\t\t: return computeConstantOperationAND\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase AND_AND\t: return computeConstantOperationAND_AND\t(left,leftId,operator,right,rightId);", "-\t\t\tcase DIVIDE \t: return computeConstantOperationDIVIDE\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase GREATER\t: return computeConstantOperationGREATER\t(left,leftId,operator,right,rightId);", "-\t\t\tcase GREATER_EQUAL\t: return computeConstantOperationGREATER_EQUAL(left,leftId,operator,right,rightId);", "-\t\t\tcase LEFT_SHIFT\t: return computeConstantOperationLEFT_SHIFT\t(left,leftId,operator,right,rightId);", "-\t\t\tcase LESS\t\t: return computeConstantOperationLESS\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase LESS_EQUAL\t: return computeConstantOperationLESS_EQUAL\t(left,leftId,operator,right,rightId);", "-\t\t\tcase MINUS\t\t: return computeConstantOperationMINUS\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase MULTIPLY\t: return computeConstantOperationMULTIPLY\t(left,leftId,operator,right,rightId);", "-\t\t\tcase OR\t\t\t: return computeConstantOperationOR\t\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase OR_OR\t\t: return computeConstantOperationOR_OR\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase PLUS\t\t: return computeConstantOperationPLUS\t\t(left,leftId,operator,right,rightId);", "-\t\t\tcase REMAINDER\t: return computeConstantOperationREMAINDER\t(left,leftId,operator,right,rightId);", "-\t\t\tcase RIGHT_SHIFT: return computeConstantOperationRIGHT_SHIFT(left,leftId,operator,right,rightId);", "-\t\t\tcase UNSIGNED_RIGHT_SHIFT: return computeConstantOperationUNSIGNED_RIGHT_SHIFT(left,leftId,operator,right,rightId);", "-\t\t\tcase XOR\t\t: return computeConstantOperationXOR\t\t(left,leftId,operator,right,rightId);", "+\t\t\tcase AND\t\t: return computeConstantOperationAND\t\t(left,leftId,right,rightId);", "+\t\t\tcase AND_AND\t: return computeConstantOperationAND_AND\t(left,leftId,right,rightId);", "+\t\t\tcase DIVIDE \t: return computeConstantOperationDIVIDE\t\t(left,leftId,right,rightId);", "+\t\t\tcase GREATER\t: return computeConstantOperationGREATER\t(left,leftId,right,rightId);", "+\t\t\tcase GREATER_EQUAL\t: return computeConstantOperationGREATER_EQUAL(left,leftId,right,rightId);", "+\t\t\tcase LEFT_SHIFT\t: return computeConstantOperationLEFT_SHIFT\t(left,leftId,right,rightId);", "+\t\t\tcase LESS\t\t: return computeConstantOperationLESS\t\t(left,leftId,right,rightId);", "+\t\t\tcase LESS_EQUAL\t: return computeConstantOperationLESS_EQUAL\t(left,leftId,right,rightId);", "+\t\t\tcase MINUS\t\t: return computeConstantOperationMINUS\t\t(left,leftId,right,rightId);", "+\t\t\tcase MULTIPLY\t: return computeConstantOperationMULTIPLY\t(left,leftId,right,rightId);", "+\t\t\tcase OR\t\t\t: return computeConstantOperationOR\t\t\t(left,leftId,right,rightId);", "+\t\t\tcase OR_OR\t\t: return computeConstantOperationOR_OR\t\t(left,leftId,right,rightId);", "+\t\t\tcase PLUS\t\t: return computeConstantOperationPLUS\t\t(left,leftId,right,rightId);", "+\t\t\tcase REMAINDER\t: return computeConstantOperationREMAINDER\t(left,leftId,right,rightId);", "+\t\t\tcase RIGHT_SHIFT: return computeConstantOperationRIGHT_SHIFT(left,leftId,right,rightId);", "+\t\t\tcase UNSIGNED_RIGHT_SHIFT: return computeConstantOperationUNSIGNED_RIGHT_SHIFT(left,leftId,right,rightId);", "+\t\t\tcase XOR\t\t: return computeConstantOperationXOR\t\t(left,leftId,right,rightId);"]}], "num": 7804}
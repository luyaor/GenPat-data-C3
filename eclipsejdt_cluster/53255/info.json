{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffe9795743dcd96354c700d3103ae3a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157f4aec5c84817eb3b6fb4b74c70416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public CodeFormatter(ConfigurableOption[] settings)", "signatureAfterChange": "\r \tpublic CodeFormatter(Map settings)", "diff": ["- */\r", "-public CodeFormatter(ConfigurableOption[] settings) {\r", "- // initialize internal state\r", "- constructionsCount = 0;\r", "- constructions = new int[10];\r", "- currentLineIndentationLevel = indentationLevel = initialIndentationLevel;\r", "- currentCommentOffset = -1;\r", "- \r", "- // initialize primary and secondary scanners\r", "- scanner = new Scanner(true,true);  // regular scanner for forming lines\r", "- scanner.recordLineSeparator = true;  // to remind of the position of the beginning of the line.\r", "- splitScanner = new Scanner(true,true); // secondary scanner to split long lines formed by primary scanning\r", "- // initialize current line buffer\r", "- currentLineBuffer = new StringBuffer();\r", "- this.options = new FormatterOptions(settings);\r", "-}\r", "+\t */\r", "+\tpublic CodeFormatter(Map settings) {\r", "+\t\t// initialize internal state\r", "+\t\tconstructionsCount = 0;\r", "+\t\tconstructions = new int[10];\r", "+\t\tcurrentLineIndentationLevel = indentationLevel = initialIndentationLevel;\r", "+\t\tcurrentCommentOffset = -1;\r", "+\t\t// initialize primary and secondary scanners\r", "+\t\tscanner = new Scanner(true, true); // regular scanner for forming lines\r", "+\t\tscanner.recordLineSeparator = true;\r", "+\t\t// to remind of the position of the beginning of the line.\r", "+\t\tsplitScanner = new Scanner(true, true);\r", "+\t\t// secondary scanner to split long lines formed by primary scanning\r", "+\t\t// initialize current line buffer\r", "+\t\tcurrentLineBuffer = new StringBuffer();\r", "+\t\tthis.options = new FormatterOptions(settings);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3dd9f2f3c290e359a04b71ffbc786e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void reportMethodDeclaration(\r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportMethodDeclaration(\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportMethodDeclaration(\r", "-\tAbstractMethodDeclaration methodDeclaration, \r", "-\tchar[][] definingTypeNames,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// create method handle\r", "-\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t// compute source positions of the selector \r", "-\tScanner scanner = parser.scanner;\r", "-\tint nameSourceStart = methodDeclaration.sourceStart;\r", "-\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "-\ttry {\r", "-\t\tscanner.getNextToken();\r", "-\t} catch(InvalidInputException e) {\r", "-\t}\r", "-\tint nameSourceEnd = scanner.currentPosition-1;\r", "-\r", "-\t// accept method declaration\r", "-\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "-}\r", "+\t */\r", "+\tpublic void reportMethodDeclaration(\r", "+\t\tAbstractMethodDeclaration methodDeclaration,\r", "+\t\tchar[][] definingTypeNames,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// create method handle\r", "+\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\r", "+\t\t// compute source positions of the selector \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tint nameSourceStart = methodDeclaration.sourceStart;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(nameSourceStart, methodDeclaration.sourceEnd);\r", "+\t\ttry {\r", "+\t\t\tscanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t}\r", "+\t\tint nameSourceEnd = scanner.currentPosition - 1;\r", "+\r", "+\t\t// accept method declaration\r", "+\t\tthis.report(nameSourceStart, nameSourceEnd, method, accuracy);\r", "+\t}\r"]}], "num": 53255}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e96835d31df685cb0c34a5864a32d4b9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17f6ef347771fee945b0e4f2a1a51603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "3861d4cfff200f4a20f9b2846cf8819b2fe85539", "commitAfterChange": "1ab7b833f2e8fe1eaa17a4c72f8b9580f4ae1592", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tprotected void search(String patternString, int searchFor, int limitTo, boolean rawMatch, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "signatureAfterChange": " \tprotected void search(String patternString, int searchFor, int limitTo, int matchRule, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "diff": ["-\tprotected void search(String patternString, int searchFor, int limitTo, boolean rawMatch, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {", "-\t\tint matchMode = patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1", "-\t\t\t? SearchPattern.R_PATTERN_MATCH", "-\t\t\t: SearchPattern.R_EXACT_MATCH;", "-\t\tint matchRule = matchMode | SearchPattern.R_CASE_SENSITIVE;", "-\t\tif (rawMatch) matchRule |= SearchPattern.R_ERASURE_MATCH;", "+\tprotected void search(String patternString, int searchFor, int limitTo, int matchRule, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException {", "+\t\tif (patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1)", "+\t\t\tmatchRule |= SearchPattern.R_PATTERN_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec25def373ce2abc1e8782a7182a9c41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void search(IWorkspace workspace, String patternString, int searchFor, int limitTo, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "signatureAfterChange": " \tpublic void search(IWorkspace workspace, String patternString, int searchFor, int limitTo, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "diff": ["-\t\tsearch(workspace, createSearchPattern(patternString, searchFor, limitTo, true), scope, resultCollector);", "+\t\ttry {", "+\t\t\tint matchMode = patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1", "+\t\t\t\t? SearchPattern.R_PATTERN_MATCH", "+\t\t\t\t: SearchPattern.R_EXACT_MATCH;", "+\t\t\tsearch(", "+\t\t\t\tSearchPattern.createPattern(patternString, searchFor, limitTo, matchMode, true), ", "+\t\t\t\tnew SearchParticipant[] {getDefaultSearchParticipant()}, ", "+\t\t\t\tscope, ", "+\t\t\t\tnew ResultCollectorAdapter(resultCollector), ", "+\t\t\t\tresultCollector.getProgressMonitor());", "+\t\t} catch (CoreException e) {", "+\t\t\tif (e instanceof JavaModelException) {", "+\t\t\t\tthrow (JavaModelException) e;", "+\t\t\t} else {", "+\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t}", "+\t\t}"]}], "num": 26930}
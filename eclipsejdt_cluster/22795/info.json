{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d48c490aa96bc92f0c48ff82532fc251", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a7bc5da911f4e3ba98603fbf60d516", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "fc050f32403d0f4e404aa7bf852058bde7010c9c", "commitAfterChange": "9aa23d789697e75fd166c7fcd35afb3e194c7006", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType)", "signatureAfterChange": " private MethodBinding findCloseMethod(final LocalDeclaration resource, LocalVariableBinding resourceBinding)", "diff": ["-\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "-\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+private MethodBinding findCloseMethod(final LocalDeclaration resource, LocalVariableBinding resourceBinding) {", "+\tMethodBinding closeMethod = null;", "+\tTypeBinding type = resourceBinding.type;", "+\tif (type != null && type.isValidBinding()) {", "+\t\tReferenceBinding binding = (ReferenceBinding) type;", "+\t\tcloseMethod = binding.getExactMethod(ConstantPool.Close, new TypeBinding [0], this.scope.compilationUnitScope()); // scope needs to be tighter", "+\t\tif(closeMethod == null) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t// extending from multiple interfaces.", "+\t\t\tInvocationSite site = new InvocationSite.EmptyWithAstNode(resource);", "+\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t}", "+\t}", "+\treturn closeMethod;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66406d9b17cbcef42c9199522f8bb891", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "71fc05771cd5c7e9f570121d2a71e73243d51c9b", "commitAfterChange": "2afe0ff8ea6baebe3984eac1cae395cec750c15a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\t\t\t\tpublic boolean isTypeAccess()", "signatureAfterChange": " private MethodBinding findCloseMethod(final LocalDeclaration resource, LocalVariableBinding resourceBinding)", "diff": ["-\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "-\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+private MethodBinding findCloseMethod(final LocalDeclaration resource, LocalVariableBinding resourceBinding) {", "+\tMethodBinding closeMethod = null;", "+\tTypeBinding type = resourceBinding.type;", "+\tif (type != null && type.isValidBinding()) {", "+\t\tReferenceBinding binding = (ReferenceBinding) type;", "+\t\tcloseMethod = binding.getExactMethod(ConstantPool.Close, new TypeBinding [0], this.scope.compilationUnitScope()); // scope needs to be tighter", "+\t\tif(closeMethod == null) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t// extending from multiple interfaces.", "+\t\t\tInvocationSite site = new InvocationSite.EmptyWithAstNode(resource);", "+\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t}", "+\t}", "+\treturn closeMethod;", "+}"]}], "num": 22795}
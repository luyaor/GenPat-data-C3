{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59ca377dcc7d980dc3efba0d2025dfc1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12e5b8a1701aaf75e5e7666aa3a6e964", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "commitAfterChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-        \tMethodBinding compileTimeDeclaration = isMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "-        \t\tscope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "+        \tMethodBinding compileTimeDeclaration = ", "+        \t\t\tthis.exactMethodBinding != null ? this.exactMethodBinding :", "+        \t\t\t\t\t\t\tisMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "+        \t\t\t\t\t\t\t\t\t\t\t\tscope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "-        \t       OR there are no potentially compatible compile time declaration ...", "+        \t       OR there is no potentially compatible compile time declaration ...", "-        \tcompileTimeDeclaration = scope.getMethod(this.receiverType, this.selector, descriptorParameters, this);", "+        \tcompileTimeDeclaration = this.exactMethodBinding != null ? this.exactMethodBinding : scope.getMethod(this.receiverType, this.selector, descriptorParameters, this);", "-              \t   OR there are no potentially compatible compile time declaration ...", "+              \t   OR there is no potentially compatible compile time declaration ...", "+        \tthis.freeParameters = null; // not used after method lookup"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98cf9602ca2c168f1eea18eef3533c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "dec6a2f0da20e1df11b1bec260506ef56476e2e8", "commitAfterChange": "543ead2a7b5176c7eb8059daf958f5e6badc53ee", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-\t\t", "+", "+        final boolean isConstructorRef = isConstructorReference();", "+\t\tif (isConstructorRef && this.receiverType.isArrayType()) {", "+\t\t\tfinal TypeBinding leafComponentType = this.receiverType.leafComponentType();", "+\t\t\tif (!leafComponentType.isReifiable()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+", "-        final boolean isMethodReference = isMethodReference();", "-        \tMethodBinding compileTimeDeclaration = ", "-        \t\t\tthis.exactMethodBinding != null ? this.exactMethodBinding :", "-        \t\t\t\t\t\t\tisMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "-        \t\t\t\t\t\t\t\t\t\t\t\tscope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "+\t\t\tMethodBinding compileTimeDeclaration = this.exactMethodBinding != null ? this.exactMethodBinding : isConstructorRef", "+\t\t\t\t\t\t\t? scope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this)", "+\t\t\t\t\t\t\t: scope.getMethod(this.receiverType, this.selector, descriptorParameters, this);"]}], "num": 23091}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3942ef6cd771b093fafdf5c5c96b576d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dbafc5436c9701f92abde8b6a4eb54f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "47771900cbbb5bb3caa27909268dd0af98465bcb", "commitAfterChange": "0db4739740c3aeec96e03a4d79d729f0f32d8640", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tif (resolver != null) {", "-\t\t\t\tfor (int i = 1, length = resolver.totalUnits; i < length; i++) {", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = resolver.unitsToProcess[i];", "-\t\t\t\t\tif (parsedUnit.scope != null) ", "-\t\t\t\t\t\tparsedUnit.scope.faultInTypes(); // force resolution of signatures, so clients can query DOM AST", "-\t\t\t\t\tparsedUnit.cleanUp();", "-\t\t\t\t}", "-\t\t\t}", "+//\t\t\tif (resolver != null) {", "+//\t\t\t\tfor (int i = 1, length = resolver.totalUnits; i < length; i++) {", "+//\t\t\t\t\tCompilationUnitDeclaration parsedUnit = resolver.unitsToProcess[i];", "+//\t\t\t\t\tif (parsedUnit.scope != null) ", "+//\t\t\t\t\t\tparsedUnit.scope.faultInTypes(); // force resolution of signatures, so clients can query DOM AST", "+//\t\t\t\t\tparsedUnit.cleanUp();", "+//\t\t\t\t}", "+//\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46c34f169d90a3cb7cb5f3d963963f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "118ee521cfdcc4c0dc2695f3fbdd71ddaf062473", "commitAfterChange": "6f4e043da51c9d031e62554df1c147116249ac96", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "\r \r public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\t\tif (secondaryTypesToRemove != null) { // delayed deleting secondary types until the end of the compile loop\r", "-\t\t\t\tfor (int i = 0, length = secondaryTypesToRemove.size(); i < length; i++)\r", "-\t\t\t\t\tremoveClassFile((IPath) secondaryTypesToRemove.get(i));\r", "-\t\t\t\tthis.secondaryTypesToRemove = null;\r", "-\t\t\t\tif (previousLocations != null && previousLocations.size() > 1)\r", "-\t\t\t\t\tthis.previousLocations = null; // cannot optimize recompile case when a secondary type is deleted\r", "-\t\t\t}\r", "+\t\t\tremoveSecondaryTypes();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1e72a6d91c8b5dcbe402f8d813cddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AnnotationTypeDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic StringBuffer printBody(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printBody(int indent, StringBuffer output)", "diff": ["-\t\tif (this.enums != null) {", "-\t\t\tfor (int i = 0; i < this.enums.length; i++) {", "-\t\t\t\tif (this.enums[i] != null) {", "-\t\t\t\t\toutput.append('\\n');", "-\t\t\t\t\tthis.enums[i].print(indent + 1, output);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}], "num": 49477}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffb347358c5598ef4788270a8198bcb3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6d8fde1780f743c0c073d0f18de707", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0f841a0360389f0f91aef636ca6531276c4a074d", "commitAfterChange": "4e57894c46e6fdc6da393db7e5519e070814fd68", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, int flags)", "diff": ["-\tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner) {", "-\t", "+\tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, int flags) {", "+", "-\t\t\t\t\tchar[] fileName = unit.compilationResult.getFileName();\t\t\t\t\t", "+\t\t\t\t\tchar[] fileName = unit.compilationResult.getFileName();", "+\t\t\t\t\t\tast.setFlag(flags | AST.RESOLVED_BINDINGS);", "-\t\t\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables);", "+\t\t\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables, (flags & ICompilationUnit.ENABLE_BINDINGS_RECOVERY) != 0);", "-\t\t\t\t\t\t", "+", "-\t\t\t\t\t\t", "+", "-\t\t\t\t\t} ", "-\t\t\t\t\t", "+\t\t\t\t\t}", "+", "-\t\t\t\t\t", "+", "-\t\t\t\t\t\t", "-/*\tCode used to fault in types and resolve which is no longer necessary as all questions asked to forward references are", "- * lazily resolved.", "- * Code used to be:", "-\t\t\t\t\tif (this.requestedKeys.containsKey(fileName) || this.requestedSources.containsKey(fileName)) {", "-\t\t\t\t\t   ...", "-\t\t\t\t\t} else {", "-", "-\t\t\t\t\t\tif (unit.scope != null)", "-\t\t\t\t\t\t\tunit.scope.faultInTypes();// still force resolution of signatures, so clients can query DOM AST", "-\t\t\t\t", "-\t\t\t\t\t\t// the following ensures that all type, method and field bindings are correctly initialized", "-\t\t\t\t\t\t// as they may be needed by further units", "-\t\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=111822)", "-\t\t\t\t\t\tunit.resolve();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// note that if this has a performance penalty on clients, the above code should be removed", "-\t\t\t\t\t\t// the following patch would workaround bug 111822:", "-", "-Index: FieldReference.java", "-===================================================================", "-RCS file: /cvsroot/eclipse/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java,v", "-retrieving revision 1.87", "-diff -u -r1.87 FieldReference.java", "---- FieldReference.java\t24 Sep 2005 15:23:46 -0000\t1.87", "-+++ FieldReference.java\t7 Oct 2005 13:46:12 -0000", "-@@ -407,7 +407,14 @@", "- ", "- \t\tFieldBinding originalField = binding.original();", "- \t\tSourceTypeBinding sourceType = (SourceTypeBinding) originalField.declaringClass;", "--\t\tTypeDeclaration typeDecl = sourceType.scope.referenceContext;", "-+\t\tClassScope classScope = sourceType.scope;", "-+\t\tif (classScope == null) {", "-+\t\t\t// Non compiler clients may not have resolved enough of the unit when processing it, and", "-+\t\t\t// scopes got cleaned. Assuming these clients thus do not care about constant info, will simply", "-+\t\t\t// pretend it is not a constant.", "-+\t\t\treturn NotAConstant;", "-+\t\t}", "-+\t\tTypeDeclaration typeDecl = classScope.referenceContext;", "- \t\tFieldDeclaration fieldDecl = typeDecl.declarationOf(originalField);", "- ", "- \t\tfieldDecl.resolve(originalField.isStatic() //side effect on binding ", "-*/\t\t\t\t\t", "-\t\t\t", "+", "-\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(this.lookupEnvironment, owner, this.bindingTables);", "+\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(this.lookupEnvironment, owner, this.bindingTables, (flags & ICompilationUnit.ENABLE_BINDINGS_RECOVERY) != 0);", "-            astRequestor.compilationUnitResolver = null;", "+\t\t\tastRequestor.compilationUnitResolver = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab1ee52971a0be5b3ad383f409261656", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "f457a8cb04688ff706586b5f45779b436022bf9c", "commitAfterChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner)", "diff": ["-\t\t\t\t\t\t", "+", "+\t\t\t\t\t\t// requested AST", "+\t\t\t\t\t\t// requested binding", "-\t\t\t\t\t\t\tunit.scope.faultInTypes(); // still force resolution of signatures, so clients can query DOM AST", "+\t\t\t\t\t\t\tunit.scope.faultInTypes();// still force resolution of signatures, so clients can query DOM AST", "+\t\t\t\t", "+\t\t\t\t\t\t// the following ensures that all type, method and field bindings are correctly initialized", "+\t\t\t\t\t\t// as they may be needed by further units", "+\t\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=111822)", "+\t\t\t\t\t\tunit.resolve();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// note that if this has a performance penalty on clients, the above code should be removed", "+\t\t\t\t\t\t// the following patch would workaround bug 111822:", "+/*", "+Index: FieldReference.java", "+===================================================================", "+RCS file: /cvsroot/eclipse/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java,v", "+retrieving revision 1.87", "+diff -u -r1.87 FieldReference.java", "+--- FieldReference.java\t24 Sep 2005 15:23:46 -0000\t1.87", "++++ FieldReference.java\t7 Oct 2005 13:46:12 -0000", "+@@ -407,7 +407,14 @@", "+ ", "+ \t\tFieldBinding originalField = binding.original();", "+ \t\tSourceTypeBinding sourceType = (SourceTypeBinding) originalField.declaringClass;", "+-\t\tTypeDeclaration typeDecl = sourceType.scope.referenceContext;", "++\t\tClassScope classScope = sourceType.scope;", "++\t\tif (classScope == null) {", "++\t\t\t// Non compiler clients may not have resolved enough of the unit when processing it, and", "++\t\t\t// scopes got cleaned. Assuming these clients thus do not care about constant info, will simply", "++\t\t\t// pretend it is not a constant.", "++\t\t\treturn NotAConstant;", "++\t\t}", "++\t\tTypeDeclaration typeDecl = classScope.referenceContext;", "+ \t\tFieldDeclaration fieldDecl = typeDecl.declarationOf(originalField);", "+ ", "+ \t\tfieldDecl.resolve(originalField.isStatic() //side effect on binding ", "+*/\t\t\t\t\t"]}], "num": 29094}
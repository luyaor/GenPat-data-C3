{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b7314fc25283f4c3d3b892661abe229", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f1e5681ff8df5471c6c66901de839e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "3c97a12fe797bc8f1a4e22eb2cfe11932a52f122", "commitAfterChange": "cb3bfb0879489be8fed32e037d62f37c21d37c6b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " MethodBinding computeSubstituteMethod(MethodBinding inheritedMethod, MethodBinding currentMethod)", "signatureAfterChange": " MethodBinding computeSubstituteMethod(MethodBinding inheritedMethod, MethodBinding currentMethod)", "diff": ["+\tif (length > 0 && inheritedLength != length) return inheritedMethod;", "-\tfor (int i = 0; i < inheritedLength; i++)", "-\t    if (inheritedTypeVariables[i].boundCheck(substitute, arguments[i]) != TypeConstants.OK)", "-\t    \treturn inheritedMethod; // incompatible due to bound check", "+", "+\t// interface I { <T> void foo(T t); }", "+\t// class X implements I { public <T extends I> void foo(T t) {} }", "+\t// for the above case, we do not want to answer the substitute method since its not a match", "+\tfor (int i = 0; i < inheritedLength; i++) {", "+\t\tTypeVariableBinding inheritedTypeVariable = inheritedTypeVariables[i];", "+\t\tTypeBinding argument = arguments[i];", "+\t\tif (argument instanceof TypeVariableBinding) {", "+\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) argument;", "+\t\t\tif (Scope.substitute(substitute, inheritedTypeVariable.superclass) != typeVariable.superclass)  ", "+\t\t\t\treturn inheritedMethod; // not a match", "+\t\t\tint interfaceLength = inheritedTypeVariable.superInterfaces.length;", "+\t\t\tReferenceBinding[] interfaces = typeVariable.superInterfaces;", "+\t\t\tif (interfaceLength != interfaces.length)", "+\t\t\t\treturn inheritedMethod; // not a match", "+\t\t\tnext : for (int j = 0; j < interfaceLength; j++) {", "+\t\t\t\tTypeBinding superType = Scope.substitute(substitute, inheritedTypeVariable.superInterfaces[j]);", "+\t\t\t\tfor (int k = 0; k < interfaceLength; k++)", "+\t\t\t\t\tif (superType == interfaces[k])", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\treturn inheritedMethod; // not a match", "+\t\t\t}", "+\t\t} else if (inheritedTypeVariables[i].boundCheck(substitute, argument) != TypeConstants.OK) {", "+\t    \treturn inheritedMethod;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f1d29993d78a9e69164a22e18701a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "141dabda2ef1bf78b17f32c0b9e9d86db622fc74", "commitAfterChange": "531c739d9ad2a599c5863aeaf49b058d9a8ba1bc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["+\t", "+\t\t// SEARCH_15 (frederic) Specific field pattern verification for generics (not fully tested yet...)", "+\t\tif (typeLevel == IMPOSSIBLE_MATCH) {", "+\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t}", "+\t\tTypeBinding typeBinding = field.type;", "+\t\tif (typeBinding != null) {", "+\t\t\tboolean isParameterized = typeBinding.isParameterizedType();", "+\t\t\tboolean isRawType = typeBinding.isRawType();", "+\t\t\tif (fieldPattern.typeNames== null) {", "+\t\t\t\tif (isParameterized && !isRawType) return IMPOSSIBLE_MATCH;", "+\t\t\t} else {", "+\t\t\t\tif (!isParameterized) return IMPOSSIBLE_MATCH;", "+\t\t\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) typeBinding;", "+\t\t\t\tif (paramTypeBinding.arguments == null) {", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t}", "+\t\t\t\tint length = fieldPattern.typeNames.length;", "+\t\t\t\tif (paramTypeBinding.arguments.length != length) return IMPOSSIBLE_MATCH;", "+\t\t\t\tfor (int i= 0; i<length; i++) {", "+\t\t\t\t\tchar[] argType = fieldPattern.typeNames[i];", "+\t\t\t\t\tTypeBinding argTypeBinding = paramTypeBinding.arguments[i];", "+\t\t\t\t\tif (!CharOperation.equals(argType, argTypeBinding.shortReadableName(), fieldPattern.isCaseSensitive) &&", "+\t\t\t\t\t\t!CharOperation.equals(argType, argTypeBinding.readableName(), fieldPattern.isCaseSensitive)) {", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t/* Try to pull-up generics verification in PatternLocator?", "+\t\tint typeLevel = resolveLevelForType(", "+\t\t\t\tfieldPattern.typeSimpleName,", "+\t\t\t\tfieldPattern.typeQualification,", "+\t\t\t\tfieldPattern.typeNames,", "+\t\t\t\tfieldPattern.mustResolve(),", "+\t\t\t\ttrue // parameterized,", "+\t\t\t\tfield.type);", "+\t\t*/", "+\t\t// end", "+"]}], "num": 10096}
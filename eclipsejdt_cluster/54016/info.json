{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "596ad92bc26559813b0271de2d9855f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e79b0de9341e41a09c7c7dbc802784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testGetReturnType()", "signatureAfterChange": " public void testGetReturnType()", "diff": ["-\tassertTrue(\"Signature#getReturnType is not correct1\", Signature.getReturnType(methodSig).equals(\"I\"));", "+\tassertEquals(\"Signature#getReturnType is not correct1\", \"I\",", "+\t\t\tSignature.getReturnType(methodSig));", "-\tassertTrue(\"Signature#getReturnType is not correct2\", Signature.getReturnType(methodSig).equals(\"I\"));", "+\tassertEquals(\"Signature#getReturnType is not correct2\", \"I\",", "+\t\t\tSignature.getReturnType(methodSig));", "-\tassertTrue(\"Signature#getReturnType is not correct3\", Signature.getReturnType(methodSig).equals(\"Qlist<Qxxx;>;\"));", "+\tassertEquals(\"Signature#getReturnType is not correct3\", \"Qlist<Qxxx;>;\",", "+\t\t\tSignature.getReturnType(methodSig));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bada2e3da3718566ba3192577e28540", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "2a16e8a2e7b943b242b9959c374c8d7819b6b3a0", "commitAfterChange": "ccb364c95f1fe1767a1c8ae16307a4464fc49b1b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testGetTypeParameters()", "signatureAfterChange": " public void testGetTypeParameters1()", "diff": ["-public void testGetTypeParameters() {", "+public void testGetTypeParameters1() {", "-\tassertEquals(\"Signature#getTypeParameters 1\", 2,", "-\t\t\tSignature.getTypeParameters(sig).length);", "-\tassertEquals(\"Signature#getTypeParameters 2\", \"X:TF;\",", "-\t\t\tSignature.getTypeParameters(sig)[0]);", "-\tassertEquals(\"Signature#getTypeParameters 3\", \"Y::Ljava.lang.Cloneable;\",", "-\t\t\tSignature.getTypeParameters(sig)[1]);", "-\tsig = \"<X:TF;Y::Ljava.lang.Cloneable;>()V\";", "-\tassertEquals(\"Signature#getTypeParameters 4\", 2,", "-\t\t\tSignature.getTypeParameters(sig).length);", "-\tassertEquals(\"Signature#getTypeParameters 5\", \"X:TF;\",", "-\t\t\tSignature.getTypeParameters(sig)[0]);", "-\tassertEquals(\"Signature#getTypeParameters 6\", \"Y::Ljava.lang.Cloneable;\",", "-\t\t\tSignature.getTypeParameters(sig)[1]);\t", "+\tassertStringsEqual(", "+\t\t\t\"Unexpected type parameters\", ", "+\t\t\t\"X:TF;\\n\" + ", "+\t\t\t\"Y::Ljava.lang.Cloneable;\\n\",", "+\t\t\tSignature.getTypeParameters(sig));", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a020545c2682cd7882e5fdf269cc7d08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testToQualifiedName()", "signatureAfterChange": " public void testToQualifiedName()", "diff": ["-\tassertTrue(\"Signature#toQualifiedName is not correct1\", Signature.toQualifiedName(new String[] {\"java\", \"lang\", \"Object\"}).equals(\"java.lang.Object\"));", "-\tassertTrue(\"Signature#toQualifiedName is not correct2\", Signature.toQualifiedName(new String[] {\"Object\"}).equals(\"Object\"));", "-\tassertTrue(\"Signature#toQualifiedName is not correct3\", Signature.toQualifiedName(new String[0]).equals(\"\"));", "+\tassertEquals(\"Signature#toQualifiedName is not correct1\", \"java.lang.Object\",", "+\t\t\tSignature.toQualifiedName(new String[] {\"java\", \"lang\", \"Object\"}));", "+\tassertEquals(\"Signature#toQualifiedName is not correct2\", \"Object\",", "+\t\t\tSignature.toQualifiedName(new String[] {\"Object\"}));", "+\tassertEquals(\"Signature#toQualifiedName is not correct3\", \"\",", "+\t\t\tSignature.toQualifiedName(new String[0]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3430dee94bc7eeeae84df5b6e7f2f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testGetTypeVariable()", "signatureAfterChange": " public void testGetTypeVariable()", "diff": ["-\tassertTrue(\"Signature#getTypeVariable is not correct1\", Signature.getTypeVariable(formalTypeParameterSignature).equals(\"Hello\"));", "+\tassertEquals(\"Signature#getTypeVariable is not correct1\", \"Hello\",", "+\t\t\tSignature.getTypeVariable(formalTypeParameterSignature));", "-\tassertTrue(\"Signature#getTypeVariable is not correct2\", Signature.getTypeVariable(formalTypeParameterSignature).equals(\"Hello\"));", "+\tassertEquals(\"Signature#getTypeVariable is not correct2\", \"Hello\",", "+\t\t\tSignature.getTypeVariable(formalTypeParameterSignature));", "-\tassertTrue(\"Signature#getTypeVariable is not correct3\", Signature.getTypeVariable(formalTypeParameterSignature).equals(\"Hello\"));", "+\tassertEquals(\"Signature#getTypeVariable is not correct3\", \"Hello\",", "+\t\t\tSignature.getTypeVariable(formalTypeParameterSignature));"]}], "num": 54016}
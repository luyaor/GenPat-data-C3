{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7536e17cf2779b5693e3064c9bd00a63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "008c932031c82ef51cc6a05cf2fef3dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected Openable createElement(IResource resource, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tprivate Openable createElement(IResource resource, int elementType, RootInfo rootInfo)", "diff": ["+\t */", "+\tprivate Openable createElement(IResource resource, int elementType, RootInfo rootInfo) {", "+\t\tif (resource == null) return null;", "+\t\t", "+\t\tIPath path = resource.getFullPath();", "+\t\tIJavaElement element = null;", "+\t\tswitch (elementType) {", "+\t\t\t", "+\t\t\tcase IJavaElement.JAVA_PROJECT:", "+\t\t\t", "+\t\t\t\t// note that non-java resources rooted at the project level will also enter this code with", "+\t\t\t\t// an elementType JAVA_PROJECT (see #elementType(...)).", "+\t\t\t\tif (resource instanceof IProject){", "+", "+\t\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t\t", "+\t\t\t\t\tif (this.currentElement != null ", "+\t\t\t\t\t\t&& this.currentElement.getElementType() == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t&& ((IJavaProject)this.currentElement).getProject().equals(resource)) {", "+\t\t\t\t\t\treturn this.currentElement;", "+\t\t\t\t\t}", "+\t\t\t\t\tif  (rootInfo != null && rootInfo.project.getProject().equals(resource)){", "+\t\t\t\t\t\telement = (Openable)rootInfo.project;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tIProject proj = (IProject)resource;", "+\t\t\t\t\tif (JavaProject.hasJavaNature(proj)) {", "+\t\t\t\t\t\telement = JavaCore.create(proj);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// java project may have been been closed or removed (look for", "+\t\t\t\t\t\t// element amongst old java project s list).", "+\t\t\t\t\t\telement =  (Openable) manager.getJavaModel().findJavaProject(proj);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "+\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : rootInfo.project.getPackageFragmentRoot(resource);", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "+\t\t\t\t// find the element that encloses the resource", "+\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t", "+\t\t\t\tif (this.currentElement == null) {", "+\t\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t} else {", "+\t\t\t\t\t// find the root", "+\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();", "+\t\t\t\t\tif (root == null) {", "+\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t\t} else if (((JavaProject)root.getJavaProject()).contains(resource)) {", "+\t\t\t\t\t\t// create package handle", "+\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());", "+\t\t\t\t\t\tString pkg = Util.packageName(pkgPath);", "+\t\t\t\t\t\tif (pkg == null) return null;", "+\t\t\t\t\t\telement = root.getPackageFragment(pkg);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\t\t// find the element that encloses the resource", "+\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t", "+\t\t\t\tif (this.currentElement == null) {", "+\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t} else {", "+\t\t\t\t\t// find the package", "+\t\t\t\t\tIPackageFragment pkgFragment = null;", "+\t\t\t\t\tswitch (this.currentElement.getElementType()) {", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;", "+\t\t\t\t\t\t\tIPath rootPath = root.getPath();", "+\t\t\t\t\t\t\tIPath pkgPath = path.removeLastSegments(1);", "+\t\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath.removeFirstSegments(rootPath.segmentCount()));", "+\t\t\t\t\t\t\tif (pkgName != null) {", "+\t\t\t\t\t\t\t\tpkgFragment = root.getPackageFragment(pkgName);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "+\t\t\t\t\t\t\tOpenable pkg = (Openable)this.currentElement;", "+\t\t\t\t\t\t\tif (pkg.getPath().equals(path.removeLastSegments(1))) {", "+\t\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)pkg;", "+\t\t\t\t\t\t\t} // else case of package x which is a prefix of x.y", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "+\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pkgFragment == null) {", "+\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (elementType == IJavaElement.COMPILATION_UNIT) {", "+\t\t\t\t\t\t\t// create compilation unit handle ", "+\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();", "+\t\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// create class file handle", "+\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();", "+\t\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (element == null) {", "+\t\t\treturn null;", "+\t\t} else {", "+\t\t\tthis.currentElement = (Openable)element;", "+\t\t\treturn this.currentElement;", "+\t\t}", "+\t}", "-\t */", "-\tprotected Openable createElement(IResource resource, int elementType, RootInfo rootInfo) {", "-\t\tif (resource == null) return null;", "-\t\t", "-\t\tIPath path = resource.getFullPath();", "-\t\tIJavaElement element = null;", "-\t\tswitch (elementType) {", "-\t\t\t", "-\t\t\tcase IJavaElement.JAVA_PROJECT:", "-\t\t\t", "-\t\t\t\t// note that non-java resources rooted at the project level will also enter this code with", "-\t\t\t\t// an elementType JAVA_PROJECT (see #elementType(...)).", "-\t\t\t\tif (resource instanceof IProject){", "-", "-\t\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t\t", "-\t\t\t\t\tif (this.currentElement != null ", "-\t\t\t\t\t\t&& this.currentElement.getElementType() == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t&& ((IJavaProject)this.currentElement).getProject().equals(resource)) {", "-\t\t\t\t\t\treturn this.currentElement;", "-\t\t\t\t\t}", "-\t\t\t\t\tif  (rootInfo != null && rootInfo.project.getProject().equals(resource)){", "-\t\t\t\t\t\telement = (Openable)rootInfo.project;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tIProject proj = (IProject)resource;", "-\t\t\t\t\tif (JavaProject.hasJavaNature(proj)) {", "-\t\t\t\t\t\telement = JavaCore.create(proj);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// java project may have been been closed or removed (look for", "-\t\t\t\t\t\t// element amongst old java project s list).", "-\t\t\t\t\t\telement =  (Openable) manager.getJavaModel().findJavaProject(proj);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "-\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : rootInfo.project.getPackageFragmentRoot(resource);", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "-\t\t\t\t// find the element that encloses the resource", "-\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t", "-\t\t\t\tif (this.currentElement == null) {", "-\t\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t} else {", "-\t\t\t\t\t// find the root", "-\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();", "-\t\t\t\t\tif (root == null) {", "-\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t\t} else if (((JavaProject)root.getJavaProject()).contains(resource)) {", "-\t\t\t\t\t\t// create package handle", "-\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());", "-\t\t\t\t\t\tString pkg = Util.packageName(pkgPath);", "-\t\t\t\t\t\tif (pkg == null) return null;", "-\t\t\t\t\t\telement = root.getPackageFragment(pkg);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t// find the element that encloses the resource", "-\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t", "-\t\t\t\tif (this.currentElement == null) {", "-\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t} else {", "-\t\t\t\t\t// find the package", "-\t\t\t\t\tIPackageFragment pkgFragment = null;", "-\t\t\t\t\tswitch (this.currentElement.getElementType()) {", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "-\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)this.currentElement;", "-\t\t\t\t\t\t\tIPath rootPath = root.getPath();", "-\t\t\t\t\t\t\tIPath pkgPath = path.removeLastSegments(1);", "-\t\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath.removeFirstSegments(rootPath.segmentCount()));", "-\t\t\t\t\t\t\tif (pkgName != null) {", "-\t\t\t\t\t\t\t\tpkgFragment = root.getPackageFragment(pkgName);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:", "-\t\t\t\t\t\t\tOpenable pkg = (Openable)this.currentElement;", "-\t\t\t\t\t\t\tif (pkg.getPath().equals(path.removeLastSegments(1))) {", "-\t\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)pkg;", "-\t\t\t\t\t\t\t} // else case of package x which is a prefix of x.y", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (pkgFragment == null) {", "-\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (elementType == IJavaElement.COMPILATION_UNIT) {", "-\t\t\t\t\t\t\t// create compilation unit handle ", "-\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "-\t\t\t\t\t\t\tString fileName = path.lastSegment();", "-\t\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// create class file handle", "-\t\t\t\t\t\t\t// fileName validation has been done in elementType(IResourceDelta, int, boolean)", "-\t\t\t\t\t\t\tString fileName = path.lastSegment();", "-\t\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tif (element == null) {", "-\t\t\treturn null;", "-\t\t} else {", "-\t\t\tthis.currentElement = (Openable)element;", "-\t\t\treturn this.currentElement;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5abc609a30848ac4d83b58e1339e8701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void addToParentInfo(Openable child)", "signatureAfterChange": " \tprivate void addToParentInfo(Openable child)", "diff": ["-\tprotected void addToParentInfo(Openable child) {", "-", "+\tprivate void addToParentInfo(Openable child) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b934facbeda0376fb89c5ebf0a6e2aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void contentChanged(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void contentChanged(Openable element, IResourceDelta delta)", "diff": ["+\t */", "+\tprivate void contentChanged(Openable element, IResourceDelta delta) {", "+", "+\t\tclose(element);", "+\t\tint flags = IJavaElementDelta.F_CONTENT;", "+\t\tif (element instanceof JarPackageFragmentRoot){", "+\t\t\tflags |= IJavaElementDelta.F_ARCHIVE_CONTENT_CHANGED;", "+\t\t}", "+\t\tcurrentDelta().changed(element, flags);", "+\t}", "-\t */", "-\tprotected void contentChanged(Openable element, IResourceDelta delta) {", "-", "-\t\tclose(element);", "-\t\tint flags = IJavaElementDelta.F_CONTENT;", "-\t\tif (element instanceof JarPackageFragmentRoot){", "-\t\t\tflags |= IJavaElementDelta.F_ARCHIVE_CONTENT_CHANGED;", "-\t\t}", "-\t\tcurrentDelta().changed(element, flags);", "-\t}"]}], "num": 68103}
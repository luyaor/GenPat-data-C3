{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54b31a0e264caa44532a47baba939109", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1764e525ac0d5c7cb10ff72f8e660c1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/LongCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int put(long key, int value)", "signatureAfterChange": " public int put(long key, int value)", "diff": ["-\tint index = hash(key), length = keyTable.length;", "-\twhile ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {", "-\t\tif (keyTable[index] == key)", "-\t\t\treturn valueTable[index] = value;", "+\tint index = hash(key), length = this.keyTable.length;", "+\twhile ((this.keyTable[index] != 0) || ((this.keyTable[index] == 0) && (this.valueTable[index] != 0))) {", "+\t\tif (this.keyTable[index] == key)", "+\t\t\treturn this.valueTable[index] = value;", "-\tkeyTable[index] = key;", "-\tvalueTable[index] = value;", "+\tthis.keyTable[index] = key;", "+\tthis.valueTable[index] = value;", "-\tif (++elementSize > threshold) {", "+\tif (++this.elementSize > this.threshold) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "361db721468e7fd7d816b8c26e0d88bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int put(int key, int value)", "signatureAfterChange": " public int put(int key, int value)", "diff": ["-\tint index = hash(key), length = keyTable.length;", "-\twhile ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {", "-\t\tif (keyTable[index] == key)", "-\t\t\treturn valueTable[index] = value;", "+\tint index = hash(key), length = this.keyTable.length;", "+\twhile ((this.keyTable[index] != 0) || ((this.keyTable[index] == 0) && (this.valueTable[index] != 0))) {", "+\t\tif (this.keyTable[index] == key)", "+\t\t\treturn this.valueTable[index] = value;", "-\tkeyTable[index] = key;", "-\tvalueTable[index] = value;", "+\tthis.keyTable[index] = key;", "+\tthis.valueTable[index] = value;", "-\tif (++elementSize > threshold) {", "+\tif (++this.elementSize > this.threshold) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "456b8a248df7bf1ed0bc3074a1c41ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "c86c38d672e49d50e598810327b66493258e94dd", "commitAfterChange": "060261358ee4101b16c7399fe1e71ff5bc4ac40a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " MethodBinding computeSubstitutedMethod(MethodBinding method, LookupEnvironment env)", "signatureAfterChange": " MethodBinding computeSubstitutedMethod(MethodBinding method, LookupEnvironment env)", "diff": ["-\tTypeVariableBinding[] vars = this.typeVariables;", "-\tTypeVariableBinding[] vars2 = method.typeVariables;", "-\tif (vars.length != vars2.length)", "+\tint length = this.typeVariables.length;", "+\tTypeVariableBinding[] vars = method.typeVariables;", "+\tif (length != vars.length)", "-\tfor (int v = vars.length; --v >= 0;)", "-\t\tif (!vars[v].isInterchangeableWith(env, vars2[v]))", "-\t\t\treturn null;", "-\treturn env.createParameterizedGenericMethod(method, vars);", "+\tParameterizedGenericMethodBinding substitute =", "+\t\tenv.createParameterizedGenericMethod(method, this.typeVariables);", "+\tfor (int i = 0; i < length; i++)", "+\t\tif (!this.typeVariables[i].isInterchangeableWith(vars[i], substitute))", "+\t\t\treturn null;", "+\treturn substitute;"]}], "num": 52345}
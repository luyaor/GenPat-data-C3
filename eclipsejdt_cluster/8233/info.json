{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77e2c0cdd0339b3433fb2e0022b38b60", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaa0c078a7fb05a1eeb84daf9d861a24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 161, "signatureBeforeChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-", "-\tprivate void findMethods(", "-\t\tTypeBinding[] typeArgTypes,", "-\t\tTypeBinding[] argTypes,", "-\t\tboolean onlyStaticMethods,", "-\t\tboolean exactMatch,", "-\t\tboolean isCompletingDeclaration,", "-\t\tInvocationSite invocationSite,", "-\t\tScope invocationScope,", "-\t\tboolean implicitCall,", "-\t\tboolean superCall,", "-\t\tboolean canBePrefixed,", "-\t\tboolean missingElementsHaveProblems,", "-\t\tchar[] castedReceiver,", "-\t\tint receiverStart,", "-\t\tint receiverEnd) {", "-\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "-\t\tif (selector == null && notInJavadoc) {", "-\t\tif(isCompletingDeclaration) {", "-\t\t\tMethodBinding[] methods = receiverType.availableMethods();", "-\t\t\tif (methods != null){", "-\t\t\t\tfor (int i = 0; i < methods.length; i++) {", "-\t\t\t\t\tif(!methods[i].isDefaultAbstract()) {", "-\t\t\t\t\t\tmethodsFound.add(methods[i]);", "-\t\t\t\t\t}", "-\t\tif (notInJavadoc) {", "-\t\t\tif (receiverType.isInterface()) {", "-\t\t\t\tif (isCompletingDeclaration) {", "-\t\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-\t\t\t\t} else {", "-\t\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tnew ReferenceBinding[]{currentType},", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-\t\t\t\t}", "-", "-\t\t\t\tcurrentType = scope.getJavaLangObject();", "-\t\t\t} else {", "-\t\t\t\tif (isCompletingDeclaration){", "-\t\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-", "-\t\t\t\t\tcurrentType = receiverType.superclass();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\tif (isCompletingDeclaration){", "-\t\t\t\t\tfindLocalMethodDeclarations(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\tmethods,", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\treceiverType);", "-\t\t\t\t} else{", "-\t\t\t\t\tfindLocalMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\tmethods,", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-\t\t\t\t}", "-\t\t\t\tif (superInterfaces != null && currentType.isIntersectionType()) {", "-\t\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "-\t\t\t\t\t\tsuperInterfaces[i] = (ReferenceBinding)superInterfaces[i].capture(invocationScope, invocationSite.sourceEnd());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\treceiverStart,", "-\t\t\t\t\treceiverEnd);", "+\tprivate void findMethods(", "+\t\tchar[] selector,", "+\t\tTypeBinding[] typeArgTypes,", "+\t\tTypeBinding[] argTypes,", "+\t\tReferenceBinding receiverType,", "+\t\tScope scope,", "+\t\tObjectVector methodsFound,", "+\t\tboolean onlyStaticMethods,", "+\t\tboolean exactMatch,", "+\t\tInvocationSite invocationSite,", "+\t\tScope invocationScope,", "+\t\tboolean implicitCall,", "+\t\tboolean superCall,", "+\t\tboolean canBePrefixed,", "+\t\tBinding[] missingElements,", "+\t\tint[] missingElementsStarts,", "+\t\tint[] missingElementsEnds,", "+\t\tboolean missingElementsHaveProblems,", "+\t\tchar[] castedReceiver,", "+\t\tint receiverStart,", "+\t\tint receiverEnd) {", "+", "+\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "+\t\tif (selector == null && notInJavadoc) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tReferenceBinding currentType = receiverType;", "+\t\tif (notInJavadoc) {", "+\t\t\tif (receiverType.isInterface()) {", "+\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\tselector,", "+\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tnew ReferenceBinding[]{currentType},", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmethodsFound,", "+\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\texactMatch,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tinvocationScope,", "+\t\t\t\t\timplicitCall,", "+\t\t\t\t\tsuperCall,", "+\t\t\t\t\tcanBePrefixed,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\treceiverStart,", "+\t\t\t\t\treceiverEnd);", "+", "+\t\t\t\tcurrentType = scope.getJavaLangObject();", "+\t\t\t}", "+\t\t}", "+\t\tboolean hasPotentialDefaultAbstractMethods = true;", "+\t\twhile (currentType != null) {", "+", "+\t\t\tMethodBinding[] methods = currentType.availableMethods();", "+\t\t\tif (methods != null) {", "+\t\t\t\tfindLocalMethods(", "+\t\t\t\t\tselector,", "+\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\tmethods,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmethodsFound,", "+\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\texactMatch,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tinvocationScope,", "+\t\t\t\t\timplicitCall,", "+\t\t\t\t\tsuperCall,", "+\t\t\t\t\tcanBePrefixed,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\treceiverStart,", "+\t\t\t\t\treceiverEnd);", "+\t\t\t}", "+", "+\t\t\tif (hasPotentialDefaultAbstractMethods &&", "+\t\t\t\t\t(currentType.isAbstract() ||", "+\t\t\t\t\t\t\tcurrentType.isTypeVariable() ||", "+\t\t\t\t\t\t\tcurrentType.isIntersectionType() ||", "+\t\t\t\t\t\t\tcurrentType.isEnum())){", "+", "+\t\t\t\tReferenceBinding[] superInterfaces = currentType.superInterfaces();", "+\t\t\t\tif (superInterfaces != null && currentType.isIntersectionType()) {", "+\t\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\t\t\tsuperInterfaces[i] = (ReferenceBinding)superInterfaces[i].capture(invocationScope, invocationSite.sourceEnd());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\tselector,", "+\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tsuperInterfaces,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmethodsFound,", "+\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\texactMatch,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tinvocationScope,", "+\t\t\t\t\timplicitCall,", "+\t\t\t\t\tsuperCall,", "+\t\t\t\t\tcanBePrefixed,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\treceiverStart,", "+\t\t\t\t\treceiverEnd);", "+\t\t\t} else {", "+\t\t\t\thasPotentialDefaultAbstractMethods = false;", "+\t\t\t}", "+\t\t\tcurrentType = currentType.superclass();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f34a277e5d0b83d161c3df615017b4ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\t// standard reporting", "-\t\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "-\t\t\t\t\t\t\t\tif (otherFields != null) {", "-\t\t\t\t\t\t\t\t\tint length = otherFields.length;", "-\t\t\t\t\t\t\t\t\tint size = 0;", "-\t\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "-\t\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "-\t\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "-\t\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "+\t\t\t\t\t\t\tif (otherFields != null) {", "+\t\t\t\t\t\t\t\tint length = otherFields.length;", "+\t\t\t\t\t\t\t\tint size = 0;", "+\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "+\t\t\t\t\t\t\t\t\tsize++;", "-\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "+\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t } else {", "-\t\t\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tfield.traverse(visitor, null);", "-\t\t\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Remove all remaining nodes", "-\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "-\t\t\t\t\t// standard reporting", "-\t\t\t\t\tif (this.patternFineGrain == 0) {", "-\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\t\tnode = field;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "-\t\t\t\t\t\t\tBlockScope blockScope = null;", "-\t\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "-\t\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "-\t\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t// finegrain reporting", "-\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfield.traverse(visitor, field.isStatic() ? type.staticInitializerScope : type.initializerScope);", "-\t\t\t\t\t} catch (WrappedCoreException e) {", "-\t\t\t\t\t\tthrow e.coreException;", "-\t\t\t\t\t}", "-\t\t\t\t\t// Remove all remaining nodes", "-\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "+\t\t\t\t\t\tBlockScope blockScope = null;", "+\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "+\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "+\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t\t\t\treturn;"]}], "num": 8233}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aae70a3a933a8e704b1f86e3060a0546", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09097489857d8d4ef78785a93fbaa03f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "2fd2027f1bd96549ae174a672a3e75a3fbef9f00", "commitAfterChange": "bbdc67ca80e8d3933fe67f2dadba11598c084b7c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tpublic IJavaElementDelta processExternalJarChanges()", "signatureAfterChange": "\r \tpublic void checkExternalJarChanges(IProgressMonitor monitor)", "diff": ["+\t */\r", "+\tpublic void checkExternalJarChanges(IProgressMonitor monitor) {\r", "+\r", "+\t\ttry {\r", "+\t\t\tHashMap externalJARsStatus = new HashMap();\r", "+\t\t\t\r", "+\t\t\tJavaModel model = manager.getJavaModel();\t\t\t\r", "+\t\t\tfCurrentDelta = new JavaElementDelta(model);\r", "+\t\t\tboolean hasDelta = false;\r", "+\t\t\t\r", "+\t\t\tIJavaProject[] projects =model.getOldJavaProjectsList();\r", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "+\t\t\t\tIJavaProject project = projects[i];\r", "+\t\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true);\r", "+\t\t\t\tfor (int j = 0; j < entries.length; j++){\r", "+\t\t\t\t\tif (entries[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tIPath entryPath = entries[j].getPath();\r", "+\t\t\t\t\t\tString status = (String)externalJARsStatus.get(entryPath); \r", "+\t\t\t\t\t\tif (status == null){\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t// compute shared status\r", "+\t\t\t\t\t\t\tObject targetLibrary = JavaModel.getTarget(project.getProject(), entryPath, true);\r", "+\r", "+\t\t\t\t\t\t\tif (targetLibrary == null){ // missing JAR\r", "+\t\t\t\t\t\t\t\tif (this.externalTimeStamps.containsKey(entryPath)){\r", "+\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);\r", "+\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_REMOVED);\r", "+\t\t\t\t\t\t\t\t\t// the jar was physically removed: remove the index\r", "+\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);\r", "+\t\t\t\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\t\t\t} else if (targetLibrary instanceof File){ // external JAR\r", "+\r", "+\t\t\t\t\t\t\t\tFile externalFile = (File)targetLibrary;\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t// check timestamp to figure if JAR has changed in some way\r", "+\t\t\t\t\t\t\t\tLong oldTimestamp =(Long) this.externalTimeStamps.get(entryPath);\r", "+\t\t\t\t\t\t\t\tlong newTimeStamp = getTimeStamp(externalFile);\r", "+\t\t\t\t\t\t\t\tif (oldTimestamp != null){\r", "+\r", "+\t\t\t\t\t\t\t\t\tif (newTimeStamp == 0){ // file doesn't exist\r", "+\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_REMOVED);\r", "+\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);\r", "+\t\t\t\t\t\t\t\t\t\t// remove the index\r", "+\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);\r", "+\r", "+\t\t\t\t\t\t\t\t\t} else if (oldTimestamp.longValue() != newTimeStamp){\r", "+\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_CHANGED);\r", "+\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));\r", "+\t\t\t\t\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed\r", "+\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);\r", "+\t\t\t\t\t\t\t\t\t\t// then index the jar\r", "+\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tif (newTimeStamp == 0){ // jar still doesn't exist\r", "+\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, EXTERNAL_JAR_ADDED);\r", "+\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));\r", "+\t\t\t\t\t\t\t\t\t\t// index the new jar\r", "+\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} else { // internal JAR\r", "+\t\t\t\t\t\t\t\texternalJARsStatus.put(entryPath, INTERNAL_JAR_IGNORE);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// according to computed status, generate a delta\r", "+\t\t\t\t\t\tstatus = (String)externalJARsStatus.get(entryPath); \r", "+\t\t\t\t\t\tif (status != null){\r", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());\r", "+\t\t\t\t\t\t\tif (status == EXTERNAL_JAR_ADDED){\r", "+\t\t\t\t\t\t\t\tif (VERBOSE){\r", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR ADDED, affecting root: \"+root.getElementName());\r", "+\t\t\t\t\t\t\t\t} \r", "+\t\t\t\t\t\t\t\telementAdded(root, null);\r", "+\t\t\t\t\t\t\t\thasDelta = true;\r", "+\t\t\t\t\t\t\t} else if (status == EXTERNAL_JAR_CHANGED) {\r", "+\t\t\t\t\t\t\t\tif (VERBOSE){\r", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR CHANGED, affecting root: \"+root.getElementName());\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tcontentChanged(root, null);\r", "+\t\t\t\t\t\t\t\thasDelta = true;\r", "+\t\t\t\t\t\t\t} else if (status == EXTERNAL_JAR_REMOVED) {\r", "+\t\t\t\t\t\t\t\tif (VERBOSE){\r", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR REMOVED, affecting root: \"+root.getElementName());\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\telementRemoved(root, null);\r", "+\t\t\t\t\t\t\t\thasDelta = true;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (hasDelta){\r", "+\t\t\t\tthis.manager.fire(fCurrentDelta, JavaModelManager.DEFAULT_CHANGE_EVENT);\t\t\t\r", "+\t\t\t}\r", "+\t\t} catch (JavaModelException e) { // nothing can be done\r", "+\t\t} finally {\r", "+\t\t\tfCurrentDelta = null;\r", "+\t\t}\r", "+\t}\r", "-\t */\r", "-\tpublic IJavaElementDelta processExternalJarChanges() {\r", "-\t\t\r", "-\t\t// did any external JAR change ?\r", "-\t\tif (this.externalJarPathsToUpdate.isEmpty()) return null;\r", "-\t\ttry {\r", "-\t\t\tJavaModel model = manager.getJavaModel();\r", "-\t\t\tfCurrentDelta = new JavaElementDelta(model);\r", "-\t\t\tIJavaProject[] projects =model.getOldJavaProjectsList();\r", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "-\t\t\t\tIJavaProject project = projects[i];\r", "-\t\t\t\tIPackageFragmentRoot[] roots = project.getPackageFragmentRoots();\r", "-\t\t\t\tfor (int j = 0; j < roots.length; j++){\r", "-\t\t\t\t\tif (this.externalJarPathsToUpdate.contains(roots[j].getPath())){\r", "-\t\t\t\t\t\tif (VERBOSE){\r", "-\t\t\t\t\t\t\tSystem.out.println(\"External JAR changed, affecting root: \"+roots[j].getElementName());\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tcontentChanged((Openable)roots[j], null);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn fCurrentDelta;\r", "-\t\t} catch (JavaModelException e) { // nothing can be done\r", "-\t\t} finally {\r", "-\t\t\tthis.externalJarPathsToUpdate.clear();\r", "-\t\t}\r", "-\t\treturn null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2440a80284bf9106fa1e0e712af0fc1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "fb79acb2f88020666334c353888dcdeb37abd070", "commitAfterChange": "4a7d6bdefb8cc07325fb8a5c7d2a751e2d99c2eb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tHashMap externalArchivesStatus = new HashMap();", "-\t\t\tJavaModel model = manager.getJavaModel();\t\t\t", "+\t\t\tthis.refreshedElements = refreshedElements;", "+\t\t\tthis.refreshedElementsSize = refreshedElements.length;", "+\t\t\tboolean hasDelta = this.createExternalArchiveDelta(monitor);", "+\t\t\tif (monitor != null && monitor.isCanceled()) return; ", "+\t\t\tif (hasDelta){", "+\t\t\t\t// force classpath marker refresh of affected projects", "+\t\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\t\tIJavaElementDelta[] projectDeltas = this.currentDelta.getAffectedChildren();", "+\t\t\t\tfor (int i = 0, length = projectDeltas.length; i < length; i++) {", "+\t\t\t\t\tIJavaElementDelta delta = projectDeltas[i];", "+\t\t\t\t\t((JavaProject)delta.getElement()).getResolvedClasspath(", "+\t\t\t\t\t\ttrue, // ignoreUnresolvedEntry", "+\t\t\t\t\t\ttrue); // generateMarkerOnError", "+\t\t\t\t}\t\t", "+\t\t\t\tif (this.currentDelta != null) { // if delta has not been fired while creating markers", "+\t\t\t\t\tthis.manager.fire(this.currentDelta, JavaModelManager.DEFAULT_CHANGE_EVENT);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.currentDelta = null;", "+\t\t\tif (monitor != null) monitor.done();", "+\t\t}", "+\t}", "-\t\t\t// find JARs to refresh", "-\t\t\tHashSet archivePathsToRefresh = new HashSet();", "-\t\t\tfor (int i = 0, elementsLength = refreshedElements.length; i < elementsLength; i++){", "-\t\t\t\tIJavaElement element = refreshedElements[i];", "-\t\t\t// perform refresh", "-\t\t\tfCurrentDelta = new JavaElementDelta(model);", "-\t\t\tboolean hasDelta = false;", "-\t", "-\t\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\tIWorkspaceRoot wksRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t", "-\t\t\t\tif (monitor != null && monitor.isCanceled()) return; ", "-\t\t\t\t", "-\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true);", "-\t\t\t\tfor (int j = 0; j < entries.length; j++){", "-\t\t\t\t\tif (entries[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "-\t\t\t\t\t\tIPath entryPath = entries[j].getPath();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (!archivePathsToRefresh.contains(entryPath)) continue; // not supposed to be refreshed", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tString status = (String)externalArchivesStatus.get(entryPath); ", "-\t\t\t\t\t\tif (status == null){", "-\t\t\t\t\t\t\t// compute shared status", "-\t\t\t\t\t\t\tObject targetLibrary = JavaModel.getTarget(wksRoot, entryPath, true);", "-\t", "-\t\t\t\t\t\t\tif (targetLibrary == null){ // missing JAR", "-\t\t\t\t\t\t\t\tif (this.externalTimeStamps.containsKey(entryPath)){", "-\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);", "-\t\t\t\t\t\t\t\t\t// the jar was physically removed: remove the index", "-\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t} else if (targetLibrary instanceof File){ // external JAR", "-\t", "-\t\t\t\t\t\t\t\tFile externalFile = (File)targetLibrary;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// check timestamp to figure if JAR has changed in some way", "-\t\t\t\t\t\t\t\tLong oldTimestamp =(Long) this.externalTimeStamps.get(entryPath);", "-\t\t\t\t\t\t\t\tlong newTimeStamp = getTimeStamp(externalFile);", "-\t\t\t\t\t\t\t\tif (oldTimestamp != null){", "-\t", "-\t\t\t\t\t\t\t\t\tif (newTimeStamp == 0){ // file doesn't exist", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_REMOVED);", "-\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.remove(entryPath);", "-\t\t\t\t\t\t\t\t\t\t// remove the index", "-\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "-\t", "-\t\t\t\t\t\t\t\t\t} else if (oldTimestamp.longValue() != newTimeStamp){", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_CHANGED);", "-\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "-\t\t\t\t\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed", "-\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(entryPath);", "-\t\t\t\t\t\t\t\t\t\t// then index the jar", "-\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (newTimeStamp == 0){ // jar still doesn't exist", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_UNCHANGED);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, EXTERNAL_JAR_ADDED);", "-\t\t\t\t\t\t\t\t\t\tthis.externalTimeStamps.put(entryPath, new Long(newTimeStamp));", "-\t\t\t\t\t\t\t\t\t\t// index the new jar", "-\t\t\t\t\t\t\t\t\t\tindexManager.indexLibrary(entryPath, project.getProject());", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else { // internal JAR", "-\t\t\t\t\t\t\t\texternalArchivesStatus.put(entryPath, INTERNAL_JAR_IGNORE);", "-\t\t\t\t\t\t// according to computed status, generate a delta", "-\t\t\t\t\t\tstatus = (String)externalArchivesStatus.get(entryPath); ", "-\t\t\t\t\t\tif (status != null){", "-\t\t\t\t\t\t\tif (status == EXTERNAL_JAR_ADDED){", "-\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\t\tif (VERBOSE){", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR ADDED, affecting root: \"+root.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t\t\telementAdded(root, null, null);", "-\t\t\t\t\t\t\t\thasDelta = true;", "-\t\t\t\t\t\t\t} else if (status == EXTERNAL_JAR_CHANGED) {", "-\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\t\tif (VERBOSE){", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR CHANGED, affecting root: \"+root.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// reset the corresponding project built state, since the builder would miss this change", "-\t\t\t\t\t\t\t\tthis.manager.setLastBuiltState(project.getProject(), null /*no state*/);", "-\t\t\t\t\t\t\t\tcontentChanged(root, null);", "-\t\t\t\t\t\t\t\thasDelta = true;", "-\t\t\t\t\t\t\t} else if (status == EXTERNAL_JAR_REMOVED) {", "-\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\t\tif (VERBOSE){", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"- External JAR REMOVED, affecting root: \"+root.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\telementRemoved(root, null, null);", "-\t\t\t\t\t\t\t\thasDelta = true;", "-\t\t\tif (hasDelta){", "-\t\t\t\tthis.manager.fire(fCurrentDelta, JavaModelManager.DEFAULT_CHANGE_EVENT);\t\t\t", "-\t\t\t\t", "-\t\t\t\t// force classpath marker refresh of affected projects", "-\t\t\t\tJavaModel.flushExternalFileCache();", "-\t\t\t\tIJavaElementDelta[] projectDeltas = fCurrentDelta.getAffectedChildren();", "-\t\t\t\tfor (int i = 0, length = projectDeltas.length; i < length; i++) {", "-\t\t\t\t\tIJavaElementDelta delta = projectDeltas[i];", "-\t\t\t\t\t((JavaProject)delta.getElement()).getResolvedClasspath(", "-\t\t\t\t\t\ttrue, // ignoreUnresolvedEntry", "-\t\t\t\t\t\ttrue); // generateMarkerOnError", "-\t\t\t\t}\t\t", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tfCurrentDelta = null;", "-\t\t\tif (monitor != null) monitor.done();"]}], "num": 8734}
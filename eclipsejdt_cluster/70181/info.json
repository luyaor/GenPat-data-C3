{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d6e536873d16b954b892ca78bbbf264", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "113d2b5bdb56a9d4b3953012c7b81875", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 848, "methodNumberAfterChange": 848, "signatureBeforeChange": " public void test0827()", "signatureAfterChange": " public void test0827()", "diff": ["-// FAIL ERRMSG", "-\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\treturn;", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tt1.test(a, b); //this gives an error but should be OK\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method test(Object, List) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tt2.test(a, b); //this compiles OK\\n\" + ", "+\t\t\t\"\t   ^^^^\\n\" + ", "+\t\t\t\"The method test(V1, V2) in the type X<Object> is not applicable for the arguments (XA, List<Object>)\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "124e036d95a8a3ddf540bcbc48025c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a6c0426e8a97e5c69fdac3bea072af18fea82d0e", "commitAfterChange": "700519d9d691300ee33405d776a07eb44c2c4fa0", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 315, "signatureBeforeChange": " \tpublic void test0306()", "signatureAfterChange": " \tpublic void test0306()", "diff": ["+\t\t\tthis.complianceLevel <= ClassFileConstants.JDK1_6 ?", "+\t\t\t:", "+\t\t\t\t", "+\t\t\t// 1.7+ output, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=334622", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic int foo(T t) { return t.i + t.i() + T.M.j; }\\n\" + ", "+\t\t\t\"\t                               ^\\n\" + ", "+\t\t\t\"The field X<T>.i is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic int foo(T t) { return t.i + t.i() + T.M.j; }\\n\" + ", "+\t\t\t\"\t                                     ^\\n\" + ", "+\t\t\t\"The method i() from the type X<T> is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic int foo(T t) { return t.i + t.i() + T.M.j; }\\n\" + ", "+\t\t\t\"\t                                           ^^^\\n\" + ", "+\t\t\t\"The type T.M is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass Y extends Zork {\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3335227b04f841f22a6c0966337a2b7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "commitAfterChange": "0bcd341ea781d3ca9f30d724e6161bfab2161b14", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void _test0026()", "signatureAfterChange": " public void test0026()", "diff": ["-public void _test0026() {", "+// NOTE: THIS TEST MOST LIKELY CAPTURES THE WRONG OUTPUT FOR JAVA 8. AS WE FIX TYPE INFERENCE ISSUES, THIS MAY FAIL.", "+public void test0026() {", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX<Number> x = new X<>(1);\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX<Object> x4 = new X<>(1).idem();\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tX<Object> x5 = new X<>(1);\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tint i = m(new X<>(\\\"\\\"));\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The constructor X<String>(String) is ambiguous\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8121ae38f4a88bc2e749b78b29826103", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 896, "methodNumberAfterChange": 896, "signatureBeforeChange": " public void test0875()", "signatureAfterChange": " public void test0875()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" +", "-\t\t\"\t                                                                          ^^^^^^^^^^^^\\n\" +", "-\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" +", "-\t\t\"\t                                                                                                                                                              ^^^^^^^^^^^^\\n\" +", "-\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "-\t\t\"\treturn null != null \\n\" +", "-\t\t\"\t\t\t? uiMap.get(persistentClass)\\n\" +", "-\t\t\"\t\t\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" +", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Class<capture#4-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 12)\\n\" +", "-\t\t\"\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" +", "-\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Class<capture#2-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" +", "-\t\t\"----------\\n\");", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "+\t\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" +", "+\t\t\t\"\t                                                                          ^^^^^^^^^^^^\\n\" +", "+\t\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" +", "+\t\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" +", "+\t\t\t\"\t                                                                                                                                                              ^^^^^^^^^^^^\\n\" +", "+\t\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "+\t\t\t\"\treturn null != null \\n\" +", "+\t\t\t\"\t\t\t? uiMap.get(persistentClass)\\n\" +", "+\t\t\t\"\t\t\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" +", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from Class<capture#4-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" +", "+\t\t\t\"\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" +", "+\t\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Type safety: Unchecked cast from Class<capture#2-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" +", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" + ", "+\t\t\t\t\"\t                                                                          ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" + ", "+\t\t\t\t\"\t                                                                                                                                                              ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\t? uiMap.get(persistentClass)\\n\" + ", "+\t\t\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Class<capture#1-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" + ", "+\t\t\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Unchecked cast from Class<capture#2-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89c867014e856de6ba92a661007da907", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1055, "methodNumberAfterChange": 1055, "signatureBeforeChange": " public void test1027()", "signatureAfterChange": " public void test1027()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"\\n\", // =================", "+\t\t\t\"\\n\" : ", "+\t\t\t\t\"import java.util.LinkedHashSet;\\n\" +", "+\t\t\t\t\"import java.util.Set;\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"    public class A {};\\n\" +", "+\t\t\t\t\"    public class B extends A {};\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" +", "+\t\t\t\t\"        X g = new X();\\n\" +", "+\t\t\t\t\"        Set<A> set = g.newSet(g.new B());\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"    @SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\t\"    public <T, V extends T> Set<T> newSet(V... objects) {\\n\" +", "+\t\t\t\t\"        Set<T> set = new LinkedHashSet<T>();\\n\" +", "+\t\t\t\t\"        for (T t : objects) {\\n\" +", "+\t\t\t\t\"            set.add(t);\\n\" +", "+\t\t\t\t\"        }\\n\" +", "+\t\t\t\t\"        return set;\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"\\n\", // =================, // ================="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d123f7f26b20f690ec17a6d7a36a252", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "c7a9fd38200c4e189bbe3a395c03138a0d9a5d08", "commitAfterChange": "c75f4ebceed583005251ebcb11a8c3d8faa0a35e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tpublic void test033()", "signatureAfterChange": " \t \tpublic void test033()", "diff": ["-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. ERROR in test\\\\X.java (at line 23)\\n\"", "-\t\t\t\t+ \"\t}\\n\"", "-\t\t\t\t+ \"\t^\\n\"", "-\t\t\t\t+ \"Syntax error, insert \\\"}\\\" to complete ClassBody\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 26)\\n\"", "-\t\t\t\t+ \"\t* @param list Valid param tag\\n\"", "-\t\t\t\t+ \"\t         ^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Parameter list is not declared\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in test\\\\X.java (at line 33)\\n\"", "-\t\t\t\t+ \"\tpublic String foo(java.util.Vector ) {\\n\"", "-\t\t\t\t+ \"\t                            ^^^^^^\\n\"", "-\t\t\t\t+ \"Syntax error on token \\\"Vector\\\", VariableDeclaratorId expected after this token\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"4. ERROR in test\\\\X.java (at line 36)\\n\"", "-\t\t\t\t+ \"\t}\\n\"", "-\t\t\t\t+ \"\t^\\n\"", "-\t\t\t\t+ \"Syntax error on token \\\"}\\\", delete this token\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\t\tthis.complianceLevel != COMPLIANCE_1_5", "+\t\t\t\t\t? \"----------\\n\"", "+\t\t\t\t\t\t+ \"1. ERROR in test\\\\X.java (at line 23)\\n\"", "+\t\t\t\t\t\t+ \"\t}\\n\"", "+\t\t\t\t\t\t+ \"\t^\\n\"", "+\t\t\t\t\t\t+ \"Syntax error, insert \\\"}\\\" to complete ClassBody\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 26)\\n\"", "+\t\t\t\t\t\t+ \"\t* @param list Valid param tag\\n\"", "+\t\t\t\t\t\t+ \"\t         ^^^^\\n\"", "+\t\t\t\t\t\t+ \"Javadoc: Parameter list is not declared\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t\t+ \"3. ERROR in test\\\\X.java (at line 33)\\n\"", "+\t\t\t\t\t\t+ \"\tpublic String foo(java.util.Vector ) {\\n\"", "+\t\t\t\t\t\t+ \"\t                            ^^^^^^\\n\"", "+\t\t\t\t\t\t+ \"Syntax error on token \\\"Vector\\\", VariableDeclaratorId expected after this token\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t\t+ \"4. ERROR in test\\\\X.java (at line 36)\\n\"", "+\t\t\t\t\t\t+ \"\t}\\n\"", "+\t\t\t\t\t\t+ \"\t^\\n\"", "+\t\t\t\t\t\t+ \"Syntax error on token \\\"}\\\", delete this token\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t: \"----------\\n\"", "+\t\t\t\t\t\t+ \"1. ERROR in test\\\\X.java (at line 23)\\n\"", "+\t\t\t\t\t\t+ \"\t}\\n\"", "+\t\t\t\t\t\t+ \"\t^\\n\"", "+\t\t\t\t\t\t+ \"Syntax error, insert \\\"}\\\" to complete ClassBody\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 26)\\n\"", "+\t\t\t\t\t\t+ \"\t* @param list Valid param tag\\n\"", "+\t\t\t\t\t\t+ \"\t         ^^^^\\n\"", "+\t\t\t\t\t\t+ \"Javadoc: Parameter list is not declared\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t\t+ \"3. ERROR in test\\\\X.java (at line 33)\\n\"", "+\t\t\t\t\t\t+ \"\tpublic String foo(java.util.Vector ) {\\n\"", "+\t\t\t\t\t\t+ \"\t                           ^\\n\"", "+\t\t\t\t\t\t+ \"Syntax error on token \\\".\\\", ... expected\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\"", "+\t\t\t\t\t\t+ \"4. ERROR in test\\\\X.java (at line 36)\\n\"", "+\t\t\t\t\t\t+ \"\t}\\n\"", "+\t\t\t\t\t\t+ \"\t^\\n\"", "+\t\t\t\t\t\t+ \"Syntax error on token \\\"}\\\", delete this token\\n\"", "+\t\t\t\t\t\t+ \"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b056501b0f826cf07c33d0477bd432c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 1159, "methodNumberAfterChange": 1159, "signatureBeforeChange": " public void test1129()", "signatureAfterChange": " public void test1129()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tString s = b ? arg1 : arg2;\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from IX<String> to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tString s = b ? arg1 : arg2;\\n\" + ", "+\t\t\t\"\t                      ^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from IX<capture#1-of ? extends Object> to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\t\"\tString s = b ? arg1 : arg2;\\n\" + ", "+\t\t\t\"\t               ^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Arg1 to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\t\"\tString s = b ? arg1 : arg2;\\n\" + ", "+\t\t\t\"\t                      ^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Arg2 to String\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dda2f091dd66b968ccf8bbd36d84ff5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void test_parameter_specification_inheritance_014()", "signatureAfterChange": " public void test_parameter_specification_inheritance_014()", "diff": ["+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\"", "+\t\t: // at 1.8 we show null type annotations in the message:", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\Y.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class Y extends X implements IY {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The method @Nullable String getString1(String) from X cannot implement the corresponding method from IY due to incompatible nullness constraints\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\Y.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class Y extends X implements IY {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The method String getString2(String) from X cannot implement the corresponding method from IY due to incompatible nullness constraints\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in p1\\\\Y.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class Y extends X implements IY {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The method getString5(@NonNull String) from X cannot implement the corresponding method from IY due to incompatible nullness constraints\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in p1\\\\Y.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class Y extends X implements IY {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The method getString3(String) from X cannot implement the corresponding method from IY due to incompatible nullness constraints\\n\" + ", "+\t\t\"----------\\n\"));"]}], "num": 70181}
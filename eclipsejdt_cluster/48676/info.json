{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9fb9e25069f5e9595f54a70013f80c5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04e6058bd510e0e0e32da56680ed2059", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-\tFileInputStream stream = new FileInputStream(this.indexFile);", "+\tInputStream stream = this.indexLocation.getInputStream();", "-\t\t\t\tSystem.err.println(\"file = \"+this.indexFile); //$NON-NLS-1$", "+\t\t\t\tSystem.err.println(\"file = \"+this.indexLocation); //$NON-NLS-1$", "-\t\t\tSystem.err.println(\"file = \"+this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.err.println(\"file = \"+this.indexLocation); //$NON-NLS-1$", "-\t\tstream = new FileInputStream(this.indexFile);", "+\t\tstream = this.indexLocation.getInputStream();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64526f127ba4f7b88a8f1742ad281507", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " private void readHeaderInfo(FileInputStream stream) throws IOException", "signatureAfterChange": " private void readHeaderInfo(InputStream stream) throws IOException", "diff": ["-private void readHeaderInfo(FileInputStream stream) throws IOException {", "+private void readHeaderInfo(InputStream stream) throws IOException {", "-\tlong fileLength = this.indexFile.length();", "-\tif (this.numberOfChunks > fileLength ) {", "+\tlong length = this.indexLocation.length();", "+\tif (length != -1 && this.numberOfChunks > length) {", "-\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$", "-\tif (size > fileLength) {", "+\tif (length != -1 && size > length) {", "-\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Index file is corrupted \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Index file is corrupted \" + this.indexLocation); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc08425612871c3edc798d3ecc60175", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-\tif (this.indexFile.exists()) {", "+\tif (this.indexLocation.exists()) {", "-\t\t\tFileInputStream stream = new FileInputStream(this.indexFile);", "+\t\t\tInputStream stream = this.indexLocation.getInputStream();", "-\t\tif (!this.indexFile.delete()) {", "+\t\tif (!this.indexLocation.delete()) {", "-\t\t\t\tSystem.out.println(\"initialize - Failed to delete index \" + this.indexFile); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to delete index \" + this.indexFile); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"initialize - Failed to delete index \" + this.indexLocation); //$NON-NLS-1$", "+\t\t\tthrow new IOException(\"Failed to delete index \" + this.indexLocation); //$NON-NLS-1$", "-\tif (this.indexFile.createNewFile()) {", "-\t\tFileOutputStream stream = new FileOutputStream(this.indexFile, false);", "+\tif (this.indexLocation.createNewFile()) {", "+\t\tFileOutputStream stream = new FileOutputStream(this.indexLocation.getIndexFile(), false);", "-\t\t\tSystem.out.println(\"initialize - Failed to create new index \" + this.indexFile); //$NON-NLS-1$", "-\t\tthrow new IOException(\"Failed to create new index \" + this.indexFile); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"initialize - Failed to create new index \" + this.indexLocation); //$NON-NLS-1$", "+\t\tthrow new IOException(\"Failed to create new index \" + this.indexLocation); //$NON-NLS-1$"]}], "num": 48676}
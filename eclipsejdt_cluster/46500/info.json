{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7576f884dedacc910bc086bced29257", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004b6692433e0e6ee1e7d607078048b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException", "signatureAfterChange": " private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException", "diff": ["-\tint idx = this.bufferIndex;", "+\tint start = 0;", "-\t\t\tthis.bufferIndex += length;", "-\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\twhile ((this.bufferIndex + length - start) >= BUFFER_WRITE_SIZE) {", "+\t\t\t\t// when documentNumbers is large, write BUFFER_WRITE_SIZE parts & fall thru to write the last part", "+\t\t\t\tint bytesLeft = BUFFER_WRITE_SIZE - this.bufferIndex;", "+\t\t\t\tfor (int i=0; i < bytesLeft; i++) {", "+\t\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\t\tthis.bufferIndex = 0;", "+\t\t\t}", "+\t\t\twhile (start < length) {", "+\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "-\t\t\tint size = length << 1;", "-\t\t\tthis.bufferIndex += size;", "-\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\twhile ((this.bufferIndex + ((length - start) * 2)) >= BUFFER_WRITE_SIZE) {", "+\t\t\t\t// when documentNumbers is large, write BUFFER_WRITE_SIZE parts & fall thru to write the last part", "+\t\t\t\tint shortsLeft = (BUFFER_WRITE_SIZE - this.bufferIndex) / 2;", "+\t\t\t\tfor (int i=0; i < shortsLeft; i++) {", "+\t\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) (documentNumbers[start] >> 8);", "+\t\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\t\tthis.bufferIndex = 0;", "-\t\t\tthis.streamEnd += size;", "+\t\t\twhile (start < length) {", "+\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) (documentNumbers[start] >> 8);", "+\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "+\t\t\t}", "+\t\t\tthis.streamEnd += length * 2;", "-\t\t\tsize = length << 2;", "-\t\t\tthis.bufferIndex += size;", "-\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tint number = documentNumbers[i];", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tint number = documentNumbers[i];", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\twhile (start < length) {", "+\t\t\t\twriteStreamInt(stream, documentNumbers[start++]);", "-\t\t\tthis.streamEnd += size;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ca51f5af1bcc4878d386510b96e87e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException", "signatureAfterChange": " private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException", "diff": ["-\tint idx = this.bufferIndex;", "-\tint bufferSize = BUFFER_READ_SIZE;", "+", "+\tint i = 0;", "-\t\t\tthis.bufferIndex += arraySize;", "-\t\t\tif (this.bufferIndex < bufferSize) {", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tindexes[i] = streamBuffer[idx++] & 0xFF;", "+\t\t\twhile (i < arraySize) {", "+\t\t\t\t// how many bytes without refilling the buffer?", "+\t\t\t\tint bytesInBuffer = i + this.bufferEnd - this.bufferIndex;", "+\t\t\t\tif (bytesInBuffer > arraySize)", "+\t\t\t\t\tbytesInBuffer = arraySize;", "+\t\t\t\twhile (i < bytesInBuffer) {", "+\t\t\t\t\tindexes[i++] = this.streamBuffer[this.bufferIndex++] & 0xFF;", "-\t\t\t} else {", "-\t\t\t\t// set size to read on file", "-\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\t\t\t// fill indexes array", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tindexes[i] = streamBuffer[idx++] & 0xFF;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (i < arraySize && stream != null)", "+\t\t\t\t\treadStreamBuffer(stream);", "-\t\t\tthis.bufferIndex += arraySize << 1;", "-\t\t\tif (this.bufferIndex < bufferSize) {", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "+\t\t\twhile (i < arraySize) {", "+\t\t\t\t// how many shorts without refilling the buffer?", "+\t\t\t\tint shortsInBuffer = i + ((this.bufferEnd - this.bufferIndex) / 2);", "+\t\t\t\tif (shortsInBuffer > arraySize)", "+\t\t\t\t\tshortsInBuffer = arraySize;", "+\t\t\t\twhile (i < shortsInBuffer) {", "+\t\t\t\t\tint val = (this.streamBuffer[this.bufferIndex++] & 0xFF) << 8;", "+\t\t\t\t\tindexes[i++] = val + (this.streamBuffer[this.bufferIndex++] & 0xFF);", "-\t\t\t} else {", "-\t\t\t\t// set size to read on file", "-\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\t\t\t// fill indexes array", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (i < arraySize && stream != null)", "+\t\t\t\t\treadStreamBuffer(stream);", "-\t\t\tthis.bufferIndex += arraySize << 2;", "-\t\t\tif (this.bufferIndex < bufferSize) {", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// set size to read on file", "-\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "-\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "-\t\t\t\t// fill indexes array", "-\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "-\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "-\t\t\t\t\tif (idx == bufferSize) {", "-\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\twhile (i < arraySize) {", "+\t\t\t\tindexes[i++] = readStreamInt(stream);", "-\tthis.bufferIndex = idx; // rsync buffer index"]}], "num": 46500}
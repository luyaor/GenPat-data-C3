{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b171d32f70c5089e8e48343bdd45723f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a35c3b439086a6989b8909730c1359f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ExternalAnnotationProvider.java", "commitBeforeChange": "80e31481d0d6262559c156b1e1d04936f3ab697a", "commitAfterChange": "a071cbdaf211a260b8aa9c61822ac5501cee9c5c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void initialize(InputStream input) throws IOException", "signatureAfterChange": "  \tprivate void initialize(InputStream input) throws IOException", "diff": ["-\t\t\tString line = reader.readLine().trim();", "-\t\t\tif (line.startsWith(CLASS_PREFIX)) {", "-\t\t\t\tline = line.substring(CLASS_PREFIX.length());", "-\t\t\t} else {", "-\t\t\t\tthrow new IOException(\"missing class header in annotation file\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tif (!trimTail(line).equals(this.typeName)) {", "-\t\t\t\tthrow new IOException(\"mismatching class name in annotation file, expected \"+this.typeName+\", but header said \"+line); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tassertClassHeader(reader.readLine(), this.typeName);", "+", "+\t\t\tString line;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcbab705e7052ba0c45b164bebcdd59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "798930acf7a5c696ab193dcb42efda55fb600151", "commitAfterChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\tConstant cst = condition.constant;", "-\t\tConstant condCst = condition.optimizedBooleanConstant();", "-\t\tboolean needTruePart =", "-\t\t\t!(((cst != Constant.NotAConstant) && (cst.booleanValue() == false))", "-\t\t\t\t|| ((condCst != Constant.NotAConstant) && (condCst.booleanValue() == false)));", "-\t\tboolean needFalsePart =", "-\t\t\t!(((cst != Constant.NotAConstant) && (cst.booleanValue() == true))", "-\t\t\t\t|| ((condCst != Constant.NotAConstant) && (condCst.booleanValue() == true)));", "+\t\tConstant cst = condition.optimizedBooleanConstant();", "+\t\tboolean needTruePart = !(cst != Constant.NotAConstant && cst.booleanValue() == false);", "+\t\tboolean needFalsePart = \t!(cst != Constant.NotAConstant && cst.booleanValue() == true);", "-\t\tboolean needConditionValue = (cst == Constant.NotAConstant) && (condCst == Constant.NotAConstant);", "-\t\t\tneedConditionValue);", "+\t\t\tcst == Constant.NotAConstant);"]}], "num": 70456}
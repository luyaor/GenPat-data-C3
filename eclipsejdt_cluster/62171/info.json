{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2c00561de4fbc6bbdfae74952256789", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b711117ecc3a6beacd3913b2085cd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "commitAfterChange": "85d82ef92c86e257cfcb71c0ec95b6b64432a5cb", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic boolean match(IfStatement node, Object other)", "signatureAfterChange": " \tpublic boolean match(LambdaExpression node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(LambdaExpression node, Object other) {", "+\t\tif (!(other instanceof LambdaExpression)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tLambdaExpression o = (LambdaExpression) other;", "+\t\treturn\t(node.hasParentheses() == o.hasParentheses())", "+\t\t\t\t&& safeSubtreeListMatch(node.parameters(), o.parameters())", "+\t\t\t\t&& safeSubtreeMatch(node.getBody(), o.getBody());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92332e24cdd113ac1d7381bf3200232", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "bcb907ad93b1202cb7679b9dabebf16d872cd1bf", "commitAfterChange": "3ef93f23afcd2f32a7f2e702fed5d9d29c70e752", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic boolean match(Initializer node, Object other)", "signatureAfterChange": " \tpublic boolean match(InstanceofExpression node, Object other)", "diff": ["+\tpublic boolean match(InstanceofExpression node, Object other) {", "+\t\tif (!(other instanceof InstanceofExpression)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tInstanceofExpression o = (InstanceofExpression) other;", "+\t\treturn (", "+\t\t\t\tsafeSubtreeMatch(node.getLeftOperand(), o.getLeftOperand())", "+\t\t\t\t&& safeSubtreeMatch(node.getRightOperand(), o.getRightOperand()));", "+\t}"]}], "num": 62171}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9f4fbaf96c75ec37d34d65d7289cb1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14763bb2cf9a45486d203d67e18b3ece", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "d061380dab0a8284949c7137c9f618f956975bfb", "commitAfterChange": "f036902b8950e5adf2d4599a6d5e2299f4b9d8bf", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "  \tprotected int retrieveProperRightBracketPosition(int bracketNumber, int start, int end)", "signatureAfterChange": "  \tprotected int retrieveProperRightBracketPosition(int bracketNumber, int start)", "diff": ["-\tprotected int retrieveProperRightBracketPosition(int bracketNumber, int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "+\tprotected int retrieveProperRightBracketPosition(int bracketNumber, int start) {", "+\t\tthis.scanner.resetTo(start, this.compilationUnitSource.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f7088cfa6d451b4b6e91f521115abbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "70b9f71bdfa4f15d433383739618a9fdcdbf50e8", "commitAfterChange": "d9dd3f3b4344311765aa43bd0ec69a035e3c1a0f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\tprivate void formatArrayInitializer(ArrayInitializer arrayInitializer, BlockScope scope, boolean insertSpaceBeforeOpeningBrace) {", "-\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "-\t\t", "-\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\tformatOpeningBrace(array_initializer_brace_position, insertSpaceBeforeOpeningBrace);", "-\t\t", "-\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "-\t\tif (expressions != null) {", "-\t\t\tint expressionsLength = expressions.length;", "-\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "-\t\t\tif (expressionsLength > 1) {", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t}", "-\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "-\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "-\t\t\t\t\t\tAlignment.R_OUTERMOST,", "-\t\t\t\t\t\texpressionsLength,", "-\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "-\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "-\t\t\t\t\t\ttrue);", "-\t\t\t\t", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t    arrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "-\t\t\t\tboolean ok = false;", "-\t\t\t\tdo {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tok = true;", "-\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t}", "-\t\t\t\t} while (!ok);", "-\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "-\t\t\t} else {", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t\tthis.scribe.indent();", "-\t\t\t\t}", "-\t\t\t\t// we don't need to use an alignment", "-\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\tif (isComma()) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t}", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.unIndent();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {", "-\t\t\tthis.scribe.space();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false, true); ", "-\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}\t", "-\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "-\t}", "+\tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope) {\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);", "+\t\t}", "+\t\t", "+\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "+\t\tformatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\t", "+\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "+\t\tif (expressions != null) {", "+\t\t\tint expressionsLength = expressions.length;", "+\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "+\t\t\tif (expressionsLength > 1) {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "+\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "+\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "+\t\t\t\t\t\tAlignment.R_OUTERMOST,", "+\t\t\t\t\t\texpressionsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "+\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "+\t\t\t\t\t\ttrue);", "+\t\t\t\t", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t    arrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\texpressions[0].traverse(this, scope);", "+\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "+\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "+\t\t\t\t\t\t\t\tif (isComma()) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t}", "+\t\t\t\t// we don't need to use an alignment", "+\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\texpressions[0].traverse(this, scope);", "+\t\t\t\tif (isComma()) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t}", "+\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t} else if (this.preferences.insert_space_between_empty_braces_in_array_initializer) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false, true); ", "+\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\tthis.scribe.unIndent();", "+\t\t}\t", "+\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(arrayInitializer, numberOfParens);", "+\t\t}"]}], "num": 45618}
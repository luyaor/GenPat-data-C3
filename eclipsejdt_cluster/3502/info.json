{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01c461da1f478c0d98c288c3780807cb", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332be22628f3c40a56e901c0637d4032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testField2() throws JavaModelException", "signatureAfterChange": " \tpublic void testField2() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testField2() throws JavaModelException {", "-\t\tASTNode node = buildAST(", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  Object foo() {\\n\" +", "-\t\t\t\"    return new Object() {\\n\" +", "-\t\t\t\"      Object /*start*/field/*end*/;\\n\" +", "-\t\t\t\"    };\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"}\"", "-\t\t);", "-\t\tIBinding binding = ((VariableDeclaration) node).resolveBinding();", "-\t\tassertNotNull(\"No binding\", binding);", "-\t\tIJavaElement element = binding.getJavaElement();", "-\t\tassertElementEquals(", "-\t\t\t\"Unexpected Java element\",", "-\t\t\t\"field [in <anonymous #1> [in foo() [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]]]\",", "-\t\t\telement", "-\t\t);", "-\t\tassertTrue(\"Element should exist\", element.exists());", "-\t}", "+\t */", "+\tpublic void testField2() throws JavaModelException {", "+\t\tASTNode node = buildAST(", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\"    return new Object() {\\n\" +", "+\t\t\t\"      Object /*start*/field/*end*/;\\n\" +", "+\t\t\t\"    };\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tIBinding binding = ((VariableDeclaration) node).resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tIJavaElement element = binding.getJavaElement();", "+\t\tassertElementEquals(", "+\t\t\t\"Unexpected Java element\",", "+\t\t\t\"field [in <anonymous #1> [in foo() [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]]]\",", "+\t\t\telement", "+\t\t);", "+\t\tassertTrue(\"Element should exist\", element.exists());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb238b8f2128720bd6bb6c1e02ece2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testField1() throws JavaModelException", "signatureAfterChange": " \tpublic void testField1() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testField1() throws JavaModelException {", "-\t\tASTNode node = buildAST(", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"  Object /*start*/field/*end*/;\\n\" +", "-\t\t\t\"}\"", "-\t\t);", "-\t\tIBinding binding = ((VariableDeclaration) node).resolveBinding();", "-\t\tassertNotNull(\"No binding\", binding);", "-\t\tIJavaElement element = binding.getJavaElement();", "-\t\tassertElementEquals(", "-\t\t\t\"Unexpected Java element\",", "-\t\t\t\"field [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\telement", "-\t\t);", "-\t\tassertTrue(\"Element should exist\", element.exists());", "-\t}", "+\t */", "+\tpublic void testField1() throws JavaModelException {", "+\t\tASTNode node = buildAST(", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  Object /*start*/field/*end*/;\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tIBinding binding = ((VariableDeclaration) node).resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tIJavaElement element = binding.getJavaElement();", "+\t\tassertElementEquals(", "+\t\t\t\"Unexpected Java element\",", "+\t\t\t\"field [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]\",", "+\t\t\telement", "+\t\t);", "+\t\tassertTrue(\"Element should exist\", element.exists());", "+\t}"]}], "num": 3502}
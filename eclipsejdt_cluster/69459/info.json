{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d36a7fcb3786dba06eb9d2f37c64f25f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22baac5e2a6f56eadd32a98bc18ba8dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "diff": ["- */", "-protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "-\t\tIPath[] inclusionPatternPaths = new IPath[0];", "+\t\tIPath[] accessibleFiles = new IPath[0];", "-\t\t\tinclusionPatternPaths = new IPath[patternsCount];", "+\t\t\taccessibleFiles = new IPath[patternsCount];", "-\t\t\t\tinclusionPatternPaths[j] = new Path(tokenizer.nextToken());", "+\t\t\t\taccessibleFiles[j] = new Path(tokenizer.nextToken());", "-\t\tIPath[] exclusionPatternPaths = new IPath[0];", "+\t\tIPath[] nonAccessibleFiles = new IPath[0];", "-\t\t\texclusionPatternPaths = new IPath[patternsCount];", "+\t\t\tnonAccessibleFiles = new IPath[patternsCount];", "-\t\t\t\texclusionPatternPaths[j] = new Path(tokenizer.nextToken());", "+\t\t\t\tnonAccessibleFiles[j] = new Path(tokenizer.nextToken());", "+\t\tclasspath[i/increment] = JavaCore.newSourceEntry(folderPath, accessibleFiles, nonAccessibleFiles, null); ", "+\t}", "+\treturn classpath;", "+}", "-\t\t\tclasspath[i/increment] = JavaCore.newProjectEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, true/*combine access restrictions*/, new IClasspathAttribute[0], false); ", "-\t\t\tclasspath[i/increment] = JavaCore.newSourceEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e3f24220b144caea7431f727dcb49f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "diff": ["-protected IClasspathEntry[] createClasspath(String[] sourceFoldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "-\tint length = sourceFoldersAndPatterns.length;", "+ */", "+protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "+\tint length = foldersAndPatterns.length;", "-\t\tString src = sourceFoldersAndPatterns[i];", "+\t\tString src = foldersAndPatterns[i];", "-\t\t\tString patterns = sourceFoldersAndPatterns[i+1];", "+\t\t\tString patterns = foldersAndPatterns[i+1];", "-\t\t\tString patterns = sourceFoldersAndPatterns[i+increment-1];", "+\t\t\tString patterns = foldersAndPatterns[i+increment-1];", "-\t\tclasspath[i/increment] = JavaCore.newSourceEntry(new Path(src), inclusionPatternPaths, exclusionPatternPaths, null); ", "+\t\tIPath folderPath = new Path(src);", "+\t\tif (projectName != null && folderPath.segmentCount() == 1 && !projectName.equals(folderPath.lastSegment())) {", "+\t\t\tclasspath[i/increment] = JavaCore.newProjectEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, false); ", "+\t\t} else {", "+\t\t\tclasspath[i/increment] = JavaCore.newSourceEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, null); ", "+\t\t}"]}], "num": 69459}
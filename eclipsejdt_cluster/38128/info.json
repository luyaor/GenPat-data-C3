{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2974a6437214a3b2d740bac349d60c8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1131aa67193797974a5e0ad411487650", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "commitAfterChange": "e92ab0eafbe7472576da485243db5aa49da5df74", "methodNumberBeforeChange": 538, "methodNumberAfterChange": 538, "signatureBeforeChange": " public void illegalReturnRedefinition(ASTNode location, MethodBinding descriptorMethod, \t\t\tchar[][] nonNullAnnotationName,  \t\t\tchar[][] providedAnnotationName, TypeBinding providedType)", "signatureAfterChange": " public void illegalReturnRedefinition(ASTNode location, MethodBinding descriptorMethod, \t\t\tboolean isUnchecked, TypeBinding providedType)", "diff": ["-\t\t\tchar[][] nonNullAnnotationName, ", "-\t\t\tchar/*@Nullable*/[][] providedAnnotationName, TypeBinding providedType) {", "+\t\t\tboolean isUnchecked, TypeBinding providedType) {", "-\tStringBuffer providedPrefix = new StringBuffer(); ", "-\tStringBuffer providedShortPrefix = new StringBuffer(); ", "-\tif (providedAnnotationName != null) {", "-\t\tprovidedPrefix.append('@').append(CharOperation.toString(providedAnnotationName)).append(' ');", "-\t\tprovidedShortPrefix.append('@').append(providedAnnotationName[providedAnnotationName.length-1]).append(' ');", "-\t}", "-\t\tprovidedAnnotationName == null", "+\t\tisUnchecked", "-\t\t\t\t\t\tCharOperation.toString(nonNullAnnotationName), String.valueOf(descriptorMethod.returnType.readableName()),", "-\t\t\t\t\t\tprovidedPrefix.toString(), String.valueOf(providedType.readableName())},", "+\t\t\t\t\t\tString.valueOf(descriptorMethod.returnType.nullAnnotatedReadableName(this.options, false)),", "+\t\t\t\t\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, false))},", "-\t\t\t\t\t\tString.valueOf(nonNullAnnotationName[nonNullAnnotationName.length-1]), String.valueOf(descriptorMethod.returnType.shortReadableName()),", "-\t\t\t\t\t\tprovidedShortPrefix.toString(), String.valueOf(providedType.shortReadableName())},", "+\t\t\t\t\t\tString.valueOf(descriptorMethod.returnType.nullAnnotatedReadableName(this.options, true)),", "+\t\t\t\t\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, true))},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ecebd3f0e49233e4369312632f0d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BuildNotifier.java", "commitBeforeChange": "9df5be4a36832dc62c270f51baaa2d061d29fa15", "commitAfterChange": "66711177c60015220094d37d3722607c867721b9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected String problemsMessage()", "signatureAfterChange": " protected String problemsMessage()", "diff": ["+\tboolean displayBoth = numNew > 0 && numFixed > 0;", "-\tif (numNew == 0) {", "-\t\t// (Fixed: x errors, y warnings)", "-\t\tbuffer.append(Util.bind(\"build.fixedHeader\")); //$NON-NLS-1$", "-\t\tbuffer.append(' ');", "-\t\tif (fixedErrorCount > 0) {", "-\t\t\tif (fixedErrorCount == 1)", "-\t\t\t\tbuffer.append(Util.bind(\"build.oneError\")); //$NON-NLS-1$", "-\t\t\telse", "-\t\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", String.valueOf(fixedErrorCount))); //$NON-NLS-1$", "-\t\t\tif (fixedWarningCount > 0)", "-\t\t\t\tbuffer.append(',').append(' ');", "-\t\t}", "-\t\tif (fixedWarningCount > 0) {", "-\t\t\tif (fixedWarningCount == 1)", "-\t\t\t\tbuffer.append(Util.bind(\"build.oneWarning\")); //$NON-NLS-1$", "-\t\t\telse", "-\t\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", String.valueOf(fixedWarningCount))); //$NON-NLS-1$", "-\t\t}", "-\t} else if (numFixed == 0) {", "-\t\t// (Found: x errors, y warnings)", "+\tif (numNew > 0) {", "+\t\t// (Found x errors + y warnings)", "-\t\tif (newErrorCount > 0) {", "+\t\tif (displayBoth || newErrorCount > 0) {", "-\t\t\tif (newWarningCount > 0)", "-\t\t\t\tbuffer.append(',').append(' ');", "+\t\t\tif (displayBoth || newWarningCount > 0)", "+\t\t\t\tbuffer.append(\" + \"); //$NON-NLS-1$", "-\t\tif (newWarningCount > 0) {", "+\t\tif (displayBoth || newWarningCount > 0) {", "-\t} else {", "-\t\t// (Found/fixed: x/y errors, x/y warnings)", "-\t\tbuffer.append(Util.bind(\"build.foundFixedHeader\")); //$NON-NLS-1$", "+\t\tif (numFixed > 0)", "+\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "+\t}", "+\tif (numFixed > 0) {", "+\t\t// (Fixed x errors + y warnings) or (Found x errors + y warnings, Fixed x + y)", "+\t\tbuffer.append(Util.bind(\"build.fixedHeader\")); //$NON-NLS-1$", "-", "-\t\tif (newErrorCount > 0 || fixedErrorCount > 0) {", "-\t\t\tString plusMinus = String.valueOf(newErrorCount) + \"/\" + String.valueOf(fixedErrorCount); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", plusMinus)); //$NON-NLS-1$", "-\t\t\tif (fixedWarningCount > 0 || newWarningCount > 0)", "-\t\t\t\tbuffer.append(',').append(' ');", "-\t\t}", "-\t\tif (newWarningCount > 0 || fixedWarningCount > 0) {", "-\t\t\tString plusMinus = String.valueOf(newWarningCount) + \"/\" + String.valueOf(fixedWarningCount); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", plusMinus)); //$NON-NLS-1$", "+\t\tif (displayBoth) {", "+\t\t\tbuffer.append(String.valueOf(fixedErrorCount));", "+\t\t\tbuffer.append(\" + \"); //$NON-NLS-1$", "+\t\t\tbuffer.append(String.valueOf(fixedWarningCount));", "+\t\t} else {", "+\t\t\tif (fixedErrorCount > 0) {", "+\t\t\t\tif (fixedErrorCount == 1)", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.oneError\")); //$NON-NLS-1$", "+\t\t\t\telse", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.multipleErrors\", String.valueOf(fixedErrorCount))); //$NON-NLS-1$", "+\t\t\t\tif (fixedWarningCount > 0)", "+\t\t\t\t\tbuffer.append(\" + \"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (fixedWarningCount > 0) {", "+\t\t\t\tif (fixedWarningCount == 1)", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.oneWarning\")); //$NON-NLS-1$", "+\t\t\t\telse", "+\t\t\t\t\tbuffer.append(Util.bind(\"build.multipleWarnings\", String.valueOf(fixedWarningCount))); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ac52958c954a20366f19f684f059bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f1ecb4b2d8ea593a495f1608bdd4d8fccb10a732", "commitAfterChange": "575694a4feaf3caf1988ca9a05c237c3a23369b5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t// Javadoc implicit IDs for deprecatedField(...)", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedField:", "-\t\t// Javadoc implicit IDs for deprecatedMethod(...)", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedConstructor:", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedMethod:", "-\t\t// Javadoc implicit IDs for deprecatedType(...)", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedType:", "-\t\t// Javadoc implicit IDs for invalidField(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedField:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleField:", "-\t\tcase IProblem.Javadoc | IProblem.AmbiguousField:", "-\t\t// Javadoc implicit IDs for invalidConstructor(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedConstructor:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleConstructor:", "-\t\t// Javadoc implicit IDs for invalidMethod(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedMethod:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleMethod:", "-\t\tcase IProblem.Javadoc | IProblem.ParameterMismatch:", "-\t\t// Javadoc implicit IDs for invalidType(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedType:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleType:", "-\t\t// Javadoc implicit IDs for errorNoMethodFor(...)", "-\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnArrayType:", "-\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnBaseType:", "+\t\tcase IProblem.JavadocUsingDeprecatedField:", "+\t\tcase IProblem.JavadocUsingDeprecatedConstructor:", "+\t\tcase IProblem.JavadocUsingDeprecatedMethod:", "+\t\tcase IProblem.JavadocUsingDeprecatedType:", "+\t\tcase IProblem.JavadocUndefinedField:", "+\t\tcase IProblem.JavadocNotVisibleField:", "+\t\tcase IProblem.JavadocAmbiguousField:", "+\t\tcase IProblem.JavadocUndefinedConstructor:", "+\t\tcase IProblem.JavadocNotVisibleConstructor:", "+\t\tcase IProblem.JavadocAmbiguousConstructor:", "+\t\tcase IProblem.JavadocUndefinedMethod:", "+\t\tcase IProblem.JavadocNotVisibleMethod:", "+\t\tcase IProblem.JavadocAmbiguousMethod:", "+\t\tcase IProblem.JavadocParameterMismatch:", "+\t\tcase IProblem.JavadocUndefinedType:", "+\t\tcase IProblem.JavadocNotVisibleType:", "+\t\tcase IProblem.JavadocAmbiguousType:", "+\t\tcase IProblem.JavadocInternalTypeNameProvided:", "+\t\tcase IProblem.JavadocNoMessageSendOnArrayType:", "+\t\tcase IProblem.JavadocNoMessageSendOnBaseType:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7db701f3717d1976e7cefc41b4fb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "commitAfterChange": "b7f468690a70977c68b74d1aeee81bdba359d238", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void deleteFile(File file)", "signatureAfterChange": " \tpublic void deleteFile(File file)", "diff": ["-\t\tfile = file.getAbsoluteFile();", "-\t\tif (!file.exists())", "-\t\t\treturn;", "-\t\tif (file.isDirectory()) {", "-\t\t\tString[] files = file.list();", "-\t\t\t//file.list() can return null", "-\t\t\tif (files != null) {", "-\t\t\t\tfor (int i = 0; i < files.length; ++i) {", "-\t\t\t\t\tdeleteFile(new File(file, files[i]));", "-\t\t\t\t}", "+\t\tint retryCount = 0;", "+\t\twhile (++retryCount <= 60) { // wait 1 minute at most", "+\t\t\tif (org.eclipse.jdt.core.tests.util.Util.delete(file)) {", "+\t\t\t\tbreak;", "-\t\tboolean success = file.delete();", "-\t\tint retryCount = 60; // wait 1 minute at most", "-\t\twhile (!success && --retryCount >= 0) {", "-\t\t\ttry {", "-\t\t\t\tThread.sleep(1000);", "-\t\t\t} catch (InterruptedException e) {", "-\t\t\t}", "-\t\t\tsuccess = file.delete();", "-\t\t}", "-\t\tif (success) return;", "-\t\tSystem.err.println(\"Failed to delete \" + file.getPath());"]}], "num": 38128}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34143c3d483ef08cfe7f199124b470c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3baac3642b715ca1c81a18f387ae4e06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "d3db880f9ce093cbf2c8ff1aba8ac97e00156523", "commitAfterChange": "161582c49a2d0971bc7a25f8acf5442d64ba84bb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\tcheckParameterizedAllocation: {", "+\t\t\t\t\tif (this.type instanceof ParameterizedQualifiedTypeReference) { // disallow new X<String>.Y<Integer>()", "+\t\t\t\t\t\tReferenceBinding currentType = (ReferenceBinding)receiverType;", "+\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t// isStatic() is answering true for toplevel types", "+\t\t\t\t\t\t\tif ((currentType.modifiers & AccStatic) != 0) break checkParameterizedAllocation;", "+\t\t\t\t\t\t\tif (currentType.isRawType()) break checkParameterizedAllocation;", "+\t\t\t\t\t\t} while ((currentType = currentType.enclosingType())!= null);", "+\t\t\t\t\t\tParameterizedQualifiedTypeReference qRef = (ParameterizedQualifiedTypeReference) this.type;", "+\t\t\t\t\t\tfor (int i = qRef.typeArguments.length - 2; i >= 0; i--) {", "+\t\t\t\t\t\t\tif (qRef.typeArguments[i] != null) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().illegalQualifiedParameterizedTypeAllocation(this.type, receiverType);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c1173c9b91cc561be52c9e111bcc92f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "d3db880f9ce093cbf2c8ff1aba8ac97e00156523", "commitAfterChange": "161582c49a2d0971bc7a25f8acf5442d64ba84bb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tcheckParameterizedAllocation: {", "+\t\t\t\tif (this.type instanceof ParameterizedQualifiedTypeReference) { // disallow new X<String>.Y<Integer>()", "+\t\t\t\t\tReferenceBinding currentType = (ReferenceBinding)this.resolvedType;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\t// isStatic() is answering true for toplevel types", "+\t\t\t\t\t\tif ((currentType.modifiers & AccStatic) != 0) break checkParameterizedAllocation;", "+\t\t\t\t\t\tif (currentType.isRawType()) break checkParameterizedAllocation;", "+\t\t\t\t\t} while ((currentType = currentType.enclosingType())!= null);", "+\t\t\t\t\tParameterizedQualifiedTypeReference qRef = (ParameterizedQualifiedTypeReference) this.type;", "+\t\t\t\t\tfor (int i = qRef.typeArguments.length - 2; i >= 0; i--) {", "+\t\t\t\t\t\tif (qRef.typeArguments[i] != null) {", "+\t\t\t\t\t\t\tscope.problemReporter().illegalQualifiedParameterizedTypeAllocation(this.type, this.resolvedType);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 294}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "290e628c0e88266d607a5dd2c593b28f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e0bb6173b83fb8d771561ea115325d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected boolean pushParamName(boolean isTypeParam)", "signatureAfterChange": " protected boolean pushParamName(boolean isTypeParam)", "diff": ["-\tif (isTypeParam) {", "-\t\treference = new FormatJavadocReference(start, (int) this.identifierPositionStack[2], lineStart);", "-\t\treference.positions = new long[3];", "-\t\tSystem.arraycopy(this.identifierPositionStack, 0, reference.positions, 0, 3);", "-\t} else {", "-\t\treference = new FormatJavadocReference(start, (int) this.identifierPositionStack[0], lineStart);", "-\t}", "+\treference = new FormatJavadocReference(start, (int) this.identifierPositionStack[isTypeParam ? 2 : 0], lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3067160d273a3ba37ce4be9d74923f7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 220, "signatureBeforeChange": " private boolean isLiteral(int token)", "signatureAfterChange": " private boolean isLiteral(int token)", "diff": ["-\tswitch(token) {", "-\t\tcase TerminalTokens.TokenNameIntegerLiteral:", "-\t\tcase TerminalTokens.TokenNameLongLiteral:", "-\t\tcase TerminalTokens.TokenNameFloatingPointLiteral:", "-\t\tcase TerminalTokens.TokenNameDoubleLiteral:", "-\t\tcase TerminalTokens.TokenNameStringLiteral:", "-\t\tcase TerminalTokens.TokenNameCharacterLiteral:", "-\t\t\treturn true;", "-\t\tdefault:", "-\t\t\treturn false;", "-\t}", "+\treturn Scanner.isLiteral(token);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b33dba8999cdee1906841be4477ab2c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "22bf8b2f615c4dacc00d77046015851ecf0d7afd", "commitAfterChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void checkMethods()", "signatureAfterChange": "  void checkMethods()", "diff": ["-\t\t\t\t\tif (!CharOperation.equals(inheritedMethod.declaringClass.qualifiedPackageName(), CharOperation.NO_CHAR)) // https://bugs.eclipse.org/bugs/show_bug.cgi?id=343060", "-\t\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());", "+\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());", "-\t\t\t\t\tif (!CharOperation.equals(inheritedMethod.declaringClass.qualifiedPackageName(), CharOperation.NO_CHAR)) // https://bugs.eclipse.org/bugs/show_bug.cgi?id=343060", "-\t\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());", "+\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7b3e0be4f57d4114df48a6d4b97f50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a05a975af5c0bba95d0d398d2bd3a368d9cd616f", "commitAfterChange": "3a562aaf09f9f323b583086b80b4683378886606", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public int literalIndex(double key)", "signatureAfterChange": " public int literalIndex(double key)", "diff": ["+\t\tint length = poolContent.length;", "+\t\tif (currentOffset + 8 >= length) {", "+\t\t\tresizePoolContents(8);", "+\t\t}", "-\t\t\ttry {", "-\t\t\t\tpoolContent[currentOffset++] = (byte) (temp >>> (56 - (i << 3)));", "-\t\t\t} catch (IndexOutOfBoundsException e) { //currentOffset has been ++ already (see the -1)", "-\t\t\t\tint length = poolContent.length;", "-\t\t\t\tSystem.arraycopy(poolContent, 0, (poolContent = new byte[(length << 1) + CONSTANTPOOL_INITIAL_SIZE]), 0, length);", "-\t\t\t\tpoolContent[currentOffset - 1] = (byte) (temp >>> (56 - (i << 3)));", "-\t\t\t}", "+\t\t\tpoolContent[currentOffset++] = (byte) (temp >>> (56 - (i << 3)));"]}], "num": 50274}
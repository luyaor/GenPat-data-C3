{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e585fe85bef7af7a5fbde53647a1ee7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c57b6094f7fc1e84818f33ab72fdd136", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\tgenerateReadSequence(currentScope, codeStream);", "-\tif (this.lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\tif (this.lastFieldBinding.isStatic()){", "-\t\t\tcodeStream.getstatic(this.lastFieldBinding);", "+\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\tif (lastFieldBinding.isStatic()){", "+\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\tcodeStream.getfield(this.lastFieldBinding);", "+\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t\tfieldStore(codeStream, this.lastFieldBinding, null, valueRequired);", "+\t\tfieldStore(codeStream, lastFieldBinding, null, valueRequired);", "-\t\tif (this.lastFieldBinding.isStatic()){", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.lastFieldBinding);", "+\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.lastFieldBinding);", "+\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.lastFieldBinding);", "+\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "-\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.lastFieldBinding);", "+\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(this.lastFieldBinding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(lastFieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e36d16124a56b6f6475f13fa25ceb20d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "e8cc2a8f8e9efcff6e76a3ee15d5b53d1a958057", "commitAfterChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo methodInfo, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo methodInfo, CompilationResult compilationResult) {", "+\tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException {", "+\t\tSourceMethodElementInfo methodInfo = (SourceMethodElementInfo) methodHandle.getElementInfo();", "-\t\t\t\t\tchar[] defaultValueSource = ((SourceAnnotationMethodInfo) methodInfo).getDefaultValueSource(this.source.getContents());", "+\t\t\t\t\tchar[] defaultValueSource = ((SourceAnnotationMethodInfo) methodInfo).getDefaultValueSource(getSource());", "-\t\t\t\t\t\tif (this.parser == null) {", "-\t\t\t\t\t\t\tthis.parser = new Parser(this.problemReporter, true);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tExpression expression =  this.parser.parseMemberValue(defaultValueSource, 0, defaultValueSource.length, this.unit);", "+\t\t\t\t\t\tExpression expression =  parseMemberValue(defaultValueSource);", "+", "+\t\t/* convert annotations */", "+\t\tmethod.annotations = convertAnnotations(methodHandle);", "-\t\t\t\t\tJavaElement type = (JavaElement)children[i];", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tTypeDeclaration localType = convert((SourceTypeElementInfo)type.getElementInfo(), compilationResult);", "-\t\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "-\t\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "-\t\t\t\t\t\t\texpression.type = localType.superclass;", "-\t\t\t\t\t\t\tlocalType.superclass = null;", "-\t\t\t\t\t\t\tlocalType.superInterfaces = null;", "-\t\t\t\t\t\t\tlocalType.allocation = expression;", "-\t\t\t\t\t\t\tstatements[i] = expression;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tstatements[i] = localType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// ignore", "+\t\t\t\t\tSourceType type = (SourceType) children[i];", "+\t\t\t\t\tTypeDeclaration localType = convert(type, compilationResult);", "+\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatements[i] = localType;"]}], "num": 44419}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25a1078bc72cb1f244ca015e86b2449d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d5ffffcd0cd6e4b76f5559519b691ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "2314c16241660b35014c2f51be7d9e9dcaef9a58", "commitAfterChange": "ceea24195947a1526b56f97d57fd4f7128a7bbd1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test002() throws CoreException", "signatureAfterChange": " \tpublic void test002() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = null;", "-\t\ttry {", "-\t\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class X extends /*start*/Y/*end*/ {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"/*start*/public class Y {\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t});", "-\t\t\tworkingCopies = createWorkingCopies(markerInfos, this.owner);", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor();", "-\t\t\tresolveASTs(workingCopies, requestor);", "-\t\t\t", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t\t", "-\t\t\t// compare the bindings coming from the 2 ASTs", "-\t\t\tType superX = (Type) findNode((CompilationUnit) requestor.asts.get(0), markerInfos[0]);", "-\t\t\tTypeDeclaration typeY = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(1), markerInfos[1]);", "-\t\t\tIBinding superXBinding = superX.resolveBinding();", "-\t\t\tIBinding typeYBinding = typeY.resolveBinding();", "-\t\t\tassertTrue(\"Super of X and Y should be the same\", superXBinding == typeYBinding);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "+\t\t\t\"/P/p1/X.java\",", "+\t\t\t\"package p1;\\n\" +", "+\t\t\t\"public class X extends /*start*/Y/*end*/ {\\n\" +", "+\t\t\t\"}\",", "+\t\t\t\"/P/p1/Y.java\",", "+\t\t\t\"package p1;\\n\" +", "+\t\t\t\"/*start*/public class Y {\\n\" +", "+\t\t\t\"}/*end*/\",", "+\t\t});", "+\t\tthis.workingCopies = createWorkingCopies(markerInfos, this.owner);", "+\t\tTestASTRequestor requestor = new TestASTRequestor();", "+\t\tresolveASTs(this.workingCopies, requestor);", "+\t\t", "+\t\tassertASTNodesEqual(", "+\t\t\t\"package p1;\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"package p1;\\n\" + ", "+\t\t\t\"public class Y {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\",", "+\t\t\trequestor.asts", "+\t\t);", "+\t\t", "+\t\t// compare the bindings coming from the 2 ASTs", "+\t\tType superX = (Type) findNode((CompilationUnit) requestor.asts.get(0), markerInfos[0]);", "+\t\tTypeDeclaration typeY = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(1), markerInfos[1]);", "+\t\tIBinding superXBinding = superX.resolveBinding();", "+\t\tIBinding typeYBinding = typeY.resolveBinding();", "+\t\tassertTrue(\"Super of X and Y should be the same\", superXBinding == typeYBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff012911a6056c8603497590ace013ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "2314c16241660b35014c2f51be7d9e9dcaef9a58", "commitAfterChange": "ceea24195947a1526b56f97d57fd4f7128a7bbd1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test001() throws CoreException", "signatureAfterChange": " \tpublic void test001() throws CoreException", "diff": ["-\t\tICompilationUnit[] workingCopies = null;", "-\t\ttry {", "-\t\t\tworkingCopies = createWorkingCopies(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class X extends Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor();", "-\t\t\tcreateASTs(workingCopies, requestor);", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "+\t\tthis.workingCopies = createWorkingCopies(new String[] {", "+\t\t\t\"/P/p1/X.java\",", "+\t\t\t\"package p1;\\n\" +", "+\t\t\t\"public class X extends Y {\\n\" +", "+\t\t\t\"}\",", "+\t\t\t\"/P/p1/Y.java\",", "+\t\t\t\"package p1;\\n\" +", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"}\",", "+\t\t});", "+\t\tTestASTRequestor requestor = new TestASTRequestor();", "+\t\tcreateASTs(this.workingCopies, requestor);", "+\t\tassertASTNodesEqual(", "+\t\t\t\"package p1;\\n\" + ", "+\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"package p1;\\n\" + ", "+\t\t\t\"public class Y {\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\",", "+\t\t\trequestor.asts", "+\t\t);"]}], "num": 53987}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "366cedeb5ec34ffa3c529a30d2c0cfbe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15074c30ab8c28d309573f3bef6d029f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "16e3cfb0a84cb0cd2c8901e2eb0295b42a63a54e", "commitAfterChange": "ab21422ac410052acb8d938b526b4111358a1452", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NormalAnnotation annotation, BlockScope scope)", "diff": ["-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_annotation) {", "-\t\t\t\t\tthis.scribe.space();", "+\t\t\tAlignment annotationAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\"annotationMemberValuePairs\",//$NON-NLS-1$", "+\t\t\t\t\tthis.preferences.alignment_for_arguments_in_annotation,", "+\t\t\t\t\tlength,", "+\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\tthis.scribe.enterAlignment(annotationAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "+\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.scribe.alignFragment(annotationAlignment, i);", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_annotation) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "+\t\t\t\t\t}", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t}", "-\t\t\tmemberValuePairs[length - 1].traverse(this, scope);", "+\t\t\t} while (!ok);", "+\t\t\tthis.scribe.exitAlignment(annotationAlignment, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41633b8360484700b5f83d702134fb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "54beaf9a0ac7e8e91c308765e4aff36ce5749605", "commitAfterChange": "2ad8f0c7463e2025ec9e28003dc9e376c4e0c20f", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        int line = this.scribe.line;", "-", "-        this.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "-", "-\t\tif (this.scribe.line > line) {", "-        \t// annotations introduced new line, but this is not a line wrapping", "-\t\t\t// see 158267", "-\t\t\tline = this.scribe.line;", "-\t\t}", "-\t\tthis.scribe.space();", "-", "-\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "-\t\tif (typeParameters != null) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "-\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tint length = typeParameters.length;", "-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "-\t\t\tif (isClosingGenericToken()) {", "-\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t}", "-", "-\t\t * Print the method return type", "+\t\t * Print comments to get proper line number", "-\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\tthis.scribe.printComment();", "+\t\tint line = this.scribe.line;", "+", "+\t\t// Create alignment", "+\t\tAlignment methodDeclAlignment = this.scribe.createAlignment(", "+\t\t\t\t\"methodDeclaration\",//$NON-NLS-1$", "+\t\t\t\tthis.preferences.alignment_for_method_declaration,", "+\t\t\t\tAlignment.R_INNERMOST,", "+\t\t\t\t3,", "+\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\tthis.scribe.enterAlignment(methodDeclAlignment);", "+\t\tboolean ok = false;", "+\t\tdo {", "+\t\t\ttry {", "-\t\tif (returnType != null) {", "-\t\t\treturnType.traverse(this, methodDeclarationScope);", "-\t\t}", "-\t\t/*", "-\t\t * Print the method name", "-\t\t */", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+\t\t\t\tthis.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "+\t\t\t\tint fragmentIndex = 0;", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, fragmentIndex);", "-\t\tformatMethodArguments(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t\t\tif (this.scribe.line > line) {", "+\t\t\t\t\t// annotations introduced new line, but this is not a line wrapping", "+\t\t\t\t\t// see 158267", "+\t\t\t\t\tline = this.scribe.line;", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.space();", "-\t\t/*", "-\t\t * Check for extra dimensions", "-\t\t */", "-\t\tint extraDimensions = getDimensions();", "-\t\tif (extraDimensions != 0) {", "-\t\t\t for (int i = 0; i < extraDimensions; i++) {", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t }", "-\t\t}", "+\t\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "+\t\t\t\tif (typeParameters != null) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "+\t\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tint length = typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+\t\t\t\t}", "-\t\tformatThrowsClause(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\t/*", "+\t\t\t\t * Print the method return type", "+\t\t\t\t */", "+\t\t\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\t", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.traverse(this, methodDeclarationScope);", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Print the method name", "+\t\t\t\t */", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+", "+\t\t\t\t// Format arguments", "+\t\t\t\tformatMethodArguments(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Check for extra dimensions", "+\t\t\t\t */", "+\t\t\t\tint extraDimensions = getDimensions();", "+\t\t\t\tif (extraDimensions != 0) {", "+\t\t\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t\t }", "+\t\t\t\t}", "+", "+\t\t\t\t// Format throws", "+\t\t\t\tformatThrowsClause(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\tok = true;", "+\t\t\t} catch (AlignmentException e) {", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);", "+\t\tthis.scribe.exitAlignment(methodDeclAlignment, true);"]}], "num": 51598}
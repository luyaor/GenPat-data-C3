{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d8b7497c84d0657c4b5461df615dca5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0febb8dcbfa0b119953a149e468b9dfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "5d2dde227fb55c68c1b5ecbe9e37790d7981d642", "commitAfterChange": "6516571b08ef2b8a3ca79436b6faa225bea91656", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected IFolder createFolder(String path) throws CoreException", "signatureAfterChange": " protected IFolder createFolder(String path) throws CoreException", "diff": ["-\tfinal IFolder folder = this.getFolder(path);", "-\tgetWorkspace().run(new IWorkspaceRunnable() {", "-\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\tIContainer parent = folder.getParent();", "-\t\t\tif (parent instanceof IFolder && !parent.exists()) {", "-\t\t\t\tcreateFolder(parent.getFullPath().toString());", "-\t\t\t} ", "-\t\t\tfolder.create(true, true, null);", "-\t\t}", "-\t},", "-\tnull);", "-", "-\treturn folder;", "+\treturn createFolder(new Path(path));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db48dc51655553c88f102ff203e0e96b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["+\t\treturn getElementInfo(null);", "+\t}", "-\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "-\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "-\t\tIJavaProject project = getJavaProject();", "-\t\tif (project != null && !project.isOpen()) {", "-\t\t\t// TODO: (jerome) need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "-\t\t\ttry {", "-\t\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project is not accessible or is not a java project", "-\t\t\t}", "-\t\t}", "-", "-\t\t// element info creation is done inside a lock on the JavaModelManager", "-\t\tJavaModelManager manager;", "-\t\tsynchronized(manager = JavaModelManager.getJavaModelManager()){", "-\t\t\tObject info = manager.getInfo(this);", "-\t\t\t\topenHierarchy();", "-\t\t\t\tinfo= manager.getInfo(this);", "-\t\t\t\tif (info == null) {", "-\t\t\t\t\tthrow newNotPresentException();", "-\t\t\treturn info;"]}], "num": 37556}
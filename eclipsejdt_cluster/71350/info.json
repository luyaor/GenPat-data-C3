{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "431782930753ef06ee3a727204f129c8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43117c19e48eec14da45f4f4dc9a5ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "f9fa136a7bc8b0dc9f16e62f62f223a268cdfdb0", "commitAfterChange": "2efe21d843d0efc8661ee74fad07d972022126e4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "+\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "-\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "+\t\t\t\t\tgetAllInheritedMethods((ReferenceBinding) expressionType);", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++) {", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7bac4aa194d835c92201d14c8189a21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "e5fda1d929f48b1ed961a5e3c698240a2263aa5e", "commitAfterChange": "492742130581f98e928eea7bd4ac7e448a4c7517", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["+\tint[] overriddenInheritedMethods = findOverriddenInheritedMethods(methods, length);", "+\tif (overriddenInheritedMethods != null) {", "+\t\t// detected some overridden methods that can be ignored when checking return types", "+\t\tint index = 0;", "+\t\tMethodBinding[] closestMethods = new MethodBinding[length];", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tif (overriddenInheritedMethods[i] == 0)", "+\t\t\t\tclosestMethods[index++] = methods[i];", "+\t\tmethods = closestMethods;", "+\t\tlength = index;", "+\t}", "+"]}], "num": 71350}
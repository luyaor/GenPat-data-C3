{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8098783088497b3e1f151e90f502c79", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11797f0ed08730f012389eb166559ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/DebugEvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test001()", "signatureAfterChange": " \tpublic void test001()", "diff": ["- */", "-public void test001() {", "-\tString userCode =", "-\t\t\"\";", "-\tJDIStackFrame stackFrame = new JDIStackFrame(", "-\t\tthis.jdiVM, ", "-\t\tthis,", "-\t\tuserCode);", "-\tDebugRequestor requestor = new DebugRequestor();", "-\tchar[] snippet = \"return 1;\".toCharArray();", "-\ttry {", "-\t\tcontext.evaluate(", "-\t\t\tsnippet,", "-\t\t\tstackFrame.localVariableTypeNames(),", "-\t\t\tstackFrame.localVariableNames(),", "-\t\t\tstackFrame.localVariableModifiers(),", "-\t\t\tstackFrame.declaringTypeName(),", "-\t\t\tstackFrame.isStatic(),", "-\t\t\tstackFrame.isConstructorCall(),", "-\t\t\tgetEnv(), ", "-\t\t\tgetOptions(), ", "-\t\t\trequestor, ", "-\t\t\tgetProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"No targetException \" + e.getMessage(), false);", "-\tassertTrue(\"Should get one result but got \" + requestor.resultIndex+1, requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tassertTrue(\"Code snippet should not have problems\", !result.hasProblems());", "-\tassertTrue(\"Result should have a value\", result.hasValue());", "-\tassertEquals(\"Value\", \"1\".toCharArray(), result.getValueDisplayString());", "-\tassertEquals(\"Type\", \"int\".toCharArray(), result.getValueTypeName());", "+\t */", "+\tpublic void test001() {", "+\t\tString userCode =", "+\t\t\t\"\";", "+\t\tJDIStackFrame stackFrame = new JDIStackFrame(", "+\t\t\tthis.jdiVM, ", "+\t\t\tthis,", "+\t\t\tuserCode);", "+\t\t", "+\t\tDebugRequestor requestor = new DebugRequestor();", "+\t\tchar[] snippet = \"return 1;\".toCharArray();", "+\t\ttry {", "+\t\t\tcontext.evaluate(", "+\t\t\t\tsnippet,", "+\t\t\t\tstackFrame.localVariableTypeNames(),", "+\t\t\t\tstackFrame.localVariableNames(),", "+\t\t\t\tstackFrame.localVariableModifiers(),", "+\t\t\t\tstackFrame.declaringTypeName(),", "+\t\t\t\tstackFrame.isStatic(),", "+\t\t\t\tstackFrame.isConstructorCall(),", "+\t\t\t\tgetEnv(), ", "+\t\t\t\tgetCompilerOptions(), ", "+\t\t\t\trequestor, ", "+\t\t\t\tgetProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"No targetException \" + e.getMessage(), false);", "+\t\t}", "+\t\tassertTrue(\"Should get one result but got \" + requestor.resultIndex+1, requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tassertTrue(\"Code snippet should not have problems\", !result.hasProblems());", "+\t\tassertTrue(\"Result should have a value\", result.hasValue());", "+\t\tassertEquals(\"Value\", \"1\".toCharArray(), result.getValueDisplayString());", "+\t\tassertEquals(\"Type\", \"int\".toCharArray(), result.getValueTypeName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37319104c1b9f4bdaeeae50d0fe0d3c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName)", "signatureAfterChange": " \tprotected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName)", "diff": ["- */", "-protected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tif (requestor.resultIndex != 0) {", "-\t\tfor (int i = 0; i < requestor.resultIndex; i++){", "-\t\t\tSystem.out.println(\"unexpected result[\"+i+\"]: \" + requestor.results[i]);", "-\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tif (expectedTypeName == null) {", "-\t\tassertTrue(\"Has value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "-\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "-\t\tassertEquals(\"Value type name\", expectedTypeName, result.getValueTypeName());", "-\t}", "-}", "+\t */", "+\tprotected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\tif (requestor.resultIndex != 0) {", "+\t\t\tfor (int i = 0; i < requestor.resultIndex; i++) {", "+\t\t\t\tSystem.out.println(\"unexpected result[\" + i + \"]: \" + requestor.results[i]);", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tif (expectedTypeName == null) {", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Value type name\", expectedTypeName, result.getValueTypeName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd16a84ff290c99d51ac6a1ba0cab78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName)", "signatureAfterChange": " \tprotected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName)", "diff": ["- */", "-protected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluateVariable(var, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tif (requestor.resultIndex != 0) {", "-\t\tfor (int i = 0; i < requestor.resultIndex; i++){", "-\t\t\tSystem.out.println(\"unexpected result[\"+i+\"]: \" + requestor.results[i]);", "-\t}", "-\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tif (displayString == null) {", "-\t\tassertTrue(\"Has value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "-\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());", "-\t}", "-}", "+\t */", "+\tprotected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluateVariable(var, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tif (requestor.resultIndex != 0) {", "+\t\t\tfor (int i = 0; i < requestor.resultIndex; i++) {", "+\t\t\t\tSystem.out.println(\"unexpected result[\" + i + \"]: \" + requestor.results[i]);", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tif (displayString == null) {", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "+\t\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());", "+\t\t}", "+\t}"]}], "num": 69170}
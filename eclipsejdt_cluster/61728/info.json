{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aa31781ff0c0c7a65d35ad7ff4f8ac1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df05e690dfddafc688eceaf421f239c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "99dc83c87acb33ba34a918de9dea75beba3da624", "commitAfterChange": "876cdb28a8e4efd99fdcabde4daf9483bf0df3a6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes) throws CoreException", "signatureAfterChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes) throws CoreException", "diff": ["-\t\tif (this.compileLoop > 1) { // only optimize files which were recompiled during the dependent pass, see 33990", "-\t\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "-\t\t\t\tfor (int i = newBytes.length; --i >= 0;)", "-\t\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "-\t\t\t\treturn false; // bytes are identical so skip them", "-\t\t\t}", "+\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "+\t\t\tfor (int i = newBytes.length; --i >= 0;)", "+\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "+\t\t\treturn false; // bytes are identical so skip them"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "966995776aa1e6f859e50721ed29d11d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "27602d9d6166ad944ae172b66cd4974f839712f7", "commitAfterChange": "9656032793af6e550adc1542c45f90e80d22042c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes) throws CoreException", "signatureAfterChange": "  protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newBytes) throws CoreException", "diff": ["-\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "-\t\t\tfor (int i = newBytes.length; --i >= 0;)", "-\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "-\t\t\treturn false; // bytes are identical so skip them", "+\t\tif (this.compileLoop > 1) { // only optimize files which were recompiled during the dependent pass", "+\t\t\tnotEqual : if (newBytes.length == oldBytes.length) {", "+\t\t\t\tfor (int i = newBytes.length; --i >= 0;)", "+\t\t\t\t\tif (newBytes[i] != oldBytes[i]) break notEqual;", "+\t\t\t\treturn false; // bytes are identical so skip them", "+\t\t\t}"]}], "num": 61728}
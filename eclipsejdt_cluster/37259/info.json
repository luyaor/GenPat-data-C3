{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df8fab1904de3bd191257c00a1cc4481", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507b690b0336bea730b6b6c90c08e033", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumDietRecoveryTest.java", "commitBeforeChange": "1811cdd59f3470eed6e320a23d5f402c5983a6b8", "commitAfterChange": "39ff9f74e7d15911f4d6035f122df4ccc5c0c639", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test0015()", "signatureAfterChange": " public void test0015()", "diff": ["+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    void foo() {\\n\" + ", "+        \"    }\\n\" + ", "+        \"    () {\\n\" + ", "+        \"      super();\\n\" + ", "+        \"    }\\n\" + ", "+        \"    void foo() {\\n\" + ", "+        \"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7704b87d53a43a7efb81f1b186893640", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 245, "signatureBeforeChange": "\t\t \tpublic void test243()", "signatureAfterChange": "\t\t \tpublic void test243()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in SubTypes.java (at line 5)\\n\" + ", "-\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"Duplicate method foo() in type B\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in SubTypes.java (at line 6)\\n\" + ", "-\t\t\"\tpublic B foo() { return this; }\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"Duplicate method foo() in type B\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in SubTypes.java (at line 9)\\n\" + ", "-\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "-\t\t\"\t         ^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A.foo()\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in SubTypes.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic A foo() { return this; }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"The method foo() of type A should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in SubTypes.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type B\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in SubTypes.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic B foo() { return this; }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type B\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in SubTypes.java (at line 9)\\n\" + ", "+\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"The method foo() of type C should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in SubTypes.java (at line 9)\\n\" + ", "+\t\t\t\"\tpublic X foo() { return new X(); }\\n\" + ", "+\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with A.foo()\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 37259}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84a5093b4234e46bd5814fc2a19d09be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01050ae64a8da19d03d8c6d7c78951c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "c4891fe70e58ba287a7bbc2f099afcf753974e95", "commitAfterChange": "f50252d848b2855a0e3b480a92607978678762ce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t\tchar[] tagName = this.scanner.getCurrentIdentifierSource();", "-\t\tint tk = token;", "-\t\tchar pc = peekChar();", "-\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "-\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\ttoken = tk;", "-\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\tswitch (pc) {", "-\t\t\t\tcase '}':", "-\t\t\t\tcase '!':", "-\t\t\t\tcase '#':", "-\t\t\t\tcase '%':", "-\t\t\t\tcase '&':", "-\t\t\t\tcase '\\'':", "-\t\t\t\tcase '\"':", "-\t\t\t\tcase ':':", "-\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\tcase '<':", "-\t\t\t\tcase '>':", "-\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\tdefault:", "-\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "+\t\tif (this.scanner.currentCharacter != ' ' && !Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\ttagNameToken: while (token != TerminalTokens.TokenNameEOF && this.index < this.scanner.eofPosition) {", "+\t\t\t\tint length = tagName.length;", "+\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "+\t\t\t\tswitch (this.scanner.currentCharacter) {", "+\t\t\t\t\tcase '}':", "+\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "+\t\t\t\t\tcase '!':", "+\t\t\t\t\tcase '#':", "+\t\t\t\t\tcase '%':", "+\t\t\t\t\tcase '&':", "+\t\t\t\t\tcase '\\'':", "+\t\t\t\t\tcase '\"':", "+\t\t\t\t\tcase ':':", "+\t\t\t\t\tcase '<':", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\t\tcase '-': // allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+1], 0, length);", "+\t\t\t\t\t\ttagName[length] = this.scanner.currentCharacter;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttoken = readTokenAndConsume();", "+\t\t\t\t\t\tchar[] ident = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+ident.length], 0, length);", "+\t\t\t\t\t\tSystem.arraycopy(ident, 0, tagName, length, ident.length);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\tthis.index = this.scanner.currentPosition;", "-\t\t\ttk = readTokenAndConsume();", "-\t\t\tpc = peekChar();", "-\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "-\t\tchar[] tag = new char[length];", "-\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "+\t\tint length = tagName.length;", "-\t\t\t\tswitch (tag[0]) {", "+\t\t\t\tswitch (tagName[0]) {", "+\t\t\t\t\tcase 'c':", "+\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "+\t\t\t\t\t\t\tvalid = parseIdentifierTag(false); // TODO (frederic) reconsider parameter value when @category will be significant in spec", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName)) {", "-\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName)) {", "-\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName)) {", "-\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && CharOperation.equals(tag, TAG_VALUE)) {", "+\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f50b579593baa6c2e49620caba7817d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "c4891fe70e58ba287a7bbc2f099afcf753974e95", "commitAfterChange": "f50252d848b2855a0e3b480a92607978678762ce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t\tchar[] tagName = this.scanner.getCurrentIdentifierSource();", "-\t\tchar pc = peekChar();", "-\t\tboolean validTag = false;", "-\t\tswitch (token) {", "-\t\t\tcase TerminalTokens.TokenNameIdentifier:", "-\t\t\tcase TerminalTokens.TokenNamereturn:", "-\t\t\tcase TerminalTokens.TokenNamethrows:", "-\t\t\tcase TerminalTokens.TokenNameabstract:", "-\t\t\tcase TerminalTokens.TokenNameassert:", "-\t\t\tcase TerminalTokens.TokenNameboolean:", "-\t\t\tcase TerminalTokens.TokenNamebreak:", "-\t\t\tcase TerminalTokens.TokenNamebyte:", "-\t\t\tcase TerminalTokens.TokenNamecase:", "-\t\t\tcase TerminalTokens.TokenNamecatch:", "-\t\t\tcase TerminalTokens.TokenNamechar:", "-\t\t\tcase TerminalTokens.TokenNameclass:", "-\t\t\tcase TerminalTokens.TokenNamecontinue:", "-\t\t\tcase TerminalTokens.TokenNamedefault:", "-\t\t\tcase TerminalTokens.TokenNamedo:", "-\t\t\tcase TerminalTokens.TokenNamedouble:", "-\t\t\tcase TerminalTokens.TokenNameelse:", "-\t\t\tcase TerminalTokens.TokenNameextends:", "-\t\t\tcase TerminalTokens.TokenNamefalse:", "-\t\t\tcase TerminalTokens.TokenNamefinal:", "-\t\t\tcase TerminalTokens.TokenNamefinally:", "-\t\t\tcase TerminalTokens.TokenNamefloat:", "-\t\t\tcase TerminalTokens.TokenNamefor:", "-\t\t\tcase TerminalTokens.TokenNameif:", "-\t\t\tcase TerminalTokens.TokenNameimplements:", "-\t\t\tcase TerminalTokens.TokenNameimport:", "-\t\t\tcase TerminalTokens.TokenNameinstanceof:", "-\t\t\tcase TerminalTokens.TokenNameint:", "-\t\t\tcase TerminalTokens.TokenNameinterface:", "-\t\t\tcase TerminalTokens.TokenNamelong:", "-\t\t\tcase TerminalTokens.TokenNamenative:", "-\t\t\tcase TerminalTokens.TokenNamenew:", "-\t\t\tcase TerminalTokens.TokenNamenull:", "-\t\t\tcase TerminalTokens.TokenNamepackage:", "-\t\t\tcase TerminalTokens.TokenNameprivate:", "-\t\t\tcase TerminalTokens.TokenNameprotected:", "-\t\t\tcase TerminalTokens.TokenNamepublic:", "-\t\t\tcase TerminalTokens.TokenNameshort:", "-\t\t\tcase TerminalTokens.TokenNamestatic:", "-\t\t\tcase TerminalTokens.TokenNamestrictfp:", "-\t\t\tcase TerminalTokens.TokenNamesuper:", "-\t\t\tcase TerminalTokens.TokenNameswitch:", "-\t\t\tcase TerminalTokens.TokenNamesynchronized:", "-\t\t\tcase TerminalTokens.TokenNamethis:", "-\t\t\tcase TerminalTokens.TokenNamethrow:", "-\t\t\tcase TerminalTokens.TokenNametransient:", "-\t\t\tcase TerminalTokens.TokenNametrue:", "-\t\t\tcase TerminalTokens.TokenNametry:", "-\t\t\tcase TerminalTokens.TokenNamevoid:", "-\t\t\tcase TerminalTokens.TokenNamevolatile:", "-\t\t\tcase TerminalTokens.TokenNamewhile:", "-\t\t\t\tvalidTag= true;", "-\t\t}", "-\t\ttagNameToken: while (token != TerminalTokens.TokenNameEOF && this.index < this.scanner.eofPosition) {", "-\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\tswitch (pc) {", "-\t\t\t\tcase '}':", "-\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\tcase '!':", "-\t\t\t\tcase '#':", "-\t\t\t\tcase '%':", "-\t\t\t\tcase '&':", "-\t\t\t\tcase '\\'':", "-\t\t\t\tcase '\"':", "-\t\t\t\tcase ':':", "-\t\t\t\tcase '<':", "-\t\t\t\tcase '>':", "-\t\t\t\t\tvalidTag = false;", "-\t\t\t\t\t// fall thru next case to read character and resynch scanner", "-\t\t\t\tcase '-': // allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\t\treadChar();", "-\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\tthis.scanner.currentPosition = this.index;", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "-\t\t\t\t\ttoken = readTokenAndConsume();", "-\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\tbreak;", "+\t\tif (this.scanner.currentCharacter != ' ' && !Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\tboolean validTag = true;", "+\t\t\ttagNameToken: while (token != TerminalTokens.TokenNameEOF && this.index < this.scanner.eofPosition) {", "+\t\t\t\tint length = tagName.length;", "+\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "+\t\t\t\tswitch (this.scanner.currentCharacter) {", "+\t\t\t\t\tcase '}':", "+\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "+\t\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\t\tcase '!':", "+\t\t\t\t\tcase '#':", "+\t\t\t\t\tcase '%':", "+\t\t\t\t\tcase '&':", "+\t\t\t\t\tcase '\\'':", "+\t\t\t\t\tcase '\"':", "+\t\t\t\t\tcase ':':", "+\t\t\t\t\tcase '<':", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\tcase '@':", "+\t\t\t\t\t\tvalidTag = false;", "+\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tthis.index = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '-': // allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+1], 0, length);", "+\t\t\t\t\t\ttagName[length] = this.scanner.currentCharacter;", "+\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tthis.index = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttoken = readTokenAndConsume();", "+\t\t\t\t\t\tchar[] ident = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\t\t\tSystem.arraycopy(tagName, 0, tagName = new char[length+ident.length], 0, length);", "+\t\t\t\t\t\tSystem.arraycopy(ident, 0, tagName, length, ident.length);", "+\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tthis.scanner.getNextChar();", "-\t\t\tpc = peekChar();", "+\t\t\tif (!validTag) {", "+\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\treturn false;", "+\t\t\t}", "-\t\tif (!validTag) {", "-\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\treturn false;", "-\t\t}", "-\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "+\t\tint length = tagName.length;", "-", "+\t", "-\t\tchar firstChar = this.source[this.tagSourceStart];", "-\t\t\t\tswitch (firstChar) {", "+\t\t\t\tswitch (tagName[0]) {", "-\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName)) {", "-\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName)) {", "-\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName)) {", "-\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName)) {", "-\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName)) {", "-\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName)) {", "-\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName)) {", "-\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && this.source[this.tagSourceStart+1] == TAG_SEE[1] &&  this.source[this.tagSourceEnd] == TAG_SEE[2]) {", "+\t\t\t\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName)) {", "-\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, this.source, this.tagSourceStart, this.tagSourceEnd+1)) {", "+\t\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5 && length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName)) {"]}], "num": 25879}
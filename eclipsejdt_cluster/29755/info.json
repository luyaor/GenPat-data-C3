{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90668fd1f5111a357bff3fd7e9881300", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d6b16b6eb6ccc071526c6f7b5f276d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/BuildNotifier.java", "commitBeforeChange": "1019fd6125279a757000a9f963f4ec62e165c6dd", "commitAfterChange": "6bb2fb68f843d2f213112ae456fa0a32c38636c9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected void updateProblemCounts(IMarker[] oldProblems, IProblem[] newProblems)", "signatureAfterChange": "\r \r protected void updateProblemCounts(IProblem[] newProblems)", "diff": ["+protected void updateProblemCounts(IProblem[] newProblems) {\r", "+\tfor (int i = 0, newSize = newProblems.length; i < newSize; ++i)\r", "+\t\tif (newProblems[i].isError()) newErrorCount++; else newWarningCount++;\r", "+}\r", "-\tif (oldProblems != null) {\r", "-\t\tnext : for (int i = 0, oldSize = oldProblems.length; i < oldSize; ++i) {\r", "-\t\t\tIMarker oldProblem = oldProblems[i];\r", "-\t\t\tboolean wasError = IMarker.SEVERITY_ERROR\r", "-\t\t\t\t== oldProblem.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);\r", "-\t\t\tint lineNumber = oldProblem.getAttribute(IMarker.LINE_NUMBER, 0);\r", "-\t\t\tString message = oldProblem.getAttribute(IMarker.MESSAGE, \"\"); //$NON-NLS-1$\r", "-\r", "-\t\t\tif (newProblems != null) {\r", "-\t\t\t\tfor (int j = 0, newSize = newProblems.length; j < newSize; ++j) {\r", "-\t\t\t\t\tIProblem pb = newProblems[j];\r", "-\t\t\t\t\tif (wasError == pb.isError()\r", "-\t\t\t\t\t\t&& lineNumber == pb.getSourceLineNumber()\r", "-\t\t\t\t\t\t\t&& message.equals(pb.getMessage()))\r", "-\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (wasError) fixedErrorCount++; else fixedWarningCount++;\r", "-\t\t}\r", "-\t}\r", "-\t\t\tint lineNumber = newProblem.getSourceLineNumber();\r", "-\t\t\t\t\tif (isError == wasError\r", "-\t\t\t\t\t\t&& lineNumber == pb.getAttribute(IMarker.LINE_NUMBER, 0)\r", "-\t\t\t\t\t\t\t&& message.equals(pb.getAttribute(IMarker.MESSAGE, \"\"))) //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "549de0508076a9f801066c7bba25b902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isMeaningfulEdit(OptimizedReplaceEdit edit)", "diff": ["-\tprivate boolean isValidEdit(OptimizedReplaceEdit edit) {", "+\tprivate boolean isMeaningfulEdit(OptimizedReplaceEdit edit) {", "-\t\tif (editLength != 0) {", "-", "-\t\t\tIRegion covering = getCoveringAdaptedRegion(editOffset, (editOffset + editLength - 1));", "-\t\t\tif (covering != null) {", "-\t\t\t\tif (editReplacementLength != 0 && editLength == editReplacementLength) {", "-\t\t\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "-\t\t\t\t\t\tif (this.scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t}", "-", "-\t\t\tIRegion starting = getAdaptedRegionAt(editOffset + editLength);", "-\t\t\tif (starting != null) {", "-\t\t\t\tint i = editOffset;", "-\t\t\t\tfor (int max = editOffset + editLength; i < max; i++) {", "-\t\t\t\t\tint replacementStringIndex = i - editOffset;", "-\t\t\t\t\tif (replacementStringIndex >= editReplacementLength || this.scanner.source[i] != edit.replacement.charAt(replacementStringIndex)) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (i - editOffset != editReplacementLength && i != editOffset + editLength - 1) {", "-\t\t\t\t\tedit.offset = starting.getOffset();", "-\t\t\t\t\tedit.length = 0;", "-\t\t\t\t\tedit.replacement = edit.replacement.substring(i - editOffset);", "+\t\tif (editReplacementLength != 0 && editLength == editReplacementLength) {", "+\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "+\t\t\t\tif (this.scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "-", "-", "-\t\tIRegion covering = getCoveringAdaptedRegion(editOffset, editOffset);", "-\t\tif (covering != null) {", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\tif (editOffset == this.scannerEndPosition) {", "-\t\t\tint index = Arrays.binarySearch(", "-\t\t\t\tthis.adaptedRegions,", "-\t\t\t\tnew Region(editOffset, 0),", "-\t\t\t\tnew Comparator() {", "-\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "-\t\t\t\t\t\tIRegion r1 = (IRegion)o1;", "-\t\t\t\t\t\tIRegion r2 = (IRegion)o2;", "-", "-\t\t\t\t\t\tint r1End = r1.getOffset() + r1.getLength();", "-\t\t\t\t\t\tint r2End = r2.getOffset() + r2.getLength();", "-", "-\t\t\t\t\t\treturn r1End - r2End;", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t\tif (index < 0) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t}", "-\t\treturn false;", "+\t\treturn true;"]}], "num": 29755}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7215353bb25bd54a9b304d2cc5575ec5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17d9b41a82663a9115f04f8418506670", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9a3966d6e020edd847f4ed11b6488633e74a1e58", "commitAfterChange": "58d6dc67a1a6c5e7a7fc3f6bfba3876f80a7fa23", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "diff": ["-\t\t\t\treturn createBinaryMethodHandle(type, method.selector, argumentTypeNames);", "+\t\t\t\tIMethod binaryMethod = createBinaryMethodHandle(type, method.selector, argumentTypeNames);", "+\t\t\t\tif (binaryMethod == null) {", "+\t\t\t\t\t// when first attempt fails, try with similar matches if any...", "+\t\t\t\t\tPossibleMatch similarMatch = this.currentPossibleMatch.getSimilarMatch();", "+\t\t\t\t\twhile (similarMatch != null) {", "+\t\t\t\t\t\ttype = ((ClassFile)similarMatch.openable).getType();", "+\t\t\t\t\t\tbinaryMethod = createBinaryMethodHandle(type, method.selector, argumentTypeNames);", "+\t\t\t\t\t\tif (binaryMethod != null) {", "+\t\t\t\t\t\t\treturn binaryMethod;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsimilarMatch = similarMatch.getSimilarMatch();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn binaryMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1958cbe185da9082f9f10363f5d3e8bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "cf895c35367340c7abd90778e60347850683ddea", "commitAfterChange": "04e1bf5f2770f9a2cdfb59f2c6a93389d529209c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "signatureAfterChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames)", "diff": ["-IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator) {", "+IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames) {", "-\t\t\t\tchar[] selector = binaryMethod.getSelector();", "+\t\t\t\tchar[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();", "-\t\t\t\t\treturn (IMethod) locator.createMethodHandle(type, new String(selector), CharOperation.toStrings(parameterTypes));", "+\t\t\t\t\treturn (IMethod) createMethodHandle(type, new String(selector), CharOperation.toStrings(parameterTypes));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf3eb0ef7e4ad27ccfe748896ecbd04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java", "commitBeforeChange": "bea3c4ba333ddbbf907b34991106e5d28c4161bc", "commitAfterChange": "dfe44f42fcdc5348e237b7834117df41d8ffd082", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate IMethod findMethod(IType type, char[] selector, char[][] paramTypeNames)", "signatureAfterChange": "  \tprivate IMethod findMethod(IType type, char[] selector, char[][] paramTypeNames) throws JavaModelException", "diff": ["-\tprivate IMethod findMethod(IType type, char[] selector, char[][] paramTypeNames) {", "+\tprivate IMethod findMethod(IType type, char[] selector, char[][] paramTypeNames) throws JavaModelException {", "-\t\t// If the method is a constructor of an inner type, add the enclosing type as an ", "-\t\t// additional parameter to the constructor.", "-\t\tif (enclosingType != null && CharOperation.equals(type.getElementName().toCharArray(), selector)) {", "+\t\t// If the method is a constructor of a non-static inner type, add the enclosing type as an ", "+\t\t// additional parameter to the constructor", "+\t\tif (enclosingType != null", "+\t\t\t\t&& CharOperation.equals(type.getElementName().toCharArray(), selector)", "+\t\t\t\t&& !Flags.isStatic(type.getFlags())) {", "-\t\t}", "-\t\telse {", "+\t\t} else {"]}], "num": 69685}
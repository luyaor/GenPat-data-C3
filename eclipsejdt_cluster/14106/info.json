{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48bc1c21d68e4162bfbebec214b64da6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7a5f134e921573858fdbf55988c647", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e62c45ebe5881b0e2838be4fcb8a4a48c85b9c0c", "commitAfterChange": "c36a6a2b662267e56067d121b7f34ae48cbcb692", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ? ", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tabstract class Y implements J, I { }\\n\" + ", "+\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(A<String>) of type J has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tclass YYY implements J, I { public void foo(A a) {} }\\n\" + ", "+\t\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tclass XXX implements I, J { public void foo(A a) {} }\\n\" + ", "+\t\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tclass ZZZ implements K { public void foo(A a) {} }\\n\" + ", "+\t\t\t\t\"\t                                         ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c56a0c46a2d1ce8cfe55046b697f47ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "348bd876780869d134d8b9dcd3416e2478160c68", "commitAfterChange": "cdd098ef58e71732005f513537bb4c52226dd628", "methodNumberBeforeChange": 412, "methodNumberAfterChange": 412, "signatureBeforeChange": " \tpublic void test410()", "signatureAfterChange": " \tpublic void test410()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"  list.add(new RuntimeException());             // JDT works, Javac works\\n\" + ", "-\t\t\t\t\"  list.add(new IllegalMonitorStateException()); // JDT works, Javac works\\n\" + ", "+\t\t\t\t\"  list.add(new RuntimeException());             // works\\n\" + ", "+\t\t\t\t\"  list.add(new IllegalMonitorStateException()); // works\\n\" + ", "-\t\t\t\t\"  list.add(exc);                                // both works\\n\" + ", "-\t\t\t\t\"  list.add(new Object());                       // JDT works, Javac fails\\n\" + ", "-\t\t\t\t\"  list.add(new Throwable());                    // JDT works, Javac fails\\n\" + ", "-\t\t\t\t\"  list.add(new Exception());                    // both works\\n\" + ", "+\t\t\t\t\"  list.add(exc);                                // works\\n\" + ", "+\t\t\t\t\"  list.add(new Object());                       // should fail\\n\" + ", "+\t\t\t\t\"  list.add(new Throwable());                    // should fail\\n\" + ", "+\t\t\t\t\"  list.add(new Exception());                    // works\\n\" + ", "-\t\t\t\"\");\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\r\\n\" + ", "+\t\t\t\"\tlist.add(new Object());                       // should fail\\r\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"The method add(? super Exception) in the type List<? super Exception> is not applicable for the arguments (Object)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\r\\n\" + ", "+\t\t\t\"\tlist.add(new Throwable());                    // should fail\\r\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"The method add(? super Exception) in the type List<? super Exception> is not applicable for the arguments (Throwable)\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88368e8d52f155864e65e3d0cdcaf77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "-\t\t);", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass YYY implements J, I { public void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tclass XXX implements I, J { public void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                                            ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass ZZZ implements K { public void foo(A a) {} }\\n\" + ", "+\t\t\t\"\t                                         ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 14106}
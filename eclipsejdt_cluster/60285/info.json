{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43bbf8188d91af540453f61eb4537824", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f4b704888d8fb714b8f318a63eb46d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestMixed.java", "commitBeforeChange": "2b1f9a527e48f8aea065bc82cb38f61c906092eb", "commitAfterChange": "c29d749a706b0cafa0101207bbe8f2443417c395", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void _testBug45198()", "signatureAfterChange": " \tpublic void testBug45596a()", "diff": ["-\t */", "-\tpublic void _testBug45198() { // TODO (frederic) should move this test to model side (where plugin is started)", "-\t\tHashtable savedOptions = JavaCore.getOptions();", "-\t\tMap options = getCompilerOptions();", "-\t\tHashtable newOptions = new Hashtable(options.size());", "-\t\tnewOptions.putAll(options);", "-\t\tJavaCore.setOptions(newOptions);", "-\t\ttry {", "-\t\t\tIDOMFactory factory= new DOMFactory();", "-\t\t\tIDOMMethod m= factory.createMethod(", "-\t\t\t\t\t\"/**\" + LINE_SEPARATOR +", "-\t\t\t\t\t\" * @return Returns the content.\" + LINE_SEPARATOR +", "-\t\t\t\t\t\" */\" + LINE_SEPARATOR +", "-\t\t\t\t\t\"public String getContent() {\" + LINE_SEPARATOR +", "-\t\t\t\t\t\"\treturn fContent;\" + LINE_SEPARATOR +", "-\t\t\t\t\t\"}\" + LINE_SEPARATOR);", "-\t\t\tassertTrue(\"initial contents wrong\", equals(m.getContents(), ", "-\t\t\t\t\t\t\t\"/**\" + LINE_SEPARATOR +", "-\t\t\t\t\t\t\t\" * @return Returns the content.\" + LINE_SEPARATOR +", "-\t\t\t\t\t\t\t\" */\" + LINE_SEPARATOR +", "-\t\t\t\t\t\t\t\"public String getContent() {\" + LINE_SEPARATOR +", "-\t\t\t\t\t\t\t\"\treturn fContent;\" + LINE_SEPARATOR +", "-\t\t\t\t\t\t\t\"}\" + LINE_SEPARATOR));", "-\t\t} finally {", "-\t\t\tJavaCore.setOptions(savedOptions);", "-\t\t}", "-\t}", "+\t */", "+\tpublic void testBug45596a() {", "+\t\treportMissingAnnotation = CompilerOptions.DISABLED;", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\"X.java\",", "+\t\t\"public class X {\\n\" + ", "+\t\t\"\tvoid foo(int x, String str) {}\\n\" + ", "+\t\t\"}\\n\",", "+\t\t\"Y1.java\",", "+\t\t\"public class Y1 {\\n\" + ", "+\t\t\"\t/** */\\n\" + ", "+\t\t\"\tprotected X field = new X() {\\n\" + ", "+\t\t\"\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "+\t\t\"\t\tvoid foo(String str) {}\\n\" + ", "+\t\t\"\t};\\n\" + ", "+\t\t\"}\\n\",", "+\t\t\"Y2.java\",", "+\t\t\"public class Y2 {\\n\" + ", "+\t\t\"\t/** */\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t\tX x = new X() {\\n\" + ", "+\t\t\"\t\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "+\t\t\"\t\t\tvoid foo(String str) {}\\n\" + ", "+\t\t\"\t\t};\\n\" + ", "+\t\t\"\t\tx.foo(0, \\\"\\\");\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\",", "+\t\t\"Y3.java\",", "+\t\t\"public class Y3 {\\n\" + ", "+\t\t\"\tstatic X x;\\n\" + ", "+\t\t\"\tstatic {\\n\" + ", "+\t\t\"\t\tx = new X() {\\n\" + ", "+\t\t\"\t\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "+\t\t\"\t\t\tvoid foo(String str) {}\\n\" + ", "+\t\t\"\t\t};\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\" },", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "+\t\t\"\tvoid foo(String str) {}\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"Annotation: Missing javadoc entry for parameter str\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Y2.java (at line 6)\\n\" + ", "+\t\t\"\tvoid foo(String str) {}\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"Annotation: Missing javadoc entry for parameter str\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Y3.java (at line 6)\\n\" + ", "+\t\t\"\tvoid foo(String str) {}\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"Annotation: Missing javadoc entry for parameter str\\n\" + ", "+\t\t\"----------\\n\"", "+\t\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d7ece531b8d6f94ec6de94579bb3c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestMixed.java", "commitBeforeChange": "9e86c25c450b0124f857c2c627328481b85f445c", "commitAfterChange": "2c3ad81991d5b873d094259b6960d57a22dd0f08", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testMethodCreateFromSource()", "signatureAfterChange": " \tpublic void testBug45592()", "diff": ["-\tpublic void testMethodCreateFromSource() {", "-\t\t\t\t\"/**\" + LINE_SEPARATOR +", "-\t\t\t\t\" * @return Returns the content.\" + LINE_SEPARATOR +", "-\t\t\t\t\" */\" + LINE_SEPARATOR +", "-\t\t\t\t\"public String getContent() {\" + LINE_SEPARATOR +", "-\t\t\t\t\"\treturn fContent;\" + LINE_SEPARATOR +", "-\t\t\t\t\"}\" + LINE_SEPARATOR);", "-\t\t\t\t\"/**\" + LINE_SEPARATOR +", "-\t\t\t\t\" * @return Returns the content.\" + LINE_SEPARATOR +", "-\t\t\t\t\" */\" + LINE_SEPARATOR +", "-\t\t\t\t\"public String getContent() {\" + LINE_SEPARATOR +", "-\t\t\t\t\"\treturn fContent;\" + LINE_SEPARATOR +", "-\t\t\t\t\"}\" + LINE_SEPARATOR));", "+\t */", "+\tpublic void testBug45592() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"test/X.java\",", "+\t\t\t\t\"package test;\\n\"", "+\t\t\t \t+ \"class X {\\n\"", "+\t\t\t\t\t+ \"\tvoid foo(int x, String str) {}\\n\"", "+\t\t\t  \t\t+ \"}\\n\",", "+\t\t\t\t\"test/Y.java\",", "+\t\t\t\t\"package test;\\n\"", "+\t\t\t   \t\t+ \"class Y {\\n\"", "+\t\t\t   \t\t+ \"  /** */\\n\"", "+\t\t\t   \t\t+ \"  protected X field = new X() {\\n\"", "+\t\t\t   \t\t+ \"    void foo(int x, String str) {}\\n\"", "+\t\t\t   \t\t+ \"  };\\n\"", "+\t\t\t   \t\t+ \"}\\n\"});", "+\t}"]}], "num": 60285}
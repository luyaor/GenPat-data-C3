{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2dcc9eb8f7f634dc67599935b5297c67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a900e1aefbb6595ecef87f6c833f4cae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "cbc781423397a753d7a0e29b64da02f9ae05e6ae", "commitAfterChange": "e659592a32935b3480e8554de2e33b0870ea4573", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r public void testDefault07_bin()", "signatureAfterChange": "\r public void testDefault07_bin()", "diff": ["-\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "+\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "-\t\t\"\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "-\t\t\"\t                                    ^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"Null type safety (type annotations): The expression of type \\'int\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null type safety (type annotations): The expression of type \\'Integer\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97f7c8bc6c8035531b4dd8ce2e649b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": "\r public void testBug456487b()", "signatureAfterChange": "\r public void testBug456487b()", "diff": ["-\t\t\"Contradictory null annotations: method was inferred as \\'void <init>(@NonNull @Nullable T)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'void <init>(@Nullable @NonNull T)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String get()\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull String get()\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String orElse(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull String orElse(@Nullable @NonNull String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String orElse(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull String orElse(@Nullable @NonNull String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r"]}], "num": 33448}
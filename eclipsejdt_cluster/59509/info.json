{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "686884a20d2995d5123166e687aa946c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74031bbd4bb55725faf8ef9c11af2e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "09d58a6e319cfeec520d29fd7c2c24967ab4e499", "commitAfterChange": "3f9786eb97e62b9a5f765764dcc08a631a4e6afe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfinal char[] selector = this.method.token;", "-\t\t\tscope.problemReporter().errorNoMethodFor(this.lhs, lhsType, selector, descriptorParameters);", "+\t\t\tscope.problemReporter().errorNoMethodFor(this.lhs, lhsType, this.selector, descriptorParameters);", "-        MethodBinding someMethod = isMethodReference ? scope.getMethod(this.receiverType, selector, descriptorParameters, this) :", "+        MethodBinding someMethod = isMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "-        \t\tanotherMethod = scope.getMethod(typeToSearch, selector, parameters, this);", "+        \t\tanotherMethod = scope.getMethod(typeToSearch, this.selector, parameters, this);", "-        this.method.binding = this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : ", "+        this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : ", "-        \tchar [] visibleName = isConstructorReference() ? this.receiverType.sourceName() : selector;", "+        \tchar [] visibleName = isConstructorReference() ? this.receiverType.sourceName() : this.selector;", "-    \t\t\tthis.method.binding = this.binding = null;", "+    \t\t\tthis.binding = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3336797548cb25676d304ed4da2778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "a81195ff09b3e00d1785645fd080f14d3c2692cf", "commitAfterChange": "0300a57044fe7d054155c36f505a1e0c238247a4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected boolean matches(char[][] compoundName)", "signatureAfterChange": " protected boolean matches(char[][] compoundName)", "diff": ["-\tchar[] declaringSimpleName = this.pattern.declaringSimpleName;", "-\tchar[] declaringQualification = this.pattern.declaringQualification;", "-\tif (declaringSimpleName != null) {", "+\tif (this.typeSimpleName != null) {", "-\t\tif (this.pattern.matchesName(simpleName, declaringSimpleName)) {", "+\t\tif (this.pattern.matchesName(simpleName, this.typeSimpleName)) {", "-\t\t\t\t\tdeclaringQualification, ", "+\t\t\t\t\tthis.typeQualification, ", "-\t\t} else if (!CharOperation.endsWith(simpleName, declaringSimpleName)) {", "+\t\t} else if (!CharOperation.endsWith(simpleName, this.typeSimpleName)) {", "-\t\t\t\tdeclaringQualification, ", "+\t\t\t\tthis.typeQualification, "]}], "num": 59509}
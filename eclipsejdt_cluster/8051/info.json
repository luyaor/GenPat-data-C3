{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56ab0c411f4ed17458d154ffb5f726bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2526ced41fffb91582833a91b771ae69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "e75e459d2433b031258505e58fc5ac2021396b35", "commitAfterChange": "c859b9df56c083dbdae90b6caf0be3691b2a11a9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \" Annotation processing options:\\n\" +", "-        \"   These options are meaningful only in a 1.6 environment.\\n\" +", "-        \"    -Akey[=value]        annotation processors options that are made to\\n\" +", "-        \"                         annotation processors. key are identifiers separated\\n\" +", "-        \"                         by ''.''.\\n\" +", "-        \"    -processorpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" +", "-        \"                         specify locations where to find annotation processors\\n\" +", "-        \"                         If this option is not used, the classpath will be\\n\" +", "-        \"                         searched for processors.\\n\" +", "-        \"    -processor <class1[,class2,...]>\\n\" +", "-        \"                         Qualified names of the annotation processors to run.\\n\" +", "-        \"                         This bypasses the default annotation discovery process\\n\" +", "-        \"    -proc:only           run annotation processors, but do not compile\\n\" +", "-        \"    -proc:none           perform compilation but do not run annotation\\n\" +", "-        \"                         processors\\n\" +", "-        \"    -s <dir>             specify a directory where to put the generated source\\n\" +", "-        \"                         files\\n\" +", "-        \"    -XprintProcessorInfo print information about which annotations and which\\n\" +", "-        \"                         elements a processor is asked to process\\n\" +", "-        \"    -XprintRounds        print information about annotation processing rounds.\\n\" +", "+        \" Annotation processing options:\\n\" + ", "+        \"   These options are meaningful only in a 1.6 environment.\\n\" + ", "+        \"    -Akey[=value]        options that are passed to annotation processors\\n\" + ", "+        \"    -processorpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"                         specify locations where to find annotation processors.\\n\" + ", "+        \"                         If this option is not used, the classpath will be\\n\" + ", "+        \"                         searched for processors\\n\" + ", "+        \"    -processor <class1[,class2,...]>\\n\" + ", "+        \"                         qualified names of the annotation processors to run.\\n\" + ", "+        \"                         This bypasses the default annotation discovery process\\n\" + ", "+        \"    -proc:only           run annotation processors, but do not compile\\n\" + ", "+        \"    -proc:none           perform compilation but do not run annotation\\n\" + ", "+        \"                         processors\\n\" + ", "+        \"    -s <dir>             destination directory for generated source files\\n\" + ", "+        \"    -XprintProcessorInfo print information about which annotations and elements\\n\" + ", "+        \"                         a processor is asked to process\\n\" + ", "+        \"    -XprintRounds        print information about annotation processing rounds\\n\" + ", "-        \"                         Qualified names of the classes that need\\n\" + ", "-        \"                         to be processed\\n\" + ", "+        \"                         qualified names of binary classes to process\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c6f17ec17233d176f1797967b295e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "70a6b9aa4e057d5f0e7a85fe2e732742f959e609", "commitAfterChange": "41f1557c0254631588fe2b45835fb41deba624e6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void _test012()", "signatureAfterChange": " public void _test012()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[0],", "-        \" -help -showversion -referenceInfo\",", "-        \"Eclipse Java Compiler 0.559, pre-3.1.0 release candidate-1, Copyright IBM Corp 2000, 2005. All rights reserved.\\n\" + ", "+\tfinal String expectedOutput =", "+        \"{0}\\n\" + ", "-        \" Possible options are listed below. Options enabled by default are prefixed with \\'+\\'\\n\" + ", "+        \" Possible options are listed below. Options enabled by default are prefixed with \\'\\'+\\'\\'\\n\" + ", "-        \"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"    -cp -classpath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       \\'[\\' and \\']\\' (e.g. [-X.java] to deny access to type X)\\n\" + ", "-        \"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"                       \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java] to deny access to type X)\\n\" + ", "+        \"    -bootclasspath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify access rules for types between \\'[\\' and \\']\\' (e.g. [-X.java]\\n\" + ", "+        \"                       specify access rules for types between \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java]\\n\" + ", "-        \"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"    -sourcepath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify access rules for types between \\'[\\' and \\']\\' (e.g. [-X.java]\\n\" + ", "+        \"                       specify access rules for types between \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java]\\n\" + ", "-        \"    -extdirs <directories separated by \" + File.pathSeparator +\">\\n\" + ", "+        \"    -extdirs <directories separated by {1}>\\n\" + ", "-        \"                       when suffixed with \\'[\\'<enc>\\']\\' (e.g. X.java[utf8])\\n\" + ", "+        \"                       when suffixed with \\'\\'[\\'\\'<enc>\\'\\']\\'\\' (e.g. X.java[utf8])\\n\" + ", "-        \"      assertIdentifier   + \\'assert\\' used as identifier\\n\" + ", "+        \"      assertIdentifier   + \\'\\'assert\\'\\' used as identifier\\n\" + ", "-        \"\\n\", ", "+        \"\\n\";", "+", "+\tthis.runConformTest(", "+\t\tnew String[0],", "+        \" -help -showversion -referenceInfo\",", "+\t\tMessageFormat.format(expectedOutput, new String[] {", "+\t\t\t\tMain.bind(\"misc.version\", new String[] {", "+\t\t\t\t\tMain.bind(\"compiler.name\"),", "+\t\t\t\t\tMain.bind(\"compiler.version\"),", "+\t\t\t\t\tMain.bind(\"compiler.copyright\")", "+\t\t\t\t}),", "+\t\t\t\tFile.pathSeparator", "+\t\t}),"]}], "num": 8051}
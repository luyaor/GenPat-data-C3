{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "412e877eb54346db0e36bb45c020790b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183f30fac79077a3b7d40121e460e74e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "7915a529d4dab8b70a0cdb9189fc342b9112ed8e", "commitAfterChange": "f28c28de6ed3d2e9e475bca36caf25c219a92533", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tReferenceBinding enclosingType = scope.enclosingReceiverType();", "-\t\tMethodBinding otherMethod = scope.getMethod(enclosingType.superclass(), this.selector, argumentTypes, this);", "-\t\tif (scope.checkAppropriate(this.binding, otherMethod, this)) {", "-\t\t\tReferenceBinding[] superInterfaces = enclosingType.superInterfaces();", "-\t\t\tif (superInterfaces != null) {", "-\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "-\t\t\t\t\totherMethod = scope.getMethod(superInterfaces[i], this.selector, argumentTypes, this);", "-\t\t\t\t\tif (!scope.checkAppropriate(this.binding, otherMethod, this))", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tscope.checkAppropriateMethodAgainstSupers(this.selector, this.binding, argumentTypes, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d882f62fa399f31a6cac5ea8735fe94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "540532d90ea319b134aad3a0154f549c66728687", "commitAfterChange": "6a0eebe34bd6b3f3c957d0d1c92bc68d99fa8f40", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprivate ImportRewrite newImportsRewrite(ICompilationUnit cu, String[] order, int normalThreshold, int staticThreshold, boolean restoreExistingImports) throws CoreException, BackingStoreException", "signatureAfterChange": " \t \tprivate ImportRewrite newImportsRewrite(ICompilationUnit cu, String[] order, int normalThreshold, int staticThreshold, boolean restoreExistingImports) throws CoreException, BackingStoreException", "diff": ["-\t\tStringBuffer buf= new StringBuffer();", "-\t\tfor (int i= 0; i < order.length; i++) {", "-\t\t\tbuf.append(order[i]);", "-\t\t\tbuf.append(';');", "-\t\t}", "-\t\tIJavaProject javaProject= cu.getJavaProject();", "-\t\tjavaProject.setOption(JavaCore.IMPORTREWRITE_IMPORT_ORDER, buf.toString());", "-\t\tjavaProject.setOption(JavaCore.IMPORTREWRITE_ONDEMAND_THRESHOLD, String.valueOf(normalThreshold));", "-\t\tjavaProject.setOption(JavaCore.IMPORTREWRITE_STATIC_ONDEMAND_THRESHOLD, String.valueOf(staticThreshold));", "-\t\treturn ImportRewrite.create(cu, restoreExistingImports);", "+\t\tImportRewrite rewrite= ImportRewrite.create(cu, restoreExistingImports);", "+\t\trewrite.setImportOrder(order);", "+\t\trewrite.setOnDemandImportThreshold(normalThreshold);", "+\t\trewrite.setStaticOnDemandImportThreshold(staticThreshold);", "+\t\treturn rewrite;"]}], "num": 65376}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22f6066c3512e47e2614522a7d484805", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3312f011bb3a591ca59db5f3e8355495", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": "  \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\tnode.getType().accept(this);", "-\t\t", "+\t\tfinal ArrayType type = node.getType();", "-\t\tfor (int i = 0; i < dimensionsLength; i++) {", "-\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, false);", "-\t\t\tExpression dimension = (Expression) dimensions.get(i);", "-\t\t\tif (dimension != null) {", "-\t\t\t\tif (this.preferences.insert_space_after_opening_bracket_in_array_allocation_expression) {", "-\t\t\t\t\tthis.scribe.space();", "+", "+\t\tfinal int arrayTypeDimensions = type.getDimensions();", "+\t\ttype.getElementType().accept(this);", "+\t\tif (dimensionsLength != 0) {", "+\t\t\tfor (int i = 0; i < dimensionsLength; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression);", "+\t\t\t\tExpression dimension = (Expression) dimensions.get(i);", "+\t\t\t\tif (dimension != null) {", "+\t\t\t\t\tif (this.preferences.insert_space_after_opening_bracket_in_array_allocation_expression) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tdimension.accept(this);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_before_closing_bracket_in_array_allocation_expression);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_between_empty_brackets_in_array_allocation_expression);", "-\t\t\t\tdimension.accept(this);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_before_closing_bracket_in_array_allocation_expression);", "-\t\t\t} else {", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = arrayTypeDimensions - dimensionsLength; i < max; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_between_empty_brackets_in_array_allocation_expression);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int i = 0; i < arrayTypeDimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6246194418235e5a33aefc25e129473", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java", "commitBeforeChange": "26659bdfac7e0bec48a495c450ef41e6483c06ca", "commitAfterChange": "2b9d806e096b1ad1d5b618f6abd63279129f9e03", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate char[] substitute(char[] parameter, char[][] typeParameterSigs, int typeParametersLength)", "signatureAfterChange": " \tprivate void substitute(char[] parameter, char[][] typeParameterSigs, int typeParametersLength)", "diff": ["-\tprivate char[] substitute(char[] parameter, char[][] typeParameterSigs, int typeParametersLength) {", "+\t */", "+\tprivate void substitute(char[] parameter, char[][] typeParameterSigs, int typeParametersLength) {", "-\t\t\t\treturn typeArgument.toCharArray();", "+\t\t\t\tthis.signature.append(typeArgument);", "+\t\t\t\treturn;", "-\t\treturn parameter;", "+\t\tint genericStart = CharOperation.indexOf(Signature.C_GENERIC_START, parameter);", "+\t\tif (genericStart > -1) {", "+\t\t\tthis.signature.append(CharOperation.subarray(parameter, 0, genericStart));", "+\t\t\tchar[][] parameters = Signature.getTypeArguments(parameter);", "+\t\t\tthis.signature.append(Signature.C_GENERIC_START);", "+\t\t\tfor (int j = 0, paramsLength = parameters.length; j < paramsLength; j++)", "+\t\t\t\tsubstitute(parameters[j], typeParameterSigs, typeParametersLength);", "+\t\t\tthis.signature.append(Signature.C_GENERIC_END);", "+\t\t\tthis.signature.append(Signature.C_SEMICOLON);", "+\t\t} else {", "+\t\t\tthis.signature.append(parameter);", "+\t\t}"]}], "num": 44930}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df895bcae90a09cdecb15bf588f64ae2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131e8d7ef1ab87027c50b2a299bba4e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final Scope scope)", "signatureAfterChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final Scope scope)", "diff": ["-\t\tSyntheticFactoryMethodBinding original = (SyntheticFactoryMethodBinding) factory.original();", "-\t\treturn original.applyTypeArgumentsOnConstructor(((ParameterizedTypeBinding)factory.returnType).arguments);", "+\t\tSyntheticFactoryMethodBinding sfmb = (SyntheticFactoryMethodBinding) factory.original();", "+\t\tTypeVariableBinding[] constructorTypeVariables = sfmb.getConstructor().typeVariables();", "+\t\tTypeBinding [] constructorTypeArguments = constructorTypeVariables != null ? new TypeBinding[constructorTypeVariables.length] : Binding.NO_TYPES;", "+\t\tif (constructorTypeArguments.length > 0)", "+\t\t\tSystem.arraycopy(((ParameterizedGenericMethodBinding)factory).typeArguments, sfmb.typeVariables().length - constructorTypeArguments.length , ", "+\t\t\t\t\t\t\t\t\t\t\t\tconstructorTypeArguments, 0, constructorTypeArguments.length);", "+\t\tMethodBinding constructor = sfmb.applyTypeArgumentsOnConstructor(((ParameterizedTypeBinding)factory.returnType).arguments, constructorTypeArguments);", "+\t\tif (constructor instanceof ParameterizedGenericMethodBinding && scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t// force an inference context to be established, but avoid tunneling through overload resolution. We know this is the MSMB.", "+\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), argumentTyps, scope, this);", "+\t\t}", "+\t\treturn constructor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e29dc8d48e0721cf089a132731f6399", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void checkImplicitNullAnnotations(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod, boolean complain, Scope scope)", "signatureAfterChange": " \tpublic void checkImplicitNullAnnotations(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod, boolean complain, Scope scope)", "diff": ["+\t\t\t\tlong sourceLevel = scope.compilerOptions().sourceLevel;", "+\t\t\t\t\tlong tagBits = 0;", "-\t\t\t\t\t\tcurrentMethod.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\t\t\ttagBits = TagBits.AnnotationNonNull;", "-\t\t\t\t\t\tcurrentMethod.tagBits |= TagBits.AnnotationNullable;", "+\t\t\t\t\t\ttagBits = TagBits.AnnotationNullable;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (tagBits != 0) {", "+\t\t\t\t\t\tif (sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t\t\tcurrentMethod.tagBits |= tagBits;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (!currentMethod.returnType.isBaseType())", "+\t\t\t\t\t\t\t\tcurrentMethod.returnType = scope.environment()", "+\t\t\t\t\t\t\t\t\t\t.createAnnotatedType(currentMethod.returnType, tagBits);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\trecordArgNonNullness(currentMethod, paramLen, i, currentArg, info.inheritedNonNullness);", "+\t\t\t\t\t\tif (sourceLevel < ClassFileConstants.JDK1_8)", "+\t\t\t\t\t\t\trecordArgNonNullness(currentMethod, paramLen, i, currentArg, info.inheritedNonNullness);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\trecordArgNonNullness18(currentMethod, i, currentArg, info.inheritedNonNullness, scope.environment());", "-\t\t\t\tcurrentMethod.fillInDefaultNonNullness(srcMethod);", "+\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8)", "+\t\t\t\t\tcurrentMethod.fillInDefaultNonNullness(srcMethod);", "+\t\t\t\telse", "+\t\t\t\t\tcurrentMethod.fillInDefaultNonNullness18(srcMethod, scope.environment());"]}], "num": 49824}
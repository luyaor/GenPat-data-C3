{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d837f49603d42b094fb7b656a4c5ceac", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e4179d8b65ecf0577ee52cbe75fead2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "6cf3ad7158f8af7acb2c41720a27495c19c9d467", "commitAfterChange": "09515e55d34c849915eacbb773d9281c9c2a5a0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic CodeFormatterVisitor(DefaultCodeFormatterOptions preferences, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tpublic CodeFormatterVisitor(DefaultCodeFormatterOptions preferences, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\t\tif (settings != null) {", "-\t\t\tObject assertModeSetting = settings.get(JavaCore.COMPILER_SOURCE);", "-\t\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "-\t\t\tif (JavaCore.VERSION_1_4.equals(assertModeSetting)) {", "-\t\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "-\t\t\t} else if (JavaCore.VERSION_1_5.equals(assertModeSetting)) {", "-\t\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "-\t\t\t}\t\t", "-\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t} else {", "-\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, ClassFileConstants.JDK1_3/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t}", "+// TODO (olivier) remove commented code after review", "+//\t\tif (settings != null) {", "+//\t\t\tObject assertModeSetting = settings.get(JavaCore.COMPILER_SOURCE);", "+//\t\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "+//\t\t\tif (JavaCore.VERSION_1_4.equals(assertModeSetting)) {", "+//\t\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "+//\t\t\t} else if (JavaCore.VERSION_1_5.equals(assertModeSetting)) {", "+//\t\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "+//\t\t\t}\t\t", "+//\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+//\t\t} else {", "+//\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, ClassFileConstants.JDK1_3/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+//\t\t}", "+\t\tlong sourceLevel = settings == null", "+\t\t\t? ClassFileConstants.JDK1_3", "+\t\t\t: CompilerOptions.versionToJdkLevel(settings.get(JavaCore.COMPILER_SOURCE));", "+\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tthis.scribe = new Scribe(this, settings, offset, length, codeSnippetParsingUtil);", "+\t\tthis.scribe = new Scribe(this, sourceLevel, offset, length, codeSnippetParsingUtil);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a896f04d721142114fa6bfd9e1533a22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic AST(Map options)", "signatureAfterChange": " \tpublic AST(Map options)", "diff": ["-\t */", "-\tpublic AST(Map options) {", "-\t\tthis(JLS2);", "-\t\tObject sourceLevelOption = options.get(JavaCore.COMPILER_SOURCE);", "-\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "-\t\tif (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {", "-\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "-\t\t} else if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {", "-\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "-\t\t}", "-\t\tObject complianceLevelOption = options.get(JavaCore.COMPILER_COMPLIANCE);", "-\t\tlong complianceLevel = ClassFileConstants.JDK1_3;", "-\t\tif (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {", "-\t\t\tcomplianceLevel = ClassFileConstants.JDK1_4;", "-\t\t} else if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {", "-\t\t\tcomplianceLevel = ClassFileConstants.JDK1_5;", "-\t\t}", "-\t\t// override scanner if 1.4 or 1.5 asked for", "-\t\tthis.scanner = new Scanner(", "-\t\t\ttrue /*comment*/,", "-\t\t\ttrue /*whitespace*/,", "-\t\t\tfalse /*nls*/,", "-\t\t\tsourceLevel /*sourceLevel*/,", "-\t\t\tcomplianceLevel /*complianceLevel*/,", "-\t\t\tnull/*taskTag*/,", "-\t\t\tnull/*taskPriorities*/,", "-\t\t\ttrue/*taskCaseSensitive*/);", "-\t}", "+\t */", "+\tpublic AST(Map options) {", "+\t\tthis(JLS2);", "+\t\tObject sourceLevelOption = options.get(JavaCore.COMPILER_SOURCE);", "+\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "+\t\tif (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "+\t\t} else if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "+\t\t} else if (JavaCore.VERSION_1_7.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_7;", "+\t\t}", "+\t\tObject complianceLevelOption = options.get(JavaCore.COMPILER_COMPLIANCE);", "+\t\tlong complianceLevel = ClassFileConstants.JDK1_3;", "+\t\tif (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_4;", "+\t\t} else if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_5;", "+\t\t} else if (JavaCore.VERSION_1_7.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_7;", "+\t\t}", "+\t\t// override scanner if 1.4 or 1.5 asked for", "+\t\tthis.scanner = new Scanner(", "+\t\t\ttrue /*comment*/,", "+\t\t\ttrue /*whitespace*/,", "+\t\t\tfalse /*nls*/,", "+\t\t\tsourceLevel /*sourceLevel*/,", "+\t\t\tcomplianceLevel /*complianceLevel*/,", "+\t\t\tnull/*taskTag*/,", "+\t\t\tnull/*taskPriorities*/,", "+\t\t\ttrue/*taskCaseSensitive*/);", "+\t}"]}], "num": 62790}
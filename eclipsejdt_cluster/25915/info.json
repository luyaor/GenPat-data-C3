{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d25359954035e8963114322c7c6594ee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2bfe571557f66b76a46d5020c79710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "055380e1ecf4ba956a2ed12d0bd6afd30fa4bb0d", "commitAfterChange": "5633218f57a8f96a181a737ead7a991d28ce84d5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant conditionConstant = condition.constant;", "-\t\tConstant conditionalConstant = condition.optimizedBooleanConstant();", "-\t\tboolean isFalseCondition =", "-\t\t\t((conditionConstant != NotAConstant)", "-\t\t\t\t&& (conditionConstant.booleanValue() == false))", "-\t\t\t\t|| ((conditionalConstant != NotAConstant)", "-\t\t\t\t\t&& (conditionalConstant.booleanValue() == false));", "+\t\tConstant cst = condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tint previousMode = flowInfo.reachMode();", "+\t\t\t\t", "-\t\t\t\t\tif (isFalseCondition) {", "-\t\t\t\t\t\t//\tcontinueLabel = null; - cannot nil the label since may be targeted already by 'continue' statements", "-\t\t\t\t\t} else {", "+\t\t\t\t\tif (!isConditionOptimizedFalse) {", "-\t\t\t\tif (isFalseCondition) {", "-\t\t\t\t\t//\tcontinueLabel = null; - cannot nil the label since may be targeted already by 'continue' statements", "-\t\t\t\t} else {", "+\t\t\t\tif (!isConditionOptimizedFalse) {", "+\t\t/* Reset reach mode, to address following scenario.", "+\t\t *   final blank;", "+\t\t *   do { if (true) break; else blank = 0; } while(false);", "+\t\t *   blank = 1; // may be initialized already ", "+\t\t */", "+\t\tflowInfo.setReachMode(previousMode);", "+\t\t", "-\t\tif ((condition.constant != NotAConstant)", "-\t\t\t&& (condition.constant.booleanValue() == true)) {", "+\t\tif (isConditionOptimizedTrue) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcc63fdad6d6f9dbb97e19302a57992", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "b9de5f3466a9b4d6687de837720c445097067b16", "commitAfterChange": "39416e9e4305b172d90b88aed3085d98ded0a86c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\r", "+\t\tboolean conditionIsInlinedToTrue = \r", "+\t\t\tcondition == null || (condition.constant != NotAConstant && condition.constant.booleanValue() == true);\r", "+\t\tboolean conditionIsInlinedToFalse = \r", "+\t\t\t! conditionIsInlinedToTrue && (condition.constant != NotAConstant && condition.constant.booleanValue() == false);\r", "+\t\t\r", "-\t\t\tif ((condition.constant == NotAConstant)\r", "-\t\t\t\t|| (condition.constant.booleanValue() != true)) {\r", "+\t\t\tif (!conditionIsInlinedToTrue) {\r", "-\t\t\tif ((condition == null)\r", "-\t\t\t\t|| ((condition.constant != NotAConstant)\r", "-\t\t\t\t\t&& (condition.constant.booleanValue() == true))) {\r", "+\t\t\tif (conditionIsInlinedToTrue) {\r", "+\t\t\t\tif (conditionIsInlinedToFalse){\r", "+\t\t\t\t\tcontinueLabel = null; // for(;false;p());\r", "+\t\t\t\t}\r", "-\t\t\t\tactionInfo =\r", "-\t\t\t\t\t((condition != null)\r", "-\t\t\t\t\t\t&& (condition.constant != NotAConstant)\r", "-\t\t\t\t\t\t&& (condition.constant.booleanValue() == false))\r", "-\t\t\t\t\t? \tFlowInfo.DeadEnd  // unreachable when condition inlined to false\r", "+\t\t\t\tactionInfo = conditionIsInlinedToFalse\r", "+\t\t\t\t\t? FlowInfo.DeadEnd  // unreachable when condition inlined to false\r", "-\t\tif ((condition == null)\r", "-\t\t\t|| ((condition.constant != NotAConstant)\r", "-\t\t\t\t&& (condition.constant.booleanValue() == true))) {\r", "+\t\tif (conditionIsInlinedToTrue) {\r"]}], "num": 25915}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f60940130860e19ca117884ac0c44e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64919efd91dc5e40b10fe5b987c74d1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, long[] positions)", "signatureAfterChange": " public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, TypeReference[] assistTypeArguments, long[] positions)", "diff": ["-public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, long[] positions) {", "-\tswitch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "-\t\tcase K_NEXT_TYPEREF_IS_EXCEPTION :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions,", "-\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.EXCEPTION);", "-\t\tcase K_NEXT_TYPEREF_IS_CLASS :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions,", "-\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.CLASS);", "-\t\tcase K_NEXT_TYPEREF_IS_INTERFACE :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions,", "-\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.INTERFACE);", "-\t\tdefault :", "-\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "-\t\t\t\tpreviousIdentifiers,", "-\t\t\t\ttypeArguments,", "-\t\t\t\tassistName,", "-\t\t\t\tpositions); ", "+public TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] assistName, TypeReference[] assistTypeArguments, long[] positions) {", "+\tboolean isParameterized = false;", "+\tfor (int i = 0; i < typeArguments.length; i++) {", "+\t\tif(typeArguments[i] != null) {", "+\t\t\tisParameterized = true;", "+\t\t}", "+\t}", "+\tif(!isParameterized) {", "+\t\treturn this.createQualifiedAssistTypeReference(previousIdentifiers, assistName, positions);", "+\t} else {", "+\t\tswitch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "+\t\t\tcase K_NEXT_TYPEREF_IS_EXCEPTION :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions,", "+\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.EXCEPTION);", "+\t\t\tcase K_NEXT_TYPEREF_IS_CLASS :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions,", "+\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.CLASS);", "+\t\t\tcase K_NEXT_TYPEREF_IS_INTERFACE :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions,", "+\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference.INTERFACE);", "+\t\t\tdefault :", "+\t\t\t\treturn new CompletionOnParameterizedQualifiedTypeReference(", "+\t\t\t\t\tpreviousIdentifiers,", "+\t\t\t\t\ttypeArguments,", "+\t\t\t\t\tassistName,", "+\t\t\t\t\tpositions); ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cf05b7d31a9444259892ab107d036f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "d3db880f9ce093cbf2c8ff1aba8ac97e00156523", "commitAfterChange": "161582c49a2d0971bc7a25f8acf5442d64ba84bb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "-\t\t\t\t// check argument type compatibility", "-\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\t\t\tfor (int j = 0; j < argLength; j++)", "-\t\t\t\t\t    if (!typeVariables[j].boundCheck(parameterizedType, argTypes[j]))", "-\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[j], typeVariables[j], currentType, args[j]);", "-\t\t\t\tqualifiedType = parameterizedType;", "+\t\t\t\t// if generic type X<T> is referred to as parameterized X<T>, then answer itself", "+\t\t\t\tboolean isIdentical = (qualifiedType == null) || (qualifiedType instanceof SourceTypeBinding);", "+\t\t\t\tif (isIdentical) {", "+\t\t\t\t    for (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t\tif (typeVariables[j] != argTypes[j]) {", "+\t\t\t\t\t\t\tisIdentical = false;", "+\t\t\t\t\t\t    break;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t    if (isIdentical) {", "+\t\t\t    \tqualifiedType = (ReferenceBinding) currentType.erasure();", "+\t\t\t    } else {", "+\t\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\t\t// check argument type compatibility", "+\t\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "+\t\t\t\t\t\tfor (int j = 0; j < argLength; j++)", "+\t\t\t\t\t\t    if (!typeVariables[j].boundCheck(parameterizedType, argTypes[j]))", "+\t\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[j], typeVariables[j], currentType, args[j]);", "+\t\t\t\t\tqualifiedType = parameterizedType;", "+\t\t\t    }"]}], "num": 19644}
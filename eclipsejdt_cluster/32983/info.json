{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beab125ef4969b32ba96e63b8bedbb28", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3515e37805a3824b4222393a012b6c87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\tif (binding instanceof ReferenceBinding) {", "+\t\tif(binding instanceof TypeVariableBinding) {", "+\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) binding;", "+\t\t\tBinding enclosingElement = typeVariableBinding.declaringElement;", "+\t\t\tthis.noProposal = false;", "+\t\t\t", "+\t\t\tif(enclosingElement instanceof SourceTypeBinding) {", "+\t\t\t\tSourceTypeBinding enclosingType = (SourceTypeBinding) enclosingElement;", "+\t\t\t\tthis.requestor.acceptTypeParameter(", "+\t\t\t\t\tenclosingType.qualifiedPackageName(),", "+\t\t\t\t\tenclosingType.qualifiedSourceName(),", "+\t\t\t\t\ttypeVariableBinding.sourceName(),", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t} else if(enclosingElement instanceof MethodBinding) {", "+\t\t\t\tMethodBinding enclosingMethod = (MethodBinding) enclosingElement;", "+\t\t\t\t", "+\t\t\t\tTypeBinding[] parameterTypes = enclosingMethod.parameters;", "+\t\t\t\tint length = parameterTypes.length;", "+\t\t\t\tchar[][] parameterPackageNames = new char[length][];", "+\t\t\t\tchar[][] parameterTypeNames = new char[length][];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tparameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();", "+\t\t\t\t\tparameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.requestor.acceptMethodTypeParameter(", "+\t\t\t\t\tenclosingMethod.declaringClass.qualifiedPackageName(),", "+\t\t\t\t\tenclosingMethod.declaringClass.qualifiedSourceName(),", "+\t\t\t\t\tenclosingMethod.selector,", "+\t\t\t\t\tparameterPackageNames,", "+\t\t\t\t\tparameterTypeNames,", "+\t\t\t\t\tenclosingMethod.isConstructor(),", "+\t\t\t\t\ttypeVariableBinding.sourceName(),", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t}", "+\t\t\tthis.acceptedAnswer = true;", "+\t\t} else if (binding instanceof ReferenceBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bec096efcc6d198f80e2939e6b24a3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo declaringClassFlowInfo, FlowInfo fieldResetInfo)", "diff": ["-public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo) {", "+public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo declaringClassFlowInfo, FlowInfo fieldResetInfo) {", "+\t// fieldResetInfo: in this info we collect all information required for UnconditionalFlowInfo.resetNullInfoForFields:", "+\t// - which fields should never reset their null status? (constants and @NonNull)", "+\t// - for other fields: to what status should it be reset at each MessageSend? (unknown or pot.null)", "+\tboolean isConstant = this.binding.isFinal() && this.binding.isStatic();", "+\tboolean includeFieldsInNullAnalysis = initializationScope.compilerOptions().includeFieldsInNullAnalysis;", "-\t\tif (this.binding.isFinal() && this.binding.isStatic()) {", "+\t\tif (isConstant && includeFieldsInNullAnalysis) {", "-//\t\t\tthis.binding.setNullStatusForStaticFinalField(nullStatus);", "+\t}", "+\tif (isConstant && includeFieldsInNullAnalysis) {", "+\t\t// never reset null status for constants", "+\t\tfieldResetInfo.updateConstantFieldsMask(this.binding);", "+\t}", "+\tlong tagBits = this.binding.tagBits;", "+\tif ((tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t\tif (this.initialization != null) {", "+\t\t\tint nullStatus = this.initialization.nullStatus(flowInfo);", "+\t\t\t// check against annotation @NonNull:", "+\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t\t\t\tchar[][] annotationName = initializationScope.environment().getNonNullAnnotationName();", "+\t\t\t\tinitializationScope.problemReporter().nullityMismatch(this.initialization, this.binding.type, nullStatus, annotationName);", "+\t\t\t}", "+\t\t}", "+\t\t// record nonnull for use by methods:", "+\t\tdeclaringClassFlowInfo.markAsDefinitelyNonNull(this.binding);", "+", "+\t\t// tell resetNullInfoForFields not to update this field's status", "+\t\tfieldResetInfo.updateConstantFieldsMask(this.binding);", "+\t} else if ((tagBits & TagBits.AnnotationNullable) != 0) {", "+\t\t// record pot.null for use by methods:", "+\t\tdeclaringClassFlowInfo.resetNullInfo(this.binding);", "+\t\tdeclaringClassFlowInfo.markPotentiallyNullBit(this.binding);", "+", "+\t\t// tell resetNullInfoForFields to reset this field to pot.null:", "+\t\t// (note that this info is ineffective if the field is also constant)", "+\t\tfieldResetInfo.resetNullInfo(this.binding);", "+\t\tfieldResetInfo.markPotentiallyNullBit(this.binding);", "+\t} else if (!isConstant && includeFieldsInNullAnalysis) {", "+\t\t// tell resetNullInfoForFields to reset this field to def.unknown:", "+\t\tfieldResetInfo.markAsDefinitelyUnknown(this.binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75088f455013e85aed46d7626b27c8a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding[] memberTypes, \t\tObjectVector typesFound, \t\tReferenceBinding receiverType, \t\tSourceTypeBinding invocationType, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification)", "diff": ["-\t\tboolean staticOnly) {", "+\t\tboolean staticOnly,", "+\t\tboolean fromStaticImport,", "+\t\tboolean checkQualification) {", "+\t\t\tif(!this.insideQualifiedReference && PROPOSE_MEMBER_TYPES) {", "+\t\t\t\tif(this.assistNodeIsClass) {", "+\t\t\t\t\tif(!memberType.isClass()) continue next;", "+\t\t\t\t} else if(this.assistNodeIsInterface) {", "+\t\t\t\t\tif(!memberType.isInterface() && !memberType.isAnnotationType()) continue next;", "+\t\t\t\t} else if (this.assistNodeIsAnnotation) {", "+\t\t\t\t\tif(!memberType.isAnnotationType()) continue next;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tchar[] completionName = memberType.sourceName();", "+\t\t\t", "+\t\t\tboolean isQualified = false;", "+\t\t\tif(checkQualification && !fromStaticImport) {", "+\t\t\t\tchar[] memberPackageName = memberType.qualifiedPackageName();", "+\t\t\t\tchar[] memberTypeName = memberType.sourceName();", "+\t\t\t\tchar[] memberEnclosingTypeNames = memberType.enclosingType().qualifiedSourceName();", "+\t\t\t\tif (mustQualifyType(memberPackageName, memberTypeName, memberEnclosingTypeNames, memberType.modifiers)) {", "+\t\t\t\t\tif (memberPackageName == null || memberPackageName.length == 0)", "+\t\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "+\t\t\t\t\t\t\tbreak next; // ignore types from the default package from outside it", "+\t\t\t\t\tisQualified = true;", "+\t\t\t\t\tcompletionName =", "+\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\tmemberPackageName,", "+\t\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\tmemberEnclosingTypeNames,", "+\t\t\t\t\t\t\t\t\t\tmemberTypeName,", "+\t\t\t\t\t\t\t\t\t\t'.'),", "+\t\t\t\t\t\t\t\t'.');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif(!insideQualifiedReference) {", "+\t\t\t\trelevance += computeRelevanceForQualification(isQualified);", "+\t\t\t}", "-\t\t\t\tproposal.setCompletion(memberType.sourceName());", "+\t\t\t\tproposal.setCompletion(completionName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "907fec3b2411f16918d888058bf9b79e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "02009b41ec945f5cfcf629234ac75cbc76ce6809", "commitAfterChange": "3e46d275b92d309fd1fe675f261b23afc851c7bf", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["+\t\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$", "+\t\t\t\t\tswitch (currentArg.length()) {", "+\t\t\t\t\t\tcase 7:", "+\t\t\t\t\t\t\tdisableAll(ProblemSeverities.Warning);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 8:", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(this.bind(", "+\t\t\t\t\t\t\t\t\t\"configure.invalidNowarnOption\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tint foldersStart = currentArg.indexOf('[') + 1;", "+\t\t\t\t\t\t\tint foldersEnd = currentArg.lastIndexOf(']');", "+\t\t\t\t\t\t\tif (foldersStart <= 8 || foldersEnd == -1 || foldersStart > foldersEnd", "+\t\t\t\t\t\t\t\t\t|| foldersEnd < currentArg.length() - 1) {", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(this.bind(", "+\t\t\t\t\t\t\t\t\t\t\"configure.invalidNowarnOption\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString folders = currentArg.substring(foldersStart, foldersEnd);", "+\t\t\t\t\t\t\tif (folders.length() > 0) {", "+\t\t\t\t\t\t\t\tchar[][] currentFolders = decodeIgnoreOptionalProblemsFromFolders(folders);", "+\t\t\t\t\t\t\t\tif (this.ignoreOptionalProblemsFromFolders != null) {", "+\t\t\t\t\t\t\t\t\tint length = this.ignoreOptionalProblemsFromFolders.length + currentFolders.length;", "+\t\t\t\t\t\t\t\t\tchar[][] tempFolders = new char[length][];", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(this.ignoreOptionalProblemsFromFolders, 0, tempFolders, 0, this.ignoreOptionalProblemsFromFolders.length);", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(currentFolders, 0, tempFolders, this.ignoreOptionalProblemsFromFolders.length, currentFolders.length);", "+\t\t\t\t\t\t\t\t\tthis.ignoreOptionalProblemsFromFolders = tempFolders;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.ignoreOptionalProblemsFromFolders = currentFolders;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(this.bind(", "+\t\t\t\t\t\t\t\t\t\t\"configure.invalidNowarnOption\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$", "-\t\t\t\t\tdisableAll(ProblemSeverities.Warning);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c1b556b78410c2b0131273f5780372c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner)", "signatureAfterChange": " public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner workingCopyOwner)", "diff": ["+\t\tcase JEM_LAMBDA_EXPRESSION:", "+\t\t\tif (!memento.hasMoreTokens()) return this;", "+\t\t\tString name = memento.nextToken();", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.STRING)", "+\t\t\t\treturn this;", "+\t\t\tif (!memento.hasMoreTokens()) return this;", "+\t\t\tString interphase = memento.nextToken();", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) ", "+\t\t\t\treturn this;", "+\t\t\tint sourceStart = Integer.parseInt(memento.nextToken());", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) ", "+\t\t\t\treturn this;", "+\t\t\tint sourceEnd = Integer.parseInt(memento.nextToken());", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) ", "+\t\t\t\treturn this;", "+\t\t\tint arrowPosition = Integer.parseInt(memento.nextToken());", "+\t\t\tif (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.LAMBDA_METHOD) ", "+\t\t\t\treturn this;", "+\t\t\tLambdaExpression expression = new LambdaExpression(this, name, interphase, sourceStart, sourceEnd, arrowPosition);", "+\t\t\treturn expression.getHandleFromMemento(token, memento, workingCopyOwner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e138effe53656fd0a26ee98dbdf16795", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "1fa0b970f57a68665cdfde955081db2621c42276", "commitAfterChange": "be945f896dfe94a8d4114819ea1c2afbe987ee6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["+\t\t\t\t} else if (_returnType.isArray() && _returnType.getElementType().isTypeVariable()) {", "+\t\t\t\t\tint dimensions = _returnType.getDimensions();", "+\t\t\t\t\tbuffer.append(_returnType.getElementType().getQualifiedName());", "+\t\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t}", "+\t\t\t\t\t} else if (parameter.isArray() && parameter.getElementType().isTypeVariable()) {", "+\t\t\t\t\t\tint dimensions = parameter.getDimensions();", "+\t\t\t\t\t\tbuffer.append(parameter.getElementType().getQualifiedName());", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (thrownException.isArray() && thrownException.getElementType().isTypeVariable()) {", "+\t\t\t\t\t\tint dimensions = thrownException.getDimensions();", "+\t\t\t\t\t\tbuffer.append(thrownException.getElementType().getQualifiedName());", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd1eb7743df57937cf57e1ab1c424cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t \tprivate void buildContext(ASTNode astNode)", "signatureAfterChange": " \t\t \tprivate void buildContext( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tBinding qualifiedBinding, \t\t\tScope scope)", "diff": ["-\tprivate void buildContext(ASTNode astNode) {", "+\tprivate void buildContext(", "+\t\t\tASTNode astNode,", "+\t\t\tASTNode astNodeParent,", "+\t\t\tBinding qualifiedBinding,", "+\t\t\tScope scope) {", "+\t\tcontext.setOffset(this.actualCompletionPosition + 1);", "+\t\t", "+\t\t}", "+\t\t", "+\t\tif (!(astNode instanceof CompletionOnJavadoc)) {", "+\t\t\tCompletionScanner scanner = (CompletionScanner)this.parser.scanner;", "+\t\t\tcontext.setToken(scanner.completionIdentifier);", "+\t\t\tcontext.setTokenRange(", "+\t\t\t\t\tscanner.completedIdentifierStart,", "+\t\t\t\t\tscanner.completedIdentifierEnd,", "+\t\t\t\t\tscanner.endOfEmptyToken);", "+\t\t} else if(astNode instanceof CompletionOnJavadocTag) {", "+\t\t\tCompletionOnJavadocTag javadocTag = (CompletionOnJavadocTag) astNode;", "+\t\t\tcontext.setToken(CharOperation.concat(new char[]{'@'}, javadocTag.token));", "+\t\t\tcontext.setTokenRange(", "+\t\t\t\t\tjavadocTag.tagSourceStart,", "+\t\t\t\t\tjavadocTag.tagSourceEnd,", "+\t\t\t\t\t((CompletionScanner)this.parser.javadocParser.scanner).endOfEmptyToken);", "+\t\t} else {", "+\t\t\tCompletionScanner scanner = (CompletionScanner)this.parser.javadocParser.scanner;", "+\t\t\tcontext.setToken(scanner.completionIdentifier);", "+\t\t\tcontext.setTokenRange(", "+\t\t\t\t\tscanner.completedIdentifierStart,", "+\t\t\t\t\tscanner.completedIdentifierEnd,", "+\t\t\t\t\tscanner.endOfEmptyToken);", "+\t\t}", "+\t\t", "+\t\t", "+\t\t//TODO add support for string literal", "+\t\tcontext.setTokenKind(CompletionContext.TOKEN_KIND_NAME);", "+\t\t", "+\t\tif(DEBUG) {", "+\t\t\tSystem.out.println(context.toString());"]}], "num": 32983}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bff09cc9f39bdb67fcbd7bea41ba901", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e24a9650ee1abf0589427ba423e824d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "406460504cd2ce326e8175c89e3901b483593d68", "commitAfterChange": "d552fa04b57c49a345a68b34dc573989b48684d9", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-        \t} else if (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "-        \t\tint length = JavaCore.PLUGIN_ID.length() + 1;", "-        \t\tString key = event.getKey();", "-        \t\tStringTokenizer tokenizer = new StringTokenizer(key.substring(length));", "-        \t\tString token = tokenizer.nextToken();", "-        \t\tif (key.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "-        \t\t\ttoken.equals(\"builder\") || //$NON-NLS-1$", "-        \t\t\tkey.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "-        \t\t\tkey.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "-        \t\t\tkey.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL) ||", "-        \t\t\ttoken.equals(\"classpath\")) //$NON-NLS-1$", "-        \t\t{", "-        \t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-        \t\t\tIJavaModel model = manager.getJavaModel();", "-        \t\t\tIJavaProject[] projects;", "-        \t\t\ttry {", "-        \t\t\t\tprojects = model.getJavaProjects();", "-        \t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "-        \t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "-\t    \t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "-\t    \t\t\t\t\ttry {", "-\t    \t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "-\t                            javaProject.getProject().touch(null);", "-                            } catch (CoreException e) {", "-\t                            // skip", "-                            }", "-        \t\t\t\t}", "-        \t\t\t} catch (JavaModelException e) {", "-        \t\t\t\t// skip", "-        \t\t\t}", "-        \t\t}", "+        \t} else if (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL)) {", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tIJavaModel model = manager.getJavaModel();", "+\t\t\t\tIJavaProject[] projects;", "+\t\t\t\ttry {", "+\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "+\t\t\t\t            javaProject.getProject().touch(null);", "+\t\t\t\t        } catch (CoreException e) {", "+\t\t\t\t            // skip", "+\t\t\t\t        }", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// skip", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7946c4117d2c0ed8181187286e9cbe40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": "  boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "diff": ["-boolean checkInheritedReturnTypes(MethodBinding[] methods, int length) {", "-\tMethodBinding first = methods[0];", "-\tint index = length;", "-\twhile (--index > 0 && areReturnTypesCompatible(first, methods[index])){/*empty*/}", "-\tif (index == 0)", "-\t\treturn true;", "+boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod) {", "+\tif (areReturnTypesCompatible(method, otherMethod)) return true;", "-\t// All inherited methods do NOT have the same vmSignature", "-\tif (this.type.isInterface())", "-\t\tfor (int i = length; --i >= 0;)", "-\t\t\tif (methods[i].declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\t\treturn false; // do not complain since the super interface already got blamed", "-\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\tif (!this.type.isInterface())", "+\t\tif (method.declaringClass.isClass() || !this.type.implementsInterface(method.declaringClass, false))", "+\t\t\tif (otherMethod.declaringClass.isClass() || !this.type.implementsInterface(otherMethod.declaringClass, false))", "+\t\t\t\treturn true; // do not complain since the superclass already got blamed", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a1dad48306822f2b0b20a32dfcd4b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected int resolveLevel(ConstructorDeclaration constructor, boolean checkDeclarations)", "signatureAfterChange": " protected int resolveLevel(FieldDeclaration field)", "diff": ["+}", "+protected int resolveLevel(FieldDeclaration field) {", "+\t// only accept enum constants", "+\tif (field.type != null || field.binding == null) return IMPOSSIBLE_MATCH;", "+\tif (this.pattern.declaringSimpleName != null && !matchesName(this.pattern.declaringSimpleName, field.binding.type.sourceName()))", "+\t\treturn IMPOSSIBLE_MATCH;", "+\tif (!(field.initialization instanceof AllocationExpression) || field.initialization.resolvedType.isLocalType()) return IMPOSSIBLE_MATCH;", "+", "+\treturn resolveLevel(((AllocationExpression)field.initialization).binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3fdf866cdf20e598398b215a446b122", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "badeb0487ffc4d03b8894b177626763bdc461127", "commitAfterChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] bindings, org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] otherBindings)", "signatureAfterChange": "  \tstatic boolean isEqual(FieldBinding fieldBinding, FieldBinding fieldBinding2)", "diff": ["+\tstatic boolean isEqual(FieldBinding fieldBinding, FieldBinding fieldBinding2) {", "+\t\treturn fieldBinding.modifiers == fieldBinding2.modifiers", "+\t\t\t\t&& CharOperation.equals(fieldBinding.name, fieldBinding2.name)", "+\t\t\t\t&& isEqual(fieldBinding.type, fieldBinding2.type)", "+\t\t\t\t&& isEqual(fieldBinding.declaringClass, fieldBinding2.declaringClass);", "+\t}"]}], "num": 46651}
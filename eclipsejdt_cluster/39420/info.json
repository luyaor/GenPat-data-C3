{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07533a823c12eef2e44ce4073005cf1e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01810f73ab36bf59f4e70bc5bf88ab20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "f914881dbc94abaf445f0359517391331cec0c1f", "commitAfterChange": "642dc124ef5eccd7fd363b9a3443fef6794a2e79", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tpublic void testBug92944_TYPE() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_TYPE() throws CoreException", "diff": ["+\t\t\t\"Test\\n\" + ", "+\t\t\t\"Test$Inner\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12d2fd7c31fa774e70ba33d65fbdf5b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "1aa5cee9e9697e028635f26ba41c923ef65834f6", "commitAfterChange": "3553ae2fde22d1bf8f8672de0126ed2f663e6d31", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference\\\" value=\\\"enabled\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376bfb63ccc4f1f68a857cc5691711dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "c805b2c9ea429c7a118f078e4364f61575eab52b", "commitAfterChange": "01ebdd7bcd2ae1972ae7d5e4a984275dc87ac438", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\t// TODO (kent) autoboxing case, enable once support is added", "-\t\t\t\t//\"\t\tY.object((byte) 1);\\n\" +", "+\t\t\t\t\"\t\tY.object((byte) 1);\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 16)\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 17)\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\t\"10. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\t\"10. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\t\"11. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"11. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\"12. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 23)\\n\" + ", "-\t\t\t\"13. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\t\"13. ERROR in X.java (at line 25)\\n\" + ", "-\t\t\t\"14. WARNING in X.java (at line 26)\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 27)\\n\" + ", "-\t\t\t\"15. WARNING in X.java (at line 28)\\n\" + ", "+\t\t\t\"15. WARNING in X.java (at line 29)\\n\" + ", "-\t\t\t\"16. ERROR in X.java (at line 31)\\n\" + ", "+\t\t\t\"16. ERROR in X.java (at line 32)\\n\" + ", "-\t\t\t\"17. ERROR in X.java (at line 33)\\n\" + ", "+\t\t\t\"17. ERROR in X.java (at line 34)\\n\" + ", "-\t\t\t\"18. ERROR in X.java (at line 34)\\n\" + ", "+\t\t\t\"18. ERROR in X.java (at line 35)\\n\" + ", "-\t\t\t\"19. ERROR in X.java (at line 35)\\n\" + ", "+\t\t\t\"19. ERROR in X.java (at line 36)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a28eda426314957eaa5aa50a2b842bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "27e2724327c75ddbe7646447a4af212947b149ed", "commitAfterChange": "d516022cc45faaf269239c9a3eb11f62f3444f69", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["+        \"      syntacticAnalysis    perform syntax-based null analysis for fields\\n\" + ", "+        \"      unlikelyArgumentType invoking Map.get() et al with an unlikely argument\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "522b1261a72f6ab2222548fc489d0100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "25a4c603c1f482ad385999879af859a3ed5010ab", "commitAfterChange": "3f67446cba99a16645f6883fe8feb16d27fba109", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void setUpSuite() throws Exception", "signatureAfterChange": " public void setUpSuite() throws Exception", "diff": ["+\t\t\"\\n\\n\" + \t// package now includes comment (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=93880)", "+\t\t\t\t\t\t// => need some empty line at beginning to be able to have cu without any other element (see testGetElementAt())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb985eefefb2aa0d58b9c47fa9b40d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f348e270de7897a83e9fcfa09ba7634dab98219f", "commitAfterChange": "c5e020e77f1e406c32c5394bb12c24f79a6e840b", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation\\\" value=\\\"ignore\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "702540eb61321bec781422f328578eb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"      all-static-method    all method can be declared as static warnings\\n\" +", "+        \"      all-static-method    all method can be declared as static warnings\\n\" + ", "+        \"      nullFields    \t  + null analysis for fields\\n\" + ", "-        \"      unavoidableGenericProblems + ignore unavoidable type safety problems\\n\" +", "+        \"      unavoidableGenericProblems + ignore unavoidable type safety problems\\n\" + ", "-        \"      warningToken       + unsupported or unnecessary @SuppressWarnings\\n\" + ", "+        \"      warningToken       + unsupported or unnecessary @SuppressWarnings\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a09078b5137f8a9ac16280fdc24ae7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"      nullFields    \t  + null analysis for fields\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd2e700332df7d31a0d1ae70f86031d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "commitAfterChange": "2d9dc5098273e0e95832d81d735d2d77249738ef", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " public void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " public void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "diff": ["+\t\t\"b108088.A108088\\n\" + ", "+\t\t\"b108088.B108088\\n\" + ", "+\t\t\"b108088.Test108088\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf81babeea9004482628e4c793e47286", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "3c48c9fa4ac4d99dec40bf37b65e9e7f38ac2398", "commitAfterChange": "b5bf53e6da2ad7bf71cf2aa2a6885479711b42ec", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " public void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "signatureAfterChange": " public void testBug92944_CLASS_AND_INTERFACE() throws CoreException", "diff": ["+\t\t\"TestPrefix\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1e6309aafce223c935960e52de0389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "9f3ab0840d24edcaf3911840a93823998e7f8eff", "commitAfterChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["+        \"      intfRedundant      + find redundant superinterfaces\\n\" + ", "-        \"      redundantSuperinterface                + find redundant superinterfaces\\n\" +", "-        \"      syncOverride     overriding a synchronized method without synchronizing it\\n\" +", "-        \"      synthetic-access     same as syntheticAccess\\n\" +", "+        \"      syncOverride         missing synchronized in synchr. method override\\n\" +", "-        \"      unqualified-field-access same as unqualifiedField\\n\" +"]}], "num": 39420}
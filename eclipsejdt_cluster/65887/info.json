{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c47ee00cde7427489a90a35dcf533fa9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0334c17814e54dfb4bdc225a8343092f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "7658885de020459a43d5c54a62e5511e4cf48903", "commitAfterChange": "effc87828d40c0b15d95e17b44487025194ac03b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t  \tprivate static Scanner getNameScanner(CompilerOptions compilerOptions)", "signatureAfterChange": " \t\tpublic char[][] getResults()", "diff": ["+\t\t}", "+\t\tpublic char[][] getResults(){", "+\t\t\tint count = prefixAndSuffixResultsCount + prefixResultsCount + suffixResultsCount + otherResultsCount;", "+\t\t\tchar[][] results = new char[count][];", "+\t\t\t", "+\t\t\tint index = 0;", "+\t\t\tSystem.arraycopy(prefixAndSuffixResults, 0, results, index, prefixAndSuffixResultsCount);", "+\t\t\tindex += prefixAndSuffixResultsCount;", "+\t\t\tSystem.arraycopy(prefixResults, 0, results, index, prefixResultsCount);", "+\t\t\tindex += prefixResultsCount;", "+\t\t\tSystem.arraycopy(suffixResults, 0, results, index, suffixResultsCount);", "+\t\t\tindex += suffixResultsCount;", "+\t\t\tSystem.arraycopy(otherResults, 0, results, index, otherResultsCount);", "+\t\t\t", "+\t\t\treturn results;", "+\t\t}", "-", "-\tprivate static Scanner getNameScanner(CompilerOptions compilerOptions) {", "-\t\treturn", "-\t\t\tnew Scanner(", "-\t\t\t\tfalse /*comment*/, ", "-\t\t\t\tfalse /*whitespace*/, ", "-\t\t\t\tfalse /*nls*/, ", "-\t\t\t\tcompilerOptions.sourceLevel >= CompilerOptions.JDK1_4 /*assert*/, ", "-\t\t\t\tcompilerOptions.complianceLevel >= CompilerOptions.JDK1_4 /*strict comment*/,", "-\t\t\t\tnull /*taskTags*/, ", "-\t\t\t\tnull/*taskPriorities*/);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095b2db7c5c9b8055f379a99a0f361f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding substitute(TypeVariableBinding originalVariable)", "signatureAfterChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "diff": ["+\t\t// With T mapping to I<T>, answer of I<?>, when given T, having eliminated the circularity/self reference.", "+\t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable) {", "+\t\t\tif (typeVariable.rank >= this.variables.length || this.variables[typeVariable.rank] != typeVariable) {   // not kosher, don't touch.", "+\t\t\t\treturn typeVariable;", "+\t\t\t}", "+\t\t\tif (this.substitutes != null) {", "+\t\t\t\treturn Scope.substitute(new LingeringTypeVariableEliminator(this.variables, null, this.scope), this.substitutes[typeVariable.rank]); ", "+\t\t\t}", "+\t\t\tReferenceBinding genericType = (ReferenceBinding) (typeVariable.declaringElement instanceof ReferenceBinding ? typeVariable.declaringElement : null);", "+\t\t\treturn this.scope.environment().createWildcard(genericType, typeVariable.rank, null, null, Wildcard.UNBOUND);", "+\t\t}"]}], "num": 65887}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bfc02614b2c89d42b4e0d7a18e7d3de", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bef1f2d282de3413e5fe25c739fac23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "4ec8463782f86806757a76ab2d360d5012825932", "commitAfterChange": "f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\tBodyDeclaration prev = null;", "-\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "-\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "-\t\t\tif (prev instanceof EnumConstantDeclaration) {", "-\t\t\t\t// enum constant declarations do not include punctuation", "-\t\t\t\tif (d instanceof EnumConstantDeclaration) {", "-\t\t\t\t\t// enum constant declarations are separated by commas", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\t// semicolon separates last enum constant declaration from ", "-\t\t\t\t\t// first class body declarations", "-\t\t\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "+\t\tfor (Iterator it = node.enumConstants().iterator(); it.hasNext(); ) {", "+\t\t\tEnumConstantDeclaration d = (EnumConstantDeclaration) it.next();", "-\t\t\tprev = d;", "+\t\t\t// enum constant declarations do not include punctuation", "+\t\t\tif (it.hasNext()) {", "+\t\t\t\t// enum constant declarations are separated by commas", "+\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tif (!node.bodyDeclarations().isEmpty()) {", "+\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "+\t\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\t\td.accept(this);", "+\t\t\t\t// other body declarations include trailing punctuation", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288cf7f17e21dbb11524678d80d3c9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/JavaBuilder.java", "commitBeforeChange": "a80d6e1ac5018cdf219c02b60e35505f7b63da6a", "commitAfterChange": "a30424844cd83642e790887d1975613889f243cf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private IProject[] getRequiredProjects()", "signatureAfterChange": "\r private IProject[] getRequiredProjects()", "diff": ["-\tString[] projectNames;\r", "+\tArrayList projects = new ArrayList();\r", "-\t\tprojectNames = ((JavaProject)javaProject).projectPrerequisites(((JavaProject)javaProject).getExpandedClasspath(true));\r", "+\t\tIClasspathEntry[] entries = ((JavaProject) javaProject).getExpandedClasspath(true);\r", "+\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\tIClasspathEntry entry = JavaCore.getResolvedClasspathEntry(entries[i]);\r", "+\t\t\tif (entry != null && entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {\r", "+\t\t\t\tIProject p = workspaceRoot.getProject(entry.getPath().lastSegment());\r", "+\t\t\t\tif (p != null && !projects.contains(p))\r", "+\t\t\t\t\tprojects.add(p);\r", "+\t\t\t}\r", "+\t\t}\r", "-\t}\r", "-\r", "-\tArrayList projects = new ArrayList();\r", "-\tfor (int i = 0; i < projectNames.length; ++i) {\r", "-\t\tIProject p = workspaceRoot.getProject(projectNames[i]);\r", "-\t\tif (p != null && !projects.contains(p))\r", "-\t\t\tprojects.add(p);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a1aaf96cfdc085e2731438c868cff8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean visit(ArrayAccess node)", "signatureAfterChange": " \tpublic boolean visit(AnnotationTypeDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(AnnotationTypeDeclaration node) {", "+\t\tif (node.getJavadoc() != null) {", "+\t\t\tnode.getJavadoc().accept(this);", "+\t\t}", "+\t\tprintModifiers(node.modifiers());", "+\t\tthis.buffer.append(\"@interface \");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\tthis.buffer.append(\" {\");//$NON-NLS-1$", "+\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\td.accept(this);", "+\t\t}", "+\t\tthis.buffer.append(\"}\");//$NON-NLS-1$", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c354a0637a353e369feed0269aa6aefa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "56548ed32bbf39260981e42ce86a17715beb9aa5", "commitAfterChange": "01bde15cfc13d8a3b23b79b617d09b3f68ff38cf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private final static void buildFile(String filename, String content) throws java.io.IOException", "signatureAfterChange": " private final static void buildFile(String filename, List listToDump) throws java.io.IOException", "diff": ["-private final static void buildFile(String filename, String content) throws java.io.IOException {", "-\tjava.io.FileWriter stream = new FileWriter(filename);", "-\tstream.write(content);", "-\tstream.close();", "+private final static void buildFile(String filename, List listToDump) throws java.io.IOException {", "+\tBufferedWriter writer = new BufferedWriter(new FileWriter(filename));", "+\tfor (Iterator iterator = listToDump.iterator(); iterator.hasNext(); ) {", "+\t\twriter.write(String.valueOf(iterator.next()));", "+\t}", "+\twriter.flush();", "+\twriter.close();"]}], "num": 69036}
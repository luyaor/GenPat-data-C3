{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0651a0582d35fdc3368882144696605c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f43e1b7769dd4549c1e20e6452a609", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "commitAfterChange": "a49b0379fae683770f815e7e32d76b4ebea892ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\tint nextToken = this.getNextToken0();", "+\tif (this.record) {", "+\t\tswitch (nextToken) {", "+\t\t\tcase TokenNameIdentifier:", "+\t\t\t\tif (this.currentToken != TokenNameDOT) {", "+\t\t\t\t\tchar[] identifier = this.getCurrentIdentifierSource();", "+\t\t\t\t\tif (!Character.isUpperCase(identifier[0]) && ", "+\t\t\t\t\t\t\tCharOperation.prefixEquals(this.prefix, identifier, true)) {", "+\t\t\t\t\t\tthis.addPotentialName(identifier, this.startPosition);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLPAREN :", "+\t\t\tcase TokenNameLBRACE :", "+\t\t\t\tif (this.currentToken == TokenNameIdentifier) {", "+\t\t\t\t\tthis.removePotentialNamesAt(this.currentTokenStart);", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "+\tthis.currentToken = nextToken;", "+\tthis.currentTokenStart = this.startPosition;", "+\treturn nextToken;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81e89e8bad05ef834d6c70ee43c3b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 118, "signatureBeforeChange": "  public void test2057_mergedWith()", "signatureAfterChange": " public void test0341_if_else_nested()", "diff": ["+// null analysis - if/else nested", "+public void test0341_if_else_nested() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o1, Object o2, boolean b) {\\n\" + ", "+\t\t\t\"    if (o1 == null || b) {\\n\" + ", "+\t\t\t\"      if (o1 == o2) {\\n\" + ", "+\t\t\t\"        o1.toString();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\to1.toString();\\n\" + ", "+\t\t\"\t^^\\n\" + ", "+\t\t\"The variable o1 may be null\\n\" + ", "+\t\t\"----------\\n\");", "+}", "-", "-public void test2057_mergedWith() {", "-\tlong [][][] testData = {", "-\t\t{{0,0,0,0},{0,0,0,0},{0,0,0,0}},", "-\t\t{{0,0,0,0},{0,0,0,1},{0,0,0,1}},", "-\t\t{{0,0,0,0},{0,0,1,0},{0,0,1,0}},", "-\t\t{{0,0,0,0},{0,0,1,1},{0,0,1,1}},", "-\t\t{{0,0,0,0},{0,1,0,0},{0,0,1,0}},", "-\t\t{{0,0,0,0},{0,1,1,0},{0,0,1,0}},", "-\t\t{{0,0,0,0},{1,0,0,1},{0,0,0,1}},", "-\t\t{{0,0,0,0},{1,0,1,0},{0,0,1,0}},", "-\t\t{{0,0,0,0},{1,0,1,1},{0,0,0,1}},", "-\t\t{{0,0,0,0},{1,1,0,0},{0,0,0,0}},", "-\t\t{{0,0,0,0},{1,1,0,1},{0,0,0,1}},", "-\t\t{{0,0,0,1},{0,0,0,0},{0,0,0,1}},", "-\t\t{{0,0,0,1},{0,0,0,1},{0,0,0,1}},", "-\t\t{{0,0,0,1},{0,0,1,0},{0,0,1,1}},", "-\t\t{{0,0,0,1},{0,0,1,1},{0,0,1,1}},", "-\t\t{{0,0,0,1},{0,1,0,0},{0,0,1,1}},", "-\t\t{{0,0,0,1},{0,1,1,0},{0,0,1,1}},", "-\t\t{{0,0,0,1},{1,0,0,1},{0,0,0,1}},", "-\t\t{{0,0,0,1},{1,0,1,0},{0,0,1,1}},", "-\t\t{{0,0,0,1},{1,0,1,1},{0,0,0,1}},", "-\t\t{{0,0,0,1},{1,1,0,0},{0,0,0,1}},", "-\t\t{{0,0,0,1},{1,1,0,1},{0,0,0,1}},", "-\t\t{{0,0,1,0},{0,0,0,0},{0,0,1,0}},", "-\t\t{{0,0,1,0},{0,0,0,1},{0,0,1,1}},", "-\t\t{{0,0,1,0},{0,0,1,0},{0,0,1,0}},", "-\t\t{{0,0,1,0},{0,0,1,1},{0,0,1,1}},", "-\t\t{{0,0,1,0},{0,1,0,0},{0,0,1,0}},", "-\t\t{{0,0,1,0},{0,1,1,0},{0,0,1,0}},", "-\t\t{{0,0,1,0},{1,0,0,1},{0,0,1,1}},", "-\t\t{{0,0,1,0},{1,0,1,0},{0,0,1,0}},", "-\t\t{{0,0,1,0},{1,0,1,1},{0,0,1,1}},", "-\t\t{{0,0,1,0},{1,1,0,0},{0,0,1,0}},", "-\t\t{{0,0,1,0},{1,1,0,1},{0,0,1,1}},", "-\t\t{{0,0,1,1},{0,0,0,0},{0,0,1,1}},", "-\t\t{{0,0,1,1},{0,0,0,1},{0,0,1,1}},", "-\t\t{{0,0,1,1},{0,0,1,0},{0,0,1,1}},", "-\t\t{{0,0,1,1},{0,0,1,1},{0,0,1,1}},", "-\t\t{{0,0,1,1},{0,1,0,0},{0,0,1,1}},", "-\t\t{{0,0,1,1},{0,1,1,0},{0,0,1,1}},", "-\t\t{{0,0,1,1},{1,0,0,1},{0,0,1,1}},", "-\t\t{{0,0,1,1},{1,0,1,0},{0,0,1,1}},", "-\t\t{{0,0,1,1},{1,0,1,1},{0,0,1,1}},", "-\t\t{{0,0,1,1},{1,1,0,0},{0,0,1,1}},", "-\t\t{{0,0,1,1},{1,1,0,1},{0,0,1,1}},", "-\t\t{{0,1,0,0},{0,0,0,0},{0,0,1,0}},", "-\t\t{{0,1,0,0},{0,0,0,1},{0,0,1,1}},", "-\t\t{{0,1,0,0},{0,0,1,0},{0,0,1,0}},", "-\t\t{{0,1,0,0},{0,0,1,1},{0,0,1,1}},", "-\t\t{{0,1,0,0},{0,1,0,0},{0,1,0,0}},", "-\t\t{{0,1,0,0},{0,1,1,0},{0,1,1,0}},", "-\t\t{{0,1,0,0},{1,0,0,1},{0,0,0,1}},", "-\t\t{{0,1,0,0},{1,0,1,0},{0,1,1,0}},", "-\t\t{{0,1,0,0},{1,0,1,1},{0,0,1,1}},", "-\t\t{{0,1,0,0},{1,1,0,0},{0,0,1,0}},", "-\t\t{{0,1,0,0},{1,1,0,1},{0,0,1,1}},", "-\t\t{{0,1,1,0},{0,0,0,0},{0,0,1,0}},", "-\t\t{{0,1,1,0},{0,0,0,1},{0,0,1,1}},", "-\t\t{{0,1,1,0},{0,0,1,0},{0,0,1,0}},", "-\t\t{{0,1,1,0},{0,0,1,1},{0,0,1,1}},", "-\t\t{{0,1,1,0},{0,1,0,0},{0,1,1,0}},", "-\t\t{{0,1,1,0},{0,1,1,0},{0,1,1,0}},", "-\t\t{{0,1,1,0},{1,0,0,1},{0,0,1,1}},", "-\t\t{{0,1,1,0},{1,0,1,0},{0,1,1,0}},", "-\t\t{{0,1,1,0},{1,0,1,1},{0,0,1,1}},", "-\t\t{{0,1,1,0},{1,1,0,0},{0,0,1,0}},", "-\t\t{{0,1,1,0},{1,1,0,1},{0,0,1,1}},", "-\t\t{{1,0,0,1},{0,0,0,0},{0,0,0,1}},", "-\t\t{{1,0,0,1},{0,0,0,1},{0,0,0,1}},", "-\t\t{{1,0,0,1},{0,0,1,0},{0,0,1,1}},", "-\t\t{{1,0,0,1},{0,0,1,1},{0,0,1,1}},", "-\t\t{{1,0,0,1},{0,1,0,0},{0,0,0,1}},", "-\t\t{{1,0,0,1},{0,1,1,0},{0,0,1,1}},", "-\t\t{{1,0,0,1},{1,0,0,1},{1,0,0,1}},", "-\t\t{{1,0,0,1},{1,0,1,0},{0,0,1,1}},", "-\t\t{{1,0,0,1},{1,0,1,1},{1,0,1,1}},", "-\t\t{{1,0,0,1},{1,1,0,0},{1,1,0,1}},", "-\t\t{{1,0,0,1},{1,1,0,1},{1,1,0,1}},", "-\t\t{{1,0,1,0},{0,0,0,0},{0,0,1,0}},", "-\t\t{{1,0,1,0},{0,0,0,1},{0,0,1,1}},", "-\t\t{{1,0,1,0},{0,0,1,0},{0,0,1,0}},", "-\t\t{{1,0,1,0},{0,0,1,1},{0,0,1,1}},", "-\t\t{{1,0,1,0},{0,1,0,0},{0,1,1,0}},", "-\t\t{{1,0,1,0},{0,1,1,0},{0,1,1,0}},", "-\t\t{{1,0,1,0},{1,0,0,1},{0,0,1,1}},", "-\t\t{{1,0,1,0},{1,0,1,0},{1,0,1,0}},", "-\t\t{{1,0,1,0},{1,0,1,1},{0,0,1,1}},", "-\t\t{{1,0,1,0},{1,1,0,0},{0,0,1,0}},", "-\t\t{{1,0,1,0},{1,1,0,1},{0,0,1,1}},", "-\t\t{{1,0,1,1},{0,0,0,0},{0,0,0,1}},", "-\t\t{{1,0,1,1},{0,0,0,1},{0,0,0,1}},", "-\t\t{{1,0,1,1},{0,0,1,0},{0,0,1,1}},", "-\t\t{{1,0,1,1},{0,0,1,1},{0,0,1,1}},", "-\t\t{{1,0,1,1},{0,1,0,0},{0,0,1,1}},", "-\t\t{{1,0,1,1},{0,1,1,0},{0,0,1,1}},", "-\t\t{{1,0,1,1},{1,0,0,1},{1,0,1,1}},", "-\t\t{{1,0,1,1},{1,0,1,0},{0,0,1,1}},", "-\t\t{{1,0,1,1},{1,0,1,1},{1,0,1,1}},", "-\t\t{{1,0,1,1},{1,1,0,0},{0,0,0,1}},", "-\t\t{{1,0,1,1},{1,1,0,1},{0,0,0,1}},", "-\t\t{{1,1,0,0},{0,0,0,0},{0,0,0,0}},", "-\t\t{{1,1,0,0},{0,0,0,1},{0,0,0,1}},", "-\t\t{{1,1,0,0},{0,0,1,0},{0,0,1,0}},", "-\t\t{{1,1,0,0},{0,0,1,1},{0,0,1,1}},", "-\t\t{{1,1,0,0},{0,1,0,0},{0,0,1,0}},", "-\t\t{{1,1,0,0},{0,1,1,0},{0,0,1,0}},", "-\t\t{{1,1,0,0},{1,0,0,1},{1,1,0,1}},", "-\t\t{{1,1,0,0},{1,0,1,0},{0,0,1,0}},", "-\t\t{{1,1,0,0},{1,0,1,1},{0,0,0,1}},", "-\t\t{{1,1,0,0},{1,1,0,0},{1,1,0,0}},", "-\t\t{{1,1,0,0},{1,1,0,1},{1,1,0,1}},", "-\t\t{{1,1,0,1},{0,0,0,0},{0,0,0,1}},", "-\t\t{{1,1,0,1},{0,0,0,1},{0,0,0,1}},", "-\t\t{{1,1,0,1},{0,0,1,0},{0,0,1,1}},", "-\t\t{{1,1,0,1},{0,0,1,1},{0,0,1,1}},", "-\t\t{{1,1,0,1},{0,1,0,0},{0,0,1,1}},", "-\t\t{{1,1,0,1},{0,1,1,0},{0,0,1,1}},", "-\t\t{{1,1,0,1},{1,0,0,1},{1,1,0,1}},", "-\t\t{{1,1,0,1},{1,0,1,0},{0,0,1,1}},", "-\t\t{{1,1,0,1},{1,0,1,1},{0,0,0,1}},", "-\t\t{{1,1,0,1},{1,1,0,0},{1,1,0,1}},", "-\t\t{{1,1,0,1},{1,1,0,1},{1,1,0,1}}", "-\t};", "-\tint failures = 0;", "-\tlong start;", "-\tif (combinationTestsloopsNb > 1) {", "-\t\tstart = System.currentTimeMillis();", "-\t}", "-\tString header = \"mergedWith failures: \";", "-\tfor (int l = 0; l < combinationTestsloopsNb ; l++) {", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tUnconditionalFlowInfoTestHarness result;", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness)", "-\t\t\t\t\tUnconditionalFlowInfoTestHarness.", "-\t\t\t\t\t\ttestUnconditionalFlowInfo(testData[i][0]).", "-\t\t\t\t\t\t\tmergedWith(", "-\t\t\t\t\t\t\t\tUnconditionalFlowInfoTestHarness.", "-\t\t\t\t\t\t\t\t\ttestUnconditionalFlowInfo(testData[i][1]))).", "-\t\t\t\t\ttestEquals(UnconditionalFlowInfoTestHarness.", "-\t\t\t\t\t\ttestUnconditionalFlowInfo(testData[i][2]))) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (combinationTestsloopsNb > 1) {", "-\t\tSystem.out.println(\"mergedWith\\t\\t\\t\" + combinationTestsloopsNb + \"\\t\" + ", "-\t\t\t\t(System.currentTimeMillis() - start));", "-\t}", "-\tUnconditionalFlowInfoTestHarness ", "-\t\tzero = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(new long[] {0,0,0,0}),", "-\t\tleft1, right1, left2, right2, ", "-\t\texpected1, expected2, result;", "-\tfor (int i = 0; i < testData.length; i++) {", "-\t\tleft1 = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][0], 64);", "-\t\tleft2 = UnconditionalFlowInfoTestHarness.", "-\t\t\ttestUnconditionalFlowInfo(testData[i][0], 128);", "-\t\tright1 = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][1], 64);", "-\t\tright2 = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][1], 128);", "-\t\texpected1 = UnconditionalFlowInfoTestHarness.", "-\t\t\t\ttestUnconditionalFlowInfo(testData[i][2], 64);", "-\t\texpected2 = UnconditionalFlowInfoTestHarness.", "-\t\t\ttestUnconditionalFlowInfo(testData[i][2], 128);", "-\t\tif (!(result = (UnconditionalFlowInfoTestHarness) ", "-\t\t\t\tleft1.copy().mergedWith(right1)).testEquals(expected1)) {", "-\t\t\tif (failures == 0) {", "-\t\t\t\tSystem.out.println(header);", "-\t\t\t}", "-\t\t\tfailures++;", "-\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\"}, // (64, 64) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t}", "-\t\tif (testData[i][0][0] + testData[i][0][1] + ", "-\t\t\t\ttestData[i][0][2] + testData[i][0][3] == 0) {", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness) ", "-\t\t\t\t\tzero.copy().mergedWith(right1)).testEquals(expected1)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (zero, 64) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness)", "-\t\t\t\t\tright2.copy().mergedWith(right1)).", "-\t\t\t\t\t\ttestEquals(expected1, 64)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (zero 128, 64) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness)", "-\t\t\t\t\tzero.copy().mergedWith(right2)).", "-\t\t\t\t\t\ttestEquals(expected2, 128)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (zero, 128) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness)", "-\t\t\t\t\tright1.copy().mergedWith(right2)).", "-\t\t\t\t\t\ttestEquals(expected2, 128)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (zero 64, 128) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t}", "-\t\tif (testData[i][1][0] + testData[i][1][1] + ", "-\t\t\t\ttestData[i][1][2] + testData[i][1][3] == 0) {", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness) ", "-\t\t\t\t\tleft1.copy().mergedWith(zero)).testEquals(expected1)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (64, zero) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness)", "-\t\t\t\t\tleft1.mergedWith(left2)).", "-\t\t\t\t\t\ttestEquals(expected1, 64)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (64, zero 128) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness) ", "-\t\t\t\t\tleft2.copy().mergedWith(zero)).", "-\t\t\t\t\t\ttestEquals(expected2, 128)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (128, zero) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t\tif (!(result = (UnconditionalFlowInfoTestHarness) ", "-\t\t\t\t\tleft2.mergedWith(left1)).", "-\t\t\t\t\t\ttestEquals(expected2, 128)) {", "-\t\t\t\tif (failures == 0) {", "-\t\t\t\t\tSystem.out.println(header);", "-\t\t\t\t}", "-\t\t\t\tfailures++;", "-\t\t\t\tSystem.out.println(\"\\t\\t{\" + testStringValueOf(testData[i][0]) + ", "-\t\t\t\t\t',' + testStringValueOf(testData[i][1]) +", "-\t\t\t\t\t',' + result.testString() + ", "-\t\t\t\t\t\"}, // (128, zero 64) - instead of: \" + testStringValueOf(testData[i][2]));", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (printTablesAsNames) {", "-\t\tSystem.out.println(\"RECAP TABLE FOR MERGE\");", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tSystem.out.println(testSymbolicValueOf(testData[i][0]) + \" + \" +", "-\t\t\t\ttestSymbolicValueOf(testData[i][1]) + \" -> \" +", "-\t\t\t\ttestSymbolicValueOf(testData[i][2]));", "-\t\t}", "-\t\t", "-\t}", "-\tif (printTablesAsCodes) {", "-\t\tSystem.out.println(\"RECAP TABLE FOR MERGE\");", "-\t\tfor (int i = 0; i < testData.length; i++) {", "-\t\t\tSystem.out.println(testCodedValueOf(testData[i][0]) + \" \" +", "-\t\t\t\ttestCodedValueOf(testData[i][1]) + \" \" +", "-\t\t\t\ttestCodedValueOf(testData[i][2]));", "-\t\t}", "-\t}", "-\tif (printTruthMaps) {", "-\t\tfor (int i = 0; i < 4; i++) {", "-\t\t\tSystem.out.println(\"======================================================\");", "-\t\t\tSystem.out.println(\"Truth map for mergedWith null bit \" + (i + 1));", "-\t\t\tSystem.out.println();", "-\t\t}", "-\t}", "-\tassertTrue(\"nb of failures: \" + failures, failures == 0);", "-}"]}], "num": 14730}
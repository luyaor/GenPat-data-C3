{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e99c40d9e53d23cbbc2fcbccb103567", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3531d148911864a32ffc9b643eab3cd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": " \tpublic static void setOptions(Hashtable newOptions)", "diff": ["-\t\t", "+", "+\t\t// Backward compatibility", "+\t\tString[] propertyNames = preferences.propertyNames();", "+\t\tfor (int i = 0; i < propertyNames.length; i++){", "+\t\t\tString propertyName = propertyNames[i];", "+\t\t\t// bug 45112", "+\t\t\tif (OLD_COMPILER_PB_INVALID_ANNOTATION.equals(propertyName)) {", "+\t\t\t\tpreferences.setToDefault(OLD_COMPILER_PB_INVALID_ANNOTATION);", "+\t\t\t}", "+\t\t\telse if (OLD_COMPILER_PB_MISSING_ANNOTATION.equals(propertyName)) {", "+\t\t\t\tpreferences.setToDefault(OLD_COMPILER_PB_MISSING_ANNOTATION);", "+\t\t\t}", "+\t\t\t// end bug 45112", "+\t\t\t// bug 46854", "+\t\t\telse if (OLD_COMPILER_PB_MISSING_JAVADOC.equals(propertyName)) {", "+\t\t\t\tpreferences.setToDefault(OLD_COMPILER_PB_MISSING_JAVADOC);", "+\t\t\t}", "+\t\t\t// end bug 46854", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62a2d9339d02d81c66f1a0be950aa05d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "9122b48400c1b7bbd5f34248ba27601e8c1f8c81", "commitAfterChange": "b7727722e1a93459ec6844ad6bb94bb1a32aeb2c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void faultInImports()", "signatureAfterChange": " void faultInImports()", "diff": ["+\t\t\t} else if (importBinding instanceof FieldBinding) {", "+\t\t\t\tfor (int j = 0; j < index; j++) {", "+\t\t\t\t\tImportBinding resolved = resolvedImports[j];", "+\t\t\t\t\tif (resolved.isStatic() && resolved.resolvedImport instanceof FieldBinding) {", "+\t\t\t\t\t\tif (CharOperation.equals(compoundName[compoundName.length - 1], resolved.compoundName[resolved.compoundName.length - 1])) {", "+\t\t\t\t\t\t\tproblemReporter().duplicateImport(importReference);", "+\t\t\t\t\t\t\tcontinue nextImport;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19c39d88fe2eb520bc8d45b2f2162cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString)", "signatureAfterChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString)", "diff": ["-protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString) {", "+protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {", "-\t\tboolean gotProblem = false;", "+\t\tArrayList collectedProblems = new ArrayList();", "-\t\t\t\t\tif (EvaluationTest.this.equals(expected, problems[i])) {", "-\t\t\t\t\t\tgotProblem = true;", "-\t\t\t\t\t}", "+\t\t\t\t\t\tcollectedProblems.add(problems[i]);", "-\tassertTrue(\"Expected warning\", requestor.gotProblem);", "+\tif (expected.length == requestor.collectedProblems.size()) {", "+\t\tfor (int i = 0; i < expected.length; i++) {", "+\t\t\tassertTrue(\"Problem mismatch\"+ requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));", "+\t\t}", "+\t} else {", "+\t\tassertTrue(\"Wrong problem count\", false);", "+\t}"]}], "num": 71443}
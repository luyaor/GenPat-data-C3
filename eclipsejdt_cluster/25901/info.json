{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3423ec603258d75f6248cacf9881d64", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298e2ec8e08b9cde1f699b565e936cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "0d164c5fd27f905997905e2364acd7d413efe08e", "commitAfterChange": "cb53eff5db7d4f76eb24c91a2abecee1441f0bbc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "signatureAfterChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "diff": ["-\t\t\t\t\t\t\tif(local.declaration.initialization.sourceEnd > 0) {", "-\t\t\t\t\t\t\t\t\tif (this.assistNode.sourceEnd <= local.declaration.initialization.sourceEnd", "-\t\t\t\t\t\t\t\t\t\t\t&& this.assistNode.sourceStart >= local.declaration.initialization.sourceStart) {", "-\t\t\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t/*(use this if-else block if it is found that local.declaration.initialization != null is not sufficient to ", "+\t\t\t\t\t\t\t  guarantee that proposal is being asked inside a local variable declaration's initializer)", "+\t\t\t\t\t\t\t if(local.declaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\t\t\t\tif (this.assistNode.sourceEnd <= local.declaration.initialization.sourceEnd", "+\t\t\t\t\t\t\t\t\t\t&& this.assistNode.sourceStart >= local.declaration.initialization.sourceStart) {", "+\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}*/", "+\t\t\t\t\t\t\tcontinue next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c280641704669f937c9a90fc6a24ee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "commitAfterChange": "1aa4cd735bf7026e52f4628e91c000e2311012b1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "signatureAfterChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "diff": ["-", "+\t\t\t\t\t\t// If the local variable declaration's initialization statement itself has the completion,", "+\t\t\t\t\t\t// then don't propose the local variable", "+\t\t\t\t\t\tif (local.declaration.initialization != null) {", "+\t\t\t\t\t\t\tif(local.declaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\t\t\t\t\tif (this.assistNode.sourceEnd <= local.declaration.initialization.sourceEnd", "+\t\t\t\t\t\t\t\t\t\t\t&& this.assistNode.sourceStart >= local.declaration.initialization.sourceStart) {", "+\t\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(", "+\t\t\t\t\t\t\t\t\t\tthis.assistNode,", "+\t\t\t\t\t\t\t\t\t\tlocal.declaration.initialization);", "+\t\t\t\t\t\t\t\tif (detector.containsCompletionNode()) {", "+\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}], "num": 25901}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c43d18d2b1542b4182f6f2e11f1e9759", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629dc7f39f3f8cd06d0459964968e35d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void test047()", "signatureAfterChange": " public void test047()", "diff": ["-\t\t\t\t\t\"    I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"      System.out.println(args); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "-\t\t\t\t\t\"      System.out.println(var); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\"The variable var must be must be final or effectively final if used in a lambda expression\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(var); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\"\t                   ^^^\\n\" + ", "-\t\t\t\t\"The variable var must be must be final or effectively final if used in an inner class\\n\" + ", "+\t\t\t\t\"Variable var is required to be final or effectively final\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1369f650d5c2fd4d3880d81f0b67cbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6eb00f6ee457a8f73a0eac0bfee00e20c1d881ff", "commitAfterChange": "449de2c1528005d5b9ace39ea1e9eeb2aed5b875", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic void test149()", "signatureAfterChange": " \tpublic void test149()", "diff": ["-\t// TODO (kent) name clash: toArray(java.lang.Object[]) in X and <T>toArray(T[]) in java.util.Collection<java.lang.Object> have the same erasure, yet neither overrides the other", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public abstract class X implements java.util.Collection {\\n\" + ", "+\t\t\t\t\"\tpublic Object[] toArray(Object[] a) {\\n\" + ", "+\t\t\t\t\"\t\treturn a;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t   System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"SUCCESS\");", "-\t\t\t\t\"import java.util.Collection;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class X implements Collection<Object> {\\n\" + ", "-\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public abstract class X implements java.util.Collection<Object> {\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+// TODO (kent) name clash: toArray(java.lang.Object[]) in X and <T>toArray(T[]) in java.util.Collection<java.lang.Object> have the same erasure, yet neither overrides the other"]}], "num": 43822}
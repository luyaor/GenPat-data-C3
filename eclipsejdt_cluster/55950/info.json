{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f9cf7211afd4a1adc8cff4fdae80201", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ac7e8b2820d5fc2c5280c56926ddb5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "0036659dab6ff2761aaefd922927c04f937d0576", "commitAfterChange": "f5b5b884f036b9e618a06dde165cd3edcb93e386", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-\t\t// check for tag occurrence", "-\t\tnextTag : for (int itag = 0; itag < this.taskTags.length; itag++) {", "-\t\t\ttag = this.taskTags[itag];", "-\t\t\tint tagLength = tag.length;", "-\t\t\tif (tagLength == 0) continue nextTag;", "-", "-\t\t\t// ensure tag is not leaded with letter if tag starts with a letter", "-\t\t\tif (Character.isJavaIdentifierStart(tag[0])) {", "-\t\t\t\tif (Character.isJavaIdentifierPart(previous)) {", "-\t\t\t\t\tcontinue nextTag;", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tfor (int t = 0; t < tagLength; t++) {", "-\t\t\t\tchar sc, tc;", "-\t\t\t\tif ((sc = src[i + t]) != (tc = tag[t])) { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// case sensitive check", "-\t\t\t\t\tif (this.isTaskCaseSensitive || (Character.toLowerCase(sc) != Character.toLowerCase(tc))) { \t// case insensitive check", "+\t\t// check for tag occurrence only if not ambiguous with javadoc tag", "+\t\tif (previous != '@') {", "+\t\t\tnextTag : for (int itag = 0; itag < this.taskTags.length; itag++) {", "+\t\t\t\ttag = this.taskTags[itag];", "+\t\t\t\tint tagLength = tag.length;", "+\t\t\t\tif (tagLength == 0) continue nextTag;", "+\t", "+\t\t\t\t// ensure tag is not leaded with letter if tag starts with a letter", "+\t\t\t\tif (Character.isJavaIdentifierStart(tag[0])) {", "+\t\t\t\t\tif (Character.isJavaIdentifierPart(previous)) {", "+\t", "+\t\t\t\tfor (int t = 0; t < tagLength; t++) {", "+\t\t\t\t\tchar sc, tc;", "+\t\t\t\t\tif ((sc = src[i + t]) != (tc = tag[t])) { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// case sensitive check", "+\t\t\t\t\t\tif (this.isTaskCaseSensitive || (Character.toLowerCase(sc) != Character.toLowerCase(tc))) { \t// case insensitive check", "+\t\t\t\t\t\t\tcontinue nextTag;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// ensure tag is not followed with letter if tag finishes with a letter", "+\t\t\t\tif (i+tagLength < commentEnd && Character.isJavaIdentifierPart(src[i+tagLength-1])) {", "+\t\t\t\t\tif (Character.isJavaIdentifierPart(src[i + tagLength]))", "+\t\t\t\t\t\tcontinue nextTag;", "+\t\t\t\t}", "+\t\t\t\tif (this.foundTaskTags == null) {", "+\t\t\t\t\tthis.foundTaskTags = new char[5][];", "+\t\t\t\t\tthis.foundTaskMessages = new char[5][];", "+\t\t\t\t\tthis.foundTaskPriorities = new char[5][];", "+\t\t\t\t\tthis.foundTaskPositions = new int[5][];", "+\t\t\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tpriority = this.taskPriorities != null && itag < this.taskPriorities.length", "+\t\t\t\t\t\t\t? this.taskPriorities[itag]", "+\t\t\t\t\t\t\t: null;", "+\t\t\t\t", "+\t\t\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "+\t\t\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "+\t\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[] { i, i + tagLength - 1 };", "+\t\t\t\tthis.foundTaskMessages[this.foundTaskCount] = CharOperation.NO_CHAR;", "+\t\t\t\tthis.foundTaskCount++;", "+\t\t\t\ti += tagLength - 1; // will be incremented when looping", "+\t\t\t\tbreak nextTag;", "-\t\t\t// ensure tag is not followed with letter if tag finishes with a letter", "-\t\t\tif (i+tagLength < commentEnd && Character.isJavaIdentifierPart(src[i+tagLength-1])) {", "-\t\t\t\tif (Character.isJavaIdentifierPart(src[i + tagLength]))", "-\t\t\t\t\tcontinue nextTag;", "-\t\t\t}", "-\t\t\tif (this.foundTaskTags == null) {", "-\t\t\t\tthis.foundTaskTags = new char[5][];", "-\t\t\t\tthis.foundTaskMessages = new char[5][];", "-\t\t\t\tthis.foundTaskPriorities = new char[5][];", "-\t\t\t\tthis.foundTaskPositions = new int[5][];", "-\t\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "-\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t}", "-\t\t\t", "-\t\t\tpriority = this.taskPriorities != null && itag < this.taskPriorities.length", "-\t\t\t\t\t\t? this.taskPriorities[itag]", "-\t\t\t\t\t\t: null;", "-\t\t\t", "-\t\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "-\t\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "-\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[] { i, i + tagLength - 1 };", "-\t\t\tthis.foundTaskMessages[this.foundTaskCount] = CharOperation.NO_CHAR;", "-\t\t\tthis.foundTaskCount++;", "-\t\t\ti += tagLength - 1; // will be incremented when looping", "-\t\t\tbreak nextTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97f23fa39753c34ccf515c185fa4d9a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "0036659dab6ff2761aaefd922927c04f937d0576", "commitAfterChange": "f5b5b884f036b9e618a06dde165cd3edcb93e386", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-\t\t// check for tag occurrence", "-\t\tnextTag : for (int itag = 0; itag < this.taskTags.length; itag++) {", "-\t\t\ttag = this.taskTags[itag];", "-\t\t\tint tagLength = tag.length;", "-\t\t\tif (tagLength == 0) continue nextTag;", "-", "-\t\t\t// ensure tag is not leaded with letter if tag starts with a letter", "-\t\t\tif (Character.isJavaIdentifierStart(tag[0])) {", "-\t\t\t\tif (Character.isJavaIdentifierPart(previous)) {", "-\t\t\t\t\tcontinue nextTag;", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tfor (int t = 0; t < tagLength; t++) {", "-\t\t\t\tchar sc, tc;", "-\t\t\t\tif ((sc = src[i + t]) != (tc = tag[t])) { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// case sensitive check", "-\t\t\t\t\tif (this.isTaskCaseSensitive || (Character.toLowerCase(sc) != Character.toLowerCase(tc))) { \t// case insensitive check", "+\t\t// check for tag occurrence only if not ambiguous with javadoc tag", "+\t\tif (previous != '@') {", "+\t\t\tnextTag : for (int itag = 0; itag < this.taskTags.length; itag++) {", "+\t\t\t\ttag = this.taskTags[itag];", "+\t\t\t\tint tagLength = tag.length;", "+\t\t\t\tif (tagLength == 0) continue nextTag;", "+\t", "+\t\t\t\t// ensure tag is not leaded with letter if tag starts with a letter", "+\t\t\t\tif (Character.isJavaIdentifierStart(tag[0])) {", "+\t\t\t\t\tif (Character.isJavaIdentifierPart(previous)) {", "+\t", "+\t\t\t\tfor (int t = 0; t < tagLength; t++) {", "+\t\t\t\t\tchar sc, tc;", "+\t\t\t\t\tif ((sc = src[i + t]) != (tc = tag[t])) { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// case sensitive check", "+\t\t\t\t\t\tif (this.isTaskCaseSensitive || (Character.toLowerCase(sc) != Character.toLowerCase(tc))) { \t// case insensitive check", "+\t\t\t\t\t\t\tcontinue nextTag;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// ensure tag is not followed with letter if tag finishes with a letter", "+\t\t\t\tif (i+tagLength < commentEnd && Character.isJavaIdentifierPart(src[i+tagLength-1])) {", "+\t\t\t\t\tif (Character.isJavaIdentifierPart(src[i + tagLength]))", "+\t\t\t\t\t\tcontinue nextTag;", "+\t\t\t\t}", "+\t\t\t\tif (this.foundTaskTags == null) {", "+\t\t\t\t\tthis.foundTaskTags = new char[5][];", "+\t\t\t\t\tthis.foundTaskMessages = new char[5][];", "+\t\t\t\t\tthis.foundTaskPriorities = new char[5][];", "+\t\t\t\t\tthis.foundTaskPositions = new int[5][];", "+\t\t\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tpriority = this.taskPriorities != null && itag < this.taskPriorities.length", "+\t\t\t\t\t\t\t? this.taskPriorities[itag]", "+\t\t\t\t\t\t\t: null;", "+\t\t\t\t", "+\t\t\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "+\t\t\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "+\t\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[] { i, i + tagLength - 1 };", "+\t\t\t\tthis.foundTaskMessages[this.foundTaskCount] = CharOperation.NO_CHAR;", "+\t\t\t\tthis.foundTaskCount++;", "+\t\t\t\ti += tagLength - 1; // will be incremented when looping", "+\t\t\t\tbreak nextTag;", "-\t\t\t// ensure tag is not followed with letter if tag finishes with a letter", "-\t\t\tif (i+tagLength < commentEnd && Character.isJavaIdentifierPart(src[i+tagLength-1])) {", "-\t\t\t\tif (Character.isJavaIdentifierPart(src[i + tagLength]))", "-\t\t\t\t\tcontinue nextTag;", "-\t\t\t}", "-\t\t\tif (this.foundTaskTags == null) {", "-\t\t\t\tthis.foundTaskTags = new char[5][];", "-\t\t\t\tthis.foundTaskMessages = new char[5][];", "-\t\t\t\tthis.foundTaskPriorities = new char[5][];", "-\t\t\t\tthis.foundTaskPositions = new int[5][];", "-\t\t\t} else if (this.foundTaskCount == this.foundTaskTags.length) {", "-\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\t}", "-\t\t\t", "-\t\t\tpriority = this.taskPriorities != null && itag < this.taskPriorities.length", "-\t\t\t\t\t\t? this.taskPriorities[itag]", "-\t\t\t\t\t\t: null;", "-\t\t\t", "-\t\t\tthis.foundTaskTags[this.foundTaskCount] = tag;", "-\t\t\tthis.foundTaskPriorities[this.foundTaskCount] = priority;", "-\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[] { i, i + tagLength - 1 };", "-\t\t\tthis.foundTaskMessages[this.foundTaskCount] = CharOperation.NO_CHAR;", "-\t\t\tthis.foundTaskCount++;", "-\t\t\ti += tagLength - 1; // will be incremented when looping", "-\t\t\tbreak nextTag;"]}], "num": 55950}
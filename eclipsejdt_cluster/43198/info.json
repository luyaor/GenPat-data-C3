{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cef969bf29cff8158641dfec3c953070", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1011fb8bc2737e5bd0dd8aca69e87c4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConditionalExpression.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic Expression getElseExpression()", "signatureAfterChange": "  \tpublic Expression getElseExpression()", "diff": ["-\t\tif (elseExpression == null) {", "-\t\t\t// lazy initialize - use setter to ensure parent link set too", "-\t\t\tlong count = getAST().modificationCount();", "-\t\t\tsetElseExpression(new SimpleName(getAST()));", "-\t\t\tgetAST().setModificationCount(count);", "+\t\tif (this.elseExpression == null) {", "+\t\t\tpreLazyInit();", "+\t\t\tthis.elseExpression = new SimpleName(this.ast);", "+\t\t\tpostLazyInit(this.elseExpression, ELSE_EXPRESSION_PROPERTY);", "-\t\treturn elseExpression;", "+\t\treturn this.elseExpression;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8233c1c304193c65623f7767d9d2805", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConditionalExpression.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic Expression getExpression()", "signatureAfterChange": "  \tpublic Expression getExpression()", "diff": ["-\t\tif (conditionExpression == null) {", "-\t\t\t// lazy initialize - use setter to ensure parent link set too", "-\t\t\tlong count = getAST().modificationCount();", "-\t\t\tsetExpression(new SimpleName(getAST()));", "-\t\t\tgetAST().setModificationCount(count);", "+\t\tif (this.conditionExpression == null) {", "+\t\t\tpreLazyInit();", "+\t\t\tthis.conditionExpression = new SimpleName(this.ast);", "+\t\t\tpostLazyInit(this.conditionExpression, EXPRESSION_PROPERTY);", "-\t\treturn conditionExpression;", "+\t\treturn this.conditionExpression;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7417f7a9ef7eb9d72a6be570be10051", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConditionalExpression.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic Expression getThenExpression()", "signatureAfterChange": "  \tpublic Expression getThenExpression()", "diff": ["-\t\tif (thenExpression == null) {", "-\t\t\t// lazy initialize - use setter to ensure parent link set too", "-\t\t\tlong count = getAST().modificationCount();", "-\t\t\tsetThenExpression(new SimpleName(getAST()));", "-\t\t\tgetAST().setModificationCount(count);", "+\t\tif (this.thenExpression == null) {", "+\t\t\tpreLazyInit();", "+\t\t\tthis.thenExpression = new SimpleName(this.ast);", "+\t\t\tpostLazyInit(this.thenExpression, THEN_EXPRESSION_PROPERTY);", "-\t\treturn thenExpression;", "+\t\treturn this.thenExpression;"]}], "num": 43198}
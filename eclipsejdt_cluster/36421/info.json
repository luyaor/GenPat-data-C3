{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b66b628c7850c2d094f1318f1eb40c81", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef3cadc3ffd2e6d8fa02987d95186ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "74ceca813d8e9be557353622cfb1779e5fa562ad", "commitAfterChange": "2d7d544af40c78aee4e80de194acd385e8eab51a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-", "-\t// AND", "-\t// AND", "+", "-\t// AND", "+", "+", "+\t//\t\tclass A<T extends Number> { void m(T t) {} }", "+\t//\t\tclass B<S extends Integer> extends A<S> { void m(S t) {}}", "+\t//\t\tclass D extends B<Integer> { void m(Number t) {}    void m(Integer t) {} }", "+", "+\t//\t\tinheritedMethods does not include I.test since A has a valid implementation", "+\t//\t\tinterface I<E extends Comparable<E>> { void test(E element); }", "+\t//\t\tclass A implements I<Integer> { public void test(Integer i) {} }", "+\t//\t\tclass B extends A { public void test(Comparable i) {} }", "-\t\tReferenceBinding superType = this.type.superclass;", "+\t\tReferenceBinding superType = inheritedMethod.declaringClass;", "+\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\tif (++lastPosition == interfacesToVisit.length)", "+\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t}", "+\t\tsuperType = superType.superclass(); // now start with its superclass", "-\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\treturn;", "+\t\t\t\tif (currentMethod.parameters.length == methods[m].parameters.length)", "+\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "+\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tif (currentMethod.parameters.length == methods[m].parameters.length)", "+\t\t\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "+\t\t\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e755dd76a68d0e89236b98de44c257", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "8444b8c64dbb6b525eac8faf90c22961ce196392", "commitAfterChange": "fa4cf904b1d5690e02fc0246dbc8bc14a58e5d04", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 290, "signatureBeforeChange": "  public void multianewarray(TypeBinding typeBinding, int dimensions)", "signatureAfterChange": "  public void multianewarray( \t\tTypeReference typeReference, \t\tTypeBinding typeBinding, \t\tint dimensions, \t\tint declaredDimensions, \t\tAnnotation [][] annotationsOnDimensions)", "diff": ["-public void multianewarray(TypeBinding typeBinding, int dimensions) {", "-\tthis.multianewarray(null, typeBinding, dimensions, null);", "-}", "+\t\tint declaredDimensions,"]}], "num": 36421}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55497a9919519d99a9a103eca9b918f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fb0370383671d91da0e41ba75dea5d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void locateMatches(String[] filePaths, IWorkspace workspace, org.eclipse.jdt.core.ICompilationUnit[] copies) throws JavaModelException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException", "diff": ["-public void locateMatches(String[] filePaths, IWorkspace workspace, org.eclipse.jdt.core.ICompilationUnit[] copies) throws JavaModelException {", "+public void locateMatches(SearchDocument[] searchDocuments) throws JavaModelException {", "-\t\tSystem.out.println(\"Locating matches in files [\"); //$NON-NLS-1$", "-\t\tfor (int i = 0, length = filePaths.length; i < length; i++)", "-\t\t\tSystem.out.println(\"\\t\" + filePaths[i]); //$NON-NLS-1$", "+\t\tSystem.out.println(\"Locating matches in documents [\"); //$NON-NLS-1$", "+\t\tfor (int i = 0, length = searchDocuments.length; i < length; i++)", "+\t\t\tSystem.out.println(\"\\t\" + searchDocuments[i]); //$NON-NLS-1$", "-\t\tif (copies != null) {", "-\t\t\t System.out.println(\"and working copies [\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++)", "-\t\t\t\tSystem.out.println(\"\\t\" + ((JavaElement) copies[i]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t}", "-\t\t// substitute compilation units with working copies", "-\t\tHashMap wcPaths = new HashMap(); // a map from path to working copies", "-\t\tif ((this.workingCopies = copies) != null) {", "-\t\t\tint wcLength = this.workingCopies.length;", "-\t\t\tif (wcLength > 0) {", "-\t\t\t\tString[] newPaths = new String[wcLength];", "-\t\t\t\tfor (int i = 0; i < wcLength; i++) {", "-\t\t\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = this.workingCopies[i];", "-\t\t\t\t\tString path = workingCopy.getPath().toString();", "-\t\t\t\t\twcPaths.put(path, workingCopy);", "-\t\t\t\t\tnewPaths[i] = path;", "-\t\t\t\t}", "-\t\t\t\tint filePathsLength = filePaths.length;", "-\t\t\t\tSystem.arraycopy(filePaths, 0, filePaths = new String[filePathsLength + wcLength], 0, filePathsLength);", "-\t\t\t\tSystem.arraycopy(newPaths, 0, filePaths, filePathsLength, wcLength);", "-\t\t\t}", "-\t\t}", "-", "-\t\t\tthis.progressMonitor.beginTask(\"\", filePaths.length * (this.pattern.mustResolve ? 10 : 5)); //$NON-NLS-1$", "+\t\t\tthis.progressMonitor.beginTask(\"\", searchDocuments.length * (this.pattern.mustResolve ? 10 : 5)); //$NON-NLS-1$", "-\t\tUtil.sort(filePaths); ", "-\t\tfor (int i = 0, l = filePaths.length; i < l; i++) {", "+\t\tUtil.sort(searchDocuments, new Util.Comparer() {", "+\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\treturn ((SearchDocument)a).getPath().compareTo(((SearchDocument)b).getPath());", "+\t\t\t}", "+\t\t}); ", "+\t\tfor (int i = 0, l = searchDocuments.length; i < l; i++) {", "-\t\t\tString pathString = filePaths[i];", "-\t\t\tif (i > 0 && pathString.equals(filePaths[i - 1])) continue;", "+\t\t\tSearchDocument searchDocument = searchDocuments[i];", "+\t\t\tString pathString = searchDocument.getPath();", "+\t\t\tif (i > 0 && pathString.equals(searchDocuments[i - 1].getPath())) continue;", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = (org.eclipse.jdt.core.ICompilationUnit) wcPaths.get(pathString);", "-\t\t\tif (workingCopy != null) {", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit workingCopy = null;", "+\t\t\tif (searchDocument instanceof JavaSearchParticipant.WorkingCopyDocument) {", "+\t\t\t\tworkingCopy = ((JavaSearchParticipant.WorkingCopyDocument)searchDocument).workingCopy;", "-\t\t\tmatchSet.add(new PossibleMatch(this, resource, openable));", "+\t\t\tmatchSet.add(new PossibleMatch(this, resource, openable, searchDocument));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff4cf609a8783c246d047b7a2cd2385", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "2faa7dcefcba49716eb602b07f666c741c012441", "commitAfterChange": "0c050a9e41e2d9f51004e54259260763cb09b54a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "diff": ["-\t\t// sort file paths projects\r", "-\t\tUtil.sort(filePaths); \r", "-\t\t\r", "-\t\tHashSet wcPaths = new HashSet(); // a set of Strings\r", "-\t\tif (workingCopies != null) {\r", "-\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {\r", "+\t\t\r", "+\t\t// substitute compilation units with working copies\r", "+\t\tHashMap wcPaths = new HashMap(); // a map from path to working copies\r", "+\t\tint wcLength;\r", "+\t\tif (workingCopies != null && (wcLength = workingCopies.length) > 0) {\r", "+\t\t\tString[] newPaths = new String[wcLength];\r", "+\t\t\tfor (int i = 0; i < wcLength; i++) {\r", "-\t\t\t\t\twcPaths.add(res.getFullPath().toString());\r", "+\t\t\t\t\tString path = res.getFullPath().toString();\r", "+\t\t\t\t\twcPaths.put(path, workingCopy);\r", "+\t\t\t\t\tnewPaths[i] = path;\r", "+\t\t\tint filePathsLength = filePaths.length;\r", "+\t\t\tSystem.arraycopy(filePaths, 0, filePaths = new String[filePathsLength+wcLength], 0, filePathsLength);\r", "+\t\t\tSystem.arraycopy(newPaths, 0, filePaths, filePathsLength, wcLength);\r", "+\t\t\r", "+\t\t// sort file paths projects\r", "+\t\tUtil.sort(filePaths); \r", "-\t\tthis.initializeMatchingOpenables(workingCopies);\r", "+\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "-\t\t\t// skip paths that are hidden by a working copy\r", "-\t\t\tif (wcPaths.contains(pathString)) continue;\r", "+\t\t\t// skip duplicate paths\r", "+\t\t\tif (i > 0 && pathString.equals(filePaths[i-1])) continue;\r", "-\t\t\tOpenable openable = this.handleFactory.createOpenable(pathString);\r", "-\t\t\tif (openable == null)\r", "-\t\t\t\tcontinue; // match is outside classpath\r", "+\t\t\tOpenable openable;\r", "+\t\t\tIWorkingCopy workingCopy = (IWorkingCopy)wcPaths.get(pathString);\r", "+\t\t\tif (workingCopy != null) {\r", "+\t\t\t\topenable = (Openable)workingCopy;\r", "+\t\t\t} else {\r", "+\t\t\t\topenable = this.handleFactory.createOpenable(pathString);\r", "+\t\t\t\tif (openable == null)\r", "+\t\t\t\t\tcontinue; // match is outside classpath\r", "+\t\t\t}\r", "-\t\t\t\tresource = openable.getUnderlyingResource();\r", "+\t\t\t\tif (workingCopy != null) {\r", "+\t\t\t\t\tresource = workingCopy.getOriginalElement().getUnderlyingResource();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tresource = openable.getUnderlyingResource();\r", "+\t\t\t\t}\r", "-\t\t\t\t\t\tthis.initializeMatchingOpenables(workingCopies);\r", "+\t\t\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "-\t\t\tthis.initializeMatchingOpenables(workingCopies);\r", "-\t\t}\r", "+\t\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "+\t\t} \r"]}], "num": 71147}
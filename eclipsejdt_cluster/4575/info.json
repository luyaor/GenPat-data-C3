{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3d7c1118f92becbb40e280f6a79ad7a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2d4590cb14bb3ff29639a855a6e8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "d5153db1b78be1240488c00ed97be6f8d4f85142", "commitAfterChange": "703ea70d31fea8142c2f0c6536ccedc3e7344670", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 261, "signatureBeforeChange": " public void testBug304081b() throws Exception", "signatureAfterChange": " public void testBug305037() throws Exception", "diff": ["- */", "-public void testBug304081b() throws Exception {", "-\tFile libDir = null;", "-\ttry {", "-", "-\t\tIJavaProject proj = this.createJavaProject(\"P\", new String[] {}, \"bin\");", "-\t\tIClasspathEntry[] classpath = new IClasspathEntry[1];", "-\t\tlibDir = new File(proj.getResource().getLocation().toPortableString());", "-\t\tFile libJar = new File(libDir, \"container.jar\");", "-\t\t", "-\t\taddLibrary(proj, \"container.jar\", null, new String[0], ", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"META-INF/MANIFEST.MF\",", "-\t\t\t\t\t\"Manifest-Version: 1.0\\n\" +", "-\t\t\t\t\t\"Class-Path: lib1.jar\\n\",", "-\t\t\t\t},", "-\t\t\t\tJavaCore.VERSION_1_4);", "-\t\tcreateFile(\"/P/lib1.jar\", \"\");", "-\t\t", "-\t\tClasspathContainerInitializer initializer= JavaCore.getClasspathContainerInitializer(JavaCore.USER_LIBRARY_CONTAINER_ID);", "-\t\tString libraryName = \"TestUserLibrary\";", "-\t\tIPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID);", "-\t\tUserLibraryClasspathContainer containerSuggestion = new UserLibraryClasspathContainer(libraryName);", "-\t\tinitializer.requestClasspathContainerUpdate(containerPath.append(libraryName), null, containerSuggestion);", "-", "-\t\tIEclipsePreferences preferences = new InstanceScope().getNode(JavaCore.PLUGIN_ID);", "-\t\tString propertyName = JavaModelManager.CP_USERLIBRARY_PREFERENCES_PREFIX+\"TestUserLibrary\";", "-\t\tStringBuffer propertyValue = new StringBuffer(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<userlibrary systemlibrary=\\\"false\\\" version=\\\"1\\\">\\r\\n<archive\");", "-\t\tpropertyValue.append(\" path=\\\"\" + libJar.getAbsolutePath());", "-\t\tpropertyValue.append(\"\\\"/>\\r\\n</userlibrary>\\r\\n\");", "-\t\tpreferences.put(propertyName, propertyValue.toString());", "-\t\tpreferences.flush();\t", "-\t\t", "-\t\tclasspath[0] = JavaCore.newContainerEntry(containerSuggestion.getPath());", "-\t\t", "-\t\tproj.setRawClasspath(classpath, null);", "-\t\twaitForAutoBuild();", "-\t\tIProject project = getWorkspaceRoot().getProject(\"P\");", "-\t\tIResource resource = project.getFile(\"container.jar\");", "-\t\tassertTrue(proj.isOnClasspath(resource));", "-\t\tIJavaElement element = proj.getPackageFragmentRoot(resource);", "-\t\tassertTrue(proj.isOnClasspath(element));", "-", "-\t\tresource = project.getFile(\"lib1.jar\");", "-\t\tassertTrue(proj.isOnClasspath(resource));", "-\t\telement = proj.getPackageFragmentRoot(resource);", "-\t\tassertTrue(proj.isOnClasspath(element));", "-\t\t", "-\t} finally {", "-\t\tthis.deleteProject(\"P\");", "-\t}", "-}", "+ */", "+public void testBug305037() throws Exception {", "+\tFile libDir = null;", "+\ttry {", "+", "+\t\tIJavaProject proj = this.createJavaProject(\"P\", new String[] {}, \"bin\");", "+\t\tIPath libPath = proj.getResource().getLocation();", "+\t\tJavaCore.setClasspathVariable(\"MyVar\", libPath, null);", "+\t\tlibDir = new File(libPath.toPortableString());", "+\t\tIClasspathEntry[] classpath = new IClasspathEntry[1];", "+\t\tFile libJar = new File(libDir, \"variable.jar\");", "+\t\tlibJar.createNewFile();", "+\t\t", "+\t\taddLibrary(proj, \"variable.jar\", null, new String[0], ", "+\t\t\t\tnew String[] {", "+\t\t\t\t\"META-INF/MANIFEST.MF\",", "+\t\t\t\t\"Manifest-Version: 1.0\\n\" +", "+\t\t\t\t\"Class-Path: lib1.jar\\n\",", "+\t\t\t},", "+\t\t\tJavaCore.VERSION_1_4); ", "+", "+\t\tcreateFile(\"/P/lib1.jar\", \"\");", "+\t\t", "+\t\tclasspath = proj.getResolvedClasspath(true);", "+\t\tassertClasspathEquals(classpath, ", "+\t\t\t\t\"/P/lib1.jar[CPE_LIBRARY][K_BINARY][isExported:true]\\n\" + ", "+\t\t\t\t\"/P/variable.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t\t", "+\t\tIClasspathEntry[] chains = JavaCore.getReferencedClasspathEntries(classpath[1], null);", "+\t\tassertClasspathEquals(chains, \"/P/lib1.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t\t((ClasspathEntry)chains[0]).sourceAttachmentPath = new Path(\"/P/efg.zip\");", "+\t\t((ClasspathEntry)chains[0]).sourceAttachmentRootPath = new Path(\"/src2\");", "+", "+\t\tIClasspathAttribute javadocLoc = JavaCore.newClasspathAttribute(\"javadoc_location\", \"/P/efg.zip\");", "+\t\t((ClasspathEntry)chains[0]).extraAttributes = new IClasspathAttribute[]{javadocLoc};", "+\t\t", "+\t\tproj.setRawClasspath(proj.getRawClasspath(), chains, proj.getOutputLocation(), null);", "+\t\tclasspath = proj.getResolvedClasspath(true);", "+\t\tassertClasspathEquals(classpath, ", "+\t\t\t\t\"/P/lib1.jar[CPE_LIBRARY][K_BINARY][sourcePath:/P/efg.zip][rootPath:/src2][isExported:true][attributes:javadoc_location=/P/efg.zip]\\n\" + ", "+\t\t\t\t\"/P/variable.jar[CPE_LIBRARY][K_BINARY][isExported:true]\");", "+\t} finally {", "+\t\tthis.deleteProject(\"P\");", "+\t\tJavaCore.removeClasspathVariable(\"MyVar\", null);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b29e2e8b39342ebb1943bcf1f8a6a0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SearchTests.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testBug195228() throws CoreException", "signatureAfterChange": " public void testSearchPatternCreation37()", "diff": ["+ */", "+public void testSearchPatternCreation37() {", "+\tint allFlags = 0x0F1FFFF0;", "+\tSearchPattern searchPattern = createPattern(\"*\", TYPE, allFlags, true);", "+\tassertPattern(", "+\t\t\"TypeReferencePattern: qualification<*>, type<*>, pattern match, case sensitive, generic full match, \" +", "+\t\t\"fine grain: FIELD_DECLARATION_TYPE_REFERENCE | \" +", "+\t\t\"LOCAL_VARIABLE_DECLARATION_TYPE_REFERENCE | \" +", "+\t\t\"PARAMETER_DECLARATION_TYPE_REFERENCE | \" +", "+\t\t\"SUPERTYPE_TYPE_REFERENCE | \" +", "+\t\t\"SUPERINTERFACE_TYPE_REFERENCE | \" +", "+\t\t\"THROWS_CLAUSE_TYPE_REFERENCE | \" +", "+\t\t\"CAST_TYPE_REFERENCE | \" +", "+\t\t\"CATCH_TYPE_REFERENCE | \" +", "+\t\t\"ALLOCATION_EXPRESSION_TYPE_REFERENCE | \" +", "+\t\t\"RETURN_TYPE_REFERENCE | \" +", "+\t\t\"IMPORT_DECLARATION_TYPE_REFERENCE | \" +", "+\t\t\"ANNOTATION_TYPE_REFERENCE | \" +", "+\t\t\"TYPE_ARGUMENT_TYPE_REFERENCE | \" +", "+\t\t\"TYPE_VARIABLE_BOUND_TYPE_REFERENCE | \" +", "+\t\t\"WILDCARD_BOUND_TYPE_REFERENCE | \" +", "+\t\t\"SUPER_REFERENCE | \" +", "+\t\t\"QUALIFIED_REFERENCE | \" +", "+\t\t\"THIS_REFERENCE | \" +", "+\t\t\"IMPLICIT_THIS_REFERENCE\",", "- */", "-public void testBug195228() throws CoreException {", "-\ttry {", "-\t\t// Create projects and files", "-\t\tfinal IJavaProject project = createJavaProject(\"P1\", new String[] {\"src\"}, \"bin\");", "-\t\tcreateFolder(\"/P1/src/pack1/pack2\");", "-\t\tcreateFile(", "-\t\t\t\"/P1/src/pack1/pack2/X.java\",", "-\t\t\t\"package pack1.pack2;\\n\" +", "-\t\t\t\"public class X {}\"", "-\t\t);", "-\t\tcreateFile(", "-\t\t\t\"/P1/src/pack1/Y.java\",", "-\t\t\t\"package pack1;\\n\" +", "-\t\t\t\"public class Y {}\"", "-\t\t);", "-\t\tcreateFile(", "-\t\t\t\"/P1/test.properties\",", "-\t\t\t\"bug=195228\"", "-\t\t);", "-\t\t// Create additional projects to force the rehash of the workspace scope while creating it", "-\t\tcreateJavaProject(\"P2\", new String[] {\"src\"}, \"bin\");", "-\t\tcreateJavaProject(\"P3\", new String[] {\"src\"}, \"bin\");", "-\t\tIJavaSearchScope scope = SearchEngine.createWorkspaceScope();", "-\t\t", "-\t\t// Store all types found in project", "-\t\tTypeNameMatchCollector requestor = new TypeNameMatchCollector();", "-\t\tnew SearchEngine().searchAllTypeNames(", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_EXACT_MATCH,", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PREFIX_MATCH,", "-\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\tscope,", "-\t\t\trequestor,", "-\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,", "-\t\t\tnull);", "-\t\tString allTypes = requestor.toString();", "-\t\t", "-\t\t// Add project folder to classpath with inclusion and exclusion patterns", "-\t\tgetWorkspace().run(new IWorkspaceRunnable() {", "-\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\tIClasspathEntry[] entries = project.getRawClasspath();", "-\t\t\t\tint length = entries.length;", "-\t\t\t\tSystem.arraycopy(entries, 0, entries = new IClasspathEntry[length+1], 0, length);", "-\t\t\t\tentries[length] = JavaCore.newSourceEntry(new Path(\"/P1\"), new IPath[] { new Path(\"test.properties\") }, new IPath[] { new Path(\"src/\") }, null);", "-\t\t\t\tproject.setRawClasspath(entries, null);", "-\t\t\t}", "-\t\t}, null);", "-\t\t", "-\t\t// Search for all types and verify that same are found", "-\t\trequestor = new TypeNameMatchCollector();", "-\t\tnew SearchEngine().searchAllTypeNames(", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_EXACT_MATCH,", "-\t\t\tnull,", "-\t\t\tSearchPattern.R_PREFIX_MATCH,", "-\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\tscope,", "-\t\t\trequestor,", "-\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,", "-\t\t\tnull);", "-\t\tassertEquals(\"Should found same types!\", allTypes, requestor.toString());", "-\t} finally {", "-\t\tdeleteProject(\"P1\");", "-\t\tdeleteProject(\"P2\");", "-\t\tdeleteProject(\"P3\");", "-\t}", "-}"]}], "num": 4575}
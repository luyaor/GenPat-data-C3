{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "382e6e5ce6eef7b3c2feaa21f41ae4b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb5b41afb9abcb7a99af77e358d0261e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "2f12a5295b6777dd565c4f2976cdf05dda8b968b", "commitAfterChange": "161af7fbcd3da7eae08b0772a6e9520634a306f1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["+\torg.eclipse.jdt.internal.core.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.core.util.SimpleSet(lastPosition * 2);", "-\t\t\tif ((superType.tagBits & TagBits.InterfaceVisited) == 0) {", "-\t\t\t\tsuperType.tagBits |= TagBits.InterfaceVisited;", "+\t\t\tif (!interfacesSeen.includes(superType)) {", "+\t\t\t\tinterfacesSeen.add(superType);", "-\t}", "-", "-\t// bit reinitialization", "-\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62f39915f3d536d2815e5cd28f58e3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bb49ae1f5759ef970a2a314fd9778e459f4c097c", "commitAfterChange": "31d45554331a458304a632ad1dfc3ad3337a9ef2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic ICompilationUnit findCompilationUnit(String qualifiedTypeName)", "signatureAfterChange": " \tpublic ICompilationUnit findCompilationUnit(String qualifiedTypeName)", "diff": ["-\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(pkgName);", "-\t\tif (roots != null) {", "-\t\t\tfor (int i= 0; i < roots.length; i++) {", "-\t\t\t\tPackageFragmentRoot root= (PackageFragmentRoot) roots[i];", "-\t\t\t\tif (!root.isArchive()) {", "-\t\t\t\t\tIPackageFragment pkg = root.getPackageFragment(pkgName);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tICompilationUnit[] cus = pkg.getCompilationUnits();", "-\t\t\t\t\t\tfor (int j = 0, length = cus.length; j < length; j++) {", "-\t\t\t\t\t\t\tICompilationUnit cu = cus[j];", "-\t\t\t\t\t\t\tif (Util.equalsIgnoreJavaLikeExtension(cu.getElementName(), cuName))", "-\t\t\t\t\t\t\t\treturn cu;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// pkg does not exist", "-\t\t\t\t\t\t// -> try next package", "-\t\t\t\t\t}", "+\t\tObject value = this.packageFragments.get(pkgName);", "+\t\tif (value != null) {", "+\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\treturn findCompilationUnit(pkgName, cuName, (PackageFragmentRoot) value);", "+\t\t\t} else {", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\tfor (int i= 0; i < roots.length; i++) {", "+\t\t\t\t\tPackageFragmentRoot root= (PackageFragmentRoot) roots[i];", "+\t\t\t\t\tICompilationUnit cu = findCompilationUnit(pkgName, cuName, root);", "+\t\t\t\t\tif (cu != null)", "+\t\t\t\t\t\treturn cu;"]}], "num": 11866}
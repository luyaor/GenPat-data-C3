{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c2dee2f3905963ffdac63e9d10e3f08", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0700da0be53438996eff8752b02dd004", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "ed216bad8ac7db85d4e5d7fd2492a6cf18c498b9", "commitAfterChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "signatureAfterChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["-\tint classpathSize = classpathNames.length;", "+\tfinal int classpathSize = classpathNames.length;", "-\tint problemsOccured = 0;", "+\tint counter = 0;", "-\t\tthis.classpaths[i] = getClasspath(classpathNames[i], encoding,", "+\t\tClasspath classpath = getClasspath(classpathNames[i], encoding,", "-\t\tif (this.classpaths[i] == null)", "-\t\t\tproblemsOccured++;", "+\t\ttry {", "+\t\t\tclasspath.initialize();", "+\t\t\tthis.classpaths[counter++] = classpath;", "+\t\t} catch (IOException e) {", "+\t\t\t// ignore", "+\t\t}", "-\tif (problemsOccured > 0) {", "-\t\tClasspath[] newPaths = new Classpath[classpathSize - problemsOccured];", "-\t\tfor (int i = 0, current = 0; i < classpathSize; i++)", "-\t\t\tif (this.classpaths[i] != null) {", "-\t\t\t\tnewPaths[current] = this.classpaths[i];", "-\t\t\t}", "-\t\tclasspathSize = newPaths.length;", "-\t\tthis.classpaths = newPaths;", "+\tif (counter != classpathSize) {", "+\t\tSystem.arraycopy(this.classpaths, 0, (this.classpaths = new Classpath[counter]), 0, counter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53281d882b064b0787163c12bfa16847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected INameEnvironment[] getClassLibs()", "signatureAfterChange": " protected INameEnvironment[] getClassLibs()", "diff": ["-\tint length = this.classpaths.length;", "-\tINameEnvironment[] classLibs = new INameEnvironment[length];", "-\tfor (int i = 0; i < length; i++) {", "-\t\tString classpath = this.classpaths[i];", "-\t\tif (classpath.equals(JAVA_CLASS_LIB_PATH)) {", "-\t\t\tif (this.javaClassLib == null) {", "-\t\t\t\tthis.javaClassLib =", "-\t\t\t\t\tnew FileSystem(", "-\t\t\t\t\t\tnew String[] {classpath}, ", "-\t\t\t\t\t\tnew String[] {}, // ignore initial file names", "-\t\t\t\t\t\tencoding // default encoding", "-\t\t\t\t);", "-\t\t\t}", "-\t\t\tclassLibs[i] = this.javaClassLib;", "-\t\t} else {", "-\t\t\tclassLibs[i] =", "-\t\t\t\tnew FileSystem(", "-\t\t\t\t\tnew String[] {classpath}, ", "-\t\t\t\t\tnew String[] {}, // ignore initial file names", "-\t\t\t\t\tencoding // default encoding\t\t\t", "-\t\t\t\t);", "-\t\t}", "-\t}", "+\tINameEnvironment[] classLibs = new INameEnvironment[1];", "+\tclassLibs[0] =", "+\t\tnew FileSystem(", "+\t\t\tclasspaths, ", "+\t\t\tnew String[] {}, // ignore initial file names", "+\t\t\tencoding // default encoding\t\t\t", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7744039f3cc09b0a16569eb0e8998a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "98c08ded096494364ca74f948e8f494b3f447e89", "commitAfterChange": "423cede7ef9cde15030dc54ef2266be4ddcc9112", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding) throws InvalidInputException", "signatureAfterChange": " protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding) throws InvalidInputException", "diff": ["-\treturn classpaths;", "+\tArrayList result = new ArrayList();", "+\tHashMap knownNames = new HashMap();", "+\tFileSystem.ClasspathSectionProblemReporter problemReporter =", "+\t\tnew FileSystem.ClasspathSectionProblemReporter() {", "+\t\t\tpublic void invalidClasspathSection(String jarFilePath) {", "+\t\t\t\taddPendingErrors(bind(\"configure.invalidClasspathSection\", jarFilePath)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tpublic void multipleClasspathSections(String jarFilePath) {", "+\t\t\t\taddPendingErrors(bind(\"configure.multipleClasspathSections\", jarFilePath)); //$NON-NLS-1$", "+\t\t\t}", "+\t\t};", "+\twhile (! classpaths.isEmpty()) {", "+\t\tClasspath current = (Classpath) classpaths.remove(0);", "+\t\tString currentPath = current.getPath();", "+\t\tif (knownNames.get(currentPath) == null) {", "+\t\t\tknownNames.put(currentPath, current);", "+\t\t\tresult.add(current);", "+\t\t\tList linkedJars = current.fetchLinkedJars(problemReporter);", "+\t\t\tif (linkedJars != null) {", "+\t\t\t\tclasspaths.addAll(0, linkedJars);", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn result;"]}], "num": 49349}
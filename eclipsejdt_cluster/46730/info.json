{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aefdcef40dbf5003e627585fb1e4ca4b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8be69e27297094c1258c308e05917901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SubRoutineStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void placeAllAnyExceptionHandlers()", "signatureAfterChange": " \t \tpublic void placeAllAnyExceptionHandler()", "diff": ["-\tpublic void placeAllAnyExceptionHandlers() {", "-\t\t", "-\t\tfor (int i = 0; i < this.anyExceptionLabelsCount; i++) {", "-\t\t\tthis.anyExceptionLabels[i].place();", "-\t\t}", "+\tpublic void placeAllAnyExceptionHandler() {", "+\t\tthis.anyExceptionLabel.place();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a14f721e8356308e5c41f726b2b795fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "438cd79e8f80d544a06b9ea7f1f6d0cd36c3d8a3", "commitAfterChange": "0ab93ae847c558bd1db4754c68366cce5240cdc2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "diff": ["+\t\t\t// for all extensions of this point...", "-\t\t\t\t// for all extensions of this point...", "-\t\t\t\tfor(int j = 0; j < extensions.length; j++) {", "-\t\t\t\t\tIConfigurationElement[] configElements = extensions[j].getConfigurationElements();", "-\t\t\t\t\t// for all config elements named \"compilationParticipant\"", "-\t\t\t\t\tfor(int k = 0; k < configElements.length; k++) {", "-\t\t\t\t\t\tfinal IConfigurationElement configElement = configElements[k];", "-\t\t\t\t\t\tString elementName =configElement.getName();", "-\t\t\t\t\t\tif (!(\"compilationParticipant\".equals(elementName))) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "-\t\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "-\t\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "-\t\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t});", "+\t\t\t\tIConfigurationElement[] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\t// for all config elements named \"compilationParticipant\"", "+\t\t\t\tfor(int j = 0; j < configElements.length; j++) {", "+\t\t\t\t\tfinal IConfigurationElement configElement = configElements[j];", "+\t\t\t\t\tString elementName =configElement.getName();", "+\t\t\t\t\tif (!(\"compilationParticipant\".equals(elementName))) { //$NON-NLS-1$", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "+\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "+\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "+\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "+\t\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});"]}], "num": 46730}
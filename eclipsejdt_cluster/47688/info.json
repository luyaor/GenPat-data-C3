{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6388cf506c75abeda4328d51dd1ecc65", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02496b1129a350758588cb6b52233c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bf17807076522b492d9a582c812c5e15d78b5fff", "commitAfterChange": "7499dd3309f66badc0b9a54f55f1bb48d32b67b2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "diff": ["-\t\t\t\tif (resource.getProject().equals(getProject())) {", "-\t\t\t\t\t// name of root is the project relative path (case of source folders and library folder in same project)", "-\t\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getProjectRelativePath().toString());", "-\t\t\t\t} else {", "-\t\t\t\t\t// name of root is the full path (case of library folder in another project)", "-\t\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getFullPath().toString());", "-\t\t\t\t}", "+\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b7c0130053607e9328d511269f3664f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void testMethodWithError6() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError06() throws CoreException", "diff": ["-public void testMethodWithError6() throws JavaModelException, CoreException {", "+public void testMethodWithError06() throws CoreException {", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.cu = getCompilationUnit(\"Reconciler\", \"src\", \"p1\", \"Y.java\");", "-\t\tthis.workingCopy = this.cu.getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler/src/p1/Y.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.deleteFile(\"/Reconciler/src/p1/Y.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p1/Y.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "133d3099d271c2ee6da6a346fe16902c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void testMethodWithError8() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError08() throws CoreException", "diff": ["-public void testMethodWithError8() throws JavaModelException, CoreException {", "+public void testMethodWithError08() throws CoreException {", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.cu = getCompilationUnit(\"Reconciler\", \"src\", \"p2\", \"X01.java\");", "-\t\tthis.workingCopy = this.cu.getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler/src/p2/X01.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.deleteFile(\"/Reconciler/src/p1/X01.java\");", "-\t\tthis.deleteFile(\"/Reconciler/src/p2/X01.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p1/X01.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p2/X01.java\");", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182411dd020a09e76d14ac9016a64995", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptType(IType type)", "signatureAfterChange": " public void acceptType(IType type)", "diff": ["-\t\tif (type.isClass()) {", "-\t\t\tthis.requestor.acceptClass(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "-\t\t} else {", "-\t\t\tthis.requestor.acceptInterface(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "-\t\t}", "+\t\tthis.requestor.acceptType(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21008fad73d2bcf14f70467306bde72a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "8d49c6b05cbe0c9a4cbd680e5e4041d42a24f353", "commitAfterChange": "100575b90c81ab462711c22b0b0dfbf38604394e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\tif (this.verbose && this.destDir != null) {", "-\t\t\t/*", "-\t\t\t * if destDir is null, we don't generate any log.", "-\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97744", "-\t\t\t */", "-\t\t\t// Fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=96605", "-\t\t\t// cmd.createArgument().setValue(\"-verbose\"); //$NON-NLS-1$", "-\t\t\t/*", "-\t\t\t * extra option allowed by the Eclipse compiler", "-\t\t\t */", "-\t\t\tcmd.createArgument().setValue(\"-log\"); //$NON-NLS-1$", "-\t\t\tthis.logFileName = this.destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "-\t\t\tcmd.createArgument().setValue(this.logFileName);\t\t\t", "+\t\tif (this.verbose) {", "+\t\t\tcmd.createArgument().setValue(\"-verbose\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260adf093ad1e12cd83e553185f4a42c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\tif (this.indexSelector == null) {", "-\t\t\tthis.indexSelector =", "-\t\t\t\tnew IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t}", "-\t\tIIndex[] searchIndexes = this.indexSelector.getIndexes();", "+\t\tIIndex[] indexes = getIndexes(progressMonitor);", "-\t\t\tint max = searchIndexes.length;", "+\t\t\tint max = indexes.length;", "-\t\t\t\tisComplete &= search(searchIndexes[i], progressMonitor);", "+\t\t\t\tisComplete &= search(indexes[i], progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ae7e35eef8e8e9dafe30bee6cb5dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "commitAfterChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tif (arguments != null) {", "-\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tgenerateArguments(binding, arguments, currentScope, codeStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c9a9be36754f819ab2a0bdaa2242a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic ReferenceBinding enclosingType()", "signatureAfterChange": " \tpublic ReferenceBinding enclosingType()", "diff": ["-\t\tif (this.isMemberType() && this.enclosingType == null) {", "-\t\t\tthis.enclosingType = (ReferenceBinding) this.environment.convertToRawType(this.type.enclosingType());", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "404f8ee066b664fb2b0124d667d95776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c19da768095dac214ba6cd17a7f1810f5dbcd929", "commitAfterChange": "dbf206d4e9e06fe03458856c4018b487ffcc2b68", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic char[][] fullExclusionPatternChars()", "signatureAfterChange": " \tpublic char[][] fullExclusionPatternChars()", "diff": ["-\t\t\t\tIPath fullPath = prefixPath, pattern;", "-\t\t\t\tif (!(pattern = exclusionPatterns[i]).isAbsolute()) { // add leading ** to relative fragment", "-\t\t\t\t\tfullPath = fullPath.append(\"**/\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tfullPath = fullPath.append(pattern);", "-\t\t\t\tthis.fullCharExclusionPatterns[i] = fullPath.toString().toCharArray();", "+\t\t\t\tthis.fullCharExclusionPatterns[i] = ", "+\t\t\t\t\tprefixPath.append(this.exclusionPatterns[i]).toString().toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f3fd89a8859f1a868cbfadca0f8867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "5af3ec11c73ebd5f465c42ddba07188d87fc00f1", "commitAfterChange": "b246de6fdcd5a901a16dcaeba98ae727a49eb635", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tprotected void writeLineToResult()", "signatureAfterChange": " \t\tprotected void addLine(String text)", "diff": ["-\t\tprotected void writeLineToResult() {", "-\t\t\tif (match.getAccuracy() == SearchMatch.A_ACCURATE || showPotential) {", "-\t\t\t\tif (results.length() > 0) results.append(\"\\n\");", "-\t\t\t\tresults.append(line);", "-\t\t\t}", "+\t\tprotected void addLine(String text) {", "+\t\t\tthis.lines.add(text);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4876f562eb8deb3097dfedd77a8103be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  ClasspathSourceDirectory(IContainer sourceFolder, char[][] fullExclusionPatternChars, char[][] fulInclusionPatternChars)", "signatureAfterChange": "  ClasspathSourceDirectory(IContainer sourceFolder, char[][] fullExclusionPatternChars, char[][] fulInclusionPatternChars)", "diff": ["-\tIPath location = sourceFolder.getLocation();", "-\tthis.sourceLocation = location != null ? location.addTrailingSeparator().toString() : \"\"; //$NON-NLS-1$", "-\t// Store default encoding", "-\ttry {", "-\t\tthis.encoding = this.sourceFolder.getDefaultCharset();", "-\t}", "-\tcatch (CoreException ce) {", "-\t\t// let use no encoding by default", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bb089c38b55a644af4b29a837c73979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "7ed48908ec8a41725ff925d0919c07571054836e", "commitAfterChange": "6364144351fd62baca30ba0aad505f339b6274eb", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected LocalDeclaration createLocalDeclaration(Expression initialization,char[] assistName,int sourceStart,int sourceEnd)", "signatureAfterChange": " protected LocalDeclaration createLocalDeclaration(char[] assistName,int sourceStart,int sourceEnd)", "diff": ["-protected LocalDeclaration createLocalDeclaration(Expression initialization,char[] assistName,int sourceStart,int sourceEnd) {", "+protected LocalDeclaration createLocalDeclaration(char[] assistName,int sourceStart,int sourceEnd) {", "-\t\treturn super.createLocalDeclaration(initialization, assistName, sourceStart, sourceEnd);", "+\t\treturn super.createLocalDeclaration(assistName, sourceStart, sourceEnd);", "-\t\tSelectionOnLocalName local = new SelectionOnLocalName(initialization, assistName, sourceStart, sourceEnd);", "+\t\tSelectionOnLocalName local = new SelectionOnLocalName(assistName, sourceStart, sourceEnd);", "-\t\tif (!diet){", "-\t\t\tthis.restartRecovery\t= true;\t// force to restart in recovery mode", "-\t\t\tthis.lastIgnoredToken = -1;\t", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dbedd5c6bc0ade1b3acbd9c82b50c78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "ab91f724713a9c09a04012e3678e3f13af7d9055", "commitAfterChange": "bb69c39b8a5d26f78ad7307ca79dd237d3a75c18", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\t\tif (codeSnippetParsingUtil != null) {", "-\t\t\tfinal RecordedParsingInformation information = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\tif (information != null) {", "-\t\t\t\tthis.lineEnds = information.lineEnds;", "-\t\t\t\tthis.commentPositions = information.commentPositions;", "-\t\t\t}", "-\t\t}", "+// TODO (Olivier) lineEnds and commentPositions are not used, thus codeSnippetParsingUtil is unused", "+//\t\tif (codeSnippetParsingUtil != null) {", "+//\t\t\tfinal RecordedParsingInformation information = codeSnippetParsingUtil.recordedParsingInformation;", "+//\t\t\tif (information != null) {", "+//\t\t\t\tthis.lineEnds = information.lineEnds;", "+//\t\t\t\tthis.commentPositions = information.commentPositions;", "+//\t\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "617a0f4fb82ff660459dea631b6f18c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "commitAfterChange": "32d18ce9895194535a7aa2bea48bdebf445f909f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " EntryResult[] queryIn(Index index) throws IOException", "signatureAfterChange": " EntryResult[] queryIn(Index index) throws IOException", "diff": ["-\t\t\t\t\t\tcase CLASS_AND_INTERFACE_SUFFIX :", "-\t\t\t\t\t\tcase CLASS_AND_ENUM_SUFFIX :", "-\t\t\t\t\t\t\tkey = new char[] {ONE_STAR[0],  SEPARATOR,", "-\t\t\t\t\t\t\t\tisCaseSensitive() ? this.typeSuffix : Character.toLowerCase(this.typeSuffix)}; // find all classes or all interfaces", "+\t\t\t\t\t\tcase CLASS_AND_INTERFACE_SUFFIX :", "+\t\t\t\t\t\tcase CLASS_AND_ENUM_SUFFIX :", "+\t\t\t\t\t\t\tkey = new char[] {ONE_STAR[0],  SEPARATOR, ONE_STAR[0]};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61857d6db852c89bc10ae6e5c6dcaf39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\t\tthis.tabLength = formatter.preferences.tab_length;", "-\t\tthis.indentationLevel= 0; // initialize properly", "-\t\tthis.indentationSize = formatter.preferences.indentation_size;", "+\t\tthis.tabSize = formatter.preferences.tab_size;", "-\t\tthis.snapToTabs= this.useTab && formatter.preferences.snapToTabs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec7055247daab95e44803b4966b3fbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void ensureReadyToRun()", "signatureAfterChange": " \tpublic void ensureReadyToRun()", "diff": ["-\t\tif (this.indexSelector == null) { // only check once. As long as this job is used, it will keep the same index picture", "-\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "+\t\tif (!this.areIndexesReady) {", "+\t\t\tgetIndexes(null/*progress*/); // may trigger some index recreation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73cc7d604c1b4cc2588f332177873886", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "e19e57c2cfd4e1ac379028ba46599cac5e8fc684", "commitAfterChange": "37468b15b5c10767a0d1f5bcf745b5635724272d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t\t\tif (JavaCore.getPlugin().isDebugging()) {", "-\t\t\t\tUtil.log(e, \"ClassFormatException in \" + this.document.getPath() + \". This document seems to be a corrupted .class file. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tUtil.log(IStatus.WARNING, \"The Java indexing could not index \" + this.document.getPath() + \". This .class file doesn't follow the class file format specification. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tif (JavaCore.getPlugin().isDebugging()) {", "-\t\t\t\tUtil.log(e, \"Indexer crashed on document \" + this.document.getPath() + \". This document seems to be a corrupted .class file. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tUtil.log(IStatus.WARNING, \"The Java indexing could not index \" + this.document.getPath() + \". This .class file doesn't follow the class file format specification. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78bca49b2559b601b4a3a526cfa7ba07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "08da5fe92b01e8f28a2723830b850e2535cd0d89", "commitAfterChange": "e886eff79bde20e770d6463357bbd564e2f1cf69", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic String toString()", "signatureAfterChange": "\r \tpublic String toString()", "diff": ["-\t\t\tif (resource != null) {\r", "-\t\t\t\tIPath location = resource.getLocation();\r", "-\t\t\t\tif (location == null) {\r", "-\t\t\t\t\ttoString = \"indexing \"; //$NON-NLS-1$\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\ttoString = \"indexing \" + location.toFile().toString(); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\ttoString = \"indexing \" + this.path.toFile().toString(); //$NON-NLS-1$\r", "-\t\t\t}\r", "+\t\t\ttoString = \"indexing \" + this.path.toString(); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c830fd112a1c38963181b88537d52d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "8924dfc4fa3fe74549012523c4b06ea66d1d771f", "commitAfterChange": "32ddf534b04d269b876c2c25ef9641f93fbc4b4b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["+\t\tTypeBinding valueType;", "-\t\t\tif ((initializer.resolveTypeExpecting(scope, this.binding.returnType)) != null) {", "-\t\t\t\tthis.value.resolvedType = initializer.binding = (ArrayBinding) this.binding.returnType;", "-\t\t\t}\t\t\t", "+\t\t\tvalueType = initializer.resolveTypeExpecting(scope, this.binding.returnType);", "-\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);\t\t\t\t", "-\t\t} else {", "+\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);", "+\t\t\tvalueType = null; // no need to pursue", "+\t\t} else {", "+\t\t\tvalueType = this.value.resolveType(scope);", "-\t\tTypeBinding valueType = this.value.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5230aef1bb40a3e361d396bf83255ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testMethodWithError7() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError07() throws CoreException", "diff": ["-public void testMethodWithError7() throws JavaModelException, CoreException {", "+public void testMethodWithError07() throws CoreException {", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.cu = getCompilationUnit(\"Reconciler\", \"src\", \"p1\", \"Y.java\");", "-\t\tthis.workingCopy = this.cu.getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler/src/p1/Y.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.deleteFile(\"/Reconciler/src/p1/Y.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p1/Y.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aad25d554bd4ce030b4652bfa00d77a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "93675a43d968a3c19731d41f01d7289fd7ab10d8", "commitAfterChange": "5bdc34d5d9c6002fe6f005fd6095ecbab7b31181", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\t\t\tThread currentThread = Thread.currentThread();", "-\t\t\tboolean addedCurrentThread = false;\t\t\t", "+", "+\t\t\tnewRoots = new HashMap();", "+\t\t\tnewOtherRoots = new HashMap();", "+\t\t\tnewSourceAttachments = new HashMap();", "+\t", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects;", "-\t\t\t\t// if reentering initialization (through a container initializer for example) no need to compute roots again", "-\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=47213", "-\t\t\t\tif (!this.initializingThreads.add(currentThread)) return;", "-\t\t\t\taddedCurrentThread = true;", "-\t\t\t\t", "-\t\t\t\tnewRoots = new HashMap();", "-\t\t\t\tnewOtherRoots = new HashMap();", "-\t\t\t\tnewSourceAttachments = new HashMap();", "-\t\t", "-\t\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "+\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// nothing can be done", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t\t// nothing can be done", "-\t\t\t\t\treturn;", "+\t\t\t\t\t// continue with next project", "+\t\t\t\t\tcontinue;", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t", "+\t\t\t\t\t// root path", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "+\t\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// source attachment path", "+\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// continue with next project", "+\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// root path", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// source attachment path", "-\t\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tif (addedCurrentThread) {", "-\t\t\t\t\tthis.initializingThreads.remove(currentThread);", "+\t\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac69757d12d83f4b5e965a5be91cdd84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "d57d057b9e029964391a7d18231884c456809f0a", "commitAfterChange": "a5db2eb78d347817bbf37d865afb84de837fdf1b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException", "signatureAfterChange": " \tpublic SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-", "-\t\t// Create search scope with visible entry on the project's classpath", "-\t\tif(this.checkAccessRestrictions) {", "-\t\t\tthis.searchScope = BasicSearchEngine.createJavaSearchScope(new IJavaElement[] {project});", "-\t\t} else {", "-\t\t\tthis.searchScope = BasicSearchEngine.createJavaSearchScope(this.nameLookup.packageFragmentRoots);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b8b22d6b7f30739c4d658f09cae58c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "commitAfterChange": "1636f4f6a9a908a8764c3fcbad745e3e39a0b116", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t", "-\t\tthis.ordinal = currentScope.enclosingSourceType().addLambdaMethod(this);", "-\t\tthis.binding.selector = CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.ordinal).toCharArray());", "+\t\tthis.binding = currentScope.enclosingSourceType().addSyntheticMethod(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6e707053c9f03b3b439acc0b14bf94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " public char[] sourceName()", "signatureAfterChange": "  public char[] sourceName()", "diff": ["+", "-\t\tif (superInterfaces == Binding.NO_SUPERINTERFACES)", "-\t\t\treturn CharOperation.concat(TypeConstants.ANONYM_PREFIX, superclass.sourceName(), TypeConstants.ANONYM_SUFFIX);", "-\t\telse", "-\t\t\treturn CharOperation.concat(TypeConstants.ANONYM_PREFIX, superInterfaces[0].sourceName(), TypeConstants.ANONYM_SUFFIX);", "-\t\t\t", "+\t\treturn CharOperation.concat(TypeConstants.ANONYM_PREFIX, anonymousOriginalSuperType().sourceName(), TypeConstants.ANONYM_SUFFIX);", "-\t\treturn sourceName;", "+\t\treturn this.sourceName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2c8292db108b75d029c26e08b02d4e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "373213c46e960126c24f24cda1599f19817b9ac1", "commitAfterChange": "1b44c9cacb183e5b618e64370a268adde6188d28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected void applyTextEdit(ICompilationUnit cu, TextEdit edits) throws JavaModelException", "signatureAfterChange": " \tprotected void applyTextEdit(ICompilationUnit cu, TextEdit edits) throws JavaModelException", "diff": ["-\t\t\tcu.applyTextEdit(edits, this.progressMonitor);", "-\t\t} catch (JavaModelException e) {", "-\t\t\tif (e.getJavaModelStatus().getCode() == IJavaModelStatusConstants.BAD_TEXT_EDIT_LOCATION) {", "-\t\t\t\t// content changed under us", "-\t\t\t\tthrow new JavaModelException(e.getException(), IJavaModelStatusConstants.INVALID_CONTENTS);", "-\t\t\t} else {", "-\t\t\t\tthrow e;", "-\t\t\t}", "+\t\t\tedits.apply(getDocument(cu));", "+\t\t} catch (BadLocationException e) {", "+\t\t\t// content changed under us", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c452ee9a4017cbbc9eaaa3b254f86848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\t\t// tag parameters as being set", "-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(this.arguments[i].binding);", "-\t\t\t}", "-\t\t}", "+\t\t// nullity and mark as assigned", "+\t\tanalyseArguments(flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c84b29288da364aba95d6fc5e619df35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "715524ca244384ae2f7955efd3a5c7d3b2d34d4d", "commitAfterChange": "e5a1dfaef4d73951c29733064699d4bce0d0e9be", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " protected int resolveLevel(MessageSend messageSend)", "signatureAfterChange": " protected int resolveLevel(MessageSend messageSend)", "diff": ["-\t\t\t\tchar[][] compoundName = methodReceiverType.compoundName;", "-\t\t\t\tfor (int i = 0, max = this.allSuperDeclaringTypeNames.length; i < max; i++) {", "-\t\t\t\t\tif (CharOperation.equals(this.allSuperDeclaringTypeNames[i], compoundName)) {", "-\t\t\t\t\t\treturn methodLevel // since this is an ACCURATE_MATCH so return the possibly weaker match", "-\t\t\t\t\t\t\t| SUPER_INVOCATION_FLAVOR; // this is an overridden method => add flavor to returned level", "-\t\t\t\t\t}", "+\t\t\t\tif (resolveLevelAsSuperInvocation(methodReceiverType)) {", "+\t\t\t\t\tdeclaringLevel = methodLevel // since this is an ACCURATE_MATCH so return the possibly weaker match", "+\t\t\t\t\t\t| SUPER_INVOCATION_FLAVOR; // this is an overridden method => add flavor to returned level", "-\t\t\t\t/* Do not return interfaces potential matches", "-\t\t\t\t * @see \"https://bugs.eclipse.org/bugs/show_bug.cgi?id=157814#c8\"", "-\t\t\t\tif (methodReceiverType.isInterface()) {", "-\t\t\t\t\t// all methods interface with same name and parameters are potential matches", "-\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=156491", "-\t\t\t\t\treturn INACCURATE_MATCH | POLYMORPHIC_FLAVOR;", "-\t\t\t\t}", "-\t\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9ff0296f53b4dd377e8c2be9f0f117a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "0d4d3ffa043f4d6ea078fa26d3e214c34db9c96a", "commitAfterChange": "9d3ad98026b9244a895c45d3b27d014661e6b837", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void setUp15WorkingCopy() throws JavaModelException", "signatureAfterChange": " private void setUp15WorkingCopy() throws JavaModelException", "diff": ["+\tsetUpWorkingCopy(\"Reconciler15/src/p1/X.java\", contents);", "+}", "-\tthis.workingCopy = getCompilationUnit(\"Reconciler15/src/p1/X.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6015bcb334b9014438cf4f094a9086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public DefaultProblemFactory(Locale loc)", "signatureAfterChange": " public DefaultProblemFactory(Locale loc)", "diff": ["-\tthis.locale = loc;", "-\tif (Locale.getDefault().equals(loc)){", "-\t\tif (DEFAULT_LOCALE_TEMPLATES == null){", "-\t\t\tDEFAULT_LOCALE_TEMPLATES = loadMessageTemplates(loc);", "-\t\t}", "-\t\tthis.messageTemplates = DEFAULT_LOCALE_TEMPLATES;", "-\t} else {", "-\t\tthis.messageTemplates = loadMessageTemplates(loc);", "-\t}", "+\tsetLocale(loc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbaabb996bf793717db56c8cb2b8f220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "f088819455a71b45548a596058f67b6352ed6ea3", "commitAfterChange": "d8924c5474634641f5ba8e8d6797d0147577e226", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tfor (int i = 0, max = fElementsToProcess.length; i < max; i++) {", "-\t\t\t\tWorkingCopy copy = (WorkingCopy) fElementsToProcess[i];", "-\t\t\t\tICompilationUnit unit = (ICompilationUnit) copy.getOriginalElement();", "-\t\t\t\tIBuffer buffer = copy.getBuffer();", "-\t\t\t\tif (buffer  == null) { ", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tchar[] bufferContents = buffer.getCharacters();", "-\t\t\t\tString result = processElement(unit, positions == null ? null : positions[i], bufferContents);", "-\t\t\t\tif (!CharOperation.equals(result.toCharArray(), bufferContents)) {", "-\t\t\t\t\tcopy.getBuffer().setContents(result);", "-\t\t\t\t}", "-\t\t\t\tworked(1);", "+\t\t\tWorkingCopy copy = (WorkingCopy) fElementsToProcess[0];", "+\t\t\tICompilationUnit unit = (ICompilationUnit) copy.getOriginalElement();", "+\t\t\tIBuffer buffer = copy.getBuffer();", "+\t\t\tif (buffer  == null) { ", "+\t\t\t\treturn;", "+\t\t\tchar[] bufferContents = buffer.getCharacters();", "+\t\t\tString result = processElement(unit, positions, bufferContents);", "+\t\t\tif (!CharOperation.equals(result.toCharArray(), bufferContents)) {", "+\t\t\t\tcopy.getBuffer().setContents(result);", "+\t\t\t}", "+\t\t\tworked(1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f0069dde1281003ae6076c90c7e9c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tvoid validateNullAnnotations()", "signatureAfterChange": " \tvoid validateNullAnnotations()", "diff": ["-\t\tif (this.binding != null && this.binding.parameterNonNullness != null) {", "+\t\tif (this.binding != null) {", "-\t\t\t\tif (this.binding.parameterNonNullness[i] != null) {", "-\t\t\t\t\tlong nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()", "-\t\t\t\t\t\t\t? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;", "-\t\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "-\t\t\t\t}", "+\t\t\t\tlong nullAnnotationTagBit =  this.binding.returnType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4308d0b541349de85a72eceb59b6fdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "af231babcc36b45e2ff3d4a97422d9f5a34150b7", "commitAfterChange": "38c895fd64a92567249832dd2a8d427fc1bcacc2", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "diff": ["-\t\t\t} else if (action instanceof EmptyStatement && !this.preferences.put_empty_statement_on_new_line) {", "-\t\t\t\taction.traverse(this, scope);", "+\t\t\t} else if (action instanceof EmptyStatement) {", "+\t\t\t\t/*", "+\t\t\t\t * This is an empty statement", "+\t\t\t\t */", "+\t\t\t\tformatNecessaryEmptyStatement();", "-\t\t\tthis.scribe.indent();", "-\t\t\tformatEmptyStatement(); ", "-\t\t\tthis.scribe.unIndent();", "+\t\t\tformatNecessaryEmptyStatement(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e76ba70a6b2aaf0495234063b518cc8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "7ed48908ec8a41725ff925d0919c07571054836e", "commitAfterChange": "6364144351fd62baca30ba0aad505f339b6274eb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic LocalDeclaration( \t\tExpression expr, \t\tchar[] name, \t\tint sourceStart, \t\tint sourceEnd)", "signatureAfterChange": " \t \tpublic LocalDeclaration( \t\tchar[] name, \t\tint sourceStart, \t\tint sourceEnd)", "diff": ["-\t\tExpression expr,", "-\t\tinitialization = expr;", "-\t\tif (initialization != null) {", "-\t\t\tthis.declarationSourceEnd = initialization.sourceEnd;", "-\t\t\tthis.declarationEnd = initialization.sourceEnd;", "-\t\t} else {", "-\t\t\tthis.declarationEnd = sourceEnd;", "-\t\t}", "+\t\tthis.declarationEnd = sourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea8a61c0ea61cfcc7826565e7783d44f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "c55cddff12b32377afae40bbcf9627a7ca7ad410", "commitAfterChange": "b7edf809a20c24d79a7c1031a686c1da15a85a26", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void initialize()", "signatureAfterChange": " public void initialize()", "diff": ["-", "-\tIProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();", "-\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\tIProject project = projects[i];", "-\t\tif (project.isAccessible()) {", "-\t\t\ttry {", "-\t\t\t\tthis.add(JavaCore.create(project), false, new HashSet(2));", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t}", "+\ttry {", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tfor (int i = 0, length = projects.length; i < length; i++)", "+\t\t\tthis.add(projects[i], false, new HashSet(2));", "+\t} catch (JavaModelException ignored) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdbc72e0e621c7ca1db31d0f01455e8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c22ae4e2acd996824ff94a2b0edaa0df69d9b3b1", "commitAfterChange": "1eeba055c4a858ddea83f6c85864678280808173", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "signatureAfterChange": " \t \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "diff": ["+\t", "-", "-\t\t\tif (this.name != null)", "-\t\t\t\tthis.name.traverse(visitor, blockScope);", "-", "-\t\t\tif (this.type != null)", "-\t\t\t\tthis.type.traverse(visitor, blockScope);", "-", "-\t\t\tif (this.primary != null)", "-\t\t\t\tthis.primary.traverse(visitor, blockScope);", "-", "+\t\t\t", "+\t\t\tthis.lhs.traverse(visitor, blockScope);", "+\t\t\t", "-", "+\t\t\t"]}], "num": 47688}
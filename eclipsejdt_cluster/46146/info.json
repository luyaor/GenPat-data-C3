{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bae94464d7c511d301ef43820b35857", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c04dcf6d3f8d5ee5e5c5fae7c88df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "1a8cfd60f35f9eb233d4395676551d0101e49aa3", "commitAfterChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  private void pushText(int start, int end, int htmlIndex, int htmlDepth)", "signatureAfterChange": "  private void pushText(int start, int end, int htmlIndex, int htmlDepth)", "diff": ["-\tint textEnd = end;", "-\tif (this.javadocTextEnd > 0 && end >= this.javadocTextEnd) {", "-\t\t// Special case on javadoc text end, need to retrieve the space", "-\t\t// position by rescanning the text", "-\t\tint restart = this.spacePosition == -1 ? start : this.spacePosition;", "-\t\tthis.scanner.resetTo(restart, end-1/* before last star*/);", "-\t\ttry {", "-\t\t\tif (this.scanner.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\ttextEnd = this.spacePosition;", "-\t\t\t}", "-\t\t}", "-\t\tcatch (InvalidInputException iie) {", "-\t\t\t// do nothing", "-\t\t}", "-\t}", "-\tFormatJavadocText text = new FormatJavadocText(start, textEnd-1, lineStart, htmlIndex, htmlDepth);", "+\tFormatJavadocText text = new FormatJavadocText(start, end-1, lineStart, htmlIndex, htmlDepth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efabf4f34f74f9b4d9593d59b96ffdc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ff4b1a1f8468440c7b2d077cf2b465dbb33f40ff", "commitAfterChange": "ed6fd232f6d05dfc9074419f2fb6a1c7bcfbd150", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": " \tprotected int retrievePositionBeforeNextCommaOrSemiColon(int start, int end)", "signatureAfterChange": " \tprotected int retrieveEndOfPotentialExtendedDimensions(int initializerEnd, int nameEnd, int end)", "diff": ["-\tprotected int retrievePositionBeforeNextCommaOrSemiColon(int start, int end) {", "-\t\tthis.scanner.resetTo(start, end);", "+\tprotected int retrieveEndOfPotentialExtendedDimensions(int initializerEnd, int nameEnd, int end) {", "+\t\tthis.scanner.resetTo(initializerEnd, end);", "+\t\t\tint pos = initializerEnd > nameEnd ? initializerEnd - 1 : nameEnd;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "+\t\t\t\t\t\tpos = this.scanner.currentPosition - 1;", "-\t\t\t\t\t\tif (balance == 0) return this.scanner.startPosition - 1;", "+\t\t\t\t\t\tif (balance == 0) return pos;", "+\t\t\t\t\t\t// case where a missing closing brace doesn't close an array initializer", "+\t\t\t\t\t\tpos = this.scanner.currentPosition - 1;", "-\t\t\t\t\t\treturn this.scanner.startPosition - 1;", "+\t\t\t\t\t\treturn pos;"]}], "num": 46146}
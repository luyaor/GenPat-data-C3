{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fe46c5576729959c696c8b9b7f2215e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18a176a6cceeb267289531d14f0eb54d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t\tif (constant != NotAConstant)", "+\t\tif (constant != Constant.NotAConstant)", "-\t\t\t\t\t&& !fieldBinding.isConstantValue()) {", "+\t\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9dc5ec4baf0dc760cbdd1694fa004b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c326c940f9ef138395e800fef452568d0c87c6c0", "commitAfterChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "-\t\t\tthis.ordinal = recordFunctionalType(blockScope);", "-\t\t}", "-\t\t", "-\t\tthis.constant = Constant.NotAConstant;", "-\t\tthis.enclosingScope = blockScope;", "-\t\t", "-\t\tif (!argumentsTypeElided) {", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t", "+\t\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tthis.constant = Constant.NotAConstant;", "+\t\t\tthis.enclosingScope = blockScope;", "+\t\t\tif (this.original == this)", "+\t\t\t\tthis.ordinal = recordFunctionalType(blockScope);", "+\t\t\t", "+\t\t\tif (!argumentsTypeElided) {", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);", "+\t\t\t}", "+\t\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "+\t\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "+\t\t\t} ", "-\t\tif (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {", "-\t\t\treturn this.resolvedType = new PolyTypeBinding(this);", "-\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d23042f61a59341ffdcf460ce0af9579", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\tif (this.constant != NotAConstant)", "+\tif (this.constant != Constant.NotAConstant)", "-\t\t\t\t&& !fieldBinding.isConstantValue()) {", "+\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {"]}], "num": 28430}
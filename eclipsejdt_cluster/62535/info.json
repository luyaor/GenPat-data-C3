{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a3349a6f51e807dcc9f1467d99cc008", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b95e6952d0aafe85dcd85ee08285b6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a209f427039b5b4db27a67f609cb706801ba28e5", "commitAfterChange": "712689471fd4116d08552bca059239228ce897f6", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference)", "signatureAfterChange": " private void rejectIllegalTypeAnnotations(TypeReference typeReference)", "diff": ["-\trejectIllegalTypeAnnotations(typeReference, false);", "-}", "+\t\t\tproblemReporter().misplacedTypeAnnotations(misplacedAnnotations[0], misplacedAnnotations[misplacedAnnotations.length - 1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ae076ac8b8ec312c9e73d6131b75dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\t\t\targument.setExpectedType(this.binding.parameters[i]);", "+\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\tExpression argument = this.arguments[i];", "+\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\targument.setExpectedType(inheritedBinding.parameters[i]);", "+\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a61a8d9dbafb69e0e81ca1d1076b2c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "beddf7ea3209e604e7dd085747cac8c41b2dfbd0", "commitAfterChange": "cafda46507ac63768e17397affc84b63092c7e46", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected static void initLogDir()", "signatureAfterChange": " \tprotected static void initLogDir()", "diff": ["+\t\tFile dir = null;", "-\t\t\tFile dir = new File(logDir);", "+\t\t\t// Verify that parent log dir is valid if exist", "+\t\t\tdir = new File(logDir);", "-\t\t\t\tif (dir.isDirectory()) {", "-\t\t\t\t\tLOG_DIR = dir;", "-\t\t\t\t} else {", "+\t\t\t\tif (!dir.isDirectory()) {", "+\t\t\t\t\tdir = INVALID_DIR;", "-\t\t\t\tif (dir.mkdir()) {", "-\t\t\t\t\tLOG_DIR = dir;", "-\t\t\t\t} else {", "+\t\t\t\t// Create parent dir if necessary", "+\t\t\t\tint n=0;", "+\t\t\t\tboolean created = false;", "+\t\t\t\twhile (!created && n<3) {", "+\t\t\t\t\tcreated = dir.mkdir();", "+\t\t\t\t\tif (!created) {", "+\t\t\t\t\t\tdir = dir.getParentFile();", "+\t\t\t\t\t}", "+\t\t\t\t\tn++;", "+\t\t\t\t}", "+\t\t\t\tif (!created) {", "+\t\t\t\t\tdir = INVALID_DIR;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Create Log dir", "+\t\t\tString[] subdirs = new String[] {", "+\t\t\t\t(PATCH_ID == null) ? LOG_VERSION : PATCH_ID,", "+\t\t\t\tRUN_ID", "+\t\t\t};", "+\t\t\tfor (int i=0; i<subdirs.length; i++) {", "+\t\t\t\tdir = new File(dir, subdirs[i]);", "+\t\t\t\tif (dir.exists()) {", "+\t\t\t\t\tif (!dir.isDirectory()) {", "+\t\t\t\t\t\tSystem.err.println(dir.getPath()+\" is not a valid directory. Log files will NOT be written!\");", "+\t\t\t\t\t\tdir= INVALID_DIR;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (!dir.mkdir()) {", "+\t\t\t\t\tSystem.err.println(\"Cannot create \"+logDir+\". Log files will NOT be written!\");", "+\t\t\t\t\tdir = INVALID_DIR;", "+\t\t\t\t\tbreak;", "+\t\tLOG_DIR = dir;", "+\t}"]}], "num": 62535}
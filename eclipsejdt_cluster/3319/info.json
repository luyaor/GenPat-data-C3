{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "052ade8f123b1fb2e5db55e42cfa6177", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b5928606d5ca03526e4a54061d603a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate static String[] parseTypeName(String qualifiedName)", "diff": ["-\t", "-\tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName,", "-\t\t\tString contents, WorkingCopyOwner workingCopyOwner,", "-\t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor)", "-\t\tthrows JavaModelException", "-\t{", "-\t\tIFolder folder = _gsfm.getFolder();", "+\t */", "+\tprivate static String[] parseTypeName(String qualifiedName) {", "-\t\t// ", "-\t\t//  figure out package part of type & file name", "-\t\t//", "+\t\t//TODO: the code in CompilationUnitHelper doesn't perform this check.  Should it?", "+\t\tif (qualifiedName.indexOf('/') != -1)", "+\t\t\tqualifiedName = qualifiedName.replace('/', '.');", "+\t\t", "+\t\tString[] names = new String[2];", "-\t\tint idx = typeName.lastIndexOf( '.' );", "+\t\tint idx = qualifiedName.lastIndexOf( '.' );", "-\t\t    pkgName = typeName.substring( 0, idx );", "+\t\t    pkgName = qualifiedName.substring( 0, idx );", "-\t\t\t\ttypeName.substring(idx + 1, typeName.length()) + \".java\"; //$NON-NLS-1$", "+\t\t\t\tqualifiedName.substring(idx + 1, qualifiedName.length()) + \".java\"; //$NON-NLS-1$", "-\t\t\tfname = typeName + \".java\"; //$NON-NLS-1$", "+\t\t\tfname = qualifiedName + \".java\"; //$NON-NLS-1$", "-", "-\t\t//", "-\t\t//  create compilation unit", "-\t\t//", "-\t\tIPackageFragmentRoot root = _jProject.getPackageFragmentRoot(folder);", "-\t\tIPackageFragment pkgFragment = \troot.getPackageFragment(pkgName );", "-\t\tICompilationUnit cu = pkgFragment.getCompilationUnit( fname );", "-", "-\t\t//", "-\t\t// BecomeWorkingCopyOperation shouldn't take any resource locks to run, so we should be thread-safe here", "-\t\t//", "-\t\tcu.becomeWorkingCopy(problemRequestor, progressMonitor);", "-\t\tICompilationUnit workingCopy = cu;", "-\t\t", "-\t\t//", "-\t\t//  update working copy", "-\t\t//", "-\t\tupdateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "-", "-\t\t", "-\t\t//", "-\t\t// update maps", "-\t\t//", "-\t\taddEntryToWorkingCopyMaps( parentFile, workingCopy );", "-\t\t", "-", "-\t\treturn workingCopy;\t", "+\t\tnames[0] = pkgName;", "+\t\tnames[1] = fname;", "+\t\treturn names;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f149ad557d43dc4fe5cbea50e1e662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "2cd08e31ebe03f16766f3751a8572a8d9fcd2d34", "commitAfterChange": "0e2d9a71d6773265a96182a660f0578d3bf2fa9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": "\r public String[] getParameterNames() throws JavaModelException", "diff": ["-\r", "-\t\t\tchar[] source = mapper.findSource(type);\r", "-\t\t\tif (source != null){\r", "-\t\t\t\tmapper.mapSource(type, source);\r", "-\t\t\t\tISourceRange sourceRange = getSourceRange();\r", "-\t\t\t\tif (source != null & sourceRange != null && sourceRange != SourceMapper.fgUnknownRange) {\r", "-\t\t\t\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "-\t\t\t\t\tDecodeParametersNames decoder = new DecodeParametersNames();\r", "-\t\t\t\t\tSourceElementParser parser = new SourceElementParser(decoder, factory, new CompilerOptions(JavaCore.getOptions()));\r", "-\t\t\t\t\tint start = sourceRange.getOffset();\r", "-\t\t\t\t\tint end = start + sourceRange.getLength();\r", "-\t\t\t\t\tparser.parseTypeMemberDeclarations(source, start, end);\r", "-\t\t\t\t\tfParameterNames = decoder.getParametersNames();\r", "+\t\t\tchar[][] parameterNames = mapper.getMethodParameterNames(this);\r", "+\t\t\t\r", "+\t\t\t// map source and try to find parameter names\r", "+\t\t\tif(parameterNames == null) {\r", "+\t\t\t\tchar[] source = mapper.findSource(type);\r", "+\t\t\t\tif (source != null){\r", "+\t\t\t\t\tmapper.mapSource(type, source);\r", "+\t\t\t\t}\r", "+\t\t\t\tparameterNames = mapper.getMethodParameterNames(this);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t// if parameter names exist, convert parameter names to String array\r", "+\t\t\tif(parameterNames != null) {\r", "+\t\t\t\tfParameterNames = new String[parameterNames.length];\r", "+\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {\r", "+\t\t\t\t\tfParameterNames[i] = new String(parameterNames[i]);\r"]}], "num": 3319}
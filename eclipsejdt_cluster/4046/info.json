{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1753f04a8e63584821a4ba37fcb33ab1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a691c24dfda4db543d9f446743c979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java", "commitBeforeChange": "4605f993bb123a9187b7d6cf100f3cd705b1424a", "commitAfterChange": "49d173b6a20e491492d309e521a8df899e49ca65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\t// TODO: this condition is awaiting confirmation, see http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000455.html ", "-\t\t\tif (!(this.left instanceof LambdaExpression) || ((LambdaExpression)this.left).argumentsTypeElided()) {", "-\t\t\t\tint nParam = sam.parameters.length;", "-\t\t\t\tfor (int i = 0; i < nParam; i++)", "-\t\t\t\t\tif (!sam.parameters[i].isProperType(true))", "+\t\t\tif (this.left instanceof LambdaExpression) {", "+\t\t\t\tif (((LambdaExpression)this.left).argumentsTypeElided()) {", "+\t\t\t\t\tint nParam = sam.parameters.length;", "+\t\t\t\t\tfor (int i = 0; i < nParam; i++)", "+\t\t\t\t\t\tif (!sam.parameters[i].isProperType(true))", "+\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t}", "+\t\t\t\tif (sam.returnType != TypeBinding.VOID && !sam.returnType.isProperType(true))", "+\t\t\t\t\treturn FALSE;", "+\t\t\t} else { // reference expression", "+\t\t\t\tif (!((ReferenceExpression)this.left).isExactMethodReference()) {\t\t\t\t\t", "+\t\t\t\t\tint nParam = sam.parameters.length;", "+\t\t\t\t\tfor (int i = 0; i < nParam; i++)", "+\t\t\t\t\t\tif (!sam.parameters[i].isProperType(true))", "+\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\tif (sam.returnType != TypeBinding.VOID && !sam.returnType.isProperType(true))", "+\t\t\t\t}", "-\t\t\tif (sam.returnType != TypeBinding.VOID && !sam.returnType.isProperType(true))", "-\t\t\t\treturn FALSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78847c1e9096d635eee0a7fa6b1b908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "36953857ec204432ce079b8cdc9bdf8b23fc1bb7", "commitAfterChange": "a6d256122ce87d40be01c47655a9ce23e12ad61a", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\tif (oneParam == twoParam) continue;", "-\t\t\t\tif (oneParam.isRawType()) {", "-\t\t\t\t\tTypeBinding match = oneParam.findSuperTypeWithSameErasure(twoParam);", "-\t\t\t\t\tif (match != twoParam)", "-\t\t\t\t\t\treturn false;", "+\t\t\t\tif (oneParam == twoParam) {", "+\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "+\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "+\t\t\t\t\t\tif (oneParam == one.original().parameters[i] && oneParam != two.original().parameters[i])", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "-\t\t\t\tif (!oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\tif (oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "+\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "+\t\t\t\t\t\tif (oneParam == one.original().parameters[i] && twoParam != two.original().parameters[i])", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t} else {"]}], "num": 4046}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db6a01742aec9560aa4497e996db0839", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d2acc97c42412e089c32657db6a4d65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public NameEnvironment(IJavaProject javaProject)", "signatureAfterChange": "  public NameEnvironment(IJavaProject javaProject)", "diff": ["+\tthis.isIncrementalBuild = false;", "-\t\tIWorkspaceRoot workspaceRoot = javaProject.getProject().getWorkspace().getRoot();", "-\t\tIResource outputFolder = workspaceRoot.findMember(javaProject.getOutputLocation());", "-\t\tString outputFolderLocation = null;", "-\t\tif (outputFolder != null && outputFolder.exists())", "-\t\t\toutputFolderLocation = outputFolder.getLocation().toString();", "-\t\tthis.classpathLocations = computeLocations(workspaceRoot, javaProject, outputFolderLocation, null, null);", "-\t\tthis.isIncrementalBuild = false;", "-\t} catch(JavaModelException e) {", "-\t\tthis.classpathLocations = new ClasspathLocation[0];", "+\t\tcomputeClasspathLocations(javaProject.getProject().getWorkspace().getRoot(), (JavaProject) javaProject, null);", "+\t} catch(CoreException e) {", "+\t\tthis.sourceLocations = new ClasspathMultiDirectory[0];", "+\t\tthis.binaryLocations = new ClasspathLocation[0];", "-\tsplitLocations();", "-\tsetNames(new String[0], new String[0]);", "+\tsetNames(null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d0f78fd46c88009da1337bbbde9ac1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "89d67345e9cc0e1f7b41a5c3ebe790ece5a2e718", "commitAfterChange": "4188bcd12cf75d1e13b09a6ac22e1c9dad829ea6", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "signatureAfterChange": " \tpublic static String[] getProblemArgumentsFromMarker(String argumentsString)", "diff": ["-\t\tif (argumentsString == null) return null;", "+\t\tif (argumentsString == null) {", "+\t\t\treturn null;", "+\t\t}", "-\t\tint numberOfArg;", "+\t\tint numberOfArg = 0;", "-\t\tString[] args = new String[length];", "-\t\tint count = 0;", "+\t\treturn decodeArgumentString(numberOfArg, argumentsString);", "+\t}", "-\t\tStringTokenizer tokenizer = new StringTokenizer(argumentsString, ARGUMENTS_DELIMITER);", "-\t\twhile(tokenizer.hasMoreTokens()) {", "-\t\t\tString argument = tokenizer.nextToken();", "-\t\t\tif(argument.equals(EMPTY_ARGUMENT))", "-\t\t\t\targument = \"\";  //$NON-NLS-1$", "-\t\t\targs[count++] = argument;", "-", "-\t\tif(count != numberOfArg)", "-", "-\t\tSystem.arraycopy(args, 0, args = new String[count], 0, count);", "-\t\treturn args;"]}], "num": 38764}
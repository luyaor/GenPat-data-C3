{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea818db90181884b6152938d9697e1fc", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a9b5bcb8914f9d007886d1a778002c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "57e6ab81c3cf39fecb76455d174c657f7c273f84", "commitAfterChange": "8c4c03ed87f5ba92a46a042a6bd51df21862c6ec", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tprivate void removeFromFileMaps( IFile generatedFile, IFile parentFile )  \t    throws CoreException", "signatureAfterChange": " \t \tprivate void removeFromFileMaps( IFile generatedFile, IFile parentFile )  \t    throws CoreException", "diff": ["-\t\tif (_generatedFile2WorkingCopy.containsKey(generatedFile))", "+\t\tboolean discardWorkingCopy;", "+\t\tsynchronized( this )", "+\t\t{\t", "+\t\t\tdiscardWorkingCopy = _generatedFile2WorkingCopy.containsKey(generatedFile);", "+\t\t}", "+\t\t", "+\t\t// don't want to hold a lock when we call discardGeneratedWorkingCopy...", "+\t\tif ( discardWorkingCopy )", "-\t\tSet<IFile> derivedFiles = _parentFile2GeneratedFiles.get(parentFile);", "+\t\tsynchronized( this )", "+\t\t{", "+\t\t\tSet<IFile> derivedFiles = _parentFile2GeneratedFiles.get(parentFile);", "-\t\t// assertions", "-\t\tif (derivedFiles == null)", "-\t\t\tthrow new RuntimeException(", "+\t\t\t// assertions", "+\t\t\tif (derivedFiles == null)", "+\t\t\t\tthrow new RuntimeException(", "-\t\tif (!derivedFiles.contains(generatedFile))", "-\t\t\tthrow new RuntimeException(", "+\t\t\tif (!derivedFiles.contains(generatedFile))", "+\t\t\t\tthrow new RuntimeException(", "-\t\tderivedFiles.remove(generatedFile);", "+\t\t\tderivedFiles.remove(generatedFile);", "-\t\t// update _derivedFile2Parents map", "-\t\tSet<IFile> parents = _generatedFile2ParentFiles.get(generatedFile);", "+\t\t\t// update _derivedFile2Parents map", "+\t\t\tSet<IFile> parents = _generatedFile2ParentFiles.get(generatedFile);", "-\t\t// assertions", "-\t\tif (parents == null)", "-\t\t\tthrow new RuntimeException(\" parents is null and it shouldn't be\");", "-\t\tif (!parents.contains(parentFile))", "-\t\t\tthrow new RuntimeException(\"parents set does not contain parent\");", "+\t\t\t// assertions", "+\t\t\tif (parents == null)", "+\t\t\t\tthrow new RuntimeException(\" parents is null and it shouldn't be\");", "+\t\t\tif (!parents.contains(parentFile))", "+\t\t\t\tthrow new RuntimeException(\"parents set does not contain parent\");", "-\t\tparents.remove(parentFile);", "-", "+\t\t\tparents.remove(parentFile);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dee203109010505ca28238ba519aacf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "57e6ab81c3cf39fecb76455d174c657f7c273f84", "commitAfterChange": "8c4c03ed87f5ba92a46a042a6bd51df21862c6ec", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate void removeFromWorkingCopyMaps( IFile derivedFile, IFile parentFile ) \t\tthrows JavaModelException", "signatureAfterChange": "  \tprivate void removeFromWorkingCopyMaps( IFile derivedFile, IFile parentFile ) \t\tthrows JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = _generatedFile2WorkingCopy.get( derivedFile );", "-\t\tif ( workingCopy == null )", "-\t\t\treturn;", "-\t", "-\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( workingCopy );", "-", "-\t\t// TODO:  change these to assertions", "-\t\tif ( parents == null ) throw new RuntimeException( \"parents == null and it shouldnt\");", "-\t\tif ( ! parents.contains( parentFile )) throw new RuntimeException(\"parents set should contain parentCompilationUnit\");", "+\t\tICompilationUnit workingCopy = null;", "+\t\tboolean discard = false;", "-\t\t// remove entry from parents _derivedWorkingCopy2OpenParentFiles", "-\t\tparents.remove( parentFile );", "-\t", "-\t\t// and remove entry from _derivedFile2WorkingCopy", "-\t\tif ( parents.size() == 0 )", "+\t\tsynchronized( this )", "-\t\t\t_generatedFile2WorkingCopy.remove( derivedFile );", "-\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\tworkingCopy = _generatedFile2WorkingCopy.get( derivedFile );", "+\t\t\tif ( workingCopy == null )", "+\t\t\t\treturn;", "+\t", "+\t\t\tSet<IFile> parents = _generatedWorkingCopy2OpenParentFiles.get( workingCopy );", "+", "+\t\t\t// TODO:  change these to assertions", "+\t\t\tif ( parents == null ) throw new RuntimeException( \"parents == null and it shouldnt\");", "+\t\t\tif ( ! parents.contains( parentFile )) throw new RuntimeException(\"parents set should contain parentCompilationUnit\");", "+\t\t", "+\t\t\t// remove entry from parents _derivedWorkingCopy2OpenParentFiles", "+\t\t\tparents.remove( parentFile );", "+\t", "+\t\t\t// and remove entry from _derivedFile2WorkingCopy", "+\t\t\tif ( parents.size() == 0 )", "+\t\t\t{", "+\t\t\t\t_generatedFile2WorkingCopy.remove( derivedFile );", "+\t\t\t\tdiscard = true;", "+\t\t\t}", "+\t", "+\t\tif ( discard )", "+\t\t\tworkingCopy.discardWorkingCopy();"]}], "num": 56465}
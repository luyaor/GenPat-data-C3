{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c6d97c76572a4d1c8feb859819d132b", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf1cce977e177b71e43acb84aea8fcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5439ade5de22b419e240dc2c8b747841c019940c", "commitAfterChange": "1567ad51f00f86387a1540f23d67f1de6110c300", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression expression)", "diff": ["-\t\tfinal InfixExpression infixExpression = new InfixExpression(this.ast);", "+\t\tInfixExpression infixExpression = new InfixExpression(this.ast);", "+\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_OR);", "-\t\t\trecordNodes(infixExpression, expression);", "+\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t}", "+\t\tfinal int expressionOperatorID = (expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT;", "+\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\t\t// create an extended string literal equivalent => use the extended operands list", "+\t\t\tinfixExpression.extendedOperands().add(convert(expression.right));", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression leftOperand = expression.left;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression rightOperand = null;", "+\t\t\tdo {", "+\t\t\t\trightOperand = ((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) leftOperand).right;", "+\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID", "+\t\t\t\t\t\t\t&& ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "+\t\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t \t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID)", "+\t\t\t\t\t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\t \tList extendedOperands = infixExpression.extendedOperands();", "+\t\t\t\t \tInfixExpression temp = new InfixExpression(this.ast);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t}", "+\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t \tExpression leftSide = convert(leftOperand);", "+\t\t\t\t\ttemp.setLeftOperand(leftSide);", "+\t\t\t\t\ttemp.setSourceRange(leftSide.getStartPosition(), leftSide.getLength());", "+\t\t\t\t\tint size = extendedOperands.size();", "+\t\t\t\t \tfor (int i = 0; i < size - 1; i++) {", "+\t\t\t\t \t\tExpression expr = temp;", "+\t\t\t\t \t\ttemp = new InfixExpression(this.ast);", "+\t\t\t\t \t\t", "+\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t\t}\t\t\t\t \t", "+\t\t\t\t \t\ttemp.setLeftOperand(expr);", "+\t\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t\t\ttemp.setSourceRange(expr.getStartPosition(), expr.getLength());", "+\t\t\t\t \t}", "+\t\t\t\t \tinfixExpression = temp;", "+\t\t\t\t \tfor (int i = 0; i < size; i++) {", "+\t\t\t\t \t\tExpression extendedOperand = (Expression) extendedOperands.remove(size - 1 - i);", "+\t\t\t\t \t\ttemp.setRightOperand(extendedOperand);", "+\t\t\t\t \t\tint startPosition = temp.getLeftOperand().getStartPosition();", "+\t\t\t\t \t\ttemp.setSourceRange(startPosition, extendedOperand.getStartPosition() + extendedOperand.getLength() - startPosition);", "+\t\t\t\t \t\tif (temp.getLeftOperand().getNodeType() == ASTNode.INFIX_EXPRESSION) {", "+\t\t\t\t \t\t\ttemp = (InfixExpression) temp.getLeftOperand();", "+\t\t\t\t \t\t}", "+\t\t\t\t \t}", "+\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "+\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn infixExpression;", "+\t\t\t\t}", "+\t\t\t\tinfixExpression.extendedOperands().add(0, convert(rightOperand));", "+\t\t\t\tleftOperand = ((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) leftOperand).left;", "+\t\t\t} while (leftOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0));", "+\t\t\tExpression leftExpression = convert(leftOperand);", "+\t\t\tinfixExpression.setLeftOperand(leftExpression);", "+\t\t\tinfixExpression.setRightOperand((Expression)infixExpression.extendedOperands().remove(0));", "+\t\t\tint startPosition = leftExpression.getStartPosition();", "+\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\treturn infixExpression;", "-\t\tint sourceStart = leftExpression.getStartPosition();", "-\t\tinfixExpression.setSourceRange(sourceStart, expression.sourceEnd - sourceStart + 1);", "+\t\tint startPosition = leftExpression.getStartPosition();", "+\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3ea17bdfbde3a1378f47ee3b5e102fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5439ade5de22b419e240dc2c8b747841c019940c", "commitAfterChange": "1567ad51f00f86387a1540f23d67f1de6110c300", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression)", "diff": ["+\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\t\trecordNodes(infixExpression, expression);", "+\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t}", "+\t\tfinal int expressionOperatorID = (expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT;", "+\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\t\t// create an extended string literal equivalent => use the extended operands list", "+\t\t\tinfixExpression.extendedOperands().add(convert(expression.right));", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression leftOperand = expression.left;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression rightOperand = null;", "+\t\t\tdo {", "+\t\t\t\trightOperand = ((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) leftOperand).right;", "+\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID", "+\t\t\t\t\t\t\t&& ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "+\t\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t \t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID)", "+\t\t\t\t\t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\t \tList extendedOperands = infixExpression.extendedOperands();", "+\t\t\t\t \tInfixExpression temp = new InfixExpression(this.ast);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t}", "+\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t \tExpression leftSide = convert(leftOperand);", "+\t\t\t\t\ttemp.setLeftOperand(leftSide);", "+\t\t\t\t\ttemp.setSourceRange(leftSide.getStartPosition(), leftSide.getLength());", "+\t\t\t\t\tint size = extendedOperands.size();", "+\t\t\t\t \tfor (int i = 0; i < size - 1; i++) {", "+\t\t\t\t \t\tExpression expr = temp;", "+\t\t\t\t \t\ttemp = new InfixExpression(this.ast);", "+\t\t\t\t \t\t", "+\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t\t}\t\t\t\t \t", "+\t\t\t\t \t\ttemp.setLeftOperand(expr);", "+\t\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t\t\ttemp.setSourceRange(expr.getStartPosition(), expr.getLength());", "+\t\t\t\t \t}", "+\t\t\t\t \tinfixExpression = temp;", "+\t\t\t\t \tfor (int i = 0; i < size; i++) {", "+\t\t\t\t \t\tExpression extendedOperand = (Expression) extendedOperands.remove(size - 1 - i);", "+\t\t\t\t \t\ttemp.setRightOperand(extendedOperand);", "+\t\t\t\t \t\tint startPosition = temp.getLeftOperand().getStartPosition();", "+\t\t\t\t \t\ttemp.setSourceRange(startPosition, extendedOperand.getStartPosition() + extendedOperand.getLength() - startPosition);", "+\t\t\t\t \t\tif (temp.getLeftOperand().getNodeType() == ASTNode.INFIX_EXPRESSION) {", "+\t\t\t\t \t\t\ttemp = (InfixExpression) temp.getLeftOperand();", "+\t\t\t\t \t\t}", "+\t\t\t\t \t}", "+\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "+\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn infixExpression;", "+\t\t\t\t}", "+\t\t\t\tinfixExpression.extendedOperands().add(0, convert(rightOperand));", "+\t\t\t\tleftOperand = ((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) leftOperand).left;", "+\t\t\t} while (leftOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0));", "+\t\t\tExpression leftExpression = convert(leftOperand);", "+\t\t\tinfixExpression.setLeftOperand(leftExpression);", "+\t\t\tinfixExpression.setRightOperand((Expression)infixExpression.extendedOperands().remove(0));", "+\t\t\tint startPosition = leftExpression.getStartPosition();", "+\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\treturn infixExpression;", "-\t"]}], "num": 5548}
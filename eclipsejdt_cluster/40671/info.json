{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6797caec8522284da0afdf8a6edd165b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "422f7fcdc84c0d5d4371d898586fae32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 122, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \t\t \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "diff": ["+\t\t", "+\tprivate void findConstructors(", "+\t\tReferenceBinding currentType,", "+\t\tTypeBinding[] argTypes,", "+\t\tScope scope,", "+\t\tInvocationSite invocationSite,", "+\t\tboolean forAnonymousType,", "+\t\tboolean exactMatch,", "+\t\tboolean isQualified,", "+\t\tint relevance) {", "+\t\t\t\t\t", "-\t\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);", "-", "-\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "-\t\t\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "-\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "-\t\t\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "-\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "-\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "-\t\t\t\t\t\t\tif(original != constructor) {", "-\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\tchar[] typeCompletion = null;", "+\t\t\t\t\t\tif (!exactMatch) {", "+\t\t\t\t\t\t\ttypeCompletion = ", "+\t\t\t\t\t\t\t\tisQualified ?", "+\t\t\t\t\t\t\t\t\t\tCharOperation.concat(currentType.qualifiedPackageName(), currentType.qualifiedSourceName(), '.') :", "+\t\t\t\t\t\t\t\t\t\t\tcurrentType.sourceName();", "+\t\t\t\t\t\t\tif (this.source != null", "+\t\t\t\t\t\t\t\t\t\t&& this.source.length > this.endPosition", "+\t\t\t\t\t\t\t\t\t\t&& this.source[this.endPosition] == '(') {", "+\t\t\t\t\t\t\t\tcompletion = CharOperation.NO_CHAR;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcompletion = new char[] { '(', ')' };", "-\t\t\t\t\t\t\tproposal.setKey(constructor.computeUniqueKey());", "-\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "-\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "-\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "-\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "-\t\t\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\t\t\t//proposal.setTypeName(null);", "-\t\t\t\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "-\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "-\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\tif (!exactMatch) {", "+\t\t\t\t\t\t\tif(!isIgnored(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION, CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\tchar[] packageName = currentType.isLocalType() ? null : currentType.qualifiedPackageName();", "+\t\t\t\t\t\t\t\tchar[] typeName = currentType.qualifiedSourceName();", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "+\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tproposal.setKey(constructor.computeUniqueKey());", "+\t\t\t\t\t\t\t\tproposal.setDeclarationPackageName(packageName);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationTypeName(typeName);", "+\t\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tInternalCompletionProposal typeProposal = createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\ttypeProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\t\t\t\ttypeProposal.completionEngine = this;", "+\t\t\t\t\t\t\t\ttypeProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\t\t\t\ttypeProposal.setSignature(getRequiredTypeSignature(currentType));", "+\t\t\t\t\t\t\t\ttypeProposal.setPackageName(packageName);", "+\t\t\t\t\t\t\t\ttypeProposal.setTypeName(typeName);", "+\t\t\t\t\t\t\t\ttypeProposal.setCompletion(typeCompletion);", "+\t\t\t\t\t\t\t\ttypeProposal.setFlags(currentType.modifiers);", "+\t\t\t\t\t\t\t\ttypeProposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\ttypeProposal.setTokenRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\ttypeProposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tproposal.setRequiredProposals( new CompletionProposal[]{typeProposal});", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "+\t\t\t\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "+\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tproposal.setKey(constructor.computeUniqueKey());", "+\t\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);", "-", "+\t\t\t\t\t\tchar[] typeCompletion = null;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (!exactMatch) {", "+\t\t\t\t\t\t\t\ttypeCompletion = ", "+\t\t\t\t\t\t\t\t\tisQualified ?", "+\t\t\t\t\t\t\t\t\t\t\tCharOperation.concat(currentType.qualifiedPackageName(), currentType.qualifiedSourceName(), '.') :", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentType.sourceName();", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tif (this.source != null", "+\t\t\t\t\t\t\t\t\t\t\t&& this.source.length > this.endPosition", "+\t\t\t\t\t\t\t\t\t\t\t&& this.source[this.endPosition] == '(') {", "+\t\t\t\t\t\t\t\t\tcompletion = CharOperation.NO_CHAR;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcompletion = new char[] { '(', ')' };", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "-\t\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "-\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "-\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "-\t\t\t\t\t\t\tif(original != constructor) {", "-\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\tif (!exactMatch) {", "+\t\t\t\t\t\t\tif(!isIgnored(CompletionProposal.CONSTRUCTOR_INVOCATION, CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\tchar[] packageName = currentType.isLocalType() ? null : currentType.qualifiedPackageName();", "+\t\t\t\t\t\t\t\tchar[] typeName = currentType.qualifiedSourceName();", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.CONSTRUCTOR_INVOCATION, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tproposal.setDeclarationPackageName(packageName);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationTypeName(typeName);", "+\t\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t", "+\t\t\t\t\t\t\t\tInternalCompletionProposal typeProposal = createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\ttypeProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\t\t\t\ttypeProposal.completionEngine = this;", "+\t\t\t\t\t\t\t\ttypeProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\t\t\t\ttypeProposal.setSignature(getRequiredTypeSignature(currentType));", "+\t\t\t\t\t\t\t\ttypeProposal.setPackageName(packageName);", "+\t\t\t\t\t\t\t\ttypeProposal.setTypeName(typeName);", "+\t\t\t\t\t\t\t\ttypeProposal.setCompletion(typeCompletion);", "+\t\t\t\t\t\t\t\ttypeProposal.setFlags(currentType.modifiers);", "+\t\t\t\t\t\t\t\ttypeProposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\ttypeProposal.setTokenRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\ttypeProposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tproposal.setRequiredProposals( new CompletionProposal[]{typeProposal});", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tproposal.setIsContructor(true);", "+\t\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "-\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "-\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "-\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "-\t\t\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\t\t\t//proposal.setTypeName(null);", "-\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "-\t\t\t\t\t\t\tproposal.setIsContructor(true);", "-\t\t\t\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "-\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc > 0) ? this.startPosition : this.endPosition;", "-\t\t\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "-\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "+\t\t\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t\t\t\tproposal.setIsContructor(true);", "+\t\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc > 0) ? this.startPosition : this.endPosition;", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "-\t\t\t\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "-\t\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.JAVADOC_METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "-\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "-\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "-\t\t\t\t\t\t\tif(original != constructor) {", "-\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "-\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "-\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "-\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "-\t\t\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\t\t\t//proposal.setTypeName(null);", "-\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "-\t\t\t\t\t\t\tproposal.setIsContructor(true);", "-\t\t\t\t\t\t\tproposal.setCompletion(javadocCompletion);", "-\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "-\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "-\t\t\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "-\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "-\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "+\t\t\t\t\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.JAVADOC_METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(constructor));", "+\t\t\t\t\t\t\t\tMethodBinding original = constructor.original();", "+\t\t\t\t\t\t\t\tif(original != constructor) {", "+\t\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t\t\t\tproposal.setIsContructor(true);", "+\t\t\t\t\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\t\t\t\t\tproposal.setFlags(constructor.modifiers);", "+\t\t\t\t\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "+\t\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93b4b594154ede8cd33bf6184f2ee7c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "fb96a1c85d64a712beb45b02ec6ef71c691d3831", "commitAfterChange": "382b067fdb60eb61ee53faad83800b76fff0bbbf", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \t \tprivate void findLocalMethodsFromFavorites( \t\t\tchar[] methodName, \t\t\tMethodBinding[] methods, \t\t\tScope scope, \t\t\tObjectVector methodsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "signatureAfterChange": " \t \tprivate void findLocalMethodsFromFavorites( \t\t\tchar[] methodName, \t\t\tMethodBinding[] methods, \t\t\tScope scope, \t\t\tObjectVector methodsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "diff": ["+\t\t\t\t\t", "+\t\t\t\t\tif (CharOperation.equals(method.selector, otherMethod.selector, true)) {", "+\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().doesMethodOverride(otherMethod, method)) {", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tboolean proposeStaticImport = !(this.compilerOptions.complianceLevel < ClassFileConstants.JDK1_5) &&", "+\t\t\t\t\tthis.options.suggestStaticImport;", "+\t\t\t\t", "+\t\t\t\tboolean isAlreadyImported = false;", "+\t\t\t\tif (!proposeStaticImport) {", "+\t\t\t\t\tif(!this.importCachesInitialized) {", "+\t\t\t\t\t\tthis.initializeImportCaches();", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int j = 0; j < this.importCacheCount; j++) {", "+\t\t\t\t\t\tchar[][] importName = this.importsCache[j];", "+\t\t\t\t\t\tif(CharOperation.equals(receiverType.sourceName, importName[0])) {", "+\t\t\t\t\t\t\tif (!CharOperation.equals(typeName, importName[1])) {", "+\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tisAlreadyImported = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\tcompletion = CharOperation.concat(typeName, completion, '.');", "-", "+\t\t\t\tCompilationUnitDeclaration cu = this.unitScope.referenceContext;", "+\t\t\t\tint importStart = cu.types[0].declarationSourceStart;", "+\t\t\t\tint importEnd = importStart;", "-\t\t\t\t// Standard proposal", "-\t\t\t\tif(!this.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "-\t\t\t\t\tproposal.setSignature(getSignature(method));", "-\t\t\t\t\tMethodBinding original = method.original();", "-\t\t\t\t\tif(original != method) {", "-\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t", "+\t\t\t\tif (!proposeStaticImport) {", "+\t\t\t\t\tif (isAlreadyImported) {", "+\t\t\t\t\t\tif (!isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(receiverType.sourceName, completion, '.');", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (!this.isIgnored(CompletionProposal.METHOD_REF, CompletionProposal.TYPE_IMPORT)) {", "+\t\t\t\t\t\tcompletion = CharOperation.concat(receiverType.sourceName, completion, '.');", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tchar[] typeImportCompletion = createImportCharArray(typeName, false, false);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tCompletionProposal typeImportProposal = this.createProposal(CompletionProposal.TYPE_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\t\ttypeImportProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\t\ttypeImportProposal.completionEngine = this;", "+\t\t\t\t\t\tchar[] packageName = receiverType.qualifiedPackageName();", "+\t\t\t\t\t\ttypeImportProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\t\ttypeImportProposal.setSignature(getSignature(receiverType));", "+\t\t\t\t\t\ttypeImportProposal.setPackageName(packageName);", "+\t\t\t\t\t\ttypeImportProposal.setTypeName(receiverType.qualifiedSourceName());", "+\t\t\t\t\t\ttypeImportProposal.setCompletion(typeImportCompletion);", "+\t\t\t\t\t\ttypeImportProposal.setFlags(receiverType.modifiers);", "+\t\t\t\t\t\ttypeImportProposal.setAdditionalFlags(CompletionFlags.Default);", "+\t\t\t\t\t\ttypeImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\t\ttypeImportProposal.setRelevance(relevance);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{typeImportProposal});", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "-\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "-\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "-\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "-\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "-\t\t\t\t\tproposal.setName(method.selector);", "-\t\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\t\tproposal.setFlags(method.modifiers);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (!this.isIgnored(CompletionProposal.METHOD_REF, CompletionProposal.METHOD_IMPORT)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tchar[] methodImportCompletion = createImportCharArray(CharOperation.concat(typeName, method.selector, '.'), true, false);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tCompletionProposal methodImportProposal = this.createProposal(CompletionProposal.METHOD_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\t\tmethodImportProposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\t\tmethodImportProposal.setSignature(getSignature(method));", "+\t\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmethodImportProposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\t\tmethodImportProposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\t\tmethodImportProposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\t\tmethodImportProposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\t\tmethodImportProposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\t\tmethodImportProposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\t\tmethodImportProposal.setName(method.selector);", "+\t\t\t\t\t\tmethodImportProposal.setCompletion(methodImportCompletion);", "+\t\t\t\t\t\tmethodImportProposal.setFlags(method.modifiers);", "+\t\t\t\t\t\tmethodImportProposal.setAdditionalFlags(CompletionFlags.StaticImport);", "+\t\t\t\t\t\tmethodImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\t\tmethodImportProposal.setRelevance(relevance);", "+\t\t\t\t\t\tif(parameterNames != null) methodImportProposal.setParameterNames(parameterNames);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{methodImportProposal});", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}"]}], "num": 40671}
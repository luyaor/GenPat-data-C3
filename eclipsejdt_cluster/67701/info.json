{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abd0515c6c14abe3920783bd571dd78c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15002138704b94b82f929f1a39b163e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "da1ed68bc4edf753a4c670a981fc3b101d0548b0", "commitAfterChange": "d60a521aebaf899095636d4081476cd72ef03126", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": "  private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\tif (initialTypeNames != null) {", "-\t\t// TODO (kent) should use a hash set to avoid linear search once massive source set is being processed", "-\t\tfor (int i = 0, l = initialTypeNames.length; i < l; i++) {", "-\t\t\tif (qualifiedTypeName.equals(initialTypeNames[i])) {", "-\t\t\t\tif (isIncrementalBuild)", "-\t\t\t\t\t// catch the case that a type inside a source file has been renamed but other class files are looking for it", "-\t\t\t\t\tthrow new AbortCompilation(true, new AbortIncrementalBuildException(qualifiedTypeName));", "-\t\t\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation", "-\t\t\t}", "-\t\t}", "+\tif (this.initialTypeNames != null && this.initialTypeNames.includes(qualifiedTypeName)) {", "+\t\tif (isIncrementalBuild)", "+\t\t\t// catch the case that a type inside a source file has been renamed but other class files are looking for it", "+\t\t\tthrow new AbortCompilation(true, new AbortIncrementalBuildException(qualifiedTypeName));", "+\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation", "-\tif (additionalUnits != null && sourceLocations.length > 0) {", "+\tif (this.additionalUnits != null && this.sourceLocations.length > 0) {", "-\t\tIPath qSourceFilePath = new Path(qualifiedTypeName); // doesn't have file extension", "-\t\tint qSegmentCount = qSourceFilePath.segmentCount();", "-\t\tnext : for (int i = 0, l = additionalUnits.length; i < l; i++) {", "-\t\t\tSourceFile additionalUnit = additionalUnits[i];", "-\t\t\tIPath fullPath = additionalUnit.resource.getFullPath();", "-\t\t\tint prefixCount = additionalUnit.sourceLocation.sourceFolder.getFullPath().segmentCount();", "-\t\t\tif (qSegmentCount == fullPath.segmentCount() - prefixCount) {", "-\t\t\t\tfor (int j = 0; j < qSegmentCount - 1; j++)", "-\t\t\t\t\tif (!qSourceFilePath.segment(j).equals(fullPath.segment(j + prefixCount)))", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\tif (!Util.equalsIgnoreJavaLikeExtension(fullPath.segment(qSegmentCount-1 + prefixCount), qSourceFilePath.segment(qSegmentCount-1)))", "-\t\t\t\t\tcontinue next;", "-\t\t\t\treturn new NameEnvironmentAnswer(additionalUnit, null /*no access restriction*/);", "-\t\t\t}", "-\t\t}", "+\t\tSourceFile unit = (SourceFile) this.additionalUnits.get(qualifiedTypeName); // doesn't have file extension", "+\t\tif (unit != null)", "+\t\t\treturn new NameEnvironmentAnswer(unit, null /*no access restriction*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac7e8d93ab5acdcdcb7c557965a42cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "444d0d90fb5197da92c8f8879cb5ec3d4ff0d34c", "commitAfterChange": "1be14359d87350a2a854ccd3edd15344e3b9a238", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tprintLocations(newSourceLocations, oldSourceLocations);", "+\t\t}", "-\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < newLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < oldLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tprintLocations(newSourceLocations, oldSourceLocations);", "-\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < newLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < oldLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tprintLocations(newSourceLocations, oldSourceLocations);", "-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tprintLocations(newBinaryLocations, oldBinaryLocations);", "+\t\t}", "-\t\t\tSystem.out.println(\"New binary locations:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < newLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + newBinaryLocations[i].debugPathString()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Old binary locations:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < oldLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + oldBinaryLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tprintLocations(newBinaryLocations, oldBinaryLocations);"]}], "num": 67701}
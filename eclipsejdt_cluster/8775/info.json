{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f6d94b54fb1e43e5abf2e17cf55cebf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b341e358379019ff4f536625408d25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void consumeLocalVar(char[] varName, int occurrenceCount)", "signatureAfterChange": "  \tpublic void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition)", "diff": ["-\tpublic void consumeLocalVar(char[] varName, int occurrenceCount) {", "+\tpublic void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition) {", "-\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "-\t\t\t\t\tif (CharOperation.equals(parameterNames[i], varName)) {", "-\t\t\t\t\t\t// we don't have a compiler binding for this argument, but we can craft one:", "-\t\t\t\t\t\tthis.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[i], this.methodBinding);", "-\t\t\t\t\t\tthis.methodBinding = null;", "-\t\t\t\t\t\treturn;", "+\t\t\t\tint paramPosition = -1;", "+\t\t\t\tif (parameterNames.length == 0) {", "+\t\t\t\t\tparamPosition = argumentPosition;", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {", "+\t\t\t\t\t\tif (CharOperation.equals(parameterNames[i], varName)) {", "+\t\t\t\t\t\t\tparamPosition = i;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\tif (paramPosition != -1) {", "+\t\t\t\t\t// we don't have a compiler binding for this argument, but we can craft one:", "+\t\t\t\t\tthis.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[paramPosition], this.methodBinding, paramPosition);", "+\t\t\t\t\tthis.methodBinding = null;", "+\t\t\t\t\treturn;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507e733a54dc9e41e77600edc382e7f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MethodInfo.java", "commitBeforeChange": "15d76232d8d0f6d3d473493e1ebc4002775a58d1", "commitAfterChange": "4fa17c1b64b8340e233248731ac8fd89ed4b9de6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic MethodInfo(byte classFileBytes[], IConstantPool constantPool, int offset) \t\tthrows ClassFormatException", "signatureAfterChange": " \tpublic MethodInfo(byte classFileBytes[], IConstantPool constantPool, int offset, int decodingFlags) \t\tthrows ClassFormatException", "diff": ["-\tpublic MethodInfo(byte classFileBytes[], IConstantPool constantPool, int offset)", "+\tpublic MethodInfo(byte classFileBytes[], IConstantPool constantPool, int offset, int decodingFlags)", "+\t\t\t", "+\t\tboolean no_code_attribute = (decodingFlags & IClassFileReader.METHOD_BODIES) == 0;", "-\t\t\tthis.attributes = new IClassFileAttribute[this.attributesCount];", "+\t\t\tif (no_code_attribute) {", "+\t\t\t\tif (this.attributesCount != 1) {", "+\t\t\t\t\tthis.attributes = new IClassFileAttribute[this.attributesCount - 1];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tthis.attributes = new IClassFileAttribute[this.attributesCount];", "+\t\t\t}", "-\t\t\t\tthis.codeAttribute = new CodeAttribute(classFileBytes, constantPool, offset + readOffset);", "-\t\t\t\tthis.attributes[attributesIndex++] = this.codeAttribute;", "+\t\t\t\tif (!no_code_attribute) {", "+\t\t\t\t\tthis.codeAttribute = new CodeAttribute(classFileBytes, constantPool, offset + readOffset);", "+\t\t\t\t\tthis.attributes[attributesIndex++] = this.codeAttribute;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e37077af670b0cdc2c9ed2f30c83fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected void initialize()", "signatureAfterChange": "  protected void initialize(int size)", "diff": ["-protected void initialize() {", "-\tthis.paths = new String[1];", "-\tthis.pathWithSubFolders = new boolean[1];", "-\tthis.pathRestrictions = null;", "+protected void initialize(int size) {", "+\tthis.threshold = size; // size represents the expected number of elements", "+\tint extraRoom = (int) (size * 1.75f);", "+\tif (this.threshold == extraRoom)", "+\t\textraRoom++;", "+\tthis.paths = new String[extraRoom];", "+\tthis.containerPaths = new String[extraRoom];", "+\tthis.pathWithSubFolders = new boolean[extraRoom];", "+\tthis.pathRestrictions = null; // null to optimize case where no access rules are used", "+"]}], "num": 8775}
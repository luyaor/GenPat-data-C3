{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08827e3b54ad6c220265c10bb4584c28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265237681c8c720812ad4c9a5e450fc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "b04af732a3a47936a23fd763b0f1a266fe2c010f", "commitAfterChange": "675036893efc507eeb48fc7f8ec7970945121ebd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\t \t \tpublic void run(IProgressMonitor monitor)", "signatureAfterChange": " \t\t\tpublic void run(AbstractCompilationEnv env)", "diff": ["+\t\tEnvCallback callback = new EnvCallback() {", "+\t\t\tpublic void run(AbstractCompilationEnv env) {", "+\t\t\t\t", "+\t\t\t\tdispatchToFileBasedProcessor(env);", "+\t\t\t\tfinal List<? extends CategorizedProblem> problemList = env.getProblems();", "+\t\t\t\tfinal int numProblems = problemList.size();", "+\t\t\t\tif (numProblems > 0) {", "+\t\t\t\t\tfinal CategorizedProblem[] aptCatProblems = new CategorizedProblem[numProblems];", "+\t\t\t\t\treconcileContext.putProblems(", "+\t\t\t\t}", "+\t\t\t\tenv.close();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba67330df396f14bb74e4bf342631c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "b04af732a3a47936a23fd763b0f1a266fe2c010f", "commitAfterChange": "675036893efc507eeb48fc7f8ec7970945121ebd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate void build()", "signatureAfterChange": " \t \tprivate void build()", "diff": ["-\t\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl.newBuildEnv( ", "+\t\t\t", "+\t\t\tEnvCallback buildCallback = new EnvCallback() {", "+\t\t\t\tpublic void run(AbstractCompilationEnv env) {", "+\t\t\t\t\tbuild((BuildEnv)env);", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\t", "+\t\t\t// Construct build environment, this invokes the build inside a callback", "+\t\t\t// in order to keep open the DOM AST pipeline", "+\t\t\tBuildEnv.newBuildEnv( ", "-\t\t\t\t\t_aptProject.getJavaProject());", "-\t\t\tbuild(processorEnv); ", "+\t\t\t\t\t_aptProject.getJavaProject(),", "+\t\t\t\t\tbuildCallback);"]}], "num": 52157}
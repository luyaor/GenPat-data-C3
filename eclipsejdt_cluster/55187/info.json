{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c96f984adedde1d324fa61983be26289", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d7e8cc6316645941e14c0ddf30847c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "-\t\tc.setSource(classFile);", "-\t\tc.setResolveBindings(resolveBindings);", "-\t\tc.setWorkingCopyOwner(owner);", "-\t\tASTNode result = c.createAST(monitor);", "-\t\treturn (CompilationUnit) result;", "+\t\ttry {", "+\t\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\t\tc.setSource(classFile);", "+\t\t\tc.setResolveBindings(resolveBindings);", "+\t\t\tc.setWorkingCopyOwner(owner);", "+\t\t\tASTNode result = c.createAST(monitor);", "+\t\t\treturn (CompilationUnit) result;", "+\t\t} catch (IllegalStateException e) {", "+\t\t}", "+\t\tthrow new IllegalArgumentException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3c9e847ecc55440123c1ae2cd717b84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "-\t\tc.setSource(unit);", "-\t\tc.setResolveBindings(resolveBindings);", "-\t\tc.setWorkingCopyOwner(owner);", "-\t\tASTNode result = c.createAST(monitor);", "-\t\treturn (CompilationUnit) result;", "+\t\ttry {", "+\t\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "+\t\t\tc.setSource(unit);", "+\t\t\tc.setResolveBindings(resolveBindings);", "+\t\t\tc.setWorkingCopyOwner(owner);", "+\t\t\tASTNode result = c.createAST(monitor);", "+\t\t\treturn (CompilationUnit) result;", "+\t\t} catch (IllegalStateException e) {", "+\t\t}", "+\t\tthrow new IllegalArgumentException();"]}], "num": 55187}
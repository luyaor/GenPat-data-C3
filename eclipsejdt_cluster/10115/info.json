{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a74e219e2a51447031cce2c60d8e4fae", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990661557e9c00557b989ca83e6dd06b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testBinary06()", "signatureAfterChange": " \tpublic void testBinary06()", "diff": ["-// FIXME(stephan): change to negative tests and fill in desired error messages", "-//\t\trunNegativeTestWithLibs(", "+\t\trunNegativeTestWithLibs(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"p/X1.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public abstract class X1<T extends @NonNull Object> extends ArrayList<T> {\\n\" +", "+\t\t\t\t\t\"    public <U, V extends @Nullable Object> void foo(U u, V v) {}\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t\"p/X2.java\", ", "+\t\t\t\t\t\"package p;\\n\"+", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public class X2<@NonNull W extends @Nullable Object> {}\\n\" // incompatible constraints", "+\t\t\t\t},", "+\t\t\t\tcustomOptions,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in p\\\\X2.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic class X2<@NonNull W extends @Nullable Object> {}\\n\" + ", "+\t\t\t\t\"\t                                   ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"This nullness annotation conflicts with a \\'@NonNull\\' annotation which is effective on the same type parameter \\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t// fix the bug:\t\t", "-\t\t\t\t\t\"}\\n\" +", "-\t\t\t\t\t\"class X2<@NonNull W extends @Nullable Object> {}\\n\" // incompatible constraints", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t\"p/X2.java\", ", "+\t\t\t\t\t\"package p;\\n\"+", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public class X2<@Nullable W extends Object> {}\\n\"", "+\t\t\t\t\t\"import p.X2;\\n\" +", "-\t\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + // incompatible: T is constrained to @NonNull", "+\t\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + // incompatible: T has a bound constrained to @NonNull", "+\t\t\t\t\t\"   X2<@NonNull String> strings;\\n\" +       // incompatible: W is constrained to @Nullable", "-\t\t\t\t\"1. ERROR in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + ", "+\t\t\t\t\"\t   ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T\\' which is constrained as \\'@NonNull\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tX2<@NonNull String> strings;\\n\" + ", "+\t\t\t\t\"\t   ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull String\\' is not a valid substitute for the type parameter \\'W\\' which is constrained as \\'@Nullable\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in Y1.java (at line 8)\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type '@NonNull Object' is not a valid substitute for the type parameter 'V' which is constrained as '@Nullable'\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab27bbd648fd7c4290e174e5bce74a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testBinary08()", "signatureAfterChange": " \tpublic void testBinary08()", "diff": ["+\t\trunNegativeTestWithLibs(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"p/X1.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public abstract class X1 {\\n\" +", "+\t\t\t\t\t\"    public class Inner {}\\n\" +", "+\t\t\t\t\t\"    public Object []@NonNull[] arrays(Object @NonNull[][] oa1) { return null; }\\n\" +", "+\t\t\t\t\t\"    public void nesting(@NonNull Inner i1, X1.@Nullable Inner i2) { }\\n\" +", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" +", "+\t\t\t\t\t\"    public void wildcard2(List<? super @NonNull X1> l) { }\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\tcustomOptions,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in p\\\\X1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" + ", "+\t\t\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\t\t\"This nullness annotation conflicts with a \\'@Nullable\\' annotation which is effective on the same type parameter \\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t// fix the error:", "-\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { }\\n\" + // contradiction", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends X1> l) { }\\n\" +", "-// FIXME(stephan): add desired error messages:", "+", "-//\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][];\\n\" + // unsafe", "-\t\t\t\t\t\"\t\tx.arrays(a)[0] = null;\\n\" + // illegal", "-\t\t\t\t\t\"\t\tx.nesting(null, null);\\n\" + // 1st null is illegal", "-//\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" +", "+\t\t\t\t\t\"\t\tx.arrays(a)[0] = null; // illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.nesting(null, null); // 1st null is illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" +", "-//\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "-//\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + ", "-//\t\t\t\t\"\t   ^^^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\t\t\"Incompatible type argument ...\\n\" + ", "-//\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in Y1.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][];\\n\" + ", "+\t\t\t\t\"1. WARNING in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" + ", "-\t\t\t\t\"2. ERROR in Y1.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tx.arrays(a)[0] = null;\\n\" + ", "+\t\t\t\t\"2. ERROR in Y1.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tx.arrays(a)[0] = null; // illegal\\n\" + ", "-\t\t\t\t\"3. ERROR in Y1.java (at line 7)\\n\" + ", "-\t\t\t\t\"\tx.nesting(null, null);\\n\" + ", "+\t\t\t\t\"3. ERROR in Y1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.nesting(null, null); // 1st null is illegal\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in Y1.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in Y1.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t}"]}], "num": 10115}
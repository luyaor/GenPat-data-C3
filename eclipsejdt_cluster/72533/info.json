{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f463beea890137dc2af149db4846c0a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6cdc0d87f74dd3c38a7fc772bb7c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t// by default, if not annotation, then problems are errors.", "+\t\t// Annotation implicit IDs for deprecatedField(...)", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedField:", "+\t\t// Annotation implicit IDs for deprecatedMethod(...)", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedConstructor:", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedMethod:", "+\t\t// Annotation implicit IDs for deprecatedType(...)", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedType:", "+\t\t// Annotation implicit IDs for invalidField(...)", "+\t\tcase IProblem.Annotation | IProblem.NotVisibleField:", "+\t\tcase IProblem.Annotation | IProblem.AmbiguousField:", "+\t\t// Annotation implicit IDs for invalidMethod(...)", "+\t\tcase IProblem.Annotation | IProblem.UndefinedMethod:", "+\t\tcase IProblem.Annotation | IProblem.NotVisibleMethod:", "+\t\tcase IProblem.Annotation | IProblem.ParameterMismatch:", "+\t\t// Annotation implicit IDs for invalidType(...)", "+\t\tcase IProblem.Annotation | IProblem.UndefinedType:", "+\t\tcase IProblem.Annotation | IProblem.NotVisibleType:", "+\t\t// Annotation implicit IDs for errorNoMethodFor(...)", "+\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnArrayType:", "+\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnBaseType:", "+\t\t// Annotation explicit IDs", "+\t\tcase IProblem.AnnotationUnexpectedTag:", "+\t\tcase IProblem.AnnotationMissingParamTag:", "+\t\tcase IProblem.AnnotationMissingParamName:", "+\t\tcase IProblem.AnnotationDuplicateParamName:", "+\t\tcase IProblem.AnnotationInvalidParamName:", "+\t\tcase IProblem.AnnotationMissingReturnTag:", "+\t\tcase IProblem.AnnotationDuplicateReturnTag:", "+\t\tcase IProblem.AnnotationMissingThrowsTag:", "+\t\tcase IProblem.AnnotationMissingThrowsClassName:", "+\t\tcase IProblem.AnnotationInvalidThrowsClass:", "+\t\tcase IProblem.AnnotationDuplicateThrowsClassName:", "+\t\tcase IProblem.AnnotationInvalidThrowsClassName:", "+\t\tcase IProblem.AnnotationMissingSeeReference:", "+\t\tcase IProblem.AnnotationInvalidSeeReference:", "+\t\tcase IProblem.AnnotationInvalidSeeHref:", "+\t\tcase IProblem.AnnotationInvalidSeeArgs:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+", "+\t\tcase IProblem.AnnotationMissing:", "+\t\t\tif (!this.options.reportMissingAnnotation) return Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+", "+\t\t// by default problems are errors.", "-\t\t\tif ((problemId & IProblem.Annotation) == IProblem.Annotation) {", "-\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ac52958c954a20366f19f684f059bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f1ecb4b2d8ea593a495f1608bdd4d8fccb10a732", "commitAfterChange": "575694a4feaf3caf1988ca9a05c237c3a23369b5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t// Javadoc implicit IDs for deprecatedField(...)", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedField:", "-\t\t// Javadoc implicit IDs for deprecatedMethod(...)", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedConstructor:", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedMethod:", "-\t\t// Javadoc implicit IDs for deprecatedType(...)", "-\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedType:", "-\t\t// Javadoc implicit IDs for invalidField(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedField:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleField:", "-\t\tcase IProblem.Javadoc | IProblem.AmbiguousField:", "-\t\t// Javadoc implicit IDs for invalidConstructor(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedConstructor:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleConstructor:", "-\t\t// Javadoc implicit IDs for invalidMethod(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedMethod:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleMethod:", "-\t\tcase IProblem.Javadoc | IProblem.ParameterMismatch:", "-\t\t// Javadoc implicit IDs for invalidType(...)", "-\t\tcase IProblem.Javadoc | IProblem.UndefinedType:", "-\t\tcase IProblem.Javadoc | IProblem.NotVisibleType:", "-\t\t// Javadoc implicit IDs for errorNoMethodFor(...)", "-\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnArrayType:", "-\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnBaseType:", "+\t\tcase IProblem.JavadocUsingDeprecatedField:", "+\t\tcase IProblem.JavadocUsingDeprecatedConstructor:", "+\t\tcase IProblem.JavadocUsingDeprecatedMethod:", "+\t\tcase IProblem.JavadocUsingDeprecatedType:", "+\t\tcase IProblem.JavadocUndefinedField:", "+\t\tcase IProblem.JavadocNotVisibleField:", "+\t\tcase IProblem.JavadocAmbiguousField:", "+\t\tcase IProblem.JavadocUndefinedConstructor:", "+\t\tcase IProblem.JavadocNotVisibleConstructor:", "+\t\tcase IProblem.JavadocAmbiguousConstructor:", "+\t\tcase IProblem.JavadocUndefinedMethod:", "+\t\tcase IProblem.JavadocNotVisibleMethod:", "+\t\tcase IProblem.JavadocAmbiguousMethod:", "+\t\tcase IProblem.JavadocParameterMismatch:", "+\t\tcase IProblem.JavadocUndefinedType:", "+\t\tcase IProblem.JavadocNotVisibleType:", "+\t\tcase IProblem.JavadocAmbiguousType:", "+\t\tcase IProblem.JavadocInternalTypeNameProvided:", "+\t\tcase IProblem.JavadocNoMessageSendOnArrayType:", "+\t\tcase IProblem.JavadocNoMessageSendOnBaseType:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adcc6fa0420c1cf4a867ff111953ed23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["+\t\t/*", "+\t\t * Javadoc syntax errors", "+\t\t */", "+\t\t// Javadoc explicit IDs", "+\t\tcase IProblem.JavadocUnexpectedTag:", "+\t\tcase IProblem.JavadocDuplicateReturnTag:", "+\t\tcase IProblem.JavadocInvalidThrowsClass:", "+\t\tcase IProblem.JavadocInvalidSeeReference:", "+\t\tcase IProblem.JavadocInvalidSeeHref:", "+\t\tcase IProblem.JavadocInvalidSeeArgs:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+", "+\t\t/*", "+\t\t * Javadoc tags resolved references errors", "+\t\t */", "+\t\tcase IProblem.JavadocInvalidParamName:", "+\t\tcase IProblem.JavadocDuplicateParamName:", "+\t\tcase IProblem.JavadocMissingParamName:", "+\t\tcase IProblem.JavadocInvalidThrowsClassName:", "+\t\tcase IProblem.JavadocDuplicateThrowsClassName:", "+\t\tcase IProblem.JavadocMissingThrowsClassName:", "+\t\tcase IProblem.JavadocMissingSeeReference:", "-\t\t// Javadoc explicit IDs", "-\t\tcase IProblem.JavadocUnexpectedTag:", "-\t\tcase IProblem.JavadocMissingParamTag:", "-\t\tcase IProblem.JavadocMissingParamName:", "-\t\tcase IProblem.JavadocDuplicateParamName:", "-\t\tcase IProblem.JavadocInvalidParamName:", "-\t\tcase IProblem.JavadocMissingReturnTag:", "-\t\tcase IProblem.JavadocDuplicateReturnTag:", "-\t\tcase IProblem.JavadocMissingThrowsTag:", "-\t\tcase IProblem.JavadocMissingThrowsClassName:", "-\t\tcase IProblem.JavadocInvalidThrowsClass:", "-\t\tcase IProblem.JavadocDuplicateThrowsClassName:", "-\t\tcase IProblem.JavadocInvalidThrowsClassName:", "-\t\tcase IProblem.JavadocMissingSeeReference:", "-\t\tcase IProblem.JavadocInvalidSeeReference:", "-\t\tcase IProblem.JavadocInvalidSeeHref:", "-\t\tcase IProblem.JavadocInvalidSeeArgs:", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\tif (!this.options.reportInvalidJavadocTags)", "+\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\telse", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t/*", "+\t\t * Javadoc missing tags errors", "+\t\t */", "+\t\tcase IProblem.JavadocMissingParamTag:", "+\t\tcase IProblem.JavadocMissingReturnTag:", "+\t\tcase IProblem.JavadocMissingThrowsTag:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.MissingJavadocTags);", "+", "+\t\t/*", "+\t\t * Missing Javadoc errors", "+\t\t */", "-\t\t\tif (!this.options.reportMissingJavadoc) return Ignore;", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\treturn this.options.getSeverity(CompilerOptions.MissingJavadocComments);"]}], "num": 72533}
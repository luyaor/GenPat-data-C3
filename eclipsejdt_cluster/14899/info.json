{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23fef54c465bb258b770a403419741a6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dd86caa6f1e0b5fb2b976d4acadc343", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a6d9bda80e868cca3f3164e68cf46fd5fb2642ae", "commitAfterChange": "b91ada4688442ba390f3bab334c211412d8a03f2", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tprivate void rewriteReturnType(MethodDeclaration node, boolean isConstructor, boolean isConstructorChange)", "signatureAfterChange": "  \tprivate void rewriteReturnType(MethodDeclaration node, boolean isConstructor, boolean isConstructorChange)", "diff": ["+\t\t// difficult cases: return type insert or remove", "-\t\t\ttry {", "-\t\t\t\tint startPos= node.getStartPosition();", "-\t\t\t\t", "-\t\t\t\tgetScanner().setOffset(startPos);", "-\t\t\t\tint token= getScanner().readNext(true);", "-\t\t\t\twhile (TokenScanner.isModifier(token)) {", "-\t\t\t\t\tstartPos= getScanner().getCurrentEndOffset();", "-\t\t\t\t\ttoken= getScanner().readNext(true);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tTextEditGroup editGroup= getEditGroup(node, property);", "-\t\t\t\tif (isConstructor || !returnTypeExists) { // insert", "-\t\t\t\t\tdoTextInsert(startPos, \" \", editGroup); //$NON-NLS-1$", "-\t\t\t\t\tdoTextInsert(startPos, newReturnType, getIndent(startPos), true, editGroup);", "-\t\t\t\t} else { // remove", "-\t\t\t\t\tint len= getExtendedEnd(originalReturnType) - startPos;", "-\t\t\t\t\tdoTextRemoveAndVisit(startPos, len, originalReturnType, editGroup);", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t\t// use the start offset of the method name to insert", "+\t\t\tASTNode originalMethodName= (ASTNode) getOriginalValue(node, MethodDeclaration.NAME_PROPERTY);", "+\t\t\tint nextStart= getExtendedOffset(originalMethodName);", "+\t\t\tTextEditGroup editGroup= getEditGroup(node, property);", "+\t\t\tif (isConstructor || !returnTypeExists) { // insert", "+\t\t\t\tdoTextInsert(nextStart, newReturnType, getIndent(nextStart), true, editGroup);", "+\t\t\t\tdoTextInsert(nextStart, \" \", editGroup); //$NON-NLS-1$", "+\t\t\t} else { // remove up to the method name", "+\t\t\t\tint offset= getExtendedOffset(originalReturnType);", "+\t\t\t\tdoTextRemoveAndVisit(offset, nextStart - offset, originalReturnType, editGroup);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91be1083f5baacd2205a8e36e2a513d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 40, "signatureBeforeChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int startPos, String keyword)", "signatureAfterChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "diff": ["-\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int startPos, String keyword) {", "-\t\t\tfStartPos= startPos;", "-\t\t\tfList= getEvent(parent, property).getChildren();", "+\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword) {", "+\t\t\tthis.startPos= offset;", "+\t\t\tthis.list= getEvent(parent, property).getChildren();", "-\t\t\tint total= fList.length;", "+\t\t\tint total= this.list.length;", "-\t\t\t\treturn fStartPos;", "+\t\t\t\treturn this.startPos;", "-\t\t\t\tint currMark= fList[i].getChangeKind();", "+\t\t\t\tint currMark= this.list[i].getChangeKind();", "-\t\t\t\t\t\tASTNode elem= (ASTNode) fList[i].getOriginalValue();", "+\t\t\t\t\t\tASTNode elem= (ASTNode) this.list[i].getOriginalValue();", "-\t\t\t\t\tTextEditGroup editGroup= getEditGroup(fList[0]); // first node is insert", "-\t\t\t\t\tdoTextInsert(startPos, keyword, editGroup);", "+\t\t\t\t\tTextEditGroup editGroup= getEditGroup(this.list[0]); // first node is insert", "+\t\t\t\t\tdoTextInsert(offset, keyword, editGroup);", "-\t\t\t\tcurrPos= startPos;", "+\t\t\t\tcurrPos= offset;", "-\t\t\t\tcurrPos= startPos;", "+\t\t\t\tcurrPos= offset;", "-\t\t\t\tRewriteEvent currEvent= fList[i];", "+\t\t\t\tRewriteEvent currEvent= this.list[i];", "-\t\t\t\t\t\t\tif (fList[nextIndex].getChangeKind() != RewriteEvent.INSERTED) {", "+\t\t\t\t\t\t\tif (this.list[nextIndex].getChangeKind() != RewriteEvent.INSERTED) {", "-\t\t\t\t\t} else if (fList[nextIndex].getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\t\t\t} else if (this.list[nextIndex].getChangeKind() != RewriteEvent.UNCHANGED) {"]}], "num": 14899}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e897b19ff5df08bc15dffbf64413f06d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e6366bd6765e6a0b3d528b145a25c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object alignmentForResourcesInTry = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_RESOURCES_IN_TRY);", "+\t\tif (alignmentForResourcesInTry != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_resources_in_try = Integer.parseInt((String) alignmentForResourcesInTry);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_resources_in_try = Alignment.M_NEXT_PER_LINE_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_resources_in_try = Alignment.M_NEXT_PER_LINE_SPLIT;", "+\t\t\t}", "+\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object alignmentForUnionTypeInMulticatch = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_UNION_TYPE_IN_MULTICATCH);", "+\t\tif (alignmentForUnionTypeInMulticatch != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_union_type_in_multicatch = Integer.parseInt((String) alignmentForUnionTypeInMulticatch);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_union_type_in_multicatch = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_union_type_in_multicatch = Alignment.M_COMPACT_SPLIT;", "+\t\tfinal Object insertSpaceAfterOpeningParenInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TRY);", "+\t\tif (insertSpaceAfterOpeningParenInTryOption != null) {", "+\t\t\tthis.insert_space_after_opening_paren_in_try = JavaCore.INSERT.equals(insertSpaceAfterOpeningParenInTryOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceAfterSemicolonInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_TRY_RESOURCES);", "+\t\tif (insertSpaceAfterSemicolonInTryOption != null) {", "+\t\t\tthis.insert_space_after_semicolon_in_try_resources = JavaCore.INSERT.equals(insertSpaceAfterSemicolonInTryOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingParenInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TRY);", "+\t\tif (insertSpaceBeforeClosingParenInTryOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren_in_try = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenInTryOption);", "+\t\tfinal Object insertSpaceBeforeOpeningParenInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TRY);", "+\t\tif (insertSpaceBeforeOpeningParenInTryOption != null) {", "+\t\t\tthis.insert_space_before_opening_paren_in_try = JavaCore.INSERT.equals(insertSpaceBeforeOpeningParenInTryOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeSemicolonInTryOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_TRY_RESOURCES);", "+\t\tif (insertSpaceBeforeSemicolonInTryOption != null) {", "+\t\t\tthis.insert_space_before_semicolon_in_try_resources = JavaCore.INSERT.equals(insertSpaceBeforeSemicolonInTryOption);", "+\t\t}", "+\t\tfinal Object wrapBeforeOrOperatorMulticatchOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_WRAP_BEFORE_OR_OPERATOR_MULTICATCH);", "+\t\tif (wrapBeforeOrOperatorMulticatchOption != null) {", "+\t\t\tthis.wrap_before_or_operator_multicatch = DefaultCodeFormatterConstants.TRUE.equals(wrapBeforeOrOperatorMulticatchOption);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b00b4dd28c1204cda9249de7e7ed46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\tfinal Object bracePositionForBlockInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK_IN_CASE);", "+\t\tif (bracePositionForBlockInCaseOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_block_in_case = (String) bracePositionForBlockInCaseOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_block_in_case = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeCatchInTryStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH_IN_TRY_STATEMENT);", "+\t\tif (insertNewLineBeforeCatchInTryStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_catch_in_try_statement = JavaCore.INSERT.equals(insertNewLineBeforeCatchInTryStatementOption);", "+\t\t}", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeElseInIfStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE_IN_IF_STATEMENT);", "+\t\tif (insertNewLineBeforeElseInIfStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_else_in_if_statement = JavaCore.INSERT.equals(insertNewLineBeforeElseInIfStatementOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeFinallyInTryStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY_IN_TRY_STATEMENT);", "+\t\tif (insertNewLineBeforeFinallyInTryStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_finally_in_try_statement = JavaCore.INSERT.equals(insertNewLineBeforeFinallyInTryStatementOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeWhileInDoStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT);", "+\t\tif (insertNewLineBeforeWhileInDoStatementOption != null) {", "+\t\t\tthis.insert_new_line_before_while_in_do_statement = JavaCore.INSERT.equals(insertNewLineBeforeWhileInDoStatementOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterColonInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE);", "+\t\tif (insertSpaceAfterColonInCaseOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_case = JavaCore.INSERT.equals(insertSpaceAfterColonInCaseOption);", "+\t\tfinal Object keepEmptyArrayInitializerOnOneLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_EMPTY_ARRAY_INITIALIZER_ON_ONE_LINE);", "+\t\tif (keepEmptyArrayInitializerOnOneLineOption != null) {", "+\t\t\tthis.keep_empty_array_initializer_on_one_line = DefaultCodeFormatterConstants.TRUE.equals(keepEmptyArrayInitializerOnOneLineOption);", "+\t\t}"]}], "num": 11110}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "114c1e828f93a9297c664a443912905b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565fd5a17cbf45fd131e2193d5c0ca8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e91110df42d468297a7f0f4f917c63937b06463a", "commitAfterChange": "347a15ddb09354fd82312f43e8a959f68c39e906", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean checkNegative4()", "diff": ["-\t */", "-\tprivate boolean collectElements() {", "-\t\t_elementN1 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "-\t\tif (null == _elementN1 || _elementN1.getKind() != ElementKind.CLASS) {", "-\t\t\treportError(\"Element Negative1 was not found or was not a class\");", "-\t\t\treturn false;", "-\t\t}", "-\t\t_elementN2 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative2\");", "-\t\tif (null == _elementN2 || _elementN2.getKind() != ElementKind.CLASS) {", "-\t\t\treportError(\"Element Negative2 was not found or was not a class\");", "-\t\t\treturn false;", "-\t\t}", "-\t\t_elementN3 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative3\");", "-\t\tif (null == _elementN3 || _elementN3.getKind() != ElementKind.CLASS) {", "-\t\t\treportError(\"Element Negative3 was not found or was not a class\");", "-\t\t\treturn false;", "-\t\t}", "-\t\t// TODO: try collecting a nested or secondary type that extends a missing type", "-\t\treturn true;", "-\t}", "+\t */", "+\tprivate boolean checkNegative4() {", "+\t\tTypeElement elementN4 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative4\");", "+\t\tif (null == elementN4 || elementN4.getKind() != ElementKind.CLASS) {", "+\t\t\treportError(\"Element Negative3 was not found or was not a class\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tboolean foundZorkRaw = false;", "+\t\tboolean foundZorkOfString = false;", "+\t\tboolean foundIFooOfString = false;", "+\t\tboolean foundIBarRaw = false;", "+\t\tboolean foundIBarOfT1T2 = false;", "+\t\tList<? extends Element> enclosedElements = elementN4.getEnclosedElements();", "+\t\tfor (Element element : enclosedElements) {", "+\t\t\tElementKind kind = element.getKind();", "+\t\t\tif (kind != ElementKind.METHOD)", "+\t\t\t\tcontinue;", "+\t\t\tString name = element.getSimpleName().toString();", "+\t\t\tif (\"zorkRaw\".equals(name)) {", "+\t\t\t\tfoundZorkRaw = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"zorkOfString\".equals(name)) {", "+\t\t\t\tfoundZorkOfString = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"ifooOfString\".equals(name)) {", "+\t\t\t\tfoundIFooOfString = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"ibarRaw\".equals(name)) {", "+\t\t\t\tfoundIBarRaw = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"ibarOfT1T2\".equals(name)) {", "+\t\t\t\tfoundIBarOfT1T2 = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!foundZorkRaw) {", "+\t\t\treportError(\"Didn't find element Negative4.zorkRaw\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundZorkOfString) {", "+\t\t\treportError(\"Didn't find element Negative4.zorkOfString\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundIFooOfString) {", "+\t\t\treportError(\"Didn't find element Negative4.ifooOfString\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundIBarRaw) {", "+\t\t\treportError(\"Didn't find element Negative4.ibarRaw\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundIBarOfT1T2) {", "+\t\t\treportError(\"Didn't find element Negative4.ibarOfT1T2\");", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871b24b03e8a0baf0901e3e527cd9165", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate ASTNode temporaryCreateASTDispatch(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\tprivate ASTNode temporaryCreateASTDispatch(IProgressMonitor monitor) {", "-\t\t// old AST.parse(...)", "-\t\tif (this.astKind != K_COMPILATION_UNIT) {", "-\t\t\treturn parse(this.astKind, this.rawSource, this.sourceOffset, this.sourceLength, this.compilerOptions);", "-\t\t}", "-\t\t// old AST.parsePartialCompilationUnit(...)", "-\t\tif (this.partial) {", "-\t\t\tif (this.compilationUnitSource != null) {", "-\t\t\t\treturn parsePartialCompilationUnit(this.compilationUnitSource, this.focalPointPosition, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t\t}", "-\t\t\tif (this.classFileSource != null) {", "-\t\t\t\treturn parsePartialCompilationUnit(this.classFileSource, this.focalPointPosition, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t\t}", "-\t\t\tthrow new RuntimeException(\"partial parses of raw sources not implemented yet\"); //$NON-NLS-1$", "-\t\t}", "-\t\t// old AST.parseCompilationUnit(...)", "-\t\tif (this.rawSource != null) {", "-\t\t\tif (unitName != null || project != null) {", "-\t\t\t\treturn parseCompilationUnit(this.rawSource, this.unitName, this.project, this.workingCopyOwner, monitor);", "-\t\t\t} else {", "-\t\t\t\treturn parseCompilationUnit(this.rawSource, this.compilerOptions);", "-\t\t\t}", "-\t\t}", "-\t\tif (this.compilationUnitSource != null) {", "-\t\t\treturn parseCompilationUnit(this.compilationUnitSource, this.resolveBindings, this.workingCopyOwner, monitor);", "-\t\t}", "-\t\tif (this.classFileSource != null) {", "-\t\t\treturn parseCompilationUnit(this.classFileSource, this.resolveBindings, this.workingCopyOwner, monitor);", "+\tprivate ASTNode internalCreateAST(IProgressMonitor monitor) {", "+\t\tboolean needToResolveBindings = this.resolveBindings;", "+\t\tswitch(this.astKind) {", "+\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "+\t\t\tcase K_EXPRESSION :", "+\t\t\tcase K_STATEMENTS :", "+\t\t\t\tif (this.rawSource != null) {", "+\t\t\t\t\tif (this.sourceOffset + this.sourceLength > this.rawSource.length) {", "+\t\t\t\t\t    throw new IllegalStateException();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn internalCreateASTForKind();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_COMPILATION_UNIT :", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tchar[] source = null;", "+\t\t\t\t\tNodeSearcher searcher = null;", "+\t\t\t\t\tchar[][] packageName = null;", "+\t\t\t\t\tString fileName = null;", "+\t\t\t\t\tif (this.compilationUnitSource != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsource = this.compilationUnitSource.getSource().toCharArray();", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t// no source, then we cannot build anything", "+\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment)this.compilationUnitSource.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "+\t\t\t\t\t\tif (packageFragment != null){", "+\t\t\t\t\t\t\tpackageName = CharOperation.splitOn('.', packageFragment.getElementName().toCharArray());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfileName = this.compilationUnitSource.getElementName();", "+\t\t\t\t\t} else if (this.classFileSource != null) {", "+\t\t\t\t\t\tString sourceString = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tsourceString = this.classFileSource.getSource();", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// nothing to do", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t\tif (sourceString == null) {", "+\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsource = sourceString.toCharArray();", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tpackageName = CharOperation.splitOn('.', this.classFileSource.getType().getPackageFragment().getElementName().toCharArray());", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "+\t\t\t\t\t\t\tString classFileName = this.classFileSource.getElementName(); // this includes the trailing .class", "+\t\t\t\t\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "+\t\t\t\t\t\t\tfileName = String.valueOf(buffer);", "+\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (this.rawSource != null) {", "+\t\t\t\t\t\tsource = this.rawSource;", "+\t\t\t\t\t\tif (this.unitName == null || this.project == null) {", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfileName = this.unitName;", "+\t\t\t\t\t\t\tneedToResolveBindings = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (source == null) {", "+\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.partial) {", "+\t\t\t\t\t\tsearcher = new NodeSearcher(this.focalPointPosition);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needToResolveBindings) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// parse and resolve", "+\t\t\t\t\t\t\tcompilationUnitDeclaration = ", "+\t\t\t\t\t\t\t\tCompilationUnitResolver.resolve(", "+\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\tfileName,", "+\t\t\t\t\t\t\t\t\tthis.project,", "+\t\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\tthis.workingCopyOwner,", "+\t\t\t\t\t\t\t\t\tmonitor);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\t\tthis.compilerOptions);", "+\t\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.parse(", "+\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\tsearcher,", "+\t\t\t\t\t\t\t\tthis.compilerOptions);", "+\t\t\t\t\t\tneedToResolveBindings = false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn convert(monitor, compilationUnitDeclaration, source, needToResolveBindings);", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (compilationUnitDeclaration != null && this.resolveBindings) {", "+\t\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t", "+\t}"]}], "num": 51504}
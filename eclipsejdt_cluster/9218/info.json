{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfc2cd0e378fdbb76aa83850480bedf9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ac5b1a3b619fcbe6f69185b3610c49f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "d0c710b350470279ed477deeb2dc35e8e7c8e9c9", "commitAfterChange": "856dc24123fbd75a7352bb9219e0c96078aceb5a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testBug303511a() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void testBug303511a() throws JavaModelException, CoreException", "diff": ["-\t\t// Set file encoding", "-\t\tString encoding = \"Shift-JIS\";", "-\t\tif (wkspEncoding.equals(encoding))", "-\t\t\tgetWorkspaceRoot().setDefaultCharset(\"UTF-8\", null);", "-\t\tString externalPath = this.encodingProject.getLocation().toOSString() + File.separator + \"testShiftJIS.zip\";", "-\t\tIFile sourceFile = (IFile) this.encodingProject.findMember(\"src/testShiftJIS/A.java\");", "-\t\tgetWorkspaceRoot().setDefaultCharset(encoding, null);", "-\t\t", "-\t\tIClasspathEntry[] entries = this.encodingJavaProject.getRawClasspath();", "-\t\tIClasspathEntry oldEntry = null;", "-\t\tfor (int index = 0; index < entries.length; index++) {", "-\t\t\tIClasspathEntry entry = entries[index];", "-\t\t\tif (entry.getPath().toOSString().endsWith(\"testShiftJIS.jar\")) {", "-\t\t\t\toldEntry = entry;", "-\t\t\t\tIClasspathEntry newEntry = JavaCore.newLibraryEntry(entry.getPath(), new Path(externalPath), null);", "-\t\t\t\tentries[index] = newEntry; ", "+\t\ttry {", "+\t\t\t// Set file encoding", "+\t\t\tString encoding = \"Shift-JIS\";", "+\t\t\tif (wkspEncoding.equals(encoding))", "+\t\t\t\tgetWorkspaceRoot().setDefaultCharset(\"UTF-8\", null);", "+\t\t\tString externalPath = this.encodingProject.getLocation().toOSString() + File.separator + \"testShiftJIS.zip\";", "+\t\t\tIFile sourceFile = (IFile) this.encodingProject.findMember(\"src/testShiftJIS/A.java\");", "+\t\t\tgetWorkspaceRoot().setDefaultCharset(encoding, null);", "+\t\t\t", "+\t\t\tIClasspathEntry[] entries = this.encodingJavaProject.getRawClasspath();", "+\t\t\tIClasspathEntry oldEntry = null;", "+\t\t\tfor (int index = 0; index < entries.length; index++) {", "+\t\t\t\tIClasspathEntry entry = entries[index];", "+\t\t\t\tif (entry.getPath().toOSString().endsWith(\"testShiftJIS.jar\")) {", "+\t\t\t\t\toldEntry = entry;", "+\t\t\t\t\tIClasspathEntry newEntry = JavaCore.newLibraryEntry(entry.getPath(), new Path(externalPath), null);", "+\t\t\t\t\tentries[index] = newEntry; ", "+\t\t\t\t}", "-\t\t}", "-\t\tthis.encodingJavaProject.setRawClasspath(entries, null);", "-\t\tthis.encodingJavaProject.getResolvedClasspath(true);", "-\t\t", "-\t\t// Get class file and compare source (should not be the same as modify charset on zip file has no effect...)", "-\t\tIPackageFragmentRoot root = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "-\t\tISourceReference sourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "-\t\tassertNotNull(sourceRef);", "-\t\tString source = sourceRef.getSource();", "-\t\tassertNotNull(source);", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "-\t\tassertTrue(\"Sources should be decoded the same way\", encodedContents.equals(source));", "+\t\t\tthis.encodingJavaProject.setRawClasspath(entries, null);", "+\t\t\tthis.encodingJavaProject.getResolvedClasspath(true);", "+\t\t\t", "+\t\t\t// Get class file and compare source (should not be the same as modify charset on zip file has no effect...)", "+\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "+\t\t\tISourceReference sourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "+\t\t\tassertNotNull(sourceRef);", "+\t\t\tString source = sourceRef.getSource();", "+\t\t\tassertNotNull(source);", "+\t\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "+\t\t\tassertTrue(\"Sources should be decoded the same way\", encodedContents.equals(source));", "-\t\tentries = this.encodingJavaProject.getRawClasspath();", "-\t\tString sourcePath = this.encodingProject.getLocation().toOSString() + File.separator + \"src\";", "-\t\tfor (int index = 0; index < entries.length; index++) {", "-\t\t\tIClasspathEntry entry = entries[index];", "-\t\t\tif (entry.getPath().toOSString().endsWith(\"testShiftJIS.jar\")) {", "-\t\t\t\tIClasspathEntry newEntry = JavaCore.newLibraryEntry(entry.getPath(), new Path(sourcePath), null);", "-\t\t\t\tentries[index] = newEntry; ", "+\t\t\tentries = this.encodingJavaProject.getRawClasspath();", "+\t\t\tString sourcePath = this.encodingProject.getLocation().toOSString() + File.separator + \"src\";", "+\t\t\tfor (int index = 0; index < entries.length; index++) {", "+\t\t\t\tIClasspathEntry entry = entries[index];", "+\t\t\t\tif (entry.getPath().toOSString().endsWith(\"testShiftJIS.jar\")) {", "+\t\t\t\t\tIClasspathEntry newEntry = JavaCore.newLibraryEntry(entry.getPath(), new Path(sourcePath), null);", "+\t\t\t\t\tentries[index] = newEntry; ", "+\t\t\t\t}", "-\t\t}", "-\t\tthis.encodingJavaProject.setRawClasspath(entries, null);", "-\t\tthis.encodingJavaProject.getResolvedClasspath(true);", "-\t\t", "-\t\tentries = this.encodingJavaProject.getRawClasspath();", "-\t\tfor (int index = 0; index < entries.length; index++) {", "-\t\t\tIClasspathEntry entry = entries[index];", "-\t\t\tif (entry.getPath().toOSString().endsWith(\"testShiftJIS.jar\")) {", "-\t\t\t\tentries[index] = oldEntry;", "+\t\t\tthis.encodingJavaProject.setRawClasspath(entries, null);", "+\t\t\tthis.encodingJavaProject.getResolvedClasspath(true);", "+\t\t\t", "+\t\t\tentries = this.encodingJavaProject.getRawClasspath();", "+\t\t\tfor (int index = 0; index < entries.length; index++) {", "+\t\t\t\tIClasspathEntry entry = entries[index];", "+\t\t\t\tif (entry.getPath().toOSString().endsWith(\"testShiftJIS.jar\")) {", "+\t\t\t\t\tentries[index] = oldEntry;", "+\t\t\t\t}", "+\t\t\tthis.encodingJavaProject.setRawClasspath(entries, null);", "+\t\t\tthis.encodingJavaProject.getResolvedClasspath(true);", "-\t\tthis.encodingJavaProject.setRawClasspath(entries, null);", "-\t\tthis.encodingJavaProject.getResolvedClasspath(true);", "-\t\tgetWorkspaceRoot().setDefaultCharset(wkspEncoding, null);", "+\t\tfinally {", "+\t\t\tgetWorkspaceRoot().setDefaultCharset(wkspEncoding, null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb1d24e43a84aab8f89fd0afe62abb9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "d0c710b350470279ed477deeb2dc35e8e7c8e9c9", "commitAfterChange": "856dc24123fbd75a7352bb9219e0c96078aceb5a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testBug303511() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void testBug303511() throws JavaModelException, CoreException", "diff": ["-", "-\t\t// Set file encoding", "-\t\tString encoding = \"Shift-JIS\";", "-\t\tif (wkspEncoding.equals(encoding))", "-\t\t\tgetWorkspaceRoot().setDefaultCharset(\"UTF-8\", null);", "-\t\tIFile zipFile = (IFile) this.encodingProject.findMember(\"testShiftJIS.zip\"); //$NON-NLS-1$", "-\t\tIFile sourceFile = (IFile) this.encodingProject.findMember(\"src/testShiftJIS/A.java\");", "-\t\tassertNotNull(\"Cannot find class file!\", zipFile);", "-\t\tzipFile.setCharset(encoding, null);", "+\t\ttry {", "+\t\t\t// Set file encoding", "+\t\t\tString encoding = \"Shift-JIS\";", "+\t\t\tif (wkspEncoding.equals(encoding))", "+\t\t\t\tgetWorkspaceRoot().setDefaultCharset(\"UTF-8\", null);", "+\t\t\tIFile zipFile = (IFile) this.encodingProject.findMember(\"testShiftJIS.zip\"); //$NON-NLS-1$", "+\t\t\tIFile sourceFile = (IFile) this.encodingProject.findMember(\"src/testShiftJIS/A.java\");", "+\t\t\t", "+\t\t\tassertNotNull(\"Cannot find class file!\", zipFile);", "+\t\t\tzipFile.setCharset(encoding, null);", "-\t\t// Get class file and compare source (should not be the same as modify charset on zip file has no effect...)", "-\t\tIPackageFragmentRoot root = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "-\t\tISourceReference sourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "-\t\tassertNotNull(sourceRef);", "-\t\tString source = sourceRef.getSource();", "-\t\tassertNotNull(source);", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "-\t\tassertTrue(\"Sources should be decoded the same way\", encodedContents.equals(source));", "+\t\t\t// Get class file and compare source (should not be the same as modify charset on zip file has no effect...)", "+\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "+\t\t\tISourceReference sourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "+\t\t\tassertNotNull(sourceRef);", "+\t\t\tString source = sourceRef.getSource();", "+\t\t\tassertNotNull(source);", "+\t\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "+\t\t\tassertTrue(\"Sources should be decoded the same way\", encodedContents.equals(source));", "-\t\t// Reset zip file encoding", "-\t\tzipFile.setCharset(null, null);", "-\t\tString oldEncoding = this.encodingProject.getDefaultCharset();", "-\t\tthis.encodingProject.setDefaultCharset(encoding, null);", "+\t\t\t// Reset zip file encoding", "+\t\t\tzipFile.setCharset(null, null);", "+\t\t\tString oldEncoding = this.encodingProject.getDefaultCharset();", "+\t\t\tthis.encodingProject.setDefaultCharset(encoding, null);", "-\t\troot = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "-\t\tsourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "-\t\tassertNotNull(sourceRef);", "-\t\tsource = sourceRef.getSource();", "-\t\tassertNotNull(source);", "-\t\tencodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "-\t\tassertTrue(\"Sources should be decoded the same way\", encodedContents.equals(source));", "-\t\t", "-\t\tthis.encodingProject.setDefaultCharset(null, null);", "+\t\t\troot = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "+\t\t\tsourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "+\t\t\tassertNotNull(sourceRef);", "+\t\t\tsource = sourceRef.getSource();", "+\t\t\tassertNotNull(source);", "+\t\t\tencodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "+\t\t\tassertTrue(\"Sources should be decoded the same way\", encodedContents.equals(source));", "+\t\t\t", "+\t\t\tthis.encodingProject.setDefaultCharset(null, null);", "-\t\troot = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "-\t\tsourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "-\t\tassertNotNull(sourceRef);", "-\t\tsource = sourceRef.getSource();", "-\t\tassertNotNull(source);", "-\t\tencodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "-\t\tassertFalse(\"Sources should be decoded the same way\", encodedContents.equals(source));\t\t", "+\t\t\troot = getPackageFragmentRoot(\"Encoding\", \"testShiftJIS.jar\");", "+\t\t\tsourceRef = root.getPackageFragment(\"testShiftJIS\").getClassFile(\"A.class\");", "+\t\t\tassertNotNull(sourceRef);", "+\t\t\tsource = sourceRef.getSource();", "+\t\t\tassertNotNull(source);", "+\t\t\tencodedContents = new String (Util.getResourceContentsAsCharArray(sourceFile, encoding));", "+\t\t\tassertFalse(\"Sources should be decoded the same way\", encodedContents.equals(source));\t\t", "-\t\t// Reset zip file encoding", "-\t\tzipFile.setCharset(null, null);", "-\t\tthis.encodingProject.setDefaultCharset(oldEncoding, null);", "-\t\tgetWorkspaceRoot().setDefaultCharset(wkspEncoding, null);", "+\t\t\t// Reset zip file encoding", "+\t\t\tzipFile.setCharset(null, null);", "+\t\t\tthis.encodingProject.setDefaultCharset(oldEncoding, null);", "+\t\t}", "+\t\tfinally {", "+\t\t\tgetWorkspaceRoot().setDefaultCharset(wkspEncoding, null);", "+\t\t}"]}], "num": 9218}
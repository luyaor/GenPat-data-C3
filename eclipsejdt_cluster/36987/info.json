{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0ca6c0fad8ce1d43b8cdb982f733772", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0547517a3f5458c2461df30e582c324f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "63d287439f7edb74c772343f5d6ecd45d735a0b8", "commitAfterChange": "21946e5e3b8b48b03e10fc5d5f50bede065efea6", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 142, "signatureBeforeChange": "\r \tprotected void consumeRule(int act)", "signatureAfterChange": "\r \tprotected void consumeRule(int act)", "diff": ["+\t // This method is part of an automatic generation : do NOT edit-modify  \r", "-\t\tswitch (act) {\r", "-\t\t\tcase 29 : // System.out.println(\"Type ::= PrimitiveType\");\r", "-\t\t\t\tconsumePrimitiveType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");\r", "-\t\t\t\tconsumeReferenceType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");\r", "-\t\t\t\tconsumeQualifiedName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");\r", "-\t\t\t\tconsumeCompilationUnit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 54 : // System.out.println(\"EnterCompilationUnit ::=\");\r", "-\t\t\t\tconsumeEnterCompilationUnit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");\r", "-\t\t\t\tconsumeCatchHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");\r", "-\t\t\t\tconsumeImportDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");\r", "-\t\t\t\tconsumeTypeDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumePackageDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");\r", "-\t\t\t\tconsumePackageDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumeSingleTypeImportDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");\r", "-\t\t\t\tconsumeSingleTypeImportDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");\r", "-\t\t\t\tconsumeTypeImportOnDemandDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");\r", "-\t\t\t\tconsumeTypeImportOnDemandDeclarationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyTypeDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");\r", "-\t\t\t\tconsumeClassDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");\r", "-\t\t\t\tconsumeClassHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");\r", "-\t\t\t\tconsumeClassHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");\r", "-\t\t\t\tconsumeClassHeaderExtends();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");\r", "-\t\t\t\tconsumeClassHeaderImplements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");\r", "-\t\t\t\tconsumeInterfaceTypeList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");\r", "-\t\t\t\tconsumeInterfaceType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");\r", "-\t\t\t\tconsumeClassBodyDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");\r", "-\t\t\t\tconsumeClassBodyDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 110 : // System.out.println(\"Diet ::=\");\r", "-\t\t\t\tconsumeDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 111 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");\r", "-\t\t\t\tconsumeClassBodyDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 118 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyClassMemberDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 119 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");\r", "-\t\t\t\tconsumeFieldDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 121 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");\r", "-\t\t\t\tconsumeVariableDeclarators();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 124 : // System.out.println(\"EnterVariable ::=\");\r", "-\t\t\t\tconsumeEnterVariable();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 125 : // System.out.println(\"ExitVariableWithInitialization ::=\");\r", "-\t\t\t\tconsumeExitVariableWithInitialization();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 126 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");\r", "-\t\t\t\tconsumeExitVariableWithoutInitialization();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 127 : // System.out.println(\"ForceNoDiet ::=\");\r", "-\t\t\t\tconsumeForceNoDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 128 : // System.out.println(\"RestoreDiet ::=\");\r", "-\t\t\t\tconsumeRestoreDiet();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 133 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");\r", "-\t\t\t\t// set to true to consume a method with a body\r", "-\t\t\t\tconsumeMethodDeclaration(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 134 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");\r", "-\t\t\t\t// set to false to consume a method without body\r", "-\t\t\t\tconsumeMethodDeclaration(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 135 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");\r", "-\t\t\t\tconsumeMethodHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 136 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");\r", "-\t\t\t\tconsumeMethodHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodPushModifiersHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 138 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodPushModifiersHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 139 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");\r", "-\t\t\t\tconsumeMethodHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 140 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodHeaderParameters();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 141 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");\r", "-\t\t\t\tconsumeMethodHeaderExtendedDims();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 142 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");\r", "-\t\t\t\tconsumeMethodHeaderThrowsClause();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 143 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");\r", "-\t\t\t\tconsumeConstructorHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 144 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");\r", "-\t\t\t\tconsumeConstructorHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 146 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");\r", "-\t\t\t\tconsumeFormalParameterList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 147 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");\r", "-\t\t\t\t// the boolean is used to know if the modifiers should be reset\r", "-\t\t\t\tconsumeFormalParameter();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 149 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");\r", "-\t\t\t\tconsumeClassTypeList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 150 : // System.out.println(\"ClassTypeElt ::= ClassType\");\r", "-\t\t\t\tconsumeClassTypeElt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 151 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeMethodBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 152 : // System.out.println(\"NestedMethod ::=\");\r", "-\t\t\t\tconsumeNestedMethod();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 153 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");\r", "-\t\t\t\tconsumeStaticInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 154 : // System.out.println(\"StaticOnly ::= static\");\r", "-\t\t\t\tconsumeStaticOnly();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 155 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "-\t\t\t\tconsumeConstructorDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 156 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeConstructorBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 159 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");\r", "-\t\t\t\tconsumeConstructorBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 160 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 161 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(0, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 162 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 165 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 166 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");\r", "-\t\t\t\tconsumeInterfaceDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 167 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");\r", "-\t\t\t\tconsumeInterfaceHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 168 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");\r", "-\t\t\t\tconsumeInterfaceHeaderName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 170 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");\r", "-\t\t\t\tconsumeInterfaceHeaderExtends();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 173 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");\r", "-\t\t\t\tconsumeInterfaceMemberDeclarations();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 174 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyInterfaceMemberDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 177 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");\r", "-\t\t\t\tignoreMethodBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 178 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "-\t\t\t\tignoreInvalidConstructorDeclaration(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 179 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "-\t\t\t\tignoreInvalidConstructorDeclaration(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 185 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");\r", "-\t\t\t\tconsumeEmptyArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 186 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");\r", "-\t\t\t\tconsumeArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 187 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");\r", "-\t\t\t\tconsumeArrayInitializer();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 189 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");\r", "-\t\t\t\tconsumeVariableInitializers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 190 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");\r", "-\t\t\t\tconsumeBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 191 : // System.out.println(\"OpenBlock ::=\");\r", "-\t\t\t\tconsumeOpenBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 193 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");\r", "-\t\t\t\tconsumeBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 197 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");\r", "-\t\t\t\tignoreInterfaceDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 198 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");\r", "-\t\t\t\tconsumeLocalVariableDeclarationStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 199 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");\r", "-\t\t\t\tconsumeLocalVariableDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 200 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");\r", "-\t\t\t\tconsumeLocalVariableDeclaration();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 201 : // System.out.println(\"PushModifiers ::=\");\r", "-\t\t\t\tconsumePushModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 225 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");\r", "-\t\t\t\tconsumeEmptyStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 226 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");\r", "-\t\t\t\tconsumeStatementLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 227 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");\r", "-\t\t\t\tconsumeStatementLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 228 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");\r", "-\t\t\t\tconsumeExpressionStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 236 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");\r", "-\t\t\t\tconsumeStatementIfNoElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 237 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");\r", "-\t\t\t\tconsumeStatementIfWithElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 238 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");\r", "-\t\t\t\tconsumeStatementIfWithElse();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 239 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");\r", "-\t\t\t\tconsumeStatementSwitch();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 240 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");\r", "-\t\t\t\tconsumeEmptySwitchBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 243 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");\r", "-\t\t\t\tconsumeSwitchBlock();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 245 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");\r", "-\t\t\t\tconsumeSwitchBlockStatements();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 246 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");\r", "-\t\t\t\tconsumeSwitchBlockStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 248 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");\r", "-\t\t\t\tconsumeSwitchLabels();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 249 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");\r", "-\t\t\t\tconsumeCaseLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 250 : // System.out.println(\"SwitchLabel ::= default COLON\");\r", "-\t\t\t\tconsumeDefaultLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 251 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");\r", "-\t\t\t\tconsumeStatementWhile();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 252 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");\r", "-\t\t\t\tconsumeStatementWhile();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 253 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");\r", "-\t\t\t\tconsumeStatementDo();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 254 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");\r", "-\t\t\t\tconsumeStatementFor();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 255 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");\r", "-\t\t\t\tconsumeStatementFor();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 256 : // System.out.println(\"ForInit ::= StatementExpressionList\");\r", "-\t\t\t\tconsumeForInit();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 260 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");\r", "-\t\t\t\tconsumeStatementExpressionList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 261 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");\r", "-\t\t\t\tconsumeSimpleAssertStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 262 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");\r", "-\t\t\t\tconsumeAssertStatement();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 263 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");\r", "-\t\t\t\tconsumeStatementBreak();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 264 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");\r", "-\t\t\t\tconsumeStatementBreakWithLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 265 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");\r", "-\t\t\t\tconsumeStatementContinue();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 266 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");\r", "-\t\t\t\tconsumeStatementContinueWithLabel();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 267 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");\r", "-\t\t\t\tconsumeStatementReturn();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 268 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");\r", "-\t\t\t\tconsumeStatementThrow();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 269 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");\r", "-\t\t\t\tconsumeStatementSynchronized();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 270 : // System.out.println(\"OnlySynchronized ::= synchronized\");\r", "-\t\t\t\tconsumeOnlySynchronized();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 271 : // System.out.println(\"TryStatement ::= try Block Catches\");\r", "-\t\t\t\tconsumeStatementTry(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 272 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");\r", "-\t\t\t\tconsumeStatementTry(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 274 : // System.out.println(\"Catches ::= Catches CatchClause\");\r", "-\t\t\t\tconsumeCatches();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 275 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");\r", "-\t\t\t\tconsumeStatementCatch();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 277 : // System.out.println(\"PushLPAREN ::= LPAREN\");\r", "-\t\t\t\tconsumeLeftParen();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 278 : // System.out.println(\"PushRPAREN ::= RPAREN\");\r", "-\t\t\t\tconsumeRightParen();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 282 : // System.out.println(\"PrimaryNoNewArray ::= this\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayThis();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 283 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");\r", "-\t\t\t\tconsumePrimaryNoNewArray();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 286 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayNameThis();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 287 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayNameSuper();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 288 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 289 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayArrayType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 290 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");\r", "-\t\t\t\tconsumePrimaryNoNewArrayPrimitiveType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 293 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeAllocationHeader();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 294 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 295 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 296 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionQualified();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 297 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");\r", "-\t\t\t\tconsumeClassInstanceCreationExpressionName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 298 : // System.out.println(\"ClassBodyopt ::=\");\r", "-\t\t\t\tconsumeClassBodyopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 300 : // System.out.println(\"EnterAnonymousClassBody ::=\");\r", "-\t\t\t\tconsumeEnterAnonymousClassBody();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 302 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");\r", "-\t\t\t\tconsumeArgumentList();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 303 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");\r", "-\t\t\t\tconsumeArrayCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 304 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");\r", "-\t\t\t\tconsumeArrayCreationExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 306 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");\r", "-\t\t\t\tconsumeDimWithOrWithOutExprs();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 308 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");\r", "-\t\t\t\tconsumeDimWithOrWithOutExpr();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 309 : // System.out.println(\"Dims ::= DimsLoop\");\r", "-\t\t\t\tconsumeDims();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 312 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");\r", "-\t\t\t\tconsumeOneDimLoop();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 313 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");\r", "-\t\t\t\tconsumeFieldAccess(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 314 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");\r", "-\t\t\t\tconsumeFieldAccess(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 315 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationName();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 316 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationPrimary();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 317 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "-\t\t\t\tconsumeMethodInvocationSuper();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 318 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");\r", "-\t\t\t\tconsumeArrayAccess(true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 319 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");\r", "-\t\t\t\tconsumeArrayAccess(false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 321 : // System.out.println(\"PostfixExpression ::= Name\");\r", "-\t\t\t\tconsumePostfixExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 324 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 325 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, true);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 326 : // System.out.println(\"PushPosition ::=\");\r", "-\t\t\t\tconsumePushPosition();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 329 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 330 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 332 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.PLUS, false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 333 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.MINUS, false);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 335 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.TWIDDLE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 336 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");\r", "-\t\t\t\tconsumeUnaryExpression(OperatorExpression.NOT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 338 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");\r", "-\t\t\t\tconsumeCastExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 339 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");\r", "-\t\t\t\tconsumeCastExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 340 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");\r", "-\t\t\t\tconsumeCastExpressionLL1();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 342 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.MULTIPLY);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 343 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.DIVIDE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 344 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.REMAINDER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 346 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 347 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 349 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LEFT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 350 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 351 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 353 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LESS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 354 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 355 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.LESS_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.GREATER_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");\r", "-\t\t\t\tconsumeInstanceOfExpression(OperatorExpression.INSTANCEOF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 359 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");\r", "-\t\t\t\tconsumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 360 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");\r", "-\t\t\t\tconsumeEqualityExpression(OperatorExpression.NOT_EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 362 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 364 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.XOR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 366 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 368 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.AND_AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 370 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");\r", "-\t\t\t\tconsumeBinaryExpression(OperatorExpression.OR_OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 372 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");\r", "-\t\t\t\tconsumeConditionalExpression(OperatorExpression.QUESTIONCOLON);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 375 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");\r", "-\t\t\t\tconsumeAssignment();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 377 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");\r", "-\t\t\t\tignoreExpressionAssignment();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 378 : // System.out.println(\"LeftHandSide ::= Name\");\r", "-\t\t\t\tconsumeLeftHandSide();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 381 : // System.out.println(\"AssignmentOperator ::= EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(EQUAL);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 382 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(MULTIPLY);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 383 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(DIVIDE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 384 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(REMAINDER);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 385 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(PLUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 386 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(MINUS);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 387 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(LEFT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 388 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 389 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 390 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(AND);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 391 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(XOR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 392 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");\r", "-\t\t\t\tconsumeAssignmentOperator(OR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 399 : // System.out.println(\"Expressionopt ::=\");\r", "-\t\t\t\tconsumeEmptyExpression();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 403 : // System.out.println(\"ImportDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyImportDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 404 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");\r", "-\t\t\t\tconsumeImportDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 405 : // System.out.println(\"TypeDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyTypeDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 406 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");\r", "-\t\t\t\tconsumeTypeDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 407 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyClassBodyDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 408 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");\r", "-\t\t\t\tconsumeClassBodyDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 409 : // System.out.println(\"Modifiersopt ::=\");\r", "-\t\t\t\tconsumeDefaultModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 410 : // System.out.println(\"Modifiersopt ::= Modifiers\");\r", "-\t\t\t\tconsumeModifiers();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 411 : // System.out.println(\"BlockStatementsopt ::=\");\r", "-\t\t\t\tconsumeEmptyBlockStatementsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 413 : // System.out.println(\"Dimsopt ::=\");\r", "-\t\t\t\tconsumeEmptyDimsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 415 : // System.out.println(\"ArgumentListopt ::=\");\r", "-\t\t\t\tconsumeEmptyArgumentListopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 419 : // System.out.println(\"FormalParameterListopt ::=\");\r", "-\t\t\t\tconsumeFormalParameterListopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 423 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");\r", "-\t\t\t\tconsumeEmptyInterfaceMemberDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 424 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");\r", "-\t\t\t\tconsumeInterfaceMemberDeclarationsopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 425 : // System.out.println(\"NestedType ::=\");\r", "-\t\t\t\tconsumeNestedType();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 426 : // System.out.println(\"ForInitopt ::=\");\r", "-\t\t\t\tconsumeEmptyForInitopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 428 : // System.out.println(\"ForUpdateopt ::=\");\r", "-\t\t\t\tconsumeEmptyForUpdateopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 432 : // System.out.println(\"Catchesopt ::=\");\r", "-\t\t\t\tconsumeEmptyCatchesopt();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 434 : // System.out.println(\"ArrayInitializeropt ::=\");\r", "-\t\t\t\tconsumeEmptyArrayInitializeropt();\r", "-\t\t\t\tbreak;\r", "+\t  switch ( act ) {\r", "+\t    case 29 : // System.out.println(\"Type ::= PrimitiveType\");\r", "+\t\t\t    consumePrimitiveType();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");\r", "+\t\t\t    consumeReferenceType();   \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");\r", "+\t\t\t    consumeQualifiedName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");\r", "+\t\t\t    consumeCompilationUnit();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 54 : // System.out.println(\"EnterCompilationUnit ::=\");\r", "+\t\t\t    consumeEnterCompilationUnit();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");\r", "+\t\t\t    consumeCatchHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");\r", "+\t\t\t    consumeImportDeclarations();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");\r", "+\t\t\t    consumeTypeDeclarations();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");\r", "+\t\t\t     consumePackageDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");\r", "+\t\t\t     consumePackageDeclarationName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");\r", "+\t\t\t    consumeSingleTypeImportDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");\r", "+\t\t\t    consumeSingleTypeImportDeclarationName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");\r", "+\t\t\t    consumeTypeImportOnDemandDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");\r", "+\t\t\t    consumeTypeImportOnDemandDeclarationName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");\r", "+\t\t\t    consumeEmptyTypeDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");\r", "+\t\t\t    consumeClassDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");\r", "+\t\t\t    consumeClassHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");\r", "+\t\t\t    consumeClassHeaderName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");\r", "+\t\t\t    consumeClassHeaderExtends();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");\r", "+\t\t\t    consumeClassHeaderImplements();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");\r", "+\t\t\t    consumeInterfaceTypeList();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");\r", "+\t\t\t    consumeInterfaceType();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");\r", "+\t\t\t    consumeClassBodyDeclarations();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");\r", "+\t\t\t    consumeClassBodyDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 110 : // System.out.println(\"Diet ::=\");\r", "+\t\t\t    consumeDiet();  \r", "+\t\t\t\tbreak ;\r", "+\t\r", "+\t    case 111 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");\r", "+\t\t\t    consumeClassBodyDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 118 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");\r", "+\t\t\t    consumeEmptyClassMemberDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t\r", "+\t    case 119 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");\r", "+\t\t\t    consumeFieldDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 121 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");\r", "+\t\t\t    consumeVariableDeclarators();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 124 : // System.out.println(\"EnterVariable ::=\");\r", "+\t\t\t    consumeEnterVariable();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 125 : // System.out.println(\"ExitVariableWithInitialization ::=\");\r", "+\t\t\t    consumeExitVariableWithInitialization();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 126 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");\r", "+\t\t\t    consumeExitVariableWithoutInitialization();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 127 : // System.out.println(\"ForceNoDiet ::=\");\r", "+\t\t\t    consumeForceNoDiet();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 128 : // System.out.println(\"RestoreDiet ::=\");\r", "+\t\t\t    consumeRestoreDiet();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 133 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");\r", "+\t\t\t    // set to true to consume a method with a body\r", "+\t  consumeMethodDeclaration(true);   \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 134 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");\r", "+\t\t\t    // set to false to consume a method without body\r", "+\t  consumeMethodDeclaration(false);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 135 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");\r", "+\t\t\t    consumeMethodHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 136 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");\r", "+\t\t\t    consumeMethodHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");\r", "+\t\t\t    consumeMethodPushModifiersHeaderName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 138 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");\r", "+\t\t\t    consumeMethodPushModifiersHeaderName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 139 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");\r", "+\t\t\t    consumeMethodHeaderName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 140 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");\r", "+\t\t\t    consumeMethodHeaderParameters();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 141 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");\r", "+\t\t\t    consumeMethodHeaderExtendedDims();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 142 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");\r", "+\t\t\t    consumeMethodHeaderThrowsClause();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 143 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");\r", "+\t\t\t    consumeConstructorHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 144 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");\r", "+\t\t\t    consumeConstructorHeaderName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 146 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");\r", "+\t\t\t    consumeFormalParameterList();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 147 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");\r", "+\t\t\t    // the boolean is used to know if the modifiers should be reset\r", "+\t \tconsumeFormalParameter();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 149 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");\r", "+\t\t\t    consumeClassTypeList();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 150 : // System.out.println(\"ClassTypeElt ::= ClassType\");\r", "+\t\t\t    consumeClassTypeElt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 151 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");\r", "+\t\t\t    consumeMethodBody();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 152 : // System.out.println(\"NestedMethod ::=\");\r", "+\t\t\t    consumeNestedMethod();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 153 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");\r", "+\t\t\t    consumeStaticInitializer();  \r", "+\t\t\t\tbreak ;\r", "+\t\r", "+\t    case 154 : // System.out.println(\"StaticOnly ::= static\");\r", "+\t\t\t    consumeStaticOnly();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 155 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "+\t\t\t    consumeConstructorDeclaration() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 156 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "+\t\t\t    consumeInvalidConstructorDeclaration() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 157 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");\r", "+\t\t\t    consumeConstructorBody();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 160 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");\r", "+\t\t\t     consumeConstructorBlockStatements();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 161 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "+\t\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.This);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 162 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");\r", "+\t\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.Super);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 165 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 166 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 167 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");\r", "+\t\t\t    consumeInterfaceDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 168 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");\r", "+\t\t\t    consumeInterfaceHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 169 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");\r", "+\t\t\t    consumeInterfaceHeaderName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 171 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");\r", "+\t\t\t    consumeInterfaceHeaderExtends();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 174 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");\r", "+\t\t\t    consumeInterfaceMemberDeclarations();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 175 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");\r", "+\t\t\t    consumeEmptyInterfaceMemberDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 178 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");\r", "+\t\t\t    ignoreMethodBody();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 179 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");\r", "+\t\t\t    ignoreInvalidConstructorDeclaration(true);   \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 180 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");\r", "+\t\t\t    ignoreInvalidConstructorDeclaration(false);   \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 186 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");\r", "+\t\t\t    consumeEmptyArrayInitializer();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 187 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");\r", "+\t\t\t    consumeArrayInitializer();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 188 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");\r", "+\t\t\t    consumeArrayInitializer();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 190 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");\r", "+\t\t\t    consumeVariableInitializers();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 191 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");\r", "+\t\t\t    consumeBlock();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 192 : // System.out.println(\"OpenBlock ::=\");\r", "+\t\t\t    consumeOpenBlock() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 194 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");\r", "+\t\t\t    consumeBlockStatements() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 198 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");\r", "+\t\t\t    ignoreInterfaceDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 199 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");\r", "+\t\t\t    consumeLocalVariableDeclarationStatement();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 200 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");\r", "+\t\t\t    consumeLocalVariableDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 201 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");\r", "+\t\t\t    consumeLocalVariableDeclaration();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 202 : // System.out.println(\"PushModifiers ::=\");\r", "+\t\t\t    consumePushModifiers();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 226 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");\r", "+\t\t\t    consumeEmptyStatement();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 227 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");\r", "+\t\t\t    consumeStatementLabel() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 228 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");\r", "+\t\t\t    consumeStatementLabel() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 229 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");\r", "+\t\t\t    consumeExpressionStatement();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 237 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");\r", "+\t\t\t    consumeStatementIfNoElse();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 238 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");\r", "+\t\t\t    consumeStatementIfWithElse();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 239 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");\r", "+\t\t\t    consumeStatementIfWithElse();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 240 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");\r", "+\t\t\t    consumeStatementSwitch() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 241 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");\r", "+\t\t\t    consumeEmptySwitchBlock() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 244 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");\r", "+\t\t\t    consumeSwitchBlock() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 246 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");\r", "+\t\t\t    consumeSwitchBlockStatements() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 247 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");\r", "+\t\t\t    consumeSwitchBlockStatement() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 249 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");\r", "+\t\t\t    consumeSwitchLabels() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 250 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");\r", "+\t\t\t    consumeCaseLabel();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 251 : // System.out.println(\"SwitchLabel ::= default COLON\");\r", "+\t\t\t    consumeDefaultLabel();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 252 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");\r", "+\t\t\t    consumeStatementWhile() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 253 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");\r", "+\t\t\t    consumeStatementWhile() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 254 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");\r", "+\t\t\t    consumeStatementDo() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 255 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");\r", "+\t\t\t    consumeStatementFor() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 256 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");\r", "+\t\t\t    consumeStatementFor() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 257 : // System.out.println(\"ForInit ::= StatementExpressionList\");\r", "+\t\t\t    consumeForInit() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 261 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");\r", "+\t\t\t    consumeStatementExpressionList() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 262 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");\r", "+\t\t\t    consumeSimpleAssertStatement() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 263 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");\r", "+\t\t\t    consumeAssertStatement() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 264 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");\r", "+\t\t\t    consumeStatementBreak() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 265 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");\r", "+\t\t\t    consumeStatementBreakWithLabel() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 266 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");\r", "+\t\t\t    consumeStatementContinue() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 267 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");\r", "+\t\t\t    consumeStatementContinueWithLabel() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 268 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");\r", "+\t\t\t    consumeStatementReturn() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 269 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");\r", "+\t\t\t    consumeStatementThrow();\r", "+\t \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 270 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");\r", "+\t\t\t    consumeStatementSynchronized();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 271 : // System.out.println(\"OnlySynchronized ::= synchronized\");\r", "+\t\t\t    consumeOnlySynchronized();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 272 : // System.out.println(\"TryStatement ::= try Block Catches\");\r", "+\t\t\t    consumeStatementTry(false);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 273 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");\r", "+\t\t\t    consumeStatementTry(true);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 275 : // System.out.println(\"Catches ::= Catches CatchClause\");\r", "+\t\t\t    consumeCatches();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 276 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");\r", "+\t\t\t    consumeStatementCatch() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 278 : // System.out.println(\"PushLPAREN ::= LPAREN\");\r", "+\t\t\t    consumeLeftParen();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 279 : // System.out.println(\"PushRPAREN ::= RPAREN\");\r", "+\t\t\t    consumeRightParen();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 283 : // System.out.println(\"PrimaryNoNewArray ::= this\");\r", "+\t\t\t    consumePrimaryNoNewArrayThis();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 284 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");\r", "+\t\t\t    consumePrimaryNoNewArray();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 287 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");\r", "+\t\t\t    consumePrimaryNoNewArrayNameThis();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 288 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");\r", "+\t\t\t    consumePrimaryNoNewArrayNameSuper();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 289 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");\r", "+\t\t\t    consumePrimaryNoNewArrayName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 290 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");\r", "+\t\t\t    consumePrimaryNoNewArrayArrayType();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 291 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");\r", "+\t\t\t    consumePrimaryNoNewArrayPrimitiveType();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 294 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\t    consumeAllocationHeader();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 295 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");\r", "+\t\t\t    consumeClassInstanceCreationExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 296 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");\r", "+\t\t\t    consumeClassInstanceCreationExpressionQualified() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 297 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");\r", "+\t\t\t    consumeClassInstanceCreationExpressionQualified() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 298 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");\r", "+\t\t\t    consumeClassInstanceCreationExpressionName() ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 299 : // System.out.println(\"ClassBodyopt ::=\");\r", "+\t\t\t    consumeClassBodyopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 301 : // System.out.println(\"EnterAnonymousClassBody ::=\");\r", "+\t\t\t    consumeEnterAnonymousClassBody();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 303 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");\r", "+\t\t\t    consumeArgumentList();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 304 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");\r", "+\t\t\t    consumeArrayCreationExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 305 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");\r", "+\t\t\t    consumeArrayCreationExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 307 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");\r", "+\t\t\t    consumeDimWithOrWithOutExprs();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 309 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");\r", "+\t\t\t    consumeDimWithOrWithOutExpr();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 310 : // System.out.println(\"Dims ::= DimsLoop\");\r", "+\t\t\t    consumeDims();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 313 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");\r", "+\t\t\t    consumeOneDimLoop();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 314 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");\r", "+\t\t\t    consumeFieldAccess(false);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 315 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");\r", "+\t\t\t    consumeFieldAccess(true);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 316 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\t    consumeMethodInvocationName();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 317 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\t    consumeMethodInvocationPrimary();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 318 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");\r", "+\t\t\t    consumeMethodInvocationSuper();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 319 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");\r", "+\t\t\t    consumeArrayAccess(true);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 320 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");\r", "+\t\t\t    consumeArrayAccess(false);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 322 : // System.out.println(\"PostfixExpression ::= Name\");\r", "+\t\t\t    consumePostfixExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 325 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.PLUS,true);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 326 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.MINUS,true);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 327 : // System.out.println(\"PushPosition ::=\");\r", "+\t\t\t    consumePushPosition();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 330 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.PLUS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 331 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.MINUS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 333 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.PLUS,false);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 334 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.MINUS,false);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 336 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.TWIDDLE);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 337 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");\r", "+\t\t\t    consumeUnaryExpression(OperatorExpression.NOT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 339 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");\r", "+\t\t\t    consumeCastExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 340 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");\r", "+\t\t\t    consumeCastExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 341 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");\r", "+\t\t\t    consumeCastExpressionLL1();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 343 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.MULTIPLY);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 344 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.DIVIDE);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 345 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.REMAINDER);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 347 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.PLUS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 348 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.MINUS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 350 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.LEFT_SHIFT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 351 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 352 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 354 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.LESS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 355 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.GREATER);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.LESS_EQUAL);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.GREATER_EQUAL);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 358 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");\r", "+\t\t\t    consumeInstanceOfExpression(OperatorExpression.INSTANCEOF);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 360 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");\r", "+\t\t\t    consumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 361 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");\r", "+\t\t\t    consumeEqualityExpression(OperatorExpression.NOT_EQUAL);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 363 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.AND);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 365 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.XOR);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 367 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.OR);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 369 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.AND_AND);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 371 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");\r", "+\t\t\t    consumeBinaryExpression(OperatorExpression.OR_OR);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 373 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");\r", "+\t\t\t    consumeConditionalExpression(OperatorExpression.QUESTIONCOLON) ;  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 376 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");\r", "+\t\t\t    consumeAssignment();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 378 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");\r", "+\t\t\t    ignoreExpressionAssignment(); \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 379 : // System.out.println(\"LeftHandSide ::= Name\");\r", "+\t\t\t    consumeLeftHandSide();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 382 : // System.out.println(\"AssignmentOperator ::= EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(EQUAL);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 383 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(MULTIPLY);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 384 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(DIVIDE);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 385 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(REMAINDER);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 386 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(PLUS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 387 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(MINUS);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 388 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(LEFT_SHIFT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 389 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 390 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 391 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(AND);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 392 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(XOR);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 393 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");\r", "+\t\t\t    consumeAssignmentOperator(OR);  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 400 : // System.out.println(\"Expressionopt ::=\");\r", "+\t\t\t    consumeEmptyExpression();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 404 : // System.out.println(\"ImportDeclarationsopt ::=\");\r", "+\t\t\t    consumeEmptyImportDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 405 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");\r", "+\t\t\t    consumeImportDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 406 : // System.out.println(\"TypeDeclarationsopt ::=\");\r", "+\t\t\t    consumeEmptyTypeDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 407 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");\r", "+\t\t\t    consumeTypeDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 408 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");\r", "+\t\t\t    consumeEmptyClassBodyDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 409 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");\r", "+\t\t\t    consumeClassBodyDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 410 : // System.out.println(\"Modifiersopt ::=\");\r", "+\t\t\t    consumeDefaultModifiers();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 411 : // System.out.println(\"Modifiersopt ::= Modifiers\");\r", "+\t\t\t    consumeModifiers();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 412 : // System.out.println(\"BlockStatementsopt ::=\");\r", "+\t\t\t    consumeEmptyBlockStatementsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 414 : // System.out.println(\"Dimsopt ::=\");\r", "+\t\t\t    consumeEmptyDimsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 416 : // System.out.println(\"ArgumentListopt ::=\");\r", "+\t\t\t    consumeEmptyArgumentListopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 420 : // System.out.println(\"FormalParameterListopt ::=\");\r", "+\t\t\t    consumeFormalParameterListopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 424 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");\r", "+\t\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 425 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");\r", "+\t\t\t    consumeInterfaceMemberDeclarationsopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t    case 426 : // System.out.println(\"NestedType ::=\");\r", "+\t\t\t    consumeNestedType();  \r", "+\t\t\t\tbreak ;\r", "+\t\r", "+\t     case 427 : // System.out.println(\"ForInitopt ::=\");\r", "+\t\t\t    consumeEmptyForInitopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 429 : // System.out.println(\"ForUpdateopt ::=\");\r", "+\t\t\t    consumeEmptyForUpdateopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 433 : // System.out.println(\"Catchesopt ::=\");\r", "+\t\t\t    consumeEmptyCatchesopt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "+\t     case 435 : // System.out.println(\"ArrayInitializeropt ::=\");\r", "+\t\t\t    consumeEmptyArrayInitializeropt();  \r", "+\t\t\t\tbreak ;\r", "+\t \r", "-\t}\r", "+\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5de3bd6e81c832ed84d79d05b0adf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "671b0d581aa5d36230a5cb8553037f000c8d5afa", "commitAfterChange": "c5e4a396e5f97d1050138e25a4f2f263849bffc7", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 255, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 513 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader(false);  ", "+    case 513 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-    case 514 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::= for LPAREN Modifiers Type\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader(true);  ", "+    case 514 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-    case 515 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 516 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 516 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-    case 517 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 518 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+    case 519 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-    case 519 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 520 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 520 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+    case 521 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-    case 522 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 523 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 524 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+    case 525 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-    case 525 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-    case 529 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+    case 530 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-    case 530 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 531 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 532 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 533 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 535 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 536 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 536 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+    case 537 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-    case 538 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+    case 539 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-    case 541 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 542 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 542 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+    case 543 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-    case 543 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+    case 544 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-    case 544 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+    case 545 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-    case 545 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+    case 546 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-    case 546 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+    case 547 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-    case 547 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+    case 548 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-    case 548 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+    case 549 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-    case 549 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+    case 550 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-    case 550 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 551 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 551 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+    case 552 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-    case 552 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+    case 553 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-    case 553 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+    case 554 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-    case 554 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+    case 555 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 555 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+    case 556 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-    case 556 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+    case 557 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-    case 557 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+    case 558 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-    case 558 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "+    case 559 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= Identifier\"); }  //$NON-NLS-1$", "-    case 559 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+    case 560 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-    case 561 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 562 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 563 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 564 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 564 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 565 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 566 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 567 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 567 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+    case 568 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-    case 569 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+    case 570 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-    case 570 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+    case 571 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-    case 571 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 572 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 572 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+    case 573 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-    case 574 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+    case 575 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-    case 575 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+    case 576 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-    case 581 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 582 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 582 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 583 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 585 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+    case 586 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-    case 586 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+    case 587 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-    case 589 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 590 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 590 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+    case 591 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-    case 591 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 592 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 592 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+    case 593 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-    case 593 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 594 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 594 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+    case 595 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-    case 596 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 597 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 597 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+    case 598 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-    case 598 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 599 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 599 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+    case 600 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-    case 601 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 602 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 602 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 603 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 603 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 604 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 604 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 605 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 605 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 606 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "-    case 606 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+    case 607 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 608 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 609 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 609 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+    case 610 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-    case 610 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 611 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "-    case 611 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+    case 612 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-    case 612 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 613 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 613 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+    case 614 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-    case 614 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 615 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 615 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+    case 616 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-    case 617 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+    case 618 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-    case 618 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 619 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 620 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 621 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 621 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+    case 622 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 622 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 623 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 623 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+    case 624 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 625 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 626 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "-    case 626 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+    case 627 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 628 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 629 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 629 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+    case 630 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-    case 631 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 632 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 632 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+    case 633 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-    case 634 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 635 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 635 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+    case 636 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-    case 637 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 638 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 638 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+    case 639 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-    case 640 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 641 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 641 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 642 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 645 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 646 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 646 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 647 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 647 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 648 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 648 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 649 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 650 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 651 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 651 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 652 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 653 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 654 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 654 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 655 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 655 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 656 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 656 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 657 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 657 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 658 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 658 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 659 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 659 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 660 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 667 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 668 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 668 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 669 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 669 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 670 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 672 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 673 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 673 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 674 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 674 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 675 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 675 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 676 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 677 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 678 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 680 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 685 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 684 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::= LBRACE PushLeftBrace...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 686 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 686 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 687 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 687 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 688 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 688 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 689 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 689 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "+    case 690 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type...\"); }  //$NON-NLS-1$", "-    case 690 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 691 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 691 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 692 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}], "num": 36987}
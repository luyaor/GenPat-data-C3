{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c03035e7f05bd9bfafcb936c586007c9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a87ccc907c1f7815f72b7eb9726f18a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4c2bd5433955f4a987d71f9fd88510a6a9140d4f", "commitAfterChange": "ac8aee31f97e2c1940f8d6cadbe50fd220994724", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 292, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-\t\t    consumeReferenceExpressionPrimitiveTypeForm();  ", "+\t\t    consumeReferenceExpressionTypeForm(true);  ", "-    case 403 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dimsopt COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dims COLON_COLON...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionTypeForm(false);  ", "+\t\t\tbreak;", "+ ", "+    case 404 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name BeginTypeArguments...\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceExpressionTypeForm();  ", "+    case 405 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name BeginTypeArguments...\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionGenericTypeForm();  ", "-    case 405 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 406 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 409 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 410 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 410 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 411 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 411 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 412 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 412 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 413 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 417 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 423 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 424 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 424 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 425 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 427 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 429 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 431 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 432 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 433 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 434 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 437 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new Annotationsopt PrimitiveType\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new Annotationsopt PrimitiveType\"); }  //$NON-NLS-1$", "-    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 441 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 442 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new Annotationsopt\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new Annotationsopt\"); }  //$NON-NLS-1$", "-    case 443 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 444 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 444 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 445 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 446 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 447 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 449 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET...\"); }  //$NON-NLS-1$", "+     case 450 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET...\"); }  //$NON-NLS-1$", "-     case 450 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotations LBRACKET...\"); }  //$NON-NLS-1$", "+     case 451 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotations LBRACKET...\"); }  //$NON-NLS-1$", "-     case 451 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt ::=\"); }  //$NON-NLS-1$", "+     case 452 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt ::=\"); }  //$NON-NLS-1$", "-     case 452 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt -> DimsAnnotLoop\"); }  //$NON-NLS-1$", "+     case 453 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt -> DimsAnnotLoop\"); }  //$NON-NLS-1$", "-     case 455 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= Annotation\"); }  //$NON-NLS-1$", "+     case 456 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= Annotation\"); }  //$NON-NLS-1$", "-     case 456 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 457 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 457 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= Annotation\"); }  //$NON-NLS-1$", "+     case 458 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= Annotation\"); }  //$NON-NLS-1$", "-     case 458 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= TypeAnnotations Annotation\"); }  //$NON-NLS-1$", "+     case 459 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= TypeAnnotations Annotation\"); }  //$NON-NLS-1$", "-     case 459 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 460 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 462 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 463 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 463 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 464 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 464 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 465 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 466 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 469 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 471 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 472 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 473 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 474 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 474 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 475 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 479 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 480 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 480 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 484 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 485 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 486 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 487 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 488 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 488 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 489 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 490 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 491 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 491 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 492 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 493 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 494 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 495 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 496 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "-    case 497 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 498 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "-    case 499 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 500 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 500 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "-    case 501 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "+    case 502 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "-    case 502 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name Dims...\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name Dims...\"); }  //$NON-NLS-1$", "-    case 503 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 504 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 505 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 505 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 506 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 506 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 507 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 507 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithAnnotatedQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 508 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithAnnotatedQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 509 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 513 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 514 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 516 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 517 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 518 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 520 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 521 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 522 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 523 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 525 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 527 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 528 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 530 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 532 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 534 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 536 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 538 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 540 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 543 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 545 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 546 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 547 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 548 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 549 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 550 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 551 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 553 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 554 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 555 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 556 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 557 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 558 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeExpression();  ", "-\t\t\tbreak;", "- ", "-    case 561 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 566 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 567 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 568 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 569 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 570 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 572 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 574 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 578 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 582 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 583 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 584 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 585 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 587 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 591 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 593 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 594 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 595 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 596 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 597 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 598 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 599 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 600 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 603 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 604 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 605 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 606 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 607 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 608 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 610 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 611 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 613 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 614 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 615 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type0...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 616 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 617 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 619 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 620 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 621 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 622 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 625 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 627 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 628 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 633 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 634 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1WithTypeAnnotations();  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 639 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 640 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 641 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2WithTypeAnnotations();  ", "-\t\t\tbreak;", "- ", "-    case 643 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 646 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 648 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 650 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 651 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 653 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 654 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 655 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 656 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 657 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 658 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 659 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 660 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 662 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 663 : if (DEBUG) { System.out.println(\"PushZeroTypeAnnotations ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeZeroTypeAnnotations(true);  ", "-\t\t\tbreak;", "- ", "-    case 664 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= PushZeroTypeAnnotations...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 665 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotations Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 666 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 668 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 670 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 671 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 673 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 674 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 676 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 677 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 678 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 679 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 681 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 682 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 688 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 689 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 692 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 693 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 696 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 697 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 698 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 699 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 700 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 512 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 701 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 703 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 704 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 705 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 706 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 708 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 710 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 711 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 712 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 519 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 713 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 715 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 521 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 716 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 717 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 522 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 718 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 719 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 523 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 720 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 721 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 524 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 722 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 724 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 725 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 526 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 727 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 528 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 728 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 729 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 529 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 730 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 732 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 531 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 733 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 735 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 533 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 736 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 738 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 535 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 739 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 741 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 537 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 742 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 744 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 539 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 745 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 747 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 541 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 748 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 544 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak;", "+ ", "+    case 546 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak;", "+ ", "+    case 547 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 548 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 549 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 550 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 551 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 552 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 554 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 555 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 556 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak;", "+ ", "+    case 557 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 558 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak;", "+ ", "+    case 559 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 562 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 567 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 568 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 569 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 570 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 571 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 573 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 575 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak;", "+ ", "+    case 579 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak;", "+ ", "+     case 583 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 584 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 585 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak;", "+", "+     case 586 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak;", "+ ", "+     case 588 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak;", "+ ", "+     case 592 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak;", "+ ", "+     case 594 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "+\t\t\tbreak;", "+ ", "+     case 595 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "+\t\t\tbreak;", "+ ", "+     case 596 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "+\t\t\tbreak;", "+ ", "+     case 597 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+     case 598 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 599 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 600 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 601 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 603 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 604 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 606 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 608 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 609 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 612 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 614 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 615 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 616 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type0...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "+\t\t\tbreak;", "+ ", "+    case 617 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "+\t\t\tbreak;", "+ ", "+    case 618 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 620 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 621 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 622 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 623 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 624 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 626 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "+\t\t\tbreak;", "+ ", "+    case 628 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "+\t\t\tbreak;", "+ ", "+    case 629 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "+\t\t\tbreak;", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 634 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 635 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1WithTypeAnnotations();  ", "+\t\t\tbreak;", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "+\t\t\tbreak;", "+ ", "+    case 640 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 641 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 642 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2WithTypeAnnotations();  ", "+\t\t\tbreak;", "+ ", "+    case 644 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "+\t\t\tbreak;", "+ ", "+    case 647 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "+\t\t\tbreak;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "+\t\t\tbreak;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 650 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 651 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "+\t\t\tbreak;", "+ ", "+    case 652 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "+\t\t\tbreak;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 655 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "+\t\t\tbreak;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "+\t\t\tbreak;", "+ ", "+    case 657 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 659 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "+\t\t\tbreak;", "+ ", "+    case 660 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "+\t\t\tbreak;", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 662 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 663 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "+\t\t\tbreak;", "+ ", "+    case 664 : if (DEBUG) { System.out.println(\"PushZeroTypeAnnotations ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeZeroTypeAnnotations(true);  ", "+\t\t\tbreak;", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= PushZeroTypeAnnotations...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 666 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotations Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+    case 669 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 671 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 672 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 674 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "+\t\t\tbreak;", "+ ", "+    case 675 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "+\t\t\tbreak;", "+ ", "+    case 677 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "+\t\t\tbreak;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "+\t\t\tbreak;", "+ ", "+    case 679 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 680 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 682 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "+\t\t\tbreak;", "+ ", "+    case 683 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "+\t\t\tbreak;", "+ ", "+    case 689 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 690 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\t\tbreak;", "+ ", "+    case 694 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "+\t\t\tbreak;", "+ ", "+    case 697 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 698 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 699 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 701 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 702 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 704 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 705 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 706 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 707 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 709 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 710 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 711 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 712 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 713 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 714 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 716 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 717 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 718 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 719 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 720 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 721 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 722 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 723 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 725 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "+\t\t\tbreak;", "+ ", "+    case 726 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 728 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 729 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 730 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 731 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 733 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 734 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 736 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 737 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 739 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 740 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 742 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 743 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 745 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 746 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 748 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\t\tbreak;", "+ ", "+    case 749 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 752 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 753 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 753 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 754 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 754 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 756 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 756 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 757 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 757 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 758 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 759 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 760 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 760 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 761 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 762 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 763 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 763 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 764 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 764 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "+    case 765 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "-    case 765 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 766 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 766 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 767 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 767 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 768 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 768 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 769 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 776 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 777 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 777 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 778 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 778 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 779 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 781 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 782 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 782 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 783 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 783 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 784 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 784 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 785 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 786 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 787 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 789 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 793 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 793 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 794 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 795 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 796 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 796 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 797 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 797 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 798 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 798 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 799 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 799 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 800 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 800 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "+    case 801 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "-    case 801 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 802 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 802 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 803 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d1431063948341b69cf155aa51494e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "bd80f54d2bce372d0cb569282d8bd3ac7581ecf9", "commitAfterChange": "b8aa3311452be518b7f96e1cdb47c5f16b1e4cf4", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 292, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 399 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 399 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= PrimitiveType Dims COLON_COLON\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceExpressionPrimitiveTypeForm();  ", "+\t\t\tbreak;", "+ ", "+    case 400 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name Dimsopt COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 400 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "+    case 401 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "-    case 401 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "+    case 402 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Name...\"); }  //$NON-NLS-1$", "-    case 402 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 403 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= Primary COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 403 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "+    case 404 : if (DEBUG) { System.out.println(\"ReferenceExpression ::= super COLON_COLON...\"); }  //$NON-NLS-1$", "-    case 404 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "+    case 405 : if (DEBUG) { System.out.println(\"NonWildTypeArgumentsopt ::=\"); }  //$NON-NLS-1$", "-    case 406 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "+    case 407 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= Identifier\"); }  //$NON-NLS-1$", "-    case 407 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "+    case 408 : if (DEBUG) { System.out.println(\"IdentifierOrNew ::= new\"); }  //$NON-NLS-1$", "-    case 408 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "+    case 409 : if (DEBUG) { System.out.println(\"LambdaExpression ::= LambdaParameters ARROW LambdaBody\"); }  //$NON-NLS-1$", "-    case 409 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "+    case 410 : if (DEBUG) { System.out.println(\"LambdaParameters ::= Identifier\"); }  //$NON-NLS-1$", "-    case 413 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "+    case 414 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameterList ::=...\"); }  //$NON-NLS-1$", "-    case 414 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+    case 415 : if (DEBUG) { System.out.println(\"TypeElidedFormalParameter ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-    case 416 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "+    case 417 : if (DEBUG) { System.out.println(\"LambdaBody ::= NestedType NestedMethod LBRACE...\"); }  //$NON-NLS-1$", "-    case 417 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "+    case 418 : if (DEBUG) { System.out.println(\"ElidedLeftBraceAndReturn ::=\"); }  //$NON-NLS-1$", "-    case 418 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "+    case 419 : if (DEBUG) { System.out.println(\"AllocationHeader ::= new ClassType LPAREN...\"); }  //$NON-NLS-1$", "-    case 419 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "+    case 420 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new...\"); }  //$NON-NLS-1$", "-    case 420 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "+    case 421 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= new ClassType...\"); }  //$NON-NLS-1$", "-    case 421 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+    case 422 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-    case 422 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak;", "- ", "-    case 423 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "+    case 423 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak;", "+ ", "+    case 425 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpression ::=...\"); }  //$NON-NLS-1$", "-    case 425 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "+    case 426 : if (DEBUG) { System.out.println(\"EnterInstanceCreationArgumentList ::=\"); }  //$NON-NLS-1$", "-    case 426 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "+    case 427 : if (DEBUG) { System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\"); }  //$NON-NLS-1$", "-    case 427 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 428 : if (DEBUG) { System.out.println(\"UnqualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 429 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 430 : if (DEBUG) { System.out.println(\"UnqualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 430 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "+    case 431 : if (DEBUG) { System.out.println(\"QualifiedClassBodyopt ::=\"); }  //$NON-NLS-1$", "-    case 432 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "+    case 433 : if (DEBUG) { System.out.println(\"QualifiedEnterAnonymousClassBody ::=\"); }  //$NON-NLS-1$", "-    case 434 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "+    case 435 : if (DEBUG) { System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\"); }  //$NON-NLS-1$", "-    case 435 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new Annotationsopt PrimitiveType\"); }  //$NON-NLS-1$", "+    case 436 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new Annotationsopt PrimitiveType\"); }  //$NON-NLS-1$", "-    case 436 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "+    case 437 : if (DEBUG) { System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\"); }  //$NON-NLS-1$", "-    case 437 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 438 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 438 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new Annotationsopt\"); }  //$NON-NLS-1$", "+    case 439 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new Annotationsopt\"); }  //$NON-NLS-1$", "-    case 439 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 440 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "+    case 441 : if (DEBUG) { System.out.println(\"ArrayCreationWithArrayInitializer ::= new...\"); }  //$NON-NLS-1$", "-    case 442 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "+    case 443 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs...\"); }  //$NON-NLS-1$", "-     case 445 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET...\"); }  //$NON-NLS-1$", "+     case 446 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET...\"); }  //$NON-NLS-1$", "-     case 446 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotations LBRACKET...\"); }  //$NON-NLS-1$", "+     case 447 : if (DEBUG) { System.out.println(\"DimWithOrWithOutExpr ::= TypeAnnotations LBRACKET...\"); }  //$NON-NLS-1$", "-     case 447 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt ::=\"); }  //$NON-NLS-1$", "+     case 448 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt ::=\"); }  //$NON-NLS-1$", "-     case 448 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt -> DimsAnnotLoop\"); }  //$NON-NLS-1$", "+     case 449 : if (DEBUG) { System.out.println(\"DimsoptAnnotsopt -> DimsAnnotLoop\"); }  //$NON-NLS-1$", "-     case 451 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= Annotation\"); }  //$NON-NLS-1$", "+     case 452 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= Annotation\"); }  //$NON-NLS-1$", "-     case 452 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 453 : if (DEBUG) { System.out.println(\"OneDimOrAnnot ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 453 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= Annotation\"); }  //$NON-NLS-1$", "+     case 454 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= Annotation\"); }  //$NON-NLS-1$", "-     case 454 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= TypeAnnotations Annotation\"); }  //$NON-NLS-1$", "+     case 455 : if (DEBUG) { System.out.println(\"TypeAnnotations ::= TypeAnnotations Annotation\"); }  //$NON-NLS-1$", "-     case 455 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "+     case 456 : if (DEBUG) { System.out.println(\"Dims ::= DimsLoop\"); }  //$NON-NLS-1$", "-     case 458 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 459 : if (DEBUG) { System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-     case 459 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "+     case 460 : if (DEBUG) { System.out.println(\"OneDimLoop ::= TypeAnnotations LBRACKET RBRACKET\"); }  //$NON-NLS-1$", "-    case 460 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "+    case 461 : if (DEBUG) { System.out.println(\"FieldAccess ::= Primary DOT Identifier\"); }  //$NON-NLS-1$", "-    case 461 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "+    case 462 : if (DEBUG) { System.out.println(\"FieldAccess ::= super DOT Identifier\"); }  //$NON-NLS-1$", "-    case 462 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+    case 463 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-    case 463 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 464 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Name DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 464 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 465 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 465 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 466 : if (DEBUG) { System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 466 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "+    case 467 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT OnlyTypeArguments...\"); }  //$NON-NLS-1$", "-    case 467 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "+    case 468 : if (DEBUG) { System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN...\"); }  //$NON-NLS-1$", "-    case 468 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "+    case 469 : if (DEBUG) { System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\"); }  //$NON-NLS-1$", "-    case 469 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "+    case 470 : if (DEBUG) { System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression...\"); }  //$NON-NLS-1$", "-    case 470 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "+    case 471 : if (DEBUG) { System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer...\"); }  //$NON-NLS-1$", "-    case 472 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "+    case 473 : if (DEBUG) { System.out.println(\"PostfixExpression ::= Name\"); }  //$NON-NLS-1$", "-    case 475 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "+    case 476 : if (DEBUG) { System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\"); }  //$NON-NLS-1$", "-    case 476 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "+    case 477 : if (DEBUG) { System.out.println(\"PostDecrementExpression ::= PostfixExpression...\"); }  //$NON-NLS-1$", "-    case 477 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "+    case 478 : if (DEBUG) { System.out.println(\"PushPosition ::=\"); }  //$NON-NLS-1$", "-    case 480 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 481 : if (DEBUG) { System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 481 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "+    case 482 : if (DEBUG) { System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\"); }  //$NON-NLS-1$", "-    case 483 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 484 : if (DEBUG) { System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 484 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "+    case 485 : if (DEBUG) { System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition...\"); }  //$NON-NLS-1$", "-    case 486 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "+    case 487 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition...\"); }  //$NON-NLS-1$", "-    case 487 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "+    case 488 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition...\"); }  //$NON-NLS-1$", "-    case 489 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "+    case 490 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt...\"); }  //$NON-NLS-1$", "-    case 490 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers PrimitiveType...\"); }  //$NON-NLS-1$", "+    case 491 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers PrimitiveType...\"); }  //$NON-NLS-1$", "-    case 491 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 492 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 492 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "+    case 493 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "-    case 493 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 494 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 494 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "+    case 495 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "-    case 495 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "+    case 496 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name...\"); }  //$NON-NLS-1$", "-    case 496 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "+    case 497 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name...\"); }  //$NON-NLS-1$", "-    case 497 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "+    case 498 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Name Dims...\"); }  //$NON-NLS-1$", "-    case 498 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name Dims...\"); }  //$NON-NLS-1$", "+    case 499 : if (DEBUG) { System.out.println(\"CastExpression ::= PushLPAREN Modifiers Name Dims...\"); }  //$NON-NLS-1$", "-    case 499 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "+    case 500 : if (DEBUG) { System.out.println(\"OnlyTypeArgumentsForCastExpression ::= OnlyTypeArguments\"); }  //$NON-NLS-1$", "-    case 500 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "+    case 501 : if (DEBUG) { System.out.println(\"InsideCastExpression ::=\"); }  //$NON-NLS-1$", "-    case 501 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "+    case 502 : if (DEBUG) { System.out.println(\"InsideCastExpressionLL1 ::=\"); }  //$NON-NLS-1$", "-    case 502 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 503 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 503 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithAnnotatedQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "+    case 504 : if (DEBUG) { System.out.println(\"InsideCastExpressionWithAnnotatedQualifiedGenerics ::=\"); }  //$NON-NLS-1$", "-    case 505 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 509 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 510 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 512 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 513 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 514 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 516 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 517 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 518 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 519 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 521 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression();  ", "-\t\t\tbreak;", "- ", "-    case 523 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 524 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 526 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 528 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 530 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 532 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 534 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 536 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak;", "- ", "-    case 539 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak;", "- ", "-    case 541 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak;", "- ", "-    case 542 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 543 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 544 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 545 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 546 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 547 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 548 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 549 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 550 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 551 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak;", "- ", "-    case 552 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak;", "- ", "-    case 553 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak;", "- ", "-    case 554 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeExpression();  ", "-\t\t\tbreak;", "- ", "-    case 557 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak;", "- ", "-    case 562 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 563 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 564 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 565 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak;", "- ", "-    case 566 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak;", "- ", "-     case 568 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak;", "- ", "-     case 570 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak;", "- ", "-    case 574 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak;", "- ", "-     case 578 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-     case 579 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak;", "- ", "-    case 580 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak;", "-", "-     case 581 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak;", "- ", "-     case 583 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak;", "- ", "-     case 587 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak;", "- ", "-     case 589 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclaration();  ", "-\t\t\tbreak;", "- ", "-     case 590 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeader();  ", "-\t\t\tbreak;", "- ", "-     case 591 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderName();  ", "-\t\t\tbreak;", "- ", "-     case 592 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "-\t\t\tbreak;", "- ", "-     case 593 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 594 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyNoConstants();  ", "-\t\t\tbreak;", "- ", "-     case 595 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-     case 596 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumBodyWithConstants();  ", "-\t\t\tbreak;", "- ", "-    case 598 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstants();  ", "-\t\t\tbreak;", "- ", "-    case 599 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeaderName();  ", "-\t\t\tbreak;", "- ", "-    case 600 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantHeader();  ", "-\t\t\tbreak;", "- ", "-    case 601 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantWithClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 602 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumConstantNoClassBody();  ", "-\t\t\tbreak;", "- ", "-    case 603 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "-\t\t    consumeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 604 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyArguments();  ", "-\t\t\tbreak;", "- ", "-    case 606 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "-\t\t    consumeEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 607 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeEmptyEnumDeclarations();  ", "-\t\t\tbreak;", "- ", "-    case 609 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 610 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatement();  ", "-\t\t\tbreak;", "- ", "-    case 611 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type0...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "-\t\t\tbreak;", "- ", "-    case 612 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "-\t\t\tbreak;", "- ", "-    case 613 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeEnhancedForStatementHeader();  ", "-\t\t\tbreak;", "- ", "-    case 614 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 615 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "-\t\t    consumeSingleStaticImportDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 616 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeImportDeclaration();  ", "-\t\t\tbreak;", "- ", "-    case 617 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "-\t\t    consumeStaticImportOnDemandDeclarationName();  ", "-\t\t\tbreak;", "- ", "-    case 618 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 619 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "-\t\t    consumeOnlyTypeArguments();  ", "-\t\t\tbreak;", "- ", "-    case 621 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList1();  ", "-\t\t\tbreak;", "- ", "-    case 623 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList();  ", "-\t\t\tbreak;", "- ", "-    case 624 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgument();  ", "-\t\t\tbreak;", "- ", "-    case 628 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 629 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1();  ", "-\t\t\tbreak;", "- ", "-    case 630 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType1WithTypeAnnotations();  ", "-\t\t\tbreak;", "- ", "-    case 632 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList2();  ", "-\t\t\tbreak;", "- ", "-    case 635 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 636 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2();  ", "-\t\t\tbreak;", "- ", "-    case 637 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentReferenceType2WithTypeAnnotations();  ", "-\t\t\tbreak;", "- ", "-    case 639 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeArgumentList3();  ", "-\t\t\tbreak;", "- ", "-    case 642 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeReferenceType3();  ", "-\t\t\tbreak;", "- ", "-    case 643 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard();  ", "-\t\t\tbreak;", "- ", "-    case 644 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardWithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 645 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsExtends();  ", "-\t\t\tbreak;", "- ", "-    case 646 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBoundsSuper();  ", "-\t\t\tbreak;", "- ", "-    case 647 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1();  ", "-\t\t\tbreak;", "- ", "-    case 648 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard1WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 649 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Extends();  ", "-\t\t\tbreak;", "- ", "-    case 650 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds1Super();  ", "-\t\t\tbreak;", "- ", "-    case 651 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2();  ", "-\t\t\tbreak;", "- ", "-    case 652 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard2WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 653 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Extends();  ", "-\t\t\tbreak;", "- ", "-    case 654 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds2Super();  ", "-\t\t\tbreak;", "- ", "-    case 655 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3();  ", "-\t\t\tbreak;", "- ", "-    case 656 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcard3WithBounds();  ", "-\t\t\tbreak;", "- ", "-    case 657 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Extends();  ", "-\t\t\tbreak;", "- ", "-    case 658 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "-\t\t    consumeWildcardBounds3Super();  ", "-\t\t\tbreak;", "- ", "-    case 659 : if (DEBUG) { System.out.println(\"PushZeroTypeAnnotations ::=\"); }  //$NON-NLS-1$", "-\t\t    consumeZeroTypeAnnotations(true);  ", "-\t\t\tbreak;", "- ", "-    case 660 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= PushZeroTypeAnnotations...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 661 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotations Identifier\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterHeader();  ", "-\t\t\tbreak;", "- ", "-    case 662 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameters();  ", "-\t\t\tbreak;", "- ", "-    case 664 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList();  ", "-\t\t\tbreak;", "- ", "-    case 666 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 667 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 669 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList();  ", "-\t\t\tbreak;", "- ", "-    case 670 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound();  ", "-\t\t\tbreak;", "- ", "-    case 672 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameterList1();  ", "-\t\t\tbreak;", "- ", "-    case 673 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1();  ", "-\t\t\tbreak;", "- ", "-    case 674 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtends();  ", "-\t\t\tbreak;", "- ", "-    case 675 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "-\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "-\t\t\tbreak;", "- ", "-    case 677 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBoundList1();  ", "-\t\t\tbreak;", "- ", "-    case 678 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "-\t\t    consumeAdditionalBound1();  ", "-\t\t\tbreak;", "- ", "-    case 684 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 685 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 688 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak;", "- ", "-    case 689 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak;", "- ", "-    case 692 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 693 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak;", "- ", "-    case 694 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "-    case 695 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "-\t\t\tbreak;", "- ", "-    case 696 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 508 : if (DEBUG) { System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression...\"); }  //$NON-NLS-1$", "-    case 697 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "-\t\t\tbreak;", "- ", "-    case 699 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 510 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\"); }  //$NON-NLS-1$", "-    case 700 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "-\t\t\tbreak;", "- ", "-    case 701 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 511 : if (DEBUG) { System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\"); }  //$NON-NLS-1$", "-    case 702 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "-\t\t\tbreak;", "- ", "-    case 704 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 513 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 705 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 706 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 514 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-    case 707 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 708 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+    case 515 : if (DEBUG) { System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "-    case 709 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak;", "- ", "-    case 711 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 517 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS...\"); }  //$NON-NLS-1$", "-    case 712 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "-\t\t\tbreak;", "- ", "-    case 713 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+    case 518 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\"); }  //$NON-NLS-1$", "-    case 714 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "-\t\t\tbreak;", "- ", "-    case 715 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 519 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL\"); }  //$NON-NLS-1$", "-    case 716 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 717 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 520 : if (DEBUG) { System.out.println(\"RelationalExpression ::= RelationalExpression...\"); }  //$NON-NLS-1$", "-    case 718 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 720 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpressionWithName();  ", "-\t\t\tbreak;", "- ", "-    case 721 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 522 : if (DEBUG) { System.out.println(\"InstanceofExpression ::= InstanceofExpression instanceof\"); }  //$NON-NLS-1$", "-    case 723 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 524 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-    case 724 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 725 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 525 : if (DEBUG) { System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\"); }  //$NON-NLS-1$", "-    case 726 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "-\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak;", "- ", "-    case 728 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+    case 527 : if (DEBUG) { System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\"); }  //$NON-NLS-1$", "-    case 729 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "-\t\t\tbreak;", "- ", "-    case 731 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 529 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR...\"); }  //$NON-NLS-1$", "-    case 732 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "-\t\t\tbreak;", "- ", "-    case 734 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 531 : if (DEBUG) { System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\"); }  //$NON-NLS-1$", "-    case 735 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "-\t\t\tbreak;", "- ", "-    case 737 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 533 : if (DEBUG) { System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression...\"); }  //$NON-NLS-1$", "-    case 738 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "-\t\t\tbreak;", "- ", "-    case 740 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 535 : if (DEBUG) { System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 741 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "-\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "-\t\t\tbreak;", "- ", "-    case 743 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+    case 537 : if (DEBUG) { System.out.println(\"ConditionalExpression ::= ConditionalOrExpression...\"); }  //$NON-NLS-1$", "-    case 744 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "+    case 540 : if (DEBUG) { System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak;", "+ ", "+    case 542 : if (DEBUG) { System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\"); }  //$NON-NLS-1$", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak;", "+ ", "+    case 543 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 544 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 545 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 546 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 547 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 548 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 549 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 550 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 551 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 552 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= AND_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak;", "+ ", "+    case 553 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= XOR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 554 : if (DEBUG) { System.out.println(\"AssignmentOperator ::= OR_EQUAL\"); }  //$NON-NLS-1$", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak;", "+ ", "+    case 555 : if (DEBUG) { System.out.println(\"Expression ::= AssignmentExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 558 : if (DEBUG) { System.out.println(\"Expressionopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 563 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 564 : if (DEBUG) { System.out.println(\"ClassBodyDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 565 : if (DEBUG) { System.out.println(\"Modifiersopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 566 : if (DEBUG) { System.out.println(\"Modifiersopt ::= Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak;", "+ ", "+    case 567 : if (DEBUG) { System.out.println(\"BlockStatementsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 569 : if (DEBUG) { System.out.println(\"Dimsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 571 : if (DEBUG) { System.out.println(\"ArgumentListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak;", "+ ", "+    case 575 : if (DEBUG) { System.out.println(\"FormalParameterListopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak;", "+ ", "+     case 579 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+     case 580 : if (DEBUG) { System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak;", "+ ", "+    case 581 : if (DEBUG) { System.out.println(\"NestedType ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak;", "+", "+     case 582 : if (DEBUG) { System.out.println(\"ForInitopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak;", "+ ", "+     case 584 : if (DEBUG) { System.out.println(\"ForUpdateopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak;", "+ ", "+     case 588 : if (DEBUG) { System.out.println(\"Catchesopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak;", "+ ", "+     case 590 : if (DEBUG) { System.out.println(\"EnumDeclaration ::= EnumHeader EnumBody\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclaration();  ", "+\t\t\tbreak;", "+ ", "+     case 591 : if (DEBUG) { System.out.println(\"EnumHeader ::= EnumHeaderName ClassHeaderImplementsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeader();  ", "+\t\t\tbreak;", "+ ", "+     case 592 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderName();  ", "+\t\t\tbreak;", "+ ", "+     case 593 : if (DEBUG) { System.out.println(\"EnumHeaderName ::= Modifiersopt enum Identifier...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumHeaderNameWithTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+     case 594 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumBodyDeclarationsopt RBRACE\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 595 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE COMMA EnumBodyDeclarationsopt...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyNoConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 596 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+     case 597 : if (DEBUG) { System.out.println(\"EnumBody ::= LBRACE EnumConstants...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumBodyWithConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 599 : if (DEBUG) { System.out.println(\"EnumConstants ::= EnumConstants COMMA EnumConstant\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstants();  ", "+\t\t\tbreak;", "+ ", "+    case 600 : if (DEBUG) { System.out.println(\"EnumConstantHeaderName ::= Modifiersopt Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeaderName();  ", "+\t\t\tbreak;", "+ ", "+    case 601 : if (DEBUG) { System.out.println(\"EnumConstantHeader ::= EnumConstantHeaderName...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 602 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader ForceNoDiet...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantWithClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 603 : if (DEBUG) { System.out.println(\"EnumConstant ::= EnumConstantHeader\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumConstantNoClassBody();  ", "+\t\t\tbreak;", "+ ", "+    case 604 : if (DEBUG) { System.out.println(\"Arguments ::= LPAREN ArgumentListopt RPAREN\"); }  //$NON-NLS-1$", "+\t\t    consumeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 605 : if (DEBUG) { System.out.println(\"Argumentsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 607 : if (DEBUG) { System.out.println(\"EnumDeclarations ::= SEMICOLON ClassBodyDeclarationsopt\"); }  //$NON-NLS-1$", "+\t\t    consumeEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 608 : if (DEBUG) { System.out.println(\"EnumBodyDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyEnumDeclarations();  ", "+\t\t\tbreak;", "+ ", "+    case 610 : if (DEBUG) { System.out.println(\"EnhancedForStatement ::= EnhancedForStatementHeader...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 611 : if (DEBUG) { System.out.println(\"EnhancedForStatementNoShortIf ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatement();  ", "+\t\t\tbreak;", "+ ", "+    case 612 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Type0...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(false);  ", "+\t\t\tbreak;", "+ ", "+    case 613 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeaderInit ::= for LPAREN Modifiers\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeaderInit(true);  ", "+\t\t\tbreak;", "+ ", "+    case 614 : if (DEBUG) { System.out.println(\"EnhancedForStatementHeader ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEnhancedForStatementHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 615 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 616 : if (DEBUG) { System.out.println(\"SingleStaticImportDeclarationName ::= import static Name\"); }  //$NON-NLS-1$", "+\t\t    consumeSingleStaticImportDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 617 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclaration ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeImportDeclaration();  ", "+\t\t\tbreak;", "+ ", "+    case 618 : if (DEBUG) { System.out.println(\"StaticImportOnDemandDeclarationName ::= import static...\"); }  //$NON-NLS-1$", "+\t\t    consumeStaticImportOnDemandDeclarationName();  ", "+\t\t\tbreak;", "+ ", "+    case 619 : if (DEBUG) { System.out.println(\"TypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 620 : if (DEBUG) { System.out.println(\"OnlyTypeArguments ::= LESS TypeArgumentList1\"); }  //$NON-NLS-1$", "+\t\t    consumeOnlyTypeArguments();  ", "+\t\t\tbreak;", "+ ", "+    case 622 : if (DEBUG) { System.out.println(\"TypeArgumentList1 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList1();  ", "+\t\t\tbreak;", "+ ", "+    case 624 : if (DEBUG) { System.out.println(\"TypeArgumentList ::= TypeArgumentList COMMA TypeArgument\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList();  ", "+\t\t\tbreak;", "+ ", "+    case 625 : if (DEBUG) { System.out.println(\"TypeArgument ::= ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgument();  ", "+\t\t\tbreak;", "+ ", "+    case 629 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ReferenceType GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 630 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1();  ", "+\t\t\tbreak;", "+ ", "+    case 631 : if (DEBUG) { System.out.println(\"ReferenceType1 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType1WithTypeAnnotations();  ", "+\t\t\tbreak;", "+ ", "+    case 633 : if (DEBUG) { System.out.println(\"TypeArgumentList2 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList2();  ", "+\t\t\tbreak;", "+ ", "+    case 636 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ReferenceType RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 637 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2();  ", "+\t\t\tbreak;", "+ ", "+    case 638 : if (DEBUG) { System.out.println(\"ReferenceType2 ::= Modifiers ClassOrInterface LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentReferenceType2WithTypeAnnotations();  ", "+\t\t\tbreak;", "+ ", "+    case 640 : if (DEBUG) { System.out.println(\"TypeArgumentList3 ::= TypeArgumentList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeArgumentList3();  ", "+\t\t\tbreak;", "+ ", "+    case 643 : if (DEBUG) { System.out.println(\"ReferenceType3 ::= ReferenceType UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeReferenceType3();  ", "+\t\t\tbreak;", "+ ", "+    case 644 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard();  ", "+\t\t\tbreak;", "+ ", "+    case 645 : if (DEBUG) { System.out.println(\"Wildcard ::= QUESTION WildcardBounds\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardWithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 646 : if (DEBUG) { System.out.println(\"WildcardBounds ::= extends ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 647 : if (DEBUG) { System.out.println(\"WildcardBounds ::= super ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBoundsSuper();  ", "+\t\t\tbreak;", "+ ", "+    case 648 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1();  ", "+\t\t\tbreak;", "+ ", "+    case 649 : if (DEBUG) { System.out.println(\"Wildcard1 ::= QUESTION WildcardBounds1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard1WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 650 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= extends ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 651 : if (DEBUG) { System.out.println(\"WildcardBounds1 ::= super ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds1Super();  ", "+\t\t\tbreak;", "+ ", "+    case 652 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2();  ", "+\t\t\tbreak;", "+ ", "+    case 653 : if (DEBUG) { System.out.println(\"Wildcard2 ::= QUESTION WildcardBounds2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard2WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 654 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= extends ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 655 : if (DEBUG) { System.out.println(\"WildcardBounds2 ::= super ReferenceType2\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds2Super();  ", "+\t\t\tbreak;", "+ ", "+    case 656 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION UNSIGNED_RIGHT_SHIFT\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3();  ", "+\t\t\tbreak;", "+ ", "+    case 657 : if (DEBUG) { System.out.println(\"Wildcard3 ::= QUESTION WildcardBounds3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcard3WithBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 658 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= extends ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Extends();  ", "+\t\t\tbreak;", "+ ", "+    case 659 : if (DEBUG) { System.out.println(\"WildcardBounds3 ::= super ReferenceType3\"); }  //$NON-NLS-1$", "+\t\t    consumeWildcardBounds3Super();  ", "+\t\t\tbreak;", "+ ", "+    case 660 : if (DEBUG) { System.out.println(\"PushZeroTypeAnnotations ::=\"); }  //$NON-NLS-1$", "+\t\t    consumeZeroTypeAnnotations(true);  ", "+\t\t\tbreak;", "+ ", "+    case 661 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= PushZeroTypeAnnotations...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 662 : if (DEBUG) { System.out.println(\"TypeParameterHeader ::= TypeAnnotations Identifier\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterHeader();  ", "+\t\t\tbreak;", "+ ", "+    case 663 : if (DEBUG) { System.out.println(\"TypeParameters ::= LESS TypeParameterList1\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameters();  ", "+\t\t\tbreak;", "+ ", "+    case 665 : if (DEBUG) { System.out.println(\"TypeParameterList ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList();  ", "+\t\t\tbreak;", "+ ", "+    case 667 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 668 : if (DEBUG) { System.out.println(\"TypeParameter ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterWithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 670 : if (DEBUG) { System.out.println(\"AdditionalBoundList ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList();  ", "+\t\t\tbreak;", "+ ", "+    case 671 : if (DEBUG) { System.out.println(\"AdditionalBound ::= AND ReferenceType\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound();  ", "+\t\t\tbreak;", "+ ", "+    case 673 : if (DEBUG) { System.out.println(\"TypeParameterList1 ::= TypeParameterList COMMA...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameterList1();  ", "+\t\t\tbreak;", "+ ", "+    case 674 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader GREATER\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1();  ", "+\t\t\tbreak;", "+ ", "+    case 675 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtends();  ", "+\t\t\tbreak;", "+ ", "+    case 676 : if (DEBUG) { System.out.println(\"TypeParameter1 ::= TypeParameterHeader extends...\"); }  //$NON-NLS-1$", "+\t\t    consumeTypeParameter1WithExtendsAndBounds();  ", "+\t\t\tbreak;", "+ ", "+    case 678 : if (DEBUG) { System.out.println(\"AdditionalBoundList1 ::= AdditionalBoundList...\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBoundList1();  ", "+\t\t\tbreak;", "+ ", "+    case 679 : if (DEBUG) { System.out.println(\"AdditionalBound1 ::= AND ReferenceType1\"); }  //$NON-NLS-1$", "+\t\t    consumeAdditionalBound1();  ", "+\t\t\tbreak;", "+ ", "+    case 685 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= PLUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 686 : if (DEBUG) { System.out.println(\"UnaryExpression_NotName ::= MINUS PushPosition...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 689 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= TWIDDLE...\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\t\tbreak;", "+ ", "+    case 690 : if (DEBUG) { System.out.println(\"UnaryExpressionNotPlusMinus_NotName ::= NOT PushPosition\"); }  //$NON-NLS-1$", "+\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "+\t\t\tbreak;", "+ ", "+    case 693 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 694 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name MULTIPLY...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MULTIPLY);  ", "+\t\t\tbreak;", "+ ", "+    case 695 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 696 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name DIVIDE...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.DIVIDE);  ", "+\t\t\tbreak;", "+ ", "+    case 697 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 698 : if (DEBUG) { System.out.println(\"MultiplicativeExpression_NotName ::= Name REMAINDER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.REMAINDER);  ", "+\t\t\tbreak;", "+ ", "+    case 700 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 701 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name PLUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.PLUS);  ", "+\t\t\tbreak;", "+ ", "+    case 702 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 703 : if (DEBUG) { System.out.println(\"AdditiveExpression_NotName ::= Name MINUS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.MINUS);  ", "+\t\t\tbreak;", "+ ", "+    case 705 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 706 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name LEFT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LEFT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 707 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 708 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 709 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= ShiftExpression_NotName...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 710 : if (DEBUG) { System.out.println(\"ShiftExpression_NotName ::= Name UNSIGNED_RIGHT_SHIFT...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak;", "+ ", "+    case 712 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 713 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS);  ", "+\t\t\tbreak;", "+ ", "+    case 714 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= ShiftExpression_NotName\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 715 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER);  ", "+\t\t\tbreak;", "+ ", "+    case 716 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 717 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name LESS_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.LESS_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 718 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 719 : if (DEBUG) { System.out.println(\"RelationalExpression_NotName ::= Name GREATER_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.GREATER_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 721 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::= Name instanceof...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpressionWithName();  ", "+\t\t\tbreak;", "+ ", "+    case 722 : if (DEBUG) { System.out.println(\"InstanceofExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeInstanceOfExpression();  ", "+\t\t\tbreak;", "+ ", "+    case 724 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 725 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name EQUAL_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.EQUAL_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 726 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 727 : if (DEBUG) { System.out.println(\"EqualityExpression_NotName ::= Name NOT_EQUAL...\"); }  //$NON-NLS-1$", "+\t\t    consumeEqualityExpressionWithName(OperatorIds.NOT_EQUAL);  ", "+\t\t\tbreak;", "+ ", "+    case 729 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= AndExpression_NotName AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 730 : if (DEBUG) { System.out.println(\"AndExpression_NotName ::= Name AND EqualityExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND);  ", "+\t\t\tbreak;", "+ ", "+    case 732 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 733 : if (DEBUG) { System.out.println(\"ExclusiveOrExpression_NotName ::= Name XOR AndExpression\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.XOR);  ", "+\t\t\tbreak;", "+ ", "+    case 735 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 736 : if (DEBUG) { System.out.println(\"InclusiveOrExpression_NotName ::= Name OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR);  ", "+\t\t\tbreak;", "+ ", "+    case 738 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 739 : if (DEBUG) { System.out.println(\"ConditionalAndExpression_NotName ::= Name AND_AND...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.AND_AND);  ", "+\t\t\tbreak;", "+ ", "+    case 741 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 742 : if (DEBUG) { System.out.println(\"ConditionalOrExpression_NotName ::= Name OR_OR...\"); }  //$NON-NLS-1$", "+\t\t    consumeBinaryExpressionWithName(OperatorIds.OR_OR);  ", "+\t\t\tbreak;", "+ ", "+    case 744 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\t\tbreak;", "+ ", "+    case 745 : if (DEBUG) { System.out.println(\"ConditionalExpression_NotName ::= Name QUESTION...\"); }  //$NON-NLS-1$", "-    case 748 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+    case 749 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-    case 749 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "-\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "-\t\t\tbreak;", "- ", "-    case 750 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "+    case 750 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= Modifiers AT...\"); }  //$NON-NLS-1$", "+\t\t    consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() ;  ", "+\t\t\tbreak;", "+ ", "+    case 752 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeaderName ::= AT...\"); }  //$NON-NLS-1$", "-    case 752 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "+    case 753 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclarationHeader ::=...\"); }  //$NON-NLS-1$", "-    case 753 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 754 : if (DEBUG) { System.out.println(\"AnnotationTypeDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 755 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "+    case 756 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::=\"); }  //$NON-NLS-1$", "-    case 756 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "+    case 757 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarationsopt ::= NestedType...\"); }  //$NON-NLS-1$", "-    case 758 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "+    case 759 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclarations ::=...\"); }  //$NON-NLS-1$", "-    case 759 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "+    case 760 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt...\"); }  //$NON-NLS-1$", "-    case 760 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "+    case 761 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "-    case 761 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "+    case 762 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::=\"); }  //$NON-NLS-1$", "-    case 762 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "+    case 763 : if (DEBUG) { System.out.println(\"AnnotationMethodHeaderDefaultValueopt ::= DefaultValue\"); }  //$NON-NLS-1$", "-    case 763 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 764 : if (DEBUG) { System.out.println(\"AnnotationMethodHeader ::= AnnotationMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 764 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "+    case 765 : if (DEBUG) { System.out.println(\"AnnotationTypeMemberDeclaration ::=...\"); }  //$NON-NLS-1$", "-    case 772 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "+    case 773 : if (DEBUG) { System.out.println(\"AnnotationName ::= AT Name\"); }  //$NON-NLS-1$", "-    case 773 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 774 : if (DEBUG) { System.out.println(\"NormalAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 774 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "+    case 775 : if (DEBUG) { System.out.println(\"MemberValuePairsopt ::=\"); }  //$NON-NLS-1$", "-    case 777 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "+    case 778 : if (DEBUG) { System.out.println(\"MemberValuePairs ::= MemberValuePairs COMMA...\"); }  //$NON-NLS-1$", "-    case 778 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "+    case 779 : if (DEBUG) { System.out.println(\"MemberValuePair ::= SimpleName EQUAL EnterMemberValue...\"); }  //$NON-NLS-1$", "-    case 779 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 780 : if (DEBUG) { System.out.println(\"EnterMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 780 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "+    case 781 : if (DEBUG) { System.out.println(\"ExitMemberValue ::=\"); }  //$NON-NLS-1$", "-    case 782 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "+    case 783 : if (DEBUG) { System.out.println(\"MemberValue ::= Name\"); }  //$NON-NLS-1$", "-\t\t\tbreak;", "- ", "-    case 785 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "-\t\t    consumeMemberValueArrayInitializer() ;  ", "-\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t    consumeMemberValueArrayInitializer() ;  ", "-    case 789 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "+    case 789 : if (DEBUG) { System.out.println(\"MemberValueArrayInitializer ::=...\"); }  //$NON-NLS-1$", "+\t\t    consumeEmptyMemberValueArrayInitializer() ;  ", "+\t\t\tbreak;", "+ ", "+    case 790 : if (DEBUG) { System.out.println(\"EnterMemberValueArrayInitializer ::=\"); }  //$NON-NLS-1$", "-    case 791 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "+    case 792 : if (DEBUG) { System.out.println(\"MemberValues ::= MemberValues COMMA MemberValue\"); }  //$NON-NLS-1$", "-    case 792 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "+    case 793 : if (DEBUG) { System.out.println(\"MarkerAnnotation ::= AnnotationName\"); }  //$NON-NLS-1$", "-    case 793 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "+    case 794 : if (DEBUG) { System.out.println(\"SingleMemberAnnotationMemberValue ::= MemberValue\"); }  //$NON-NLS-1$", "-    case 794 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "+    case 795 : if (DEBUG) { System.out.println(\"SingleMemberAnnotation ::= AnnotationName LPAREN...\"); }  //$NON-NLS-1$", "-    case 795 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "+    case 796 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt TypeParameters\"); }  //$NON-NLS-1$", "-    case 796 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "+    case 797 : if (DEBUG) { System.out.println(\"RecoveryMethodHeaderName ::= Modifiersopt Type0...\"); }  //$NON-NLS-1$", "-    case 797 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 798 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "-    case 798 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$", "+    case 799 : if (DEBUG) { System.out.println(\"RecoveryMethodHeader ::= RecoveryMethodHeaderName...\"); }  //$NON-NLS-1$"]}], "num": 64431}
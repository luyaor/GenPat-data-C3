{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddeaed48abef68d1ae579618a19552ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff12ac861dd64b34a5bf031b5153fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "44799a4312de29adda0739b7526827290ad954be", "commitAfterChange": "b9cb873d4449d2f10b10f7985e564b1f6bad691b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic void testModifiersAST3WithAnnotations2() throws Exception", "signatureAfterChange": " \t \tpublic void testModifiersAST3WithAnnotations2() throws Exception", "diff": ["+\t\tbuf.append(\"    @Deprecated()Object foo3() { return null; }\\n\");", "+\t\tbuf.append(\"    @Deprecated()Object foo4() { return null; }\\n\");", "+\t\t{ // insert modifier last", "+\t\t\tMethodDeclaration methodDecl= findMethodDeclaration(type, \"foo3\");", "+\t\t\tListRewrite listRewrite= rewrite.getListRewrite(methodDecl, MethodDeclaration.MODIFIERS2_PROPERTY);", "+\t\t\tModifier modifier= ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\tlistRewrite.insertLast(modifier, null);", "+\t\t}", "+\t\t{ // insert modifier first", "+\t\t\tMethodDeclaration methodDecl= findMethodDeclaration(type, \"foo4\");", "+\t\t\tListRewrite listRewrite= rewrite.getListRewrite(methodDecl, MethodDeclaration.MODIFIERS2_PROPERTY);", "+\t\t\tModifier modifier= ast.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\tlistRewrite.insertFirst(modifier, null);", "+\t\t}", "+\t\tbuf.append(\"    @Deprecated()\\n\");", "+\t\tbuf.append(\"    public Object foo3() { return null; }\\n\");", "+\t\tbuf.append(\"    public @Deprecated()Object foo4() { return null; }\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7eb89e475c4e29e521342687bdc68ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "b23efdb186bab86ee31b58ab278fa9a0bc22ac6e", "commitAfterChange": "d1672c4973b4d066327f254ca8486bc25c95661d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testThrowStatement() throws Exception", "signatureAfterChange": " \tpublic void testThrowStatement() throws Exception", "diff": ["-\t\tbuf.append(\"    }\\n\");\t\t", "+\t\tbuf.append(\"    }\\n\");", "+\t\tbuf.append(\"    public void hoo() {\\n\");", "+\t\tbuf.append(\"        throw(e);\\n\");", "+\t\tbuf.append(\"    }\\n\");\t\t\t\t", "-\t\t}\t\t\t\t", "+\t\t}", "+\t\t", "+\t\t{ // replace expression, introduce space", "+\t\t\tMethodDeclaration methodDecl= findMethodDeclaration(type, \"hoo\");", "+\t\t\tBlock block= methodDecl.getBody();", "+\t\t\tList statements= block.statements();", "+\t\t\tassertTrue(\"Number of statements not 1\", statements.size() == 1);\t\t\t", "+\t\t\t", "+\t\t\tThrowStatement statement= (ThrowStatement) statements.get(0);\t\t\t", "+\t\t\t", "+\t\t\tParenthesizedExpression expression= (ParenthesizedExpression) statement.getExpression();", "+\t\t\trewrite.replace(expression, rewrite.createMoveTarget(expression.getExpression()), null);\t", "+\t\t}\t\t", "-\t\tbuf.append(\"    }\\n\");\t\t", "+\t\tbuf.append(\"    }\\n\");", "+\t\tbuf.append(\"    public void hoo() {\\n\");", "+\t\tbuf.append(\"        throw e;\\n\");", "+\t\tbuf.append(\"    }\\n\");\t\t\t\t"]}], "num": 4169}
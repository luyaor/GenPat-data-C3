{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f87e4b0f9692aa8adbfc295bce69e5ec", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864a3bbc252d49142ec15f07fe6d345c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "fb8f376e81332a8e2eb0b6ab7b009417715a2326", "commitAfterChange": "504159d7229f244fe60c96f9b15d6167193a85b6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\t\tif (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t}", "-\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\tif (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d173d587635524a46170350869e657c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "f7f44a5b01f4fb70bcbf0ed66b511d7ae31ae7b4", "commitAfterChange": "fa93f38829626102128c1414c7fc758c38fc404d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": "  public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tif (!isNarrowing && TypeBinding.equalsEquals(match, this.resolvedType.leafComponentType())) { // do not tag as unnecessary when recursing through upper bounds", "+\t\tif (!isNarrowing && TypeBinding.equalsEquals(match, this.resolvedType.leafComponentType()) // do not tag as unnecessary when recursing through upper bounds", "+\t\t\t\t&& !(expressionType.isParameterizedType() && expressionType.isProvablyDistinct(castType))) {"]}], "num": 6936}
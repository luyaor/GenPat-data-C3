{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca403eeaa6bc0db7b38fa9f4ca359d58", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "854dc81c39145fb73dd4139341b98c8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "commitAfterChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit)", "diff": ["-\t\t\t\trequestor.acceptMethod(", "-\t\t\t\t\tmethodBinding.declaringClass.qualifiedPackageName(),", "-\t\t\t\t\tmethodBinding.declaringClass.qualifiedSourceName(),", "-\t\t\t\t\tmethodBinding.isConstructor()", "-\t\t\t\t\t\t? methodBinding.declaringClass.sourceName()", "-\t\t\t\t\t\t: methodBinding.selector,", "-\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\tmethodBinding.isConstructor());", "+\t\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\t\t\tif (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalMethod(", "+\t\t\t\t\t\t(SourceTypeBinding)declaringClass,", "+\t\t\t\t\t\tmethodBinding.isConstructor()", "+\t\t\t\t\t\t\t? declaringClass.sourceName()", "+\t\t\t\t\t\t\t: methodBinding.selector,", "+\t\t\t\t\t\tparameterPackageNames,", "+\t\t\t\t\t\tparameterTypeNames,", "+\t\t\t\t\t\tmethodBinding.isConstructor(),", "+\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t} else {", "+\t\t\t\t\trequestor.acceptMethod(", "+\t\t\t\t\t\tdeclaringClass.qualifiedPackageName(),", "+\t\t\t\t\t\tdeclaringClass.qualifiedSourceName(),", "+\t\t\t\t\t\tmethodBinding.isConstructor()", "+\t\t\t\t\t\t\t? declaringClass.sourceName()", "+\t\t\t\t\t\t\t: methodBinding.selector,", "+\t\t\t\t\t\tparameterPackageNames,", "+\t\t\t\t\t\tparameterTypeNames,", "+\t\t\t\t\t\tmethodBinding.isConstructor());", "+\t\t\t\t}", "-\t\t\t\t\tif (fieldBinding.declaringClass != null) { // arraylength", "+\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t\t\tif (declaringClass != null) { // arraylength", "-\t\t\t\t\t\trequestor.acceptField(", "-\t\t\t\t\t\t\tfieldBinding.declaringClass.qualifiedPackageName(),", "-\t\t\t\t\t\t\tfieldBinding.declaringClass.qualifiedSourceName(),", "-\t\t\t\t\t\t\tfieldBinding.name);", "+\t\t\t\t\t\tif (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {", "+\t\t\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalField(", "+\t\t\t\t\t\t\t\t(SourceTypeBinding)declaringClass,", "+\t\t\t\t\t\t\t\tfieldBinding.name,", "+\t\t\t\t\t\t\t\tparsedUnit);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\trequestor.acceptField(", "+\t\t\t\t\t\t\t\tdeclaringClass.qualifiedPackageName(),", "+\t\t\t\t\t\t\t\tdeclaringClass.qualifiedSourceName(),", "+\t\t\t\t\t\t\t\tfieldBinding.name);", "+\t\t\t\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f736b721047cbffc2be457918f0be98b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "c658da8ee403c4a9726e31e0b3916361b6795525", "commitAfterChange": "bb6a78d249db719996651e9dce01af3d16d29c93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["+\t\tCategorizedProblem problem = null;", "+\t\t\t\t\tVariableElementImpl variableElementImpl = (VariableElementImpl) e;", "+\t\t\t\t\tbinding = variableElementImpl._binding;", "+\t\t\t\t\tif (binding instanceof FieldBinding) {", "+\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldBinding.sourceField();", "+\t\t\t\t\t\tif (fieldDeclaration != null) {", "+\t\t\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t\t\t\t\tif (declaringClass instanceof SourceTypeBinding) {", "+\t\t\t\t\t\t\t\tSourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;", "+\t\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();", "+\t\t\t\t\t\t\t\treferenceContext = typeDeclaration;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstartPosition = fieldDeclaration.sourceStart;", "+\t\t\t\t\t\t\tendPosition = fieldDeclaration.sourceEnd;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tresult.record(new BatchAptProblem(", "-\t\t\t\t\t\t\tresult.fileName, ", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tresult.fileName,", "-\t\t\t\t\t\t\tnew String[0],", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "-\t\t\t\t\t\t\tcolumnNumber),", "-\t\t\t\t\t\treferenceContext);", "+\t\t\t\t\t\t\tcolumnNumber);", "-\t\t\t\t\t// TODO (olivier) need a way to find a context to report the error", "-\t\t\t\t\t_compiler.globalErrorsCount++;", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tString.valueOf(builder),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "+\t\t\t\t\t\t\tProblemSeverities.Error,", "+\t\t\t\t\t\t\tstartPosition,", "+\t\t\t\t\t\t\tendPosition,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t1);", "+\t\t\tcase MANDATORY_WARNING :", "+\t\t\tcase NOTE :", "+\t\t\tcase OTHER :", "-\t\t\t\t\tresult.record(new BatchAptProblem(", "-\t\t\t\t\t\t\tresult.fileName, ", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tresult.fileName,", "-\t\t\t\t\t\t\tnew String[0],", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "-\t\t\t\t\t\t\tcolumnNumber),", "-\t\t\t\t\t\treferenceContext);", "+\t\t\t\t\t\t\tcolumnNumber);", "-\t\t\t\t\t// TODO (olivier) need a way to find a context to report the warning", "-\t\t\t\t\t_compiler.globalWarningsCount++;", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tString.valueOf(builder),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "+\t\t\t\t\t\t\tProblemSeverities.Warning,", "+\t\t\t\t\t\t\tstartPosition,", "+\t\t\t\t\t\t\tendPosition,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t1);", "+\t\tif (problem != null) {", "+\t\t\tthis._compiler.addExtraProblems(problem);", "+\t\t}"]}], "num": 51830}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "605a28201d306d35f66d391ef36386a8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334cdffeb1c90c586a4428b7faab1a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " private SimpleLookupTable getIndexStates()", "signatureAfterChange": " private SimpleLookupTable getIndexStates()", "diff": ["-\tif (indexStates != null) return indexStates;", "+\tif (this.indexStates != null) return this.indexStates;", "-\tchar[] savedIndexNames = readIndexState();", "-\tif (savedIndexNames.length > 0) {", "-\t\tchar[][] names = CharOperation.splitOn('\\n', savedIndexNames);", "-\t\tif (names.length > 0) {", "-\t\t\t// check to see if workspace has moved, if so then do not trust saved indexes", "-\t\t\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "-\t\t\tchar[] dirName = indexesDirectory.getAbsolutePath().toCharArray();", "-\t\t\tint delimiterPos = dirName.length;", "-\t\t\tif (CharOperation.match(names[0], 0, delimiterPos, dirName, 0, delimiterPos, true)) {", "-\t\t\t\tfor (int i = 0, l = names.length; i < l; i++) {", "-\t\t\t\t\tchar[] name = names[i];", "-\t\t\t\t\tif (name.length > 0)", "-\t\t\t\t\t\tthis.indexStates.put(new String(name), SAVED_STATE);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tsavedIndexNamesFile.delete(); // forget saved indexes & delete each index file", "-\t\t\t\tFile[] files = indexesDirectory.listFiles();", "-\t\t\t\tif (files != null) {", "-\t\t\t\t\tfor (int i = 0, l = files.length; i < l; i++) {", "-\t\t\t\t\t\tString fileName = files[i].getAbsolutePath();", "-\t\t\t\t\t\tif (fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\t\tUtil.verbose(\"Deleting index file \" + files[i]); //$NON-NLS-1$", "-\t\t\t\t\t\t\tfiles[i].delete();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\tIPath indexesDirectoryPath = getJavaPluginWorkingLocation();", "+\tchar[][] savedNames = readIndexState(indexesDirectoryPath.toOSString());", "+\tif (savedNames != null) {", "+\t\tfor (int i = 1, l = savedNames.length; i < l; i++) { // first name is saved signature, see readIndexState()", "+\t\t\tchar[] savedName = savedNames[i];", "+\t\t\tif (savedName.length > 0) {", "+\t\t\t\tIPath indexLocation = indexesDirectoryPath.append(new String(savedName)); // shares indexesDirectoryPath's segments", "+\t\t\t\tif (VERBOSE)", "+\t\t\t\t\tUtil.verbose(\"Reading saved index file \" + indexLocation); //$NON-NLS-1$", "+\t\t\t\tthis.indexStates.put(indexLocation, SAVED_STATE);", "+\t} else {", "+\t\tthis.savedIndexNamesFile.delete(); // forget saved indexes & delete each index file", "+\t\tdeleteIndexFiles(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff433b33ad98d2b3bd1fefaa3582274", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void cleanUpIndexes()", "signatureAfterChange": " public void cleanUpIndexes()", "diff": ["-\tSimpleLookupTable knownPaths = new SimpleLookupTable();", "+\tSimpleSet knownPaths = new SimpleSet();", "-\tfor (int j = 0, max = selectedIndexes.length; j < max; j++) {", "-\t\t// TODO should use getJavaPluginWorkingLocation()+index simple name to avoid bugs such as https://bugs.eclipse.org/bugs/show_bug.cgi?id=62267", "-\t\tString path = selectedIndexes[j].getIndexFile().getAbsolutePath();", "-\t\tknownPaths.put(path, path);", "+\tfor (int i = 0, l = selectedIndexes.length; i < l; i++) {", "+\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();", "+\t\tknownPaths.add(path);", "-\tif (indexStates != null) {", "-\t\tObject[] keys = indexStates.keyTable;", "-\t\tint keysLength = keys.length;", "-\t\tint updates = 0;", "-\t\tString locations[] = new String[keysLength];", "+\tif (this.indexStates != null) {", "+\t\tObject[] keys = this.indexStates.keyTable;", "+\t\tIPath[] locations = new IPath[this.indexStates.elementSize];", "+\t\tint count = 0;", "-\t\t\tString key = (String) keys[i];", "-\t\t\tif (key != null && !knownPaths.containsKey(key)) {", "-\t\t\t\tlocations[updates++] = key;", "-\t\t\t}", "+\t\t\tIPath key = (IPath) keys[i];", "+\t\t\tif (key != null && !knownPaths.includes(key.toOSString()))", "+\t\t\t\tlocations[count++] = key;", "-\t\tif (updates > 0) {", "+\t\tif (count > 0)", "-\t\t}", "-", "-\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "-\tif (indexesDirectory.isDirectory()) {", "-\t\tFile[] indexesFiles = indexesDirectory.listFiles();", "-\t\tif (indexesFiles != null) {", "-\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "-\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "-\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\tUtil.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "-\t\t\t\t\tindexesFiles[i].delete();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tdeleteIndexFiles(knownPaths);"]}], "num": 49178}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba11174e8c60964987cc8cd7af04e630", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c48212de7800fa18125359e4f68f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2c4584c2d5b726b4cdc708e96ad6b04e53986107", "commitAfterChange": "107f362cb3526a7bf91d7e9a22a75cf0b6b560f8", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "diff": ["+\tTypeBinding offendingArgument = null;", "+\tTypeBinding offendingParameter = null;", "+\tfor (int i = 0, length = method.parameters.length; i < length; i++) {", "+\t\tTypeBinding parameter = method.parameters[i];", "+\t\tif (parameter.isWildcard() && (((WildcardBinding) parameter).kind != Wildcard.SUPER)) {", "+\t\t\toffendingParameter = parameter;", "+\t\t\toffendingArgument = arguments[i];", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\t", "+\t\t\t\tnew String(offendingArgument.readableName()),", "+\t\t\t\tnew String(offendingParameter.readableName()),", "+\t\t\t\tnew String(offendingArgument.shortReadableName()),", "+\t\t\t\tnew String(offendingParameter.shortReadableName()),", "+\t\t\t\tnew String(offendingArgument.readableName()),", "+\t\t\t\tnew String(offendingParameter.readableName()),", "+\t\t\t\tnew String(offendingArgument.shortReadableName()),", "+\t\t\t\tnew String(offendingParameter.shortReadableName()),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ae89ef5ab51c1db3aca6e367edb353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0df57fb5e3c8ba23a5c9637624ca9064d6362105", "commitAfterChange": "ec347031cf50724e26089d866fc7a0e2b977eae3", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void secondaryTypeAdding(String path, char[] key)", "signatureAfterChange": " \tpublic void secondaryTypeAdding(String path, char[] typeName, char[] packageName)", "diff": ["-\tpublic void secondaryTypeAdding(String path, char[] key) {", "+\tpublic void secondaryTypeAdding(String path, char[] typeName, char[] packageName) {", "-\t\t\tbuffer.append(new String(key));", "+\t\t\tbuffer.append(new String(packageName));", "+\t\t\tbuffer.append('.');", "+\t\t\tbuffer.append(new String(typeName));", "-\t\t\t\t\t\tchar[][] names = CharOperation.splitOn('/', key);", "-\t\t\t\t\t\tString typeName = new String(names[0]);", "-\t\t\t\t\t\tString packName = new String(names[1]);", "-\t\t\t\t\t\tHashMap packageTypes = (HashMap) allTypes.get(packName);", "+\t\t\t\t\t\tString typeString = new String(typeName);", "+\t\t\t\t\t\tString packageString = new String(packageName);", "+\t\t\t\t\t\tHashMap packageTypes = (HashMap) allTypes.get(packageString);", "-\t\t\t\t\t\t\tallTypes.put(packName, packageTypes);", "+\t\t\t\t\t\t\tallTypes.put(packageString, packageTypes);", "-\t\t\t\t\t\tpackageTypes.put(typeName, unit.getType(typeName));", "+\t\t\t\t\t\tpackageTypes.put(typeString, unit.getType(typeString));"]}], "num": 10036}
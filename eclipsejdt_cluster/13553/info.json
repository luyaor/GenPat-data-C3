{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c5affe22988ba48e8624903e8ebf950", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c24a86429c470a38737f43acb63dfa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "be1ab5866130739e4d5dea6be597450bab4d9fe1", "commitAfterChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t     private File getOutputFileForLocation( Filer.Location loc, String pkg, File relPath )     \tthrows IOException", "signatureAfterChange": " \t     private IPath getOutputFileForLocation( Filer.Location loc, String pkg, File relPath )     \tthrows IOException", "diff": ["-    private File getOutputFileForLocation( Filer.Location loc, String pkg, File relPath )", "+    private IPath getOutputFileForLocation( Filer.Location loc, String pkg, File relPath )", "-    \tFile f = null;", "+    \tIPath path = null;", "-    \t\t\tf = gfm.getGeneratedSourceFolderOutputLocation();", "+    \t\t\tpath = gfm.getGeneratedSourceFolderOutputLocation();", "-    \t\tf = gfm.getGeneratedSourceFolder().getRawLocation().toFile();", "+    \t\tpath = gfm.getGeneratedSourceFolder().getRawLocation();", "-            f = new File( f, pkg.replace('.', File.separatorChar) );", "+            path = path.append(pkg.replace('.', File.separatorChar) );", "-        f = new File( f, relPath.getPath() );", "+        path = path.append(relPath.getPath() );", "-        // REVIEW: for no apparent reason it is sometimes necessary to create the", "-        // parent dir, else an IOException occurs creating f..", "-        File p = f.getParentFile();", "-        FileSystemUtil.mkdirs( p );", "+        File parentFile = path.toFile().getParentFile();", "+        FileSystemUtil.mkdirs( parentFile );", "-    \treturn f;", "+    \treturn path;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca1d1ad83a92dd0789fa1e8d7e6006f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "be1ab5866130739e4d5dea6be597450bab4d9fe1", "commitAfterChange": "b0e9bea8e580536e7492868aec6988424ff22cb7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public OutputStream createClassFile(String name) throws IOException", "signatureAfterChange": "     public OutputStream createClassFile(String name) throws IOException", "diff": ["-    \tFile f = null;", "-    \t", "+    \tIPath path;", "-    \t\tf = gfm.getGeneratedSourceFolderOutputLocation();", "+    \t\t path = gfm.getGeneratedSourceFolderOutputLocation();", "-    \tf = new File( f, name.replace( '.', File.separatorChar ) + \".class\" ); //$NON-NLS-1$", "-  ", "-        // REVIEW: for no apparent reason it is sometimes necessary to create the", "-        // parent dir, else an IOException occurs creating f..", "-        File p = f.getParentFile();", "-        FileSystemUtil.mkdirs( p );", "+    \tpath = path.append(name.replace('.', File.separatorChar) + \".class\"); //$NON-NLS-1$", "-        return new FileOutputStream( f );", "+        // It is sometimes necessary to create the", "+        // parent dir, else an IOException occurs creating f..", "+        File parentFile = path.toFile().getParentFile();", "+        FileSystemUtil.mkdirs( parentFile );", "+    \t", "+        return new RefreshingFileOutputStream( path, _env.getProject() );"]}], "num": 13553}
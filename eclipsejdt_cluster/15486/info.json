{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "021b02ce3fa4dc43a8de4c13a827b3d8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e49985839a152d03c5fe082a3233183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateImpl.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r \tprotected void getSourceElementEntries(\r \t\tIPackage pkg,\r \t\tIPath path,\r \t\tLookupTable entryTable)", "signatureAfterChange": "\r \tprotected void getSourceElementEntries(IPackage pkg, IPath path, LookupTable entryTable)", "diff": ["-\tprotected void getSourceElementEntries(\r", "-\t\tIPackage pkg,\r", "-\t\tIPath path,\r", "-\t\tLookupTable entryTable) {\r", "+\tprotected void getSourceElementEntries(IPackage pkg, IPath path, LookupTable entryTable) {\r", "-\t\t\tIPackageFragmentRoot root = null;\r", "-\t\t\tIPackageFragment frag = null;\r", "-\t\t\tboolean isDefault = pkg.isUnnamed();\r", "-\t\t\tString pkgName =\r", "-\t\t\t\tisDefault ? IPackageFragment.DEFAULT_PACKAGE_NAME : pkg.getName();\r", "-\t\t\tString pkgPath = pkgName.replace('.', '/');\r", "+\t\t\tIPackageFragmentRoot root= null;\r", "+\t\t\tIPackageFragment frag= null;\r", "+\t\t\tboolean isDefault= pkg.isUnnamed();\r", "+\t\t\tString pkgName= isDefault ? IPackageFragment.DEFAULT_PACKAGE_NAME : pkg.getName();\r", "+\t\t\tString pkgPath= pkgName.replace('.', '/');\r", "-\t\t\t\tIResource member = null;\r", "-\t\t\t\tif (!path.isAbsolute()\r", "-\t\t\t\t\t|| getProject().getWorkspace().getRoot().findMember(path) != null) {\r", "-\t\t\t\t\troot = getJavaProject().getPackageFragmentRoot(getFile(path));\r", "+\t\t\t\tIResource member= null;\r", "+\t\t\t\tif (!path.isAbsolute() || getProject().getWorkspace().getRoot().findMember(path) != null) {\r", "+\t\t\t\t\troot= getJavaProject().getPackageFragmentRoot(getFile(path));\r", "-\t\t\t\t\troot = getJavaProject().getPackageFragmentRoot(path.toOSString());\r", "+\t\t\t\t\troot= getJavaProject().getPackageFragmentRoot(path.toOSString());\r", "-\t\t\t\tfrag = root.getPackageFragment(pkgName);\r", "+\t\t\t\tfrag= root.getPackageFragment(pkgName);\r", "-\t\t\t\tIPackageFragmentRoot[] roots = getPackageFragmentRootsInClassPath();\r", "-\t\t\t\tfor (int i = 0; i < roots.length; ++i) {\r", "-\t\t\t\t\tIPackageFragmentRoot testRoot = roots[i];\r", "-\t\t\t\t\tif (!testRoot.isArchive()\r", "-\t\t\t\t\t\t&& testRoot.getUnderlyingResource().getFullPath().isPrefixOf(path)) {\r", "-\t\t\t\t\t\troot = testRoot;\r", "-\t\t\t\t\t\tfrag = testRoot.getPackageFragment(pkgName);\r", "+\t\t\t\tIPackageFragmentRoot[] roots= getPackageFragmentRootsInClassPath();\r", "+\t\t\t\tfor (int i= 0; i < roots.length; ++i) {\r", "+\t\t\t\t\tIPackageFragmentRoot testRoot= roots[i];\r", "+\t\t\t\t\tif (!testRoot.isArchive() && testRoot.getUnderlyingResource().getFullPath().isPrefixOf(path)) {\r", "+\t\t\t\t\t\troot= testRoot;\r", "+\t\t\t\t\t\tfrag= testRoot.getPackageFragment(pkgName);\r", "-\t\t\tboolean isArchive = root.isArchive();\r", "+\t\t\tboolean isArchive= root.isArchive();\r", "-\t\t\tif (isArchive\r", "-\t\t\t\t&& root.getUnderlyingResource() != null\r", "-\t\t\t\t&& !root.getUnderlyingResource().isLocal(IResource.DEPTH_ZERO)) {\r", "+\t\t\tif (isArchive && root.getUnderlyingResource() != null && !root.getUnderlyingResource().isLocal(IResource.DEPTH_ZERO)) {\r", "-\t\t\tIPath entryPath = null;\r", "+\t\t\tIPath entryPath= null;\r", "-\t\t\tString zipEntryFileName = null;\r", "+\t\t\tString zipEntryFileName= null;\r", "-\t\t\tICompilationUnit[] units = frag.getCompilationUnits();\r", "-\t\t\tfor (int i = 0; i < units.length; ++i) {\r", "-\t\t\t\tICompilationUnit unit = units[i];\r", "-\t\t\t\tString fileName = unit.getElementName();\r", "-\t\t\t\t/* see if a source entry exists for this file name */\r", "-\t\t\t\tif (entryTable.get(fileName) == null) {\r", "+\t\t\tICompilationUnit[] units= frag.getCompilationUnits();\r", "+\t\t\tfor (int i= 0; i < units.length; ++i) {\r", "+\t\t\t\tICompilationUnit unit= units[i];\r", "+\t\t\t\tString fileName= unit.getElementName();\r", "+\t\t\t\t// get the corresponding .class file name\r", "+\t\t\t\tString classFileName = \"\";\r", "+\t\t\t\tif (Util.isJavaFileName(fileName)) { // paranoia check\r", "+\t\t\t\t\tclassFileName = fileName.substring(0, fileName.length()-5).concat(\".class\");\r", "+\t\t\t\t}\r", "+\t\t\t\t// see if a source entry exists for this file name\r", "+\t\t\t\t// or for the corresponding .class file\r", "+\t\t\t\tif (entryTable.get(fileName) == null && entryTable.get(classFileName) == null) {\r", "-\t\t\t\t\t\tentryPath = path;\r", "+\t\t\t\t\t\tentryPath= path;\r", "-\t\t\t\t\t\tzipEntryFileName = fileName;\r", "+\t\t\t\t\t\tzipEntryFileName= fileName;\r", "-\t\t\t\t\t\tentryPath = unit.getUnderlyingResource().getFullPath();\r", "+\t\t\t\t\t\tentryPath= unit.getUnderlyingResource().getFullPath();\r", "-\t\t\t\t\t\tzipEntryFileName = null;\r", "+\t\t\t\t\t\tzipEntryFileName= null;\r", "-\t\t\t\t\tSourceEntry sEntry = new SourceEntry(entryPath, zipEntryPath, zipEntryFileName);\r", "+\t\t\t\t\tSourceEntry sEntry= new SourceEntry(entryPath, zipEntryPath, zipEntryFileName);\r", "-\t\t\tIClassFile[] classFiles = frag.getClassFiles();\r", "-\t\t\tfor (int i = 0; i < classFiles.length; ++i) {\r", "-\t\t\t\tIClassFile classFile = classFiles[i];\r", "-\t\t\t\tString fileName = classFile.getElementName();\r", "-\t\t\t\t/* see if a source entry exists for this file name */\r", "-\t\t\t\tif (entryTable.get(fileName) == null) {\r", "+\t\t\tIClassFile[] classFiles= frag.getClassFiles();\r", "+\t\t\tfor (int i= 0; i < classFiles.length; ++i) {\r", "+\t\t\t\tIClassFile classFile= classFiles[i];\r", "+\t\t\t\tString fileName= classFile.getElementName();\r", "+\t\t\t\t// get the corresponding .java file name\r", "+\t\t\t\t// note: this handles nested types, but not secondary types (e.g. class B defined in A.java)\r", "+\t\t\t\tString javaFileName = \"\";\r", "+\t\t\t\tif (Util.isClassFileName(fileName)) { // paranoia check\r", "+\t\t\t\t\t// strip off any nested types\r", "+\t\t\t\t\tjavaFileName = fileName.substring(0, fileName.length()-6);\r", "+\t\t\t\t\tint dol = javaFileName.indexOf('$');\r", "+\t\t\t\t\tif (dol != -1) {\r", "+\t\t\t\t\t\tjavaFileName = javaFileName.substring(0, dol);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tjavaFileName = javaFileName.concat(\".java\");\r", "+\t\t\t\t}\r", "+\t\t\t\t// see if a source entry exists for this file name\r", "+\t\t\t\t// or for the corresponding .java file\r", "+\t\t\t\tif (entryTable.get(fileName) == null && entryTable.get(javaFileName) == null) {\r", "-\t\t\t\t\t\tentryPath = path;\r", "+\t\t\t\t\t\tentryPath= path;\r", "-\t\t\t\t\t\tzipEntryFileName = fileName;\r", "+\t\t\t\t\t\tzipEntryFileName= fileName;\r", "-\t\t\t\t\t\tentryPath = classFile.getUnderlyingResource().getFullPath();\r", "+\t\t\t\t\t\tentryPath= classFile.getUnderlyingResource().getFullPath();\r", "-\t\t\t\t\t\tzipEntryFileName = null;\r", "+\t\t\t\t\t\tzipEntryFileName= null;\r", "-\t\t\t\t\tSourceEntry sEntry = new SourceEntry(entryPath, zipEntryPath, zipEntryFileName);\r", "+\t\t\t\t\tSourceEntry sEntry= new SourceEntry(entryPath, zipEntryPath, zipEntryFileName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e709b6aada4f23cda9913bcc1ffbfe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ac6a9f56760bba7aec9ca8548c00a789a95fdc11", "commitAfterChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r private void cloneCurrentDelta(IJavaProject project, IResource rootResource)", "signatureAfterChange": "\r \r \r private void cloneCurrentDelta(IJavaProject project, IPackageFragmentRoot root)", "diff": ["-private void cloneCurrentDelta(IJavaProject project, IResource rootResource) {\r", "+\r", "+private void cloneCurrentDelta(IJavaProject project, IPackageFragmentRoot root) {\r", "+\tJavaElementDelta delta = (JavaElementDelta)fCurrentDelta.find(root);\r", "+\tif (delta == null) return;\r", "+\tJavaElementDelta clone = (JavaElementDelta)delta.clone(project);\r", "+\tfCurrentDelta.insertDeltaTree(clone.getElement(), clone);\r", "+\tswitch (clone.getKind()) {\r", "+\t\tcase IJavaElementDelta.ADDED:\r", "+\t\t\tthis.addToParentInfo((Openable)clone.getElement());\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElementDelta.REMOVED:\r", "+\t\t\tOpenable element = (Openable)clone.getElement();\r", "+\t\t\tif (element.isOpen()) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\telement.close();\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tthis.removeFromParentInfo(element);\r", "+\t\t\tbreak;\r", "+\t}\r"]}], "num": 15486}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6fca87e6b51d7ddf79cafce89aa15e9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b59bd4964561b5512c2474fc8d44156", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\tif (methodDecl == null) {", "-\t\t\t\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "-\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\tmethods[i] = null;", "-\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (methodDecl == null) \tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2Decl);", "-\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\tmethods[j] = null;", "-\t\t\t\t\t\t\tfailed++;", "+\t\t\t\t\t\t\t// could collide with special methods for enumerations", "+\t\t\t\t\t\t\tif (methodDecl == null) {", "+\t\t\t\t\t\t\t\tif (method.selector == TypeConstants.VALUEOF", "+\t\t\t\t\t\t\t\t\t\t|| method.selector == TypeConstants.VALUES) {", "+\t\t\t\t\t\t\t\t\tif (method2Decl != null) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateEnumSpecialMethod(this, method2Decl);", "+\t\t\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t// leave enum special method to minimize secondary error (further references to it)", "+\t\t\t\t\t\t\t\t\tmethods[j] = null;", "+\t\t\t\t\t\t\t\t\tfailed++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (method2Decl == null) {", "+\t\t\t\t\t\t\t\tif (method2.selector == TypeConstants.VALUEOF", "+\t\t\t\t\t\t\t\t\t\t|| method2.selector == TypeConstants.VALUES) {", "+\t\t\t\t\t\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);", "+\t\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t// leave enum special method to minimize secondary error (further references to it)", "+\t\t\t\t\t\t\t\t\tmethods[i] = null;", "+\t\t\t\t\t\t\t\t\tfailed++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (methodDecl.binding != null) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "+\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (method2Decl != null) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2Decl);", "+\t\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tmethods[i] = null;", "+\t\t\t\t\t\t\t\tmethods[j] = null;", "+\t\t\t\t\t\t\t\tfailed+=2;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d702739de905c6c1d7bf035a27a33124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\tif (methodDecl == null) \tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\tAbstractMethodDeclaration method2Decl = method2.sourceMethod();", "-\t\t\t\t\t\t\t// could collide with special methods for enumerations", "+\t\t\t\t\t\t\tboolean isEnumSpecialMethod = isEnum()", "+\t\t\t\t\t\t\t\t&& (method.selector == TypeConstants.VALUEOF || method.selector == TypeConstants.VALUES);", "-\t\t\t\t\t\t\t\tif (method.selector == TypeConstants.VALUEOF", "-\t\t\t\t\t\t\t\t\t\t|| method.selector == TypeConstants.VALUES) {", "-\t\t\t\t\t\t\t\t\tif (method2Decl != null) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateEnumSpecialMethod(this, method2Decl);", "-\t\t\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// leave enum special method to minimize secondary error (further references to it)", "-\t\t\t\t\t\t\t\t\tmethods[j] = null;", "-\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (method2Decl == null) {", "-\t\t\t\t\t\t\t\tif (method2.selector == TypeConstants.VALUEOF", "-\t\t\t\t\t\t\t\t\t\t|| method2.selector == TypeConstants.VALUES) {", "-\t\t\t\t\t\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "+\t\t\t\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\t\t\t\tif (isEnumSpecialMethod)", "-\t\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// leave enum special method to minimize secondary error (further references to it)", "+\t\t\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "+\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (methodDecl.binding != null) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "-\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (method2Decl != null) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tAbstractMethodDeclaration method2Decl = method2.sourceMethod();", "+\t\t\t\t\t\t\tif (method2Decl != null && method2Decl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\t\t\tif (isEnumSpecialMethod)", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateEnumSpecialMethod(this, method2Decl);", "+\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tmethods[i] = null;", "+\t\t\t\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t\t\t\tfailed+=2;", "+\t\t\t\t\t\t\t\tfailed++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5d708809c8962e9ea026993ea7fd902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c9cd00a8dc1b877b2c5187fd0281ae7de37ff02a", "commitAfterChange": "4b3b23614cfca32dd53fa7e699914bb6d6883a79", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["-", "-\t\t\t\tif (CharOperation.equals(method.selector, otherMethod.selector, true)", "-\t\t\t\t\t&& lookupEnvironment.methodVerifier().doesMethodOverride(otherMethod, method)) {", "-", "-\t\t\t\t\tif (method.declaringClass.isSuperclassOf(otherMethod.declaringClass))", "-\t\t\t\t\t\tcontinue next;", "-", "-\t\t\t\t\tif (otherMethod.declaringClass.isInterface()) {", "-\t\t\t\t\t\tif(method.declaringClass == scope.getJavaLangObject())", "-\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (method.declaringClass.isInterface())", "-\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (!superCall && method", "-\t\t\t\t\t\t\t.declaringClass", "-\t\t\t\t\t\t\t.implementsInterface(otherMethod.declaringClass, true))", "-\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tif (method.declaringClass.isInterface())", "-\t\t\t\t\t\tif(otherMethod", "-\t\t\t\t\t\t\t.declaringClass", "-\t\t\t\t\t\t\t.implementsInterface(method.declaringClass,true))", "-\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t", "-\t\t\t\t\tif(receiverType.isAnonymousType()) continue next;", "-\t\t\t\t\t", "-\t\t\t\t\tif(!superCall) {", "-\t\t\t\t\t\tif(canBePrefixed) {", "-\t\t\t\t\t\t\tprefixRequired = true;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t", "+\t\t\t\tif (CharOperation.equals(method.selector, otherMethod.selector, true)) {", "+\t\t\t\t\tif (receiverType == otherReceiverType) {", "+\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().doesMethodOverride(otherMethod, method)) {", "+\t\t\t\t\t\t\tif (!superCall || !otherMethod.declaringClass.isInterface()) {", "+\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().doesMethodOverride(otherMethod, method)) {", "+\t\t\t\t\t\t\tif(receiverType.isAnonymousType()) continue next;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif(!superCall) {", "+\t\t\t\t\t\t\t\tif(!canBePrefixed) continue next;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tprefixRequired = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t", "+\t\t\tReferenceBinding superTypeWithSameErasure = (ReferenceBinding)receiverType.findSuperTypeWithSameErasure(method.declaringClass);", "+\t\t\tif (method.declaringClass != superTypeWithSameErasure) {", "+\t\t\t\tMethodBinding[] otherMethods = superTypeWithSameErasure.getMethods(method.selector);", "+\t\t\t\tfor (int i = 0; i < otherMethods.length; i++) {", "+\t\t\t\t\tif(otherMethods[i].original() == method.original()) {", "+\t\t\t\t\t\tmethod = otherMethods[i];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}], "num": 38366}
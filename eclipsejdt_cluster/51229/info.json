{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e27aa9ed83b946c6dcf7ff8c28160fc8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eef187088ee084c94c5c082b286371a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarClassLoader.java", "commitBeforeChange": "b4f6df5ae08d61af8762ee59e5c247a670be227d", "commitAfterChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic JarClassLoader(List<File> jarFiles, final ClassLoader parent)", "signatureAfterChange": " \t \tpublic JarClassLoader(List<File> jarFiles, final ClassLoader parent)", "diff": ["-\t\t_files = jarFiles;", "+\t\t// Handle manifest classpath entries", "+\t\t_files = new LinkedHashSet<File>(jarFiles);", "+\t\tfor (File f : jarFiles) {", "+\t\t\t_recursiveGetManifestJars(f, _files);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a792faef3b32d9d3bd217004a4ae0cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public final boolean jumpOverUnicodeWhiteSpace()\r \tthrows InvalidInputException", "signatureAfterChange": "\r public final boolean jumpOverUnicodeWhiteSpace()\r \tthrows InvalidInputException", "diff": ["-\tint c1, c2, c3, c4;\r", "-\tint unicodeSize = 6;\r", "-\tcurrentPosition++;\r", "-\twhile (source[currentPosition] == 'u') {\r", "+\ttry {\r", "+\t\tint c1, c2, c3, c4;\r", "+\t\tint unicodeSize = 6;\r", "-\t\tunicodeSize++;\r", "-\t}\r", "+\t\twhile (source[currentPosition] == 'u') {\r", "+\t\t\tcurrentPosition++;\r", "+\t\t\tunicodeSize++;\r", "+\t\t}\r", "-\tif (((c1 = Character.getNumericValue(source[currentPosition++])) > 15\r", "-\t\t|| c1 < 0)\r", "-\t\t|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)\r", "-\t\t|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)\r", "-\t\t|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {\r", "+\t\tif (((c1 = Character.getNumericValue(source[currentPosition++])) > 15\r", "+\t\t\t|| c1 < 0)\r", "+\t\t\t|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)\r", "+\t\t\t|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)\r", "+\t\t\t|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {\r", "+\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);\r", "+\t\t}\r", "+\r", "+\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\tif (recordLineSeparator\r", "+\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "+\t\t\tpushLineSeparator();\r", "+\t\tif (Character.isWhitespace(currentCharacter))\r", "+\t\t\treturn true;\r", "+\r", "+\t\t//buffer the new char which is not a white space\r", "+\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;\r", "+\t\t//withoutUnicodePtr == 1 is true here\r", "+\t\treturn false;\r", "+\t} catch (IndexOutOfBoundsException e){\r", "-\r", "-\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "-\tif (recordLineSeparator\r", "-\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\tpushLineSeparator();\r", "-\tif (Character.isWhitespace(currentCharacter))\r", "-\t\treturn true;\r", "-\r", "-\t//buffer the new char which is not a white space\r", "-\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;\r", "-\t//withoutUnicodePtr == 1 is true here\r", "-\treturn false;\r"]}], "num": 51229}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0d66b2d808312781fae7aeffcea13c8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06cce66d4cf952039481ae77c394831c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["+\t\tthis.snapShot = null;", "-\tfor(int i = 0; i <= this.astPtr; i++){", "-\t\tASTNode node = this.astStack[i];", "+\tASTNode node = null, lastNode = null;", "+\tfor (int i = 0; i <= this.astPtr; i++, lastNode = node) {", "+\t\tnode = this.astStack[i];", "-\t\t\t\t\tblock = new Block(0);", "+\t\t\t\t\tblock = new Block(0, lastNode instanceof LambdaExpression);", "-\t\tif (node instanceof LambdaExpression) {", "-\t\t\tLambdaExpression lambda = (LambdaExpression) node;", "-\t\t\telement = element.add(lambda, 0);", "-\t\t\tthis.lastCheckPoint = lambda.sourceEnd + 1;", "-\t\t\tcontinue;", "-\t\t}", "+\t/* For block bodied lambdas we should create a block even though the lambda header appears before it, so elements from within don't get misattributed. */", "+\tboolean createLambdaBlock = lastNode instanceof LambdaExpression && ((LambdaExpression) node).body() instanceof Block;", "-\t\t\tif ((this.blockStarts[j] < pos) && (this.blockStarts[j] != lastStart)){ // avoid multiple block if at same position", "-\t\t\t\tblock = new Block(0);", "+\t\t\tif ((this.blockStarts[j] < pos || createLambdaBlock) && (this.blockStarts[j] != lastStart)){ // avoid multiple block if at same position", "+\t\t\t\tblock = new Block(0, createLambdaBlock);", "+\t\t\t\tcreateLambdaBlock = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4553418e09ff6660c538b5860559a072", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["-\t\t\tif (blockStarts[j] > nodeStart){", "-\t\t\t\tblockIndex = j; // shift the index to the new block", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (blockStarts[j] != lastStart){ // avoid multiple block if at same position", "+\t\t\tif (blockStarts[j] >= 0) {", "+\t\t\t\tif (blockStarts[j] > nodeStart){", "+\t\t\t\t\tblockIndex = j; // shift the index to the new block", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (blockStarts[j] != lastStart){ // avoid multiple block if at same position", "+\t\t\t\t\tblock = new Block(0);", "+\t\t\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "+\t\t\t\t\telement = element.add(block, 1);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (-blockStarts[j] > nodeStart){", "+\t\t\t\t\tblockIndex = j; // shift the index to the new block", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "+\t\t\t\tblock.sourceStart = lastStart = -blockStarts[j];", "-\t\tif ((blockStarts[j] < pos) && (blockStarts[j] != lastStart)){ // avoid multiple block if at same position", "-\t\t\tblock = new Block(0);", "-\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "-\t\t\telement = element.add(block, 1);", "+\t\tif (blockStarts[j] >= 0) {", "+\t\t\tif ((blockStarts[j] < pos) && (blockStarts[j] != lastStart)){ // avoid multiple block if at same position", "+\t\t\t\tblock = new Block(0);", "+\t\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "+\t\t\t\telement = element.add(block, 1);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif ((blockStarts[j] < pos)){ // avoid multiple block if at same position", "+\t\t\t\tblock = new Block(0);", "+\t\t\t\tblock.sourceStart = lastStart = -blockStarts[j];", "+\t\t\t\telement = element.add(block, 1);", "+\t\t\t}"]}], "num": 46780}
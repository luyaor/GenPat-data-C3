{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21e84718715b7b07aebae2f9923a77aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ca05908e2ac544540cb5553e5ab960", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "287a8246425dec3b8e6cdd428f661326776e45cd", "commitAfterChange": "058b7e49b52c7b18f15a01083d7620b3d5aa8490", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptLocalMethod(MethodBinding methodBinding)", "diff": ["-public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end) {", "-\tIType type = (IType)this.handleFactory.createElement(typeBinding.scope.referenceContext, parsedUnit, this.openable);", "-\t// fix for 1FWFT6Q", "-\tif (type != null) {", "-\t\tif (type.isBinary()) {", "-\t\t\t", "-\t\t\t// need to add a paramater for constructor in binary type", "-\t\t\tIType declaringDeclaringType = type.getDeclaringType();", "-\t\t\t", "-\t\t\tboolean isStatic = false;", "-\t\t\ttry {", "-\t\t\t\tisStatic = Flags.isStatic(type.getFlags());", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// isStatic == false", "-\t\t\t}", "-\t\t\t", "-\t\t\tif(declaringDeclaringType != null && isConstructor\t&& !isStatic) {", "-\t\t\t\tint length = parameterPackageNames.length;", "-\t\t\t\tSystem.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);", "-\t\t\t\tSystem.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);", "-\t\t\t\tSystem.arraycopy(parameterSignatures, 0, parameterSignatures = new String[length+1], 1, length);", "-\t\t\t\t", "-\t\t\t\tparameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();", "-\t\t\t\tparameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();", "-\t\t\t\tparameterSignatures[0] = new String(Engine.getSignature(typeBinding.enclosingType()));", "-\t\t\t}", "-\t\t\t", "-\t\t\tacceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures);", "-\t\t} else {", "-\t\t\tacceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);", "-\t\t}", "-\t}", "-}", "+public void acceptLocalMethod(MethodBinding methodBinding) {", "+\tIJavaElement res = findLocalElement(methodBinding.sourceStart());", "+\tif(res != null && res.getElementType() == IJavaElement.METHOD) {", "+\t\taddElement(res);", "+\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(res.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebae18ed738be0203420a0b50065e665", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end)", "diff": ["-\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "-\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "-\t// fix for 1FWFT6Q", "-\tif (type != null) {", "-\t\tif (type.isBinary()) {", "-\t\t\t", "-\t\t\t// need to add a paramater for constructor in binary type", "-\t\t\tIType declaringDeclaringType = type.getDeclaringType();", "-\t\t\t", "-\t\t\tboolean isStatic = false;", "-\t\t\ttry {", "-\t\t\t\tisStatic = Flags.isStatic(type.getFlags());", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// isStatic == false", "-\t\t\t}", "-\t\t\t", "-\t\t\tif(declaringDeclaringType != null && isConstructor\t&& !isStatic) {", "-\t\t\t\tint length = parameterPackageNames.length;", "-\t\t\t\tSystem.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);", "-\t\t\t\tSystem.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);", "+\tif(isDeclaration) {", "+\t\tIType type = resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\t\tstart, end);", "+\t\t", "+\t\tif(type != null) {", "+\t\t\tthis.acceptMethodDeclaration(type, selector, start, end);", "+\t\t}", "+\t} else {", "+\t\tIType type = resolveType(declaringTypePackageName, declaringTypeName,", "+\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "+\t\t// fix for 1FWFT6Q", "+\t\tif (type != null) {", "+\t\t\tif (type.isBinary()) {", "-\t\t\t\tparameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();", "-\t\t\t\tparameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();", "+\t\t\t\t// need to add a paramater for constructor in binary type", "+\t\t\t\tIType declaringDeclaringType = type.getDeclaringType();", "+\t\t\t\t", "+\t\t\t\tboolean isStatic = false;", "+\t\t\t\ttry {", "+\t\t\t\t\tisStatic = Flags.isStatic(type.getFlags());", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// isStatic == false", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif(declaringDeclaringType != null && isConstructor\t&& !isStatic) {", "+\t\t\t\t\tint length = parameterPackageNames.length;", "+\t\t\t\t\tSystem.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);", "+\t\t\t\t\tSystem.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);", "+\t\t\t\t\t", "+\t\t\t\t\tparameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();", "+\t\t\t\t\tparameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tacceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames);", "+\t\t\t} else {", "+\t\t\t\tacceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);", "-\t\t\t", "-\t\t\tacceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames);", "-\t\t} else {", "-\t\t\tacceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, isDeclaration, start, end);"]}], "num": 55658}
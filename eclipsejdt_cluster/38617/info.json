{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "052d5875f8b7f01f92a8b4609e1fb78f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f80f9770f632109f3dce59b6079a6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "commitAfterChange": "dd2d999bb92f1e106218a30e477eebe8f58b2e19", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic char[] shortReadableName()", "signatureAfterChange": "  \tpublic char[] shortReadableName()", "diff": ["-\t", "+", "-\t\t\tif (!this.inRecursiveFunction) {", "+\t\t\tif (this.recursionLevel < 2) {", "-\t\t\t\t\tthis.inRecursiveFunction = true;", "+\t\t\t\t\tthis.recursionLevel++;", "+\t\t\t\t\tif (this.upperBounds != null && this.upperBounds.length > 1) {", "+\t\t\t\t\t\tStringBuffer sb = new StringBuffer();", "+\t\t\t\t\t\tsb.append(this.upperBounds[0].shortReadableName());", "+\t\t\t\t\t\tfor (int i = 1; i < this.upperBounds.length; i++)", "+\t\t\t\t\t\t\tsb.append('&').append(this.upperBounds[i].shortReadableName());", "+\t\t\t\t\t\tint len = sb.length();", "+\t\t\t\t\t\tchar[] name = new char[len];", "+\t\t\t\t\t\tsb.getChars(0, len, name, 0);", "+\t\t\t\t\t\treturn name;", "+\t\t\t\t\t}", "-\t\t\t\t\tthis.inRecursiveFunction = false;", "+\t\t\t\t\tthis.recursionLevel--;", "-\t\t\t\treturn this.firstBound.erasure().shortReadableName();", "+\t\t\t\treturn this.originalName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb216720003bcc6fa213909a22567e04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/imports/ReorderingImportAdder.java", "commitBeforeChange": "f78b6c4d80823115b2a0c851e53515d68cdcf5c5", "commitAfterChange": "c044b38393640b202de21fc2c846d93b3cac96f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic List<ImportName> addImports(Collection<ImportName> existingImports, Collection<ImportName> importsToAdd)", "signatureAfterChange": "  \t@Override \tpublic List<ImportName> addImports(Collection<ImportName> existingImports, Collection<ImportName> importsToAdd)", "diff": ["-\t\tSet<ImportName> existingImportsSet = new HashSet<ImportName>(existingImports);", "+\t\tint setCapacity = 2 * (existingImports.size() + importsToAdd.size());", "+\t\tSet<ImportName> uniqueImportsWithAdditions = new HashSet<ImportName>(setCapacity);", "+\t\tuniqueImportsWithAdditions.addAll(existingImports);", "+\t\tuniqueImportsWithAdditions.addAll(importsToAdd);", "-\t\tList<ImportName> importsWithAdditions = new ArrayList<ImportName>(existingImports.size() + importsToAdd.size());", "-\t\timportsWithAdditions.addAll(existingImports);", "-\t\tfor (ImportName importToAdd : importsToAdd) {", "-\t\t\tif (!existingImportsSet.contains(importToAdd)) {", "-\t\t\t\timportsWithAdditions.add(importToAdd);", "-\t\t\t}", "-\t\t}", "+\t\tList<ImportName> sortedImports = new ArrayList<>(uniqueImportsWithAdditions);", "+\t\tCollections.sort(sortedImports, this.importComparator);", "-\t\tCollections.sort(importsWithAdditions, this.importComparator);", "-", "-\t\treturn importsWithAdditions;", "+\t\treturn sortedImports;"]}], "num": 38617}
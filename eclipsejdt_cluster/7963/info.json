{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb5fb4bcdc9d9c1d1323b4caa6109ca3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db7aa1157ad0d16786fe314824d9c35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "7aacb15554a9c6406d505856924e9f9ea2758365", "commitAfterChange": "9f851707e9bbb361d7fe12af2d5fcf659372084c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField)", "signatureAfterChange": "  \tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField, boolean onlyLongest)", "diff": ["-\tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField){", "+\tprivate static char[][] computeNonBaseTypeNames(char[] sourceName, boolean isConstantField, boolean onlyLongest){", "-\t\t\t\treturn generateConstantName(new char[][]{CharOperation.toLowerCase(sourceName)}, 0);", "+\t\t\t\treturn generateConstantName(new char[][]{CharOperation.toLowerCase(sourceName)}, 0, onlyLongest);", "-\t\t\t\treturn generateNonConstantName(new char[][]{CharOperation.toLowerCase(sourceName)}, 0);", "+\t\t\t\treturn generateNonConstantName(new char[][]{CharOperation.toLowerCase(sourceName)}, 0, onlyLongest);", "-\t\t\treturn generateConstantName(nameParts, namePartsPtr);", "+\t\t\treturn generateConstantName(nameParts, namePartsPtr, onlyLongest);", "-\t\t\treturn generateNonConstantName(nameParts, namePartsPtr);", "+\t\t\treturn generateNonConstantName(nameParts, namePartsPtr, onlyLongest);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34cf19bb0c2cdd54a84ecd4dfbf51ae6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "763e42ee77f843bf78751f85365c5a74eb47696c", "commitAfterChange": "525a282931680472e1c4e0ea3a9d163e6052ec36", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public void add(IFile resource)", "signatureAfterChange": "\r public void add(IFile resource, IResource indexedContainer)", "diff": ["-public void add(IFile resource){\r", "+public void add(IFile resource, IResource indexedContainer){\r", "-\t\tAddCompilationUnitToIndex job = new AddCompilationUnitToIndex(resource, this);\r", "+\t\tAddCompilationUnitToIndex job = new AddCompilationUnitToIndex(resource, this, indexedContainer);\r", "-\t\tAddClassFileToIndex job = new AddClassFileToIndex(resource, this);\r", "+\t\tAddClassFileToIndex job = new AddClassFileToIndex(resource, this, indexedContainer);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "581b187a91d35e81c1c4680bb9ae8135", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/HookedJavaFileObject.java", "commitBeforeChange": "621e812bbb1e780712ec2dde25fd4e3f30e9c448", "commitAfterChange": "7e9a23bbbd08c073a2bbe3813e0e1e17e8b81965", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \tpublic HookedJavaFileObject(JavaFileObject fileObject, String fileName, BatchFilerImpl filer)", "signatureAfterChange": " \t \tpublic HookedJavaFileObject(JavaFileObject fileObject, String fileName, String typeName, BatchFilerImpl filer)", "diff": ["-\tpublic HookedJavaFileObject(JavaFileObject fileObject, String fileName, BatchFilerImpl filer) {", "+\tpublic HookedJavaFileObject(JavaFileObject fileObject, String fileName, String typeName, BatchFilerImpl filer) {", "+\t\t_typeName = typeName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77928fed5c4952903e225ee2ee0de2e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "aa23b2a14c48eb2e68c0b76ca03ad3cd13f67188", "commitAfterChange": "97ecea4988b025b105080d33f2f05e43659a9d0a", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "signatureAfterChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods, boolean tolerateInferenceVariables)", "diff": ["-\tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods) {", "+\tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods, boolean tolerateInferenceVariables) {", "-\t\t\t\t\tlevel = parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods);", "+\t\t\t\t\tlevel = parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods, tolerateInferenceVariables);", "-\t\t\t\t\t\tif (parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods) == NOT_COMPATIBLE)", "+\t\t\t\t\t\tif (parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods, tolerateInferenceVariables) == NOT_COMPATIBLE)", "-\t\t\t\t\t\tif (TypeBinding.notEquals(param, arg) && parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods) == NOT_COMPATIBLE)", "+\t\t\t\t\t\tif (TypeBinding.notEquals(param, arg) && parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods, tolerateInferenceVariables) == NOT_COMPATIBLE)", "-\t\t\t\tint newLevel = parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods);", "+\t\t\t\tint newLevel = parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods, tolerateInferenceVariables);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a88c4fa892cd49ebd80dd1b06927d74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b862c893c26e8ad45efc26cefb89d9ed8b8bc795", "commitAfterChange": "a41dabb1394f93c450316730395779f5d0c3b158", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tboolean proposeAllMemberTypes, \t\tSourceTypeBinding typeToIgnore, \t\tObjectVector typesFound)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean staticFieldsAndMethodOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tboolean proposeAllMemberTypes, \t\tSourceTypeBinding typeToIgnore, \t\tObjectVector typesFound)", "diff": ["+\t\tboolean staticFieldsAndMethodOnly,", "+\t\t\t\tstaticFieldsAndMethodOnly,", "+\t\t\t\tstaticFieldsAndMethodOnly,", "+\t\t\t\t\t\tstaticFieldsAndMethodOnly,", "+\t\t\t\t\tstaticFieldsAndMethodOnly,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af6d92af2ea99103602b131867acc97c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "72aa931453e3f2172c1e3a9834413fcb8210dc18", "commitAfterChange": "4a9fab23504f482fb4645ec189fabd0652bee495", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic Element newElement(Binding binding)", "signatureAfterChange": " \tpublic Element newElement(Binding binding, ElementKind kindHint)", "diff": ["-\tpublic Element newElement(Binding binding) {", "+\t */", "+\tpublic Element newElement(Binding binding, ElementKind kindHint) {", "-\t\t\treturn new TypeElementImpl(_env, referenceBinding);", "+\t\t\treturn new TypeElementImpl(_env, referenceBinding, kindHint);", "-\t\t\treturn new TypeElementImpl(_env, ((ParameterizedTypeBinding)binding).genericType());", "+\t\t\treturn new TypeElementImpl(_env, ((ParameterizedTypeBinding)binding).genericType(), kindHint);", "-\t\t// TODO: fill in the rest of these", "+\t\t\t// TODO: fill in the rest of these", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be37f434b117a125b2c0f93e0f1397a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "72aa931453e3f2172c1e3a9834413fcb8210dc18", "commitAfterChange": "4a9fab23504f482fb4645ec189fabd0652bee495", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tTypeElementImpl(BaseProcessingEnvImpl env, ReferenceBinding binding)", "signatureAfterChange": " \tTypeElementImpl(BaseProcessingEnvImpl env, ReferenceBinding binding, ElementKind kindHint)", "diff": ["-\tTypeElementImpl(BaseProcessingEnvImpl env, ReferenceBinding binding) {", "+\tTypeElementImpl(BaseProcessingEnvImpl env, ReferenceBinding binding, ElementKind kindHint) {", "+\t\t_kindHint = kindHint;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed466afaa7cc13db2164ac97eb7e097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "cd169c7695d941d4918a15490c18d5c9ea399e1c", "commitAfterChange": "d43bd70d5c6c4fa98b6c25564f2818572a108eac", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(URL baseLoc, String docUrlValue) throws JavaModelException", "diff": ["-\tprotected String getURLContents(String docUrlValue) throws JavaModelException {", "+\tprotected String getURLContents(URL baseLoc, String docUrlValue) throws JavaModelException {", "-\t\t\t// Ignore, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=120559 &", "-\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=403036", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=403154", "+\t\t\tvalidateAndCache(baseLoc, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c672aa099089d616e50770b2446ae492", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "14d627dce82d56cfd2be03743c28c7ac3736df42", "commitAfterChange": "98d42611e634b1db50f18796da74a25e56b7b155", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void initializeRoots()", "signatureAfterChange": " \t \tpublic void initializeRoots(boolean initAfterLoad)", "diff": ["-\tpublic void initializeRoots() {", "+\tpublic void initializeRoots(boolean initAfterLoad) {", "-\t\t\t\tJavaModelManager.getJavaModelManager().batchContainerInitializations = true;", "+\t\t\t\tJavaModelManager.getJavaModelManager().forceBatchInitializations(initAfterLoad);"]}], "num": 7963}
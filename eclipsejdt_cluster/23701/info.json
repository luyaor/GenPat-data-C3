{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25d185d5ba5c58c7e3f341a1281f1676", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58d48c9d2861de3cd31bc7358423ab24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "fa632e87587c69f11b6e90d1ed0b778dff40b23c", "commitAfterChange": "074bcf8e02160c02f4c4edb70f2f1ade7ede52b7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (valueIfTrueType == NullBinding) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfFalseType;", "+\t\t\t} else if (valueIfFalseType == NullBinding) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfTrueType;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fee86a571321d0adc3d01a1850e612a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "be13fad329d6d2e465d322326f6ef6df7d9942a2", "commitAfterChange": "e144a75ffba7db74ee583e06f85056d8de86880c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tvalueIfFalse.implicitConversion = valueIfTrue.implicitConversion;", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "-//\t\t\tTypeBinding commonType = scope.mostSpecificCommonType(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, valueIfFalseType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdbe06e0c0c2b31211913aa804be34e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "99721e4b150d4129ca339c356f1ffc5191978b56", "commitAfterChange": "258934f1c54d2b465231481daf72639d0983c8ef", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding commonType = scope.mostSpecificCommonType(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\tTypeBinding commonType = scope.lowerUpperBound(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+//\t\t\tTypeBinding commonType = scope.mostSpecificCommonType(new TypeBinding[] { valueIfTrueType, valueIfFalseType });"]}], "num": 23701}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21ad4b3f4f27722afa2f105154b3eb30", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e29e5e84b71993063187da9df93429", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\t\"\timport static p.Y.Zz;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.Zz cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 7)\\r\\n\" +", "-\t\t\t\"\timport static p.Z.Zz.WW.*;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^^^^\\n\" +", "-\t\t\t\"The import p.Z.Zz.WW cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 8)\\r\\n\" +", "-\t\t\t\"\timport p.Y.ZZ;\\r\\n\" +", "-\t\t\t\"\t       ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 9)\\r\\n\" +", "-\t\t\t\"\timport static p.Y.ZZ.*;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 10)\\r\\n\" +", "-\t\t\t\"\timport static p.Y.ZZ.WW;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 11)\\r\\n\" +", "-\t\t\t\"\timport static p.Y.ZZ.WW.*;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. ERROR in X.java (at line 12)\\r\\n\" +", "-\t\t\t\"\timport static p.Y.ZZ.ZZZ;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. ERROR in X.java (at line 13)\\r\\n\" +", "-\t\t\t\"\timport static p.Y.ZZ.WW.WWW;\\r\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "-\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\timport static p.Y.Zz;\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.Zz cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\timport static p.Z.Zz.WW.*;\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^\\n\" + ", "+\t\t\t\"The import p.Z.Zz.WW cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\timport p.Y.ZZ;\\n\" + ", "+\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\timport static p.Y.ZZ.*;\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\timport static p.Y.ZZ.WW;\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\timport static p.Y.ZZ.WW.*;\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\timport static p.Y.ZZ.ZZZ;\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\timport static p.Y.ZZ.WW.WWW;\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"The import p.Y.ZZ cannot be resolved\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c83682fd65647fa68f15dc04f88e0c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new Multiple<Object, Object, Object>(new Object(), new Object(), new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new Multiple<Object, Object, Object>(gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new Multiple<Exception, Exception, Exception>(new Exception(), new Exception(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(gm, new Exception(),new Exception(),new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new Multiple<Exception, Exception, Exception>(gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(new Exception(),new Exception(),new Exception(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new Multiple<RuntimeException, RuntimeException, RuntimeException>(new RuntimeException(), new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(gm, new RuntimeException(),new RuntimeException(),new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new Multiple<RuntimeException, RuntimeException, RuntimeException>(gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(new RuntimeException(),new RuntimeException(),new RuntimeException(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new Multiple<Object, Object, Object>(new Object(), new Object(), new Object())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new Multiple<Object, Object, Object>(gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new Multiple<Exception, Exception, Exception>(new Exception(), new Exception(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(gm, new Exception(),new Exception(),new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new Multiple<Exception, Exception, Exception>(gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(new Exception(),new Exception(),new Exception(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new Multiple<RuntimeException, RuntimeException, RuntimeException>(new RuntimeException(), new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(gm, new RuntimeException(),new RuntimeException(),new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new Multiple<RuntimeException, RuntimeException, RuntimeException>(gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(new RuntimeException(),new RuntimeException(),new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EXACT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4626a348f8895ae64f437c255b390d98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void testTypeRefGenericsTest10_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest10_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test10/Test.java test10.Test.y1 [\tY<Y<? extends \ufffd|Exception|\ufffd>> y1;@51] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.y2 [\tY<X<? extends \ufffd|Object|\ufffd, ? super String, ? extends Exception>> y2;@82] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.y2 [\tY<X<? extends Object, ? super \ufffd|String|\ufffd, ? extends Exception>> y2;@98] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.y2 [\tY<X<? extends Object, ? super String, ? extends \ufffd|Exception|\ufffd>> y2;@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super \ufffd|Object|\ufffd>, Y<? extends String>, Y<? super Exception>> x1;@145] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends \ufffd|String|\ufffd>, Y<? super Exception>> x1;@166] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends String>, Y<? super \ufffd|Exception|\ufffd>> x1;@185] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends \ufffd|Object|\ufffd, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@216] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends \ufffd|Object|\ufffd, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@234] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends \ufffd|Object|\ufffd>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@252] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super \ufffd|String|\ufffd, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@271] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super \ufffd|String|\ufffd, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super \ufffd|String|\ufffd>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@303] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends \ufffd|Exception|\ufffd, ? super Exception, ? extends Exception>> x2;@324] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super \ufffd|Exception|\ufffd, ? extends Exception>> x2;@343] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends \ufffd|Exception|\ufffd>> x2;@364] EXACT_MATCH\"", "+\t\t\"src/test10/Test.java test10.Test.y1 [\tY<Y<? extends !|Exception|!>> y1;@51] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.y2 [\tY<X<? extends !|Object|!, ? super String, ? extends Exception>> y2;@82] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.y2 [\tY<X<? extends Object, ? super !|String|!, ? extends Exception>> y2;@98] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.y2 [\tY<X<? extends Object, ? super String, ? extends !|Exception|!>> y2;@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super !|Object|!>, Y<? extends String>, Y<? super Exception>> x1;@145] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends !|String|!>, Y<? super Exception>> x1;@166] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends String>, Y<? super !|Exception|!>> x1;@185] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends !|Object|!, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@216] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends !|Object|!, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@234] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends !|Object|!>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@252] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super !|String|!, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@271] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super !|String|!, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super !|String|!>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@303] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends !|Exception|!, ? super Exception, ? extends Exception>> x2;@324] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super !|Exception|!, ? extends Exception>> x2;@343] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends !|Exception|!>> x2;@364] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "773a80f958c3cbfc15ec6a809d23701d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " public void testTypeRefGenericAllG2_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG2_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<\ufffd|Object|\ufffd>.MemberGeneric<Object> member = new Generic<Object>().new MemberGeneric<Object>();@177] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Object>.MemberGeneric<\ufffd|Object|\ufffd> member = new Generic<Object>().new MemberGeneric<Object>();@199] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Object>.MemberGeneric<Object> member = new Generic<\ufffd|Object|\ufffd>().new MemberGeneric<Object>();@228] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Object>.MemberGeneric<Object> member = new Generic<Object>().new MemberGeneric<\ufffd|Object|\ufffd>();@256] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<\ufffd|Exception|\ufffd>.MemberGeneric<Exception> member = new Generic<Exception>().new MemberGeneric<Exception>();@306] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Exception>.MemberGeneric<\ufffd|Exception|\ufffd> member = new Generic<Exception>().new MemberGeneric<Exception>();@331] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Exception>.MemberGeneric<Exception> member = new Generic<\ufffd|Exception|\ufffd>().new MemberGeneric<Exception>();@363] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Exception>.MemberGeneric<Exception> member = new Generic<Exception>().new MemberGeneric<\ufffd|Exception|\ufffd>();@394] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<\ufffd|Exception|\ufffd>().new MemberGeneric<Exception>();@633] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<\ufffd|Exception|\ufffd>();@664] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<\ufffd|Exception|\ufffd>().new MemberGeneric<? extends Throwable>();@794] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<\ufffd|Exception|\ufffd>();@1006] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<\ufffd|Exception|\ufffd>().new MemberGeneric<Exception>();@1327] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<\ufffd|Exception|\ufffd>();@1358] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<\ufffd|Exception|\ufffd>().new MemberGeneric<? super RuntimeException>();@1498] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<\ufffd|Exception|\ufffd>();@1730] EXACT_MATCH\"", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<!|Object|!>.MemberGeneric<Object> member = new Generic<Object>().new MemberGeneric<Object>();@177] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Object>.MemberGeneric<!|Object|!> member = new Generic<Object>().new MemberGeneric<Object>();@199] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Object>.MemberGeneric<Object> member = new Generic<!|Object|!>().new MemberGeneric<Object>();@228] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Object>.MemberGeneric<Object> member = new Generic<Object>().new MemberGeneric<!|Object|!>();@256] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<!|Exception|!>.MemberGeneric<Exception> member = new Generic<Exception>().new MemberGeneric<Exception>();@306] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Exception>.MemberGeneric<!|Exception|!> member = new Generic<Exception>().new MemberGeneric<Exception>();@331] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Exception>.MemberGeneric<Exception> member = new Generic<!|Exception|!>().new MemberGeneric<Exception>();@363] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<Exception>.MemberGeneric<Exception> member = new Generic<Exception>().new MemberGeneric<!|Exception|!>();@394] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<!|Exception|!>().new MemberGeneric<Exception>();@633] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<!|Exception|!>();@664] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<!|Exception|!>().new MemberGeneric<? extends Throwable>();@794] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<!|Exception|!>();@1006] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<!|Exception|!>().new MemberGeneric<Exception>();@1327] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<!|Exception|!>();@1358] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<!|Exception|!>().new MemberGeneric<? super RuntimeException>();@1498] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<!|Exception|!>();@1730] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd54cb138014397d085a55c54f46071b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " \tpublic void testBug68726negative1()", "signatureAfterChange": " \tpublic void testBug68726negative1()", "diff": ["-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"\t                                              ^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"\t                                              ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid URL link format\\n\" + ", "+\t\t\t\t\"\t                                              ^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed link reference\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\t\"\t                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected text\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db152efe513d7760861d449351bdce68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test085b()", "signatureAfterChange": " \tpublic void test085b()", "diff": ["-\t\t\t\"1. WARNING in Parent.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tstatic void staticMismatchCase1(Collection c) {}\\r\\n\" +", "+\t\t\t\"1. WARNING in Parent.java (at line 3)\\n\" +", "+\t\t\t\"\tstatic void staticMismatchCase1(Collection c) {}\\n\" +", "-\t\t\t\"2. WARNING in Parent.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tvoid mismatchCase1(Collection c) {}\\r\\n\" +", "+\t\t\t\"2. WARNING in Parent.java (at line 5)\\n\" +", "+\t\t\t\"\tvoid mismatchCase1(Collection c) {}\\n\" +", "-\t\t\t\"3. ERROR in Parent.java (at line 9)\\r\\n\" +", "-\t\t\t\"\tvoid staticMismatchCase1(Collection c) {}\\r\\n\" +", "+\t\t\t\"3. ERROR in Parent.java (at line 9)\\n\" +", "+\t\t\t\"\tvoid staticMismatchCase1(Collection c) {}\\n\" +", "-\t\t\t\"4. WARNING in Parent.java (at line 9)\\r\\n\" +", "-\t\t\t\"\tvoid staticMismatchCase1(Collection c) {}\\r\\n\" +", "+\t\t\t\"4. WARNING in Parent.java (at line 9)\\n\" +", "+\t\t\t\"\tvoid staticMismatchCase1(Collection c) {}\\n\" +", "-\t\t\t\"5. ERROR in Parent.java (at line 10)\\r\\n\" +", "-\t\t\t\"\tvoid staticMismatchCase2(Collection<String> c) {}\\r\\n\" +", "+\t\t\t\"5. ERROR in Parent.java (at line 10)\\n\" +", "+\t\t\t\"\tvoid staticMismatchCase2(Collection<String> c) {}\\n\" +", "-\t\t\t\"6. ERROR in Parent.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tstatic void mismatchCase1(Collection c) {}\\r\\n\" +", "+\t\t\t\"6. ERROR in Parent.java (at line 11)\\n\" +", "+\t\t\t\"\tstatic void mismatchCase1(Collection c) {}\\n\" +", "-\t\t\t\"7. WARNING in Parent.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tstatic void mismatchCase1(Collection c) {}\\r\\n\" +", "+\t\t\t\"7. WARNING in Parent.java (at line 11)\\n\" +", "+\t\t\t\"\tstatic void mismatchCase1(Collection c) {}\\n\" +", "-\t\t\t\"8. ERROR in Parent.java (at line 12)\\r\\n\" +", "-\t\t\t\"\tstatic void mismatchCase2(Collection<String> c) {}\\r\\n\" +", "+\t\t\t\"8. ERROR in Parent.java (at line 12)\\n\" +", "+\t\t\t\"\tstatic void mismatchCase2(Collection<String> c) {}\\n\" +"]}], "num": 15674}
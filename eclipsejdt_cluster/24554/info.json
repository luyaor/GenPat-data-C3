{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d4858aacd9475177ae0ba57fce13dbe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e55bdee5b64259377c50e16257f725d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\t\tif (targetType != null && targetType != this) { // could not resolve any better, error was already reported against it", "-\t\t\tsetResolvedType(targetType, environment);", "-\t\t} else {", "-\t\t\tenvironment.problemReporter.isClassPathCorrect(this.compoundName, null);", "-\t\t\treturn null; // will not get here since the above error aborts the compilation", "+\t\tif (targetType == null || targetType == this) { // could not resolve any better, error was already reported against it", "+\t\t\t// create a proxy for the missing BinaryType", "+\t\t\ttargetType = environment.cacheMissingBinaryType(this.compoundName, null);", "+\t\tsetResolvedType(targetType, environment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "febd7bfa3b6fb00dc33986b685ecc5e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": "  ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized)", "signatureAfterChange": "  ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized)", "diff": ["-\tReferenceBinding binding = getCachedType(compoundName);", "-\tif (binding == null) {", "-\t\tPackageBinding packageBinding = computePackageFrom(compoundName);", "-\t\tbinding = new UnresolvedReferenceBinding(compoundName, packageBinding);", "-\t\tpackageBinding.addType(binding);", "-\t} else if (binding == TheNotFoundType) {", "-\t\tproblemReporter.isClassPathCorrect(compoundName, null);", "-\t\treturn null; // will not get here since the above error aborts the compilation", "-\t} else if (!isParameterized) {", "-\t    // check raw type, only for resolved types", "-        binding = (ReferenceBinding)convertToRawType(binding);", "-\t}", "-\treturn binding;", "+\treturn getTypeFromCompoundName(compoundName, isParameterized);"]}], "num": 24554}
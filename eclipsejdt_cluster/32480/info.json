{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44236c3f707d3bfebfe8d4c853e21688", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa9e926925da55904e71b7e531833dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "e4f6d0091f68bf4b6ecb46943ad5d4d6a5ce0095", "commitAfterChange": "3a73dbc8d9839c0eb87857ef97f640371d15a626", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IPath[] enclosingProjectsAndJars()", "signatureAfterChange": " public IPath[] enclosingProjectsAndJars()", "diff": ["+ */", "-\tif (this.needsInitialize) {", "-\t\tthis.initialize(5);", "+\tif (this.enclosingPaths != null) {", "+\t\treturn this.enclosingPaths;", "-\treturn super.enclosingProjectsAndJars();", "+\tlong start = BasicSearchEngine.VERBOSE ? System.currentTimeMillis() : -1;", "+\ttry {", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tSet paths = new HashSet(projects.length * 2);", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t", "+\t\t\t// Add project full path", "+\t\t\tIPath projectPath = javaProject.getProject().getFullPath();", "+\t\t\tpaths.add(projectPath);", "+", "+\t\t\t// Add project libraries paths", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath();", "+\t\t\tfor (int j = 0, eLength = entries.length; j < eLength; j++) {", "+\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tObject target = JavaModel.getTarget(path, false/*don't check existence*/);", "+\t\t\t\t\tif (target instanceof IFolder) // case of an external folder", "+\t\t\t\t\t\tpath = ((IFolder) target).getFullPath();", "+\t\t\t\t\tpaths.add(entry.getPath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tIPath[] result = new IPath[paths.size()];", "+\t\tpaths.toArray(result);", "+\t\treturn this.enclosingPaths = result;", "+\t} catch (JavaModelException e) {", "+\t\tUtil.log(e, \"Exception while computing workspace scope's enclosing projects and jars\"); //$NON-NLS-1$", "+\t\treturn new IPath[0];", "+\t} finally {", "+\t\tif (BasicSearchEngine.VERBOSE) {", "+\t\t\tlong time = System.currentTimeMillis() - start;", "+\t\t\tint length = this.enclosingPaths == null ? 0 : this.enclosingPaths.length;", "+\t\t\tUtil.verbose(\"JavaWorkspaceScope.enclosingProjectsAndJars: \"+length+\" paths computed in \"+time+\"ms.\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "965fac1b7998f555dbff7901759a8214", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private void createTypeHierarchyBasedOnRegion(Vector allTypesInRegion)", "signatureAfterChange": "\r \tprivate void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion)", "diff": ["- */\r", "-private void createTypeHierarchyBasedOnRegion(Vector allTypesInRegion) {\r", "-\tint size = allTypesInRegion.size();\r", "-\tif (size != 0) {\r", "-\t\tthis.infoToHandle= new Hashtable(size);\r", "-\t}\r", "-\tVector temp = new Vector(size);\r", "-\ttypes : for (int i = 0; i < size; i++) {\r", "-\t\ttry {\r", "-\t\t\tIType type = (IType) allTypesInRegion.elementAt(i);\r", "-\t\t\tIGenericType info= (IGenericType) ((JavaElement) type).getRawInfo(); \r", "-\t\t\ttemp.addElement(info);\r", "-\t\t\tif (info.isBinaryType()) {\r", "-\t\t\t\tthis.infoToHandle.put(info, type.getParent());\r", "-\t\t\t}\r", "-\t\t\tworked(1);\r", "-\t\t} catch (JavaModelException npe) {\r", "-\t\t\tcontinue types;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\tsize = temp.size();\r", "-\tif (size > 0) {\r", "-\t\tIGenericType[] genericTypes = new IGenericType[size];\r", "-\t\ttemp.copyInto(genericTypes);\r", "-\t\tIType focusType = this.getType();\r", "-\t\tif (focusType != null) {\r", "-\t\t\tthis.searchableEnvironment.unitToLookInside = (CompilationUnit)focusType.getCompilationUnit();\r", "-\t\t}\r", "-\t\tthis.hierarchyResolver.resolve(genericTypes);\r", "-\t\tif (focusType != null) {\r", "-\t\t\tthis.searchableEnvironment.unitToLookInside = null;\r", "-\t\t}\r", "-\r", "-\t}\r", "-}\r", "+\t */\r", "+\tprivate void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion) {\r", "+\t\t\r", "+\t\tint size = allTypesInRegion.size();\r", "+\t\tif (size != 0) {\r", "+\t\t\tthis.infoToHandle = new HashMap(size);\r", "+\t\t}\r", "+\t\tArrayList temp = new ArrayList(size);\r", "+\t\ttypes : for (int i = 0; i < size; i++) {\r", "+\t\t\ttry {\r", "+\t\t\t\tIType type = (IType) allTypesInRegion.get(i);\r", "+\t\t\t\tIGenericType info = (IGenericType) ((JavaElement) type).getRawInfo();\r", "+\t\t\t\ttemp.add(info);\r", "+\t\t\t\tif (info.isBinaryType()) {\r", "+\t\t\t\t\tthis.infoToHandle.put(info, type.getParent());\r", "+\t\t\t\t}\r", "+\t\t\t\tworked(1);\r", "+\t\t\t} catch (JavaModelException npe) {\r", "+\t\t\t\tcontinue types;\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\tsize = temp.size();\r", "+\t\tif (size > 0) {\r", "+\t\t\tIGenericType[] genericTypes = new IGenericType[size];\r", "+\t\t\ttemp.toArray(genericTypes);\r", "+\t\t\tIType focusType = this.getType();\r", "+\t\t\tif (focusType != null) {\r", "+\t\t\t\tthis.searchableEnvironment.unitToLookInside =\r", "+\t\t\t\t\t(CompilationUnit) focusType.getCompilationUnit();\r", "+\t\t\t}\r", "+\t\t\tthis.hierarchyResolver.resolve(genericTypes);\r", "+\t\t\tif (focusType != null) {\r", "+\t\t\t\tthis.searchableEnvironment.unitToLookInside = null;\r", "+\t\t\t}\r", "+\r", "+\t\t}\r", "+\t}\r"]}], "num": 32480}
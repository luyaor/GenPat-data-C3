{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0843aa6ecec2ab8dc68aaa4b25bc0fb5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8abacac9d49513be76ff61001e1fcd15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void parseStatements(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": " \t \tpublic void parseStatements(Parser parser, CompilationUnitDeclaration unit)", "diff": ["-\t\tif (isDefaultConstructor){", "-\t\t\tconstructorCall = SuperReference.implicitSuperConstructorCall();", "-\t\t\tconstructorCall.sourceStart = sourceStart;", "-\t\t\tconstructorCall.sourceEnd = sourceEnd; ", "+\t\tif (isDefaultConstructor && this.constructorCall == null){", "+\t\t\tthis.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t\tthis.constructorCall.sourceStart = this.sourceStart;", "+\t\t\tthis.constructorCall.sourceEnd = this.sourceEnd; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93eb9730d88951acf6f7c06cf8b01caf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "5d5551ec2f3d482c3329accb7b283797956514be", "commitAfterChange": "dd3fd2545bf6e1ef8b167aefc85ac247cd0a3802", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int matchLevel(Binding binding)", "signatureAfterChange": " private int matchLevel(ConstructorDeclaration constructor, boolean resolve)", "diff": ["+ */", "+private int matchLevel(ConstructorDeclaration constructor, boolean resolve) {", "+\tExplicitConstructorCall constructorCall = constructor.constructorCall;", "+\tif (constructorCall != null && constructorCall.accessMode == ExplicitConstructorCall.ImplicitSuper) {", "+\t\treturn this.matchLevel(constructorCall, resolve);", "+\t} else {", "+\t\t// Eliminate explicit super call as it will be treated with matchLevel(ExplicitConstructorCall, boolean)", "+\t\treturn IMPOSSIBLE_MATCH;", "+\t}"]}], "num": 8406}
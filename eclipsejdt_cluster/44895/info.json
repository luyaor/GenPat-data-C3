{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb5202d601e0cec27df1cfb7b7e399dc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ee2d746718db00bf767b0b0b1e39d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "signatureAfterChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType)", "diff": ["-public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType) {", "+public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType) {", "+\t// relocalize wildcard onto genericType (could come from other types)", "+\tTypeBinding[] typeArguments = originalArguments;", "+\tfor (int i = 0, length = typeArguments == null ? 0 : typeArguments.length; i < length; i++) {", "+\t\tTypeBinding argument = originalArguments[i];", "+\t\tif (argument.isWildcard()) {", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "+\t\t\tif (wildcard.genericType != genericType) { // wildcard comes from different type", "+\t\t\t\tif (typeArguments == originalArguments) {", "+\t\t\t\t\tSystem.arraycopy(originalArguments, 0, typeArguments = new TypeBinding[length], 0, i);", "+\t\t\t\t}", "+\t\t\t\ttypeArguments[i] = createWildcard(genericType, i, wildcard.bound, wildcard.kind);", "+\t\t\t} else if (typeArguments != originalArguments) {", "+\t\t\t\ttypeArguments[i] = argument;", "+\t\t\t}", "+\t\t} else if (typeArguments != originalArguments) {", "+\t\t\ttypeArguments[i] = argument;", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be94d133e6505e78da3cdc81cfbda901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9f614fc97667efed681d3433770b756cc7555814", "commitAfterChange": "e5350265da2408990b972b2cb2f8a82c97230de1", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "signatureAfterChange": " protected void updateMatch(ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "diff": ["-\tboolean isRaw = parameterizedBinding.isRawType()|| (parameterizedBinding.arguments==null && parameterizedBinding.type.isGenericType());", "+\tTypeBinding[] argumentsBindings = parameterizedBinding.arguments;", "+\tboolean isRaw = parameterizedBinding.isRawType()|| (argumentsBindings==null && parameterizedBinding.type.isGenericType());", "-\t\tchar[][] patternArguments =  patternTypeArguments[depth];", "-\t\tupdateMatch(parameterizedBinding.arguments, locator, patternArguments, patternHasTypeParameters);", "+\t\t// verify if this is a reference to the generic type itself", "+\t\tif (!isRaw && patternHasTypeParameters && argumentsBindings != null) {", "+\t\t\tboolean needUpdate = false;", "+\t\t\tTypeVariableBinding[] typeVariables = parameterizedBinding.type.typeVariables();", "+\t\t\tfor (int i=0, l=argumentsBindings.length; i<l; i++) {", "+\t\t\t\tif (argumentsBindings[i] != typeVariables[i]) {", "+\t\t\t\t\tneedUpdate = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (needUpdate) {", "+\t\t\t\tchar[][] patternArguments =  patternTypeArguments[depth];", "+\t\t\t\tupdateMatch(argumentsBindings, locator, patternArguments, patternHasTypeParameters);\t", "+\t\t\t}", "+\t\t} else {", "+\t\t\tchar[][] patternArguments =  patternTypeArguments[depth];", "+\t\t\tupdateMatch(argumentsBindings, locator, patternArguments, patternHasTypeParameters);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7e3e6689e2d4bf76be5d1ab34e6486", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "3a03108b43e5ef2ebe5aa948629c8324c4c57d2e", "commitAfterChange": "4cdfd10f146eb0b1b7e6b8f9e1939b1c2c6a9eb5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType)", "signatureAfterChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "diff": ["-public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType) {", "+public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType) {", "-\t// relocalize wildcard onto genericType (could come from other types)", "-\tTypeBinding[] typeArguments = originalArguments;", "-\tfor (int i = 0, length = typeArguments == null ? 0 : typeArguments.length; i < length; i++) {", "-\t\tTypeBinding argument = originalArguments[i];", "-\t\tif (argument.isWildcard()) {", "-\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "-\t\t\tif (wildcard.genericType != genericType) { // wildcard comes from different type", "-\t\t\t\tif (typeArguments == originalArguments) {", "-\t\t\t\t\tSystem.arraycopy(originalArguments, 0, typeArguments = new TypeBinding[length], 0, i);", "-\t\t\t\t}", "-\t\t\t\ttypeArguments[i] = createWildcard(genericType, i, wildcard.bound, wildcard.kind);", "-\t\t\t} else if (typeArguments != originalArguments) {", "-\t\t\t\ttypeArguments[i] = argument;", "-\t\t\t}", "-\t\t} else if (typeArguments != originalArguments) {", "-\t\t\ttypeArguments[i] = argument;", "-\t\t}", "-\t}", "-\t"]}], "num": 44895}
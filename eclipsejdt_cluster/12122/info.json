{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b20fa509c2e6b24880546b107d26ba0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7392cfa8564f7574c8732d78463ef19e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tvoid initialize(ReferenceBinding someType, TypeBinding[] someArguments)", "signatureAfterChange": "  \tvoid initialize(ReferenceBinding someType, TypeBinding[] someArguments)", "diff": ["-\t\tthis.modifiers = someType.modifiers | AccGenericSignature;", "-//\t\tthis.modifiers = someType.modifiers;", "-//\t\t// only set AccGenericSignature if parameterized or have enclosing type required signature", "-//\t\tif (someArguments != null)", "-//\t\t\tthis.modifiers |= AccGenericSignature;", "-//\t\telse if (this.enclosingType != null) ", "-//\t\t\tthis.modifiers |= (this.enclosingType.modifiers & AccGenericSignature);", "+\t\tthis.modifiers = someType.modifiers;", "+\t\t// only set AccGenericSignature if parameterized or have enclosing type required signature", "+\t\tif (someArguments != null)", "+\t\t\tthis.modifiers |= AccGenericSignature;", "+\t\telse if (this.enclosingType != null) ", "+\t\t\tthis.modifiers |= (this.enclosingType.modifiers & AccGenericSignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dba94a1f7cfe44105d1faf7551fde9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 135, "signatureBeforeChange": " \tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IClasspathEntry[] referencedEntries, IPath newOutputLocation) throws JavaModelException", "diff": ["-\tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException {", "+\tpublic boolean writeFileEntries(IClasspathEntry[] newClasspath, IClasspathEntry[] referencedEntries, IPath newOutputLocation) throws JavaModelException {", "-\t\tIClasspathEntry[] fileEntries = readFileEntries(unknownElements);", "-\t\tif (fileEntries != JavaProject.INVALID_CLASSPATH && areClasspathsEqual(newClasspath, newOutputLocation, fileEntries)) {", "+\t\tIClasspathEntry[][] fileEntries = readFileEntries(unknownElements);", "+\t\tif (fileEntries[0] != JavaProject.INVALID_CLASSPATH && ", "+\t\t\t\tareClasspathsEqual(newClasspath, newOutputLocation, fileEntries[0])", "+\t\t\t\t&& (referencedEntries == null || areClasspathsEqual(referencedEntries, fileEntries[1])) ) {", "-\t\t\tsetSharedProperty(JavaProject.CLASSPATH_FILENAME, encodeClasspath(newClasspath, newOutputLocation, true, unknownElements));", "+\t\t\tsetSharedProperty(JavaProject.CLASSPATH_FILENAME, encodeClasspath(newClasspath, referencedEntries, newOutputLocation, true, unknownElements));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a662fcee8aa8bcefffdd84d22379611e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  \t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus, boolean addClasspathChange)", "signatureAfterChange": "  \t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IClasspathEntry[] referencedEntries, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus, boolean addClasspathChange)", "diff": ["-\t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus, boolean addClasspathChange) {", "+\t\tprivate ClasspathChange setClasspath(IClasspathEntry[] newRawClasspath, IClasspathEntry[] referencedEntries, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus, boolean addClasspathChange) {", "+\t\t\tif (referencedEntries != null)\tthis.referencedEntries = referencedEntries;", "+\t\t\tif (this.referencedEntries == null) this.referencedEntries = ClasspathEntry.NO_ENTRIES;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d3250484bb557b89b009462554c566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environment)", "signatureAfterChange": " public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environment, long[] nullTagBitsPerDimension)", "diff": ["+}", "+public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environment, long[] nullTagBitsPerDimension) {", "+\t", "+\tif (nullTagBitsPerDimension != null) {", "+\t\tthis.tagBits |= nullTagBitsPerDimension[0]; // outer-most dimension", "+\t\tthis.nullTagBitsPerDimension = nullTagBitsPerDimension;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc476f49375e6caf5081e9c971d53b22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount)", "signatureAfterChange": " public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount, long[] nullTagBitsPerDimension)", "diff": ["+}", "+public ArrayBinding createArrayType(TypeBinding leafComponentType, int dimensionCount, long[] nullTagBitsPerDimension) {", "-\t\t\treturn arrayBindings[index] = new ArrayBinding(leafComponentType, dimensionCount, this);", "-\t\tif (currentBinding.leafComponentType == leafComponentType)", "+\t\t\treturn arrayBindings[index] = new ArrayBinding(leafComponentType, dimensionCount, this, nullTagBitsPerDimension);", "+\t\tif (currentBinding.leafComponentType == leafComponentType", "+\t\t\t\t&& (nullTagBitsPerDimension == null || Arrays.equals(currentBinding.nullTagBitsPerDimension, nullTagBitsPerDimension)))", "-\treturn arrayBindings[length] = new ArrayBinding(leafComponentType, dimensionCount, this);", "+\treturn arrayBindings[length] = new ArrayBinding(leafComponentType, dimensionCount, this, nullTagBitsPerDimension);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de09f86e17c4df0af6c02b0c661f1704", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "b3ed0b0008127ac481b84e4445fe596562882759", "commitAfterChange": "d23ab8425705ca6d3b835e1514183dacb111562d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding)", "signatureAfterChange": "\r public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["+}\r", "+public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes) {\r", "-\t\t\t\t\tclasspaths[i] = new ClasspathDirectory(file, encoding);\r", "+\t\t\t\t\tif (classpathDirectoryModes == null){\r", "+\t\t\t\t\t\tclasspaths[i] = new ClasspathDirectory(file, encoding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tclasspaths[i] = new ClasspathDirectory(file, encoding, classpathDirectoryModes[i]);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef15724e86c78bbc78d9d14cfc4a6ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/WordEntryHashedArray.java", "commitBeforeChange": "0050ce1e7f4e1aa09d2a0680eb2a656c745b9584", "commitAfterChange": "c557f8e28df32d4f3742c65d1f4547b281353194", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public WordEntryHashedArray()", "signatureAfterChange": "  public WordEntryHashedArray(int size)", "diff": ["-public WordEntryHashedArray() {", "-\tthis(13);", "-}", "+\tthis.elements = new WordEntry[2 * size + 1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1125e0a6830adf3302e2a5274bd87c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "1b7318e8b4bff96e8318070fbe6e3d3cd574e2b0", "commitAfterChange": "13d04cce0ea1e365f1d568669e2b131c84e2d694", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic void reset()", "signatureAfterChange": "  \tpublic void reset(int[] positionsToMapValue)", "diff": ["-\tpublic void reset() {", "+\tpublic void reset(int[] positionsToMapValue) {", "+\t\tif (positionsToMapValue != null) {", "+\t\t\tthis.positionsToMap = positionsToMapValue;", "+\t\t\tthis.positionsIndex = 0;", "+\t\t\tthis.mappedPositions = new int[positionsToMapValue.length];", "+\t\t}"]}], "num": 12122}
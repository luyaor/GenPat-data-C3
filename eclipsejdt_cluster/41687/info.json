{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f44a9f2ea85af127a278b18f42f4894", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1171bf68a73cd0664c6b51050a5f68ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "db0d99936b529038f502f3c42e4c67fa5380c5bc", "commitAfterChange": "5988789db77abec94d1b8a17fd42ed09f795c5be", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t \tprivate void parseParameterizedType(char[] typeName)", "signatureAfterChange": " \t \tprivate void parseParameterizedType(char[] typeName)", "diff": ["+\t\tboolean isRaw = false;", "-\t\t\tint rank = 0;", "-\t\t\twhile (!this.scanner.isAtParametersEnd()) {", "-\t\t \t\tif (this.scanner.isAtWildCardStart()) {", "-\t\t \t\t\tparseWildCard(rank++);", "-\t\t \t\t} else {", "-\t\t\t\t\tparseTypeArgument();", "-\t\t \t\t}", "-\t\t\t}", "+\t\t\tif (!this.scanner.isAtRawTypeEnd()) {", "+\t\t\t\tint rank = 0;", "+\t\t\t\twhile (!this.scanner.isAtParametersEnd()) {", "+\t\t\t \t\tif (this.scanner.isAtWildCardStart()) {", "+\t\t\t \t\t\tparseWildCard(rank++);", "+\t\t\t \t\t} else {", "+\t\t\t\t\t\tparseTypeArgument();", "+\t\t\t \t\t}", "+\t\t\t\t}", "+\t\t\t}  else", "+\t\t\t\tisRaw = true;", "-\t\t} // else raw type", "-\t\tconsumeParameterizedType(typeName);", "+\t\t}", "+\t\tconsumeParameterizedType(typeName, isRaw);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8715bf60469cccd879affec633831e1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "26ae2fb0b104f35c8ff6905d5a4d6e38ab8aa8e4", "commitAfterChange": "87c97e046bfd0082db22afde07881f33a4558114", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 57, "signatureBeforeChange": " \t \tprivate void parseParameterizedType(char[] typeName)", "signatureAfterChange": " \t \tprivate void parseParameterizedType(char[] typeName, boolean isRaw)", "diff": ["-\tprivate void parseParameterizedType(char[] typeName) {", "-\t\tboolean isRaw = false;", "-\t\tif (this.scanner.isAtParametersStart()) {", "-\t\t\tif (!this.scanner.isAtRawTypeEnd()) {", "-\t\t\t\tint rank = 0;", "-\t\t\t\twhile (!this.scanner.isAtParametersEnd()) {", "-\t\t\t \t\tif (this.scanner.isAtWildCardStart()) {", "-\t\t\t \t\t\tparseWildCard(rank++);", "-\t\t\t \t\t} else {", "-\t\t\t\t\t\tparseTypeArgument();", "-\t\t\t \t\t}", "-\t\t\t\t}", "-\t\t\t}  else", "-\t\t\t\tisRaw = true;", "-\t\t \t// skip \";>\"", "-\t\t \tthis.scanner.skipParametersEnd();", "+\t", "+\tprivate void parseParameterizedType(char[] typeName, boolean isRaw) {", "+\t\tif (!isRaw) {", "+\t\t\tint rank = 0;", "+\t\t\twhile (!this.scanner.isAtParametersEnd()) {", "+\t\t \t\tif (this.scanner.isAtWildCardStart()) {", "+\t\t \t\t\tparseWildCard(rank++);", "+\t\t \t\t} else {", "+\t\t\t\t\tparseTypeArgument();", "+\t\t \t\t}", "+\t\t\t}", "+\t \t// skip \";>\"", "+\t \tthis.scanner.skipParametersEnd();", "+\t\tthis.scanner.skipTypeEnd();", "+\t\tparseFlags();", "-\t \t\tparseParameterizedType(typeName);", "+\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\tthis.scanner.skipParametersStart();", "+\t\t \t\tparseParameterizedType(typeName, this.scanner.isAtRawTypeEnd());", "+\t\t\t} else", "+\t\t\t\tconsumeParameterizedType(typeName, true/*raw*/);"]}], "num": 41687}
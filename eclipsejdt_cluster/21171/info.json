{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9de5b5ff0d76d923eb986a328c2d770", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d942e1521493d6db9f7dfecc8e17656", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\tPackageFragment packageFragment = (PackageFragment) this.classFileSource.getType().getPackageFragment();", "+\t\t\t\t\t\t\tPackageFragment packageFragment = (PackageFragment) this.classFileSource.getParent();", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(SuffixConstants.SUFFIX_STRING_java);", "-\t\t\t\t\t\t\tString classFileName = this.classFileSource.getElementName(); // this includes the trailing .class", "-\t\t\t\t\t\t\tbuffer.insert(0, classFileName.toCharArray(), 0, classFileName.indexOf('.'));", "-\t\t\t\t\t\t\tfileName = String.valueOf(buffer);", "+\t\t\t\t\t\t\tBinaryType type = (BinaryType) this.classFileSource.getType();", "+\t\t\t\t\t\t\tIBinaryType binaryType = (IBinaryType) type.getElementInfo();", "+\t\t\t\t\t\t\tfileName = type.sourceFileName(binaryType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c01fc2642abe4f88ac1e124e5b257d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(MarkerAnnotation annotation, CompilationUnitScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(MarkerAnnotation annotation, CompilationUnitScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT);", "+\t\tif (this.preferences.insert_space_after_at_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tthis.scribe.printQualifiedReference(annotation.sourceEnd);", "+\t\treturn false;", "+\t}"]}], "num": 21171}
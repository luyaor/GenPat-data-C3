{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01d383ca0e5240d91747b4722bf3d3fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c9f19fb29a121e05607a30f8dc7a78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["-\tassertTrue(\"Signature#getParameterTypes is not correct1\", types.length == 3);", "-\tassertTrue(\"Signature#getParameterTypes is not correct2\", types[1].equals(\"QObject;\"));", "+\tassertEquals(\"Signature#getParameterTypes is not correct1\", 3, types.length);", "+\tassertEquals(\"Signature#getParameterTypes is not correct2\", \"QObject;\", types[1]);", "-\t// tests with 1.5-specific elements", "-\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "-\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "-\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "-\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "-//\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "-//\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "-//\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "+\t// primitive types", "+\tmethodSig = \"(BCDFIJSVZ)V\";", "+\tassertEquals(\"Signature#getParameterTypes 4\", 9,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"B\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"C\",", "+\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"D\",", "+\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"F\",", "+\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"I\",", "+\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"J\",", "+\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"S\",", "+\t\t\tSignature.getParameterTypes(methodSig)[6]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"V\",", "+\t\t\tSignature.getParameterTypes(methodSig)[7]);", "+\tassertEquals(\"Signature#getParameterTypes 4\", \"Z\",", "+\t\t\tSignature.getParameterTypes(methodSig)[8]);", "+", "+\t// array types", "+\tmethodSig = \"([I[[J[[[B[Qstring;[Tv;[Lstring;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 5\", 6,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[I\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[[J\",", "+\t\t\tSignature.getParameterTypes(methodSig)[1]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[[[B\",", "+\t\t\tSignature.getParameterTypes(methodSig)[2]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Qstring;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[3]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Tv;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[4]);", "+\tassertEquals(\"Signature#getParameterTypes 5\", \"[Lstring;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[5]);", "+\t", "+\t// resolved types", "+\tmethodSig = \"(La;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tmethodSig = \"(La<TE;>;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La<TE;>;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+\tmethodSig = \"(La/b/c<TE;>.d<TF;>;)V\";", "+\tassertEquals(\"Signature#getParameterTypes 6\", 1,", "+\t\t\tSignature.getParameterTypes(methodSig).length);", "+\tassertEquals(\"Signature#getParameterTypes 6\", \"La/b/c<TE;>.d<TF;>;\",", "+\t\t\tSignature.getParameterTypes(methodSig)[0]);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e456d6fb3f0a2e74b26671f28264ace7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/GetSourceTests.java", "commitBeforeChange": "f1e1882c048764a8516d0b14fcde098bcdfae407", "commitAfterChange": "b11ff08d2ac69725bdc069a993b1c7c922c0935d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testFieldConstant() throws CoreException", "signatureAfterChange": " \tpublic void testFieldConstant() throws CoreException", "diff": ["+\t\t\t\t\"  static final char field4 = ' ';\\n\" +", "+\t\t\t\t\"  static final double field5 = 938245798324893D;\\n\" +", "+\t\t\t\t\"  static final float field6 = 123456f;\\n\" +", "+\t\t\tLong value = (Long) constant;", "+\t\t\tassertEquals(\"Wrong value\", 938245798324893l, value.longValue());", "-", "+\t\t\tvalue = (Long) constant;", "+\t\t\tassertEquals(\"Wrong value\", 938245798324893l, value.longValue());", "+\t\t\t", "+\t\t\tvalue = (Long) constant;", "+\t\t\tassertEquals(\"Wrong value\", 938245798324893l, value.longValue());", "+", "+\t\t\tfield = type.getField(\"field4\");", "+\t\t\t", "+\t\t\tactualSource = field.getSource();", "+\t\t\texpectedSource = \"static final char field4 = ' ';\";", "+\t\t\tassertSourceEquals(\"Unexpected source'\", expectedSource, actualSource);", "+\t\t\tconstant = field.getConstant();", "+\t\t\tassertNotNull(\"No constant\", constant);", "+\t\t\tassertTrue(\"Not a Character\", constant instanceof Character);", "+\t\t\tCharacter character = (Character) constant;", "+\t\t\tassertEquals(\"Wrong value\", ' ', character.charValue());", "+\t\t\t", "+\t\t\tfield = type.getField(\"field5\");", "+\t\t\t", "+\t\t\tactualSource = field.getSource();", "+\t\t\texpectedSource = \"static final double field5 = 938245798324893D;\";", "+\t\t\tassertSourceEquals(\"Unexpected source'\", expectedSource, actualSource);", "+\t\t\tconstant = field.getConstant();", "+\t\t\tassertNotNull(\"No constant\", constant);", "+\t\t\tassertTrue(\"Not a Double\", constant instanceof Double);", "+\t\t\tDouble double1 = (Double) constant;", "+\t\t\tassertEquals(\"Wrong value\", 938245798324893l, double1.doubleValue(), 0.01);\t\t\t", "+", "+\t\t\tfield = type.getField(\"field6\");", "+\t\t\t", "+\t\t\tactualSource = field.getSource();", "+\t\t\texpectedSource = \"static final float field6 = 123456f;\";", "+\t\t\tassertSourceEquals(\"Unexpected source'\", expectedSource, actualSource);", "+\t\t\tconstant = field.getConstant();", "+\t\t\tassertNotNull(\"No constant\", constant);", "+\t\t\tassertTrue(\"Not a Float\", constant instanceof Float);", "+\t\t\tFloat float1 = (Float) constant;", "+\t\t\tassertEquals(\"Wrong value\", 123456, float1.floatValue(), 0.01f);\t\t\t"]}], "num": 3844}
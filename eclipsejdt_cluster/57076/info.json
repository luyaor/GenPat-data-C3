{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "056daed5621ebc515d31dceb06fd2e18", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a3d6d772e226332650290265afd7571", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tpublic void handleLineTooLong()", "signatureAfterChange": "  \tpublic void handleLineTooLong()", "diff": ["+\t\tint previousKind = -1;", "+\t\tboolean insideMessageArguments = false;", "+\t\tboolean insideMessageSend = false;", "-\t\t\tif (targetAlignment.tieBreakRule == Alignment.R_OUTERMOST && targetAlignment.couldBreak()){", "+\t\t\tboolean couldBreak = targetAlignment.tieBreakRule == Alignment.R_OUTERMOST ||", "+\t\t\t\t((insideMessageArguments || insideMessageSend) && targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS", "+\t\t\t\t\t\t&& (!targetAlignment.wasReset() || previousKind != Alignment.MESSAGE_SEND));", "+\t\t\tif (couldBreak && targetAlignment.couldBreak()){", "+\t\t\tswitch (targetAlignment.kind) {", "+\t\t\t\tcase Alignment.MESSAGE_ARGUMENTS:", "+\t\t\t\t\tinsideMessageArguments = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Alignment.MESSAGE_SEND:", "+\t\t\t\t\tinsideMessageSend = true;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tpreviousKind = targetAlignment.kind;", "-\t\twhile (targetAlignment != null){", "-\t\t\tif (targetAlignment.couldBreak()){", "-\t\t\t\tthrow new AlignmentException(AlignmentException.LINE_TOO_LONG, relativeDepth);", "+\t\tAlignmentException alignmentException = null;", "+\t\tint msgArgsDepth = -1;", "+\t\twhile (targetAlignment != null) {", "+\t\t\tif (targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS) {", "+\t\t\t\tmsgArgsDepth = relativeDepth;", "+\t\t\t}", "+\t\t\tif (alignmentException == null) {", "+\t\t\t\tif (targetAlignment.couldBreak()) {", "+\t\t\t\t\t// do not throw the exception immediately to have a chance to reset", "+\t\t\t\t\t// previously broken alignments (see bug 203588)", "+\t\t\t\t\talignmentException = new AlignmentException(AlignmentException.LINE_TOO_LONG, relativeDepth);", "+\t\t\t\t}", "+\t\t\t} else if (targetAlignment.wasSplit) {", "+\t\t\t\t// reset the nearest already broken outermost alignment.", "+\t\t\t\t// Note that it's not done twice to avoid infinite loop while raising", "+\t\t\t\t// the exception on an innermost alignment...", "+\t\t\t\tif (!targetAlignment.wasReset()) {", "+\t\t\t\t\ttargetAlignment.reset();", "+\t\t\t\t\tif (msgArgsDepth > alignmentException.relativeDepth) {", "+\t\t\t\t\t\talignmentException.relativeDepth = msgArgsDepth;", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow alignmentException;", "+\t\t\t\t}", "+\t\tif (alignmentException != null) {", "+\t\t\tthrow alignmentException;", "+\t\t}", "+\t\tif (this.currentAlignment != null) {", "+\t\t\tthis.currentAlignment.blockAlign = false;", "+\t\t\tthis.currentAlignment.tooLong = true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9952107db2974aec1c2d420d7903a76a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "1203ec285e9510454e7eee6b9217d8d694a24e95", "commitAfterChange": "fe9d56739c7ee5a42ad73e908441932d571ee55b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tchar[][] extractMethodArguments(IMethod method)", "signatureAfterChange": " \tchar[][] extractMethodArguments(IMethod method)", "diff": ["-\t\tString[] argumentsSignatures = null;", "-\t\tBindingKey key;", "-\t\tif (method.isResolved() && (key = new BindingKey(method.getKey())).isParameterizedMethod()) {", "-\t\t\targumentsSignatures = key.getTypeArguments();", "-\t\t} else {", "-\t\t\ttry {", "-\t\t\t\tITypeParameter[] parameters = method.getTypeParameters();", "-\t\t\t\tif (parameters != null) {", "-\t\t\t\t\tint length = parameters.length;", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tchar[][] arguments = new char[length][];", "-\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn arguments;", "+", "+\t\t// Use bind key if the element is resolved", "+\t\tif (method.isResolved()) {", "+\t\t\tBindingKey bindingKey = new BindingKey(method.getKey());", "+\t\t\tif (bindingKey.isParameterizedMethod()) {", "+\t\t\t\tString[] argumentsSignatures = bindingKey.getTypeArguments();", "+\t\t\t\tint length = argumentsSignatures.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar[][] methodArguments = new char[length][];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "+\t\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t\t\t\treturn methodArguments;", "-\t\t\t}", "-\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\t// do nothing", "-", "-\t\t// Parameterized method", "-\t\tif (argumentsSignatures != null) {", "-\t\t\tint length = argumentsSignatures.length;", "-\t\t\tif (length > 0) {", "-\t\t\t\tchar[][] methodArguments = new char[length][];", "-\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\tmethodArguments[i] = argumentsSignatures[i].toCharArray();", "-\t\t\t\t\tCharOperation.replace(methodArguments[i], new char[] { '$', '/' }, '.');", "+\t\t", "+\t\t// Try to get the argument using the JavaModel info", "+\t\ttry {", "+\t\t\tITypeParameter[] parameters = method.getTypeParameters();", "+\t\t\tif (parameters != null) {", "+\t\t\t\tint length = parameters.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar[][] arguments = new char[length][];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\targuments[i] = Signature.createTypeSignature(parameters[i].getElementName(), false).toCharArray();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn arguments;", "-\t\t\t\treturn methodArguments;", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\t// do nothing"]}], "num": 57076}
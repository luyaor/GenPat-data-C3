{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "412682c1a4e35841257b26b9c87a25db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b100bb23b39825ce12861db390f3fd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant condConstant = this.condition.constant;", "+\t\tConstant cst = this.condition.constant;", "+\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionFalse = cst != NotAConstant && cst.booleanValue() == false;", "+", "+\t\tcst = this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tFlowInfo actionInfo;", "-\t\t\tif ((condConstant != NotAConstant) && (condConstant.booleanValue() == true)) {", "-\t\t\t\treturn FlowInfo.DeadEnd;", "+\t\t\tif (isConditionTrue) {", "+\t\t\t\treturn FlowInfo.DEAD_END;", "+\t\t\t\tif (isConditionOptimizedTrue){", "+\t\t\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t}", "-\t\t\tFlowInfo actionInfo = // TODO: shouldn't it use optimized constant here?", "-\t\t\t\t((condConstant != Constant.NotAConstant) && (condConstant.booleanValue() == false))", "-\t\t\t\t\t? FlowInfo.DeadEnd", "-\t\t\t\t\t: postCondInfo.initsWhenTrue().copy();", "+\t\t\tif (isConditionFalse) {", "+\t\t\t\tactionInfo = FlowInfo.DEAD_END;", "+\t\t\t} else {", "+\t\t\t\tactionInfo = postCondInfo.initsWhenTrue().copy();", "+\t\t\t\tif (isConditionOptimizedFalse){", "+\t\t\t\t\tactionInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tif (((actionInfo == FlowInfo.DeadEnd) || actionInfo.isFakeReachable())", "-\t\t\t\t&& ((loopingContext.initsOnContinue == FlowInfo.DeadEnd)", "-\t\t\t\t\t|| loopingContext.initsOnContinue.isFakeReachable())) {", "+\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "-\t\tif ((condConstant != Constant.NotAConstant) && (condConstant.booleanValue() == true)) {", "+\t\tif (isConditionTrue) {", "+\t\tif (isConditionOptimizedTrue && continueLabel == null){", "+\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60ccc0d7188ff7b2f1ad7153112a8eb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant condConstant = this.condition.constant; ", "-\t\tConstant optimizedConstant = this.condition.optimizedBooleanConstant();", "+", "+\t\tConstant cst = this.condition.constant;", "+\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionFalse = cst != NotAConstant && cst.booleanValue() == false;", "+", "+\t\tcst = this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "-\t\t\tthenFlowInfo =", "-\t\t\t\t(optimizedConstant != NotAConstant && optimizedConstant.booleanValue() == false)", "-\t\t\t\t\t? flowInfo.initsWhenTrue().copy().markAsFakeReachable(true)", "-\t\t\t\t\t: flowInfo.initsWhenTrue().copy();", "+\t\t\tthenFlowInfo = flowInfo.initsWhenTrue().copy();", "+\t\t\tif (isConditionOptimizedFalse) thenFlowInfo.setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "+", "-\t\tthis.thenExit = (thenFlowInfo == FlowInfo.DeadEnd) || thenFlowInfo.isFakeReachable();", "+\t\tthis.thenExit = !thenFlowInfo.isReachable();", "-\t\t\telseFlowInfo =", "-\t\t\t\t(optimizedConstant != NotAConstant && optimizedConstant.booleanValue() == true)", "-\t\t\t\t\t? flowInfo.initsWhenFalse().copy().markAsFakeReachable(true)", "-\t\t\t\t\t: flowInfo.initsWhenFalse().copy();", "+\t\t\telseFlowInfo = flowInfo.initsWhenFalse().copy();", "+\t\t\tif (isConditionOptimizedTrue) elseFlowInfo.setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "+", "+\t\tboolean elseExit = !elseFlowInfo.isReachable();", "+\t\t", "-\t\tif (condConstant != NotAConstant && condConstant.booleanValue() == true) {", "-\t\t\t// IF (TRUE)", "-\t\t\tif (this.thenExit) {", "-\t\t\t\tmergedInfo = elseFlowInfo.markAsFakeReachable(true);", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "-\t\t\t\treturn mergedInfo;", "-\t\t\t} else {", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(thenFlowInfo);", "-\t\t\t\treturn thenFlowInfo;", "-\t\t\t}", "+\t\tif (isConditionTrue){", "+\t\t\tmergedInfo = this.thenExit ? elseFlowInfo : thenFlowInfo;", "+\t\t} else if (isConditionFalse) {", "+\t\t\tmergedInfo = elseExit ? thenFlowInfo : elseFlowInfo;", "-\t\t\t// IF (FALSE)", "-\t\t\tif (condConstant != NotAConstant && condConstant.booleanValue() == false) {", "-\t\t\t\tif (elseFlowInfo == FlowInfo.DeadEnd || elseFlowInfo.isFakeReachable()) {", "-\t\t\t\t\tmergedInfo = thenFlowInfo.markAsFakeReachable(true);", "-\t\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergedInfo);", "-\t\t\t\t\treturn mergedInfo;", "-\t\t\t\t} else {", "-\t\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(elseFlowInfo);", "-\t\t\t\t\treturn elseFlowInfo;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tmergedInfo = thenFlowInfo.mergedWith(elseFlowInfo.unconditionalInits());", "-\t\tmergedInfo = thenFlowInfo.mergedWith(elseFlowInfo.unconditionalInits());", "+\t\tif ((isConditionOptimizedTrue && this.thenExit)", "+\t\t\t\t|| (isConditionOptimizedFalse && elseExit)) {", "+\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e97847ec9d9417914715c022c5be0b67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tboolean conditionIsInlinedToTrue = ", "-\t\t\tcondition == null || (condition.constant != NotAConstant && condition.constant.booleanValue() == true);", "-\t\tboolean conditionIsInlinedToFalse = ", "-\t\t\t! conditionIsInlinedToTrue && (condition.constant != NotAConstant && condition.constant.booleanValue() == false);", "+\t\tConstant cst = this.condition == null ? null : this.condition.constant;", "+\t\tboolean isConditionTrue = cst == null || (cst != NotAConstant && cst.booleanValue() == true);", "+\t\tboolean isConditionFalse = cst != null && (cst != NotAConstant && cst.booleanValue() == false);", "+", "+\t\tcst = this.condition == null ? null : this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst == null ||  (cst != NotAConstant && cst.booleanValue() == true);", "+\t\tboolean isConditionOptimizedFalse = cst != null && (cst != NotAConstant && cst.booleanValue() == false);", "-\t\t\tif (!conditionIsInlinedToTrue) {", "+\t\t\tif (!isConditionTrue) {", "-\t\t\tif (conditionIsInlinedToTrue) {", "-\t\t\t\treturn FlowInfo.DeadEnd;", "+\t\t\tif (isConditionTrue) {", "+\t\t\t\treturn FlowInfo.DEAD_END;", "-\t\t\t\tif (conditionIsInlinedToFalse){", "+\t\t\t\tif (isConditionFalse){", "-\t\t\t\tactionInfo = conditionIsInlinedToFalse", "-\t\t\t\t\t? FlowInfo.DeadEnd  // unreachable when condition inlined to false", "-\t\t\t\t\t: initsWhenTrue.copy();", "+\t\t\t\tif (isConditionFalse) {", "+\t\t\t\t\tactionInfo = FlowInfo.DEAD_END;", "+\t\t\t\t} else {", "+\t\t\t\t\tactionInfo = initsWhenTrue.copy();", "+\t\t\t\t\tif (isConditionOptimizedFalse){", "+\t\t\t\t\t\tactionInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (((actionInfo == FlowInfo.DeadEnd) || actionInfo.isFakeReachable())", "-\t\t\t\t&& ((loopingContext.initsOnContinue == FlowInfo.DeadEnd)", "-\t\t\t\t\t|| loopingContext.initsOnContinue.isFakeReachable())) {", "+\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "-\t\tif (conditionIsInlinedToTrue) {", "+\t\tif (isConditionTrue) {", "+\t\tif (isConditionOptimizedTrue && continueLabel == null){", "+\t\t\tmergedInfo.setReachMode(FlowInfo.FAKE_REACHABLE);", "+\t\t}"]}], "num": 60813}
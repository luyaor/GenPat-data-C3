{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "077240dc2dc393b4866b6bf3b34c0d15", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00fdf8d1671dd945f35513d11da15072", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\t\"Unnecessary cast to type A for expression of type B\\n\" + ", "+\t\t\"Unnecessary cast from B to A\\n\" + ", "-\t\t\"Unnecessary cast to type A for expression of type B\\n\" + ", "+\t\t\"Unnecessary cast from B to A\\n\" + ", "-\t\t\"Unnecessary cast to type A for expression of type B\\n\" + ", "+\t\t\"Unnecessary cast from B to A\\n\" + ", "-\t\t\"Unnecessary cast to type A for expression of type B\\n\" + ", "+\t\t\"Unnecessary cast from B to A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0130768e8ce95df96f248f20b3b7f41c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test014()", "signatureAfterChange": " public void test014()", "diff": ["-\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    13  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    13  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 17] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 17] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022eae1dd49b7fc10effd74ed11aa06f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void testBug62812()", "signatureAfterChange": " \tpublic void testBug62812()", "diff": ["-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + ", "-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + ", "-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + ", "-\t\t\t\t\"Javadoc: Malformed reference (missing separator after method reference closing brace)\\n\" + ", "+\t\t\t\t\"Javadoc: Malformed reference (missing end space separator)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025025ba757fe0bb0f505ea29ecb06f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForInterface.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void test012()", "signatureAfterChange": "  \tpublic void test012()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027aa3209f394f2951896135b1415b90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "418e34f57c9f7842d3534af171e657c264f02dd7", "commitAfterChange": "42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 444, "signatureBeforeChange": " public void testBug253896c()", "signatureAfterChange": " public void testBug253896c()", "diff": ["-\t\t\t\"Null pointer access: The variable f1 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable f2 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable a can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" + ", "-\t\t\t\"Potential null pointer access: The variable outer2 may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02ac4e0cce24c4a4fd0835b4dd0d58bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dee823e8e9454e3bbc323b61e0e66446bfc3e48a", "commitAfterChange": "c903817ea1b3b3294907f8d4a93524af350dfca3", "methodNumberBeforeChange": 606, "methodNumberAfterChange": 606, "signatureBeforeChange": " \tpublic void test0601()", "signatureAfterChange": " \tpublic void test0601()", "diff": ["-\t\t\t\t\"\t\treturn select(box.getValues());\\n\" + ", "+\t\t\t\t\"\t\treturn selectedValues(box.getValues());\\n\" + ", "-\t\t\t\t\"\tpublic static <G> Values<G> select(Values<G> v) {\\n\" + ", "+\t\t\t\t\"\tpublic static <G> Values<G> selectedValues(Values<G> v) {\\n\" + ", "-    \t\t\"\treturn select(box.getValues());\\n\" + ", "-    \t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\treturn selectedValues(box.getValues());\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "040a3c8a1247c326dba1f5db0c800c88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "074eb26253331426d7d535c3d4572045", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "e92324cecc3fbf731a68d99288f72318b17cf1ea", "commitAfterChange": "9832689930749c0e863f1bb11ec756d41ad5c5d4", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 102, "signatureBeforeChange": " public void testSimpleDeclarationsOfSentMessages() throws CoreException", "signatureAfterChange": " public void testSimpleDeclarationsOfSentMessages() throws CoreException", "diff": ["-\t\t\"src/p/X.java p.X.foo(int, String, X) -> void [foo(int i, String s, X x)]\\n\" +", "-\t\t\"src/p/Y.java p.Y.bar() -> void [bar()]\\n\" +", "-\t\t\"src/p/Z.java p.Z.foo(int, String, X) -> void [foo(int i, String s, X x)]\\n\" +", "-\t\t\"src/p/A.java p.A.foo(int, String, X) -> void [foo()]\", ", "+\t\t\"src/p/X.java void p.X.foo(int, String, X) [foo(int i, String s, X x)]\\n\" + ", "+\t\t\"src/p/Y.java void p.Y.bar() [bar()]\\n\" + ", "+\t\t\"src/p/Z.java void p.Z.foo(int, String, X) [foo(int i, String s, X x)]\\n\" + ", "+\t\t\"src/p/A.java void p.A.foo(int, String, X) [foo()]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0adad269207e9c9b60f68057fbfa7805", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5b7dd0995f92742cfdb5291cea2030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test429537() throws CoreException, IOException", "signatureAfterChange": " public void test429537() throws CoreException, IOException", "diff": ["-\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\",", "+\t\t\t\t\t\t\t\"  <lambda #1> [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in main(String[]) [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c0c65cadb0e909006af73f572bcfde9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"Ambiguous argument for the varargs constructor Y(boolean, Object...). Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the constructor Y(boolean, Object...)\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs constructor Y(char, int[]...). Argument should be casted to int[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to int[][] when passed to the constructor Y(char, int[]...)\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs constructor Y(boolean, Object...). Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the constructor Y(boolean, Object...)\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs constructor Y(char, int[]...). Argument should be casted to int[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to int[][] when passed to the constructor Y(char, int[]...)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c3c7d1d65bebaeed9a667c0dd4aba2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void test039()", "signatureAfterChange": " public void test039()", "diff": ["-        \"----------\\n\" +", "-        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 3)\\n\" +", "-        \"\tX x1;\\n\" +", "-        \"\t^\\n\" +", "-        \"Discouraged access: The type X<T> is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" +", "-        \"----------\\n\" +", "-        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 3)\\n\" +", "-        \"\tX x1;\\n\" +", "-        \"\t^\\n\" +", "-        \"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-        \"----------\\n\" +", "-        \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 4)\\n\" +", "-        \"\tX<String> x2 = new X<String>();\\n\" +", "-        \"\t^\\n\" +", "-        \"Discouraged access: The type X<String> is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" +", "-        \"----------\\n\" +", "-        \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 4)\\n\" +", "-        \"\tX<String> x2 = new X<String>();\\n\" +", "-        \"\t               ^^^^^^^^^^^^^^^\\n\" +", "-        \"Discouraged access: The constructor X<String>() is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" +", "-        \"----------\\n\" +", "-        \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 4)\\n\" +", "-        \"\tX<String> x2 = new X<String>();\\n\" +", "-        \"\t                   ^\\n\" +", "-        \"Discouraged access: The type X<String> is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" +", "-        \"----------\\n\" +", "-        \"5 problems (5 warnings)\\n\",", "+        \"----------\\n\" + ", "+       \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 3)\\n\" + ", "+       \"\tX x1;\\n\" + ", "+       \"\t^\\n\" + ", "+       \"Discouraged access: The type \\'X<T>\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---/bin1\\')\\n\" + ", "+       \"----------\\n\" + ", "+       \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 3)\\n\" + ", "+       \"\tX x1;\\n\" + ", "+       \"\t^\\n\" + ", "+       \"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+       \"----------\\n\" + ", "+       \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 4)\\n\" + ", "+       \"\tX<String> x2 = new X<String>();\\n\" + ", "+       \"\t^\\n\" + ", "+       \"Discouraged access: The type \\'X<String>\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---/bin1\\')\\n\" + ", "+       \"----------\\n\" + ", "+       \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 4)\\n\" + ", "+       \"\tX<String> x2 = new X<String>();\\n\" + ", "+       \"\t               ^^^^^^^^^^^^^^^\\n\" + ", "+       \"Discouraged access: The constructor \\'X<String>()\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---/bin1\\')\\n\" + ", "+       \"----------\\n\" + ", "+       \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java (at line 4)\\n\" + ", "+       \"\tX<String> x2 = new X<String>();\\n\" + ", "+       \"\t                   ^\\n\" + ", "+       \"Discouraged access: The type \\'X<String>\\' is not API (restriction on classpath entry \\'---OUTPUT_DIR_PLACEHOLDER---/bin1\\')\\n\" + ", "+       \"----------\\n\" + ", "+       \"5 problems (5 warnings)\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9871d4ffd923d09bdff37fda235b46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test099()", "signatureAfterChange": " \tpublic void test099()", "diff": ["-\t\t\t\t\"     inner name: #66 MyAnon, accessflags: 9737 public abstract static ],\\n\" + ", "+\t\t\t\t\"     inner name: #66 MyAnon, accessflags: 9737 public abstract static],\\n\" + ", "-\t\t\t\t\"     inner name: #69 I, accessflags: 1545 public abstract static ]\\n\"; ", "+\t\t\t\t\"     inner name: #69 I, accessflags: 1545 public abstract static]\\n\"; ", "-\t\t\t\t\"     inner name: #70 MyAnon, accessflags: 9737 public abstract static ],\\n\" + ", "+\t\t\t\t\"     inner name: #70 MyAnon, accessflags: 9737 public abstract static],\\n\" + ", "-\t\t\t\t\"     inner name: #73 I, accessflags: 1545 public abstract static ]\\n\";\t\t\t", "+\t\t\t\t\"     inner name: #73 I, accessflags: 1545 public abstract static]\\n\";\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6a69ca433fc2e78a707612c209b9ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test039()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     3  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"     7  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 11] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 11] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 11] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e288dfdd954c8d2c51eb4e61f51946b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocFieldCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ee82f7deb8bf5fe161787014846ff1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f22e3b59e8826117a9f2181849d791f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug83127e()", "signatureAfterChange": " \tpublic void testBug83127e()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f734b0487a6235d8e2018219766a835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testJavadocMethodArgDeclarationWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodArgDeclarationWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\tIMethod method = type.getMethod(\"annSearchedMethod\", new String[] { \"QString;\" });", "+\t\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", new String[] { \"QString;\" });", "-\t\t\t\t\t\"src/j1/AnnSearched.java void j1.AnnSearched.annSearchedMethod(String) [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod(String) [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1026982da916557ec96fd882581a6c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 581, "methodNumberAfterChange": 581, "signatureBeforeChange": " public void testBug216875g() throws CoreException", "signatureAfterChange": " public void testBug216875g() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10788f3eedbc77007e20a9953e6df0aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 996, "methodNumberAfterChange": 996, "signatureBeforeChange": " public void testBug351444a() throws JavaModelException", "signatureAfterChange": " public void testBug351444a() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 27}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 27}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (TT;)V, TXYU, (t), 27}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 27}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 30}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 30}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (TT;)V, TXYU, (t), 30}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 30}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a03e350b93b72b6c13c53bc90e5ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "115886edb3326fdf92b6516f03848d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void test042()", "signatureAfterChange": " \tpublic void test042()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1193b06256dcacb556f1842a391446f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public void test0081()", "signatureAfterChange": "   public void test0081()", "diff": ["-\tString expectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new int[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new int[]{<CompleteOnName:zzz>};\\n\" + ", "-\texpectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new int[]{<CompleteOnName:zzz>}\";", "-\t\t\"    int o = new int[]{<CompleteOnName:zzz>,};\\n\" +  ", "+\t\t\"    int o = new int[]{<CompleteOnName:zzz>};\\n\" +  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "135798bf804e6b3d739f8a1b83b7c993", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1169, "methodNumberAfterChange": 1169, "signatureBeforeChange": " public void test1140()", "signatureAfterChange": " public void test1140()", "diff": ["-\t\t\"1. ERROR in p\\\\X.java (at line 2)\\r\\n\" +", "-\t\t\"\timport static p.X.Super;\\r\\n\" +", "+\t\t\"1. ERROR in p\\\\X.java (at line 2)\\n\" +", "+\t\t\"\timport static p.X.Super;\\n\" +", "-\t\t\"2. ERROR in p\\\\X.java (at line 9)\\r\\n\" +", "-\t\t\"\tpublic class X extends Super<A<X>> {\\r\\n\" +", "+\t\t\"2. ERROR in p\\\\X.java (at line 9)\\n\" +", "+\t\t\"\tpublic class X extends Super<A<X>> {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a236fd4f2159e036135e2041e28df1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "3f2f09008b2e6444affbeadc53eccae823273e63", "commitAfterChange": "d60410f5546c9e0f1241e101741e20e27ae97e72", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test099()", "signatureAfterChange": " \tpublic void test099()", "diff": ["-\t\t\t\"    [inner class info: #29 X$MyAnon, outer class info: #1 X\\n\" + ", "-\t\t\t\"     inner name: #68 MyAnon, accessflags: 9737 public abstract static ],\\n\" + ", "-\t\t\t\"    [inner class info: #69 X$I, outer class info: #1 X\\n\" + ", "-\t\t\t\"     inner name: #71 I, accessflags: 1545 public abstract static ]\\n\"; ", "+\t\t\t\"    [inner class info: #27 X$MyAnon, outer class info: #1 X\\n\" + ", "+\t\t\t\"     inner name: #66 MyAnon, accessflags: 9737 public abstract static ],\\n\" + ", "+\t\t\t\"    [inner class info: #67 X$I, outer class info: #1 X\\n\" + ", "+\t\t\t\"     inner name: #69 I, accessflags: 1545 public abstract static ]\\n\"; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "152b2b6f1f8f25eeb49fdb08f567fad4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "aaa43eec904e27741de5c55121881f4c0383d53f", "commitAfterChange": "0ffd32ee08cd2dc832efa1134a050b16b350c66a", "methodNumberBeforeChange": 988, "methodNumberAfterChange": 988, "signatureBeforeChange": " public void test0965()", "signatureAfterChange": " public void test0965()", "diff": ["-\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"Cannot cast from Class<X> to Class<X<?>>\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Class<X> to Class<X<?>>\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"Cannot cast from Class<X> to Class<X<?>>\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Class<X> to Class<X<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15f64b67aad587cd4287c05f08d31c8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 176, "methodNumberAfterChange": 176, "signatureBeforeChange": " \tpublic void test051b()", "signatureAfterChange": " \tpublic void test051b()", "diff": ["-\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1600414e8f6b571314b22ab75155915a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "abd031a3c5b0ee276f6122fb655251f21f77f5e6", "commitAfterChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"Cycle detected: a cycle exists in between annotation attributes of Foo and Bar\\n\" + ", "+\t\t\t\"Cycle detected: a cycle exists between annotation attributes of Foo and Bar\\n\" + ", "-\t\t\t\"Cycle detected: a cycle exists in between annotation attributes of Bar and Foo\\n\" + ", "+\t\t\t\"Cycle detected: a cycle exists between annotation attributes of Bar and Foo\\n\" + ", "-\t\t\t\"Cycle detected: a cycle exists in between annotation attributes of Nested and N2\\n\" + ", "+\t\t\t\"Cycle detected: a cycle exists between annotation attributes of Nested and N2\\n\" + ", "-\t\t\t\"Cycle detected: a cycle exists in between annotation attributes of N2 and Nested\\n\" + ", "+\t\t\t\"Cycle detected: a cycle exists between annotation attributes of N2 and Nested\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1637350eac7797864391e8f83b8c2388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "a4c3ac4c4476b0535c9f4bcee41fc3bc1a1adef9", "commitAfterChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic void test009()", "signatureAfterChange": "  \tpublic void test009()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tnew Y().test(1, 1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tnew Y().test(1, 1);\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tnew Y().test(new Integer(1), new Integer(1));\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tnew Y().test(new Integer(1), new Integer(1));\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ce25d01a40b1db7c6a73c657d8b097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testJavadocMethodDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodDeclaration() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIMethod method = type.getMethod(\"annSearchedMethod\", null);", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", null);", "-\t\t\t\t\"src/j1/AnnSearched.java void j1.AnnSearched.annSearchedMethod() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod() [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1740702e8b61cee82866ef69fbf31584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testBug400905_0002() throws CoreException", "signatureAfterChange": " public void testBug400905_0002() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#2.lambda$2() [()  ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#3.lambda$3() [()->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int I b400905.X.bar():<lambda>#4.lambda$4() [() ->] EXACT_MATCH\");\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [()  ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [()->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int I b400905.X.bar():Lambda(I).foo() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177706f9c2c15c15dc629db3fe6608c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["-\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getX(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getX(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getX(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getX(List<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b6557db583797169a809bcbee4ca28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "185d1df66f730b540e893bf3b423e5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void testBug212599_all() throws CoreException", "signatureAfterChange": " public void testBug212599_all() throws CoreException", "diff": ["-\t\t\"src/Ref.java Ref Ref.foo() [\tpublic \ufffd|Ref|\ufffd foo() {@46] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Ref|\ufffd test;@41] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Ref Test.bar() [\t\ufffd|Ref|\ufffd bar() {@100] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Ref Test.bar() [\t\t\treturn new \ufffd|Ref|\ufffd();@210] EXACT_MATCH\"", "+\t\t\"src/Ref.java Ref Ref.foo() [\tpublic !|Ref|! foo() {@46] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t!|Ref|! test;@41] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Ref Test.bar() [\t!|Ref|! bar() {@100] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Ref Test.bar() [\t\t\treturn new !|Ref|!();@210] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19abf30195799596f7deee623e937534", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "80adc997ad4594d86c098c1d65d4ab0307d988e5", "commitAfterChange": "bd9f1604b7023aa96308289af9053f02dd227d2f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void test016()", "signatureAfterChange": "  \tpublic void test016()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0]);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tY.count(new int[0]);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], null);\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], null);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c73eb05f0e3e99882df31a7fe6401e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "cb764d0f635c3538feb2f431a07bf4883bc5e3de", "commitAfterChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "methodNumberBeforeChange": 363, "methodNumberAfterChange": 367, "signatureBeforeChange": "  public void test1018()", "signatureAfterChange": "  public void test1018()", "diff": ["-\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\"\tif (o != null) return;\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"\tif (o != null) return;\\n\" +", "-\t\t\"2. ERROR in X.java (at line 7)\\r\\n\" +", "-\t\t\"\to = null;\\r\\n\" +", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "+\t\t\"\to = null;\\n\" +", "-\t    JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);", "+\t\tJavacTestOptions.Excuse.EclipseWarningConfiguredAsError);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c849bc609d5bf027f8630c15973b22a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 299, "methodNumberAfterChange": 299, "signatureBeforeChange": " \tpublic void test295()", "signatureAfterChange": " \tpublic void test295()", "diff": ["-\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: D is a raw type. References to generic type D<Y> should be parameterized\\n\" + ", "+\t\t\t\"D is a raw type. References to generic type D<Y> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d4696b19bcc91eb8e6384b77f791c45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug83127d()", "signatureAfterChange": " \tpublic void testBug83127d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d475026d81c2ccf01f3218f38fe057a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "db3b4c118415b666a25a55dbff2928b26ade300a", "commitAfterChange": "7b0bea69584248f2e93748bb180ed48f6c7ea0f8", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test222()", "signatureAfterChange": " \tpublic void test222()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tInteger i = lx.slot;\\n\" + ", "-\t\t\"\t        ^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from ? super Integer to Integer\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tal.add(new Integer(1)); // (1)\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The method add(? extends Integer) of type ArrayList<? extends Integer> is not applicable for the arguments (Integer). The wildcard parameter ? extends Integer has no lower bound, and may actually be more restrictive than argument Integer\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da897713fb385b9e4b5f22a7d515bb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 988, "methodNumberAfterChange": 988, "signatureBeforeChange": " public void test0965()", "signatureAfterChange": " public void test0965()", "diff": ["-\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"Type safety: Unchecked cast from Class<X> to Class<X<?>>\\n\" + ", "+\t\t\"Cannot cast from Class<X> to Class<X<?>>\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"Type safety: Unchecked cast from Class<X> to Class<X<?>>\\n\" + ", "+\t\t\"Cannot cast from Class<X> to Class<X<?>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e5a57b28c70b0c1de0199080dcc825d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void test026()", "signatureAfterChange": " \tpublic void test026()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f2f13686e91cb6ab18363a1d7973928", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testJavadocFieldDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldDeclaration() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIField field = type.getField(\"annSearchedVar\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIField field = type.getField(\"javadocSearchedVar\");", "-\t\t\t\t\"src/j1/AnnSearched.java j1.AnnSearched.annSearchedVar [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java j1.JavadocSearched.javadocSearchedVar [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206d383f5be760d73de99fa798dc3ae5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 998, "methodNumberAfterChange": 998, "signatureBeforeChange": " public void testBug351444c() throws JavaModelException", "signatureAfterChange": " public void testBug351444c() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 27}\\n\" +", "-\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 27}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (TT;)V, TXYU, (t), 27}\\n\" +", "-\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 27}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 30}\\n\" +", "+\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 30}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (TT;)V, TXYU, (t), 30}\\n\" +", "+\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 30}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21e59b027d15eb91449edfc6d7fc90b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 906, "methodNumberAfterChange": 906, "signatureBeforeChange": " public void test900()", "signatureAfterChange": " public void test900()", "diff": ["-\t\t\"1. WARNING in X.java (at line 11)\\r\\n\" + ", "-\t\t\"\t((Comparable<R>) new Implements()).toString();\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\t((Comparable<R>) new Implements()).toString();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 16)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\"\tZork z;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "224035bab4b0f9e702c801edac6a5767", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "b6c3ef88a42ce595faa4897ed3f3cb935e51c7fb", "commitAfterChange": "80d11a1b2e7fe69d0ca6c0214575c56a017a1140", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void testCycle5() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle5() throws JavaModelException", "diff": ["-\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the build path of project: P1\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the build path of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the build path of project: P1\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the build path of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b369ed78f22b96a93549e84a87218c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void test025()", "signatureAfterChange": " \tpublic void test025()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "252d5c19061c50d4524d19470313cade", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [complete(new Object(), new RuntimeException(), new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [complete(new Object(), new RuntimeException(), new IllegalMonitorStateException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [complete(new Object(), new Exception(), new RuntimeException(), gm)] EXACT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "254257e237d104249d5a7b4ac1fff07d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 581, "methodNumberAfterChange": 581, "signatureBeforeChange": " public void testBug216875g() throws CoreException", "signatureAfterChange": " public void testBug216875g() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2570337be27c3559226083938ef81d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void test030()", "signatureAfterChange": " \tpublic void test030()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e4e2c50500cccab7c5822cb420e17c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261f812c4592b241b131bfadec1557f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test017() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test017() throws JavaModelException, CoreException", "diff": ["-\t\t\t\t\" * Caract\ufffdres exotiques:\\n\"+", "-\t\t\t\t\" * \ufffd|#|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd\ufffd\\n\"+", "-\t\t\t\t\" * Autres caract\ufffdres exotiques:\\n\"+", "-\t\t\t\t\" * \ufffd|\ufffd|\ufffd|\ufffd|\ufffd|\ufffd\\n\"+", "+\t\t\t\t\" * Caract?res exotiques:\\n\"+", "+\t\t\t\t\" * ?|#|?|?|?|?|?|?|?|?|??\\n\"+", "+\t\t\t\t\" * Autres caract?res exotiques:\\n\"+", "+\t\t\t\t\" * ?|?|?|?|?|?\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "267a61e10085aa25597415ca66a3ab36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void testBug400905_0004() throws CoreException", "signatureAfterChange": " public void testBug400905_0004() throws CoreException", "diff": ["-\t\t\t\"src/b400905/I.java T b400905.I.foo() [foo] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):<lambda>#1.lambda$1() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):<lambda>#3.lambda$3() [() /* true */->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):<lambda>#4.lambda$4() [() /* false */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java java/lang/Object void b400905.X.main(String[]):<lambda>#5.lambda$5() [() /* cast */ ->] EXACT_MATCH\"", "+\t\t\t\t\t\"src/b400905/I.java T b400905.I.foo() [foo] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):Lambda(I).foo() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):Lambda(I).foo() [() /* true */->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):Lambda(I).foo() [() /* false */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java java/lang/Object void b400905.X.main(String[]):Lambda(I).foo() [() /* cast */ ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "269b90a0f6a0f06ec0addb2c07a77997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test029()", "signatureAfterChange": " \tpublic void test029()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26abb1c6465c4b0875475fa13d549c02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_RAW_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d590f0efdaa30e0e1ace8c346340e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e7c5e2e3e53a3fffcedffc32274328", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1190, "methodNumberAfterChange": 1190, "signatureBeforeChange": " public void test1160()", "signatureAfterChange": " public void test1160()", "diff": ["-\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tpublic class X<V extends Z<V>> extends Z<V>{\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\"\tpublic class X<V extends Z<V>> extends Z<V>{\\n\" +", "-\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tpublic class X<V extends Z<V>> extends Z<V>{\\r\\n\" +", "+\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\"\tpublic class X<V extends Z<V>> extends Z<V>{\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27fa657de418cc8d16c15a79170afd78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\r\\n\" + ", "-\t\t\t\"\tcase BLEU :\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tcase BLEU :\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tcase BLEU :\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tcase BLEU :\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28019334cbc2066ead89cf58817adfd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " \tpublic void test081()", "signatureAfterChange": " \tpublic void test081()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic A<String> foo() { return null; }\\r\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic A<String> foo() { return null; }\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tpublic <S> A<U> bar() { return null; }\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic <S> A<U> bar() { return null; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280b5cd0b28a12d7c5a3cfbe2f271313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testAnonymousType4() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType4() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2907384794e955b95977dfa80c2e778f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void testCycle5() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle5() throws JavaModelException", "diff": ["-\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the classpath of project: P1\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the classpath of project: P2\", p2)//$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ffe82b4ca3f56d6f274cefe1b75390", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void testBug208541() throws JavaModelException", "signatureAfterChange": " public void testBug208541() throws JavaModelException", "diff": ["-\t\t\"        if (new String().length() != 0 &&\\n\" +", "-\t\t\"                (i < j && j < k)) {\\n\" +", "+\t\t\"        if (new String().length() != 0 \\n\" +", "+\t\t\"              &&  (i < j && j < k)) {\\n\" +", "-\t\t\"\t\tif (new String().length() != 0 &&\\n\" +", "-\t\t\"\t\t\t\t(i < j && j < k)) {\\n\" +", "+\t\t\"\t\tif (new String().length() != 0\\n\" +", "+\t\t\"\t\t\t\t&& (i < j && j < k)) {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a41332266f263213f5fbb1b8e62c6ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a494b9d96ab45ee22465ca5fbf75ba3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 344, "signatureBeforeChange": " public void testBug110336f() throws CoreException", "signatureAfterChange": " public void testBug110336f() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.foo(Test).test1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo(Test).test2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo(Test) [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo(Test).test4 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo(Test).test3 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.foo(Test) [Test]+[test1]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo(Test) [Test]+[test2]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo(Test) [Test]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo(Test) [Test]+[test4]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo(Test) [Test]+[test3]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a704b4d99a962951f0be9c6a0ba6a2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  \tpublic void testBug209936_GenericMemberFullyQualifiedSingleReference()", "signatureAfterChange": "  \tpublic void testBug209936_GenericMemberFullyQualifiedSingleReference()", "diff": ["-\t\t\t\t\"\t\t\t \t\t * @see A.A1.A2.A3.A4#foo(V)\\n\" +", "-\t\t\t\t\"\t\t\t \t\t * @see A.A1.A2.A3.A4#foo(Object)\\n\" +", "+\t\t\t\t\"\t\t\t \t\t * @see p1.A.A1.A2.A3.A4#foo(V)\\n\" +", "+\t\t\t\t\"\t\t\t \t\t * @see p1.A.A1.A2.A3.A4#foo(Object)\\n\" +", "-\t\t\t\"\t* @see A.A1.A2.A3.A4#foo(V)\\n\" +", "-\t\t\t\"\t                     ^^^\\n\" +", "+\t\t\t\"\t* @see p1.A.A1.A2.A3.A4#foo(V)\\n\" +", "+\t\t\t\"\t                        ^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf337c340187ba966b1bdfb9532f9c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 406, "methodNumberAfterChange": 406, "signatureBeforeChange": " public void testBug317719f() throws Exception", "signatureAfterChange": " public void testBug317719f() throws Exception", "diff": ["-\t\t\t\"Method forAccountSet(List) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method forAccountSet(List) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method forAccountSet(List<R>) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method forAccountSet(List<R>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method forAccountSet(List) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method forAccountSet(List) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method forAccountSet(List<R>) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method forAccountSet(List<R>) is the same as another method in type X<Z>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d9a00ce681f8fe4030708735e89a4f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e60ae0257a90c3c906c41b3ef2241f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 404, "methodNumberAfterChange": 404, "signatureBeforeChange": " public void testBug317719d() throws Exception", "signatureAfterChange": " public void testBug317719d() throws Exception", "diff": ["-\t\t\t\"Method foo(List<String>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method foo(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method foo(List<Integer>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method foo(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(List<String>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(List<Integer>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(List<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eda046fa60e32a2a41e6ef7b4e5bf5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "328c06fa136c963530115a367863b6a931384871", "commitAfterChange": "c0d735bb59d0292c44074a58c867bfe7a8670833", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void test384750x()", "signatureAfterChange": " public void test384750x()", "diff": ["-\t\t\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3b521ed90e6f4fe576d308e13df782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  \tpublic void test127()", "signatureAfterChange": "  \tpublic void test127()", "diff": ["-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\"", "-\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved or is not a type\\n\"", "+\t\t\t\t+ \"Javadoc: Hashtable cannot be resolved to a type\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f62ecc4197431064bc74ad874fe619a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Object to List<String>\\n\" + ", "+\t\t\t\"\t                                                 ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from int to List<String>\\n\" + ", "-\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Object to List<String>\\n\" + ", "+\t\t\t\"\t                          ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from int to List<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9bc6e3e61554ef80c95ef8883480bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test75460()", "signatureAfterChange": " \tpublic void test75460()", "diff": ["-\t\t\t\t\" * objects[0] = new String(\\\"Hallo Welt !!!\\\");\" + DELIMITER +", "-\t\t\t\t\" * objects[1] = new String(\\\"Test !!!\\\");\" + DELIMITER +", "-\t\t\t\t\" * objects[2] = new Integer(\\\"1980\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[0] = new String(&quot;Hallo Welt !!!&quot;);\" + DELIMITER +", "+\t\t\t\t\" * objects[1] = new String(&quot;Test !!!&quot;);\" + DELIMITER +", "+\t\t\t\t\" * objects[2] = new Integer(&quot;1980&quot;);\" + DELIMITER +", "-\t\t\t\t\" * for (int i = 0; i < objs.length; i++) {\" + DELIMITER +", "+\t\t\t\t\" * for (int i = 0; i &lt; objs.length; i++) {\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308003ec792ebd6826aca273d2876082", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "6616b103b53af13bafcc8a32713ca6371865f9c4", "commitAfterChange": "fcd90e4a2f5e40578ea3ad28461a3e5ea180ab4e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["-\t\t\tSystem.out.println(\"Aborted build because project has classpath errors (incomplete or involved in cycle)\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Aborted build because project has classpath errors (incomplete or involved in cycle)\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(\"JavaBuilder: Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(\"JavaBuilder: Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(\"Aborted build because prereq project \" + p.getName() //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"JavaBuilder: Aborted build because prereq project \" + p.getName() //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f73b2ff60cf6ab66c7f568637d3121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternMultipleParamArguments01() throws CoreException", "diff": ["-\t\tsearch(\"generic % <?, ? extends Exception, ? super RuntimeException>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<?, ? extends Exception, ? super RuntimeException>generic\", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [generic(new Object(), new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [<Object, Exception, RuntimeException>generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [<Object, RuntimeException, RuntimeException>generic(new Object(), new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31010876faafd8e28ae3d01c9bb92ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 271, "signatureBeforeChange": " public void test120a()", "signatureAfterChange": " public void test120a()", "diff": ["-\t\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\"Erasure of method getThing(V) is the same as another method in type Foo<V,E>\\n\" +", "-\t\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\"Erasure of method getThing(E) is the same as another method in type Foo<V,E>\\n\" +", "-\t\t\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\t\"Erasure of method getThing(V) is the same as another method in type Foo<V,E>\\n\" +", "-\t\t\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\t\"Erasure of method getThing(E) is the same as another method in type Foo<V,E>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316b437ca4d622a9b6ce2642d19e8867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3231ba4fdede0e016864bfe83e2bd0ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": " public void testBug317719d() throws Exception", "signatureAfterChange": " public void testBug317719d() throws Exception", "diff": ["-\t\t\t\"Method foo(List<String>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method foo(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method foo(List<Integer>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method foo(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(List<String>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(List<Integer>) has the same erasure foo(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(List<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32ab2d05c0ca820b725972ad32062ff6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341d7cf6cd8b79a3256ff47016ab539b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void testTypeRefGenericMethod_AllGenericFlags() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericMethod_AllGenericFlags() throws CoreException", "diff": ["-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\tvoid foo(A<\ufffd|String|\ufffd> a) {@46] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<\ufffd|String|\ufffd>foo();@64] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<\ufffd|A|\ufffd<? extends Exception>>foo();@83] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<A<? extends \ufffd|Exception|\ufffd>>foo();@95] EXACT_MATCH\"", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\tvoid foo(A<!|String|!> a) {@46] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<!|String|!>foo();@64] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<!|A|!<? extends Exception>>foo();@83] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<A<? extends !|Exception|!>>foo();@95] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "345d18690ac162b6f59ce26a318dc5b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_4.java", "commitBeforeChange": "a3663876ebeeba0873385de1d4baec07c1c9b5d8", "commitAfterChange": "d9c5650b5cbddab2c4722e719615cd4c4df0f60d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void test069() throws ClassFormatException, IOException", "signatureAfterChange": " \tpublic void test069() throws ClassFormatException, IOException", "diff": ["-\t\t\t\"    constant #2 utf8: I\\n\" + ", "+\t\t\t\"    constant #2 utf8: \\\"I\\\"\\n\" + ", "-\t\t\t\"    constant #4 utf8: java/lang/Object\\n\" + ", "-\t\t\t\"    constant #5 utf8: SourceFile\\n\" + ", "-\t\t\t\"    constant #6 utf8: I.java\\n\" + ", "+\t\t\t\"    constant #4 utf8: \\\"java/lang/Object\\\"\\n\" + ", "+\t\t\t\"    constant #5 utf8: \\\"SourceFile\\\"\\n\" + ", "+\t\t\t\"    constant #6 utf8: \\\"I.java\\\"\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "346648ec19f722b5236c851150396df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests2.java", "commitBeforeChange": "120defa76e249a7b50b5aa52206e16b815780186", "commitAfterChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testBug376673a() throws CoreException", "signatureAfterChange": " \tpublic void testBug376673a() throws CoreException", "diff": ["-\t\t\t\t\t\"class \ud842\udf9f1 {}\\n\";", "+\t\t\t\t\t\"class \\uD842\\uDF9F1 {}\\n\";", "-\t\t\t\tIFile file = createFile(\"/P/pkg/\ud842\udf9f1.java\", content, \"UTF-8\");", "+\t\t\t\tIFile file = createFile(\"/P/pkg/\\uD842\\uDF9F1.java\", content, \"UTF-8\");", "-\t\t\tsearch(\"\ud842\udf9f1\", TYPE, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "-\t\t\tassertSearchResults(\"pkg/\ud842\udf9f1.java pkg.\ud842\udf9f1 [\ud842\udf9f1] EXACT_MATCH\");", "+\t\t\tsearch(\"\\uD842\\uDF9F1\", TYPE, DECLARATIONS, EXACT_RULE, scope, this.resultCollector);", "+\t\t\tassertSearchResults(\"pkg/\\uD842\\uDF9F1.java pkg.\\uD842\\uDF9F1 [\\uD842\\uDF9F1] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34dbf72615f9e80206c2dc3fa7f5fc35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void testTypeRefGenericAllG5_WildcardBounds() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG5_WildcardBounds() throws CoreException", "diff": ["-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends \ufffd|Throwable|\ufffd, ? extends Exception> gm = new Multiple<Object, Exception, RuntimeException>();@1313] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends \ufffd|Exception|\ufffd> gm = new Multiple<Object, Exception, RuntimeException>();@1334] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super \ufffd|RuntimeException|\ufffd, ? super IllegalMonitorStateException> gm = new Multiple<Object, Exception, RuntimeException>();@1909] EXACT_MATCH\\n\" +", "-\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super \ufffd|IllegalMonitorStateException|\ufffd> gm = new Multiple<Object, Exception, RuntimeException>();@1935] EXACT_MATCH\"", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends !|Throwable|!, ? extends Exception> gm = new Multiple<Object, Exception, RuntimeException>();@1313] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [\t\tMultiple<Object, ? extends Throwable, ? extends !|Exception|!> gm = new Multiple<Object, Exception, RuntimeException>();@1334] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super !|RuntimeException|!, ? super IllegalMonitorStateException> gm = new Multiple<Object, Exception, RuntimeException>();@1909] EXACT_MATCH\\n\" +", "+\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [\t\tMultiple<Object, ? super RuntimeException, ? super !|IllegalMonitorStateException|!> gm = new Multiple<Object, Exception, RuntimeException>();@1935] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35a7370f1f26f113f1e957a1bdb15b0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void test070()", "signatureAfterChange": " \tpublic void test070()", "diff": ["-\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: LX;\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 1] local: i index: 1 type: I\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 1] local: l index: 2 type: J\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 1] local: args index: 4 type: [[[Ljava/lang/String;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: X\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: i index: 1 type: int\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: l index: 2 type: long\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: args index: 4 type: java.lang.String[][][]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a2f9a61dd78e749df1f2e42ae32c06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test001a()", "signatureAfterChange": "  \tpublic void test001a()", "diff": ["-\t\t\t\t\"1. ERROR in J.java (at line 1)\\r\\n\" +", "-\t\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" +", "+\t\t\t\t\"1. ERROR in J.java (at line 1)\\n\" +", "+\t\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\n\" +", "-\t\t\t\t\"2. ERROR in J.java (at line 1)\\r\\n\" +", "-\t\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" +", "+\t\t\t\t\"2. ERROR in J.java (at line 1)\\n\" +", "+\t\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3724a9732de9454e810e3286a04fea9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 91, "signatureBeforeChange": "  \tpublic void test126()", "signatureAfterChange": "  \tpublic void test126()", "diff": ["-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3737c928b738aebbd3636269444a0d65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "e534993434659c9a128067cc81e53b914d835480", "commitAfterChange": "85fca2365612e79a6e7b22f1bfd4842ccf0748ee", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "diff": ["-\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project.\", projectPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project\", projectPath)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest1)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest2)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest2)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files.\", classTest3)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest3)); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3823876538eb655b7a28e7d797c5293e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test087()", "signatureAfterChange": "  \tpublic void test087()", "diff": ["-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                                                                                             ^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3999de0ce1aeeeba77812efb6edc48f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testAnonymousType4() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType4() throws JavaModelException", "diff": ["-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ad5726ccda396b27496c940afcc403d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "d01bd30b2c1c81a666d411511a64de9d1ca823b7", "commitAfterChange": "ad8944ba8706757e37dc2af79b4fac14d5ba14dd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"    36  istore_2 [i]\\n\" + ", "+\t\t\"    36  istore_2 [sum]\\n\" + ", "-\t\t\"    57  iload_2 [i]\\n\" + ", "+\t\t\"    57  iload_2 [sum]\\n\" + ", "-\t\t\"    63  istore_2 [i]\\n\" + ", "+\t\t\"    63  istore_2 [sum]\\n\" + ", "-\t\t\"    77  iload_2 [i]\\n\" + ", "+\t\t\"    77  iload_2 [sum]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3af211f5effea39e71b241f6538b5af0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "2b0122bcb96284325ae0cf7554d9488a50d64c97", "commitAfterChange": "710d0ee9ae09d09e8125c82b35a8d0fef2cacaf9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "signatureAfterChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "diff": ["-\t\t\t\t\t\tSystem.out.println(\"Add dependents of added package \" + addedPackagePath); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(\"Found added package \" + addedPackagePath); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed package \" + removedPackagePath); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(\"Found removed package \" + removedPackagePath); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of added source file \" + typeName); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Found added source file \" + typeName); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed source file \" + typePath.toString()); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Found removed source file \" + typePath.toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0cffaa8ecbe087948d46cd326041d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " \tpublic void test076a()", "signatureAfterChange": " \tpublic void test076a()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\t<T, S extends J & I<T>> void foo() { }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\t<T, S extends J & I<T>> void foo() { }\\n\" +", "-\t\t\t\"2. ERROR in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\t<T, S extends I<T> & J> void foo() { }\\r\\n\" +", "+\t\t\t\"2. ERROR in A.java (at line 3)\\n\" +", "+\t\t\t\"\t<T, S extends I<T> & J> void foo() { }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3baeacf946a9b6ad0712b870ce2f1973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Variable() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Variable() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\ufffd|Object|\ufffd o;@218] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\ufffd|type.def.Types|\ufffd t;@230] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\t\ufffd|Object|\ufffd obj = new type.def.Types();@574] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\t\ufffd|type.def.Types|\ufffd local = (type.def.Types) obj;@611] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t!|Object|! o;@218] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t!|type.def.Types|! t;@230] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\t!|Object|! obj = new type.def.Types();@574] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\t!|type.def.Types|! local = (type.def.Types) obj;@611] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c70a12150c250e6f9d419ac9ff9e519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "b6c3ef88a42ce595faa4897ed3f3cb935e51c7fb", "commitAfterChange": "80d11a1b2e7fe69d0ca6c0214575c56a017a1140", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testMissingPrereq4() throws CoreException", "signatureAfterChange": " public void testMissingPrereq4() throws CoreException", "diff": ["-\t\t\t\"A cycle was detected in the classpath of project: A\",", "+\t\t\t\"A cycle was detected in the build path of project: A\",", "-\t\t\t\"A cycle was detected in the classpath of project: B\",", "+\t\t\t\"A cycle was detected in the build path of project: B\",", "-\t\t\t\"A cycle was detected in the classpath of project: A\",", "+\t\t\t\"A cycle was detected in the build path of project: A\",", "-\t\t\t\"A cycle was detected in the classpath of project: B\",", "+\t\t\t\"A cycle was detected in the build path of project: B\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cb355b772ef6620bf0a060f64efe21c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\t\t\"    2  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"    5  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"    2  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    5  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 9] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 9] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 9] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 9] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db188f9bfd80fd7453c7d25a3762c88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 581, "methodNumberAfterChange": 581, "signatureBeforeChange": " public void testBug216875g() throws CoreException", "signatureAfterChange": " public void testBug216875g() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3b9f52152213a60c4442bb2acc6c8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test041()", "signatureAfterChange": " \tpublic void test041()", "diff": ["-\t\t\t\"    2  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"    5  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"    2  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"    5  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 9] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 9] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 9] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 9] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efdadfcf97d4ac3e29e7da07d347240", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "a2cfaf33b626413a70eea1530c77695e81ac081f", "commitAfterChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t        \"Type safety: The cast from TT to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + ", "+\t        \"Type safety: Unchecked cast from TT to X.XX<?,X.XY>\\n\" + ", "-\t        \"Type safety: The cast from X.XX<capture#22-of ?,capture#23-of ?> to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + ", "+\t        \"Type safety: Unchecked cast from X.XX<capture#22-of ?,capture#23-of ?> to X.XX<?,X.XY>\\n\" + ", "-        \"Type safety: The cast from TT to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + ", "+        \"Type safety: Unchecked cast from TT to X.XX<?,X.XY>\\n\" + ", "-        \"Type safety: The cast from X.XX<capture#22-of ?,capture#23-of ?> to X.XX<?,X.XY> is actually checking against the erased type X<T,U,V>.XX\\n\" + ", "+        \"Type safety: Unchecked cast from X.XX<capture#22-of ?,capture#23-of ?> to X.XX<?,X.XY>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41352c191eb68462f780bb2bfe797580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug86769()", "signatureAfterChange": " \tpublic void testBug86769()", "diff": ["-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + ", "-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + ", "-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + ", "-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "418f25fb9f09a54e3adadba85872b671", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test050i()", "signatureAfterChange": " \tpublic void test050i()", "diff": ["-\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41cb9171e9d6955b1698992018111e44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 582, "methodNumberAfterChange": 582, "signatureBeforeChange": " public void testBug216875h() throws CoreException", "signatureAfterChange": " public void testBug216875h() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e4148e77bfd50b8e266970b9c1a375", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "ca349eb1728a54f5c4569863d8f64340b099c4ce", "commitAfterChange": "2575bc1675526f9cf1bae80cf41843bf7eedd3c4", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  \tpublic void testBug416182()", "signatureAfterChange": "  \tpublic void testBug416182()", "diff": ["-\t\t\t\t\"\t\tX<@Nullable String> xs = new X<String>();\\n\" + // TODO(stephan): must detect that foo() now has contradictory annots, see bug 416190 ", "+\t\t\t\t\"\t\tX<@Nullable String> xs = new X<String>();\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tX<@Nullable String> xs = new X<String>();\\n\" + ", "-\t\t\t\"\t                         ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type 'X<String>' needs unchecked conversion to conform to 'X<@Nullable String>'\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\txs.foo(null);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable String foo(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4323e2c81d40bc1eb5fcebf03f47d64f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["-\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getX(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getX(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getX(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getX(List<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43521478bd15cddb8b2595d5fb179722", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testJavadocConstructorStringReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorStringReferenceWithJavadoc() throws CoreException", "diff": ["-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched(int)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched()] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched(String)] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43a43ce87963003094777cb3cef58b1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument05() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4404bddd53f121b02f37718bacc04e04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "8a281cea306104e13dc5d8e2e915592f13b4b03f", "commitAfterChange": "4f6e7772e1eab66068e8d31851a8e395b8beb754", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " public void test401939b()", "signatureAfterChange": " public void test401939b()", "diff": ["-\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44351ef50d1110c019b30b2188e74cac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83127f()", "signatureAfterChange": " \tpublic void testBug83127f()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "453035603b6fc90bb37e2dfc5ff9df80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void testTypeRefGenericsTest06_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest06_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test06/Test.java test06.Test.x [\tX<\ufffd|Exception|\ufffd> x; @39] EXACT_MATCH\\n\" +", "-\t\t\"src/test06/Test.java test06.Test.y [\tY<\ufffd|Object|\ufffd, String, Exception> y; @57] EXACT_MATCH\\n\" +", "-\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, \ufffd|String|\ufffd, Exception> y; @65] EXACT_MATCH\\n\" +", "-\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, String, \ufffd|Exception|\ufffd> y; @73] EXACT_MATCH\"", "+\t\t\"src/test06/Test.java test06.Test.x [\tX<!|Exception|!> x; @39] EXACT_MATCH\\n\" +", "+\t\t\"src/test06/Test.java test06.Test.y [\tY<!|Object|!, String, Exception> y; @57] EXACT_MATCH\\n\" +", "+\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, !|String|!, Exception> y; @65] EXACT_MATCH\\n\" +", "+\t\t\"src/test06/Test.java test06.Test.y [\tY<Object, String, !|Exception|!> y; @73] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467135797d700207dfde8ce8b8534a04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments07() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments07() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4720ce2daa427a714d24bea91899719c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug83127d()", "signatureAfterChange": " \tpublic void testBug83127d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4885d8a164533d5885827c0aab8a0244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "4cdb299c3f5b0de082f2ec44442dd8762f2b077f", "commitAfterChange": "146b201b76577d8a0a09d69f0ce4d90e5c5e3978", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  private SimpleLookupTable findDeltas()", "signatureAfterChange": "  private SimpleLookupTable findDeltas()", "diff": ["-\t\t\t\tSystem.out.println(\"Found source delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"JavaBuilder: Found source delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Missing delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Missing delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"Found binary delta for: \" + p.getName()); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(\"JavaBuilder: Found binary delta for: \" + p.getName()); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"Missing delta for: \" + p.getName());\t //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(\"JavaBuilder: Missing delta for: \" + p.getName());\t //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49eb816f0c70d718d644d8a7faa8b53b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_RAW_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b572f9d10c11c1f4d3f200600f94b0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 232, "signatureBeforeChange": " \tpublic void test084b()", "signatureAfterChange": " \tpublic void test084b()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic class A<T1 extends A.M> implements I<T1> {\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class A<T1 extends A.M> implements I<T1> {\\n\" +", "-\t\t\t\"2. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic void foo4(Number n, T1 m) {}\\r\\n\" +", "+\t\t\t\"2. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic void foo4(Number n, T1 m) {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b6ae22d4a898a1af4760c50ded72113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void test0069()", "signatureAfterChange": " public void test0069()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + ", "-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    Object o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c39070dbbc533be009d71217827745d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), gs)] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), gs)] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca6fd500acfdff05921408a92650e4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 582, "methodNumberAfterChange": 582, "signatureBeforeChange": " public void testBug216875h() throws CoreException", "signatureAfterChange": " public void testBug216875h() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca993989b8853ac21a0a58e29827a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tpublic void test037()", "signatureAfterChange": "  \tpublic void test037()", "diff": ["-\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1cf40aeddc43d9a7a26b90a572663b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug83127d()", "signatureAfterChange": " \tpublic void testBug83127d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f3d842dbbd6e61140b93ccdcfbc82c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "897917a9c4d05a0c86bc6c8df155949d1c5640c7", "commitAfterChange": "d4f12f601c5afe98df359183a7ee00c6279cb43c", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " public void testBug388281_09()", "signatureAfterChange": " public void testBug388281_09()", "diff": ["-\t\t\t\"        return this;\" +", "+\t\t\t\"        return this;\\n\" +", "-\t\t\t\"        return null;\" +", "+\t\t\t\"        return null;\\n\" +", "-\t\t\"3. ERROR in p2\\\\Sub.java (at line 7)\\n\" + ", "+\t\t\"3. ERROR in p2\\\\Sub.java (at line 8)\\n\" + ", "-\t\t\"4. ERROR in p2\\\\Sub.java (at line 7)\\n\" + ", "+\t\t\"4. ERROR in p2\\\\Sub.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f6b45ded28763cd8bf348ec1f4b9be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testJavadocMethodDeclarationWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodDeclarationWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\tIMethod method = type.getMethod(\"annSearchedMethod\", null);", "+\t\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", null);", "-\t\t\t\t\t\"src/j1/AnnSearched.java void j1.AnnSearched.annSearchedMethod() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod() [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f80166ce98b8f63e9bb4301d0c724f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs constructor Y(boolean, Object...). It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(boolean, Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to int[][] for the invocation of the varargs constructor Y(char, int[]...). It could alternatively be cast to int[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(char, int[]...) doesn't exactly match the vararg parameter type. Cast to int[][] to confirm the non-varargs invocation, or pass individual arguments of type int[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs constructor Y(boolean, Object...). It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(boolean, Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to int[][] for the invocation of the varargs constructor Y(char, int[]...). It could alternatively be cast to int[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(char, int[]...) doesn't exactly match the vararg parameter type. Cast to int[][] to confirm the non-varargs invocation, or pass individual arguments of type int[] for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd577e51757a2536a8505982ccd162e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tpublic void test060()", "signatureAfterChange": "  \tpublic void test060()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     6  iload_0\\n\" + ", "-\t\t\t\"     7  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"     6  iload_0 [i]\\n\" + ", "+\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520f4a1c6cb8f97751205cef19834e26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "45a4bf71a614f82f4a9506597605186918f4c34e", "commitAfterChange": "ae712f0ebf4829621147d487684cd97c94226b25", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \t \tpublic void test063()", "diff": ["-\t// TODO (olivier) update once https://bugs.eclipse.org/bugs/show_bug.cgi?id=79798 is fixed", "-\t\t\t\t\"    byte bytes() default (byte) 0;\\n\" + ", "-\t\t\t\t\"    short shorts() default (short) 0;\\n\" + ", "+\t\t\t\t\"    byte bytes() default 0;\\n\" + ", "+\t\t\t\t\"    short shorts() default 0;\\n\" + ", "-\t\t\t\t\"\t\tbytes=(byte) 1,\\n\" + ", "-\t\t\t\t\"\t\tshorts=(short) 5,\\n\" + ", "+\t\t\t\t\"\t\tbytes=1,\\n\" + ", "+\t\t\t\t\"\t\tshorts=5,\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520f5015c2415d19de5a1f7f2da43711", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "51ebb1f7cfea7403ec34dc6efe4fba1d95b8c175", "commitAfterChange": "d5da0f5c898d789c8accf5bac0fea57834f37324", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": " public void testBug388281_09()", "signatureAfterChange": " public void testBug388281_09()", "diff": ["-\t\t\t\"        return this;\" +", "+\t\t\t\"        return this;\\n\" +", "-\t\t\t\"        return null;\" +", "+\t\t\t\"        return null;\\n\" +", "-\t\t\"3. ERROR in p2\\\\Sub.java (at line 7)\\n\" + ", "+\t\t\"3. ERROR in p2\\\\Sub.java (at line 8)\\n\" + ", "-\t\t\"4. ERROR in p2\\\\Sub.java (at line 7)\\n\" + ", "+\t\t\"4. ERROR in p2\\\\Sub.java (at line 8)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d9052bc386853988489f99fa03181e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +", "-\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" +", "+\t\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "543b3c0b5364a02e7e74832e77a619ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 679, "methodNumberAfterChange": 679, "signatureBeforeChange": " public void test675()", "signatureAfterChange": " public void test675()", "diff": ["-\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tStore<? extends Key<T>> store1;\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tStore<? extends Key<T>> store1;\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\"\tStore<? extends Key<? extends T>> store2;\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tStore<? extends Key<? extends T>> store2;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5447847f814ecbf2fe5b80ae3dda584e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " public void test143()", "signatureAfterChange": " public void test143()", "diff": ["-\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tpublic abstract String a();\\n\" +", "-\t\t\"\t                       ^^^\\n\" +", "-\t\t\"The abstract method a in type new X(){} can only be defined by an abstract class\\n\" +", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tA {\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A cannot define abstract methods\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "546d9adf5e927d7ee4f9ea1da60a27fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTestAsserts.java", "commitBeforeChange": "9fd5428ce736a6251b7049cd29424ae48e74034b", "commitAfterChange": "462fdbe66c95fe469d26ca4c9a495870e5915168", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testBug127575n()", "signatureAfterChange": " public void testBug127575n()", "diff": ["-\t\t\t\t\"           org.eclipse.core.runtime.Assert.isLegal ((o2 = o1) != null);\\n\" +", "+\t\t\t\t\"           org.eclipse.core.runtime.Assert.isLegal (o1 != null);\\n\" +", "-\t\t\t\"\torg.eclipse.core.runtime.Assert.isLegal ((o2 = o1) != null);\\n\" + ", "-\t\t\t\"\t                                         ^^^^^^^^^\\n\" + ", "-\t\t\t\"Null comparison always yields false: The variable o2 can only be null at this location\\n\" + ", "+\t\t\t\"\torg.eclipse.core.runtime.Assert.isLegal (o1 != null);\\n\" + ", "+\t\t\t\"\t                                         ^^\\n\" + ", "+\t\t\t\"Null comparison always yields false: The variable o1 can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5471245326ce979cae93877858d4d481", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "01bb8fe9f8248cd9358b14893bccaf44dc8edaf8", "commitAfterChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug83393b()", "signatureAfterChange": " \tpublic void testBug83393b()", "diff": ["-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments ()\\n\" + ", "+\t\t\t\"Javadoc: The method foo(String[]) in the type Test is not applicable for the arguments ()\\n\" + ", "-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments (String)\\n\" + ", "+\t\t\t\"Javadoc: The method foo(String[]) in the type Test is not applicable for the arguments (String)\\n\" + ", "-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments (Exception, boolean)\\n\" + ", "+\t\t\t\"Javadoc: The method foo(Exception, boolean[]) in the type Test is not applicable for the arguments (Exception, boolean)\\n\" + ", "-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments (Exception, boolean, boolean)\\n\" + ", "+\t\t\t\"Javadoc: The method foo(Exception, boolean[]) in the type Test is not applicable for the arguments (Exception, boolean, boolean)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "548e74d983920075a5cfaec5aecbeaad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void testBug400905_0013f() throws CoreException", "signatureAfterChange": " public void testBug400905_0013f() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int int void X.zoo():<lambda #1>.doit(X):<lambda #1>.doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda #1>.doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "548faf2970d9020a2f36d0a1b45b5ba8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d53835fbcb5535de123ca93c273d07ecdeb87abc", "commitAfterChange": "19110d19d788201e42baa0e6fca2d157b16d02af", "methodNumberBeforeChange": 363, "methodNumberAfterChange": 367, "signatureBeforeChange": "  public void test1018()", "signatureAfterChange": "  public void test1018()", "diff": ["-\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\"\tif (o != null) return;\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"\tif (o != null) return;\\n\" +", "-\t\t\"2. ERROR in X.java (at line 7)\\r\\n\" +", "-\t\t\"\to = null;\\r\\n\" +", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "+\t\t\"\to = null;\\n\" +", "-\t    JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);", "+\t\tJavacTestOptions.Excuse.EclipseWarningConfiguredAsError);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54bbafe776d6bf092a473b77951276f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void test058() throws Exception", "signatureAfterChange": " public void test058() throws Exception", "diff": ["-\t\t\t\"        [pc: 11, line: 6]\\n\" +", "+\t\t\t\"        [pc: 8, line: 6]\\n\" +", "-\t\t\t\"        [pc: 34, line: 9]\\n\" +", "+\t\t\t\"        [pc: 31, line: 9]\\n\" +", "-\t\t\t\"        [pc: 11, line: 6]\\n\" +", "+\t\t\t\"        [pc: 8, line: 6]\\n\" +", "-\t\t\t\"        [pc: 33, line: 9]\\n\" +", "+\t\t\t\"        [pc: 30, line: 9]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5595621805264226a44267f591d36381", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testFieldRef_AllFlags() throws CoreException", "signatureAfterChange": " public void testFieldRef_AllFlags() throws CoreException", "diff": ["-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\treturn super.\ufffd|field|\ufffd == null ||@129] EXACT_MATCH\\n\" +", "-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tparam.\ufffd|field|\ufffd == null ||@155] EXACT_MATCH\\n\" +", "-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tthis.\ufffd|field|\ufffd == null ||@180] EXACT_MATCH\\n\" +", "-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\t\ufffd|field|\ufffd == null;@200] EXACT_MATCH\"", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\treturn super.!|field|! == null ||@129] EXACT_MATCH\\n\" +", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tparam.!|field|! == null ||@155] EXACT_MATCH\\n\" +", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tthis.!|field|! == null ||@180] EXACT_MATCH\\n\" +", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\t!|field|! == null;@200] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "559adcd0d66671d0c8fc478246ebc428", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic void test042() throws CoreException", "signatureAfterChange": " \tpublic void test042() throws CoreException", "diff": ["-\t\t\t\t\t\"LX;\",", "-\t\t\t\t\t\"LX;.field\"", "+\t\t\t\t\t\"LX;^1\",", "+\t\t\t\t\t\"LX;.field^0\"", "-\t\t\t\t\"LX;\\n\" + ", "-\t\t\t\t\"LX;.field\",", "+\t\t\t\t\"LX;^1\\n\" + ", "+\t\t\t\t\"LX;.field^0\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fbcd79966278e3e98aee32c55938df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test75460()", "signatureAfterChange": " \tpublic void test75460()", "diff": ["-\t\t\t\t\" * objects[0] = new String(&quot;Hallo Welt !!!&quot;);\" + DELIMITER +", "-\t\t\t\t\" * objects[1] = new String(&quot;Test !!!&quot;);\" + DELIMITER +", "-\t\t\t\t\" * objects[2] = new Integer(&quot;1980&quot;);\" + DELIMITER +", "+\t\t\t\t\" * objects[0] = new String(\\\"Hallo Welt !!!\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[1] = new String(\\\"Test !!!\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[2] = new Integer(\\\"1980\\\");\" + DELIMITER +", "-\t\t\t\t\" * for (int i = 0; i &lt; objs.length; i++) {\" + DELIMITER +", "+\t\t\t\t\" * for (int i = 0; i < objs.length; i++) {\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57bb16193fbcec732f27360c4659cf2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "2b0122bcb96284325ae0cf7554d9488a50d64c97", "commitAfterChange": "710d0ee9ae09d09e8125c82b35a8d0fef2cacaf9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount)", "signatureAfterChange": "  protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount)", "diff": ["-\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of added package \" + packageName); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Found added package \" + packageName); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed package \" + packageName); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Found removed package \" + packageName); //$NON-NLS-1$", "-\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of added/removed class file \" + typePath); //$NON-NLS-1$", "+\t\t\t\t\t\t\tSystem.out.println(\"Found added/removed class file \" + typePath); //$NON-NLS-1$", "-\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of changed class file \" + typePath); //$NON-NLS-1$", "+\t\t\t\t\t\t\tSystem.out.println(\"Found changed class file \" + typePath); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57da4917201fdb35a340f13c23973bc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void test054()", "signatureAfterChange": "  \tpublic void test054()", "diff": ["-\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "-\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + ", "+\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5802861b532b7533b3c357a8b213cb8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void test046()", "signatureAfterChange": " \tpublic void test046()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585a4d7c7dc40066a97a0940ae43ea6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test022()", "signatureAfterChange": " \tpublic void test022()", "diff": ["-\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b75d9fbbf646adc34124804862bbc7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": " public void testBug294618a()", "signatureAfterChange": " public void testBug294618a()", "diff": ["-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b9bdba2db6e5029676f00d5ac21f67f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 586, "methodNumberAfterChange": 586, "signatureBeforeChange": " public void testBug216875g() throws CoreException", "signatureAfterChange": " public void testBug216875g() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t!|t1|! = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t!|t1|!.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = !|t1|!.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = !|t1|!.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb69a6f2806c5319267305f56206493", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test056()", "signatureAfterChange": "  \tpublic void test056()", "diff": ["-\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "-\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c406266409c6c72bfaefcd1f09380ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": " public void testBug317719a() throws Exception", "signatureAfterChange": " public void testBug317719a() throws Exception", "diff": ["-\t\t\t\"Method same(List<Integer>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method same(List<String>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(List<Integer>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(List<String>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(List<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc8c5889cccc2d7e7fe1b586027eded", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 995, "methodNumberAfterChange": 995, "signatureBeforeChange": " public void testBug351444() throws JavaModelException", "signatureAfterChange": " public void testBug351444() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 27}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 27}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (TT;)V, TXYU, (t), 27}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 27}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 30}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 30}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<TT;>;, (TT;)V, TXYU, (t), 30}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 30}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cd41235cd6ccf7d55241c00e47a4d39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testConstructorReferencesElementPatternMultipleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesElementPatternMultipleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(new Exception(),new Exception(),new Exception(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(new RuntimeException(),new RuntimeException(),new RuntimeException(), gm)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(new Exception(),new Exception(),new Exception(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(new RuntimeException(),new RuntimeException(),new RuntimeException(), gm)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EXACT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d63c2bad4daab45e4ad8838ba29fe09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 454, "methodNumberAfterChange": 454, "signatureBeforeChange": " \tpublic void test450()", "signatureAfterChange": " \tpublic void test450()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tX<String>.Inner<Integer> d4 = new X<String>.Inner<Integer>();\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String>.Inner<Integer> d4 = new X<String>.Inner<Integer>();\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tX<String>.Inner<Integer> d4 = new X<String>.Inner<Integer>();\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String>.Inner<Integer> d4 = new X<String>.Inner<Integer>();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eaa4cb20618dccfef072a847b7daee6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test045()", "signatureAfterChange": " \tpublic void test045()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "602b099953774d638887d975319992ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 749, "methodNumberAfterChange": 749, "signatureBeforeChange": " public void test743()", "signatureAfterChange": " public void test743()", "diff": ["-\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\"\t@Override public Nested<B> getNested3() { // sub\\n\" + ", "-\t\t\"\t                           ^^^^^^^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with TestGeneric3<B>.getNested3()\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\"\treturn this;//3\\n\" + ", "+\t\t\"\t       ^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from TestGeneric3<A>.Nested<B> to TestGeneric3<B>.Nested<B>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6066b7167887bc38fc14de45c479e1ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void test187()", "signatureAfterChange": " public void test187()", "diff": ["-\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"Erasure of method f(List<String>) is the same as another method in type XX\\n\" +", "-\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"Erasure of method f(List<Integer>) is the same as another method in type XX\\n\" +", "-\t\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"Erasure of method f(List<String>) is the same as another method in type XX\\n\" +", "-\t\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"Erasure of method f(List<Integer>) is the same as another method in type XX\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "610390c67e13754df89283355601cffd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test045() throws CoreException", "signatureAfterChange": " \tpublic void test045() throws CoreException", "diff": ["-\t\t\t\t\"Lp1/X;\",", "-\t\t\t\t\"Lp1/Y<+Lp1/X;>;\"", "+\t\t\t\t\"Lp1/X;^1\",", "+\t\t\t\t\"Lp1/Y<+Lp1/X;>;^1\"", "-\t\t\t\"Lp1/X;\\n\" +", "-\t\t\t\"Lp1/Y<+Lp1/X;>;\",", "+\t\t\t\"Lp1/X;^1\\n\" +", "+\t\t\t\"Lp1/Y<+Lp1/X;>;^1\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6350ee3ff76e3ef50ca1950334ab63a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " \tpublic void test051b()", "signatureAfterChange": " \tpublic void test051b()", "diff": ["-\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e1d80836c4a2dfc846cab33e494a7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void testTypeRefGenericAllG3R3_WildcardBounds() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG3R3_WildcardBounds() throws CoreException", "diff": ["-\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [\tpublic GM<GS<Object>.Generic<?>, GS<? extends \ufffd|Throwable|\ufffd>.Generic<?>, GS<? super RuntimeException>.Generic<?>>.Generic<?,?,?> sgms_obj;@903] EXACT_MATCH\\n\" +", "-\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [\tpublic GM<GS<Object>.Generic<?>, GS<? extends Throwable>.Generic<?>, GS<? super \ufffd|RuntimeException|\ufffd>.Generic<?>>.Generic<?,?,?> sgms_obj;@937] EXACT_MATCH\\n\" +", "-\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [\tpublic g3.t.def.GM<g3.t.def.GS<Object>.Generic<?>, g3.t.def.GS<? extends \ufffd|Throwable|\ufffd>.Generic<?>, g3.t.def.GS<? super RuntimeException>.Generic<?>>.Generic<?,?,?> qgms_obj;@1811] EXACT_MATCH\\n\" +", "-\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [\tpublic g3.t.def.GM<g3.t.def.GS<Object>.Generic<?>, g3.t.def.GS<? extends Throwable>.Generic<?>, g3.t.def.GS<? super \ufffd|RuntimeException|\ufffd>.Generic<?>>.Generic<?,?,?> qgms_obj;@1854] EXACT_MATCH\"", "+\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [\tpublic GM<GS<Object>.Generic<?>, GS<? extends !|Throwable|!>.Generic<?>, GS<? super RuntimeException>.Generic<?>>.Generic<?,?,?> sgms_obj;@903] EXACT_MATCH\\n\" +", "+\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [\tpublic GM<GS<Object>.Generic<?>, GS<? extends Throwable>.Generic<?>, GS<? super !|RuntimeException|!>.Generic<?>>.Generic<?,?,?> sgms_obj;@937] EXACT_MATCH\\n\" +", "+\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [\tpublic g3.t.def.GM<g3.t.def.GS<Object>.Generic<?>, g3.t.def.GS<? extends !|Throwable|!>.Generic<?>, g3.t.def.GS<? super RuntimeException>.Generic<?>>.Generic<?,?,?> qgms_obj;@1811] EXACT_MATCH\\n\" +", "+\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [\tpublic g3.t.def.GM<g3.t.def.GS<Object>.Generic<?>, g3.t.def.GS<? extends Throwable>.Generic<?>, g3.t.def.GS<? super !|RuntimeException|!>.Generic<?>>.Generic<?,?,?> qgms_obj;@1854] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e4dae3611fd6976b768cf9530d92d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "a4c3ac4c4476b0535c9f4bcee41fc3bc1a1adef9", "commitAfterChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test006()", "signatureAfterChange": "  \tpublic void test006()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tnew Y().test(1, 1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tnew Y().test(1, 1);\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tnew Y().test((byte) 1, 1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tnew Y().test((byte) 1, 1);\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6636634dd7d7d25618cc6f9df00c5082", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "677c4b39a30069207f57550aec27ea9d04477c82", "commitAfterChange": "a8939af811304c63be0e7f585bcaea4e93cb581f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test039()", "signatureAfterChange": " public void test039()", "diff": ["-\t\t\"Discouraged access: X<T>\\n\" + ", "+\t\t\"Discouraged access: The type X<T> is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" + ", "-\t\t\"Discouraged access: X<String>\\n\" + ", "+\t\t\"Discouraged access: The type X<String> is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" + ", "-\t\t\"Discouraged access: X<String>()\\n\" + ", "+\t\t\"Discouraged access: The constructor X<String>() is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" + ", "-\t\t\"Discouraged access: X<String>\\n\" + ", "+\t\t\"Discouraged access: The type X<String> is not accessible due to restriction on classpath entry ---OUTPUT_DIR_PLACEHOLDER---/bin1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6651106730f61d2e582ab2a6b9058fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7b6db9de192fc1976c0d12542fea77102668b433", "commitAfterChange": "fe94bdafb4bfe9680e0611bb6d3516015883724d", "methodNumberBeforeChange": 466, "methodNumberAfterChange": 466, "signatureBeforeChange": " \tpublic void test464()", "signatureAfterChange": " \tpublic void test464()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\treturn sets;\\r\\n\" + ", "-\t\t\t\"\t       ^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Set[] needs unchecked conversion to conform to Set<String>[]\\n\" + ", "+\t\t\t\"\tList<Integer>[] nums = new List[] {Collections.singletonList(\\\"Uh oh\\\")};\\r\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type List[] needs unchecked conversion to conform to List<Integer>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "668821e11610074b2e50e87e6e0cc602", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "commitAfterChange": "818dca3cf84fd118ea99497de1f8b977d4253551", "methodNumberBeforeChange": 367, "methodNumberAfterChange": 363, "signatureBeforeChange": "  public void test1018()", "signatureAfterChange": "  public void test1018()", "diff": ["-\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tif (o != null) return;\\n\" +", "+\t\t\"1. ERROR in X.java (at line 6)\\r\\n\" +", "+\t\t\"\tif (o != null) return;\\r\\n\" +", "-\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\to = null;\\n\" +", "+\t\t\"2. ERROR in X.java (at line 7)\\r\\n\" +", "+\t\t\"\to = null;\\r\\n\" +", "-\t\tJavacTestOptions.Excuse.EclipseWarningConfiguredAsError);", "+\t    JavacTestOptions.Excuse.EclipseWarningConfiguredAsError);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ece10281e34b43dbedb74aa68d34e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testStringNoArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a43a8b99e80afccd88bb92491ce3a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test039()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     6  iload_1\\n\" + ", "-\t\t\t\"     7  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     6  iload_1 [i]\\n\" + ", "+\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ac51a0c14b132c2e5de6dd5d4a1f8ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug47968method() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968method() throws CoreException", "diff": ["-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [foo] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [foo] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [foo] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [foo] EXACT_MATCH INSIDE_JAVADOC\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [foo(int)] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [foo(int)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [foo(int)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [foo(int)] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6baaa0ab7092f2d9f842622ef9cdd2dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug83127e()", "signatureAfterChange": " \tpublic void testBug83127e()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bed9b44d85a65ffaf4286d625ee8ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "e46d27f78c861460763411dc3c7d80ec28005dd0", "commitAfterChange": "114d487223299fbb39233b9fa5b4135ee3c694c5", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \t \tpublic void test066_codeblocks_methodReference() throws Exception", "signatureAfterChange": " \t \tpublic void test066_codeblocks_methodReference() throws Exception", "diff": ["-\t\t\t\"      #31 @B(\\n\" + ", "-\t\t\t\"        #32 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\"      #30 @B(\\n\" + ", "+\t\t\t\"        #31 value=(int) 1 (constant type)\\n\" + ", "-\t\t\t\"      #31 @B(\\n\" + ", "-\t\t\t\"        #32 value=(int) 2 (constant type)\\n\" + ", "+\t\t\t\"      #30 @B(\\n\" + ", "+\t\t\t\"        #31 value=(int) 2 (constant type)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c09dcf72641b1750ae060585e086b4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void test044()", "signatureAfterChange": " \tpublic void test044()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0a6b6d98c45475161f6bf5f2116bef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tpublic void test068()", "signatureAfterChange": "  \tpublic void test068()", "diff": ["-\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    15  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "-\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + ", "+\t\t\t\"    19  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 3, pc: 23] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c5c3cc3eb6315ebce379445cd84f48d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9f9fdfa49c0cc2ea0c58ced72b40d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d1fc2676ccf3ac9cfc8b1b786374a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tpublic void testBug48385And49620()", "signatureAfterChange": "  \tpublic void testBug48385And49620()", "diff": ["-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + ", "-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + ", "-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + ", "-\t\t\t\t\"Javadoc: CharOperation cannot be resolved or is not a type\\n\" + ", "+\t\t\t\t\"Javadoc: CharOperation cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4407d25b459bae2f221157445d0728", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f36b7aff05b621706a3d6dcd7b341e0eb0241032", "commitAfterChange": "7f50d6771d9939aee1b9841b7940c772ca3dad14", "methodNumberBeforeChange": 292, "methodNumberAfterChange": 292, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-    case 66 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface LESS GREATER\"); }  //$NON-NLS-1$", "+    case 66 : if (DEBUG) { System.out.println(\"GenericType ::= ClassOrInterface LESS GREATER...\"); }  //$NON-NLS-1$", "-    case 212 : if (DEBUG) { System.out.println(\"UnionType ::= TypeInternal\"); }  //$NON-NLS-1$", "+    case 212 : if (DEBUG) { System.out.println(\"UnionType ::= Type0\"); }  //$NON-NLS-1$", "-    case 367 : if (DEBUG) { System.out.println(\"Resource ::= TypeInternal PushModifiers...\"); }  //$NON-NLS-1$", "+    case 367 : if (DEBUG) { System.out.println(\"Resource ::= Type0 PushModifiers VariableDeclaratorId...\"); }  //$NON-NLS-1$", "-    case 368 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers TypeInternal PushRealModifiers...\"); }  //$NON-NLS-1$", "+    case 368 : if (DEBUG) { System.out.println(\"Resource ::= Modifiers Type0 PushRealModifiers...\"); }  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d9374430d79cf2b1f15fcafa4ac8d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaLikeExtensionsTests.java", "commitBeforeChange": "53ef1901eb9652b60d01f901557a99f6b7923647", "commitAfterChange": "a968559657d89e15246203d474f2d73832561da4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void testGetJavaLikeExtensions02() throws CoreException", "signatureAfterChange": " \tpublic void testGetJavaLikeExtensions02() throws CoreException", "diff": ["-\t\t\t\t\".java\\n\" + ", "-\t\t\t\t\".foo\\n\" + ", "-\t\t\t\t\".bar\\n\" + ", "-\t\t\t\t\".abc\\n\",", "+\t\t\t\t\"java\\n\" + ", "+\t\t\t\t\"foo\\n\" + ", "+\t\t\t\t\"bar\\n\" + ", "+\t\t\t\t\"abc\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e07b5d5ec04d894099ba31b170146a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testConstructorReferencesElementPatternMultipleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesElementPatternMultipleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(gm, new Exception(),new Exception(),new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(gm, new RuntimeException(),new RuntimeException(),new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testObject() [new <Object, Throwable, Exception>Multiple<Object, Object, Object>(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testException() [new <Exception, Exception, Exception>Multiple<Exception, Exception, Exception>(gm, new Exception(),new Exception(),new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefMultiple.java void g5.c.ref.RefMultiple.testRuntimeException() [new <RuntimeException, RuntimeException, RuntimeException>Multiple<RuntimeException, RuntimeException, RuntimeException>(gm, new RuntimeException(),new RuntimeException(),new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EXACT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0dc8f8e2335bf4a8df6848de0c5985", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "710d0ee9ae09d09e8125c82b35a8d0fef2cacaf9", "commitAfterChange": "9e0776587070dfdd20877d5ab72b8e4778784bf7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "signatureAfterChange": "  boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "diff": ["-\t\t\t\tSystem.out.println(\"  found well known match\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"Found well known match\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"  found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(\"Found match in well known package to \" + new String(simpleNames[i])); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"  found well known match in \" + CharOperation.toString(qualifiedName)); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(\"Found well known match in \" + CharOperation.toString(qualifiedName)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tSystem.out.println(\"  found match in \" + CharOperation.toString(qualifiedName) //$NON-NLS-1$", "+\t\t\t\t\t\t\tSystem.out.println(\"Found match in \" + CharOperation.toString(qualifiedName) //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e307d55af8ce3d8e8da8e1e21f809b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "4cdb299c3f5b0de082f2ec44442dd8762f2b077f", "commitAfterChange": "146b201b76577d8a0a09d69f0ce4d90e5c5e3978", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["-\t\t\tSystem.out.println(\"Aborted build because project has classpath errors (incomplete or involved in cycle)\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Aborted build because project has classpath errors (incomplete or involved in cycle)\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(\"JavaBuilder: Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(\"JavaBuilder: Continued to build even though prereq project \" + p.getName() //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(\"Aborted build because prereq project \" + p.getName() //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"JavaBuilder: Aborted build because prereq project \" + p.getName() //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e75b835643d93a1f8e742a9a47c4a85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "40f8b37f10f9ab9fcfe2c27230d51f19f97f4e2e", "commitAfterChange": "cbbe8b69b29b99c8c679b98644156abe11f1564d", "methodNumberBeforeChange": 450, "methodNumberAfterChange": 450, "signatureBeforeChange": " \tpublic void test0446()", "signatureAfterChange": " \tpublic void test0446()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=82159", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=82159 **", "-\t\t\t\t\"    //OK for javac and eclipse\\n\" + ", "+\t\t\t\t\"    // OK\\n\" + ", "-\t\t\t\t\"    //javac: error: \\'(\\' or \\'[\\' expected\\n\" + ", "+\t\t\t\t\"    //other: error: \\'(\\' or \\'[\\' expected\\n\" + ", "-\t\t\t\t\"    //javac: OK\\n\" + ", "+\t\t\t\t\"    //other: OK\\n\" + ", "-\t\t\t\t\"    //OK for javac and eclipse\\n\" + ", "+\t\t\t\t\"    // OK\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e9e503ce323e64f1a50dc73dec65e4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testJavadocMethodArgReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodArgReferenceWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "-\t\t\tIMethod method = type.getMethod(\"annSearchedMethod\", new String[] { \"QString;\" });", "+\t\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", new String[] { \"QString;\" });", "-\t\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ee740bd2e8813bb0f126b5b1a9749da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug83127d()", "signatureAfterChange": " \tpublic void testBug83127d()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f5125ecf621209c2f870470d4608292", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 445, "signatureBeforeChange": " public void testBug253896d()", "signatureAfterChange": " public void testBug253896d()", "diff": ["-\t\t\t\"Null pointer access: The variable f1 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable f2 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable outer can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Potential null pointer access: The variable param may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fdd94292e87a335a3dd8804148dfd89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void testBug103304b()", "signatureAfterChange": " \tpublic void testBug103304b()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70034222740d2d67fb104f54ca505730", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void test0060() throws JavaModelException", "signatureAfterChange": " \tpublic void test0060() throws JavaModelException", "diff": ["-\t\t\t\t\"p/X/foo(T,)<T:java.lang/Object,>\\n\" + ", "-\t\t\t\t\"p/X/foo(T,)<T:p/X,>\\n\" + ", "-\t\t\t\t\"p/X/foo(T,)<T:java.lang/Class,>\\n\" + ", "-\t\t\t\t\"p/X/foo(T,)<T:java.lang/Exception&java.lang/Runnable,>\",", "+\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "+\t\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "+\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "+\t\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "717bbea4ed0772f0f0868cfe025feaba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 587, "methodNumberAfterChange": 587, "signatureBeforeChange": " public void testBug216875h() throws CoreException", "signatureAfterChange": " public void testBug216875h() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t!|t1|! = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\t!|t1|!.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = !|t1|!.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = !|t1|!.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c485a69e2102300ab050d112b5e053", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1039, "methodNumberAfterChange": 1039, "signatureBeforeChange": " public void test1015()", "signatureAfterChange": " public void test1015()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\tvoid foo1(List l, List<String> ls) {\\n\" +", "-\t\t\"\t          ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" +", "-\t\t\"\t                   ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(List, List) of the generic method bar(List<U>, List<V>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" +", "-\t\t\"\t                   ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" +", "-\t\t\"\t                       ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<U>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tString s = bar(l, ls);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(List, List) of the generic method bar(List<U>, List<V>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tString s = bar(l, ls);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from List to String\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tString s = bar(l, ls);\\n\" +", "-\t\t\"\t               ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<U>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tvoid foo1(List l, List<String> ls) {\\n\" + ", "+\t\t\"\t          ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" + ", "+\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(List, List<String>) of the generic method bar(List<U>, List<V>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" + ", "+\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" + ", "+\t\t\"\t                       ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tString s = bar(l, ls);\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(List, List<String>) of the generic method bar(List<U>, List<V>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tString s = bar(l, ls);\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List to String\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tString s = bar(l, ls);\\n\" + ", "+\t\t\"\t               ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "730683ff5e0c8ea915ba3d79398c15a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 277, "methodNumberAfterChange": 277, "signatureBeforeChange": " \tpublic void test0276() throws JavaModelException", "signatureAfterChange": " \tpublic void test0276() throws JavaModelException", "diff": ["-\t\t\t\"public void foo() {\\r\\n\" +", "-\t\t\t\"\t\tfoo();\\r\\n\" +", "+\t\t\t\"public void foo() {\\n\" +", "+\t\t\t\"\t\tfoo();\\n\" +", "-\t\t\t\"{\\r\\n\" +", "-\t\t\t\"\t\tfoo();\\r\\n\" +", "+\t\t\t\"{\\n\" +", "+\t\t\t\"\t\tfoo();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733dae1c6f0144729baf92aea6b67af2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73614dcf45d3fda534fe77a272e328c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 307, "methodNumberAfterChange": 307, "signatureBeforeChange": " \tpublic void test0306() throws JavaModelException", "signatureAfterChange": " \tpublic void test0306() throws JavaModelException", "diff": ["-\t\t\t\t(\"package java.lang;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "-\t\t\t\t\"class Object {\\r\\n\" + ", "-\t\t\t\t\"\tpublic void foo(int arg) {}\\r\\n\" + ", "+\t\t\t\t(\"package java.lang;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"class Object {\\n\" + ", "+\t\t\t\t\"\tpublic void foo(int arg) {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73981317da5c9194737106e0ed1b4c54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 544, "methodNumberAfterChange": 544, "signatureBeforeChange": " \tpublic void test540()", "signatureAfterChange": " \tpublic void test540()", "diff": ["-\t\t\t\"1. WARNING in Baz.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tinterface Bar extends Foo {\\r\\n\" + ", "+\t\t\t\"1. WARNING in Baz.java (at line 3)\\n\" + ", "+\t\t\t\"\tinterface Bar extends Foo {\\n\" + ", "-\t\t\t\"2. ERROR in Baz.java (at line 10)\\r\\n\" + ", "-\t\t\t\"\treturn visit(c, d);\\r\\n\" + ", "+\t\t\t\"2. ERROR in Baz.java (at line 10)\\n\" + ", "+\t\t\t\"\treturn visit(c, d);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "743f65ef206155600d82daafbdde377b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1295, "methodNumberAfterChange": 1295, "signatureBeforeChange": " public void test1261()", "signatureAfterChange": " public void test1261()", "diff": ["-\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\"\tstatic XList<Sub<?>> LIST = asList(ARRAY); \\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"\tstatic XList<Sub<?>> LIST = asList(ARRAY); \\n\" +", "-\t\t\"2. WARNING in X.java (at line 7)\\r\\n\" +", "-\t\t\"\tstatic Sub<? super Number>[] ARRAY = new Sub[] { };\\r\\n\" +", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "+\t\t\"\tstatic Sub<? super Number>[] ARRAY = new Sub[] { };\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745a34b99cd5c990dc119f05ec9b2fa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 402, "signatureBeforeChange": " public void testBug317719b() throws Exception", "signatureAfterChange": " public void testBug317719b() throws Exception", "diff": ["-\t\t\t\"Method doIt(List<String>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method doIt(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method doIt(List<CharSequence>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method doIt(List<CharSequence>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method doIt(List<String>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method doIt(List<CharSequence>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(List<CharSequence>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74a795ba0649847fda0832a02d1fb6d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testJavadocFieldStringReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldStringReferenceWithJavadoc() throws CoreException", "diff": ["-\t\t\t\t\t\"annSearchedVar\",", "+\t\t\t\t\t\"javadocSearchedVar\",", "-\t\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74e9a45dd7d457ef2c2252dd32e20a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 402, "signatureBeforeChange": " public void testBug317719c() throws Exception", "signatureAfterChange": " public void testBug317719c() throws Exception", "diff": ["-\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "+\t\t\t\t\"----------\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "751a0638dec93741c4f81b9e76ea6fe1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75416671556d8669297c89859183469a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "754fdff25323bce7c0fcf58d75b03cd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 217, "signatureBeforeChange": " public void test0120_Method()", "signatureAfterChange": " public void test0120_Method()", "diff": ["-\t\t\t\"case Something : ;\\n\" +", "-\t\t\t\"case <CompleteOnName:zzz> : ;\\n\" +", "+\t\t\t\"case Something :\\n\" +", "+\t\t\t\"case <CompleteOnName:zzz> :\\n\" +", "-\t\t\t\"      case Something : ;\\n\" +", "-\t\t\t\"      case <CompleteOnName:zzz> : ;\\n\" +", "+\t\t\t\"      case Something :\\n\" +", "+\t\t\t\"      case <CompleteOnName:zzz> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "765c7b785ec297296aedc516b35d1bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test015()", "signatureAfterChange": " public void test015()", "diff": ["-\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    13  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    13  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 17] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 17] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7695e0f1172bdd942aadc7d52fea8c85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 724, "signatureBeforeChange": " public void test718()", "signatureAfterChange": " public void test718()", "diff": ["-\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "775fe5bc8aefa76541ff8b6e4e3917f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": " public void test120a()", "signatureAfterChange": " public void test120a()", "diff": ["-\t\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\"Erasure of method getThing(V) is the same as another method in type Foo<V,E>\\n\" +", "-\t\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\"Erasure of method getThing(E) is the same as another method in type Foo<V,E>\\n\" +", "-\t\t\t\t\"Method getThing(V) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\t\"Erasure of method getThing(V) is the same as another method in type Foo<V,E>\\n\" +", "-\t\t\t\t\"Method getThing(E) has the same erasure getThing(Object) as another method in type Foo<V,E>\\n\" + ", "+\t\t\t\t\"Erasure of method getThing(E) is the same as another method in type Foo<V,E>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79cc5cddca91fa402aeff5d82da5df74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \t \tpublic void test058()", "signatureAfterChange": " \t \tpublic void test058()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     5  iload_0\\n\" + ", "-\t\t\t\"     6  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"     5  iload_0 [i]\\n\" + ", "+\t\t\t\"     6  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79e234865346de03be965b581dc5de2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test016()", "signatureAfterChange": " \tpublic void test016()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79fc2614424133a9c9a9abb15728f800", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " public void testBug400905_0013f() throws CoreException", "signatureAfterChange": " public void testBug400905_0013f() throws CoreException", "diff": ["-\t\t\t\t\"src/X.java int int void X.zoo():<lambda>#1.lambda$1(X):<lambda>#2.lambda$2(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X) [X] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1(X) [X] EXACT_MATCH\");", "+\t\t\t\t\"src/X.java int int void X.zoo():Lambda(I).doit(X):Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X):Q#1.x [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():Lambda(I).doit(X) [X] EXACT_MATCH\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0cbb57d2c53773750abf1fe35c2a74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test003() throws JavaModelException", "signatureAfterChange": "  public void test003() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7af17fd8e464d4c53a4d58b407bcc956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test002a()", "signatureAfterChange": " \tpublic void test002a()", "diff": ["-\t\t\t\"1. ERROR in J.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" +", "+\t\t\t\"1. ERROR in J.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\n\" +", "-\t\t\t\"2. ERROR in J.java (at line 1)\\r\\n\" +", "-\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\r\\n\" +", "+\t\t\t\"2. ERROR in J.java (at line 1)\\n\" +", "+\t\t\t\"\tpublic class J<T> implements I<A> { public void foo(T t) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c88ad9721718c0e702d838e9f75133f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug47968method() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968method() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [foo] EXACT_MATCH\\n\" + // This match was not found before...", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [foo] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [foo] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [foo] EXACT_MATCH\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [foo] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [foo] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [foo] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [foo] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddbebc162ea9c14ac630c0f4c6ff793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1038, "methodNumberAfterChange": 1038, "signatureBeforeChange": " public void test1014()", "signatureAfterChange": " public void test1014()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tvoid foo1(List l, List<String> ls) {\\n\" +", "-\t\t\"\t          ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tSet<Map.Entry<String,String>> mss1 = bar(l, ls).entrySet();\\n\" +", "-\t\t\"\t                                     ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(List, List) of the generic method bar(List<U>, List<V>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tSet<Map.Entry<String,String>> mss1 = bar(l, ls).entrySet();\\n\" +", "-\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type Set needs unchecked conversion to conform to Set<Map.Entry<String,String>>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tSet<Map.Entry<String,String>> mss1 = bar(l, ls).entrySet();\\n\" +", "-\t\t\"\t                                         ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<U>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tString s = bar(l, ls).entrySet();\\n\" +", "-\t\t\"\t           ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(List, List) of the generic method bar(List<U>, List<V>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tString s = bar(l, ls).entrySet();\\n\" +", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Set to String\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tString s = bar(l, ls).entrySet();\\n\" +", "-\t\t\"\t               ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<U>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo1(List l, List<String> ls) {\\n\" + ", "+\t\t\"\t          ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tSet<Map.Entry<String,String>> mss1 = bar(l, ls).entrySet();\\n\" + ", "+\t\t\"\t                                     ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(List, List<String>) of the generic method bar(List<U>, List<V>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tSet<Map.Entry<String,String>> mss1 = bar(l, ls).entrySet();\\n\" + ", "+\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Set needs unchecked conversion to conform to Set<Map.Entry<String,String>>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tSet<Map.Entry<String,String>> mss1 = bar(l, ls).entrySet();\\n\" + ", "+\t\t\"\t                                         ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tString s = bar(l, ls).entrySet();\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(List, List<String>) of the generic method bar(List<U>, List<V>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tString s = bar(l, ls).entrySet();\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Set to String\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tString s = bar(l, ls).entrySet();\\n\" + ", "+\t\t\"\t               ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f50a78c01097cb84374fe55b15f70a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void testBug69275negative()", "signatureAfterChange": " \tpublic void testBug69275negative()", "diff": ["-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\t\"\t                                              ^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected text\\n\" + ", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\t\"\t                                              ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected text\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbecd3593023f30c3b8616da1f1f293", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "71c4acdd0905e065690b5a7def2363cd736fd9d9", "commitAfterChange": "40efcac62f74a525f36207bf04469af4d555a161", "methodNumberBeforeChange": 695, "methodNumberAfterChange": 695, "signatureBeforeChange": " public void testCompletionVariableName14() throws JavaModelException", "signatureAfterChange": " public void testCompletionVariableName14() throws JavaModelException", "diff": ["+\t            \"\t\tFooBar pretheFo\\n\"+", "+\t            \"\t}\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"pretheFo\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t", "+\t    assertResults(", "+\t\t\t\t\"preTheFoBar[VARIABLE_DECLARATION]{preTheFoBar, null, LFooBar;, preTheFoBar, null, \"+(R_DEFAULT  + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\t\"preTheFoBarsuf[VARIABLE_DECLARATION]{preTheFoBarsuf, null, LFooBar;, preTheFoBarsuf, null, \"+(R_DEFAULT  + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\t\"preTheFooBar[VARIABLE_DECLARATION]{preTheFooBar, null, LFooBar;, preTheFooBar, null, \"+(R_DEFAULT  + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\t\"preTheFooBarsuf[VARIABLE_DECLARATION]{preTheFooBarsuf, null, LFooBar;, preTheFooBarsuf, null, \"+(R_DEFAULT  + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+\"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\toptions.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);", "+\t\toptions.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);", "+\t\tJavaCore.setOptions(options);", "+\t}", "+}", "-\t\t\t\t\"preTheFooBar[VARIABLE_DECLARATION]{preTheFooBar, null, LFooBar;, preTheFooBar, null, \"+(R_DEFAULT  + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+\"}\\n\"+", "-\t\t\t\t\"preTheFooBarsuf[VARIABLE_DECLARATION]{preTheFooBarsuf, null, LFooBar;, preTheFooBarsuf, null, \"+(R_DEFAULT  + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80cb6a9cf04422f475f38f78d5c9c4e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 449, "methodNumberAfterChange": 449, "signatureBeforeChange": " \tpublic void test445()", "signatureAfterChange": " \tpublic void test445()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tfinal T val = (T) getProperty(src, name); // this gives erroneous cast warning\\r\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tfinal T val = (T) getProperty(src, name); // this gives erroneous cast warning\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8143ec403b7a56894ef1871babc60a13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 192, "signatureBeforeChange": " public void testBug264112_wksp2_01()", "signatureAfterChange": " public void testBug264112_wksp2_01()", "diff": ["-\t\t\"\t\t\t\t\t\t.append(\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\tString.valueOf(midValue(point.x, point_plus1.x)))\\n\" + ", "+\t\t\"\t\t\t\t\t\t.append(String\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t.valueOf(midValue(point.x, point_plus1.x)))\\n\" + ", "-\t\t\"\t\t\t\t\t\t.append(\\n\" + ", "-\t\t\"\t\t\t\t\t\t\t\tString.valueOf(midValue(point.y, point_plus1.y)));\\n\" + ", "+\t\t\"\t\t\t\t\t\t.append(String\\n\" + ", "+\t\t\"\t\t\t\t\t\t\t\t.valueOf(midValue(point.y, point_plus1.y)));\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8267d4efc5dafb3620eb3b29391ff0a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test0003()", "signatureAfterChange": " public void test0003()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case BAR : ;\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case BAR :\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82fba7cbf6fb6caa1b1ece501d8c6aae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "     public void test067()", "signatureAfterChange": "     public void test067()", "diff": ["-                \"public enum X {\\r\\n\" + ", "-                \"    ONE, TWO, THREE;\\r\\n\" + ", "-                \"    abstract int getSquare();\\r\\n\" + ", "-                \"    abstract int getSquare();\\r\\n\" + ", "+                \"public enum X {\\n\" + ", "+                \"    ONE, TWO, THREE;\\n\" + ", "+                \"    abstract int getSquare();\\n\" + ", "+                \"    abstract int getSquare();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a6a62bd9783fd232d4353aa09d474e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void test023()", "signatureAfterChange": " \tpublic void test023()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8515fcce2cbebee13a612aaf588419dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "7e90cfc843b0651b2df6811a5c412b5db3d07d3e", "commitAfterChange": "5aa22ef02c63418c06be6cd6a1ebf3ebbd649c6f", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "\r \tpublic void test0388085a()", "signatureAfterChange": "\r \tpublic void test0388085a()", "diff": ["-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "-\t\t\t\t\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85cf511d0c47923f5d56adc1bd5bd680", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void testBug54962() throws CoreException", "signatureAfterChange": " \tpublic void testBug54962() throws CoreException", "diff": ["-\t\t\t\t\"src/j6/Bug54962.java j6.Bug54962 [ * @see \ufffd|j6|\ufffd] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "-\t\t\t\t\"src/j6/Bug54962.java j6.Bug54962 [ * @see \ufffd|j6|\ufffd.BUG54962] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "-\t\t\t\t\"src/j6/Bug54962.java j6.Bug54962 [ * @see \ufffd|j6|\ufffd.Bug54962] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "-\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java [import \ufffd|j6|\ufffd.Bug54962;] EXACT_MATCH OUTSIDE_JAVADOC\",", "+\t\t\t\t\"src/j6/Bug54962.java j6.Bug54962 [ * @see !|j6|!] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "+\t\t\t\t\"src/j6/Bug54962.java j6.Bug54962 [ * @see !|j6|!.BUG54962] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "+\t\t\t\t\"src/j6/Bug54962.java j6.Bug54962 [ * @see !|j6|!.Bug54962] EXACT_MATCH INSIDE_JAVADOC\\n\" +", "+\t\t\t\t\"src/j7/qua/li/fied/Bug54962a.java [import !|j6|!.Bug54962;] EXACT_MATCH OUTSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86833c55350991a7c4bffd87d4a94554", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 506, "methodNumberAfterChange": 506, "signatureBeforeChange": " \tpublic void test504()", "signatureAfterChange": " \tpublic void test504()", "diff": ["-\t\t\t\"  // Method descriptor  #6 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\"  // Method descriptor  #17 ()LXA;\\n\" + ", "+\t\t\t\"  // Method descriptor #17 ()LXA;\\n\" + ", "-\t\t\t\"  // Method descriptor  #21 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\t\"  // Method descriptor #21 ([Ljava/lang/String;)V\\n\" + ", "-\t\t\t\"  // Method descriptor  #6 ()V\\n\" + ", "+\t\t\t\"  // Method descriptor #6 ()V\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86bc1c6359d16da75f4a041170aebeb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "5059f9b5e9c30bd6d8a194de8a3beebb3b2393df", "commitAfterChange": "4606a25c8dcce8fd41e1af97ba46acd40c63e59b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\t\tbuffer.append(\"class\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"class \"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"interface\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"interface \"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"extends\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(\" extends \"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"implements\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(\" implements \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "876c9f04d9ea921b704f59667fb5a65f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tpublic void test064()", "signatureAfterChange": "  \tpublic void test064()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  getstatic #31 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     6  iload_0\\n\" + ", "-\t\t\t\"     7  invokevirtual #37 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  getstatic java/lang/System.out Ljava/io/PrintStream; [31]\\n\" + ", "+\t\t\t\"     6  iload_0 [i]\\n\" + ", "+\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "888980bacd6ddc9badebe4d26f71ebf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void testBug208541() throws JavaModelException", "signatureAfterChange": " public void testBug208541() throws JavaModelException", "diff": ["-\t\t\"        if (new String().length() != 0 &&\\n\" +", "-\t\t\"                (i < j && j < k)) {\\n\" +", "+\t\t\"        if (new String().length() != 0 \\n\" +", "+\t\t\"              &&  (i < j && j < k)) {\\n\" +", "-\t\t\"\t\tif (new String().length() != 0 &&\\n\" +", "-\t\t\"\t\t\t\t(i < j && j < k)) {\\n\" +", "+\t\t\"\t\tif (new String().length() != 0\\n\" +", "+\t\t\"\t\t\t\t&& (i < j && j < k)) {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b14a01bb9aae2fe189d4b141bca865", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void test046()", "signatureAfterChange": " \tpublic void test046()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ae575965cd035fcab0458992a087a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test0060() throws JavaModelException", "signatureAfterChange": " \tpublic void test0060() throws JavaModelException", "diff": ["-\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V^0\\n\" + ", "-\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V^0\\n\" + ", "-\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V^0\\n\" + ", "-\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V^0\",", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bf17994af491d5640412eb2b5701470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void testMissingPrereq4() throws CoreException", "signatureAfterChange": " public void testMissingPrereq4() throws CoreException", "diff": ["-\t\t\t\"A cycle was detected in the project's classpath.\",", "+\t\t\t\"A cycle was detected in the classpath of project: A\",", "-\t\t\t\"A cycle was detected in the project's classpath.\",", "+\t\t\t\"A cycle was detected in the classpath of project: B\",", "-\t\t\t\"A cycle was detected in the project's classpath.\",", "+\t\t\t\"A cycle was detected in the classpath of project: A\",", "-\t\t\t\"A cycle was detected in the project's classpath.\",", "+\t\t\t\"A cycle was detected in the classpath of project: B\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c3f31a7eba2776c38bb8c986500b01b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": " public void testBug294618a()", "signatureAfterChange": " public void testBug294618a()", "diff": ["-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8efc87b7af5269d0eb929ecf354da94c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void test005()", "signatureAfterChange": "  \tpublic void test005()", "diff": ["-\t\t\t\t\"class Z<T> extends X<T> { public T foo() { return super.foo(); } }\\n\",", "+\t\t\t\t\"class Z<T> extends X<T> { @Override public T foo() { return super.foo(); } }\\n\",", "-\t\t\t\t\"class W<T> extends X { public T foo() { return super.foo(); } }\\n\",", "+\t\t\t\t\"class W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\",", "-\t\t\t\"\tclass W<T> extends X { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                                                         ^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7b6c99a766537f9445d933f3551ba8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs constructor Y(boolean, Object...). It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(boolean, Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to int[][] for the invocation of the varargs constructor Y(char, int[]...). It could alternatively be cast to int[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(char, int[]...) doesn't exactly match the vararg parameter type. Cast to int[][] to confirm the non-varargs invocation, or pass individual arguments of type int[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs constructor Y(boolean, Object...). It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(boolean, Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to int[][] for the invocation of the varargs constructor Y(char, int[]...). It could alternatively be cast to int[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to constructor Y(char, int[]...) doesn't exactly match the vararg parameter type. Cast to int[][] to confirm the non-varargs invocation, or pass individual arguments of type int[] for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7ffa49e844ee54013ad6dbb075bf31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "901cbbb981fe3e695e85812254f8914f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "a4c3ac4c4476b0535c9f4bcee41fc3bc1a1adef9", "commitAfterChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void test100()", "signatureAfterChange": " \tpublic void test100()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tint[] ints = (int[]) integers;\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tint[] ints = (int[]) integers;\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tFloat[] fs = (Float[]) floats;\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tFloat[] fs = (Float[]) floats;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "905c27a6fc35719834feb98855dd06ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + ", "-\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX needs unchecked conversion to conform to AX<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90fdea88dd2d38eb655a6fffb7cbdd84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "40f8b37f10f9ab9fcfe2c27230d51f19f97f4e2e", "commitAfterChange": "cbbe8b69b29b99c8c679b98644156abe11f1564d", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " \tpublic void test0559()", "signatureAfterChange": " \tpublic void test0559()", "diff": ["+\t// **", "-\t\t\t\t\"\t\tc.setT(Boolean.FALSE); //javac: warning: [unchecked] unchecked\\n\" + ", "+\t\t\t\t\"\t\tc.setT(Boolean.FALSE); // other: warning: [unchecked] unchecked\\n\" + ", "-\t\t\t\t\"\t\tc.t= Boolean.TRUE; // javac: warning: [unchecked] unchecked call\\n\" + ", "+\t\t\t\t\"\t\tc.t= Boolean.TRUE; // other: warning: [unchecked] unchecked call\\n\" + ", "-\t\t\t\"\tc.setT(Boolean.FALSE); //javac: warning: [unchecked] unchecked\\n\" + ", "+\t\t\t\"\tc.setT(Boolean.FALSE); // other: warning: [unchecked] unchecked\\n\" + ", "-\t\t\t\"\tc.t= Boolean.TRUE; // javac: warning: [unchecked] unchecked call\\n\" + ", "+\t\t\t\"\tc.t= Boolean.TRUE; // other: warning: [unchecked] unchecked call\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e24377f61dd6e733d140c366d08933", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test004()", "signatureAfterChange": " public void test004()", "diff": ["-\t\t\"The field X.Test1.o is never read locally\\n\" +", "+\t\t\"The value of the field X.Test1.o is not used\\n\" +", "-\t\t\"The field X.Test2.o is never read locally\\n\" +", "+\t\t\"The value of the field X.Test2.o is not used\\n\" +", "-\t\t\"The field X.Test5.o is never read locally\\n\" +", "+\t\t\"The value of the field X.Test5.o is not used\\n\" +", "-\t\t\"The field X.Test6.o is never read locally\\n\" +", "+\t\t\"The value of the field X.Test6.o is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92f5d5507b57688024cac45a35f6535f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test296()", "signatureAfterChange": " \tpublic void test296()", "diff": ["-\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "+\t\t\t\"B is a raw type. References to generic type B<X> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: D is a raw type. References to generic type D<Y> should be parameterized\\n\" + ", "+\t\t\t\"D is a raw type. References to generic type D<Y> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9347461fb86eaee07d9eca85f04e83e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void testBug86769()", "signatureAfterChange": " \tpublic void testBug86769()", "diff": ["-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + ", "-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + ", "-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + ", "-\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 5.0 on\\n\" + ", "+\t\t\t\"\\'enum\\' should not be used as an identifier, since it is a reserved keyword from source level 1.5 on\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935c5ee5fee274dc34e601e4d33872e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "aaa60fb67821ac85679fcff13ce96deec377f5bc", "commitAfterChange": "0909d326f6b563dc49b295f86f8e3bbab568c46d", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test222()", "signatureAfterChange": " \tpublic void test222()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tal.add(new Integer(1)); // (1)\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The method add(? extends Integer) of type ArrayList<? extends Integer> is not applicable for the arguments (Integer). The wildcard parameter ? extends Integer has no lower bound, and may actually be more restrictive than argument Integer\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tInteger i = lx.slot;\\n\" + ", "+\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from ? super Integer to Integer\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94100831da49566f0a3f6e3934b95f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "8bd886e250da1d7ba05246af4bcb8cd1f0eb1b1d", "commitAfterChange": "f24a77ad357e70fcffddb8d1e5ab0bdc69ca2a2a", "methodNumberBeforeChange": 639, "methodNumberAfterChange": 639, "signatureBeforeChange": " \tpublic void test608()", "signatureAfterChange": " \tpublic void test608()", "diff": ["-\t\t\t\" * resposta de uma linha s\ufffd:\\r\\n\" + ", "+\t\t\t\" * resposta de uma linha s\u00f3:\\r\\n\" + ", "-\t\t\t\" * resposta de v\ufffdrias linhas:\\r\\n\" + ", "+\t\t\t\" * resposta de v\u00e1rias linhas:\\r\\n\" + ", "-\t\t\t\" * resposta de uma linha s\ufffd:\\n\" + ", "+\t\t\t\" * resposta de uma linha s\u00f3:\\n\" + ", "-\t\t\t\" * resposta de v\ufffdrias linhas:\\n\" + ", "+\t\t\t\" * resposta de v\u00e1rias linhas:\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9450d44525c8e5a6b7c245385aacf242", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94f3447b2cebf11dea9ac9525d861edf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void test16() throws JavaModelException", "signatureAfterChange": "  \tpublic void test16() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest~Other;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest~Other;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "950ccf559759d7ff08b08ded3a353da4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "5527337a36439b5f7161d1700f05a2afcdb55c60", "commitAfterChange": "9309fad26eb4113a283f2c853c44a62715f49d70", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " public void testMissingPrereq4() throws CoreException", "signatureAfterChange": " public void testMissingPrereq4() throws CoreException", "diff": ["-\t\t\t\"A cycle was detected in the build path of project 'A'\",", "+\t\t\t\"A cycle was detected in the build path of project 'A'. The cycle consists of projects {A, B}\",", "-\t\t\t\"A cycle was detected in the build path of project 'B'\",", "+\t\t\t\"A cycle was detected in the build path of project 'B'. The cycle consists of projects {A, B}\",", "-\t\t\t\"A cycle was detected in the build path of project 'A'\",", "+\t\t\t\"A cycle was detected in the build path of project 'A'. The cycle consists of projects {A, B}\",", "-\t\t\t\"A cycle was detected in the build path of project 'B'\",", "+\t\t\t\"A cycle was detected in the build path of project 'B'. The cycle consists of projects {A, B}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9574f237a6a69bd7a24c3bff83aeb742", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 444, "signatureBeforeChange": " public void testBug253896c()", "signatureAfterChange": " public void testBug253896c()", "diff": ["-\t\t\t\"Null pointer access: The variable f1 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable f2 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable a can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" + ", "-\t\t\t\"Potential null pointer access: The variable outer2 may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c93ce10ab77a54ca8fc27d8ed5273d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d8d3d11a4dbbd7baa00402260127a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testBug400905_0002() throws CoreException", "signatureAfterChange": " public void testBug400905_0002() throws CoreException", "diff": ["-\t\t\t\"src/b400905/I.java int b400905.I.foo() [foo] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [()  ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [()->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java I b400905.X.bar() [() ->] EXACT_MATCH\"", "-\t);\t", "+\t\t\t\"src/b400905/I.java int b400905.I.foo() [foo] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#2.lambda$2() [()  ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda>#3.lambda$3() [()->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int I b400905.X.bar():<lambda>#4.lambda$4() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9642e39a372d4d5b2396a327b30c9e0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void test042()", "signatureAfterChange": " \tpublic void test042()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9723efcd58015fc4533a1163cf8ccb36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testSetClasspathVariable2() throws CoreException", "signatureAfterChange": " public void testSetClasspathVariable2() throws CoreException", "diff": ["-\t\t\t\"\tmylib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" +", "-\t\t\t\"\totherlib.jar[*]: {ADDED TO CLASSPATH}\\n\" + ", "+\t\t\t\"\t/LibProj/mylib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" +", "+\t\t\t\"\t/LibProj/otherlib.jar[*]: {ADDED TO CLASSPATH}\\n\" + ", "-\t\t\t\"\tmylib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" +", "-\t\t\t\"\totherlib.jar[*]: {ADDED TO CLASSPATH}\", ", "+\t\t\t\"\t/LibProj/mylib.jar[*]: {REMOVED FROM CLASSPATH}\\n\" +", "+\t\t\t\"\t/LibProj/otherlib.jar[*]: {ADDED TO CLASSPATH}\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98611d6bfcc40c3c8ca07527b3f40b42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": " public void testBug317719c() throws Exception", "signatureAfterChange": " public void testBug317719c() throws Exception", "diff": ["-\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "+\t\t\t\t\"----------\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f93f73c5a27610a5e7a96ca5f7cc86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void test010()", "signatureAfterChange": " \tpublic void test010()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a9cb9aa745cfa5acfed16d8052591ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "37a33fa365c1afc824ee6b5c0e146fff8db0d79c", "commitAfterChange": "254a144fb8ad02730db7fb5ae51a3f1d563a3301", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  public void test91()", "signatureAfterChange": "  public void test91()", "diff": ["-\t\t\"public interface Spew {\t\t\\n\" +", "+\t\t\"public interface Fred {\t\t\\n\" +", "-\t\t\"\tpublic spew(X x, int y);\t\\n\" +", "+\t\t\"\tpublic fred(X x, int y);\t\\n\" +", "-\t\t\"public interface Spew {\\n\" + ", "+\t\t\"public interface Fred {\\n\" + ", "-\t\t\"  public spew(X x, int y) {\\n\" + ", "+\t\t\"  public fred(X x, int y) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9af16f4e4ab1f3c404f30a2d5807272b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5fa2b68c4eda541bb43bc0f4865ccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocPackageCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d7f806a5407d3f3b5c85f3e313917b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test022()", "signatureAfterChange": "  \tpublic void test022()", "diff": ["-\t\t\t\t\"class B extends A { List<String> getList() { return null; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override List<String> getList() { return null; } }\\n\"", "-\t\t\t\t\"class B extends A { List getList() { return null; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override List getList() { return null; } }\\n\"", "-\t\t\t\"\tclass B extends A { List getList() { return null; } }\\n\" + ", "-\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f53f4541f89053f4e11f9ae862402f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 400, "methodNumberAfterChange": 400, "signatureBeforeChange": " public void testBug317719a() throws Exception", "signatureAfterChange": " public void testBug317719a() throws Exception", "diff": ["-\t\t\t\"Method same(List<Integer>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method same(List<String>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(List<Integer>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(List<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(List<String>) has the same erasure same(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(List<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9be3f6fcbcc046b1010dbbadd575d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug83127e()", "signatureAfterChange": " \tpublic void testBug83127e()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fd5b4ebeb946abd888252e7e13d5095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void testBug198074_dup201022() throws JavaModelException", "signatureAfterChange": " public void testBug198074_dup201022() throws JavaModelException", "diff": ["-\t\t\"\t\t\t\\\"select * \\\" +\\n\" + ", "-\t\t\"\t\t\t\\\"from person p, address a \\\" +\\n\" + ", "-\t\t\"\t\t\t\\\"where p.person_id = a.person_id \\\" +\\n\" + ", "-\t\t\"\t\t\t\\\"and p.person_id = ?\\\";\\n\" + ", "+\t\t\"\t\t\t\t\\\"select * \\\" +\\n\" + ", "+\t\t\"\t\t\t\t\t\t\\\"from person p, address a \\\" +\\n\" + ", "+\t\t\"\t\t\t\t\t\t\\\"where p.person_id = a.person_id \\\" +\\n\" + ", "+\t\t\"\t\t\t\t\t\t\\\"and p.person_id = ?\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f8e6b1cb938f6371480a8ef28127a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testJavadocMethodArgDeclaration() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodArgDeclaration() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIMethod method = type.getMethod(\"annSearchedMethod\", new String[] { \"QString;\" });", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", new String[] { \"QString;\" });", "-\t\t\t\t\"src/j1/AnnSearched.java void j1.AnnSearched.annSearchedMethod(String) [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocSearched.java void j1.JavadocSearched.javadocSearchedMethod(String) [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1991f70bf9451fc29d4130d858c0526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\"Type safety: The return type Integer of the method test() of type B needs unchecked conversion to conform to the return type T of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type Integer for test() from the type B needs unchecked conversion to conform to T from the type A\\n\" + ", "-\t\t\t\"Type safety: The return type List of the method getList() of type B needs unchecked conversion to conform to the return type List<String> of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type List for getList() from the type B needs unchecked conversion to conform to List<String> from the type A\\n\" + ", "-\t\t\t\"Type safety: The return type X of the method x() of type Y<S> needs unchecked conversion to conform to the return type X<T> of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type X for x() from the type Y<S> needs unchecked conversion to conform to X<T> from the type X<T>\\n\" + ", "-\t\t\t\"Type safety: The return type X[] of the method x() of type Y<S> needs unchecked conversion to conform to the return type X<T>[] of inherited method\\n\" + ", "+\t\t\t\"Type safety: The return type X[] for x() from the type Y<S> needs unchecked conversion to conform to X<T>[] from the type X<T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c5fd88e138a396a47a7e0dfbff95b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a20290ff8b086ebae772eeb4a591a401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "2c7f17232300c7fbbf0be41f27d83e269dc11422", "commitAfterChange": "4ee7521407adee0dd67769699b7546434316be93", "methodNumberBeforeChange": 558, "methodNumberAfterChange": 558, "signatureBeforeChange": " public void testCompletionMemberType() throws JavaModelException", "signatureAfterChange": " public void testCompletionMemberType() throws JavaModelException", "diff": ["-            \"\tpublic class Y {\\n\"+", "+            \"\tpublic class MemberType {\\n\"+", "-            \"\t\t\tY var = new Y\\n\"+", "+            \"\t\t\tMemberType var = new MemberType\\n\"+", "-    String completeBehind = \"new Y\";", "+    String completeBehind = \"new MemberType\";", "-\t\t\"CompletionMemberType.Y[TYPE_REF]{Y, , LCompletionMemberType$Y;, null, null, \"+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_EXACT_NAME+ R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\",", "+\t\t\"CompletionMemberType.MemberType[TYPE_REF]{MemberType, , LCompletionMemberType$MemberType;, null, null, \"+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_EXACT_NAME+ R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2245eb5cecf2d93aeb1fc43205bfefa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test053() throws Exception", "signatureAfterChange": " public void test053() throws Exception", "diff": ["-\t\t\t\"        [pc: 17, line: 7]\\n\" +", "+\t\t\t\"        [pc: 14, line: 7]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 17] local: val index: 1 type: int\\n\"", "+\t\t\t\"        [pc: 3, pc: 14] local: val index: 1 type: int\\n\"", "-\t\t\t\"        [pc: 17, line: 7]\\n\" +", "+\t\t\t\"        [pc: 14, line: 7]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 17] local: val index: 1 type: int\\n\" +", "+\t\t\t\"        [pc: 3, pc: 14] local: val index: 1 type: int\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22edf83af0b8d04839c57f78100e68e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83127f()", "signatureAfterChange": " \tpublic void testBug83127f()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2607ae4dc9411e0c509efbbead8d1cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void testBug429836() throws CoreException", "signatureAfterChange": " public void testBug429836() throws CoreException", "diff": ["-\t\t\"src/b429836/X.java int b429836.X.f1:Lambda(I).foo(int) [x ->] EXACT_MATCH\\n\" +", "-\t\t\"src/b429836/X.java int b429836.X.f2:Lambda(I).foo(int) [(int x) ->] EXACT_MATCH\\n\"+", "-\t\t\"src/b429836/X.java int void b429836.X.main(String[]):Lambda(I).foo(int) [x ->] EXACT_MATCH\\n\"+", "-\t\t\"src/b429836/X.java int void b429836.X.main(String[]):Lambda(I).foo(int) [(int x) ->] EXACT_MATCH\"", "+\t\t\"src/b429836/X.java int b429836.X.f1:<lambda #1>.foo(int) [x ->] EXACT_MATCH\\n\" +", "+\t\t\"src/b429836/X.java int b429836.X.f2:<lambda #1>.foo(int) [(int x) ->] EXACT_MATCH\\n\"+", "+\t\t\"src/b429836/X.java int void b429836.X.main(String[]):<lambda #1>.foo(int) [x ->] EXACT_MATCH\\n\"+", "+\t\t\"src/b429836/X.java int void b429836.X.main(String[]):<lambda #1>.foo(int) [(int x) ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2736272559b8bef5e25d2217af2b34d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "77e59a44eb8dbf245688369fa4e6a37813270ef9", "commitAfterChange": "6bbe71e24e5d5d76445f30e5351f63286e328fac", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testBug400905_0004() throws CoreException", "signatureAfterChange": " public void testBug400905_0004() throws CoreException", "diff": ["-\t\t\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):Lambda(I).foo() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):Lambda(I).foo() [() /* true */->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):Lambda(I).foo() [() /* false */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java java/lang/Object void b400905.X.main(String[]):Lambda(I).foo() [() /* cast */ ->] EXACT_MATCH\"", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):Lambda(I).foo() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):Lambda(I).foo() [() /* true */->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):Lambda(I).foo() [() /* false */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java java.lang.Object void b400905.X.main(String[]):Lambda(I).foo() [() /* cast */ ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2d3570c717df70c281ca191c26d72c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void testBug118311() throws JavaModelException", "signatureAfterChange": " public void testBug118311() throws JavaModelException", "diff": ["-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3daa6dc7e1e938023942c1960147dcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test052()", "signatureAfterChange": " public void test052()", "diff": ["-\t\"----------\\n\" + ", "-\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\"\tpublic abstract void foo();\\n\" + ", "-\t\"\t                     ^^^^^\\n\" + ", "-\t\"The enum X can only define the abstract method foo() if it also defines enum constants with corresponding implementations\\n\" + ", "-\t\"----------\\n\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tA\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method foo()\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3e81cdf2632d5bd660509dccbded4c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testJavadocFieldStringReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldStringReference() throws CoreException", "diff": ["-\t\t\t\t\"annSearchedVar\",", "+\t\t\t\t\"javadocSearchedVar\",", "-\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a56efda437be4a8cecb18747f7d927a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "d16d71303cc38b4ca3466d0f95ab4eeb4eced38a", "commitAfterChange": "04423947d8d7bb07b422b48e36dce13f3a6590fc", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test053() throws Exception", "signatureAfterChange": " public void test053() throws Exception", "diff": ["-\t\t\t\"        [pc: 17, line: 7]\\n\" +", "+\t\t\t\"        [pc: 14, line: 7]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 17] local: val index: 1 type: int\\n\"", "+\t\t\t\"        [pc: 3, pc: 14] local: val index: 1 type: int\\n\"", "-\t\t\t\"        [pc: 17, line: 7]\\n\" +", "+\t\t\t\"        [pc: 14, line: 7]\\n\" +", "-\t\t\t\"        [pc: 3, pc: 17] local: val index: 1 type: int\\n\" +", "+\t\t\t\"        [pc: 3, pc: 14] local: val index: 1 type: int\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6840abb526b485259092814776017a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test027()", "signatureAfterChange": " public void test027()", "diff": ["-\t\t\"     1  anewarray java.lang.Object [4]\\n\" + ", "+\t\t\"     1  anewarray java.lang.Object [3]\\n\" + ", "-\t\t\"    32  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    35  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"    37  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"    32  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    35  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"    37  invokevirtual java.io.PrintStream.println(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7272c2048e67f4ab1211eb167dfd33f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testJavadocMethodArgReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocMethodArgReference() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIMethod method = type.getMethod(\"annSearchedMethod\", new String[] { \"QString;\" });", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIMethod method = type.getMethod(\"javadocSearchedMethod\", new String[] { \"QString;\" });", "-\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedMethod] EXACT_MATCH\",", "+\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedMethod] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76b50a7d55f26877bcbfaa7b6892a60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 306, "signatureBeforeChange": " \tpublic void test0305() throws JavaModelException", "signatureAfterChange": " \tpublic void test0305() throws JavaModelException", "diff": ["-\t\t\t\t(\"package test0304;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "-\t\t\t\t\"class Test {\\r\\n\" + ", "-\t\t\t\t\"\tpublic void foo(int arg) {}\\r\\n\" + ", "+\t\t\t\t(\"package test0304;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"class Test {\\n\" + ", "+\t\t\t\t\"\tpublic void foo(int arg) {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a77f608699dc50899bd03ebae6446eee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<W>) is the same as another method in type Y<V>\\n\" +", "-\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"Erasure of method make(Class<U>) is the same as another method in type Y<V>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a78d18166023d425e95d77db90789ae9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "418e34f57c9f7842d3534af171e657c264f02dd7", "commitAfterChange": "42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 445, "signatureBeforeChange": " public void testBug253896d()", "signatureAfterChange": " public void testBug253896d()", "diff": ["-\t\t\t\"Null pointer access: The variable f1 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable f2 can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Null pointer access: The variable outer can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +", "-\t\t\t\"Potential null pointer access: The variable param may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a830175dd35e19e8c4f63147e9f62d38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85abd9db7c2a5ef30c0af79db8c40b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForField.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test012()", "signatureAfterChange": " \tpublic void test012()", "diff": ["-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8991189f71b966474c0dcf36b54f1f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a900e1aefbb6595ecef87f6c833f4cae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "cbc781423397a753d7a0e29b64da02f9ae05e6ae", "commitAfterChange": "e659592a32935b3480e8554de2e33b0870ea4573", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r public void testDefault07_bin()", "signatureAfterChange": "\r public void testDefault07_bin()", "diff": ["-\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "+\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "-\t\t\"\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "-\t\t\"\t                                    ^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"Null type safety (type annotations): The expression of type \\'int\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null type safety (type annotations): The expression of type \\'Integer\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a959169b756337c4598cd234af2619b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  public void test0087()", "signatureAfterChange": "  public void test0087()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + ", "-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    X o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    X o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa889e9f376d2df5318274b300450290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 582, "methodNumberAfterChange": 582, "signatureBeforeChange": " public void testBug216875h() throws CoreException", "signatureAfterChange": " public void testBug216875h() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abb50be4e5c593ea5e163ef39bf501da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test036()", "signatureAfterChange": " \tpublic void test036()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac09177da6ebaf25b443bb30942c8c48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aca7399ba41852bbf91e020f2078bdb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "166df64b1dde30fc61b2e4fda13d5a0d769a3aef", "commitAfterChange": "cd0e6730218f485335b628feb54a852eb0cb6a2f", "methodNumberBeforeChange": 1286, "methodNumberAfterChange": 1286, "signatureBeforeChange": " public void test1252()", "signatureAfterChange": " public void test1252()", "diff": ["-\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\"\tZork z;\\r\\n\" +", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\tZork z;\\n\" +", "-\t\t\"2. WARNING in X.java (at line 10)\\r\\n\" +", "-\t\t\"\tC<String> c = getB().getC();\\r\\n\" +", "+\t\t\"2. WARNING in X.java (at line 10)\\n\" +", "+\t\t\"\tC<String> c = getB().getC();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad148f4d002d5a00596a868ef35d6b4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003()", "diff": ["-\t\t\t\"     0  getstatic #22 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     3  aload_0\\n\" + ", "-\t\t\t\"     4  invokevirtual #24 <Method A003.bar()I>\\n\" + ", "-\t\t\t\"     7  invokevirtual #30 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [22]\\n\" + ", "+\t\t\t\"     3  aload_0 [this]\\n\" + ", "+\t\t\t\"     4  invokevirtual A003.bar()I [24]\\n\" + ", "+\t\t\t\"     7  invokevirtual java/io/PrintStream.println(I)V [30]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad336fefc33b9b51368afdf10cdd549e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testJavadocConstructorStringReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocConstructorStringReference() throws CoreException", "diff": ["-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched()] POTENTIAL_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched(int)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched()] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched(String)] EXACT_MATCH INSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc426734f6bc84df30a0fec75bae5c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test75460()", "signatureAfterChange": " \tpublic void test75460()", "diff": ["-\t\t\t\t\" * objects[0] = new String(&quot;Hallo Welt !!!&quot;);\" + DELIMITER +", "-\t\t\t\t\" * objects[1] = new String(&quot;Test !!!&quot;);\" + DELIMITER +", "-\t\t\t\t\" * objects[2] = new Integer(&quot;1980&quot;);\" + DELIMITER +", "+\t\t\t\t\" * objects[0] = new String(\\\"Hallo Welt !!!\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[1] = new String(\\\"Test !!!\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[2] = new Integer(\\\"1980\\\");\" + DELIMITER +", "-\t\t\t\t\" * for (int i = 0; i &lt; objs.length; i++) {\" + DELIMITER +", "+\t\t\t\t\" * for (int i = 0; i < objs.length; i++) {\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3ce058ceae56d241987f91c32130f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": " \tpublic void test087()", "signatureAfterChange": " \tpublic void test087()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 11)\\r\\n\" +", "-\t\t\t\"\tCollection<Interface2> doStuff();\\r\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 11)\\n\" +", "+\t\t\t\"\tCollection<Interface2> doStuff();\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 14)\\r\\n\" +", "-\t\t\t\"\tZork z;\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 14)\\n\" +", "+\t\t\t\"\tZork z;\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b12f21d541ada6120737d5fd2b53576d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "2e199be1cb9f53bc00414ea80765129518e12c23", "commitAfterChange": "46bdd6036153580a7889ceb7993a8f8a6300be85", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void test058() throws Exception", "signatureAfterChange": " public void test058() throws Exception", "diff": ["-\t\t\t\"        [pc: 11, line: 6]\\n\" +", "+\t\t\t\"        [pc: 8, line: 6]\\n\" +", "-\t\t\t\"        [pc: 34, line: 9]\\n\" +", "+\t\t\t\"        [pc: 31, line: 9]\\n\" +", "-\t\t\t\"        [pc: 11, line: 6]\\n\" +", "+\t\t\t\"        [pc: 8, line: 6]\\n\" +", "-\t\t\t\"        [pc: 33, line: 9]\\n\" +", "+\t\t\t\"        [pc: 30, line: 9]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b16f3a946eaeb3be02ead8681cb11b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 439, "signatureBeforeChange": " \tpublic void test435()", "signatureAfterChange": " \tpublic void test435()", "diff": ["-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c9d49f96f5052fa4c96c3926debc7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void testBug400905_0004() throws CoreException", "signatureAfterChange": " public void testBug400905_0004() throws CoreException", "diff": ["-\t\t\t\"src/b400905/I.java T b400905.I.foo() [foo] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() /* foo */ ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() /* true */->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() /* false */ ->] EXACT_MATCH\\n\" +", "-\t\t\t\"src/b400905/X.java void b400905.X.main(String[]) [() /* cast */ ->] EXACT_MATCH\"", "+\t\t\t\"src/b400905/I.java T b400905.I.foo() [foo] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):<lambda>#1.lambda$1() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):<lambda>#3.lambda$3() [() /* true */->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java b400905/Y void b400905.X.main(String[]):<lambda>#4.lambda$4() [() /* false */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java java/lang/Object void b400905.X.main(String[]):<lambda>#5.lambda$5() [() /* cast */ ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2da2351463e2ccbeadebec367a5fc92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 582, "methodNumberAfterChange": 582, "signatureBeforeChange": " public void testBug216875h() throws CoreException", "signatureAfterChange": " public void testBug216875h() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo() [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fcfa3e3dac25396d610c892992b814", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b463a311bda9f1c9a0c32959739df6e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": " \tpublic void test0264() throws JavaModelException", "signatureAfterChange": " \tpublic void test0264() throws JavaModelException", "diff": ["-\t\t\t\"{\\r\\n\"+ ", "-\t\t\t\"\t\t\tvoid m(int k){\\r\\n\"+", "-\t\t\t\"\t\t\t\tk= i;\\r\\n\"+", "-\t\t\t\"\t\t\t}\\r\\n\"+", "+\t\t\t\"{\\n\"+ ", "+\t\t\t\"\t\t\tvoid m(int k){\\n\"+", "+\t\t\t\"\t\t\t\tk= i;\\n\"+", "+\t\t\t\"\t\t\t}\\n\"+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b4e85b3f50b1641811b69a707457de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void test031()", "signatureAfterChange": " \tpublic void test031()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b823def43629a52cf2bc977cb5bb4d5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " \tpublic void test076b()", "signatureAfterChange": " \tpublic void test076b()", "diff": ["-\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" +", "-\t\t\t\"\t<T, S extends J & I<T>> void foo() { }\\r\\n\" +", "+\t\t\t\"1. ERROR in A.java (at line 2)\\n\" +", "+\t\t\t\"\t<T, S extends J & I<T>> void foo() { }\\n\" +", "-\t\t\t\"2. ERROR in A.java (at line 3)\\r\\n\" +", "-\t\t\t\"\t<T, S extends I<T> & K> void foo() { }\\r\\n\" +", "+\t\t\t\"2. ERROR in A.java (at line 3)\\n\" +", "+\t\t\t\"\t<T, S extends I<T> & K> void foo() { }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90fe3ca25ea5b9304fe8f26f257c8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testBug400905_0002() throws CoreException", "signatureAfterChange": " public void testBug400905_0002() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [() ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [()  ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [()->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int I b400905.X.bar():Lambda(I).foo() [() ->] EXACT_MATCH\");\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [()  ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [()->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int I b400905.X.bar():<lambda #1>.foo() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b94fdf64df7cc5f4809131e64d9ed140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b995522309503d1431fb1ba679e4b294", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     3  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     3  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void [22]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ec58ab4b34eb5efb213256c19ad6e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic void testBug103304b()", "signatureAfterChange": " \tpublic void testBug103304b()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba688671e1d6f31e977070318b735852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 339, "signatureBeforeChange": " public void test187()", "signatureAfterChange": " public void test187()", "diff": ["-\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"Erasure of method f(List<String>) is the same as another method in type XX\\n\" +", "-\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"Erasure of method f(List<Integer>) is the same as another method in type XX\\n\" +", "-\t\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"Erasure of method f(List<String>) is the same as another method in type XX\\n\" +", "-\t\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"Erasure of method f(List<Integer>) is the same as another method in type XX\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7cb5aec485f69f69207061c62f14dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void test103()", "signatureAfterChange": " public void test103()", "diff": ["-\t\t\"The field A.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.x is not used\\n\" + ", "-\t\t\"The field A.B.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.B.x is not used\\n\" + ", "-\t\t\"The field A.B.c is never read locally\\n\" + ", "+\t\t\"The value of the field A.B.c is not used\\n\" + ", "-\t\t\"The field A.C.x is never read locally\\n\" + ", "+\t\t\"The value of the field A.C.x is not used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0c19910973c4c8aed12f2518ca9062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test001()", "signatureAfterChange": " \tpublic void test001()", "diff": ["-\t\t\t\"     0  new #21 A001$1$A\\n\" + ", "+\t\t\t\"     0  new A001$1$A [21]\\n\" + ", "-\t\t\t\"     4  aload_0\\n\" + ", "-\t\t\t\"     5  invokespecial #24 <Method A001$1$A.<init>(LA001;)V>\\n\" + ", "-\t\t\t\"     8  invokevirtual #27 <Method A001$1$A.get()I>\\n\" + ", "+\t\t\t\"     4  aload_0 [this]\\n\" + ", "+\t\t\t\"     5  invokespecial A001$1$A.<init>(LA001;)V [24]\\n\" + ", "+\t\t\t\"     8  invokevirtual A001$1$A.get()I [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc9eb55c377b0bddeffc4a86e4850a06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 329, "methodNumberAfterChange": 329, "signatureBeforeChange": " \tpublic void test325()", "signatureAfterChange": " \tpublic void test325()", "diff": ["-\t\t\t\"Type safety: X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "+\t\t\t\"X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "+\t\t\t\"X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "+\t\t\t\"X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + ", "+\t\t\t\"X.Item is a raw type. References to generic type X<T>.Item<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd818023524a67cab283710f948ecb2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void testTypeRefAll_Variable() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Variable() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\ufffd|Object|\ufffd o;@209] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t\ufffd|Types|\ufffd t;@221] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\t\ufffd|Object|\ufffd obj = new Types();@502] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\t\ufffd|Types|\ufffd local = (Types) obj;@530] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t!|Object|! o;@209] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.{} [\t\t!|Types|! t;@221] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\t!|Object|! obj = new Types();@502] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\t!|Types|! local = (Types) obj;@530] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea268db1af50b519875bf2a80ddb2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " public void test138()", "signatureAfterChange": " public void test138()", "diff": ["- this.runNegativeTest(", "-     new String[] {", "-    \t    \"X.java\",", "- \t\t\t\"public enum X {\\n\" +", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public enum X {\\n\" +", "-     },", "-\t\"----------\\n\" +", "-\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\"\tdouble eval(double x, double y) {\\n\" +", "-\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\"The method eval(double, double) of type new X(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "-\t\"----------\\n\" +", "-\t\"2. ERROR in X.java (at line 9)\\n\" +", "-\t\"\tabstract double eval(double x, double y);\\n\" +", "-\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\"The abstract method eval in type new X(){} can only be defined by an abstract class\\n\" +", "-\t\"----------\\n\");", "+\t\t },", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "+\t\t\"\tdouble eval(double x, double y) {\\n\" +", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"The method eval(double, double) of type new X(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tMINUS {\\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"The enum constant MINUS cannot define abstract methods\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf82f243499ee21a70a9f32597979cc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_RAW_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06ca9bd54f8c9c2a6091c76df27a440", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void test054c()", "signatureAfterChange": " \tpublic void test054c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18e419234bdb977e30fa609dc858fec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1cb3ed20c3ca5f0076f7395f3911190", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [generic(new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [generic(new RuntimeException())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [generic(new Object())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [generic(new RuntimeException())] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ef1f9f27f5dc1ea2e7d799ed32b99b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 578, "methodNumberAfterChange": 577, "signatureBeforeChange": " public void testBug247564i_3()", "signatureAfterChange": " public void testBug247564i_3()", "diff": ["-\t\t\t\"   static Object xinnerfield;\\n\" +", "-\t\t\t\"   XInner getXInner() { return new XInner();\\n}\" +", "-\t\t\t\"   void goo(Object var) {\\n\" +", "+\t\t\t\"    static Object xinnerfield;\\n\" +", "+\t\t\t\"    XInner getXInner() { return new XInner();\\n}\" +", "+\t\t\t\"    void goo(Object var) {\\n\" +", "-\t\t\t\"   }\\n\" +", "+\t\t\t\"    }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2564c7fd57d8fbb127f603f67ada930", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testFieldRef() throws CoreException", "signatureAfterChange": " public void testFieldRef() throws CoreException", "diff": ["-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\treturn super.\ufffd|field|\ufffd == null ||@129] EXACT_MATCH\\n\" +", "-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tparam.\ufffd|field|\ufffd == null ||@155] EXACT_MATCH\\n\" +", "-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tthis.\ufffd|field|\ufffd == null ||@180] EXACT_MATCH\\n\" +", "-\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\t\ufffd|field|\ufffd == null;@200] EXACT_MATCH\"", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\treturn super.!|field|! == null ||@129] EXACT_MATCH\\n\" +", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tparam.!|field|! == null ||@155] EXACT_MATCH\\n\" +", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\tthis.!|field|! == null ||@180] EXACT_MATCH\\n\" +", "+\t\t\"src/field/ref/TestFields.java boolean field.ref.TestFields.foo(Fields) [\t\t\t!|field|! == null;@200] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c281bbd968e42e4e4ac2b0c6a2b65824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 405, "signatureBeforeChange": " public void testBug317719f() throws Exception", "signatureAfterChange": " public void testBug317719f() throws Exception", "diff": ["-\t\t\t\"Method forAccountSet(List) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method forAccountSet(List) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method forAccountSet(List<R>) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method forAccountSet(List<R>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method forAccountSet(List) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method forAccountSet(List) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method forAccountSet(List<R>) has the same erasure forAccountSet(List<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method forAccountSet(List<R>) is the same as another method in type X<Z>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d0b0c4c0b6a37c80cda7c8a71aca5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test006() throws CoreException", "signatureAfterChange": " public void test006() throws CoreException", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in /P2/src/p/Y.java (at line 3)\\n\" +", "-\t\t\t\"\tX x1;\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"Access restriction: The type X<T> is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>();\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"Access restriction: The type X<String> is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>();\\n\" +", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The constructor X<String>() is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>();\\n\" +", "-\t\t\t\"\t                   ^\\n\" +", "-\t\t\t\"Access restriction: The type X<String> is not accessible due to restriction on required project P1\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in /P2/src/p/Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tX x1;\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<T>\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<String>\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>();\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The constructor \\'X<String>()\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>();\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<String>\\' is not API (restriction on required project \\'P1\\')\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31a1f4fafd6b4d1b1add52d3d2c1bc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void testBug400905_0004() throws CoreException", "signatureAfterChange": " public void testBug400905_0004() throws CoreException", "diff": ["-\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):Lambda(I).foo() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):Lambda(I).foo() [() /* true */->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):Lambda(I).foo() [() /* false */ ->] EXACT_MATCH\\n\" + ", "-\t\t\t\t\t\"src/b400905/X.java java.lang.Object void b400905.X.main(String[]):Lambda(I).foo() [() /* cast */ ->] EXACT_MATCH\"", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [() /* foo */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [() /* true */->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java b400905.Y void b400905.X.main(String[]):<lambda #1>.foo() [() /* false */ ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\t\"src/b400905/X.java java.lang.Object void b400905.X.main(String[]):<lambda #1>.foo() [() /* cast */ ->] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c410d17e50e2f55a268bd4859d6b1739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "c31638f6cd55bea1ea7e27125e08c7e9386bc232", "commitAfterChange": "00b511bb4fad31ac75b2fe3de8d28972b46db212", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  private static String buildProfileString()", "signatureAfterChange": "  private static String buildProfileString()", "diff": ["-\t\t\tseparator = \", \";", "+\t\t\tseparator = \",\";", "-\t\t\tseparator = \", \";", "+\t\t\tseparator = \",\";", "-\t\t\tseparator = \", \";", "+\t\t\tseparator = \",\";", "-\t\t\tseparator = \", \";", "+\t\t\tseparator = \",\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b85c4bf8d11800686982ba9888417f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 1000, "methodNumberAfterChange": 1000, "signatureBeforeChange": " public void testBug351444e() throws JavaModelException", "signatureAfterChange": " public void testBug351444e() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (LNumber;)V, TXYU, (t), 57}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 57}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 57}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 57}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (LNumber;)V, TXYU, (t), 60}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 60}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 60}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 60}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7028204404aefad4f161b3887f7f68c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": " \tpublic void test050i()", "signatureAfterChange": " \tpublic void test050i()", "diff": ["-\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<Number>) is the same as another method in type X\\n\" +", "-\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"Erasure of method b(A<String>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71e39756d457bede07148dd806f7394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic void test042() throws CoreException", "signatureAfterChange": " \tpublic void test042() throws CoreException", "diff": ["-\t\t\t\t\t\"LX;^1\",", "-\t\t\t\t\t\"LX;.field^0\"", "+\t\t\t\t\t\"LX;\",", "+\t\t\t\t\t\"LX;.field\"", "-\t\t\t\t\"LX;^1\\n\" + ", "-\t\t\t\t\"LX;.field^0\",", "+\t\t\t\t\"LX;\\n\" + ", "+\t\t\t\t\"LX;.field\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7c65fc9f31aac6116fe78881a8aa820", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void test0054()", "signatureAfterChange": " public void test0054()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + ", "-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7ff2c7c77c8640ff15c883b864aa362", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 405, "signatureBeforeChange": " public void testBug317719e() throws Exception", "signatureAfterChange": " public void testBug317719e() throws Exception", "diff": ["-\t\t\t\"Method getFirst(ArrayList<String>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getFirst(ArrayList<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method getFirst(ArrayList<Integer>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getFirst(ArrayList<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getFirst(ArrayList<String>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getFirst(ArrayList<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getFirst(ArrayList<Integer>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getFirst(ArrayList<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86e2a0a3dd80a303ca5a78a4a88291c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_RAW_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c93a90d26a834de168ceefd2dd5d9ce5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestMixed.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic void test013()", "signatureAfterChange": " \t \tpublic void test013()", "diff": ["-\t\t\t\t\t+ \"\tpublic void foo() {\\n\"", "+\t\t\t\t\t+ \"\tpublic void foo(int a) {\\n\"", "-\t\t\t\t+ \"\tpublic void foo() {\\n\"", "-\t\t\t\t+ \"\t            ^^^\\n\"", "-\t\t\t\t+ \"Annotation: Missing javadoc for public member in API class or interface\\n\"", "+\t\t\t\t+ \"\tpublic void foo(int a) {\\n\"", "+\t\t\t\t+ \"\t            ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Annotation: Missing javadoc comment for public declaration\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c971ba8661ac24b4fef0d91f5bb48468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternMultipleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [generic(new Object(), new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [generic(new Object(), new RuntimeException(), new IllegalMonitorStateException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.test() [generic(new Object(), new Exception(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testExtends() [generic(new Object(), new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefMultiple.java void g5.m.ref.RefMultiple.testSuper() [generic(new Object(), new RuntimeException(), new IllegalMonitorStateException())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testMultiple() [generic(new Object(), new Exception(), new RuntimeException())] EXACT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9883df05dbbae45290e4ba707f7d73c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 577, "methodNumberAfterChange": 578, "signatureBeforeChange": " public void testBug247564i_3()", "signatureAfterChange": " public void testBug247564i_3()", "diff": ["-\t\t\t\"    static Object xinnerfield;\\n\" +", "-\t\t\t\"    XInner getXInner() { return new XInner();\\n}\" +", "-\t\t\t\"    void goo(Object var) {\\n\" +", "+\t\t\t\"   static Object xinnerfield;\\n\" +", "+\t\t\t\"   XInner getXInner() { return new XInner();\\n}\" +", "+\t\t\t\"   void goo(Object var) {\\n\" +", "-\t\t\t\"    }\\n\" +", "+\t\t\t\"   }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9b1266bc8a238eadc27f3afac166a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AnnotationDietRecoveryTest.java", "commitBeforeChange": "02c268a4d3cda9d82648fb2a27d6f6a49334a9c9", "commitAfterChange": "445188c88d04c21eb75ec390fedf8ca63140d7dd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"@interface MyAnn {\\n\" + ", "+\t\t\"@Documented @Rentention(RententionPolicy.RUNTIME) @Target(ElementType.TYPE) @interface MyAnn {\\n\" + ", "-\t\t\"  public void something() {\\n\" + ", "+\t\t\"  public @MyAnn void something() {\\n\" + ", "-\t\t\"@interface MyAnn {\\n\" + ", "+\t\t\"@Documented @Rentention(RententionPolicy.RUNTIME) @Target(ElementType.TYPE) @interface MyAnn {\\n\" + ", "-\t\t\"  public void something() {\\n\" + ", "+\t\t\"  public @MyAnn void something() {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f51da04cd1206c3ef9a4daaabf0ffd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void test027()", "signatureAfterChange": " public void test027()", "diff": ["-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 20] local: this index: 0 type: LX;\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 20] local: b index: 1 type: Z\\n\" + ", "-\t\t\t\"        [pc: 6, pc: 9] local: i index: 2 type: I\\n\" + ", "-\t\t\t\"        [pc: 10, pc: 14] local: e index: 2 type: Ljava/lang/Exception;\\n\";", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 20] local: this index: 0 type: X\\n\" + ", "+\t\t\"        [pc: 0, pc: 20] local: b index: 1 type: boolean\\n\" + ", "+\t\t\"        [pc: 6, pc: 9] local: i index: 2 type: int\\n\" + ", "+\t\t\"        [pc: 10, pc: 14] local: e index: 2 type: java.lang.Exception\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb61caf9132e460114251e20e45233a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Return() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Return() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t\ufffd|type.def.Types|\ufffd method(type.def.Types param) throws type.def.Types {@504] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\t\ufffd|type.def.Bug|\ufffd bar(type.def.Bug bug) {@676] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Bug.java int type.def.Bug.num() [\t\ufffd|int|\ufffd num() default 0;@43] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Bug.java String type.def.Bug.comment() [\t\ufffd|String|\ufffd comment() default \\\"\\\";@65] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t!|type.def.Types|! method(type.def.Types param) throws type.def.Types {@504] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Bug all.types.ref.TestTypes.bar(type.def.Bug) [\t!|type.def.Bug|! bar(type.def.Bug bug) {@676] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Bug.java int type.def.Bug.num() [\t!|int|! num() default 0;@43] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Bug.java String type.def.Bug.comment() [\t!|String|! comment() default \\\"\\\";@65] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb7079ad5a44feab057652e890605f50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 404, "methodNumberAfterChange": 404, "signatureBeforeChange": " public void testBug317719e() throws Exception", "signatureAfterChange": " public void testBug317719e() throws Exception", "diff": ["-\t\t\t\"Method getFirst(ArrayList<String>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getFirst(ArrayList<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method getFirst(ArrayList<Integer>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method getFirst(ArrayList<Integer>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getFirst(ArrayList<String>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getFirst(ArrayList<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method getFirst(ArrayList<Integer>) has the same erasure getFirst(ArrayList<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method getFirst(ArrayList<Integer>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccbc109919f6eb00aeb2816b53b5a9b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void testBug372011()", "signatureAfterChange": " public void testBug372011()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccc3662bad6ce4607db1c91ec25de1f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void testMethodRef() throws CoreException", "signatureAfterChange": " public void testMethodRef() throws CoreException", "diff": ["-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tsuper.\ufffd|method()|\ufffd;@121] EXACT_MATCH\\n\" +", "-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tparam.\ufffd|method()|\ufffd;@139] EXACT_MATCH\\n\" +", "-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tthis.\ufffd|method()|\ufffd;@156] EXACT_MATCH\\n\" +", "-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\t\ufffd|method()|\ufffd;@168] EXACT_MATCH\"", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tsuper.!|method()|!;@121] EXACT_MATCH\\n\" +", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tparam.!|method()|!;@139] EXACT_MATCH\\n\" +", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tthis.!|method()|!;@156] EXACT_MATCH\\n\" +", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\t!|method()|!;@168] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdbe9e3fc1ee118e360beb0300e6f9ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testBug96237_Public06()", "signatureAfterChange": " \tpublic void testBug96237_Public06()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d01f948f9a4360d7761994dc5b18d0d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "c86229e56d86bc6c43c864b0c2be3c639790cc44", "commitAfterChange": "886274eeca44ac156a0ab29fb479330630b97083", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic void testBug68017negative()", "signatureAfterChange": " \tpublic void testBug68017negative()", "diff": ["-\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\t/**@return*/\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\t\"\t/**@return        */\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\t\"\t/**@return****/\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\t\t\"\t*\t@return\\n\" + ", "-\t\t\t\t\"\t \t ^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Missing return type description\\n\" + ", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t/**@return*/\\n\" + ", "+\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Description expected after @return\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t/**@return        */\\n\" + ", "+\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Description expected after @return\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t/**@return****/\\n\" + ", "+\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Description expected after @return\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\t*\t@return\\n\" + ", "+\t\t\t\"\t \t ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Description expected after @return\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d99e8061d4a59f82e6752bf20436c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 999, "methodNumberAfterChange": 999, "signatureBeforeChange": " public void testBug351444d() throws JavaModelException", "signatureAfterChange": " public void testBug351444d() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (LNumber;)V, TXYU, (t), 57}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 57}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 57}\\n\" +", "-\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 57}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (LNumber;)V, TXYU, (t), 60}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 60}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.TXYU<LNumber;>;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 60}\\n\" +", "+\t\t\t\t\"   TXYU[TYPE_REF]{TXYU, test, Ltest.TXYU;, null, null, 60}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ef4438eaa3cb7b6479b54c3eea6c37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2536660ea0d5131ef9e69af5efc0d93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test066()", "signatureAfterChange": " public void test066()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tZork z = null;\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tZork z = null;\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\"\t} catch(Zork z) {\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\t} catch(Zork z) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d26fe123cc6e045585cae3c0ff45ec81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java", "commitBeforeChange": "85d19e94c6786b901347844edd06d2143d6f8b15", "commitAfterChange": "6e01d0463dc316632e5c9b078194cc4ac5d3dd14", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\t\"\t                                                 ^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from int to List<String>\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to List<String>\\n\" + ", "-\t\t\t\"\t                          ^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from int to List<String>\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to List<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30e8957feb4ea026a6123b19fcd1781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest2.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void test0051()", "signatureAfterChange": " public void test0051()", "diff": ["-\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\tString expectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"      new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"      new X[]{<CompleteOnName:zzz>};\\n\" + ", "-\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>,}\";", "+\texpectedParentNodeToString = \"new X[]{<CompleteOnName:zzz>}\";", "-\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>,};\\n\" + ", "+\t\t\"    Object[] o = new X[]{<CompleteOnName:zzz>};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d31b88a317e8af07db2cdd25b8c360d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\t\t\"     0  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     3  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     3  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33509c54c688c8803c6eee092f60da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "a331916366d31b2eac24fa72c43e85436f424bb2", "commitAfterChange": "92833c2313d3c570c2dffa40d03aa84d01695a1a", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void test060()", "signatureAfterChange": " \tpublic void test060()", "diff": ["-\t\t\t\t\"        Zork z;\\n\" +", "+\t\t\t\t\"        throw new Exception();\\n\" + // fake error to cause dump of unused import warnings", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"\tthrow new Exception();\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unhandled exception type Exception\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d410ad94c55a50e2a94bdcd9147884a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " public void testBug294500a()", "signatureAfterChange": " public void testBug294500a()", "diff": ["-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42ed5d66726503d2ff7e3b4c9064826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "939026bc82336aff64b71f4dbbdc38f50f6da545", "commitAfterChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \t\tpublic void test024()", "signatureAfterChange": " \t\tpublic void test024()", "diff": ["-\t\t\t\t\t\t\"  sun.net.spi.nameservice.dns.DNSNameService dummy;\\n\" + ", "+\t\t\t\t\t\t\"  my.pkg.Zork dummy;\\n\" + ", "-\t\t        \"\tsun.net.spi.nameservice.dns.DNSNameService dummy;\\n\" + ", "-\t\t        \"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t        \"sun.net.spi.nameservice.dns cannot be resolved to a type\\n\" + ", "+\t\t        \"\tmy.pkg.Zork dummy;\\n\" + ", "+\t\t        \"\t^^\\n\" + ", "+\t\t        \"my cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4c8f0fb57b59ea29be762df0d8b204a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void test017()", "signatureAfterChange": " \tpublic void test017()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d50cf319ec579fc6755567d94261e27b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void test008()", "signatureAfterChange": "  \tpublic void test008()", "diff": ["-\t\t\t\"Inexact argument for the vararg constructor Y(boolean, Object[])\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs constructor Y(boolean, Object...). Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the vararg constructor Y(char, int[][])\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs constructor Y(char, int[]...). Argument should be casted to int[][] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the vararg constructor Y(boolean, Object[])\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs constructor Y(boolean, Object...). Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the vararg constructor Y(char, int[][])\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs constructor Y(char, int[]...). Argument should be casted to int[][] to disambiguate, since it is passed as is\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5d6d4469eaa4d9b8735c5805ff961cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testBug52216b()", "signatureAfterChange": " \tpublic void testBug52216b()", "diff": ["-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\t\"\t                                                                            ^^^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected text\\n\" + ", "-\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Javadoc: Invalid reference\\n\" + ", "+\t\t\t\t\"\t                    ^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Unexpected text\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ee0e93fd1b899e334c339396a410ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " public void testBug294500a()", "signatureAfterChange": " public void testBug294500a()", "diff": ["-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + ", "-\t\t\" * \\n\" + ", "+\t\t\" *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7bf28b52569e33fc5992398694e1ca5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test007() throws CoreException", "signatureAfterChange": " public void test007() throws CoreException", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in /P2/src/p/Y.java (at line 3)\\n\" +", "-\t\t\t\"\tX x1;\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"Access restriction: The type X<T> is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"Access restriction: The type X<String> is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" +", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The constructor X<String>(String) is not accessible due to restriction on required project P1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in /P2/src/p/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" +", "-\t\t\t\"\t                   ^\\n\" +", "-\t\t\t\"Access restriction: The type X<String> is not accessible due to restriction on required project P1\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in /P2/src/p/Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tX x1;\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<T>\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<String>\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The constructor \\'X<String>(String)\\' is not API (restriction on required project \\'P1\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in /P2/src/p/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tX<String> x2 = new X<String>(\\\"\\\");\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X<String>\\' is not API (restriction on required project \\'P1\\')\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c122ae631b8f400f8ee567d6eff006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 123, "signatureBeforeChange": " public void testBug435187()", "signatureAfterChange": " public void testBug435187()", "diff": ["-\t\t\"1. ERROR in ExtractLocalLambda.java (at line 22)\\n\" + ", "-\t\t\"\t).collect(groupingBy);\\n\" + ", "-\t\t\"\t  ^^^^^^^\\n\" + ", "-\t\t\"The method collect(Collector<? super Object,A,R>) in the type Stream<Object> is not applicable for the arguments (Collector<Map.Entry<String,String>,capture#1-of ?,Map<String,List<String>>>)\\n\" + ", "+\t\t\"1. WARNING in ExtractLocalLambda.java (at line 5)\\n\" + ", "+\t\t\"\timport java.util.function.Function;\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The import java.util.function.Function is never used\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f83f1c6822f103fbfcf294d63ace56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic void test062()", "signatureAfterChange": " \t \tpublic void test062()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  getstatic #31 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     5  iload_0\\n\" + ", "-\t\t\t\"     6  invokevirtual #37 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  getstatic java/lang/System.out Ljava/io/PrintStream; [31]\\n\" + ", "+\t\t\t\"     5  iload_0 [i]\\n\" + ", "+\t\t\t\"     6  invokevirtual java/io/PrintStream.println(I)V [37]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90ba05f56ab6dd859897bd282b0c5cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocPackageCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void test006() throws JavaModelException", "signatureAfterChange": "  public void test006() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d91151abf664e0765c2ebc38adfb796d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testBug83127e()", "signatureAfterChange": " \tpublic void testBug83127e()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97f7c8bc6c8035531b4dd8ce2e649b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "commitAfterChange": "e58a2ebf19f99fca487e8ddd26a3dd844cc59501", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": "\r public void testBug456487b()", "signatureAfterChange": "\r public void testBug456487b()", "diff": ["-\t\t\"Contradictory null annotations: method was inferred as \\'void <init>(@NonNull @Nullable T)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'void <init>(@Nullable @NonNull T)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String get()\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull String get()\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String orElse(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull String orElse(@Nullable @NonNull String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "-\t\t\"Contradictory null annotations: method was inferred as \\'@NonNull @Nullable String orElse(@NonNull @Nullable String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r", "+\t\t\"Contradictory null annotations: method was inferred as \\'@Nullable @NonNull String orElse(@Nullable @NonNull String)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da03329726357143ea81af727a100ca8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test036()", "signatureAfterChange": " \tpublic void test036()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da43ebd8bc8b8f3914fedf3fa5225d32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "abd031a3c5b0ee276f6122fb655251f21f77f5e6", "commitAfterChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " public void test193()", "signatureAfterChange": " public void test193()", "diff": ["-\t\t\"Cycle detected: a cycle exists in between annotation attributes of A and B\\n\" + ", "+\t\t\"Cycle detected: a cycle exists between annotation attributes of A and B\\n\" + ", "-\t\t\"Cycle detected: a cycle exists in between annotation attributes of B and A\\n\" + ", "+\t\t\"Cycle detected: a cycle exists between annotation attributes of B and A\\n\" + ", "-\t\t\"Cycle detected: a cycle exists in between annotation attributes of A and B\\n\" + ", "+\t\t\"Cycle detected: a cycle exists between annotation attributes of A and B\\n\" + ", "-\t\t\"Cycle detected: a cycle exists in between annotation attributes of B and A\\n\" + ", "+\t\t\"Cycle detected: a cycle exists between annotation attributes of B and A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da4b12fcbdc08b966bf8b3ab0085821f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": " public void testBug317719b() throws Exception", "signatureAfterChange": " public void testBug317719b() throws Exception", "diff": ["-\t\t\t\"Method doIt(List<String>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method doIt(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method doIt(List<CharSequence>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method doIt(List<CharSequence>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method doIt(List<String>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(List<String>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method doIt(List<CharSequence>) has the same erasure doIt(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(List<CharSequence>) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da9ae7d07f7795b11bf735e27206271e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void test020()", "signatureAfterChange": " \tpublic void test020()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbe7380a504a9219a0a09e33aec8d2fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc2e40d6522251d2efadf9c37b272fb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void testBug96237_Public06()", "signatureAfterChange": " \tpublic void testBug96237_Public06()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd931a6c798c902c9cc51910ccdc7175", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de2978985bc79a7cb2653e85b065948a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void test105()", "signatureAfterChange": " public void test105()", "diff": ["-\t\t\"\t\t\tnew int[]{0,0},\\n\" +", "-\t\t\"\t\t\tnew int[]{0,0}\\n\" +", "+\t\t\"\t\t\tnew int[]{0, 0},\\n\" +", "+\t\t\"\t\t\tnew int[]{0, 0}\\n\" +", "-\t\t\"  static int B = foo(new int[]{0,0,} , new int[]{0,0,});\\n\" +", "+\t\t\"  static int B = foo(new int[]{0, 0}, new int[]{0, 0});\\n\" +", "-\t\t\"  static int B = foo(new int[]{0,0,} , new int[]{0,0,});\\n\" +", "+\t\t\"  static int B = foo(new int[]{0, 0}, new int[]{0, 0});\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de6d3e3f3613095e43eb655229a5250e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void testBug405125a() throws JavaModelException", "signatureAfterChange": " public void testBug405125a() throws JavaModelException", "diff": ["-\t\t\t\t\"\tstatic Foo f = (int x5, int x2) -> tw\\n\" +", "+\t\t\t\t\"\tstatic Foo f = (int x5, int x2) -> bar\\n\" +", "-\t\t\t\t\"  \tstatic int two () { return 2; }\\n\" +", "+\t\t\t\t\"  \tstatic int bars () { return 2; }\\n\" +", "-\t    String completeBehind = \"(int x5, int x2) -> tw\";", "+\t    String completeBehind = \"(int x5, int x2) -> bar\";", "-\t    \t\"two[METHOD_REF]{two(), LB;, ()I, two, null, 27}\",", "+\t    \t\"bars[METHOD_REF]{bars(), LB;, ()I, bars, null, 27}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de748482b7829f984490d68840ac00ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void testTypeRefAll_Return() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Return() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t\ufffd|Types|\ufffd method(Types param) throws Types {@459] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\t\ufffd|Bug|\ufffd bar(Bug bug) {@577] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Bug.java int type.def.Bug.num() [\t\ufffd|int|\ufffd num() default 0;@43] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Bug.java String type.def.Bug.comment() [\t\ufffd|String|\ufffd comment() default \\\"\\\";@65] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t!|Types|! method(Types param) throws Types {@459] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Bug all.types.ref.TestTypes.bar(Bug) [\t!|Bug|! bar(Bug bug) {@577] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Bug.java int type.def.Bug.num() [\t!|int|! num() default 0;@43] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Bug.java String type.def.Bug.comment() [\t!|String|! comment() default \\\"\\\";@65] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "debd57f13476d69efc482af11b249b6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test015()", "signatureAfterChange": " \tpublic void test015()", "diff": ["-\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    13  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 17] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 17] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df15a6b259a9069bfbf44e5189cd8b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void testBug103304b()", "signatureAfterChange": " \tpublic void testBug103304b()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfa063cf5ef6625c2bbeb77e23b341f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03af96fc90d85c54632c3811a8b452e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments06() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternMultipleParamArguments06() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Object(), new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm, new Object(), new Throwable(), new Exception())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(gm)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testMultiple() [new Multiple(new Object(), new Throwable(), new Exception(), gm)] EQUIVALENT_RAW_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e08b97a16f1732a7dd0c2c43341b0c22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \t \tpublic void test066()", "signatureAfterChange": " \t \tpublic void test066()", "diff": ["-\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "-\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + ", "+\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1692ecf2e241f567aeaf7f5817aa052", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "6616b103b53af13bafcc8a32713ca6371865f9c4", "commitAfterChange": "fcd90e4a2f5e40578ea3ad28461a3e5ea180ab4e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  private SimpleLookupTable findDeltas()", "signatureAfterChange": "  private SimpleLookupTable findDeltas()", "diff": ["-\t\t\t\tSystem.out.println(\"Found source delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"JavaBuilder: Found source delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Missing delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Missing delta for: \" + this.currentProject.getName()); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(\"Found binary delta for: \" + p.getName()); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(\"JavaBuilder: Found binary delta for: \" + p.getName()); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(\"Missing delta for: \" + p.getName());\t //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(\"JavaBuilder: Missing delta for: \" + p.getName());\t //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a10d8af0ec659746c33d00054cfb01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28473fc433e9a69828c5c4dabe8a29b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testBug96237_Public06()", "signatureAfterChange": " \tpublic void testBug96237_Public06()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37825d1f79830942f6aabf083f455c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java", "commitBeforeChange": "ab96412d63e51e1fd7275237e383b745dfdb6660", "commitAfterChange": "6c93454b53b8cade02b039f5b47262ed740faf4c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testAnonymousType4() throws CoreException", "signatureAfterChange": " \tpublic void testAnonymousType4() throws CoreException", "diff": ["-\t\t\t\t\"    initializer\\n\" + ", "-\t\t\t\t\"      class <anonymous>\\n\" + ", "+\t\t\t\t\"    <initializer #1>\\n\" + ", "+\t\t\t\t\"      class <anonymous #1>\\n\" + ", "-\t\t\t\t\"      class <anonymous>\\n\" + ", "+\t\t\t\t\"      class <anonymous #1>\\n\" + ", "-\t\t\t\t\"      class <anonymous>\\n\" + ", "+\t\t\t\t\"      class <anonymous #1>\\n\" + ", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e675d0d1f6786d47a34a1d4e6353dbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 92, "signatureBeforeChange": "  \tpublic void test127()", "signatureAfterChange": "  \tpublic void test127()", "diff": ["-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7a4896213750fca9a47e30fa4e4a43b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void testMethodRef_AllFlags() throws CoreException", "signatureAfterChange": " public void testMethodRef_AllFlags() throws CoreException", "diff": ["-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tsuper.\ufffd|method()|\ufffd;@121] EXACT_MATCH\\n\" +", "-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tparam.\ufffd|method()|\ufffd;@139] EXACT_MATCH\\n\" +", "-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tthis.\ufffd|method()|\ufffd;@156] EXACT_MATCH\\n\" +", "-\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\t\ufffd|method()|\ufffd;@168] EXACT_MATCH\"", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tsuper.!|method()|!;@121] EXACT_MATCH\\n\" +", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tparam.!|method()|!;@139] EXACT_MATCH\\n\" +", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\tthis.!|method()|!;@156] EXACT_MATCH\\n\" +", "+\t\t\"src/meth/ref/TestMethods.java void meth.ref.TestMethods.foo(Methods) [\t\t!|method()|!;@168] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea36ed512f175b08c889414c619045d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void testBug209936_MemberFullyQualifiedSingleReference()", "signatureAfterChange": "  \tpublic void testBug209936_MemberFullyQualifiedSingleReference()", "diff": ["-\t\t\t\t\"\t\t\t \t\t * @see A.A1.A2.A3.A4#foo(Object)\\n\" +", "-\t\t\t\t\"\t\t\t \t\t * @see A.A1.A2.A3.A4#foo(R)\\n\" +", "+\t\t\t\t\"\t\t\t \t\t * @see p1.A.A1.A2.A3.A4#foo(Object)\\n\" +", "+\t\t\t\t\"\t\t\t \t\t * @see p1.A.A1.A2.A3.A4#foo(R)\\n\" +", "-\t\t\t\"\t* @see A.A1.A2.A3.A4#foo(R)\\r\\n\" +", "-\t\t\t\"\t                     ^^^\\n\" +", "+\t\t\t\"\t* @see p1.A.A1.A2.A3.A4#foo(R)\\r\\n\" +", "+\t\t\t\"\t                        ^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea70cf558ad46c6997fb18f77920d33f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 581, "methodNumberAfterChange": 581, "signatureBeforeChange": " public void testBug216875g() throws CoreException", "signatureAfterChange": " public void testBug216875g() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] WRITE ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd.field = t1.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt1.field = \ufffd|t1|\ufffd.field;] READ ACCESS\\n\" +", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\tt2.field = \ufffd|t1|\ufffd.field;] READ ACCESS\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9e2de0a6cf025abb7ffad4bbe6e871", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug47968field() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968field() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [x] EXACT_MATCH\\n\" + // This match was not found before...", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [x] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [x] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [x] EXACT_MATCH\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [x] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [x] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [x] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [x] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec191de92e80641aae6c53f79874324f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testJavadocFieldDeclarationWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldDeclarationWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIField field = type.getField(\"annSearchedVar\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIField field = type.getField(\"javadocSearchedVar\");", "-\t\t\t\t\t\"src/j1/AnnSearched.java j1.AnnSearched.annSearchedVar [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocSearched.java j1.JavadocSearched.javadocSearchedVar [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec5a727c748aedbb760f8cb189d91d3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug47968constructor() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968constructor() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + // This match was not found before...", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6594150b38814203595a8167252ec4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void testTypeRefGenericsTest09_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest09_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test09/Test.java test09.Test.x [\tX<? extends \ufffd|Exception|\ufffd> x; @49] EXACT_MATCH\\n\" +", "-\t\t\"src/test09/Test.java test09.Test.y [\tY<? extends \ufffd|Object|\ufffd, ? super String, ? extends Exception> y; @77] EXACT_MATCH\\n\" +", "-\t\t\"src/test09/Test.java test09.Test.y [\tY<? extends Object, ? super \ufffd|String|\ufffd, ? extends Exception> y; @93] EXACT_MATCH\\n\" +", "-\t\t\"src/test09/Test.java test09.Test.y [\tY<? extends Object, ? super String, ? extends \ufffd|Exception|\ufffd> y; @111] EXACT_MATCH\"", "+\t\t\"src/test09/Test.java test09.Test.x [\tX<? extends !|Exception|!> x; @49] EXACT_MATCH\\n\" +", "+\t\t\"src/test09/Test.java test09.Test.y [\tY<? extends !|Object|!, ? super String, ? extends Exception> y; @77] EXACT_MATCH\\n\" +", "+\t\t\"src/test09/Test.java test09.Test.y [\tY<? extends Object, ? super !|String|!, ? extends Exception> y; @93] EXACT_MATCH\\n\" +", "+\t\t\"src/test09/Test.java test09.Test.y [\tY<? extends Object, ? super String, ? extends !|Exception|!> y; @111] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee64af5fae0c54d4e3aa65a74161b6f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "98ef2023c1555c55d1d5f30d49ca5e0fe4a5637e", "commitAfterChange": "5e1853176b39914c72e5ae320d60681d91f16d56", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test0060() throws JavaModelException", "signatureAfterChange": " \tpublic void test0060() throws JavaModelException", "diff": ["-\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V\\n\" + ", "-\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V\\n\" + ", "-\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V\\n\" + ", "-\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V\",", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Object;>(TT;)V^0\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Lp/X;>(TT;)V^0\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Class;>(TT;)V^0\\n\" + ", "+\t\t\t\"Lp/X;.foo<T:Ljava/lang/Exception;:Ljava/lang/Runnable;>(TT;)V^0\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef47d9e7a4ead23166c5d350b2866ef1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83127f()", "signatureAfterChange": " \tpublic void testBug83127f()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef49dd283e09adf16b81bf76f9bb9aee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tpublic void test138()", "signatureAfterChange": "  \tpublic void test138()", "diff": ["-\t\t\t\t+ \"\t                                            ^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                           ^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                            ^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                           ^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efdad5099c25adfd7eaef6fa0a6764b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6e1daeed1b338c470552c705d4bce7d654dc9164", "commitAfterChange": "284c289846ff27fe8fc104da5e422fc3fb8c5d90", "methodNumberBeforeChange": 748, "methodNumberAfterChange": 748, "signatureBeforeChange": " public void test742()", "signatureAfterChange": " public void test742()", "diff": ["-\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList(T) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "-\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType) since the type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + ", "+\t\t\"Bound mismatch: The generic method makeSingletonList2(S) of type X is not applicable for the arguments (X.SubType). The inferred type X.SubType is not a valid substitute for the bounded parameter <T extends X.SelfType<T>>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f03ba33c11fc1cd4c245fd04da9e82e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "194abd534b611ec2d23ab367d4102b5723758d82", "commitAfterChange": "c7d3258ae74375a57da545fcb11a05d452eeaa7b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void test045() throws CoreException", "signatureAfterChange": " \tpublic void test045() throws CoreException", "diff": ["-\t\t\t\t\"Lp1/X;^1\",", "-\t\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;^1\"", "+\t\t\t\t\"Lp1/X;\",", "+\t\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;\"", "-\t\t\t\"Lp1/X;^1\\n\" +", "-\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;^1\",", "+\t\t\t\"Lp1/X;\\n\" +", "+\t\t\t\"Lp1/Y<Lp1/Y;+Lp1/X;>;\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ee6d4f616d97ccef94f17c52f706e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic void test16() throws JavaModelException", "signatureAfterChange": "  \tpublic void test16() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest~Other;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest~Other;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\",", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest~Other;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest~Other;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37cbd205b5c0a07c4c0ffb14ddddb2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83127f()", "signatureAfterChange": " \tpublic void testBug83127f()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37d5de4de9d0cf2da6bab47161510a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "983c7fc5343f245d128eb822bd7ee4cfaee29d49", "commitAfterChange": "4aca51e66d266745777f6bebbf32a133f70b622d", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testBug47968constructor() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968constructor() throws CoreException", "diff": ["-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968(String)] EXACT_MATCH INSIDE_JAVADOC\\n\" + // This match was not found before...", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968(String)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968(String)] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968(String)] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f68796ef062926f40009893af2e3717a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "635cdb5a7a6689c525de4e28f32c0630009bc2be", "commitAfterChange": "5b2fc25f0a222e2b576998a935fd1c748e775e70", "methodNumberBeforeChange": 997, "methodNumberAfterChange": 997, "signatureBeforeChange": " public void testBug351444b() throws JavaModelException", "signatureAfterChange": " public void testBug351444b() throws JavaModelException", "diff": ["-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 27}\\n\" +", "-\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 27}\\n\" +", "-\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (TT;)V, TXYU, (t), 27}\\n\" +", "-\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 27}\",", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (Ljava.lang.String;Ljava.lang.String;)V, TXYU, (s, s2), 30}\\n\" +", "+\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 30}\\n\" +", "+\t\t\t\t\"TXYU[CONSTRUCTOR_INVOCATION]{(), Ltest.Test<Ljava.lang.Object;>.TXYU;, (TT;)V, TXYU, (t), 30}\\n\" +", "+\t\t\t\t\"   Test.TXYU[TYPE_REF]{TXYU, test, Ltest.Test$TXYU;, null, null, 30}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f74d944784f26800be8fc7cabf2ad3fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["-\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type AX is converted to AX<String>. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type AX is converted to AX<String> using a raw conversion. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f78e145fd92f64c377e6c5a349967dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b476accec946299749ade387bb48c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "01bb8fe9f8248cd9358b14893bccaf44dc8edaf8", "commitAfterChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void testBug83393b()", "signatureAfterChange": " \tpublic void testBug83393b()", "diff": ["-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments ()\\n\" + ", "+\t\t\t\"Javadoc: The method foo(String[]) in the type Test is not applicable for the arguments ()\\n\" + ", "-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments (String)\\n\" + ", "+\t\t\t\"Javadoc: The method foo(String[]) in the type Test is not applicable for the arguments (String)\\n\" + ", "-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments (Exception, boolean)\\n\" + ", "+\t\t\t\"Javadoc: The method foo(Exception, boolean[]) in the type Test is not applicable for the arguments (Exception, boolean)\\n\" + ", "-\t\t\t\"Javadoc: The method foo(int, int) in the type Test is not applicable for the arguments (Exception, boolean, boolean)\\n\" + ", "+\t\t\t\"Javadoc: The method foo(Exception, boolean[]) in the type Test is not applicable for the arguments (Exception, boolean, boolean)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8e24f9de215a297b664e7c9d338bb15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void test017()", "signatureAfterChange": " \tpublic void test017()", "diff": ["-\t\t\t\"     1  istore_1\\n\" + ", "-\t\t\t\"     2  iload_1\\n\" + ", "+\t\t\t\"     1  istore_1 [b]\\n\" + ", "+\t\t\t\"     2  iload_1 [b]\\n\" + ", "-\t\t\t\"     6  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"     9  invokevirtual #26 <Method java/io/PrintStream.println()V>\\n\" + ", "+\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcdb7acfb2688bcbdff5bf678070b870", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void test014() throws JavaModelException", "signatureAfterChange": " public void test014() throws JavaModelException", "diff": ["-\t\t\t\"           return array\\n\" +", "+\t\t\t\"           return arrayO\\n\" +", "-\tString completeBehind = \"array\";", "+\tString completeBehind = \"arrayO\";", "-\tassertResults(\"arrayOfStrings[LOCAL_VARIABLE_REF]{arrayOfStrings, null, [Ljava.lang.String;, null, null, arrayOfStrings, null, [168, 173], 27}\\n\" +", "-\t\t\t\t\t\"arrayOfInts[LOCAL_VARIABLE_REF]{arrayOfInts, null, [I, null, null, arrayOfInts, null, [168, 173], 57}\", requestor.getResults());", "+\tassertResults(\"arrayOfStrings[LOCAL_VARIABLE_REF]{arrayOfStrings, null, [Ljava.lang.String;, null, null, arrayOfStrings, null, [168, 174], 27}\\n\" +", "+\t\t\t\t\t\"arrayOfInts[LOCAL_VARIABLE_REF]{arrayOfInts, null, [I, null, null, arrayOfInts, null, [168, 174], 57}\", requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd911d6610c545da987c15a958ad986d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTestForMethod.java", "commitBeforeChange": "1dae9bed0f28b20df545c773f52fb80596048ada", "commitAfterChange": "73e6c55b6cebcb032c8128286708483f86167b64", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "  \tpublic void test127()", "signatureAfterChange": "  \tpublic void test127()", "diff": ["-\t\t\t\t+ \"\t               ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t               ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t               ^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                ^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdedffd44fdf1b6ac0cc1de61611c2ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void testBug208541() throws JavaModelException", "signatureAfterChange": " public void testBug208541() throws JavaModelException", "diff": ["-\t\t\"        if (new String().length() != 0 \\n\" +", "-\t\t\"              &&  (i < j && j < k)) {\\n\" +", "+\t\t\"        if (new String().length() != 0 &&\\n\" +", "+\t\t\"                (i < j && j < k)) {\\n\" +", "-\t\t\"\t\tif (new String().length() != 0\\n\" +", "-\t\t\"\t\t\t\t&& (i < j && j < k)) {\\n\" +", "+\t\t\"\t\tif (new String().length() != 0 &&\\n\" +", "+\t\t\"\t\t\t\t(i < j && j < k)) {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff91b65a211b9ea39473532f713b1a88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "-\t\t\t\"     9  invokevirtual java/io/PrintStream.println()V [26]\\n\" + ", "+\t\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     9  invokevirtual java.io.PrintStream.println() : void  [26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: Z\\n\";", "+\t\t\t\"        [pc: 0, pc: 13] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff99a3131548d59e006bc1c2850a3d0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void test004()", "signatureAfterChange": "  \tpublic void test004()", "diff": ["-\t\t\t\t\"class Z<T> extends X<T> { public T foo() { return super.foo(); } }\\n\" +", "-\t\t\t\t\"class W<T> extends X { public T foo() { return super.foo(); } }\\n\",", "+\t\t\t\t\"class Z<T> extends X<T> { @Override public T foo() { return super.foo(); } }\\n\" +", "+\t\t\t\t\"class W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\",", "-\t\t\t\"\tclass W<T> extends X { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                                                         ^^^^^^^^^^^\\n\" + "]}], "num": 32411}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b288bd9c8028ba96aae8d74b10a48e8a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "708abae0456e262ef3508c948cf14247", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "da50a11f1737dbee3925e1da64ad7f9cbaff2e84", "commitAfterChange": "99342a278896e2f8caf142911ce817f7cc97d106", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["+\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnMethodName) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(method.selector, method.returnType, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.name, field.type, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnLocalName ||\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tastNode instanceof CompletionOnArgumentName){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(variable.name, variable.type, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t} \r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59a0619ea664f0d552d1050e2c6fa27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "948661c4cb198af70b598b9954e5159cb73d7234", "commitAfterChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": "\r protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tlocator.reportAccurateReference(reference.sourceStart, reference.sourceEnd, new char[][] {this.name}, element, accuracy);\r", "+\tif (reference instanceof QualifiedNameReference) {\r", "+\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)reference;\r", "+\t\tint length = qNameRef.tokens.length;\r", "+\t\tint[] accuracies = new int[length];\r", "+\t\tBinding binding = qNameRef.binding;\r", "+\t\tint indexOfFirstFieldBinding = qNameRef.indexOfFirstFieldBinding > 0 ? qNameRef.indexOfFirstFieldBinding : 1;\r", "+\t\t// first token\r", "+\t\tif (this.matchesName(this.name, qNameRef.tokens[indexOfFirstFieldBinding-1])) {\r", "+\t\t\tFieldBinding fieldBinding =\r", "+\t\t\t\tbinding instanceof FieldBinding ?\r", "+\t\t\t\t\t (FieldBinding)binding :\r", "+\t\t\t\t\t null;\r", "+\t\t\tint level = this.matchLevel(fieldBinding);\r", "+\t\t\tswitch (level) {\r", "+\t\t\t\tcase ACCURATE_MATCH:\r", "+\t\t\t\t\taccuracies[0] = IJavaSearchResultCollector.EXACT_MATCH;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase INACCURATE_MATCH:\r", "+\t\t\t\t\taccuracies[0] = IJavaSearchResultCollector.POTENTIAL_MATCH;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\taccuracies[0] = -1;\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\taccuracies[0] = -1;\r", "+\t\t}\r", "+\t\t// other tokens\r", "+\t\tfor (int i = qNameRef.indexOfFirstFieldBinding; i < length; i++){\r", "+\t\t\tchar[] token = qNameRef.tokens[i];\r", "+\t\t\tif (this.matchesName(this.name, token)) {\r", "+\t\t\t\tFieldBinding otherBinding = qNameRef.otherBindings == null ? null : qNameRef.otherBindings[i-indexOfFirstFieldBinding];\r", "+\t\t\t\tint level = this.matchLevel(otherBinding);\r", "+\t\t\t\tswitch (level) {\r", "+\t\t\t\t\tcase ACCURATE_MATCH:\r", "+\t\t\t\t\t\taccuracies[i] = IJavaSearchResultCollector.EXACT_MATCH;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase INACCURATE_MATCH:\r", "+\t\t\t\t\t\taccuracies[i] = IJavaSearchResultCollector.POTENTIAL_MATCH;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\taccuracies[i] = -1;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\taccuracies[i] = -1;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tlocator.reportAccurateReference(\r", "+\t\t\treference.sourceStart, \r", "+\t\t\treference.sourceEnd, \r", "+\t\t\tnew char[][] {this.name}, \r", "+\t\t\telement, \r", "+\t\t\taccuracies,\r", "+\t\t\ttrue); // accuracy starts on first token\r", "+\t} else {\r", "+\t\tlocator.reportAccurateReference(reference.sourceStart, reference.sourceEnd, new char[][] {this.name}, element, accuracy);\r", "+\t}\r"]}], "num": 33632}
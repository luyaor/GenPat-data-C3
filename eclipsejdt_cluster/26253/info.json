{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "027a6c03fb4a125678c3c753fe1c727c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ae7e35eef8e8e9dafe30bee6cb5dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "commitAfterChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tif (arguments != null) {", "-\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tgenerateArguments(binding, arguments, currentScope, codeStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2c21b3f4b83703593871d6a570b624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "commitAfterChange": "6e3484e93dc48a09ac8c425df0144a313c14ab99", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, count = arguments.length; i < count; i++) {", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t}", "-\t\t}", "+\t\tgenerateArguments(binding, arguments, currentScope, codeStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c927ed020a729fa6e2b2ec0a505917d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "63bda44d804d11c0afa7e8111644ceeb5480e759", "commitAfterChange": "6e3484e93dc48a09ac8c425df0144a313c14ab99", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, count = arguments.length; i < count; i++) {", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t}", "-\t\t}", "+\t\tgenerateArguments(binding, arguments, currentScope, codeStream);"]}], "num": 26253}
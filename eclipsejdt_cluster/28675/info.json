{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c22c82f124dca532fbf17f368c0240be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f42964b5af72701b8448f1d6f2538a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "b5b90ec2f42e0eb7ce3ad684f46b8d872887e632", "commitAfterChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate Map<AnnotationProcessorFactory, FactoryPath.Attributes> loadFactories( Map<FactoryContainer, FactoryPath.Attributes> containers, IJavaProject project )", "signatureAfterChange": " \tprivate Map<AnnotationProcessorFactory, FactoryPath.Attributes> loadFactories( Map<FactoryContainer, FactoryPath.Attributes> containers, IJavaProject project )", "diff": ["-\t\tClassLoader classLoader = _createClassLoader( containers );", "+\t\t", "+\t\t// Need to use the cached classloader if we have one", "+\t\tClassLoader iterativeClassLoader = _project2IterativeClassloaders.get(project);", "+\t\tif (iterativeClassLoader == null) {", "+\t\t\titerativeClassLoader = _createIterativeClassLoader(containers);", "+\t\t\t_project2IterativeClassloaders.put(project, iterativeClassLoader);", "+\t\t}", "+\t\t", "+\t\tClassLoader batchClassLoader = _createBatchClassLoader(containers, iterativeClassLoader);", "-\t\t\t\tList<AnnotationProcessorFactory> f = loadFactoryClasses( fc, classLoader );", "-\t\t\t\tfor ( AnnotationProcessorFactory apf : f )", "+\t\t\t\tfinal FactoryPath.Attributes attr = entry.getValue();", "+\t\t\t\tList<AnnotationProcessorFactory> factories;", "+\t\t\t\tif (attr.runInBatchMode()) {", "+\t\t\t\t\tfactories = loadFactoryClasses(fc, batchClassLoader);", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tfactories = loadFactoryClasses(fc, iterativeClassLoader);", "+\t\t\t\t}", "+\t\t\t\tfor ( AnnotationProcessorFactory apf : factories )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f271c7dcac92e8637436b44bd17656f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "3ba22e291e000d313f08c2f65103444b86598ec8", "commitAfterChange": "2430a281333449aecffa1fcade92c26003c5a2cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate static char[][] suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner)", "signatureAfterChange": " \t \tprivate static char[][] suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner)", "diff": ["-\t\t\t\t\tint count = 2;", "-\t\t\t\t\tint m = 0;", "-\t\t\t\t\twhile (m < excludedNames.length) {", "-\t\t\t\t\t\tif(CharOperation.equals(suffixName, excludedNames[m], false)) {", "-\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "-\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\tString.valueOf(count++).toCharArray(),", "-\t\t\t\t\t\t\t\tsuffixes[k]", "-\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\tm = 0;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tm++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tint count;", "+\t\t\t\t\tint m;", "+\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\tsuffixes[k],", "+\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsuffixName = CharOperation.concat(", "+\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "+\t\t\t\t\t\t\tsuffixes[k]", "+\t\t\t\t\t\t);", "+\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\tsuffixes[k],", "+\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "+\t\t\t\t\t\t\tnames[namesCount++] = suffixName;", "+\t\t\t\t\t\t}", "+\t\t", "+\t\t// if no names were found", "+\t\tif(names.length == 0) {", "+\t\t\tnames = new char[][]{excludeNames(DEFAULT_NAME, DEFAULT_NAME, CharOperation.NO_CHAR, excludedNames)};", "+\t\t}"]}], "num": 28675}
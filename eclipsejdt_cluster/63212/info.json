{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7927b4229b518aeb49bc05822f9dc09e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25bba049dc9d56bf400705fb9d1ec230", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "ff2422726abd9b4eb2726e976f3ef82854d72609", "commitAfterChange": "20fa08dd67915598091c483c6e898b71bc3a58de", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static String getIndentString(String line, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static String extractIndentString(String line, int tabWidth, int indentWidth)", "diff": ["+\tpublic static String extractIndentString(String line, int tabWidth, int indentWidth) {", "+\t\tif (tabWidth < 0 || indentWidth <= 0 || line == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\t", "+\t\tint size= line.length();", "+\t\tint end= 0;", "+\t\t", "+\t\tint spaceEquivs= 0;", "+\t\tint characters= 0;", "+\t\tfor (int i= 0; i < size; i++) {", "+\t\t\tchar c= line.charAt(i);", "+\t\t\tif (c == '\\t') {", "+\t\t\t\tint remainder= spaceEquivs % tabWidth;", "+\t\t\t\tspaceEquivs += tabWidth - remainder;", "+\t\t\t\tcharacters++;", "+\t\t\t} else if (isIndentChar(c)) {", "+\t\t\t\tspaceEquivs++;", "+\t\t\t\tcharacters++;", "+\t\t\t} else {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (spaceEquivs >= indentWidth) {", "+\t\t\t\tend += characters;", "+\t\t\t\tcharacters= 0;", "+\t\t\t\tspaceEquivs= spaceEquivs % indentWidth;", "+\t\t\t}", "+\t\t}", "+\t\tif (end == 0)", "+\t\t\treturn \"\"; //$NON-NLS-1$", "+\t\telse if (end == size)", "+\t\t\treturn line;", "+\t\telse", "+\t\t\treturn line.substring(0, end);", "+\t}", "-\tpublic static String getIndentString(String line, int tabWidth, int indentWidth) {", "-\t\tint size= line.length();", "-\t\tint end= 0;", "-\t\t", "-\t\tint spaceEquivs= 0;", "-\t\tint characters= 0;", "-\t\tfor (int i= 0; i < size; i++) {", "-\t\t\tchar c= line.charAt(i);", "-\t\t\tif (c == '\\t') {", "-\t\t\t\tint remainder= spaceEquivs % tabWidth;", "-\t\t\t\tspaceEquivs += tabWidth - remainder;", "-\t\t\t\tcharacters++;", "-\t\t\t} else if (isIndentChar(c)) {", "-\t\t\t\tspaceEquivs++;", "-\t\t\t\tcharacters++;", "-\t\t\t} else {", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (spaceEquivs >= indentWidth) {", "-\t\t\t\tend += characters;", "-\t\t\t\tcharacters= 0;", "-\t\t\t\tspaceEquivs= spaceEquivs % indentWidth;", "-\t\t\t}", "-\t\tif (end == 0)", "-\t\t\treturn \"\"; //$NON-NLS-1$", "-\t\telse if (end == size)", "-\t\t\treturn line;", "-\t\telse", "-\t\t\treturn line.substring(0, end);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b70394071399eb59406b9e9e98c8d54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "ff2422726abd9b4eb2726e976f3ef82854d72609", "commitAfterChange": "20fa08dd67915598091c483c6e898b71bc3a58de", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth)", "signatureAfterChange": " \tprivate static int indexOfIndent(CharSequence line, int numberOfIndentUnits, int tabWidth, int indentWidth)", "diff": ["-\t */", "-\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth) {", "-\t\tAssert.isTrue(numberOfIndents >= 0);", "-\t\tAssert.isTrue(tabWidth >= 0);", "-\t\tAssert.isTrue(indentWidth >= 0);", "-\t\tint spaceEquivalents= numberOfIndents * indentWidth;", "-\t\t", "-\t\tint size= line.length();", "-\t\tint result= -1;", "-\t\tint blanks= 0;", "-\t\tfor (int i= 0; i < size && blanks < spaceEquivalents; i++) {", "-\t\t\tchar c= line.charAt(i);", "-\t\t\tif (c == '\\t') {", "-\t\t\t\tint remainder= blanks % tabWidth;", "-\t\t\t\tblanks += tabWidth - remainder;", "-\t\t\t} else if (isIndentChar(c)) {", "-\t\t\t\tblanks++;", "-\t\t\t} else {", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tresult= i;", "-\t\t}", "-\t\tif (blanks < spaceEquivalents)", "-\t\t\treturn -1;", "-\t\treturn result + 1;", "-\t}", "+\tprivate static int indexOfIndent(CharSequence line, int numberOfIndentUnits, int tabWidth, int indentWidth) {", "+\t\t", "+\t\tint spaceEquivalents= numberOfIndentUnits * indentWidth;", "+\t\t", "+\t\tint size= line.length();", "+\t\tint result= -1;", "+\t\tint blanks= 0;", "+\t\tfor (int i= 0; i < size && blanks < spaceEquivalents; i++) {", "+\t\t\tchar c= line.charAt(i);", "+\t\t\tif (c == '\\t') {", "+\t\t\t\tint remainder= blanks % tabWidth;", "+\t\t\t\tblanks += tabWidth - remainder;", "+\t\t\t} else if (isIndentChar(c)) {", "+\t\t\t\tblanks++;", "+\t\t\t} else {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tresult= i;", "+\t\t}", "+\t\tif (blanks < spaceEquivalents)", "+\t\t\treturn -1;", "+\t\treturn result + 1;"]}], "num": 63212}
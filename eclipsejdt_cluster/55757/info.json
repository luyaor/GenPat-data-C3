{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5d2b48072d9c327dcaf03c6a2cc0c55", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41074264b7f6939204b3e392e70ed14d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "b8e01a5f88277b60beb56a34c689a6b2ce9e09e8", "commitAfterChange": "9151e30fba5ea02221400c736d4de2dda06ec7ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tpublic static boolean isJavaIdentifier(String identifier)", "signatureAfterChange": "\r \tpublic static boolean isJavaIdentifier(String identifier)", "diff": ["-\t\tint len = identifier.length();\r", "-\t\tif (len == 0) {\r", "-\t\t\treturn false;\r", "+\t\t// FIXME\r", "+\t\t// assert won't be considered as a keyword\r", "+\t\tScanner scanner = new Scanner();\r", "+\t\tchar[] source = identifier.toCharArray();\r", "+\t\tscanner.setSourceBuffer(source);\r", "+\t\tscanner.resetTo(0, source.length);\r", "+\t\ttry {\r", "+\t\t\tint tokenType = scanner.getNextToken();\r", "+\t\t\tswitch(tokenType) {\r", "+\t\t\t\tcase Scanner.TokenNameIdentifier:\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\tdefault:\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r", "-\t\tchar c = identifier.charAt(0);\r", "-\t\tif (!Character.isJavaIdentifierStart(c)) {\r", "-\t\t\treturn false;\r", "-\t\t}\t\t\t\r", "-\t\tfor (int i= 1; i < len; i++) {\r", "-\t\t\tc = identifier.charAt(i);\r", "-\t\t\tif (!Character.isJavaIdentifierPart(c)) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\t\r", "-\t\t}\r", "-\t\tif (KEYWORDS.contains(identifier)) {\r", "-\t\t\treturn false;\r", "-\t\t}\t\t\t\r", "-\t\treturn true;\r", "+\t\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b78b674001af12a01a2349760867678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "37843798fe45653980f2b49b68c9aaf82a2a678a", "commitAfterChange": "113049ad9ea4e67ef301103493e4ca8a20365c97", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public static String[] getJavaClassLibs()", "signatureAfterChange": " public static String[] getJavaClassLibs()", "diff": ["-\tString jreDir = getJREDirectory();", "-\tfinal String osName = System.getProperty(\"os.name\");", "-\tif (jreDir == null) {", "-\t\treturn new String[] {};", "+    String jreDir = getJREDirectory();", "+    final String osName = System.getProperty(\"os.name\");", "+    if (jreDir == null) {", "+        return new String[] {};", "+    }", "+    if (osName.startsWith(\"Mac\")) {", "+        return new String[] {", "+            toNativePath(jreDir + \"/../Classes/classes.jar\")", "+        };", "+    }", "+    final String vmName = System.getProperty(\"java.vm.name\");", "+    if (\"J9\".equals(vmName)) {", "+        return new String[] {", "+            toNativePath(jreDir + \"/lib/jclMax/classes.zip\")", "+        };", "+    }", "+    ArrayList paths = new ArrayList();", "+    String[] jarsNames = new String[] {", "+    \t\t\"/lib/vm.jar\",", "+    \t\t\"/lib/rt.jar\",", "+    \t\t\"/lib/core.jar\",", "+    \t\t\"/lib/security.jar\",", "+    \t\t\"/lib/xml.jar\",", "+    \t\t\"/lib/graphics.jar\"", "+    };", "+    addJarEntries(jreDir, jarsNames, paths);", "+    String[] result = new String[paths.size()];", "+    paths.toArray(result);", "+    return result;", "+}", "-\tif (osName.startsWith(\"Mac\")) {", "-\t\treturn new String[] { toNativePath(jreDir + \"/../Classes/classes.jar\") };", "-\t}", "-\tfinal String vmName = System.getProperty(\"java.vm.name\");", "-\tif (\"J9\".equals(vmName)) {", "-\t\treturn new String[] { toNativePath(jreDir + \"/lib/jclMax/classes.zip\") };", "-\t}", "-\tFile file = new File(jreDir + \"/lib/rt.jar\");", "-\tif (file.exists()) {", "-\t\treturn new String[] {", "-\t\t\ttoNativePath(jreDir + \"/lib/rt.jar\")", "-\t\t};", "-\t}", "-\tfile = new File(jreDir + \"/lib/vm.jar\");", "-\tif (file.exists()) {", "-\t\t// The IBM J2SE 5.0 has put the java.lang classes in vm.jar.", "-\t\treturn new String[] { ", "-\t\t\ttoNativePath(jreDir + \"/lib/vm.jar\"),", "-\t\t\ttoNativePath(jreDir + \"/lib/core.jar\"),", "-\t\t\ttoNativePath(jreDir + \"/lib/security.jar\"),", "-\t\t\ttoNativePath(jreDir + \"/lib/graphics.jar\") };\t\t\t\t", "-\t}", "-\treturn new String[] { ", "-\t\ttoNativePath(jreDir + \"/lib/core.jar\"),", "-\t\ttoNativePath(jreDir + \"/lib/security.jar\"),", "-\t\ttoNativePath(jreDir + \"/lib/graphics.jar\")", "-\t};"]}], "num": 55757}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b6163e0aeed62d75459236fed04e9f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "695adbbe95115adc32347267cc541383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void process(CompilationUnitDeclaration unit, int i) throws CoreException", "signatureAfterChange": " protected void process(PotentialMatch potentialMatch, boolean bindingsWereCreated) throws CoreException", "diff": ["-\t */", "-\tpublic void process(CompilationUnitDeclaration unit, int i) throws CoreException {", "-\t\tMatchingNodeSet matchingNodeSet = null;", "-\t\ttry {", "-\t\t\tthis.currentPotentialMatch = this.matchesToProcess[i];", "-\t\t\tif (this.currentPotentialMatch == null) return;", "-\t\t\tmatchingNodeSet = this.currentPotentialMatch.matchingNodeSet;", "-\t\t\t", "-\t\t\tif (unit == null || unit.isEmpty()) {", "-\t\t\t\tif (this.currentPotentialMatch.openable instanceof org.eclipse.jdt.internal.core.ClassFile) {", "-\t\t\t\t\tthis.currentPotentialMatch.locateMatchesInClassFile();", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (hasAlreadyDefinedType(unit)) {", "-\t\t\t\t// skip type has it is hidden so not visible", "-\t\t\t\treturn;", "-\t\t\t}", "-\t", "-\t\t\tthis.parser.matchSet = this.currentPotentialMatch.matchingNodeSet;", "-\t\t\tgetMethodBodies(unit, i);", "-\t\t\t\t\t\t", "-\t\t\t// report matches that don't need resolve", "-\t\t\tmatchingNodeSet.cuHasBeenResolved = this.compilationAborted;", "-\t\t\tmatchingNodeSet.reportMatching(unit);", "-", "-\t\t\tif (this.pattern.mustResolve ", "-\t\t\t\t\t&& unit.types != null ", "-\t\t\t\t\t&& !this.compilationAborted) {", "-", "-\t\t\t\tif (SearchEngine.VERBOSE) {", "-\t\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPotentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-\t\t\t\t}", "-", "-\t\t\t\t// fault in fields & methods", "-\t\t\t\tif (unit.scope != null)", "-\t\t\t\t\tunit.scope.faultInTypes();", "-\t\t", "-\t\t\t\t// verify inherited methods", "-\t\t\t\tif (unit.scope != null)", "-\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "-\t\t", "-\t\t\t\t// type checking", "-\t\t\t\tunit.resolve();", "-\t\t", "-\t\t\t\t// refresh the total number of units known at this stage", "-\t\t\t\tunit.compilationResult.totalUnitsKnown = totalUnits;", "-", "-\t\t\t\t// report matches that needed resolve", "-\t\t\t\tmatchingNodeSet.cuHasBeenResolved = true;", "-\t\t\t\tmatchingNodeSet.reportMatching(unit);", "-\t\t\t}", "-\t\t} catch (AbortCompilation e) {", "-\t\t\t// could not resolve: report innacurate matches", "-\t\t\tif (matchingNodeSet != null) {", "-\t\t\t\tmatchingNodeSet.cuHasBeenResolved = true;", "-\t\t\t\tmatchingNodeSet.reportMatching(unit);", "-\t\t\t}", "-\t\t\tif (!(e instanceof AbortCompilationUnit)) {", "-\t\t\t\t// problem with class path", "-\t\t\t\tthrow e;", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tthis.parser.matchSet = null;", "-\t\t\tthis.currentPotentialMatch = null;", "+ */", "+protected void process(PotentialMatch potentialMatch, boolean bindingsWereCreated) throws CoreException {", "+\tthis.currentPotentialMatch = potentialMatch;", "+\tCompilationUnitDeclaration unit = potentialMatch.parsedUnit;", "+\tMatchingNodeSet matchingNodeSet = null;", "+\ttry {", "+\t\tif (unit.isEmpty()) {", "+\t\t\tif (this.currentPotentialMatch.openable instanceof ClassFile)", "+\t\t\t\tthis.currentPotentialMatch.locateMatchesInClassFile();", "+\t\t\treturn;", "-\t}", "+\t\tif (hasAlreadyDefinedType(unit)) return; // skip type has it is hidden so not visible", "+\t\tmatchingNodeSet = this.currentPotentialMatch.matchingNodeSet;", "+\t\tgetMethodBodies(unit, matchingNodeSet);", "+", "+\t\tif (bindingsWereCreated && this.pattern.mustResolve && unit.types != null) {", "+\t\t\tif (SearchEngine.VERBOSE)", "+\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPotentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+", "+\t\t\tmatchingNodeSet.reduceParseTree(unit);", "+", "+\t\t\tif (unit.scope != null)", "+\t\t\t\tunit.scope.faultInTypes(); // fault in fields & methods", "+\t\t\tunit.resolve();", "+", "+\t\t\tmatchingNodeSet.reportMatching(unit, true);", "+\t\t} else {", "+\t\t\tmatchingNodeSet.reportMatching(unit, this.pattern.mustResolve);", "+\t} catch (AbortCompilation e) {", "+\t\t// could not resolve: report innacurate matches", "+\t\tif (matchingNodeSet != null)", "+\t\t\tmatchingNodeSet.reportMatching(unit, true); // was partially resolved", "+\t\tif (!(e instanceof AbortCompilationUnit)) {", "+\t\t\t// problem with class path", "+\t\t\tthrow e;", "+\t\t}", "+\t} finally {", "+\t\tthis.currentPotentialMatch = null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd0a84dd80014abcd578cf9aab3f36ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 56, "signatureBeforeChange": "  public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map customDefaultOptions)", "signatureAfterChange": "  public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map customDefaultOptions)", "diff": ["+", "+public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map customDefaultOptions) {", "+\tthis.initialize(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions);", "+\tthis.relocalize();", "+}", "-", "-public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map customDefaultOptions) {", "-\tthis.logger = new Logger(outWriter, errWriter);", "-\tthis.out = outWriter;", "-\tthis.systemExitWhenFinished = systemExitWhenFinished;", "-\tthis.options = new CompilerOptions().getMap();", "-\tif (customDefaultOptions != null) {", "-\t\tthis.didSpecifySource = customDefaultOptions.get(CompilerOptions.OPTION_Source) != null;", "-\t\tthis.didSpecifyTarget = customDefaultOptions.get(CompilerOptions.OPTION_TargetPlatform) != null;", "-\t\tfor (Iterator iter = customDefaultOptions.keySet().iterator(); iter.hasNext();) {", "-\t\t\tObject key = iter.next();", "-\t\t\tthis.options.put(key, customDefaultOptions.get(key));", "-\t\t}", "-\t} else {", "-\t\tthis.didSpecifySource = false;", "-\t\tthis.didSpecifyTarget = false;", "-\t}", "-}"]}], "num": 59062}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cc1faede2229cbad64d4ff8c704ad68", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c69f86fa9dd332d47a7a511eb3fd515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "c5aec3a765a7b3a6b1146e9e3a6a440f3522c2eb", "commitAfterChange": "868bb663e324da2f9402a117feeb046defe94741", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents, \t\t\tIProgressMonitor progressMonitor)", "signatureAfterChange": " \tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents, \t\t\tIProgressMonitor progressMonitor)", "diff": ["-\t\tif (isWorkingCopy && !AptConfig.shouldProcessDuringReconcile(_jProject)) {", "-\t\t\t// Cover the case where the user turned off reconcile-time processing after some working", "-\t\t\t// copies were already created - else they'll get null timestamps and the commit will fail.", "-\t\t\t// There's probably a better way to do this but it's a corner case anyway. - WSH 3/07", "-\t\t\t_CUHELPER.discardWorkingCopy(unit);", "-\t\t\tisWorkingCopy = false;", "-\t\t}", "-\t\t\t// If we have a working copy, all we", "-\t\t\t// need to do is update its contents and commit it.", "-\t\t\t_CUHELPER.commitNewContents(unit, contents, progressMonitor);", "-\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "-\t\t\t\t\t\"Committed existing working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\ttry {", "+\t\t\t\t// If we have a working copy, all we", "+\t\t\t\t// need to do is update its contents and commit it...", "+\t\t\t\t_CUHELPER.commitNewContents(unit, contents, progressMonitor);", "+\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\"Committed existing working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tcatch (JavaModelException e) {", "+\t\t\t\t// ...unless, that is, the resource has been deleted behind our back", "+\t\t\t\t// due to a clean.  In that case, discard the working copy and try again.", "+\t\t\t\tif (e.getJavaModelStatus().getCode() == IJavaModelStatusConstants.INVALID_RESOURCE) {", "+\t\t\t\t\t_CUHELPER.discardWorkingCopy(unit);", "+\t\t\t\t\tisWorkingCopy = false;", "+\t\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\t\"Discarded invalid existing working copy in order to try again: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tAptPlugin.log(e, \"Unable to commit working copy to disk: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "-\t\telse {", "+\t\tif (!isWorkingCopy) {", "+\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\"Created compilation unit during build: \" + unit.getElementName()); //$NON-NLS-1$", "-\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "-\t\t\t\t\t\"Created compilation unit during build: \" + unit.getElementName()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc53b710cab4cf3a34da51b149a00ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate File getSerializationFile(IProject project)", "signatureAfterChange": " \tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents, \t\t\tIProgressMonitor progressMonitor)", "diff": ["+\t */", "+\tprivate void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents,", "+\t\t\tIProgressMonitor progressMonitor)", "+\t{", "+\t\tICompilationUnit unit = pkgFrag.getCompilationUnit(cuName);", "+\t\tboolean isWorkingCopy = unit.isWorkingCopy();", "+\t\tif (isWorkingCopy && unit.getResource().exists()) {", "+\t\t\t// If we have a working copy and it has a file, all we", "+\t\t\t// need to do is update its contents and commit it.", "+\t\t\t_CUHELPER.commitNewContents(unit, contents, progressMonitor);", "+\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\"Committed existing working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t}", "+\t\telse {", "+\t\t\tif (isWorkingCopy) {", "+\t\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=163906 -", "+\t\t\t\t// commitWorkingCopy() fails if file does not already exist.", "+\t\t\t\tSet<ICompilationUnit> toDiscard = discardWorkingCopy(unit);", "+\t\t\t\tfor (ICompilationUnit cuToDiscard : toDiscard) {", "+\t\t\t\t\t_CUHELPER.discardWorkingCopy(cuToDiscard);", "+\t\t\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\t\t\"Discarded working copy during build: \" + unit.getElementName()); //$NON-NLS-1$", "+\t\t\ttry {", "+\t\t\t\tunit = pkgFrag.createCompilationUnit(cuName, contents, true, progressMonitor);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\tAptPlugin.log(e, \"Unable to create compilation unit on disk: \" +  //$NON-NLS-1$", "+\t\t\t\t\t\tcuName + \" in pkg fragment: \" + pkgFrag.getElementName()); //$NON-NLS-1$", "+\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\"Created compilation unit during build: \" + unit.getElementName()); //$NON-NLS-1$", "-\t */", "-\tprivate File getSerializationFile(IProject project) {", "-\t\tif (!project.exists()) return null;", "-\t\tIPath workingLocation = project.getWorkingLocation(AptPlugin.PLUGIN_ID);", "-\t\treturn workingLocation.append(\"state.dat\").toFile(); //$NON-NLS-1$", "-\t}"]}], "num": 31426}
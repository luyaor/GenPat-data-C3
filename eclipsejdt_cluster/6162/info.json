{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9fd6b31cd86a635e5bc7e818c7904a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30515f5f421532442df223fe2ee456fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException", "signatureAfterChange": " public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException", "diff": ["-\t}", "-\tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException {", "-\t\tBinaryType binaryType = (BinaryType)classFile.getType();", "-\t\tif (classFile.isOpen()) {", "-\t\t\t// reuse the info from the java model cache", "-\t\t\treturn (IBinaryType)binaryType.getElementInfo();", "-\t\t} else {", "-\t\t\t// create a temporary info", "-\t\t\tIBinaryType info;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement pkg = classFile.getParent();", "-\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();", "-\t\t\t\tif (root.isArchive()) {", "-\t\t\t\t\t// class file in a jar", "-\t\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "-\t\t\t\t\tString classFilePath = ", "-\t\t\t\t\t\t(pkgPath.length() > 0) ?", "-\t\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$", "-\t\t\t\t\t\t\tclassFile.getElementName();", "-\t\t\t\t\tZipFile zipFile = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();", "-\t\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(", "-\t\t\t\t\t\t\tzipFile,", "-\t\t\t\t\t\t\tclassFilePath);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class file in a directory", "-\t\t\t\t\tString osPath = resource.getLocation().toOSString();", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);", "-\t\t\t\t}", "-\t\t\t\treturn info;", "-\t\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\t\t//e.printStackTrace();", "-\t\t\t\treturn null;", "-\t\t\t} catch (java.io.IOException e) {", "-\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t\t}", "-\t\t}", "-\t}", "+}", "+public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException {", "+\tBinaryType binaryType = (BinaryType) classFile.getType();", "+\tif (classFile.isOpen())", "+\t\treturn (IBinaryType) binaryType.getElementInfo(); // reuse the info from the java model cache", "+", "+\t// create a temporary info", "+\tIBinaryType info;", "+\ttry {", "+\t\tIJavaElement pkg = classFile.getParent();", "+\t\tPackageFragmentRoot root = (PackageFragmentRoot) pkg.getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\t// class file in a jar", "+\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "+\t\t\tString classFilePath = pkgPath.length() > 0", "+\t\t\t\t? pkgPath + \"/\" + classFile.getElementName() //$NON-NLS-1$", "+\t\t\t\t: classFile.getElementName();", "+\t\t\tZipFile zipFile = null;", "+\t\t\ttry {", "+\t\t\t\tzipFile = ((JarPackageFragmentRoot) root).getJar();", "+\t\t\t\tinfo = ClassFileReader.read(zipFile, classFilePath);", "+\t\t\t} finally {", "+\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// class file in a directory", "+\t\t\tString osPath = resource.getLocation().toOSString();", "+\t\t\tinfo = ClassFileReader.read(osPath);", "+\t\t}", "+\t\treturn info;", "+\t} catch (ClassFormatException e) {", "+\t\t//e.printStackTrace();", "+\t\treturn null;", "+\t} catch (java.io.IOException e) {", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ea05a2d37b4e2c00a19584f1e182f7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "ae1f54f274fcbc3fe4d90b39f8d538bfd84fcc06", "commitAfterChange": "e0a13e9ff9d51ec16c3d6fcba3e2d1886331ec6a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " MethodVerifier(LookupEnvironment environment)", "signatureAfterChange": " MethodVerifier(LookupEnvironment environment)", "diff": ["-\t\tenvironment.globalOptions.complianceLevel >= org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_5", "-\t\t\t&& environment.globalOptions.sourceLevel < org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants.JDK1_5;", "+\t\tenvironment.globalOptions.complianceLevel >= ClassFileConstants.JDK1_5", "+\t\t\t&& environment.globalOptions.sourceLevel < ClassFileConstants.JDK1_5;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef1ae2c3b9487ed85222bceeed9ac7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "e2801c340924b0987ea52e37626abf6035ced667", "commitAfterChange": "3b2052c623130c252652dbc4ea1f3e9fec2cb90c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public void setUnitsToLookInside(IWorkingCopy[] unitsToLookInside)", "signatureAfterChange": "\r public void setUnitsToLookInside(IWorkingCopy[] unitsToLookInside)", "diff": ["-\tThread currentThread = Thread.currentThread();\r", "-\tif (unitsToLookInside == null) {\r", "-\t\tthis.unitsToLookInside.put(currentThread, null);\r", "+\tif (unitsToLookInside == null) { \r", "+\t\tthis.unitsToLookInside.setCurrent(null); \r", "-\t\tMap workingCopies = (Map)this.unitsToLookInside.get(currentThread);\r", "-\t\tif (workingCopies == null){\r", "-\t\t\tthis.unitsToLookInside.put(currentThread, workingCopies = new HashMap());\r", "-\t\t}\r", "+\t\tHashMap workingCopies = new HashMap();\r", "+\t\tthis.unitsToLookInside.setCurrent(workingCopies);\r"]}], "num": 6162}
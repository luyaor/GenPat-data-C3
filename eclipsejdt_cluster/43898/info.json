{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8aeb83a557c043aa8b436e788ab29c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "383ab572407cfe2e1dd2d1ba48ea115f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tprotected boolean matchesAsSubtype(\r \t\tReferenceBinding type,\r \t\tReferenceBinding superType)", "signatureAfterChange": "\r private char[][][] collectSuperTypeNames(ReferenceBinding type)", "diff": ["+ */\r", "+private char[][][] collectSuperTypeNames(ReferenceBinding type) {\r", "+\r", "+\t// superclass\r", "+\tchar[][][] superClassNames = null;\r", "+\tReferenceBinding superclass = type.superclass();\r", "+\tif (superclass != null) {\r", "+\t\tsuperClassNames = this.collectSuperTypeNames(superclass);\r", "+\t}\r", "+\r", "+\t// interfaces\r", "+\tchar[][][][] superInterfaceNames = null;\r", "+\tint superInterfaceNamesLength = 0;\r", "+\tReferenceBinding[] interfaces = type.superInterfaces();\r", "+\tif (interfaces != null) {\r", "+\t\tsuperInterfaceNames = new char[interfaces.length][][][];\r", "+\t\tfor (int i = 0; i < interfaces.length; i++) {\r", "+\t\t\tsuperInterfaceNames[i] = this.collectSuperTypeNames(interfaces[i]);\r", "+\t\t\tsuperInterfaceNamesLength += superInterfaceNames[i].length;\r", "+\tint length = \r", "+\t\t(superclass == null ? 0 : 1)\r", "+\t\t+ (superClassNames == null ? 0 : superClassNames.length)\r", "+\t\t+ (interfaces == null ? 0 : interfaces.length)\r", "+\t\t+ superInterfaceNamesLength;\r", "+\tchar[][][] result = new char[length][][];\r", "+\tint index = 0;\r", "+\tif (superclass != null) {\r", "+\t\tresult[index++] = superclass.compoundName;\r", "+\t\tif (superClassNames != null) {\r", "+\t\t\tSystem.arraycopy(superClassNames, 0, result, index, superClassNames.length);\r", "+\t\t\tindex += superClassNames.length;\r", "+\t\t}\r", "+\t}\r", "+\tif (interfaces != null) {\r", "+\t\tfor (int i = 0, max = interfaces.length; i < max; i++) {\r", "+\t\t\tresult[index++] = interfaces[i].compoundName;\r", "+\t\t\tif (superInterfaceNames != null) {\r", "+\t\t\t\tSystem.arraycopy(superInterfaceNames[i], 0, result, index, superInterfaceNames[i].length);\r", "+\t\t\t\tindex += superInterfaceNames[i].length;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\treturn result;\r", "+}\r", "-\t */\r", "-\tprotected boolean matchesAsSubtype(\r", "-\t\tReferenceBinding type,\r", "-\t\tReferenceBinding superType) {\r", "-\r", "-\t\t// matches superclass\r", "-\t\tReferenceBinding superclass = type.superclass();\r", "-\t\tif (superType == superclass)\r", "-\t\t\treturn true;\r", "-\t\tif (superclass != null) {\r", "-\t\t\tif (this.matchesAsSubtype(superclass, superType))\r", "-\t\t\t\treturn true;\r", "-\t\t}\r", "-\r", "-\t\t// matches interfaces\r", "-\t\tReferenceBinding[] interfaces = type.superInterfaces();\r", "-\t\tfor (int i = 0; i < interfaces.length; i++) {\r", "-\t\t\tReferenceBinding interf = interfaces[i];\r", "-\t\t\tif (superType == interf)\r", "-\t\t\t\treturn true;\r", "-\t\t\tif (this.matchesAsSubtype(interf, superType))\r", "-\t\t\t\treturn true;\r", "-\t\t}\r", "-\r", "-\t\treturn false;\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0bf4dc5de5d858795858e4a95b312de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static char[] createMethodSignature(char[][] parameterTypes, char[] returnType)", "signatureAfterChange": " public static char[] createMethodSignature( \t\tchar[][] parameterTypes, \t\tchar[] returnType, \t\tchar[][] formalTypeParameters, \t\tchar[][] thrownExceptions)", "diff": ["-\tint parameterTypesLength = parameterTypes.length;", "-\tint parameterLength = 0;", "-\tfor (int i = 0; i < parameterTypesLength; i++) {", "-\t\tparameterLength += parameterTypes[i].length;", "-\t\t", "-\t}", "-\tint returnTypeLength = returnType.length;", "-\tchar[] result = new char[1 + parameterLength + 1 + returnTypeLength];", "-\tresult[0] = C_PARAM_START;", "-\tint index = 1;", "-\tfor (int i = 0; i < parameterTypesLength; i++) {", "-\t\tchar[] parameterType = parameterTypes[i];", "-\t\tint length = parameterType.length;", "-\t\tSystem.arraycopy(parameterType, 0, result, index, length);", "-\t\tindex += length;", "-\t}", "-\tresult[index] = C_PARAM_END;", "-\tSystem.arraycopy(returnType, 0, result, index+1, returnTypeLength);", "-\treturn result;", "+ */", "+public static char[] createMethodSignature(", "+\t\tchar[][] parameterTypes,", "+\t\tchar[] returnType,", "+\t\tchar[][] formalTypeParameters,", "+\t\tchar[][] thrownExceptions) {", "+\tint formalTypeParameterCount = formalTypeParameters.length;", "+\tint formalTypeLength = 0;", "+\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "+\t\tformalTypeLength += formalTypeParameters[i].length;", "+\t}", "+\tint parameterTypesCount = parameterTypes.length;", "+\tint parameterLength = 0;", "+\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\t\tparameterLength += parameterTypes[i].length;", "+\t}", "+\tint returnTypeLength = returnType.length;", "+\tint thrownExceptionsCount = thrownExceptions.length;", "+\tint exceptionsLength = 0;", "+\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "+\t\texceptionsLength += thrownExceptions[i].length;", "+\t}", "+\tint extras = 2; // \"(\" and \")\"", "+\tif (formalTypeParameterCount > 0) {", "+\t\textras += 2;   // \"<\" and \">\"", "+\t}", "+\tif (thrownExceptionsCount > 0) {", "+\t\textras += thrownExceptionsCount;   // one \"^\" per", "+\t}", "+\tchar[] result = new char[extras+ formalTypeLength + parameterLength + returnTypeLength + exceptionsLength];", "+\tint index = 0;", "+\tif (formalTypeParameterCount > 0) {", "+\t\tresult[index++] = C_GENERIC_START;", "+\t\tfor (int i = 0; i < formalTypeParameterCount; i++) {", "+\t\t\tchar[] formalTypeParameter = formalTypeParameters[i];", "+\t\t\tint length = formalTypeParameter.length;", "+\t\t\tSystem.arraycopy(formalTypeParameter, 0, result, index, length);", "+\t\t\tindex += length;", "+\t\t}", "+\t\tresult[index++] = C_GENERIC_END;", "+\t}", "+\tresult[index++] = C_PARAM_START;", "+\tfor (int i = 0; i < parameterTypesCount; i++) {", "+\t\tchar[] parameterType = parameterTypes[i];", "+\t\tint length = parameterType.length;", "+\t\tSystem.arraycopy(parameterType, 0, result, index, length);", "+\t\tindex += length;", "+\t}", "+\tresult[index++] = C_PARAM_END;", "+\tSystem.arraycopy(returnType, 0, result, index, returnTypeLength);", "+\tindex += returnTypeLength;", "+\tif (thrownExceptionsCount > 0) {", "+\t\tfor (int i = 0; i < thrownExceptionsCount; i++) {", "+\t\t\tresult[index++] = C_THROWS;", "+\t\t\tchar[] thrownException = thrownExceptions[i];", "+\t\t\tint length = thrownException.length;", "+\t\t\tSystem.arraycopy(thrownException, 0, result, index, length);", "+\t\t\tindex += length;", "+\t\t}", "+\t}", "+\treturn result;", "+}"]}], "num": 43898}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea809dea56107f11f8c7bca1fac0d8d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96e8469be2982be401c94f8dd0899cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/inherited/InheritedAnnoProc.java", "commitBeforeChange": "16d1772b364d58d0dc794d5d90e7a800f55328ba", "commitAfterChange": "bc3154a88622fd1fe4ab2af9cb2ca0fdb63f2ca8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate boolean collectElements()", "signatureAfterChange": " \t \tprivate boolean collectElements()", "diff": ["+\t\t\telse if (\"InheritanceA\".equals(name)) {", "+\t\t\t\t_elementAa = e;", "+\t\t\t}", "+\t\t\telse if (\"<init>\".equals(name)) {", "+\t\t\t\tif (((ExecutableElement)e).getParameters().isEmpty()) {", "+\t\t\t\t\t_elementAinit = e;", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\t_elementAinitI = e;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tnull == _elementAIntf || null == _elementAEnum || null == _elementAi || null == _elementAfoo) {", "+\t\t\t\tnull == _elementAi || null == _elementAfoo || null == _elementAinitI || null == _elementAa ||", "+\t\t\t\tnull == _elementAIntf || null == _elementAEnum || null == _elementAinit) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3a071d88443c481b4cadc02b9005f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "commitAfterChange": "3eb060c9534fa433113cc21253ee7307d78379c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public CompilerOptions(Map settings)", "signatureAfterChange": "\r \tpublic CompilerOptions(Map settings)", "diff": ["- */\r", "-public CompilerOptions(Map settings){\r", "-\tif (settings == null) return;\r", "-\t\r", "-\t// filter options which are related to the compiler component\r", "-\tObject[] entries = settings.entrySet().toArray();\r", "-\tfor (int i = 0, max = entries.length; i < max; i++){\r", "-\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "-\t\tif (!(entry.getKey() instanceof String)) continue;\r", "-\t\tif (!(entry.getValue() instanceof String)) continue;\r", "-\t\tString optionID = (String) entry.getKey();\r", "-\t\tString optionValue = (String) entry.getValue();\r", "-\t\t\r", "-\t\t// Local variable attribute\r", "-\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "-\t\t\tif (optionValue.equals(GENERATE)) {\r", "-\t\t\t\tthis.produceDebugAttributes |= Vars;\r", "-\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){\r", "-\t\t\t\tthis.produceDebugAttributes &= ~Vars;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t}  \r", "-\t\t// Line number attribute\t\r", "-\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {\r", "-\t\t\tif (optionValue.equals(GENERATE)) {\r", "-\t\t\t\tthis.produceDebugAttributes |= Lines;\r", "-\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "-\t\t\t\tthis.produceDebugAttributes &= ~Lines;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Source file attribute\t\r", "-\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {\r", "-\t\t\tif (optionValue.equals(GENERATE)) {\r", "-\t\t\t\tthis.produceDebugAttributes |= Source;\r", "-\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "-\t\t\t\tthis.produceDebugAttributes &= ~Source;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Preserve unused local\t\r", "-\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "-\t\t\tif (optionValue.equals(PRESERVE)) {\r", "-\t\t\t\tthis.preserveAllLocalVariables = true;\r", "-\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {\r", "-\t\t\t\tthis.preserveAllLocalVariables = false;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report unreachable code\t\t\t\t\r", "-\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= UnreachableCode;\r", "-\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "-\t\t\t\tthis.warningThreshold |= UnreachableCode;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "-\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report invalid import\t\r", "-\t\tif(optionID.equals(OPTION_ReportInvalidImport)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= ImportProblem;\r", "-\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "-\t\t\t\tthis.warningThreshold |= ImportProblem;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "-\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Define the target JDK tag for .classfiles\r", "-\t\tif(optionID.equals(OPTION_TargetPlatform)){\r", "-\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "-\t\t\t\tthis.targetJDK = JDK1_1;\r", "-\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "-\t\t\t\tthis.targetJDK = JDK1_2;\r", "-\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "-\t\t\t\tthis.targetJDK = JDK1_3;\r", "-\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "-\t\t\t\tthis.targetJDK = JDK1_4;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report method with constructor name\r", "-\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= MethodWithConstructorName;\r", "-\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "-\t\t\t\tthis.warningThreshold |= MethodWithConstructorName;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "-\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report overriding package default method\r", "-\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= OverriddenPackageDefaultMethod;\r", "-\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "-\t\t\t\tthis.warningThreshold |= OverriddenPackageDefaultMethod;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "-\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report deprecation\r", "-\t\tif(optionID.equals(OPTION_ReportDeprecation)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= UsingDeprecatedAPI;\r", "-\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "-\t\t\t\tthis.warningThreshold |= UsingDeprecatedAPI;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "-\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report hidden catch block\r", "-\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= MaskedCatchBlock;\r", "-\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "-\t\t\t\tthis.warningThreshold |= MaskedCatchBlock;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "-\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report unused local variable\r", "-\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= UnusedLocalVariable;\r", "-\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "-\t\t\t\tthis.warningThreshold |= UnusedLocalVariable;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "-\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report unused parameter\r", "-\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= UnusedArgument;\r", "-\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "-\t\t\t\tthis.warningThreshold |= UnusedArgument;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "-\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t} \r", "-\t\t// Report synthetic access emulation\r", "-\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= AccessEmulation;\r", "-\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "-\t\t\t\tthis.warningThreshold |= AccessEmulation;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "-\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\t// Report non-externalized string literals\r", "-\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= NonExternalizedString;\r", "-\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "-\t\t\t\tthis.warningThreshold |= NonExternalizedString;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "-\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t}\r", "-\t\t// Report usage of 'assert' as an identifier\r", "-\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "-\t\t\tif (optionValue.equals(ERROR)) {\r", "-\t\t\t\tthis.errorThreshold |= AssertUsedAsAnIdentifier;\r", "-\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "-\t\t\t} else if (optionValue.equals(WARNING)) {\r", "-\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "-\t\t\t\tthis.warningThreshold |= AssertUsedAsAnIdentifier;\r", "-\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "-\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "-\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\t// Set the source compatibility mode (assertions)\r", "-\t\tif(optionID.equals(OPTION_Source)){\r", "-\t\t\tif (optionValue.equals(VERSION_1_3)) {\r", "-\t\t\t\tthis.assertMode = false;\r", "-\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "-\t\t\t\tthis.assertMode = true;\r", "-\t\t\t}\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t}\r", "-}\r", "+\t */\r", "+\tpublic CompilerOptions(Map settings){\r", "+\r", "+\t\tif (settings == null) return;\r", "+\t\t\r", "+\t\t// filter options which are related to the compiler component\r", "+\t\tObject[] entries = settings.entrySet().toArray();\r", "+\t\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\t\tString optionID = (String) entry.getKey();\r", "+\t\t\tString optionValue = (String) entry.getValue();\r", "+\t\t\t\r", "+\t\t\t// Local variable attribute\r", "+\t\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "+\t\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\t\tthis.produceDebugAttributes |= Vars;\r", "+\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){\r", "+\t\t\t\t\tthis.produceDebugAttributes &= ~Vars;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}  \r", "+\t\t\t// Line number attribute\t\r", "+\t\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {\r", "+\t\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\t\tthis.produceDebugAttributes |= Lines;\r", "+\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\t\tthis.produceDebugAttributes &= ~Lines;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Source file attribute\t\r", "+\t\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {\r", "+\t\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\t\tthis.produceDebugAttributes |= Source;\r", "+\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\t\tthis.produceDebugAttributes &= ~Source;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Preserve unused local\t\r", "+\t\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "+\t\t\t\tif (optionValue.equals(PRESERVE)) {\r", "+\t\t\t\t\tthis.preserveAllLocalVariables = true;\r", "+\t\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {\r", "+\t\t\t\t\tthis.preserveAllLocalVariables = false;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report unreachable code\t\t\t\t\r", "+\t\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= UnreachableCode;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\t\tthis.warningThreshold |= UnreachableCode;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report invalid import\t\r", "+\t\t\tif(optionID.equals(OPTION_ReportInvalidImport)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= ImportProblem;\r", "+\t\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\t\tthis.warningThreshold |= ImportProblem;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Define the target JDK tag for .classfiles\r", "+\t\t\tif(optionID.equals(OPTION_TargetPlatform)){\r", "+\t\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\t\tthis.targetJDK = JDK1_1;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\t\tthis.targetJDK = JDK1_2;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\t\tthis.targetJDK = JDK1_3;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\t\tthis.targetJDK = JDK1_4;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Private constructor access emulation (extra arg vs. visibility change)\r", "+\t\t\tif(optionID.equals(OPTION_PrivateConstructorAccess)){\r", "+\t\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\t\tthis.isPrivateConstructorAccessChangingVisibility = false;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\t\tthis.isPrivateConstructorAccessChangingVisibility = false;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\t\tthis.isPrivateConstructorAccessChangingVisibility = true;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\t\tthis.isPrivateConstructorAccessChangingVisibility = true;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report method with constructor name\r", "+\t\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= MethodWithConstructorName;\r", "+\t\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\t\tthis.warningThreshold |= MethodWithConstructorName;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report overriding package default method\r", "+\t\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\t\tthis.warningThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report deprecation\r", "+\t\t\tif(optionID.equals(OPTION_ReportDeprecation)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\t\tthis.warningThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report hidden catch block\r", "+\t\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= MaskedCatchBlock;\r", "+\t\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\t\tthis.warningThreshold |= MaskedCatchBlock;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report unused local variable\r", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= UnusedLocalVariable;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\t\tthis.warningThreshold |= UnusedLocalVariable;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report unused parameter\r", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= UnusedArgument;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\t\tthis.warningThreshold |= UnusedArgument;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r", "+\t\t\t// Report synthetic access emulation\r", "+\t\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= AccessEmulation;\r", "+\t\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\t\tthis.warningThreshold |= AccessEmulation;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\t// Report non-externalized string literals\r", "+\t\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= NonExternalizedString;\r", "+\t\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\t\tthis.warningThreshold |= NonExternalizedString;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t\t// Report usage of 'assert' as an identifier\r", "+\t\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\t\tthis.warningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\t// Set the source compatibility mode (assertions)\r", "+\t\t\tif(optionID.equals(OPTION_Source)){\r", "+\t\t\t\tif (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\t\tthis.assertMode = false;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\t\tthis.assertMode = true;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8ace8eeb30a99a43becbfe068ee2f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "7e47f9acc3454f5babc44432d7650b471f5736c6", "commitAfterChange": "75c0ccb1e2c68587a8e2efbb2a478d71f7d635f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic CompilerOptions(Map settings)", "signatureAfterChange": "\r \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Define the JDK compliance level\r", "+\t\t\tif(optionID.equals(OPTION_Compliance)){\r", "+\t\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_1;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_2;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_3;\r", "+\t\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\t\tthis.complianceLevel = JDK1_4;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7441d1766fdf1343d4da16d18afe7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\t", "+", "+", "+\t\t// it is possible for a Byte to be unboxed to a byte & then converted to an int", "+\t\t// but it is not possible either for a byte to become Byte & then assigned to an Integer,", "+\t\t// or to become an int before boxed into an Integer", "+\t\tif (runtimeTimeType.isBaseType()) {", "+\t\t\tif (!compileTimeType.isBaseType()) {", "+\t\t\t\tcompileTimeType = scope.computeBoxingType(compileTimeType);", "+\t\t\t\tthis.implicitConversion = UNBOXING;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (compileTimeType.isBaseType()) {", "+\t\t\t\tcompileTimeType = scope.computeBoxingType(compileTimeType);", "+\t\t\t\tthis.implicitConversion = BOXING | compileTimeType.id;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+", "-\t\t\t\tthis.implicitConversion = (T_int << 4) + compileTimeType.id;", "+\t\t\t\tthis.implicitConversion |= (T_int << 4) + compileTimeType.id;", "-\t\t\t\tthis.implicitConversion = (runtimeTimeType.id << 4) + compileTimeType.id;", "+\t\t\t\tthis.implicitConversion |= (runtimeTimeType.id << 4) + compileTimeType.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7b437ea8dbee213c1ee88e6dabfbac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "8641f54de2fbb396358e8ce74c8966d612b3bcdf", "commitAfterChange": "7f7fe7a0ba4a6e12c0bff10c900a5fe01a5f59ed", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tint computeRelevanceForCaseMatching(char[] token, char[] proposalName)", "signatureAfterChange": " \tint computeRelevanceForCaseMatching(char[] token, char[] proposalName)", "diff": ["-\t\tif (CharOperation.prefixEquals(token, proposalName, true /* do not ignore case */)) {", "+\t\tif (this.options.camelCaseMatch) {", "+\t\t\tif(CharOperation.equals(token, proposalName, true /* do not ignore case */)) {", "+\t\t\t\treturn R_CASE + R_EXACT_NAME;", "+\t\t\t} else if (CharOperation.prefixEquals(token, proposalName, true /* do not ignore case */)) {", "+\t\t\t\treturn R_CASE;", "+\t\t\t} else if (CharOperation.camelCaseMatch(token, proposalName)){", "+\t\t\t\treturn R_CAMEL_CASE;", "+\t\t\t} else if(CharOperation.equals(token, proposalName, false /* ignore case */)) {", "+\t\t\t\treturn R_EXACT_NAME;", "+\t\t\t}", "+\t\t} else if (CharOperation.prefixEquals(token, proposalName, true /* do not ignore case */)) {", "-\t\t} else {", "-\t\t\tif(CharOperation.equals(token, proposalName, false /* ignore case */)) {", "-\t\t\t\treturn R_EXACT_NAME;", "-\t\t\t}", "-\t\t\treturn 0;", "+\t\t} else if(CharOperation.equals(token, proposalName, false /* ignore case */)) {", "+\t\t\treturn R_EXACT_NAME;", "+\t\treturn 0;"]}], "num": 26201}
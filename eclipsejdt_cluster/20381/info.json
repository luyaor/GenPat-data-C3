{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "273b1af5edac2e46290fac4958a737f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ff6f61f0f46b3690ed03d07e0a79a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "786993dd9585d4f14416c7b5f8e3764c466721f7", "commitAfterChange": "bc001047b4a82ed71734208a2fa6b751eb7774fc", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tboolean textOnFirstLine = false;", "-\t\t\t\tpreviousToken = 1;", "+\t\t\t\tpreviousToken = 2000;", "-    \t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || newLine || previousToken == -1) && (!firstWord || !hasTokens);", "+    \t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE) && (!firstWord || !hasTokens);", "+\t\t\t\t\t\tif (hasTextOnFirstLine == 1 && multiLines) {", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\thasTextOnFirstLine = -1;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!textOnFirstLine && multiLines) {", "-\t\t\t\t\t\t\ttextOnFirstLine = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\tif (previousToken == -1) {", "+\t\t\t\t\t\t// do not remember the first whitespace", "+\t\t\t\t\t\tpreviousToken = -2;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t}", "+\t\t\tlineNumber = Util.getLineNumber(this.scanner.getCurrentTokenEndPosition(), this.lineEnds, scannerLine>1 ? scannerLine-2 : 0, this.maxLines);", "+\t\t\t\t\t\tif (hasTextOnFirstLine == 1) {", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\thasTextOnFirstLine = -1;", "+\t\t\t\t\t\t}", "-\t\t\tscannerLine = lineNumber;", "-\t\t\tlastTextLine = lineNumber;", "-    \t\tif (hasTextOnFirstLine == 0 && scannerLine == firstLine) {", "-    \t\t\thasTextOnFirstLine = 1;", "-    \t\t\ttextOnFirstLine = true;", "+    \t\tif (hasTextOnFirstLine == 0) {", "+    \t\t\tif (firstLine == lineNumber) {", "+\t    \t\t\thasTextOnFirstLine = 1;", "+\t    \t\t\tthis.column++; // include first space", "+\t    \t\t} else {", "+\t    \t\t\thasTextOnFirstLine = -1;", "+\t    \t\t}", "-    \t\tif (previousToken == -1 || insertSpace) lastColumn++;", "+    \t\tif (insertSpace) lastColumn++;", "-\t\t\t\tboolean alreadyHasNewLine = !bufferHasTokens && tokensBuffer.length() > 0 && multiLines;", "+\t\t\t\t// not enough space on the line", "+\t\t\t\tif (hasTextOnFirstLine == 1) {", "+\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t}", "-\t\t\t\t\tif (buffer.length() == 0) {", "-\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t}", "-\t\t\t\t\talreadyHasNewLine = false;", "-\t\t\t\t// not enough space on the line", "-\t\t\t\tif (!alreadyHasNewLine) {", "+\t\t\t\tif (bufferHasTokens) {", "-\t\t\t\t\tif (!bufferHasTokens) {", "-\t\t\t\t\t\ttextOnFirstLine = false;", "-\t\t\t\t\t}", "+\t\t\t\thasTextOnFirstLine = -1;", "+\t\t\tscannerLine = lineNumber;", "+\t\t\tlastTextLine = lineNumber;", "-\t\t\tif ((hasMultiLines || multiLines) && hasTextOnFirstLine == 1 && textOnFirstLine) {", "-\t\t\t\tint col = this.column;", "-\t\t\t\treplacement.append(this.lineSeparator);", "-\t\t\t\tthis.column = 1;", "-\t\t\t\tprintIndentationIfNecessary(replacement);", "-\t\t\t\tif (buffer.charAt(0) == ' ') {", "-\t\t\t\t\treplacement.append(' ');", "-\t\t\t\t\treplacement.append('*');", "-\t\t\t\t} else {", "+\t\t\tif (hasTextOnFirstLine == 1) {", "+\t\t\t\tif ((hasMultiLines || multiLines)) {", "+\t\t\t\t\tint col = this.column;", "+\t\t\t\t\treplacement.append(this.lineSeparator);", "+\t\t\t\t\tthis.column = 1;", "+\t\t\t\t\tprintIndentationIfNecessary(replacement);", "-\t\t\t\t\tthis.column++;", "+\t\t\t    \tthis.column = col;", "+\t\t\t\t} else {", "+\t\t\t\t\treplacement.append(' ');", "-\t\t    \tthis.column = col;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc4ca217c6563b01766396205476156", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["+\t\tboolean hasMultiLines = false;", "-\t\tboolean hastTextOnFirstLine = false;", "+\t\tboolean bufferHasTokens = false;", "+\t\tint hasTextOnFirstLine = 0;", "+\t\tboolean textOnFirstLine = false;", "-\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tbufferHasTokens = true;", "+\t\t\t\t\t\tif (!textOnFirstLine && multiLines) {", "+\t\t\t\t\t\t\ttextOnFirstLine = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\tmultiLines = true;", "+\t\t\t\t\t\thasMultiLines = true;", "-\t\t\t\t\t\tif (multiLines) {", "+\t\t\t\t\t\tif (multiLines || hasMultiLines) {", "+\t\t\t\t\t\tbufferHasTokens = true;", "-    \t\tif (!hastTextOnFirstLine && scannerLine == firstLine) {", "-    \t\t\thastTextOnFirstLine = true;", "+    \t\tif (hasTextOnFirstLine == 0 && scannerLine == firstLine) {", "+    \t\t\thasTextOnFirstLine = 1;", "+    \t\t\ttextOnFirstLine = true;", "-    \t\t", "+", "+\t\t\t\tboolean alreadyHasNewLine = !bufferHasTokens && tokensBuffer.length() > 0 && multiLines;", "+\t\t\t\t\talreadyHasNewLine = false;", "-\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t    \tthis.column = 1;", "-\t\t    \tprintIndentationIfNecessary(buffer);", "-\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "-\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\tif (!alreadyHasNewLine) {", "+\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.column = 1;", "+\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\t\tif (!bufferHasTokens) {", "+\t\t\t\t\t\ttextOnFirstLine = false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbufferHasTokens = true;", "-\t\t\tif (multiLines) {", "-\t\t\t\tif (/*clearBlankLines || */(hasTokens && hastTextOnFirstLine)) {", "-\t\t\t\t\tint col = this.column;", "-\t\t\t\t\treplacement.append(this.lineSeparator);", "-\t\t\t\t\tthis.column = 1;", "-\t\t\t\t\tprintIndentationIfNecessary(replacement);", "-\t\t\t\t\tif (buffer.charAt(0) == ' ') {", "-\t\t\t\t\t\treplacement.append(' ');", "-\t\t\t\t\t\treplacement.append('*');", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treplacement.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t}", "-\t\t\t    \tthis.column = col;", "+\t\t\tif ((hasMultiLines || multiLines) && hasTextOnFirstLine == 1 && textOnFirstLine) {", "+\t\t\t\tint col = this.column;", "+\t\t\t\treplacement.append(this.lineSeparator);", "+\t\t\t\tthis.column = 1;", "+\t\t\t\tprintIndentationIfNecessary(replacement);", "+\t\t\t\tif (buffer.charAt(0) == ' ') {", "+\t\t\t\t\treplacement.append(' ');", "+\t\t\t\t\treplacement.append('*');", "+\t\t\t\t} else {", "+\t\t\t\t\treplacement.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\tthis.column++;", "+\t\t    \tthis.column = col;"]}], "num": 20381}
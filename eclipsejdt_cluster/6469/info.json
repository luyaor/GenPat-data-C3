{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a3b115c4fd9e6c4402f318fd199397b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03092cc9bb0761b128f74e7192468dc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "834e812ce170c841e2ca1bd37b0a1867199e9deb", "commitAfterChange": "e38a942b0cca2839307765a944e57ea5009b2155", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void changed(IJavaElement element, int changeFlag)", "signatureAfterChange": " public JavaElementDelta changed(IJavaElement element, int changeFlag)", "diff": ["-public void changed(IJavaElement element, int changeFlag) {", "+public JavaElementDelta changed(IJavaElement element, int changeFlag) {", "+\treturn changedDelta;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ca65a8015f5dfdf1bedbb94e710c341", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected void openWhenClosed(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " protected OpenableElementInfo openWhenClosed(IProgressMonitor pm) throws JavaModelException", "diff": ["-protected void openWhenClosed(IProgressMonitor pm) throws JavaModelException {", "+protected OpenableElementInfo openWhenClosed(IProgressMonitor pm) throws JavaModelException {", "-", "+\t\t", "+\t\treturn info;", "+\t} catch (JavaModelException e) {", "-\t} catch (JavaModelException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "439145a288f5808b3952a842cf523be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "5bb2bc7f924033ac90ef06377adaf6e8028c136c", "commitAfterChange": "ef1e5cb9e8f1ed367497f33911cb9848dee28aa7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tprotected void verifyComments(String fileName, char[] source)", "signatureAfterChange": " \t \tprotected CompilationUnit verifyComments(String fileName, char[] source)", "diff": ["-\tprotected void verifyComments(String fileName, char[] source) {", "+\tprotected CompilationUnit verifyComments(String fileName, char[] source) {", "-\t\t", "-//\t\tif (this.comments.size() == size) {", "-\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\tComment comment = (Comment) unitComments.get(i);", "-\t\t\t\tList tags = (List) allTags.get(i);", "-\t\t\t\t// Verify flattened content", "-\t\t\t\tString stringComment = (String) this.comments.get(i);", "-\t//\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "-\t//\t\t\tcomment.accept(printer);", "-\t\t\t\tString text = new String(testedSource, comment.getStartPosition(), comment.getLength());", "-\t\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\t// Verify javdoc tags positions and bindings", "-\t\t\t\tif (comment.isDocComment()) {", "-\t\t\t\t\tJavadoc docComment = (Javadoc)comment;", "-\t\t\t\t\tif (this.docCommentSupport.equals(JavaCore.ENABLED)) {", "-\t\t\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "-\t\t\t\t\t\tverifyPositions(docComment, testedSource);", "-\t\t\t\t\t\tif (this.resolveBinding) {", "-\t\t\t\t\t\t\tverifyBindings(docComment);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tassumeEquals(\"Javadoc should be flat!\", 0, docComment.tags().size());", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tComment comment = (Comment) unitComments.get(i);", "+\t\t\tList tags = (List) allTags.get(i);", "+\t\t\t// Verify flattened content", "+\t\t\tString stringComment = (String) this.comments.get(i);", "+//\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "+//\t\t\tcomment.accept(printer);", "+\t\t\tString text = new String(testedSource, comment.getStartPosition(), comment.getLength());", "+\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "+\t\t\t// Verify javdoc tags positions and bindings", "+\t\t\tif (comment.isDocComment()) {", "+\t\t\t\tJavadoc docComment = (Javadoc)comment;", "+\t\t\t\tif (this.docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "+\t\t\t\t\tverifyPositions(docComment, testedSource);", "+\t\t\t\t\tif (this.resolveBinding) {", "+\t\t\t\t\t\tverifyBindings(docComment);", "+\t\t\t\t} else {", "+\t\t\t\t\tassumeEquals(\"Javadoc should be flat!\", 0, docComment.tags().size());", "-//\t\t}", "+\t\t}", "+", "+\t\t// Return compilation unit for possible further verifications", "+\t\treturn compilUnit;"]}], "num": 6469}
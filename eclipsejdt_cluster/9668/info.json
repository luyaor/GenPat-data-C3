{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4281f9781d26bc6cc74b968433a5d166", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825852b5bd15a1b6d6bee35a2b72b3a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3ff7b81bced83cc6ffeee9cd4ddf361110eeeb98", "commitAfterChange": "25f2a2d3f2ea6a2ed84c0af6dba49f7f2a42eab8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tboolean forAnonymousType)", "signatureAfterChange": "\r \r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tboolean forAnonymousType)", "diff": ["-\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\t\tMethodBinding constructor = methods[f];\r", "-\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\t\r", "-\t\t\t\tif (constructor.isSynthetic()) continue next;\r", "+\t\tif(methods != null) {\r", "+\t\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\t\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\t\t\tMethodBinding constructor = methods[f];\r", "+\t\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\tif (options.checkVisibility\r", "-\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope)) continue next;\r", "-\r", "-\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\t\tint paramLength = parameters.length;\r", "-\t\t\t\tif (minArgLength > paramLength)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t\t}\r", "-\t\t\t\tchar[][] parameterNames = findMethodParameterNames(constructor,parameterTypeNames);\r", "-\t\t\t\t\r", "-\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "-\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\t\tif (source == null\r", "-\t\t\t\t\t|| source.length <= endPosition\r", "-\t\t\t\t\t|| source[endPosition] != ')')\r", "-\t\t\t\t\tcompletion = new char[] { ')' };\r", "-\t\t\t\t\r", "-\t\t\t\tint relevance = DEFAULTRELEVANCE;\r", "-\t\t\t\t\r", "-\t\t\t\tif(forAnonymousType){\r", "-\t\t\t\t\trequestor.acceptAnonymousType(\r", "-\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\t\tparameterNames,\r", "-\t\t\t\t\t\tcompletion,\r", "-\t\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\trelevance);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\trequestor.acceptMethod(\r", "-\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\t\tparameterNames,\r", "-\t\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\t\tcompletion,\r", "-\t\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\tendPosition - offset,\r", "-\t\t\t\t\t\trelevance);\r", "+\t\t\t\t\tif (constructor.isSynthetic()) continue next;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\tif (options.checkVisibility\r", "+\t\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope)) continue next;\r", "+\t\r", "+\t\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\t\t\tint paramLength = parameters.length;\r", "+\t\t\t\t\tif (minArgLength > paramLength)\r", "+\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "+\t\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "+\t\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "+\t\t\t\t\t\t\t\tcontinue next;\r", "+\t\r", "+\t\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "+\t\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tchar[][] parameterNames = findMethodParameterNames(constructor,parameterTypeNames);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "+\t\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\t\t\tif (source == null\r", "+\t\t\t\t\t\t|| source.length <= endPosition\r", "+\t\t\t\t\t\t|| source[endPosition] != ')')\r", "+\t\t\t\t\t\tcompletion = new char[] { ')' };\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tint relevance = DEFAULTRELEVANCE;\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tif(forAnonymousType){\r", "+\t\t\t\t\t\trequestor.acceptAnonymousType(\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\t\t\t\tparameterPackageNames,\r", "+\t\t\t\t\t\t\tparameterTypeNames,\r", "+\t\t\t\t\t\t\tparameterNames,\r", "+\t\t\t\t\t\t\tcompletion,\r", "+\t\t\t\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\trelevance);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\trequestor.acceptMethod(\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\t\t\t\tparameterPackageNames,\r", "+\t\t\t\t\t\t\tparameterTypeNames,\r", "+\t\t\t\t\t\t\tparameterNames,\r", "+\t\t\t\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\t\t\t\tcompletion,\r", "+\t\t\t\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\tendPosition - offset,\r", "+\t\t\t\t\t\t\trelevance);\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56d0296fb05382c4f6dc102caa58694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void acceptSearchMatch(SearchMatch searchMatch) throws CoreException", "signatureAfterChange": " \t\tpublic void acceptSearchMatch(SearchMatch searchMatch) throws CoreException", "diff": ["-\t\t\twriteLineToResult();", "+\t\t\tif (line != null) {", "+\t\t\t\twriteLineToResult();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb07e6854b2210f1f15b1242feedab03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tfor (int i = 0; i < max; i++)", "-\t\t\t\tindexedFileNames.put(paths[i], DELETED);", "+\t\t\tif (paths != null) {", "+\t\t\t\tfor (int i = 0; i < max; i++)", "+\t\t\t\t\tindexedFileNames.put(paths[i], DELETED);", "+\t\t\t}"]}], "num": 9668}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b12b5bf5992fee0f54f3eac55d4b9b40", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e39b6ceb5cd57ad66d1b05828cdece7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "cc2be5cbbfcf97c2ecd925e8c0703ec62b59bbc4", "commitAfterChange": "da1b268914409ccc196058300ff04e7c889248e2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit)", "signatureAfterChange": "  \tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit)", "diff": ["-\t\t\t\t\tSystem.arraycopy(className, 0, (constantPoolName = new char[classNameLength + 3]), 2, classNameLength);", "-\t\t\t\t\tconstantPoolName[0] = '[';", "-\t\t\t\t\tconstantPoolName[1] = 'L';", "-\t\t\t\t\tconstantPoolName[classNameLength + 2] = ';';", "+\t\t\t\t\tif (className[0] != '[') {", "+\t\t\t\t\t\t// this is a type name (class or interface). So we add appropriate '[', 'L' and ';'.", "+\t\t\t\t\t\tSystem.arraycopy(className, 0, (constantPoolName = new char[classNameLength + 3]), 2, classNameLength);", "+\t\t\t\t\t\tconstantPoolName[0] = '[';", "+\t\t\t\t\t\tconstantPoolName[1] = 'L';", "+\t\t\t\t\t\tconstantPoolName[classNameLength + 2] = ';';", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// if class name is already an array, we just need to add one dimension", "+\t\t\t\t\t\tSystem.arraycopy(className, 0, (constantPoolName = new char[classNameLength + 1]), 1, classNameLength);", "+\t\t\t\t\t\tconstantPoolName[0] = '[';", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3feda64f8fd9fbf1cc4f8cbe47de3bfc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "3b5e3bffb50578beec025e97315d017361527518", "commitAfterChange": "5c86bd5e83cfca7ff5f98996f0b172644cacbee7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "signatureAfterChange": "\r public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "diff": ["-\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type \r", "-\t\t\t\t\t\t// and add space for \") \"\r", "-\t\t\t\t\t\tresultLength -= 2;\r", "+\t\t\t\t\t\tif (paramCount > 0) {\r", "+\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and remove space that is going to be added for \", \" after return type \r", "+\t\t\t\t\t\t\t// and add space for \") \"\r", "+\t\t\t\t\t\t\tresultLength -= 2;\r", "+\t\t\t\t\t\t} //else\r", "+\t\t\t\t\t\t\t// remove space that is going to be added for \", \" after return type \r", "+\t\t\t\t\t\t\t// and add space for \") \"\r", "+\t\t\t\t\t\t\t// -> noop\r", "-\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"\r", "-\t\t\t\t\t\tresultLength--;\r", "+\t\t\t\t\t\tif (paramCount > 0) {\r", "+\t\t\t\t\t\t\t// remove space for \", \" that was added with last parameter and add space for \")\"\r", "+\t\t\t\t\t\t\tresultLength--;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// add space for \")\"\r", "+\t\t\t\t\t\t\tresultLength++;\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f5f63e99cb0f9c290de1b769172a5e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bd3a3cad1ce734989fe638578b24f55571172fd2", "commitAfterChange": "adc07cf3b793a0c93fc3ffa3b36d812e63e0ed07", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "diff": ["-\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\tcreateNonGenericTypeSignature(", "-\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\tCLASS));", "+\t\t\t\tchar[] signature = ", "+\t\t\t\t\tcreateNonGenericTypeSignature(", "+\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\tCLASS);", "+\t\t\t\tif (this.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t// add type argument", "+\t\t\t\t\tchar[] typeArgument = getTypeSignature(receiverType);", "+\t\t\t\t\tint oldLength = signature.length;", "+\t\t\t\t\tint argumentLength = typeArgument.length;", "+\t\t\t\t\tint newLength = oldLength + argumentLength + 2;", "+\t\t\t\t\tSystem.arraycopy(signature, 0, signature = new char[newLength], 0, oldLength - 1);", "+\t\t\t\t\tsignature[oldLength - 1] = '<';", "+\t\t\t\t\tSystem.arraycopy(typeArgument, 0, signature, oldLength , argumentLength);", "+\t\t\t\t\tsignature[newLength - 2] = '>';", "+\t\t\t\t\tsignature[newLength - 1] = ';';", "+\t\t\t\t}", "+\t\t\t\tproposal.setSignature(signature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a2fcada4eca68753323255f777eb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \t\r \tprivate char[][] computeNames(char[] sourceName, boolean forArray)", "signatureAfterChange": "\r \t\r \tprivate char[][] computeNames(char[] sourceName, boolean forArray)", "diff": ["-\t\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 1], 0, length);\r", "-\t\t\t\t\t\tname[length] = 's';\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t\r", "+\t\t\t\t\t\tif (name[length-1] == 's'){\r", "+\t\t\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 2], 0, length);\r", "+\t\t\t\t\t\t\tname[length] = 'e';\r", "+\t\t\t\t\t\t\tname[length+1] = 's';\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 1], 0, length);\r", "+\t\t\t\t\t\t\tname[length] = 's';\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\t\t\t\t\t\r", "-\t\t\tnames[nameCount++] = CharOperation.toLowerCase(sourceName);\r", "+\t\t\tchar[] name = CharOperation.toLowerCase(sourceName);\r", "+\t\t\tif(forArray) {\r", "+\t\t\t\tint length = name.length;\r", "+\t\t\t\tif (name[length-1] == 's'){\r", "+\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 2], 0, length);\r", "+\t\t\t\t\tname[length] = 'e';\r", "+\t\t\t\t\tname[length+1] = 's';\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tSystem.arraycopy(name, 0, name = new char[length + 1], 0, length);\r", "+\t\t\t\t\tname[length] = 's';\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\t\t\r", "+\t\t\tnames[nameCount++] = name;\r", "+\t\t\t\r"]}], "num": 61561}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdccb9140fba843cc475db8b201b8dcc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12875052a8dfb7ee90c8a19f17428787", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "460abf470b71772c6f8d4a0fe1b345129a0a6a80", "commitAfterChange": "f1ecb4b2d8ea593a495f1608bdd4d8fccb10a732", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["+\t\tCompilationUnit compilationUnit = ast.newCompilationUnit();", "+\t\t\t\tRecordedParsingInformation recordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\t\t\tint[][] comments = recordedParsingInformation.commentPositions;", "+\t\t\t\tif (comments != null) {", "+\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "+\t\t\t\t}", "+\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block, codeSnippetParsingUtil);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, block, recordedParsingInformation);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "+\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn compilationUnit;", "+\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "+\t\t\t\tif (comments != null) {", "+\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "+\t\t\t\t}", "+\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2, codeSnippetParsingUtil);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "+\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn compilationUnit;", "+\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "+\t\t\t\tif (comments != null) {", "+\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "+\t\t\t\t}", "+\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration, codeSnippetParsingUtil);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "+\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn compilationUnit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5e6da1d274b44cc7b8cb55e9d03999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "57f884c272281a5aa1631c056927fac25c267ffd", "commitAfterChange": "13d88a2db10e3a34264b75313001b46a5abddbdd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static CodeFormatter createCodeFormatter(Map options, int mode)", "signatureAfterChange": " \tpublic static CodeFormatter createCodeFormatter(Map options, int mode)", "diff": ["+\t\tString formatterId = (String) options.get(JavaCore.JAVA_FORMATTER);", "+\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,", "+\t\t\t\tJavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);", "+\t\tif (extension != null) {", "+\t\t\tIExtension[] extensions = extension.getExtensions();", "+\t\t\tfor (int i = 0; i < extensions.length; i++) {", "+\t\t\t\tIConfigurationElement[] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\tfor (int j = 0; j < configElements.length; j++) {", "+\t\t\t\t\tString initializerID = configElements[j].getAttribute(\"id\"); //$NON-NLS-1$", "+\t\t\t\t\tif (initializerID != null && initializerID.equals(formatterId)) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (execExt instanceof CodeFormatter) {", "+\t\t\t\t\t\t\t\tCodeFormatter formatter = (CodeFormatter) execExt;", "+\t\t\t\t\t\t\t\tformatter.setOptions(currentOptions);", "+\t\t\t\t\t\t\t\treturn formatter;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(e.getStatus());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,", "+\t\t\t\t\"Unable to instantiate formatter extension, returning built-in formatter.\"); //$NON-NLS-1$"]}], "num": 40339}
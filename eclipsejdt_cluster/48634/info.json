{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bd9a0a6584dd1a6452fa6ed061b15ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c33c870498576d5c213df30b8fe832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType)", "signatureAfterChange": " \tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType, boolean compact)", "diff": ["-\tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType) {", "-\t\tboolean isConstructor = CharOperation.equals(methodName, INIT);", "+\tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType, boolean compact) {", "+\t\tfinal boolean isConstructor = CharOperation.equals(methodName, INIT);", "-\t\tif (!isConstructor) {", "-\t\t\t// return type", "-\t\t\tif (includeReturnType) {", "-\t\t\t\tchar[] rts = Signature.getReturnType(methodSignature);", "-\t\t\t\tappendTypeSignature(rts, 0 , buffer);", "-\t\t\t\tbuffer.append(' ');", "+\t\t// decode declaring class name", "+\t\t// it can be either an array signature or a type signature", "+\t\tif (declaringClass.length > 0) {", "+\t\t\tchar[] declaringClassSignature = null;", "+\t\t\tif (declaringClass[0] == Signature.C_ARRAY) {", "+\t\t\t\tCharOperation.replace(declaringClass, '/', '.');", "+\t\t\t\tdeclaringClassSignature = Signature.toCharArray(declaringClass);", "+\t\t\t} else {", "+\t\t\t\tCharOperation.replace(declaringClass, '/', '.');", "+\t\t\t\tdeclaringClassSignature = declaringClass;", "+\t\t\t}", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('.', declaringClassSignature);", "+\t\t\tif (compact && lastIndexOfSlash != -1) {", "+\t\t\t\tbuffer.append(declaringClassSignature, lastIndexOfSlash + 1, declaringClassSignature.length - lastIndexOfSlash - 1);", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(declaringClassSignature);", "-\t\t", "+", "-\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', declaringClass);", "-\t\tif (lastIndexOfSlash != -1) {", "-\t\t\tbuffer.append(declaringClass, lastIndexOfSlash + 1, declaringClass.length - lastIndexOfSlash - 1);", "-\t\t} else {", "-\t\t\tbuffer.append(declaringClass);", "-\t\t}", "-\t", "-\t\t\tif (i == max - 1) {", "-\t\t\t\tappendTypeSignature(pts[i], 0 , buffer);", "-\t\t\t} else {", "-\t\t\t\tappendTypeSignature(pts[i], 0 , buffer);", "-\t\t\t}", "+\t\t\tappendTypeSignature(pts[i], 0 , buffer, compact);", "+\t\t", "+\t\tif (!isConstructor) {", "+\t\t\tbuffer.append(\" : \"); //$NON-NLS-1$", "+\t\t\t// return type", "+\t\t\tif (includeReturnType) {", "+\t\t\t\tchar[] rts = Signature.getReturnType(methodSignature);", "+\t\t\t\tappendTypeSignature(rts, 0 , buffer, compact);", "+\t\t\t\tbuffer.append(' ');", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7546e65b760ce7fa37efcc035430768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "af5208ad650bb16626635d58b15cab85ed3b6304", "commitAfterChange": "45055dc97c3da6c433b9c6b3534e9f01054887be", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " private void reportHierarchy(IType focus, CompilationUnitDeclaration parsedUnit, BinaryTypeBinding binaryTypeBinding)", "signatureAfterChange": " private void reportHierarchy(IType focus, CompilationUnitDeclaration parsedUnit, BinaryTypeBinding binaryTypeBinding)", "diff": ["+\t\t} else if (focus.isBinary()) {", "+\t\t\t// may have been resolved indirectly, should then be in type cache", "+\t\t\tchar[] fullyQualifiedName = focus.getFullyQualifiedName().toCharArray();", "+\t\t\tthis.focusType = this.lookupEnvironment.getCachedType(CharOperation.splitOn('.', fullyQualifiedName));", "+\t\t\tif (this.focusType == null) return;", "-\tfor (int current = typeIndex; current >= 0; current--) {", "-\t\tReferenceBinding typeBinding = typeBindings[current];", "+\tfor (int current = this.typeIndex; current >= 0; current--) {", "+\t\tReferenceBinding typeBinding = this.typeBindings[current];", "-\t\tIGenericType suppliedType = typeModels[current];", "+\t\tIGenericType suppliedType = this.typeModels[current];", "-\t\trequestor.connect(suppliedType, superclass, superinterfaces);", "+\t\tthis.requestor.connect(suppliedType, superclass, superinterfaces);", "-\t\trequestor.connect(typeModels[objectIndex], null, null);", "+\t\tthis.requestor.connect(this.typeModels[objectIndex], null, null);"]}], "num": 48634}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7509a8b8f84f7b81378b24701e0aa9c6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "096bb3c33414dc592fcd5c6f5389c802", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "5dba2fb9ff4a65e2ec3c984b606cb269bb911a06", "commitAfterChange": "de6638c19ddd648da6cdf9ca6437e426c1cc8e15", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": "  public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["+\tthis.constant = fieldBinding.constant();", "-\tboolean isStatic = fieldBinding.isStatic();", "-\tif (!isStatic) {", "+\tif (fieldBinding.isStatic()) {", "+\t\t// check if accessing enum static field in initializer", "+\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\tif (declaringClass.isEnum()) {", "+\t\t\tSourceTypeBinding sourceType = scope.enclosingSourceType();", "+\t\t\tif (this.constant == Constant.NotAConstant", "+\t\t\t\t\t&& !methodScope.isStatic", "+\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "+\t\t\t\tscope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "+\t\t\t}", "+\t\t}\t\t", "+\t} else {", "+\t\tif (scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "+\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t}\t\t", "-\t\t\tthis.constant = Constant.NotAConstant;", "-\tthis.constant = fieldBinding.constant();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "980e24d32c534ba68f9410f91812d0ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tTypeBinding typeBinding = type.resolveType(scope);", "+\t\tTypeBinding variableType = type.resolveType(scope);", "-\t\tif (typeBinding != null) {", "-\t\t\tif (typeBinding == VoidBinding) {", "+\t\tif (variableType != null) {", "+\t\t\tif (variableType == VoidBinding) {", "-\t\t\tif (typeBinding.isArrayType() && ((ArrayBinding) typeBinding).leafComponentType == VoidBinding) {", "+\t\t\tif (variableType.isArrayType() && ((ArrayBinding) variableType).leafComponentType == VoidBinding) {", "-\t\t\tbinding = new LocalVariableBinding(this, typeBinding, modifiers, false);", "+\t\t\tbinding = new LocalVariableBinding(this, variableType, modifiers, false);", "-\t\tif (typeBinding == null) {", "+\t\tif (variableType == null) {", "-\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, typeBinding);", "+\t\t\t\tTypeBinding initializationType = initialization.resolveTypeExpecting(scope, variableType);", "-\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "+\t\t\t\t\tinitialization.computeConversion(scope, variableType, initializationType);", "-\t\t\t\tTypeBinding initializationType = initialization.resolveType(scope);", "+\t\t\t    this.initialization.setExpectedType(variableType);", "+\t\t\t\tTypeBinding initializationType = this.initialization.resolveType(scope);", "-\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, typeBinding)", "-\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationType.id))", "-\t\t\t\t\t\t|| initializationType.isCompatibleWith(typeBinding))", "-\t\t\t\t\t\tinitialization.implicitWidening(typeBinding, initializationType);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, typeBinding, this);", "+\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initializationType, variableType)", "+\t\t\t\t\t\t|| (variableType.isBaseType() && BaseTypeBinding.isWidening(variableType.id, initializationType.id))", "+\t\t\t\t\t\t|| initializationType.isCompatibleWith(variableType)) {", "+\t\t\t\t\t\tthis.initialization.computeConversion(scope, variableType, initializationType);", "+\t\t\t\t\t\tif (initializationType.isRawType() && (variableType.isParameterizedType() || variableType.isGenericType())) {", "+\t\t\t\t\t\t\t    scope.problemReporter().unsafeRawAssignment(this.initialization, initializationType, variableType);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, variableType, this);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t? initialization.constant.castTo((typeBinding.id << 4) + initialization.constant.typeID())", "+\t\t\t\t\t\t? initialization.constant.castTo((variableType.id << 4) + initialization.constant.typeID())"]}], "num": 22221}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b42bcfc1c0d5e3a52d2d0ced5d566a76", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93def9d61521da50eee06e871ff80fe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7c0534e311ca23dad63801edecab8ecfaf54c055", "commitAfterChange": "f0126485e71d6e9762ea26c839590b2bf7e1a885", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public IndexBasedHierarchyBuilder(TypeHierarchy hierarchy, IJavaSearchScope scope) throws JavaModelException", "signatureAfterChange": "\r public IndexBasedHierarchyBuilder(TypeHierarchy hierarchy, IJavaSearchScope scope) throws JavaModelException", "diff": ["-\tthis.handleToWorkingCopy = new HashMap(1);\r", "-\tIType focusType = hierarchy.getType();\r", "-\torg.eclipse.jdt.core.ICompilationUnit handle;\r", "-\tif (focusType != null && (handle = focusType.getCompilationUnit()) != null && handle.isWorkingCopy()) {\r", "-\t\tthis.handleToWorkingCopy.put(handle.getOriginalElement(), handle); \r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aba23743214c82a0ef362d112cc3b6b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "671b0d581aa5d36230a5cb8553037f000c8d5afa", "commitAfterChange": "c5e4a396e5f97d1050138e25a4f2f263849bffc7", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " protected void consumeEnhancedForStatementHeader(boolean hasModifiers)", "signatureAfterChange": " protected void consumeEnhancedForStatementHeaderInit(boolean hasModifiers)", "diff": ["-protected void consumeEnhancedForStatementHeader(boolean hasModifiers){", "-\t// EnhancedForStatementHeader ::= 'for' '(' Type PushModifiers Identifier Dimsopt ':' Expression ')'", "-\t// EnhancedForStatementHeader ::= 'for' '(' Modifiers Type PushRealModifiers Identifier Dimsopt ':' Expression ')'", "+protected void consumeEnhancedForStatementHeaderInit(boolean hasModifiers) {", "-\t//updates are on the expression stack", "-\tthis.expressionLengthPtr--;", "-\tExpression collection = this.expressionStack[this.expressionPtr--];", "-\t", "-\t\t\tcollection,", "-\t", "+}", "-\t\tthis.problemReporter().invalidUsageOfForeachStatements(localDeclaration, collection);", "-\t}"]}], "num": 60260}
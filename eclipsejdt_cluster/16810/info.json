{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c839c08e8447e748f6bc38b32b877a23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71411201269c41f2e815024200e48351", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "commitAfterChange": "ffd0667b5086352f304c15ea4ad31de38892668e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(ArrayInitializer node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ArrayInitializer node)", "diff": ["-\t\tToken afterOpenBraceToken = this.tm.get(openBraceIndex + 1);", "-\t\tboolean isEmpty = afterOpenBraceToken.tokenType == TokenNameRBRACE;", "-\t\tif (isEmpty && this.options.keep_empty_array_initializer_on_one_line)", "-\t\t\treturn true;", "+\t\tboolean isEmpty = handleEmptyLinesIndentation(openBraceIndex);", "-\t\tToken openBraceToken = this.tm.get(openBraceIndex);", "-\t\thandleBracePosition(openBraceToken, closeBraceIndex, this.options.brace_position_for_array_initializer);", "+\t\tToken openBraceToken = this.tm.get(openBraceIndex);", "+\t\tToken closeBraceToken = this.tm.get(closeBraceIndex);", "+", "+\t\tif (!(node.getParent() instanceof ArrayInitializer)) {", "+\t\t\tToken afterOpenBraceToken = this.tm.get(openBraceIndex + 1);", "+\t\t\tfor (int i = 0; i < this.options.continuation_indentation_for_array_initializer; i++) {", "+\t\t\t\tafterOpenBraceToken.indent();", "+\t\t\t\tcloseBraceToken.unindent();", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (!isEmpty || !this.options.keep_empty_array_initializer_on_one_line)", "+\t\t\thandleBracePosition(openBraceToken, closeBraceIndex, this.options.brace_position_for_array_initializer);", "-\t\t\tToken closeBraceToken = this.tm.get(closeBraceIndex);", "-\t\t\tif (!(node.getParent() instanceof ArrayInitializer)) {", "-\t\t\t\tfor (int i = 0; i < this.options.continuation_indentation_for_array_initializer; i++) {", "-\t\t\t\t\tafterOpenBraceToken.indent();", "-\t\t\t\t\tcloseBraceToken.unindent();", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d8a37713afc412216d52f701679b36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "bb7b9521196186c5be108c1f350a453c12233137", "commitAfterChange": "871cac4ba4cecfc6322ce0af5777177652a514a9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void findTokensToWrap(InfixExpression node, int depth)", "signatureAfterChange": "  \tprivate void findTokensToWrap(InfixExpression node, int depth)", "diff": ["-\t\t\tif (this.options.wrap_before_binary_operator) {", "-\t\t\t\tint index = this.tm.firstIndexBefore(operand, -1);", "-\t\t\t\twhile (this.tm.get(index).isComment())", "-\t\t\t\t\tindex--;", "-\t\t\t\tassert node.getOperator().toString().equals(this.tm.toString(index));", "-\t\t\t\tthis.wrapIndexes.add(index);", "-\t\t\t} else {", "-\t\t\t\tthis.wrapIndexes.add(this.tm.firstIndexIn(operand, -1));", "+\t\t\tint indexBefore = this.tm.firstIndexBefore(operand, -1);", "+\t\t\twhile (this.tm.get(indexBefore).isComment())", "+\t\t\t\tindexBefore--;", "+\t\t\tassert node.getOperator().toString().equals(this.tm.toString(indexBefore));", "+\t\t\tint indexAfter = this.tm.firstIndexIn(operand, -1);", "+\t\t\tthis.wrapIndexes.add(this.options.wrap_before_binary_operator ? indexBefore : indexAfter);", "+", "+\t\t\tif (!this.options.join_wrapped_lines) {", "+\t\t\t\t// TODO there should be an option for never joining wraps on opposite side of the operator", "+\t\t\t\tif (this.options.wrap_before_binary_operator) {", "+\t\t\t\t\tif (this.tm.countLineBreaksBetween(this.tm.get(indexAfter - 1), this.tm.get(indexAfter)) > 0)", "+\t\t\t\t\t\tthis.wrapIndexes.add(indexAfter);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.tm.countLineBreaksBetween(this.tm.get(indexBefore), this.tm.get(indexBefore - 1)) > 0)", "+\t\t\t\t\t\tthis.wrapIndexes.add(indexBefore);", "+\t\t\t\t}"]}], "num": 16810}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f101cc6764a94669ff9ab6053b2ec41d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03034754506d043dd70a70467619948e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a875873381b5c93516e927c7a0f03c3097fc26b5", "commitAfterChange": "05ecd79653c57bf231b3199c70ed57222451b62a", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "diff": ["-\t\t// 'pos' can be before brace", "-\t\tRewriteEvent bodyEvent= getEvent(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "-\t\tif (bodyEvent != null && bodyEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "-\t\t\tRewriteEvent[] children= bodyEvent.getChildren();", "-\t\t\ttry {", "-\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "-\t\t\t\tif (nextTok == ITerminalSymbols.TokenNameRPAREN) { // ", "-\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "-\t\t\t\t\tnextTok= getScanner().readNext(pos, true);", "+\t\tif (isChanged(node, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY)) {", "+\t\t\tint kind= getChangeKind(node, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY);", "+\t\t\tif (kind == RewriteEvent.REMOVED) {", "+\t\t\t\ttry {", "+\t\t\t\t\t// 'pos' can be before brace", "+\t\t\t\t\tpos= getScanner().getPreviousTokenEndOffset(ITerminalSymbols.TokenNameLBRACE, pos);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\thandleException(e);", "-\t\t\t\tboolean hasBraces= (nextTok == ITerminalSymbols.TokenNameLBRACE);", "-\t\t\t\tboolean isAllRemoved= hasBraces && isAllOfKind(children, RewriteEvent.REMOVED);", "-\t\t\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "-\t\t\t\tif (!hasBraces) {", "-\t\t\t\t\tString prefix= this.formatter.ENUM_BODY_START.getPrefix(startIndent, getLineDelimiter());", "-\t\t\t\t\tdoTextInsert(pos, prefix, getEditGroup(children[0])); //$NON-NLS-1$", "-\t\t\t\t} else if (!isAllRemoved) {", "-\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "-\t\t\t\t}", "-", "-\t\t\t\tpos= rewriteParagraphList(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, pos, startIndent, 0, 0);", "-\t\t\t\t", "-\t\t\t\tif (!hasBraces) {", "-\t\t\t\t\tString suffix= this.formatter.ENUM_BODY_END.getPrefix(startIndent, getLineDelimiter());", "-\t\t\t\t\tdoTextInsert(pos, suffix, getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "-\t\t\t\t\tif (isAllRemoved) {", "-\t\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t\t} else {", "+\t\t\t\tpos= node.getStartPosition() + node.getLength(); // insert pos", "-\t\t} else {", "-\t\t\tdoVisit(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, 0);", "+\t\t\trewriteNode(node, EnumConstantDeclaration.ANONYMOUS_CLASS_DECLARATION_PROPERTY, pos, ASTRewriteFormatter.SPACE); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467a3375f9c7c8cf2a88b96d33cf8d4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "06b4da04864008da88066d5a5e945f628c432313", "commitAfterChange": "6cb1a46319677820636b0fbe76d096b92fe1835a", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \t \tprivate int rewriteTypeAnnotations(ASTNode node, ChildListPropertyDescriptor property, int pos)", "signatureAfterChange": " \t \tprivate int rewriteTypeAnnotations(ASTNode node, ChildListPropertyDescriptor property, int pos)", "diff": ["-\t\tRewriteEvent event = getEvent(node, property);", "-\t\tif (event == null || event.getChangeKind() == RewriteEvent.UNCHANGED) {", "-\t\t\treturn doVisit(node, property, pos);", "-\t\t}", "-\t\tRewriteEvent[] children = event.getChildren();", "-\t\tboolean isAllInsert = isAllOfKind(children, RewriteEvent.INSERTED);", "-\t\tboolean isAllRemove = isAllOfKind(children, RewriteEvent.REMOVED);", "-\t\tif (isAllInsert || isAllRemove) {", "-\t\t\ttry {", "-\t\t\t\tpos = getScanner().getNextStartOffset(pos, false);", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "-\t\t\t}", "-\t\t}", "- ", "-\t\tPrefix formatterPrefix = this.formatter.ANNOTATION_SEPARATION;", "- ", "-\t\tint endPos = new ModifierRewriter(formatterPrefix).rewriteList(node, property, pos, Util.EMPTY_STRING, \" \"); //$NON-NLS-1$ ", "- ", "-\t\ttry {", "-\t\t\tint nextPos = getScanner().getNextStartOffset(endPos, false);", "-\t\t\tRewriteEvent lastChild = children[children.length - 1];", "-\t\t\tboolean lastUnchanged = lastChild.getChangeKind() != RewriteEvent.UNCHANGED;", "- ", "-\t\t\tif (isAllRemove) {", "-\t\t\t\tdoTextRemove(endPos, nextPos - endPos, getEditGroup(lastChild));", "-\t\t\t\treturn nextPos;", "-\t\t\t} else if (isAllInsert || (nextPos == endPos && lastUnchanged)) {", "-\t\t\t\tdoTextInsert(endPos, formatterPrefix.getPrefix(getIndent(pos)), getEditGroup(lastChild));", "-\t\t\t}", "-\t\t} catch (CoreException e) {", "-\t\t\thandleException(e);", "-\t\t}", "-\t\treturn endPos;", "+\t\treturn rewriteModifiers2(node, property, pos);"]}], "num": 70741}
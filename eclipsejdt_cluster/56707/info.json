{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6199d16d372f61bdee4397cedfc85805", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5357e06921da61e419f8d59cbe156c7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b13429019b090f30d26aee60b98dad8c5cec7f49", "commitAfterChange": "e594b0497c0652be039b24eaf127db22d286fa72", "methodNumberBeforeChange": 224, "methodNumberAfterChange": 224, "signatureBeforeChange": " public void test217()", "signatureAfterChange": " public void test217()", "diff": ["+\tMap customOptions = getCompilerOptions();", "+\tcustomOptions.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingOverrideAnnotation,", "+\t\t\tCompilerOptions.ERROR);", "+\tcustomOptions.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation,", "+\t\t\tCompilerOptions.DISABLED);", "+\tString expectedOutput =", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "+\t\t\"\tvoid bar(MyConstructor constructor, Class<Ann> ann) {\\n\" +", "+\t\t\"\t         ^^^^^^^^^^^^^\\n\" +", "+\t\t\"MyConstructor is a raw type. References to generic type MyConstructor<V> should be parameterized\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "+\t\t\"\tconstructor.getAnnotation(ann).message();\\n\" +", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type MyConstructor. References to generic type MyConstructor<V> should be parameterized\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\"\tconstructor.getAnnotation(ann).message();\\n\" +", "+\t\t\"\t                               ^^^^^^^\\n\" +", "+\t\t\"The method message() is undefined for the type Annotation\\n\" +", "+\t\t\"----------\\n\";", "+    \ttrue,", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\tvoid bar(MyConstructor constructor, Class<Ann> ann) {\\n\" +", "-\t\t\"\t         ^^^^^^^^^^^^^\\n\" +", "-\t\t\"MyConstructor is a raw type. References to generic type MyConstructor<V> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tconstructor.getAnnotation(ann).message();\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type MyConstructor. References to generic type MyConstructor<V> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tconstructor.getAnnotation(ann).message();\\n\" +", "-\t\t\"\t                               ^^^^^^^\\n\" +", "-\t\t\"The method message() is undefined for the type Annotation\\n\" +", "-\t\t\"----------\\n\");", "+        null,", "+        customOptions,", "+        expectedOutput,", "+        JavacTestOptions.SKIP);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7eb1b5f80fc0d6f232a3d9bfa88049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "33b6ddc355225393e9c9a4c6f58c7187e9dd64c0", "commitAfterChange": "ac5139f97b2ef313a03ae57144bf0ffdd5bcb6f8", "methodNumberBeforeChange": 1082, "methodNumberAfterChange": 1082, "signatureBeforeChange": " public void test1054()", "signatureAfterChange": " public void test1054()", "diff": ["+\tMap customOptions = getCompilerOptions();", "+\t// check no unsafe type operation problem is issued", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportUncheckedTypeOperation, CompilerOptions.IGNORE);", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);", "-\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"\tClass clazz= X.class;\\n\" + ", "-\t\t\"\t^^^^^\\n\" + ", "-\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t", "-\tif (isJRELevel(AbstractCompilerTest.F_1_6|AbstractCompilerTest.F_1_7)) {", "-\t\texpectedOutput =", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tClass clazz= X.class;\\n\" + ", "-\t\t\t\"\t^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Annotation to Bar\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tMethod method= clazz.getMethod(\\\"bar\\\");\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getMethod(String, Class...) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t}", "-\t\t}, ", "-\t\texpectedOutput);", "+\t\t},", "+\t\texpectedOutput,", "+\t\tnull,", "+\t\ttrue,", "+\t\tcustomOptions);"]}], "num": 56707}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acf17fd2196c5df2e32a6067e9e3bc32", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "345607dfb0caa9c20bc0cf087771382d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "diff": ["-\t\t\tif (this.nullCheckTypes[i] == ASSIGN_TO_NONNULL)", "+\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == ASSIGN_TO_NONNULL)", "-\t\t\tswitch (this.nullCheckTypes[i]) {", "+\t\t\tswitch (this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) {", "-\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7b5e346520c2701024a145b9f643f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tswitch (checkType) {", "+\t// if reference is being recorded inside an assert, we will not raise redundant null check warnings", "+\tcheckType |= (this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING);", "+\tint checkTypeWithoutHideNullWarning = checkType & ~FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK;", "+\tswitch (checkTypeWithoutHideNullWarning) {", "-\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "+\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning"]}], "num": 3409}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c83eddc9a49c0892d7aef072207e540", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05bc9c14589464b022b70198cb6db78a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "1e5960a8e1d6d5a1af8d629bddab71c46e5ed5a1", "commitAfterChange": "0d665ff7724ca0a2df27fa238eee0ddf6c106c65", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testBug027079d() throws JavaModelException", "signatureAfterChange": " public void testBug027079d() throws JavaModelException", "diff": ["-\t\t\"public class X04 {\\r\\n\" + ", "-\t\t\"\\r\\n\" + ", "-\t\t\"/* disable-formatter */\\r\\n\" + ", "-\t\t\"void     foo(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      unformatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"/* enable-formatter */\\r\\n\" + ", "-\t\t\"void     bar(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      formatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"}\\r\\n\";", "+\t\t\"public class X04 {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/* disable-formatter */\\n\" + ", "+\t\t\"void     foo(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      unformatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"/* enable-formatter */\\n\" + ", "+\t\t\"void     bar(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      formatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"}\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d14535757cf0868ce062fbf9f63659e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "signatureAfterChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "diff": ["-\t\t\"  Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #2> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  Y1 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y1 {key=Lp7/A$288;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 {key=Lp7/A$315;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$269;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #2> {key=Lp7/A$233;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$216;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$174;} [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$125;} [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y1 {key=Lp7/A$57;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 {key=Lp7/A$84;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> {key=Lp7/A$38;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a95c0d371f0d9d08204cde523c200ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testJavadocTypeReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeReferenceWithJavadoc() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b7f31250d90ef8ea71aa1e30943ccf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test103()", "signatureAfterChange": " \tpublic void test103()", "diff": ["-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     4  new BX [27]\\n\" + ", "+\t\t\t\"     4  new BX [26]\\n\" + ", "-\t\t\t\"    11  invokespecial X(AX) [30]\\n\" + ", "+\t\t\t\"    11  invokespecial X(AX) [29]\\n\" + ", "-\t\t\t\"    16  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    19  checkcast BX [27]\\n\" + ", "-\t\t\t\"    22  ldc <String \\\"SUCC\\\"> [32]\\n\" + ", "-\t\t\t\"    24  invokevirtual BX.foo(java.lang.Object) : void  [36]\\n\" + ", "+\t\t\t\"    16  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    19  checkcast BX [26]\\n\" + ", "+\t\t\t\"    22  ldc <String \\\"SUCC\\\"> [31]\\n\" + ", "+\t\t\t\"    24  invokevirtual BX.foo(java.lang.Object) : void [33]\\n\" + ", "-\t\t\t\"    28  getfield X.t : AX [17]\\n\" + ", "-\t\t\t\"    31  checkcast BX [27]\\n\" + ", "-\t\t\t\"    34  ldc <String \\\"ESS\\\"> [38]\\n\" + ", "-\t\t\t\"    36  invokevirtual BX.bar(java.lang.Object) : void  [41]\\n\" + ", "+\t\t\t\"    28  getfield X.t : AX [16]\\n\" + ", "+\t\t\t\"    31  checkcast BX [26]\\n\" + ", "+\t\t\t\"    34  ldc <String \\\"ESS\\\"> [37]\\n\" + ", "+\t\t\t\"    36  invokevirtual BX.bar(java.lang.Object) : void [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3b8df03449aff88658d2aa6d24ddae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test17() throws JavaModelException", "signatureAfterChange": "  \tpublic void test17() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec45749dcbae03099323bd7fe099fe3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 509, "methodNumberAfterChange": 509, "signatureBeforeChange": " \tpublic void test505()", "signatureAfterChange": " \tpublic void test505()", "diff": ["-\t\t\t\"    1  invokespecial java.lang.Object() [13]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [12]\\n\" + ", "-\t\t\t\"     0  new X [2]\\n\" + ", "+\t\t\t\"     0  new X [1]\\n\" + ", "-\t\t\t\"     7  invokevirtual X.foo() : void  [25]\\n\" + ", "+\t\t\t\"     7  invokevirtual X.foo() : void [23]\\n\" + ", "-\t\t\t\"     0  new X$1 [29]\\n\" + ", "+\t\t\t\"     0  new X$1 [28]\\n\" + ", "-\t\t\t\"     5  invokespecial X$1(X) [32]\\n\" + ", "-\t\t\t\"     8  invokevirtual X$1.run() : void  [35]\\n\" + ", "-\t\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [41]\\n\" + ", "+\t\t\t\"     5  invokespecial X$1(X) [30]\\n\" + ", "+\t\t\t\"     8  invokevirtual X$1.run() : void [33]\\n\" + ", "+\t\t\t\"    11  getstatic java.lang.System.out : java.io.PrintStream [36]\\n\" + ", "-\t\t\t\"    15  getfield X.e : XA [43]\\n\" + ", "+\t\t\t\"    15  getfield X.e : XA [42]\\n\" + ", "-\t\t\t\"    19  getstatic XB.CONST : XB [49]\\n\" + ", "-\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [55]\\n\" + ", "+\t\t\t\"    19  getstatic XB.CONST : XB [44]\\n\" + ", "+\t\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.Object) : void [50]\\n\" + ", "-\t\t\t\"    [inner class info: #29 X$1, outer class info: #0\\n\" + ", "+\t\t\t\"    [inner class info: #28 X$1, outer class info: #0\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52241e94aaeb358d8867b8fa21e364d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testModifiers4()", "signatureAfterChange": " \tpublic void testModifiers4()", "diff": ["-\t\t\t\"    public abstract void foo2() default {}\\n\" +", "-\t\t\t\"    abstract void foo3() default {}\\n\" +", "+\t\t\t\"    public abstract default void foo2() {}\\n\" +", "+\t\t\t\"    default abstract void foo3() {}\\n\" +", "-\t\t\t\"    abstract static void foo5() default {}\\n\" + // double fault", "+\t\t\t\"    abstract static default void foo5() {}\\n\" + // double fault", "-\t\t\t\"\tpublic abstract void foo2() default {}\\n\" +", "-\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"\tpublic abstract default void foo2() {}\\n\" +", "+\t\t\t\"\t                             ^^^^^^\\n\" +", "-\t\t\t\"\tabstract void foo3() default {}\\n\" +", "-\t\t\t\"\t              ^^^^^^\\n\" +", "+\t\t\t\"\tdefault abstract void foo3() {}\\n\" +", "+\t\t\t\"\t                      ^^^^^^\\n\" +", "-\t\t\t\"\tabstract static void foo5() default {}\\n\" +", "-\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"\tabstract static default void foo5() {}\\n\" +", "+\t\t\t\"\t                             ^^^^^^\\n\" +", "-\t\t\t\"\tabstract static void foo5() default {}\\n\" +", "-\t\t\t\"\t                     ^^^^^^\\n\" +", "+\t\t\t\"\tabstract static default void foo5() {}\\n\" +", "+\t\t\t\"\t                             ^^^^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "544be68d1617ebc58b9bc5b98a20aa14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean examineIsDeprecated()", "signatureAfterChange": " \tprivate boolean examineIsDeprecated()", "diff": ["-\t\t\treportError(\"Couldn't find targets.model.pc.Deprecation\");", "+\t\t\treportError(\"examineIsDeprecated: Couldn't find targets.model.pc.Deprecation\");", "-\t\t\treportError(\"Could not find methods Deprecation.deprecatedMethod() or Deprecation.nonDeprecatedMethod()\");", "+\t\t\treportError(\"examineIsDeprecated: Could not find methods Deprecation.deprecatedMethod() or Deprecation.nonDeprecatedMethod()\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.nonDeprecatedMethod()) is true\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.nonDeprecatedMethod()) is true\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.deprecatedMethod()) is false\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.deprecatedMethod()) is false\");", "-\t\t\treportError(\"Could not find methods Deprecation.deprecatedClass() or Deprecation.nonDeprecatedClass()\");", "+\t\t\treportError(\"examineIsDeprecated: Could not find methods Deprecation.deprecatedClass() or Deprecation.nonDeprecatedClass()\");", "-\t\t\treportError(\"Could not find methods Deprecation.deprecatedInterface() or Deprecation.nonDeprecatedInterface()\");", "+\t\t\treportError(\"examineIsDeprecated: Could not find methods Deprecation.deprecatedInterface() or Deprecation.nonDeprecatedInterface()\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.nonDeprecatedClass()) is true\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.nonDeprecatedClass()) is true\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.deprecatedClass()) is false\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.deprecatedClass()) is false\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.nonDeprecatedInterface()) is true\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.nonDeprecatedInterface()) is true\");", "-\t\t\treportError(\"ElementUtils.isDeprecated(Deprecation.deprecatedInterface()) is false\");", "+\t\t\treportError(\"examineIsDeprecated: ElementUtils.isDeprecated(Deprecation.deprecatedInterface()) is false\");", "-\t\t\treportError(\"Couldn't find class Deprecation.deprecatedClass\");", "+\t\t\treportError(\"examineIsDeprecated: Couldn't find class Deprecation.deprecatedClass\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671a4e3282689aa62eb0043c5ebbdc7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test15() throws JavaModelException", "signatureAfterChange": "  \tpublic void test15() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"xxx [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"str [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"xxx [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"str [in foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745352acbc3159830794888cc681718c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "39c04e5947532a22e7e082ea87ed1c7845ce5adf", "commitAfterChange": "e34fd8dbeae4d175b812e7f54b2f2a030a5d0200", "methodNumberBeforeChange": 1167, "methodNumberAfterChange": 1167, "signatureBeforeChange": " public void test1139()", "signatureAfterChange": " public void test1139()", "diff": ["-\t\t\t\"package p;\\r\\n\" + ", "-\t\t\t\"import p.X.Super;\\r\\n\" + ", "-\t\t\t\"import static p.Top.*;\\r\\n\" + ", "-\t\t\t\"\\r\\n\" + ", "-\t\t\t\"class Top<T> {\\r\\n\" + ", "-\t\t\t\"\tstatic class A<U> {}\\r\\n\" + ", "-\t\t\t\"}\\r\\n\" + ", "-\t\t\t\"\\r\\n\" + ", "-\t\t\t\"public class X extends Super<A<X>> {\\r\\n\" + ", "-\t\t\t\"\tstatic class Super<T> extends Top<T>{\\r\\n\" + ", "-\t\t\t\"\t}\\r\\n\" + ", "+\t\t\t\"package p;\\n\" + ", "+\t\t\t\"import p.X.Super;\\n\" + ", "+\t\t\t\"import static p.Top.*;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"class Top<T> {\\n\" + ", "+\t\t\t\"\tstatic class A<U> {}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X extends Super<A<X>> {\\n\" + ", "+\t\t\t\"\tstatic class Super<T> extends Top<T>{\\n\" + ", "+\t\t\t\"\t}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8138e0b5a2d26ad0f189333fc12899ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test027()", "signatureAfterChange": " public void test027()", "diff": ["-\t\t\"     1  anewarray java/lang/Object [4]\\n\" + ", "+\t\t\"     1  anewarray java.lang.Object [4]\\n\" + ", "-\t\t\"     6  astore [local_4]\\n\" + ", "+\t\t\"     6  astore 4\\n\" + ", "-\t\t\"     9  istore_2 [local_2]\\n\" + ", "-\t\t\"    10  aload [local_4]\\n\" + ", "+\t\t\"     9  istore_2\\n\" + ", "+\t\t\"    10  aload 4\\n\" + ", "-\t\t\"    13  istore_3 [local_3]\\n\" + ", "+\t\t\"    13  istore_3\\n\" + ", "-\t\t\"    27  iload_2 [local_2]\\n\" + ", "-\t\t\"    28  iload_3 [local_3]\\n\" + ", "+\t\t\"    27  iload_2\\n\" + ", "+\t\t\"    28  iload_3\\n\" + ", "-\t\t\"    32  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    32  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    37  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    37  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 41] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 5, pc: 41] local: array index: 1 type: [Ljava/lang/Object;\\n\";", "+\t\t\"        [pc: 0, pc: 41] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 5, pc: 41] local: array index: 1 type: java.lang.Object[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8763d48377c90b9a2b9fd76684bb8994", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void test016()", "signatureAfterChange": " public void test016()", "diff": ["-\t\t\"     9  astore [local_4]\\n\" + ", "+\t\t\"     9  astore 4\\n\" + ", "-\t\t\"    12  istore_2 [local_2]\\n\" + ", "-\t\t\"    13  aload [local_4]\\n\" + ", "+\t\t\"    12  istore_2\\n\" + ", "+\t\t\"    13  aload 4\\n\" + ", "-\t\t\"    16  istore_3 [local_3]\\n\" + ", "+\t\t\"    16  istore_3\\n\" + ", "-\t\t\"    20  iinc 2 1 [local_2]\\n\" + ", "-\t\t\"    23  iload_2 [local_2]\\n\" + ", "-\t\t\"    24  iload_3 [local_3]\\n\" + ", "+\t\t\"    20  iinc 2 1\\n\" + ", "+\t\t\"    23  iload_2\\n\" + ", "+\t\t\"    24  iload_3\\n\" + ", "-\t\t\"    28  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    33  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 37] local: tab index: 1 type: [I\\n\";", "+\t\t\"        [pc: 0, pc: 37] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 37] local: tab index: 1 type: int[]\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87833eeb608f180315aa3be7a1347f88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testStringAnyStrings05() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d97d656f15c638e7093affcfb9d403", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-\t\t\t\"  // Method descriptor  #8 ()[LColor;\\n\" + ", "+\t\t\t\"  // Method descriptor #8 ()[LColor;\\n\" + ", "-\t\t\t\"  // Method descriptor  #13 ()[LFoo;\\n\" + ", "+\t\t\t\"  // Method descriptor #13 ()[LFoo;\\n\" + ", "-\t\t\t\"  // Method descriptor  #16 ()[I\\n\" + ", "+\t\t\t\"  // Method descriptor #16 ()[I\\n\" + ", "-\t\t\t\"  // Method descriptor  #19 ()[B\\n\" + ", "+\t\t\t\"  // Method descriptor #19 ()[B\\n\" + ", "-\t\t\t\"  // Method descriptor  #22 ()[S\\n\" + ", "+\t\t\t\"  // Method descriptor #22 ()[S\\n\" + ", "-\t\t\t\"  // Method descriptor  #25 ()[J\\n\" + ", "+\t\t\t\"  // Method descriptor #25 ()[J\\n\" + ", "-\t\t\t\"  // Method descriptor  #29 ()[Ljava/lang/String;\\n\" + ", "+\t\t\t\"  // Method descriptor #29 ()[Ljava/lang/String;\\n\" + ", "-\t\t\t\"  // Method descriptor  #32 ()[Z\\n\" + ", "+\t\t\t\"  // Method descriptor #32 ()[Z\\n\" + ", "-\t\t\t\"  // Method descriptor  #34 ()[F\\n\" + ", "+\t\t\t\"  // Method descriptor #34 ()[F\\n\" + ", "-\t\t\t\"  // Method descriptor  #37 ()[D\\n\" + ", "+\t\t\t\"  // Method descriptor #37 ()[D\\n\" + ", "-\t\t\t\"  // Method descriptor  #41 ()[Ljava/lang/Class;\\n\" + ", "+\t\t\t\"  // Method descriptor #41 ()[Ljava/lang/Class;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8cc6528dce4cd6758a5d4ef5a1b8519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testJavadocTypeReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeReference() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [j1.JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a908b321d5a91b0caad7a9c9f037a803", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entry [Table.Entry] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entry [Table.Entry] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1586596fbb600c8901222325295f401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void testMultipleParameterizedStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleParameterizedStringPattern05() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<Exception, Exception, RuntimeException>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric<? extends Throwable, ? extends Exception, ? extends RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d769be767093a06d96d4f678e03e48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void test18() throws JavaModelException", "signatureAfterChange": "  \tpublic void test18() throws JavaModelException", "diff": ["-\t\t\t\"Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce82730e41be6000b6a8b73952e241c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"    14  new java.lang.Integer [20]\\n\" + ", "+\t\t\"    14  new java.lang.Integer [19]\\n\" + ", "-\t\t\"    19  invokespecial java.lang.Integer(int) [23]\\n\" + ", "-\t\t\"    22  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [27]\\n\" + ", "+\t\t\"    19  invokespecial java.lang.Integer(int) [21]\\n\" + ", "+\t\t\"    22  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean [24]\\n\" + ", "-\t\t\"    38  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator  [31]\\n\" + ", "+\t\t\"    38  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [28]\\n\" + ", "-\t\t\"    48  invokeinterface java.util.Iterator.next() : java.lang.Object  [37] [nargs: 1]\\n\" + ", "-\t\t\"    53  checkcast java.lang.Integer [20]\\n\" + ", "+\t\t\"    48  invokeinterface java.util.Iterator.next() : java.lang.Object [32] [nargs: 1]\\n\" + ", "+\t\t\"    53  checkcast java.lang.Integer [19]\\n\" + ", "-\t\t\"    59  invokevirtual java.lang.Integer.intValue() : int  [41]\\n\" + ", "+\t\t\"    59  invokevirtual java.lang.Integer.intValue() : int [38]\\n\" + ", "-\t\t\"    66  invokeinterface java.util.Iterator.hasNext() : boolean  [45] [nargs: 1]\\n\" + ", "+\t\t\"    66  invokeinterface java.util.Iterator.hasNext() : boolean [42] [nargs: 1]\\n\" + ", "-\t\t\"    74  getstatic java.lang.System.out : java.io.PrintStream [51]\\n\" + ", "+\t\t\"    74  getstatic java.lang.System.out : java.io.PrintStream [46]\\n\" + ", "-\t\t\"    78  invokevirtual java.io.PrintStream.println(int) : void  [56]\\n\" + ", "+\t\t\"    78  invokevirtual java.io.PrintStream.println(int) : void [52]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5f856d5e4bb31e42133810a0074eefd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testSingleParameterizedStringPattern05() throws CoreException", "signatureAfterChange": " \tpublic void testSingleParameterizedStringPattern05() throws CoreException", "diff": ["-\t// TODO [search] try to have a better match selection", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g1.t\", true /* add all subpackages */);", "-\t\tsearch(\"Generic<Exception>.MemberGeneric\", TYPE, REFERENCES, scope, resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric<Exception>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric<? extends Throwable>] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric<Exception>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric<?>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97a0589f261cd9922a6123ad2a5f26d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "signatureAfterChange": " public void testFocusWithLocalAndAnonymousTypes() throws JavaModelException", "diff": ["-\t\t\"  Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  Object [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  Y1 {key=Lp7/A$288;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 {key=Lp7/A$315;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$269;} [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #2> {key=Lp7/A$233;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$216;} [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$174;} [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$125;} [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  Y1 {key=Lp7/A$57;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"    Y2 {key=Lp7/A$84;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "-\t\t\"  <anonymous #1> {key=Lp7/A$38;} [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\",", "+\t\t\"  Y1 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in foo() [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #2> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in field2 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in field1 [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in <initializer #2> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  Y1 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"    Y2 [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\" + ", "+\t\t\"  <anonymous #1> [in <initializer #1> [in A [in A.java [in p7 [in src [in TypeHierarchy]]]]]]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8150f3a4be22dd0443c21ffb21aa1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "775bb7e86633292b115b2935c87e101190166e9d", "commitAfterChange": "4a26249aa893b7bf1faa1e1388aeb96ba4c3a814", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"  // Method descriptor  #8 ()LColor;\\n\" + ", "+\t\t\t\"  // Method descriptor #8 ()LColor;\\n\" + ", "-\t\t\t\"  // Method descriptor  #13 ()LFoo;\\n\" + ", "+\t\t\t\"  // Method descriptor #13 ()LFoo;\\n\" + ", "-\t\t\t\"  // Method descriptor  #16 ()I\\n\" + ", "+\t\t\t\"  // Method descriptor #16 ()I\\n\" + ", "-\t\t\t\"  // Method descriptor  #19 ()B\\n\" + ", "+\t\t\t\"  // Method descriptor #19 ()B\\n\" + ", "-\t\t\t\"  // Method descriptor  #22 ()S\\n\" + ", "+\t\t\t\"  // Method descriptor #22 ()S\\n\" + ", "-\t\t\t\"  // Method descriptor  #25 ()J\\n\" + ", "+\t\t\t\"  // Method descriptor #25 ()J\\n\" + ", "-\t\t\t\"  // Method descriptor  #29 ()Ljava/lang/String;\\n\" + ", "+\t\t\t\"  // Method descriptor #29 ()Ljava/lang/String;\\n\" + ", "-\t\t\t\"  // Method descriptor  #32 ()Z\\n\" + ", "+\t\t\t\"  // Method descriptor #32 ()Z\\n\" + ", "-\t\t\t\"  // Method descriptor  #34 ()F\\n\" + ", "+\t\t\t\"  // Method descriptor #34 ()F\\n\" + ", "-\t\t\t\"  // Method descriptor  #37 ()D\\n\" + ", "+\t\t\t\"  // Method descriptor #37 ()D\\n\" + ", "-\t\t\t\"  // Method descriptor  #41 ()Ljava/lang/Class;\\n\" + ", "+\t\t\t\"  // Method descriptor #41 ()Ljava/lang/Class;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa58994e84ff6a82ef714b7158239ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " public void testTypeRefGenericsTest11_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest11_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends \ufffd|Object|\ufffd>, X<? super String>, X<? extends Exception>>,@56] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super \ufffd|String|\ufffd>, X<? extends Exception>>,@75] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, X<? extends \ufffd|Exception|\ufffd>>,@96] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends \ufffd|Object|\ufffd, ? super String, X<? extends Exception>>>,@125] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super \ufffd|String|\ufffd, X<? extends Exception>>>,@141] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, X<? extends \ufffd|Exception|\ufffd>>>,@161] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends \ufffd|Object|\ufffd, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@189] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super \ufffd|String|\ufffd>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends \ufffd|Exception|\ufffd>>, X<X<X<? extends java.io.Serializable>>>>,@230] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends \ufffd|java.io.Serializable|\ufffd>>>>,@259] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<X<? super \ufffd|String|\ufffd>>>>> z;@303] EXACT_MATCH\"", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends !|Object|!>, X<? super String>, X<? extends Exception>>,@56] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super !|String|!>, X<? extends Exception>>,@75] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, X<? extends !|Exception|!>>,@96] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends !|Object|!, ? super String, X<? extends Exception>>>,@125] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super !|String|!, X<? extends Exception>>>,@141] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, X<? extends !|Exception|!>>>,@161] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends !|Object|!, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@189] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super !|String|!>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends !|Exception|!>>, X<X<X<? extends java.io.Serializable>>>>,@230] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends !|java.io.Serializable|!>>>>,@259] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<X<? super !|String|!>>>>> z;@303] EXACT_MATCH\""]}], "num": 46966}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7677b532bf2fdc4c57091a5c2e935afc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cecf37a62b96e49e7e4aa5d7d8c2dec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "f64c781b520a5d04053021f1d2ec4228934d3094", "commitAfterChange": "f4cb909d55448a19964594cbb4a048da9d7e78f7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["+\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\tStringBuffer correctResult = new StringBuffer(70000);", "-\t\t\t\tint problemId = field.getInt(iProblemClass), maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "+\t\t\t\tint problemId = field.getInt(iProblemClass);", "+\t\t\t\tint maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "-\t\t\t\t\t\tSystem.out.println(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.CAT_UNSPECIFIED));\");", "+\t\t\t\t\t\tint actualCategory = ProblemReporter.getProblemCategory(ProblemSeverities.Error, problemId);", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\");", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", DEPRECATED);\\n\");", "+\t\t}", "+\t\tif (failures.length() > 0) {", "+\t\t\tSystem.out.println(correctResult);", "+\t\t\tSystem.out.println();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaff7ad22cc6e30e784e2fb7b0eead4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/comment/JavaDocRegion.java", "commitBeforeChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "commitAfterChange": "d789ada93846133166f6d4ecebd817b0acd80298", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate String postprocessCodeSnippet(String snippet, String indentation)", "signatureAfterChange": " \tprivate String postprocessCodeSnippet(String snippet, String indentation)", "diff": ["+\t\t// remove trailing spaces", "+\t\tint i= snippet.length();", "+\t\twhile (i > 0 && ' ' == snippet.charAt(i-1))", "+\t\t\ti--;", "+\t\tsnippet= snippet.substring(0, i);", "+\t\t", "-\t\tbuffer.append(getDelimiter());", "+\t\tString lineDelimiter= getDelimiter();", "+\t\tif (lineDelimiter != null && snippet.indexOf(lineDelimiter) != 0)", "+\t\t\tbuffer.append(lineDelimiter);", "-\t\tbuffer.append(getDelimiter());", "+\t\tif (lineDelimiter != null && snippet.lastIndexOf(lineDelimiter) != snippet.length() - lineDelimiter.length())", "+\t\t\tbuffer.append(lineDelimiter);"]}], "num": 25509}
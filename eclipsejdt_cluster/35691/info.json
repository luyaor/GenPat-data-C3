{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a5ed27d574282afc969ccd616dca67a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0abdccf84d1a7c63171fc861cd97047a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "commitAfterChange": "128a99659b73df0d65c1b7965233f291b8bbcedc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["-\tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope) {", "+\tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope) {", "-\t\t\tLambdaExpression copy = copy();", "+\t\t\tfinal LambdaExpression copy = copy();", "-\t\t\tfinal TypeBinding returnType = sam.returnType;", "-\t\t\tif (this.body instanceof Block) {", "-\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "-\t\t\t} else {", "-\t\t\t\tExpression expression = (Expression) copy.body;", "-\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "-\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\tif (this.returnExpressionsTally > 0) {", "+\t\t\t\tfinal TypeBinding returnType = sam.returnType;", "+\t\t\t\tif (this.resultExpressions == null)", "+\t\t\t\t\tthis.resultExpressions = new SimpleLookupTable(); // gather for more specific analysis later.", "+\t\t\t\tif (this.body instanceof Block) {", "+\t\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\t\tExpression [] returnExpressions = new Expression[LambdaExpression.this.returnExpressionsTally];", "+\t\t\t\t\t\tint returnExpressionsCount = 0;", "+\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "+\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "+\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "+\t\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t\t\t\t\tthis.returnExpressions[this.returnExpressionsCount++] = expression;", "+\t\t\t\t\t\t\treturn false; // should not analyze any lambda returns.m", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic void endVisit(Block block, BlockScope blockScope) {", "+\t\t\t\t\t\t\tif (block == copy.body)", "+\t\t\t\t\t\t\t\tLambdaExpression.this.resultExpressions.put(left, this.returnExpressions);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t};", "+\t\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "+\t\t\t\t} else if (this.body instanceof Expression){", "+\t\t\t\t\tExpression expression = (Expression) copy.body;", "+\t\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "+\t\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t\t\tthis.resultExpressions.put(left, new Expression [] { expression });", "+\t\t\t\t}", "-\t\t\t "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef64df7249e8dc383b0e8e30e2f43b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "e10de2c4a1110dda4676cb780e20b994bb7f5186", "commitAfterChange": "a2e726822a302fb831672b3e360423f88e9f5a4d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeArguments()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeArguments()", "diff": ["-\t\t// TODO (olivier) missing implementation of J2SE 1.5 language feature", "-\t\treturn NO_TYPE_BINDINGS;", "+\t\tif (this.typeArguments != null) {", "+\t\t\treturn this.typeArguments;", "+\t\t}", "+", "+\t\tif (this.binding instanceof ParameterizedGenericMethodBinding) {", "+\t\t\tParameterizedGenericMethodBinding genericMethodBinding = (ParameterizedGenericMethodBinding) this.binding;", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding[] typeArgumentsBindings = genericMethodBinding.typeArguments;", "+\t\t\tif (typeArgumentsBindings != null) {", "+\t\t\t\tint typeArgumentsLength = typeArgumentsBindings.length;", "+\t\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\t\tthis.typeArguments = new ITypeBinding[typeArgumentsLength];", "+\t\t\t\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "+\t\t\t\t\t\tthis.typeArguments[i] = this.resolver.getTypeBinding(typeArgumentsBindings[i]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t}", "+\t\treturn this.typeArguments;"]}], "num": 35691}
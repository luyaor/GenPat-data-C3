{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e344a34e848253c0123e029e89bd404", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44671be381841d966b5156e55f45234e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "1af26d01cfd72849d8c290dd25ccb7fc62852780", "commitAfterChange": "72895982cdfd43c6e856c9e0af3d1d64cc3e0181", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void attachSource(IPath zipPath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void attachSource(IPath sourcePath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException", "diff": ["-public void attachSource(IPath zipPath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException {", "-\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_ELEMENT_TYPES, this));", "+public void attachSource(IPath sourcePath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException {", "+\ttry {", "+\t\tverifyAttachSource(sourcePath);", "+\t\tif (monitor != null) {", "+\t\t\tmonitor.beginTask(Util.bind(\"element.attachingSource\"), 2); //$NON-NLS-1$", "+\t\t}", "+\t\tSourceMapper mapper= null;", "+\t\tSourceMapper oldMapper= getSourceMapper();", "+\t\tIWorkspace workspace= getJavaModel().getWorkspace();", "+\t\tboolean rootNeedsToBeClosed= false;", "+", "+\t\tif (sourcePath == null) {", "+\t\t\t//source being detached", "+\t\t\trootNeedsToBeClosed= true;", "+\t\t/* Disable deltas (see 1GDTUSD)", "+\t\t\t// fire a delta to notify the UI about the source detachement.", "+\t\t\tJavaModelManager manager = (JavaModelManager) JavaModelManager.getJavaModelManager();", "+\t\t\tJavaModel model = (JavaModel) getJavaModel();", "+\t\t\tJavaElementDelta attachedSourceDelta = new JavaElementDelta(model);", "+\t\t\tattachedSourceDelta .sourceDetached(this); // this would be a PackageFragmentRoot", "+\t\t\tmanager.registerResourceDelta(attachedSourceDelta );", "+\t\t\tmanager.fire(); // maybe you want to fire the change later. Let us know about it.", "+\t\t*/", "+\t\t} else {", "+\t\t/*", "+\t\t\t// fire a delta to notify the UI about the source attachement.", "+\t\t\tJavaModelManager manager = (JavaModelManager) JavaModelManager.getJavaModelManager();", "+\t\t\tJavaModel model = (JavaModel) getJavaModel();", "+\t\t\tJavaElementDelta attachedSourceDelta = new JavaElementDelta(model);", "+\t\t\tattachedSourceDelta .sourceAttached(this); // this would be a PackageFragmentRoot", "+\t\t\tmanager.registerResourceDelta(attachedSourceDelta );", "+\t\t\tmanager.fire(); // maybe you want to fire the change later. Let us know about it.", "+\t\t */", "+", "+\t\t\t//check if different from the current attachment", "+\t\t\tIPath storedSourcePath= getSourceAttachmentPath();", "+\t\t\tIPath storedRootPath= getSourceAttachmentRootPath();", "+\t\t\tif (monitor != null) {", "+\t\t\t\tmonitor.worked(1);", "+\t\t\t}", "+\t\t\tif (storedSourcePath != null) {", "+\t\t\t\tif (!(storedSourcePath.equals(sourcePath) && rootPath.equals(storedRootPath))) {", "+\t\t\t\t\trootNeedsToBeClosed= true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// check if source path is valid", "+\t\t\tObject target = JavaModel.getTarget(workspace.getRoot(), sourcePath, false);", "+\t\t\tif (target == null) {", "+\t\t\t\tif (monitor != null) {", "+\t\t\t\t\tmonitor.done();", "+\t\t\t\t}", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, sourcePath));", "+\t\t\t}", "+\t\t\tmapper= new SourceMapper(", "+\t\t\t\tsourcePath, ", "+\t\t\t\trootPath.toOSString(), ", "+\t\t\t\tthis.isExternal() ? JavaCore.getOptions() : this.getJavaProject().getOptions(true)); // only project options if associated with resource", "+\t\t}", "+\t\tsetSourceMapper(mapper);", "+\t\tif (sourcePath == null) {", "+\t\t\tsetSourceAttachmentProperty(null); //remove the property", "+\t\t} else {", "+\t\t\t//set the property to the path of the mapped source", "+\t\t\tsetSourceAttachmentProperty(sourcePath.toString() + ATTACHMENT_PROPERTY_DELIMITER + rootPath.toString());", "+\t\t}", "+\t\tif (rootNeedsToBeClosed) {", "+\t\t\tif (oldMapper != null) {", "+\t\t\t\toldMapper.close();", "+\t\t\t}", "+\t\t\tBufferManager manager= BufferManager.getDefaultBufferManager();", "+\t\t\tEnumeration openBuffers= manager.getOpenBuffers();", "+\t\t\twhile (openBuffers.hasMoreElements()) {", "+\t\t\t\tIBuffer buffer= (IBuffer) openBuffers.nextElement();", "+\t\t\t\tIOpenable possibleMember= buffer.getOwner();", "+\t\t\t\tif (isAncestorOf((IJavaElement) possibleMember)) {", "+\t\t\t\t\tbuffer.close();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (monitor != null) {", "+\t\t\t\tmonitor.worked(1);", "+\t\t\t}", "+\t\t}", "+\t} catch (JavaModelException e) {", "+\t\tsetSourceAttachmentProperty(null); // loose info - will be recomputed", "+\t\tthrow e;", "+\t} finally {", "+\t\tif (monitor != null) {", "+\t\t\tmonitor.done();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c93f74f6b6bd9d6645810849c6eea853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "a0257337cb36d5d795c1e219639fea5cf2131af9", "commitAfterChange": "9e089c23bb81bd6b2ecdf10310abd262d658f8a0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["+        // For -sourcepath, use the \"sourcepath\" value if present.", "+        // Otherwise default to the \"srcdir\" value.", "+        Path sourcepath = null;", "+        ", "+        // retrieve the method getSourcepath() using reflect", "+        // This is done to improve the compatibility to ant 1.5", "+        Class javacClass = Javac.class;", "+        Method getSourcepathMethod = null;", "+        try {", "+\t        getSourcepathMethod = javacClass.getMethod(\"getSourcepath\", null); //$NON-NLS-1$", "+        } catch(NoSuchMethodException e) {", "+        }", "+        Path compileSourcepath = null;", "+        if (getSourcepathMethod != null) {", "+\t \t\ttry {", "+\t\t\t\tcompileSourcepath = (Path) getSourcepathMethod.invoke(attributes, null);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t}", "+        }", "+        if (compileSourcepath != null) {", "+            sourcepath = compileSourcepath;", "+        } else {", "+            sourcepath = src;", "+        }", "+\t\tclasspath.append(sourcepath);", "+        String memoryParameterPrefix = Project.getJavaVersion().equals(Project.JAVA_1_1) ? \"-J-\" : \"-J-X\";//$NON-NLS-1$//$NON-NLS-2$", "+        if (memoryInitialSize != null) {", "+            if (!attributes.isForkedJavac()) {", "+                attributes.log(Util.bind(\"ant.jdtadapter.error.ignoringMemoryInitialSize\"), Project.MSG_WARN);//$NON-NLS-1$", "+            } else {", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"ms\" + memoryInitialSize); //$NON-NLS-1$", "+            }", "+        }", "+", "+        if (memoryMaximumSize != null) {", "+            if (!attributes.isForkedJavac()) {", "+                attributes.log(Util.bind(\"ant.jdtadapter.error.ignoringMemoryMaximumSize\"), Project.MSG_WARN);//$NON-NLS-1$", "+            } else {", "+                cmd.createArgument().setValue(memoryParameterPrefix", "+                                              + \"mx\" + memoryMaximumSize); //$NON-NLS-1$", "+            }", "+        }", "+", "+        if (debug) {", "+\t       // retrieve the method getSourcepath() using reflect", "+\t        // This is done to improve the compatibility to ant 1.5", "+\t        Method getDebugLevelMethod = null;", "+\t        try {", "+\t\t        getDebugLevelMethod = javacClass.getMethod(\"getDebugLevel\", null); //$NON-NLS-1$", "+\t        } catch(NoSuchMethodException e) {", "+\t        }", "+     \t    String debugLevel = null;", "+\t        if (getDebugLevelMethod != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(attributes, null);", "+\t\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\t}", "+        \t}", "+\t\t\tif (debugLevel != null) {", "+\t\t\t\tif (debugLevel.length() == 0) {", "+\t\t\t\t\tcmd.createArgument().setValue(\"-g:none\"); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tcmd.createArgument().setValue(\"-g:\" + debugLevel); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(\"-g\"); //$NON-NLS-1$", "+            }", "+        } else {", "+            cmd.createArgument().setValue(\"-g:none\"); //$NON-NLS-1$", "+        }", "+        ", "-\t\t * debug option", "-\t\t */", "-\t\tif (debug) {", "-\t\t\tcmd.createArgument().setValue(\"-g\"); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t/*", "+\t\t * source option", "+\t\t */", "+\t\tString source = attributes.getSource();", "+        if (source != null) {", "+            cmd.createArgument().setValue(\"-source\"); //$NON-NLS-1$", "+            cmd.createArgument().setValue(source);", "+        }", "+        ", "+\t\tif (Project.getJavaVersion().equals(Project.JAVA_1_4)) {", "+\t\t\tcmd.createArgument().setValue(\"-1.4\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tcmd.createArgument().setValue(\"-1.3\"); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t/*", "+\t\t * encoding option", "+\t\t */", "+        if (encoding != null) {", "+            cmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "+            cmd.createArgument().setValue(encoding);", "+        }", "+", "+\t\t/*", "-", "-\t\t/*", "-\t\t * source option", "-\t\t */", "-\t\tString source = attributes.getSource();", "-        if (source != null) {", "-            cmd.createArgument().setValue(\"-source\"); //$NON-NLS-1$", "-            cmd.createArgument().setValue(source);", "-        }", "-", "-\t\t/*", "-\t\t * encoding option", "-\t\t */", "-        if (encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "-            cmd.createArgument().setValue(encoding);", "-        }"]}], "num": 29058}
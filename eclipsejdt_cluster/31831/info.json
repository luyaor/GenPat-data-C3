{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1484869f05e709627f855305a124318d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ad90eb5cad69582ec23a999134d6729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "64298556651d81e68f8405c1642b36744d7373dd", "commitAfterChange": "b92bafecd030777e0d6056677f8286cf640a489f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void acceptType(char[] packageName, char[] typeName)", "signatureAfterChange": " \tpublic void acceptType(char[] packageName, char[] typeName)", "diff": ["-\t\tthis.requestor.acceptType(", "-\t\t\tpackageName,", "-\t\t\ttypeName,", "-\t\t\tcompletionName,", "-\t\t\tthis.startPosition - this.offset,", "-\t\t\tthis.endPosition - this.offset,", "-\t\t\trelevance);", "+\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\tproposal.setDeclarationSignature(packageName);", "+\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, typeName));", "+\t\t\tproposal.setPackageName(packageName);", "+\t\t\tproposal.setTypeName(typeName);", "+\t\t\tproposal.setCompletion(completionName);", "+\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\tproposal.setRelevance(relevance);", "+\t\t\tthis.requestor.accept(proposal);", "+\t\t\tif(DEBUG) {", "+\t\t\t\tthis.printDebug(proposal);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9231715c56349720c7b344ea2258fb87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void consumeTypeDeclarationsopt()", "signatureAfterChange": " protected void consumeAnnotationTypeDeclaration()", "diff": ["+protected void consumeAnnotationTypeDeclaration() {", "+\tint length;", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\t//there are length declarations", "+\t\t//dispatch according to the type of the declarations", "+\t\tdispatchDeclarationInto(length);", "+\t}", "+", "+\tTypeDeclaration typeDecl = (TypeDeclaration) this.astStack[this.astPtr];", "+\t", "+\t// mark initializers with local type mark if needed", "+\tmarkInitializersWithLocalType(typeDecl);", "+", "+\t//convert constructor that do not have the type's name into methods", "+\ttypeDecl.checkConstructors(this);", "+\t", "+\t//always add <clinit> (will be remove at code gen time if empty)", "+\tif (this.scanner.containsAssertKeyword) {", "+\t\ttypeDecl.bits |= ASTNode.AddAssertionMASK;", "+\t}", "+\ttypeDecl.addClinit();", "+\ttypeDecl.bodyEnd = this.endStatementPosition;", "+\tif (length == 0 && !containsComment(typeDecl.bodyStart, typeDecl.bodyEnd)) {", "+\t\ttypeDecl.bits |= ASTNode.UndocumentedEmptyBlockMASK;", "+\t}", "+\ttypeDecl.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition); ", "+}", "-}", "-protected void consumeTypeDeclarationsopt() {", "-\t// TypeDeclarationsopt ::= TypeDeclarations", "-\tint length;", "-\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tthis.astPtr -= length;", "-\t\tSystem.arraycopy(this.astStack, this.astPtr + 1, this.compilationUnit.types = new TypeDeclaration[length], 0, length);", "-\t}", "-}"]}], "num": 31831}
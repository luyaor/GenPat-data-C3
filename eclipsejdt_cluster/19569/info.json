{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73f04f44bc2d435c70e2733cbb3b6688", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04134a1aae16cd5580b105dc1faf6c07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "a094ff45a998c96b23832e90fdde401121899a47", "commitAfterChange": "7b6db9de192fc1976c0d12542fea77102668b433", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "signatureAfterChange": " public boolean needsUncheckedConversion(TypeBinding targetType)", "diff": ["+", "+\tif (this == targetType) return false;", "+\ttargetType = targetType.leafComponentType();", "+\tif (!(targetType instanceof ReferenceBinding)) ", "+\t\treturn false;", "+", "+\tTypeBinding currentType = this.leafComponentType();", "+\tif (!(currentType instanceof ReferenceBinding))", "+\t\treturn false;", "+\t", "+\tReferenceBinding compatible = ((ReferenceBinding)currentType).findSuperTypeErasingTo((ReferenceBinding)targetType.erasure());", "+\tif (compatible == null) ", "+\t\treturn false;", "+\tif (!compatible.isPartOfRawType()) return false;", "+\tdo {", "+\t\tif (compatible.isRawType() && (targetType.isBoundParameterizedType() || targetType.isGenericType())) {", "+\t\t\treturn true;", "+\t\t}", "+\t} while ((compatible = compatible.enclosingType()) != null && (targetType = targetType.enclosingType()) != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49088b470ee2f9ae228b5e96d7b7807f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t}", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t}", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo(expressionType.isTypeVariable() ? (ReferenceBinding)expressionType : (ReferenceBinding)expressionType.erasure());", "-\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f2c1147dab014d9cbdabfccc67b0c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\t\texpression.implicitWidening(castType, expressionType);", "+\t\t\t\t\texpression.computeConversion(scope, castType, expressionType);", "-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType) {", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType() == exprElementType) {", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "+\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\tif (!match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)) {", "+\t\t\t\t}", "+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\tif (!match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d419185f3b29d11df36171320cefa29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "8f43eabe1403ef4601307ecfeddf822a49b29c34", "commitAfterChange": "3091564ff71d95ca83672941f8a4ec3464344683", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic boolean boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\tif (this.superclass.id != T_JavaLangObject && !argumentType.isCompatibleWith(hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass)) {", "-\t\t    return false;", "+\t\tif (this.superclass.id != T_JavaLangObject) {", "+\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "+\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeErasingTo((ReferenceBinding)substitutedSuperType.erasure());", "+\t\t\t\tif (match != null){", "+\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return false;", "+\t\t\t}", "-\t        if (!argumentType.isCompatibleWith(hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i])) {", "-\t\t\t\treturn false;", "-\t        }", "+\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "+\t\t\tif (argumentType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceArgument = (ReferenceBinding) argumentType;", "+\t\t\t\tTypeBinding match = referenceArgument.findSuperTypeErasingTo((ReferenceBinding)substitutedSuperType.erasure());", "+\t\t\t\tif (match != null){", "+\t\t\t\t\t// Enum#RAW is not a substitute for <E extends Enum<E>> (86838)", "+\t\t\t\t\tif (match.isRawType() && !substitutedSuperType.isRawType())", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "+\t\t\t    return false;", "+\t\t\t}"]}], "num": 19569}
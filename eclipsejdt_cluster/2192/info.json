{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca64cf40fa86993c3dce745dba944c93", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e2306fa39b957719522e66c79e8409c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "bc3a64dfc18ca9208d47ca0c4c780501f11956e7", "commitAfterChange": "06fc8e7b57a6268383b5a97ff433bb4fd67804ef", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["+\t\t\t\tlength--;\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"structuralBuildNumbers table is inconsistent\"); //$NON-NLS-1$\r", "-\tkeyTable = references.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tif (keyTable[i] != null) {\r", "-\t\t\tString key = (String) keyTable[i];\r", "-\t\t\tout.writeUTF(key);\r", "-\t\t\tinternedLocations.add(key);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = references.keyTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tlength--;\r", "+\t\t\t\tString key = (String) keyTable[i];\r", "+\t\t\t\tout.writeUTF(key);\r", "+\t\t\t\tinternedLocations.add(key);\r", "+\t\t\t}\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"references table is inconsistent\"); //$NON-NLS-1$\r", "+\t\t\t\tlength--;\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"typeLocations table is inconsistent\"); //$NON-NLS-1$\r", "-\tkeyTable = references.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tif (keyTable[i] != null) {\r", "-\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "-\t\t\tReferenceCollection collection = (ReferenceCollection) valueTable[i];\r", "-\t\t\tif (collection instanceof AdditionalTypeCollection) {\r", "-\t\t\t\tout.writeByte(1);\r", "-\t\t\t\tAdditionalTypeCollection atc = (AdditionalTypeCollection) collection;\r", "-\t\t\t\twriteNames(atc.definedTypeNames, out);\r", "-\t\t\t} else {\r", "-\t\t\t\tout.writeByte(2);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = references.keyTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tlength--;\r", "+\t\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "+\t\t\t\tReferenceCollection collection = (ReferenceCollection) valueTable[i];\r", "+\t\t\t\tif (collection instanceof AdditionalTypeCollection) {\r", "+\t\t\t\t\tout.writeByte(1);\r", "+\t\t\t\t\tAdditionalTypeCollection atc = (AdditionalTypeCollection) collection;\r", "+\t\t\t\t\twriteNames(atc.definedTypeNames, out);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tout.writeByte(2);\r", "+\t\t\t\t}\r", "+\t\t\t\tchar[][][] qNames = collection.qualifiedNameReferences;\r", "+\t\t\t\tint qLength = qNames.length;\r", "+\t\t\t\tout.writeInt(qLength);\r", "+\t\t\t\tfor (int j = 0; j < qLength; j++)\r", "+\t\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));\r", "+\t\t\t\tchar[][] sNames = collection.simpleNameReferences;\r", "+\t\t\t\tint sLength = sNames.length;\r", "+\t\t\t\tout.writeInt(sLength);\r", "+\t\t\t\tfor (int j = 0; j < sLength; j++)\r", "+\t\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));\r", "-\t\t\tchar[][][] qNames = collection.qualifiedNameReferences;\r", "-\t\t\tint qLength = qNames.length;\r", "-\t\t\tout.writeInt(qLength);\r", "-\t\t\tfor (int j = 0; j < qLength; j++)\r", "-\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));\r", "-\t\t\tchar[][] sNames = collection.simpleNameReferences;\r", "-\t\t\tint sLength = sNames.length;\r", "-\t\t\tout.writeInt(sLength);\r", "-\t\t\tfor (int j = 0; j < sLength; j++)\r", "-\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));\r", "+\t\tif (JavaBuilder.DEBUG && length != 0)\r", "+\t\t\tSystem.out.println(\"references table is inconsistent\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93fe7f0f8061ae1dc819dda5dcd928da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["+\tint length;\r", "+\tObject[] keyTable;\r", "+\tObject[] valueTable;\r", "+\r", "+/*\r", "+ * byte\t\t\tVERSION\r", "+ * String\t\tproject name\r", "+ * int\t\t\t\tbuild number\r", "+ * int\t\t\t\tlast structural build number\r", "+ * String\t\toutput location\r", "+*/\r", "-\tint length = classpathLocations.length;\r", "-\tout.writeInt(length);\r", "+/*\r", "+ * Class path locations[]\r", "+ * int\t\t\t\tid\r", "+ * String\t\tpath(s)\r", "+*/\r", "+\tout.writeInt(length = classpathLocations.length);\r", "-\tlength = structuralBuildNumbers.size();\r", "-\tout.writeInt(length);\r", "+/*\r", "+ * Structural build numbers table\r", "+ * String\t\tprereq project name\r", "+ * int\t\t\t\tlast structural build number\r", "+*/\r", "+\tout.writeInt(length = structuralBuildNumbers.elementSize);\r", "-\t\tObject[] keyTable = structuralBuildNumbers.keyTable;\r", "-\t\tObject[] valueTable = structuralBuildNumbers.valueTable;\r", "+\t\tkeyTable = structuralBuildNumbers.keyTable;\r", "+\t\tvalueTable = structuralBuildNumbers.valueTable;\r", "+/*\r", "+ * String[]\t\tInterned locations\r", "+ */\r", "+\tout.writeInt(length = references.elementSize);\r", "+\tArrayList internedLocations = new ArrayList(length);\r", "+\tkeyTable = references.keyTable;\r", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\tif (keyTable[i] != null) {\r", "+\t\t\tString key = (String) keyTable[i];\r", "+\t\t\tout.writeUTF(key);\r", "+\t\t\tinternedLocations.add(key);\r", "+\t\t}\r", "+\t}\r", "+\r", "+/*\r", "+ * Type locations table\r", "+ * String\t\ttype name\r", "+ * int\t\t\t\tinterned location id\r", "+ */\r", "+\tout.writeInt(length = typeLocations.elementSize);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = typeLocations.keyTable;\r", "+\t\tvalueTable = typeLocations.valueTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tout.writeUTF((String) keyTable[i]);\r", "+\t\t\t\tout.writeInt(internedLocations.indexOf((String) valueTable[i]));\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+/*\r", "+ * char[][][]\tInterned qualified names\r", "+ * char[][]\t\tInterned simple names\r", "+ */\r", "-\tObject[] valueTable = references.valueTable;\r", "+\tvalueTable = references.valueTable;\r", "-\tlength = internedQualifiedNames.size();\r", "-\tout.writeInt(length);\r", "+\tout.writeInt(length = internedQualifiedNames.size());\r", "-\tlength = references.size();\r", "-\tout.writeInt(length);\r", "-\tObject[] keyTable = references.keyTable;\r", "+/*\r", "+ * References table\r", "+ * int\t\t\tinterned location id\r", "+ * ReferenceCollection\r", "+*/\r", "+\tout.writeInt(length = references.elementSize);\r", "+\tkeyTable = references.keyTable;\r", "-\t\t\tout.writeUTF((String) keyTable[i]);\r", "+\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "-\t\t\t\twriteNames(atc.additionalTypeNames, out);\r", "+\t\t\t\twriteNames(atc.definedTypeNames, out);\r"]}], "num": 2192}
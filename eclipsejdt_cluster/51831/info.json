{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9cb487b849375897a4d1c70b1d313af", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d94b585ac526492adfe52b112d766ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "ad5754fa1c59e0d3b15a306c1fd84679555621c3", "commitAfterChange": "4915e7337ff3d3a037d50fa25171594a7d1743a5", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\t\t\t\tboolean removeMethod2 = true;", "+\t\t\t\t\t\tboolean removeMethod = method.returnType == null && method2.returnType != null;", "+\t\t\t\t\t\t\tremoveMethod = true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (removeMethod) {", "+\t\t\t\t\t\t\tremoveMethod2 = false;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "-\t\t\t\t\tif (isEnumSpecialMethod)", "+\t\t\t\t\tif (isEnumSpecialMethod) {", "-\t\t\t\t\telse", "+\t\t\t\t\t\tremoveMethod2 = true;", "+\t\t\t\t\t} else {", "-\t\t\t\t\tmethod2Decl.binding = null;", "-\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "-\t\t\t\t\tif (resolvedMethods == this.methods)", "-\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "-\t\t\t\t\tresolvedMethods[j] = null;", "-\t\t\t\t\tfailed++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (removeMethod2) {", "+\t\t\t\t\t\tmethod2Decl.binding = null;", "+\t\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\t\tif (resolvedMethods == this.methods)", "+\t\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t\tresolvedMethods[j] = null;", "+\t\t\t\t\t\tfailed++;", "+\t\t\t\t\t}", "-\t\t\tif (method.returnType == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions", "+\t\t\tif (method.returnType == null && resolvedMethods[i] != null) { // forget method with invalid return type... was kept to detect possible collisions"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cea6687447fbec732b20e8b8d151966", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c31c921d319cbf1346e5bfb26cf42ff15297484d", "commitAfterChange": "2becf6dcab514ae8708935b2b42eed94f2bad821", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\tif (methodDecl == null) {", "-\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "-\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "-\t\t\t\t\t\tif (isEnumSpecialMethod) {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "-\t\t\t\t\t\tif (resolvedMethods == this.methods) {", "-\t\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresolvedMethods[i] = null;", "-\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tif (resolvedMethods == this.methods)", "-\t\t\t\t\t}", "-\t\t\t\tif (methodDecl != null) {", "+\t\t\t\tif (methodDecl != null)", "-\t\t\t\t}", "-\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\tif (resolvedMethods == this.methods)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c9674093069103e0ee33f73211fb5c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\t\t\t\tif (methodDecl == null) {", "+\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "+\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\tif (isEnumSpecialMethod)", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\tif (isEnumSpecialMethod) {", "+\t\t\t\t\tif (isEnumSpecialMethod)", "-\t\t\t\t\t} else {", "+\t\t\t\t\telse", "-\t\t\t\t\t}"]}], "num": 51831}
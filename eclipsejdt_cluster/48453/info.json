{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e68b5d1ada36188c37d5ae1e5f95eccf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f5ed4443b999f6f0c7d3df44348d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b26a664ac93cb33d6cf50930ea25f3388ced39d8", "commitAfterChange": "2253e00cb54fb5875d4cee131629e073f4dfe64f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif(this.completionToken.length == 0 &&", "+\t\t\t\t\t\t\t\t\t(astNodeParent instanceof ParameterizedSingleTypeReference ||", "+\t\t\t\t\t\t\t\t\t\t\tastNodeParent instanceof ParameterizedQualifiedTypeReference)) {", "+\t\t\t\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tfindParameterizedType((TypeReference)astNodeParent);", "+\t\t\t\t\t\t\t} else { ", "+\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(methodBindings != null &&", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.completionToken.length == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindAnnotationReference(annotation.type);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(methodBindings != null &&", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d15156214df993d43259a05512334cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "581bd48b0a44c3b24fd6cb58cd4506687e6bec7c", "commitAfterChange": "14eeb335b7a4f4b5dc293b65ac56b4b7f62e99e5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "diff": ["-}", "-void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod) {", "-\t// sent from checkMethods() to compare 2 inherited methods that are not 'equal'", "-", "-\t// the 2 inherited methods clash because of a parameterized type overrides a raw type", "-\t//\t\tinterface I { void foo(A a); }", "-\t//\t\tclass Y { void foo(A<String> a) {} }", "-\t//\t\tabstract class X extends Y implements I { }", "-\t//\t\tclass A<T> {}", "-\t// in this case the 2 inherited methods clash because of type variables", "-\t//\t\tinterface I { <T, S> void foo(T t); }", "-\t//\t\tclass Y { <T> void foo(T t) {} }", "-\t//\t\tabstract class X extends Y implements I {}", "-", "-\tif (inheritedMethod.declaringClass.isInterface() || inheritedMethod.isStatic()) return;", "-", "-\tdetectInheritedNameClash(inheritedMethod, otherInheritedMethod);", "+}", "+void checkInheritedMethods(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod) {", "+\t// sent from checkMethods() to compare 2 inherited methods that are not 'equal'", "+\tif (inheritedMethod.declaringClass.erasure() == otherInheritedMethod.declaringClass.erasure()) {", "+\t\tif (inheritedMethod.areParameterErasuresEqual(otherInheritedMethod)) {", "+\t\t\tproblemReporter().duplicateInheritedMethods(this.type, inheritedMethod, otherInheritedMethod);", "+\t\t\treturn;", "+\t\t}", "+\t} else if (inheritedMethod.declaringClass.findSuperTypeWithSameErasure(otherInheritedMethod.declaringClass) != null) {", "+\t\t// skip it if inheritedMethod is defined by a subtype of otherInheritedMethod declaringClass", "+\t\treturn;", "+\t}", "+", "+\t// the 2 inherited methods clash because of a parameterized type overrides a raw type", "+\t//\t\tinterface I { void foo(A a); }", "+\t//\t\tclass Y { void foo(A<String> a) {} }", "+\t//\t\tabstract class X extends Y implements I { }", "+\t//\t\tclass A<T> {}", "+\t// in this case the 2 inherited methods clash because of type variables", "+\t//\t\tinterface I { <T, S> void foo(T t); }", "+\t//\t\tclass Y { <T> void foo(T t) {} }", "+\t//\t\tabstract class X extends Y implements I {}", "+", "+\tif (inheritedMethod.declaringClass.isInterface() || inheritedMethod.isStatic()) return;", "+", "+\tdetectInheritedNameClash(inheritedMethod.original(), otherInheritedMethod.original());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf08f63e70e0249d785f71a5447a6ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "5187cb71342d8d32d1f10d4b7d2e17e30e573892", "commitAfterChange": "1e3d7a95c39c7aac1cb5e09a719efdb30a9bf701", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticMethod(MethodBinding targetMethod, boolean isSuperAccess)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticMethod(MethodBinding targetMethod, boolean isSuperAccess)", "diff": ["+\tif (accessMethod.parameters.length > 0xFF && targetMethod.isStatic()) {", "+\t\tthis.scope.problemReporter().tooManyParametersForSyntheticMethod(targetMethod.sourceMethod());", "+\t} else if (accessMethod.parameters.length >= 0xFF && targetMethod.isConstructor()) {", "+\t\tthis.scope.problemReporter().tooManyParametersForSyntheticMethod(targetMethod.sourceMethod());", "+\t}", "+"]}], "num": 48453}
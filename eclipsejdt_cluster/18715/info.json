{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7081986fa6304df9500de1570486c763", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019275bdffc2186c5342d009448193da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "d48c25cb976d99917f58b366198a77010dd2d678", "commitAfterChange": "e0794fcfb44a17efaa6223129a8b32f7f36f63a6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\t// If no referenced method (field initializer for example) then report a problem for each param tag", "+\t\t// If no referenced method (field initializer for example) then report a problem for each throws tag", "-\t\t\t// Verify that additional @throws tags are unchecked exception", "+\t\t\t// Verify additional @throws tags", "-\t\t\t\t\tif (!typeRef.resolvedType.isCompatibleWith(methScope.getJavaLangRuntimeException())", "-\t\t\t\t\t\t\t&& !typeRef.resolvedType.isCompatibleWith(methScope.getJavaLangError())) {", "+\t\t\t\t\tboolean compatible = false;", "+\t\t\t\t\t// thrown exceptions subclasses are accepted", "+\t\t\t\t\tfor (int j = 0; j<thrownExceptionSize && !compatible; j++) {", "+\t\t\t\t\t\tTypeBinding exceptionBinding = md.thrownExceptions[j].resolvedType;", "+\t\t\t\t\t\tif (exceptionBinding != null) {", "+\t\t\t\t\t\t\tcompatible = typeRef.resolvedType.isCompatibleWith(exceptionBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t", "+\t\t\t\t\t//  If not compatible only complain on unchecked exception", "+\t\t\t\t\tif (!compatible &&", "+\t\t\t\t\t\t !typeRef.resolvedType.isCompatibleWith(methScope.getJavaLangRuntimeException()) &&", "+\t\t\t\t\t\t !typeRef.resolvedType.isCompatibleWith(methScope.getJavaLangError())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ac45feb0817927b22315566210e0db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9047de642a4fe05a5bba1fa6d221ad8ba57bc55b", "commitAfterChange": "d6effcfe4a21d9ecb9e022e5dc306788e2e35beb", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "-\t\t\t\t\t\t\t\tif (original2.thrownExceptions == Binding.NO_EXCEPTIONS) {", "+\t\t\t\t\t\t\tif (current.thrownExceptions != next.thrownExceptions) {", "+\t\t\t\t\t\t\t\tif (next.thrownExceptions == Binding.NO_EXCEPTIONS) {", "-\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = current.thrownExceptions;", "-\t\t\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "+\t\t\t\t\t\t\t\t\tint nextLength = next.thrownExceptions.length;", "-\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "+\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < nextLength; s++) {", "+\t\t\t\t\t\t\t\t\t\t\tReferenceBinding nextException = next.thrownExceptions[s];", "+\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(nextException)) {", "-\t\t\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "+\t\t\t\t\t\t\t\t\t\t\t} else if (nextException.isCompatibleWith(exception)) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(nextException);"]}], "num": 18715}
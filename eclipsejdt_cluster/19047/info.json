{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2cc14811210b7fb0bcfbe0a6c0c8263", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585af0b288fced534b3833a48460b4bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "6e773ea4c55df4e5a88f22da754552e6139f2f62", "commitAfterChange": "33954bbbcb57410dd9650c66d085059854f2f0c2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void test019()", "signatureAfterChange": " \tpublic void test019()", "diff": ["-\t\t\t\"/* \\n\" + ", "-\t\t\t\" * Version (target 1.2) \\n\" + ", "-\t\t\t\" * - magic: CAFEBABE\\n\" + ", "-\t\t\t\" * - minor: 0\\n\" + ", "-\t\t\t\" * - major: 46\\n\" + ", "-\t\t\t\" */\\n\" + ", "-\t\t\t\"// Compiled from A.java\\n\" + ", "-\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "-\t\t\t\"  public A();\\n\" + ", "-\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "-\t\t\t\"    Code attribute:\\n\" + ", "-\t\t\t\"      0  aload_0\\n\" + ", "-\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "-\t\t\t\"      4  return\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"    Line number attribute:\\n\" + ", "-\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "-\t\t\t\"    Local variable table attribute:\\n\" + ", "-\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"      [pc: 5, pc: 29] local: i index: 2 type: int\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"}\";", "+\t\t\t\"      [pc: 5, pc: 29] local: i index: 2 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c320336c46d110e959f2cd5cde8201d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "8f5b67bd80ff7e72bd80828779ffdbdb5bad5276", "commitAfterChange": "50d8267275b181894c19c15246b42f9711f997ad", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \" Warning options:\\n\" +", "-        \"    -deprecation         + deprecation outside deprecated code\\n\" +", "-        \"    -nowarn -warn:none disable all warnings\\n\" +", "-        \"    -warn:<warnings separated by ,>    enable exactly the listed warnings\\n\" +", "-        \"    -warn:+<warnings separated by ,>   enable additional warnings\\n\" +", "-        \"    -warn:-<warnings separated by ,>   disable specific warnings\\n\" +", "-        \"      allDeadCode          dead code including trivial if(DEBUG) check\\n\" +", "-        \"      allDeprecation       deprecation including inside deprecated code\\n\" +", "-        \"      allJavadoc           invalid or missing javadoc\\n\" +", "-        \"      allOver-ann          all missing @Override annotations\\n\" +", "-        \"      assertIdentifier   + ''assert'' used as identifier\\n\" +", "-        \"      boxing               autoboxing conversion\\n\" +", "-        \"      charConcat         + char[] in String concat\\n\" +", "-        \"      compareIdentical   + comparing identical expressions\\n\" +", "-        \"      conditionAssign      possible accidental boolean assignment\\n\" +", "-        \"      constructorName    + method with constructor name\\n\" +", "-        \"      deadCode           + dead code excluding trivial if (DEBUG) check\\n\" +", "-        \"      dep-ann              missing @Deprecated annotation\\n\" +", "-        \"      deprecation        + deprecation outside deprecated code\\n\" +", "-        \"      discouraged        + use of types matching a discouraged access rule\\n\" +", "-        \"      emptyBlock           undocumented empty block\\n\" +", "+        \" Warning options:\\n\" + ", "+        \"    -deprecation         + deprecation outside deprecated code\\n\" + ", "+        \"    -nowarn -warn:none disable all warnings\\n\" + ", "+        \"    -warn:<warnings separated by ,>    enable exactly the listed warnings\\n\" + ", "+        \"    -warn:+<warnings separated by ,>   enable additional warnings\\n\" + ", "+        \"    -warn:-<warnings separated by ,>   disable specific warnings\\n\" + ", "+        \"      allDeadCode          dead code including trivial if(DEBUG) check\\n\" + ", "+        \"      allDeprecation       deprecation including inside deprecated code\\n\" + ", "+        \"      allJavadoc           invalid or missing javadoc\\n\" + ", "+        \"      allOver-ann          all missing @Override annotations\\n\" + ", "+        \"      assertIdentifier   + ''assert'' used as identifier\\n\" + ", "+        \"      boxing               autoboxing conversion\\n\" + ", "+        \"      charConcat         + char[] in String concat\\n\" + ", "+        \"      compareIdentical   + comparing identical expressions\\n\" + ", "+        \"      conditionAssign      possible accidental boolean assignment\\n\" + ", "+        \"      constructorName    + method with constructor name\\n\" + ", "+        \"      deadCode           + dead code excluding trivial if (DEBUG) check\\n\" + ", "+        \"      dep-ann              missing @Deprecated annotation\\n\" + ", "+        \"      deprecation        + deprecation outside deprecated code\\n\" + ", "+        \"      discouraged        + use of types matching a discouraged access rule\\n\" + ", "+        \"      emptyBlock           undocumented empty block\\n\" + ", "-        \"      enumSwitch           incomplete enum switch\\n\" +", "-        \"      fallthrough          possible fall-through case\\n\" +", "-        \"      fieldHiding          field hiding another variable\\n\" +", "-        \"      finalBound           type parameter with final bound\\n\" +", "-        \"      finally            + finally block not completing normally\\n\" +", "-        \"      forbidden          + use of types matching a forbidden access rule\\n\" +", "+        \"      enumSwitch           incomplete enum switch\\n\" + ", "+        \"      fallthrough          possible fall-through case\\n\" + ", "+        \"      fieldHiding          field hiding another variable\\n\" + ", "+        \"      finalBound           type parameter with final bound\\n\" + ", "+        \"      finally            + finally block not completing normally\\n\" + ", "+        \"      forbidden          + use of types matching a forbidden access rule\\n\" + ", "-        \"      hiding               macro for fieldHiding, localHiding, typeHiding and\\n\" +", "-        \"                           maskedCatchBlock\\n\" +", "-        \"      incomplete-switch    same as enumSwitch\\n\" +", "-        \"      indirectStatic       indirect reference to static member\\n\" +", "-        \"      intfAnnotation     + annotation type used as super interface\\n\" +", "-        \"      intfNonInherited   + interface non-inherited method compatibility\\n\" +", "+        \"      hiding               macro for fieldHiding, localHiding, typeHiding and\\n\" + ", "+        \"                           maskedCatchBlock\\n\" + ", "+        \"\t   includeAssertNull    raise null warnings for variables\\n\" + ", "+        \"\t\t\t\t\t\t\tthat got tainted in an assert expression\\n\" + ", "+        \"      incomplete-switch    same as enumSwitch\\n\" + ", "+        \"      indirectStatic       indirect reference to static member\\n\" + ", "+        \"      intfAnnotation     + annotation type used as super interface\\n\" + ", "+        \"      intfNonInherited   + interface non-inherited method compatibility\\n\" + ", "-        \"      javadoc              invalid javadoc\\n\" +", "-        \"      localHiding          local variable hiding another variable\\n\" +", "-        \"      maskedCatchBlock   + hidden catch block\\n\" +", "-        \"      nls                  string literal lacking non-nls tag //$NON-NLS-<n>$\\n\" +", "-        \"      noEffectAssign     + assignment without effect\\n\" +", "-        \"      null                 potential missing or redundant null check\\n\" +", "-        \"      nullDereference    + missing null check\\n\" +", "-        \"      over-ann             missing @Override annotation (superclass)\\n\" +", "-        \"      paramAssign          assignment to a parameter\\n\" +", "-        \"      pkgDefaultMethod   + attempt to override package-default method\\n\" +", "-        \"      raw                + usage of raw type\\n\" +", "-        \"      semicolon            unnecessary semicolon, empty statement\\n\" +", "-        \"      serial             + missing serialVersionUID\\n\" +", "-        \"      specialParamHiding   constructor or setter parameter hiding a field\\n\" +", "-        \"      static-access        macro for indirectStatic and staticReceiver\\n\" +", "-        \"      staticReceiver     + non-static reference to static member\\n\" +", "-        \"      super                overriding a method without making a super invocation\\n\" +", "+        \"      javadoc              invalid javadoc\\n\" + ", "+        \"      localHiding          local variable hiding another variable\\n\" + ", "+        \"      maskedCatchBlock   + hidden catch block\\n\" + ", "+        \"      nls                  string literal lacking non-nls tag //$NON-NLS-<n>$\\n\" + ", "+        \"      noEffectAssign     + assignment without effect\\n\" + ", "+        \"      null                 potential missing or redundant null check\\n\" + ", "+        \"      nullDereference    + missing null check\\n\" + ", "+        \"      over-ann             missing @Override annotation (superclass)\\n\" + ", "+        \"      paramAssign          assignment to a parameter\\n\" + ", "+        \"      pkgDefaultMethod   + attempt to override package-default method\\n\" + ", "+        \"      raw                + usage of raw type\\n\" + ", "+        \"      semicolon            unnecessary semicolon, empty statement\\n\" + ", "+        \"      serial             + missing serialVersionUID\\n\" + ", "+        \"      specialParamHiding   constructor or setter parameter hiding a field\\n\" + ", "+        \"      static-access        macro for indirectStatic and staticReceiver\\n\" + ", "+        \"      staticReceiver     + non-static reference to static member\\n\" + ", "+        \"      super                overriding a method without making a super invocation\\n\" + ", "-        \"                           When used with -err:, it can also silent optional\\n\" +", "-        \"                           errors and warnings\\n\" +", "-        \"\t   suppressAssertNull   suppress null warnings for variables\\n\" +", "-        \"\t\t\t\t\t\t\tthat got tainted in an assert expression\\n\" +", "-        \"      syncOverride         missing synchronized in synchr. method override\\n\" +", "-        \"      syntheticAccess      synthetic access for innerclass\\n\" +", "-        \"      tasks(<tags separated by |>) tasks identified by tags inside comments\\n\" +", "-        \"      typeHiding         + type parameter hiding another type\\n\" +", "-        \"      unchecked          + unchecked type operation\\n\" +", "-        \"      unnecessaryElse      unnecessary else clause\\n\" +", "-        \"      unqualifiedField     unqualified reference to field\\n\" +", "-        \"      unused               macro for unusedAllocation, unusedArgument,\\n\" +", "-        \"                               unusedImport, unusedLabel, unusedLocal,\\n\" +", "-        \"                               unusedPrivate, unusedThrown, and unusedTypeArgs\\n\" +", "-        \"      unusedAllocation     allocating an object that is not used\\n\" +", "-        \"      unusedArgument       unread method parameter\\n\" +", "-        \"      unusedImport       + unused import declaration\\n\" +", "-        \"      unusedLabel        + unused label\\n\" +", "-        \"      unusedLocal        + unread local variable\\n\" +", "-        \"      unusedPrivate      + unused private member declaration\\n\" +", "-        \"      unusedThrown         unused declared thrown exception\\n\" +", "-        \"      unusedTypeArgs     + unused type arguments for method\\n\" +", "-        \"      uselessTypeCheck     unnecessary cast/instanceof operation\\n\" +", "-        \"      varargsCast        + varargs argument need explicit cast\\n\" +", "-        \"      warningToken       + unsupported or unnecessary @SuppressWarnings\\n\" +", "-\t\t\"\\n\";", "+        \"                           When used with -err:, it can also silent optional\\n\" + ", "+        \"                           errors and warnings\\n\" + ", "+        \"\\n\";"]}], "num": 19047}
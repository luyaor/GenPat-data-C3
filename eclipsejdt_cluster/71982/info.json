{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "638bf61420ac14c3b41de7aa05160676", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90946f838e5b047287b3aa6e968c4692", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate boolean hasNewFiles(APTResult oldResult, APTResult newResult)", "signatureAfterChange": " \t \tprivate Set<IFile> cleanupAllGeneratedFilesFrom( \t\t\tIFile[] files, \t\t\tSet<IFile> deletedFiles)", "diff": ["-\tprivate boolean hasNewFiles(APTResult oldResult, APTResult newResult) {", "-\t\tSet<IFile> oldFiles = oldResult.getNewFiles();", "-\t\tSet<IFile> newFiles = newResult.getNewFiles();", "-\t\tfor (IFile file : newFiles) {", "-\t\t\tif (!oldFiles.contains(file)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t", "+\tprivate Set<IFile> cleanupAllGeneratedFilesFrom(", "+\t\t\tIFile[] files,", "+\t\t\tSet<IFile> deletedFiles){", "+\t\tif( deletedFiles == null )", "+\t\t\tdeletedFiles = new HashSet<IFile>();", "+\t\t", "+\t\tif( files != null ){", "+\t\t\tfor(IFile f : files ){\t\t\t\t", "+\t\t\t\tcleanupAllGeneratedFilesForParent( f, null, deletedFiles );", "+\t\t\t}", "+\t\t}", "+\t\treturn deletedFiles;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9563c1a4e716b323e22537fd9a01eff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "972920d1a43cd2d33dad1368881c9bfce5835a88", "commitAfterChange": "b8436cec91c88fa7fc7b0bd6dedc9fb67e331ccc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate synchronized boolean checkIntegrity() throws IllegalStateException", "signatureAfterChange": " \tprivate synchronized boolean checkIntegrity() throws IllegalStateException", "diff": ["+\t\t// Every file in _clearDuringReconcile must be a value in _buildDeps.", "+\t\tList<IFile> extraClearDuringReconcileFiles = new ArrayList<IFile>();", "+\t\tfor (IFile clearDuringReconcile : _clearDuringReconcile) {", "+\t\t\tif (!_buildDeps.containsValue(clearDuringReconcile)) {", "+\t\t\t\textraClearDuringReconcileFiles.add(clearDuringReconcile);", "+\t\t\t}", "+\t\t}", "+\t\tif (!extraClearDuringReconcileFiles.isEmpty()) {", "+\t\t\tlogExtraFiles(\"File(s) in list to clear during reconcile but not in build dependency map: \", //$NON-NLS-1$", "+\t\t\t\t\textraClearDuringReconcileFiles);", "+\t\t}", "+\t\t"]}], "num": 71982}
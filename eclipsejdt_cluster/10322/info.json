{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5dd4d48f9b1b5b4b308168b443e37765", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3312f011bb3a591ca59db5f3e8355495", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": "  \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\tnode.getType().accept(this);", "-\t\t", "+\t\tfinal ArrayType type = node.getType();", "-\t\tfor (int i = 0; i < dimensionsLength; i++) {", "-\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, false);", "-\t\t\tExpression dimension = (Expression) dimensions.get(i);", "-\t\t\tif (dimension != null) {", "-\t\t\t\tif (this.preferences.insert_space_after_opening_bracket_in_array_allocation_expression) {", "-\t\t\t\t\tthis.scribe.space();", "+", "+\t\tfinal int arrayTypeDimensions = type.getDimensions();", "+\t\ttype.getElementType().accept(this);", "+\t\tif (dimensionsLength != 0) {", "+\t\t\tfor (int i = 0; i < dimensionsLength; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression);", "+\t\t\t\tExpression dimension = (Expression) dimensions.get(i);", "+\t\t\t\tif (dimension != null) {", "+\t\t\t\t\tif (this.preferences.insert_space_after_opening_bracket_in_array_allocation_expression) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tdimension.accept(this);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_before_closing_bracket_in_array_allocation_expression);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_between_empty_brackets_in_array_allocation_expression);", "-\t\t\t\tdimension.accept(this);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_before_closing_bracket_in_array_allocation_expression);", "-\t\t\t} else {", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = arrayTypeDimensions - dimensionsLength; i < max; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET, this.preferences.insert_space_between_empty_brackets_in_array_allocation_expression);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int i = 0; i < arrayTypeDimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET, this.preferences.insert_space_before_opening_bracket_in_array_allocation_expression);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71435eafa6ba4430be82225c2616b80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "14f732df2ebf38799e02f8fe1c01b744e4189a6c", "commitAfterChange": "98ff89450e35e650c13ed556e5be341179e4b294", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static IMarker[] getProblemsFor(IResource resource)", "signatureAfterChange": "  public static IMarker[] getProblemsFor(IResource resource)", "diff": ["-\t\tif (resource != null && resource.exists())", "-\t\t\treturn resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\tif (resource != null && resource.exists()) {", "+\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_INFINITE);", "+\t\t\tSet markerTypes = JavaModelManager.getJavaModelManager().compilationParticipants.managedMarkerTypes();", "+\t\t\tif (markerTypes.isEmpty()) return markers;", "+\t\t\tArrayList markerList = new ArrayList(5);", "+\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\t\tmarkerList.add(markers[i]);", "+\t\t\t}", "+\t\t\tIterator iterator = markerTypes.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tmarkers = resource.findMarkers((String) iterator.next(), false, IResource.DEPTH_INFINITE);", "+\t\t\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\t\t\t\tmarkerList.add(markers[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tIMarker[] result;", "+\t\t\tmarkerList.toArray(result = new IMarker[markerList.size()]);", "+\t\t\treturn result;", "+\t\t}"]}], "num": 10322}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "606b7d63e0c01c3b572c3422529fd86b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6deb74f7fa8eb52a7cfa6f46ab5c9e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "e4f6d0091f68bf4b6ecb46943ad5d4d6a5ce0095", "commitAfterChange": "3a73dbc8d9839c0eb87857ef97f640371d15a626", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["+", "-\treturn \"JavaWorkspaceScope\"; //$NON-NLS-1$", "+\tStringBuffer result = new StringBuffer(\"JavaWorkspaceScope on \"); //$NON-NLS-1$", "+\tIPath[] paths = enclosingProjectsAndJars();", "+\tint length = paths == null ? 0 : paths.length;", "+\tif (length == 0) {", "+\t\tresult.append(\"[empty scope]\"); //$NON-NLS-1$", "+\t} else {", "+\t\tresult.append(\"[\"); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tresult.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\t\tresult.append(paths[i]);", "+\t\t}", "+\t\tresult.append(\"\\n]\"); //$NON-NLS-1$", "+\t}", "+\treturn result.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f7c5a4f708924bf27b118b2bd0f8420", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableTypeImpl.java", "commitBeforeChange": "80e40b4c60040fa0aa8e1c95f16e2597f3f0acf0", "commitAfterChange": "f9277e3d6f326ff6a770d54a63a8fe0127208bbc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getParameterTypes()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeMirror> getParameterTypes()", "diff": ["-\t\tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "-\t\tTypeBinding[] parameters = ((MethodBinding) this._binding).parameters;", "-\t\tif (parameters.length != 0) {", "+\t\tMethodBinding binding = (MethodBinding) this._binding;", "+\t\tTypeBinding[] parameters = binding.parameters;", "+\t\tint length = parameters.length;", "+\t\tboolean isEnumConstructor = binding.isConstructor() && binding.declaringClass.isEnum();", "+\t\tif (isEnumConstructor) {", "+\t\t\tif (length == 2) {", "+\t\t\t\treturn Collections.emptyList();", "+\t\t\t}", "+\t\t\tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "+\t\t\tfor (int i = 2; i < length; i++) {", "+\t\t\t\tlist.add(_env.getFactory().newTypeMirror(parameters[i]));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(list);", "+\t\t}", "+\t\tif (length != 0) {", "+\t\t\tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "+\t\t\treturn Collections.unmodifiableList(list);", "-\t\treturn Collections.unmodifiableList(list);", "+\t\treturn Collections.emptyList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d7d3dc9bc4cc8d46d27d6bb427e0b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateImportOperation.java", "commitBeforeChange": "bf0273f35fd80b9116145d3f2db1dec44bd9f2a0", "commitAfterChange": "09b80c5ae8d08eac28366eb29a3931cf5a303b0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["-\tName name = ast.newName(new String[] {this.importName});", "+\t// split import name into individual fragments", "+\tchar[][] charFragments = CharOperation.splitOn('.', this.importName.toCharArray());", "+\tint length = charFragments.length;", "+\t// check whether on demand", "+\tboolean onDemand;", "+\tif (charFragments[length-1].length == 1 && charFragments[length-1][0] == '*') {", "+\t\tonDemand = true;", "+\t\tlength--;", "+\t} else {", "+\t\tonDemand = false;", "+\t}", "+\tString[] strFragments = new String[length];", "+\tfor (int i = 0; i < length; i++) {", "+\t\tstrFragments[i] = String.valueOf(charFragments[i]);", "+\t}", "+\tName name = ast.newName(strFragments);", "+\tif (onDemand) importDeclaration.setOnDemand(true);"]}], "num": 16570}
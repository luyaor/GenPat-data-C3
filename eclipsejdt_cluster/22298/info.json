{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab35a7409b8f47d82337aeec93df5053", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e6e9ce89c879625b992cdb3faf0a58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "26a51263619601cb30a4fe608cc876314c169baf", "commitAfterChange": "23973a4dd19826bd57b9766722e05471b8135157", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80745", "+\t\t\t\tMethodVerifier verifier = env.methodVerifier();", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "-\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "-\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "+\t\t\t\t\t\tif (verifier.doReturnTypesCollide(castTypeMethods[i], expressionTypeMethods[j]))", "-", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9059d9e1f88af0d7d2eeb487fc6d68cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate boolean connectSuperclass()", "signatureAfterChange": " \tprivate boolean connectSuperclass()", "diff": ["-\t\tReferenceBinding superclass = findSupertype(referenceContext.superclass);", "-\t\tif (superclass != null) { // is null if a cycle was detected cycle", "-\t\t\treferenceContext.superclass.resolvedType = superclass; // hold onto the problem type", "-\t\t\tif (!superclass.isValidBinding()) {", "-\t\t\t\tproblemReporter().invalidSuperclass(sourceType, referenceContext.superclass, superclass);", "-\t\t\t} else if (superclass.isInterface()) {", "-\t\t\t\tproblemReporter().superclassMustBeAClass(sourceType, referenceContext.superclass, superclass);", "+\t\tTypeReference superclassRef = referenceContext.superclass;", "+\t\tReferenceBinding superclass = findSupertype(superclassRef);", "+\t\tif (superclass != null) { // is null if a cycle was detected cycle or a problem", "+\t\t\tif (superclass.isInterface()) {", "+\t\t\t\tproblemReporter().superclassMustBeAClass(sourceType, superclassRef, superclass);", "-\t\t\t\tproblemReporter().classExtendFinalClass(sourceType, referenceContext.superclass, superclass);", "+\t\t\t\tproblemReporter().classExtendFinalClass(sourceType, superclassRef, superclass);"]}], "num": 22298}
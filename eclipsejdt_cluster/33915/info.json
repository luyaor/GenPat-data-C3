{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adee9d90e343defc3dcf20becc5f7a6f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35ad0f65181d5cfa3b72e07276ed610c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tnew X().foo();\\n\" +", "-\t\t\t\"\t        ^^^\\n\" +", "-\t\t\t\"The method foo() is ambiguous for the type X\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<S extends A> void foo() { }\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N extends B> N foo() { return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+/* javac 7", "+X.java:3: name clash: <N>foo() and <S>foo() have the same erasure", "+                 <N extends B> N foo() { return null; }", "+                                 ^", "+  where N,S are type-variables:", "+    N extends B declared in method <N>foo()", "+    S extends A declared in method <S>foo()", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3600c780664a0fe674ee0f9ba528ce68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " \tpublic void test054b()", "signatureAfterChange": " \tpublic void test054b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tObject foo(X<T> t) { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<S> String foo(X<T> s) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(X<T>) in type X<T>\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: <S>foo(X<T>) and foo(X<T>) have the same erasure", "+        <S> String foo(X<T> s) { return null; }", "+                   ^", "+  where S,T are type-variables:", "+    S extends Object declared in method <S>foo(X<T>)", "+    T extends Object declared in class X", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a66646e17e86c0a8fd80e81367c73fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": " \tpublic void test051b()", "signatureAfterChange": " \tpublic void test051b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tObject foo(A<Integer> a) { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:3: name clash: foo(A<Integer>) and foo(A<String>) have the same erasure", "+        Object foo(A<Integer> a) { return null; }", "+               ^", "+1 error", "+ */"]}], "num": 33915}
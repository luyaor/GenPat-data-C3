{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f590319c00841c18f6aafd70aa5f4754", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e6f79a4e3e90fc632c623a7bc0272f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "4124c3cf4c37486dba4b6e4dbe3b654b017cc070", "commitAfterChange": "8e7c67c93df2763f9d77742821468997f7c7563c", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration node)", "diff": ["-\t\tBodyDeclaration prev = null;", "-\t\t\tif (prev instanceof EnumConstantDeclaration) {", "-\t\t\t\t// enum constant declarations do not include punctuation", "-\t\t\t\tif (d instanceof EnumConstantDeclaration) {", "-\t\t\t\t\t// enum constant declarations are separated by commas", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\t// semicolon separates last enum constant declaration from ", "-\t\t\t\t\t// first class body declarations", "-\t\t\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2715e6cf90121ef5a70857133a2a7a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["+\t */", "+\tpublic boolean visit(EnumDeclaration node) {", "+\t\tif (node.getJavadoc() != null) {", "+\t\t\tnode.getJavadoc().accept(this);", "+\t\t}", "+\t\tprintModifiers(node.modifiers());", "+\t\tthis.buffer.append(\"enum \");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\tif (!node.superInterfaceTypes().isEmpty()) {", "+\t\t\tthis.buffer.append(\"implements \");//$NON-NLS-1$", "+\t\t\tfor (Iterator it = node.superInterfaceTypes().iterator(); it.hasNext(); ) {", "+\t\t\t\tType t = (Type) it.next();", "+\t\t\t\tt.accept(this);", "+\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\t}", "+\t\tthis.buffer.append(\"{\");//$NON-NLS-1$", "+\t\tBodyDeclaration prev = null;", "+\t\tfor (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {", "+\t\t\tBodyDeclaration d = (BodyDeclaration) it.next();", "+\t\t\tif (prev instanceof EnumConstantDeclaration) {", "+\t\t\t\t// enum constant declarations do not include punctuation", "+\t\t\t\tif (d instanceof EnumConstantDeclaration) {", "+\t\t\t\t\t// enum constant declarations are separated by commas", "+\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\t// semicolon separates last enum constant declaration from ", "+\t\t\t\t\t// first class body declarations", "+\t\t\t\t\tthis.buffer.append(\"; \");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\td.accept(this);", "+\t\t}", "+\t\tthis.buffer.append(\"}\");//$NON-NLS-1$", "+\t\treturn false;", "+\t}", "-\t\tprintModifiers(node.getModifiers());", "-\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\tif (node.getSuperclass() != null) {", "-\t\t\tthis.buffer.append(\"extends \");//$NON-NLS-1$", "-\t\t\tnode.getSuperclass().accept(this);", "-\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\t}", "-\t\tif (!node.superInterfaces().isEmpty()) {", "-\t\t\tthis.buffer.append(node.isInterface() ? \"extends \" : \"implements \");//$NON-NLS-2$//$NON-NLS-1$", "-\t\t\tfor (Iterator it = node.superInterfaces().iterator(); it.hasNext(); ) {", "-\t\t\t\tName n = (Name) it.next();", "-\t\t\t\tn.accept(this);", "-\t\t\t\tif (it.hasNext()) {", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$"]}], "num": 41669}
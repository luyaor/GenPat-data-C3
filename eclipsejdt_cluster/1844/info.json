{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3a875dad94d20a59cc7c61b10af1b4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6144e55dfd2046a1a1bce2881e76ced5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "259ab729885d11212fdf6dd0b606b9f4d2fb1d41", "commitAfterChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\tint throwsTagsNbre = this.thrownExceptions == null ? 0 : this.thrownExceptions.length;", "+\t\tint throwsTagsLength = this.thrownExceptions == null ? 0 : this.thrownExceptions.length;", "-\t\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tfor (int i = 0; i < throwsTagsLength; i++) {", "-\t\tint thrownExceptionSize = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "-\t\tif (throwsTagsNbre == 0) {", "+\t\tint boundExceptionLength = (md.binding == null || md.binding.thrownExceptions == null) ? 0 : md.binding.thrownExceptions.length;", "+\t\tint thrownExceptionLength = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "+\t\tif (throwsTagsLength == 0) {", "-\t\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\t\tTypeReference typeRef = md.thrownExceptions[i];", "-\t\t\t\t\tif (typeRef.resolvedType != null && typeRef.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef, md.binding.modifiers);", "+\t\t\t\tfor (int i = 0; i < boundExceptionLength; i++) {", "+\t\t\t\t\tReferenceBinding exceptionBinding = md.binding.thrownExceptions[i];", "+\t\t\t\t\tif (exceptionBinding != null && exceptionBinding.isValidBinding()) { // flag only valid class name", "+\t\t\t\t\t\tint j=i;", "+\t\t\t\t\t\tboolean diff=true;", "+\t\t\t\t\t\twhile (j<thrownExceptionLength && (diff=exceptionBinding != md.thrownExceptions[j++].resolvedType));", "+\t\t\t\t\t\tif (!diff) {", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(md.thrownExceptions[j-1], md.binding.modifiers);", "+\t\t\t\t\t\t}", "-\t\t\tTypeReference[] typeReferences = new TypeReference[throwsTagsNbre];", "+\t\t\tTypeReference[] typeReferences = new TypeReference[throwsTagsLength];", "-\t\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tfor (int i = 0; i < throwsTagsLength; i++) {", "-\t\t\t\t\t// Verify duplicated tags", "-\t\t\t\t\t// Disable as we finally allow duplicate throws tags", "-\t\t\t\t\t// @see <a href=\"http://bugs.eclipse.org/bugs/show_bug.cgi?id=49491\">49491</a>", "-\t\t\t\t\t/*", "-\t\t\t\t\tboolean found = false;", "-\t\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "-\t\t\t\t\t\tif (typeReferences[j].resolvedType == typeBinding) {", "-\t\t\t\t\t\t\tmethScope.problemReporter().javadocDuplicatedThrowsClassName(typeRef, md.binding.modifiers);", "-\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\ttypeReferences[maxRef++] = typeRef;", "-\t\t\t\t\t}", "-\t\t\t\t\t*/", "-\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "+\t\t\tfor (int i = 0; i < boundExceptionLength; i++) {", "+\t\t\t\tReferenceBinding exceptionBinding = md.binding.thrownExceptions[i];", "-\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "+\t\t\t\t\t\tif (exceptionBinding == typeBinding) {", "-\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception, md.binding.modifiers);", "+\t\t\t\t\tif (exceptionBinding != null && exceptionBinding.isValidBinding()) { // flag only valid class name", "+\t\t\t\t\t\tint k=i;", "+\t\t\t\t\t\tboolean diff=true;", "+\t\t\t\t\t\twhile (k<thrownExceptionLength && (diff=exceptionBinding != md.thrownExceptions[k++].resolvedType));", "+\t\t\t\t\t\tif (!diff) {", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(md.thrownExceptions[k-1], md.binding.modifiers);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tfor (int j = 0; j<thrownExceptionSize && !compatible; j++) {", "+\t\t\t\t\tfor (int j = 0; j<thrownExceptionLength && !compatible; j++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8989b3cbdd769cb8f256bf8b73211a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.primaryExceptionVariable != null) {", "+\t\tthis.primaryExceptionVariable.useFlag = LocalVariableBinding.USED;", "+\t}", "+\tif (this.caughtThrowableVariable != null) {", "+\t\tthis.caughtThrowableVariable.useFlag = LocalVariableBinding.USED;", "+\t}", "+\t\t\t\tthis.caughtExceptionsCatchBlocks,", "+\t\t\t\tthis.catchArguments,", "+\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\t\tflowInfo = this.resources[i].analyseCode(currentScope, handlingContext, flowInfo.copy());", "+\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tif (type != null && type.isValidBinding()) {", "+\t\t\t\tReferenceBinding binding = (ReferenceBinding) type;", "+\t\t\t\tMethodBinding closeMethod = binding.getExactMethod(ConstantPool.Close, new TypeBinding [0], this.scope.compilationUnitScope()); // scope needs to be tighter", "+\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\t\tReferenceBinding[] thrownExceptions = closeMethod.thrownExceptions;", "+\t\t\t\t\tfor (int j = 0, length = thrownExceptions.length; j < length; j++) {", "+\t\t\t\t\t\thandlingContext.checkExceptionHandlers(thrownExceptions[j], this.resources[i], flowInfo, currentScope, true);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\tif (isUncheckedCatchBlock(i)) {", "-\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(i)).", "-\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(this.caughtExceptionTypes[i]);", "+\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(i);", "-\t\t\t\tif (this.tryBlock.statements == null) {", "+\t\t\t\tif (this.tryBlock.statements == null && this.resources == NO_RESOURCES) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350579", "+\t\t\t\tthis.caughtExceptionsCatchBlocks,", "+\t\t\t\tthis.catchArguments,", "+\t\tfor (int i = 0, max = this.resources.length; i < max; i++) {", "+\t\t\tflowInfo = this.resources[i].analyseCode(currentScope, handlingContext, flowInfo.copy());", "+\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tif (type != null && type.isValidBinding()) {", "+\t\t\t\tReferenceBinding binding = (ReferenceBinding) type;", "+\t\t\t\tMethodBinding closeMethod = binding.getExactMethod(ConstantPool.Close, new TypeBinding [0], this.scope.compilationUnitScope()); // scope needs to be tighter", "+\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\t\tReferenceBinding[] thrownExceptions = closeMethod.thrownExceptions;", "+\t\t\t\t\tfor (int j = 0, length = thrownExceptions.length; j < length; j++) {", "+\t\t\t\t\t\thandlingContext.checkExceptionHandlers(thrownExceptions[j], this.resources[j], flowInfo, currentScope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\tif (isUncheckedCatchBlock(i)) {", "-\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(i)).", "-\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(this.caughtExceptionTypes[i]);", "+\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(i);", "-\t\t\t\tif (this.tryBlock.statements == null) {", "+\t\t\t\tif (this.tryBlock.statements == null && this.resources == NO_RESOURCES) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350579", "+}"]}], "num": 1844}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d516ba7010d1b73e6e2b17f0971b3ddc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "098a0c9b611ccbe2de76854140a4f824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "e3b61331087882f47093048d6298d97548b68615", "commitAfterChange": "9ae1dbe2eb10f60df8b987132110cee826808427", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void test108()", "signatureAfterChange": " public void test108()", "diff": ["-\t\t\"\tint a = new int[]{0,0}, b = new int[]{0,0};\\n\" +", "+\t\t\"\tint a = new int[]{0, 0}, b = new int[]{0, 0};\\n\" +", "-\t\t\"  int a = new int[]{0,0,};\\n\" +", "-\t\t\"  int b = new int[]{0,0,};\\n\" +", "+\t\t\"  int a = new int[]{0, 0};\\n\" +", "+\t\t\"  int b = new int[]{0, 0};\\n\" +", "-\t\t\"  int a = new int[]{0,0,};\\n\" +", "-\t\t\"  int b = new int[]{0,0,};\\n\" +", "+\t\t\"  int a = new int[]{0, 0};\\n\" +", "+\t\t\"  int b = new int[]{0, 0};\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "350a8a5dfdb4a42a2dd01778dec685da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46be090ce8ea813f35c91f6bbe3aaf86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 559, "methodNumberAfterChange": 559, "signatureBeforeChange": " \tpublic void test0554()", "signatureAfterChange": " \tpublic void test0554()", "diff": ["-\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture#1-of ? extends Object> to X<String> is actually checking against the erased type X\\n\" + ", "-\t\t\t\"Unnecessary cast from X<capture-of ? extends Object> to X<String>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<capture#1-of ? extends Object> to X<String>\\n\" + ", "-\t\t\t\"Unnecessary cast from X<capture-of ? extends Object> to X2\\n\" + ", "+\t\t\t\"Unnecessary cast from X<capture#3-of ? extends Object> to X2\\n\" + ", "-\t\t\t\"Type safety: The cast from X<capture-of ? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + ", "+\t\t\t\"Type safety: The cast from X<capture#5-of ? extends Object> to X3<String> is actually checking against the erased type X3\\n\" + ", "-\t\t\t\"Unnecessary cast from X<capture-of ? extends Object> to X3<String>\\n\" + ", "+\t\t\t\"Unnecessary cast from X<capture#5-of ? extends Object> to X3<String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48901612b01f3ceb55306d3eeda55bd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AccessRestrictionsTests.java", "commitBeforeChange": "64774f020d7005b54827ff53032895aaf4555d81", "commitAfterChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test011() throws CoreException", "signatureAfterChange": " public void test011() throws CoreException", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in /P1/src/q/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tp.X x = new p.X();\\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"Access restriction: The type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in /P1/src/q/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tp.X x = new p.X();\\n\" +", "-\t\t\t\"\t        ^^^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The constructor X() is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in /P1/src/q/Y.java (at line 4)\\n\" +", "-\t\t\t\"\tp.X x = new p.X();\\n\" +", "-\t\t\t\"\t            ^^^\\n\" +", "-\t\t\t\"Access restriction: The type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in /P1/src/q/Y.java (at line 5)\\n\" +", "-\t\t\t\"\tx.foo();\\n\" +", "-\t\t\t\"\t^^^^^^^\\n\" +", "-\t\t\t\"Access restriction: The method foo() from the type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in /P1/src/q/Y.java (at line 6)\\n\" +", "-\t\t\t\"\tif (x.m > 0) {}\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"Access restriction: The field m from the type X is not accessible due to restriction on required library AccessRestrictions/lib.jar\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in /P1/src/q/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tp.X x = new p.X();\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in /P1/src/q/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tp.X x = new p.X();\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The constructor \\'X()\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in /P1/src/q/Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tp.X x = new p.X();\\n\" + ", "+\t\t\t\"\t            ^^^\\n\" + ", "+\t\t\t\"Access restriction: The type \\'X\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in /P1/src/q/Y.java (at line 5)\\n\" + ", "+\t\t\t\"\tx.foo();\\n\" + ", "+\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"Access restriction: The method \\'X.foo()\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in /P1/src/q/Y.java (at line 6)\\n\" + ", "+\t\t\t\"\tif (x.m > 0) {}\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Access restriction: The field \\'X.m\\' is not API (restriction on required library \\'AccessRestrictions/lib.jar\\')\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1556982f3004274d925ed05a565a0cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testJavadocFieldReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocFieldReferenceWithJavadoc() throws CoreException", "diff": ["-\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"AnnSearched.java\").getType(\"AnnSearched\");", "-\t\tIField field = type.getField(\"annSearchedVar\");", "+\t\tIType type = getCompilationUnit(\"JavaSearch\", \"src\", \"j1\", \"JavadocSearched.java\").getType(\"JavadocSearched\");", "+\t\tIField field = type.getField(\"javadocSearchedVar\");", "-\t\t\t\t\t\"src/j1/AnnInvalidRef.java void j1.AnnInvalidRef.invalid() [annSearchedVar] POTENTIAL_MATCH\\n\" + ", "-\t\t\t\t\t\"src/j1/AnnValidRef.java void j1.AnnValidRef.valid() [annSearchedVar] EXACT_MATCH\",", "+\t\t\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [javadocSearchedVar] POTENTIAL_MATCH\\n\" + ", "+\t\t\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [javadocSearchedVar] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9b41664f70d718920c3db884aa0f37a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void testTypeRefAll_Supertype() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Supertype() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends \ufffd|Types|\ufffd {@117] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends \ufffd|Exception|\ufffd implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements \ufffd|ITest1|\ufffd, ITest2 {@78] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, \ufffd|ITest2|\ufffd {@86] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends \ufffd|ITest1|\ufffd {}@184] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [public class TestTypes extends !|Types|! {@117] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends !|Exception|! implements ITest1, ITest2 {@57] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements !|ITest1|!, ITest2 {@78] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [public class Types extends Exception implements ITest1, !|ITest2|! {@86] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [interface ITest2 extends !|ITest1|! {}@184] EXACT_MATCH\""]}], "num": 47281}
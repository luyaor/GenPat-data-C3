{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecfc06987a57a677f7116fb9901f6d1b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "396a4df29e855fd4186dbdae1bdbf6e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tchar[][] name = ((org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) typeReference).getTypeName();", "-\t\t\t\t\t\t\tint nameLength = name.length;", "-\t\t\t\t\t\t\tsourceStart = (int)(positions[0]>>>32);", "-\t\t\t\t\t\t\tlength = (int)(positions[nameLength - 1] & 0xFFFFFFFF) - sourceStart + 1;", "-\t\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\t\t\t\tsimpleType.setName(qualifiedName);", "-\t\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, length);", "-\t\t\t\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tchar[][] name = ((org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) typeReference).getTypeName();", "+\t\t\t\t\t\tint nameLength = name.length;", "+\t\t\t\t\t\tsourceStart = (int)(positions[0]>>>32);", "+\t\t\t\t\t\tlength = (int)(positions[nameLength - 1] & 0xFFFFFFFF) - sourceStart + 1;", "+\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(qualifiedName);", "+\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, length);", "+\t\t\t\t\t\ttype = simpleType;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "-                            int startingIndex = 0;", "-                            int endingIndex = 0;", "+\t\t\t\t\t\t\tint startingIndex = 0;", "+\t\t\t\t\t\t\tint endingIndex = 0;", "-                                    endingIndex++;", "-                                }", "+\t\t\t\t\t\t\t\t\tendingIndex++;", "+\t\t\t\t\t\t\t\t}", "-\t\t \t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-                            if (this.resolveBindings) {", "-                                recordNodes(simpleType, typeReference);", "-                                recordNodes(parameterizedType, typeReference);", "-                            }", "+\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "+\t\t\t\t\t\t\t\trecordNodes(parameterizedType, typeReference);", "+\t\t\t\t\t\t\t}", "-                                if (this.resolveBindings) {", "-                                    recordNodes(simpleName, typeReference);", "-                                    recordNodes(qualifiedType, typeReference);", "-                                }", "+\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "+\t\t\t\t\t\t\t\t}", "-\t                               \tqualifiedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "- \t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "-                                   if (this.resolveBindings) {", "-                                        recordNodes(parameterizedType2, typeReference);", "-                                    }", "+\t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\t\t\trecordNodes(parameterizedType2, typeReference);", "+\t\t\t\t\t\t\t\t\t}", "-                               \t\tqualifiedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "-\t\t\t} else {", "+\t\t\t} else if (typeReference instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) {", "+\t\t\t} else {", "+\t\t\t\tTypeReference[] typeReferences = ((org.eclipse.jdt.internal.compiler.ast.UnionTypeReference) typeReference).typeReferences;", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\t// recovery", "+\t\t\t\t\t\ttype = this.convertType(typeReferences[0]);", "+\t\t\t\t\t\tint start = typeReference.sourceStart;", "+\t\t\t\t\t\tint endPosition = typeReference.sourceEnd;", "+\t\t\t\t\t\tlength = endPosition - start + 1;", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// union type reference", "+\t\t\t\t\t\tfinal UnionType unionType = new UnionType(this.ast);", "+\t\t\t\t\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "+\t\t\t\t\t\t\tunionType.types().add(this.convertType(typeReferences[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttype = unionType;", "+\t\t\t\t\t\tList types = unionType.types();", "+\t\t\t\t\t\tint size = types.size();", "+\t\t\t\t\t\tstart = ((Type) types.get(0)).getStartPosition();", "+\t\t\t\t\t\tType lastType = (Type) types.get(size - 1);", "+\t\t\t\t\t\tendPosition = lastType.getStartPosition() + lastType.getLength();", "+\t\t\t\t\t\tlength = endPosition - start; /* + 1 - 1 == 0 */", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t}", "+\t\t}", "+\t\tboolean sawDiamond = false;", "+\t\tif (typeReference instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference pstr = (ParameterizedSingleTypeReference) typeReference;", "+\t\t\tif (pstr.typeArguments == TypeReference.NO_TYPE_ARGUMENTS) {", "+\t\t\t\tsawDiamond = true;", "+\t\t\t}", "+\t\t} else if (typeReference instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference pqtr = (ParameterizedQualifiedTypeReference) typeReference;", "+\t\t\tfor (int i = 0, len = pqtr.typeArguments.length; i < len; i++) {", "+\t\t\t\tif (pqtr.typeArguments[i] == TypeReference.NO_TYPE_ARGUMENTS) {", "+\t\t\t\t\tsawDiamond = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t\tif (sawDiamond) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "714d2ecbb3b22a553da275b83b3cae67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "commitAfterChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "-\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "-\t\t\t\tint firstTypeIndex = lenth - 1;", "+\t\t\t\tint firstTypeIndex = lenth;", "-\t\t\t\tif (firstTypeIndex == 0) {", "-\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[0]));", "-\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "-\t\t\t\t\tint end = (int) positions[0];", "-\t\t\t\t\tsimpleName.setSourceRange(start, end);", "-\t\t\t\t\tsimpleName.index = 1;", "-\t\t\t\t\tname = simpleName;", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tType currentType = null;", "+\t\t\t\tif (firstTypeIndex == lenth) {//Just a QualifiedName", "+\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, lenth - 1, typeReference);", "+\t\t\t\t\tcurrentType = createSimpleType(name, typeReference, positions, 0, lenth - 1);", "-\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex, typeReference);", "-\t\t\t\t}", "-\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\tsimpleType.setName(name);", "-\t\t\t\tint start = (int)(positions[0] >>> 32);", "-\t\t\t\tint end = (int)positions[firstTypeIndex];", "-\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "-\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t}", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(simpleType, typeReference);", "-\t\t\t\t}", "-\t\t\t\tType currentType = simpleType;", "-\t\t\t\t", "-\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "-\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[i]));", "-\t\t\t\t\tsimpleName.index = i + 1;", "-\t\t\t\t\tstart = (int) (positions[i] >>> 32);", "-\t\t\t\t\tend = (int) positions[i];", "-\t\t\t\t\tsimpleName.setSourceRange(start, end - start +1);", "-\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "-\t\t\t\t\tqualifiedType.setQualifier(currentType);", "-\t\t\t\t\tqualifiedType.setName(simpleName);", "-\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[i]) != null) {", "-\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "+\t\t\t\t\tif (firstTypeIndex <= 1) {", "+\t\t\t\t\t\tname = createSimpleName(typeReference, positions, tokens, 0 );", "+\t\t\t\t\t\tfirstTypeIndex = 1;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex - 1, typeReference);", "+\t\t\t\t\t}\t\t\t\t\t\t", "+", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = typeReference.resolvedType;", "+\t\t\t\t\tboolean createPackageQualifiedType = false;", "+\t\t\t\t\tif (typeBinding instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding)typeBinding;\t\t\t", "+\t\t\t\t\t\tPackageBinding packageBinding = referenceBinding.getPackage();", "+\t\t\t\t\t\tif (packageBinding != null && Arrays.equals(name.toString().toCharArray(), packageBinding.readableName())) {", "+\t\t\t\t\t\t\tcreatePackageQualifiedType = true;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "+\t\t\t\t\t", "+\t\t\t\t\tif (createPackageQualifiedType && this.ast.apiLevel >= AST.JLS8) {", "+\t\t\t\t\t\tPackageQualifiedType packageQualifiedType = new PackageQualifiedType(this.ast);", "+\t\t\t\t\t\tpackageQualifiedType.setQualifier(name);", "+\t\t\t\t\t\tpackageQualifiedType.setName(createSimpleName(typeReference, positions, tokens, firstTypeIndex));", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, packageQualifiedType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "+\t\t\t\t\t\tcurrentType = packageQualifiedType;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(name);\t", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, 0, 0, name.index > 0 ? name.index - 1 : 0);", "+\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, firstTypeIndex, simpleType);", "+\t\t\t\t\t\tif (createPackageQualifiedType) ", "+\t\t\t\t\t\t\tcurrentType.setFlags(currentType.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\tstart = currentType.getStartPosition();", "-\t\t\t\t\tend = simpleName.getStartPosition() + simpleName.getLength() - 1;", "-\t\t\t\t\tqualifiedType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tcurrentType = qualifiedType;", "-\t\t\t\t\tqualifiedType.index  = 1;", "+\t\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "+\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, i, currentType);", "+\t\t\t\t\t}\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f9bd9a6f5760590b126b5c060cc2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "commitAfterChange": "a00d0694a5797c69eb50145f1a65c73c676a067b", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\tWildcard wildcard = (Wildcard) typeReference;", "-\t\t\tWildcardType wildcardType = this.ast.newWildcardType();", "+\t\t\tfinal Wildcard wildcard = (Wildcard) typeReference;", "+\t\t\tfinal WildcardType wildcardType = new WildcardType(this.ast);", "-\t\t\t\ttype = this.ast.newPrimitiveType(getPrimitiveTypeCode(name));", "-\t\t\t\ttype.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\tfinal PrimitiveType primitiveType = new PrimitiveType(this.ast);", "+\t\t\t\tprimitiveType.setPrimitiveTypeCode(getPrimitiveTypeCode(name));", "+\t\t\t\tprimitiveType.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\ttype = primitiveType;", "-\t\t\t\tSimpleName simpleName = this.ast.newSimpleName(new String(name));", "+\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\tsimpleName.internalSetIdentifier(new String(name));", "-\t\t\t\t\t\ttype = this.ast.newSimpleType(simpleName);", "-\t\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\t\ttype.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(simpleName);", "+\t\t\t\t\t\tsimpleType.setFlags(simpleType.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(simpleName);", "+\t\t\t\t\t\tsimpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(simpleName);", "-\t\t\t\t\t\ttype = this.ast.newParameterizedType(simpleType);", "+\t\t\t\t\t\tfinal ParameterizedType parameterizedType = new ParameterizedType(this.ast);", "+\t\t\t\t\t\tparameterizedType.setType(simpleType);", "+\t\t\t\t\t\ttype = parameterizedType;", "-\t\t\t\tSimpleName simpleName = this.ast.newSimpleName(new String(name));", "+\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\tsimpleName.internalSetIdentifier(new String(name));", "-\t\t\t\ttype = this.ast.newSimpleType(simpleName);", "+\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\tsimpleType.setName(simpleName);", "+\t\t\t\ttype = simpleType;", "+\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\t\ttype = this.ast.newSimpleType(qualifiedName);", "-\t\t\t\t\t\t\ttype.setSourceRange(sourceStart, length);", "+\t\t\t\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\t\tsimpleType.setName(qualifiedName);", "+\t\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, length);", "+\t\t\t\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\t\t\tname = this.ast.newSimpleName(new String(tokens[startingIndex]));", "-\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(name);", "+\t\t\t\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[startingIndex]));", "+\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\t\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\t\tname.index = 1;", "+\t\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t\t\tsimpleName.index = 1;", "+\t\t\t\t\t\t\t\tname = simpleName;", "+\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t \t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trecordNodes(name, typeReference);", "-\t\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(name);", "+\t\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\t\tsimpleType.setName(name);", "-\t\t\t\t\t\t\tParameterizedType parameterizedType = this.ast.newParameterizedType(simpleType);", "+\t\t\t\t\t\t\tParameterizedType parameterizedType = new ParameterizedType(this.ast);", "+\t\t\t\t\t\t\tparameterizedType.setType(simpleType);", "-\t\t\t\t\t\t\t\tSimpleName simpleName = this.ast.newSimpleName(new String(tokens[startingIndex]));", "+\t\t\t\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[startingIndex]));", "-\t\t\t\t\t\t\t\tQualifiedType qualifiedType = this.ast.newQualifiedType(currentType, simpleName);", "+\t\t\t\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "+\t\t\t\t\t\t\t\tqualifiedType.setQualifier(currentType);", "+\t\t\t\t\t\t\t\tqualifiedType.setName(simpleName);\t", "-\t\t\t\t\t\t\t\t\tParameterizedType parameterizedType2 = this.ast.newParameterizedType(qualifiedType);", "+\t\t\t\t\t\t\t\t\tParameterizedType parameterizedType2 = new ParameterizedType(this.ast);", "+\t\t\t\t\t\t\t\t\tparameterizedType2.setType(qualifiedType);", "-\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\ttype = this.ast.newSimpleType(qualifiedName);", "+\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\tsimpleType.setName(qualifiedName);", "+\t\t\t\ttype = simpleType;"]}], "num": 38475}
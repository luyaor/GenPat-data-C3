{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c3e3f88f28fe829bc5cf0cf9d990f37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf4041afd0c94fa3368741e512f61c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "60c2bc018036adec276a35610a48178fdcffa8a6", "commitAfterChange": "269987b22b1df921e21c67a56b711a3bfe74424a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "signatureAfterChange": " public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "diff": ["-\tIPath path= this.getPath();", "-\tIClasspathEntry[] entries= this.getJavaProject().getRawClasspath();", "-\tfor (int i= 0; i < entries.length; i++) {", "-\t\tIClasspathEntry entry = entries[i];", "-\t", "-\t\tswitch (entry.getEntryKind()) {", "-\t\t\tcase IClasspathEntry.CPE_PROJECT:", "-\t\t\t\t// a root's project always refers directly to the root", "-\t\t\t\t// no need to follow the project reference", "-\t\t\t\tcontinue;", "-\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "-\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(entry.getPath(), this.getJavaProject());", "-\t\t\t\tif (container != null){", "-\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "-\t\t\t\t\tfor (int j = 0; j < containerEntries.length; j++){", "-\t\t\t\t\t\tIClasspathEntry containerEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);", "-\t\t\t\t\t\tif (containerEntry != null && path.equals(containerEntry.getPath())) {", "-\t\t\t\t\t\t\treturn entry; // answer original entry", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "-\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);", "-\t\t\t\t// don't break so as to run default", "-\t\t\tdefault:", "-\t\t\t\tif (entry != null && path.equals(entry.getPath())) {", "-\t\t\t\t\treturn entries[i];", "-\t\t\t\t}", "-\t\t}", "+", "+\tIClasspathEntry rawEntry = null;", "+\tIJavaProject project = this.getJavaProject();", "+\tproject.getResolvedClasspath(true); // force the reverse rawEntry cache to be populated", "+\tJavaModelManager.PerProjectInfo perProjectInfo = ", "+\t\tJavaModelManager.getJavaModelManager().getPerProjectInfoCheckExistence(project.getProject());", "+\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(this.getPath());", "-\treturn null;", "+\treturn rawEntry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942583bef0f864501326e74634e2aa52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "97817ed754fcb90df07f717911c8c1d960c24a23", "commitAfterChange": "301ea60f1c016cdc6dab5bb31b25b7537bf7ad1b", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "diff": ["-\t\t// then look at resolved entries", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIClasspathEntry rawEntry = rawClasspath[i];", "-\t\t\tswitch (rawEntry.getEntryKind()) {", "-\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "-\t\t\t\t\tIClasspathContainer container;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tcontainer = JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (container == null)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "-\t\t\t\t\tif (containerEntries == null)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t// container was bound", "-\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){", "-\t\t\t\t\t\tIClasspathEntry resolvedEntry = containerEntries[j];", "-\t\t\t\t\t\tif (resolvedEntry == null) {", "-\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE || JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\t\tJavaModelManager.getJavaModelManager().verbose_missbehaving_container(this, rawEntry.getPath(), containerEntries);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (isOnClasspathEntry(elementPath, isFolderPath, isPackageFragmentRoot, resolvedEntry))", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "-\t\t\t\t\tIClasspathEntry resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "-\t\t\t\t\tif (resolvedEntry == null)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tif (isOnClasspathEntry(elementPath, isFolderPath, isPackageFragmentRoot, resolvedEntry))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=304081", "+\t\t// All the resolved classpath entries need to be considered, including the referenced classpath entries", "+\t\tIClasspathEntry[] resolvedClasspath = null;", "+\t\ttry {", "+\t\t\tresolvedClasspath = getResolvedClasspath();", "+\t\t} catch (JavaModelException e) {", "+\t\t\treturn false; // Perhaps, not a Java project", "+\t\tfor (int index = 0; index < resolvedClasspath.length; index++) {", "+\t\t\tif (isOnClasspathEntry(elementPath, isFolderPath, isPackageFragmentRoot, resolvedClasspath[index]))", "+\t\t\t\treturn true;", "+\t\t}", "+\t\t"]}], "num": 72689}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccb16a00deae64f35d904076d28cf042", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c87cf5c806d4679648e54fc5ee3f6bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/base/XMLComparer.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean compareAnnotationNodes(Element actualAnnot, Element expectedAnnot)", "signatureAfterChange": " \tprivate boolean compareAnnotationNodes(Element actualAnnot, Element expectedAnnot)", "diff": ["-\t\t\tif (SNAME.equals(attrName)) {", "+\t\t\tif (SNAME_TAG.equals(attrName)) {", "-\t\tElement actualValues = null;", "-\t\tfor (Node n = actualAnnot.getFirstChild(); n != null; n = n.getNextSibling()) {", "-\t\t\tif (n.getNodeType() == Node.ELEMENT_NODE && ANNOTATION_VALUES.equals(n.getNodeName())) {", "-\t\t\t\tactualValues = (Element)n;", "-\t\t\t}", "-\t\t}", "-\t\tElement expectedValues = null;", "-\t\tfor (Node n = expectedAnnot.getFirstChild(); n != null; n = n.getNextSibling()) {", "-\t\t\tif (n.getNodeType() == Node.ELEMENT_NODE && ANNOTATION_VALUES.equals(n.getNodeName())) {", "-\t\t\t\texpectedValues = (Element)n;", "-\t\t\t}", "-\t\t}", "+\t\tElement actualValues = findNamedChildElement(actualAnnot, ANNOTATION_VALUES_TAG);", "+\t\tElement expectedValues = findNamedChildElement(expectedAnnot, ANNOTATION_VALUES_TAG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88261d164b5728e03fcc1bfe9b1ead72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic int getExtendedEnd(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedEnd(ASTNode node)", "diff": ["-\t\tif (this.trailingComments != null) {", "-\t\t\tint[] range = (int[]) this.trailingComments.get(node);", "+\t\tif (this.trailingPtr >= 0) {", "+\t\t\tint[] range = null;", "+\t\t\tfor (int i=0; range==null && i<=this.trailingPtr; i++) {", "+\t\t\t\tif (this.trailingNodes[i] == node) range = this.trailingIndexes[i];", "+\t\t\t}", "-\t\t\t\tif (range[0] == -1 && range[1] == -1) {", "-\t\t\t\t\tASTNode parent = node.getParent();", "-\t\t\t\t\tif (parent != null && ((parent.getFlags() & ASTNode.ORIGINAL) != 0)) {", "-\t\t\t\t\t\treturn getExtendedEnd(parent);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tComment lastComment = this.comments[range[1]];", "-\t\t\t\t\tend = lastComment.getStartPosition() + lastComment.getLength();", "-\t\t\t\t}", "+\t\t\t\tComment lastComment = this.comments[range[1]];", "+\t\t\t\tend = lastComment.getStartPosition() + lastComment.getLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc8c8f05f4adbde956f3ea406ca4c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\tint size = tagElement.fragments().size();", "-\t\tint[] replaceIndex = new int[size];", "-\t\tint idx = 0;", "-\t\t\treplaceIndex[idx] = 0;", "-\t\t\t\tif (compilerNode instanceof JavadocMessageSend) {", "-\t\t\t\t\treplaceIndex[idx] = 1;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tfor (int i=0; i<size; i++) {", "-\t\t\tif (replaceIndex[i] == 1) {", "-\t\t\t\tMemberRef memberRef = (MemberRef) tagElement.fragments().remove(i);", "-\t\t\t\tMethodRef methodRef = this.ast.newMethodRef();", "-\t\t\t\tmethodRef.setName((SimpleName)memberRef.getName().clone(this.ast));", "-\t\t\t\tif (memberRef.getQualifier() != null) {", "-\t\t\t\t\tmethodRef.setQualifier((Name)memberRef.getQualifier().clone(this.ast));", "-\t\t\t\t}", "-\t\t\t\tmethodRef.setSourceRange(memberRef.getStartPosition(), memberRef.getLength());", "-\t\t\t\ttagElement.fragments().add(i, methodRef);"]}], "num": 48586}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96b037b180df8db05e3472ef4d431f2d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f0812705e1451328adebece8773792c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "8db9affa29727763215f4c4f12ddd26301a2c48f", "commitAfterChange": "6bc11449bdc77b64b2e9fa71343f1b205e63ae9f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\t\tif (!node.thrownExceptions().isEmpty()) {", "+\t\t\tif (!thrownExceptions(node).isEmpty()) {", "-\t\t\t\tfor (Iterator it = node.thrownExceptions().iterator(); it.hasNext(); ) {", "+\t\t\t\tfor (Iterator it = thrownExceptions(node).iterator(); it.hasNext(); ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f01f434dd1152b4f625d6429464a9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, FileOutputStream stream) throws IOException", "diff": ["-private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, DataOutputStream stream) throws IOException {", "+private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, FileOutputStream stream) throws IOException {", "-\t\t\t\tvalues[i] = new Integer(stream.size());", "+\t\t\t\tvalues[i] = new Integer(this.streamEnd);", "-\tthis.categoryOffsets.put(categoryName, stream.size()); // remember the offset to the start of the table", "+\tthis.categoryOffsets.put(categoryName, this.streamEnd); // remember the offset to the start of the table", "-\tstream.writeInt(wordsToDocs.elementSize);", "+\twriteStreamInt(stream, wordsToDocs.elementSize);", "-\t\t\tUtil.writeUTF(stream, words[i]);", "+\t\t\twriteStreamChars(stream, words[i]);", "-\t\t\t\t\tstream.writeInt(-documentNumbers[0]); // store an array of 1 element by negating the documentNumber (can be zero)", "+\t\t\t\t\twriteStreamInt(stream, -documentNumbers[0]); // store an array of 1 element by negating the documentNumber (can be zero)", "-\t\t\t\tstream.writeInt(largeArraySize); // mark to identify that an offset follows", "-\t\t\t\tstream.writeInt(((Integer) o).intValue()); // offset in the file of the array of document numbers", "+\t\t\t\twriteStreamInt(stream, largeArraySize); // mark to identify that an offset follows", "+\t\t\t\twriteStreamInt(stream, ((Integer) o).intValue()); // offset in the file of the array of document numbers"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28f0402359727904d45625c7a86574fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ElementInfoConverter.java", "commitBeforeChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "commitAfterChange": "57799a8beed7490f3a4382e24299a6b44ffe4faf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert( \t\tISourceType sourceType, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert( \t\tSourceTypeElementInfo sourceType, \t\tCompilationResult compilationResult)", "diff": ["-\t\tISourceType sourceType,", "+\t\tSourceTypeElementInfo sourceType,", "-\t\t \tif (sourceType instanceof SourceTypeElementInfo) {", "-\t\t\t\tIType typeHandle = ((SourceTypeElementInfo)sourceType).getHandle();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (typeHandle.isAnonymous()) {", "-\t\t\t\t\t\ttype = new AnonymousLocalTypeDeclaration(compilationResult);", "-\t\t\t\t\t\tisAnonymous = true;", "-\t\t\t\t\t} else if (typeHandle.isLocal()) {", "-\t\t\t\t\t\ttype = new LocalTypeDeclaration(compilationResult);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttype = new TypeDeclaration(compilationResult);", "-\t\t\t\t\t}", "-\t\t\t\t} catch (JavaModelException e) {", "+\t\t\tIType typeHandle = ((SourceTypeElementInfo)sourceType).getHandle();", "+\t\t\ttry {", "+\t\t\t\tif (typeHandle.isAnonymous()) {", "+\t\t\t\t\ttype = new AnonymousLocalTypeDeclaration(compilationResult);", "+\t\t\t\t\tisAnonymous = true;", "+\t\t\t\t} else if (typeHandle.isLocal()) {", "+\t\t\t\t\ttype = new LocalTypeDeclaration(compilationResult);", "+\t\t\t\t} else {", "-\t\t \t} else {", "-\t\t \t\ttype = new TypeDeclaration(compilationResult);", "-\t\t \t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\ttype = new TypeDeclaration(compilationResult);", "+\t\t\t}", "-\t\t\t\t(MemberTypeDeclaration) convert(sourceMemberTypes[i], compilationResult);", "+\t\t\t\t(MemberTypeDeclaration) convert((SourceTypeElementInfo)sourceMemberTypes[i], compilationResult);", "-\t\t\ttype.fields[i] = convert(sourceFields[i], type, compilationResult);", "+\t\t\ttype.fields[i] = convert((SourceFieldElementInfo)sourceFields[i], type, compilationResult);", "-\t\t\tAbstractMethodDeclaration method =convert(sourceMethods[i], compilationResult);", "+\t\t\tAbstractMethodDeclaration method =convert((SourceMethodElementInfo)sourceMethods[i], compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46ec1855e88c8528dd9ffd1faa9afd90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "8db9affa29727763215f4c4f12ddd26301a2c48f", "commitAfterChange": "6bc11449bdc77b64b2e9fa71343f1b205e63ae9f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void testMethodDeclarationExtraDimensions_only_2_3_4() throws Exception", "signatureAfterChange": "  \tpublic void testMethodDeclarationExtraDimensions_only_2_3_4() throws Exception", "diff": ["-\t\t\trewrite.remove((ASTNode) methodDecl.thrownExceptions().get(0), null);", "+\t\t\trewrite.remove((ASTNode) getThrownExceptions(methodDecl).get(0), null);", "-\t\t\trewrite.remove((ASTNode) methodDecl.thrownExceptions().get(0), null);", "+\t\t\trewrite.remove((ASTNode) getThrownExceptions(methodDecl).get(0), null);", "-\t\t\trewrite.remove((ASTNode) methodDecl.thrownExceptions().get(0), null);", "+\t\t\trewrite.remove((ASTNode) getThrownExceptions(methodDecl).get(0), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "694808b851a41d27b1fffc2310077b2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java", "commitBeforeChange": "2d127f9c4f7d2f6e84664bc558e4d5a8224f5ac8", "commitAfterChange": "ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void getHandleMemento(StringBuffer buff, boolean memoizeParent)", "signatureAfterChange": " \t \tpublic void getHandleMemento(StringBuffer buff, boolean memoizeParent)", "diff": ["-\t\tchar delimiter = getHandleMementoDelimiter();", "-\t\tbuff.append(delimiter);", "+\t\tappendEscapedDelimiter(buff, getHandleMementoDelimiter());", "-\t\t\tbuff.append(JEM_STRING);", "+\t\t\tappendEscapedDelimiter(buff, JEM_STRING);", "-\t\t\tbuff.append(JEM_STRING);", "+\t\t\tappendEscapedDelimiter(buff, JEM_STRING);", "-\t\tbuff.append(JEM_STRING);", "+\t\tappendEscapedDelimiter(buff, JEM_STRING);", "-\t\tbuff.append(JEM_STRING);", "+\t\tappendEscapedDelimiter(buff, JEM_STRING);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a53112b43b553122e0de777c529f394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java", "commitBeforeChange": "ed946ccd4c40fd03fb87770eaaaa24036f629ae3", "commitAfterChange": "425b0c5314087893896fa849d0ee8761b973ef60", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void getHandleMemento(StringBuffer buff, boolean memoizeParent)", "signatureAfterChange": " \t \tpublic void getHandleMemento(StringBuffer buff, boolean memoizeParent)", "diff": ["-\t\t\tbuff.append(this.parameterTypes[i]);", "+\t\t\tescapeMementoName(buff, this.parameterTypes[i]);", "-\t\t\tbuff.append(this.parameterNameStrings[i]);", "+\t\t\tescapeMementoName(buff, this.parameterNameStrings[i]);", "-\t\tbuff.append(this.returnTypeString);", "+\t\tescapeMementoName(buff, this.returnTypeString);", "-\t\tbuff.append(this.key);", "+\t\tescapeMementoName(buff, this.key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d86a6ef97fd33a6c2c64ab63fcb396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "e96b882d1f54d34db2067149e2d3228b0faf374b", "commitAfterChange": "4faced18aa2f149b9a6ea49e609b9be294554038", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "  protected void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\t\t\t\tString extension = resource.getFileExtension();", "-\t\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(resource.getName());", "+\t\t\t\t\t\t\tString name = resource.getName();", "+\t\t\t\t\t\t\tif (Util.isJavaFileName(name)) {", "+\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(name);", "-\t\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(resource.getName());", "+\t\t\t\t\t\t\t} else if (Util.isClassFileName(name)) {", "+\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0ecb845b86fc1f3ade972d95a35d3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "e6db618a9b62756ea5188d8fdad9bb0c157f5516", "commitAfterChange": "265fce71e12d88a397c49e9793a330fd01dcb78a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public SourceMapper getSourceMapper()", "signatureAfterChange": " public SourceMapper getSourceMapper()", "diff": ["-\t\t\tif (sourcePath != null) {", "-\t\t\t\tIPath rootPath= getSourceAttachmentRootPath();", "-\t\t\t\tmapper = this.createSourceMapper(sourcePath, rootPath);", "-\t\t\t\tif (rootPath == null && mapper.rootPath != null) {", "-\t\t\t\t\t// as a side effect of calling the SourceMapper constructor, the root path was computed", "-\t\t\t\t\trootPath = new Path(mapper.rootPath);", "-\t\t\t\t\t", "-\t\t\t\t\t//set the property to the path of the mapped source", "-\t\t\t\t\tthis.setSourceAttachmentProperty(", "+\t\t\tIPath rootPath= getSourceAttachmentRootPath();", "+\t\t\tif (sourcePath == null)", "+\t\t\t\tmapper = createSourceMapper(getPath(), rootPath); // attach root to itself", "+\t\t\telse", "+\t\t\t\tmapper = createSourceMapper(sourcePath, rootPath);", "+\t\t\tif (rootPath == null && mapper.rootPath != null) {", "+\t\t\t\t// as a side effect of calling the SourceMapper constructor, the root path was computed", "+\t\t\t\trootPath = new Path(mapper.rootPath);", "+\t\t\t\t", "+\t\t\t\t//set the property to the path of the mapped source", "+\t\t\t\tif (sourcePath != null)", "+\t\t\t\t\tsetSourceAttachmentProperty(", "-\t\t\t\t}", "-\t\t\t\trootInfo.setSourceMapper(mapper);", "-\t\t\t} else {", "-\t\t\t\t// remember that no source is attached", "-\t\t\t\trootInfo.setSourceMapper(NO_SOURCE_MAPPER);", "-\t\t\t\tmapper = null;", "-\t\t} else if (mapper == NO_SOURCE_MAPPER) {", "-\t\t\t// a previous call to this method found out that no source was attached", "-\t\t\tmapper = null;", "+\t\t\trootInfo.setSourceMapper(mapper);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9146ffc5613a7ff009d4824b5da30de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e96b882d1f54d34db2067149e2d3228b0faf374b", "commitAfterChange": "4faced18aa2f149b9a6ea49e609b9be294554038", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static IJavaElement create(IFile file, IJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement create(IFile file, IJavaProject project)", "diff": ["-\t\tString extension = file.getFileExtension();", "-\t\tif (extension != null) {", "-\t\t\tif (Util.isValidCompilationUnitName(file.getName())) {", "+\t\tif (file.getFileExtension() != null) {", "+\t\t\tString name = file.getName();", "+\t\t\tif (Util.isValidCompilationUnitName(name))", "-\t\t\t} else if (Util.isValidClassFileName(file.getName())) {", "+\t\t\tif (Util.isValidClassFileName(name))", "-\t\t\t} else if (extension.equalsIgnoreCase(\"jar\")  //$NON-NLS-1$", "-\t\t\t\t\t|| extension.equalsIgnoreCase(\"zip\")) {  //$NON-NLS-1$", "+\t\t\tif (Util.isArchiveFileName(name))", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37fdbfdd4620b64b7346da253c616dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "dca0c800b618e06354348679c785dbf10c5f5a8f", "commitAfterChange": "cab98b2b8859caae533ee4cfbe628b2265262135", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\t\tif (!arguments[i].isPertinentToApplicability(fsi, method)) {", "-\t\t\t\t\t\tc.add(new ConstraintExpressionFormula(arguments[i], substF, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT));", "+\t\t\t\t\tExpression argument = arguments[i];", "+\t\t\t\t\tif (!argument.isPertinentToApplicability(fsi, method)) {", "+\t\t\t\t\t\tc.add(new ConstraintExpressionFormula(argument, substF, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT));", "-\t\t\t\t\tc.add(new ConstraintExceptionFormula(arguments[i], substF));", "+\t\t\t\t\taddExceptionConstraint(c, argument, substF);"]}], "num": 2617}
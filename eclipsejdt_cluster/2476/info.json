{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e76590b5c6abdf363483e65a9c06c18", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514cd13aa3321d30e4d4ff80e2fe8c7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void complainIfUnusedExceptionHandlers( \t\tBlockScope scope, \t\tTryStatement tryStatement)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement)", "diff": ["-\t", "-\tpublic void complainIfUnusedExceptionHandlers(", "-\t\tBlockScope scope,", "-\t\tTryStatement tryStatement) {", "-\t\t// report errors for unreachable exception handlers", "-\t\tfor (int i = 0, count = handledExceptions.length; i < count; i++) {", "-\t\t\tint index = indexes.get(handledExceptions[i]);", "-\t\t\tint cacheIndex = index / BitCacheSize;", "-\t\t\tint bitMask = 1 << (index % BitCacheSize);", "-\t\t\tif ((isReached[cacheIndex] & bitMask) == 0) {", "-\t\t\t\tscope.problemReporter().unreachableCatchBlock(", "-\t\t\t\t\thandledExceptions[index],", "+", "+public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement) {", "+\t// report errors for unreachable exception handlers", "+\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\t\tint index = this.indexes.get(this.handledExceptions[i]);", "+\t\tint cacheIndex = index / ExceptionHandlingFlowContext.BitCacheSize;", "+\t\tint bitMask = 1 << (index % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tif ((this.isReached[cacheIndex] & bitMask) == 0) {", "+\t\t\tscope.problemReporter().unreachableCatchBlock(", "+\t\t\t\tthis.handledExceptions[index],", "+\t\t\t\ttryStatement.catchArguments[index].type);", "+\t\t} else {", "+\t\t\tif ((this.isNeeded[cacheIndex] & bitMask) == 0) {", "+\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "+\t\t\t\t\tthis.handledExceptions[index],", "-\t\t\t} else {", "-\t\t\t\tif ((isNeeded[cacheIndex] & bitMask) == 0) {", "-\t\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "-\t\t\t\t\t\thandledExceptions[index],", "-\t\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3073815aec7e2fe0a65b5da654c7012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "diff": ["-\tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method) {", "-\t\tMethodScope scope = method.scope;", "-\t\t// can optionally skip overriding methods", "-\t\tif ((method.binding.modifiers & (ExtraCompilerModifiers.AccOverriding | ExtraCompilerModifiers.AccImplementing)) != 0", "-\t\t        && !scope.compilerOptions().reportUnusedDeclaredThrownExceptionWhenOverriding) {", "-\t\t    return;", "-\t\t}", "-\t\t    ", "-\t\t// report errors for unreachable exception handlers", "-\t\tfor (int i = 0, count = handledExceptions.length; i < count; i++) {", "-\t\t\tint index = indexes.get(handledExceptions[i]);", "-\t\t\tint cacheIndex = index / BitCacheSize;", "-\t\t\tint bitMask = 1 << (index % BitCacheSize);", "-\t\t\tif ((isReached[cacheIndex] & bitMask) == 0) {", "-\t\t\t\tscope.problemReporter().unusedDeclaredThrownException(", "-\t\t\t\t\thandledExceptions[index],", "-\t\t\t\t\tmethod,", "-\t\t\t\t\tmethod.thrownExceptions[index]);", "-\t\t\t}", "+public void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method) {", "+\tMethodScope scope = method.scope;", "+\t// can optionally skip overriding methods", "+\tif ((method.binding.modifiers & (ExtraCompilerModifiers.AccOverriding | ExtraCompilerModifiers.AccImplementing)) != 0", "+\t        && !scope.compilerOptions().reportUnusedDeclaredThrownExceptionWhenOverriding) {", "+\t    return;", "+\t}", "+\t    ", "+\t// report errors for unreachable exception handlers", "+\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\t\tint index = this.indexes.get(this.handledExceptions[i]);", "+\t\tint cacheIndex = index / ExceptionHandlingFlowContext.BitCacheSize;", "+\t\tint bitMask = 1 << (index % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tif ((this.isReached[cacheIndex] & bitMask) == 0) {", "+\t\t\tscope.problemReporter().unusedDeclaredThrownException(", "+\t\t\t\tthis.handledExceptions[index],", "+\t\t\t\tmethod,", "+\t\t\t\tmethod.thrownExceptions[index]);", "+}"]}], "num": 2476}
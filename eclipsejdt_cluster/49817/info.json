{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b05aa7dcba0431fb9ca18e9d34e3a2bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173c010fe987498a80c4ae9fed4a0d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "commitAfterChange": "ec093de0c723a8394ab4c83656f6e94579a11225", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tSystem.out.println();", "+\tStringBuffer buffer = new StringBuffer(LINE_SEPARATOR);", "-\t\t\tSystem.out.print(size);", "-\t\t\tSystem.out.print(\" file\");", "+\t\t\tbuffer.append(size);", "+\t\t\tbuffer.append(\" file\");", "-\t\t\t\tSystem.out.print(\" has \");", "+\t\t\t\tbuffer.append(\" has \");", "-\t\t\t\tSystem.out.print(\"s have \");", "+\t\t\t\tbuffer.append(\"s have \");", "-\t\t\tSystem.out.print(FAILURES[i]);", "-\t\t\tSystem.out.println('!');", "+\t\t\tbuffer.append(FAILURES[i]);", "+\t\t\tbuffer.append('!');", "+\t\t\tbuffer.append(LINE_SEPARATOR);", "-\tSystem.out.println();", "+\tbuffer.append(LINE_SEPARATOR);", "-\t\t\tSystem.out.println(\"List of file(s) with \"+FAILURES[i]+\":\");", "+\t\t\tbuffer.append(\"List of file(s) with \");", "+\t\t\tbuffer.append(FAILURES[i]);", "+\t\t\tbuffer.append(':');", "+\t\t\tbuffer.append(LINE_SEPARATOR);", "-\t\t\t\tSystem.out.println(\"\t- \"+failures.get(j));", "+\t\t\t\tbuffer.append(\"\t- \");", "+\t\t\t\tbuffer.append(failures.get(j));", "+\t\t\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t// Log failures", "+\tif (LOG_STREAM == null) {", "+\t\tSystem.out.println(buffer.toString());", "+\t} else {", "+\t\tLOG_STREAM.print(buffer.toString());", "+\t\tLOG_STREAM.close();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79249b37fdb3f90225c23762f2cdceb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "49c7e567a30e3d9cc1c4880ba35031661d2a5415", "commitAfterChange": "c9d2c7d4276b8b0f65a3b8bbfa4009e8632940f9", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["+\t\tint maxColumn = this.formatter.preferences.comment_line_length;", "+\t\tboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;", "-\t\t\tFormatJavadocNode reference= block.reference;", "+\t\t\tFormatJavadocReference reference= block.reference;", "-\t\t\t\t// format between tag name and reference", "-\t\t\t\taddReplaceEdit(previousEnd+1, reference.sourceStart - 1, \" \"); //$NON-NLS-1$", "-\t\t\t\tthis.column++;", "+\t\t\t\t// format reference", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tprintJavadocBlockReference(buffer, reference, block);", "+\t\t\t    addReplaceEdit(previousEnd+1, reference.sourceEnd, buffer.toString());", "-\t\t\t\tthis.column += previousEnd - reference.sourceStart + 1;", "-\t\tint maxColumn = this.formatter.preferences.comment_line_length;", "+\t\t\tint newLines;", "-\t\t\t\tint newLines = this.formatter.preferences.comment_insert_new_line_for_parameter && block.isParamTag() ? 1 : 0;", "+\t\t\t\tnewLines = this.formatter.preferences.comment_insert_new_line_for_parameter && !block.isInlined() && block.isParamTag() ? 1 : 0;", "-\t\t\t   \t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t   \t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, clearBlankLines, false, null);", "-\t\t\t\tint newLines = this.column > this.formatter.preferences.comment_line_length ? 1 : 0;", "+\t\t\t\tnewLines = this.column > this.formatter.preferences.comment_line_length ? 1 : 0;", "-\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, clearBlankLines, false, null);", "-\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, clearBlankLines, false, null);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Indent if new line was added", "+\t\t\t\t\t\tif (newLines > 0) {", "+\t\t\t\t\t\t\tint col = this.column;", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tint textEnd = text.separatorsPtr == -1 ? text.sourceEnd : (int) (text.separators[0] >>> 32);", "+\t\t\t\t\t\t\tprintJavadocTextLine(buffer, text.sourceStart, textEnd, block, true, true, true);", "+\t\t\t\t\t\t\taddReplaceEdit(text.sourceStart, textEnd, buffer.toString());", "+\t\t\t\t\t\t\ttextLength -= this.column - col;"]}], "num": 49817}
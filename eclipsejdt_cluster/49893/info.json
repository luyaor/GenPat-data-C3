{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81a0cdd6abe288f0bd8436d9288cde19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb9fd32f3ca03cc92512683f73d838a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "375d00ce9ee091b98edb16642d8a9054d32021f0", "commitAfterChange": "d3432881419f057ba041557b162e4f05f5019457", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testClean() throws IOException, Exception", "signatureAfterChange": " public void testClean() throws IOException, Exception", "diff": ["-\t\t// Format the source", "-\t\tTextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "+\t\ttry {", "+\t\t\t// Format the source", "+\t\t\tTextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "-\t\t// Write the result", "-\t\tif (edit != null) {", "-\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "-\t\t\tString inputPath = this.inputFiles[i].getPath().substring(INPUT_DIR.getPath().length()+1);", "-\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "-\t\t\twrittenFile.getParentFile().mkdirs();", "-\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "+\t\t\t// Write the result", "+\t\t\tif (edit != null) {", "+\t\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "+\t\t\t\tString inputPath = this.inputFiles[i].getPath().substring(INPUT_DIR.getPath().length()+1);", "+\t\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "+\t\t\t\twrittenFile.getParentFile().mkdirs();", "+\t\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "+\t\t\t}", "+\t\t}", "+\t\tcatch (Exception ex) {", "+\t\t\t// skip silently"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6e4483c29bd7ab7b31a22bf466b106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "a8f4b2b4fb3c4acf806aeb860231063e29831fb0", "commitAfterChange": "f30a93735a30ed8ef59e945eb0c202ea80ef2a41", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public boolean subOrSuperOfFocus(ReferenceBinding typeBinding)", "signatureAfterChange": " public boolean subOrSuperOfFocus(ReferenceBinding typeBinding)", "diff": ["-\tif (this.subTypeOfType(this.focusType, typeBinding)) return true;", "-\tif (!this.superTypesOnly && this.subTypeOfType(typeBinding, this.focusType)) return true;", "+\ttry {", "+\t\tif (this.subTypeOfType(this.focusType, typeBinding)) return true;", "+\t\tif (!this.superTypesOnly && this.subTypeOfType(typeBinding, this.focusType)) return true;", "+\t} catch (AbortCompilation e) {", "+\t\t// unresolved superclass/superinterface -> ignore", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cab7e2123cc557835a78422f0b9bfbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "commitAfterChange": "6ca7b05ef1b6b0934e3b4a61271beb56d55912f0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tIPackageBinding resolvePackage(PackageDeclaration pkg)", "signatureAfterChange": " \tIPackageBinding resolvePackage(PackageDeclaration pkg)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(pkg);", "-\t\tif (node instanceof ImportReference) {", "-\t\t\tImportReference importReference = (ImportReference) node;", "-\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "-\t\t\tif ((binding != null) && (binding.isValidBinding())) {", "-\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "-\t\t\t\tif (packageBinding == null) {", "-\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(pkg);", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "+\t\t\t\tif ((binding != null) && (binding.isValidBinding())) {", "+\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "+\t\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.bindingsToAstNodes.put(packageBinding, pkg);", "+\t\t\t\t\tString key = packageBinding.getKey();", "+\t\t\t\t\tif (key != null) {", "+\t\t\t\t\t\tthis.bindingKeysToAstNodes.put(key, pkg);\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\treturn packageBinding;", "-\t\t\t\tthis.bindingsToAstNodes.put(packageBinding, pkg);", "-\t\t\t\tString key = packageBinding.getKey();", "-\t\t\t\tif (key != null) {", "-\t\t\t\t\tthis.bindingKeysToAstNodes.put(key, pkg);\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn packageBinding;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357"]}], "num": 49893}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a6e1c05f42f3f2bbedd5d5dac39f5ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a21bc243499ba40bda9efab05290fe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " \tpublic void test183()", "signatureAfterChange": " \tpublic void test183()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tObject a2 = (Hashtable) o;\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Hashtable is a raw type. References to generic type Hashtable<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 18)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 27)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\t\"\tabstract class Z3 extends Hashtable {\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Hashtable is a raw type. References to generic type Hashtable<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 27)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db70a9f685b5ad287d0dfe8511a5840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 1210, "methodNumberAfterChange": 1210, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" +", "+\t\t\"\tpublic static <S, T extends Comparable<S>, R extends S & T> R max(T arg1, S arg2) {\\n\" +", "+\t\t\"\t                                                              ^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"4. ERROR in X.java (at line 6)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"5. WARNING in X.java (at line 7)\\n\" +", "+\t\t\"6. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"6. WARNING in X.java (at line 11)\\n\" +", "+\t\t\"7. WARNING in X.java (at line 11)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c360a5dd9564a80807559c15bcf2e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "3ee5245339c28c9f118b2d56a8158cb4aa75c312", "commitAfterChange": "7d40781ce4910fcc72ea18dc76569aa9d1391ab9", "methodNumberBeforeChange": 188, "methodNumberAfterChange": 188, "signatureBeforeChange": " public void test447119d()", "signatureAfterChange": " public void test447119d()", "diff": ["+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"import java.util.Collections;\\n\" +", "+\t\t\t\t\"import java.util.Comparator;\\n\" +", "+\t\t\t\t\"\t\tList<String> list = new ArrayList<String>();\\n\" +", "-\t\t\t\t\"\t\t\tSystem.out.println(\\\"- \\\" + m.getGenericReturnType() + \\\" \\\" + m.getName() + \\\"(\\\" + m.getGenericParameterTypes()[0] + \\\")\\\");\\n\" +", "+\t\t\t\t\"\t\t\tlist.add(\\\"- \\\" + m.getGenericReturnType() + \\\" \\\" + m.getName() + \\\"(\\\" + m.getGenericParameterTypes()[0] + \\\")\\\");\\n\" +", "+\t\t\t\t\"\t\tCollections.sort(list, new Comparator<String>() {\\n\" +", "+\t\t\t\t\"\t\t\tpublic int compare(String s1, String s2) {\\n\" +", "+\t\t\t\t\"\t\t\t\treturn s1.compareTo(s2);\\n\" +", "+\t\t\t    \"\t\t\t}\\n\" +", "+\t\t\t\t\"\t\t});\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(list.toString());\\n\" +", "-\t\t\t\"- java.util.List<java.lang.String> noop(java.util.List<java.lang.String>)\\n\" + ", "-\t\t\t\"- java.util.List<java.lang.String> lambda$0(java.util.List<java.lang.String>)\",", "+\t\t\t\"[- java.util.List<java.lang.String> lambda$0(java.util.List<java.lang.String>), - java.util.List<java.lang.String> noop(java.util.List<java.lang.String>)]\","]}], "num": 64965}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1459f3e9d36a2f08ca0b2d560438a51", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590fe4ce3ec56ee03549f9bf0fcf63b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "15119daf817db1018e77a6fda243b1a0915bea1f", "commitAfterChange": "46f57536ed8e2bfbe5a9484e153647c7c5b9cb5d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void testCompletionFindImport2() throws JavaModelException", "signatureAfterChange": "  public void testCompletionFindImport2() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionFindImport2.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"pack1.P\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"should have six completions\",", "-\t\t\"element:PX    completion:pack1.PX;    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\"+", "-\t\t\"element:pack1.pack3    completion:pack1.pack3.*;    relevance:\"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "+\tthis.wc = getWorkingCopy(", "+            \"/Completion/src/CompletionFindImport2.java\",", "+            \"import pack1.P\\n\"+", "+            \"\\n\"+", "+            \"public class CompletionFindImport2 {\\n\"+", "+            \"\\n\"+", "+            \"}\");", "+    ", "+    ", "+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+    String str = this.wc.getSource();", "+    String completeBehind = \"pack1.P\";", "+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+    ", "+\tassertResults(", "+\t\t\t\"pack1.pack3[PACKAGE_REF]{pack1.pack3.*;, pack1.pack3, null, null, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\"+", "+\t\t\t\"PX[TYPE_REF]{pack1.PX;, pack1, Lpack1.PX;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\",", "+\t\t\trequestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "746cf521ac7059bc593f8d41c0f0a23a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testCompletionFindClass() throws JavaModelException", "signatureAfterChange": " public void testCompletionFindClass() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionFindClass.java\");", "+\tthis.wc = getWorkingCopy(", "+            \"/Completion/src/CompletionFindClass.java\",", "+            \"public class CompletionFindClass {\\n\" +", "+            \"\tprivate    A[] a;\\n\" +", "+            \"\tpublic CompletionFindClass () {\\n\" +", "+            \"\t\tthis.a = new A\\n\" +", "+            \"\t}\\n\" +", "+            \"}\");", "+    ", "+    ", "+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+    String str = this.wc.getSource();", "+    String completeBehind = \"A\";", "+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "-\tString str = cu.getSource();", "-\tString completeBehind = \"A\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\t", "-\tcu.codeComplete(cursorLocation, requestor);", "-\tassertEquals(", "-\t\t\"should have one class\",", "-\t\t\"element:A    completion:A    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:A1    completion:A1    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:A2    completion:A2    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:A3    completion:A3    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:ABC    completion:p1.ABC    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:ABC    completion:p2.ABC    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),", "-\t\trequestor.getResults());\t", "+    assertResults(", "+    \t\t\"ABC[TYPE_REF]{p1.ABC, p1, Lp1.ABC;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\" +", "+    \t\t\"ABC[TYPE_REF]{p2.ABC, p2, Lp2.ABC;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"A3[TYPE_REF]{A3, , LA3;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"A[TYPE_REF]{A, , LA;, null, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\",", "+            requestor.getResults());"]}], "num": 24487}
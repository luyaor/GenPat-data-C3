{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f8cb6f1d3bafa77ded7677d531af02e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c558774c84ea24810c3eba3baf37d732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "0e6e3363ae1376359a141e5a7728b6487db35f2e", "commitAfterChange": "ec6df7d4c471e5dbef077b14779058e1a50feb58", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected IMethod findCorrespondingMethod(IMethod method, IMethod[] methods)", "signatureAfterChange": "\r protected IMethod[] findMethods(IMethod method, IMethod[] methods)", "diff": ["-protected IMethod findCorrespondingMethod(IMethod method, IMethod[] methods) {\r", "+protected IMethod[] findMethods(IMethod method, IMethod[] methods) {\r", "+\tArrayList list = new ArrayList();\r", "-\t\t\t\treturn existingMethod;\r", "+\t\t\t\tlist.add(existingMethod);\r", "-\treturn null;\r", "+\tint size = list.size();\r", "+\tif (size == 0) {\r", "+\t\treturn null;\r", "+\t} else {\r", "+\t\tIMethod[] result = new IMethod[size];\r", "+\t\tlist.toArray(result);\r", "+\t\treturn result;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4f455786fc633b8585962c6e3ee4a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "signatureAfterChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "diff": ["+\tArrayList typeParameterHandles = new ArrayList();", "-\t\tgenerateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, childrenHandles);", "+\t\tgenerateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, typeParameterHandles);", "-\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles);", "+\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles, typeParameterHandles);", "+\tint typeParameterHandleSize = typeParameterHandles.size();", "+\tif (typeParameterHandleSize == 0) {", "+\t\tthis.typeParameters = TypeParameter.NO_TYPE_PARAMETERS;", "+\t} else {", "+\t\tthis.typeParameters = new ITypeParameter[typeParameterHandleSize];", "+\t\ttypeParameterHandles.toArray(this.typeParameters);", "+\t}"]}], "num": 40919}
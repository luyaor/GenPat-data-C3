{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d9f9b45acb8b133244e9fc54ef3981f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2c1211a960db2c03f336d43efc68be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "commitAfterChange": "6ca7b05ef1b6b0934e3b4a61271beb56d55912f0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "signatureAfterChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(importDeclaration);", "-\t\tif (node instanceof ImportReference) {", "-\t\t\tImportReference importReference = (ImportReference) node;", "-\t\t\tif (importReference.onDemand) {", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "-\t\t\t\tif (binding != null) {", "-\t\t\t\t\tif (binding.bindingType() == BindingIds.PACKAGE) {", "-\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "-\t\t\t\t\t\tif (packageBinding == null) {", "-\t\t\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(importDeclaration);", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\t\tif (importReference.onDemand) {", "+\t\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "+\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\tif (binding.bindingType() == BindingIds.PACKAGE) {", "+\t\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "+\t\t\t\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn packageBinding;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t\treturn packageBinding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tBinding binding = this.scope.getTypeOrPackage(importReference.tokens);", "+\t\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn typeBinding;", "+\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "-\t\t\t} else {", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(importReference.tokens);", "-\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "-\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "-\t\t\t\t}", "+\t\t} catch(AbortCompilation e) {", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bffe7710da5bb41dbc634c0ba6d3f54a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "829046a361301380cac04e3af6844e4acd156d61", "commitAfterChange": "88fda3edbb235ca07ba1c50b6885e3cd0955511a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["-\t\tif (cu != null && cu.ignoreOptionalProblems())", "-\t\t\treturn;", "+\t\ttry{", "+\t\t\tif (cu != null && cu.ignoreOptionalProblems())", "+\t\t\t\treturn;", "+\t\t// workaround for illegal implementation of ICompilationUnit, see https://bugs.eclipse.org/372351", "+\t\t} catch (AbstractMethodError ex) {", "+\t\t\t// continue", "+\t\t}"]}], "num": 15077}
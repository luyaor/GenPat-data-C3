{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75b7c0417256d3952a41c0d7cd1091e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6988cc34e1746ef66386ec62d4d349ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope)", "diff": ["-\t\treturn this.singleAbstractMethod = new ParameterizedMethodBinding(parameterizedType, theAbstractMethod);", "+\t\tMethodBinding [] choices = parameterizedType.getMethods(theAbstractMethod.selector);", "+\t\tfor (int i = 0, length = choices.length; i < length; i++) {", "+\t\t\tMethodBinding method = choices[i];", "+\t\t\tif (!method.isAbstract() || method.redeclaresPublicObjectMethod(scope)) continue; // (re)skip statics, defaults, public object methods ...", "+\t\t\tthis.singleAbstractMethod = method;", "+\t\t\tbreak;", "+\t\t}", "+\t\treturn this.singleAbstractMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c34c6dab5396e98cd607331523e3da50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["+\t\tint index = replaceWildcards ? 0 : 1;", "-\t\t\treturn this.singleAbstractMethod;", "+\t\t\tif (this.singleAbstractMethod[index] != null)", "+\t\t\treturn this.singleAbstractMethod[index];", "+\t\t} else {", "+\t\t\tthis.singleAbstractMethod = new MethodBinding[2];", "-\t\t\treturn this.singleAbstractMethod = theAbstractMethod;", "+\t\t\treturn this.singleAbstractMethod[index] = theAbstractMethod;", "-\t\t\tthis.singleAbstractMethod = method;", "+\t\t\tthis.singleAbstractMethod[index] = method;", "-\t\treturn this.singleAbstractMethod;", "+\t\treturn this.singleAbstractMethod[index];"]}], "num": 29932}
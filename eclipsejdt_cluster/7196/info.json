{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbbb5188c136bb9ff8e33664f551bef0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e1fffb7ffd7806300e8a6cd8a9b3a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8a13e69e3b12126618841f95523da258e6a2ee16", "commitAfterChange": "6063db5213e327d90ee8e193ce709b39fb701fb5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t} else {\r", "-\t\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;\r", "-\t\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based\r", "-\t\t\t\tint indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based\r", "-\t\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;\r", "-\t\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {\r", "-\t\t\t\t\t// a extra lookup is required\r", "-\t\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "-\t\t\t\t\tBinding binding = null;\r", "-\t\t\t\t\tif (internalScope == null) {\r", "-\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "-\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "-\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t// it is a type\r", "-\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\treturn null;\r", "+\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;\r", "+\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based\r", "+\t\t\tint indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based\r", "+\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;\r", "+\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {\r", "+\t\t\t\t// a extra lookup is required\r", "+\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\tBinding binding = null;\r", "+\t\t\t\tif (internalScope == null) {\r", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "-\t\t\t\t\tif (indexInQualifiedName == indexOfFirstFieldBinding) {\r", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t}\r", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {\r", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {\r", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// it is a type\r", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn null;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (indexInQualifiedName == indexOfFirstFieldBinding) {\r", "+\t\t\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t/* This is the case for a name which is part of a qualified name that\r", "+\t\t\t\t\t * cannot be resolved. See PR 13063.\r", "+\t\t\t\t\t */\r", "+\t\t\t\t\tif (qualifiedNameReference.otherBindings == null) {\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\t\t\t/* This is the case for a name which is part of a qualified name that\r", "-\t\t\t\t\t\t * cannot be resolved. See PR 13063.\r", "-\t\t\t\t\t\t */\r", "-\t\t\t\t\t\tif (qualifiedNameReference.otherBindings == null) {\r", "-\t\t\t\t\t\t\treturn null;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37cfbc32915eaaa301c4b96cc79ed33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "259752fd2611ae86a8e7deb13311cd77026ab6f4", "commitAfterChange": "4725cc4b92cda70d0724324edfd82ed8a46041bc", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "  \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode currentNode, int index)", "diff": ["-\tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index) {", "+\tprivate IBinding returnBindingForQualifiedNamePart(ASTNode currentNode, int index) {", "-\t\tAstNode node = (AstNode) this.newAstToOldAst.get(parent);", "+\t\tif (!(currentNode instanceof QualifiedName)) {", "+\t\t\treturn null;", "+\t\t}", "+\t\tQualifiedName qualifiedName = (QualifiedName) currentNode;", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(qualifiedName);", "-\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);", "+\t\t\t\tBlockScope internalScope = (BlockScope) this.astNodesToBlockScope.get(qualifiedName);", "-\t\t\t} else {", "-\t\t\t\tif (indexInQualifiedName == indexOfFirstFieldBinding) {", "-\t\t\t\t\tif (qualifiedNameReference.isTypeReference()) {", "-\t\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tBinding binding = qualifiedNameReference.binding;", "-\t\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "-\t\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t} else if (indexInQualifiedName == indexOfFirstFieldBinding) {", "+\t\t\t\tif (qualifiedNameReference.isTypeReference()) {", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);", "-\t\t\t\t\t/* This is the case for a name which is part of a qualified name that", "-\t\t\t\t\t * cannot be resolved. See PR 13063.", "-\t\t\t\t\t */", "-\t\t\t\t\tif (qualifiedNameReference.otherBindings == null) {", "-\t\t\t\t\t\treturn null;", "+\t\t\t\t\tBinding binding = qualifiedNameReference.binding;", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "-\t\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/* This is the case for a name which is part of a qualified name that", "+\t\t\t\t * cannot be resolved. See PR 13063.", "+\t\t\t\t */", "+\t\t\t\tif (qualifiedNameReference.otherBindings == null || (otherBindingLength - index - 1) < 0) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t", "-\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);", "-\t\t\t\tBinding binding = null;", "-\t\t\t\tif (internalScope == null) {", "-\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "-\t\t\t\t} else {", "-\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\tif (indexInQualifiedName >= 0) {", "+\t\t\t\t\tBlockScope internalScope = (BlockScope) this.astNodesToBlockScope.get(qualifiedName);", "+\t\t\t\t\tBinding binding = null;", "+\t\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t}", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof ImportReference) {", "+\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\tint importReferenceLength = importReference.tokens.length;", "+\t\t\tint indexInImportReference = importReferenceLength - index; // one-based", "+\t\t\tif (indexInImportReference >= 0) {", "+\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, indexInImportReference));"]}], "num": 7196}
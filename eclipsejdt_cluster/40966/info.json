{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cd423790271b48c9dcb2410df45466b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b819c1cdc174c9d5f6893849470ec73f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5b1669051247ec5116f15d92b01a9df56f73fca0", "commitAfterChange": "09c36b50e261c28aae31962bd3a275f3b0a10ede", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\t\t\tboolean isSource;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tIClasspathEntry entry = ((IPackageFragmentRoot)pkg.getParent()).getRawClasspathEntry();", "-\t\t\t\t\t\t\tisSource = entry.getEntryKind() == IClasspathEntry.CPE_SOURCE;", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// project does not exist: cannot happen", "-\t\t\t\t\t\t\tisSource = false;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tRootInfo rootInfo = rootInfo(pkg.getParent().getPath(), delta.getKind());", "+\t\t\t\t\t\tboolean isSource = ", "+\t\t\t\t\t\t\trootInfo == null // if null, defaults to source", "+\t\t\t\t\t\t\t|| rootInfo.entryKind == IClasspathEntry.CPE_SOURCE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c718c4b47868655862a3b1a20491953c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-", "-\t\tif (argumentType == TypeBinding.NULL || argumentType == this)", "+\t\tif (argumentType == TypeBinding.NULL || argumentType == this) {", "+\t\t}", "-\t\t\t\t\tReferenceBinding superclassBound = hasSubstitution ? (ReferenceBinding)Scope.substitute(substitution, this.superclass) : this.superclass;", "-\t\t\t\t\t\tif (superclassBound.id != TypeIds.T_JavaLangObject) {", "+\t\t\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "+\t\t\t\t\t\tif (substitutedSuperType.id != TypeIds.T_JavaLangObject) {", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superclassBound))", "+\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(superclassBound);", "+\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);", "-\t\t\t\t\t\t\t\t\tif (superclassBound.isProvablyDistinct(match)) {", "+\t\t\t\t\t\t\t\t\tif (substitutedSuperType.isProvablyDistinct(match)) {", "-\t\t\t\t\t\t\t\t\tmatch =  superclassBound.findSuperTypeOriginatingFrom(wildcardBound);", "+\t\t\t\t\t\t\t\t\tmatch =  substitutedSuperType.findSuperTypeOriginatingFrom(wildcardBound);", "-\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !superclassBound.isTypeVariable()) {", "+\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !substitutedSuperType.isTypeVariable()) {", "-\t\t\t\t\tReferenceBinding[] superInterfaceBounds = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces) : this.superInterfaces;", "-\t\t\t\t\tint length = superInterfaceBounds.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tTypeBinding superInterfaceBound = superInterfaceBounds[i];", "+\t\t\t\t\tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(superInterfaceBound))", "+\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(superInterfaceBound);", "+\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeOriginatingFrom(substitutedSuperType);", "-\t\t\t\t\t\t\t\tif (superInterfaceBound.isProvablyDistinct(match)) {", "+\t\t\t\t\t\t\t\tif (substitutedSuperType.isProvablyDistinct(match)) {"]}], "num": 40966}
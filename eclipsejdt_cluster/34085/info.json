{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34d99663de7188ce7b7002f216217c2e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb1a5fb415f04c0e90f3a1c2995e70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "7b815bfaa3b1a804bb04e149d3fdcdeccff01e22", "commitAfterChange": "f447e8419317d96ca676850de75b170e4276d1fc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t", "-\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {", "-\t\t\t\tthis.isPolyExpression = true;", "+", "+\t\t\tif (isPolyExpression()) {", "+\t\t\t}", "+", "+\t\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {", "-\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "-\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "+\t\t\tif (valueIfTrueType != null) {", "+\t\t\t\tif (!valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.valueIfTrue.computeConversion(scope, this.expectedType, this.originalValueIfTrueType);\t", "+\t\t\t\t}", "-\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "-\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "+\t\t\tif (valueIfFalseType != null) {", "+\t\t\t\tif (!valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.valueIfFalse.computeConversion(scope, this.expectedType, this.originalValueIfFalseType);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8272c434f0e1c965f748f9d4d6eba5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "7b815bfaa3b1a804bb04e149d3fdcdeccff01e22", "commitAfterChange": "f447e8419317d96ca676850de75b170e4276d1fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "-\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfTrueType, targetType, this.valueIfTrue, null);", "+\t\t\tif (valueIfTrueType != null) {", "+\t\t\t\tif (!valueIfTrueType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "+\t\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfTrueType, targetType, this.valueIfTrue, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.valueIfTrue.computeConversion(this.polyExpressionScope, targetType, this.originalValueIfTrueType);\t", "+\t\t\t\t}", "-\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "-\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfFalseType, targetType, this.valueIfFalse, null);", "+\t\t\tif (valueIfFalseType != null) {", "+\t\t\t\tif (!valueIfFalseType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "+\t\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfFalseType, targetType, this.valueIfFalse, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.valueIfFalse.computeConversion(this.polyExpressionScope, targetType, this.originalValueIfFalseType);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e8a74a99a62782558596a99cf63c3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "signatureAfterChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "diff": ["+\t\tif (!this.use18specifics)", "+\t\t\treturn false;", "+\t\t", "+\t\tif (this.originalValueIfTrueType == null || this.originalValueIfFalseType == null) // resolution error.", "+\t\t\treturn false;", "+\t\t", "+\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE)", "+\t\t\treturn true;", "+\t\t", "-\t\tTypeBinding opType = this.valueIfTrue.resolvedType;", "-\t\tif (opType != null && opType.id != TypeIds.T_null) {", "-\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "+\t\tif (this.originalValueIfTrueType.isBaseType() || (this.originalValueIfTrueType.id >= TypeIds.T_JavaLangByte && this.originalValueIfTrueType.id <= TypeIds.T_JavaLangBoolean)) {", "+\t\t\tif (this.originalValueIfFalseType.isBaseType() || (this.originalValueIfFalseType.id >= TypeIds.T_JavaLangByte && this.originalValueIfFalseType.id <= TypeIds.T_JavaLangBoolean))", "-\t\topType = this.valueIfFalse.resolvedType;", "-\t\tif (opType != null && opType.id != TypeIds.T_null) {", "-\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "-\t\t\t\treturn false;", "-\t\t}", "-", "+\t\t", "+\t\t// clause around generic method's return type prior to instantiation needs double check. "]}], "num": 34085}
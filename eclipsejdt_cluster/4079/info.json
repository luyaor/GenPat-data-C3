{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a356c396624fead59f03b6d7ea6c2b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5174c80ddad5b9d02cd6db3219f4364b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["-public class NoClassNoMethodDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "+public class NoClassNoMethodDeclarationVisitor extends ASTVisitor {", "-\t\treturn (constructorDeclaration.bits & AstNode.HasLocalTypeMASK) != 0; // continue only if it has local type", "+\t\treturn (constructorDeclaration.bits & ASTNode.HasLocalTypeMASK) != 0; // continue only if it has local type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b996bdcaa28a62c0ac2df1433aa3902c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["-public class ClassButNoMethodDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "+public class ClassButNoMethodDeclarationVisitor extends ASTVisitor {", "-\t\treturn (constructorDeclaration.bits & AstNode.HasLocalTypeMASK) != 0; // continue only if it has local type", "+\t\treturn (constructorDeclaration.bits & ASTNode.HasLocalTypeMASK) != 0; // continue only if it has local type"]}], "num": 4079}
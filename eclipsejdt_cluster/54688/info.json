{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7224be215d741b79ece1913f4376f347", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260fc56c0c6bd29622eef5110151c96b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "commitAfterChange": "495498c492866181dc63a6039b81ee18c37f454c", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tprivate void parseFlags()", "signatureAfterChange": " \t \tprivate void parseThrownExceptions()", "diff": ["-\tprivate void parseFlags() {", "-\t\tif (!this.scanner.isAtFlagsStart() || this.scanner.nextToken() != Scanner.FLAGS) return;", "-\t\tconsumeModifiers(this.scanner.getTokenSource());", "+\tprivate void parseThrownExceptions() {", "+\t\twhile (this.scanner.isAtThrownStart()) {", "+\t\t\tthis.scanner.skipThrownStart();", "+\t\t\tBindingKeyParser parser = newParser();", "+\t\t\tparser.parse();", "+\t\t\tconsumeParser(parser);", "+\t\t\tconsumeException();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4174a7f65a1dbd6c164bd9c7bfd68101", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "0f82c3c2351d2b4aa115f915a692d896ffbf12db", "commitAfterChange": "42ba068696287a55bc72837ef925c3e42a2ffc11", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tprivate void parseRawType()", "signatureAfterChange": " \t \tprivate void parseRawType()", "diff": ["+\t\tthis.scanner.skipTypeEnd();", "+\t\tparseFlags();", "+\t \tif (this.scanner.isAtMemberTypeStart() && this.scanner.nextToken() == Scanner.TYPE) {", "+\t \t\tchar[] typeName = this.scanner.getTokenSource();", "+\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\tthis.scanner.skipParametersStart();", "+\t\t \t\tparseParameterizedType(typeName, this.scanner.isAtRawTypeEnd());", "+\t\t\t} else", "+\t\t\t\tconsumeParameterizedType(typeName, true/*raw*/);", "+\t \t}"]}], "num": 54688}
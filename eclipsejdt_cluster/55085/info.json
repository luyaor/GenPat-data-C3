{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c21e36830f1e3498be3f5e87aeb51a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "188fe8426d6ef1129bcd5b08318b0b42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "fe6515e9c139811aa2eb665a085a3308b2e99fb0", "commitAfterChange": "647dfd947cd75acfba9ec1f3f1ed629ee1c122c7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public final boolean canBeSeenBy(Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(Scope scope)", "diff": ["-\t\tTypeBinding currentType = invocationType.erasure();", "-\t\tTypeBinding declaringClass = enclosingType().erasure(); // protected types always have an enclosing one", "+\t\tTypeBinding declaringClass = enclosingType(); // protected types always have an enclosing one", "+\t\tdeclaringClass = declaringClass.erasure();// erasure cannot be null", "+\t\tTypeBinding currentType = invocationType.erasure();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7029b081506aba56add62cb4890f3128", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "c775c1d0f23881553fb0e260a70314c10cea2026", "commitAfterChange": "05b6d0de9346f14e62c144050801c846baf33bc9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public final boolean canBeSeenBy(Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(Scope scope)", "diff": ["-\t\tReferenceBinding currentType = invocationType;", "-\t\tReferenceBinding declaringClass = enclosingType(); // protected types always have an enclosing one", "+\t\tTypeBinding currentType = invocationType.erasure();", "+\t\tTypeBinding declaringClass = enclosingType().erasure(); // protected types always have an enclosing one", "-\t\t\tif (declaringClass.isSuperclassOf(currentType)) return true;", "+\t\t\tif (currentType.findSuperTypeOriginatingFrom(declaringClass) != null) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f92b2d914ea35dfb5ae3903730d342a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "c8d7e735b1fdf27bd805f7e5ae0a6eacad7e4530", "commitAfterChange": "8fed2cc02e45d0c02f4805c1a6592bef37ca778a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public TypeBinding genericCast(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding genericCast(TypeBinding targetType)", "diff": ["-public TypeBinding genericCast(TypeBinding otherType) {", "-\tif (this == otherType)", "+public TypeBinding genericCast(TypeBinding targetType) {", "+\tif (this == targetType) ", "-\tTypeBinding otherErasure = otherType.erasure();", "-\tif (otherErasure == erasure())", "+\tTypeBinding targetErasure = targetType.erasure();", "+\t// type var get replaced by upper bound", "+\tif (erasure().findSuperTypeOriginatingFrom(targetErasure) != null) ", "-\treturn otherErasure;", "+\treturn targetErasure;"]}], "num": 55085}
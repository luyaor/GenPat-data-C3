{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b431f89d77ce4169634e07f16bf13c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e9f2237c4171b1c176d692f2dc7bfc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.complianceLevel <= ClassFileConstants.JDK1_6", "+\t\t\t&& this.binding.isPolymorphic()) {", "+\t\tscope.problemReporter().polymorphicMethodNotBelow17(this);", "+\t\treturn null;", "+\t}", "+", "+\tif (((this.bits & ASTNode.InsideExpressionStatement) != 0)", "+\t\t\t&& this.binding.isPolymorphic()) {", "+\t\t// we only set the return type to be void if this method invocation is used inside an expression statement", "+\t\tthis.binding = scope.environment().updatePolymorphicMethodReturnType((PolymorphicMethodBinding) this.binding, TypeBinding.VOID);", "+\t}", "-\tfinal CompilerOptions compilerOptions = scope.compilerOptions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a9762ec99011de84d1f1804050b1243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static boolean checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+\t\tboolean is1_7 = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7;", "+\t\tif (is1_7 && method.isPolymorphic()) {", "+\t\t\treturn false;", "+\t\t}", "-\t\t    \tif (!parameterType.isReifiable()) {", "-\t\t\t\t    scope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "-\t\t    \t}", "+\t\t\t\tif (!parameterType.isReifiable()", "+\t\t\t\t\t\t&& (!is1_7 || ((method.tagBits & TagBits.AnnotationSafeVarargs) == 0))) {", "+\t\t\t\t\tscope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "+\t\t\t\t}", "-\t\t\t   int argLength = arguments.length;", "-\t\t\t   if (lastIndex <= argLength) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=337093", "-\t\t\t\t   \tTypeBinding parameterType = params[lastIndex];", "+\t\t\t\tint argLength = arguments.length;", "+\t\t\t\tif (lastIndex <= argLength) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=337093", "+\t\t\t\t\tTypeBinding parameterType = params[lastIndex];", "-\t\t\t\t    if (paramLength != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions()) {", "-\t\t\t\t    \tparameterType = ((ArrayBinding) parameterType).elementsType(); // single element was provided for vararg parameter", "-\t\t\t\t    \tif (!parameterType.isReifiable()) {", "-\t\t\t\t\t\t    scope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "-\t\t\t\t    \t}", "+\t\t\t\t\tif (paramLength != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions()) {", "+\t\t\t\t\t\tparameterType = ((ArrayBinding) parameterType).elementsType(); // single element was provided for vararg parameter", "+\t\t\t\t\t\tif (!parameterType.isReifiable()", "+\t\t\t\t\t\t\t\t&& (!is1_7 || ((method.tagBits & TagBits.AnnotationSafeVarargs) == 0))) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeGenericArrayForVarargs(parameterType, (ASTNode)invocationSite);", "+\t\t\t\t\t\t}", "-\t\t\t\t    }", "+\t\t\t\t\t}", "-\t\t    scope.problemReporter().wildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);", "+\t\t\tscope.problemReporter().wildcardInvocation((ASTNode)invocationSite, receiverType, method, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ace8802f5b85219745cbafc186b98e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "0364a4a83fd36a50e2f640c1ff760bbc5a6d0c8e", "commitAfterChange": "d03a3f510c4024243302c43ee912819616ee9cc6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\t} else if (!this.binding.declaringClass.isInterface()", "-\t\t\t\t\t\t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "-\t\t\t\t// actually overrides, but did not claim to do so", "-\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t} else {", "+\t\t\t\t//In case of  a concrete class method, we have to check if it overrides(in 1.5 and above) OR implements a method(1.6 and above).", "+\t\t\t\t//Also check if the method has a signature that is override-equivalent to that of any public method declared in Object.", "+\t\t\t\tif (!this.binding.declaringClass.isInterface()){", "+\t\t\t\t\t\tif((bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif(complianceLevel >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t\t\t\t&& compilerOptions.reportMissingOverrideAnnotationForInterfaceMethodImplementation", "+\t\t\t\t\t\t\t\t&& this.binding.isImplementing()) {", "+\t\t\t\t\t\t\t\t\t// actually overrides, but did not claim to do so", "+\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotationForInterfaceMethodImplementation(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse {\t//For 1.6 and above only", "+\t\t\t\t\t//In case of a interface class method, we have to check if it overrides a method (isImplementing returns true in case it overrides)", "+\t\t\t\t\t//Also check if the method has a signature that is override-equivalent to that of any public method declared in Object.", "+\t\t\t\t\tif(complianceLevel >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t\t\t&& compilerOptions.reportMissingOverrideAnnotationForInterfaceMethodImplementation", "+\t\t\t\t\t\t\t&& (((bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) || this.binding.isImplementing())){", "+\t\t\t\t\t\t// actually overrides, but did not claim to do so", "+\t\t\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotationForInterfaceMethodImplementation(this);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd53a7c0d52cca8383ac297836b69ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["-\t\tMethodBinding methodBinding;", "+\t\tMethodBinding methodBinding = null;", "+\t\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\t\ttagBits = methodBinding.tagBits;", "+\t\t\ttagBits = (useTypeAnnotations) ? methodBinding.returnType.tagBits : methodBinding.tagBits;", "-\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "+\t\t\tif (useTypeAnnotations && (this.expression.resolvedType.tagBits & TagBits.AnnotationNullMASK) != 0) // TODO(stephan) more detailed checking", "+\t\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, 3);", "+\t\t\telse", "+\t\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);"]}], "num": 27023}
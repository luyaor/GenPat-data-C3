{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd97d15e98a60a20248dfcc9ee61a172", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5de00a32df75f9f98c3aee7bc2ea0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic void printQualifiedReference(int sourceEnd)", "signatureAfterChange": "  \tpublic void printQualifiedReference(int sourceEnd)", "diff": ["+\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\tdefault: ", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524aa579e4957358b8e16a551913c2ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\tFormatJavadocNode previousNode = null;", "-\t\t\t\t\tif (newLines == 0 && previousNode.isText() && node.isText()) {", "+\t\t\t\t\tif (newLines == 0 && node.isText()) {", "-\t\t\t\t\t\t\tif ((this.column + tokenLength + 1) > this.formatter.preferences.comment_line_length) {", "-\t\t\t\t\t\t\t\t// finally a new line will be inserted while printing next text, just reset the column", "-\t\t\t\t\t\t\t\tthis.column = 1;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// print one", "-\t\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t\t\t\tif (nodeStart > (previousEnd+1)) {", "+\t\t\t\t\t\t\t\ttokenLength++; // include space between nodes", "+\t\t\t\t\t\t\tif ((this.column + tokenLength) > this.formatter.preferences.comment_line_length) {", "+\t\t\t\t\t\t\t\t// finally a new line will be inserted while printing next text", "+\t\t\t\t\t\t\t\tnewLines = 1;", "+\t\t\t\t\t\t\t\t((FormatJavadocText)node).linesBefore = 1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t\t\t// Immutable tags are not formatted", "-\t\t\t\t\t\t// Immutable tags are not formatted", "-//\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-//\t\t\t\t\t\tif ((text.htmlTagIndex & JAVADOC_TAGS_ID_MASK) != JAVADOC_CODE_TAGS_ID) {", "-//\t\t\t\t\t\t\taddReplaceEdit(text.sourceStart, text.sourceEnd, buffer.toString());", "-//\t\t\t\t\t\t}", "-\t\t\tpreviousNode = node;"]}], "num": 42255}
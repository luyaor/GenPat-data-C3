{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3daee95ab10ff06b0fd2b216dc952253", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88da5826ea68613a5186d3108381e980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds) {", "-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, qualifiedType));", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, qualifiedType), argTypes);", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType((ReferenceBinding)currentType.erasure(), qualifiedType), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "-\t\t\t\t// check argument type compatibility now if not a class scope", "-\t\t\t\tif (!isClassScope) // otherwise will do it in Scope.connectTypeVariables()", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\t// check argument type compatibility", "+\t\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType(currentType, null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d252986ca49b90d2107ece7bfd6ccd8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "+\t\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, qualifiedType);", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)"]}], "num": 6240}
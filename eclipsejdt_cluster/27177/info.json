{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a20dce5ac4d98627cfddde3da2cf80ab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d13b7f3648528a3ae212f766615dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "0944527a7397db56b1dedbe42ea5aecf6e1f8ca1", "commitAfterChange": "259394e49b8b2716f2b45f583ae806167c65a507", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\t/* Disabled bug 70827 fix as too much time consuming", "-\t\t\t\tMethodBinding patternMethodBinding = locator.getMethodBinding((IMethod) focus);", "-\t\t\t\tif (patternMethodBinding != null && patternMethodBinding.isValidBinding()) {", "-\t\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "-\t\t\t\t\tif (method != null) {", "-\t\t\t\t\t\tmethod = method.original();", "-\t\t\t\t\t\tif (method != null && patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass)", "-\t\t\t\t\t\t\treturn; // finally the match was not possible", "-\t\t\t\t\t}", "+\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "+\t\t\t\tboolean isPrivate = Flags.isPrivate(((IMethod) focus).getFlags());", "+\t\t\t\tif (isPrivate && !CharOperation.equals(method.declaringClass.sourceName, focus.getParent().getElementName().toCharArray())) {", "+\t\t\t\t\treturn; // finally the match was not possible", "-\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f75a2b0df195a636c4b77e747329f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "commitAfterChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public MatchLocator( \tSearchPattern pattern, \tSearchRequestor requestor, \tIJavaSearchScope scope, \tIProgressMonitor progressMonitor)", "signatureAfterChange": "  public MatchLocator( \tSearchPattern pattern, \tSearchRequestor requestor, \tIJavaSearchScope scope, \tIProgressMonitor progressMonitor)", "diff": ["+\t}", "+\tif (pattern instanceof MethodPattern) {", "+\t    IType type = ((MethodPattern) pattern).declaringType;", "+\t    if (type != null && !type.isBinary()) {", "+\t    \tSourceType sourceType = (SourceType) type;", "+\t    \tIMember local = sourceType.getOuterMostLocalContext();", "+\t    \tif (local instanceof IMethod) { // remember this method's range so we don't purge its statements.", "+\t    \t\ttry {", "+\t    \t\t\tISourceRange range = local.getSourceRange();", "+\t    \t\t\tthis.sourceStartOfMethodToRetain  = range.getOffset();", "+\t    \t\t\tthis.sourceEndOfMethodToRetain = this.sourceStartOfMethodToRetain + range.getLength() - 1; // offset is 0 based.", "+\t    \t\t} catch (JavaModelException e) {", "+\t    \t\t\t// drop silently. ", "+\t    \t\t}", "+\t    \t}", "+\t    }"]}], "num": 27177}
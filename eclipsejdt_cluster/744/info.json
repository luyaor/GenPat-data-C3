{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2403c432b29d82982feb80942dd56e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0beeda4c25e803abf96ef779e3104e0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "2d053de9651cebac3cf0a82f4012b7196ccb5c83", "commitAfterChange": "a209f427039b5b4db27a67f609cb706801ba28e5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "diff": ["-\t\t\tif (CONSIDER_NUM_ARGS_OF_IMPLICIT_LAMBDA_DURING_18_5_4) {", "-\t\t\t\tif (expri instanceof LambdaExpression) { // implicitly types", "-\t\t\t\t\tArgument[] arguments = ((LambdaExpression)expri).arguments;", "-\t\t\t\t\tint count = arguments != null ? arguments.length : 0;", "-\t\t\t\t\tif (count == u.length && count != v.length)", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05663a52eb0716e7aae563b1e10a043", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "02d4f1049999a6639faf6572ec12176fbdb0f122", "commitAfterChange": "fecb7356870e11bfa0606dab85da0b88f89888ac", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tprivate boolean checkExpression(Expression expri, TypeBinding[] u, TypeBinding r1, TypeBinding[] v, TypeBinding r2)  \t\t\tthrows InferenceFailureException", "diff": ["+\t\t\tif (CONSIDER_NUM_ARGS_OF_IMPLICIT_LAMBDA_DURING_18_5_4) {", "+\t\t\t\tif (expri instanceof LambdaExpression) { // implicitly types", "+\t\t\t\t\tArgument[] arguments = ((LambdaExpression)expri).arguments;", "+\t\t\t\t\tint count = arguments != null ? arguments.length : 0;", "+\t\t\t\t\tif (count == u.length && count != v.length)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 744}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "889e2a730eb83a67eb7e218dd3a74851", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76c66babb191180b019ea7b78ae6476b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "commitAfterChange": "4758255b8284af577e4f7f81a9ecd60704ccc85c", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "signatureAfterChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "diff": ["-\t\t\tthis.invocationArguments[i].checkAgainstFinalTargetType(targetType);", "+\t\t\tExpression expression = this.invocationArguments[i];", "+\t\t\texpression.checkAgainstFinalTargetType(targetType);", "+\t\t\tif (expression instanceof Invocation) {", "+\t\t\t\tInvocation invocation = (Invocation) expression;", "+\t\t\t\tif (!this.innerPolies.contains(invocation)) {", "+\t\t\t\t\tMethodBinding method = invocation.binding(targetType);", "+\t\t\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\t\t\tParameterizedGenericMethodBinding previousBinding = (ParameterizedGenericMethodBinding) method;", "+\t\t\t\t\t\tInferenceContext18 innerCtx = invocation.getInferenceContext(previousBinding);", "+\t\t\t\t\t\tif (innerCtx != null) {", "+\t\t\t\t\t\t\t// we have a non-poly generic invocation, which needs inference but is not connected via innerPolis.", "+\t\t\t\t\t\t\t// Finish that inner inference now (incl. binding updates):", "+\t\t\t\t\t\t\tMethodBinding innerBinding = innerCtx.inferInvocationType(invocation, previousBinding);", "+\t\t\t\t\t\t\tif (invocation.updateBindings(innerBinding, targetType)) { // only if we are actually improving anything", "+\t\t\t\t\t\t\t\tASTNode.resolvePolyExpressionArguments(invocation, innerBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dfcc577552e374729b18cda21c8d642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tprotected MethodBinding inferInvocationType(InvocationSite invocationSite, MethodBinding applicable, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tprotected MethodBinding inferInvocationType(InvocationSite invocationSite, MethodBinding applicable, TypeBinding[] argumentTypes)", "diff": ["-\t\tif (applicable instanceof ParameterizedGenericMethodBinding && invocationSite instanceof Invocation) {", "+\t\tif (invocationSite instanceof Invocation) {", "-\t\t\tParameterizedGenericMethodBinding parameterizedMethod = (ParameterizedGenericMethodBinding) applicable;", "-\t\t\tInferenceContext18 infCtx18 = invocation.getInferenceContext(parameterizedMethod);", "-\t\t\tif (infCtx18 != null && infCtx18.stepCompleted < InferenceContext18.TYPE_INFERRED) {", "-\t\t\t\treturn infCtx18.inferInvocationType(invocation, argumentTypes, parameterizedMethod);", "+\t\t\tif (applicable instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tParameterizedGenericMethodBinding parameterizedMethod = (ParameterizedGenericMethodBinding) applicable;", "+\t\t\t\tInferenceContext18 infCtx18 = invocation.getInferenceContext(parameterizedMethod);", "+\t\t\t\tif (infCtx18 != null && infCtx18.stepCompleted < InferenceContext18.TYPE_INFERRED) {", "+\t\t\t\t\treturn infCtx18.inferInvocationType(invocation, argumentTypes, parameterizedMethod);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tASTNode.resolvePolyExpressionArguments(invocation, applicable, argumentTypes);"]}], "num": 46637}
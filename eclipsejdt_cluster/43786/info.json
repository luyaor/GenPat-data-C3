{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "035569d69dd8d2ff894fce07f7e428ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de051081e452815ab7f01f1549391fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a725c7050ef02b8e240004926fb73e6f29767ffe", "commitAfterChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey()", "signatureAfterChange": " \t \tpublic char[] computeUniqueKey()", "diff": ["+\t\t} else if(this.type.isLocalType()){", "+\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding) this.type;", "+\t\t\tReferenceBinding enclosing = localTypeBinding.enclosingType();", "+\t\t\tReferenceBinding temp;", "+\t\t\twhile ((temp = enclosing.enclosingType()) != null)", "+\t\t\t\tenclosing = temp;", "+\t\t\tchar[] typeSig = enclosing.signature();", "+\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\tsig.append('$');", "+\t\t\tsig.append(localTypeBinding.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1827cd83da96e3c23ecf1ba837e1d4af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "signatureAfterChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "diff": ["-    if (typeVariables == NoTypeVariables) {", "-        return signature();", "-    } else {", "-\t    char[] typeSig = signature();", "-\t    StringBuffer sig = new StringBuffer(10);", "+", "+\tboolean isMemberOfGeneric = isMemberType() && (enclosingType().modifiers & AccGenericSignature) != 0;", "+\tif (typeVariables == NoTypeVariables && !isMemberOfGeneric) {", "+\t\treturn signature();", "+\t}", "+\tStringBuffer sig = new StringBuffer(10);", "+\tif (isMemberOfGeneric) {", "+\t    char[] typeSig = enclosingType().genericTypeSignature();", "+\t    sig.append('.'); // NOTE: cannot override trailing ';' with '.' in enclosing signature, since shared char[]", "+\t    sig.append(this.sourceName);", "+\t}\telse {", "+\t    char[] typeSig = signature();", "+\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "+\t    \tsig.append(typeSig[i]);", "+\t    }", "+\t}", "+\tif (typeVariables == NoTypeVariables) {", "+\t    sig.append(';');", "+\t} else {", "-\t\tint sigLength = sig.length();", "-\t\tchar[] result = new char[sigLength];", "-\t\tsig.getChars(0, sigLength, result, 0);", "-\t\treturn result;", "-    }", "+\t}", "+\tint sigLength = sig.length();", "+\tchar[] result = new char[sigLength];", "+\tsig.getChars(0, sigLength, result, 0);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2020c89e1686100d08abe45a03f69234", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["+\t\tboolean addParameterRank = this.isParameter() && this.declaringScope != null;", "-\t\tif (occurenceCount > 0) {", "+\t\tif (occurenceCount > 0 || addParameterRank) {", "+\t\t\tif (addParameterRank) {", "+\t\t\t\tint pos = -1;", "+\t\t\t\tLocalVariableBinding[] params = this.declaringScope.locals;", "+\t\t\t\tfor (int i = 0; i < params.length; i++) {", "+\t\t\t\t\tif (params[i] == this) {", "+\t\t\t\t\t\tpos = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (pos > -1) {", "+\t\t\t\t\tbuffer.append('#');", "+\t\t\t\t\tbuffer.append(pos);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c369932e458c585018ca3c52545313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "19a809bd1e2b2fc92385fe5f8ca9f89249ad244c", "commitAfterChange": "bcb46990486d868577608d099b51c359510600ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["+\t\tlong start = -1;", "+\t\t\tstart = System.currentTimeMillis();", "-\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\tif (!existing.equals(root))", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "-\t\t\t\t\t\troots[rootLength] = root;", "-\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\tboolean containsRoot = false;", "+\t\t\t\t\t\tfor (int j = 0; j < rootLength; j++) {", "+\t\t\t\t\t\t\tif (roots[j].equals(root)) {", "+\t\t\t\t\t\t\t\tcontainsRoot = true;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (containsRoot) {", "+\t\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\t}", "+        if (VERBOSE) {", "+            System.out.println(Thread.currentThread() + \" -> spent: \" + (start - System.currentTimeMillis()) + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d611e3e81eade51b8276ac1fccc8e615", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "614aa9b4f40b4f1b65f94cb7a7006b82df3c54a0", "commitAfterChange": "661131f974fed90769c7088e8df5c9955de91a59", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\trewriteNodeList(node, EnumDeclaration.SUPER_INTERFACE_TYPES_PROPERTY, pos, \" implements \", \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tpos= rewriteNodeList(node, EnumDeclaration.SUPER_INTERFACE_TYPES_PROPERTY, pos, \" implements \", \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tpos= rewriteNodeList(node, EnumDeclaration.ENUM_CONSTANTS_PROPERTY, pos, \"\", \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "+\t\tRewriteEvent event= getEvent(node, EnumDeclaration.ENUM_CONSTANTS_PROPERTY);", "+\t\tRewriteEvent[] events= event.getChildren();", "+", "+\t\tpos= getPosAfterLeftBrace(pos);", "+\t\tStringBuffer leadString= new StringBuffer();", "+\t\t", "+\t\tif (isAllOfKind(events, RewriteEvent.INSERTED)) {", "+\t\t\tint lead= 1;", "+\t\t\tfor (int i= 0; i < lead; i++) {", "+\t\t\t\tleadString.append(getLineDelimiter());", "+\t\t\t}", "+\t\t\tleadString.append(createIndentString(startIndent));", "+\t\t}", "+\t\t", "+\t\tpos= rewriteNodeList(node, EnumDeclaration.ENUM_CONSTANTS_PROPERTY, pos, leadString.toString(), \", \"); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 43786}
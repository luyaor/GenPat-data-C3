{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55bf73cc9afb27e54cfc33046f4c307f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cb236f1d4c41c0589e93f4cf08b520f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": " protected void consumeTypeImportOnDemandDeclarationName()", "signatureAfterChange": " protected void consumeTypeImportOnDemandDeclarationName()", "diff": ["-\tchar[][] tokens = new char[length = identifierLengthStack[identifierLengthPtr--]][];", "-\tidentifierPtr -= length;", "+\tchar[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];", "+\tthis.identifierPtr -= length;", "-\tSystem.arraycopy(identifierStack, identifierPtr + 1, tokens, 0, length);", "-\tSystem.arraycopy(identifierPositionStack, identifierPtr + 1, positions, 0, length);", "+\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "+\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);", "-\tif (currentToken == TokenNameSEMICOLON){", "-\t\timpt.declarationSourceEnd = scanner.currentPosition - 1;", "+\tif (this.currentToken == TokenNameSEMICOLON){", "+\t\timpt.declarationSourceEnd = this.scanner.currentPosition - 1;", "-\timpt.declarationSourceStart = intStack[intPtr--];", "+\timpt.declarationSourceStart = this.intStack[this.intPtr--];", "-\tif (currentElement != null){", "-\t\tlastCheckPoint = impt.declarationSourceEnd+1;", "-\t\tcurrentElement = currentElement.add(impt, 0);", "-\t\tlastIgnoredToken = -1;", "-\t\trestartRecovery = true; // used to avoid branching back into the regular automaton\t\t", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd+1;", "+\t\tthis.currentElement = this.currentElement.add(impt, 0);", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273ef3bbe8ce3f67a9c8872468f2e764", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": " protected void consumeSingleTypeImportDeclarationName()", "signatureAfterChange": " protected void consumeSingleTypeImportDeclarationName()", "diff": ["-\tchar[][] tokens = new char[length = identifierLengthStack[identifierLengthPtr--]][];", "-\tidentifierPtr -= length;", "+\tchar[][] tokens = new char[length = this.identifierLengthStack[this.identifierLengthPtr--]][];", "+\tthis.identifierPtr -= length;", "-\tSystem.arraycopy(identifierStack, identifierPtr + 1, tokens, 0, length);", "-\tSystem.arraycopy(identifierPositionStack, identifierPtr + 1, positions, 0, length);", "+\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "+\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr + 1, positions, 0, length);", "-\tif (currentToken == TokenNameSEMICOLON){", "-\t\timpt.declarationSourceEnd = scanner.currentPosition - 1;", "+\tif (this.currentToken == TokenNameSEMICOLON){", "+\t\timpt.declarationSourceEnd = this.scanner.currentPosition - 1;", "-\timpt.declarationSourceStart = intStack[intPtr--];", "+\timpt.declarationSourceStart = this.intStack[this.intPtr--];", "-\tif (currentElement != null){", "-\t\tlastCheckPoint = impt.declarationSourceEnd+1;", "-\t\tcurrentElement = currentElement.add(impt, 0);", "-\t\tlastIgnoredToken = -1;", "-\t\trestartRecovery = true; // used to avoid branching back into the regular automaton\t\t", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd+1;", "+\t\tthis.currentElement = this.currentElement.add(impt, 0);", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.restartRecovery = true; // used to avoid branching back into the regular automaton\t\t"]}], "num": 45060}
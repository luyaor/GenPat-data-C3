{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9174620c0e57ed12d06d4976cff2b3b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b692cf33c81cbabbc0e2af299481dd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "6dc0991802c8a76a225272c60d27e3132dfbe9b2", "commitAfterChange": "9a8dbf2c325d5ae6a7dd8f3876b878a799f4a5c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end)", "diff": ["-public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end) {", "-\t// TODO missing implementation", "+public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end) {", "+\tIType type = resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\tselectorStart, selectorEnd);", "-\tif(SelectionEngine.DEBUG){", "-\t\tSystem.out.print(\"SELECTION - acceptTypeParameter(\"); //$NON-NLS-1$", "-\t\tSystem.out.print(declaringTypePackageName);", "-\t\tSystem.out.print('.');", "-\t\tSystem.out.print(declaringTypeName);", "-\t\tSystem.out.print('.');", "-\t\tSystem.out.print('<');", "-\t\tSystem.out.print(typeParameterName);", "-\t\tSystem.out.print('>');", "-\t\tSystem.out.print(selector);", "-\t\tSystem.out.println(\"(...))\"); //$NON-NLS-1$", "+\tif(type != null) {", "+\t\tIMethod method = null;", "+\t\t", "+\t\tString name = new String(selector);", "+\t\tIMethod[] methods = null;", "+\t\t", "+\t\ttry {", "+\t\t\tmethods = type.getMethods();", "+\t\t\tdone : for (int i = 0; i < methods.length; i++) {", "+\t\t\t\tISourceRange range = methods[i].getNameRange();", "+\t\t\t\tif(range.getOffset() >= selectorStart", "+\t\t\t\t\t\t&& range.getOffset() + range.getLength() <= selectorEnd", "+\t\t\t\t\t\t&& methods[i].getElementName().equals(name)) {", "+\t\t\t\t\tmethod = methods[i];", "+\t\t\t\t\tbreak done;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t//nothing to do", "+\t\t}", "+", "+\t\tif(method == null) {", "+//\t\t\taddElement(type);", "+\t\t} else {", "+//\t\t\t TODO missing implementation", "+//\t\t\tif(???) {", "+//\t\t\t\taddElement(method);", "+//\t\t\t} else {", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - acceptTypeParameter(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(declaringTypePackageName);", "+\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tSystem.out.print(declaringTypeName);", "+\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tSystem.out.print('<');", "+\t\t\t\t\tSystem.out.print(typeParameterName);", "+\t\t\t\t\tSystem.out.print('>');", "+\t\t\t\t\tSystem.out.print(selector);", "+\t\t\t\t\tSystem.out.println(\"(...))\"); //$NON-NLS-1$", "+\t\t\t\t}", "+//\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "691129f175af3188de5ebb8b8138be40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void acceptType(char[] packageName, char[] typeName, int acceptFlags, boolean isDeclaration, char[] uniqueKey, int start, int end)", "signatureAfterChange": " public void acceptType(char[] packageName, char[] typeName, int modifiers, boolean isDeclaration, char[] uniqueKey, int start, int end)", "diff": ["+public void acceptType(char[] packageName, char[] typeName, int modifiers, boolean isDeclaration, char[] uniqueKey, int start, int end) {", "+\tint acceptFlags = 0;", "+\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\tswitch (kind) {", "+\t\tcase IConstants.AccAnnotation:", "+\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_ANNOTATIONS;", "+\t\t\tbreak;", "+\t\tcase IConstants.AccEnum:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_ENUMS;", "+\t\t\tbreak;", "+\t\tcase IConstants.AccInterface:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_INTERFACES;", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_CLASSES;", "+\t\t\tbreak;", "+\t}", "+\tIType type = null;", "+\tif(isDeclaration) {", "+\t\ttype = resolveTypeByLocation(packageName, typeName, acceptFlags, start, end);", "+\t} else {", "+\t\ttype = resolveType(packageName, typeName, acceptFlags);", "+\t\tif(type != null ) {", "+\t\t\tString key = uniqueKey == null ? type.getKey() : new String(uniqueKey);", "+\t\t\tif(type.isBinary()) {", "+\t\t\t\ttype = new ResolvedBinaryType((JavaElement)type.getParent(), type.getElementName(), key);", "+\t\t\t} else {", "+\t\t\t\ttype = new ResolvedSourceType((JavaElement)type.getParent(), type.getElementName(), key);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tif (type != null) {", "+\t\taddElement(type);", "+\t\tif(SelectionEngine.DEBUG){", "+\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(type.toString());", "+\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t}", "+\t} ", "- */", "-protected void acceptType(char[] packageName, char[] typeName, int acceptFlags, boolean isDeclaration, char[] uniqueKey, int start, int end) {", "-\tIType type = null;", "-\tif(isDeclaration) {", "-\t\ttype = resolveTypeByLocation(packageName, typeName, acceptFlags, start, end);", "-\t} else {", "-\t\ttype = resolveType(packageName, typeName, acceptFlags);", "-\t\tif(type != null ) {", "-\t\t\tString key = uniqueKey == null ? type.getKey() : new String(uniqueKey);", "-\t\t\tif(type.isBinary()) {", "-\t\t\t\ttype = new ResolvedBinaryType((JavaElement)type.getParent(), type.getElementName(), key);", "-\t\t\t} else {", "-\t\t\t\ttype = new ResolvedSourceType((JavaElement)type.getParent(), type.getElementName(), key);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tif (type != null) {", "-\t\taddElement(type);", "-\t\tif(SelectionEngine.DEBUG){", "-\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "-\t\t\tSystem.out.print(type.toString());", "-\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t}", "-\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bed0d0c7c2814048eac9d9774fb8119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "0243628c08ab4b4900a7554ddbc8a451c6a47550", "commitAfterChange": "047584befb8673c45fb37a5eec1f22e3adb791d0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor)", "signatureAfterChange": " protected void acceptBinaryMethod( \t\tIType type, \t\tchar[] selector, \t\tchar[][] parameterPackageNames, \t\tchar[][] parameterTypeNames, \t\tString[] parameterSignatures, \t\tchar[][] typeParameterNames, \t\tchar[][][] typeParameterBoundNames, \t\tchar[] uniqueKey, \t\tboolean isConstructor)", "diff": ["- */", "-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor) {", "-\tIMethod method= type.getMethod(new String(selector), parameterSignatures);", "-\tif (method.exists()) {", "-\t\ttry {", "-\t\t\tif(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {", "-\t\t\t\tif (uniqueKey != null)", "-\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "-\t\t\t\tISourceRange range = method.getSourceRange();", "-\t\t\t\tif (range.getOffset() != -1 && range.getLength() != 0 ) {", "-\t\t\t\t\tif (uniqueKey != null)", "-\t\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "-\t\t\t\t\t\t\t\t(JavaElement)method.getParent(),", "-\t\t\t\t\t\t\t\tmethod.getElementName(),", "-\t\t\t\t\t\t\t\tmethod.getParameterTypes(),", "-\t\t\t\t\t\t\t\tnew String(uniqueKey));", "-\t\t\t\t\taddElement(method);", "-\t\t\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(method.toString());", "-\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// no range was actually found, but a method was originally given -> default constructor", "-\t\t\t\t\taddElement(type);", "-\t\t\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(type.toString());", "-\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// an exception occurs, return nothing", "+ */", "+protected void acceptBinaryMethod(", "+\t\tIType type,", "+\t\tchar[] selector,", "+\t\tchar[][] parameterPackageNames,", "+\t\tchar[][] parameterTypeNames,", "+\t\tString[] parameterSignatures,", "+\t\tchar[][] typeParameterNames,", "+\t\tchar[][][] typeParameterBoundNames,", "+\t\tchar[] uniqueKey,", "+\t\tboolean isConstructor) {", "+\tIMethod method= type.getMethod(new String(selector), parameterSignatures);", "+\t", "+\tif (method.exists()) {", "+\t\tif (typeParameterNames != null && typeParameterNames.length != 0) {", "+\t\t\tIMethod[] methods = type.findMethods(method);", "+\t\t\tif (methods.length > 1) {", "+\t\t\t\tfor (int i = 0; i < methods.length; i++) {", "+\t\t\t\t\tif (areTypeParametersCompatible(methods[i], typeParameterNames, typeParameterBoundNames)) {", "+\t\t\t\t\t\tacceptBinaryMethod(type, method, uniqueKey, isConstructor);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tacceptBinaryMethod(type, method, uniqueKey, isConstructor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c5de205985b54d0c1ea2d753aac78e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "0096213f4b70c6196247b76dbfbdc7d2b6019590", "commitAfterChange": "7882956f959d3c6393e0d8829373f1d0522732ab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey)", "signatureAfterChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor)", "diff": ["-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey) {", "+protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor) {", "-\t\tif (uniqueKey != null)", "-\t\t\tmethod = new ResolvedBinaryMethod(", "-\t\t\t\t\t(JavaElement)method.getParent(),", "-\t\t\t\t\tmethod.getElementName(),", "-\t\t\t\t\tmethod.getParameterTypes(),", "-\t\t\t\t\tnew String(uniqueKey));", "-\t\taddElement(method);", "-\t\tif(SelectionEngine.DEBUG){", "-\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "-\t\t\tSystem.out.print(method.toString());", "-\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\ttry {", "+\t\t\tif(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {", "+\t\t\t\tif (uniqueKey != null)", "+\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "+\t\t\t\t\t\t\t(JavaElement)method.getParent(),", "+\t\t\t\t\t\t\tmethod.getElementName(),", "+\t\t\t\t\t\t\tmethod.getParameterTypes(),", "+\t\t\t\t\t\t\tnew String(uniqueKey));", "+\t\t\t\taddElement(method);", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(method.toString());", "+\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tISourceRange range = method.getSourceRange();", "+\t\t\t\tif (range.getOffset() != -1 && range.getLength() != 0 ) {", "+\t\t\t\t\tif (uniqueKey != null)", "+\t\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "+\t\t\t\t\t\t\t\t(JavaElement)method.getParent(),", "+\t\t\t\t\t\t\t\tmethod.getElementName(),", "+\t\t\t\t\t\t\t\tmethod.getParameterTypes(),", "+\t\t\t\t\t\t\t\tnew String(uniqueKey));", "+\t\t\t\t\taddElement(method);", "+\t\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.print(method.toString());", "+\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// no range was actually found, but a method was originally given -> default constructor", "+\t\t\t\t\taddElement(type);", "+\t\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.print(type.toString());", "+\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// an exception occurs, return nothing"]}], "num": 17831}
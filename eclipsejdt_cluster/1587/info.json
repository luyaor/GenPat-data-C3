{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c996a97cb28078e42b24896cad7f304", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10d54c2e3a686d38de4e0f3984f137f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f73fdb0a354f2f38e3faeb7d9eceabb3d85530d5", "commitAfterChange": "5c2dc76a8d3cf16dded8b483e956ad365692fb92", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t}", "+\t\tboolean generateSecretReceiverVariable = shouldGenerateSecretReceiverVariable();", "+\t\t\tif (generateSecretReceiverVariable) {", "+\t\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "+\t\t\t\tcodeStream.store(this.receiverVariable, false);", "+\t\t\t\tcodeStream.addVariable(this.receiverVariable);", "+\t\t\t}", "-\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(\"arg0\".toCharArray(), 0) : copy.lhs; //$NON-NLS-1$", "+\t\t\tExpression receiver = generateSecretReceiverVariable ? new SingleNameReference(this.receiverVariable.name, 0) : copy.lhs;", "+\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(\"arg0\".toCharArray(), 0) : receiver; //$NON-NLS-1$", "+\t\tif (generateSecretReceiverVariable) {", "+\t\t\tcodeStream.removeVariable(this.receiverVariable);", "+\t\t\tthis.receiverVariable = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26a0bf7568b092e6a9cc480a2260895e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "6dbb2ec74b77026a9a8c00b4381c92a21f100370", "commitAfterChange": "2d88125c63a44736bd6507d03cfcacc7c43a6f63", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["+\t\t\tif (this.receiverGenericCast != null) ", "+\t\t\t\tcodeStream.checkcast(this.receiverGenericCast);", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);\t\t\t", "+\t\t\tif (this.receiverGenericCast != null) ", "+\t\t\t\tcodeStream.checkcast(this.receiverGenericCast);", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);\t\t\t", "-\t// operation on the returned value", "+\t// required cast must occur even if no value is required", "+\tif (this.valueCast != null) codeStream.checkcast(this.valueCast);", "-\t\tif (this.valueCast != null) ", "-\t\t\tcodeStream.checkcast(this.valueCast);", "-\t\t// pop return value if any", "-\t\tswitch(binding.returnType.id){", "+\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t// conversion only generated if unboxing", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.codegenBinding.returnType.id) {", "-\t\t\tdefault:", "+\t\t\tdefault :", "-\t}", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ec8dcbcca7cf160feb50ce8b0aa3d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "cc547ec5c074d17ff882a095dbec68dcad72a87a", "commitAfterChange": "99250bacae54994417cccb9e6d497671bd34c73a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\tcodeStream.store(this.collectionVariable, false);", "-\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\tcodeStream.store(this.indexVariable, false);", "-\t\t\t\tcodeStream.load(this.collectionVariable);", "-\t\t\t\tcodeStream.arraylength();", "-\t\t\t\tcodeStream.store(this.maxVariable, false);", "+\t\t\t\tcodeStream.store(this.collectionVariable, true); ", "+\t\t\t\tif (this.continueLabel != null) {", "+\t\t\t\t\t// int length = (collectionVariable = [collection]).length;", "+\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\tcodeStream.store(this.maxVariable, false);", "+\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\tcodeStream.store(this.indexVariable, false);", "+\t\t\t\t} else {", "+\t\t\t\t\t// leave collectionVariable on execution stack (will be consumed when swapping condition further down)", "+\t\t\t\t}", "-\t\tif (this.continueLabel != null) {", "+\t\tif (this.continueLabel == null) {", "+\t\t\t// generate the condition (swapped for optimizing)", "+\t\t\tconditionLabel.place();", "+\t\t\tint conditionPC = codeStream.position;", "+\t\t\tswitch(this.kind) {", "+\t\t\t\tcase ARRAY :", "+\t\t\t\t\t// inline the arraylength call", "+\t\t\t\t\t// collectionVariable is already on execution stack", "+\t\t\t\t\tcodeStream.arraylength();\t\t\t\t\t", "+\t\t\t\t\tcodeStream.ifeq(breakLabel);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase RAW_ITERABLE :", "+\t\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorHasNext();", "+\t\t\t\t\tcodeStream.ifeq(breakLabel);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcodeStream.recordPositionsFrom(conditionPC, this.elementVariable.sourceStart);\t\t\t", "+\t\t} else {", "+\t\t\t// jump over the actionBlock", "+\t\t\tcodeStream.goto_(conditionLabel);", "-\t\t// jump over the actionBlock", "-\t\tcodeStream.goto_(conditionLabel);", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tif (this.continueLabel == null) {", "+\t\t\t\t\t\tcodeStream.iconst_0(); // no continue, thus simply hardcode offset 0", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\t}", "-\t\t\t\t\tif (hasEmptyAction && this.elementVariable.binding.resolvedPosition == -1) break;", "-\t\t\t\t\tcodeStream.iinc(this.indexVariable.resolvedPosition, 1);", "+\t\t\t\t\tif (!hasEmptyAction || this.elementVariable.binding.resolvedPosition >= 0) {", "+\t\t\t\t\t\tcodeStream.iinc(this.indexVariable.resolvedPosition, 1);", "+\t\t\t\t\t}", "+\t\t\t\t\t// generate the condition", "+\t\t\t\t\tconditionLabel.place();", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.load(this.maxVariable);", "+\t\t\t\t\tcodeStream.if_icmplt(actionLabel);", "+\t\t\t\t\t// generate the condition", "+\t\t\t\t\tconditionLabel.place();", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorHasNext();", "+\t\t\t\t\tcodeStream.ifne(actionLabel);", "-\t\t// generate the condition", "-\t\tconditionLabel.place();", "-\t\tint conditionPC = codeStream.position;", "-\t\tswitch(this.kind) {", "-\t\t\tcase ARRAY :", "-\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\tcodeStream.load(this.maxVariable);", "-\t\t\t\tcodeStream.if_icmplt(actionLabel);", "-\t\t\t\tbreak;", "-\t\t\tcase RAW_ITERABLE :", "-\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\tcodeStream.invokeJavaUtilIteratorHasNext();", "-\t\t\t\tcodeStream.ifne(actionLabel);", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(conditionPC, this.elementVariable.sourceStart);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61486ea97cb36bc4bd116f9330d7ecc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "ed230d7da6ab9728129283fd00e6cd341cfcf50b", "commitAfterChange": "5c8da7df87ece8eb7412c83be00e8165dcb5a180", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\thandlingContext.initsOnFinally = ", "+\t\t\tnew NullInfoRegistry(flowInfo.unconditionalInits());", "+\t\t// only try blocks initialize that member - may consider creating a", "+\t\t// separate class if needed", "+\t\t", "+\t\t// chain up null info registry", "+\t\tif (flowContext.initsOnFinally != null) {", "+\t\t\tflowContext.initsOnFinally.add(handlingContext.initsOnFinally);", "+\t\t}", "+\t\t", "+\t\thandlingContext.initsOnFinally =", "+\t\t\tnew NullInfoRegistry(flowInfo.unconditionalInits());", "+\t\t// only try blocks initialize that member - may consider creating a", "+\t\t// separate class if needed\t\t", "-\t\t\t(tryInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ", "-\t\t\t\t? flowInfo.unconditionalCopy().", "+\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t(tryInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\tinsideSubContext.initsOnReturn)", "-\t\t\t\t: insideSubContext.initsOnReturn,", "+\t\t\t\t\taddPotentialInitializationsFrom(insideSubContext.initsOnReturn) : ", "+\t\t\t\t\tinsideSubContext.initsOnReturn),", "-\t\t", "+", "+\t\t// chain up null info registry", "+\t\tif (flowContext.initsOnFinally != null) {", "+\t\t\tflowContext.initsOnFinally.add(handlingContext.initsOnFinally);", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca1c4f43050b93e6f52b84d2e532e562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "8d1ff9b80d2587df4aa2d0a1ee1f5a75472a5feb", "commitAfterChange": "625e6a1264761bd4361336704c7e67e6666444a5", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "\r public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": "\r public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t\t\t\tenclosingInstance.generateCode(currentScope, this, syntheticArgType == targetEnclosingType);\r", "+\t\t\t\tif (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){\r", "+\t\t\t\t\tenclosingInstance.generateCode(currentScope, this, true);\r", "+\t\t\t\t\tif (syntheticArgType == targetEnclosingType){\r", "+\t\t\t\t\t\tthis.dup();\r", "+\t\t\t\t\t} \r", "+\t\t\t\t\tthis.invokeObjectGetClass(); // causes null check for all explicit enclosing instances\r", "+\t\t\t\t\tthis.pop();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tenclosingInstance.generateCode(currentScope, this, syntheticArgType == targetEnclosingType);\r", "+\t\t\t\t}\t\t\t\r", "-\t\t\tenclosingInstance.generateCode(currentScope, this, false); // do not want the value\r", "+\t\t\tif (currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4){\r", "+\t\t\t\tenclosingInstance.generateCode(currentScope, this, true);\r", "+\t\t\t\tthis.invokeObjectGetClass(); // causes null check for all explicit enclosing instances\r", "+\t\t\t\tthis.pop();\r", "+\t\t\t} else {\r", "+\t\t\t\tenclosingInstance.generateCode(currentScope, this, false); // do not want the value\r", "+\t\t\t}\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d50c0b9a2e7cad1ef1b84e3c04c42b38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t\t\t\tif (this.initStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.initStateIndex);", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.initStateIndex);", "+\t\t\t\t\t}", "+\t\tcodeStream.addVariable(this.saveValueVariable);", "+\tif (this.saveValueVariable != null) {", "+\t\tcodeStream.removeVariable(this.saveValueVariable);", "+\t}\t", "+\tif (this.initStateIndex != -1) {", "+\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.initStateIndex);", "+\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.initStateIndex);", "+\t}\t"]}], "num": 1587}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a9d032ed37f4b41c039166d33f70f53", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c20bef71c935568b2cb12a1b126fec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tresult.setModifiers(getModifiers());", "+\t\tif (getAST().API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tresult.setModifiers(getModifiers());", "+\t\t\tresult.setSuperclass(", "+\t\t\t\t\t(Name) ASTNode.copySubtree(target, getSuperclass()));", "+\t\t\tresult.superInterfaces().addAll(", "+\t\t\t\t\tASTNode.copySubtrees(target, superInterfaces()));", "+\t\t}", "-\t\tresult.setSuperclass(", "-\t\t\t(Name) ASTNode.copySubtree(target, getSuperclass()));", "-\t\tresult.superInterfaces().addAll(", "-\t\t\tASTNode.copySubtrees(target, superInterfaces()));", "+\t\tif (getAST().API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tresult.modifiers().addAll(ASTNode.copySubtrees(target, modifiers()));", "+\t\t\tresult.typeParameters().addAll(", "+\t\t\t\t\tASTNode.copySubtrees(target, typeParameters()));", "+\t\t\tresult.setSuperclassType(", "+\t\t\t\t\t(Type) ASTNode.copySubtree(target, getSuperclassType()));", "+\t\t\tresult.superInterfaceTypes().addAll(", "+\t\t\t\t\tASTNode.copySubtrees(target, superInterfaceTypes()));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a314b86fedca25260fbf461a5645b073", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["+\t\tresult.setName((SimpleName) getName().clone(target));", "-\t\t\tresult.setReceiverType((AnnotatableType) ASTNode.copySubtree(target, this.receiverType));", "-\t\t\tresult.setReceiverQualifier((SimpleName) ASTNode.copySubtree(target, this.receiverQualifier));", "-\t\t\tresult.extraDimensionInfos.addAll(", "-\t\t\t\t\tASTNode.copySubtrees(target, this.extraDimensionInfos));", "+\t\t\tresult.setReceiverType((AnnotatableType) ASTNode.copySubtree(target, getReceiverType()));", "+\t\t\tresult.setReceiverQualifier((SimpleName) ASTNode.copySubtree(target, getReceiverQualifier()));", "+\t\t}", "+\t\tresult.parameters().addAll(", "+\t\t\tASTNode.copySubtrees(target, parameters()));", "+\t\tif (this.ast.apiLevel >= AST.JLS8) {", "+\t\t\tresult.extraDimensions().addAll(ASTNode.copySubtrees(target, extraDimensions()));", "-\t\tresult.setName((SimpleName) getName().clone(target));", "-\t\tresult.parameters().addAll(", "-\t\t\tASTNode.copySubtrees(target, parameters()));", "-\t\tif  (this.ast.apiLevel() < AST.JLS8) {", "-\t\t\tresult.thrownExceptions().addAll(", "-\t\t\tASTNode.copySubtrees(target, thrownExceptions()));\t\t\t", "+\t\tif (this.ast.apiLevel() >= AST.JLS8) {", "+\t\t\tresult.thrownExceptionTypes().addAll(ASTNode.copySubtrees(target, thrownExceptionTypes()));", "-\t\t\tresult.thrownExceptionTypes().addAll(", "-\t\t\tASTNode.copySubtrees(target, thrownExceptionTypes()));", "-\t\t\t", "+\t\t\tresult.thrownExceptions().addAll(ASTNode.copySubtrees(target, thrownExceptions()));\t\t\t"]}], "num": 5256}
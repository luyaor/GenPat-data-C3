{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5934829b3621bb8572e70522798516e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3033ca95dcc70d2826d402dbb43b004e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "f2d3caf9f49a021f049c1182aa65112ac7cc9bd8", "commitAfterChange": "656dac68cbd33286fd4921aa8c255b2c9899af18", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\tcase Binding.WILDCARD_TYPE :", "-\t\t\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "+\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE : // intersection type", "+\t\t\t\tif (castType instanceof ReferenceBinding) {", "+\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t// recursively on the type variable upper bound", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType, ((WildcardBinding)expressionType).bound, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb72339e21cbcfa7eba43b24d16c4e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "c80004d70ebe07235571e96c3ea452dbc7ba5394", "commitAfterChange": "70dd884582455dcf661aaade70c8faff4213db3a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null /*no match*/, true);", "-\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null /*no match*/, true);", "+\t\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null /*no match*/, true);", "+\t\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null /*no match*/, true);"]}], "num": 66358}
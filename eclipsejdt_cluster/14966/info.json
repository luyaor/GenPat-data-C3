{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5dcdaae3e1a6129a86dbf3ef4793d33", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09eaa7f5fb1814f0006dd05c527fd3f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "fcc72e46b744ea79a152e24a7ffac0f0901b7400", "commitAfterChange": "06a3d951c7ec6b39762293a6177f305ce0f3f22c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeArguments()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeArguments()", "diff": ["-\t\t\tif (typeArgumentsBindings != null) {", "-\t\t\t\tint typeArgumentsLength = typeArgumentsBindings.length;", "-\t\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\t\tthis.typeArguments = new ITypeBinding[typeArgumentsLength];", "-\t\t\t\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "-\t\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(typeArgumentsBindings[i]);", "-\t\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\t\treturn this.typeArguments = NO_TYPE_BINDINGS;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.typeArguments[i] = typeBinding;", "+\t\t\tint typeArgumentsLength = typeArgumentsBindings == null ? 0 : typeArgumentsBindings.length;", "+\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\tITypeBinding[] tArguments = new ITypeBinding[typeArgumentsLength];", "+\t\t\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "+\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(typeArgumentsBindings[i]);", "+\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\treturn this.typeArguments = NO_TYPE_BINDINGS;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t\t\t\ttArguments[i] = typeBinding;", "-\t\t\t} else {", "-\t\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t\t\treturn this.typeArguments = tArguments;", "-\t\t} else {", "-\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "-\t\treturn this.typeArguments;", "+\t\treturn this.typeArguments = NO_TYPE_BINDINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59db397ab21383421308a4200d6997aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t@Override \tpublic TypeElement getTypeElement(CharSequence name)", "signatureAfterChange": " \t@Override \tpublic TypeElement getTypeElement(CharSequence name)", "diff": ["-\t\t//TODO: do this the right way - this is a hack to test if it works", "-\t\tString qname = name.toString();", "-\t\tString parts[] = qname.split(\"\\\\.\"); //$NON-NLS-1$", "-\t\tint length = parts.length;", "-\t\tchar[][] compoundName = new char[length][];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tcompoundName[i] = parts[i].toCharArray();", "-\t\t}", "+\t\tfinal char[][] compoundName = CharOperation.splitOn('.', name.toString().toCharArray());", "-\t\tif (binding == null) {", "+\t\t// If we didn't find the binding, maybe it's a nested type;", "+\t\t// try finding the top-level type and then working downwards.", "+\t\tif (null == binding) {", "+\t\t\tReferenceBinding topLevelBinding = null;", "+\t\t\tint topLevelSegments = compoundName.length; ", "+\t\t\twhile (--topLevelSegments > 0) {", "+\t\t\t\tchar[][] topLevelName = new char[topLevelSegments][];", "+\t\t\t\tfor (int i = 0; i < topLevelSegments; ++i) {", "+\t\t\t\t\ttopLevelName[i] = compoundName[i];", "+\t\t\t\t}", "+\t\t\t\ttopLevelBinding = le.getType(topLevelName);", "+\t\t\t\tif (null != topLevelBinding) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (null == topLevelBinding) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tbinding = topLevelBinding;", "+\t\t\tfor (int i = topLevelSegments; null != binding && i < compoundName.length; ++i) {", "+\t\t\t\tbinding = binding.getMemberType(compoundName[i]);", "+\t\t\t}", "+\t\t}", "+\t\tif (null == binding) {"]}], "num": 14966}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "630345df2c97e349912a82d066e719f4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dec5795e7ad00530a7d5e6d21c41f65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "4cf5441fe359583a3d77a31fc213bc74e94cf25e", "commitAfterChange": "40893837639c1eb9109e9994f8211db5f484441a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(char[] source)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject)", "diff": ["+\t */\r", "+\tpublic static CompilationUnit parseCompilationUnit(\r", "+\t\tchar[] source,\r", "+\t\tString unitName,\r", "+\t\tIJavaProject javaProject) {\r", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;\r", "+\r", "+\t\tif (javaProject != null) {\r", "+\t\t\t// If resolveBindings is true, we need to record the mod count\r", "+\t\t\t// once newAST has been constructed. If the mod count goes above\r", "+\t\t\t// this level, someone is modifying the AST and all bets are off\r", "+\t\t\t// regarding resolved bindings. All existing binding info should be\r", "+\t\t\t// discarded, and the various public resolveBinding methods should\r", "+\t\t\t// thereafter return null.\r", "+\t\t\ttry {\r", "+\t\t\t\tcompilationUnitDeclaration =\r", "+\t\t\t\t\tCompilationUnitResolver.resolve(\r", "+\t\t\t\t\t\tsource,\r", "+\t\t\t\t\t\tunitName,\r", "+\t\t\t\t\t\tjavaProject,\r", "+\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "+\t\t\t\treturn convert(compilationUnitDeclaration, source);\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\treturn parseCompilationUnit(source);\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f1355da5fa2dd5fa6620bfed00fd71d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\tif (unitName == null && project != null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (project == null) {", "-\t\t\t// this just reduces to the other simplest case", "-\t\t\treturn parseCompilationUnit(source);", "-\t\t}", "-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-\t", "-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\ttry {", "-\t\t\t// parse and resolve", "-\t\t\tcompilationUnitDeclaration =", "-\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tunitName,", "-\t\t\t\t\tproject,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true, monitor);", "-\t\t\tAST ast = new AST();", "-\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-\t\t", "-\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn cu;", "-\t\t} catch(JavaModelException e) {", "-\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t */", "-\t\t\treturn parseCompilationUnit(source);\t\t\t", "-\t\t} finally {", "-\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t}", "-\t\t}", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setSource(source);", "+\t\tc.setUnitName(unitName);", "+\t\tc.setProject(project);", "+\t\tc.setWorkingCopyOwner(owner);", "+\t\tASTNode result = c.createAST(monitor);", "+\t\treturn (CompilationUnit) result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea1488616f76e1320fa27535134882a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "7f5e906484d36443cfeeaa5a767b999e30565c9e", "commitAfterChange": "0d1d10149bf9c26b080c1a4904327c7f2e8ddf98", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject project)", "diff": ["-\t\tIJavaProject javaProject) {\r", "+\t\tIJavaProject project) {\r", "+\t\t\t\r", "+\t\tif (source == null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tif (unitName == null && project != null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tif (project == null) {\r", "+\t\t\t// this just reuces to the other simplest case\r", "+\t\t\treturn parseCompilationUnit(source);\r", "+\t\t}\r", "-\t\tif (javaProject != null) {\r", "-\t\t\t// If resolveBindings is true, we need to record the mod count\r", "-\t\t\t// once newAST has been constructed. If the mod count goes above\r", "-\t\t\t// this level, someone is modifying the AST and all bets are off\r", "-\t\t\t// regarding resolved bindings. All existing binding info should be\r", "-\t\t\t// discarded, and the various public resolveBinding methods should\r", "-\t\t\t// thereafter return null.\r", "-\t\t\ttry {\r", "-\t\t\t\tcompilationUnitDeclaration =\r", "-\t\t\t\t\tCompilationUnitResolver.resolve(\r", "-\t\t\t\t\t\tsource,\r", "-\t\t\t\t\t\tunitName,\r", "-\t\t\t\t\t\tjavaProject,\r", "-\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "-\t\t\t\treturn convert(compilationUnitDeclaration, source);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn parseCompilationUnit(source);\r", "+\t\t// FIXME - If resolveBindings is true, we need to record the mod count\r", "+\t\t// once newAST has been constructed. If the mod count goes above\r", "+\t\t// this level, someone is modifying the AST and all bets are off\r", "+\t\t// regarding resolved bindings. All existing binding info should be\r", "+\t\t// discarded, and the various public resolveBinding methods should\r", "+\t\t// thereafter return null.\r", "+\t\ttry {\r", "+\t\t\tcompilationUnitDeclaration =\r", "+\t\t\t\tCompilationUnitResolver.resolve(\r", "+\t\t\t\t\tsource,\r", "+\t\t\t\t\tunitName,\r", "+\t\t\t\t\tproject,\r", "+\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "+\t\t\treturn convert(compilationUnitDeclaration, source);\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// FIXME - if this exception can happen, it needs to be converted\r", "+\t\t\t// to an appropriate RuntimeException of some ilk\r", "+\t\t// FIXME - this method must not return null!\r"]}], "num": 26716}
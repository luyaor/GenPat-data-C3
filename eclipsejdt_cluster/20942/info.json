{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b9a020f76554a82ef6b896d75f0ca1d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a2fb952e4ec4fce5491b2dbaa1be1b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "d783c2b9e780d6dd24ba97e41048afe1065ad972", "commitAfterChange": "48a8e94948e572be95793122ae99cea8bb186628", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\tfor (int i = length; --i >= 0;) {", "+\tnextMethod : for (int i = length; --i >= 0;) {", "-\t\t\tif (inheritedMethod.isViewedAsDeprecated())", "-\t\t\t\tif (!currentMethod.isViewedAsDeprecated() || environment.options.reportDeprecationInsideDeprecatedCode)", "+\t\t\tif (inheritedMethod.isViewedAsDeprecated()) {", "+\t\t\t\tif (!currentMethod.isViewedAsDeprecated() || environment.options.reportDeprecationInsideDeprecatedCode) {", "+\t\t\t\t\t// check against the other inherited methods to see if they hide this inheritedMethod", "+\t\t\t\t\tReferenceBinding declaringClass = inheritedMethod.declaringClass;", "+\t\t\t\t\tif (declaringClass.isInterface())", "+\t\t\t\t\t\tfor (int j = length; --j >= 0;)", "+\t\t\t\t\t\t\tif (i != j && methods[j].declaringClass.implementsInterface(declaringClass, false))", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e9ab22000b0d63ac7a2cf2516f5d8e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "1b4ae3c306349bc12b5bd14c0b0208197346f4fe", "commitAfterChange": "e411de6de610f4a41b2ca5b35274818572448e41", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "signatureAfterChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "diff": ["-\t\t\t\tif (!actualReceiverType.isIntersectionType18()) // no constant pool representation. FIXME, visibility issue not handled.", "+\t\t\t\tif (actualReceiverType.isIntersectionType18()) {", "+\t\t\t\t\tTypeBinding[] intersectingTypes = ((IntersectionTypeBinding18)actualReceiverType).getIntersectingTypes();", "+\t\t\t\t\tfor(int i = 0; i < intersectingTypes.length; i++) {", "+\t\t\t\t\t\tif (intersectingTypes[i].findSuperTypeOriginatingFrom(constantPoolDeclaringClass) != null) {", "+\t\t\t\t\t\t\tconstantPoolDeclaringClass = intersectingTypes[i];", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t}"]}], "num": 20942}
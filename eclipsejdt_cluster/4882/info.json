{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6820d96de2c366ff2ce34f48b41082cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eeaaaafe8b7299975b3d78a77118a8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "63bc38ba8b0f2ea08457c431c5b6f27f5afb719e", "commitAfterChange": "c90b85d8a58dda5b3bd812b7ba0881529c4281e5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static boolean validate(final IJavaProject jproj, final String folderName)", "signatureAfterChange": " \tpublic static boolean validate(final IJavaProject jproj, final String folderName)", "diff": ["-\t\tIFolder folder = null;", "+\t\tboolean succeeded = false;", "-\t\t\tfolder = jproj.getProject().getFolder( folderName );", "+\t\t\tif (jproj != null) {", "+\t\t\t\t// If we have a specific project, we can just ask.", "+\t\t\t\tIFolder folder = null;", "+\t\t\t\tfolder = jproj.getProject().getFolder( folderName );", "+\t\t\t\tsucceeded = (folder != null);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t// We're being asked about the default, so no specific project;", "+\t\t\t\t// here we have to guess.  The code that will later fail if we", "+\t\t\t\t// get it wrong is IProject.getFolder(String).  So we use some", "+\t\t\t\t// heuristics.", "+\t\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\t\tIPath state = AptPlugin.getPlugin().getStateLocation();", "+\t\t\t\tIPath proposed = new Path(folderName);", "+\t\t\t\tIPath combined = state.append(proposed);", "+\t\t\t\tif (combined.segmentCount() <= state.segmentCount()) {", "+\t\t\t\t\t// proposed folder depth is too shallow", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tIFolder folder = root.getFolder(combined);", "+\t\t\t\tsucceeded = (folder != null);", "+\t\t\t}", "-\t\treturn folder != null;", "+\t\treturn succeeded;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91007f1af552fdc5b80ea07b2cf8cdaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, ASTNode location, BlockScope locationScope)", "signatureAfterChange": " public void checkUnclosedCloseables(FlowInfo flowInfo, ASTNode location, BlockScope locationScope)", "diff": ["-\tfor (int i=0; i<this.trackingVariables.size(); i++) {", "-\t\tFakedTrackingVariable trackingVar = (FakedTrackingVariable) this.trackingVariables.get(i);", "+", "+\tFakedTrackingVariable returnVar = (location instanceof ReturnStatement) ?", "+\t\t\tFakedTrackingVariable.getCloseTrackingVariable(((ReturnStatement)location).expression) : null;", "+", "+\tSet varSet = new HashSet(this.trackingVariables);", "+\tFakedTrackingVariable trackingVar;", "+\t// pick one outer-most variable from the set at a time", "+\twhile ((trackingVar = FakedTrackingVariable.pickVarForReporting(varSet, this, location != null)) != null) {", "+", "+\t\tif (returnVar != null && trackingVar.isResourceBeingReturned(returnVar)) {", "+\t\t\tcontinue;", "+\t\t}", "+", "-\t\tint status = getNullStatusAggressively(trackingVar.binding, flowInfo);", "-\t\t// try to improve info if a close() inside finally was observed:", "-\t\tif (locationScope != null) // only check at method exit points", "-\t\t\tstatus = locationScope.mergeCloseStatus(status, trackingVar.binding, this);", "+\t\t", "+\t\t// compute the most specific null status for this resource,", "+\t\tint status = trackingVar.findMostSpecificStatus(flowInfo, this, locationScope);", "+\t\t", "-\t\t\tif (trackingVar.reportRecordedErrors(this)) // ... report previously recorded errors", "+\t\t\tif (trackingVar.reportRecordedErrors(this, status)) // ... report previously recorded errors", "-\t}", "-}", "+\t} else {", "+\t\tint size = this.trackingVariables.size();", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tFakedTrackingVariable tracker = (FakedTrackingVariable) this.trackingVariables.get(0);", "+\t\t\ttracker.resetReportingBits();"]}], "num": 4882}
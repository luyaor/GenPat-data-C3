{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40bbd7dcb59f0c8c9b617786324cd65c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba6602ed65fdbf19c1674408a823b6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "10a59ab8fb6256e59e155c071a356402964eb736", "commitAfterChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["-\t\tif (!this.shapeAnalysisComplete && this.body instanceof Expression) {", "-\t\t\tExpression expression = (Expression) this.body;", "-\t\t\tthis.voidCompatible = expression.statementExpression();", "-\t\t\tthis.valueCompatible = true;", "-\t\t\tthis.shapeAnalysisComplete = true;", "-\t\t}", "-", "-\t\tif (this.shapeAnalysisComplete) {", "-\t\t\tif (squarePegInRoundHole(sam))", "-\t\t\t\treturn false;", "-\t\t} ", "-", "-\t\tIErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);", "-\t\ttry {", "-\t\t\tfinal LambdaExpression copy = copy();", "-\t\t\tif (copy == null)", "-\t\t\t\treturn false;", "-\t\t\tcopy.setExpressionContext(this.expressionContext);", "-\t\t\tcopy.setExpectedType(left);", "-\t\t\tif (this.resultExpressions == null)", "-\t\t\t\tthis.resultExpressions = new SimpleLookupTable(); // gather result expressions for most specific method analysis.", "-\t\t\tthis.resultExpressions.put(left, new Expression[0]);", "-\t\t\tcopy.resolveType(this.enclosingScope);", "-\t\t\tif (!this.shapeAnalysisComplete) {", "-\t\t\t\tif (!this.returnsVoid && !this.returnsValue && this.throwsException) {  // () -> { throw new Exception(); } is value compatible.", "-\t\t\t\t\tBlock block = (Block) this.body;", "-\t\t\t\t\tfinal Statement[] statements = block.statements;", "-\t\t\t\t\tfinal int statementsLength = statements == null ? 0 : statements.length;", "-\t\t\t\t\tStatement ultimateStatement = statementsLength == 0 ? null : statements[statementsLength - 1];", "-\t\t\t\t\tthis.valueCompatible = ultimateStatement instanceof ThrowStatement ? true: copy.doesNotCompleteNormally(); ", "-\t\t\t\t}", "-\t\t\t\tthis.shapeAnalysisComplete = true;", "-\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\tif (!this.shapeAnalysisComplete) {", "+\t\t\tIErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);", "+\t\t\ttry {", "+\t\t\t\tfinal LambdaExpression copy = copy();", "+\t\t\t\tif (copy == null)", "+\t\t\t\tcopy.setExpressionContext(this.expressionContext);", "+\t\t\t\tcopy.setExpectedType(left);", "+\t\t\t\tcopy.resolveType(this.enclosingScope);", "+", "+\t\t\t\tif (!argumentsTypeElided()) {", "+\t\t\t\t\tthis.argumentTypes = copy.argumentTypes;", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\tif (this.body instanceof Block) {", "+\t\t\t\t\tif (!this.returnsVoid) {", "+\t\t\t\t\t\tthis.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.voidCompatible = ((Expression) this.body).statementExpression();", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t} finally {", "+\t\t\t\tthis.shapeAnalysisComplete = true;", "+\t\t\t\tthis.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);", "-\t\t} finally {", "-\t\t\tthis.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);", "-\t\treturn true;", "+", "+\t\treturn !squarePegInRoundHole(sam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e883c10cfe2bd42282fdfda8ef1695ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tthis.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);", "-\t\t\tif (this.body instanceof Block) {", "-\t\t\t\t// Gather shape information for potential applicability analysis.", "-\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\tprivate boolean valueReturnSeen = false;", "-\t\t\t\t\tprivate boolean voidReturnSeen = false;", "-\t\t\t\t\tprivate boolean throwSeen = false;", "-\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {", "-\t\t\t\t\t\tif (returnStatement.expression != null) {", "-\t\t\t\t\t\t\tLambdaExpression.this.returnExpressionsTally++;", "-\t\t\t\t\t\t\tthis.valueReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = !this.voidReturnSeen;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.voidReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = !this.valueReturnSeen;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false; // should not analyze any nested lambda returns.", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean visit(TypeDeclaration declaration, BlockScope dontCare) {", "-\t\t\t\t\t\treturn false;  // do not analyze inner local types so as not to confuse returns from there.", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean visit(LambdaExpression lambda, BlockScope dontCare) {", "-\t\t\t\t\t\treturn LambdaExpression.this == lambda;  // do not analyze any inner lambdas so as not to confuse returns from there.", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic boolean visit(ThrowStatement throwStatement, BlockScope dontCare) {", "-\t\t\t\t\t\tthis.throwSeen  = true;", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void endVisit(LambdaExpression expression, BlockScope dontCare) {", "-\t\t\t\t\t\tif (LambdaExpression.this == expression) {", "-\t\t\t\t\t\t\tif (!this.voidReturnSeen && !this.valueReturnSeen && this.throwSeen) {  // () -> { throw new Exception(); } is value compatible.", "-\t\t\t\t\t\t\t\tBlock block = (Block) LambdaExpression.this.body;", "-\t\t\t\t\t\t\t\tfinal Statement[] statements = block.statements;", "-\t\t\t\t\t\t\t\tfinal int statementsLength = statements == null ? 0 : statements.length;", "-\t\t\t\t\t\t\t\tStatement ultimateStatement = statementsLength == 0 ? null : statements[statementsLength - 1];", "-\t\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = ultimateStatement instanceof ThrowStatement;", "-\t\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = LambdaExpression.this.valueCompatible;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tthis.traverse(visitor, blockScope);", "-\t\t\t} else {", "-\t\t\t\tExpression expression = (Expression) this.body;", "-\t\t\t\tthis.voidCompatible = expression.statementExpression();", "-\t\t\t\tthis.valueCompatible = true;", "-\t\t\t\tthis.returnExpressionsTally = 1;", "-\t\t\t\tthis.shapeAnalysisComplete = true;", "-\t\t\t}\t", "+\t\t\tthis.resultExpressions = new SimpleLookupTable();", "-\t\t}", "+\t\t} ", "+\t\t", "+\t\tthis.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);"]}], "num": 67797}
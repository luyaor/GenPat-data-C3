{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "475646cd402a00cc939ffb8f1f586e87", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "298e2ec8e08b9cde1f699b565e936cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "0d164c5fd27f905997905e2364acd7d413efe08e", "commitAfterChange": "cb53eff5db7d4f76eb24c91a2abecee1441f0bbc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "signatureAfterChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "diff": ["-\t\t\t\t\t\t\tif(local.declaration.initialization.sourceEnd > 0) {", "-\t\t\t\t\t\t\t\t\tif (this.assistNode.sourceEnd <= local.declaration.initialization.sourceEnd", "-\t\t\t\t\t\t\t\t\t\t\t&& this.assistNode.sourceStart >= local.declaration.initialization.sourceStart) {", "-\t\t\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t/*(use this if-else block if it is found that local.declaration.initialization != null is not sufficient to ", "+\t\t\t\t\t\t\t  guarantee that proposal is being asked inside a local variable declaration's initializer)", "+\t\t\t\t\t\t\t if(local.declaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\t\t\t\tif (this.assistNode.sourceEnd <= local.declaration.initialization.sourceEnd", "+\t\t\t\t\t\t\t\t\t\t&& this.assistNode.sourceStart >= local.declaration.initialization.sourceStart) {", "+\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}*/", "+\t\t\t\t\t\t\tcontinue next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da62d4f96785a312c73a1b5bea62801a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java", "commitBeforeChange": "027433d18c80815de3076b7fd489422a48401f1a", "commitAfterChange": "e060e0428f7f92647e77ad8da2c7818eb4c4e3a7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public Block updatedBlock(int depth, Set knownTypes)", "signatureAfterChange": " public Block updatedBlock(int depth, Set knownTypes)", "diff": ["-\t/* If this block stands for the lambda body, trash the contents. Lambda expressions are recovered as part of the enclosing statement.", "-\t   We still have left in a block here to make sure that contained elements can be trapped and tossed out.", "-\t*/", "-\tif (this.blockDeclaration.lambdaBody) return null; ", "-", "+\tnext:", "-\t\tif (updatedStatement != null){", "+\t\tif (updatedStatement != null) {", "+\t\t\tfor (int j = 0; j < i; j++) {", "+\t\t\t\tif (updatedStatements[j] instanceof LocalDeclaration) {", "+\t\t\t\t\tLocalDeclaration local = (LocalDeclaration) updatedStatements[j];", "+\t\t\t\t\tif (local.initialization != null) {", "+\t\t\t\t\t\tif (updatedStatement.sourceStart >= local.initialization.sourceStart && updatedStatement.sourceEnd <= local.initialization.sourceEnd)", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 20474}
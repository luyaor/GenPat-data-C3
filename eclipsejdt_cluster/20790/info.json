{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b57ba718615f0e64483587c787e109ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e51f9ce70fb5a99135777a628f05b71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 102, "signatureBeforeChange": " protected boolean resumeAfterRecovery()", "signatureAfterChange": " protected int resumeAfterRecovery()", "diff": ["-protected boolean resumeAfterRecovery() {", "-", "+protected int resumeAfterRecovery() {", "+\tif (requireExtendedRecovery()) {", "+\t\tif (this.unstackedAct == ERROR_ACTION) {", "+\t\t\tint mode = fallBackToSpringForward((Statement) null);", "+\t\t\tthis.resumedAfterRepair = mode == RESUME;", "+\t\t\tif (mode == RESUME || mode == HALT)", "+\t\t\t\treturn mode;", "+\t\t\t// else fall through and RESTART", "+\t\t} else {", "+\t\t\treturn RESUME;", "+\t\t}", "+\t}", "+\t\t", "+\t", "+\t", "+\t", "+\t", "+\tthis.valueLambdaNestDepth = -1;", "-\tif (!moveRecoveryCheckpoint()) return false;", "+\tif (this.unstackedAct != ERROR_ACTION && this.resumedAfterRepair) {", "+\t\tthis.scanner.ungetToken(this.currentToken);  // effectively move recovery checkpoint *backwards*.", "+\t} else {", "+\t\tif (!moveRecoveryCheckpoint()) return HALT;", "+\t}", "+\tthis.resumedAfterRepair = false;", "-\t\treturn true;", "+\t\treturn RESTART;", "-\t\treturn true;", "+\t\treturn RESTART;", "-\treturn false;", "+\treturn HALT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f76a324e4d6772d8483d01523e41ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected boolean resumeAfterRecovery()", "signatureAfterChange": " protected int resumeAfterRecovery()", "diff": ["-protected boolean resumeAfterRecovery() {", "+protected int resumeAfterRecovery() {", "+\t\tif (requireExtendedRecovery()) {", "+\t\t\tif (this.unstackedAct != ERROR_ACTION) {", "+\t\t\t\treturn RESUME;", "+\t\t\t}", "+\t\t\treturn super.resumeAfterRecovery();", "+\t\t}", "-\t\t\tif(!(this.currentElement instanceof RecoveredType)) {", "+\t\t\tif (!(this.currentElement instanceof RecoveredType)) {", "-\t\t\t\treturn false;", "-\t}", "+\t\t\t\treturn HALT;", "+\t\t\t}", "-\t\t\tRecoveredType recoveredType = (RecoveredType)this.currentElement;", "-\t\t\tif(recoveredType.typeDeclaration != null && recoveredType.typeDeclaration.allocation == this.assistNode){", "+\t\t\tRecoveredType recoveredType = (RecoveredType) this.currentElement;", "+\t\t\tif (recoveredType.typeDeclaration != null && recoveredType.typeDeclaration.allocation == this.assistNode) {", "-\t\t\t\treturn false;", "+\t\t\t\treturn HALT;"]}], "num": 20790}
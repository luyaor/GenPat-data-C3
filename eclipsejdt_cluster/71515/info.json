{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31704fffc04653f902af2da7fa26b7cc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ed93095c8d56b978c8989193e0462eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate int readToken() throws InvalidInputException", "signatureAfterChange": " \tprotected void updateLineEnd()", "diff": ["+\tprotected void updateLineEnd() {", "+\t\twhile (this.index > (this.lineEnd+1)) {", "+\t\t\tif (this.linePtr < this.lastLinePtr) {", "+\t\t\t\tthis.lineEnd = this.sourceParser.scanner.getLineEnd(++this.linePtr) - 1;", "+\t\t\t\tthis.lineEnd = this.endComment;", "+\t\t\t\treturn;", "+\t\t\tthis.lineStarted = false;", "-\t */", "-\tprivate int readToken() throws InvalidInputException {", "-\t\tif (this.currentTokenType < 0) {", "-\t\t\tthis.currentTokenType = this.scanner.getNextToken();", "-\t\t\tif (this.scanner.currentPosition > (this.lineEnd+1) && this.currentTokenType == TerminalTokens.TokenNameMULTIPLY) {", "-\t\t\t\twhile (this.currentTokenType == TerminalTokens.TokenNameMULTIPLY) {", "-\t\t\t\t\tthis.currentTokenType = this.scanner.getNextToken();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.index = this.scanner.currentPosition;", "-\t\t}", "-\t\treturn this.currentTokenType;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fabf4c559b9ba3e03b085ca4f5f59d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "321d0d2c500c247f0447784febbb6a14ba5499be", "commitAfterChange": "0a78a38e693907f3c7add6d8e6f4ecfad096e0fb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " protected int resolveLevelForType (char[] simpleNamePattern, \t\t\t\t\t\t\t\t\tchar[] qualificationPattern, \t\t\t\t\t\t\t\t\tchar[][][] patternTypeArguments, \t\t\t\t\t\t\t\t\tint depth, \t\t\t\t\t\t\t\t\tTypeBinding type)", "signatureAfterChange": " protected int resolveLevelForType (char[] simpleNamePattern, \t\t\t\t\t\t\t\t\tchar[] qualificationPattern, \t\t\t\t\t\t\t\t\tchar[][][] patternTypeArguments, \t\t\t\t\t\t\t\t\tint depth, \t\t\t\t\t\t\t\t\tTypeBinding type)", "diff": ["-\tboolean isRawType = type.isRawType();", "-\t} else if (isRawType) {", "+\t} else if (type.isRawType()) {", "-\t} else if (!type.isParameterizedType()) {", "-\t\t// Standard types (ie. neither generic nor parameterized nor raw types)", "-\t\t// cannot match pattern with type parameters or arguments", "-\t\treturn (patternTypeArguments[depth]==null || patternTypeArguments[depth].length==0) ? level : IMPOSSIBLE_MATCH;", "-\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) type;", "+\t\tTypeBinding leafType = type.leafComponentType();", "+\t\tif (!leafType.isParameterizedType()) {", "+\t\t\t// Standard types (ie. neither generic nor parameterized nor raw types)", "+\t\t\t// cannot match pattern with type parameters or arguments", "+\t\t\treturn (patternTypeArguments[depth]==null || patternTypeArguments[depth].length==0) ? level : IMPOSSIBLE_MATCH;", "+\t\t}", "+\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) leafType;", "-\t\t\t\t// Get reference binding", "-\t\t\t\tReferenceBinding refBinding = null;", "-\t\t\t\tif (argTypeBinding.isArrayType()) {", "-\t\t\t\t\tTypeBinding leafBinding = ((ArrayBinding) argTypeBinding).leafComponentType;", "-\t\t\t\t\tif (!leafBinding.isBaseType()) {", "-\t\t\t\t\t\trefBinding = (ReferenceBinding) leafBinding;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (!argTypeBinding.isBaseType()) {", "-\t\t\t\t\trefBinding = (ReferenceBinding) argTypeBinding;", "-\t\t\t\t}", "-\t\t\t\tif (refBinding != null) {", "-\t\t\t\t\trefBinding = refBinding.superclass();", "-\t\t\t\t\twhile (refBinding != null) {", "-\t\t\t\t\t\tif (CharOperation.equals(patternTypeArgument, refBinding.shortReadableName(), this.isCaseSensitive) ||", "-\t\t\t\t\t\t\tCharOperation.equals(patternTypeArgument, refBinding.readableName(), this.isCaseSensitive)) {", "-\t\t\t\t\t\t\t// found name in hierarchy => match", "+\t\t\t\tTypeBinding leafTypeBinding = argTypeBinding.leafComponentType();", "+\t\t\t\tif (leafTypeBinding.isBaseType()) return impossible;", "+\t\t\t\tReferenceBinding refBinding = ((ReferenceBinding) leafTypeBinding).superclass();", "+\t\t\t\twhile (refBinding != null) {", "+\t\t\t\t\tif (CharOperation.equals(patternTypeArgument, refBinding.shortReadableName(), this.isCaseSensitive) ||", "+\t\t\t\t\t\tCharOperation.equals(patternTypeArgument, refBinding.readableName(), this.isCaseSensitive)) {", "+\t\t\t\t\t\t// found name in hierarchy => match", "+\t\t\t\t\t\tcontinue nextTypeArgument;", "+\t\t\t\t\t} else if (refBinding.isLocalType() || refBinding.isMemberType()) {", "+\t\t\t\t\t\t// for local or member type, verify also source name (bug 81084)", "+\t\t\t\t\t\tif (CharOperation.match(patternTypeArgument, refBinding.sourceName(), this.isCaseSensitive))", "-\t\t\t\t\t\t} else if (refBinding.isLocalType() || refBinding.isMemberType()) {", "-\t\t\t\t\t\t\t// for local or member type, verify also source name (bug 81084)", "-\t\t\t\t\t\t\tif (CharOperation.match(patternTypeArgument, refBinding.sourceName(), this.isCaseSensitive))", "-\t\t\t\t\t\t\t\tcontinue nextTypeArgument;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\trefBinding = refBinding.superclass();", "+\t\t\t\t\trefBinding = refBinding.superclass();"]}], "num": 71515}
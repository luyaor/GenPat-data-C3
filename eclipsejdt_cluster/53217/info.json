{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84253606e758733f2a22a85b0beee173", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01134e6a3b9011f559af25c043b31ed2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ElementInfoConverter.java", "commitBeforeChange": "1a1a31d229c2fc8c04f9bd63ce751ad3b1477b30", "commitAfterChange": "e6522f026ab59e6d639e7039d4201198858d9e63", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert( \t\tSourceTypeElementInfo sourceType, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo sourceType, CompilationResult compilationResult)", "diff": ["-\tprivate TypeDeclaration convert(", "-\t\tSourceTypeElementInfo sourceType,", "-\t\tCompilationResult compilationResult) {", "-\t\t/* create type declaration - can be member type */", "+\tprivate TypeDeclaration convert(SourceTypeElementInfo sourceType, CompilationResult compilationResult) {", "+\t\t", "+\t\t/* create type declaration - can be member type, local type or anonymous type */", "-\t\t// TODO (jerome) convert initializers if need local types", "-\t\t", "-\t\t/* convert fields */", "+\t\t/* convert fields and initializers */", "-\t\ttype.fields = new FieldDeclaration[sourceFieldCount];", "-\t\tfor (int i = 0; i < sourceFieldCount; i++) {", "-\t\t\ttype.fields[i] = convert((SourceFieldElementInfo)sourceFields[i], type, compilationResult);", "+\t\tInitializerElementInfo[] initializers = null;", "+\t\tint initializerCount = 0;", "+\t\tif (this.needLocalTypes) {", "+\t\t\tinitializers = sourceType.getInitializers();", "+\t\t\tinitializerCount = initializers.length;", "+\t\t\ttype.fields = new FieldDeclaration[initializerCount + sourceFieldCount];", "+\t\t\tfor (int i = 0; i < initializerCount; i++) {", "+\t\t\t\ttype.fields[i] = convert(initializers[i], compilationResult);", "+\t\t\t}", "+\t\t} else {", "+\t\t\ttype.fields = new FieldDeclaration[sourceFieldCount];", "+\t\t}", "+\t\tint length = initializerCount + sourceFieldCount;", "+\t\tint index = 0;", "+\t\tfor (int i = initializerCount; i < length; i++) {", "+\t\t\ttype.fields[i] = convert((SourceFieldElementInfo)sourceFields[index++], compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f112f22b7c1015627838cbb057cd8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "1b07739f9c8457dbcb0b9d2fe79d964b9c57b61f", "commitAfterChange": "b04265304d1dc524aca72cb541df0fdc355d218a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate CompilationUnitDeclaration convert(ISourceType[] sourceTypes, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\tint typeCount = sourceTypes.length;", "-\t\tfinal TypeDeclaration[] types = new TypeDeclaration[typeCount];", "-\t\t/*", "-\t\t * We used a temporary types collection to prevent this.unit.types from being null during a call to", "-\t\t * convert(...) when the source is syntactically incorrect and the parser is flushing the unit's types.", "-\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97466", "-\t\t */", "-\t\tfor (int i = 0; i < typeCount; i++) {", "-\t\t\tSourceTypeElementInfo typeInfo = (SourceTypeElementInfo) sourceTypes[i];", "-\t\t\ttypes[i] = convert((SourceType) typeInfo.getHandle(), compilationResult);", "+\t\ttry {", "+\t\t\tint typeCount = sourceTypes.length;", "+\t\t\tfinal TypeDeclaration[] types = new TypeDeclaration[typeCount];", "+\t\t\t/*", "+\t\t\t * We used a temporary types collection to prevent this.unit.types from being null during a call to", "+\t\t\t * convert(...) when the source is syntactically incorrect and the parser is flushing the unit's types.", "+\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97466", "+\t\t\t */", "+\t\t\tfor (int i = 0; i < typeCount; i++) {", "+\t\t\t\tSourceTypeElementInfo typeInfo = (SourceTypeElementInfo) sourceTypes[i];", "+\t\t\t\ttypes[i] = convert((SourceType) typeInfo.getHandle(), compilationResult);", "+\t\t\t}", "+\t\t\tthis.unit.types = types;", "+\t\t\treturn this.unit;", "+\t\t} catch (AnonymousMemberFound e) {", "+\t\t\treturn new Parser(this.problemReporter, true).parse(this.cu, compilationResult);", "-\t\tthis.unit.types = types;", "-\t\treturn this.unit;"]}], "num": 53217}
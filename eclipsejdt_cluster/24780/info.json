{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd33e89db558f45ec72f4426b2e781e5", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "522f6f82b113eb13a0f5e57565300967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.blockCommentBuffer.setLength(0);", "-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "+\t\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(' ');", "-\t\t\t\t\t\tif (tokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "+\t\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "-\t\t\t\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(' ');", "-\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "+\t\t    \t\tthis.blockCommentBuffer.append(BLOCK_LINE_PREFIX);", "-    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+    \t\tint lastColumn = this.column + this.blockCommentTokensBuffer.length() + tokenLength;", "-\t\t    \tString tokensString = tokensBuffer.toString().trim();", "+\t\t    \tString tokensString = this.blockCommentTokensBuffer.toString().trim();", "-\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "+\t\t    \t\tthis.blockCommentBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t    \tif (tokensBuffer.length() > 0) {", "-\t\t\t\t\tbuffer.append(tokensString);", "+\t\t    \tif (this.blockCommentTokensBuffer.length() > 0) {", "+\t\t\t\t\tthis.blockCommentBuffer.append(tokensString);", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\tthis.blockCommentBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\t\ttokensBuffer.append(' ');", "+\t\t\t\t\tthis.blockCommentTokensBuffer.append(' ');", "-\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\tthis.blockCommentTokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\tStringBuffer replacement = new StringBuffer();", "+\t\t\t\tStringBuffer replacement;", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "+\t\t\t\t\treplacement = this.blockCommentTokensBuffer;", "-\t\t\t\t\t} else if (buffer.length()==0 || buffer.charAt(0)!=' ') {", "+\t\t\t\t\t} else if (this.blockCommentBuffer.length()==0 || this.blockCommentBuffer.charAt(0)!=' ') {", "+\t\t\t\t\treplacement.append(this.blockCommentBuffer);", "+\t\t\t\t} else {", "+\t\t\t\t\treplacement = this.blockCommentBuffer;", "-\t\t\t\treplacement.append(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39e8b1f667da9d328f7704a9ea0d2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "signatureAfterChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "diff": ["-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\taddInsertEdit(textStartPosition, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(textStartPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append( ' ');", "-\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\taddReplaceEdit(start, currentTokenStartPosition-1, buffer.toString());", "+\t\t\t\t\t\t\t\taddReplaceEdit(start, currentTokenStartPosition-1, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append( ' ');", "-\t\t\t\t\tprintJavadocNewLine(buffer);", "+\t\t\t\t\tprintJavadocNewLine(this.javadocGapLinesBuffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\taddInsertEdit(textEndPosition+1, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(textEndPosition+1, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);"]}], "num": 24780}
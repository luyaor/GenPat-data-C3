{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31ef389792513332d444cf0f2b1a89fc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1621be3bcf8d3147a28b6227002484ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "e5bb4bddaa8ae27dfddec859067bcb3df83df4dc", "commitAfterChange": "65877d9109defab8c1c7191e1a9530b8bc8f9b43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void analyseCode(ClassScope classScope, InitializationFlowContext initializationContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode(ClassScope classScope, InitializationFlowContext initializationContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\t\t// if this method uses a type parameter declared by the declaring class,", "+\t\t\t\t\t// it can't be static. https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682", "+\t\t\t\t\tif (this.arguments[i].binding != null && (this.arguments[i].binding.type instanceof TypeVariableBinding)) {", "+\t\t\t\t\t\tBinding declaringElement = ((TypeVariableBinding)this.arguments[i].binding.type).declaringElement;", "+\t\t\t\t\t\tif (this.binding != null && this.binding.declaringClass == declaringElement)", "+\t\t\t\t\t\t\tthis.bits &= ~ASTNode.CanBeStatic;", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (this.binding.declaringClass instanceof MemberTypeBinding && !this.binding.declaringClass.isStatic()) {", "+\t\t\t\t// method of a non-static member type can't be static.", "+\t\t\t\tthis.bits &= ~ASTNode.CanBeStatic;", "+\t\t\t} else {", "+\t\t\t\t// method with empty body should not be flagged as static.", "+\t\t\t\tthis.bits &= ~ASTNode.CanBeStatic;", "+\t\t\t// check if the method could have been static", "+\t\t\tif (!this.binding.isStatic() && (this.bits & ASTNode.CanBeStatic) != 0) {", "+\t\t\t\tif(!this.binding.isOverriding() && !this.binding.isImplementing()) {", "+\t\t\t\t\tif (this.binding.isPrivate() || this.binding.isFinal() || this.binding.declaringClass.isFinal()) {", "+\t\t\t\t\t\tthis.scope.problemReporter().methodCanBeDeclaredStatic(this);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.scope.problemReporter().methodCanBePotentiallyDeclaredStatic(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aceed17fba00155f9a76847eb4d0601", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "e74abb558d667117356c6f54df2ab5f4c2e65105", "commitAfterChange": "c616b779ea1b8ac58e576f87acddf9f0396396f5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding) actualReceiverType, selector, pseudoArgs, this);", "+\t\t\t\tthis.binding = ", "+\t\t\t\t\treceiver.isImplicitThis()", "+\t\t\t\t\t\t? scope.getImplicitMethod(selector, pseudoArgs, this)", "+\t\t\t\t\t\t: scope.findMethod((ReferenceBinding) actualReceiverType, selector, pseudoArgs, this);", "+\t\t\t\tif (binding != null && !binding.isValidBinding()) {", "+\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\t\t\t\t// record the closest match, for clients who may still need hint about possible method match", "+\t\t\t\t\tif (closestMatch != null) {", "+\t\t\t\t\t\tthis.binding = closestMatch;", "+\t\t\t\t\t\tif ((closestMatch.isPrivate() || closestMatch.declaringClass.isLocalType()) && !scope.isDefinedInMethod(closestMatch)) {", "+\t\t\t\t\t\t\t// ignore cases where method is used from within inside itself (e.g. direct recursions)", "+\t\t\t\t\t\t\tclosestMatch.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 33306}
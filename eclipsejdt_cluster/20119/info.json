{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d1a12e259f42980496ec1ab427adf16", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bb924862f87a7ac1b138f11fb0a7a30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3f92e8a5a07dd9ede4257e502806d13fe53cd5fa", "commitAfterChange": "ef611461f875a680b17b8fa198a6386473d15159", "methodNumberBeforeChange": 622, "methodNumberAfterChange": 622, "signatureBeforeChange": " public void testCamelCaseMethod1() throws JavaModelException", "signatureAfterChange": " public void testCamelCaseMethod1() throws JavaModelException", "diff": ["+\tthis.oldOptions = JavaCore.getOptions();", "+\ttry {", "+\t\tHashtable options = new Hashtable(oldOptions);", "+\t\toptions.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tJavaCore.setOptions(options);", "+\t\t", "-\tthis.workingCopies[0] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/Test.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"public class Test {\\n\"+", "-\t\t\"  void oneTwoThree(){}\\n\"+", "-\t\t\"  void oTTMethod(){}\\n\"+", "-\t\t\"  void foo() {\\n\"+", "-\t\t\"    oTT\\n\"+", "-\t\t\"  }\\n\"+", "-\t\t\"}\");", "-", "-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tString str = this.workingCopies[0].getSource();", "-\tString completeBehind = \"oTT\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "-", "-\tassertResults(", "-\t\t\t\"oneTwoThree[METHOD_REF]{oneTwoThree(), Lcamelcase.Test;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"oTTMethod[METHOD_REF]{oTTMethod(), Lcamelcase.Test;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/Test.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"public class Test {\\n\"+", "+\t\t\t\"  void oneTwoThree(){}\\n\"+", "+\t\t\t\"  void oTTMethod(){}\\n\"+", "+\t\t\t\"  void foo() {\\n\"+", "+\t\t\t\"    oTT\\n\"+", "+\t\t\t\"  }\\n\"+", "+\t\t\t\"}\");", "+\t", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tString str = this.workingCopies[0].getSource();", "+\t\tString completeBehind = \"oTT\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"oneTwoThree[METHOD_REF]{oneTwoThree(), Lcamelcase.Test;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTMethod[METHOD_REF]{oTTMethod(), Lcamelcase.Test;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tJavaCore.setOptions(oldOptions);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9a57b77f95eea7fbd0c343f3ded9374", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "ffa1ad16ddce7576c8f89598c4296a325706c352", "commitAfterChange": "c6212e9995955b6fea5f948d8ba3a27f1a2826ea", "methodNumberBeforeChange": 632, "methodNumberAfterChange": 632, "signatureBeforeChange": " public void testParameterNames1() throws CoreException, IOException", "signatureAfterChange": " public void testParameterNames1() throws CoreException, IOException", "diff": ["-\tthis.workingCopies = new ICompilationUnit[1];", "-\tthis.workingCopies[0] = getWorkingCopy(", "-\t\t\"/Completion/src/p/Test.java\",", "-\t\t\"package p;\"+", "-\t\t\"public class Test {\\n\" + ", "-\t\t\"  void foo(doctest.X x) {\\n\" + ", "-\t\t\"    x.fo\\n\" + ", "-\t\t\"  }\\n\" + ", "-\t\t\"}\\n\");", "-\t", "-\taddLibrary(", "-\t\t\t\"Completion\", ", "-\t\t\t\"tmpDoc.jar\",", "-\t\t\tnull,", "-\t\t\t\"tmpDocDoc.zip\",", "-\t\t\tfalse);", "-\t", "-\tCompletionTestsRequestor2 requestor;", "+\tMap options = COMPLETION_PROJECT.getOptions(true);", "+\tObject timeout = options.get(JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC);", "-\t\trequestor = new CompletionTestsRequestor2(true);", "-\t\tString str = this.workingCopies[0].getSource();", "-\t\tString completeBehind = \"x.fo\";", "-\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t\toptions.put(JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC, \"2000\");", "+\t\tthis.workingCopies = new ICompilationUnit[1];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/Completion/src/p/Test.java\",", "+\t\t\t\"package p;\"+", "+\t\t\t\"public class Test {\\n\" + ", "+\t\t\t\"  void foo(doctest.X x) {\\n\" + ", "+\t\t\t\"    x.fo\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\");", "-\t\tassertResults(", "-\t\t\t\"foo[METHOD_REF]{foo(), Ldoctest.X;, (Ljava.lang.Object;)V, foo, (param), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\t\taddLibrary(", "+\t\t\t\t\"Completion\", ", "+\t\t\t\t\"tmpDoc.jar\",", "+\t\t\t\tnull,", "+\t\t\t\t\"tmpDocDoc.zip\",", "+\t\t\t\tfalse);", "+\t\t", "+\t\tCompletionTestsRequestor2 requestor;", "+\t\ttry {", "+\t\t\trequestor = new CompletionTestsRequestor2(true);", "+\t\t\tString str = this.workingCopies[0].getSource();", "+\t\t\tString completeBehind = \"x.fo\";", "+\t\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t\t\t", "+\t\t\tassertResults(", "+\t\t\t\t\"foo[METHOD_REF]{foo(), Ldoctest.X;, (Ljava.lang.Object;)V, foo, (param), \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t\t} finally {", "+\t\t\tremoveLibrary(\"Completion\", \"tmpDoc.jar\");", "+\t\t}", "-\t\tremoveLibrary(\"Completion\", \"tmpDoc.jar\");", "+\t\toptions.put(JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC, timeout);"]}], "num": 20119}
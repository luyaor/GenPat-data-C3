{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0bb828883ee59792d4cc7e72a99b0f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09f1a2fba15159a2dbbc1b01760eb3ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 535, "methodNumberAfterChange": 536, "signatureBeforeChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "signatureAfterChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "diff": ["+}", "+\t// nonNullAnnotationName is not used in 1.8-mode", "+\tTypeBinding inheritedReturnType = inheritedMethod.returnType;", "+\tString[] arguments;", "+\tString[] argumentsShort;", "+\tif (this.options.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tStringBuilder returnType = new StringBuilder();", "+\t\treturnType.append('@').append(CharOperation.concatWith(nonNullAnnotationName, '.'));", "+\t\treturnType.append(' ').append(inheritedReturnType.readableName());", "+\t\targuments = new String[] { methodSignature.toString(), returnType.toString() };", "+\t\t", "+\t\treturnType = new StringBuilder();", "+\t\treturnType.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "+\t\treturnType.append(' ').append(inheritedReturnType.shortReadableName());", "+\t\targumentsShort = new String[] { shortSignature.toString(), returnType.toString() };", "+\t} else {", "+\t\targuments = new String[] { methodSignature.toString(), ", "+\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, false))};", "+\t\targumentsShort = new String[] { shortSignature.toString(),", "+\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, true))};", "+\t}", "-\t\tIProblem.IllegalReturnNullityRedefinition, ", "-\t\tnew String[] { methodSignature.toString(), CharOperation.toString(nonNullAnnotationName)},", "-\t\tnew String[] { shortSignature.toString(), new String(nonNullAnnotationName[nonNullAnnotationName.length-1])},", "-\t\tsourceStart,", "-\t\tmethodDecl.returnType.sourceEnd);", "+\t\t\tIProblem.IllegalReturnNullityRedefinition, ", "+\t\t\targuments,", "+\t\t\targumentsShort,", "+\t\t\tsourceStart,", "+\t\t\tmethodDecl.returnType.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf10900b5f5d4003347226e8bb058d13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "commitAfterChange": "e62068644543b99c745f832b9263b49ff6b3d0ba", "methodNumberBeforeChange": 536, "methodNumberAfterChange": 536, "signatureBeforeChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "signatureAfterChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "diff": ["-\tString[] arguments;", "-\tString[] argumentsShort;", "-\tif (this.options.useNullTypeAnnotations != Boolean.TRUE) {", "-\t\tStringBuilder returnType = new StringBuilder();", "+\tint problemId = IProblem.IllegalReturnNullityRedefinition;", "+\tStringBuilder returnType = new StringBuilder();", "+\tStringBuilder returnTypeShort = new StringBuilder();", "+\tif (this.options.usesNullTypeAnnotations()) {", "+\t\t// 1.8+", "+\t\tif (inheritedReturnType.isTypeVariable() && (inheritedReturnType.tagBits & TagBits.AnnotationNullMASK) == 0) {", "+\t\t\tproblemId = IProblem.IllegalReturnNullityRedefinitionFreeTypeVariable;", "+", "+\t\t\treturnType.append(inheritedReturnType.readableName());", "+\t\t\treturnTypeShort.append(inheritedReturnType.shortReadableName());", "+\t\t} else {", "+\t\t\treturnType.append(inheritedReturnType.nullAnnotatedReadableName(this.options, false));", "+\t\t\treturnTypeShort.append(inheritedReturnType.nullAnnotatedReadableName(this.options, true));", "+\t\t}", "+\t} else {", "+\t\t// 1.7-", "-\t\targuments = new String[] { methodSignature.toString(), returnType.toString() };", "-\t\treturnType = new StringBuilder();", "-\t\treturnType.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "-\t\treturnType.append(' ').append(inheritedReturnType.shortReadableName());", "-\t\targumentsShort = new String[] { shortSignature.toString(), returnType.toString() };", "-\t} else {", "-\t\targuments = new String[] { methodSignature.toString(), ", "-\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, false))};", "-\t\targumentsShort = new String[] { shortSignature.toString(),", "-\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, true))};", "+\t\treturnTypeShort.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "+\t\treturnTypeShort.append(' ').append(inheritedReturnType.shortReadableName());", "+\tString[] arguments = new String[] { methodSignature.toString(), returnType.toString() };", "+\tString[] argumentsShort = new String[] { shortSignature.toString(), returnTypeShort.toString() };", "-\t\t\tIProblem.IllegalReturnNullityRedefinition, ", "+\t\t\tproblemId, "]}], "num": 42899}
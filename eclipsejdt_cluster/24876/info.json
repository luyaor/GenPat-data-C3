{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fddd3b483a39a64db3fde4b122661ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ed2c0cb760cb33ded2b8b0c672ac4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "  public void getfield(FieldBinding fieldBinding)", "signatureAfterChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, FieldBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "diff": ["-public void getfield(FieldBinding fieldBinding) {", "-\tint returnTypeSize = 1;", "-\tif ((fieldBinding.type.id == TypeIds.T_double) || (fieldBinding.type.id == TypeIds.T_long)) {", "-\t\treturnTypeSize = 2;", "-\t}", "-\tgenerateFieldAccess(", "-\t\t\tOpcodes.OPC_getfield,", "-\t\t\treturnTypeSize,", "-\t\t\tfieldBinding.declaringClass,", "-\t\t\tfieldBinding.name,", "-\t\t\tfieldBinding.type);", "+ */", "+public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, FieldBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver) {", "+\tReferenceBinding constantPoolDeclaringClass = codegenBinding.declaringClass;", "+\t// if the binding declaring class is not visible, need special action", "+\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "+\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "+\t// and not from Object or implicit static field access.", "+\tif (constantPoolDeclaringClass != actualReceiverType.erasure()", "+\t\t\t&& !actualReceiverType.isArrayType()", "+\t\t\t&& constantPoolDeclaringClass != null // array.length", "+\t\t\t&& codegenBinding.constant() == Constant.NotAConstant) {", "+\t\tCompilerOptions options = currentScope.compilerOptions();", "+\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(isImplicitThisReceiver && codegenBinding.isStatic()))", "+\t\t\t\t\t&& constantPoolDeclaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "+\t\t\t\t|| !constantPoolDeclaringClass.canBeSeenBy(currentScope)) {", "+", "+\t\t\treturn actualReceiverType.erasure();", "+\t\t}", "+\t}\t", "+\treturn constantPoolDeclaringClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bb726e06f05a580652c52ba7aa7468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 133, "signatureBeforeChange": "  public void getstatic(FieldBinding fieldBinding)", "signatureAfterChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver, boolean hasGenericCast)", "diff": ["+ */", "+public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver, boolean hasGenericCast) {", "+\tTypeBinding constantPoolDeclaringClass = codegenBinding.declaringClass;", "+\t// Post 1.4.0 target, array clone() invocations are qualified with array type", "+\t// This is handled in array type #clone method binding resolution (see Scope and UpdatedMethodBinding)", "+\tif (codegenBinding == currentScope.environment().arrayClone) {", "+\t\tCompilerOptions options = currentScope.compilerOptions();", "+\t\tif (options.sourceLevel > ClassFileConstants.JDK1_4 ) {", "+\t\t\tconstantPoolDeclaringClass = actualReceiverType.erasure();", "+\t\t}", "+\t} else {", "+\t\t// if the binding declaring class is not visible, need special action", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "+\t\t// NOTE: from target 1.2 on, method's declaring class is touched if any different from receiver type", "+\t\t// and not from Object or implicit static method call.", "+\t\tif (constantPoolDeclaringClass != actualReceiverType.erasure() && !hasGenericCast && !actualReceiverType.isArrayType()) {", "+\t\t\tCompilerOptions options = currentScope.compilerOptions();", "+\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(isImplicitThisReceiver && codegenBinding.isStatic()))", "+\t\t\t\t\t\t&& codegenBinding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object methods", "+\t\t\t\t\t|| !codegenBinding.declaringClass.canBeSeenBy(currentScope)) {", "+\t\t\t\tconstantPoolDeclaringClass = actualReceiverType.erasure();", "+\t\t\t}", "+\t\t}\t\t\t\t", "+\t}", "+\treturn constantPoolDeclaringClass;", "+}", "-", "-public void getstatic(FieldBinding fieldBinding) {", "-\tint returnTypeSize = 1;", "-\tif ((fieldBinding.type.id == TypeIds.T_double) || (fieldBinding.type.id == TypeIds.T_long)) {", "-\t\treturnTypeSize = 2;", "-\t}", "-\tgenerateFieldAccess(", "-\t\t\tOpcodes.OPC_getstatic,", "-\t\t\treturnTypeSize,", "-\t\t\tfieldBinding.declaringClass,", "-\t\t\tfieldBinding.name,", "-\t\t\tfieldBinding.type);"]}], "num": 24876}
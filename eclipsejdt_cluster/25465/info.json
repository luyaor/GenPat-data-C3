{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cc5d46a422b6e2da8668294d1c930d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcd1a0fa9ad69dc9b1571ce949f65fff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "00c42145a98af76c17f15294be6170e6defe1ae9", "commitAfterChange": "ff9b5fb6d6cce662b372282e8b20522e1f33d740", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["+\t// except for projects involved in a 'warning' cycle (see below)", "+\t\t\t// The prereq project has no build state: if this project has a 'warning' cycle marker and the prereq project is involved in the cycle", "+\t\t\t// then allow build (see http://bugs.eclipse.org/bugs/show_bug.cgi?id=23357)", "+\t\t\tJavaProject jProject = (JavaProject)this.javaProject;", "+\t\t\tIMarker cycleMarker = jProject.getCycleMarker();", "+\t\t\tif (cycleMarker != null && ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_WARNING) {", "+\t\t\t\tHashSet cycleParticipants = new HashSet();", "+\t\t\t\tjProject.updateCycleParticipants(null, new ArrayList(), cycleParticipants, ResourcesPlugin.getWorkspace().getRoot());", "+\t\t\t\tif (cycleParticipants.contains(JavaCore.create(p))) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e99748122dad1c96e033c77d32198d03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "67035f14cb0a6ff376a72c1dc8d8f9d49e8aa489", "commitAfterChange": "284db1207b4a8a1487a9884e41782a487dbb438d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["-\t\t\t// The prereq project has no build state: if this project has a 'warning' cycle marker and the prereq project is involved in the cycle", "+\t\t\t// The prereq project has no build state: if this prereq project has a 'warning' cycle marker", "-\t\t\tJavaProject jProject = (JavaProject)this.javaProject;", "-\t\t\tIMarker cycleMarker = jProject.getCycleMarker();", "-\t\t\tif (cycleMarker != null && ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue() == IMarker.SEVERITY_WARNING) {", "-\t\t\t\tHashSet cycleParticipants = new HashSet();", "-\t\t\t\tjProject.updateCycleParticipants(null, new ArrayList(), cycleParticipants, ResourcesPlugin.getWorkspace().getRoot());", "-\t\t\t\tif (cycleParticipants.contains(JavaCore.create(p))) {", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "+\t\t\tJavaProject prereqProject = (JavaProject)JavaCore.create(p);", "+\t\t\tif (prereqProject.hasCycleMarker() ", "+\t\t\t\t\t&& JavaCore.WARNING.equals(JavaCore.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH))) {", "+\t\t\t\tcontinue;"]}], "num": 25465}
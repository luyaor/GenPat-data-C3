{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ea1cc82139de9460cfa2a7461372a0e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb2f2b62bd577e9313f153f5155fb52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r protected void computeJarChildren(JarPackageFragmentRootInfo info, Vector vChildren) throws JavaModelException", "signatureAfterChange": "\r protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException", "diff": ["-protected void computeJarChildren(JarPackageFragmentRootInfo info, Vector vChildren) throws JavaModelException {\r", "+protected void computeJarChildren(JarPackageFragmentRootInfo info, ArrayList vChildren) throws JavaModelException {\r", "-\t\tHashtable packageFragToTypes= new Hashtable();\r", "+\t\tHashMap packageFragToTypes= new HashMap();\r", "-\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new Vector[] { new Vector(), new Vector()\r", "+\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\tVector[] temp;\r", "+\t\tArrayList[] temp;\r", "-\t\t\t\ttemp= (Vector[]) packageFragToTypes.get(eName);\r", "+\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(eName);\r", "-\t\t\t\t\ttemp= new Vector[] { new Vector(), new Vector()\r", "+\t\t\t\t\ttemp= new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\tVector classTemp;\r", "+\t\t\t\t\tArrayList classTemp;\r", "-\t\t\t\t\ttemp= (Vector[]) packageFragToTypes.get(key);\r", "+\t\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(key);\r", "-\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new Vector[] { new Vector(), new Vector()\r", "+\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\t\tclassTemp= new Vector();\r", "-\t\t\t\t\t\tclassTemp.addElement(value);\r", "-\t\t\t\t\t\tpackageFragToTypes.put(key, new Vector[] {classTemp, new Vector()\r", "+\t\t\t\t\t\tclassTemp= new ArrayList();\r", "+\t\t\t\t\t\tclassTemp.add(value);\r", "+\t\t\t\t\t\tpackageFragToTypes.put(key, new ArrayList[] {classTemp, new ArrayList()\r", "-\t\t\t\t\t\tclassTemp.addElement(value);\r", "+\t\t\t\t\t\tclassTemp.add(value);\r", "-\t\t\t\t\tVector resTemp;\r", "+\t\t\t\t\tArrayList resTemp;\r", "-\t\t\t\t\ttemp= (Vector[]) packageFragToTypes.get(key);\r", "+\t\t\t\t\ttemp= (ArrayList[]) packageFragToTypes.get(key);\r", "-\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new Vector[] { new Vector(), new Vector()\r", "+\t\t\t\t\t\t\t\tpackageFragToTypes.put(prefix, new ArrayList[] { new ArrayList(), new ArrayList()\r", "-\t\t\t\t\t\tresTemp= new Vector();\r", "-\t\t\t\t\t\tresTemp.addElement(value);\r", "-\t\t\t\t\t\tpackageFragToTypes.put(key, new Vector[] { new Vector(), resTemp });\r", "+\t\t\t\t\t\tresTemp= new ArrayList();\r", "+\t\t\t\t\t\tresTemp.add(value);\r", "+\t\t\t\t\t\tpackageFragToTypes.put(key, new ArrayList[] { new ArrayList(), resTemp });\r", "-\t\t\t\t\t\tresTemp.addElement(value);\r", "+\t\t\t\t\t\tresTemp.add(value);\r", "-\t\tEnumeration packages= packageFragToTypes.keys();\r", "-\t\twhile (packages.hasMoreElements()) {\r", "-\t\t\tString packName= (String) packages.nextElement();\r", "-\t\t\tVector[] entries= (Vector[]) packageFragToTypes.get(packName);\r", "+\t\tIterator packages = packageFragToTypes.keySet().iterator();\r", "+\t\twhile (packages.hasNext()) {\r", "+\t\t\tString packName= (String) packages.next();\r", "+\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);\r", "-\t\t\t\tentries[1].copyInto(resNames);\r", "+\t\t\t\tentries[1].toArray(resNames);\r", "-\t\t\tvChildren.addElement(packFrag);\r", "+\t\t\tvChildren.add(packFrag);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee8150d6451a1bc568c71cf7de6f4cb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 55, "signatureBeforeChange": " public int literalIndexForJavaLangStringBufferAppend(int typeID)", "signatureAfterChange": " public int literalIndexForJavaLangStringBufferAppend(int typeID)", "diff": ["-\t\t\tif ((index = wellKnownMethods[APPEND_INT_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_INT_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_INT_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_INT_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendIntSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_INT_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendIntSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_INT_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_INT_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_INT_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_LONG_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_LONG_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_LONG_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_LONG_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendLongSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_LONG_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendLongSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_LONG_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_LONG_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_LONG_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_FLOAT_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_FLOAT_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_FLOAT_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_FLOAT_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendFloatSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_FLOAT_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendFloatSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_FLOAT_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_FLOAT_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_FLOAT_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_DOUBLE_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_DOUBLE_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_DOUBLE_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_DOUBLE_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendDoubleSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_DOUBLE_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendDoubleSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_DOUBLE_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_DOUBLE_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_DOUBLE_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_CHAR_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_CHAR_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_CHAR_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_CHAR_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendCharSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_CHAR_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendCharSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_CHAR_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_CHAR_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_CHAR_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_BOOLEAN_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_BOOLEAN_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_BOOLEAN_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_BOOLEAN_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendBooleanSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_BOOLEAN_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendBooleanSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_BOOLEAN_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_BOOLEAN_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_BOOLEAN_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_OBJECT_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_OBJECT_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_OBJECT_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_OBJECT_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendObjectSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_OBJECT_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendObjectSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_OBJECT_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_OBJECT_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_OBJECT_METHOD] = currentIndex++;", "-\t\t\tif ((index = wellKnownMethods[APPEND_STRING_METHOD]) == 0) {", "+\t\t\tif ((index = wellKnownMethods[STRINGBUFFER_APPEND_STRING_METHOD]) == 0) {", "-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_STRING_METHOD_NAME_AND_TYPE]) == 0) {", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_STRING_STRINGBUFFER_METHOD_NAME_AND_TYPE]) == 0) {", "-\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.AppendStringSignature);", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;", "+\t\t\t\t\tint typeIndex = literalIndex(QualifiedNamesConstants.StringBufferAppendStringSignature);", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[APPEND_STRING_STRINGBUFFER_METHOD_NAME_AND_TYPE] = currentIndex++;", "-\t\t\t\tindex = wellKnownMethods[APPEND_STRING_METHOD] = currentIndex++;", "+\t\t\t\tindex = wellKnownMethods[STRINGBUFFER_APPEND_STRING_METHOD] = currentIndex++;", "+\t\t\t\tif (index > 0xFFFF){", "+\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+\t\t\t\t}", "+\t\t\t\t// Write the method ref constant into the constant pool", "+\t\t\t\t// First add the tag", "+\t\t\t\twriteU1(MethodRefTag);", "+\t\t\t\t// Then write the class index", "+\t\t\t\twriteU2(classIndex);", "+\t\t\t\t// The write the nameAndType index", "+\t\t\t\twriteU2(nameAndTypeIndex);", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\treturn index;", "+}"]}], "num": 3084}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce848bb710e0b1dd911b11998f1aa738", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f8afdd6d83159fa5c309a543ca2eb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "a5e82ba20d8203e21a0fe05e7c825167e940b15b", "commitAfterChange": "9f4bb9537b883f20829d071b5f6fb5b55dc13a0a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " void mustPropagateStructuralChanges()", "signatureAfterChange": " void mustPropagateStructuralChanges()", "diff": ["-// TODO (CYCLE FIX) Comment out this method when the 2 new methods are added to IncrementalProjectBuilder", "-//\tHashSet cycleParticipants = new HashSet(3);", "-//\tjavaProject.updateCycleParticipants(null, new ArrayList(), cycleParticipants, workspaceRoot);", "-//", "-//\tIterator i= cycleParticipants.iterator();", "-//\twhile (i.hasNext()) {", "-//\t\tIJavaProject p = (IJavaProject) i.next();", "-//\t\tif (p != javaProject && wasProjectAlreadyBuilt(p.getProject())) {", "-//\t\t\tneedRebuild();", "-//\t\t\treturn;", "-//\t\t}", "-//\t}", "+\tHashSet cycleParticipants = new HashSet(3);", "+\tjavaProject.updateCycleParticipants(null, new ArrayList(), cycleParticipants, workspaceRoot);", "+", "+\tIterator i= cycleParticipants.iterator();", "+\twhile (i.hasNext()) {", "+\t\tIJavaProject p = (IJavaProject) i.next();", "+\t\tif (p != javaProject && hasBeenBuilt(p.getProject())) {", "+\t\t\tif (DEBUG) ", "+\t\t\t\tSystem.out.println(\"Requesting another build iteration since cycle participant \" + p.getProject().getName() //$NON-NLS-1$", "+\t\t\t\t\t+ \" has not yet seen some structural changes\"); //$NON-NLS-1$", "+\t\t\tneedRebuild();", "+\t\t\treturn;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d131281fedb7ecb72eadc54532620377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "055380e1ecf4ba956a2ed12d0bd6afd30fa4bb0d", "commitAfterChange": "5633218f57a8f96a181a737ead7a991d28ce84d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+", "-\t\ttryInfo.addPotentialInitializationsFrom(insideSubContext.initsOnReturn);", "-\t\tfinallyContext.complainOnRedundantFinalAssignments(tryInfo, currentScope);", "+", "+\t\t// propagate inits to enclosing subroutines", "+\t\tUnconditionalFlowInfo initsBeforeReturn = insideSubContext.initsOnReturn.copy().unconditionalInits();", "+\t\tinitsBeforeReturn.addInitializationsFrom(subInfo);", "+\t\tFlowContext traversedContext = insideSubContext.parent;", "+\t\twhile (traversedContext != null) {", "+\t\t\tAstNode sub = traversedContext.subRoutine();", "+\t\t\tif (sub != null && sub.cannotReturn()) break;//TODO: should move below?", "+\t\t\ttraversedContext.initsOnReturn().addInitializationsFrom(initsBeforeReturn);", "+\t\t\ttraversedContext = traversedContext.parent;", "+\t\t}", "+", "+\t\tfinallyContext.complainOnRedundantFinalAssignments(", "+\t\t\ttryInfo.isReachable() ", "+\t\t\t\t? (tryInfo.addPotentialInitializationsFrom(insideSubContext.initsOnReturn))", "+\t\t\t\t: insideSubContext.initsOnReturn, ", "+\t\t\tcurrentScope);"]}], "num": 53896}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5b175323ac39990c40caa3a39c81bb9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "047710b3cb3715e96d243e370728b50a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "e998ae10322cb7f60a31fc6c5e4772816c1fbc92", "commitAfterChange": "f3aae3085ef4d874b17441c47725356fd2afe319", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "signatureAfterChange": "\r public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "diff": ["+\t\t\tcase IClasspathEntry.CPE_CONTAINER:\r", "+\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(entry.getPath(), this.getJavaProject());\r", "+\t\t\t\tif (container != null){\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\tfor (int j = 0; j < containerEntries.length; j++){\r", "+\t\t\t\t\t\tIClasspathEntry containerEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\tif (containerEntry != null && path.equals(containerEntry.getPath())) {\r", "+\t\t\t\t\t\t\treturn entry; // answer original entry\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6862d8c3fee3a2b2e2bf90e1ebe54cd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c16162b1194f3110eda140f5ccdd35c2ba36455d", "commitAfterChange": "8d1ff9b80d2587df4aa2d0a1ee1f5a75472a5feb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["+\t\t\t\t\r", "+\t\t\t\t// Request indexing of the library\r", "+\t\t\t\tif (changeKind == IClasspathEntry.CPE_LIBRARY) {\r", "+\t\t\t\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();\r", "+\t\t\t\t\tif (indexManager != null) {\r", "+\t\t\t\t\t\tboolean pathHasChanged = true;\r", "+\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();\r", "+\t\t\t\t\t\tfor (int j = 0; j < oldResolvedPath.length; j++) {\r", "+\t\t\t\t\t\t\tIClasspathEntry oldEntry = oldResolvedPath[j];\r", "+\t\t\t\t\t\t\tif (oldEntry.getPath().equals(newPath)) {\r", "+\t\t\t\t\t\t\t\tpathHasChanged = false;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (pathHasChanged) {\r", "+\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\t\r"]}], "num": 67151}
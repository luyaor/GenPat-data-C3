{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd66c858306516b2fc62e91e535fc8d1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d401a4e79c6f136204d02765f2e8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "4087231d30a4b358686cbbdca168b3172502840a", "commitAfterChange": "067ce26834c5540d672d2cb2c57759092eacbb7c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r public boolean hasStructuralChanges(byte[] newBytes)", "signatureAfterChange": "\r public boolean hasStructuralChanges(byte[] newBytes)", "diff": ["-\t\t\tint matchCounter = 0;\r", "-\t\t\t\tfor (int j = 0; j < newInterfacesLength; j++) {\r", "-\t\t\t\t\tif (CharOperation.equals(this.interfaceNames[i], newInterfacesNames[j])) {\r", "-\t\t\t\t\t\tmatchCounter++;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "+\t\t\t\tif (!CharOperation.equals(this.interfaceNames[i], newInterfacesNames[i])) {\r", "+\t\t\t\t\treturn true;\r", "-\t\t\t}\r", "-\t\t\tif (matchCounter != this.interfacesCount) {\r", "-\t\t\t\treturn true;\r", "-\t\tif (otherFieldInfos != null) {\r", "-\t\t\tArrays.sort(this.fields);\r", "-\t\t\tArrays.sort(otherFieldInfos);\r", "+\t\tif (otherFieldInfosLength != 0) {\r", "+//\t\t\tArrays.sort(this.fields);\r", "+//\t\t\tArrays.sort(otherFieldInfos);\r", "+\t\t\t\t\tif (!otherFieldInfo.hasConstant()) {\r", "+\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t}\r", "-\t\tif (otherMethodInfos != null) {\r", "-\t\t\tArrays.sort(this.methods);\r", "-\t\t\tArrays.sort(otherMethodInfos);\r", "+\t\tif (otherMethodInfosLength != 0) {\r", "+//\t\t\tArrays.sort(this.methods);\r", "+//\t\t\tArrays.sort(otherMethodInfos);\r", "-\t\t\t\t\tint matchCounter = 0;\r", "-\t\t\t\t\t\tfor (int j = 0; j < otherThrownExceptionsLength; j++) {\r", "-\t\t\t\t\t\t\tif (CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[j])) {\r", "-\t\t\t\t\t\t\t\tmatchCounter++;\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (!CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[k])) {\r", "+\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (matchCounter != currentThrownExceptionsLength) {\r", "-\t\t\t\t\t\treturn true;\r", "+\t\t// Member types\r", "+\t\tInnerClassInfo[] currentMemberTypes = (InnerClassInfo[]) this.getMemberTypes();\r", "+\t\tInnerClassInfo[] otherMemberTypes = (InnerClassInfo[]) newClassFile.getMemberTypes();\r", "+\t\tint currentMemberTypeLength = currentMemberTypes == null ? 0 : currentMemberTypes.length;\r", "+\t\tint otherMemberTypeLength = otherMemberTypes == null ? 0 : otherMemberTypes.length;\r", "+\t\tif (currentMemberTypeLength != otherMemberTypeLength) {\r", "+\t\t\treturn true;\r", "+\t\t}\r", "+\t\tif (currentMemberTypeLength != 0) {\r", "+\t\t\tfor (int i = 0; i < currentMemberTypeLength; i++) {\r", "+\t\t\t\tif (!CharOperation.equals(currentMemberTypes[i].getName(), otherMemberTypes[i].getName())\r", "+\t\t\t\t\t|| currentMemberTypes[i].getModifiers() != otherMemberTypes[i].getModifiers()) {\r", "+\t\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beddc3d5d7654a72a1f51f92fa214526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "commitAfterChange": "dedf5307e666f4e1475605b0b89aaf9292d38bf4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodInfo otherMethodInfo)", "signatureAfterChange": "\r private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodInfo otherMethodInfo)", "diff": ["-\tif (otherMethodInfo.getModifiers() != currentMethodInfo.getModifiers()) {\r", "+\tif (currentMethodInfo.getModifiers() != otherMethodInfo.getModifiers())\r", "-\t}\t\t\t\t\r", "-\tif (!CharOperation.equals(otherMethodInfo.getSelector(), currentMethodInfo.getSelector())) {\r", "+\tif (!CharOperation.equals(currentMethodInfo.getSelector(), otherMethodInfo.getSelector()))\r", "-\t}\r", "-\tif (!CharOperation.equals(otherMethodInfo.getMethodDescriptor(), currentMethodInfo.getMethodDescriptor())) {\r", "+\tif (!CharOperation.equals(currentMethodInfo.getMethodDescriptor(), otherMethodInfo.getMethodDescriptor()))\r", "-\t}\r", "-\tchar[][] otherThrownExceptions = otherMethodInfo.getExceptionTypeNames();\r", "-\tint otherThrownExceptionsLength = otherThrownExceptions == null ? 0 : otherThrownExceptions.length;\r", "+\r", "-\tint currentThrownExceptionsLength = currentThrownExceptions == null ? 0 : currentThrownExceptions.length;\r", "-\tif (currentThrownExceptionsLength != otherThrownExceptionsLength) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (currentThrownExceptionsLength != 0) {\r", "-\t\tfor (int k = 0; k < currentThrownExceptionsLength; k++) {\r", "-\t\t\tif (!CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[k])) {\r", "+\tchar[][] otherThrownExceptions = otherMethodInfo.getExceptionTypeNames();\r", "+\tif (currentThrownExceptions != otherThrownExceptions) { // TypeConstants.NoExceptions\r", "+\t\tint currentThrownExceptionsLength = currentThrownExceptions == null ? 0 : currentThrownExceptions.length;\r", "+\t\tint otherThrownExceptionsLength = otherThrownExceptions == null ? 0 : otherThrownExceptions.length;\r", "+\t\tif (currentThrownExceptionsLength != otherThrownExceptionsLength)\r", "+\t\t\treturn true;\r", "+\t\tfor (int k = 0; k < currentThrownExceptionsLength; k++)\r", "+\t\t\tif (!CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[k]))\r", "-\t\t\t}\r", "-\t\t}\r"]}], "num": 45161}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50544e814358adc024205a3e5e77f295", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3addc9f8478986d393c41453c0044772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "e49387dc67d37e060d459ec8bca371fa0bf2a443", "commitAfterChange": "dc892c0e1acc8f29aa208cac93db1f34ba940595", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static TypeBinding[] resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, TypeBinding[] substitutes, boolean considerEXTENDSConstraints, Map collectedSubstitutes)", "signatureAfterChange": " \t \tprivate static TypeBinding[] resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, TypeBinding[] substitutes, boolean considerEXTENDSConstraints, Map collectedSubstitutes)", "diff": ["-//\t\t\t\t\t\t\tif (equalSubstitute == current) continue nextConstraint;", "+\t\t\t\t\t\t\tif (equalSubstitute == current) {", "+\t\t\t\t\t\t\t\t// try to find a better different match if any in subsequent equal candidates", "+\t\t\t\t\t\t\t\tfor (int k = j+1; k < equalLength; k++) {", "+\t\t\t\t\t\t\t\t\tequalSubstitute = equalSubstitutes[k];", "+\t\t\t\t\t\t\t\t\tif (equalSubstitute != current && equalSubstitute != null) {", "+\t\t\t\t\t\t\t\t\t\tsubstitutes[i] = equalSubstitute;", "+\t\t\t\t\t\t\t\t\t\tcontinue nextTypeParameter;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tsubstitutes[i] = current;", "+\t\t\t\t\t\t\t\tcontinue nextTypeParameter;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff495e872f99c0c739dce1b83ea5bf9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-\t\t\t\tformatExtraDimensions(methodDeclaration.returnType);", "+\t\t\t\t/*", "+\t\t\t\t * Check for extra dimensions", "+\t\t\t\t */", "+\t\t\t\tint extraDimensions = getDimensions();", "+\t\t\t\tif (extraDimensions != 0) {", "+\t\t\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t\t }", "+\t\t\t\t}"]}], "num": 58310}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3764ea4cd392465bc674dbc2ec673ec3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cd0af3493e8cb4073831e8549b1b8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java", "commitBeforeChange": "1248181e23c81da45ee8e328a409b761a39e6e52", "commitAfterChange": "3df0b6d0a7c9e742ebbc5f2930d09070fa613a77", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic AssistOptions(Map settings)", "signatureAfterChange": " \tpublic AssistOptions(Map settings)", "diff": ["-\t\t\t} ", "+\t\t\t} else if(optionID.equals(OPTION_FieldPrefixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.fieldPrefixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.fieldPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_StaticFieldPrefixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.staticFieldPrefixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.staticFieldPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_LocalPrefixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.localPrefixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.localPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_ArgumentPrefixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.argumentPrefixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.argumentPrefixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_FieldSuffixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.fieldSuffixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.fieldSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_StaticFieldSuffixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.staticFieldSuffixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.staticFieldSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_LocalSuffixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.localSuffixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.localSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} else if(optionID.equals(OPTION_ArgumentSuffixes)){", "+\t\t\t\tif (optionValue.length() == 0) {", "+\t\t\t\t\tthis.argumentSuffixes = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.argumentSuffixes = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f119430c6b4297f0b900d56e9cfef8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "24134b187b46ea16212a45107324227f46ba3e4a", "commitAfterChange": "496121d0ad975842fb45544aac592b8195531ce7", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "diff": ["-\t\tprintIndentationIfNecessary();", "+\t\tint previousStart = currentTokenStartPosition;", "+\t\tboolean onFirstColumn = isOnFirstColumn(start);", "+", "+\t\tboolean indentComment = false;", "+\t\tif (this.indentationLevel != 0) {", "+\t\t\tif (isJavadoc", "+\t\t\t\t\t|| !this.formatter.preferences.never_indent_block_comments_on_first_column", "+\t\t\t\t\t|| !onFirstColumn) {", "+\t\t\t\tindentComment = true;", "+\t\t\t\tprintIndentationIfNecessary();", "+\t\t\t}", "+\t\t}", "-\t\tthis.needSpace = false;\t\t", "-\t\tthis.pendingSpace = false;\t\t", "-\t\tint previousStart = currentTokenStartPosition;", "+\t\tthis.needSpace = false;", "+\t\tthis.pendingSpace = false;", "+", "+\t\tint currentCommentOffset = onFirstColumn ? 0 : getCurrentCommentOffset(start);", "+\t\tboolean formatComment = (isJavadoc && formatJavadocComment) || (!isJavadoc && formatBlockComment);", "+\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "-\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "-\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "-\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "+\t\t\t\t\t\tisNewLine = false;", "+\t\t\t\t\t\t", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t", "+\t\t\t\t\t\tif (onFirstColumn) {", "+\t\t\t\t\t\t\t// simply insert indentation if necessary", "+\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentCharacter != '\\r' && currentCharacter != '\\n') {", "+\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\tloop: while(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tif (count >= currentCommentOffset) {", "+\t\t\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\tswitch(currentCharacter) {", "+\t\t\t\t\t\t\t\t\t\tcase '\\t' :", "+\t\t\t\t\t\t\t\t\t\t\tcount += this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\t\t\tcount ++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\t\t\tint previousStartTemp = previousStart;", "+\t\t\t\t\t\t\t\tint nextCharacterStartTemp = nextCharacterStart;", "+\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentCharacter == '*') {", "+\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tpreviousStart = previousStartTemp;", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = nextCharacterStartTemp;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.scanner.currentPosition = nextCharacterStart;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\tisNewLine = false;"]}], "num": 3077}
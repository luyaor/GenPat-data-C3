{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acdbfe643f548da0a086b22af60a2740", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "018a9b7e90318363753fbaee008bdc2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "e73037ff248454bfb7965c3990814d5ef5cb4620", "commitAfterChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\t\t\tcase K_OPERATOR :", "-//\t\t\t\tif(expressionPtr > 0) {", "-//\t\t\t\t\tExpression operatorExpression;", "-//\t\t\t\t\tswitch (info) {", "-//\t\t\t\t\t\tcase AND_AND :", "-//\t\t\t\t\t\t\toperatorExpression = new AND_AND_Expression(this.expressionStack[expressionPtr-1], expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase OR_OR :", "-//\t\t\t\t\t\t\toperatorExpression = new OR_OR_Expression(this.expressionStack[expressionPtr-1], expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase PLUS_PLUS :", "-//\t\t\t\t\t\tcase MINUS_MINUS :", "-//\t\t\t\t\t\t\toperatorExpression = new PrefixExpression(expression,IntLiteral.One,info, expression.sourceStart); ;", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase TWIDDLE:", "-//\t\t\t\t\t\tcase NOT:", "-//\t\t\t\t\t\t\toperatorExpression = new UnaryExpression(expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tcase PLUS:", "-//\t\t\t\t\t\tcase MINUS:", "-//\t\t\t\t\t\t\t", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\tdefault :", "-//\t\t\t\t\t\t\toperatorExpression = new BinaryExpression(this.expressionStack[expressionPtr-1], expression, info);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t}", "-//\t\t\t\t\tassistNodeParent = operatorExpression;", "-//\t\t\t\t}", "+\t\t\tcase K_UNARY_OPERATOR :", "+\t\t\t\tif(expressionPtr > -1) {", "+\t\t\t\t\tExpression operatorExpression = null;", "+\t\t\t\t\tswitch (info) {", "+\t\t\t\t\t\tcase PLUS_PLUS :", "+\t\t\t\t\t\t\toperatorExpression = new PrefixExpression(expression,IntLiteral.One, PLUS, expression.sourceStart);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase MINUS_MINUS :", "+\t\t\t\t\t\t\toperatorExpression = new PrefixExpression(expression,IntLiteral.One, MINUS, expression.sourceStart);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\toperatorExpression = new UnaryExpression(expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif(operatorExpression != null) {", "+\t\t\t\t\t\tassistNodeParent = operatorExpression;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak nextElement;", "+\t\t\tcase K_BINARY_OPERATOR :", "+\t\t\t\tif(expressionPtr > 0) {", "+\t\t\t\t\tExpression operatorExpression = null;", "+\t\t\t\t\tswitch (info) {", "+\t\t\t\t\t\tcase AND_AND :", "+\t\t\t\t\t\t\toperatorExpression = new AND_AND_Expression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase OR_OR :", "+\t\t\t\t\t\t\toperatorExpression = new OR_OR_Expression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase EQUAL_EQUAL :", "+\t\t\t\t\t\tcase NOT_EQUAL :", "+\t\t\t\t\t\t\toperatorExpression = new EqualExpression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase INSTANCEOF :", "+\t\t\t\t\t\t\t// should never occur", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\toperatorExpression = new BinaryExpression(this.expressionStack[expressionPtr-1], expression, info);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif(operatorExpression != null) {", "+\t\t\t\t\t\tassistNodeParent = operatorExpression;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f94ddcd20325ac0d11544fb9b3e80ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "9ecb7eaa028f8fe11c4e3235ef672652805b58ee", "commitAfterChange": "e58bb12ba99b825db26f7a9c342525f2ccde5c31", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\t\t\t\tif(expressionPtr > 0) {", "+\t\t\t\tif(expressionPtr > -1) {", "-\t\t\t\t\tswitch (info) {", "-\t\t\t\t\t\tcase AND_AND :", "-\t\t\t\t\t\t\toperatorExpression = new AND_AND_Expression(this.expressionStack[expressionPtr-1], expression, info);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase OR_OR :", "-\t\t\t\t\t\t\toperatorExpression = new OR_OR_Expression(this.expressionStack[expressionPtr-1], expression, info);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase EQUAL_EQUAL :", "-\t\t\t\t\t\tcase NOT_EQUAL :", "-\t\t\t\t\t\t\toperatorExpression = new EqualExpression(this.expressionStack[expressionPtr-1], expression, info);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase INSTANCEOF :", "-\t\t\t\t\t\t\t// should never occur", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\toperatorExpression = new BinaryExpression(this.expressionStack[expressionPtr-1], expression, info);", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tExpression left = null;", "+\t\t\t\t\tif(expressionPtr == 0) {", "+\t\t\t\t\t\t// it is  a ***_NotName rule", "+\t\t\t\t\t\tif(this.identifierPtr > -1) {", "+\t\t\t\t\t\t\tleft = getUnspecifiedReferenceOptimized();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tleft = this.expressionStack[expressionPtr-1];", "+\t\t\t\t\t\t// is it a ***_NotName rule ?", "+\t\t\t\t\t\tif(this.identifierPtr > -1) {", "+\t\t\t\t\t\t\tint start = (int) (identifierPositionStack[this.identifierPtr] >>> 32);", "+\t\t\t\t\t\t\tif(left.sourceStart < start) {", "+\t\t\t\t\t\t\t\tleft = getUnspecifiedReferenceOptimized();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tif(left != null) {", "+\t\t\t\t\t\tswitch (info) {", "+\t\t\t\t\t\t\tcase AND_AND :", "+\t\t\t\t\t\t\t\toperatorExpression = new AND_AND_Expression(left, expression, info);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase OR_OR :", "+\t\t\t\t\t\t\t\toperatorExpression = new OR_OR_Expression(left, expression, info);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase EQUAL_EQUAL :", "+\t\t\t\t\t\t\tcase NOT_EQUAL :", "+\t\t\t\t\t\t\t\toperatorExpression = new EqualExpression(left, expression, info);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase INSTANCEOF :", "+\t\t\t\t\t\t\t\t// should never occur", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\toperatorExpression = new BinaryExpression(left, expression, info);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}"]}], "num": 60029}
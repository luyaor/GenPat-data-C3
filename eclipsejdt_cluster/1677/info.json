{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c24bab5ae26f7ef2af13b271177646b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "552c99b08a9fe285b4cafc719436c1e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/AllPerformanceTests.java", "commitBeforeChange": "4d4e17b21e8cd2e718905d1f6af33dcc6796501f", "commitAfterChange": "a6a5866450241565c9a2db7e59a81c5e9f3105c8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["+\t}", "-\t\tPerformanceTestSuite suite = new PerformanceTestSuite(AllPerformanceTests.class.getName());", "-\t\tsuite.addTestSuite(FullSourceWorkspaceTests.class);", "-\t\tsuite.addTestSuite(BuildBatchCompilerTest.class);", "-\t\tsuite.addTestSuite(NameLookupTests2.class);", "-\t\treturn suite;", "+\t\tPerformanceTestSuite perfSuite = new PerformanceTestSuite(AllPerformanceTests.class.getName());", "+\t\tClass[] testSuites = getAllTestClasses();", "+\t\tint length = testSuites.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tClass testClass = testSuites[i];", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(", "+\t\t\t\t\t\t\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test) suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tperfSuite.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn perfSuite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5807769e93ed2436f993916ee06d4d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "424b9c711eb8f066b325841662effb171f3ae4ef", "commitAfterChange": "4d19416746402b8fbbfd02c13772658da70a345a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 67, "signatureBeforeChange": "\r \tpublic IPackageFragment[] getAllPackageFragments() throws JavaModelException", "signatureAfterChange": "\r \tpublic void updatePackageFragmentRoots()", "diff": ["-\t */\r", "-\tpublic IPackageFragment[] getAllPackageFragments() throws JavaModelException {\r", "-\r", "-\t\tIPackageFragmentRoot[] roots = getAllPackageFragmentRoots();\r", "-\t\treturn getPackageFragmentsInRoots(roots);\r", "+\t */\r", "+\tpublic void updatePackageFragmentRoots(){\r", "+\t\t\r", "+\t\t\tif (this.isOpen()) {\r", "+\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIPackageFragmentRoot[] oldRoots = getPackageFragmentRoots();\r", "+\t\t\t\t\tIPackageFragmentRoot[] newRoots = computePackageFragmentRoots(false);\r", "+\t\t\t\t\tcheckIdentical: {\r", "+\t\t\t\t\t\tif (oldRoots.length == newRoots.length){\r", "+\t\t\t\t\t\t\tfor (int i = 0, length = oldRoots.length; i < length; i++){\r", "+\t\t\t\t\t\t\t\tif (!oldRoots[i].equals(newRoots[i])){\r", "+\t\t\t\t\t\t\t\t\tbreak checkIdentical;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\treturn; // no need to update\r", "+\t\t\t\t\t\t}\t\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tJavaProjectElementInfo info = getJavaProjectElementInfo();\r", "+\t\t\t\t\tinfo.setChildren(\r", "+\t\t\t\t\t\tcomputePackageFragmentRoots(false));\t\t\r", "+\t\t\t\t\tinfo.setNameLookup(null); // discard name lookup (hold onto roots)\r", "+\t\t\t\t\tinfo.setNonJavaResources(null);\r", "+\t\t\t\t} catch(JavaModelException e){\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tclose(); // could not do better\r", "+\t\t\t\t\t} catch(JavaModelException ex){\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t}\r"]}], "num": 1677}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de6395a992627612a46241c847fb3bb7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3459aeb2162013c48a27290d74633a29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f947d5592358b89c12d575b3786b2a35e36a4031", "commitAfterChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tboolean warnOptionInUse = false;", "-\t\tboolean noWarnOptionInUse = false;", "-\t\t\t\tif (pathCount > 0)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateClasspath\", currentArg)); //$NON-NLS-1$", "-\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\tif (pathCount == 0) {", "+\t\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\t}", "-\t\t\t\twarnOptionInUse = true;", "-\t\t\t\tif (noWarnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\t\t\t\t", "-\t\t\t\t\t\t\t//$NON-NLS-1$", "-\t\t\t\tnoWarnOptionInUse = true;", "-\t\t\t\tnoWarn = true;", "-\t\t\t\tif (warnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$", "+\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\twarnOptionInUse = true;", "-\t\t\t\tif (noWarnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$", "-\t\t\t\t\tnoWarn = true;", "+\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (didSpecifyCompliance && options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\tif (noWarn) {", "-\t\t\t// filter options which are related to the assist component", "-\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92cedd50a9a7547498894090f85b61ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "00dc28bfbd5543ecda292c71af53f42c5ae58dee", "commitAfterChange": "d3244b9b1f07dec23fc8a11bdb05cd710c7b96c6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "-\t\t\t\t// reset all warnings", "-\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put( ", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "+\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "+\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "+\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\"\"); //$NON-NLS-1$", "+"]}], "num": 58104}
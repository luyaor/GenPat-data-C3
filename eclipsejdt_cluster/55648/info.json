{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6527c9798aa362b976ff574d15422a1a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eec08096995d77e08315197297d50ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bdd661ede446c1c3bdc76fd684c8f024821af3ac", "commitAfterChange": "0db27b507a6968d4fb2f769e63fcd5182f023962", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\t\tIClassFile[] classFiles= null;", "-\t\t\ttry {", "-\t\t\t\tclassFiles= pkg.getClassFiles();", "-\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\treturn; // the package is not present", "-\t\t\t}", "-\t\t\tint length= classFiles.length;", "-\t\t\t\tfor (int i= 0; i < length; i++) {", "-\t\t\t\t\tif (requestor.isCanceled()) return;", "-\t\t\t\t\tClassFile classFile= (ClassFile) classFiles[i];", "-\t\t\t\t\tif (name.equals(classFile.name)) { // ClassFile#name contains the name of the .class file without the .class extension", "-\t\t\t\t\t\tIType type = classFile.getType();", "-\t\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "-\t\t\t\t\t\t\trequestor.acceptType(type);", "-\t\t\t\t\t\t\tbreak;  // since an exact match was requested, no other matching type can exist", "-\t\t\t\t\t\t}", "+\t\t\t\tif (requestor.isCanceled()) return;", "+\t\t\t\tClassFile classFile =  new ClassFile((PackageFragment) pkg, name);", "+\t\t\t\tif (classFile.existsUsingJarTypeCache()) {", "+\t\t\t\t\tIType type = classFile.getType();", "+\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "+\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\t\tIClassFile[] classFiles= null;", "+\t\t\t\ttry {", "+\t\t\t\t\tclassFiles= pkg.getClassFiles();", "+\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\treturn; // the package is not present", "+\t\t\t\t}", "+\t\t\t\tint length= classFiles.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f56877bb6d598cd5dfb12cec3bd32383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "e8e4696c6b4df6d1a8d3d92e6556bb62baf2641a", "commitAfterChange": "4d3c57a6d316c63afbedae8dcbdb1593f599b949", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public String getJdkLevel()", "signatureAfterChange": " public String getJdkLevel()", "diff": ["-\t\t\t\t} else if (hasChildren()) { // TODO: (olivier) should not populate the model, but rather walk the filesystem/resources directly", "-\t\t\t\t\tIJavaElement[] javaElements = getChildren();", "-\t\t\t\t\tfor (int i = 0, max = javaElements.length; i < max; i++) {", "-\t\t\t\t\t\tIPackageFragment fragment = (IPackageFragment) javaElements[i];", "-\t\t\t\t\t\tif (fragment.hasChildren()) {", "-\t\t\t\t\t\t\tIClassFile classFile = fragment.getClassFiles()[0];", "-\t\t\t\t\t\t\tIFile file = (IFile) classFile.getUnderlyingResource();", "-\t\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(file);", "-\t\t\t\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tIResource resource = getResource();", "+\t\t\t\t\tIFile classFile = null;", "+\t\t\t\t\tif (resource.getType() == IResource.FOLDER) {", "+\t\t\t\t\t\tclassFile = searchClassFile((IFolder) resource);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (classFile != null) {", "+\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(classFile);", "+\t\t\t\t\t\tIPath location = classFile.getLocation();", "+\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());"]}], "num": 55648}
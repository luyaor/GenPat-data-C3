{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "064f793e7c0eb6413329df8ebb0f51a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e5848f4aea5375a4c09fa8ba9c941b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "625da6d5291673f01e323396ceb1f6773e9845a5", "commitAfterChange": "9286ce5f956aa28fecddfe609c2ffd5cc46ab296", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic int lineNumber(int position)", "signatureAfterChange": " \tpublic int lineNumber(int position)", "diff": ["-\t\tif (this.lineEndTable == null) return 1;", "+\t\tint lineNumber = getLineNumber(position);", "+\t\treturn lineNumber < 1 ? 1 : lineNumber;", "+\t}", "-\t\t\treturn 1;", "-\t\t\t// position illegal or before the first line delimiter", "-\t\t\t\treturn 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be012b7839a484cc9a68077077a2eff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "c6d4125101bf5167c8111f17bf85f3fddd64ca03", "commitAfterChange": "42809a61ef9e5b72c9cffca62cbb33391fa05b96", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void toStringName(StringBuffer buffer)", "signatureAfterChange": " protected void toStringName(StringBuffer buffer)", "diff": ["+\ttoStringName(buffer, 0);", "+}", "-\tString[] parameters = this.getParameterTypes();", "-\t\t\tbuffer.append(Signature.toString(parameters[i]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8d587c7e61df3ba986438583c22b96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "499d13445e468af0eb0f6625a9a769990fa7cf93", "commitAfterChange": "428bb779d9722a43cd209f916fbe8807c533a61b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate boolean useSpaceBetweenGroups()", "signatureAfterChange": " \tprivate boolean useSpaceBetweenGroups()", "diff": ["-\t\ttry {", "-\t\t\tString sample= \"import a.A;\\n\\n import b.B;\\nclass C {}\"; //$NON-NLS-1$", "-\t\t\tTextEdit res= ToolFactory.createCodeFormatter(this.compilationUnit.getJavaProject().getOptions(true)).format(CodeFormatter.K_COMPILATION_UNIT, sample, 0, sample.length(), 0, String.valueOf('\\n'));", "-\t\t\tDocument doc= new Document(sample);", "-\t\t\tres.apply(doc);", "-\t\t\tint idx1= doc.search(0, \"import\", true, true, false); //$NON-NLS-1$", "-\t\t\tint line1= doc.getLineOfOffset(idx1);", "-\t\t\tint idx2= doc.search(idx1 + 1, \"import\", true, true, false); //$NON-NLS-1$", "-\t\t\tint line2= doc.getLineOfOffset(idx2);", "-\t\t\treturn line2 - line1 > 1; ", "-\t\t} catch (BadLocationException e) {", "-\t\t\t// should not happen ", "-\t\t}", "-\t\treturn true;", "+\t\tString option= this.compilationUnit.getJavaProject().getOption(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE, true);", "+\t\treturn Integer.valueOf(option).intValue() > 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e474d0799e6953793f72a90ce843728c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void updatePackageFragmentRoots()", "signatureAfterChange": " \tpublic void updatePackageFragmentRoots()", "diff": ["-", "-\t\t\t\t\tIClasspathEntry[] classpath = getResolvedClasspath(true);", "-\t\t\t\t\tNameLookup lookup = info.getNameLookup();", "-\t\t\t\t\tif (lookup != null){", "-\t\t\t\t\t\tIPackageFragmentRoot[] oldRoots = lookup.fPackageFragmentRoots;", "-\t\t\t\t\t\tIPackageFragmentRoot[] newRoots = computePackageFragmentRoots(classpath, true);", "-\t\t\t\t\t\tcheckIdentical: { // compare all pkg fragment root lists", "-\t\t\t\t\t\t\tif (oldRoots.length == newRoots.length){", "-\t\t\t\t\t\t\t\tfor (int i = 0, length = oldRoots.length; i < length; i++){", "-\t\t\t\t\t\t\t\t\tif (!oldRoots[i].equals(newRoots[i])){", "-\t\t\t\t\t\t\t\t\t\tbreak checkIdentical;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn; // no need to update", "-\t\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinfo.setNameLookup(null); // discard name lookup (hold onto roots)", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tinfo.setNonJavaResources(null);", "-\t\t\t\t\tinfo.setChildren(", "-\t\t\t\t\t\tcomputePackageFragmentRoots(classpath, false));\t\t", "-", "+\t\t\t\t\tcomputeChildren(info);"]}], "num": 45684}
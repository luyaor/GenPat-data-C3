{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50dbd9ffb8127b40a6a1a05ddc297663", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3652a577fd4058568e67948c9fa5eea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tFlowInfo rightInfo = leftInfo.initsWhenTrue().unconditionalInits().copy();", "+\t\tFlowInfo rightInfo = leftInfo.initsWhenTrue().unconditionalCopy();", "-\t\tFlowInfo trueMergedInfo = rightInfo.initsWhenTrue().copy();", "-\t\trightInfo.setReachMode(previousMode); // reset after trueMergedInfo got extracted", "-\t\t\t\ttrueMergedInfo, ", "-\t\t\t\tleftInfo.initsWhenFalse().copy().unconditionalInits().mergedWith(", "-\t\t\t\t\t\trightInfo.initsWhenFalse().copy().unconditionalInits()));", "+\t\t\t\trightInfo.safeInitsWhenTrue(), ", "+\t\t\t\tleftInfo.initsWhenFalse().unconditionalInits().mergedWith(", "+\t\t\t\t\t\trightInfo.initsWhenFalse().setReachMode(previousMode).unconditionalInits()));", "+\t\t// reset after trueMergedInfo got extracted"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8682763ff3014f3fb48fda2a13edae08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "97b330eb505dfca0980041926ec66a0261a5be5c", "commitAfterChange": "d3580136581144eb64c8a6ff7ec886b58a1ec764", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void testNonExistingCU() throws JavaModelException", "signatureAfterChange": " public void testNonExistingCU() throws JavaModelException", "diff": ["-\tIWorkingCopy workingCopy = null;", "+\tICompilationUnit workingCopy = null;", "-\t\tworkingCopy = (IWorkingCopy)nonExistingCU.getWorkingCopy();", "+\t\tworkingCopy = nonExistingCU.getWorkingCopy(null);", "-\t\t// getOriginalElement()", "-\t\tassertEquals(\"Unexpected orginal element\", nonExistingCU, workingCopy.getOriginalElement());", "+\t\t// getPrimaryElement()", "+\t\tassertEquals(\"Unexpected orginal element\", nonExistingCU, workingCopy.getPrimaryElement());", "-\t\tassertTrue(\"Should not be able to restore from original element\", exception);", "+\t\tassertTrue(\"Should not be able to restore from primary element\", exception);", "-\t\tassertTrue(\"Original cu should not exist\", !nonExistingCU.exists());", "+\t\tassertTrue(\"Primary cu should not exist\", !nonExistingCU.exists());", "-\t\t// commit()", "-\t\tworkingCopy.commit(false, null);", "-\t\tassertTrue(\"Original cu should exist\", nonExistingCU.exists());", "+\t\t// commitWorkingCopy()", "+\t\tworkingCopy.commitWorkingCopy(false, null);", "+\t\tassertTrue(\"Primary cu should exist\", nonExistingCU.exists());", "-\t\t// isBasedOn()", "-\t\tassertTrue(\"Working copy should now be based on original resource\", workingCopy.isBasedOn(nonExistingCU.getResource()));", "+\t\t// hasResourceChanged()", "+\t\tassertTrue(\"Working copy's resource should now not mark as changed\", !workingCopy.hasResourceChanged());", "-\t\t\tworkingCopy.destroy();", "+\t\t\tworkingCopy.discardWorkingCopy();"]}], "num": 45728}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "695fb68546fa5771462e8ad272f18652", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5fe475e43beecd3c878de77e552b76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "diff": ["+\tint severity = ProblemSeverities.Error;", "+\tif (this.environment.globalOptions.complianceLevel == ClassFileConstants.JDK1_6) {", "+\t\t// for 1.6 return types also need to be checked", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=317719", "+\t\tif (current.returnType.erasure() != original.returnType.erasure())", "+\t\t\tseverity = ProblemSeverities.Warning;", "+\t}", "-\tproblemReporter(current).methodNameClash(current, inherited.declaringClass.isRawType() ? inherited : original);", "+\tproblemReporter(current).methodNameClash(current, inherited.declaringClass.isRawType() ? inherited : original, severity);", "+\tif (severity == ProblemSeverities.Warning) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fc1eaf90a2492efca8d5112aff38a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "701b9f3a2a6ad66de33a42c0675cad82bdb44626", "commitAfterChange": "ed32ce010cb6b771c8064ab8d69b715c1bc9347a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["-\t\tif (typeParameters == null || compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) return true;", "+\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259 - We used to not bother with connecting", "+\t\t   type variables if source level is < 1.5. This creates problems in the reconciler if a 1.4", "+\t\t   project references the generified API of a 1.5 project. The \"current\" project's source", "+\t\t   level cannot decide this question for some other project. Now, if we see type parameters", "+\t\t   at all, we assume that the concerned java element has some legitimate business with them.", "+\t\t */", "+\t\tif (typeParameters == null || typeParameters.length == 0) return true;"]}], "num": 2614}
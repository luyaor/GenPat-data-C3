{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd713500edc6c17b6dc174c4c491f0f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729991824f0ee9842f16ae6fc5844c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "30210dace16fbfb20e6910ce9f1394f40ee548a8", "commitAfterChange": "5a6c51c6c96c32c434285845bfd71f9a0c6d8df5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic static Hashtable getOptions()", "signatureAfterChange": " \tpublic static Hashtable getOptions()", "diff": ["-\t\t\t// get preferences set to their default", "-\t\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\t// initialize preferences to their default", "+\t\t\tIterator iterator = optionNames.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t    String propertyName = (String) iterator.next();", "+\t\t\t    options.put(propertyName, preferences.getDefaultString(propertyName));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddffbd3da1273d6808f5d8ab7e347b32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "30210dace16fbfb20e6910ce9f1394f40ee548a8", "commitAfterChange": "5a6c51c6c96c32c434285845bfd71f9a0c6d8df5", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic static Hashtable getDefaultOptions()", "signatureAfterChange": "  \tpublic static Hashtable getDefaultOptions()", "diff": ["-\t\t// get preferences set to their default", "-\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\tif (optionNames.contains(propertyName)) {", "-\t\t\t\tdefaultOptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t}\t\t", "-\t\t// get preferences not set to their default", "-\t\tString[] propertyNames = preferences.propertyNames();", "-\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\tString propertyName = propertyNames[i];", "-\t\t\tif (optionNames.contains(propertyName)) {", "-\t\t\t\tdefaultOptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t}\t\t", "+\t\t// initialize preferences to their default", "+\t\tIterator iterator = optionNames.iterator();", "+\t\twhile (iterator.hasNext()) {", "+\t\t    String propertyName = (String) iterator.next();", "+\t\t    defaultOptions.put(propertyName, preferences.getDefaultString(propertyName));", "+\t\t}"]}], "num": 36853}
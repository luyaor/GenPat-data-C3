{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f000225bd057aa7ca945fc71c4f2a3d3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21a51efe068590310b109521a52afa75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final boolean areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-", "-\tpublic final boolean areTypesCastCompatible(", "+\t */", "+\tpublic final boolean checkCastTypesCompatibility(", "-", "-\t\t//\tsee specifications p.68", "-\t\t//A more cpmplete version of this method is provided on", "+\t", "+\t\t//A more complete version of this method is provided on", "-\t\tif (castType == expressionType) return true;", "+\t\tif (castType == expressionType) return false;", "-\t\t//by grammatical construction, the first test is ALWAYS false", "-\t\t//if (castTb.isBaseType())", "-\t\t//{\tif (expressionTb.isBaseType())", "-\t\t//\t{\tif (expression.isConstantValueOfTypeAssignableToType(expressionTb,castTb))", "-\t\t//\t\t{\treturn true;}", "-\t\t//\t\telse", "-\t\t//\t\t{\tif (expressionTb==castTb)", "-\t\t//\t\t\t{\treturn true;}", "-\t\t//\t\t\telse ", "-\t\t//\t\t\t{\tif (scope.areTypesCompatible(expressionTb,castTb))", "-\t\t//\t\t\t\t{\treturn true; }", "-\t\t//\t\t\t\t", "-\t\t//\t\t\t\tif (BaseTypeBinding.isNarrowing(castTb.id,expressionTb.id))", "-\t\t//\t\t\t\t{\treturn true;}", "-\t\t//\t\t\t\treturn false;}}}", "-\t\t//\telse", "-\t\t//\t{\treturn false; }}", "-\t\t//else", "-\t\t{ //-------------checkcast to something which is NOT a basetype----------------------------------\t", "+\t\t//by grammatical construction, the base type check is not necessary", "-\t\t\t//null is compatible with every thing .... ", "-\t\t\tif (NullBinding == expressionType) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (expressionType.isArrayType()) {", "-\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\t//------- (castTb.isArray) expressionTb.isArray -----------", "-\t\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionType).elementsType(scope);", "-\t\t\t\t\tif (expressionEltTb.isBaseType())", "-\t\t\t\t\t\t// <---stop the recursion------- ", "-\t\t\t\t\t\treturn ((ArrayBinding) castType).elementsType(scope) == expressionEltTb;", "-\t\t\t\t\t//recursivly on the elts...", "-\t\t\t\t\treturn areTypesCastCompatible(", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "-\t\t\t\t\t\texpressionEltTb);", "-\t\t\t\t}", "-\t\t\t\tif (castType.isClass()) {", "-\t\t\t\t\t//------(castTb.isClass) expressionTb.isArray ---------------\t", "-\t\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\t//------- (castTb.isInterface) expressionTb.isArray -----------", "-\t\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (expressionType.isBaseType()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (expressionType.isClass()) {", "-\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\t// ---- (castTb.isArray) expressionTb.isClass -------", "-\t\t\t\t\tif (scope.isJavaLangObject(expressionType)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (castType.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------ ", "-\t\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\telse {", "-\t\t\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\t// ----- (castTb.isInterface) expressionTb.isClass -------  ", "-\t\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t\t//no subclass for expressionTb, thus compile-time check is valid", "-\t\t\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (expressionType.isInterface()) {", "-\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\t// ----- (castTb.isArray) expressionTb.isInterface ------", "-\t\t\t\t\tif (scope.isJavaLangCloneable(expressionType)", "-\t\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType))", "-\t\t\t\t\t\t//potential runtime error", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isClass()) {", "-\t\t\t\t\t// ----- (castTb.isClass) expressionTb.isInterface --------", "-\t\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t\t\t//no subclass for castTb, thus compile-time check is valid", "-\t\t\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\t// ----- (castTb.isInterface) expressionTb.isInterface -------", "-\t\t\t\t\tif ((Scope.compareTypes(castType, expressionType) == NotRelated)) {", "-\t\t\t\t\t\tMethodBinding[] castTbMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\t\t\tint castTbMethodsLength = castTbMethods.length;", "-\t\t\t\t\t\tMethodBinding[] expressionTbMethods =", "-\t\t\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "-\t\t\t\t\t\tint expressionTbMethodsLength = expressionTbMethods.length;", "-\t\t\t\t\t\tfor (int i = 0; i < castTbMethodsLength; i++) {", "-\t\t\t\t\t\t\tfor (int j = 0; j < expressionTbMethodsLength; j++) {", "-\t\t\t\t\t\t\t\tif (castTbMethods[i].selector == expressionTbMethods[j].selector) {", "-\t\t\t\t\t\t\t\t\tif (castTbMethods[i].returnType != expressionTbMethods[j].returnType) {", "-\t\t\t\t\t\t\t\t\t\tif (castTbMethods[i].areParametersEqual(expressionTbMethods[j])) {", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-", "-\t\t\t\treturn false;", "-\t\t\t} ", "-", "-\t\t\treturn false;", "+\t\tif (castType == null || expressionType == null) return true;", "+\t", "+\t\t//-----------cast to something which is NOT a base type--------------------------\t", "+\t\tif (expressionType == NullBinding) {", "+\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "+\t\t\t//\t\tneedRuntimeCheckcast = true;", "+\t\t\t//\t}", "+\t\t\treturn false; //null is compatible with every thing", "+\t\tif (expressionType.isBaseType()) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t", "+\t\tif (expressionType.isArrayType()) {", "+\t\t\tif (castType == expressionType) return false; // identity conversion", "+\t", "+\t\t\tif (castType.isArrayType()) {", "+\t\t\t\t//------- (castType.isArray) expressionType.isArray -----------", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tif (exprElementType.isBaseType()) {", "+\t\t\t\t\t// <---stop the recursion------- ", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) != exprElementType)", "+\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\t// recursively on the elements...", "+\t\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\t\tscope,", "+\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "+\t\t\t\t\texprElementType);", "+\t\t\t} else if (", "+\t\t\t\tcastType.isClass()) {", "+\t\t\t\t//------(castType.isClass) expressionType.isArray ---------------\t", "+\t\t\t\tif (scope.isJavaLangObject(castType)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} else { //------- (castType.isInterface) expressionType.isArray -----------", "+\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t", "+\t\tif (expressionType.isClass()) {", "+\t\t\tif (castType.isArrayType()) {", "+\t\t\t\t// ---- (castType.isArray) expressionType.isClass -------", "+\t\t\t\tif (scope.isJavaLangObject(expressionType)) { // potential runtime error", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "+\t\t\t\t\t// potential runtime  error", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else { // ----- (castType.isInterface) expressionType.isClass -------  ", "+\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "+\t\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "+\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} else { // a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t", "+\t\t//\tif (expressionType.isInterface()) { cannot be anything else", "+\t\tif (castType.isArrayType()) {", "+\t\t\t// ----- (castType.isArray) expressionType.isInterface ------", "+\t\t\tif (!(scope.isJavaLangCloneable(expressionType)", "+\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType))) {// potential runtime error", "+\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "+\t\t\tif (scope.isJavaLangObject(castType)) { // no runtime error", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "+\t\t\t\t// no subclass for castType, thus compile-time check is valid", "+\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "+\t\t\t\t\t// potential runtime error", "+\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else { // ----- (castType.isInterface) expressionType.isInterface -------", "+\t\t\tif (castType == expressionType) { ", "+\t\t\t\treturn false; // identity conversion", "+\t\t\t}", "+\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "+\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "+\t\t\t\tMethodBinding[] expressionTypeMethods =", "+\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "+\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d31ba19169c0f6b84d2d042849cd1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t */", "-\tpublic final boolean checkCastTypesCompatibility(", "-\t\tBlockScope scope,", "-\t\tTypeBinding castType,", "-\t\tTypeBinding expressionType) {", "-\t", "-\t\t// see specifications 5.5", "-\t\t// handle errors and process constant when needed", "-\t", "-\t\t// if either one of the type is null ==>", "-\t\t// some error has been already reported some where ==>", "-\t\t// we then do not report an obvious-cascade-error.", "-\t", "-\t\tif (castType == null || expressionType == null) return true;", "-\t", "-\t\t// identity conversion cannot be performed upfront, due to side-effects", "-\t\t// like constant propagation", "-\t\t\t\t", "-\t\tif (castType.isBaseType()) {", "-\t\t\tif (expressionType.isBaseType()) {", "-\t\t\t\tif (expressionType == castType) {", "-\t\t\t\t\tconstant = expression.constant; //use the same constant", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tboolean necessary = false;", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)", "-\t\t\t\t\t\t|| (necessary = BaseTypeBinding.isNarrowing(castType.id, expressionType.id))) {", "-\t\t\t\t\texpression.implicitConversion = (castType.id << 4) + expressionType.id;", "-\t\t\t\t\tif (expression.constant != Constant.NotAConstant) {", "-\t\t\t\t\t\tconstant = expression.constant.castTo(expression.implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn necessary;", "-\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//-----------cast to something which is NOT a base type--------------------------\t", "-\t\tif (expressionType == NullBinding) {", "-\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "-\t\t\t//\t\tneedRuntimeCheckcast = true;", "-\t\t\t//\t}", "-\t\t\treturn false; //null is compatible with every thing", "-\t\t}", "-\t\tif (expressionType.isBaseType()) {", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isArrayType()) {", "-\t\t\tif (castType == expressionType) return false; // identity conversion", "-\t", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t//------- (castType.isArray) expressionType.isArray -----------", "-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\t// <---stop the recursion------- ", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType() == exprElementType) {", "-\t\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\t// recursively on the elements...", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType);", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) {", "-\t\t\t\t//------(castType.isClass) expressionType.isArray ---------------\t", "-\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t} else { //------- (castType.isInterface) expressionType.isArray -----------", "-\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isClass()) {", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t// ---- (castType.isArray) expressionType.isClass -------", "-\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\t\tif (castType.id == T_String) constant = expression.constant; // (String) cst is still a constant", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime  error", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else { // ----- (castType.isInterface) expressionType.isClass -------  ", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)) {", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;\t\t\t\t    ", "-\t\t\t\t}", "-\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//\tif (expressionType.isInterface()) { cannot be anything else", "-\t\tif (castType.isArrayType()) {", "-\t\t\t// ----- (castType.isArray) expressionType.isInterface ------", "-\t\t\tif (expressionType.id == T_JavaLangCloneable", "-\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable) {// potential runtime error", "-\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t// no subclass for castType, thus compile-time check is valid", "-\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime error", "-\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else { // ----- (castType.isInterface) expressionType.isInterface -------", "-\t\t\tif (expressionType.isCompatibleWith(castType)) {", "-\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "-\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "-\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "-\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\treturn true;", "+\t", "+\tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing) {", "+\t\tif (match == castType) {", "+\t\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (castType.isBoundParameterizedType() || castType.isGenericType()) {", "+\t\t\tif (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType)) {", "+\t\t\t\treportIllegalCast(scope, castType, expressionType);", "+\t\t\t\treturn false; ", "+\t\t\t}", "+\t\t\tif (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType)) {", "+\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif ((castType.tagBits & TagBits.HasWildcard) == 0) {", "+\t\t\t\tif ((!match.isParameterizedType() && !match.isGenericType())", "+\t\t\t\t\t\t|| expressionType.isRawType()) {", "+\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\treturn true;", "+\t}\t"]}], "num": 72004}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e912bd0bcfc8820147a6789daf3a35d4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d62e5cf7430a1c4333c8aa66ae41a16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\t\t\tif (oneParam == one.original().parameters[i]", "-\t\t\t\t\t\t\t\t&&  twoParam.leafComponentType().erasure() != two.original().parameters[i].leafComponentType().erasure()) {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "+\t\t\t\t\t\tif ((originalOneParam.isTypeVariable() ? ((TypeVariableBinding) originalOneParam).upperBound()", "+\t\t\t\t\t\t\t\t: originalOneParam).isRawType())", "+\t\t\t\t\t\t\tif (twoParam.leafComponentType().erasure() != two.original().parameters[i]", "+\t\t\t\t\t\t\t\t\t.leafComponentType().erasure())", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "-\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(two.declaringClass.isRawType() ? twoParam : two.original().parameters[i]))", "-\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "+\t\t\t\t\t\t\tif (oneParam.leafComponentType().erasure() != twoParam.leafComponentType().erasure())", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is", "+\t\t\t\t\t\t\t\t\t\t\t// Object[]", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or", "+\t\t\t\t// (Integer, int...)", "-\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "-\t\t\t\t\treturn true;", "+\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d093ca43c3b1a95a55949ca6a87361c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "6eb04387ef3ee5335f206eb99b3c936de2847d3d", "commitAfterChange": "b01f0952648a27a3dbc985907cc5ced8ba10ed91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void endVisit(VariableDeclarationStatement node)", "signatureAfterChange": " \t \tpublic void endVisit(ForStatement node)", "diff": ["+\tpublic void endVisit(ForStatement node) {", "+\t\tendVisitNode(node);", "+\t\tList initializers = node.initializers();", "+\t\tif (initializers.size() == 1) {", "+\t\t\tExpression expression = (Expression) initializers.get(0);", "+\t\t\tif (expression.getNodeType() == ASTNode.VARIABLE_DECLARATION_EXPRESSION) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression) expression;", "+\t\t\t\tList fragments = variableDeclarationExpression.fragments();", "+\t\t\t\tfor (int i = 0, max = fragments.size(); i <max; i++) {", "+\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(i);", "+\t\t\t\t\tSimpleName simpleName = fragment.getName();", "+\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "+\t\t\t\t\t\tfragments.remove(fragment);", "+\t\t\t\t\t\tvariableDeclarationExpression.setFlags(variableDeclarationExpression.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\t\t\t\tfragment.setFlags(node.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t}\t\t\t"]}], "num": 6257}
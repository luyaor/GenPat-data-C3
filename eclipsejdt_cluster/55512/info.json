{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad222b5f1c980e9fc796c277d63e189d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc65f680a22655d44075f15a81a6712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      \tReferenceBinding resolve()", "signatureAfterChange": "      \tReferenceBinding resolve()", "diff": ["-\t\tBinaryTypeBinding.resolveType(this.genericType, this.environment, null, 0);", "+\t\tBinaryTypeBinding.resolveType(this.genericType, this.environment, null, 0); // do not assign to genericType field, since will return a raw type", "+\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tthis.otherBounds[i]= BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t        \t}", "+\t\t\t\tbreak;", "-\t\t\t\tBinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);", "+\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, null, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aae13fe2fe359df8e59326eab55cc6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tASTNode invocationSite, \t\tboolean wasAlreadyDefinitelyCaught)", "signatureAfterChange": "  public void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tTypeBinding caughtException, \t\tASTNode invocationSite, \t\tboolean wasAlreadyDefinitelyCaught)", "diff": ["+\t\tTypeBinding caughtException,", "-", "-\tthis.initsOnExceptions[index] =", "-\t\t(this.initsOnExceptions[index].tagBits & FlowInfo.UNREACHABLE) == 0 ?", "-\t\t\tthis.initsOnExceptions[index].mergedWith(flowInfo):", "+\tint catchBlock = this.exceptionToCatchBlockMap != null? this.exceptionToCatchBlockMap[index] : index;", "+\tif (caughtException != null && this.catchArguments != null && this.catchArguments.length > 0 && !wasAlreadyDefinitelyCaught) {", "+\t\tCatchParameterBinding catchParameter = (CatchParameterBinding) this.catchArguments[catchBlock].binding;", "+\t\tcatchParameter.setPreciseType(caughtException);", "+\t}", "+\tthis.initsOnExceptions[catchBlock] =", "+\t\t(this.initsOnExceptions[catchBlock].tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\tthis.initsOnExceptions[catchBlock].mergedWith(flowInfo):"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9b01c12dd7d07a08d4954963e6f6557", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "ca0a8d2a8dcbdca4c1d22b2aafd247d22556e537", "commitAfterChange": "1155b311a647fc5f126edd0c5e6b818f225baee0", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " protected void consumeMethodHeaderRightParen()", "signatureAfterChange": " protected void consumeMethodHeaderRightParen()", "diff": ["+\t\t\t\t\tmd.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\tmd.bits |= (arg.type.bits & ASTNode.HasTypeAnnotations);", "+\t\t\tfor (int i = 0, max = md.arguments.length; i < max; i++) {", "+\t\t\t\tif ((md.arguments[i].bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\tmd.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36eb7e12bff332f0920d17b6d30c68d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "diff": ["-\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : getLineEnd(this.linePtr);", "+\t\t\tthis.lineEnd = (this.linePtr == this.lastLinePtr) ? this.endComment : this.scanner.getLineEnd(this.linePtr);", "-\t\t\t\t\t\t\t\t\t\t\tcase '-':", "+\t\t\t\t\t\t\t\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\t\t\t\t\t\t\t// verify characters after return tag (we're expecting text description)", "+\t\t\t\t\t\t\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "+\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t// do nothing for '*' character", "+\t\t\t\t\tcase '\\u000c' :\t/* FORM FEED               */", "+\t\t\t\t\tcase ' ' :\t\t\t/* SPACE                   */", "+\t\t\t\t\tcase '\\t' :\t\t\t/* HORIZONTAL TABULATION   */", "+\t\t\t\t\t\t// do nothing for space or '*' characters", "-\t\t\t\t\t\tif (!CharOperation.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\tif (!this.lineStarted) {", "-\t\t\t\t\t\t\t\tthis.textStart = previousPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tif (!this.lineStarted) {", "+\t\t\t\t\t\t\tthis.textStart = previousPosition;", "+\t\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebbea72a2d437ab17105acdeda7f57f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "16ca3ce5dc5ee9efae6752d24b51e0a4f5fb5b99", "commitAfterChange": "9fd2916b8907779bca609e5ee05006511e7cfce5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void initializeBuilder() throws CoreException", "signatureAfterChange": "  private int initializeBuilder(int kind) throws CoreException", "diff": ["-private void initializeBuilder() throws CoreException {", "+private int initializeBuilder(int kind) throws CoreException {", "+", "+\t// cache the known participants for this project", "+\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "+\tif (this.participants != null)", "+\t\tfor (int i = this.participants.length; --i >= 0;)", "+\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "+\t\t\t\tkind = FULL_BUILD;", "+\treturn kind;"]}], "num": 55512}
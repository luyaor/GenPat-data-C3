{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28188fe4f53ec82f112811cf71ad3253", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "472853d54e8a83683024d0c0a36fb2f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "13a2bff8811ff586bab60fddd157d395e6533570", "commitAfterChange": "4e8c06d42dcf2a91f77056993fc995ad49c4f7d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// Propagate the optimized boolean constant if possible", "-\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant", "-\t\t\t\t&& valueIfTrueType == BooleanBinding) {", "-\t\t\t\t", "-\t\t\t\tthis.optimizedBooleanConstant = condConstant.booleanValue()", "-\t\t\t\t\t? valueIfTrue.optimizedBooleanConstant()", "-\t\t\t\t\t: valueIfFalse.optimizedBooleanConstant();", "+\t\t\tif (valueIfTrueType == BooleanBinding) {", "+\t\t\t\tthis.optimizedIfTrueConstant = valueIfTrue.optimizedBooleanConstant();", "+\t\t\t\tthis.optimizedIfFalseConstant = valueIfFalse.optimizedBooleanConstant();", "+\t\t\t", "+\t\t\t\t// Propagate the optimized boolean constant if possible", "+\t\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant) {", "+\t\t\t\t\t", "+\t\t\t\t\tthis.optimizedBooleanConstant = condConstant.booleanValue()", "+\t\t\t\t\t\t? optimizedIfTrueConstant", "+\t\t\t\t\t\t: optimizedIfFalseConstant;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1370c3a22b5763e2eddc514877f002a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "8b116f874c9f1e7d547aef20c4c2f65bed392f8f", "commitAfterChange": "b6254fb64d881dcd86d8033c8a2a995ebecfe758", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t", "-\t\t\t\t// Propagate the optimized boolean constant if possible", "-\t\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\t\t\t", "+\t\t\t\tif (this.optimizedIfTrueConstant != NotAConstant ", "+\t\t\t\t\t\t&& this.optimizedIfFalseConstant != NotAConstant", "+\t\t\t\t\t\t&& this.optimizedIfTrueConstant.booleanValue() == this.optimizedIfFalseConstant.booleanValue()) {", "+\t\t\t\t\t// a ? true : true  /   a ? false : false", "+\t\t\t\t\tthis.optimizedBooleanConstant = optimizedIfTrueConstant;", "+\t\t\t\t} else if ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant) { // Propagate the optimized boolean constant if possible", "-\t\t\t\t\t\t? optimizedIfTrueConstant", "-\t\t\t\t\t\t: optimizedIfFalseConstant;", "+\t\t\t\t\t\t? this.optimizedIfTrueConstant", "+\t\t\t\t\t\t: this.optimizedIfFalseConstant;"]}], "num": 11090}
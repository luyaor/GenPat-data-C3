{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37295ad8676a57c185f66876fd20ea17", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852bcfb9065cd477a8971a30e6bbe55f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes, int eventType)", "signatureAfterChange": " \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes, int eventType)", "diff": ["-\t\t\t\t// find out whether the delta is a package fragment root", "-\t\t\t\tIPath fullPath = res.getFullPath();", "-\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(fullPath);", "-\t\t\t\tboolean isPkgFragmentRoot = projectOfRoot != null;", "+\t\t\t\t// find out the element type", "+\t\t\t\tRootInfo rootInfo = (RootInfo)this.roots.get(res.getFullPath());", "-\t\t\t\t\t\tisPkgFragmentRoot);", "-\t\t\t\tif (isPkgFragmentRoot) {", "-\t\t\t\t\tthis.currentExclusionPatterns = (char[][])this.exclusionPatterns.get(fullPath);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.currentExclusionPatterns = null;", "-\t\t\t\t}", "+\t\t\t\t\t\trootInfo);", "-\t\t\t\tthis.traverseDelta(delta, elementType, projectOfRoot, null, IGNORE); // traverse delta", "+\t\t\t\tthis.traverseDelta(delta, elementType, rootInfo, null); // traverse delta"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99e7f18d73085e7966922034850b7789", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "11ac720cf12c89391a32ed5e56750070174f7f3f", "commitAfterChange": "c35f48a470f9475e0b73c6c14c2a26ca2378ab58", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\tfinal Parser parser = new Parser(this.enclosingScope.problemReporter(), false);", "+\t\tfinal Parser parser = new Parser(this.scope.problemReporter(), false);", "-\t\tLambdaExpression copy;", "-\t\t", "-\t\tCompilationUnitDeclaration unit = this.enclosingScope.referenceCompilationUnit();", "-\t\tCompilationResult original = unit.compilationResult;", "-\t\tunit.compilationResult = devNullCompilationResult;", "-\t\t", "-\t\ttry {", "-\t\t\tcopy =  (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, unit);", "-\t\t} finally {", "-\t\t\tunit.compilationResult = original;", "-\t\t}", "-\t\tcopy.compilationResult = devNullCompilationResult;", "-\t\treturn copy;", "+\t\treturn (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\t\t\t\t\t\t\t\t\tthis.scope.referenceCompilationUnit(), false /* record line separators */);"]}], "num": 26576}
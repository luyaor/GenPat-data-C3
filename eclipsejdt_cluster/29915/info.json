{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caf31207a75e6ea904c8181f739957c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "060a062a64dc664790f514bfb1d8448e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "09bf35df2168c2ab3f5a24971ca9aae42bfc8d5b", "commitAfterChange": "2b1f9a527e48f8aea065bc82cb38f61c906092eb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void getMethodBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": " protected void getMethodBodies(CompilationUnitDeclaration unit)", "diff": ["+\t\tchar[] contents = unit.compilationResult.compilationUnit.getContents();", "+\t\tthis.parser.scanner.setLineEnds(unit.compilationResult.lineSeparatorPositions);", "+\t\tif (this.parser.annotationParser.checkAnnotation) {", "+\t\t\tthis.parser.annotationParser.scanner.setSource(contents);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53242b48e4e04b7f8de6405464e58417", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "09bf35df2168c2ab3f5a24971ca9aae42bfc8d5b", "commitAfterChange": "2b1f9a527e48f8aea065bc82cb38f61c906092eb", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " \tpublic void getMethodBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": " \tpublic void getMethodBodies(CompilationUnitDeclaration unit)", "diff": ["-\t\tthis.scanner.setSource(", "-\t\t\tunit.compilationResult.compilationUnit.getContents());", "+\t\tchar[] contents = unit.compilationResult.compilationUnit.getContents();", "+\t\tthis.scanner.setSource(contents);", "+\t\tthis.scanner.setLineEnds(unit.compilationResult.lineSeparatorPositions);", "+\t\tif (this.annotationParser.checkAnnotation) {", "+\t\t\tthis.annotationParser.scanner.setSource(contents);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76dc17284c9232ea8af1cb110222a97e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "signatureAfterChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "diff": ["-\tTypeBinding [] inferredTypes = inferElidedTypes(allocationType.genericType(), enclosingType, argumentTypes, scope);", "+\tTypeBinding [] inferredTypes;", "+\tint previousBits = this.type.bits;", "+\tint previousInferenceKind = this.inferenceKind;", "+\ttry {", "+\t\t// checking for redundant type parameters must fake a diamond, ", "+\t\t// so we infer the same results as we would get with a diamond in source code:", "+\t\tthis.type.bits |= IsDiamond;", "+\t\tinferredTypes = inferElidedTypes(allocationType.genericType(), enclosingType, argumentTypes, scope);", "+\t} finally {", "+\t\t// reset effects of inference", "+\t\tthis.type.bits = previousBits;", "+\t\tthis.inferenceKind = previousInferenceKind;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef94914a173a6db7616b1a111750cdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "69ecd7e8020aa690cd3b9097f1c2c90293a5da2f", "commitAfterChange": "12226f15f814a416d1b5ce2c6de204d00d53b835", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\t\t\tthis.parser.scanner.setSource(source, unit.compilationResult);", "-", "+\t\t\t\t\t\t// save existing values to restore them at the end of the parsing process", "+\t\t\t\t\t\t// see bug 47079 for more details", "+\t\t\t\t\t\tint[] oldLineEnds = this.parser.scanner.lineEnds;", "+\t\t\t\t\t\tint oldLinePtr = this.parser.scanner.linePtr;", "+", "+\t\t\t\t\t\tthis.parser.scanner.setSource(source, unit.compilationResult);", "+", "-\t\t  \t\t\t\tif (node instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\tif (node instanceof AbstractMethodDeclaration) {", "-\t\t \t\t\t\t} else if (enclosingTypeDeclaration != null) {", "+\t\t\t\t\t\t} else if (enclosingTypeDeclaration != null) {", "-\t\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(this.parser, enclosingTypeDeclaration, unit);", "-\t\t \t\t\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(this.parser, enclosingTypeDeclaration, unit);", "+\t\t\t\t\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "-\t\t \t\t\t\t}", "-\t\t \t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// this is done to prevent any side effects on the compilation unit result", "+\t\t\t\t\t\t// line separator positions array.", "+\t\t\t\t\t\tthis.parser.scanner.lineEnds = oldLineEnds;", "+\t\t\t\t\t\tthis.parser.scanner.linePtr = oldLinePtr;", "+\t\t\t\t\t}"]}], "num": 29915}
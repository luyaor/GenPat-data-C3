{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531ba982abdd141de3afdb78ae895e60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0470b97f9aa92be78d504cc744afe3c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SuperTypeTest.java", "commitBeforeChange": "0f169ffd6bca6fffad72427f729936c499395ec5", "commitAfterChange": "53a1646d9e191b8b912f757450cb4b809c88a6c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void test013()", "signatureAfterChange": " public void test013()", "diff": ["-\t\t\"\t                       ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type X<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                ^^^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Collection<E> for the type X<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type X<E>, already defined by Collection<E>\\n\" + ", "-\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type Y<E>, already defined by Collection<E>\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<E> for the type Y<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<E> for the type XXX<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by List<E>\\n\" + ", "-\t\t\"\t                                               ^^^^^^^^^^\\n\" + ", "-\t\t\"Redundant superinterface Collection<E> for the type XXX<E>, already defined by Iterable<E>\\n\" + ", "+\t\t\"\t                         ^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Iterable<E> for the type XXX<E>, already defined by Collection<E>\\n\" + ", "-\t\t\"\t                            ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<Object> for the type Z, already defined by Collection<Object>\\n\" + ", "+\t\t\"\t                                          ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<Object> for the type Z, already defined by List<Object>\\n\" + ", "-\t\t\"\t                                                 ^^^^\\n\" + ", "-\t\t\"Redundant superinterface List<Object> for the type ZZ, already defined by Collection<Object>\\n\" + ", "+\t\t\"\t                             ^^^^^^^^^^\\n\" + ", "+\t\t\"Redundant superinterface Collection<Object> for the type ZZ, already defined by List<Object>\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tJavacTestOptions.SKIP);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8197234fd5437ad9b9d2c190d0ba53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": "     public void test115()", "signatureAfterChange": "     public void test115()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"M cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "-\t\t\t\"\t                            ^^^\\n\" + ", "-\t\t\t\"The method baz() is undefined for the type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "-\t\t\t\"\t                                  ^\\n\" + ", "-\t\t\t\"s cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\t@Annot(foo = T.class, bar = s)\\n\" + ", "-\t\t\t\"\t             ^^^^^^^\\n\" + ", "-\t\t\t\"Illegal class literal for the type parameter T\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t<T> T foo(T t, String s) {\\n\" + ", "-\t\t\t\"\t                      ^\\n\" + ", "-\t\t\t\"The parameter s is hiding a field from type X\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+    \t\t\"\tClass foo();\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "+    \t\t\"\t             ^\\n\" + ", "+    \t\t\"M cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "+    \t\t\"\t                            ^^^\\n\" + ", "+    \t\t\"The method baz() is undefined for the type X\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "+    \t\t\"\t                                  ^\\n\" + ", "+    \t\t\"s cannot be resolved\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. ERROR in X.java (at line 11)\\n\" + ", "+    \t\t\"\t@Annot(foo = T.class, bar = s)\\n\" + ", "+    \t\t\"\t             ^^^^^^^\\n\" + ", "+    \t\t\"Illegal class literal for the type parameter T\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+    \t\t\"\t<T> T foo(T t, String s) {\\n\" + ", "+    \t\t\"\t                      ^\\n\" + ", "+    \t\t\"The parameter s is hiding a field from type X\\n\" + ", "+    \t\t\"----------\\n\");"]}], "num": 63550}
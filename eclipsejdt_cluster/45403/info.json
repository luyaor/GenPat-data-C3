{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf45c0aab55bdf72a77cb6e3573f2bcc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7cf107d50ab8bbbd312de2f5c4f00e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "8308fbb078e8e036c815675ec6bbbcc0aa49f4d3", "commitAfterChange": "e9cd393d27e7dcc4d1e8856bf858c025f0164f22", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t\r \t\r \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\t\r \t\r \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "diff": ["+\r", "+\t\t// need assertion flag: $assertionsDisabled on outer most source type\r", "+\r", "+\t\t// find <clinit> and enable assertion support\r", "-\t\tClinit clinit = null;\r", "-\t\t\t\t// this is the clinit\r", "-\t\t\t\tclinit = (Clinit) method;\r", "+\t\t\t\t((Clinit) method).addSupportForAssertion(assertionSyntheticFieldBinding);\r", "+\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\tif (clinit != null) {\r", "-\t\t\t// should always be the case\r", "-\t\t\tclinit.addSupportForAssertion(assertionSyntheticFieldBinding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe74c306cfe1e750eb3191c8e56b44c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "73eb8aa4a98db332d6d88b79c87c02ef9f75d8f9", "commitAfterChange": "59f906dde0386689cf221a0077edc4ded4fac940", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\t\t\tbuffer.append(methodBinding.declaringClass.computeUniqueKey(false/*not a leaf*/));", "+\t\t\tReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\t\tbuffer.append(declaringClass.computeUniqueKey(false/*not a leaf*/));", "-\t\t\tbuffer.append(methodBinding.sourceStart());", "+\t\t\tMethodBinding[] methods = declaringClass.methods();", "+\t\t\tif (methods != null)", "+\t\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\t\t\tMethodBinding binding = methods[i];", "+\t\t\t\t\tif (binding == methodBinding) {", "+\t\t\t\t\t\tbuffer.append(i);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 45403}
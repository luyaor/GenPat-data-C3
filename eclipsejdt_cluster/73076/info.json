{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d1cb8a296f4475f7bc5a21531277e23", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0316c2d2189627690c8ec8ef6f59ad0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = null;", "-\t\tint lastPosition = -1;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-\t\t\t\tif (interfacesToVisit == null)", "-\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(lastPosition * 2);", "-\t\t\tdone : for (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding anInterface = interfaces[j];", "-\t\t\t\t\tif (!interfacesSeen.includes(anInterface)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(anInterface);", "-\t\t\t\t\t\tunitScope.recordTypeReference(anInterface);", "-\t\t\t\t\t\tif ((field = anInterface.getField(fieldName, true /*resolve*/)) != null) {", "-\t\t\t\t\t\t\tif (visibleField == null) {", "-\t\t\t\t\t\t\t\tvisibleField = field;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tambiguous = new ProblemFieldBinding(visibleField /* closest match*/, visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);", "-\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "-\t\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t\t}", "+\t\t\tdone : for (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding anInterface = interfacesToVisit[i];", "+\t\t\t\tunitScope.recordTypeReference(anInterface);", "+\t\t\t\tif ((field = anInterface.getField(fieldName, true /*resolve*/)) != null) {", "+\t\t\t\t\tif (visibleField == null) {", "+\t\t\t\t\t\tvisibleField = field;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tambiguous = new ProblemFieldBinding(visibleField /* closest match*/, visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);", "+\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "+\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20de204b9ac87c5d27506bfbb5a65b03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = null;", "-\t\tint lastPosition = -1;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-\t\t\t\tif (interfacesToVisit == null)", "-\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(lastPosition * 2);", "-\t\t\tdone : for (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding anInterface = interfaces[j];", "-\t\t\t\t\tif (!interfacesSeen.includes(anInterface)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(anInterface);", "-\t\t\t\t\t\tunitScope.recordReference(anInterface, typeName);", "-\t\t\t\t\t\tif ((memberType = anInterface.getMemberType(typeName)) != null) {", "-\t\t\t\t\t\t\tunitScope.recordTypeReference(memberType);", "-\t\t\t\t\t\t\tif (visibleMemberType == null) {", "-\t\t\t\t\t\t\t\tvisibleMemberType = memberType;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tambiguous = new ProblemReferenceBinding(typeName, null, ProblemReasons.Ambiguous);", "-\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "-\t\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t\t}", "+\t\t\tdone : for (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding anInterface = interfacesToVisit[i];", "+\t\t\t\tunitScope.recordReference(anInterface, typeName);", "+\t\t\t\tif ((memberType = anInterface.getMemberType(typeName)) != null) {", "+\t\t\t\t\tunitScope.recordTypeReference(memberType);", "+\t\t\t\t\tif (visibleMemberType == null) {", "+\t\t\t\t\t\tvisibleMemberType = memberType;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tambiguous = new ProblemReferenceBinding(typeName, null, ProblemReasons.Ambiguous);", "+\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "+\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c936f6970fd0d7df1a6f3ddb5cd9124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tboolean proposeAllMemberTypes, \t\tSourceTypeBinding typeToIgnore, \t\tObjectVector typesFound)", "signatureAfterChange": " \tprivate void findMemberTypes( \t\tchar[] typeName, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tSourceTypeBinding typeInvocation, \t\tboolean staticOnly, \t\tboolean fromStaticImport, \t\tboolean checkQualification, \t\tboolean proposeAllMemberTypes, \t\tSourceTypeBinding typeToIgnore, \t\tObjectVector typesFound)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = null;", "-\t\tint lastPosition = -1;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-", "-", "-\t\t\t\tif (interfacesToVisit == null)", "-\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];", "-", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tlastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-", "-\t\t", "-\t\t", "+", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(lastPosition * 2);", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-", "-\t\t\t\t\tReferenceBinding anInterface = interfaces[j];", "-\t\t\t\t\tif (!interfacesSeen.includes(anInterface)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(anInterface);", "-", "-\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\ttypeName,", "-\t\t\t\t\t\t\tanInterface.memberTypes(),", "-\t\t\t\t\t\t\ttypesFound,", "-\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\ttypeInvocation,", "-\t\t\t\t\t\t\tstaticOnly,", "-\t\t\t\t\t\t\tfromStaticImport,", "-\t\t\t\t\t\t\tcheckQualification,", "-\t\t\t\t\t\t\tscope);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding anInterface = interfacesToVisit[i];", "+\t\t\t\tfindMemberTypes(", "+\t\t\t\t\ttypeName,", "+\t\t\t\t\tanInterface.memberTypes(),", "+\t\t\t\t\ttypesFound,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\ttypeInvocation,", "+\t\t\t\t\tstaticOnly,", "+\t\t\t\t\tfromStaticImport,", "+\t\t\t\t\tcheckQualification,", "+\t\t\t\t\tscope);", "+\t\t\t\t\t\t", "+\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "+\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}], "num": 73076}
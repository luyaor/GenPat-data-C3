{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e40914fff72b3d3b6831bc78ab520664", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dbbfc6a42cff9f9ce56d2a4b049569c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t\t\t\t&& !this.actualReceiverType.isArrayType()\t", "-\t\t\t\t&& fieldBinding.declaringClass != null", "-\t\t\t\t&& !fieldBinding.isConstantValue()", "-\t\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 ", "-\t\t\t\t\t\t&& !fieldBinding.isStatic()", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields (if there was any)", "-\t\t\t\t\t|| !codegenField.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\t\tthis.codegenBinding = ", "-\t\t\t\t    currentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\t       codegenField, ", "-\t\t\t\t\t        (ReferenceBinding)this.actualReceiverType.erasure());", "-\t\t\t}", "+\t\t\t\t\t&& !this.actualReceiverType.isArrayType()", "+\t\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "+\t\t\t\t\t&& !fieldBinding.isConstantValue()) {", "+\t\t\t\tCompilerOptions options = currentScope.environment().options;", "+\t\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !fieldBinding.isStatic())", "+\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "+\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope)) {", "+\t\t", "+\t\t\t\t\tthis.codegenBinding = ", "+\t\t\t\t\t    currentScope.enclosingSourceType().getUpdatedFieldBinding(", "+\t\t\t\t\t\t       codegenField, ", "+\t\t\t\t\t\t        (ReferenceBinding)this.actualReceiverType.erasure());", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9336cf10bf7be1ae841e70dedef0fd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "dd95cda1129e3b02d33e6df4abb4085b58725599", "commitAfterChange": "0716d777f2b215b958b4a2562d69f124e313e0a3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t// in 1.4 mode (inherited visible shadows enclosing)", "+\t\tCompilerOptions options;", "+\t\tboolean inheritedHasPrecedence = (options = compilerOptions()).complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\t", "-", "-\t\t\t\t\t\t\t\t\tif (receiverType == methodBinding.declaringClass", "-\t\t\t\t\t\t\t\t\t\t|| ((foundProblem == null || foundProblem.problemId() != ProblemReasons.NotVisible) && compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\t\t\t\t\t\t\t\t|| (receiverType.getMethods(selector)) != Binding.NO_METHODS) {", "-\t\t\t\t\t\t\t\t\t\t\t// found a valid method in the 'immediate' scope (ie. not inherited)", "-\t\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited visible shadows enclosing)", "-\t\t\t\t\t\t\t\t\t\t\t// OR the receiverType implemented a method with the correct name", "-\t\t\t\t\t\t\t\t\t\t\t// return the methodBinding if it is not declared in a superclass of the scope's binding (that is, inherited)", "-\t\t\t\t\t\t\t\t\t\t\tif (foundProblem != null && foundProblem.problemId() != ProblemReasons.NotVisible)", "-\t\t\t\t\t\t\t\t\t\t\t\treturn foundProblem;", "-\t\t\t\t\t\t\t\t\t\t\tif (depth > 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setDepth(depth);", "-\t\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(receiverType);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\treturn methodBinding;", "+\t\t\t\t\t\t\t\t\tif (inheritedHasPrecedence", "+\t\t\t\t\t\t\t\t\t\t\t|| receiverType == methodBinding.declaringClass", "+\t\t\t\t\t\t\t\t\t\t\t|| (receiverType.getMethods(selector)) != Binding.NO_METHODS) {", "+\t\t\t\t\t\t\t\t\t\t// found a valid method in the 'immediate' scope (ie. not inherited)", "+\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited visible shadows enclosing)", "+\t\t\t\t\t\t\t\t\t\t// OR the receiverType implemented a method with the correct name", "+\t\t\t\t\t\t\t\t\t\t// return the methodBinding if it is not declared in a superclass of the scope's binding (that is, inherited)", "+\t\t\t\t\t\t\t\t\t\tif (foundProblem != null && foundProblem.problemId() != ProblemReasons.NotVisible)", "+\t\t\t\t\t\t\t\t\t\t\treturn foundProblem;", "+\t\t\t\t\t\t\t\t\t\tif (depth > 0) {", "+\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setDepth(depth);", "+\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(receiverType);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\treturn methodBinding;", "-\t\t\t\t\t\t\t\t\tif (foundProblem == null) {", "+\t\t\t\t\t\t\t\t\tif (foundProblem == null || foundProblem.problemId() == ProblemReasons.NotVisible) {", "+\t\t\t\t\t\t\t\t\t\tif (foundProblem != null) foundProblem = null;", "-\t\tif (insideStaticContext && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\tif (insideStaticContext && options.sourceLevel >= ClassFileConstants.JDK1_5) {"]}], "num": 47416}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3daa2045c787f2df11e75256b6c85370", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28fd0df0c76331ef8c2bb8d32c8ef76b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope classScope)", "signatureAfterChange": " public void traverse(ASTVisitor visitor, ClassScope classScope)", "diff": ["+ */", "+public void traverse(ASTVisitor visitor, ClassScope classScope) {", "+\tif (this.ignoreFurtherInvestigation)", "+\t\treturn;", "+\ttry {", "+\t\tif (visitor.visit(this, classScope)) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.superclass != null)", "+\t\t\t\tthis.superclass.traverse(visitor, this.scope);", "+\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.typeParameters != null) {", "+\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t}\t\t\t\t", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.memberTypes[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.fields != null) {", "+\t\t\t\tint length = this.fields.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tFieldDeclaration field;", "+\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "+\t\t\t\t\t\tfield.traverse(visitor, this.staticInitializerScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfield.traverse(visitor, this.initializerScope);", "+\t\t\tif (this.methods != null) {", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.methods[i].traverse(visitor, this.scope);", "+\t\tvisitor.endVisit(this, classScope);", "+\t} catch (AbortType e) {", "+\t\t// silent abort", "+}\t", "-\t */", "-\tpublic void traverse(ASTVisitor visitor, ClassScope classScope) {", "-\t\tif (ignoreFurtherInvestigation)", "-\t\t\treturn;", "-\t\ttry {", "-\t\t\tif (visitor.visit(this, classScope)) {", "-\t\t\t\tif (this.annotations != null) {", "-\t\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.superclass != null)", "-\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "-\t\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\t\tint length = this.superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.typeParameters != null) {", "-\t\t\t\t\tint length = this.typeParameters.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tif (this.memberTypes != null) {", "-\t\t\t\t\tint length = this.memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.fields != null) {", "-\t\t\t\t\tint length = this.fields.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tFieldDeclaration field;", "-\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\t\t\t\tfield.traverse(visitor, staticInitializerScope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfield.traverse(visitor, initializerScope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (this.methods != null) {", "-\t\t\t\t\tint length = this.methods.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tvisitor.endVisit(this, classScope);", "-\t\t} catch (AbortType e) {", "-\t\t\t// silent abort", "-\t\t}", "-\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9804c22e0a7d2fc34a045e39776289a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["+\tif(this.currentElement instanceof RecoveredType || this.currentElement instanceof RecoveredMethod) {", "+\t\tif(this.currentElement instanceof RecoveredType) {", "+\t\t\tRecoveredType recoveredType = (RecoveredType)this.currentElement;", "+\t\t\tif(recoveredType.foundOpeningBrace && this.genericsPtr > -1) {", "+\t\t\t\tif(this.genericsStack[this.genericsPtr] instanceof TypeParameter) {", "+\t\t\t\t\tTypeParameter typeParameter = (TypeParameter) this.genericsStack[this.genericsPtr];", "+\t\t\t\t\tthis.currentElement.add(new CompletionOnMethodTypeParameter(new TypeParameter[]{typeParameter},this.compilationUnit.compilationResult()), 0);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((!isInsideMethod() && !isInsideFieldInitialization())) { ", "+\t\t\tif(this.genericsPtr > -1 && this.genericsLengthPtr > -1 && this.genericsIdentifiersLengthPtr > -1) {", "+\t\t\t\tint kind = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER);", "+\t\t\t\tint info = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER);", "+\t\t\t\tif(kind == K_BINARY_OPERATOR && info == LESS) {", "+\t\t\t\t\tthis.consumeTypeArguments();", "+\t\t\t\t}", "+\t\t\t\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr];", "+\t\t\t\tint genPtr = this.genericsPtr;", "+\t\t\t\tdone : for(int i = 0; i < numberOfIdentifiers; i++){", "+\t\t\t\t\tint length = this.genericsLengthStack[this.genericsLengthPtr - i];", "+\t\t\t\t\tfor(int j = 0; j < length; j++) {", "+\t\t\t\t\t\tASTNode node = this.genericsStack[genPtr - j];", "+\t\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(this.assistNode, node);", "+\t\t\t\t\t\tif(detector.containsCompletionNode()) {", "+\t\t\t\t\t\t\tif(node == this.assistNode){", "+\t\t\t\t\t\t\t\tif(this.identifierLengthPtr > -1 &&\tthis.identifierLengthStack[this.identifierLengthPtr]!= 0) {", "+\t\t\t\t\t\t\t\t\tTypeReference ref = this.getTypeReference(0);", "+\t\t\t\t\t\t\t\t\tthis.assistNodeParent = ref;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.assistNodeParent = detector.getCompletionNodeParent();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tgenPtr -= length;", "+\t\t\t\t}", "+\t\t\t\tif(this.assistNodeParent != null && this.assistNodeParent instanceof TypeReference) {", "+\t\t\t\t\tif(this.currentElement instanceof RecoveredType) {", "+\t\t\t\t\t\tthis.currentElement = this.currentElement.add(new CompletionOnFieldType((TypeReference)this.assistNodeParent, false), 0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.currentElement = this.currentElement.add((TypeReference)this.assistNodeParent, 0);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t}", "+\t", "+\tif(this.genericsPtr > -1) {", "+\t\tASTNode node = this.genericsStack[this.genericsPtr];", "+\t\tCompletionNodeDetector detector = new CompletionNodeDetector(this.assistNode, node);", "+\t\tif(detector.containsCompletionNode()) {", "+\t\t\t/* check for completion at the beginning of method body", "+\t\t\t\tbehind an invalid signature", "+\t\t\t */", "+\t\t\tRecoveredMethod method = this.currentElement.enclosingMethod();", "+\t\t\tif (method != null){", "+\t\t\t\tAbstractMethodDeclaration methodDecl = method.methodDeclaration;", "+\t\t\t\tif ((methodDecl.bodyStart == methodDecl.sourceEnd+1) // was missing opening brace", "+\t\t\t\t\t&& (this.scanner.getLineNumber(node.sourceStart) == this.scanner.getLineNumber(methodDecl.sourceEnd))){", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif(node == this.assistNode){", "+\t\t\t\tbuildMoreGenericsCompletionContext(node);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac978ec5b21c132a564be1a560a57c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\tif (binding == null) {", "-\t\t\tignoreFurtherInvestigation = true;", "+\t\tif (this.binding == null) {", "+\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\tif (binding.superclass != null) // watch out for Object ! (and other roots)\t", "-\t\t\t\tif (isTypeUseDeprecated(binding.superclass, scope))", "-\t\t\t\t\tscope.problemReporter().deprecatedType(binding.superclass, superclass);", "-\t\t\tif (superInterfaces != null)", "-\t\t\t\tfor (int i = superInterfaces.length; --i >= 0;)", "-\t\t\t\t\tif (superInterfaces[i].resolvedType != null)", "-\t\t\t\t\t\tif (isTypeUseDeprecated(superInterfaces[i].resolvedType, scope))", "-\t\t\t\t\t\t\tscope.problemReporter().deprecatedType(", "-\t\t\t\t\t\t\t\tsuperInterfaces[i].resolvedType,", "-\t\t\t\t\t\t\t\tsuperInterfaces[i]);", "-\t\t\tmaxFieldCount = 0;", "+\t\t\tif (this.binding.superclass != null) // watch out for Object ! (and other roots)\t", "+\t\t\t\tif (isTypeUseDeprecated(this.binding.superclass, this.scope))", "+\t\t\t\t\tthis.scope.problemReporter().deprecatedType(this.binding.superclass, this.superclass);", "+\t\t\tif (this.superInterfaces != null)", "+\t\t\t\tfor (int i = this.superInterfaces.length; --i >= 0;)", "+\t\t\t\t\tif (this.superInterfaces[i].resolvedType != null)", "+\t\t\t\t\t\tif (isTypeUseDeprecated(this.superInterfaces[i].resolvedType, this.scope))", "+\t\t\t\t\t\t\tthis.scope.problemReporter().deprecatedType(", "+\t\t\t\t\t\t\t\tthis.superInterfaces[i].resolvedType,", "+\t\t\t\t\t\t\t\tthis.superInterfaces[i]);", "+\t\t\tthis.maxFieldCount = 0;", "-\t\t\tif (fields != null) {", "-\t\t\t\tfor (int i = 0, count = fields.length; i < count; i++) {", "-\t\t\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tif (this.fields != null) {", "+\t\t\t\tfor (int i = 0, count = this.fields.length; i < count; i++) {", "+\t\t\t\t\tFieldDeclaration field = this.fields[i];", "-\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? staticInitializerScope : initializerScope);", "-\t\t\t\t\t\t\tignoreFurtherInvestigation = true;", "+\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "+\t\t\t\t\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\t\t\t\tmaxFieldCount++;", "+\t\t\t\t\t\tthis.maxFieldCount++;", "-\t\t\t\t\tfield.resolve(field.isStatic() ? staticInitializerScope : initializerScope);", "+\t\t\t\t\tfield.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "-\t\t\tif (memberTypes != null) {", "-\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++) {", "-\t\t\t\t\tmemberTypes[i].resolve(scope);", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tfor (int i = 0, count = this.memberTypes.length; i < count; i++) {", "+\t\t\t\t\tthis.memberTypes[i].resolve(this.scope);", "-\t\t\tint methodsLength = this.methods == null ? 0 : methods.length;", "+\t\t\tint methodsLength = this.methods == null ? 0 : this.methods.length;", "-\t\t\t\tscope.problemReporter().tooManyMethods(this);", "+\t\t\t\tthis.scope.problemReporter().tooManyMethods(this);", "-\t\t\tif (methods != null) {", "-\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++) {", "-\t\t\t\t\tmethods[i].resolve(scope);", "+\t\t\tif (this.methods != null) {", "+\t\t\t\tfor (int i = 0, count = this.methods.length; i < count; i++) {", "+\t\t\t\t\tthis.methods[i].resolve(this.scope);", "-\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "-\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "+\t\t\t} else if (this.binding != null && !this.binding.isLocalType()) {", "+\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, this.binding.modifiers);"]}], "num": 48022}
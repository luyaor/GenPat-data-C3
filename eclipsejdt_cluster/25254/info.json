{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "632a5b75197a8a87a63d25bef9bfbfd9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f89e3b77492f7255aa569ab92320b3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "commitAfterChange": "192820efad9191d4773fbd88aa6d8a5ea915ea14", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "diff": ["-\t\t\t// We come in with capture(gA), we need to work with gA below. It was necessary to establish capture at the call site.", "-\t\t\tParameterizedTypeBinding cgA = capt.getValue();", "-\t\t\tParameterizedTypeBinding gA = (ParameterizedTypeBinding) cgA.uncapture(context.scope);", "+\t\t\tParameterizedTypeBinding gA = capt.getValue();", "-\t\t\t\tTypeBinding cai = cgA.arguments[i];", "-\t\t\t\t\t\t\t\t/* With the expected type's declared type being Collector<? super T, A, R> and gAlpha being Collector<T#0,?#1,List<T#0>#2> and cgA being", "-\t\t\t\t\t\t\t\t   Collector<T#0,capture#1-of ?,List<T#0>>, without the constraint reduction below - we will never discover A to be capture#1-of ? and", "-\t\t\t\t\t\t\t\t   claim A is jlO. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c24 - #27", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (!reduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, cai, ReductionResult.SAME)))", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t// Our = reduction transitively adds a new bound that necessitates the check below for capture. ", "-\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable) && !bound.right.isCapture())", "+\t\t\t\t\t\t\t\tif (InferenceContext18.SHOULD_WORKAROUND_BUG_JDK_8054721) {", "+\t\t\t\t\t\t\t\t\tif (bound.right instanceof CaptureBinding)", "+\t\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c83b051b4f6f06a0775edd0891fe660b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "diff": ["-\t\t\tParameterizedTypeBinding gA = capt.getValue();", "+\t\t\t// We come in with capture(gA), we need to work with gA below. It was necessary to establish capture at the call site.", "+\t\t\tParameterizedTypeBinding cgA = capt.getValue();", "+\t\t\tParameterizedTypeBinding gA = (ParameterizedTypeBinding) cgA.uncapture(context.scope);", "+\t\t\t\tTypeBinding cai = cgA.arguments[i];", "-\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable))", "+\t\t\t\t\t\t\t\t/* With the expected type's declared type being Collector<? super T, A, R> and gAlpha being Collector<T#0,?#1,List<T#0>#2> and cgA being", "+\t\t\t\t\t\t\t\t   Collector<T#0,capture#1-of ?,List<T#0>>, without the constraint reduction below - we will never discover A to be capture#1-of ? and", "+\t\t\t\t\t\t\t\t   claim A is jlO. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c24 - #27", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (!reduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, cai, ReductionResult.SAME)))", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t// Our = reduction transitively adds a new bound that necessitates the check below for capture. ", "+\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable) && !bound.right.isCapture())", "+\t\tthis.captures.clear();"]}], "num": 25254}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1838eb693a801d78ca51ecef7bf8f0e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1361c526c6dc522ab0e9e27487803a77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void findMethodBinding(BlockScope scope, TypeBinding[] argumentTypes, boolean polyExpressionSeen)", "signatureAfterChange": " protected void findMethodBinding(BlockScope scope, TypeBinding[] argumentTypes, boolean polyExpressionSeen)", "diff": ["-\t\tif (resolvePolyExpressionArguments(this, scope, this.binding, argumentTypes)) {", "-\t\t\tthis.binding = this.receiver.isImplicitThis()", "-\t\t\t\t\t? scope.getImplicitMethod(this.selector, argumentTypes, this)", "-\t\t\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "-\t\t}", "+\t\tresolvePolyExpressionArguments(this, this.binding, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fef3e786c38ee09aad992c7fb61eb9bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.binding =", "-\t\tthis.receiver.isImplicitThis()", "-\t\t\t? scope.getImplicitMethod(this.selector, argumentTypes, this)", "-\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "-\t", "-\tif (polyExpressionSeen)", "-\t\tresolvePolyExpressionArguments(scope, this.binding, this.arguments, argumentTypes);", "+\tfindMethodBinding(scope, argumentTypes, polyExpressionSeen);"]}], "num": 51017}
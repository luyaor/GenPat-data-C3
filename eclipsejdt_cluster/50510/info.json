{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b0284ef19aa0b95c6d1f55f2713459b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff6d7ac55bb6215fef1851e6d81c0eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "c3cfcbf3735a569bd82b9e06ea31c818736eb0c6", "commitAfterChange": "49663a93eec65b4c3aab7e71b88620319802d4cc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["+\t\t // if no reference context, we need to abort from the current compilation process", "+\t\t if (referenceContext == null) {", "+\t\t\t if ((severity & ProblemSeverities.Error) != 0) { // non reportable error is fatal", "+\t\t\t\t CategorizedProblem problem = this.createProblem(null, problemId, problemArguments, elaborationId, messageArguments, severity, 0, 0, 0, 0);", "+\t\t\t\t throw new AbortCompilation(null, problem);", "+\t\t\t } else {", "+\t\t\t\t return; // ignore non reportable warning", "+\t\t\t }", "+\t\t }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acda5a7ec319a0d10b9f6956326554d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "f0293a4ee0f47048cbe57865e83a23fed516a419", "commitAfterChange": "161b33b1dd753a14c62dc5cb298555b7a8135f16", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void handle(\r \tint problemId, \r \tString[] problemArguments, \r \tint severity, \r \tint problemStartPosition, \r \tint problemEndPosition, \r \tReferenceContext referenceContext, \r \tCompilationResult unitResult)", "signatureAfterChange": "\r public void handle(\r \tint problemId, \r \tString[] problemArguments, \r \tint severity, \r \tint problemStartPosition, \r \tint problemEndPosition, \r \tReferenceContext referenceContext, \r \tCompilationResult unitResult)", "diff": ["-\t\tthrow new AbortCompilation(problemId, problemArguments);\r", "+\t\tif ((severity & Error) != 0) { // non reportable error is fatal\r", "+\t\t\tthrow new AbortCompilation(problemId, problemArguments);\r", "+\t\t} else {\r", "+\t\t\treturn; // ignore non reportable warning\r", "+\t\t}\r", "-\t\t\t\t(policy.stopOnFirstError() ? AbortCompilation : severity & Abort))\r", "-\t\t\t\t!= 0) {\r", "+\t\t\t\t(policy.stopOnFirstError() ? AbortCompilation : severity & Abort)) != 0) {\r", "+\r"]}], "num": 50510}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78676dc82506d8dce27d271a205703d3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a6f17e7cb3b232aa488b8a152b97efc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "+\t\t\t\tReferenceBinding originalReferenceType = (ReferenceBinding) originalType;", "-\t\t            return substitution.environment().createRawType(originalGenericType, substitutedEnclosing);", "+\t\t            return substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "-\t\t\t    // treat as if parameterized with its type variables", "-\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "-\t\t\t\tint length = originalVariables.length;", "-\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "-\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "+\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "+\t\t\t\toriginalArguments = originalReferenceType.typeVariables();", "+\t\t\t\tif (originalArguments == NoTypeVariables) {", "+\t\t\t\t\toriginalArguments = null;", "+\t\t\t\t\tsubstitutedArguments = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "+\t\t\t\t}", "-\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\t\t\t\toriginalReferenceType, substitutedArguments, substitutedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e219d6befd25b3a96b9586e15c4f6efd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic TypeBinding[] getAnnotatedTypes(TypeBinding type)", "signatureAfterChange": " \tpublic TypeBinding[] getAnnotatedTypes(TypeBinding type)", "diff": ["-\t// Given a type, return all its variously annotated versions.", "+\t// Given a type, return all its annotated variants: parameter may be annotated.", "-\t\tTypeBinding keyType = getUnannotatedType(type);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);", "-\t\tif (cachedInfo == null)", "-\t\t\treturn Binding.NO_TYPES;", "-\t\t", "-\t\tfinal int length = cachedInfo.length;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(type);", "+\t\tfinal int length = derivedTypes.length;", "-\t\t\tfinal TypeBinding cachedType = cachedInfo[i];", "-\t\t\tif (cachedType == null)", "+\t\t\tfinal TypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null)", "-\t\t\tif (cachedType.id == type.id)", "-\t\t\t\tannotatedVersions[versions++] = cachedType;", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.id == type.id)", "+\t\t\t\tannotatedVersions[versions++] = derivedType;", "-\t\t", "-\t\tif (versions == 0)", "-\t\t\treturn Binding.NO_TYPES;", "-\t\t\t"]}], "num": 45908}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba4e7a303a3d851a8632678b9e8b957a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "008c2789b6f9db6d5e5a6d23ff5f1b1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+ */ \r", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\tif ((bits & IsReachableMASK) == 0) {\r", "+\t\treturn;\r", "+\tint pc = codeStream.position;\r", "+\texception.generateCode(currentScope, codeStream, true);\r", "+\tcodeStream.athrow();\r", "+\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\r", "+}\r", "-\t */\r", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\t\tif ((bits & IsReachableMASK) == 0)\r", "-\t\t\treturn;\r", "-\t\tint pc = codeStream.position;\r", "-\t\texception.generateCode(currentScope, codeStream, true);\r", "-\t\tcodeStream.athrow();\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025b2ded9de6918b02bec5046f853f18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0a14997b28c3a3bedf1328eae8dea74c42621edc", "commitAfterChange": "cbea90e590f4a14e41688393d46a454b917b4f8c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["+\t\t\t\t} else {", "+\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\trootIDs.add(rootID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03da9464cd380f7a1d446499dab67468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/util/Archive.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void close()", "signatureAfterChange": "  \tpublic void close()", "diff": ["-\t\t\tif (this.zipFile != null) this.zipFile.close();", "+\t\t\tif (this.zipFile != null) {", "+\t\t\t\tthis.zipFile.close();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07108e71249219c460b7e6e3f208034b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "117a744eb0d24ab39fea10587275a272ccbaee7f", "commitAfterChange": "17b4fd3a0b10d1480481c752e119d2e1a94fb93d", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " protected boolean resumeAfterRecovery()", "signatureAfterChange": " protected boolean resumeAfterRecovery()", "diff": ["-\tif (!this.moveRecoveryCheckpoint()) return false;", "+\tif (!this.moveRecoveryCheckpoint()) {", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095751bba28c155f6cad99eacab42ab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["+}\r", "+public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\tif (visitor.visit(this, blockScope)) {\r", "+\t\texception.traverse(visitor, blockScope);\r", "-\r", "-\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\t\tif (visitor.visit(this, blockScope))\r", "-\t\t\texception.traverse(visitor, blockScope);\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t}\r", "+\tvisitor.endVisit(this, blockScope);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c6982315d4e9694a0ce3575192cc805", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ClassLiteralAccess.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\tif (valueRequired)", "+\t\tif (valueRequired) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11951ef2f63b6a26660eead1ed8b1e2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void markAsDefinitelyNonNull(FieldBinding field)", "signatureAfterChange": "  public void markAsDefinitelyNonNull(FieldBinding field)", "diff": ["-\t */", "-\tpublic void markAsDefinitelyNonNull(FieldBinding field) {", "-\t\tif (this != DEAD_END)", "-\t\t\tmarkAsDefinitelyNonNull(field.id);", "-\t}", "+", "+public void markAsDefinitelyNonNull(FieldBinding field) {", "+\tif (this != DEAD_END) {", "+\t\tmarkAsDefinitelyNonNull(field.id);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dedab3dd4efb7364c421ac3b206571f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "d5c10d2d7223b30bd18f63015dde9c406b66baa7", "commitAfterChange": "c56fc7690c4a43edf61aaf2dd5ccc0b977ebec97", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void openWhenClosed(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": "  protected void openWhenClosed(IProgressMonitor pm) throws JavaModelException", "diff": ["-\tif (!this.resourceExists() || !this.isOnClasspath()) throw newNotPresentException();", "+\tif (!this.resourceExists() ", "+\t\t\t|| !this.isOnClasspath()) {", "+\t\tthrow newNotPresentException();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20443659ad8280ad65f5bc2f35914133", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding getReceiverType(BlockScope currentScope)", "signatureAfterChange": " public TypeBinding getReceiverType(BlockScope currentScope)", "diff": ["-\tif (receiverType != null) return receiverType;", "+\tif (receiverType != null) {", "+\t\treturn receiverType;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276f4ac0e72504014b7dee59e1569d9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void generateReceiver(CodeStream codeStream)", "signatureAfterChange": "  public void generateReceiver(CodeStream codeStream)", "diff": ["-\tif (delegateThis != null) codeStream.getfield(delegateThis); // delegated field access", "+\tif (delegateThis != null) {", "+\t\tcodeStream.getfield(delegateThis); // delegated field access", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c320bc5e944d88d0470680fd986cbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+ */ \r", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\tif ((bits & IsReachableMASK) == 0) {\r", "+\t\treturn;\r", "+\tint pc = codeStream.position;\r", "+\texception.generateCode(currentScope, codeStream, true);\r", "+\tcodeStream.athrow();\r", "+\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\r", "+}\r", "-\t */\r", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\t\tif ((bits & IsReachableMASK) == 0)\r", "-\t\t\treturn;\r", "-\t\tint pc = codeStream.position;\r", "-\t\texception.generateCode(currentScope, codeStream, true);\r", "-\t\tcodeStream.athrow();\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2933539efbb4b881c03bb1fbe3054367", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\t  \tpublic void handleLineTooLong()", "signatureAfterChange": "\t  \tpublic void handleLineTooLong()", "diff": ["-\t\tif (outerMostDepth >= 0) throw new AlignmentException(AlignmentException.LINE_TOO_LONG, outerMostDepth);", "-", "+\t\tif (outerMostDepth >= 0) {", "+\t\t\tthrow new AlignmentException(AlignmentException.LINE_TOO_LONG, outerMostDepth);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dd7b538a6c8770e65716fc622a258de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "db2c76d90d6b163f0fa3558913a11bde2fa51924", "commitAfterChange": "b0fd51e068e805a576f7259ee31415e98af7549d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void recordInitializationStartPC(int pc)", "signatureAfterChange": "  \tpublic void recordInitializationStartPC(int pc)", "diff": ["-\t\tif (this.initializationPCs == null) \treturn;", "+\t\tif (this.initializationPCs == null) {", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "303960a07ed9ed0f2d365449cdf79433", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "3713e09eba9f685830154e0115a35b3f423e4800", "commitAfterChange": "b643998b38b3ce66cb5be62319a6d11497b1841e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.validValuePositions == -1) {", "-\t\t\t\t\t\t\t\tif (this.invalidValuePositions != -1) {", "-\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocDuplicatedTag(tagName, (int) (this.invalidValuePositions>>>32), (int) this.invalidValuePositions);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (valid) {", "-\t\t\t\t\t\t\t\t\tthis.validValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "-\t\t\t\t\t\t\t\t\tthis.invalidValuePositions = -1;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthis.invalidValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocDuplicatedTag(tagName, this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t\tif (this.validValuePositions == -1) {", "+\t\t\t\t\t\t\t\t\tif (this.invalidValuePositions != -1) {", "+\t\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocDuplicatedTag(tagName, (int) (this.invalidValuePositions>>>32), (int) this.invalidValuePositions);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (valid) {", "+\t\t\t\t\t\t\t\t\t\tthis.validValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t\t\t\t\t\t\tthis.invalidValuePositions = -1;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tthis.invalidValuePositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocDuplicatedTag(tagName, this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3693411e971754825cbeeecc2cd394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "0926f8224af442af001e56062ed4e4b1654d4df9", "commitAfterChange": "9896f986021f515bc2f4e05fcf4279f0a51fdae6", "methodNumberBeforeChange": 334, "methodNumberAfterChange": 334, "signatureBeforeChange": " \tpublic void test0687() throws JavaModelException", "signatureAfterChange": " \tpublic void test0687() throws JavaModelException", "diff": ["-\t\t\tif (workingCopy != null)", "+\t\t\tif (workingCopy != null) {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e2061a339f29652807c4b3cf0eda6a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "61d09a86467b5181e97f5bb9e14c930813d4a727", "commitAfterChange": "c614621106519ff8481a1054577c7b362708dd68", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["+\t\t\t\t} else {", "+\t\t\t\t\tflowContext.recordSettingFinal(binding, this);", "-\t\t\t\tflowContext.recordSettingFinal(binding, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b959278b26200d99638bef37f52de5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cc1b983a8e90a6eb8909a42b004cd126e56bf76f", "commitAfterChange": "400176b3d00d9671a0c4aab9bab4779b3ff7bf8e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethodForArray( \t\tArrayBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethodForArray( \t\tArrayBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t            if (CharOperation.equals(selector, CLONE))", "+\t\t\t            if (CharOperation.equals(selector, CLONE)) {", "+\t\t\t            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "428714c346dae908e5a355dbba958186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+ */ \r", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\tif ((bits & IsReachableMASK) == 0) {\r", "+\t\treturn;\r", "+\tint pc = codeStream.position;\r", "+\texception.generateCode(currentScope, codeStream, true);\r", "+\tcodeStream.athrow();\r", "+\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\r", "+}\r", "-\t */\r", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\t\tif ((bits & IsReachableMASK) == 0)\r", "-\t\t\treturn;\r", "-\t\tint pc = codeStream.position;\r", "-\t\texception.generateCode(currentScope, codeStream, true);\r", "-\t\tcodeStream.athrow();\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "440fc64700849c9899b1ffc8f11fb526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": "  \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\t\t\t\t\t// TODO (frederic) remove following line to fix bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=62650", "-\t\t\t\t\t\t\tif (this.ast.apiLevel >= AST.JLS3) param.setVarargs(argExpr.argument.isVarArgs());", "+\t\t\t\t\t\t\tif (this.ast.apiLevel >= AST.JLS3) {", "+\t\t\t\t\t\t\t\tparam.setVarargs(argExpr.argument.isVarArgs());", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48dba77ebdde5665181e70ca3ac5fdc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (!this.isImplicitThis() && !checkAccess(scope.methodScope()))", "+\t\tif (!this.isImplicitThis() &&!checkAccess(scope.methodScope())) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c4261cb91cd8db8a0317954e1402496", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic boolean visit(WhileStatement whileStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(WhileStatement whileStatement, BlockScope scope)", "diff": ["-\t\tif (this.preferences.insert_space_in_while_condition) this.scribe.space();", "+\t\tif (this.preferences.insert_space_in_while_condition) {", "+\t\t\tthis.scribe.space();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "510de9fb2345146f57566d416c6bab84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f282201313bf63591cd59f68d6da8a0cd9a54cea", "commitAfterChange": "960f450a0ee803d3cb5160524b385397466d72b1", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedAllocationExpression qualifiedAllocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedAllocationExpression qualifiedAllocationExpression, \t\tBlockScope scope)", "diff": ["+\t\t} else {", "+\t\t\tthis.scribe.space();", "-\t\tthis.scribe.space();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5baa41c0e3437dd7e43ffa0b2a3fad5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/AnnotationMethodInfo.java", "commitBeforeChange": "d751fbd26835387a14345340c01d00dcd86c2032", "commitAfterChange": "dfd9d084570d37dc2caa997c9e4df246066ded9e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static MethodInfo createAnnotationMethod(byte classFileBytes[], int offsets[], int offset)", "signatureAfterChange": "  public static MethodInfo createAnnotationMethod(byte classFileBytes[], int offsets[], int offset)", "diff": ["-\t\tif (annotations != null)", "+\t\tif (annotations != null) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "601b04ddc95ab27fd1faf8cd01cbefbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "c768bb705d25a055607160ce11d239f196ca5653", "commitAfterChange": "7daedb60ca274e13e941cb615b58a6c663d3ad95", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " protected int resolveLevel(MessageSend messageSend)", "signatureAfterChange": " protected int resolveLevel(MessageSend messageSend)", "diff": ["-\tif (method == null) return INACCURATE_MATCH;", "+\tif (method == null) {", "+\t\treturn INACCURATE_MATCH;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60f263e99309d61e4892c3c887f9b220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": " \tprotected void setUp () throws Exception", "signatureAfterChange": " \tprotected void setUp () throws Exception", "diff": ["-\t\tif (discard) workingCopies = null;", "+\t\tif (discard) {", "+\t\t\tworkingCopies = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6327529a5c24cea9bfc022727059bd19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f282201313bf63591cd59f68d6da8a0cd9a54cea", "commitAfterChange": "960f450a0ee803d3cb5160524b385397466d72b1", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "diff": ["+\t\t} else {", "+\t\t\tthis.scribe.space();", "-\t\tthis.scribe.space();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "693b4eb9c4fec1899d6783e0de2a5fd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static MatchLocatorParser createParser(ProblemReporter problemReporter, MatchLocator locator)", "signatureAfterChange": "  public static MatchLocatorParser createParser(ProblemReporter problemReporter, MatchLocator locator)", "diff": ["-\tif ((locator.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0)", "+\tif ((locator.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7369cb4055863e6488bb3f717de46628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "160d21b2b94d157fab5dde01db5f3d2d3d807918", "commitAfterChange": "0d8ca64730552aee65d20ec58c4bd840971b7de0", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tprotected void setRawClasspath0(IClasspathEntry[] rawEntries) \t\tthrows JavaModelException", "signatureAfterChange": " \tprotected void setRawClasspath0(IClasspathEntry[] rawEntries) \t\tthrows JavaModelException", "diff": ["+\t\t\t} else {", "+\t\t\t\tinfo.classpath = rawEntries;", "+\t\t\t", "-\t\t\tinfo.classpath = rawEntries;", "-\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7500654debf7063e28856b96ba8b1189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic boolean visit( \t\tSynchronizedStatement synchronizedStatement, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tSynchronizedStatement synchronizedStatement, \t\tBlockScope scope)", "diff": ["-\t\tif (this.preferences.insert_space_in_synchronized_condition) this.scribe.space();", "+\t\tif (this.preferences.insert_space_in_synchronized_condition) {", "+\t\t\tthis.scribe.space();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "794dd9c233566539b97bb1fbe3b04b5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t\t \tpublic void print(char[] s, boolean considerSpaceIfAny)", "signatureAfterChange": " \t\t \tpublic void print(char[] s, boolean considerSpaceIfAny)", "diff": ["-\t\tif (considerSpaceIfAny) this.space();", "+\t\tif (considerSpaceIfAny) {", "+\t\t\tthis.space();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac14c9f5b60276dddf7022c103310f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "bd297a6cb55c56ac121bf45ea00a0a13e2fd1cf7", "commitAfterChange": "84c2b2d439389ef2bf27541bfd5429ac732732a4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic void resolve(BlockScope scope)", "diff": ["+\t\t\r", "-\t\tif (exceptionType == NullBinding)\r", "+\t\t\r", "+\t\tif (exceptionType == NullBinding){\r", "+\t\t\t// if compliant with 1.4, this problem will be ignored (see ProblemReport.computeSeverity())\r", "+\t \t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b52fb0fb0305fc9be84623961cbb132", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java", "commitBeforeChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "commitAfterChange": "24134b187b46ea16212a45107324227f46ba3e4a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeArguments()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeArguments()", "diff": ["-\t\tif (this.typeArguments != null) return typeArguments;", "+\t\tif (this.typeArguments != null) {", "+\t\t\treturn typeArguments;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f72fb6abfb400a34cedc523f8a8228e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "73e6c55b6cebcb032c8128286708483f86167b64", "commitAfterChange": "5326f4925981afee39790c88bc133bd18e542033", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 243, "signatureBeforeChange": "  public CompilationUnitDeclaration parse( \tICompilationUnit sourceUnit,  \tCompilationResult compilationResult, \tint start, \tint end)", "signatureAfterChange": "  public CompilationUnitDeclaration parse( \tICompilationUnit sourceUnit,  \tCompilationResult compilationResult, \tint start, \tint end)", "diff": ["-\t\t\tif (end != -1) this.annotationParser.scanner.resetTo(start, end);", "+\t\t\tif (end != -1) {", "+\t\t\t\tthis.annotationParser.scanner.resetTo(start, end);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80d4e8615323962a184ab9d0dae16169", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "61d09a86467b5181e97f5bb9e14c930813d4a727", "commitAfterChange": "c614621106519ff8481a1054577c7b362708dd68", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": " \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["+\t\t\t\t} else {", "+\t\t\t\t\tflowContext.recordSettingFinal(lastFieldBinding, this);", "-\t\t\t\tflowContext.recordSettingFinal(lastFieldBinding, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf4dac1599e4c04a2be74288c0fe03c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "6c5ed1b4ed06e066835a3bf2ea35d093c31d8a42", "commitAfterChange": "8bc47c693f418d320513158fd7b4c7024ff227d6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\t\t\tif (hasChangedContentForDependents)\r", "+\t\t\tif (hasChangedContentForDependents){\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de237a1064272852ffd9ef2ab80fd6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic boolean visit( \t\tConstructorDeclaration constructorDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tConstructorDeclaration constructorDeclaration, \t\tClassScope scope)", "diff": ["-\t\tif (constructorDeclaration.modifiers != NO_MODIFIERS) this.scribe.printModifiers();", "-\t", "+\t\tif (constructorDeclaration.modifiers != NO_MODIFIERS) {", "+\t\t\tthis.scribe.printModifiers();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9437561b4c16670e517d32b07a5155eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-\t\tif (returnType != null) returnType.traverse(this, methodDeclarationScope);", "-\t", "+\t\tif (returnType != null) {", "+\t\t\treturnType.traverse(this, methodDeclarationScope);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d7c7b560ddae655b3957bd2b825bf2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\t \tpublic void manageSyntheticReadAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \t\t \tpublic void manageSyntheticReadAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (useDelegate) lastReceiverType = this.delegateThis.type;", "-", "+\t\tif (useDelegate) {", "+\t\t\tlastReceiverType = this.delegateThis.type;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f48839a431876b162c1c784debf3bde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic boolean visit(IfStatement ifStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(IfStatement ifStatement, BlockScope scope)", "diff": ["-\t\tif (this.preferences.insert_space_in_if_condition) this.scribe.space();", "+\t\tif (this.preferences.insert_space_in_if_condition) {", "+\t\t\tthis.scribe.space();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4b5edf787196cf79783c70263ab4672", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["+}\r", "+public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\tif (visitor.visit(this, blockScope)) {\r", "+\t\texception.traverse(visitor, blockScope);\r", "-\r", "-\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\t\tif (visitor.visit(this, blockScope))\r", "-\t\t\texception.traverse(visitor, blockScope);\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t}\r", "+\tvisitor.endVisit(this, blockScope);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0fea0d39438ccb17f64b40f42c3042e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "38590129939501d58d89738289276afaa02e2706", "commitAfterChange": "0a902f02dbe85869aef1b7ecd659a6f0a0c2a6cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "signatureAfterChange": "\r public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "diff": ["-public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb){\r", "-\r", "-\tif ( (left.constant != NotAConstant) && (right.constant != NotAConstant) )\r", "-\t{\tconstant = Constant.computeConstantOperationEQUAL_EQUAL(left.constant,rightTb.id,EQUAL_EQUAL,right.constant,rightTb.id);\r", "+public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb) {\r", "+\tif ((left.constant != NotAConstant) && (right.constant != NotAConstant)) {\r", "+\t\tconstant =\r", "+\t\t\tConstant.computeConstantOperationEQUAL_EQUAL(\r", "+\t\t\t\tleft.constant,\r", "+\t\t\t\trightTb.id,\r", "+\t\t\t\tEQUAL_EQUAL,\r", "+\t\t\t\tright.constant,\r", "+\t\t\t\trightTb.id);\r", "-\t\t\tconstant = Constant.fromValue(! constant.booleanValue()) ;}\r", "-\telse\r", "-\t\tconstant = NotAConstant ;\r", "+\t\t\tconstant = Constant.fromValue(!constant.booleanValue());\r", "+\t} else {\r", "+\t\tconstant = NotAConstant;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2510690527808a1c684c166200445dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic boolean match(ExtraDimension node, Object other)", "signatureAfterChange": " \tpublic boolean match(ExtraDimension node, Object other)", "diff": ["-\t */", "-\tpublic boolean match(ExtraDimension node, Object other) {", "-\t\tif (!(other instanceof ExtraDimension))", "-\t\t\treturn false;", "-\t\tExtraDimension o = (ExtraDimension) other;", "-\t\treturn safeSubtreeListMatch(node.annotations(), o.annotations());", "+\t */", "+\tpublic boolean match(ExtraDimension node, Object other) {", "+\t\tif (!(other instanceof ExtraDimension)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tExtraDimension o = (ExtraDimension) other;", "+\t\treturn safeSubtreeListMatch(node.annotations(), o.annotations());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb804a521ffd6da26c381ed6bf695d3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["+}\r", "+public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\tif (visitor.visit(this, blockScope)) {\r", "+\t\texception.traverse(visitor, blockScope);\r", "-\r", "-\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\t\tif (visitor.visit(this, blockScope))\r", "-\t\t\texception.traverse(visitor, blockScope);\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t}\r", "+\tvisitor.endVisit(this, blockScope);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be0986ff03593b6c79f5fbd4ee7c5551", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (useDelegate) lastReceiverType = this.delegateThis.type;", "-", "+\t\tif (useDelegate) {", "+\t\t\tlastReceiverType = this.delegateThis.type;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf32e53bae788b64f363b9619926fd8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "886274eeca44ac156a0ab29fb479330630b97083", "commitAfterChange": "0df073aaf80ff21c61e718b91c8d484463b96210", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 246, "signatureBeforeChange": " public void javadocMissingThrowsClassName(int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocMissingThrowsClassName(int sourceStart, int sourceEnd, int modifiers)", "diff": ["+}", "-\tif (javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers))", "+\tif (javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0a8875d8c048e2865be040bb69fede9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic boolean visit(AssertStatement assertStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(AssertStatement assertStatement, BlockScope scope)", "diff": ["-\t\t\tif (this.preferences.insert_space_after_colon_in_assert) this.scribe.space();", "+\t\t\tif (this.preferences.insert_space_after_colon_in_assert) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40c337a47416aa4910ac55c52b86f7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\t \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "\t \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\t\tif (this.resolvedType != null) return this.resolvedType;", "+\t\tif (this.resolvedType != null) {", "+\t\t\treturn this.resolvedType;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4d4322b66437a7d789990f2b3b7f8c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void printNextToken(int[] expectedTokenTypes)", "signatureAfterChange": "  \tpublic void printNextToken(int[] expectedTokenTypes)", "diff": ["-\t\t\t\t\tif (i > 0) expectations.append(',');", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\texpectations.append(',');", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ee064a62b21144e29a297c7c02c0f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void generateStoreSaveValueIfNecessary(CodeStream codeStream)", "signatureAfterChange": "  public void generateStoreSaveValueIfNecessary(CodeStream codeStream)", "diff": ["-\tif (this.saveValueVariable != null) codeStream.store(this.saveValueVariable, false);", "+\tif (this.saveValueVariable != null) {", "+\t\tcodeStream.store(this.saveValueVariable, false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5c21845ae978529e58a01935e4b02e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavadocContents.java", "commitBeforeChange": "758384b437a0774b752cc93ee115caa6a5280651", "commitAfterChange": "b031afa5d276b867791e1b801c0ddbbd905837a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic String getMethodDoc(IMethod child) throws JavaModelException", "signatureAfterChange": " \tpublic String getMethodDoc(IMethod child) throws JavaModelException", "diff": ["-\t\t\tif (range == UNKNOWN_FORMAT) throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.UNKNOWN_JAVADOC_FORMAT, child));", "+\t\t\tif (range == UNKNOWN_FORMAT) {", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.UNKNOWN_JAVADOC_FORMAT, child));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d332c07f613561bc7242f9d46a50914c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\t\tif (typeDeclaration.modifiers != NO_MODIFIERS) this.scribe.printModifiers();", "-\t\t", "+\t\tif (typeDeclaration.modifiers != NO_MODIFIERS) {", "+\t\t\tthis.scribe.printModifiers();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d499752c20333c255c37cc428998018a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6af4748240d783fb0fd75666c88ce3ea32b7386e", "commitAfterChange": "c4bbe81e5ffd7d180da7485d9b35d8dbf9b1703c", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "signatureAfterChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "diff": ["-\t\t\texpression.checkAgainstFinalTargetType(targetType);", "+\t\t\t} else {", "+\t\t\t\texpression.checkAgainstFinalTargetType(targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9761666921561e3f48a06ebd29b514e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void generateReceiver(CodeStream codeStream)", "signatureAfterChange": " public void generateReceiver(CodeStream codeStream)", "diff": ["-\tif (delegateThis != null) codeStream.getfield(delegateThis); // delegated field access", "+\tif (delegateThis != null) {", "+\t\tcodeStream.getfield(delegateThis); // delegated field access", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "decfb48542f30fd921952a41e61eebb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "c4ac6c5c5f3a163bd1aa0701449a9d7831ba6649", "commitAfterChange": "a4064954d1a82b3602f2e6599e710f740f145ab4", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["+\t\t\t} else {", "+\t\t\t\tnodeSet.addMatch(node, this.patternLocator.resolveLevel(node));", "-\t\t\tnodeSet.addMatch(node, this.patternLocator.resolveLevel(node));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e04e01499e5876097dba937412fbd48d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tpublic void printNextToken(int[] expectedTokenTypes, boolean considerSpaceIfAny, boolean considerNewLineAfterComment)", "signatureAfterChange": " \t \tpublic void printNextToken(int[] expectedTokenTypes, boolean considerSpaceIfAny, boolean considerNewLineAfterComment)", "diff": ["-\t\t\t\t\tif (i > 0) expectations.append(',');", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\texpectations.append(',');", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e62b1a39c2d2fb2dd9da2923537418fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+ */ \r", "+public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\tif ((bits & IsReachableMASK) == 0) {\r", "+\t\treturn;\r", "+\tint pc = codeStream.position;\r", "+\texception.generateCode(currentScope, codeStream, true);\r", "+\tcodeStream.athrow();\r", "+\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\r", "+}\r", "-\t */\r", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\t\tif ((bits & IsReachableMASK) == 0)\r", "-\t\t\treturn;\r", "-\t\tint pc = codeStream.position;\r", "-\t\texception.generateCode(currentScope, codeStream, true);\r", "-\t\tcodeStream.athrow();\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e981f6bede5e986a77e428c81d3e36d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected int matchConstructor(MethodBinding constructor)", "signatureAfterChange": "  protected int matchConstructor(MethodBinding constructor)", "diff": ["-\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], /*this.pattern.parametersTypeArguments[i], 0,*/ constructor.parameters[i]);", "+\t\t\t// TODO (frederic) use this call to refine accuracy on parameter types", "+//\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], this.pattern.parametersTypeArguments[i], 0, constructor.parameters[i]);", "+\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], constructor.parameters[i]);", "-\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "+\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) {", "+//\t\t\t\t\tif (isErasureMatch) {", "+//\t\t\t\t\t\treturn ERASURE_MATCH;", "+//\t\t\t\t\t}", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f7ed503b18d26c9741ee9fa7f66d94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprotected void search(String patternString, int searchFor, int limitTo, int matchRule, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "signatureAfterChange": " \tprotected void search(String patternString, int searchFor, int limitTo, int matchRule, IJavaSearchScope scope, SearchRequestor requestor) throws CoreException", "diff": ["-\t\tif (patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1)", "+\t\tif (patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f18896c2d0297d10e00854275517e82d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/Archive.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void close()", "signatureAfterChange": "  \tpublic void close()", "diff": ["-\t\t\tif (this.zipFile != null) this.zipFile.close();", "+\t\t\tif (this.zipFile != null) {", "+\t\t\t\tthis.zipFile.close();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f45740ba7fc2281840a5209c4119e223", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r \tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "diff": ["+}\r", "+public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "+\tif (visitor.visit(this, blockScope)) {\r", "+\t\texception.traverse(visitor, blockScope);\r", "-\r", "-\tpublic void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\t\tif (visitor.visit(this, blockScope))\r", "-\t\t\texception.traverse(visitor, blockScope);\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t}\r", "+\tvisitor.endVisit(this, blockScope);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5846fe211707f18024d8fbe4973878b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d2d6e9bfd1e325674faee63a94dea6dbcdc53df", "commitAfterChange": "11485ee06e6b525970c47a5d04dca44f93a50e26", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\t\t\tif (!javaElement.exists()) System.out.println(\"\\t\\tWARNING: this element does NOT exist!\"); //$NON-NLS-1$", "+\t\t\tif (!javaElement.exists()) {", "+\t\t\t\tSystem.out.println(\"\\t\\tWARNING: this element does NOT exist!\"); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6be00a1313f418a80c61311f34f2c57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "c8d00cbf2814182ef1ce07d7254dc4a8d85157bc", "commitAfterChange": "76285abc2e18a9626166def15ee7d0b4124f0aa5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int literalIndex(char[] utf8Constant)", "signatureAfterChange": " public int literalIndex(char[] utf8Constant)", "diff": ["-\t\t\t} else", "+\t\t\t} else {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7bbd3a7bfe57e535a585f421a0c1941", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic final boolean isTypeUseDeprecated(TypeBinding type, Scope scope)", "signatureAfterChange": " \tpublic final boolean isTypeUseDeprecated(TypeBinding type, Scope scope)", "diff": ["-\t\tif (type.isArrayType())", "+\t\tif (type.isArrayType()) {", "+\t\t}", "-\t\tif ((this.bits & ASTNode.InsideJavadoc) ==0 &&", "+\t\tif ((this.bits & ASTNode.InsideJavadoc) == 0 &&"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9ccf2378187ef38a9972e11699d2209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "e27db11146c4f5d303256c268be6450247be1bd9", "commitAfterChange": "adc7524aebd9a4a97b97fcc571a0ede6619bc1b9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private void buildDeltas(SimpleLookupTable deltas)", "signatureAfterChange": "  private void buildDeltas(SimpleLookupTable deltas)", "diff": ["-\tif (imageBuilder.build(deltas))", "+\tif (imageBuilder.build(deltas)) {", "-\telse {", "+\t} else {"]}], "num": 13924}
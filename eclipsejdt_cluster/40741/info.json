{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a5dea4c6963ff5ea560e807bfe98664", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cdc6896c2094cc0f020f3dcf0960bb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "599b7f9320007b85e54693f7e40a4ec49fdde55f", "commitAfterChange": "ffe187ffaf97e93da8eeb74a73165230892e2f7a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void runNegativeTest(String[] testFiles, ExpectedProblem[] expectedProblems, String[] classLib, boolean shouldFlushOutputDirectory)", "signatureAfterChange": " protected void runNegativeTest(String[] testFiles, String expectedProblemLog, String[] classLib, boolean shouldFlushOutputDirectory, Map customOptions, boolean generateOutput)", "diff": ["-}", "-protected void runNegativeTest(String[] testFiles, ExpectedProblem[] expectedProblems, String[] classLib, boolean shouldFlushOutputDirectory) {", "-", "-\tif (shouldFlushOutputDirectory) Util.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\tIProblemFactory problemFactory = getProblemFactory();", "-\tRequestor requestor = getRequestor(problemFactory);", "-\trequestor.expectedProblems(expectedProblems);", "-\tCompiler batchCompiler =", "-\t\tnew Compiler(", "-\t\t\tgetNameEnvironment(new String[] {}, classLib),", "-\t\t\tgetErrorHandlingPolicy(),", "-\t\t\tgetCompilerOptions(),", "-\t\t\trequestor,", "-\t\t\tproblemFactory);", "-\tbatchCompiler.compile(compilationUnits(testFiles)); // compile all files together", "-\tif (!requestor.hasErrors) {", "-\t\tString sourceFile = testFiles[0];", "-\t\t", "-\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t", "-\t\tassertTrue(", "-\t\t\tthis.verifier.failureReason,", "-\t\t\tthis.verifier.verifyClassFiles(sourceFile, className, null, this.classpaths)", "-\t\t);", "-\t}", "-}", "+ */", "+protected void runNegativeTest(String[] testFiles, String expectedProblemLog, String[] classLib, boolean shouldFlushOutputDirectory, Map customOptions, boolean generateOutput) {", "+\tRequestor requestor = new Requestor(problemFactory, OUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, generateOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd80e389d220033d1287289a77235ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprotected void runConformTestThrowingError( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments)", "signatureAfterChange": "  \tprotected void runConformTestThrowingError( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments)", "diff": ["-\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\tif (!requestor.hasErrors) {", "-\t\t\tString sourceFile = testFiles[0];", "+\t\tThrowable exception = null;", "+\t\ttry {", "+\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "+\t\t} catch(RuntimeException e){", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} catch(Error e) {", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} finally {", "-\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-", "-\t\t\tboolean passed = ", "-\t\t\t\tthis.verifier.verifyClassFilesThrowingError(", "-\t\t\t\t\tsourceFile, ", "-\t\t\t\t\tclassName, ", "-\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\tnull, ", "-\t\t\t\t\tvmArguments);", "-\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\tpassed);", "-\t\t} else {", "-\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "+\t\t\tif (!requestor.hasErrors) {", "+\t\t\t\tString sourceFile = testFiles[0];", "+\t", "+\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "+\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "+\t", "+\t\t\t\tboolean passed = ", "+\t\t\t\t\tthis.verifier.verifyClassFilesThrowingError(", "+\t\t\t\t\t\tsourceFile, ", "+\t\t\t\t\t\tclassName, ", "+\t\t\t\t\t\texpectedSuccessOutputString,", "+\t\t\t\t\t\tthis.classpaths, ", "+\t\t\t\t\t\tnull, ", "+\t\t\t\t\t\tvmArguments);", "+\t\t\t\tif (exception == null)", "+\t\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "+\t\t\t\t\t\tpassed);", "+\t\t\t} else {", "+\t\t\t\tif (exception == null)", "+\t\t\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "+\t\t\t}"]}], "num": 40741}
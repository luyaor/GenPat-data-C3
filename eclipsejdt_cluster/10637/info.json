{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e38e70d6265849e8519e08b3d8bd9365", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0791808a8b2f859b350908d9a0b2d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "3617e411ab09a4b93e5840b8e6d451f0c6a8a8c9", "commitAfterChange": "3f2dbb1c863e3e36f3c44754809ef2e96e6a175a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public SyntheticAccessMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding localTargetMethod)", "signatureAfterChange": " public SyntheticAccessMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding localTargetMethod)", "diff": ["+\t} else {", "+\t\t// TODO (philippe) MethodBindings do not implement equals() so how do we prevent adding 2 'equal' inherited methods?", "+\t\t// check to see if there is another equivalent inheritedMethod already added", "+\t\tIterator synthMethods = synthetics[METHOD_EMUL].keySet().iterator();", "+\t\twhile (synthMethods.hasNext()) {", "+\t\t\tObject method = synthMethods.next();", "+\t\t\tif (method instanceof MethodBinding)", "+\t\t\t\tif (inheritedMethodToBridge.areParameterErasuresEqual((MethodBinding) method))", "+\t\t\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ea2cfae7f96a66cc2d6672cb49687e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 34, "signatureBeforeChange": " public SyntheticAccessMethodBinding[] syntheticAccessMethods()", "signatureAfterChange": " public SyntheticAccessMethodBinding[] syntheticAccessMethods()", "diff": ["+// TODO (philippe) could be a performance issue since some senders are building the list just to count them", "-\tEnumeration fieldsOrMethods = synthetics[METHOD_EMUL].keys();", "-\twhile (fieldsOrMethods.hasMoreElements()) {", "+\tIterator fieldsOrMethods = synthetics[METHOD_EMUL].keySet().iterator();", "+\twhile (fieldsOrMethods.hasNext()) {", "-\t\tObject fieldOrMethod = fieldsOrMethods.nextElement();", "+\t\tObject fieldOrMethod = fieldsOrMethods.next();", "-\t\t\t\tbindings[index++] = methodAccessors[1]; // normal access", "+\t\t\t\tbindings[index++] = methodAccessors[1]; // normal access or bridge"]}], "num": 10637}
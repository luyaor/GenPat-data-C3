{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0633b9edff377c4986c13aa72ffae7e8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fac459a2b387f62ba74d5237d615246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "41f0e0054ad6ecc1ea34b869c24b09b45fb10ff6", "commitAfterChange": "57f71dbcbb6986e1c76d51b49e788951c6fe709e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r public IWorkingCopy getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory, boolean isManaged) throws JavaModelException", "diff": ["-public IWorkingCopy getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException {\r", "-\tWorkingCopy workingCopy = new WorkingCopy((IPackageFragment)getParent(), getElementName(), factory);\r", "+public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory, boolean isManaged) throws JavaModelException {\r", "+\tWorkingCopy workingCopy;\r", "+\tMap managedWorkingCopies = null;\r", "+\tJavaModelManager manager = null;\r", "+\tif (isManaged) {\r", "+\t\tmanager = JavaModelManager.getJavaModelManager();\r", "+\t\tmanagedWorkingCopies = manager.managedWorkingCopies;\r", "+\t\tworkingCopy = (WorkingCopy)managedWorkingCopies.get(this);\r", "+\t\tif (workingCopy != null) {\r", "+\t\t\tworkingCopy.managedCount++;\r", "+\t\t\treturn workingCopy;\r", "+\t\t}\r", "+\t}\r", "+\tworkingCopy = new WorkingCopy((IPackageFragment)getParent(), getElementName(), factory);\r", "+\tif (isManaged) {\r", "+\t\tmanagedWorkingCopies.put(this, workingCopy);\r", "+\r", "+\t\t// report added java delta\r", "+\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());\r", "+\t\tdelta.added(workingCopy);\r", "+\t\tmanager.registerJavaModelDelta(delta);\r", "+\t\tmanager.fire();\r", "+\t\t\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28887309709157a0fcdaae88cbfef5e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "60205bed5116ad3496dacec47d060779de36e647", "commitAfterChange": "af3a6832e3b1c1003f856c7a02d77d240881ed44", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory, boolean isManaged) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException", "diff": ["- */\r", "-public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory, boolean isManaged) throws JavaModelException {\r", "-\tWorkingCopy workingCopy;\r", "-\tMap managedWorkingCopies = null;\r", "-\tJavaModelManager manager = null;\r", "-\tif (isManaged) {\r", "-\t\tmanager = JavaModelManager.getJavaModelManager();\r", "-\t\tmanagedWorkingCopies = manager.managedWorkingCopies;\r", "-\t\tworkingCopy = (WorkingCopy)managedWorkingCopies.get(this);\r", "-\t\tif (workingCopy != null) {\r", "-\t\t\tworkingCopy.managedCount++;\r", "-\t\t\treturn workingCopy;\r", "-\t\t}\r", "-\t}\r", "-\tworkingCopy = new WorkingCopy((IPackageFragment)getParent(), getElementName(), factory);\r", "-\t// open the working copy now to ensure contents are that of the current state of this element\r", "-\tIBuffer buffer = factory == null ? null : factory.createBuffer(workingCopy);\r", "-\tworkingCopy.open(pm, buffer);\r", "-\tif (isManaged) {\r", "-\t\tmanagedWorkingCopies.put(this, workingCopy);\r", "-\t\t\r", "+ */\r", "+public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException {\r", "+\tWorkingCopy workingCopy = new WorkingCopy((IPackageFragment)getParent(), getElementName(), factory);\r", "+\t// open the working copy now to ensure contents are that of the current state of this element\r", "+\tIBuffer buffer = factory == null ? null : factory.createBuffer(workingCopy);\r", "+\tworkingCopy.open(pm, buffer);\r"]}], "num": 13907}
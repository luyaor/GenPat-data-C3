{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2493b41abc68ce12c82cb83f42b7cc1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10931da6345eed5c9d967ed7fd024a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "97a51de589d597058f0699be9a25a3de27447184", "commitAfterChange": "326a07288a3ef3e0cf65a2989bbc3eaedba0442c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tint nullStatus = this.initialization.nullStatus(flowInfo);", "+\t", "+\tint nullStatus = this.initialization.nullStatus(flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b32b420925dcf034b3d116577de373", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (FakedTrackingVariable.isAnyCloseable(this.resolvedType))", "-\t\tFakedTrackingVariable.analyseCloseableAllocation(currentScope, flowInfo, this);", "-", "+", "+\t// after having analysed exceptions above start tracking newly allocated resource:", "+\tif (FakedTrackingVariable.isAnyCloseable(this.resolvedType))", "+\t\tFakedTrackingVariable.analyseCloseableAllocation(currentScope, flowInfo, this);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b12e7ba3180d142217a8167395d7cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "1af5a4c9db5050a646b966ef94445c5d7d6791d8", "commitAfterChange": "eb4338d8d760c2f9a3b3f7cdfcea612b9c1ab6ca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tif (isStringSwitch) {", "+\t\t\t\t// the secret variable should be created before iterating over the switch's statements that could", "+\t\t\t\t// create more locals. This must be done to prevent overlapping of locals", "+\t\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=356002", "+\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "+\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "+\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "+\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;", "+\t\t\t}", "-\t\t\t}", "-\t\t\tif (isStringSwitch) {", "-\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "-\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "-\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "-\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;"]}], "num": 22396}
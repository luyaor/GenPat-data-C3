{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ece16dd225e9a99e3ad443b370dbfd5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173bc80ac4792898e6dd9b6359a2a0d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "59f134d776625487d5c6b62a9862cfb00a070d3e", "commitAfterChange": "96b4864be18ed8951f75fa1c52f7e975191f2b07", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void acceptQualifiedTypes()", "signatureAfterChange": "  \tprivate void acceptQualifiedTypes()", "diff": ["+\t\t}", "+\t\tif(this.acceptedAnnotations != null){", "+\t\t\tthis.acceptedAnswer = true;", "+\t\t\tfor (int i = 0; i < this.acceptedAnnotationsCount; i++) {", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tthis.requestor.acceptAnnotation(", "+\t\t\t\t\tthis.acceptedAnnotations[i][0],", "+\t\t\t\t\tthis.acceptedAnnotations[i][1],", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t}", "+\t\t\tthis.acceptedAnnotations = null;", "+\t\t\tthis.acceptedAnnotationsCount = 0;", "+\t\t}", "+\t\tif(this.acceptedEnums != null){", "+\t\t\tthis.acceptedAnswer = true;", "+\t\t\tfor (int i = 0; i < this.acceptedEnumsCount; i++) {", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\tthis.requestor.acceptEnum(", "+\t\t\t\t\tthis.acceptedEnums[i][0],", "+\t\t\t\t\tthis.acceptedEnums[i][1],", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t}", "+\t\t\tthis.acceptedEnums = null;", "+\t\t\tthis.acceptedEnumsCount = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd0ed509f2b9a6857ad1e8fb080b7127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private void readChunk(String[] docNames, DataInputStream stream, int index, int size) throws IOException", "signatureAfterChange": " private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException", "diff": ["-private void readChunk(String[] docNames, DataInputStream stream, int index, int size) throws IOException {", "-\tString current = stream.readUTF();", "+private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException {", "+\tString current = new String(readStreamChars(stream));", "-\t\tint start = stream.readUnsignedByte(); // number of identical characters at the beginning", "-\t\tint end = stream.readUnsignedByte(); // number of identical characters at the end", "-\t\tString next = stream.readUTF();", "+\t\tint start = (streamBuffer[this.bufferIndex++]&0xFF);", "+\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tint readSize = this.streamEnd - this.streamPos;", "+\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "+\t\t}", "+\t\tint end = (streamBuffer[this.bufferIndex++]&0xFF);", "+\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tint readSize = this.streamEnd - this.streamPos;", "+\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "+\t\t}", "+\t\tString next  = new String(readStreamChars(stream));"]}], "num": 31874}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2ae4c87f99734ea2c2064e08888b28e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82bb283f10fe7af7951e9f894b761192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java", "commitBeforeChange": "bd3f044e1dea55ab9b1dfed3ef25e6b3e161dec9", "commitAfterChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding genericType, int rank)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding genericType, int rank)", "diff": ["-\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, this.resolvedType.tagBits);", "+\t\t\t\tif (annotation == null) { // false alarm, implicit annotation is no conflict, but should be removed:", "+\t\t\t\t\tTypeBinding newBound = boundType.unannotated(true);", "+\t\t\t\t\t((WildcardBinding)this.resolvedType).bound = newBound;", "+\t\t\t\t\tthis.bound.resolvedType = newBound;", "+\t\t\t\t} else {", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, this.resolvedType.tagBits);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c96f90d842bfa34ca48345be48827b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b62a0575eabeb814900afcc3426a14b0da5fd6ad", "commitAfterChange": "fa4debd5be46821e4afe7fa2082f7a976e89007c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "signatureAfterChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "diff": ["-\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\tif (existingType instanceof TypeVariableBinding) {", "+\t\t\t\t// let type-use annotations override annotations on the type parameter declaration", "+\t\t\t\texistingType = existingType.unannotated(true);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\t}"]}], "num": 61234}
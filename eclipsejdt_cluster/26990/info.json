{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b0d7b511981454ec5ecc1f25f3ce0fe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1656cd5d6c729e8615be97d0cacf4bd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "33bcc97ba28fd6319a8c922b4f8d989e4aab5311", "commitAfterChange": "fe8f03030c996e7f3abaa101bf62fc6c88122090", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic EscapingExceptionCatchSite(ExceptionHandlingFlowContext catchingContext,\tReferenceBinding caughtException)", "signatureAfterChange": " \t\tpublic EscapingExceptionCatchSite(ExceptionHandlingFlowContext catchingContext,\tReferenceBinding caughtException, FlowInfo exceptionInfo)", "diff": ["-\t\tpublic EscapingExceptionCatchSite(ExceptionHandlingFlowContext catchingContext,\tReferenceBinding caughtException) {", "+\t\tfinal FlowInfo exceptionInfo; // flow leading to the location of throwing", "+\t\tpublic EscapingExceptionCatchSite(ExceptionHandlingFlowContext catchingContext,\tReferenceBinding caughtException, FlowInfo exceptionInfo) {", "+\t\t\tthis.exceptionInfo = exceptionInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42aba02bfed56708123ce5efb39f8821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "702c62fec0923d7526ca23efea5c1bb4f5a2ef27", "commitAfterChange": "48a78bfcb529886e24e5f62b1bc56f7d3678e46a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void analyzeExceptions()", "signatureAfterChange": "  \tprivate void analyzeExceptions()", "diff": ["+\t\tExceptionHandlingFlowContext ehfc;", "-\t\t\t\t\t\t\t\t\t new ExceptionHandlingFlowContext(null, this, Binding.NO_EXCEPTIONS, null, this.scope, FlowInfo.DEAD_END), ", "+\t\t\t\t\t\t\t\t\t ehfc = new ExceptionInferenceFlowContext(null, this, Binding.NO_EXCEPTIONS, null, this.scope, FlowInfo.DEAD_END), ", "+\t\t\tthis.thrownExceptions = ehfc.extendedExceptions == null ? Collections.emptySet() : new HashSet<TypeBinding>(ehfc.extendedExceptions);"]}], "num": 26990}
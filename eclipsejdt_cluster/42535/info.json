{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e15397735ba037a64aa5b9d8a57e78f9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e620833b8c7765d820fd99ae4318d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c76ca0258749c2717f441fbd5cdd6335fcc29bd3", "commitAfterChange": "00fb29417bfb5734c6eca9ef041023eab85e6eb6", "methodNumberBeforeChange": 299, "methodNumberAfterChange": 299, "signatureBeforeChange": " public void test255_progress()", "signatureAfterChange": " public void test255_progress()", "diff": ["-\trunProgressTest(", "-\t\tfalse/*shouldCompileOK*/,", "-\t\tnew String[] {", "-\t\t\t\"Y.java\",", "-\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\"}\\n\",", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "-\t\t+ \"  -useSingleThread\"", "-        + \" -cp \" + File.pathSeparator + File.pathSeparator + \"\\\"\" + OUTPUT_DIR + \"\\\"\"", "-\t\t+ \" -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-\t\t\"\"/*out output*/,", "-\t\t\"\"/*err output*/,", "-\t\tprogress,", "-\t\t\"----------\\n\" + ", "-\t\t\"[worked: 0 - remaining: 1]\\n\" + ", "-\t\t\"Beginning to compile\\n\" + ", "-\t\t\"Processing ---OUTPUT_DIR_PLACEHOLDER---/X.java\\n\" + ", "-\t\t\"[worked: 1 - remaining: 1]\\n\" + ", "-\t\t\"----------\\n\"", "-\t);", "+\tString setting= System.getProperty(\"jdt.compiler.useSingleThread\");", "+\ttry {", "+\t\tSystem.setProperty(\"jdt.compiler.useSingleThread\", \"true\");", "+\t\trunProgressTest(", "+\t\t\tfalse/*shouldCompileOK*/,", "+\t\t\tnew String[] {", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"public class Y {\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "+\t        + \" -cp \" + File.pathSeparator + File.pathSeparator + \"\\\"\" + OUTPUT_DIR + \"\\\"\"", "+\t\t\t+ \" -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "+\t\t\t\"\"/*out output*/,", "+\t\t\t\"\"/*err output*/,", "+\t\t\tprogress,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"[worked: 0 - remaining: 1]\\n\" + ", "+\t\t\t\"Beginning to compile\\n\" + ", "+\t\t\t\"Processing ---OUTPUT_DIR_PLACEHOLDER---/X.java\\n\" + ", "+\t\t\t\"[worked: 1 - remaining: 1]\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t} finally {", "+\t\tSystem.setProperty(\"jdt.compiler.useSingleThread\", setting == null ? \"false\" : setting);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a377fa6caddaa5d87e1454744480f91e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e1db8d4dbeb82ef211965c2ec07d2a51a3043b99", "commitAfterChange": "00d0740df9a9831befee6a5d66ec2fdb12e10db8", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void test148()", "signatureAfterChange": " public void test148()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"Y.java\",", "-\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "-\t\t\t\"class Y extends X {\\n\" +", "-\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "-\t\t\t\"}\\n\" + ", "-\t\t\t\"class A<T> {}\"", "-\t\t},", "+\tString baseLogPart1 = ", "-\t\t\"\t                               ^^^^^^^\\n\" + ", "-\t\t\"The method go(A) of type Y must override a superclass method\\n\" + ", "+\t\t\"\t                               ^^^^^^^\\n\";", "+\tString baseLogPart2 = ", "-\t\t\"----------\\n\"", "+\t\t\"----------\\n\";", "+\tString overrideLog= \"The method go(A) of type Y must override a superclass method\\n\";", "+\t// warning message differs at 1.6 level", "+\tif (COMPLIANCE_1_6.compareTo(this.complianceLevel) <= 0) {", "+\t\toverrideLog = \"The method go(A) of type Y must override or implement a supertype method\\n\";", "+\t}", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"Y.java\",", "+\t\t\t\"abstract class X { abstract <T extends Object> T go(A<T> a); }\\n\" +", "+\t\t\t\"class Y extends X {\\n\" +", "+\t\t\t\"\t@Override <T extends Object> T go(A a) { return null; }\\n\" +", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class A<T> {}\"", "+\t\t}, baseLogPart1 + overrideLog + baseLogPart2"]}], "num": 42535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a1700b911a4d57af5b32b5b07fe94e8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47377ef2b247f463745b6ade3be511b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean isInterchangeableWith(final LookupEnvironment environment, final TypeVariableBinding otherVariable)", "signatureAfterChange": " \tpublic boolean isInterchangeableWith(final LookupEnvironment environment, final TypeVariableBinding otherVariable)", "diff": ["-\t\t\t\t\tif (this.superInterfaces[i].erasure() != otherVariable.superInterfaces[i])", "+\t\t\t\t\tif (this.superInterfaces[i].erasure() != otherVariable.superInterfaces[i].erasure())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d582e4185972957f0f309a5373c6ebcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "dbc8b1f0fda99317647c13855567d7751d2ae09c", "commitAfterChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType) { // no need to issue a checkcast if already done as genericCast", "+\t\tif (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType.erasure()) { // no need to issue a checkcast if already done as genericCast"]}], "num": 56485}
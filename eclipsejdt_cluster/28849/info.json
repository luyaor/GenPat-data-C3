{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62c2b0c5bf6b3f995b5689c3ad26f931", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0905326782ee9cc201e901290b120d04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, boolean didAlreadyComplain)", "signatureAfterChange": " public int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int previousComplaintLevel)", "diff": ["-\t// Report an error if necessary", "-\tpublic boolean complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, boolean didAlreadyComplain) {", "-", "-\t\tif ((flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0) {", "-\t\t\tthis.bits &= ~ASTNode.IsReachable;", "-\t\t\tboolean reported = flowInfo == FlowInfo.DEAD_END;", "-\t\t\tif (!didAlreadyComplain && reported) {", "+// complaintLevel = 0 if was reachable up until now, 1 if fake reachable (deadcode), 2 if fatal unreachable (error)", "+public int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int previousComplaintLevel) {", "+\tif ((flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0) {", "+\t\tthis.bits &= ~ASTNode.IsReachable;", "+\t\tif (flowInfo == FlowInfo.DEAD_END) {", "+\t\t\tif (previousComplaintLevel < COMPLAINED_UNREACHABLE) {", "-\t\t\treturn reported; // keep going for fake reachable", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t\t\treturn COMPLAINED_UNREACHABLE;", "+\t\t} else {", "+\t\t\tif (previousComplaintLevel < COMPLAINED_FAKE_REACHABLE) {", "+\t\t\t\tscope.problemReporter().fakeReachable(this);", "+\t\t\treturn COMPLAINED_FAKE_REACHABLE;", "+\t\t}", "+\t}", "+\treturn previousComplaintLevel;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb19a7f1ee124149310e9086975919", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "0d164c5fd27f905997905e2364acd7d413efe08e", "commitAfterChange": "cb53eff5db7d4f76eb24c91a2abecee1441f0bbc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void computeVisibleElementBindings()", "signatureAfterChange": "  \tprivate void computeVisibleElementBindings()", "diff": ["-\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null &&", "-\t\t\t\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "-\t\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null) {", "+\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "+\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "+\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "+\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t/*(Incase fieldDeclaration != null is not sufficient to infer that", "+\t\t\t\t\t\t\t  proposal is being asked inside initializer of field decl, use the below if", "+\t\t\t\t\t\t\t  block instead of the above)", "+\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null) {", "+\t\t\t\t\t\t\t ", "+\t\t\t\t\t\t\t\tif (fieldDeclaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\t\t\t\t\tif (fieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else { // The sourceEnd may not yet be set", "+\t\t\t\t\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(this.assistNode, fieldDeclaration.initialization);", "+\t\t\t\t\t\t\t\t\tif (detector.containsCompletionNode()) {", "+\t\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "+\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "+\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "+\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}*/"]}], "num": 28849}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c47330e9b9df47dc00e5ea24652af14", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6474b8527ff3732d04aef472a290a93d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "d391d15f4924a047754ee4985cc846efae62d6e3", "commitAfterChange": "1b58032df56d9cb355fbe3e4f4bdf1875eace04b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t// check if field is hiding some variable", "+\t\t\t// check if field is hiding some variable - issue is that field binding already got inserted in scope", "-\t\t\t\tif (declaringType.superclass != null) { ", "+\t\t\t\tif (declaringType.superclass != null) {", "-\t\t\t\t\tMethodScope outerMethodScope = classScope.enclosingMethodScope();", "-\t\t\t\t\tif (outerMethodScope != null) { // local type scenario", "-\t\t\t\t\t\tBinding existingVariable = outerMethodScope.getBinding(name, BindingIds.VARIABLE, this);", "-\t\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tScope outerScope = classScope.parent;", "+\t\t\t\t\tif (outerScope == null){ ", "+\t\t\t\t\t\tSystem.out.println();", "+\t\t\t\t\t}", "+\t\t\t\t\tBinding existingVariable = outerScope.getBinding(name, BindingIds.VARIABLE, this);", "+\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "+\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0575ded18bc0fc31bcbad70cd2c3ba6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "bf1ba1c1732b0be00fbd03cfd8ae394b6a169e63", "commitAfterChange": "debb51f61b0b4a5b1a6926f67a451ba72125546c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["+\t\t\t// check if field is hiding some variable", "+\t\t\tClassScope classScope = initializationScope.enclosingClassScope();", "+\t\t\tif (classScope != null) {", "+\t\t\t\tSourceTypeBinding declaringType = classScope.enclosingSourceType();", "+\t\t\t\tboolean checkLocal = true;", "+\t\t\t\tif (declaringType.superclass != null) { ", "+\t\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, name, this);", "+\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()) {", "+\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\t\tcheckLocal = false; // already found a matching field", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (checkLocal) {", "+\t\t\t\t\tMethodScope outerMethodScope = classScope.enclosingMethodScope();", "+\t\t\t\t\tif (outerMethodScope != null) { // local type scenario", "+\t\t\t\t\t\tBinding existingVariable = outerMethodScope.getBinding(name, BindingIds.VARIABLE, this);", "+\t\t\t\t\t\tif (existingVariable != null && existingVariable.isValidBinding()){", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}], "num": 17040}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d90e68eb01151da1fc0f87b2fad4f88", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af4cd6e155eaaa623781a09077a7ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tboolean preserveCurrentHandler =", "-\t\t\t\t(preserveExceptionHandler[i", "-\t\t\t\t\t/ ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize)))", "-\t\t\t\t\t!= 0;", "-\t\t\tif (preserveCurrentHandler) {", "-\t\t\t\texceptionLabels[i] =", "-\t\t\t\t\tnew ExceptionLabel(", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\tcatchArguments[i].binding.type);", "-\t\t\t}", "+\t\t\texceptionLabels[i] = new ExceptionLabel(codeStream, catchArguments[i].binding.type);", "-\t\t\t\tboolean preserveCurrentHandler =", "-\t\t\t\t\t(preserveExceptionHandler[i / ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t\tif (preserveCurrentHandler) {", "-\t\t\t\t\texceptionLabels[i].placeEnd();", "-\t\t\t\t}", "+\t\t\t\texceptionLabels[i].placeEnd();", "-\t\t\t\t\tboolean preserveCurrentHandler =", "-\t\t\t\t\t\t(preserveExceptionHandler[i / ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t\t\tif (preserveCurrentHandler) {", "-\t\t\t\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "-\t\t\t\t\t\tif (preTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\t\tpreTryInitStateIndex);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texceptionLabels[i].place();", "-\t\t\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\t\t\t// optimizing the case where the exception variable is not actually used", "-\t\t\t\t\t\tLocalVariableBinding catchVar;", "-\t\t\t\t\t\tint varPC = codeStream.position;", "-\t\t\t\t\t\tif ((catchVar = catchArguments[i].binding).resolvedPosition != -1) {", "-\t\t\t\t\t\t\tcodeStream.store(catchVar, false);", "-\t\t\t\t\t\t\tcatchVar.recordInitializationStartPC(codeStream.position);", "-\t\t\t\t\t\t\tcodeStream.addVisibleLocalVariable(catchVar);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, catchArguments[i].sourceStart);", "-\t\t\t\t\t\t// Keep track of the pcs at diverging point for computing the local attribute", "-\t\t\t\t\t\t// since not passing the catchScope, the block generation will exitUserScope(catchScope)", "-\t\t\t\t\t\tcatchBlocks[i].generateCode(scope, codeStream);", "+\t\t\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "+\t\t\t\t\tif (preTryInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "+\t\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\t\tpreTryInitStateIndex);", "+\t\t\t\t\texceptionLabels[i].place();", "+\t\t\t\t\tcodeStream.incrStackSize(1);", "+\t\t\t\t\t// optimizing the case where the exception variable is not actually used", "+\t\t\t\t\tLocalVariableBinding catchVar;", "+\t\t\t\t\tint varPC = codeStream.position;", "+\t\t\t\t\tif ((catchVar = catchArguments[i].binding).resolvedPosition != -1) {", "+\t\t\t\t\t\tcodeStream.store(catchVar, false);", "+\t\t\t\t\t\tcatchVar.recordInitializationStartPC(codeStream.position);", "+\t\t\t\t\t\tcodeStream.addVisibleLocalVariable(catchVar);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, catchArguments[i].sourceStart);", "+\t\t\t\t\t// Keep track of the pcs at diverging point for computing the local attribute", "+\t\t\t\t\t// since not passing the catchScope, the block generation will exitUserScope(catchScope)", "+\t\t\t\t\tcatchBlocks[i].generateCode(scope, codeStream);", "+", "-\t\t\t\t\tif (!catchExits[i] && preserveCurrentHandler) {", "+\t\t\t\t\tif (!catchExits[i]) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2143acba94de08a72b464c89d06030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "4588c3b4f2f50edc1b7f6b03c5e9b0e36a6638a1", "commitAfterChange": "3d13a3235f809dfb48a127bd36dbb2c405e56ef1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\tboolean isStackMapFrameCodeStream = codeStream instanceof StackMapFrameCodeStream;", "-\tboolean requiresCatchesExit = false;", "+\t\tthis.exitAnyExceptionHandler();", "-\t\t\tcatchesExitLabel = new BranchLabel(codeStream);", "+\t\t\t\tenterAnyExceptionHandler(codeStream);", "+\t\t\t\tthis.exitAnyExceptionHandler();", "-\t\t\t\t\t\t\trequiresCatchesExit = true;", "-\t\t\t\t\t\t\tcodeStream.goto_(catchesExitLabel);", "+\t\t\t\t\t\t\t// inlined finally here can see all merged variables", "+\t\t\t\t\t\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t\t\t\t\t\t((StackMapFrameCodeStream) codeStream).pushStateIndex(this.naturalExitMergeInitStateIndex);", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (this.catchExitInitStateIndexes[i] != -1) {", "+\t\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.catchExitInitStateIndexes[i]);", "+\t\t\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.catchExitInitStateIndexes[i]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// entire sequence for finally is associated to finally block", "+\t\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "+\t\t\t\t\t\t\tcodeStream.goto_(postCatchesFinallyLabel);", "+\t\t\t\t\t\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t\t\t\t\t\t((StackMapFrameCodeStream) codeStream).popStateIndex();", "+\t\t\t\t\t\t\t}", "-\t\tthis.exitAnyExceptionHandler();", "-\t\t\t\t\t\tboolean isStackMapFrameCodeStream = codeStream instanceof StackMapFrameCodeStream;", "-\t\t\t\t\t\tif (postCatchesFinallyLabel != null && requiresCatchesExit) {", "+\t\t\t\t\t\tif (postCatchesFinallyLabel != null) {", "-\t\t\tif (requiresCatchesExit) {", "-\t\t\t\tswitch(finallyMode) {", "-\t\t\t\t\tcase FINALLY_INLINE :", "-\t\t\t\t\t\t// inlined finally here can see all merged variables", "-\t\t\t\t\t\tif (this.preTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatchesExitLabel.place();", "-\t\t\t\t\t\t// entire sequence for finally is associated to finally block", "-\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "-\t\t\t\t\t\tpostCatchesFinallyLabel.place();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\tif (postCatchesFinallyLabel != null) {", "+\t\t\t\tpostCatchesFinallyLabel.place();"]}], "num": 43093}
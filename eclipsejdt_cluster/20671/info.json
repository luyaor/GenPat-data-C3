{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b442c85cbb928c83a27b8707cace246", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6ed18146ab1d4b77468235121b7c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "  \tprivate void printBlockCommentHeaderLine(StringBuffer buffer)", "signatureAfterChange": "  \tprivate void printBlockCommentHeaderLine(StringBuffer buffer)", "diff": ["-\t    \tStringBuffer insert = new StringBuffer();", "-\t    \tinsert.append(this.lineSeparator);", "+\t    \tthis.tempBuffer.setLength(0);", "+\t    \tthis.tempBuffer.append(this.lineSeparator);", "-\t    \tprintIndentationIfNecessary(insert);", "-\t    \tinsert.append(BLOCK_LINE_PREFIX);", "+\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t    \tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "-\t    \tbuffer.insert(0, insert.toString());", "+\t    \tbuffer.insert(0, this.tempBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889d0e3dd906227fde3d74bf76db507c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tvoid printIndentationIfNecessary()", "signatureAfterChange": "  \tvoid printIndentationIfNecessary()", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tprintIndentationIfNecessary(buffer);", "-\t\tif (buffer.length() > 0) {", "-\t\t\taddInsertEdit(this.scanner.getCurrentTokenStartPosition(), buffer.toString());", "+\t\tthis.tempBuffer.setLength(0);", "+\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\tif (this.tempBuffer.length() > 0) {", "+\t\t\taddInsertEdit(this.scanner.getCurrentTokenStartPosition(), this.tempBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e7180133453fc9795f20865e5acd01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 79, "signatureBeforeChange": "  \tprivate void printJavadocText(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate void printJavadocText(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.javadocTextBuffer.setLength(0);", "-\t\t\tprintJavadocTextLine(buffer, nextStart, end, block, idx==0 || (!joinLines && textOnNewLine)/*first text?*/, needIndentation, false /*not an html tag*/);", "+\t\t\tprintJavadocTextLine(this.javadocTextBuffer, nextStart, end, block, idx==0 || (!joinLines && textOnNewLine)/*first text?*/, needIndentation, false /*not an html tag*/);", "-\t\t\t\t\taddReplaceEdit(textStart, end, buffer.toString());", "+\t\t\t\t\taddReplaceEdit(textStart, end, this.javadocTextBuffer.toString());", "-\t\t\t\t\tbuffer.setLength(0);", "+\t\t\t\t\tthis.javadocTextBuffer.setLength(0);", "-\t\tprintJavadocTextLine(buffer, nextStart, text.sourceEnd, block, text.separatorsPtr==-1 /* first text?*/, needIndentation, false /*not an html tag*/);", "+\t\tprintJavadocTextLine(this.javadocTextBuffer, nextStart, text.sourceEnd, block, text.separatorsPtr==-1 /* first text?*/, needIndentation, false /*not an html tag*/);", "-\t\t\taddReplaceEdit(textStart, text.sourceEnd, buffer.toString());", "+\t\t\taddReplaceEdit(textStart, text.sourceEnd, this.javadocTextBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c80b5a608256fb1b16b94878dfc4195f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprivate void printJavadocImmutableText(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate void printJavadocImmutableText(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t\t\tStringBuffer buffer = null;", "+\t\t\tString newLineString = null;", "-\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\taddReplaceEdit(end+1, this.scanner.getCurrentTokenEndPosition(), buffer.toString());", "+\t\t\t\t\taddReplaceEdit(end+1, this.scanner.getCurrentTokenEndPosition(), newLineString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f924d88d41f6da85601d0214540a7c31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "09344c3511ec65da3ebc80e49387be9bef2842c9", "commitAfterChange": "784fb3dfd6aad9e1272ee168af202a1a299ea44b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic IJavaElement getHandleFromMemento(String memento) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement getHandleFromMemento(String memento) throws JavaModelException", "diff": ["-\t\tJavaModel model= (JavaModel) getJavaModel();", "-\t\t\treturn model;", "+\t\t\treturn this.javaModel;", "-\t\tJavaProject proj= (JavaProject) model.getJavaProject(projectName);", "+\t\tJavaProject proj= (JavaProject) this.javaModel.getJavaProject(projectName);", "-\t\t\treturn model.getHandleFromMementoForRoot(memento, proj, projectEnd, memento.length());", "+\t\t\treturn this.javaModel.getHandleFromMementoForRoot(memento, proj, projectEnd, memento.length());", "-\t\tIPackageFragmentRoot root = model.getHandleFromMementoForRoot(memento, proj, projectEnd, rootEnd);", "+\t\tIPackageFragmentRoot root = this.javaModel.getHandleFromMementoForRoot(memento, proj, projectEnd, rootEnd);", "-\t\t\treturn model.getHandleFromMementoForBinaryMembers(memento, root, rootEnd, end);", "+\t\t\treturn this.javaModel.getHandleFromMementoForBinaryMembers(memento, root, rootEnd, end);", "-\t\treturn model.getHandleFromMementoForSourceMembers(memento, root, rootEnd, end);", "+\t\treturn this.javaModel.getHandleFromMementoForSourceMembers(memento, root, rootEnd, end);"]}], "num": 20671}
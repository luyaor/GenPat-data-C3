{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae1d72f35e18e12bfa63f2b1fa01d5a1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000c6989f5afb071527deb57a665f947", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "83e7ec555369f29d4b78a3a829caf1776dce39db", "commitAfterChange": "e965722f47023ae407b487744865b93f56cfe7d1", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " protected void consumeEnterVariable()", "signatureAfterChange": " protected void consumeEnterVariable()", "diff": ["-\t\t\t\tdeclaration.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t\tdeclaration.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\tdeclaration.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\tdeclaration.bits |= (type.bits & ASTNode.HasTypeAnnotations);", "+//\t\t\tdeclaration.bits |= (type.bits & ASTNode.HasTypeAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e2f27c2412dbf41431941b940cdabd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64adb94de0734c7d5adfd2cb11839ed3d3641dfc", "commitAfterChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 121, "signatureBeforeChange": " \t \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "signatureAfterChange": " \t \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "diff": ["-\t\t}", "-", "-\t\tString variableKey = CP_VARIABLE_PREFERENCES_PREFIX+variableName;", "-\t\tString variableString = variablePath == null ? CP_ENTRY_IGNORE : variablePath.toString();", "-\t\tgetInstancePreferences().put(variableKey, variableString);", "-\t\ttry {", "-\t\t\tgetInstancePreferences().flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\t// ignore exception"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02496b1129a350758588cb6b52233c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bf17807076522b492d9a582c812c5e15d78b5fff", "commitAfterChange": "7499dd3309f66badc0b9a54f55f1bb48d32b67b2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "diff": ["-\t\t\t\tif (resource.getProject().equals(getProject())) {", "-\t\t\t\t\t// name of root is the project relative path (case of source folders and library folder in same project)", "-\t\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getProjectRelativePath().toString());", "-\t\t\t\t} else {", "-\t\t\t\t\t// name of root is the full path (case of library folder in another project)", "-\t\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getFullPath().toString());", "-\t\t\t\t}", "+\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026b8facde8b59485b38be4d7f49ba4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected Map getCompilerOptions()", "signatureAfterChange": " \tprotected Map getCompilerOptions()", "diff": ["-}", "-protected Map getCompilerOptions() {", "-\t\tMap defaultOptions = new CompilerOptions().getMap();", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\tCompilerOptions.GENERATE);", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember, ", "-\t\t\tCompilerOptions.WARNING);", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tdefaultOptions.put(", "-\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal, ", "-\t\t\tCompilerOptions.PRESERVE);", "-", "-\t\tif (false) { // check that all tests are 1.3 & 1.4 compatible by default (compliance tests must specify which version to use)", "-\t\t\tdefaultOptions.put(", "-\t\t\t\tCompilerOptions.OPTION_Compliance, ", "-\t\t\t\tCompilerOptions.VERSION_1_3);", "-\t\t\tdefaultOptions.put(", "-\t\t\t\tCompilerOptions.OPTION_Source, ", "-\t\t\t\tCompilerOptions.VERSION_1_3);", "-\t\t\tdefaultOptions.put(", "-\t\t\t\tCompilerOptions.OPTION_TargetPlatform, ", "-\t\t\t\tCompilerOptions.VERSION_1_1);", "+\t}", "+\tprotected Map getCompilerOptions() {", "+\t\tMap defaultOptions = super.getCompilerOptions();", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.WARNING);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.WARNING);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.WARNING);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, CompilerOptions.WARNING);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.WARNING);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);", "-}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03330f2337ae2c48fe48a90f26c51a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "69c496e755cc6913b44756320f466e0fd51afc57", "commitAfterChange": "039347d7e4ee8e1deb95513f2bd485f15185146e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMatch, compatibleMethod))", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\tMethodBinding concreteMethod = (MethodBinding) found.elementAt(j);", "-\t\t\t\t\t\t\t\tif (concreteMethod != null) {", "-\t\t\t\t\t\t\t\t\tif (methodVerifier.areMethodsCompatible(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since concreteMethod overrides it", "-\t\t\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tMethodBinding classMethod = (MethodBinding) found.elementAt(j);", "+\t\t\t\t\t\t\t\tif (classMethod != null && methodVerifier.areMethodsCompatible(classMethod, compatibleMethod))", "+\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since classMethod overrides it"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b7c0130053607e9328d511269f3664f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void testMethodWithError6() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError06() throws CoreException", "diff": ["-public void testMethodWithError6() throws JavaModelException, CoreException {", "+public void testMethodWithError06() throws CoreException {", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.cu = getCompilationUnit(\"Reconciler\", \"src\", \"p1\", \"Y.java\");", "-\t\tthis.workingCopy = this.cu.getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler/src/p1/Y.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.deleteFile(\"/Reconciler/src/p1/Y.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p1/Y.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bd300f249faab63e4c4dda3e5cf8593", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "3b4394afa293384076b51eeac920f3d24cc5f8bc", "commitAfterChange": "8fb88598900ff0c1072aa7669424703dbc139194", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t\t// Reset forgotten subsets tests", "-\t\tAbstractRegressionTest.testsNames = null;", "-\t\tAbstractRegressionTest.testsNumbers= null;", "-\t\tAbstractRegressionTest.testsRange = null;", "-\t\t// Reset forgotten subsets tests", "-\t\tAbstractRegressionTest.testsNames = null;", "-\t\tAbstractRegressionTest.testsNumbers= null;", "-\t\tAbstractRegressionTest.testsRange = null;", "-\t\t// Reset forgotten subsets tests", "-\t\tAbstractRegressionTest.testsNames = null;", "-\t\tAbstractRegressionTest.testsNumbers= null;", "-\t\tAbstractRegressionTest.testsRange = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "133d3099d271c2ee6da6a346fe16902c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void testMethodWithError8() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError08() throws CoreException", "diff": ["-public void testMethodWithError8() throws JavaModelException, CoreException {", "+public void testMethodWithError08() throws CoreException {", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.cu = getCompilationUnit(\"Reconciler\", \"src\", \"p2\", \"X01.java\");", "-\t\tthis.workingCopy = this.cu.getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler/src/p2/X01.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.deleteFile(\"/Reconciler/src/p1/X01.java\");", "-\t\tthis.deleteFile(\"/Reconciler/src/p2/X01.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p1/X01.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p2/X01.java\");", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146a3e471adc83c610f9ade52d26cbc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-\t\tcase IProblem.NullableFieldReference:", "-\t\tcase IProblem.RedundantNullCheckOnNonNullExpression:", "-\t\tcase IProblem.NonNullExpressionComparisonYieldsFalse:", "-\t\tcase IProblem.NonNullMessageSendComparisonYieldsFalse:", "-\t\tcase IProblem.RedundantNullCheckOnNonNullSpecdField:", "-\t\tcase IProblem.NonNullSpecdFieldComparisonYieldsFalse:", "-\t\tcase IProblem.UninitializedNonNullField:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f026ccffe6ea0be3117b05171bb793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "diff": ["+", "-\t\tif (type.isParameterizedType() && type.isMemberType()) { // fixup instance of parameterized member type, e.g. Map<K,V>.Entry + <A,B>", "-\t\t\tenclosingType = type.enclosingType(); // use enclosing from previously parameterized", "-\t\t\ttype = (ReferenceBinding)type.erasure(); // connect to erasure of member type", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182411dd020a09e76d14ac9016a64995", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptType(IType type)", "signatureAfterChange": " public void acceptType(IType type)", "diff": ["-\t\tif (type.isClass()) {", "-\t\t\tthis.requestor.acceptClass(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "-\t\t} else {", "-\t\t\tthis.requestor.acceptInterface(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);", "-\t\t}", "+\t\tthis.requestor.acceptType(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8ff5b6cf6c39c6ecab18a0bddfddd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "2209601726c2ffaf740a8580f2681022ef2a68b2", "commitAfterChange": "f42c0477ee0669ffdbca90a8139c634d502e6b71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\tif (!((this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "-\t\t\t\t|| BaseTypeBinding.isWidening(requiredType.id, valueType.id))", "+\t\tif (!(this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "-\t\t\t\t\t\t\t|| BaseTypeBinding.isWidening(leafType.id, valueType.id))", "-\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType))) {", "+\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType)))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b535fa5832e5ffbe27db4467103a9fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "9e733725973bf60aeaebc889415ea2286c54f96e", "commitAfterChange": "3c311a61671e5b7f3b27e7c52a90844815a7ac27", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\t\t//resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\t\tresolvedEntry = containerEntries[j];\r", "-\t\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f75400accad6514bf247764ac3fd717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  \tpublic void validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "signatureAfterChange": "  \tpublic void validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "diff": ["-\t\tlong nullAnnotationTagBit = tagBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable);", "+\t\tlong nullAnnotationTagBit = tagBits & (TagBits.AnnotationNullMASK);", "-\t\t\t\tchar[][] annotationName = (nullAnnotationTagBit == TagBits.AnnotationNonNull)", "-\t\t\t\t\t\t? environment().getNonNullAnnotationName()", "-\t\t\t\t\t\t: environment().getNullableAnnotationName();", "-\t\t\t\tproblemReporter().illegalAnnotationForBaseType(typeRef, annotations,", "-\t\t\t\t\t\tannotationName[annotationName.length-1], nullAnnotationTagBit);", "+\t\t\t\tproblemReporter().illegalAnnotationForBaseType(typeRef, annotations, nullAnnotationTagBit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21008fad73d2bcf14f70467306bde72a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "8d49c6b05cbe0c9a4cbd680e5e4041d42a24f353", "commitAfterChange": "100575b90c81ab462711c22b0b0dfbf38604394e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\tif (this.verbose && this.destDir != null) {", "-\t\t\t/*", "-\t\t\t * if destDir is null, we don't generate any log.", "-\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97744", "-\t\t\t */", "-\t\t\t// Fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=96605", "-\t\t\t// cmd.createArgument().setValue(\"-verbose\"); //$NON-NLS-1$", "-\t\t\t/*", "-\t\t\t * extra option allowed by the Eclipse compiler", "-\t\t\t */", "-\t\t\tcmd.createArgument().setValue(\"-log\"); //$NON-NLS-1$", "-\t\t\tthis.logFileName = this.destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "-\t\t\tcmd.createArgument().setValue(this.logFileName);\t\t\t", "+\t\tif (this.verbose) {", "+\t\t\tcmd.createArgument().setValue(\"-verbose\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "257c55071c20950181325567525b614c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "0de5167791884524f72d9d44c10f0e243af65d00", "commitAfterChange": "07ab76f69fbeeb2f2fd54cdf3d01ee69344b9ae0", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public File getJavaHome()", "signatureAfterChange": " public File getJavaHome()", "diff": ["-\t\tString javaHome = System.getProperty(\"java.home\");//$NON-NLS-1$", "-\t\tif (javaHome != null) {", "-\t\t\tthis.javaHomeCache = new File(javaHome);", "-\t\t\tif (!this.javaHomeCache.exists())", "-\t\t\t\tthis.javaHomeCache = null;", "-\t\t}", "+\t\tthis.javaHomeCache = Util.getJavaHome();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260adf093ad1e12cd83e553185f4a42c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\tif (this.indexSelector == null) {", "-\t\t\tthis.indexSelector =", "-\t\t\t\tnew IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t}", "-\t\tIIndex[] searchIndexes = this.indexSelector.getIndexes();", "+\t\tIIndex[] indexes = getIndexes(progressMonitor);", "-\t\t\tint max = searchIndexes.length;", "+\t\t\tint max = indexes.length;", "-\t\t\t\tisComplete &= search(searchIndexes[i], progressMonitor);", "+\t\t\t\tisComplete &= search(indexes[i], progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30515f5f421532442df223fe2ee456fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException", "signatureAfterChange": " public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException", "diff": ["-\t}", "-\tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException {", "-\t\tBinaryType binaryType = (BinaryType)classFile.getType();", "-\t\tif (classFile.isOpen()) {", "-\t\t\t// reuse the info from the java model cache", "-\t\t\treturn (IBinaryType)binaryType.getElementInfo();", "-\t\t} else {", "-\t\t\t// create a temporary info", "-\t\t\tIBinaryType info;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement pkg = classFile.getParent();", "-\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();", "-\t\t\t\tif (root.isArchive()) {", "-\t\t\t\t\t// class file in a jar", "-\t\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "-\t\t\t\t\tString classFilePath = ", "-\t\t\t\t\t\t(pkgPath.length() > 0) ?", "-\t\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$", "-\t\t\t\t\t\t\tclassFile.getElementName();", "-\t\t\t\t\tZipFile zipFile = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();", "-\t\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(", "-\t\t\t\t\t\t\tzipFile,", "-\t\t\t\t\t\t\tclassFilePath);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class file in a directory", "-\t\t\t\t\tString osPath = resource.getLocation().toOSString();", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);", "-\t\t\t\t}", "-\t\t\t\treturn info;", "-\t\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\t\t//e.printStackTrace();", "-\t\t\t\treturn null;", "-\t\t\t} catch (java.io.IOException e) {", "-\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t\t}", "-\t\t}", "-\t}", "+}", "+public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException {", "+\tBinaryType binaryType = (BinaryType) classFile.getType();", "+\tif (classFile.isOpen())", "+\t\treturn (IBinaryType) binaryType.getElementInfo(); // reuse the info from the java model cache", "+", "+\t// create a temporary info", "+\tIBinaryType info;", "+\ttry {", "+\t\tIJavaElement pkg = classFile.getParent();", "+\t\tPackageFragmentRoot root = (PackageFragmentRoot) pkg.getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\t// class file in a jar", "+\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "+\t\t\tString classFilePath = pkgPath.length() > 0", "+\t\t\t\t? pkgPath + \"/\" + classFile.getElementName() //$NON-NLS-1$", "+\t\t\t\t: classFile.getElementName();", "+\t\t\tZipFile zipFile = null;", "+\t\t\ttry {", "+\t\t\t\tzipFile = ((JarPackageFragmentRoot) root).getJar();", "+\t\t\t\tinfo = ClassFileReader.read(zipFile, classFilePath);", "+\t\t\t} finally {", "+\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// class file in a directory", "+\t\t\tString osPath = resource.getLocation().toOSString();", "+\t\t\tinfo = ClassFileReader.read(osPath);", "+\t\t}", "+\t\treturn info;", "+\t} catch (ClassFormatException e) {", "+\t\t//e.printStackTrace();", "+\t\treturn null;", "+\t} catch (java.io.IOException e) {", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3067160d273a3ba37ce4be9d74923f7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 220, "signatureBeforeChange": " private boolean isLiteral(int token)", "signatureAfterChange": " private boolean isLiteral(int token)", "diff": ["-\tswitch(token) {", "-\t\tcase TerminalTokens.TokenNameIntegerLiteral:", "-\t\tcase TerminalTokens.TokenNameLongLiteral:", "-\t\tcase TerminalTokens.TokenNameFloatingPointLiteral:", "-\t\tcase TerminalTokens.TokenNameDoubleLiteral:", "-\t\tcase TerminalTokens.TokenNameStringLiteral:", "-\t\tcase TerminalTokens.TokenNameCharacterLiteral:", "-\t\t\treturn true;", "-\t\tdefault:", "-\t\t\treturn false;", "-\t}", "+\treturn Scanner.isLiteral(token);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c9a9be36754f819ab2a0bdaa2242a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic ReferenceBinding enclosingType()", "signatureAfterChange": " \tpublic ReferenceBinding enclosingType()", "diff": ["-\t\tif (this.isMemberType() && this.enclosingType == null) {", "-\t\t\tthis.enclosingType = (ReferenceBinding) this.environment.convertToRawType(this.type.enclosingType());", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "404f8ee066b664fb2b0124d667d95776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c19da768095dac214ba6cd17a7f1810f5dbcd929", "commitAfterChange": "dbf206d4e9e06fe03458856c4018b487ffcc2b68", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic char[][] fullExclusionPatternChars()", "signatureAfterChange": " \tpublic char[][] fullExclusionPatternChars()", "diff": ["-\t\t\t\tIPath fullPath = prefixPath, pattern;", "-\t\t\t\tif (!(pattern = exclusionPatterns[i]).isAbsolute()) { // add leading ** to relative fragment", "-\t\t\t\t\tfullPath = fullPath.append(\"**/\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tfullPath = fullPath.append(pattern);", "-\t\t\t\tthis.fullCharExclusionPatterns[i] = fullPath.toString().toCharArray();", "+\t\t\t\tthis.fullCharExclusionPatterns[i] = ", "+\t\t\t\t\tprefixPath.append(this.exclusionPatterns[i]).toString().toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432d6aa7e180c8d5fb4f944a7d5a44db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "commitAfterChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private IHandle readHandle(IDevelopmentContext dc, DataInputStream in, int tag) throws IOException", "signatureAfterChange": "\r private IHandle readHandle(IDevelopmentContext dc, DataInputStream in, int tag) throws IOException", "diff": ["-\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\tthrow new IOException(Util.bind(\"build.unexpectedPoolItem\"/*nonNLS*/));\r", "+\t\t\tthrow new IOException(\"Unexpected kind of pool item\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f3fd89a8859f1a868cbfadca0f8867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "5af3ec11c73ebd5f465c42ddba07188d87fc00f1", "commitAfterChange": "b246de6fdcd5a901a16dcaeba98ae727a49eb635", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tprotected void writeLineToResult()", "signatureAfterChange": " \t\tprotected void addLine(String text)", "diff": ["-\t\tprotected void writeLineToResult() {", "-\t\t\tif (match.getAccuracy() == SearchMatch.A_ACCURATE || showPotential) {", "-\t\t\t\tif (results.length() > 0) results.append(\"\\n\");", "-\t\t\t\tresults.append(line);", "-\t\t\t}", "+\t\tprotected void addLine(String text) {", "+\t\t\tthis.lines.add(text);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fd4c0dff1af7e5d85ff93a6b995735", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "2afd622177d6128cddce991d666981d185adf1ee", "commitAfterChange": "1de67e52d267c2abc8dc8e6e69930068fb43b448", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public TypeBinding computeBoxingType(TypeBinding type)", "signatureAfterChange": " public TypeBinding computeBoxingType(TypeBinding type)", "diff": ["-\t\tcase TypeIds.T_JavaLangVoid :", "-\t\t\treturn VoidBinding;", "-\t\tcase TypeIds.T_void :", "-\t\t\tboxedType = getType(JAVA_LANG_VOID);", "-\t\t\tif (boxedType != null) return boxedType;", "-\t\t\treturn new ProblemReferenceBinding(\tJAVA_LANG_VOID, NotFound);\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "456e05cecdc3503d696c2c3e07925702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\t\t\tif ((messageSend.bits & ASTNode.InsideJavadoc) != 0) {", "-\t\t\t\t\tid |= IProblem.Javadoc;", "-\t\t\t\t}", "-\tif ((messageSend.bits & ASTNode.InsideJavadoc) != 0) {", "-\t\tid |= IProblem.Javadoc;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462999a5f23904c40c206384aa3731b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "diff": ["-\t\t\tnewDiskIndex.streamBuffer = new byte[BUFFER_WRITE_SIZE];", "-\t\t\tnewDiskIndex.bufferIndex = 0;", "-\t\t\tnewDiskIndex.streamEnd = 0;", "-\t\t\tif (newDiskIndex.bufferIndex > 0) {", "-\t\t\t\tstream.write(newDiskIndex.streamBuffer, 0, newDiskIndex.bufferIndex);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4876f562eb8deb3097dfedd77a8103be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  ClasspathSourceDirectory(IContainer sourceFolder, char[][] fullExclusionPatternChars, char[][] fulInclusionPatternChars)", "signatureAfterChange": "  ClasspathSourceDirectory(IContainer sourceFolder, char[][] fullExclusionPatternChars, char[][] fulInclusionPatternChars)", "diff": ["-\tIPath location = sourceFolder.getLocation();", "-\tthis.sourceLocation = location != null ? location.addTrailingSeparator().toString() : \"\"; //$NON-NLS-1$", "-\t// Store default encoding", "-\ttry {", "-\t\tthis.encoding = this.sourceFolder.getDefaultCharset();", "-\t}", "-\tcatch (CoreException ce) {", "-\t\t// let use no encoding by default", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bb089c38b55a644af4b29a837c73979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "7ed48908ec8a41725ff925d0919c07571054836e", "commitAfterChange": "6364144351fd62baca30ba0aad505f339b6274eb", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected LocalDeclaration createLocalDeclaration(Expression initialization,char[] assistName,int sourceStart,int sourceEnd)", "signatureAfterChange": " protected LocalDeclaration createLocalDeclaration(char[] assistName,int sourceStart,int sourceEnd)", "diff": ["-protected LocalDeclaration createLocalDeclaration(Expression initialization,char[] assistName,int sourceStart,int sourceEnd) {", "+protected LocalDeclaration createLocalDeclaration(char[] assistName,int sourceStart,int sourceEnd) {", "-\t\treturn super.createLocalDeclaration(initialization, assistName, sourceStart, sourceEnd);", "+\t\treturn super.createLocalDeclaration(assistName, sourceStart, sourceEnd);", "-\t\tSelectionOnLocalName local = new SelectionOnLocalName(initialization, assistName, sourceStart, sourceEnd);", "+\t\tSelectionOnLocalName local = new SelectionOnLocalName(assistName, sourceStart, sourceEnd);", "-\t\tif (!diet){", "-\t\t\tthis.restartRecovery\t= true;\t// force to restart in recovery mode", "-\t\t\tthis.lastIgnoredToken = -1;\t", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5023889cfedbe4c84e47cc0897ae69b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java", "commitBeforeChange": "540532d90ea319b134aad3a0154f549c66728687", "commitAfterChange": "6a0eebe34bd6b3f3c957d0d1c92bc68d99fa8f40", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void initializeDefaultPreferences()", "signatureAfterChange": " \tpublic void initializeDefaultPreferences()", "diff": ["-\t\t", "-\t\t// ImportRewrite settings", "-\t\tdefaultOptionsMap.put(JavaCore.IMPORTREWRITE_IMPORT_ORDER, \"java;javax;org;com\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.IMPORTREWRITE_ONDEMAND_THRESHOLD, String.valueOf(99));", "-\t\tdefaultOptionsMap.put(JavaCore.IMPORTREWRITE_STATIC_ONDEMAND_THRESHOLD, String.valueOf(99));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515cf4261127e06f457dda8e418571cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "fda0d2ec1e24f98b48a39fc410a65aaa372375fb", "commitAfterChange": "a6fc8aa8054ff029d4a044b3364141f4551124c8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic static final boolean isExcluded(IJavaElement element)", "signatureAfterChange": " \tpublic static final boolean isExcluded(IJavaElement element)", "diff": ["-\t * Returns whether the given java element is exluded from its classpath.\r\t */", "+\t * All other types of element are considered non-excluded.\r\t */", "-\t\t\tcase IJavaElement.JAVA_PROJECT:", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:", "-\t\t\tcase IJavaElement.CLASS_FILE:", "-\t\t\t\t// projects, pkg fragment root and class files are never excluded", "-\t\t\t\treturn false;", "-\t\t\t\t// everything in a compilation unit", "-\t\t\t\tIJavaElement cu = element.getAncestor(IJavaElement.COMPILATION_UNIT);", "-\t\t\t\tif (cu == null) return false;", "-\t\t\t\treturn isExcluded(cu);", "+\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5242b9746ec549f62fb23eb9dc193928", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "commitAfterChange": "2eb63d812179e5217306b90a651b95bfe7169c81", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void outputClassFiles(CompilationResult unitResult)", "signatureAfterChange": " \tpublic void outputClassFiles(CompilationResult unitResult)", "diff": ["-\t\t\t\tLookupEnvironment env = EclipseCompilerImpl.this.batchCompiler.lookupEnvironment;", "-\t\t\t\tif (classFile.isShared) {", "-\t\t\t\t\tsynchronized (env.classFilePool) {", "-\t\t\t\t\t\tenv.classFilePool.release(classFile);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tthis.batchCompiler.lookupEnvironment.releaseClassFiles(classFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ed4a043f7db318b23e6d064203f149", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3f131825dfbebcd2d9846517fd8419ae56311784", "commitAfterChange": "ede87229fe271e061ecd80820c468f7956351f61", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-", "-\t\tcase IProblem.UnclosedCloseable:", "-\t\tcase IProblem.UnclosedCloseableAtExit:", "-\t\t\treturn CompilerOptions.UnclosedCloseable;", "-\t\tcase IProblem.PotentiallyUnclosedCloseable:", "-\t\tcase IProblem.PotentiallyUnclosedCloseableAtExit:", "-\t\t\treturn CompilerOptions.PotentiallyUnclosedCloseable;", "-\t\tcase IProblem.ExplicitlyClosedAutoCloseable:", "-\t\t\treturn CompilerOptions.ExplicitlyClosedAutoCloseable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dbedd5c6bc0ade1b3acbd9c82b50c78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "ab91f724713a9c09a04012e3678e3f13af7d9055", "commitAfterChange": "bb69c39b8a5d26f78ad7307ca79dd237d3a75c18", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\t\tif (codeSnippetParsingUtil != null) {", "-\t\t\tfinal RecordedParsingInformation information = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\tif (information != null) {", "-\t\t\t\tthis.lineEnds = information.lineEnds;", "-\t\t\t\tthis.commentPositions = information.commentPositions;", "-\t\t\t}", "-\t\t}", "+// TODO (Olivier) lineEnds and commentPositions are not used, thus codeSnippetParsingUtil is unused", "+//\t\tif (codeSnippetParsingUtil != null) {", "+//\t\t\tfinal RecordedParsingInformation information = codeSnippetParsingUtil.recordedParsingInformation;", "+//\t\t\tif (information != null) {", "+//\t\t\t\tthis.lineEnds = information.lineEnds;", "+//\t\t\t\tthis.commentPositions = information.commentPositions;", "+//\t\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "617a0f4fb82ff660459dea631b6f18c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "commitAfterChange": "32d18ce9895194535a7aa2bea48bdebf445f909f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " EntryResult[] queryIn(Index index) throws IOException", "signatureAfterChange": " EntryResult[] queryIn(Index index) throws IOException", "diff": ["-\t\t\t\t\t\tcase CLASS_AND_INTERFACE_SUFFIX :", "-\t\t\t\t\t\tcase CLASS_AND_ENUM_SUFFIX :", "-\t\t\t\t\t\t\tkey = new char[] {ONE_STAR[0],  SEPARATOR,", "-\t\t\t\t\t\t\t\tisCaseSensitive() ? this.typeSuffix : Character.toLowerCase(this.typeSuffix)}; // find all classes or all interfaces", "+\t\t\t\t\t\tcase CLASS_AND_INTERFACE_SUFFIX :", "+\t\t\t\t\t\tcase CLASS_AND_ENUM_SUFFIX :", "+\t\t\t\t\t\t\tkey = new char[] {ONE_STAR[0],  SEPARATOR, ONE_STAR[0]};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61857d6db852c89bc10ae6e5c6dcaf39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\t\tthis.tabLength = formatter.preferences.tab_length;", "-\t\tthis.indentationLevel= 0; // initialize properly", "-\t\tthis.indentationSize = formatter.preferences.indentation_size;", "+\t\tthis.tabSize = formatter.preferences.tab_size;", "-\t\tthis.snapToTabs= this.useTab && formatter.preferences.snapToTabs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65125e0f1b5a7d841a3a4f6877fdebfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public char[] shortReadableName()", "signatureAfterChange": "  public char[] shortReadableName()", "diff": ["-\t\tif (superInterfaces == Binding.NO_SUPERINTERFACES)", "-\t\t\tshortReadableName = CharOperation.concat(TypeConstants.ANONYM_PREFIX, superclass.shortReadableName(), TypeConstants.ANONYM_SUFFIX);", "-\t\telse", "-\t\t\tshortReadableName = CharOperation.concat(TypeConstants.ANONYM_PREFIX, superInterfaces[0].shortReadableName(), TypeConstants.ANONYM_SUFFIX);", "+\t\tshortReadableName = CharOperation.concat(TypeConstants.ANONYM_PREFIX, anonymousOriginalSuperType().shortReadableName(), TypeConstants.ANONYM_SUFFIX);", "-\t\tshortReadableName = CharOperation.concat(enclosingType().shortReadableName(), sourceName, '.');", "+\t\tshortReadableName = CharOperation.concat(enclosingType().shortReadableName(), this.sourceName, '.');", "-\t\tshortReadableName = sourceName;", "+\t\tshortReadableName = this.sourceName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "687b50559b3bfcb0ccfa28cbf8630f1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "d0465303a3f06c207d587b10c6ee53d0a8c1e8db", "commitAfterChange": "9f4aa0614d5f82c32b168a7fbc418ad5a0613f5b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\tif (inferenceContext.inferenceKind == InferenceContext18.CHECK_STRICT)", "-\t\t\t\t\tinferenceContext.inferenceKind = InferenceContext18.CHECK_LOOSE;", "-\t\t\t\tif (inferenceContext.inferenceKind == InferenceContext18.CHECK_STRICT)", "-\t\t\t\t\tinferenceContext.inferenceKind = InferenceContext18.CHECK_LOOSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be494272e76d5939224fdbdebcc0aee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatchSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic void add(PotentialMatch potentialMatch)", "signatureAfterChange": "  public void add(PotentialMatch potentialMatch)", "diff": ["-\t", "-\tpublic void add(PotentialMatch potentialMatch) {", "-\t\tIPackageFragmentRoot root = potentialMatch.openable.getPackageFragmentRoot();", "-\t\tchar[] path = root.getPath().toString().toCharArray();", "-\t\tObjectVector potentialMatches = (ObjectVector)this.rootsToPotentialMatches.get(path);", "-\t\tif (potentialMatches == null) {", "-\t\t\tpotentialMatches = new ObjectVector();", "-\t\t\tthis.rootsToPotentialMatches.put(path, potentialMatches);", "-\t\t\tpotentialMatches.add(potentialMatch);", "-\t\t\tthis.elementCount++;", "-\t\t} else if (!potentialMatches.contains(potentialMatch)) {", "-\t\t\tpotentialMatches.add(potentialMatch);", "-\t\t\tthis.elementCount++;", "-\t\t}", "-\t}", "+", "+public void add(PotentialMatch potentialMatch) {", "+\tIPath path = potentialMatch.openable.getPackageFragmentRoot().getPath();", "+\tObjectVector potentialMatches = (ObjectVector) this.rootsToPotentialMatches.get(path);", "+\tif (potentialMatches != null) {", "+\t\tif (potentialMatches.contains(potentialMatch)) return;", "+\t} else {", "+\t\tthis.rootsToPotentialMatches.put(path, potentialMatches = new ObjectVector());", "+\t}", "+", "+\tpotentialMatches.add(potentialMatch);", "+\tthis.elementCount++;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d5db7590f9e52231663be35646843ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "fa5828480ebc13512cc4c6649155f597883abe5f", "commitAfterChange": "dbadb98550952623b726dd998146fbf52c65b243", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["-\t\texpectedProblemAttributes.put(\"IllegalBinaryLiteral\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalHexaLiteral\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalUnderscorePosition\", SKIP);", "-\t\texpectedProblemAttributes.put(\"IllegalUsageOfUnderscore\", SKIP);", "-\t\texpectedProblemAttributes.put(\"InvalidBinary\", SKIP);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dbccfccc28c00c23c699634c5d488e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "45cd785ca01e28e4f113609eb753cae5cd16f91a", "commitAfterChange": "21c2c8ab182b7aa411b8e7bf4277aee52240c980", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": "  \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "signatureAfterChange": "  \tpublic synchronized void variablePut(String variableName, IPath variablePath)", "diff": ["-\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd0f55351b9d6a818fe10ef723ef2e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\tcase ProblemReasons.ParameterizedMethodExpectedTypeProblem:", "+\t\tcase ProblemReasons.InferredApplicableMethodInapplicable:", "+\t\tcase ProblemReasons.InvocationTypeInferenceFailure:", "-\t\t\tInferenceContext18 inferenceContext = problemMethod.inferenceContext;", "-\t\t\tif (inferenceContext != null && inferenceContext.outerContext != null) {", "-\t\t\t\t// problem relates to a nested inference context, let the outer handle it:", "-\t\t\t\tinferenceContext.outerContext.addProblemMethod(problemMethod);", "-\t\t\t\treturn;", "-\t\t\t}", "+\t\t\tif (problemMethod.returnType == shownMethod.returnType) //$IDENTITY-COMPARISON$", "+\t\t\t\treturn; // funnily this can happen in a deeply nested call, because the inner lies by stealing its closest match and the outer does not know so. See GRT1_8.testBug430296"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec7055247daab95e44803b4966b3fbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void ensureReadyToRun()", "signatureAfterChange": " \tpublic void ensureReadyToRun()", "diff": ["-\t\tif (this.indexSelector == null) { // only check once. As long as this job is used, it will keep the same index picture", "-\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "+\t\tif (!this.areIndexesReady) {", "+\t\t\tgetIndexes(null/*progress*/); // may trigger some index recreation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f28604a19744bf16600c9226a036ca9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "signatureAfterChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "diff": ["-\t\t\tString typeName = initialTypeNames[i];\r", "-\t\t\ttoCompile[i] = new SourceFile(filename,\r", "-\t\t\t\tCharOperation.splitOn('/', typeName.toCharArray(), 0, typeName.lastIndexOf('/') - 1));\r", "+\t\t\ttoCompile[i] = new SourceFile(filename, initialTypeNames[i].toCharArray());\r", "-\t\t\t\t\ttoCompile[index++] = new SourceFile(filename,\r", "-\t\t\t\t\t\tCharOperation.splitOn('/', typeName.toCharArray(), 0, typeName.lastIndexOf('/') - 1));\r", "+\t\t\t\t\ttoCompile[index++] = new SourceFile(filename, typeName.toCharArray());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71984caf0ee497309baaca581d2947f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic static long getJdkLevel(Object targetLibrary)", "signatureAfterChange": " \tpublic static long getJdkLevel(Object targetLibrary)", "diff": ["-\t\t\t\tClassFileReader reader = null;", "-\t\t\t\tif (targetLibrary instanceof IFolder) {", "-\t\t\t\t\tIFile classFile = findFirstClassFile((IFolder) targetLibrary); // only internal classfolders are allowed", "-\t\t\t\t\tif (classFile != null) {", "-\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(classFile);", "-\t\t\t\t\t\tIPath location = classFile.getLocation();", "-\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());", "+\t\t\tClassFileReader reader = null;", "+\t\t\tif (targetLibrary instanceof IFolder) {", "+\t\t\t\tIFile classFile = findFirstClassFile((IFolder) targetLibrary); // only internal classfolders are allowed", "+\t\t\t\tif (classFile != null)", "+\t\t\t\t\treader = Util.newClassFileReader(classFile);", "+\t\t\t} else {", "+\t\t\t\t// root is a jar file or a zip file", "+\t\t\t\tZipFile jar = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tIPath path = null;", "+\t\t\t\t\tif (targetLibrary instanceof IResource) {", "+\t\t\t\t\t\tpath = ((IResource)targetLibrary).getLocation();", "+\t\t\t\t\t} else if (targetLibrary instanceof File){", "+\t\t\t\t\t\tFile f = (File) targetLibrary;", "+\t\t\t\t\t\tif (!f.isDirectory()) {", "+\t\t\t\t\t\t\tpath = new Path(((File)targetLibrary).getPath());", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// root is a jar file or a zip file", "-\t\t\t\t\tZipFile jar = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIPath path = null;", "-\t\t\t\t\t\tif (targetLibrary instanceof IResource) {", "-\t\t\t\t\t\t\tpath = ((IResource)targetLibrary).getLocation();", "-\t\t\t\t\t\t} else if (targetLibrary instanceof File){", "-\t\t\t\t\t\t\tFile f = (File) targetLibrary;", "-\t\t\t\t\t\t\tif (!f.isDirectory()) {", "-\t\t\t\t\t\t\t\tpath = new Path(((File)targetLibrary).getPath());", "+\t\t\t\t\tif (path != null) {", "+\t\t\t\t\t\tjar = JavaModelManager.getJavaModelManager().getZipFile(path);", "+\t\t\t\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "+\t\t\t\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "+\t\t\t\t\t\t\tString entryName= member.getName();", "+\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\t\t\treader = ClassFileReader.read(jar, entryName);", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (path != null) {", "-\t\t\t\t\t\t\tjar = JavaModelManager.getJavaModelManager().getZipFile(path);", "-\t\t\t\t\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "-\t\t\t\t\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "-\t\t\t\t\t\t\t\tString entryName= member.getName();", "-\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "-\t\t\t\t\t\t\t\t\treader = ClassFileReader.read(jar, entryName);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t} finally {", "+\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "-\t\t\t\tif (reader != null) {", "-\t\t\t\t\treturn reader.getVersion();", "-\t\t\t\t}", "-\t\t} catch(JavaModelException e) {", "+\t\t\t}", "+\t\t\tif (reader != null) {", "+\t\t\t\treturn reader.getVersion();", "+\t\t\t}", "+\t\t} catch (CoreException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7199223f3310b5793d4edd59e56ff976", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConditionalExpressionTest.java", "commitBeforeChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "commitAfterChange": "0820eec9945610037c75b7f3c6bc13a32acbc80c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\tMap options = this.getCompilerOptions();", "-\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\t\"\",", "-\t\t\tnull,", "-\t\t\ttrue,", "-\t\t\tnull,", "-\t\t\toptions,", "-\t\t\tnull", "+\t\t\t\"\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73cc7d604c1b4cc2588f332177873886", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "e19e57c2cfd4e1ac379028ba46599cac5e8fc684", "commitAfterChange": "37468b15b5c10767a0d1f5bcf745b5635724272d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t\t\tif (JavaCore.getPlugin().isDebugging()) {", "-\t\t\t\tUtil.log(e, \"ClassFormatException in \" + this.document.getPath() + \". This document seems to be a corrupted .class file. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tUtil.log(IStatus.WARNING, \"The Java indexing could not index \" + this.document.getPath() + \". This .class file doesn't follow the class file format specification. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tif (JavaCore.getPlugin().isDebugging()) {", "-\t\t\t\tUtil.log(e, \"Indexer crashed on document \" + this.document.getPath() + \". This document seems to be a corrupted .class file. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tUtil.log(IStatus.WARNING, \"The Java indexing could not index \" + this.document.getPath() + \". This .class file doesn't follow the class file format specification. Please report this issue against the .class file vendor\"); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778ecdb4376224ce9ed148f9afa7d5a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "5a02e3ef9eebbbfbf5479e7ec13a8eec010013e9", "commitAfterChange": "b525c03916a55b82c2a2a3976eed083d2d68c216", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\t\tbuffer.append(Util.bind(\"classfileformat.class\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"class\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.interface\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"interface\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.extends\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"extends\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.implements\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"implements\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "779f8720eb2c3b389038fdf39c2382a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0aed651787bbf037293557b7c88429b8514a95c0", "commitAfterChange": "1719c13f5400eb5914bb79f89f0e1d4c54e3cd14", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " protected void reportAccurateParameterizedTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportAccurateParameterizedTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "diff": ["-\t\t\ttry {", "-\t\t\t\tint count = 0;", "-\t\t\t\twhile (token != TerminalTokens.TokenNameGREATER || count > 0) {", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "-\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "-\t\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameEOF:", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t\t\tint count = 0;", "+\t\t\tint ch = -1;", "+\t\t\twhile (ch != '>' || count > 0) {", "+\t\t\t\tch = scanner.getNextChar();", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '<':", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase -1:", "+\t\t\t\t\t\t// we missed type parameters declarations! => do not report match", "+\t\t\t\t\t\treturn;", "-\t\t\t} catch (InvalidInputException e1) {", "-\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a5ef0f31c6461c2a60b1a4bb8e0fdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public char[] readableName()", "signatureAfterChange": "  public char[] readableName()", "diff": ["-\t\tif (superInterfaces == Binding.NO_SUPERINTERFACES)", "-\t\t\treadableName = CharOperation.concat(TypeConstants.ANONYM_PREFIX, superclass.readableName(), TypeConstants.ANONYM_SUFFIX);", "-\t\telse", "-\t\t\treadableName = CharOperation.concat(TypeConstants.ANONYM_PREFIX, superInterfaces[0].readableName(), TypeConstants.ANONYM_SUFFIX);", "+\t\treadableName = CharOperation.concat(TypeConstants.ANONYM_PREFIX, anonymousOriginalSuperType().readableName(), TypeConstants.ANONYM_SUFFIX);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78bca49b2559b601b4a3a526cfa7ba07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "08da5fe92b01e8f28a2723830b850e2535cd0d89", "commitAfterChange": "e886eff79bde20e770d6463357bbd564e2f1cf69", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic String toString()", "signatureAfterChange": "\r \tpublic String toString()", "diff": ["-\t\t\tif (resource != null) {\r", "-\t\t\t\tIPath location = resource.getLocation();\r", "-\t\t\t\tif (location == null) {\r", "-\t\t\t\t\ttoString = \"indexing \"; //$NON-NLS-1$\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\ttoString = \"indexing \" + location.toFile().toString(); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\ttoString = \"indexing \" + this.path.toFile().toString(); //$NON-NLS-1$\r", "-\t\t\t}\r", "+\t\t\ttoString = \"indexing \" + this.path.toString(); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b3012b2593576185eefac2d18b9721b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected void createErrorFor(IResource resource, String message)", "signatureAfterChange": "  protected void createProblemFor(IResource resource, String message, String problemSeverity)", "diff": ["-protected void createErrorFor(IResource resource, String message) {", "+protected void createProblemFor(IResource resource, String message, String problemSeverity) {", "-\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\tif (message.equals(Util.bind(\"build.duplicateResource\"))) //$NON-NLS-1$", "-\t\t\tif (JavaCore.WARNING.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE, true)))", "-\t\t\t\tseverity = IMarker.SEVERITY_WARNING;", "+\t\tint severity = problemSeverity.equals(JavaCore.WARNING) ? IMarker.SEVERITY_WARNING : IMarker.SEVERITY_ERROR;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ed6e0720183771609c0991b1030c062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "6be54e60f569aa63df76f4ecfd5d4100fe1f357d", "commitAfterChange": "79aecf89bad91987eb417be70bec6de3aa728fa2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\t// TODO FIXME (olivier) REMOVE BEFORE 3.3 once the APT1.6 IS WORKING FINE", "-\t\tfor (String option : options ) {", "-\t\t\tif (\"-processorpath\".equals(option) //$NON-NLS-1$", "-\t\t\t\t\t|| (\"-processor\".equals(option))) { //$NON-NLS-1$", "-\t\t\t\tthis.options.put(CompilerOptions.OPTION_Process_Annotations, CompilerOptions.ENABLED);", "-\t\t\t\tthis.options.put(CompilerOptions.OPTION_DocCommentSupport, CompilerOptions.ENABLED);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b32c2f769882bc00e0fdf6c924c1c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "e74a7e922535396e598f77f6ca74363a6e6d0498", "commitAfterChange": "5132501fe32bc39d29df0ef5b05cc4e551a24910", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "signatureAfterChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "diff": ["-\t\t\t} else {", "-\t\t\t\tif (!(parameters[i] instanceof TypeVariableBinding) || this.invocationArguments[i].isPertinentToApplicability(((TypeVariableBinding)parameters[i]), method))", "-\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "-\t\t\t\t// else we know it is potentially compatible, no need to assert.", "-\t\t\t}", "+\t\t\t} else if (!isTypeVariableOfCandidate(parameters[i], method)) {", "+\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t} // else we know it is potentially compatible, no need to assert.", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!(varArgsType instanceof TypeVariableBinding) || this.invocationArguments[i].isPertinentToApplicability(((TypeVariableBinding)varArgsType), method))", "-\t\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "-\t\t\t\t\t// else we know it is potentially compatible, no need to assert.", "-\t\t\t\t}", "+\t\t\t\t} else if (!isTypeVariableOfCandidate(varArgsType, method)) {", "+\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t} // else we know it is potentially compatible, no need to assert."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833bbfab3e567aa5fe31bc3f910b66e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static char[] getSignature(Binding binding)", "signatureAfterChange": " \t \tpublic static char[] getSignature(MethodBinding methodBinding)", "diff": ["-\tpublic static char[] getSignature(Binding binding) {", "+\t", "+\tpublic static char[] getSignature(MethodBinding methodBinding) {", "-\t\tif ((binding.kind() & Binding.TYPE) != 0) {", "-\t\t\tTypeBinding typeBinding = (TypeBinding)binding;", "-\t\t\tresult = typeBinding.genericTypeSignature();", "-\t\t} else if ((binding.kind() & Binding.METHOD) != 0) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding)binding;", "-\t\t\tint oldMod = methodBinding.modifiers;", "-\t\t\t//TODO remove the next line when method from binary type will be able to generate generic siganute", "-\t\t\tmethodBinding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\tresult = methodBinding.genericSignature();", "-\t\t\tif(result == null) {", "-\t\t\t\tresult = methodBinding.signature();", "-\t\t\t}", "-\t\t\tmethodBinding.modifiers = oldMod;", "+\t\t", "+\t\tint oldMod = methodBinding.modifiers;", "+\t\t//TODO remove the next line when method from binary type will be able to generate generic signature", "+\t\tmethodBinding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\tresult = methodBinding.genericSignature();", "+\t\tif(result == null) {", "+\t\t\tresult = methodBinding.signature();", "+\t\tmethodBinding.modifiers = oldMod;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b9c665f43b7b654feaf1306dbc1aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "56dbcf2a723a2496d9406a9295b337384afdff1d", "commitAfterChange": "356ef270158cfd8719df7baf47652712175545cd", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t\t\t\t\t\t\t\tReferenceBinding declaringClass = ((FieldBinding) importBinding.resolvedImport).declaringClass;", "-\t\t\t\t\t\t\t\t\t\tif (declaringClass.canBeSeenBy(this)) {", "-\t\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "-\t\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(declaringClass);\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\treturn importBinding.resolvedImport;", "+\t\t\t\t\t\t\t\t\t\tfoundField = (FieldBinding) importBinding.resolvedImport;", "+\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(foundField.declaringClass);\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\tif (foundField.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\t\t\treturn foundField;", "-\t\t\t\t\t\t\t\t\t\t\tproblemField = new ProblemFieldBinding(declaringClass, name, ProblemReasons.ReceiverTypeNotVisible);", "+\t\t\t\t\t\t\t\t\t\t\tproblemField = foundField;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "854c5ca4fd9a009b220a914420d73f8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "9ea930b8ef0b567a4e08013a97afc6ba878aa860", "commitAfterChange": "b63e8e4c0e47a3750b0c4a9f091dec5ceec8f467", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding type = this.resolvedType = this.qualification.resolveType(scope, true /* check bounds*/);", "+\t\tTypeBinding type = this.qualification.resolveType(scope, true /* check bounds*/);", "-\t\t// X.this is not a raw type as denoting enclosing instance", "-\t\tif (type.isRawType()) {", "-\t\t    RawTypeBinding rawType = (RawTypeBinding) type;", "-\t\t    type = this.resolvedType = rawType.type; // unwrap", "-\t\t}", "+\t\t// X.this is not a param/raw type as denoting enclosing instance", "+\t\tthis.resolvedType = type = type.erasure();", "+", "-\t\t// Its possible to qualify 'this' by the name of the current class", "+\t\t// It is possible to qualify 'this' by the name of the current class"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "870f70018bd084abb944b9cfdfaa6efe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d82ae848a9c4d7b35f614d484418e3b413534446", "commitAfterChange": "c4725a925ff03cde3fc0735f1b7bd65f4e96815b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator)", "signatureAfterChange": " \tpublic TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator)", "diff": ["-\t\t\t\tif (ENABLE_NEW_COMMENTS_FORMAT) {", "-\t                return formatComment(kind & K_MASK, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "-\t\t\t\t}", "+                return formatComment(kind & K_MASK, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "-\t\t\t\tif (ENABLE_NEW_COMMENTS_FORMAT) {", "-\t                return formatComment(kind & K_MASK, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "-\t\t\t\t}", "-\t\t\t\tthis.codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)}, false);", "+                return formatComment(kind & K_MASK, source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8793a80e09e2b2ad7042e3d236417561", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "af7c555b94268663ad75bc44adea174c67a820bf", "commitAfterChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tprivate void retrieveRightBraceOrSemiColonPosition(ASTNode node)", "signatureAfterChange": " \tprivate int retrieveRightBraceOrSemiColonPosition(MethodDeclaration node, AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tprivate void retrieveRightBraceOrSemiColonPosition(ASTNode node) {", "+\tprivate int retrieveRightBraceOrSemiColonPosition(MethodDeclaration node, AbstractMethodDeclaration methodDeclaration) {", "-\t\tscanner.resetTo(start, this.compilationUnitSource.length);", "+\t\tscanner.resetTo(start, methodDeclaration.declarationSourceEnd);", "-\t\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\treturn scanner.currentPosition;", "-\t\t\t\t\t\t\tnode.setSourceRange(start, scanner.currentPosition - start);", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\treturn scanner.currentPosition;", "+\t\treturn -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c830fd112a1c38963181b88537d52d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "8924dfc4fa3fe74549012523c4b06ea66d1d771f", "commitAfterChange": "32ddf534b04d269b876c2c25ef9641f93fbc4b4b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["+\t\tTypeBinding valueType;", "-\t\t\tif ((initializer.resolveTypeExpecting(scope, this.binding.returnType)) != null) {", "-\t\t\t\tthis.value.resolvedType = initializer.binding = (ArrayBinding) this.binding.returnType;", "-\t\t\t}\t\t\t", "+\t\t\tvalueType = initializer.resolveTypeExpecting(scope, this.binding.returnType);", "-\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);\t\t\t\t", "-\t\t} else {", "+\t\t\tscope.problemReporter().annotationValueMustBeArrayInitializer(this.value);", "+\t\t\tvalueType = null; // no need to pursue", "+\t\t} else {", "+\t\t\tvalueType = this.value.resolveType(scope);", "-\t\tTypeBinding valueType = this.value.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0e32dcdd6e0f81c4f3185119e1d956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/VerifyTests.java", "commitBeforeChange": "bb0062c9650742fadc1d35f4bf3fa1b174bd1969", "commitAfterChange": "be1df28b95ba5507244c27f6106b9f5a96569133", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\t\tpublic void run()", "signatureAfterChange": " \t\t\tpublic void run()", "diff": ["-\t\t\t\t\tSystem.err.println(VerifyTests.class.getName());", "-\t\t\t\t\tSystem.out.println(VerifyTests.class.getName());", "-\t\t\t\t\t\tSystem.err.println(VerifyTests.class.getName());", "-\t\t\t\t\t\tSystem.out.println(VerifyTests.class.getName());", "+\t\t\t\t\t\t// ignore", "+\t\t\t\tSystem.err.println(VerifyTests.class.getName());", "+\t\t\t\tSystem.out.println(VerifyTests.class.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d67bdf83ea7b473f3228d9ee50be946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 89, "signatureBeforeChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "signatureAfterChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, int emptyLineRules)", "diff": ["+", "+\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, int emptyLineRules) {", "-\t\tswitch (expectedTokenType) {", "-\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\tcase TerminalTokens.TokenNameLBRACE:", "-\t\t\t\tthis.formatBrace = true;", "-\t\t}", "+\t\tprintComment(CodeFormatter.K_UNKNOWN, NO_TRAILING_COMMENT, emptyLineRules);", "-\t\t\tprintComment(CodeFormatter.K_UNKNOWN, NO_TRAILING_COMMENT);", "-\t\t\ttry {", "-\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "-\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\tthrow new AbortFormatting(e);", "+\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\tif (expectedTokenType != this.currentToken) {", "+\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t}", "-\t\tfinally {", "-\t\t\t// Flush brace flag", "-\t\t\tswitch (expectedTokenType) {", "-\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\t\tcase TerminalTokens.TokenNameLBRACE:", "-\t\t\t\t\tthis.formatBrace = false;", "-\t\t\t}", "+\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4c2b695eb41a5e1417663122c8004e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public TypeBinding convertToRawType(TypeBinding type)", "signatureAfterChange": "  public TypeBinding convertToRawType(TypeBinding type)", "diff": ["+", "-\t\tswitch (originalEnclosing.kind()) {", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\tif (needToConvert || ((ReferenceBinding)originalType).isStatic()) {", "-\t\t\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "-\t\t\t\t} else {", "-\t\t\t\t\tconvertedEnclosing = originalEnclosing;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\tneedToConvert |= !((ReferenceBinding)originalType).isStatic();", "-\t\t\tdefault :", "-\t\t\t\tconvertedEnclosing = originalEnclosing;", "-\t\t\t\tbreak;", "+\t\tif (originalEnclosing.kind() == Binding.RAW_TYPE) {", "+\t\t\tneedToConvert |= !((ReferenceBinding)originalType).isStatic();", "+\t\t\tconvertedEnclosing = originalEnclosing;", "+\t\t} else if (needToConvert || ((ReferenceBinding)originalType).isStatic()) {", "+\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "+\t\t} else {", "+//\t\t} else if (originalEnclosing instanceof SourceTypeBinding){", "+\t\t\tconvertedEnclosing = convertToParameterizedType(originalEnclosing);", "+//\t\t} else {", "+//\t\t\tconvertedEnclosing = originalEnclosing;", "-\t\t\tif (originalGeneric.isStatic())", "-\t\t\t\tconvertedType = createParameterizedType(originalGeneric, null, convertedEnclosing);", "-\t\t\telse ", "-\t\t\t\tconvertedType = createRawType(originalGeneric, convertedEnclosing);", "+\t\t\tconvertedType = createParameterizedType(originalGeneric, null, convertedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f9a36a51c71261c982a00bb502c033f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bbfd43e75c85d178e78e2e1f2cdd86b56e672481", "commitAfterChange": "b7270c3ed9751063a7847ef78467ed5c4c4a29fb", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r \tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen, List<Type> typeArguments)", "signatureAfterChange": "\r \r \tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen)", "diff": ["-\tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen, List<Type> typeArguments) {\r", "+\tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen) {\r", "-\t\t}\r", "-\r", "-\t\tif (!typeArguments.isEmpty()) {\r", "-\t\t\thandleTokenAfter(typeArguments.get(typeArguments.size() - 1), TokenNameGREATER, false,\r", "-\t\t\t\t\tthis.options.insert_space_after_closing_angle_bracket_in_type_arguments);\r", "-\t\t\thandleCommas(typeArguments,\r", "-\t\t\t\t\tthis.options.insert_space_before_comma_in_parameterized_type_reference,\r", "-\t\t\t\t\tthis.options.insert_space_after_comma_in_parameterized_type_reference);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9381c146a64b1ddcdca2d9d40edcda34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c22ae4e2acd996824ff94a2b0edaa0df69d9b3b1", "commitAfterChange": "1eeba055c4a858ddea83f6c85864678280808173", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic StringBuffer printExpression(int tab, StringBuffer output)", "signatureAfterChange": " \t \tpublic StringBuffer printExpression(int tab, StringBuffer output)", "diff": ["-\t\tif (this.type != null) {", "-\t\t\tthis.type.print(0, output);", "-\t\t} else if (this.name != null) {", "-\t\t\tthis.name.print(0, output);", "-\t\t} else {", "-\t\t\tthis.primary.print(0, output);", "-\t\t}", "+\t\tthis.lhs.print(0, output);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95cda54b2f44d4f208dd4bed5924fb8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "ffd0667b5086352f304c15ea4ad31de38892668e", "commitAfterChange": "14609503efe4c7d28a69750ca6853c468e091676", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\t\t\t\tinferenceContext.currentBounds.addBounds(innerCtx.b2, inferenceContext.environment);", "-\t\t\t\t\t\t\tinferenceContext.inferenceVariables = innerCtx.inferenceVariables;", "-\t\t\t\t\t\t\tinferenceContext.inferenceKind = innerCtx.inferenceKind;", "-\t\t\t\t\t\t\tinnerCtx.outerContext = inferenceContext;", "-\t\t\t\t\t\t\tinferenceContext.usesUncheckedConversion = innerCtx.usesUncheckedConversion;", "+\t\t\t\t\t\t\tinferenceContext.integrateInnerInferenceB2(innerCtx);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960cffef19451dcdd8792b0c93fa9302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tfinal TextEdit getCopySourceEdit(CopySourceInfo info)", "signatureAfterChange": " \t \tfinal TextEdit getCopySourceEdit(CopySourceInfo info)", "diff": ["-\t\t\tint start, end;", "-\t\t\tif (info.getStartNode() == info.getEndNode()) {", "-\t\t\t\tSourceRange range= getExtendedRange(info.getStartNode());", "-\t\t\t\tstart= range.getStartPosition();", "-\t\t\t\tend= start + range.getLength();", "-\t\t\t} else {", "-\t\t\t\tstart= getExtendedOffset(info.getStartNode());", "-\t\t\t\tend= getExtendedEnd(info.getEndNode());", "-\t\t\t}", "+\t\t\tSourceRange range= getExtendedRange(info.getNode());", "+\t\t\tint start= range.getStartPosition();", "+\t\t\tint end= start + range.getLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99458971b5bb8eebf1cecefc3657f4f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "signatureAfterChange": " \t\t \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "diff": ["-\t\t\t", "-\t\t\tinitCopyRangeChecks(parent, property);", "-\t\t\t\t\t\tcheckForRangeStart(node);", "-\t\t\t\t\t\tcheckForRangeEnd(node);", "-\t\t\t\t\t\tcheckForRangeStart(node);", "-\t\t\t\t\t\tcheckForRangeEnd(node);", "-\t\t\t\t\t\tcheckForRangeStart(node);", "-\t\t\t\t\t\tcheckForRangeEnd(node);", "-\t\t\t\t\t\tcheckForRangeStart(node);", "-\t\t\t\t\t\tcheckForRangeEnd(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a2a7af2ddf5def70d206ae80757d8df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "38df8da524fe9a4447ec44507ebad1f9ece75a2f", "commitAfterChange": "908069783b3c679a7fb6f9224220f18c85e23565", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tif (currentArg.equals(\"-classpath\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-classpath\") || currentArg.equals(\"-cp\")) { //$NON-NLS-1$\r", "-\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "-\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "-\t\tif (!file.exists())\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r", "+\t\tif (!file.exists()) // signal missing classpath entry file\r", "+\t\t\tout.println(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d125ebdbbcebd3b22c82794d66fbe87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\t\tif (original.typeVariables != Binding.NO_TYPE_VARIABLES)", "-\t\t\t\t\t\t\t\toriginal2 = original.computeSubstitutedMethod(original2, environment());", "-\t\t\t\t\t\t\tif (original2 == null || !original.areParametersEqual(original2))", "+\t\t\t\t\t\t\tif (!environment().methodVerifier().doesMethodOverride(original, original2))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0bc284e9ba0544540558421623b135e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void setUpSuite() throws Exception", "signatureAfterChange": " \t \tpublic void setUpSuite() throws Exception", "diff": ["-\t\t", "-\t\tHashtable options = JavaCore.getOptions();", "-\t\tthis.oldOptions = (Hashtable)options.clone();", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, JavaCore.SPACE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE, \"4\");", "-\t\tJavaCore.setOptions(options);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3800c6e5d21e7e99b03b7253c39bed4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-\t\tcase IProblem.NullFieldReference:", "-\t\tcase IProblem.PotentialNullFieldReference:", "-\t\tcase IProblem.RedundantFieldNullAssignment:", "-\t\tcase IProblem.NullFieldInstanceofYieldsFalse:", "-\t\tcase IProblem.RedundantNullCheckOnNonNullField:", "-\t\tcase IProblem.RedundantNullCheckOnNullField:", "-\t\tcase IProblem.NonNullFieldComparisonYieldsFalse:", "-\t\tcase IProblem.NullFieldComparisonYieldsFalse:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a454e94588a1f940a78af0b3e4981ca0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f04f8b342c7b71da1a56858ab790d24d761e7d9c", "commitAfterChange": "cb9adfe2a810fff7861c89a641a842e760d0d109", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "signatureAfterChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "diff": ["-\t\tJavaProject jp = (JavaProject) parentCompilationUnit.getJavaProject();", "+\t\tIJavaProject jp = parentCompilationUnit.getJavaProject();", "-\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\tproject.refreshLocal(IResource.DEPTH_INFINITE, null);", "-\t\tif (!folder.exists())", "-\t\t\tfolder.create(true, true, null);", "-\t\t", "-\t\t//", "-\t\t// make sure __generated_src dir is on the cp if not already", "-\t\t//", "-\t\tupdateProjectClasspath( jp, folder, progressMonitor );", "+\t\tIFolder folder = ensureGeneratedSourceFolder(jp, progressMonitor );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4af579cca3b649929c4c4c67448449c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java", "commitBeforeChange": "c62a418f35a40981606d85e97ecee9f9596fa8d0", "commitAfterChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic TypeKind getKind()", "signatureAfterChange": " \t@Override \tpublic TypeKind getKind()", "diff": ["-\t\t", "+\t\t// case Binding.METHOD: handled by ExecutableTypeImpl", "+\t\t// case Binding.PACKAGE: handled by NoTypeImpl", "+\t\t// case Binding.WILDCARD_TYPE: handled by WildcardTypeImpl", "+\t\t// case Binding.ARRAY_TYPE: handled by ArrayTypeImpl", "-\t\tcase Binding.METHOD:", "-\t\t\tthrow new IllegalArgumentException(\"Invalid binding kind: \" + _binding.kind()); //$NON-NLS-1$", "-\t\tcase Binding.PACKAGE:", "-\t\t\treturn TypeKind.PACKAGE;", "-\t\tcase Binding.ARRAY_TYPE:", "-\t\t\treturn TypeKind.ARRAY;", "-\t\tcase Binding.WILDCARD_TYPE:", "-\t\t\treturn TypeKind.WILDCARD;", "-\t\t\tthrow new UnsupportedOperationException(\"NYI\"); //$NON-NLS-1$", "+\t\t\tthrow new IllegalArgumentException(\"Invalid binding kind: \" + _binding.kind()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5230aef1bb40a3e361d396bf83255ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void testMethodWithError7() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError07() throws CoreException", "diff": ["-public void testMethodWithError7() throws JavaModelException, CoreException {", "+public void testMethodWithError07() throws CoreException {", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.cu = getCompilationUnit(\"Reconciler\", \"src\", \"p1\", \"Y.java\");", "-\t\tthis.workingCopy = this.cu.getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler/src/p1/Y.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.deleteFile(\"/Reconciler/src/p1/Y.java\");", "+\t\tdeleteFile(\"/Reconciler/src/p1/Y.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b5e91146107950857c3f9d3cdc80aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 74, "signatureBeforeChange": "\r \tprotected void setRawClasspath0(IClasspathEntry[] entries) throws JavaModelException", "signatureAfterChange": "\r \tprotected void setRawClasspath0(IClasspathEntry[] entries) throws JavaModelException", "diff": ["-\t\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t\tIResource rsc= root.getUnderlyingResource();\r", "-\t\t\t\t\t\t\tif (rsc == null) {\r", "-\t\t\t\t\t\t\t\tif (indexManager != null) indexManager.indexJarFile(root, getUnderlyingResource().getName());\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tif (indexManager != null) indexManager.indexJarFile((IFile) rsc, getUnderlyingResource().getName());\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (root.isArchive()){\r", "+\t\t\t\t\t\t\tif (indexManager != null) indexManager.indexJarFile(root.getPath(), getUnderlyingResource().getName());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b843c18209e1229c5b78e0811f71c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\t\t|| castType.isGenericType() ", "-\t\t\t\t|| \texpressionType.isBoundParameterizedType() ", "-\t\t\t\t|| expressionType.isGenericType())) {", "+\t\t\t\t|| \texpressionType.isBoundParameterizedType())) {", "-\t\t\t\tif ((!match.isParameterizedType() && !match.isGenericType())", "-\t\t\t\t\t\t|| expressionType.isRawType()) {", "+\t\t\t\tif (!match.isParameterizedType() || expressionType.isRawType()) {", "-\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && (leafType.isBoundParameterizedType() || leafType.isGenericType())) {", "+\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && leafType.isBoundParameterizedType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aad25d554bd4ce030b4652bfa00d77a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "93675a43d968a3c19731d41f01d7289fd7ab10d8", "commitAfterChange": "5bdc34d5d9c6002fe6f005fd6095ecbab7b31181", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\t\t\tThread currentThread = Thread.currentThread();", "-\t\t\tboolean addedCurrentThread = false;\t\t\t", "+", "+\t\t\tnewRoots = new HashMap();", "+\t\t\tnewOtherRoots = new HashMap();", "+\t\t\tnewSourceAttachments = new HashMap();", "+\t", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects;", "-\t\t\t\t// if reentering initialization (through a container initializer for example) no need to compute roots again", "-\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=47213", "-\t\t\t\tif (!this.initializingThreads.add(currentThread)) return;", "-\t\t\t\taddedCurrentThread = true;", "-\t\t\t\t", "-\t\t\t\tnewRoots = new HashMap();", "-\t\t\t\tnewOtherRoots = new HashMap();", "-\t\t\t\tnewSourceAttachments = new HashMap();", "-\t\t", "-\t\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "+\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// nothing can be done", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t\t// nothing can be done", "-\t\t\t\t\treturn;", "+\t\t\t\t\t// continue with next project", "+\t\t\t\t\tcontinue;", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t", "+\t\t\t\t\t// root path", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "+\t\t\t\t\t\tif (rootList == null) {", "+\t\t\t\t\t\t\trootList = new ArrayList();", "+\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// source attachment path", "+\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// continue with next project", "+\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// root path", "-\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\tif (newRoots.get(path) == null) {", "-\t\t\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\t\tif (rootList == null) {", "-\t\t\t\t\t\t\t\trootList = new ArrayList();", "-\t\t\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trootList.add(new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars(), entry.getEntryKind()));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// source attachment path", "-\t\t\t\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "-\t\t\t\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "-\t\t\t\t\t\tString propertyString = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "-\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIPath sourceAttachmentPath;", "-\t\t\t\t\t\tif (propertyString != null) {", "-\t\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "-\t\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (sourceAttachmentPath != null) {", "-\t\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tIPath sourceAttachmentPath;", "+\t\t\t\t\tif (propertyString != null) {", "+\t\t\t\t\t\tint index= propertyString.lastIndexOf(PackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\t\t\tsourceAttachmentPath = (index < 0) ?  new Path(propertyString) : new Path(propertyString.substring(0, index));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tif (addedCurrentThread) {", "-\t\t\t\t\tthis.initializingThreads.remove(currentThread);", "+\t\t\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac69757d12d83f4b5e965a5be91cdd84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "d57d057b9e029964391a7d18231884c456809f0a", "commitAfterChange": "a5db2eb78d347817bbf37d865afb84de837fdf1b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException", "signatureAfterChange": " \tpublic SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-", "-\t\t// Create search scope with visible entry on the project's classpath", "-\t\tif(this.checkAccessRestrictions) {", "-\t\t\tthis.searchScope = BasicSearchEngine.createJavaSearchScope(new IJavaElement[] {project});", "-\t\t} else {", "-\t\t\tthis.searchScope = BasicSearchEngine.createJavaSearchScope(this.nameLookup.packageFragmentRoots);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac8bf0a1a01b3c4ca79efa11c77c0f8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeParameterDeclarationImpl.java", "commitBeforeChange": "b4f6df5ae08d61af8762ee59e5c247a670be227d", "commitAfterChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public Declaration getOwner()", "signatureAfterChange": "      public Declaration getOwner()", "diff": ["+\t\treturn Factory.createDeclaration(getOwnerBinding(), _env);    ", "+    }", "-\t\t// actually don't know for some reason.", "-\t\tif( owner == null ) return null;", "-\t\treturn Factory.createDeclaration(owner, _env);    ", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc1562184099cf639c0ac8d22b289f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "8d4c1d1ffccad45ec9a12888c6b55b8b6baaa0c5", "commitAfterChange": "4b2447f980b1f004d5d76b9cf416fd4398082a5b", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  public void evaluateNullAnnotations(Scope skope)", "signatureAfterChange": "  public void evaluateNullAnnotations()", "diff": ["-public void evaluateNullAnnotations(Scope skope) {", "+public void evaluateNullAnnotations() {", "-", "-\tif (this.scope != null)", "-\t\tskope = this.scope;", "-\tif (this.nullnessDefaultInitialized > 0 || !skope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)", "+\tif (this.nullnessDefaultInitialized > 0 || !this.scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)", "-\t\t\t\tpkg == skope.environment().nonnullAnnotationPackage", "-\t\t\t\t|| pkg == skope.environment().nullableAnnotationPackage", "-\t\t\t\t|| pkg == skope.environment().nonnullByDefaultAnnotationPackage;", "+\t\t\t\tpkg == this.scope.environment().nonnullAnnotationPackage", "+\t\t\t\t|| pkg == this.scope.environment().nullableAnnotationPackage", "+\t\t\t\t|| pkg == this.scope.environment().nonnullByDefaultAnnotationPackage;", "-\t\t\t\tif (this.scope != null)", "-\t\t\t\t\tthis.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);", "+\t\t\t\tthis.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);", "-\tboolean usesNullTypeAnnotations = skope.environment().usesNullTypeAnnotations();", "-\tif (usesNullTypeAnnotations && this.scope != null) {", "+\tboolean usesNullTypeAnnotations = this.scope.environment().usesNullTypeAnnotations();", "+\tif (usesNullTypeAnnotations) {", "-\t\tif (this.scope != null) {", "-\t\t\tif (newDefaultNullness != NO_NULL_DEFAULT) {", "-\t\t\t\tif (isPackageInfo) {", "-\t\t\t\t\tpkg.defaultNullness = newDefaultNullness;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.defaultNullness = newDefaultNullness;", "-\t\t\t\t\tTypeDeclaration typeDecl = this.scope.referenceContext;", "-\t\t\t\t\tlong nullDefaultBits = annotationTagBits & (TagBits.AnnotationNullUnspecifiedByDefault|TagBits.AnnotationNonNullByDefault);", "-\t\t\t\t\tcheckRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, nullDefaultBits, false);", "-\t\t\t\t}", "-\t\t\t} else if (isPackageInfo || (isInDefaultPkg && !(this instanceof NestedTypeBinding))) {", "-\t\t\t\tthis.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);", "-\t\t\t\tif (!isInDefaultPkg)", "-\t\t\t\t\tpkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\tif (newDefaultNullness != NO_NULL_DEFAULT) {", "+\t\t\tif (isPackageInfo) {", "+\t\t\t\tpkg.defaultNullness = newDefaultNullness;", "+\t\t\t} else {", "+\t\t\t\tthis.defaultNullness = newDefaultNullness;", "+\t\t\t\tTypeDeclaration typeDecl = this.scope.referenceContext;", "+\t\t\t\tlong nullDefaultBits = annotationTagBits & (TagBits.AnnotationNullUnspecifiedByDefault|TagBits.AnnotationNonNullByDefault);", "+\t\t\t\tcheckRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, nullDefaultBits, false);", "+\t\t} else if (isPackageInfo || (isInDefaultPkg && !(this instanceof NestedTypeBinding))) {", "+\t\t\tthis.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);", "+\t\t\tif (!isInDefaultPkg)", "+\t\t\t\tpkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad5e838c3c895328cdb022ed9c4e81a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "56484abf3afec06a3b2fe9a53e3d4859e1a90d5d", "commitAfterChange": "c98606727e89fdf50e483c7870bb4651b90d6014", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   \tprivate ConstraintTypeFormula[] deriveTypeArgumentConstraints(TypeBound boundS, TypeBound boundT)", "signatureAfterChange": "   \tprivate ConstraintTypeFormula[] deriveTypeArgumentConstraints(TypeBound boundS, TypeBound boundT)", "diff": ["-\t\tif (boundS.relation != ReductionResult.SUBTYPE || boundT.relation != ReductionResult.SUBTYPE)", "-\t\t\treturn null;", "-\t\tif (TypeBinding.notEquals(boundS.left, boundT.left))", "-\t\t\treturn null;", "+\t\t// callers must ensure both relations are <: and both lefts are equal"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b000dab4fd5e2fcf8d77d3d9ef1cbf40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int indexOfWellKnownFieldNameAndType(FieldBinding fieldBinding)", "signatureAfterChange": " protected int getFromNameAndTypeCache(FieldBinding binding)", "diff": ["- */", "-public int indexOfWellKnownFieldNameAndType(FieldBinding fieldBinding) {", "-\tif ((fieldBinding.type.id == T_JavaLangClass) && (CharOperation.equals(fieldBinding.name, QualifiedNamesConstants.TYPE)))", "-\t\treturn TYPE_JAVALANGCLASS_NAME_AND_TYPE;", "-\tif ((fieldBinding.type.id == T_JavaIoPrintStream) && (CharOperation.equals(fieldBinding.name, QualifiedNamesConstants.Out)))", "-\t\treturn OUT_SYSTEM_NAME_AND_TYPE;", "-\treturn -1;", "+protected int getFromNameAndTypeCache(FieldBinding binding) {", "+\treturn getFromNameAndTypeCache(binding.name, binding.type.signature());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f762eab93ce4d0a50511cbc85c60d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 274, "signatureBeforeChange": "  public void variablePotentialNullReference(VariableBinding variable, ASTNode location)", "signatureAfterChange": "  public void variablePotentialNullReference(VariableBinding variable, ASTNode location)", "diff": ["-\tString[] arguments = new String[] {new String(variable.name)};", "-\t\tif ((variable.tagBits & TagBits.AnnotationNullable) != 0) {", "-\t\t\t// instead of reporting \"can be null at this location\" say *why* we give the warning: @Nullable!", "-\t\t\tproblem = IProblem.NullableFieldReference;", "-\t\t\tchar[][] nullableName = this.options.nullableAnnotationName;", "-\t\t\targuments = new String[] {new String(variable.name),", "-\t\t\t\t\t                  new String(nullableName[nullableName.length-1])};", "-\t\t} else {", "-\t\t\tproblem = IProblem.PotentialNullFieldReference;", "-\t\t}", "+\t\tproblem = IProblem.PotentialNullFieldReference;", "+\tString[] arguments = new String[] {new String(variable.name)};", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b253eb6856978ffcd5a05d8d23d27e7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SignatureWrapper.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int computeEnd()", "signatureAfterChange": " \tpublic int computeEnd()", "diff": ["-\t\tif (this.use15specifics || this.end != this.bracket) {", "-\t\t\tthis.start = this.end + 1; // skip ';'", "-\t\t} else {", "-\t\t\tthis.start = skipAngleContents(this.end) + 1;  // skip <<>*>;", "-\t\t\tthis.bracket = -1;", "-\t\t}", "+\t\tthis.start = this.end + 1; // skip ';'", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b33dba8999cdee1906841be4477ab2c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "22bf8b2f615c4dacc00d77046015851ecf0d7afd", "commitAfterChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void checkMethods()", "signatureAfterChange": "  void checkMethods()", "diff": ["-\t\t\t\t\tif (!CharOperation.equals(inheritedMethod.declaringClass.qualifiedPackageName(), CharOperation.NO_CHAR)) // https://bugs.eclipse.org/bugs/show_bug.cgi?id=343060", "-\t\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());", "+\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());", "-\t\t\t\t\tif (!CharOperation.equals(inheritedMethod.declaringClass.qualifiedPackageName(), CharOperation.NO_CHAR)) // https://bugs.eclipse.org/bugs/show_bug.cgi?id=343060", "-\t\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());", "+\t\t\t\t\tthis.type.addSyntheticBridgeMethod(inheritedMethod.original());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b8b22d6b7f30739c4d658f09cae58c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "commitAfterChange": "1636f4f6a9a908a8764c3fcbad745e3e39a0b116", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t", "-\t\tthis.ordinal = currentScope.enclosingSourceType().addLambdaMethod(this);", "-\t\tthis.binding.selector = CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.ordinal).toCharArray());", "+\t\tthis.binding = currentScope.enclosingSourceType().addSyntheticMethod(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8653f0dbbf3dba5c89859f32e6894ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c4baf766be166b04f595eec5cebbd2a64f399daa", "commitAfterChange": "6574ecf5c4b5647220e5c6028073411e3f107ad7", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods)", "signatureAfterChange": "  \tpublic int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param)", "diff": ["+\tpublic int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param) {", "+\t\tif (arg.isCompatibleWith(param))", "+\t\t\treturn COMPATIBLE;", "+\t\t", "+\t\tif (arg.isBaseType() != param.isBaseType()) {", "+\t\t\tTypeBinding convertedType = environment().computeBoxingType(arg);", "+\t\t\tif (convertedType == param || convertedType.isCompatibleWith(param))", "+\t\t\t\treturn AUTOBOX_COMPATIBLE;", "+\t\t}", "+\t\treturn NOT_COMPATIBLE;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9a2ac852ec7b6efb215f6a428168907", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "4dd777707c2803e1e51e44f3ccb37074b166c552", "commitAfterChange": "bb0062c9650742fadc1d35f4bf3fa1b174bd1969", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void consumeFieldAccess(boolean isSuperAccess)", "signatureAfterChange": " protected void consumeFieldAccess(boolean isSuperAccess)", "diff": ["-\tExpression node = this.expressionStack[this.expressionPtr];", "-\tif (node instanceof Reference) // should always be a FieldReference, but play it safe", "-\t\tthis.patternLocator.match((Reference) node, this.matchSet);", "-\telse", "-\t\tthis.patternLocator.match(node, this.matchSet);", "+", "+\t// this is always a Reference", "+\tthis.patternLocator.match((Reference) this.expressionStack[this.expressionPtr], this.matchSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6e707053c9f03b3b439acc0b14bf94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " public char[] sourceName()", "signatureAfterChange": "  public char[] sourceName()", "diff": ["+", "-\t\tif (superInterfaces == Binding.NO_SUPERINTERFACES)", "-\t\t\treturn CharOperation.concat(TypeConstants.ANONYM_PREFIX, superclass.sourceName(), TypeConstants.ANONYM_SUFFIX);", "-\t\telse", "-\t\t\treturn CharOperation.concat(TypeConstants.ANONYM_PREFIX, superInterfaces[0].sourceName(), TypeConstants.ANONYM_SUFFIX);", "-\t\t\t", "+\t\treturn CharOperation.concat(TypeConstants.ANONYM_PREFIX, anonymousOriginalSuperType().sourceName(), TypeConstants.ANONYM_SUFFIX);", "-\t\treturn sourceName;", "+\t\treturn this.sourceName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef1ae2c3b9487ed85222bceeed9ac7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "e2801c340924b0987ea52e37626abf6035ced667", "commitAfterChange": "3b2052c623130c252652dbc4ea1f3e9fec2cb90c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public void setUnitsToLookInside(IWorkingCopy[] unitsToLookInside)", "signatureAfterChange": "\r public void setUnitsToLookInside(IWorkingCopy[] unitsToLookInside)", "diff": ["-\tThread currentThread = Thread.currentThread();\r", "-\tif (unitsToLookInside == null) {\r", "-\t\tthis.unitsToLookInside.put(currentThread, null);\r", "+\tif (unitsToLookInside == null) { \r", "+\t\tthis.unitsToLookInside.setCurrent(null); \r", "-\t\tMap workingCopies = (Map)this.unitsToLookInside.get(currentThread);\r", "-\t\tif (workingCopies == null){\r", "-\t\t\tthis.unitsToLookInside.put(currentThread, workingCopies = new HashMap());\r", "-\t\t}\r", "+\t\tHashMap workingCopies = new HashMap();\r", "+\t\tthis.unitsToLookInside.setCurrent(workingCopies);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2c8292db108b75d029c26e08b02d4e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "373213c46e960126c24f24cda1599f19817b9ac1", "commitAfterChange": "1b44c9cacb183e5b618e64370a268adde6188d28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected void applyTextEdit(ICompilationUnit cu, TextEdit edits) throws JavaModelException", "signatureAfterChange": " \tprotected void applyTextEdit(ICompilationUnit cu, TextEdit edits) throws JavaModelException", "diff": ["-\t\t\tcu.applyTextEdit(edits, this.progressMonitor);", "-\t\t} catch (JavaModelException e) {", "-\t\t\tif (e.getJavaModelStatus().getCode() == IJavaModelStatusConstants.BAD_TEXT_EDIT_LOCATION) {", "-\t\t\t\t// content changed under us", "-\t\t\t\tthrow new JavaModelException(e.getException(), IJavaModelStatusConstants.INVALID_CONTENTS);", "-\t\t\t} else {", "-\t\t\t\tthrow e;", "-\t\t\t}", "+\t\t\tedits.apply(getDocument(cu));", "+\t\t} catch (BadLocationException e) {", "+\t\t\t// content changed under us", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.INVALID_CONTENTS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c452ee9a4017cbbc9eaaa3b254f86848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\t\t// tag parameters as being set", "-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(this.arguments[i].binding);", "-\t\t\t}", "-\t\t}", "+\t\t// nullity and mark as assigned", "+\t\tanalyseArguments(flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c70a867db6130ec4eff18928c9f047d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AnnotationMethodDeclaration.java", "commitBeforeChange": "6f916f305af8f54fb52235c12575658f091cf8e0", "commitAfterChange": "fa65feb310f9ea22a2bdb7f7d7e5c0ae561e02fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolveStatements()", "signatureAfterChange": " \t \tpublic void resolveStatements()", "diff": ["-\t\t\t\t\t", "-\t\t\t\tswitch (leafReturnType.erasure().id) {", "-\t\t\t\t\tcase T_byte :", "-\t\t\t\t\tcase T_short :", "-\t\t\t\t\tcase T_char :", "-\t\t\t\t\tcase T_int :", "-\t\t\t\t\tcase T_long :", "-\t\t\t\t\tcase T_float :", "-\t\t\t\t\tcase T_double :", "-\t\t\t\t\tcase T_boolean :", "-\t\t\t\t\tcase T_JavaLangString :", "-\t\t\t\t\tcase T_JavaLangClass :", "-\t\t\t\t\t\tif (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted", "+\t\t\t\tif (returnTypeBinding.dimensions() <= 1) { // only 1-dimensional array permitted", "+\t\t\t\t\tswitch (leafReturnType.erasure().id) {", "+\t\t\t\t\t\tcase T_byte :", "+\t\t\t\t\t\tcase T_short :", "+\t\t\t\t\t\tcase T_char :", "+\t\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcase T_boolean :", "+\t\t\t\t\t\tcase T_JavaLangString :", "+\t\t\t\t\t\tcase T_JavaLangClass :", "-\t\t\t\t}", "-\t\t\t\tif (leafReturnType.isEnum()) {", "-\t\t\t\t\tif (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted", "-\t\t\t\t\t\tbreak checkAnnotationMethodType;", "-\t\t\t\t}", "-\t\t\t\tif (leafReturnType.isAnnotationType()) {", "-\t\t\t\t\tscope.classScope().detectAnnotationCycle(scope.enclosingSourceType(), leafReturnType, this.returnType);", "-\t\t\t\t\tif (returnTypeBinding.dimensions() <= 1) // only 1-dimensional array permitted", "+\t\t\t\t\t}", "+\t\t\t\t\tif (leafReturnType.isEnum() || leafReturnType.isAnnotationType())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c84b29288da364aba95d6fc5e619df35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "715524ca244384ae2f7955efd3a5c7d3b2d34d4d", "commitAfterChange": "e5a1dfaef4d73951c29733064699d4bce0d0e9be", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " protected int resolveLevel(MessageSend messageSend)", "signatureAfterChange": " protected int resolveLevel(MessageSend messageSend)", "diff": ["-\t\t\t\tchar[][] compoundName = methodReceiverType.compoundName;", "-\t\t\t\tfor (int i = 0, max = this.allSuperDeclaringTypeNames.length; i < max; i++) {", "-\t\t\t\t\tif (CharOperation.equals(this.allSuperDeclaringTypeNames[i], compoundName)) {", "-\t\t\t\t\t\treturn methodLevel // since this is an ACCURATE_MATCH so return the possibly weaker match", "-\t\t\t\t\t\t\t| SUPER_INVOCATION_FLAVOR; // this is an overridden method => add flavor to returned level", "-\t\t\t\t\t}", "+\t\t\t\tif (resolveLevelAsSuperInvocation(methodReceiverType)) {", "+\t\t\t\t\tdeclaringLevel = methodLevel // since this is an ACCURATE_MATCH so return the possibly weaker match", "+\t\t\t\t\t\t| SUPER_INVOCATION_FLAVOR; // this is an overridden method => add flavor to returned level", "-\t\t\t\t/* Do not return interfaces potential matches", "-\t\t\t\t * @see \"https://bugs.eclipse.org/bugs/show_bug.cgi?id=157814#c8\"", "-\t\t\t\tif (methodReceiverType.isInterface()) {", "-\t\t\t\t\t// all methods interface with same name and parameters are potential matches", "-\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=156491", "-\t\t\t\t\treturn INACCURATE_MATCH | POLYMORPHIC_FLAVOR;", "-\t\t\t\t}", "-\t\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb5046bbf0b53e3d048e4b47b9f91f87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/JavaDevelopmentContextImpl.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r byte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file)", "signatureAfterChange": "\r byte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file)", "diff": ["-\t\tIPath location = file.getLocation();\r", "-\t\tif (location == null) return new byte[0];\r", "-\t\tInputStream input = new java.io.FileInputStream(location.toOSString());\r", "-\t\treturn org.eclipse.jdt.internal.core.Util.readContentsAsBytes(input);\r", "-\t} catch (IOException e) {\r", "+\t\treturn Util.getResourceContentsAsByteArray(file);\r", "+\t} catch (JavaModelException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbd9082607c501c2d92e983034d12437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0dc7155c5e6d95f70a9aded517c1b54b5c1563f1", "commitAfterChange": "f6b4d99cbdd9c3e7eddd18da23b2ebc6b500e5e0", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "\t  \tprotected boolean hasErasedCandidatesCollisions(TypeBinding one, TypeBinding two, Map invocations, ReferenceBinding type, ASTNode typeRef)", "signatureAfterChange": "\t  \tprotected boolean hasErasedCandidatesCollisions(TypeBinding one, TypeBinding two, Map invocations, ReferenceBinding type, ASTNode typeRef)", "diff": ["-\t\t\t\tSet invalidInvocations = (Set) invocations.get(mec);", "-\t\t\t\tint invalidSize = invalidInvocations.size();", "-\t\t\t\tif (invalidSize > 1) {", "-\t\t\t\t\tTypeBinding[] collisions;", "-\t\t\t\t\tinvalidInvocations.toArray(collisions = new TypeBinding[invalidSize]);", "-\t\t\t\t\tproblemReporter().superinterfacesCollide(collisions[0].erasure(), typeRef, collisions[0], collisions[1]);", "+\t\t\t\tObject value = invocations.get(mec);", "+\t\t\t\tif (value instanceof TypeBinding[]) {", "+\t\t\t\t\tTypeBinding[] invalidInvocations = (TypeBinding[]) value;", "+\t\t\t\t\tproblemReporter().superinterfacesCollide(invalidInvocations[0].erasure(), typeRef, invalidInvocations[0], invalidInvocations[1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf91c20182fc0788109fc021649a80e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/FieldAligner.java", "commitBeforeChange": "15931130cc3603cc40cf03dc17251cf7622502d5", "commitAfterChange": "80f1e7c4e4b868f26698d3e483443bcf19375a87", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void prepareAlign(TypeDeclaration node)", "signatureAfterChange": "  \tpublic void prepareAlign(List<FieldDeclaration> bodyDeclarations)", "diff": ["-\tpublic void prepareAlign(TypeDeclaration node) {", "-\t\tList<FieldDeclaration> bodyDeclarations = node.bodyDeclarations();", "+\tpublic void prepareAlign(List<FieldDeclaration> bodyDeclarations) {", "-\t\t\tif (!alignGroup.isEmpty()) {", "-\t\t\t\tif ((declaration instanceof FieldDeclaration)) {", "-\t\t\t\t\talignGroup.add((FieldDeclaration) declaration);", "-\t\t\t\t} else {", "-\t\t\t\t\talignFields(alignGroup);", "-\t\t\t\t\talignGroup = new ArrayList<>();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (alignGroup.isEmpty()) {", "-\t\t\t\tif (declaration instanceof FieldDeclaration)", "-\t\t\t\t\talignGroup.add((FieldDeclaration) declaration);", "+\t\t\tif ((declaration instanceof FieldDeclaration)) {", "+\t\t\t\talignGroup.add((FieldDeclaration) declaration);", "+\t\t\t} else {", "+\t\t\t\talignFields(alignGroup);", "+\t\t\t\talignGroup = new ArrayList<>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1034e7eb9040cdd8fb1252cd5964408", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["-\t\t\tif (!CharOperation.equals(oldSourceMethodInfo.getReturnTypeName(), newSourceMethodInfo.getReturnTypeName())", "-\t\t\t\t\t|| !CharOperation.equals(oldSourceMethodInfo.getTypeParameterSignatures(), newSourceMethodInfo.getTypeParameterSignatures())) {", "+\t\t\tif (!CharOperation.equals(oldSourceMethodInfo.getReturnTypeName(), newSourceMethodInfo.getReturnTypeName())) {", "-\t\t}", "-\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterSignatures(), newSourceTypeInfo.getTypeParameterSignatures())) {", "-\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1334466e6a2159c0c5c207fed245c46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/MethodInvocationFragmentBuilder.java", "commitBeforeChange": "bef94b122a5806a6bc4d6007e2830abcf111676d", "commitAfterChange": "280d119d240fe15fdcda0abda2f680707bc40458", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic boolean visit(SuperMethodInvocation methodInvocation)", "signatureAfterChange": " \tpublic boolean visit(SuperMethodInvocation methodInvocation)", "diff": ["-\t\tfinal Name qualifier = methodInvocation.getQualifier();", "-\t\tif (qualifier != null) {", "-\t\t\tthis.fragmentsList.add(qualifier);", "-\t\t}", "-\t\tthis.fragmentsList.add(methodInvocation.getName());", "+\t\tthis.fragmentsList.add(methodInvocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d472dee77ac457e036871cd762211a19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "16915e9c0afdeb5e545794cd2c3b24bc7875ce66", "commitAfterChange": "df4a3da6e8d30ada6824d136133377b3a37cfebb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate CaptureBinding18(CaptureBinding18 prototype)", "signatureAfterChange": " \t \tprivate CaptureBinding18(CaptureBinding18 prototype)", "diff": ["-\t\tthis(prototype.sourceType, CharOperation.append(prototype.sourceName, '\\''), prototype.originalName, prototype.position, prototype.captureID, prototype.environment);", "+\t\tsuper(prototype);", "+\t\tthis.sourceName = CharOperation.append(prototype.sourceName, '\\'');", "+\t\tthis.originalName = prototype.originalName;", "-\t\tthis.firstBound = prototype.firstBound;", "-\t\tthis.lowerBound = prototype.lowerBound;", "-\t\tthis.superInterfaces = prototype.superInterfaces;", "-\t\tthis.superclass = prototype.superclass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d703bddcc03e552cd5c7f927b62fb1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "2579944d091917e27cee3c25e303d9cdf8721b08", "commitAfterChange": "ff568cfa3818ea8ce091951aa40f00dde1253577", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, boolean atArg)", "signatureAfterChange": " \t \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, boolean atArg)", "diff": ["-\t\t\t\t\t\t\tboolean hasMemberValuePairs = annotations[annotationsIndex].memberValuePairs().length > 0;", "-\t\t\t\t\t\t\t\tif (hasMemberValuePairs) {", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation) {", "-\t\t\t\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_arg_annotation) {", "-\t\t\t\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_parameter) {", "+\t\t\t\t\t\t\t\t\tthis.printNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74c1555b989484d5bfb18113426f4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8a4bd8a6db890bd0552718e8332a5c8e90155329", "commitAfterChange": "595c4dea8c6828d0945e9c58025a82a9fd99c02b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\tif (exactMethod.typeVariables != Binding.NO_TYPE_VARIABLES || invocationSite.genericTypeArguments() != null) {", "-\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(exactMethod, argumentTypes, invocationSite);", "-\t\t\t\t\t// compatibleMethod should not be null thanks to the conditions guarding this block ", "-\t\t\t\t\tif (!compatibleMethod.isValidBinding() && exactMethod.typeVariables != Binding.NO_TYPE_VARIABLES) {", "-\t\t\t\t\t\treturn null; // could be a better generic method match (90423), which will be found by non exact match", "-\t\t\t\t\t}", "-\t\t\t\t\texactMethod = compatibleMethod;", "+\t\t\t\tif (invocationSite.genericTypeArguments() != null) {", "+\t\t\t\t\texactMethod = computeCompatibleMethod(exactMethod, argumentTypes, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b61b459baf63f2289cbb64ac71b919", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssertionTest.java", "commitBeforeChange": "20eaedd8038780a05a557c39b442f2485f010803", "commitAfterChange": "1920517d934718cca4ae649c790dd80e9c368b4b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected Map getCompilerOptions()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t */", "-\tprotected Map getCompilerOptions() {", "-\t\tMap options = super.getCompilerOptions();", "-\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\treturn options;", "+\t */", "+\tpublic void test013() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"        static class Y {\\n\" + ", "+\t\t\t\t\"                public static void test() {\\n\" + ", "+\t\t\t\t\"                        assert false;\\n\" + ", "+\t\t\t\t\"                        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"                }\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"                ClassLoader classLoader = new X().getClass().getClassLoader();\\n\" + ", "+\t\t\t\t\"                // enable assertion for X.Y\\n\" + ", "+\t\t\t\t\"                classLoader.setClassAssertionStatus(\\\"X$Y\\\", true);\\n\" + ", "+\t\t\t\t\"                X.Y.test();\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"SUCCESS\"); // expected output", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8099e2168b08658faea70de91fac934", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment2.java", "commitBeforeChange": "b736a4b7b5e36e43e9911cb920eaa27b719a1739", "commitAfterChange": "f7ef9224b59ac5e8fd98d69dbf74c94b4c3ba7fe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public NameEnvironmentAnswer findType(char[] typeName, char[][] packageName)", "signatureAfterChange": "  public NameEnvironmentAnswer findType(char[] typeName, char[][] packageName)", "diff": ["-public NameEnvironmentAnswer findType(char[] typeName, char[][] packageName) {", "-\tif (typeName == null) return null;", "-\tchar[][] compoundName = CharOperation.arrayConcat(packageName, typeName);", "-\tNameEnvironmentAnswer answer = findTypeInPotentialMatches(compoundName);", "-\tif (answer != null) return answer;", "-\treturn this.nameEnvironment.findType(typeName, packageName);", "-}", "+public NameEnvironmentAnswer findType(char[] typeName, char[][] packageName) {", "+\tif (typeName != null)", "+\t\treturn findClass(", "+\t\t\tnew String(CharOperation.concatWith(packageName, typeName, '/')),", "+\t\t\ttypeName);", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9ff0296f53b4dd377e8c2be9f0f117a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "0d4d3ffa043f4d6ea078fa26d3e214c34db9c96a", "commitAfterChange": "9d3ad98026b9244a895c45d3b27d014661e6b837", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void setUp15WorkingCopy() throws JavaModelException", "signatureAfterChange": " private void setUp15WorkingCopy() throws JavaModelException", "diff": ["+\tsetUpWorkingCopy(\"Reconciler15/src/p1/X.java\", contents);", "+}", "-\tthis.workingCopy = getCompilationUnit(\"Reconciler15/src/p1/X.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3f2646782e4f78c7e52aab540919ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "10a7931aec1c8332a21c39057c6b5465506f45bd", "commitAfterChange": "ac67adfb696f3d698561eed93e542c7d574b5a91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "-\tif (!valueRequired && ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL)) {", "-\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "-\t\tif (localBinding.useFlag == LocalVariableBinding.FAKE_USED) {", "-\t\t\t// compound assignment is the only usage of this local", "-\t\t\treportOnlyUselesslyReadLocal(currentScope, localBinding);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7dc8f9df22ec79c8459e164130028d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void deprecatedMethod(MethodBinding method, ASTNode location)", "signatureAfterChange": " public void deprecatedMethod(MethodBinding method, ASTNode location)", "diff": ["-\t\tint id = IProblem.UsingDeprecatedConstructor;", "-\t\tif ((location.bits & ASTNode.InsideJavadoc) != 0) {", "-\t\t\tid |= IProblem.Javadoc;", "-\t\t}", "-\t\t\tid,", "+\t\t\tIProblem.UsingDeprecatedConstructor,", "-\t\tint id = IProblem.UsingDeprecatedMethod;", "-\t\tif ((location.bits & ASTNode.InsideJavadoc) != 0) {", "-\t\t\tid |= IProblem.Javadoc;", "-\t\t}", "-\t\t\tid,", "+\t\t\tIProblem.UsingDeprecatedMethod,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6015bcb334b9014438cf4f094a9086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public DefaultProblemFactory(Locale loc)", "signatureAfterChange": " public DefaultProblemFactory(Locale loc)", "diff": ["-\tthis.locale = loc;", "-\tif (Locale.getDefault().equals(loc)){", "-\t\tif (DEFAULT_LOCALE_TEMPLATES == null){", "-\t\t\tDEFAULT_LOCALE_TEMPLATES = loadMessageTemplates(loc);", "-\t\t}", "-\t\tthis.messageTemplates = DEFAULT_LOCALE_TEMPLATES;", "-\t} else {", "-\t\tthis.messageTemplates = loadMessageTemplates(loc);", "-\t}", "+\tsetLocale(loc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f0069dde1281003ae6076c90c7e9c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tvoid validateNullAnnotations()", "signatureAfterChange": " \tvoid validateNullAnnotations()", "diff": ["-\t\tif (this.binding != null && this.binding.parameterNonNullness != null) {", "+\t\tif (this.binding != null) {", "-\t\t\t\tif (this.binding.parameterNonNullness[i] != null) {", "-\t\t\t\t\tlong nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()", "-\t\t\t\t\t\t\t? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;", "-\t\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);", "-\t\t\t\t}", "+\t\t\t\tlong nullAnnotationTagBit =  this.binding.returnType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tthis.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4308d0b541349de85a72eceb59b6fdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "af231babcc36b45e2ff3d4a97422d9f5a34150b7", "commitAfterChange": "38c895fd64a92567249832dd2a8d427fc1bcacc2", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForStatement forStatement, BlockScope scope)", "diff": ["-\t\t\t} else if (action instanceof EmptyStatement && !this.preferences.put_empty_statement_on_new_line) {", "-\t\t\t\taction.traverse(this, scope);", "+\t\t\t} else if (action instanceof EmptyStatement) {", "+\t\t\t\t/*", "+\t\t\t\t * This is an empty statement", "+\t\t\t\t */", "+\t\t\t\tformatNecessaryEmptyStatement();", "-\t\t\tthis.scribe.indent();", "-\t\t\tformatEmptyStatement(); ", "-\t\t\tthis.scribe.unIndent();", "+\t\t\tformatNecessaryEmptyStatement(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e76ba70a6b2aaf0495234063b518cc8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "7ed48908ec8a41725ff925d0919c07571054836e", "commitAfterChange": "6364144351fd62baca30ba0aad505f339b6274eb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic LocalDeclaration( \t\tExpression expr, \t\tchar[] name, \t\tint sourceStart, \t\tint sourceEnd)", "signatureAfterChange": " \t \tpublic LocalDeclaration( \t\tchar[] name, \t\tint sourceStart, \t\tint sourceEnd)", "diff": ["-\t\tExpression expr,", "-\t\tinitialization = expr;", "-\t\tif (initialization != null) {", "-\t\t\tthis.declarationSourceEnd = initialization.sourceEnd;", "-\t\t\tthis.declarationEnd = initialization.sourceEnd;", "-\t\t} else {", "-\t\t\tthis.declarationEnd = sourceEnd;", "-\t\t}", "+\t\tthis.declarationEnd = sourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7f2f589a610a11fa4a23d373d497fc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tboolean canBeSeen(int visibility, ReferenceBinding binding)", "signatureAfterChange": " \tboolean canBeSeen(int visibility, int modifiers)", "diff": ["-\tboolean canBeSeen(int visibility, ReferenceBinding binding) {", "-\t\tint modifiers = binding.modifiers;", "-\t\tif (!binding.isValidBinding()) {", "-\t\t\tProblemReferenceBinding problemBinding = (ProblemReferenceBinding) binding;", "-\t\t\tif (problemBinding.closestMatch != null) {", "-\t\t\t\tmodifiers = problemBinding.closestMatch.modifiers;", "-\t\t\t}", "-\t\t}", "+\tboolean canBeSeen(int visibility, int modifiers) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea8a61c0ea61cfcc7826565e7783d44f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "c55cddff12b32377afae40bbcf9627a7ca7ad410", "commitAfterChange": "b7edf809a20c24d79a7c1031a686c1da15a85a26", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void initialize()", "signatureAfterChange": " public void initialize()", "diff": ["-", "-\tIProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();", "-\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\tIProject project = projects[i];", "-\t\tif (project.isAccessible()) {", "-\t\t\ttry {", "-\t\t\t\tthis.add(JavaCore.create(project), false, new HashSet(2));", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t}", "+\ttry {", "+\t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tfor (int i = 0, length = projects.length; i < length; i++)", "+\t\t\tthis.add(projects[i], false, new HashSet(2));", "+\t} catch (JavaModelException ignored) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "effd101e6bd091fe2728a76c44955607", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope)", "diff": ["-\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NoSuchSingleAbstractMethod);", "+\t\treturn this.singleAbstractMethod = samProblemBinding;", "-\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NoSuchSingleAbstractMethod);", "+\treturn this.singleAbstractMethod = samProblemBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f49e0b6502bb2bd5b362b7d4f5c42b8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f11400a6293169aae30e17b2e27f5adb8ea51511", "commitAfterChange": "f04e3f1ae3453f83dbe0aa3f6ea76c9c43c152ce", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tIPath oldPath = (IPath)JavaModelManager.Variables.get(variableNames[i]);\r", "+\t\t\tIPath oldPath = (IPath)JavaModelManager.variableGet(variableNames[i]);\r", "-\t\t\t\t\t\t\t\t\tIPath oldPath = (IPath)JavaModelManager.Variables.get(variableName);\r", "+\t\t\t\t\t\t\t\t\tIPath oldPath = (IPath)JavaModelManager.variableGet(variableName);\r", "-\t\t\tif (path == null) {\r", "-\t\t\t\tJavaModelManager.Variables.remove(variableNames[i]);\r", "-\t\t\t} else {\r", "-\t\t\t\t// new variable value is assigned\r", "-\t\t\t\tJavaModelManager.Variables.put(variableNames[i], path);\r", "-\t\t\t}\r", "+\t\t\tJavaModelManager.variablePut(variableNames[i], path);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdbc72e0e621c7ca1db31d0f01455e8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c22ae4e2acd996824ff94a2b0edaa0df69d9b3b1", "commitAfterChange": "1eeba055c4a858ddea83f6c85864678280808173", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "signatureAfterChange": " \t \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "diff": ["+\t", "-", "-\t\t\tif (this.name != null)", "-\t\t\t\tthis.name.traverse(visitor, blockScope);", "-", "-\t\t\tif (this.type != null)", "-\t\t\t\tthis.type.traverse(visitor, blockScope);", "-", "-\t\t\tif (this.primary != null)", "-\t\t\t\tthis.primary.traverse(visitor, blockScope);", "-", "+\t\t\t", "+\t\t\tthis.lhs.traverse(visitor, blockScope);", "+\t\t\t", "-", "+\t\t\t"]}], "num": 68862}
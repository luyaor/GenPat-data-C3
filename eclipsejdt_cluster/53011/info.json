{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64d350d0c75d5690be322ff17369a0f2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d821aef4d1171ce9f1aa5d861520479", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java", "commitBeforeChange": "8577a754772ce76aa29c2d77e116e6709724c4d0", "commitAfterChange": "3d562d40da4e348a144afbbe3f8416f78f2d7aa4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public RecoveredElement updateOnClosingBrace(int braceStart, int braceEnd)", "signatureAfterChange": " public RecoveredElement updateOnClosingBrace(int braceStart, int braceEnd)", "diff": ["-\tif ((--bracketBalance <= 0) && (parent != null)){", "+\tif ((--this.bracketBalance <= 0) && (this.parent != null)){", "-\t\t\treturn parent.updateOnClosingBrace(braceStart, braceEnd);", "+\t\t\treturn this.parent.updateOnClosingBrace(braceStart, braceEnd);", "-\t\t\treturn parent.updateOnClosingBrace(braceStart, braceEnd);", "+\t\t\treturn this.parent.updateOnClosingBrace(braceStart, braceEnd);", "-\t\treturn parent;", "+\t\treturn this.parent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e6e447fc869601f0308150953a9b8c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void discardSuppressedWarnings()", "signatureAfterChange": "  public void discardSuppressedWarnings()", "diff": ["-\tpublic void discardSuppressedWarnings() {", "-", "-\t\tif (this.suppressWarningsCount == 0) return;", "-\t\tint removed = 0;", "-\t\tnextProblem: for (int i = 0, length = this.problemCount; i < length; i++) {", "-\t\t\tCategorizedProblem problem = this.problems[i];", "-\t\t\tint problemID = problem.getID();", "-\t\t\tif (!problem.isWarning()) {", "-\t\t\t\tswitch (problemID) {", "-\t\t\t\t\tcase IProblem.NonExternalizedStringLiteral :", "-\t\t\t\t\tcase IProblem.UnnecessaryNLSTag :", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\tcontinue nextProblem;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tint start = problem.getSourceStart();", "-\t\t\tint end = problem.getSourceEnd();", "-\t\t\tnextSuppress: for (int j = 0, max = this.suppressWarningsCount; j < max; j++) {", "-\t\t\t\tlong position = this.suppressWarningScopePositions[j];", "-\t\t\t\tint startSuppress = (int) (position >>> 32);", "-\t\t\t\tint endSuppress = (int) position;", "-\t\t\t\tif (start < startSuppress) continue nextSuppress;", "-\t\t\t\tif (end > endSuppress) continue nextSuppress;", "-\t\t\t\tif ((ProblemReporter.getIrritant(problemID) & this.suppressWarningIrritants[j]) == 0)", "-\t\t\t\t\tcontinue nextSuppress;", "-\t\t\t\t// discard suppressed warning", "-\t\t\t\tremoved++;", "-\t\t\t\tproblems[i] = null;", "-\t\t\t\tif (problemsMap != null) problemsMap.remove(problem);", "-\t\t\t\tif (firstErrors != null) firstErrors.remove(problem);", "-\t\t\t\tcontinue nextProblem;", "+public void discardSuppressedWarnings() {", "+\tif (this.suppressWarningsCount == 0) return;", "+\tint removed = 0;", "+\tnextProblem: for (int i = 0, length = this.problemCount; i < length; i++) {", "+\t\tCategorizedProblem problem = this.problems[i];", "+\t\tint problemID = problem.getID();", "+\t\tif (!problem.isWarning()) {", "+\t\t\tswitch (problemID) {", "+\t\t\t\tcase IProblem.NonExternalizedStringLiteral :", "+\t\t\t\tcase IProblem.UnnecessaryNLSTag :", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tcontinue nextProblem;", "-\t\tif (removed > 0) {", "-\t\t\tfor (int i = 0, index = 0; i < this.problemCount; i++) {", "-\t\t\t\tCategorizedProblem problem;", "-\t\t\t\tif ((problem = this.problems[i]) != null) {", "-\t\t\t\t\tif (i > index) {", "-\t\t\t\t\t\tthis.problems[index++] = problem;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.problemCount -= removed;", "+\t\tint start = problem.getSourceStart();", "+\t\tint end = problem.getSourceEnd();", "+\t\tnextSuppress: for (int j = 0, max = this.suppressWarningsCount; j < max; j++) {", "+\t\t\tlong position = this.suppressWarningScopePositions[j];", "+\t\t\tint startSuppress = (int) (position >>> 32);", "+\t\t\tint endSuppress = (int) position;", "+\t\t\tif (start < startSuppress) continue nextSuppress;", "+\t\t\tif (end > endSuppress) continue nextSuppress;", "+\t\t\tif ((ProblemReporter.getIrritant(problemID) & this.suppressWarningIrritants[j]) == 0)", "+\t\t\t\tcontinue nextSuppress;", "+\t\t\t// discard suppressed warning", "+\t\t\tremoved++;", "+\t\t\tthis.problems[i] = null;", "+\t\t\tif (this.problemsMap != null) this.problemsMap.remove(problem);", "+\t\t\tif (this.firstErrors != null) this.firstErrors.remove(problem);", "+\t\t\tcontinue nextProblem;", "+\tif (removed > 0) {", "+\t\tfor (int i = 0, index = 0; i < this.problemCount; i++) {", "+\t\t\tCategorizedProblem problem;", "+\t\t\tif ((problem = this.problems[i]) != null) {", "+\t\t\t\tif (i > index) {", "+\t\t\t\t\tthis.problems[index++] = problem;", "+\t\t\t\t\tindex++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tthis.problemCount -= removed;", "+\t}", "+}"]}], "num": 53011}
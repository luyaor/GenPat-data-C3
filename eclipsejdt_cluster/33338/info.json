{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "259c2fb7a4ba5b56bf3b07e3c8d1fea0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b7c42604d840b1bd0684059c0b5ddd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif (typeParameters != null) methodDecl.scope.connectTypeVariables(typeParameters);", "+\tif (typeParameters != null) {", "+\t\tmethodDecl.scope.connectTypeVariables(typeParameters);", "+\t\t// Perform deferred bound checks for type variables (only done after type variable hierarchy is connected)", "+\t\tfor (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\t\ttypeParameters[i].checkBounds(methodDecl.scope);", "+\t\t}", "+\t}", "-\t\t\tresolvedExceptionType = (ReferenceBinding) exceptionTypes[i].resolveType(methodDecl.scope);", "+\t\t\tresolvedExceptionType = (ReferenceBinding) exceptionTypes[i].resolveType(methodDecl.scope, true /* check bounds*/);", "-\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope);", "+\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope, true /* check bounds*/);", "-\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope);", "+\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf18c1cb573361d8af981ebfbe1f605c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "43c7d834579a78e14e74d42ff9708daa5f74ded5", "commitAfterChange": "c5fca7ef6c294c6139aba614099e9d98b3db43cc", "methodNumberBeforeChange": 295, "methodNumberAfterChange": 295, "signatureBeforeChange": " protected void consumeLambdaExpression()", "signatureAfterChange": " protected void consumeLambdaExpression()", "diff": ["+\tfor (int i = 0; i < length; i++) {", "+\t\tif (arguments[i].isReceiver()) {", "+\t\t\tproblemReporter().illegalThis(arguments[i]);", "+\t\t}", "+\t}"]}], "num": 33338}
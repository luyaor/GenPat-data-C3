{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dd21a3bbcb5f39c28d7976b426a9f09", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1f62f958ce510a7689555bf48c5a7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceModifyListener.java", "commitBeforeChange": "c07d1de5d7d0cb27a2b8f130f50debdfad6b4fb4", "commitAfterChange": "030a336d6852ac839a3f6024ca126c25cd9a3e62", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic IEclipsePreferences preApply(IEclipsePreferences node)", "signatureAfterChange": " \tpublic IEclipsePreferences preApply(IEclipsePreferences node)", "diff": ["-\t\tPreferences instance = node.node(InstanceScope.SCOPE);", "-\t\tcleanJavaCore(instance.node(JavaCore.PLUGIN_ID));", "+\t\t// the node does not need to be the root of the hierarchy", "+\t\tPreferences root = node.node(\"/\"); //$NON-NLS-1$", "+\t\ttry {", "+\t\t\t// we must not create empty preference nodes, so first check if the node exists", "+\t\t\tif (root.nodeExists(InstanceScope.SCOPE)) {", "+\t\t\t\tPreferences instance = root.node(InstanceScope.SCOPE);", "+\t\t\t\t// we must not create empty preference nodes, so first check if the node exists", "+\t\t\t\tif (instance.nodeExists(JavaCore.PLUGIN_ID)) {", "+\t\t\t\t\tcleanJavaCore(instance.node(JavaCore.PLUGIN_ID));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (BackingStoreException e) {", "+\t\t\t// do nothing", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a93b71d4fa6b8280b61ec72b727fe5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\t}", "-\t\t\t\t", "-\t\t\t// clear out all the markers from the previous round.", "-\t\t\tfinal String markerType = processorEnv.getPhase() == ProcessorEnvImpl.Phase.RECONCILE ? ProcessorEnvImpl.RECONCILE_MARKER", "-\t\t\t\t\t: ProcessorEnvImpl.BUILD_MARKER;", "-\t\t\ttry {", "-\t\t\t\tprocessorEnv.getFile().deleteMarkers(markerType, true,", "-\t\t\t\t\t\tIResource.DEPTH_INFINITE);", "-", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t}", "+\t\t\t}\t\t\t\t", "+\t\t", "-\t\t\tAPTResult result = new APTResult( modifiedFiles, deletedFiles, processorEnv.getTypeDependencies() );", "+\t\t\tAPTResult result = new APTResult( modifiedFiles, ", "+\t\t\t\t\t\t\t\t\t\t\t  deletedFiles, ", "+\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getTypeDependencies(), ", "+\t\t\t\t\t\t\t\t\t\t\t  processorEnv.getProblems() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a53d6f581db227917215a93f736ed2d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "847811aba616fe8ef974c21595a3a8f5a0b4a4ab", "commitAfterChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic static void setReadOnly(IResource resource, boolean readOnly)", "signatureAfterChange": " \tpublic static void setReadOnly(IResource resource, boolean readOnly)", "diff": ["-\t}", "+\t */", "-\t\tResourceAttributes resourceAttributes = resource.getResourceAttributes();", "-\t\tif (resourceAttributes == null) return; // not supported on this platform for this resource", "-\t\tresourceAttributes.setReadOnly(readOnly);", "-\t\ttry {", "-\t\t\tresource.setResourceAttributes(resourceAttributes);", "-\t\t} catch (CoreException e) {", "-\t\t\t// ignore", "+\t\tif (isReadOnlySupported()) {", "+\t\t\tResourceAttributes resourceAttributes = resource.getResourceAttributes();", "+\t\t\tif (resourceAttributes == null) return; // not supported on this platform for this resource", "+\t\t\tresourceAttributes.setReadOnly(readOnly);", "+\t\t\ttry {", "+\t\t\t\tresource.setResourceAttributes(resourceAttributes);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\t// ignore", "+\t\t\t}"]}], "num": 11144}
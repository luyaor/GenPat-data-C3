{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f76aac09eeb1ed09d2e952ea931a232", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dbcf15bd9a9cdc52bb6ea971f378ed9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "commitAfterChange": "24134b187b46ea16212a45107324227f46ba3e4a", "methodNumberBeforeChange": 320, "methodNumberAfterChange": 320, "signatureBeforeChange": " \tpublic void test0673() throws JavaModelException", "signatureAfterChange": " \tpublic void test0673() throws JavaModelException", "diff": ["-\t\t\tIMethodBinding methodBinding = methodDeclaration.resolveBinding();", "-\t\t\tassertNull(\"Got a method binding\", methodBinding);", "+\t\t\tIJavaElement javaElement = typeBinding.getJavaElement();", "+\t\t\tassertNotNull(\"No java element\", javaElement);", "+\t\t\tassertTrue(\"Javalement exists\", !javaElement.exists());", "+\t\t\tIPackageBinding packageBinding = typeBinding.getPackage();", "+\t\t\tassertNotNull(\"No package\", packageBinding);", "+\t\t\tassertTrue(\"Not the default package\", packageBinding.isUnnamed());", "+\t\t\tITypeBinding arrayBinding = typeBinding.createArrayType(2);", "+\t\t\tassertNotNull(\"No array binding\", arrayBinding);", "+\t\t\tassertEquals(\"Wrong dimensions\", 2, arrayBinding.getDimensions());", "+\t\t\tITypeBinding elementType = arrayBinding.getElementType();", "+\t\t\tassertNotNull(\"No element type\", elementType);", "+\t\t\tassertNotNull(\"No key\", typeBinding.getKey());", "+\t\t\tassertTrue(\"Not equals\", elementType.isEqualTo(typeBinding));", "+\t\t\t", "+\t\t\tnode = getASTNode(unit, 0);", "+\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\t\tITypeBinding typeBinding2 = typeDeclaration.resolveBinding();", "+\t\t\tITypeBinding javaLangObject = typeBinding2.getSuperclass();", "+\t\t\tassertEquals(\"Not java.lang.Object\", \"java.lang.Object\", javaLangObject.getQualifiedName());", "+\t\t\tassertTrue(\"Not isCastCompatible\", typeBinding.isCastCompatible(javaLangObject));", "+\t\t\tassertTrue(\"Not isCastCompatible\", typeBinding.isCastCompatible(elementType));", "+", "+\t\t\tassertTrue(\"Not isSubTypeCompatible\", typeBinding.isSubTypeCompatible(javaLangObject));", "+\t\t\tassertTrue(\"Not isSubTypeCompatible\", typeBinding.isSubTypeCompatible(elementType));", "+", "+\t\t\tassertTrue(\"Not isAssignmentCompatible\", typeBinding.isAssignmentCompatible(javaLangObject));", "+\t\t\tassertTrue(\"Not isAssignmentCompatible\", typeBinding.isAssignmentCompatible(elementType));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0234d1433b11de15cc0ae6c492be979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "25cb9ce2b0a42eaaa079306fa88b8294a5b0343f", "commitAfterChange": "4ce91958103bed0391aa763e032ff18d6e80eeff", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tpublic static Test setUpTest(Test someTest)", "signatureAfterChange": "  \tpublic void testBug430108_002() throws Exception", "diff": ["-", "-\tpublic static Test setUpTest(Test someTest) {", "-\t\tTestSuite suite= new Suite(\"one test\");", "-\t\tsuite.addTest(someTest);", "-\t\treturn suite;", "+", "+\tpublic void testBug430108_002() throws Exception {", "+\t\tIPackageFragment pack1 = this.sourceFolder.createPackageFragment(\"pack1\", false, null);", "+\t\tString contents = \"package pack1;\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"}\\n\";", "+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"X.java\", contents, false, null);", "+", "+\t\tASTParser parser = ASTParser.newParser(AST.JLS8);", "+\t\tparser.setSource(cu);", "+\t\tparser.setResolveBindings(true);", "+\t\tparser.setStatementsRecovery(true);", "+\t\tCompilationUnit astRoot = (CompilationUnit) parser.createAST(null);", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) astRoot.types().get(0);", "+\t\tITypeBinding typeBinding = typeDeclaration.resolveBinding();", "+\t\tcontents = \"package pack2;\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"}\\n\";", "+\t\tIPackageFragment pack2 = this.sourceFolder.createPackageFragment(\"pack2\", false, null);", "+\t\tparser.setSource(pack2.createCompilationUnit(\"X.java\", contents, false, null));", "+\t\tCompilationUnit astRoot2 = (CompilationUnit) parser.createAST(null);", "+\t\tImportRewrite rewrite = ImportRewrite.create(astRoot2, true);", "+\t\trewrite.setUseContextToFilterImplicitImports(true);", "+\t\tType actualType = rewrite.addImport(typeBinding, astRoot2.getAST());", "+\t\tassertEquals(\"pack1.X\", actualType.toString());", "+\t}"]}], "num": 24912}
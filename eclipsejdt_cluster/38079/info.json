{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e880d05b0927711d71c02050dfb09a7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93b623685331e4371e4ba21b880148fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFolderChange.java", "commitBeforeChange": "706d05b886f888f588421e058e652ee36abfc780", "commitAfterChange": "1e5960a8e1d6d5a1af8d629bddab71c46e5ed5a1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void updateExternalFoldersIfNecessary(boolean refreshIfExistAlready, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void updateExternalFoldersIfNecessary(boolean refreshIfExistAlready, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tif (oldFolders == null || !oldFolders.remove(folderPath)) {", "+\t\t\tif (oldFolders == null || !oldFolders.remove(folderPath) || foldersManager.removePendingFolder(folderPath)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "accfba6ce7951f35404eea96559ce4af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "c6a2ea21c48b4e37b2593b0a226cc8af0315c240", "commitAfterChange": "d1cb0e63c04509a47aa96d9330b8d0d858dad246", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t|| flowInfo.isPotentiallyUnknown(local)) {", "+\t\t\t\t\t|| flowInfo.isPotentiallyUnknown(local)", "+\t\t\t\t\t|| flowInfo.isProtectedNonNull(local)) {", "+\t\t\t\t// if variable is not null, we are not interested in recording null reference for deferred checks.", "+\t\t\t\t// This is because CAN_ONLY_NULL means we're only interested in cases when variable can be null."]}], "num": 38079}
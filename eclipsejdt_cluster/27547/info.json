{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "926469fd5d2c730d6026ef39c61b91ff", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c9b01e6bcff10cd0aad72dd8f7b0745", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, boolean checkGenericSignatures)", "diff": ["-private MethodBinding createMethod(IBinaryMethod method) {", "+private MethodBinding createMethod(IBinaryMethod method, boolean checkGenericSignatures) {", "-", "-\tchar[][] exceptionTypes = method.getExceptionTypeNames();", "-\tif (exceptionTypes != null) {", "-\t\tint size = exceptionTypes.length;", "-\t\tif (size > 0) {", "-\t\t\texceptions = new ReferenceBinding[size];", "-\t\t\tfor (int i = 0; i < size; i++)", "-\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1);", "-\t\t}", "-\t}", "-", "-\tchar[] methodSignature = method.getMethodDescriptor();   // of the form (I[Ljava/jang/String;)V", "-\tint numOfParams = 0;", "-\tchar nextChar;", "-\tint index = 0;   // first character is always '(' so skip it", "-\twhile ((nextChar = methodSignature[++index]) != ')') {", "-\t\tif (nextChar != '[') {", "-\t\t\tnumOfParams++;", "-\t\t\tif (nextChar == 'L')", "-\t\t\t\twhile ((nextChar = methodSignature[++index]) != ';'){/*empty*/}", "+\tTypeVariableBinding[] typeVars = NoTypeVariables;", "+\tTypeBinding returnType = null;", "+", "+\tchar[] methodSignature = checkGenericSignatures ? method.getGenericSignature() : null;", "+\tif (methodSignature == null) { // no generics", "+\t\tchar[] methodDescriptor = method.getMethodDescriptor();   // of the form (I[Ljava/jang/String;)V", "+\t\tint numOfParams = 0;", "+\t\tchar nextChar;", "+\t\tint index = 0;   // first character is always '(' so skip it", "+\t\twhile ((nextChar = methodDescriptor[++index]) != ')') {", "+\t\t\tif (nextChar != '[') {", "+\t\t\t\tnumOfParams++;", "+\t\t\t\tif (nextChar == 'L')", "+\t\t\t\t\twhile ((nextChar = methodDescriptor[++index]) != ';'){/*empty*/}", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Ignore synthetic argument for member types.", "+\t\tint startIndex = (method.isConstructor() && isMemberType() && !isStatic()) ? 1 : 0;", "+\t\tint size = numOfParams - startIndex;", "+\t\tif (size > 0) {", "+\t\t\tparameters = new TypeBinding[size];", "+\t\t\tindex = 1;", "+\t\t\tint end = 0;   // first character is always '(' so skip it", "+\t\t\tfor (int i = 0; i < numOfParams; i++) {", "+\t\t\t\twhile ((nextChar = methodDescriptor[++end]) == '['){/*empty*/}", "+\t\t\t\tif (nextChar == 'L')", "+\t\t\t\t\twhile ((nextChar = methodDescriptor[++end]) != ';'){/*empty*/}", "+\t", "+\t\t\t\tif (i >= startIndex)   // skip the synthetic arg if necessary", "+\t\t\t\t\tparameters[i - startIndex] = environment.getTypeFromSignature(methodDescriptor, index, end, false, this);", "+\t\t\t\tindex = end + 1;", "+\t\t\t}", "+\t\t}", "+", "+\t\tchar[][] exceptionTypes = method.getExceptionTypeNames();", "+\t\tif (exceptionTypes != null) {", "+\t\t\tsize = exceptionTypes.length;", "+\t\t\tif (size > 0) {", "+\t\t\t\texceptions = new ReferenceBinding[size];", "+\t\t\t\tfor (int i = 0; i < size; i++)", "+\t\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false);", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (!method.isConstructor())", "+\t\t\treturnType = environment.getTypeFromSignature(methodDescriptor, index + 1, -1, false, this);   // index is currently pointing at the ')'", "+\t} else {", "+\t\t// MethodTypeSignature = ParameterPart(optional) '(' TypeSignatures ')' return_typeSignature ['^' TypeSignature (optional)]", "+\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature);", "+\t\tif (wrapper.signature[wrapper.start] == '<') {", "+\t\t\t// <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TA;>;)TA;", "+\t\t\t// ParameterPart = '<' ParameterSignature(s) '>'", "+\t\t\twrapper.start++; // skip '<'", "+\t\t\tint rank = 0;", "+\t\t\tdo {", "+\t\t\t\tTypeVariableBinding variable = createTypeVariable(wrapper, rank);", "+\t\t\t\tSystem.arraycopy(typeVars, 0, typeVars = new TypeVariableBinding[rank + 1], 0, rank);", "+\t\t\t\ttypeVars[rank++] = variable;", "+\t\t\t} while (wrapper.signature[wrapper.start] != '>');", "+\t\t\twrapper.start++; // skip '>'", "+\t\t}", "+", "+\t\tif (wrapper.signature[wrapper.start] == '(') {", "+\t\t\twrapper.start++; // skip '('", "+\t\t\tif (wrapper.signature[wrapper.start] == ')') {", "+\t\t\t\twrapper.start++; // skip ')'", "+\t\t\t} else {", "+\t\t\t\tjava.util.ArrayList types = new java.util.ArrayList(2);", "+\t\t\t\tint startIndex = (method.isConstructor() && isMemberType() && !isStatic()) ? 1 : 0;", "+\t\t\t\tif (startIndex == 1)", "+\t\t\t\t\tenvironment.getTypeFromTypeSignature(wrapper, typeVars, this); // skip synthetic argument", "+\t\t\t\twhile (wrapper.signature[wrapper.start] != ')') {", "+\t\t\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, typeVars, this));", "+\t\t\t\t}", "+\t\t\t\twrapper.start++; // skip ')'", "+\t\t\t\tparameters = new TypeBinding[types.size()];", "+\t\t\t\ttypes.toArray(parameters);", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (!method.isConstructor())", "+\t\t\treturnType = environment.getTypeFromTypeSignature(wrapper, typeVars, this);", "+", "+\t\tif (!wrapper.atEnd() && wrapper.signature[wrapper.start] == '^') {", "+\t\t\t// attempt to find each superinterface if it exists in the cache (otherwise - resolve it when requested)", "+\t\t\tjava.util.ArrayList types = new java.util.ArrayList(2);", "+\t\t\tdo {", "+\t\t\t\twrapper.start++; // skip '^'", "+\t\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, typeVars, this));", "+\t\t\t} while (!wrapper.atEnd() && wrapper.signature[wrapper.start] == '^');", "+\t\t\texceptions = new ReferenceBinding[types.size()];", "+\t\t\ttypes.toArray(exceptions);", "+\t\t} else { // get the exceptions the old way", "+\t\t\tchar[][] exceptionTypes = method.getExceptionTypeNames();", "+\t\t\tif (exceptionTypes != null) {", "+\t\t\t\tint size = exceptionTypes.length;", "+\t\t\t\tif (size > 0) {", "+\t\t\t\t\texceptions = new ReferenceBinding[size];", "+\t\t\t\t\tfor (int i = 0; i < size; i++)", "+\t\t\t\t\t\texceptions[i] = environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false);", "+\t\t\t\t}", "+\t\t\t}", "-\t// Ignore synthetic argument for member types.", "-\tint startIndex = (method.isConstructor() && isMemberType() && !isStatic()) ? 1 : 0;", "-\tint size = numOfParams - startIndex;", "-\tif (size > 0) {", "-\t\tparameters = new TypeBinding[size];", "-\t\tindex = 1;", "-\t\tint end = 0;   // first character is always '(' so skip it", "-\t\tfor (int i = 0; i < numOfParams; i++) {", "-\t\t\twhile ((nextChar = methodSignature[++end]) == '['){/*empty*/}", "-\t\t\tif (nextChar == 'L')", "-\t\t\t\twhile ((nextChar = methodSignature[++end]) != ';'){/*empty*/}", "-", "-\t\t\tif (i >= startIndex)   // skip the synthetic arg if necessary", "-\t\t\t\tparameters[i - startIndex] = environment.getTypeFromSignature(methodSignature, index, end);", "-\t\t\tindex = end + 1;", "-\t\t}", "-\t}", "-", "-\tMethodBinding binding = null;", "-\tif (method.isConstructor())", "-\t\tbinding = new MethodBinding(methodModifiers, parameters, exceptions, this);", "-\telse", "-\t\tbinding = new MethodBinding(", "-\t\t\tmethodModifiers,", "-\t\t\tmethod.getSelector(),", "-\t\t\tenvironment.getTypeFromSignature(methodSignature, index + 1, -1),   // index is currently pointing at the ')'", "-\t\t\tparameters,", "-\t\t\texceptions,", "-\t\t\tthis);", "-\treturn binding;", "+\tMethodBinding result = method.isConstructor()", "+\t\t? new MethodBinding(methodModifiers, parameters, exceptions, this)", "+\t\t: new MethodBinding(methodModifiers, method.getSelector(), returnType, parameters, exceptions, this);", "+\tresult.typeVariables = typeVars;", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0f91a3387858ea294203e29b03f2a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tprivate void findAnonymousType( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tprivate void findAnonymousType( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "diff": ["+\t}", "+\tprivate void findAnonymousType(", "-\t\tInvocationSite invocationSite) {", "+\t\tInvocationSite invocationSite,", "+\t\tboolean exactMatch,", "+\t\tboolean isQualified,", "+\t\tint relevance) {", "-\t\t\tint relevance = computeBaseRelevance();", "-\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);", "+\t\t\tchar[] typeCompletion = null;", "+\t\t\tif (!exactMatch) {", "+\t\t\t\ttypeCompletion = ", "+\t\t\t\t\tisQualified ?", "+\t\t\t\t\t\t\tCharOperation.concat(currentType.qualifiedPackageName(), currentType.qualifiedSourceName(), '.') :", "+\t\t\t\t\t\t\t\tcurrentType.sourceName();", "+\t\t\t\tif (this.source != null", "+\t\t\t\t\t\t\t&& this.source.length > this.endPosition", "+\t\t\t\t\t\t\t&& this.source[this.endPosition] == '(') {", "+\t\t\t\t\tcompletion = CharOperation.NO_CHAR;", "+\t\t\t\t} else {", "+\t\t\t\t\tcompletion = new char[] { '(', ')' };", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "-\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "-\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "-\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "-\t\t\t\t//proposal.setOriginalSignature(null);", "-\t\t\t\t//proposal.setUniqueKey(null);", "-\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "-\t\t\t\t//proposal.setParameterPackageNames(null);", "-\t\t\t\t//proposal.setParameterTypeNames(null);", "-\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t//proposal.setTypeName(null);", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(Flags.AccPublic);", "-\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\tif (!exactMatch) {", "+\t\t\t\tif(!isIgnored(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION, CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tchar[] packageName = currentType.isLocalType() ? null : currentType.qualifiedPackageName();", "+\t\t\t\t\tchar[] typeName = currentType.qualifiedSourceName();", "+\t\t\t\t\t", "+\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "+\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "+\t\t\t\t\t//proposal.setOriginalSignature(null);", "+\t\t\t\t\t//proposal.setUniqueKey(null);", "+\t\t\t\t\tproposal.setDeclarationPackageName(packageName);", "+\t\t\t\t\tproposal.setDeclarationTypeName(typeName);", "+\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t", "+\t\t\t\t\tInternalCompletionProposal typeProposal = createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\ttypeProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\ttypeProposal.completionEngine = this;", "+\t\t\t\t\ttypeProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\ttypeProposal.setSignature(getRequiredTypeSignature(currentType));", "+\t\t\t\t\ttypeProposal.setPackageName(packageName);", "+\t\t\t\t\ttypeProposal.setTypeName(typeName);", "+\t\t\t\t\ttypeProposal.setCompletion(typeCompletion);", "+\t\t\t\t\ttypeProposal.setFlags(currentType.modifiers);", "+\t\t\t\t\ttypeProposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\ttypeProposal.setTokenRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\ttypeProposal.setRelevance(relevance);", "+\t\t\t\t\tproposal.setRequiredProposals( new CompletionProposal[]{typeProposal});", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}  else {", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "+\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "+\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "+\t\t\t\t\t//proposal.setOriginalSignature(null);", "+\t\t\t\t\t//proposal.setUniqueKey(null);", "+\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "-\t\t\t\ttrue);", "+\t\t\t\ttrue,", "+\t\t\t\texactMatch,", "+\t\t\t\tisQualified,", "+\t\t\t\trelevance);"]}], "num": 27547}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8199c9bd2cf1e303966ca8ec0f8482c3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "921e89f1c0d0de2d1384905d71db197d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "signatureAfterChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "diff": ["-    \tif( name == null || _astUnits == null ) return null;", "+    \tif( name == null || _astRoots == null ) return null;", "-\t\tif( _astUnits.length > 0 ){", "-\t\t\t_astUnits[0].getAST().resolveWellKnownType(name);", "+\t\tif( _astRoots.length > 0 ){", "+\t\t\t_astRoots[0].getAST().resolveWellKnownType(name);", "-\t\t\t\tfor( int i=0, len=_astUnits.length; i<len; i++ )", "-\t\t\t\t\tnode = _astUnits[i].findDeclaringNode(typeKey);\t\t\t", "+\t\t\t\tfor( int i=0, len=_astRoots.length; i<len; i++ )", "+\t\t\t\t\tnode = _astRoots[i].findDeclaringNode(typeKey);\t\t\t", "-    }", "+    }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b6be614c6e638c2848a1ba27879730", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public ASTNode getASTNodeForBinding(final IBinding binding)", "signatureAfterChange": " \tprotected CompilationUnit searchLocallyForBinding(final IBinding binding)", "diff": ["-     */", "-    public ASTNode getASTNodeForBinding(final IBinding binding)", "-    {", "-\t\tfinal CompilationUnit astUnit = getCompilationUnitForBinding(binding);", "-\t\tif( astUnit == null ) return null;", "-\t\treturn astUnit.findDeclaringNode(binding.getKey());", "-    }", "+\t */", "+\tprotected CompilationUnit searchLocallyForBinding(final IBinding binding)", "+\t{", "+\t\tif( !_batchMode )", "+\t\t\treturn super.searchLocallyForBinding(binding);", "+\t\t", "+\t\tfor( int i=0, len=_astUnits.length; i<len; i++ ){", "+\t\t\tASTNode node = _astUnits[i].findDeclaringNode(binding);", "+\t\t\tif( node != null)", "+\t\t\t\treturn _astUnits[i];", "+\t\t}", "+\t\treturn null;", "+\t}"]}], "num": 50583}
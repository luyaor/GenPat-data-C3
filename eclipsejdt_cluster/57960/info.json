{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a093199fa27009f2fc5d5f48643e04cf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75291470cdefcab956c20e6cb5ece2d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "89bd64197a8c81d9353ca25ee2694b070255ceb5", "commitAfterChange": "8cc33a88b7e04cb90905b591a01c27e56af27e07", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static String getQualifier(ImportDeclaration decl)", "signatureAfterChange": "  \tprivate String getQualifier(ImportDeclaration decl)", "diff": ["-\tprivate static String getQualifier(ImportDeclaration decl) {", "-\t\tString name= decl.getName().getFullyQualifiedName();", "-\t\treturn decl.isOnDemand() ? name : Signature.getQualifier(name);", "+\tprivate String getQualifier(ImportDeclaration decl) {", "+\t\tString name = decl.getName().getFullyQualifiedName();", "+\t\t/*", "+\t\t * If it's on demand import, return the fully qualified name. (e.g. pack1.Foo.* => pack.Foo, pack1.* => pack1)", "+\t\t * This is because we need to have pack1.Foo.* and pack1.Bar under different qualifier groups.", "+\t\t */", "+\t\tif (decl.isOnDemand()) {", "+\t\t\treturn name;", "+\t\t}", "+\t\treturn getQualifier(name, decl.isStatic());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e03c9d06e3b2a43e5be5bb6781dcfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "5d684b1a34314240f4827d63f7c85c2cc338f594", "commitAfterChange": "6c6b377dbb11f829bc792593eb8a4cec7c5900c7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static String getQualifier(ImportDeclaration decl)", "signatureAfterChange": "  \tprivate String getQualifier(ImportDeclaration decl)", "diff": ["-\tprivate static String getQualifier(ImportDeclaration decl) {", "-\t\tString name= decl.getName().getFullyQualifiedName();", "-\t\treturn decl.isOnDemand() ? name : Signature.getQualifier(name);", "+\tprivate String getQualifier(ImportDeclaration decl) {", "+\t\tString name = decl.getName().getFullyQualifiedName();", "+\t\t/*", "+\t\t * If it's on demand import, return the fully qualified name. (e.g. pack1.Foo.* => pack.Foo, pack1.* => pack1)", "+\t\t * This is because we need to have pack1.Foo.* and pack1.Bar under different qualifier groups.", "+\t\t */", "+\t\tif (decl.isOnDemand()) {", "+\t\t\treturn name;", "+\t\t}", "+\t\treturn getQualifier(Signature.getQualifier(name), decl.isStatic());", "+\t}"]}], "num": 57960}
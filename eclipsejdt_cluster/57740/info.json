{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6831c67133183fd680fe642db7001618", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5905ec24d501cba9721bf32964f28470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "fabf6bf3cec26424988d597b756c5fec9a4b330d", "commitAfterChange": "c9e120593d0735d48adb3fd437a574562eeeeaab", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "signatureAfterChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "diff": ["-\t\t\t\tif (destFile.exists()) {", "-\t\t\t\t\tif (this.force) {", "-\t\t\t\t\t\t// we can remove it", "-\t\t\t\t\t\tdeleteResource(destFile, IResource.KEEP_HISTORY);", "-\t\t\t\t\t\tdestCU.close(); // ensure the in-memory buffer for the dest CU is closed", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// abort", "-\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.NAME_COLLISION, ", "-\t\t\t\t\t\t\tMessages.bind(Messages.status_nameCollision, destFile.getFullPath().toString()))); ", "+\t\t\t\tif (!destCU.isWorkingCopy()) {", "+\t\t\t\t\tif (destFile.exists()) {", "+\t\t\t\t\t\tif (this.force) {", "+\t\t\t\t\t\t\t// we can remove it", "+\t\t\t\t\t\t\tdeleteResource(destFile, IResource.KEEP_HISTORY);", "+\t\t\t\t\t\t\tdestCU.close(); // ensure the in-memory buffer for the dest CU is closed", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// abort", "+\t\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.NAME_COLLISION, ", "+\t\t\t\t\t\t\t\tMessages.bind(Messages.status_nameCollision, destFile.getFullPath().toString()))); ", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint flags = this.force ? IResource.FORCE : IResource.NONE;", "-\t\t\t\tif (this.isMove()) {", "-\t\t\t\t\tflags |= IResource.KEEP_HISTORY;", "-\t\t\t\t\tsourceResource.move(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\tint flags = this.force ? IResource.FORCE : IResource.NONE;", "+\t\t\t\t\tif (this.isMove()) {", "+\t\t\t\t\t\tflags |= IResource.KEEP_HISTORY;", "+\t\t\t\t\t\tsourceResource.move(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (rewrite != null) flags |= IResource.KEEP_HISTORY;", "+\t\t\t\t\t\tsourceResource.copy(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "-\t\t\t\t\tif (rewrite != null) flags |= IResource.KEEP_HISTORY;", "-\t\t\t\t\tsourceResource.copy(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\tdestCU.getBuffer().setContents(source.getBuffer().getContents());", "-\t\t\t\tthis.setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769bf485d20cfc67f3aad4978c0a541d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectBinaryOutput.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tprivate void deleteClassesInContainer(IContainer container)", "signatureAfterChange": "\r private void deleteClassesInContainer(IContainer container)", "diff": ["-\t */\r", "-\tprivate void deleteClassesInContainer(IContainer container) {\r", "-\t\ttry {\r", "-\t\t\tif (!container.exists())\r", "-\t\t\t\treturn;\r", "-\t\t\tIResource[] members = container.members();\r", "-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {\r", "-\t\t\t\tIResource resource = (IResource) members[i];\r", "-\t\t\t\tswitch (resource.getType()) {\r", "-\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tif (resource.getName().toLowerCase().endsWith(\".class\")) {\r", "-\t\t\t\t\t\t\tresource.delete(true, null);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResource.PROJECT :\r", "-\t\t\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\t\t\tdeleteClassesInContainer((IContainer) resource);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t//\r", "-\t\t\t//\t\tDon't delete empty folders, since the output may overlap with the source, and\r", "-\t\t\t//\t\twe don't want to delete empty folders which the user may have created.\r", "-\t\t\t//\r", "-\t\t\t//\t\tif (container.getType() == IResource.FOLDER && !container.members().hasMoreElements()) {\r", "-\t\t\t//\t\t\tcontainer.delete(true, null);\r", "-\t\t\t//\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tthrow this.dc.internalException(e);\r", "-\t\t}\r", "-\t}\r", "+ */\r", "+private void deleteClassesInContainer(IContainer container) {\r", "+\ttry {\r", "+\t\tif (!container.exists())\r", "+\t\t\treturn;\r", "+\t\tIResource[] members = container.members(); \r", "+\t\tfor (int i = 0, max = members.length; i < max;i++) {\r", "+\t\t\tIResource resource = (IResource) members[i];\r", "+\t\t\tswitch (resource.getType()) {\r", "+\t\t\t\tcase IResource.FILE :\r", "+\t\t\t\t\tif (resource.getName().toLowerCase().endsWith(\".class\")) {\r", "+\t\t\t\t\t\tresource.delete(true, null);\r", "+\t\t\t\t\t}\r", "+\t\t\t\tcase IResource.PROJECT :\r", "+\t\t\t\tcase IResource.FOLDER :\r", "+\t\t\t\t\tdeleteClassesInContainer((IContainer) resource);\r", "+\t\t\t\t\tbreak;\r", "+//\r", "+//\t\tDon't delete empty folders, since the output may overlap with the source, and\r", "+//\t\twe don't want to delete empty folders which the user may have created.\r", "+//\r", "+//\t\tif (container.getType() == IResource.FOLDER && !container.members().hasMoreElements()) {\r", "+//\t\t\tcontainer.delete(true, null);\r", "+//\t\t}\r", "+\t} catch (CoreException e) {\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5fe2891771685e041808944a561bb54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void deleteEmptyPackageFragment( \tIPackageFragment fragment, \tboolean force) \tthrows JavaModelException", "signatureAfterChange": " \tprotected void deleteEmptyPackageFragment( \t\tIPackageFragment fragment, \t\tboolean force) \t\tthrows JavaModelException", "diff": ["- */", "-protected void deleteEmptyPackageFragment(", "-\tIPackageFragment fragment,", "-\tboolean force)", "-\tthrows JavaModelException {", "-", "-\tIContainer resource = (IContainer) fragment.getResource();", "-\tIResource rootResource = fragment.getParent().getResource();", "-", "-\ttry {", "-\t\tresource.delete(", "-\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\tgetSubProgressMonitor(1));", "-\t\twhile (resource instanceof IFolder) {", "-\t\t\t// deleting a package: delete the parent if it is empty (eg. deleting x.y where folder x doesn't have resources but y)", "-\t\t\t// without deleting the package fragment root", "-\t\t\tresource = resource.getParent();", "-\t\t\tif (!resource.equals(rootResource) && resource.members().length == 0) {", "-\t\t\t\tresource.delete(", "-\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\t\t\tgetSubProgressMonitor(1));", "-\t\t\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-}", "+\t */", "+\tprotected void deleteEmptyPackageFragment(", "+\t\tIPackageFragment fragment,", "+\t\tboolean force)", "+\t\tthrows JavaModelException {", "+\t", "+\t\tIContainer resource = (IContainer) fragment.getResource();", "+\t\tIResource rootResource = fragment.getParent().getResource();", "+\t", "+\t\ttry {", "+\t\t\tresource.delete(", "+\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\twhile (resource instanceof IFolder) {", "+\t\t\t\t// deleting a package: delete the parent if it is empty (eg. deleting x.y where folder x doesn't have resources but y)", "+\t\t\t\t// without deleting the package fragment root", "+\t\t\t\tresource = resource.getParent();", "+\t\t\t\tif (!resource.equals(rootResource) && resource.members().length == 0) {", "+\t\t\t\t\tresource.delete(", "+\t\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);"]}], "num": 57740}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5901e9f46e27a68820bbadbe911fd020", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69e1912f871137b7bc114de7f6186fa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "6dad91e4f298fff813aeb65b0b459a8698c68fdb", "commitAfterChange": "74ba53ab0437265c5342ec723f72d2aea81fd661", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Scanner(boolean tokenizeComments, boolean tokenizeWhiteSpace)", "signatureAfterChange": " public void checkToDoTag(int commentStart, int commentEnd)", "diff": ["-public Scanner(boolean tokenizeComments, boolean tokenizeWhiteSpace) {", "-\tthis(tokenizeComments, tokenizeWhiteSpace, false);\t", "+// chech presence of TODO: tags", "+public void checkToDoTag(int commentStart, int commentEnd) {", "+", "+\t// only look for newer TODO: tags", "+\tif (this.todoCount > 0 && this.todoPositions[this.todoCount-1][0] >= commentStart) {", "+\t\treturn;", "+\t}", "+\tint tagLength = this.toDoTag.length;", "+\tfor (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+", "+\t\t// check for tag occurrence", "+\t\tboolean foundTag = true;", "+\t\tfor (int t = 0; t < tagLength; t++){", "+\t\t\tif (this.source[i+t] != this.toDoTag[t]){", "+\t\t\t\tfoundTag = false;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (foundTag){", "+", "+\t\t\tint nextPos = i+5;", "+\t\t\tchar c = this.source[nextPos];", "+", "+\t\t\tint start = i; ", "+\t\t\tint end = -1;", "+\t\t\tfor (int j = nextPos; j < commentEnd; j++){", "+\t\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "+\t\t\t\t\tend = j - 1;", "+\t\t\t\t\ti = j+1;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (end < 0){", "+\t\t\t\tfor (int j = commentEnd; j >= nextPos; j--){", "+\t\t\t\t\tif ((c = this.source[j]) == '*') {", "+\t\t\t\t\t\tend = j - 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (end < 0) end = nextPos+1;", "+\t\t\t}", "+\t\t\t", "+\t\t\t// trim message", "+\t\t\tint msgStart = nextPos;", "+\t\t\twhile (source[msgStart] == ' ' && msgStart < end) msgStart++;", "+\t\t\twhile (source[end] == ' ' && msgStart <= end) end--;", "+\t\t\t", "+\t\t\tchar[] message = new char[end-msgStart+1];", "+\t\t\tSystem.arraycopy(source, msgStart, message, 0, end-msgStart+1);", "+\t\t\t\t\t", "+\t\t\tif (this.todoMessages == null){", "+\t\t\t\tthis.todoMessages = new char[5][];", "+\t\t\t\tthis.todoPositions = new int[5][];", "+\t\t\t} else if (this.todoCount == this.todoMessages.length) {", "+\t\t\t\tSystem.arraycopy(this.todoMessages, 0, this.todoMessages = new char[this.todoCount*2][], 0, this.todoCount);", "+\t\t\t\tSystem.arraycopy(this.todoPositions, 0, this.todoPositions = new int[this.todoCount*2][], 0, this.todoCount);", "+\t\t\t}", "+\t\t\tthis.todoMessages[this.todoCount] = message;", "+\t\t\tthis.todoPositions[this.todoCount] = new int[]{ start, end };", "+\t\t\tthis.todoCount++;", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2811524c72967f387c237948ecde42d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": "  \tpublic void acceptType(char[] packageName, char[] typeName, int modifiers, AccessRestriction accessRestriction)", "diff": ["+\tpublic void acceptType(char[] packageName, char[] typeName, int modifiers, AccessRestriction accessRestriction) {", "+\t\t\t\tint length = 0;", "+\t\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\t\tswitch (kind) {", "+\t\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\t\tchar[][] acceptedAnnotation = new char[2][];", "+\t\t\t\t\t\tacceptedAnnotation[0] = packageName;", "+\t\t\t\t\t\tacceptedAnnotation[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedAnnotations == null) {", "+\t\t\t\t\t\t\tthis.acceptedAnnotations = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedAnnotationsModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedAnnotationsCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedAnnotations.length;", "+\t\t\t\t\t\tif(length == this.acceptedAnnotationsCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedAnnotations, 0, this.acceptedAnnotations = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedAnnotationsModifiers, 0, this.acceptedAnnotationsModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedAnnotationsModifiers[this.acceptedAnnotationsCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedAnnotations[this.acceptedAnnotationsCount++] = acceptedAnnotation;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\t\tchar[][] acceptedEnum = new char[2][];", "+\t\t\t\t\t\tacceptedEnum[0] = packageName;", "+\t\t\t\t\t\tacceptedEnum[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedEnums == null) {", "+\t\t\t\t\t\t\tthis.acceptedEnums = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedEnumsModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedEnumsCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedEnums.length;", "+\t\t\t\t\t\tif(length == this.acceptedEnumsCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedEnums, 0, this.acceptedEnums = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedEnumsModifiers, 0, this.acceptedEnumsModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedEnumsModifiers[this.acceptedEnumsCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedEnums[this.acceptedEnumsCount++] = acceptedEnum;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\t\tchar[][] acceptedInterface= new char[2][];", "+\t\t\t\t\t\tacceptedInterface[0] = packageName;", "+\t\t\t\t\t\tacceptedInterface[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedInterfaces == null) {", "+\t\t\t\t\t\t\tthis.acceptedInterfaces = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedInterfacesModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedInterfacesCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedInterfaces.length;", "+\t\t\t\t\t\tif(length == this.acceptedInterfacesCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedInterfaces, 0, this.acceptedInterfaces = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedInterfacesModifiers, 0, this.acceptedInterfacesModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedInterfacesModifiers[this.acceptedInterfacesCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedInterfaces[this.acceptedInterfacesCount++] = acceptedInterface;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tchar[][] acceptedClass = new char[2][];", "+\t\t\t\t\t\tacceptedClass[0] = packageName;", "+\t\t\t\t\t\tacceptedClass[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedClasses == null) {", "+\t\t\t\t\t\t\tthis.acceptedClasses = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedClassesModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedClassesCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedClasses.length;", "+\t\t\t\t\t\tif(length == this.acceptedClassesCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedClasses, 0, this.acceptedClasses = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedClasses, 0, this.acceptedClassesModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedClassesModifiers[this.acceptedClassesCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedClasses[this.acceptedClassesCount++] = acceptedClass;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\tthis.requestor.acceptType(", "-\t */", "-\tpublic void acceptInterface(", "-\t\tchar[] packageName,", "-\t\tchar[] interfaceName,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tif (CharOperation.equals(interfaceName, this.selectedIdentifier)) {", "-\t\t\tif(mustQualifyType(packageName, interfaceName)) {", "-\t\t\t\tchar[][] acceptedInterface= new char[2][];", "-\t\t\t\tacceptedInterface[0] = packageName;", "-\t\t\t\tacceptedInterface[1] = interfaceName;", "-\t\t\t\t", "-\t\t\t\tif(this.acceptedInterfaces == null) {", "-\t\t\t\t\tthis.acceptedInterfaces = new char[10][][];", "-\t\t\t\t\tthis.acceptedInterfacesCount = 0;", "-\t\t\t\t}", "-\t\t\t\tint length = this.acceptedInterfaces.length;", "-\t\t\t\tif(length == this.acceptedInterfacesCount) {", "-\t\t\t\t\tSystem.arraycopy(this.acceptedInterfaces, 0, this.acceptedInterfaces = new char[(length + 1) * 2][][], 0, length);", "-\t\t\t\t}", "-\t\t\t\tthis.acceptedInterfaces[this.acceptedInterfacesCount++] = acceptedInterface;", "-\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\tpackageName,", "-\t\t\t\t\tinterfaceName,", "+\t\t\t\t\tmodifiers,"]}], "num": 17115}
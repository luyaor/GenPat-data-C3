{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a06847faf3e1fd51127c99d78635bcd5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26c1f33e7b80a921ad068aab672d4892", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "6897b6240cf6b9585a3dd2a75157f0669f6dd5c1", "commitAfterChange": "963dba338847f0987506026315a7afd1112a6320", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["+// TODO (frederic) see if we need to take unicode characters into account...", "-\tchar previous = commentStart==0 ? 0 : this.source[commentStart-1];", "-\tnextChar : for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+\tchar previous = src[commentStart+1]; // should be '*' or '/'", "+\tnextChar : for (", "+\t\tint i = commentStart + 2; i < commentEnd && i < this.eofPosition; i++) {", "-\t\t\t\t\tif ((i+t) >= this.eofPosition) continue nextTag;", "+\t\t\t\t\tint x = i+t;", "+\t\t\t\t\tif (x >= this.eofPosition || x >= commentEnd) continue nextTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb91fef9b437d9ccce7d0a327a6be014", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "6897b6240cf6b9585a3dd2a75157f0669f6dd5c1", "commitAfterChange": "963dba338847f0987506026315a7afd1112a6320", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-\tchar previous = commentStart==0 ? 0 : this.source[commentStart-1];", "-\tnextChar : for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "+\tchar previous = src[commentStart+1]; // should be '*' or '/'", "+\tnextChar : for (", "+\t\tint i = commentStart + 2; i < commentEnd && i < this.eofPosition; i++) {", "-\t\t\t\t\tif ((i+t) >= this.eofPosition) continue nextTag;", "+\t\t\t\t\tint x = i+t;", "+\t\t\t\t\tif (x >= this.eofPosition || x >= commentEnd) continue nextTag;"]}], "num": 51689}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08bf8d65636ac69fe240f1c334c5b961", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f51089aef1cd2205f9e250781a7c20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "259752fd2611ae86a8e7deb13311cd77026ab6f4", "commitAfterChange": "4725cc4b92cda70d0724324edfd82ed8a46041bc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tIVariableBinding resolveVariable(VariableDeclaration variable)", "signatureAfterChange": " \tIVariableBinding resolveVariable(VariableDeclaration variable)", "diff": ["-\t\tif (this.checkModificationCount && this.modificationCount != variable.getAST().modificationCount()) {", "-\t\t\treturn null;", "+\t\tfinal Object node = this.newAstToOldAst.get(variable);", "+\t\tif (node instanceof AbstractVariableDeclaration) {", "+\t\t\tAbstractVariableDeclaration abstractVariableDeclaration = (AbstractVariableDeclaration) node;", "+\t\t\tif (abstractVariableDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) abstractVariableDeclaration;", "+\t\t\t\tIVariableBinding variableBinding = this.getVariableBinding(fieldDeclaration.binding);", "+\t\t\t\tif (variableBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(variableBinding, variable);", "+\t\t\t\treturn variableBinding;", "+\t\t\t}", "+\t\t\tIVariableBinding variableBinding = this.getVariableBinding(((LocalDeclaration) abstractVariableDeclaration).binding);", "+\t\t\tif (variableBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(variableBinding, variable);", "+\t\t\treturn variableBinding;", "-\t\tAbstractVariableDeclaration abstractVariableDeclaration = (AbstractVariableDeclaration) this.newAstToOldAst.get(variable);", "-\t\tif (abstractVariableDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) abstractVariableDeclaration;", "+\t\treturn null;", "+\t}", "-\t\tIVariableBinding variableBinding = this.getVariableBinding(((LocalDeclaration) abstractVariableDeclaration).binding);", "-\t\tif (variableBinding == null) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tthis.bindingsToAstNodes.put(variableBinding, variable);", "-\t\treturn variableBinding;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66b6bd64ae024ea73bf7c2f8a61b7d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "commitAfterChange": "85d82ef92c86e257cfcb71c0ec95b6b64432a5cb", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic MarkerAnnotation convert(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation annotation)", "signatureAfterChange": "  \tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)", "diff": ["+\tpublic LambdaExpression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda) {", "+\t\tfinal LambdaExpression\tlambdaExpression = new LambdaExpression(this.ast);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(lambdaExpression, lambda);", "+\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] arguments = lambda.arguments;", "+\t\tif (arguments != null) {", "+\t\t\tint argumentsLength = arguments.length;", "+\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Argument argument = arguments[i];", "+\t\t\t\tif (argument.type == null) {", "+\t\t\t\t\tVariableDeclarationFragment variableDeclarationFragment = new VariableDeclarationFragment(this.ast);", "+\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\tsimpleName.internalSetIdentifier(new String(argument.name));", "+\t\t\t\t\tint start = argument.sourceStart;", "+\t\t\t\t\tint end = argument.sourceEnd;", "+\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\trecordNodes(simpleName, argument);", "+\t\t\t\t\t\trecordNodes(variableDeclarationFragment, argument);", "+\t\t\t\t\t}", "+\t\t\t\t\tvariableDeclarationFragment.setName(simpleName);", "+\t\t\t\t\tlambdaExpression.parameters().add(variableDeclarationFragment);\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tSingleVariableDeclaration singleVariableDeclaration = convert(argument);", "+\t\t\t\t\tlambdaExpression.parameters().add(singleVariableDeclaration);\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (lambda.body instanceof org.eclipse.jdt.internal.compiler.ast.Expression) {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Expression) lambda.body));", "+\t\t} else {", "+\t\t\tlambdaExpression.setBody(convert((org.eclipse.jdt.internal.compiler.ast.Block) lambda.body));", "+\t\t}", "+\t\tint sourceStart = lambda.sourceStart;", "+\t\tlambdaExpression.setSourceRange(sourceStart, lambda.sourceEnd - sourceStart + 1);", "+\t\tlambdaExpression.setParentheses(lambda.hasParentheses);", "+\t\treturn lambdaExpression;", "+\t}"]}], "num": 21064}
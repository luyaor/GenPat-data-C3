{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5c10fb8cc1bf8c5b351b0d91825fd42", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392ee4f856062139292e144719ff252f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "bc26b87233d42889a8d0ab7118ee0887338fae91", "commitAfterChange": "75c775ba1c55e2d0e3e3569d2cd59f27c56a3761", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tpublic String[] convertTypeNamesToSigs(char[][] typeNames)", "signatureAfterChange": "\r \tprivate String[] convertTypeNamesToSigs(char[][] typeNames)", "diff": ["-\tpublic String[] convertTypeNamesToSigs(char[][] typeNames) {\r", "+\tprivate String[] convertTypeNamesToSigs(char[][] typeNames) {\r", "-\t\t\ttypeSigs[i] = Signature.createTypeSignature(typeNames[i], false);\r", "+\t\t\tString typeSig = Signature.createTypeSignature(typeNames[i], false);\r", "+\t\t\tint lastIndex = typeSig.lastIndexOf('.');\r", "+\t\t\tif (lastIndex == -1) {\r", "+\t\t\t\ttypeSigs[i] = typeSig;\r", "+\t\t\t} else {\r", "+\t\t\t\ttypeSigs[i] = \"\" + Signature.C_UNRESOLVED + typeSig.substring(lastIndex + 1, typeSig.length());\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80daaca9a567794145e889dce3a1f8a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4660e2a206b7296b09f08e9cf873d42a9dbe9831", "commitAfterChange": "441afac0449abefc6fbb6fa4fa4fd070a36e4d2c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected IJavaElement createImportHandle(ImportReference importRef)", "signatureAfterChange": " protected IJavaElement createImportHandle(ImportReference importRef)", "diff": ["-\t// binary types do not contain import statements so just answer the type as the element", "-\treturn ((ClassFile) openable).getType();", "+\t// binary types do not contain import statements so just answer the top-level type as the element", "+\tIType binaryType = ((ClassFile) openable).getType();", "+\tString typeName = binaryType.getElementName();", "+\tint lastDollar = typeName.lastIndexOf('$');", "+\tif (lastDollar == -1) return binaryType;", "+\treturn createTypeHandle(typeName.substring(0, lastDollar));"]}], "num": 40661}
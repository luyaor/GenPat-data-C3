{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "562bb378da5321f58aa5abe65cda31af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66173712a6ad83564b1af0d9ba01522b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "commitAfterChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "signatureAfterChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "diff": ["+    MethodBinding methodBinding = getMethodBinding0(methodPattern);", "+    if (methodBinding != null)", "+    \treturn methodBinding; // known to be valid.", "+    // special handling for methods of anonymous/local types. Since these cannot be looked up in the environment the usual way ...", "+    if (methodPattern.focus instanceof SourceMethod) {", "+    \tchar[] typeName = PatternLocator.qualifiedPattern(methodPattern.declaringSimpleName, methodPattern.declaringQualification);", "+    \tif (CharOperation.indexOf(IIndexConstants.ONE_STAR, typeName, true) >= 0) { // See org.eclipse.jdt.core.search.SearchPattern.enclosingTypeNames(IType)", "+    \t\tIType type = methodPattern.declaringType;", "+    \t\tIType enclosingType = type.getDeclaringType();", "+    \t\twhile (enclosingType != null) {", "+    \t\t\ttype = enclosingType;", "+    \t\t\tenclosingType = type.getDeclaringType();", "+    \t\t}", "+    \t\ttypeName = type.getFullyQualifiedName().toCharArray();", "+    \t\tTypeBinding declaringTypeBinding = getType(typeName, typeName);", "+    \t\tif (declaringTypeBinding instanceof SourceTypeBinding) {", "+    \t\t\tSourceTypeBinding sourceTypeBinding = ((SourceTypeBinding) declaringTypeBinding);", "+    \t\t\tClassScope skope = sourceTypeBinding.scope;", "+    \t\t\tif (skope != null) {", "+    \t\t\t\tCompilationUnitDeclaration unit = skope.referenceCompilationUnit();", "+    \t\t\t\tif (unit != null) {", "+    \t\t\t\t\tAbstractMethodDeclaration amd = new ASTNodeFinder(unit).findMethod((IMethod) methodPattern.focus);", "+    \t\t\t\t\tif (amd != null && amd.binding != null && amd.binding.isValidBinding()) {", "+    \t\t\t\t\t\tthis.bindings.put(methodPattern, amd.binding);", "+    \t\t\t\t\t\treturn amd.binding;", "+    \t\t\t\t\t}", "+    \t\t\t\t}", "+    \t\t\t}", "+    \t\t}", "+    \t}", "+    }", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ee65378634060f79831446eeca381c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "e220e880a69da1e85c42fe1dcced26582c72c0de", "commitAfterChange": "c7371df70a444e50c08430dc41d164acf6d1e998", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public AnnotationBinding[][] getParameterAnnotations()", "signatureAfterChange": " public AnnotationBinding[][] getParameterAnnotations()", "diff": ["-\tif (allParameterAnnotations == null && (this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "+\tif (allParameterAnnotations == null) {", "-\t\t// forward reference to method, where param annotations have not yet been associated to method", "-\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "-\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "-\t\t\tif (sourceType.scope != null) {", "-\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "-\t\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "-\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "+\t\tif ((this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "+\t\t\t// forward reference to method, where param annotations have not yet been associated to method", "+\t\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "+\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "+\t\t\t\tif (sourceType.scope != null) {", "+\t\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "+\t\t\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "+\t\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "-\t\t\t\tthis.setParameterAnnotations(allParameterAnnotations);", "+\t\tthis.setParameterAnnotations(allParameterAnnotations);"]}], "num": 43435}
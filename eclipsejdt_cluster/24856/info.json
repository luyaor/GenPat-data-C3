{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ab2aea32b05aa48337561ee2f598986", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d4ca57cadf7d076b128c5c68c2df701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 82, "signatureBeforeChange": " \t \tprivate void formatEmptyStatement()", "signatureAfterChange": " \tpublic boolean visit(EmptyStatement statement, BlockScope scope)", "diff": ["-\t", "-\tprivate void formatEmptyStatement() {", "-\t\tif (this.preferences.put_empty_statement_on_new_line) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\tthis.scribe.printTrailingComment();", "-\t}", "+\t\tif (this.preferences.put_empty_statement_on_new_line) {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\tthis.scribe.printTrailingComment();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28a4c18badea3c2f0f07c1c3c511dff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void tagAsEllipsisArgument()", "signatureAfterChange": "  public Expression resolveExpressionExpecting(TypeBinding targetType, Scope scope)", "diff": ["+public Expression resolveExpressionExpecting(TypeBinding targetType, Scope scope) {", "+\treturn this; // subclasses should implement for a better resolved expression if required.", "+}", "-", "-public void tagAsEllipsisArgument() {", "-\t// don't care. Subclasses that are poly expressions in specific contexts should listen in and make note."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54f9ee6acbcf5716e35a72f2d762807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic boolean checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tpublic boolean checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo) {", "+\t\treturn true; // never problematic", "+\t}", "-", "-\tpublic int nullStatus(FlowInfo flowInfo) {", "-\t\treturn FlowInfo.NON_NULL;"]}], "num": 24856}
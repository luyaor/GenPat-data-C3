{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5ceb83c71583f8cccf81144f824e446", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ba4c3e9ebf0bb6a129bd60fc4caae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int checkAgainstNullAnnotation(BlockScope currentScope, LocalVariableBinding local, int nullStatus)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression)", "diff": ["-/** Empty hook for checking null status against declaration using null annotations, once this will be supported. */", "-protected int checkAgainstNullAnnotation(BlockScope currentScope, LocalVariableBinding local, int nullStatus) {", "+/** Check null-ness of 'local' against a possible null annotation */", "+protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext,", "+\t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression)", "+{", "+\tif (local != null", "+\t\t\t&& (local.tagBits & TagBits.AnnotationNonNull) != 0", "+\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "+\t\tflowContext.recordNullityMismatch(currentScope, expression, nullStatus, local.type);", "+\t\tnullStatus=FlowInfo.NON_NULL;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f25564cfd264e0662180fdf19d1fa1ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c5e448ecc90e8d75bf431155e497df695586ca94", "commitAfterChange": "d137239e9d64b43b4573cdfef965a2c47040a54e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression)", "diff": ["-\tif (var != null", "-\t\t\t&& (var.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "-\t\tflowContext.recordNullityMismatch(currentScope, expression, nullStatus, var.type);", "-\t\tnullStatus=FlowInfo.NON_NULL;", "+\tif (var != null) {", "+\t\tif ((var.tagBits & TagBits.AnnotationNonNull) != 0", "+\t\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, nullStatus, var.type);", "+\t\t\treturn FlowInfo.NON_NULL;", "+\t\t} else if ((var.tagBits & TagBits.AnnotationNullable) != 0", "+\t\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "+\t\t\treturn FlowInfo.POTENTIALLY_NULL;\t\t\t// -> use more specific info from the annotation", "+\t\t}"]}], "num": 60720}
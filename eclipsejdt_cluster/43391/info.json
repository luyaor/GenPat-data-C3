{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e95479d49d68e4ecf62eee55561ed1ec", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e4862e47637f8d392685d6bb244692c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "4705410343400fe2a1c15aa7834d45664e8169f8", "commitAfterChange": "bbbc03c8974b50736f7c2247e05857599972fd62", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic void testBug93880_15c() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug93880_15c() throws JavaModelException", "diff": ["+\t\t\t\"/**\\n\" + ", "+\t\t\t\" * Javadoc for all package\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"private package javadoc.b93880;\"", "+\t\t);", "+\t\tCompilationUnit compilUnit = verifyComments(workingCopies[0]);", "+\t\tif (docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t// Get package declaration declaration and javadoc", "+\t\t\tPackageDeclaration packDecl = compilUnit.getPackage();", "+\t\t\tJavadoc docComment = (Javadoc) compilUnit.getCommentList().get(0); // Do not need to verify following statement as we know it's ok as verifyComments did not fail", "+", "+\t\t\t// Verify package declaration javadoc", "+\t\t\tassertTrue(\"Javadoc should be set on package declaration\", docComment == packDecl.getJavadoc());", "+", "+\t\t\t// Verify package declaration declaration source start", "+\t\t\tassertEquals(\"Source range of PackageDeclaration should include Javadoc child\", docComment.getStartPosition(), packDecl.getStartPosition());", "+\t\t}", "+\t}", "-\t\t\tassertTrue(\"Source range of PackageDeclaration should include Javadoc child\", packDecl.getStartPosition() > comment.getStartPosition()+comment.getLength());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e63a37d5875fb1e89190792be2dad26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1f8a81a8ce423b41812086714895b0630ef971da", "commitAfterChange": "a87e86f564a908f27027278f6315aa3f9351fb0c", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic void testBug84049() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug84049() throws JavaModelException", "diff": ["-\t\t\tassertNull(\"MethodDeclaration should not have any javadoc comment\", methodDeclaration.getJavadoc());", "+\t\t\tJavadoc methodJavadoc = methodDeclaration.getJavadoc();", "+\t\t\tassertNotNull(\"MethodDeclaration have a javadoc comment\", methodJavadoc);", "+\t\t\tint javadocStart = methodJavadoc.getStartPosition();", "+\t\t\tassertEquals(\"Method declaration should include javadoc comment\", methodDeclaration.getStartPosition(), javadocStart);", "+\t\t\t/* TODO (frederic) Enable this block when bug will be fixed...", "+\t\t\tSimpleName methodName = methodDeclaration.getName();", "+\t\t\tint nameStart = methodName.getStartPosition();", "+\t\t\tassertTrue(\"Method simple name should not include javadoc comment\", nameStart > javadocStart+methodJavadoc.getLength());", "+\t\t\tint extendedStart = compilUnit.getExtendedStartPosition(methodName);", "+\t\t\tassertEquals(\"Method simple name start position should not be extended!\", nameStart, extendedStart);", "+\t\t\tint extendedLength = compilUnit.getExtendedLength(methodName);", "+\t\t\tassertEquals(\"Method simple name length should not be extended!\", methodName.getLength(), extendedLength);", "+\t\t\t*/"]}], "num": 43391}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4894b9dede75fb283cfc628655eec706", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01ade613011df6de83b9773af47a27a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope)", "diff": ["-\t}\r", "-\tprivate void findConstructors(\r", "-\t\tReferenceBinding currentType,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\t// No visibility checks can be performed without the scope & invocationSite\r", "-\t\tMethodBinding[] methods = currentType.methods();\r", "-\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\t\tMethodBinding constructor = methods[f];\r", "-\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\tif (options.checkVisibilitySensitive()\r", "-\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope))\r", "-\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\t\tint paramLength = parameters.length;\r", "-\t\t\t\tif (minArgLength > paramLength)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t\t}\r", "-\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "-\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\t\tif (source == null\r", "-\t\t\t\t\t|| source.length <= endPosition\r", "-\t\t\t\t\t|| source[endPosition] != ')')\r", "-\t\t\t\t\tcompletion = new char[] { ')' };\r", "-\t\t\t\trequestor.acceptMethod(\r", "-\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tcompletion,\r", "-\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\tendPosition,\r", "-\t\t\t\t\tendPosition);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+}\r", "+private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope) {\r", "+\t// No visibility checks can be performed without the scope & invocationSite\r", "+\tMethodBinding[] methods = currentType.methods();\r", "+\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\tMethodBinding constructor = methods[f];\r", "+\t\tif (constructor.isConstructor()) {\r", "+\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\tint paramLength = parameters.length;\r", "+\t\t\tif (minArgLength > paramLength) continue next;\r", "+\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a])) continue next;\r", "+\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\tchar[] completion = TypeConstants.NoChar; // nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\tif (source == null || source.length <= endPosition || source[endPosition] != ')')\r", "+\t\t\t\tcompletion = new char[] {')'};\r", "+\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\tendPosition,\r", "+\t\t\t\tendPosition);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "707117e73d31a40181e7de626ee32ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope)", "diff": ["-\t}\r", "-\tprivate void findConstructors(\r", "-\t\tReferenceBinding currentType,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\t// No visibility checks can be performed without the scope & invocationSite\r", "-\t\tMethodBinding[] methods = currentType.methods();\r", "-\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\t\tMethodBinding constructor = methods[f];\r", "-\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\tif (options.checkVisibilitySensitive()\r", "-\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope))\r", "-\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\t\tint paramLength = parameters.length;\r", "-\t\t\t\tif (minArgLength > paramLength)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t\t}\r", "-\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "-\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\t\tif (source == null\r", "-\t\t\t\t\t|| source.length <= endPosition\r", "-\t\t\t\t\t|| source[endPosition] != ')')\r", "-\t\t\t\t\tcompletion = new char[] { ')' };\r", "-\t\t\t\trequestor.acceptMethod(\r", "-\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tcompletion,\r", "-\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\tendPosition,\r", "-\t\t\t\t\tendPosition);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+}\r", "+private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope) {\r", "+\t// No visibility checks can be performed without the scope & invocationSite\r", "+\tMethodBinding[] methods = currentType.methods();\r", "+\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\tMethodBinding constructor = methods[f];\r", "+\t\tif (constructor.isConstructor()) {\r", "+\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\tint paramLength = parameters.length;\r", "+\t\t\tif (minArgLength > paramLength) continue next;\r", "+\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a])) continue next;\r", "+\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\tchar[] completion = TypeConstants.NoChar; // nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\tif (source == null || source.length <= endPosition || source[endPosition] != ')')\r", "+\t\t\t\tcompletion = new char[] {')'};\r", "+\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\tendPosition,\r", "+\t\t\t\tendPosition);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 21626}
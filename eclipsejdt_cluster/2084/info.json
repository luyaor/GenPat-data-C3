{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3b4dd618adaba03fd493aefec31e189", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a9736de19db9e895659972eeb67bf81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 93, "signatureBeforeChange": " public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(int astLevel, boolean resolveBindings, int reconcileFlags, HashMap problems, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(int astLevel, boolean resolveBindings, int reconcileFlags, HashMap problems, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t// create a new info and make it the current info", "-\t// (this will remove the info and its children just before storing the new infos)", "-\tif (astLevel != NO_AST || problems != null) {", "-\t\tASTHolderCUInfo info = new ASTHolderCUInfo();", "-\t\tinfo.astLevel = astLevel;", "-\t\tinfo.resolveBindings = resolveBindings;", "-\t\tinfo.reconcileFlags = reconcileFlags;", "-\t\tinfo.problems = problems;", "-\t\topenWhenClosed(info, monitor);", "-\t\torg.eclipse.jdt.core.dom.CompilationUnit result = info.ast;", "-\t\tinfo.ast = null;", "-\t\treturn result;", "-\t} else {", "-\t\topenWhenClosed(createElementInfo(), monitor);", "-\t\treturn null;", "+\ttry {", "+\t\tJavaModelManager.getJavaModelManager().abortOnMissingSource.set(Boolean.TRUE);", "+\t\t// create a new info and make it the current info", "+\t\t// (this will remove the info and its children just before storing the new infos)", "+\t\tif (astLevel != NO_AST || problems != null) {", "+\t\t\tASTHolderCUInfo info = new ASTHolderCUInfo();", "+\t\t\tinfo.astLevel = astLevel;", "+\t\t\tinfo.resolveBindings = resolveBindings;", "+\t\t\tinfo.reconcileFlags = reconcileFlags;", "+\t\t\tinfo.problems = problems;", "+\t\t\topenWhenClosed(info, monitor);", "+\t\t\torg.eclipse.jdt.core.dom.CompilationUnit result = info.ast;", "+\t\t\tinfo.ast = null;", "+\t\t\treturn result;", "+\t\t} else {", "+\t\t\topenWhenClosed(createElementInfo(), monitor);", "+\t\t\treturn null;", "+\t\t}", "+\t} finally {", "+\t\tJavaModelManager.getJavaModelManager().abortOnMissingSource.set(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f30d7883c0fccdc9491b0246105992c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ReconcileContext.java", "commitBeforeChange": "c1a19ba5a2ec5ff7020c56969301f2a78801c990", "commitAfterChange": "9e14a7ad0a6e3f6482ed519c4d45854b0211dde4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public org.eclipse.jdt.core.dom.CompilationUnit getAST(int astLevel, boolean resolveBindings) throws JavaModelException", "signatureAfterChange": " public org.eclipse.jdt.core.dom.CompilationUnit getAST(int astLevel, boolean resolveBindings) throws JavaModelException", "diff": ["-// TODO do we really want individual astLevel for participants ? or should they implicitly get the one from ongoing reconcile operation ?", "-\tif (this.operation.astLevel < astLevel) {", "-\t\tthis.operation.astLevel = astLevel;", "-\t\tthis.operation.ast = null; // force the AST to be re-created since the ast level was insufficient the first time", "+\tif (this.operation.astLevel != astLevel || !this.operation.resolveBindings & resolveBindings) {", "+\t\t// create AST (optionally resolving bindings)", "+\t\tASTParser parser = ASTParser.newParser(astLevel);", "+\t\tparser.setCompilerOptions(workingCopy.getJavaProject().getOptions(true));", "+\t\tif (resolveBindings && JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()))", "+\t\t\tparser.setResolveBindings(true);", "+\t\tparser.setSource(workingCopy);", "+\t\treturn (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(this.operation.progressMonitor);\t\t", "-\tif (!this.operation.resolveBindings & resolveBindings) {", "-\t\tthis.operation.resolveBindings = true;", "-\t\tthis.operation.ast = null; // force the AST to be re-created since bindings were not computed the first time", "-\t}", "-\torg.eclipse.jdt.core.dom.CompilationUnit result = this.operation.makeConsistent(this.workingCopy, null/*don't report problems to the working copy's problem requestor*/);", "-\tif (result == null)", "-\t\tresult = this.operation.createAST(this.workingCopy);", "-\treturn result;", "+\treturn this.operation.makeConsistent(this.workingCopy, null/*don't report problems to the working copy's problem requestor*/);", "+}"]}], "num": 2084}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a01cb95b1d86350e68937570e6461249", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "011afc51d797a1e4b5c6f30051a7c3f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["+\t\tif ((parentElement instanceof IMember) && ((IMember) parentElement).isBinary()) {", "+\t\t\treturn ((IAnnotatable) parentElement).getAnnotation(getAnnotationType().getQualifiedName());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48840a86666a0f541e6615491d9bf659", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["-\t\t} else if (oldInfo instanceof SourceMethodElementInfo && newInfo instanceof SourceMethodElementInfo) {", "+\t\t} ", "+\t\tif (oldInfo instanceof AnnotatableInfo && newInfo instanceof AnnotatableInfo) {", "+\t\t\tfindAnnotationChanges(((AnnotatableInfo) oldInfo).annotations, ((AnnotatableInfo) newInfo).annotations, newElement);", "+\t\t}", "+\t\tif (oldInfo instanceof SourceMethodElementInfo && newInfo instanceof SourceMethodElementInfo) {", "-\t\t}", "-\t}", "-\tif (oldInfo instanceof SourceTypeElementInfo && newInfo instanceof SourceTypeElementInfo) {", "-\t\tSourceTypeElementInfo oldSourceTypeInfo = (SourceTypeElementInfo)oldInfo;", "-\t\tSourceTypeElementInfo newSourceTypeInfo = (SourceTypeElementInfo)newInfo;", "-\t\tif (!CharOperation.equals(oldSourceTypeInfo.getSuperclassName(), newSourceTypeInfo.getSuperclassName()) ", "-\t\t\t\t|| !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(), newSourceTypeInfo.getInterfaceNames())) {", "-\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_SUPER_TYPES);", "-\t\t}", "-\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterNames(), newSourceTypeInfo.getTypeParameterNames())", "-\t\t\t\t|| !equals(oldSourceTypeInfo.getTypeParameterBounds(), newSourceTypeInfo.getTypeParameterBounds())) {", "-\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);", "-\t\t}", "-\t\tHashMap oldTypeCategories = oldSourceTypeInfo.categories;", "-\t\tHashMap newTypeCategories = newSourceTypeInfo.categories;", "-\t\tif (oldTypeCategories != null) {", "-\t\t\t// take the union of old and new categories elements (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=125675)", "-\t\t\tSet elements;", "-\t\t\tif (newTypeCategories != null) {", "-\t\t\t\telements = new HashSet(oldTypeCategories.keySet());", "-\t\t\t\telements.addAll(newTypeCategories.keySet());", "-\t\t\t} else", "-\t\t\t\telements = oldTypeCategories.keySet();", "-\t\t\tIterator iterator = elements.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement) iterator.next();", "-\t\t\t\tString[] oldCategories = (String[]) oldTypeCategories.get(element);", "-\t\t\t\tString[] newCategories = newTypeCategories == null ? null : (String[]) newTypeCategories.get(element);", "-\t\t\t\tif (!Util.equalArraysOrNull(oldCategories, newCategories)) {", "-\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES);", "-\t\t\t\t}", "+\t\t} else if (oldInfo instanceof SourceTypeElementInfo && newInfo instanceof SourceTypeElementInfo) {", "+\t\t\tSourceTypeElementInfo oldSourceTypeInfo = (SourceTypeElementInfo)oldInfo;", "+\t\t\tSourceTypeElementInfo newSourceTypeInfo = (SourceTypeElementInfo)newInfo;", "+\t\t\tif (!CharOperation.equals(oldSourceTypeInfo.getSuperclassName(), newSourceTypeInfo.getSuperclassName()) ", "+\t\t\t\t\t|| !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(), newSourceTypeInfo.getInterfaceNames())) {", "+\t\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_SUPER_TYPES);", "-\t\t} else if (newTypeCategories != null) {", "-\t\t\tIterator elements = newTypeCategories.keySet().iterator();", "-\t\t\twhile (elements.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "-\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES); // all categories for this element were removed", "+\t\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterNames(), newSourceTypeInfo.getTypeParameterNames())", "+\t\t\t\t\t|| !equals(oldSourceTypeInfo.getTypeParameterBounds(), newSourceTypeInfo.getTypeParameterBounds())) {", "+\t\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);", "+\t\t\t}", "+\t\t\tHashMap oldTypeCategories = oldSourceTypeInfo.categories;", "+\t\t\tHashMap newTypeCategories = newSourceTypeInfo.categories;", "+\t\t\tif (oldTypeCategories != null) {", "+\t\t\t\t// take the union of old and new categories elements (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=125675)", "+\t\t\t\tSet elements;", "+\t\t\t\tif (newTypeCategories != null) {", "+\t\t\t\t\telements = new HashSet(oldTypeCategories.keySet());", "+\t\t\t\t\telements.addAll(newTypeCategories.keySet());", "+\t\t\t\t} else", "+\t\t\t\t\telements = oldTypeCategories.keySet();", "+\t\t\t\tIterator iterator = elements.iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tIJavaElement element = (IJavaElement) iterator.next();", "+\t\t\t\t\tString[] oldCategories = (String[]) oldTypeCategories.get(element);", "+\t\t\t\t\tString[] newCategories = newTypeCategories == null ? null : (String[]) newTypeCategories.get(element);", "+\t\t\t\t\tif (!Util.equalArraysOrNull(oldCategories, newCategories)) {", "+\t\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (newTypeCategories != null) {", "+\t\t\t\tIterator elements = newTypeCategories.keySet().iterator();", "+\t\t\t\twhile (elements.hasNext()) {", "+\t\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "+\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES); // all categories for this element were removed", "+\t\t\t\t}"]}], "num": 22426}
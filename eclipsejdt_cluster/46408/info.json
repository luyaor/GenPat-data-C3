{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66f8d343c7954f6dd578e43aa8b9b0eb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a383c608e9581add1da00926d0e3a19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "45385c42d33d34d82cce64b08ed0e453cded1e96", "commitAfterChange": "30ec825eb31162680cfe9de305168a6c878fa9bb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void indexClassFile(byte[] contents, char[] documentName) throws IOException", "signatureAfterChange": "\r private void indexClassFile(byte[] contents, char[] documentName) throws IOException", "diff": ["+\t\t\tif (nameLength <= 0) {\r", "+\t\t\t\t// See PR 1GIR345: ITPJCORE:ALL - Indexer: NegativeArraySizeException\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "-\t\tif (DEBUG) {\r", "-\t\t\tif (packageName != null) {\r", "-\t\t\t\tSystem.out.println(\"package name = \" + new String(packageName)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tif (name != null) {\r", "-\t\t\t\tSystem.out.println(\"class name = \" + new String(name)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tif (superinterfaces != null) {\r", "-\t\t\t\tfor (int i = 0, max = superinterfaces.length; i < max; i++) {\r", "-\t\t\t\t\tSystem.out.println(\"superinterfaces[\" + i + \"]= \" + new String(superinterfaces[i])); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t}\r", "-\t\t\t} \r", "-\t\t}\r", "-\t\t\tif (DEBUG) {\r", "-\t\t\t\tif (superclass != null) {\r", "-\t\t\t\t\tSystem.out.println(\"superclass name = \" + new String(superclass)); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\tif (DEBUG) {\r", "-\t\t\t\t\tif (method.getSelector() != null) {\r", "-\t\t\t\t\t\tSystem.out.println(\"method selector = \" + new String(method.getSelector())); //$NON-NLS-1$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (parameterTypes != null) {\r", "-\t\t\t\t\t\tfor (int j = 0, max2 = parameterTypes.length; j < max2; j++) {\r", "-\t\t\t\t\t\t\tSystem.out.println(\"parameterTypes[\" + j + \"]= \" + new String(parameterTypes[j])); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (returnType != null) {\r", "-\t\t\t\t\t\tSystem.out.println(\"return type = \" + new String(returnType)); //$NON-NLS-1$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (exceptionTypes != null) {\r", "-\t\t\t\t\t\tfor (int j = 0, max2 = exceptionTypes.length; j < max2; j++) {\r", "-\t\t\t\t\t\t\tSystem.out.println(\"exceptionTypes[\" + j + \"]= \" + new String(exceptionTypes[j])); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (DEBUG) {\r", "-\t\t\t\t\tif (fieldName != null) {\r", "-\t\t\t\t\t\tSystem.out.println(\"field name = \" + new String(fieldName)); //$NON-NLS-1$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (fieldType != null) {\r", "-\t\t\t\t\t\tSystem.out.println(\"field type = \" + new String(fieldType)); //$NON-NLS-1$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64a72b1ac5f1481bbcdc9f3702f7555d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void generateBoxingConversion(int unboxedTypeID)", "signatureAfterChange": "  public void generateBoxingConversion(int unboxedTypeID)", "diff": ["+", "-    \t\t\tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Byte.valueOf(byte)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    1, // receiverAndArgsSize", "-    \t\t\tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Byte(byte)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    2, // receiverAndArgsSize", "-    \t\t\tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Short.valueOf(short)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    1, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Short(short)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    2, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Character.valueOf(char)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    1, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Character(char)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    2, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Integer.valueOf(int)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    1, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Integer(int)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    2, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Long.valueOf(long)\"); //$NON-NLS-1$", "-                    2, // argCount", "+                    2, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Long(long)\"); //$NON-NLS-1$", "-                    2, // argCount", "+                    3, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Float.valueOf(float)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    1, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Float(float)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    2, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Double.valueOf(double)\"); //$NON-NLS-1$", "-                    2, // argCount", "+                    2, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Double(double)\"); //$NON-NLS-1$", "-                    2, // argCount", "+                    3, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic java.lang.Boolean.valueOf(boolean)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    1, // receiverAndArgsSize", "-            \tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokespecial java.lang.Boolean(boolean)\"); //$NON-NLS-1$", "-                    1, // argCount", "+                    2, // receiverAndArgsSize"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90224734554db007fd1c03da1c2f57ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "916e1b97cb8f68e0c3d2550db5f74003efc3f036", "commitAfterChange": "cb0883381704b865376b174b125a5d26ee0abae4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod)", "signatureAfterChange": "  \tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod)", "diff": ["+", "+\tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod) {", "+\t\tString[] errors = isMethod", "+\t\t\t? errorsForInvalidTagsMethodOrConstructor(visibility)", "+\t\t\t: errorsForInvalidTagsClassOrField(visibility);", "+\t\tint length = errors.length;", "+\t\tStringBuffer expectedProblemLog = new StringBuffer(isMethod?\"M\":\"C\");", "+\t\texpectedProblemLog.append(errors.length);", "+\t\texpectedProblemLog.append(\"----------\\n\");", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\texpectedProblemLog.append(errors[i]);", "+\t\trunNegativeTest(testFiles, expectedProblemLog.toString());", "+    }", "-\tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod) {", "-\t\tString[] errors = isMethod", "-\t\t\t? errorsForInvalidTagsMethodOrConstructor(visibility)", "-\t\t\t: errorsForInvalidTagsClassOrField(visibility);", "-\t\tint length = errors.length;", "-\t\tStringBuffer expectedProblemLog = new StringBuffer(\"----------\\n\");", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\texpectedProblemLog.append(errors[i]);", "-\t\t}", "-\t\ttry {", "-\t\t\trunNegativeTest(testFiles, expectedProblemLog.toString());", "-\t\t}", "-\t\tcatch (ComparisonFailure failure) {", "-\t\t\tSystem.out.println(\"-------------------------------------------------------------\");", "-\t\t\tSystem.out.println(\"Following static variable should be updated as follow:\");", "-\t\t\tSystem.out.print(\"\tprivate static String[] \");", "-\t\t\tif (isMethod) {", "-\t\t\t\tSystem.out.print(\"METHODS_ERRORS\");", "-\t\t\t} else {", "-\t\t\t\tSystem.out.print(\"CLASSES_ERRORS\");", "-\t\t\t}", "-\t\t\tSystem.out.print(\" = {\\n\");", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tint idx = errors[i].indexOf('\\n');", "-\t\t\t\tSystem.out.println(Util.displayString(errors[i].substring(0, idx+1), INDENT, SHIFT));", "-\t\t\t\tSystem.out.print(Util.displayString(errors[i].substring(idx+1), INDENT+1, SHIFT));", "-\t\t\t\tif (i == (length-1)) {", "-\t\t\t\t    for (int k = 0; k < INDENT-1; k++) System.out.print('\\t');", "-\t\t\t\t\tSystem.out.println('}');", "-\t\t\t\t} else {", "-\t\t\t\t\tSystem.out.println(',');", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow failure;", "-\t\t}", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac7e8d93ab5acdcdcb7c557965a42cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "444d0d90fb5197da92c8f8879cb5ec3d4ff0d34c", "commitAfterChange": "1be14359d87350a2a854ccd3edd15344e3b9a238", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tprintLocations(newSourceLocations, oldSourceLocations);", "+\t\t}", "-\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < newLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < oldLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tprintLocations(newSourceLocations, oldSourceLocations);", "-\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < newLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < oldLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tprintLocations(newSourceLocations, oldSourceLocations);", "-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tprintLocations(newBinaryLocations, oldBinaryLocations);", "+\t\t}", "-\t\t\tSystem.out.println(\"New binary locations:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < newLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + newBinaryLocations[i].debugPathString()); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Old binary locations:\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < oldLength; i++)", "-\t\t\t\tSystem.out.println(\"    \" + oldBinaryLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tprintLocations(newBinaryLocations, oldBinaryLocations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a963d9027602bee9d21de8c3782c68f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "667b6c6169416d9b79d86e73c3fa9c45930c36a8", "commitAfterChange": "8e69d36fa08db2d61d2c40fecd2494cfd19819f5", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 242, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["-\t\tif (JavaModelManager.DEBUG_302850) {", "-\t\t\tSystem.out.println(\"\t- Options before tear down:\");", "-\t\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\t}", "-\t\tif (JavaModelManager.DEBUG_302850) {", "-\t\t\tSystem.out.println(\"\t- Options before comparison with defaults:\");", "-\t\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\t\tSystem.out.println(\"\t- Default Options before comparison:\");", "-\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.indentString(new CompilerOptions(JavaCore.getDefaultOptions()).toString(), 2));", "-\t\t\tSystem.out.println(\"================================================================================\");", "-\t\t}", "-", "-\t\t", "-\t\tJavaModelManager.DEBUG_302850 = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1d30caa019232ee421444bbe8b114b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "4dbfc96b81c8ea986466921f071c4e6377836a2c", "commitAfterChange": "b7f468690a70977c68b74d1aeee81bdba359d238", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic void deleteResource(IResource resource) throws CoreException", "signatureAfterChange": " \tpublic void deleteResource(IResource resource) throws CoreException", "diff": ["-\t\tCoreException lastException = null;", "-\t\ttry {", "-\t\t\tresource.delete(true, null);", "-\t\t\treturn;", "-\t\t} catch (CoreException e) {", "-\t\t\tlastException = e;", "-\t\t\t// just print for info", "-\t\t\tSystem.out.println(e.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\t} catch (IllegalArgumentException iae) {", "-\t\t\t// just print for info", "-\t\t\tSystem.out.println(iae.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\t}", "-\t\twhile (resource.isAccessible() && ++retryCount <= 60) {", "-\t\t\tSystem.out.println(\"Running GC and waiting 1s...\");", "-\t\t\ttry {", "+\t\twhile (++retryCount <= 60) {", "+\t\t\tif (!org.eclipse.jdt.core.tests.util.Util.delete(resource)) {", "-\t\t\t\tThread.sleep(1000);", "-\t\t\t} catch (InterruptedException e) {", "-\t\t\ttry {", "-\t\t\t\tresource.delete(true, null);", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tlastException = e;", "-\t\t\t\t// just print for info", "-\t\t\t\tSystem.out.println(\"Retry \"+retryCount+\": \"+ e.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\t\t} catch (IllegalArgumentException iae) {", "-\t\t\t\t// just print for info", "-\t\t\t\tSystem.out.println(\"Retry \"+retryCount+\": \"+ iae.getMessage() + \" [\" + resource.getFullPath() + \"]\");", "-\t\t\t}", "-\t\t}", "-\t\tif (!resource.isAccessible()) {", "-\t\t\tSystem.out.println(\"Succeed to delete resource [\" + resource.getFullPath() + \"]\");", "-\t\t\treturn;", "-\t\t}", "-\t\tSystem.err.println(\"Failed to delete resource [\" + resource.getFullPath() + \"]\");", "-\t\tif (lastException != null) {", "-\t\t\tthrow lastException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c682261c2124bba9480417343be4f714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "64be0e1955b0627416c496a964aba7a1211321fc", "commitAfterChange": "1b6125b922b604588bed2b5782d039674eb294dc", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "diff": ["-", "-\t\t// Get working copies and reconcile", "-\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get first working copy and verify that there's no error", "-\t\tthis.workingCopies[0].getBuffer().setContents(source1);", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get second working copy and verify that there's one error (missing secondary type)", "-\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\t// DEBUG", "-\t\tJavaModelManager.VERBOSE = true;", "-\t\torg.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE = true;", "-\t\torg.eclipse.jdt.internal.core.NameLookup.VERBOSE = true;", "-\t\tSystem.out.println(\"--------------------------------------------------------------------------------\");", "-\t\tSystem.out.println(\"Running test \"+getName()+\"...\");", "-", "-\t\t// Delete file and recreate it with secondary outside eclipse", "+\t\t// Delete first workding copy file and recreate it with secondary outside eclipse", "-\t\tString sourceFilePath = ioFile.getCanonicalPath();", "-\t\tUtil.createFile(sourceFilePath, source1);", "-\t\t// Debug", "-\t\tSystem.out.println(\"File \"+sourceFilePath+\":\");", "-\t\tSystem.out.println(Util.fileContent(sourceFilePath));", "+\t\tUtil.createFile(ioFile.getCanonicalPath(), source1);", "+", "+\t\t// Get first working copy and verify that there's still no error", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);", "+", "+\t\t// Get second working copy and verify that there's any longer error", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "+\t\tthis.workingCopies[1].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);", "-\t\t// DEBUG", "-\t\tSystem.out.println(\"--------------------------------------------------------------------------------\");", "-\t\tJavaModelManager.VERBOSE = false;", "-\t\torg.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE = false;", "-\t\torg.eclipse.jdt.internal.core.NameLookup.VERBOSE = false;", "-"]}], "num": 46408}
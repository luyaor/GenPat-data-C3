{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2af10547964cf572882cdf0361b22f63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f8c800f48e2661800f20d2928216706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9b8f1dcd38c87057db028efdf3b2fc2a80ef104e", "commitAfterChange": "6d4dee66f18491d80f490f87faf063aca0dd04ee", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void testBug86380_Type() throws CoreException", "signatureAfterChange": " \tpublic void testBug86380_Type() throws CoreException", "diff": ["-\t\t\t\" * Valid javadoc.\\n\" + ", "-\t\t\t\" * @see Test\\n\" + ", "-\t\t\t\" * @see Unknown\\n\" + ", "-\t\t\t\" * @see Test#foo()\\n\" + ", "-\t\t\t\" * @see Test#unknown()\\n\" + ", "-\t\t\t\" * @see Test#field\\n\" + ", "-\t\t\t\" * @see Test#unknown\\n\" + ", "-\t\t\t\" * @param unexpected\\n\" + ", "-\t\t\t\" * @throws unexpected\\n\" + ", "-\t\t\t\" * @return unexpected \\n\" + ", "+\t\t\t\" * @see Annot#field\\n\" + ", "+\t\t\t\"@Annot(value=11)\\n\" + ", "-\t\t\t\"/**\\n\" + ", "-\t\t\t\" * Invalid javadoc\\n\" + ", "-\t\t\t\" */\\n\" + ", "-\t\t\t\"public class Test {\\n\" + ", "-\t\t\t\"\tpublic int field;\\n\" + ", "+\t\t\t\"@Annot(12) public class Test {\\n\" + ", "+\t\t\t\"\tpublic int field = Annot.field;\\n\" + ", "-\t\tIType type = workingCopies[1].getType(\"Test\");", "+\t\tICompilationUnit unit = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b86380\", \"Annot.java\");", "+\t\tIType type = unit.getType(\"Annot\");", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/b86380/Test.java b86380.Test [Annot] EXACT_MATCH OUTSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/Test.java b86380.Test.field [Annot] EXACT_MATCH OUTSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/package-info.java b86380.package-info [Annot] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/package-info.java b86380.package-info [Annot] EXACT_MATCH OUTSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df511248ce328ad27ece95f3cf377f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "80724a8df94e8e8610a4d46586b0b0c806074736", "commitAfterChange": "687ab8ff39714b5ce9983d7c352a9d12d477edc9", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void test427736()", "signatureAfterChange": " public void test427736()", "diff": ["+\tMap customOptions = getCompilerOptions();", "+\t//customOptions.put(CompilerOptions.OPTION_DocCommentSupport, CompilerOptions.ENABLED);", "-\t\t\t\"public class Test1<K, V> {\\n\" +", "-\t\t\t\"  /**\\n\" +", "-\t\t\t\"   * @param <K2> unused\\n\" +", "-\t\t\t\"   * @param <V2> unused\\n\" +", "-\t\t\t\"   */\\n\" +", "-\t\t\t\"  private static class Node<K2, V2> {}\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  @SuppressWarnings(\\\"unused\\\")\\n\" +", "-\t\t\t\"  private KeySetView<K, V> keySet(V mappedValue) {return null;}\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  /**\\n\" +", "-\t\t\t\"   * See {@link #keySet() keySet()},\\n\" +", "-\t\t\t\"   * @param <K3> unused\\n\" +", "-\t\t\t\"   * @param <V3> unused\\n\" +", "-\t\t\t\"   */\\n\" +", "-\t\t\t\"  private static class KeySetView<K3, V3> {}\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  private static <K4, V4> Node<K4, V4> untree0(Node<K4, V4> hi) {return hi;}\\n\" +", "-\t\t\t\"  void untreesomething(Node<K, V> n) {\\n\" +", "-\t\t\t\"    // The method untree0(Test1.Node<K4,V4>) in the type Test1<K,V> is not \\n\" +", "-\t\t\t\"    // applicable for the arguments (Test1.Node<K,V>)\\n\" +", "-\t\t\t\"    untree0(n);\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  private static <K4, V4> Node<K4, V4> tabAt0(Node<K4, V4>[] tab, int i) {return tab[i];}\\n\" +", "-\t\t\t\"  void tabatsomething(Node<K, V>[] t) {\\n\" +", "-\t\t\t\"    // The method tabAt0(Test2.Node<K4,V4>[], int) in the type Test2<K,V> is not \\n\" +", "-\t\t\t\"    // applicable for the arguments (Test2.Node<K,V>[], int)\\n\" +", "-\t\t\t\"    tabAt0(t, 0);\\n\" +", "-\t\t\t\"  }\\n\" +", "+\t\t\t\"class Test1<K, V> {\\n\" +", "+\t\t\t\" static class Node<K2, V2> {}\\n\" +", "+\t\t\t\" void keySet(V v) {}\\n\" +", "+\t\t\t\" /**\\n\" +", "+\t\t\t\"  * See {@link #keySet() keySet()},\\n\" +", "+\t\t\t\"  */\\n\" +", "+\t\t\t\" class KeySetView {}\\n\" +", "+\t\t\t\" static <K4, V4> void untree0(Node<K4, V4> hi) {}    \\n\" +", "+\t\t\t\" void untreesomething(Node<K, V> n) {\\n\" +", "+\t\t\t\"   untree0(n); \\n\" +", "+\t\t\t\" }\\n\" +", "-\t\t\"\");", "+\t\t\"\", null, true, customOptions);"]}], "num": 64057}
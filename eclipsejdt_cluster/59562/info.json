{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be0d1a19cd4ad3e13ff21910c66e4182", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d484e257eee5c9e9b9eccac87b6c556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " private void notifySourceElementRequestor(TypeParameter[] typeParameters)", "signatureAfterChange": " private ISourceElementRequestor.TypeParameterInfo[] getTypeParameterInfos(TypeParameter[] typeParameters)", "diff": ["-private void notifySourceElementRequestor(TypeParameter[] typeParameters) {", "-\tif (typeParameters != null) {", "-\t\tint typeParametersLength = typeParameters.length;", "-\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\tTypeParameter typeParameter = typeParameters[i];", "-\t\t\tTypeReference firstBound = typeParameter.type;", "-\t\t\tTypeReference[] otherBounds = typeParameter.bounds;", "-\t\t\tchar[][] typeParameterBounds = null;", "-\t\t\tif (firstBound != null) {", "-\t\t\t\tif (otherBounds != null) {", "-\t\t\t\t\tint otherBoundsLength = otherBounds.length;", "-\t\t\t\t\tchar[][] boundNames = new char[otherBoundsLength+1][];", "-\t\t\t\t\tboundNames[0] = CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.');", "-\t\t\t\t\tfor (int j = 0; j < otherBoundsLength; j++) {", "-\t\t\t\t\t\tboundNames[j+1] = ", "-\t\t\t\t\t\t\tCharOperation.concatWith(otherBounds[j].getParameterizedTypeName(), '.'); ", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeParameterBounds = boundNames;", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeParameterBounds = new char[][] { CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.')};", "+private ISourceElementRequestor.TypeParameterInfo[] getTypeParameterInfos(TypeParameter[] typeParameters) {", "+\tif (typeParameters == null) return null;", "+\tint typeParametersLength = typeParameters.length;", "+\tISourceElementRequestor.TypeParameterInfo[] result = new ISourceElementRequestor.TypeParameterInfo[typeParametersLength];", "+\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\tTypeReference firstBound = typeParameter.type;", "+\t\tTypeReference[] otherBounds = typeParameter.bounds;", "+\t\tchar[][] typeParameterBounds = null;", "+\t\tif (firstBound != null) {", "+\t\t\tif (otherBounds != null) {", "+\t\t\t\tint otherBoundsLength = otherBounds.length;", "+\t\t\t\tchar[][] boundNames = new char[otherBoundsLength+1][];", "+\t\t\t\tboundNames[0] = CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.');", "+\t\t\t\tfor (int j = 0; j < otherBoundsLength; j++) {", "+\t\t\t\t\tboundNames[j+1] = ", "+\t\t\t\t\t\tCharOperation.concatWith(otherBounds[j].getParameterizedTypeName(), '.'); ", "+\t\t\t\ttypeParameterBounds = boundNames;", "+\t\t\t} else {", "+\t\t\t\ttypeParameterBounds = new char[][] { CharOperation.concatWith(firstBound.getParameterizedTypeName(), '.')};", "-\t\t\trequestor.enterTypeParameter(", "-\t\t\t\ttypeParameter.declarationSourceStart, ", "-\t\t\t\ttypeParameter.name, ", "-\t\t\t\ttypeParameter.sourceStart, ", "-\t\t\t\ttypeParameter.sourceEnd,", "-\t\t\t\ttypeParameterBounds);", "-\t\t\trequestor.exitTypeParameter(typeParameter.declarationSourceEnd);", "+\t\tISourceElementRequestor.TypeParameterInfo typeParameterInfo = new ISourceElementRequestor.TypeParameterInfo();", "+\t\ttypeParameterInfo.declarationStart = typeParameter.declarationSourceStart;", "+\t\ttypeParameterInfo.declarationEnd = typeParameter.declarationSourceEnd;", "+\t\ttypeParameterInfo.name = typeParameter.name;", "+\t\ttypeParameterInfo.nameSourceStart = typeParameter.sourceStart;", "+\t\ttypeParameterInfo.nameSourceEnd = typeParameter.sourceEnd;", "+\t\ttypeParameterInfo.typeParameterBounds = typeParameterBounds;", "+\t\tresult[i] = typeParameterInfo;", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a45ae8db7d807515f55d6621d4c2b7b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "58ba36970b62e85055d743e983529c59c428ef51", "commitAfterChange": "62b67c6dc710fafde2d85e9a6368fb1e9d9e73c8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "signatureAfterChange": " \t \tpublic TypeVariableBinding[] createTypeVariables(TypeParameter[] typeParameters, Binding declaringElement)", "diff": ["-", "-\t\tPackageBinding unitPackage = compilationUnitScope().fPackage;", "-\t\t", "+", "-\t\t", "+\t\tPackageBinding unitPackage = compilationUnitScope().fPackage;", "-\t\tHashtableOfObject knownTypeParameterNames = new HashtableOfObject(length);", "-\t\tnextParameter : for (int i = 0; i < length; i++) {", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t", "-\t\t\tif (knownTypeParameterNames.containsKey(typeParameter.name)) {", "-\t\t\t\tTypeVariableBinding previousBinding = (TypeVariableBinding) knownTypeParameterNames.get(typeParameter.name);", "-\t\t\t\tif (previousBinding != null) {", "-\t\t\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\t\t\tTypeParameter previousParameter = typeParameters[j];", "-\t\t\t\t\t\tif (previousParameter.binding == previousBinding) {", "-\t\t\t\t\t\t\tproblemReporter().duplicateTypeParameterInType(previousParameter);", "-\t\t\t\t\t\t\tpreviousParameter.binding = null;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tknownTypeParameterNames.put(typeParameter.name, null); // ensure that the duplicate parameter is found & removed", "-\t\t\t\tproblemReporter().duplicateTypeParameterInType(typeParameter);", "-\t\t\t\ttypeParameter.binding = null;", "-\t\t\t} else {", "-\t\t\t\tknownTypeParameterNames.put(typeParameter.name, parameterBinding);", "-\t\t\t\t// remember that we have seen a field with this name", "-\t\t\t\tif (parameterBinding != null)", "-\t\t\t\t\ttypeVariableBindings[count++] = parameterBinding;", "+", "+\t\t\t// detect duplicates, but keep each variable to reduce secondary errors with instantiating this generic type (assume number of variables is correct)", "+\t\t\tfor (int j = 0; j < count; j++) {", "+\t\t\t\tTypeVariableBinding knownVar = typeVariableBindings[j];", "+\t\t\t\tif (CharOperation.equals(knownVar.sourceName, typeParameter.name))", "+\t\t\t\t\tproblemReporter().duplicateTypeParameterInType(typeParameter);", "+\t\t\ttypeVariableBindings[count++] = parameterBinding;", "-\t\tif (count != length) {", "+\t\tif (count != length)", "-\t\t}"]}], "num": 59562}
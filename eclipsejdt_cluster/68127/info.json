{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67337e3c8e923e75003e210c51ea2fff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d4431f8e3a1d95181cbf9c1e3f70fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/base/XMLComparer.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate Element findRootNode(Document doc)", "signatureAfterChange": " \tprivate Element findRootNode(Document doc)", "diff": ["-\t\tNode model = null;", "-\t\tfor (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {", "-\t\t\tif (Node.ELEMENT_NODE == n.getNodeType()) {", "-\t\t\t\tif (MODEL.equals(n.getNodeName())) {", "-\t\t\t\t\tmodel = n;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn (Element) model;", "+\t\treturn findNamedChildElement(doc, MODEL_TAG);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f583125b4d008dc2e3f04b62fbcd9b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "7459aa179eda8035f8ab159242bf75f277ac7ec3", "commitAfterChange": "11dfd19361f763778cfde2d1983dcc056fc62cdd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void setupConverterJCL() throws IOException", "signatureAfterChange": " \tpublic void setupConverterJCL() throws IOException", "diff": ["-\t\t\t} else {", "-\t\t\t\t//copy the two files to the JCL directory", "-\t\t\t\tjava.io.File resourceJCLMin =", "-\t\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMin.jar\"); //$NON-NLS-1$", "-\t\t\t\tcopy(resourceJCLMin, jclMin);", "-\t\t\t\tjava.io.File resourceJCLMinsrc =", "-\t\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMinsrc.zip\"); //$NON-NLS-1$", "-\t\t\t\tcopy(resourceJCLMinsrc, jclMinsrc);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t//check that the two files, jclMin.jar and jclMinsrc.zip are present", "-\t\t\t//copy either file that is missing or less recent than the one in workspace", "-\t\t\tjava.io.File resourceJCLMin =", "-\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMin.jar\"); //$NON-NLS-1$", "-\t\t\tif (jclMin.lastModified() < resourceJCLMin.lastModified()) {", "-\t\t\t\tcopy(resourceJCLMin, jclMin);", "-\t\t\t}", "-\t\t\tjava.io.File resourceJCLMinsrc =", "-\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMinsrc.zip\"); //$NON-NLS-1$", "-\t\t\tif (jclMinsrc.lastModified() < resourceJCLMinsrc.lastModified()) {", "-\t\t\t\tcopy(resourceJCLMinsrc, jclMinsrc);", "+\t\t//copy the two files to the JCL directory", "+\t\tjava.io.File resourceJCLMin =", "+\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMin.jar\"); //$NON-NLS-1$", "+\t\tcopy(resourceJCLMin, jclMin);", "+\t\tjava.io.File resourceJCLMinsrc =", "+\t\t\tnew java.io.File(resourceJCLDir + separator + \"converterJclMinsrc.zip\"); //$NON-NLS-1$", "+\t\tcopy(resourceJCLMinsrc, jclMinsrc);"]}], "num": 68127}
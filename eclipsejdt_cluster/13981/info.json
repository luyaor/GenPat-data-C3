{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "765dfe748d1b91c07210c24061ffb309", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9d9743d067ad44c3f415ff3fdaf6c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tfinal Parser parser = new Parser(this.enclosingScope.problemReporter(), false);", "-\t\tfinal char[] source = this.compilationResult.getCompilationUnit().getContents();", "-\t\tReferenceExpression copy =  (ReferenceExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "-\t\t\t\t\t\t\t\t\t\tthis.enclosingScope.referenceCompilationUnit(), false /* record line separators */);", "+\t\tReferenceExpression copy = copy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad34a14f3b668100dc760060a0f475c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\treturn (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tLambdaExpression copy =  (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tcopy.valueCompatible = this.valueCompatible;", "+\t\tcopy.voidCompatible = this.voidCompatible;", "+\t\tcopy.shapeAnalysisComplete = this.shapeAnalysisComplete;", "+\t\treturn copy;"]}], "num": 13981}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "894cb27b62b088696f9963374d93a445", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51e04fc2f602180725d264f95481f2a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeVector.java", "commitBeforeChange": "5ca17c5326a26b6eee24f188fb8aac58b28e7a38", "commitAfterChange": "caad60d9b7772e3fe7e4cc9da5c6ace1a71de6dd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean contains(IType element)", "signatureAfterChange": " public boolean contains(IType element)", "diff": ["-\tfor (int i = this.size; --i >= 0;) {", "-\t\t/* Note: When creating new subtypes of RST, need to check whether this code", "-\t\t * which gives special treatment to lambda needs modification or not - refer to bug 436139", "-\t\t * An alternate could have been the following:", "-\t\t * if (element.equals(this.elements[i) && this.elements[i].equals(element)) return true;", "-\t\t * but the above has the issue of repeating the steps in most of the cases.", "-\t\t */", "-\t\tIType firstElement = null;", "-\t\tIType secondElement = null;", "-\t\tif (element.isLambda()) {", "-\t\t\tfirstElement = element;", "-\t\t\tsecondElement = this.elements[i];", "-\t\t} else {", "-\t\t\tfirstElement = this.elements[i];", "-\t\t\tsecondElement = element;", "-\t\t}", "-\t\tif (firstElement.equals(secondElement))", "+\tfor (int i = this.size; --i >= 0;) ", "+\t\tif (element.equals(this.elements[i]))", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec20ac790192334ec368a5059d1591f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeVector.java", "commitBeforeChange": "4060a8b976ef0b5d8ddad76013819bf5f0674a9c", "commitAfterChange": "e52667a2f75989a9365399a97143f06e9f238b04", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean contains(IType element)", "signatureAfterChange": " public boolean contains(IType element)", "diff": ["-\tfor (int i = this.size; --i >= 0;)", "-\t\tif (element.equals(this.elements[i]))", "+\tfor (int i = this.size; --i >= 0;) {", "+\t\t/* Note: When creating new subtypes of RST, need to check whether this code", "+\t\t * which gives special treatment to lambda needs modification or not - refer to bug 436139", "+\t\t * An alternate could have been the following:", "+\t\t * if (element.equals(this.elements[i) && this.elements[i].equals(element)) return true;", "+\t\t * but the above has the issue of repeating the steps in most of the cases.", "+\t\t */", "+\t\tIType firstElement = null;", "+\t\tIType secondElement = null;", "+\t\tif (element.isLambda()) {", "+\t\t\tfirstElement = element;", "+\t\t\tsecondElement = elements[i];", "+\t\t} else {", "+\t\t\tfirstElement = elements[i];", "+\t\t\tsecondElement = element;", "+\t\t}", "+\t\tif (firstElement.equals(secondElement))", "+\t}"]}], "num": 30408}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af651e5aab0a28e85ee970f84b38068f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50433437eb59e30cb96f279dcf7a5dcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tvoid setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["-\t */\r", "-\tvoid setOption(ConfigurableOption setting) {\r", "-\r", "-\t\tswitch (setting.getID()) {\r", "-\t\t\tcase 1 : // Local variable table attribute\r", "-\t\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "-\t\t\t\t\t// set the debug flag with Vars.\r", "-\t\t\t\t\tproduceDebugAttributes |= Vars;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tproduceDebugAttributes &= ~Vars;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 : // Line number attribute\r", "-\t\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "-\t\t\t\t\t// set the debug flag with Lines\r", "-\t\t\t\t\tproduceDebugAttributes |= Lines;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tproduceDebugAttributes &= ~Lines;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 3 : // source file attribute\r", "-\t\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "-\t\t\t\t\t// set the debug flag with Source.\r", "-\t\t\t\t\tproduceDebugAttributes |= Source;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tproduceDebugAttributes &= ~Source;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 4 : // preserveAllLocals flag\r", "-\t\t\t\tpreserveAllLocalVariables(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 5 : // unreachable code reported as error\r", "-\t\t\t\thandleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 6 : // invalid import\r", "-\t\t\t\thandleImportProblemAsError(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 7 : // methods with constructor name\r", "-\t\t\t\thandleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 8 : // overridden package default method\r", "-\t\t\t\thandleOverriddenPackageDefaultMethodAsWarning(\r", "-\t\t\t\t\tsetting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 9 : // use of deprecated API\r", "-\t\t\t\thandleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 10 : // catch block hidden by another one\r", "-\t\t\t\thandleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 11 : // local variable not used\r", "-\t\t\t\thandleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 12 : // argument not used\r", "-\t\t\t\thandleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 13 : // temporary warning\r", "-\t\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "-\t\t\t\t\twarningThreshold |= TemporaryWarning;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 14 : // target JDK\r", "-\t\t\t\tsetTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 15 : // synthetic access emulation\r", "-\t\t\t\thandleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "+ */\r", "+void setOption(ConfigurableOption setting) {\r", "+\t\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // Local variable table attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Vars.\r", "+\t\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // Line number attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Lines\r", "+\t\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // source file attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Source.\r", "+\t\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // preserveAllLocals flag\r", "+\t\t\tpreserveAllLocalVariables(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 5 : // unreachable code reported as error\r", "+\t\t\thandleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 6 : // invalid import\r", "+\t\t\thandleImportProblemAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // methods with constructor name\r", "+\t\t\thandleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 8 : // overridden package default method\r", "+\t\t\thandleOverriddenPackageDefaultMethodAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // use of deprecated API\r", "+\t\t\thandleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // catch block hidden by another one\r", "+\t\t\thandleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 11 : // local variable not used\r", "+\t\t\thandleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 12 : // argument not used\r", "+\t\t\thandleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 13 : // temporary warning\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\twarningThreshold |= TemporaryWarning;\r", "+\t\t\tbreak;\r", "+\t\tcase 14 : // target JDK\r", "+\t\t\tsetTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t\t\tbreak;\r", "+\t\tcase 15: // synthetic access emulation\r", "+\t\t\thandleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 16: // non externalized string literal\r", "+\t\t\thandleNonExternalizedStringLiteralAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaee23c201b5b04a8648f9eb7df3f6ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "4b831e8897b5d08fc4189f64c5b148109c36337b", "commitAfterChange": "e97dff1004437e7793059cc79f21bd49d58afcab", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["+\t\t\tbreak;\r", "+\t\tcase 18: // warn on assert identifier\r", "+\t\t\thandleAssertIdentifierAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r"]}], "num": 8536}
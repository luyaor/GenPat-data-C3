{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e05d9e68a0fcdcf1b75974385b5397a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2430f8f96c7f0a41b6bdcf9fd5c6f782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateOptimizedLessThanOrEqual( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedLessThanOrEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedLessThanOrEqual(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-\t\tint promotedTypeID = (left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "-\t\t// both sides got promoted in the same way", "-\t\tif (promotedTypeID == T_int) {", "-\t\t\t// 0 <= x", "-\t\t\tif ((left.constant != Constant.NotAConstant) && (left.constant.intValue() == 0)) {", "-\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "+ */", "+public void generateOptimizedLessThanOrEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tint promotedTypeID = (this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;", "+\t// both sides got promoted in the same way", "+\tif (promotedTypeID == TypeIds.T_int) {", "+\t\t// 0 <= x", "+\t\tif ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {", "+\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifge(trueLabel);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.iflt(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// reposition the endPC", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\treturn;", "+\t\t}", "+\t\t// x <= 0", "+\t\tif ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {", "+\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// reposition the endPC", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default comparison", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tif (falseLabel == null) {", "+\t\t\tif (trueLabel != null) {", "+\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmple(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpg();", "+\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpg();", "+\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "-\t\t\t// x <= 0", "-\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.intValue() == 0)) {", "-\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t} else {", "+\t\t\tif (trueLabel == null) {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmpgt(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpg();", "+\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpg();", "+\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "-\t\t\t}", "-\t\t}", "-\t\t// default comparison", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tif (falseLabel == null) {", "-\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmple(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpg();", "-\t\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpg();", "-\t\t\t\t\t\t\tcodeStream.ifle(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmpgt(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpg();", "-\t\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpg();", "-\t\t\t\t\t\t\tcodeStream.ifgt(falseLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t} else {", "-\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t}", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95061a66f990bda645cea576f88cd847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void generateOptimizedLessThan( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedLessThan(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedLessThan(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-", "-\t\tint promotedTypeID = (left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "-\t\t// both sides got promoted in the same way", "-\t\tif (promotedTypeID == T_int) {", "-\t\t\t// 0 < x", "-\t\t\tif ((left.constant != Constant.NotAConstant) && (left.constant.intValue() == 0)) {", "-\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "+ */", "+public void generateOptimizedLessThan(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tint promotedTypeID = (this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;", "+\t// both sides got promoted in the same way", "+\tif (promotedTypeID == TypeIds.T_int) {", "+\t\t// 0 < x", "+\t\tif ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {", "+\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\treturn;", "+\t\t}", "+\t\t// x < 0", "+\t\tif ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {", "+\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default comparison", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tif (falseLabel == null) {", "+\t\t\tif (trueLabel != null) {", "+\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmplt(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpg();", "+\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpg();", "+\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t// x < 0", "-\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.intValue() == 0)) {", "-\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t} else {", "+\t\t\tif (trueLabel == null) {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmpge(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpg();", "+\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpg();", "+\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "-\t\t\t}", "-\t\t}", "-\t\t// default comparison", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tif (falseLabel == null) {", "-\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmplt(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpg();", "-\t\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpg();", "-\t\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmpge(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpg();", "-\t\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpg();", "-\t\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);", "-\t\t\t\t\treturn;", "-\t\t\t\t} else {", "-\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t}", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "facf7da9e0e425d70df870a18f5e7009", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateOptimizedGreaterThan( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateOptimizedGreaterThan(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateOptimizedGreaterThan(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tBranchLabel trueLabel,", "-\t\tBranchLabel falseLabel,", "-\t\tboolean valueRequired) {", "-", "-\t\tint promotedTypeID = (left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "-\t\t// both sides got promoted in the same way", "-\t\tif (promotedTypeID == T_int) {", "-\t\t\t// 0 > x", "-\t\t\tif ((left.constant != Constant.NotAConstant) && (left.constant.intValue() == 0)) {", "-\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "+ */", "+public void generateOptimizedGreaterThan(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {", "+\tint promotedTypeID = (this.left.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4;", "+\t// both sides got promoted in the same way", "+\tif (promotedTypeID == TypeIds.T_int) {", "+\t\t// 0 > x", "+\t\tif ((this.left.constant != Constant.NotAConstant) && (this.left.constant.intValue() == 0)) {", "+\t\t\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.iflt(trueLabel);", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t// x > 0", "-\t\t\tif ((right.constant != Constant.NotAConstant) && (right.constant.intValue() == 0)) {", "-\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t\t// implicitly falling through the FALSE case", "-\t\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\t\t// implicitly falling through the TRUE case", "-\t\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// reposition the endPC", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t\t// default comparison", "-\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tif (falseLabel == null) {", "-\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmpgt(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpl();", "-\t\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpl();", "-\t\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tswitch (promotedTypeID) {", "-\t\t\t\t\t\tcase T_int :", "-\t\t\t\t\t\t\tcodeStream.if_icmple(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_float :", "-\t\t\t\t\t\t\tcodeStream.fcmpl();", "-\t\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcodeStream.lcmp();", "-\t\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\tcodeStream.dcmpl();", "-\t\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "-\t\t\t\t\t}", "-\t\t\t\t\t// reposition the endPC", "-\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.ifge(falseLabel);", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t// reposition the endPC", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\treturn;", "+\t\t// x > 0", "+\t\tif ((this.right.constant != Constant.NotAConstant) && (this.right.constant.intValue() == 0)) {", "+\t\t\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicitly falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t// implicitly falling through the TRUE case", "+\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\t// reposition the endPC", "+\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t// default comparison", "+\tthis.left.generateCode(currentScope, codeStream, valueRequired);", "+\tthis.right.generateCode(currentScope, codeStream, valueRequired);", "+\tif (valueRequired) {", "+\t\tif (falseLabel == null) {", "+\t\t\tif (trueLabel != null) {", "+\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmpgt(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpl();", "+\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpl();", "+\t\t\t\t\t\tcodeStream.ifgt(trueLabel);", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (trueLabel == null) {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tswitch (promotedTypeID) {", "+\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\tcodeStream.if_icmple(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\tcodeStream.fcmpl();", "+\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcodeStream.lcmp();", "+\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.dcmpl();", "+\t\t\t\t\t\tcodeStream.ifle(falseLabel);", "+\t\t\t\t}", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, codeStream.position);\t\t\t\t\t", "+\t\t\t\treturn;", "+\t\t\t} else {", "+\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+}"]}], "num": 21774}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f10204527a9e45a9bcc7e8deb3cdc80", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bfefee01b7bbe52aa651d799a8bc17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/ModelTests.java", "commitBeforeChange": "f4eb00a745a91dbc4b9bd7fa4022524e166e1b90", "commitAfterChange": "a4f11659e59fa8a478723fa3bc2c5651f04c5382", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testElement() throws IOException", "signatureAfterChange": " \tprivate void internalTestElement(JavaCompiler compiler) throws IOException", "diff": ["-\tpublic void testElement() throws IOException {", "+\t */", "+\tprivate void internalTestElement(JavaCompiler compiler) throws IOException {", "+\t\tSystem.clearProperty(ELEMENTPROCNAME);", "-\t\toptions.add(\"-Aorg.eclipse.jdt.compiler.apt.tests.processors.elements.ElementProc\");", "-\t\tBatchTestUtils.compileTree(_compiler, options, targetFolder);", "+\t\toptions.add(\"-A\" + ELEMENTPROCNAME);", "+\t\tBatchTestUtils.compileTree(compiler, options, targetFolder);", "-\t\t// check that everything was processed", "+\t\t// If it succeeded, the processor will have set this property to \"succeeded\";", "+\t\t// if not, it will set it to an error value.", "+\t\tassertEquals(\"succeeded\", System.getProperty(ELEMENTPROCNAME));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e52973eef5646a3aa0196e1d1910ee36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "8861b8acfd87086e544117143aef10af0195095f", "commitAfterChange": "e6a8418fa053d90159e93cddfdeaf1bb437e9155", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\tout.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$", "-\t\t\t\tclassProp = \".\"; //$NON-NLS-1$", "+\t\t\t\terr.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$", "+\t\t\t\tclassProp = System.getProperty(\"user.dir\"); //$NON-NLS-1$", "-\t\t\tclasspaths = new String[tokenizer.countTokens()];", "+\t\t\tclasspaths = new String[tokenizer.countTokens() + 1];", "+\t\t\tclasspaths[pathCount++] = System.getProperty(\"user.dir\");//$NON-NLS-1$", "-\t\t\t\tout.println(Main.bind(\"configure.requiresJDK1.2orAbove\")); //$NON-NLS-1$", "+\t\t\t\terr.println(Main.bind(\"configure.requiresJDK1.2orAbove\")); //$NON-NLS-1$", "-\t\t\t\tout.println(Main.bind(\"configure.incorrectClasspath\", classpaths[i])); //$NON-NLS-1$", "+\t\t\t\terr.println(Main.bind(\"configure.incorrectClasspath\", classpaths[i])); //$NON-NLS-1$", "-\t\t\t\tout = new PrintWriter(new FileOutputStream(log, false));", "+\t\t\t\terr = new PrintWriter(new FileOutputStream(log, false));"]}], "num": 21228}
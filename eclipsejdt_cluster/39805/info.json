{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab38c69bb709edcdbf51d8dc3c5de065", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cdc3dfb875671430490e24a1f4e0852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": " synchronized String readDocumentName(int docNumber) throws IOException", "signatureAfterChange": " synchronized String readDocumentName(int docNumber) throws IOException", "diff": ["-}", "-\t\tbyte[] bytes = new byte[numberOfBytes];", "+\t\tthis.streamBuffer = new byte[numberOfBytes];", "+\t\tthis.bufferIndex = 0;", "-\t\t\tif (file.read(bytes, 0, numberOfBytes) != numberOfBytes)", "+\t\t\tif (file.read(this.streamBuffer, 0, numberOfBytes) != numberOfBytes)", "-\t\t} finally {", "+\t\t}", "+\t\tcatch (IOException ioe) {", "+\t\t\tthis.streamBuffer = null;", "+\t\t\tthrow ioe;", "+\t\t}", "+\t\tfinally {", "-\t\tDataInputStream stream = new DataInputStream(new ByteArrayInputStream(bytes));", "-\t\treadChunk(chunk, stream, 0, numberOfNames);", "+\t\ttry {", "+\t\t\treadChunk(chunk, null, 0, numberOfNames);", "+\t\t}", "+\t\tcatch (IOException ioe) {", "+\t\t\tthis.streamBuffer = null;", "+\t\t\tthrow ioe;", "+\t\t}", "+\tthis.streamBuffer = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3683334c27198889397dc7fdfa576cb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/textui/TestRunner.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic static void main(String args[])", "signatureAfterChange": " \t \tpublic static void main(String args[])", "diff": ["-\t", "-\tpublic static void main(String args[]) {", "-\t\tTestRunner aTestRunner= new TestRunner();", "-\t\ttry {", "-\t\t\tTestResult r= aTestRunner.start(args);", "-\t\t\tif (!r.wasSuccessful()) ", "-\t\t\t\tSystem.exit(-1);", "-\t\t\tSystem.exit(0);", "-\t\t} catch(Exception e) {", "-\t\t\tSystem.err.println(e.getMessage());", "-\t\t\tSystem.exit(-2);", "-\t\t}", "-\t}", "+\t", "+\tpublic static void main(String args[]) {", "+\t\tTestRunner aTestRunner= new TestRunner();", "+\t\ttry {", "+\t\t\tTestResult r= aTestRunner.start(args);", "+\t\t\tif (!r.wasSuccessful()) ", "+\t\t\t\tSystem.exit(FAILURE_EXIT);", "+\t\t\tSystem.exit(SUCCESS_EXIT);", "+\t\t} catch(Exception e) {", "+\t\t\tSystem.err.println(e.getMessage());", "+\t\t\tSystem.exit(EXCEPTION_EXIT);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a1b420740bacc6b944afb7f55b4f306", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "232894f8b7a9230b59603e29d5def8f055969141", "commitAfterChange": "412080803aa45198b7410acb5302fba4467d7677", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static IClassFileReader createDefaultClassFileReader(String fileName, int decodingFlag)", "signatureAfterChange": " \tpublic static IClassFileReader createDefaultClassFileReader(InputStream stream, int decodingFlag)", "diff": ["-\t */", "-\tpublic static IClassFileReader createDefaultClassFileReader(String fileName, int decodingFlag){", "-\t\ttry {", "-\t\t\treturn new ClassFileReader(Util.getFileByteContent(new File(fileName)), decodingFlag);", "-\t\t} catch(ClassFormatException e) {", "-\t\t\treturn null;", "-\t\t} catch(IOException e) {", "-\t\t\treturn null;", "-\t\t}", "-\t}\t", "+\t */", "+\tpublic static IClassFileReader createDefaultClassFileReader(InputStream stream, int decodingFlag) {", "+\t\ttry {", "+\t\t\treturn new ClassFileReader(Util.getInputStreamAsByteArray(stream, -1), decodingFlag);", "+\t\t} catch(ClassFormatException e) {", "+\t\t\treturn null;", "+\t\t} catch(IOException e) {", "+\t\t\treturn null;", "+\t\t}", "+\t}"]}], "num": 39805}
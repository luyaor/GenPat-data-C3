{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35eb02eb290272c1e85efa8b1a94de4e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a68f0e3e11dc4ccdbf70a3d74b37dac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, TypeBinding [] typeArguments, AnnotationBinding[] annotations)", "signatureAfterChange": " \tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, AnnotationBinding[] annotations)", "diff": ["-\t// Private subroutine for public APIs.", "-\tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, TypeBinding [] typeArguments, AnnotationBinding[] annotations) {", "-\t\tTypeBinding keyType = getUnannotatedType(type);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);", "-\t\tint i = 0;", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int length = cachedInfo.length; i < length; i++) {", "-\t\t\t\tTypeBinding cachedType = cachedInfo[i];", "-\t\t\t\tif (cachedType == null) break;", "-\t\t\t\tif (cachedType.enclosingType() == enclosingType) {", "-\t\t\t\t\tif (Util.effectivelyEqual(cachedType.getTypeAnnotations(), annotations) && Util.effectivelyEqual(cachedType.typeArguments(), typeArguments)) {", "-\t\t\t\t\t\treturn cachedType;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "-\t\t}", "-\t\tint length = cachedInfo.length;", "-\t\tif (i == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);", "-\t\t}", "-\t\t/* Add the new comer, retaining the same type binding id as the naked type. To materialize the new comer we can't use new since this is a general", "-\t\t   purpose method designed to deal type bindings of all types. \"Clone\" the incoming type, specializing for any enclosing type that may itself be ", "-\t\t   possibly be annotated. This is so the binding for @Outer Outer.Inner != Outer.@Inner Inner != @Outer Outer.@Inner Inner. Likewise so the bindings ", "-\t\t   for @Readonly List<@NonNull String> != @Readonly List<@Nullable String> != @Readonly List<@Interned String> ", "-\t\t*/", "-\t\tTypeBinding unannotatedType = this.unannotatedTypeSystem.getUnannotatedType(type);", "-\t\tTypeBinding annotatedType = type.clone(enclosingType);", "-\t\tannotatedType.id = unannotatedType.id;", "-\t\tannotatedType.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn cachedInfo[i] = annotatedType;", "+\t*/", "+\tprivate TypeBinding getAnnotatedType(TypeBinding type, TypeBinding enclosingType, AnnotationBinding[] annotations) {", "+\t\tTypeBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(type);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) break;", "+\t\t\t", "+\t\t\tif (derivedType.enclosingType() != enclosingType || !Util.effectivelyEqual(derivedType.typeArguments(), type.typeArguments()))", "+\t\t\t\tcontinue;", "+\t\t\t", "+\t\t\tswitch(type.kind()) {", "+\t\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\t\tif (!derivedType.isArrayType() || derivedType.dimensions() != type.dimensions() || derivedType.leafComponentType() != type.leafComponentType())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\t\tif (!derivedType.isParameterizedType() || derivedType.actualType() != type.actualType())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.RAW_TYPE:", "+\t\t\t\t\tif (!derivedType.isRawType() || derivedType.actualType() != type.actualType())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\t\tif (!derivedType.isWildcard() || derivedType.actualType() != type.actualType() || derivedType.rank() != type.rank() || derivedType.boundKind() != type.boundKind())", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (derivedType.bound() != type.bound() || !Util.effectivelyEqual(derivedType.additionalBounds(), type.additionalBounds()))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tswitch(derivedType.kind()) {", "+\t\t\t\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\t\t\tcase Binding.RAW_TYPE:", "+\t\t\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (Util.effectivelyEqual(derivedType.getTypeAnnotations(), annotations)) {", "+\t\t\t\treturn derivedType;", "+\t\t\t}", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = derivedType;", "+\t\t}", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = getUnannotatedType(type);", "+\t\t", "+\t\tif (!haveTypeAnnotations(type, enclosingType, null, annotations))", "+\t\t\treturn nakedType;", "+\t\t", "+\t\tTypeBinding annotatedType = type.clone(enclosingType);", "+\t\tannotatedType.id = nakedType.id;", "+\t\tannotatedType.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\tTypeBinding keyType;", "+\t\tswitch (type.kind()) {", "+\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\tkeyType = type.leafComponentType();", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\tcase Binding.RAW_TYPE:", "+\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\tkeyType = type.actualType();", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tkeyType = nakedType;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\treturn cacheDerivedType(keyType, nakedType, annotatedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0b0ff00d01075a3693dd63bcbf10369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createMethodPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .(,)\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "+\tint lastToken = -1;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "-\t\t\t\tif (token.equals(\".\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (declaringType == null){\r", "-\t\t\t\t\t\tif (selector == null) return null;\r", "-\t\t\t\t\t\tdeclaringType = selector;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdeclaringType += token + selector;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tselector = null;\r", "-\t\t\t\t} else if (token.equals(\"(\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tparameterTypes = new String[5];\r", "-\t\t\t\t\tparameterCount = 0;\r", "-\t\t\t\t\tmode = InsideParameter;\r", "-\t\t\t\t} else if (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (!(\" \".equals(lastToken) || \".\".equals(lastToken))){ //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t\t\tmode = InsideReturnType;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // name\r", "-\t\t\t\t\tif (selector != null) return null;\r", "-\t\t\t\t\tselector = token;\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\t\tif (declaringType == null){\r", "+\t\t\t\t\t\t\tif (selector == null) return null;\r", "+\t\t\t\t\t\t\tdeclaringType = selector;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t\tdeclaringType += tokenSource + selector;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tselector = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLPAREN:\r", "+\t\t\t\t\t\tparameterTypes = new String[5];\r", "+\t\t\t\t\t\tparameterCount = 0;\r", "+\t\t\t\t\t\tmode = InsideParameter;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tif (!(Scanner.TokenNameWHITESPACE == lastToken \r", "+\t\t\t\t\t\t\t|| TerminalSymbols.TokenNameDOT == lastToken)){\r", "+\t\t\t\t\t\t\tmode = InsideReturnType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\t\tif (selector == null) {\r", "+\t\t\t\t\t\t\tselector = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tselector += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t} else if (token.equals(\",\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "-\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "-\t\t\t\t\tparameterType = null;\r", "-\t\t\t\t} else if (token.equals (\")\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tfoundClosingParenthesis = true;\r", "-\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameCOMMA:\r", "+\t\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tmode = InsideReturnType;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tif (parameterType == null){\r", "-\t\t\t\t\t\tparameterType = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\tparameterType += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t\tparameterType = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRPAREN:\r", "+\t\t\t\t\t\tfoundClosingParenthesis = true;\r", "+\t\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tmode = InsideReturnType;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (parameterType == null){\r", "+\t\t\t\t\t\t\tparameterType = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tparameterType += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (!token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (returnType == null){\r", "-\t\t\t\t\t\treturnType = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token)))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\treturnType += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (returnType == null){\r", "+\t\t\t\t\t\t\treturnType = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\treturnType += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "+\t\t\t\tbreak;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}], "num": 28295}
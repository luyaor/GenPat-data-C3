{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d28dc67445fb4f4f25c68bc3bf29caf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b1c514eef2ba33514421d766a1e7ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public void test0027() throws IOException", "signatureAfterChange": "\r public void test0027() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>@Marker String foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>String bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0027\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0027 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker String foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0027\", null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3bd5502eade351c6b318a2438ca943e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r public void test0030() throws IOException", "signatureAfterChange": "\r public void test0030() throws IOException", "diff": ["-\tString expectedUnitToString = \r", "-\t\t\"class A {\\n\" + \r", "-\t\t\"  A() {\\n\" + \r", "-\t\t\"    super();\\n\" + \r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator[] @NonEmpty [][] foo() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"  public <Integer, @Positive Integer, @Negative Integer, Integer>HashMap<String, @NonNull Object>.Iterator[] @NonEmpty [][] bar() {\\n\" + \r", "-\t\t\"    return null;\\n\" +\r", "-\t\t\"  }\\n\" + \r", "-\t\t\"}\\n\";\r", "-\tcheckParse(CHECK_ALL & ~CHECK_JAVAC_PARSER, source.toCharArray(), null, \"test0030\", expectedUnitToString);\r", "+\tString expectedError = \r", "+\t\t\t\"----------\\n\" +\r", "+\t\t\t\"1. ERROR in test0030 (at line 2)\\n\" +\r", "+\t\t\t\"\tpublic <Integer, @Positive Integer, @Negative Integer, Integer> @Marker HashMap<@Readonly String, Object>.Iterator[] @NonEmpty[][] foo() {\\n\" +\r", "+\t\t\t\"\t                                                                ^^^^^^^\\n\" +\r", "+\t\t\t\"Syntax error, type annotations are illegal here\\n\" +\r", "+\t\t\t\"----------\\n\";\r", "+\tcheckParse(CHECK_PARSER, source.toCharArray(), expectedError, \"test0030\", null);\r"]}], "num": 62446}
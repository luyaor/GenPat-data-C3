{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "394aeb4b811eb4e8624f3959d6cbb3d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c8ab828e6dac1cf8b39925aace4bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "63739b2368f2809d49b2ea10b6b3b2f6af96a94d", "commitAfterChange": "a08ab6c5a1a888fb837cc617f27fffac78616bdc", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "-\t\t\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\t\t\tsetInfixSourcePositions(infixExpression, infixExpression.getLeftOperand().getStartPosition());", "-\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\tsetInfixSourcePositions(infixExpression, startPosition);", "-\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\tsetInfixSourcePositions(infixExpression, startPosition);", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\tsetInfixSourcePositions(infixExpression, startPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b15049f537f5ad71dee8c6ff105f2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " \t \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int startingIndex, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "signatureAfterChange": " \t \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "diff": ["-\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int startingIndex, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "-\t\tint length = endingIndex - startingIndex + 1;", "-\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[startingIndex]));", "-\t\tfirstToken.index = startingIndex;", "-\t\tint start0 = (int)(positions[startingIndex]>>>32);", "+\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "+ \t\tint length = endingIndex + 1;", "+\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "+\t\tfirstToken.index = 1;", "+\t\tint start0 = (int)(positions[0]>>>32);", "-\t\tint end = (int) positions[startingIndex];", "+\t\tint end = (int) positions[0];", "-\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[startingIndex + 1]));", "-\t\tsecondToken.index = startingIndex + 1;", "-\t\tstart = (int)(positions[startingIndex + 1]>>>32);", "-\t\tend = (int) positions[startingIndex + 1];", "+\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "+\t\tsecondToken.index = 2;", "+\t\tstart = (int)(positions[1]>>>32);", "+\t\tend = (int) positions[1];", "-\t\tqualifiedName.index = startingIndex + 1;", "+\t\tqualifiedName.index = 2;", "-\t\t\tnewPart.index = startingIndex + i;", "+\t\t\tnewPart.index = i + 1;", "-\t\tQualifiedName name = qualifiedName;", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, node);", "-\t\t\trecordPendingNameScopeResolution(name);", "-\t\t}", "-\t\treturn name;", "+        if (newPart == null && this.resolveBindings) {", "+            recordNodes(qualifiedName, node);", "+            recordPendingNameScopeResolution(qualifiedName);", "+        }", "+\t\treturn qualifiedName;"]}], "num": 19139}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e359759c3fd9cafb10a5012dc4007a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "122ca67955e148dd91a73de62f760196", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected boolean pushParamName(boolean isTypeParam)", "signatureAfterChange": " \tprotected boolean pushParamName(boolean isTypeParam)", "diff": ["-\t\tSimpleName name = this.ast.newSimpleName(new String(this.identifierStack[0]));", "-\t\tint start = (int) (this.identifierPositionStack[0] >>> 32);", "-\t\tint end = (int) (this.identifierPositionStack[0] & 0x00000000FFFFFFFFL);", "-\t\tname.setSourceRange(start, end-start+1);", "+\t\tint idIndex = isTypeParam ? 1 : 0;", "+\t\tSimpleName name = this.ast.newSimpleName(new String(this.identifierStack[idIndex]));", "+\t\tint nameStart = (int) (this.identifierPositionStack[idIndex] >>> 32);", "+\t\tint nameEnd = (int) (this.identifierPositionStack[idIndex] & 0x00000000FFFFFFFFL);", "+\t\tname.setSourceRange(nameStart, nameEnd-nameStart+1);", "-\t\tparamTag.setSourceRange(this.tagSourceStart, end-this.tagSourceStart+1);", "-\t\tparamTag.fragments().add(name);", "+\t\tif (isTypeParam) { // specific storage for @param <E> (see bug 79809)", "+\t\t\t// '<' was stored in identifiers stack", "+\t\t\tTextElement text = this.ast.newTextElement();", "+\t\t\ttext.setText(new String(this.identifierStack[0]));", "+\t\t\tint txtStart = (int) (this.identifierPositionStack[0] >>> 32);", "+\t\t\tint txtEnd = (int) (this.identifierPositionStack[0] & 0x00000000FFFFFFFFL);", "+\t\t\ttext.setSourceRange(txtStart, txtEnd-txtStart+1);", "+\t\t\tparamTag.fragments().add(text);", "+\t\t\t// add simple name", "+\t\t\tparamTag.fragments().add(name);", "+\t\t\t// '>' was stored in identifiers stack", "+\t\t\ttext = this.ast.newTextElement();", "+\t\t\ttext.setText(new String(this.identifierStack[2]));", "+\t\t\ttxtStart = (int) (this.identifierPositionStack[2] >>> 32);", "+\t\t\ttxtEnd = (int) (this.identifierPositionStack[2] & 0x00000000FFFFFFFFL);", "+\t\t\ttext.setSourceRange(txtStart, txtEnd-txtStart+1);", "+\t\t\tparamTag.fragments().add(text);", "+\t\t\t// set param tag source range", "+\t\t\tparamTag.setSourceRange(this.tagSourceStart, txtEnd-this.tagSourceStart+1);", "+\t\t} else {", "+\t\t\tparamTag.setSourceRange(this.tagSourceStart, nameEnd-this.tagSourceStart+1);", "+\t\t\tparamTag.fragments().add(name);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b15049f537f5ad71dee8c6ff105f2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " \t \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int startingIndex, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "signatureAfterChange": " \t \tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node)", "diff": ["-\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int startingIndex, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "-\t\tint length = endingIndex - startingIndex + 1;", "-\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[startingIndex]));", "-\t\tfirstToken.index = startingIndex;", "-\t\tint start0 = (int)(positions[startingIndex]>>>32);", "+\tprotected QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, int endingIndex, org.eclipse.jdt.internal.compiler.ast.ASTNode node) {", "+ \t\tint length = endingIndex + 1;", "+\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));", "+\t\tfirstToken.index = 1;", "+\t\tint start0 = (int)(positions[0]>>>32);", "-\t\tint end = (int) positions[startingIndex];", "+\t\tint end = (int) positions[0];", "-\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[startingIndex + 1]));", "-\t\tsecondToken.index = startingIndex + 1;", "-\t\tstart = (int)(positions[startingIndex + 1]>>>32);", "-\t\tend = (int) positions[startingIndex + 1];", "+\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));", "+\t\tsecondToken.index = 2;", "+\t\tstart = (int)(positions[1]>>>32);", "+\t\tend = (int) positions[1];", "-\t\tqualifiedName.index = startingIndex + 1;", "+\t\tqualifiedName.index = 2;", "-\t\t\tnewPart.index = startingIndex + i;", "+\t\t\tnewPart.index = i + 1;", "-\t\tQualifiedName name = qualifiedName;", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, node);", "-\t\t\trecordPendingNameScopeResolution(name);", "-\t\t}", "-\t\treturn name;", "+        if (newPart == null && this.resolveBindings) {", "+            recordNodes(qualifiedName, node);", "+            recordPendingNameScopeResolution(qualifiedName);", "+        }", "+\t\treturn qualifiedName;"]}], "num": 22381}
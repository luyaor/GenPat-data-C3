{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4af88bcda5bead651571f7a814ad9fc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a71da9a39d3558bcf6d58e9f6a5d68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeleteElementsOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void processElement(IJavaElement element) throws JavaModelException", "signatureAfterChange": " \tprotected void processElement(IJavaElement element) throws JavaModelException", "diff": ["- */", "-protected void processElement(IJavaElement element) throws JavaModelException {", "-\tICompilationUnit cu = (ICompilationUnit) element;", "-", "-\t// keep track of the import statements - if all are removed, delete", "-\t// the import container (i.e. report it in the delta)", "-\tint numberOfImports = cu.getImports().length;", "-", "-\tIBuffer buffer = cu.getBuffer();", "-\tif (buffer == null) return;", "-\tJavaElementDelta delta = new JavaElementDelta(cu);", "-\tIJavaElement[] cuElements = ((IRegion) fChildrenToRemove.get(cu)).getElements();", "-\tfor (int i = 0, length = cuElements.length; i < length; i++) {", "-\t\tIJavaElement e = cuElements[i];", "-\t\tif (e.exists()) {", "-\t\t\tchar[] contents = buffer.getCharacters();", "-\t\t\tif (contents == null) continue;", "-\t\t\tIDOMCompilationUnit cuDOM = fFactory.createCompilationUnit(contents, cu.getElementName());", "-\t\t\tDOMNode node = (DOMNode)((JavaElement) e).findNode(cuDOM);", "-\t\t\t// TBD", "-\t\t\tAssert.isTrue(node != null, Util.bind(\"element.cannotLocate\", e.getElementName(), cuDOM.getName())); //$NON-NLS-1$", "-\t\t\tint startPosition = node.getStartPosition();", "-\t\t\tbuffer.replace(startPosition, node.getEndPosition() - startPosition + 1, CharOperation.NO_CHAR);", "-\t\t\tdelta.removed(e);", "-\t\t\tif (e.getElementType() == IJavaElement.IMPORT_DECLARATION) {", "-\t\t\t\tnumberOfImports--;", "-\t\t\t\tif (numberOfImports == 0) {", "-\t\t\t\t\tdelta.removed(cu.getImportContainer());", "+\t */", "+\tprotected void processElement(IJavaElement element) throws JavaModelException {", "+\t\tICompilationUnit cu = (ICompilationUnit) element;", "+\t", "+\t\t// keep track of the import statements - if all are removed, delete", "+\t\t// the import container (i.e. report it in the delta)", "+\t\tint numberOfImports = cu.getImports().length;", "+\t", "+\t\tIBuffer buffer = cu.getBuffer();", "+\t\tif (buffer == null) return;", "+\t\tJavaElementDelta delta = new JavaElementDelta(cu);", "+\t\tIJavaElement[] cuElements = ((IRegion) fChildrenToRemove.get(cu)).getElements();", "+\t\tfor (int i = 0, length = cuElements.length; i < length; i++) {", "+\t\t\tIJavaElement e = cuElements[i];", "+\t\t\tif (e.exists()) {", "+\t\t\t\tchar[] contents = buffer.getCharacters();", "+\t\t\t\tif (contents == null) continue;", "+\t\t\t\tIDOMCompilationUnit cuDOM = fFactory.createCompilationUnit(contents, cu.getElementName());", "+\t\t\t\tDOMNode node = (DOMNode)((JavaElement) e).findNode(cuDOM);", "+\t\t\t\t// TBD", "+\t\t\t\tAssert.isTrue(node != null, Util.bind(\"element.cannotLocate\", e.getElementName(), cuDOM.getName())); //$NON-NLS-1$", "+\t\t\t\tint startPosition = node.getStartPosition();", "+\t\t\t\tbuffer.replace(startPosition, node.getEndPosition() - startPosition + 1, CharOperation.NO_CHAR);", "+\t\t\t\tdelta.removed(e);", "+\t\t\t\tif (e.getElementType() == IJavaElement.IMPORT_DECLARATION) {", "+\t\t\t\t\tnumberOfImports--;", "+\t\t\t\t\tif (numberOfImports == 0) {", "+\t\t\t\t\t\tdelta.removed(cu.getImportContainer());", "+\t\t\t\t\t}", "-\t}", "-\tif (delta.getAffectedChildren().length > 0) {", "-\t\tcu.save(getSubProgressMonitor(1), fForce);", "-\t\tif (!cu.isWorkingCopy()) { // if unit is working copy, then save will have already fired the delta", "-\t\t\taddDelta(delta);", "-\t\t\tthis.hasModifiedResource = true;", "+\t\tif (delta.getAffectedChildren().length > 0) {", "+\t\t\tcu.save(getSubProgressMonitor(1), fForce);", "+\t\t\tif (!cu.isWorkingCopy()) { // if unit is working copy, then save will have already fired the delta", "+\t\t\t\taddDelta(delta);", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e07b9dd0cd4cc764ea7574f654dd38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void deleteResources(IResource[] resources, boolean force) throws JavaModelException", "signatureAfterChange": " \tprotected void deleteResources(IResource[] resources, boolean force) throws JavaModelException", "diff": ["- */", "-protected void deleteResources(IResource[] resources, boolean force) throws JavaModelException {", "-\tif (resources == null || resources.length == 0) return;", "-\tIProgressMonitor subProgressMonitor = getSubProgressMonitor(resources.length);", "-\tIWorkspace workspace = resources[0].getWorkspace();", "-\ttry {", "-\t\tworkspace.delete(", "-\t\t\tresources,", "-\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\tsubProgressMonitor);", "-\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-}", "+\t */", "+\tprotected void deleteResources(IResource[] resources, boolean force) throws JavaModelException {", "+\t\tif (resources == null || resources.length == 0) return;", "+\t\tIProgressMonitor subProgressMonitor = getSubProgressMonitor(resources.length);", "+\t\tIWorkspace workspace = resources[0].getWorkspace();", "+\t\ttry {", "+\t\t\tworkspace.delete(", "+\t\t\t\tresources,", "+\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\tsubProgressMonitor);", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "518ff3de26b16e3c32df119ac4e50068", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected void copyResources(IResource[] resources, IPath destinationPath) throws JavaModelException", "signatureAfterChange": " \tprotected void copyResources(IResource[] resources, IPath destinationPath) throws JavaModelException", "diff": ["- */", "-protected void copyResources(IResource[] resources, IPath destinationPath) throws JavaModelException {", "-\tIProgressMonitor subProgressMonitor = getSubProgressMonitor(resources.length);", "-\tIWorkspace workspace = resources[0].getWorkspace();", "-\ttry {", "-\t\tworkspace.copy(resources, destinationPath, false, subProgressMonitor);", "-\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-}", "+\t */", "+\tprotected void copyResources(IResource[] resources, IPath destinationPath) throws JavaModelException {", "+\t\tIProgressMonitor subProgressMonitor = getSubProgressMonitor(resources.length);", "+\t\tIWorkspace workspace = resources[0].getWorkspace();", "+\t\ttry {", "+\t\t\tworkspace.copy(resources, destinationPath, false, subProgressMonitor);", "+\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "600fbf5f0ec3c0073e3aef4293f19e1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void createFolder(IContainer parentFolder, String name, boolean force) throws JavaModelException", "signatureAfterChange": " \tprotected void createFolder(IContainer parentFolder, String name, boolean force) throws JavaModelException", "diff": ["- */", "-protected void createFolder(IContainer parentFolder, String name, boolean force) throws JavaModelException {", "-\tIFolder folder= parentFolder.getFolder(new Path(name));", "-\ttry {", "-\t\t// we should use true to create the file locally. Only VCM should use tru/false", "-\t\tfolder.create(", "-\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY,", "-\t\t\ttrue, // local", "-\t\t\tgetSubProgressMonitor(1));", "-\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-}", "+\t */", "+\tprotected void createFolder(IContainer parentFolder, String name, boolean force) throws JavaModelException {", "+\t\tIFolder folder= parentFolder.getFolder(new Path(name));", "+\t\ttry {", "+\t\t\t// we should use true to create the file locally. Only VCM should use tru/false", "+\t\t\tfolder.create(", "+\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY,", "+\t\t\t\ttrue, // local", "+\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a64b8eb7ecd8acbd8d75dd3ec759679", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void moveResources(IResource[] resources, IPath destinationPath) throws JavaModelException", "signatureAfterChange": " \tprotected void moveResources(IResource[] resources, IPath destinationPath) throws JavaModelException", "diff": ["- */", "-protected void moveResources(IResource[] resources, IPath destinationPath) throws JavaModelException {", "-\tIProgressMonitor subProgressMonitor = null;", "-\tif (fMonitor != null) {", "-\t\tsubProgressMonitor = new SubProgressMonitor(fMonitor, resources.length, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);", "-\t}", "-\tIWorkspace workspace = resources[0].getWorkspace();", "-\ttry {", "-\t\tworkspace.move(resources, destinationPath, false, subProgressMonitor);", "-\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-}", "+\t */", "+\tprotected void moveResources(IResource[] resources, IPath destinationPath) throws JavaModelException {", "+\t\tIProgressMonitor subProgressMonitor = null;", "+\t\tif (fMonitor != null) {", "+\t\t\tsubProgressMonitor = new SubProgressMonitor(fMonitor, resources.length, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);", "+\t\t}", "+\t\tIWorkspace workspace = resources[0].getWorkspace();", "+\t\ttry {", "+\t\t\tworkspace.move(resources, destinationPath, false, subProgressMonitor);", "+\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dec92124ef24a9fb931fc6369f421a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["- */", "-protected void executeOperation() throws JavaModelException {", "-\ttry {", "-\t\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$", "-\t\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();", "-\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();", "-\t", "-\t\t", "-\t\t// creates the delta builder (this remembers the content of the cu)\t", "-\t\tif (!original.isOpen()) {", "-\t\t\t// force opening so that the delta builder can get the old info", "-\t\t\toriginal.open(null);", "-\t\t}", "-\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);", "-\t", "-\t\t// save the cu", "-\t\tIBuffer originalBuffer = original.getBuffer();", "-\t\tif (originalBuffer == null) return;", "-\t\tchar[] originalContents = originalBuffer.getCharacters();", "-\t\tboolean hasSaved = false;", "-\t\ttry {", "-\t\t\tIBuffer copyBuffer = copy.getBuffer();", "-\t\t\tif (copyBuffer == null) return;", "-\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());", "-\t\t\toriginal.save(fMonitor, fForce);", "-\t\t\tthis.hasModifiedResource = true;", "-\t\t\thasSaved = true;", "-\t\t} finally {", "-\t\t\tif (!hasSaved){", "-\t\t\t\t// restore original buffer contents since something went wrong", "-\t\t\t\toriginalBuffer.setContents(originalContents);", "-\t\t// make sure working copy is in sync", "-\t\tcopy.updateTimeStamp((CompilationUnit)original);", "-\t\tcopy.makeConsistent(this);", "-\t\tworked(1);", "-\t", "-\t\t// build the deltas", "-\t\tdeltaBuilder.buildDeltas();", "-\t", "-\t\t// add the deltas to the list of deltas created during this operation", "-\t\tif (deltaBuilder.delta != null) {", "-\t\t\taddDelta(deltaBuilder.delta);", "+\t */", "+\tprotected void executeOperation() throws JavaModelException {", "+\t\ttry {", "+\t\t\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$", "+\t\t\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();", "+\t\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();", "+\t\t", "+\t\t\t", "+\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "+\t\t\tif (!original.isOpen()) {", "+\t\t\t\t// force opening so that the delta builder can get the old info", "+\t\t\t\toriginal.open(null);", "+\t\t\t}", "+\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);", "+\t\t", "+\t\t\t// save the cu", "+\t\t\tIBuffer originalBuffer = original.getBuffer();", "+\t\t\tif (originalBuffer == null) return;", "+\t\t\tchar[] originalContents = originalBuffer.getCharacters();", "+\t\t\tboolean hasSaved = false;", "+\t\t\ttry {", "+\t\t\t\tIBuffer copyBuffer = copy.getBuffer();", "+\t\t\t\tif (copyBuffer == null) return;", "+\t\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());", "+\t\t\t\toriginal.save(fMonitor, fForce);", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t\t\thasSaved = true;", "+\t\t\t} finally {", "+\t\t\t\tif (!hasSaved){", "+\t\t\t\t\t// restore original buffer contents since something went wrong", "+\t\t\t\t\toriginalBuffer.setContents(originalContents);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// make sure working copy is in sync", "+\t\t\tcopy.updateTimeStamp((CompilationUnit)original);", "+\t\t\tcopy.makeConsistent(this);", "+\t\t\tworked(1);", "+\t\t", "+\t\t\t// build the deltas", "+\t\t\tdeltaBuilder.buildDeltas();", "+\t\t", "+\t\t\t// add the deltas to the list of deltas created during this operation", "+\t\t\tif (deltaBuilder.delta != null) {", "+\t\t\t\taddDelta(deltaBuilder.delta);", "+\t\t\t}", "+\t\t\tworked(1);", "+\t\t} finally {\t", "+\t\t\tdone();", "-\t\tworked(1);", "-\t} finally {\t", "-\t\tdone();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2da6c7272185c0dc85627430ecafd2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void deleteResource(IResource resource,int flags) throws JavaModelException", "signatureAfterChange": " \tprotected void deleteResource(IResource resource,int flags) throws JavaModelException", "diff": ["- */", "-protected void deleteResource(IResource resource,int flags) throws JavaModelException {", "-\ttry {", "-\t\tresource.delete(flags, getSubProgressMonitor(1));", "-\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-}", "+\t */", "+\tprotected void deleteResource(IResource resource,int flags) throws JavaModelException {", "+\t\ttry {", "+\t\t\tresource.delete(flags, getSubProgressMonitor(1));", "+\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b0e7b4027e4ad8bf42b8afc288d00b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected void createFile(IContainer folder, String name, InputStream contents, boolean force) throws JavaModelException", "signatureAfterChange": " \tprotected void createFile(IContainer folder, String name, InputStream contents, boolean force) throws JavaModelException", "diff": ["- */", "-protected void createFile(IContainer folder, String name, InputStream contents, boolean force) throws JavaModelException {", "-\tIFile file= folder.getFile(new Path(name));", "-\ttry {", "-\t\tfile.create(", "-\t\t\tcontents, ", "-\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\tgetSubProgressMonitor(1));", "-\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-}", "+\t */", "+\tprotected void createFile(IContainer folder, String name, InputStream contents, boolean force) throws JavaModelException {", "+\t\tIFile file= folder.getFile(new Path(name));", "+\t\ttry {", "+\t\t\tfile.create(", "+\t\t\t\tcontents, ", "+\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5fe2891771685e041808944a561bb54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void deleteEmptyPackageFragment( \tIPackageFragment fragment, \tboolean force) \tthrows JavaModelException", "signatureAfterChange": " \tprotected void deleteEmptyPackageFragment( \t\tIPackageFragment fragment, \t\tboolean force) \t\tthrows JavaModelException", "diff": ["- */", "-protected void deleteEmptyPackageFragment(", "-\tIPackageFragment fragment,", "-\tboolean force)", "-\tthrows JavaModelException {", "-", "-\tIContainer resource = (IContainer) fragment.getResource();", "-\tIResource rootResource = fragment.getParent().getResource();", "-", "-\ttry {", "-\t\tresource.delete(", "-\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\tgetSubProgressMonitor(1));", "-\t\twhile (resource instanceof IFolder) {", "-\t\t\t// deleting a package: delete the parent if it is empty (eg. deleting x.y where folder x doesn't have resources but y)", "-\t\t\t// without deleting the package fragment root", "-\t\t\tresource = resource.getParent();", "-\t\t\tif (!resource.equals(rootResource) && resource.members().length == 0) {", "-\t\t\t\tresource.delete(", "-\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\t\t\tgetSubProgressMonitor(1));", "-\t\t\t\tthis.hasModifiedResource = true;", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-}", "+\t */", "+\tprotected void deleteEmptyPackageFragment(", "+\t\tIPackageFragment fragment,", "+\t\tboolean force)", "+\t\tthrows JavaModelException {", "+\t", "+\t\tIContainer resource = (IContainer) fragment.getResource();", "+\t\tIResource rootResource = fragment.getParent().getResource();", "+\t", "+\t\ttry {", "+\t\t\tresource.delete(", "+\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\twhile (resource instanceof IFolder) {", "+\t\t\t\t// deleting a package: delete the parent if it is empty (eg. deleting x.y where folder x doesn't have resources but y)", "+\t\t\t\t// without deleting the package fragment root", "+\t\t\t\tresource = resource.getParent();", "+\t\t\t\tif (!resource.equals(rootResource) && resource.members().length == 0) {", "+\t\t\t\t\tresource.delete(", "+\t\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);"]}], "num": 12312}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2b6447103a3b93e942e6506215dc0b2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38fcf29fe4baac946205c99477be3adf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tint[] sortedIndexes = new int[caseCount];", "-\t\t\tint[] localKeysCopy;", "-\t\t\tbreakLabel.initialize(codeStream);", "-\t\t\tCaseLabel[] caseLabels = new CaseLabel[caseCount];", "-\t\t\tint[] constants = new int[caseCount];", "-\t\t\tboolean needSwitch = caseCount != 0;", "+\t\t\tthis.breakLabel.initialize(codeStream);", "+\t\t\tCaseLabel[] caseLabels = new CaseLabel[this.caseCount];", "+\t\t\tboolean needSwitch = this.caseCount != 0;", "-\t\t\t\tconstants[i] = cases[i].constantExpression.constant.intValue();", "-\t", "-\t\t\t// we sort the keys to be able to generate the code for tableswitch or lookupswitch", "-\t\t\tfor (int i = 0; i < caseCount; i++) {", "-\t\t\t\tsortedIndexes[i] = i;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tconstants,", "-\t\t\t\t0,", "-\t\t\t\t(localKeysCopy = new int[caseCount]),", "-\t\t\t\t0,", "-\t\t\t\tcaseCount);", "-\t\t\tCodeStream.sort(localKeysCopy, 0, caseCount - 1, sortedIndexes);", "-\t", "-\t\t\t\tint max = localKeysCopy[caseCount - 1];", "+\t\t\t\tint[] sortedIndexes = new int[this.caseCount];", "+\t\t\t\t// we sort the keys to be able to generate the code for tableswitch or lookupswitch", "+\t\t\t\tfor (int i = 0; i < caseCount; i++) {", "+\t\t\t\t\tsortedIndexes[i] = i;", "+\t\t\t\t}", "+\t\t\t\tint[] localKeysCopy;", "+\t\t\t\tSystem.arraycopy(this.constants, 0, (localKeysCopy = new int[this.caseCount]), 0, this.caseCount);", "+\t\t\t\tCodeStream.sort(localKeysCopy, 0, this.caseCount - 1, sortedIndexes);", "+", "+\t\t\t\t// for enum constants, actually switch on constant ordinal()", "+\t\t\t\tif (this.expression.resolvedType.isEnum()) {", "+\t\t\t\t\tcodeStream.invokeEnumOrdinal(this.expression.resolvedType.constantPoolName());", "+\t\t\t\t}", "+\t\t\t\tint max = localKeysCopy[this.caseCount - 1];", "-\t\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, constants, sortedIndexes, caseLabels);", "+\t\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, this.constants, sortedIndexes, caseLabels);", "-\t\t\t\t\t\t\tconstants,", "+\t\t\t\t\t\t\tthis.constants,", "-\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, constants, sortedIndexes, caseLabels);", "+\t\t\t\t\tcodeStream.lookupswitch(defaultLabel, this.constants, sortedIndexes, caseLabels);", "-\t\t\tif (statements != null) {", "-\t\t\t\tfor (int i = 0, maxCases = statements.length; i < maxCases; i++) {", "-\t\t\t\t\tStatement statement = statements[i];", "-\t\t\t\t\tif ((caseIndex < caseCount) && (statement == cases[caseIndex])) { // statements[i] is a case", "-\t\t\t\t\t\tthis.scope.switchCase = cases[caseIndex]; // record entering in a switch case block", "+\t\t\tif (this.statements != null) {", "+\t\t\t\tfor (int i = 0, maxCases = this.statements.length; i < maxCases; i++) {", "+\t\t\t\t\tStatement statement = this.statements[i];", "+\t\t\t\t\tif ((caseIndex < this.caseCount) && (statement == this.cases[caseIndex])) { // statements[i] is a case", "+\t\t\t\t\t\tthis.scope.switchCase = this.cases[caseIndex]; // record entering in a switch case block", "-\t\t\t\t\t\tif (statement == defaultCase) { // statements[i] is a case or a default case", "-\t\t\t\t\t\t\tthis.scope.switchCase = defaultCase; // record entering in a switch case block", "+\t\t\t\t\t\tif (statement == this.defaultCase) { // statements[i] is a case or a default case", "+\t\t\t\t\t\t\tthis.scope.switchCase = this.defaultCase; // record entering in a switch case block", "-\t\t\tbreakLabel.place();", "+\t\t\tthis.breakLabel.place();", "-\t\t\t\tcodeStream.exitUserScope(scope);", "+\t\t\t\tcodeStream.exitUserScope(this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "422b957e5b6a98f2b551f7e15bc8df8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tboolean isStringSwitch = false;", "+\t\t\t\t\t} else if (upperScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_7 && expressionType.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\t\tisStringSwitch = true;", "+\t\t\t\t\t\tbreak checkType;", "-\t\t\t\tthis.constants = new int[length];", "-\t\t\t\tCaseStatement[] duplicateCaseStatements = null;", "-\t\t\t\tint duplicateCaseStatementsCounter = 0;", "+\t\t\t\tif (!isStringSwitch) {", "+\t\t\t\t\tthis.constants = new int[length];", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.stringConstants = new String[length];", "+\t\t\t\t}", "-\t\t\t\t\t\tint key = constant.intValue();", "-\t\t\t\t\t\t//----check for duplicate case statement------------", "-\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "-\t\t\t\t\t\t\tif (this.constants[j] == key) {", "-\t\t\t\t\t\t\t\tfinal CaseStatement currentCaseStatement = (CaseStatement) statement;", "-\t\t\t\t\t\t\t\tif (duplicateCaseStatements == null) {", "-\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateCase(this.cases[j]);", "-\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateCase(currentCaseStatement);", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements = new CaseStatement[length];", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = this.cases[j];", "-\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tboolean found = false;", "-\t\t\t\t\t\t\t\t\tsearchReportedDuplicate: for (int k = 2; k < duplicateCaseStatementsCounter; k++) {", "-\t\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements[k] == statement) {", "-\t\t\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\t\t\t\tbreak searchReportedDuplicate;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateCase(currentCaseStatement);", "-\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!isStringSwitch) {", "+\t\t\t\t\t\t\tint key = constant.intValue();", "+\t\t\t\t\t\t\t//----check for duplicate case statement------------", "+\t\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "+\t\t\t\t\t\t\t\tif (this.constants[j] == key) {", "+\t\t\t\t\t\t\t\t\treportDuplicateCase((CaseStatement) statement, this.cases[j], length);", "+\t\t\t\t\t\t\tthis.constants[counter++] = key;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tString key = constant.stringValue();", "+\t\t\t\t\t\t\t//----check for duplicate case statement------------", "+\t\t\t\t\t\t\tfor (int j = 0; j < counter; j++) {", "+\t\t\t\t\t\t\t\tif (this.stringConstants[j].equals(key)) {", "+\t\t\t\t\t\t\t\t\treportDuplicateCase((CaseStatement) statement, this.cases[j], length);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.stringConstants[counter++] = key;\t\t\t", "-\t\t\t\t\t\tthis.constants[counter++] = key;", "-\t\t\t\t\tSystem.arraycopy(this.constants, 0, this.constants = new int[counter], 0, counter);", "+\t\t\t\t\tif (!isStringSwitch) {", "+\t\t\t\t\t\tSystem.arraycopy(this.constants, 0, this.constants = new int[counter], 0, counter);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSystem.arraycopy(this.stringConstants, 0, this.stringConstants = new String[counter], 0, counter);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (isStringSwitch) {", "+\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "+\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "+\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "+\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;"]}], "num": 45515}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb06681a7f5e421ec03f9f8ba4d42499", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17cc8a3da26aaedc62d5a0b807439b38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5d2e6e466ee272d62f273fff98dd2423f77bd2f3", "commitAfterChange": "e702e6a53e23b4f475e9578e987e56b628fcf8d7", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void handleWarningToken(String token, boolean isEnabling, boolean useEnableJavadoc) throws InvalidInputException", "signatureAfterChange": " protected void handleWarningToken(String token, boolean isEnabling, boolean useEnableJavadoc) throws InvalidInputException", "diff": ["-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportNullReference,", "-\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "+\t\tif (isEnabling) {", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportNullReference,", "+\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportPotentialNullReference,", "+\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportRedundantNullCheck,", "+\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t} else {", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportNullReference,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportPotentialNullReference,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportRedundantNullCheck,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t}", "+\t} else if (token.equals(\"nullDereference\")) { //$NON-NLS-1$", "+\t\tif (isEnabling) {", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportNullReference,", "+\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t} else {", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportNullReference,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportPotentialNullReference,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t\tthis.options.put(CompilerOptions.OPTION_ReportRedundantNullCheck,", "+\t\t\t\t\tCompilerOptions.IGNORE);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22df468f1a88729eda1815c682d15c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void triggerRecoveryUponLambdaClosure()", "signatureAfterChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "diff": ["-}", "-protected void triggerRecoveryUponLambdaClosure() {", "-\tif (this.assistNode == null || !this.lambdaNeedsClosure)", "-\t\treturn;", "-\tASTNode node = this.astStack[this.astPtr];", "-\tif (this.assistNode.sourceStart >= node.sourceStart && this.assistNode.sourceEnd <= node.sourceEnd) {", "-\t\tfor (int i = 0; i <= this.astPtr; i++) {", "-\t\t\tif (this.astStack[i] instanceof LambdaExpression)", "-\t\t\t\treturn;", "-\t\t}", "-\t\tthis.restartRecovery = true;", "-\t\tthis.isOrphanCompletionNode = false;", "-\t\tthis.lambdaNeedsClosure = false;", "-\t}", "-}", "+protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit) {", "+\t// Last block statement reduced is required to be on the AST stack top.", "+\tboolean lambdaClosed = false;", "+\tint statementStart, statementEnd;", "+\tstatementStart = statement.sourceStart;", "+\tstatementEnd = statement instanceof AbstractVariableDeclaration ? ((AbstractVariableDeclaration)statement).declarationSourceEnd : statement.sourceEnd;", "+\tfor (int i = this.elementPtr; i >= 0; --i) {", "+\t\tif (this.elementKindStack[i] != K_LAMBDA_EXPRESSION_DELIMITER)", "+\t\t\tcontinue;", "+\t\tLambdaExpression expression = (LambdaExpression) this.elementObjectInfoStack[i];", "+\t\tif (expression.sourceStart >= statementStart && expression.sourceEnd <= statementEnd) {", "+\t\t\tthis.elementPtr = i - 1;", "+\t\t\tlambdaClosed = true;", "+\t\t} else {", "+\t\t\tif (shouldCommit) {", "+\t\t\t\tint stackLength = this.stack.length;", "+\t\t\t\tif (++this.stateStackTop >= stackLength) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.stack, 0,", "+\t\t\t\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\t\t\t\tstackLength);", "+\t\t\t\t}", "+\t\t\t\tthis.stack[this.stateStackTop] = this.unstackedAct;", "+\t\t\t\tcommit();", "+\t\t\t\tthis.stateStackTop --;", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "+\t}", "+\t", "+\tif (lambdaClosed && this.currentElement != null) {", "+\t\tthis.restartRecovery = true;", "+\t\tif (!(statement instanceof AbstractVariableDeclaration)) // added already as part of standard recovery since these contribute a name to the scope prevailing at the cursor.", "+\t\t\tthis.currentElement.add(statement, 0);", "+\t}", "+\tthis.snapShot = null;", "+\treturn lambdaClosed;", "+}"]}], "num": 25146}
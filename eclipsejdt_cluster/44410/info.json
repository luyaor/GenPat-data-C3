{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5088cb95d7ab919ecf962d1c9b072328", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f0033d266d5e8a7c3ec960ef2b845e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "ca6b9d0c30532dfcf3c83a4cab5bd96f7d5deacc", "commitAfterChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \tprivate boolean setUpperBounds(CaptureBinding18 typeVariable, TypeBinding[] substitutedUpperBounds)", "signatureAfterChange": " \t \tprivate boolean setUpperBounds(CaptureBinding18 typeVariable, TypeBinding[] substitutedUpperBounds)", "diff": ["-\t\t\tArrays.sort(glbs, new Comparator() {", "-\t\t\t\tpublic int compare(Object o1, Object o2) {", "-\t\t\t\t\tint i1 = ((TypeBinding)o1).id, i2 = ((TypeBinding)o2).id; ", "-\t\t\t\t\treturn (i1>i2 ? -1 : (i1==i2 ? 0 : 1));", "-\t\t\t\t}", "-\t\t\t});", "+\t\t\tsortTypes(glbs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb224abb667b251c7731bcec9d5d22d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "523f72b860e1c5f7334e13e5c75a18826c7ae1a0", "commitAfterChange": "d5627341503c684b35efd505dd3662e10e508037", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "signatureAfterChange": " public void evaluateVariables(INameEnvironment environment, Map options, IRequestor requestor, IProblemFactory problemFactory) throws InstallException", "diff": ["+\t\t\t// Sort classes so that enclosing types are cached before nested types", "+\t\t\t// otherwise an AbortCompilation is thrown in 1.5 mode since the enclosing type", "+\t\t\t// is needed to resolve a nested type", "+\t\t\tUtil.sort(classes, new Util.Comparer() {", "+\t\t\t\tpublic int compare(Object a, Object b) {", "+\t\t\t\t\tif (a == b) return 0;", "+\t\t\t\t\tClassFile enclosing = ((ClassFile) a).enclosingClassFile;", "+\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\tif (enclosing == b)", "+\t\t\t\t\t\t\treturn 1;", "+\t\t\t\t\t\tenclosing = enclosing.enclosingClassFile;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn -1;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t"]}], "num": 44410}
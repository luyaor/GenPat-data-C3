{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3f88cfba2959c016f732c9614b02e31", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29239991822ea8c6fa1cbc5172eb8f7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void bindArguments()", "signatureAfterChange": " \tpublic void bindArguments()", "diff": ["-\t\tif (arguments != null) {", "+\t\tif (this.arguments != null) {", "-\t\t\tboolean used = binding == null || binding.isAbstract() || binding.isNative();", "+\t\t\tboolean used = this.binding == null || this.binding.isAbstract() || this.binding.isNative();", "-\t\t\tint length = arguments.length;", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\tTypeBinding argType = binding == null ? null : binding.parameters[i];", "-\t\t\t\targuments[i].bind(scope, argType, used);", "+\t\t\t\tTypeBinding argType = this.binding == null ? null : this.binding.parameters[i];", "+\t\t\t\tthis.arguments[i].bind(this.scope, argType, used);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "401e1b47f250f7662ec80e86ad252778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ListRewriteEvent.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate List getEntries()", "signatureAfterChange": " \t \tprivate List getEntries()", "diff": ["-\t\tif (fListEntries == null) {", "+\t\tif (this.listEntries == null) {", "-\t\t\tint nNodes= fOriginalNodes.size();", "-\t\t\tfListEntries= new ArrayList(nNodes * 2);", "+\t\t\tint nNodes= this.originalNodes.size();", "+\t\t\tthis.listEntries= new ArrayList(nNodes * 2);", "-\t\t\t\tASTNode node= (ASTNode) fOriginalNodes.get(i);", "+\t\t\t\tASTNode node= (ASTNode) this.originalNodes.get(i);", "-\t\t\t\tfListEntries.add(new NodeRewriteEvent(node, node));", "+\t\t\t\tthis.listEntries.add(new NodeRewriteEvent(node, node));", "-\t\treturn fListEntries;", "+\t\treturn this.listEntries;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66df1e6a7f0bacfd7901f4c9091d8e9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean isPackage(String qualifiedPackageName)", "signatureAfterChange": " public boolean isPackage(String qualifiedPackageName)", "diff": ["-\tif (packageCache != null)", "-\t\treturn packageCache.containsKey(qualifiedPackageName);", "+\tif (this.packageCache != null)", "+\t\treturn this.packageCache.containsKey(qualifiedPackageName);", "-\tpackageCache.put(\"\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\tthis.packageCache.put(\"\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\tnextEntry : for (Enumeration e = zipFile.entries(); e.hasMoreElements(); ) {", "+\tnextEntry : for (Enumeration e = this.zipFile.entries(); e.hasMoreElements(); ) {", "-\t\t\tif (packageCache.containsKey(packageName))", "+\t\t\tif (this.packageCache.containsKey(packageName))", "-\t\t\tpackageCache.put(packageName, packageName);", "+\t\t\tthis.packageCache.put(packageName, packageName);", "-\treturn packageCache.containsKey(qualifiedPackageName);", "+\treturn this.packageCache.containsKey(qualifiedPackageName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ffca66f4ebb098422e1680f4d48a6e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "5a3a5f398a8971568181868be2d5d76728016763", "commitAfterChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits, IProgressMonitor monitor)", "signatureAfterChange": "  public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tbinaryBindings[i] = lookupEnvironment.cacheBinaryType(binaryType, false);", "+\t\t\t\t\tbinaryBindings[i] = this.lookupEnvironment.cacheBinaryType(binaryType, false);", "-\t\t\t\t\t\tlookupEnvironment.problemReporter, ", "+\t\t\t\t\t\tthis.lookupEnvironment.problemReporter, ", "-\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(units[i]);", "+\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(units[i]);", "-\t\tParser parser = new Parser(lookupEnvironment.problemReporter, true);", "+\t\tParser parser = new Parser(this.lookupEnvironment.problemReporter, true);", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);", "+\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "-\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, false);", "+\t\t\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, false);", "-\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, false);", "+\t\t\t\tthis.lookupEnvironment.completeTypeBindings(parsedUnit, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb5b01b6235c73b6597671b21f04697a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tboolean nonStatic = !binding.isStatic();", "-\tflowInfo = receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();", "+\tboolean nonStatic = !this.binding.isStatic();", "+\tflowInfo = this.receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();", "-\t\treceiver.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tthis.receiver.checkNPE(currentScope, flowContext, flowInfo);", "-\tif (arguments != null) {", "-\t\tint length = arguments.length;", "+\tif (this.arguments != null) {", "+\t\tint length = this.arguments.length;", "-\t\t\tflowInfo = arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tflowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\tif ((thrownExceptions = binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {", "+\tif ((thrownExceptions = this.binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc83eafdd6d56482c381e7acbf4e2387", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " private FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["-\tif (fPackage.environment.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\t\tscope.problemReporter().missingDeprecatedAnnotationForField(field.sourceField());", "+\t\t\tthis.scope.problemReporter().missingDeprecatedAnnotationForField(field.sourceField());", "-\t\t\t\t? scope.referenceContext.staticInitializerScope ", "-\t\t\t\t: scope.referenceContext.initializerScope;", "+\t\t\t\t? this.scope.referenceContext.staticInitializerScope ", "+\t\t\t\t: this.scope.referenceContext.initializerScope;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2e36e2cbadd2911aa4e14adef870628", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0490e8b1eeb14a2cc033060047b6bcfdf849f8a0", "commitAfterChange": "68c4f604f354a3213e3cb188ddbd758a47497f3f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\t\t\tVariables.put(varName, varPath); ", "-\t\t\t\tPreviousSessionVariables.put(varName, varPath);", "+\t\t\t\tthis.variables.put(varName, varPath); ", "+\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "-\t\t\tVariables.put(varName, null); // reset variable, but leave its entry in the Map, so it will be part of variable names.", "+\t\t\tthis.variables.put(varName, null); // reset variable, but leave its entry in the Map, so it will be part of variable names.", "-\t\t\tIterator projectIterator = Containers.keySet().iterator();", "+\t\t\tIterator projectIterator = this.containers.keySet().iterator();", "-\t\t\t\tMap projectContainers = (Map)Containers.get(project);", "+\t\t\t\tMap projectContainers = (Map)this.containers.get(project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2202f29f45d34cd291eaa614f241d7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "bbbc03c8974b50736f7c2247e05857599972fd62", "commitAfterChange": "3dbb4c838e7dddd8ff99712109431d1f442c8931", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\twhile ((awaitingJobsCount = awaitingJobsCount()) > 0) {", "+\t\t\t\t\twhile (!monitor.isCanceled() && (awaitingJobsCount = awaitingJobsCount()) > 0) {", "-\t\t\tProgressJob progressJob = null;", "+\t\t\tthis.progressJob = null;", "-\t\t\t\t\t\t\tif (progressJob != null) progressJob = null;", "+\t\t\t\t\t\t\tif (this.progressJob != null) {", "+\t\t\t\t\t\t\t\tthis.progressJob.cancel();", "+\t\t\t\t\t\t\t\tthis.progressJob = null;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (progressJob == null) {", "-\t\t\t\t\t\t\tprogressJob = new ProgressJob(Messages.manager_indexingInProgress); ", "-\t\t\t\t\t\t\tprogressJob.setPriority(Job.LONG);", "-\t\t\t\t\t\t\tprogressJob.setSystem(true);", "-\t\t\t\t\t\t\tprogressJob.schedule();", "+\t\t\t\t\t\tif (this.progressJob == null) {", "+\t\t\t\t\t\t\tthis.progressJob = new ProgressJob(Messages.manager_indexingInProgress); ", "+\t\t\t\t\t\t\tthis.progressJob.setPriority(Job.LONG);", "+\t\t\t\t\t\t\tthis.progressJob.setSystem(true);", "+\t\t\t\t\t\t\tthis.progressJob.schedule();"]}], "num": 72983}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "450e10ffe634086c311b35b4c9ec2724", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d7cf6fca4c9c7a099579f2fa824282", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private static SearchPattern createMethodOrConstructorPattern(String patternString, int limitTo, int matchRule, boolean isConstructor)", "signatureAfterChange": " private static SearchPattern createMethodOrConstructorPattern(String patternString, int limitTo, int matchRule, boolean isConstructor)", "diff": ["-\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);", "-\t\t\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;", "+\t\t\t\t\t\t\tif (parameterTypes != null) {", "+\t\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount)", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);", "+\t\t\t\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (parameterType != null){", "+\t\t\t\t\t\t\tif (parameterType != null && parameterTypes != null) {", "-\t\t\tdeclaringTypeQualification = null;", "-\t\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(parameterTypes[i], false);", "-\t\t\t\tif (parameterTypeSignatures[i].indexOf(Signature.C_GENERIC_START) < 0) {", "-\t\t\t\t\tparameterTypePart = parameterTypes[i].toCharArray();", "-\t\t\t\t} else {", "-\t\t\t\t\tparameterTypePart = Signature.toCharArray(Signature.getTypeErasure(parameterTypeSignatures[i].toCharArray()));", "+\t\t\t\tif (parameterTypes != null) {", "+\t\t\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(parameterTypes[i], false);", "+\t\t\t\t\tif (parameterTypeSignatures[i].indexOf(Signature.C_GENERIC_START) < 0) {", "+\t\t\t\t\t\tparameterTypePart = parameterTypes[i].toCharArray();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tparameterTypePart = Signature.toCharArray(Signature.getTypeErasure(parameterTypeSignatures[i].toCharArray()));", "+\t\t\t\t\t}", "-\t\t\tint lastDotPosition = CharOperation.lastIndexOf('.', parameterTypePart);", "-\t\t\tif (lastDotPosition >= 0) {", "+\t\t\tint lastDotPosition = parameterTypePart==null ? -1 : CharOperation.lastIndexOf('.', parameterTypePart);", "+\t\t\tif (parameterTypePart != null && lastDotPosition >= 0) {", "-\t\t\treturnTypeQualification = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1734c7c72adfbecbf8705efb9f7d5d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule, char indexSuffix)", "signatureAfterChange": " private static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule, char indexSuffix)", "diff": ["-\t// extract declaring type infos", "-\tif (type != null) {", "-\t\t// get type part and signature", "-\t\tchar[] typePart = null;", "-\t\ttry {", "-\t\t\ttypeSignature = Signature.createTypeSignature(type, false);", "-\t\t\tif (typeSignature.indexOf(Signature.C_GENERIC_START) < 0) {", "-\t\t\t\ttypePart = type.toCharArray();", "-\t\t\t} else {", "-\t\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature.toCharArray()));", "-\t\t\t}", "-\t\t}", "-\t\tcatch (IllegalArgumentException iae) {", "-\t\t\t// string is not a valid type syntax", "-\t\t\treturn null;", "-\t\t}", "-\t\t// get qualification name", "-\t\tint lastDotPosition = CharOperation.lastIndexOf('.', typePart);", "-\t\tif (lastDotPosition >= 0) {", "-\t\t\tqualificationChars = CharOperation.subarray(typePart, 0, lastDotPosition);", "-\t\t\tif (qualificationChars.length == 1 && qualificationChars[0] == '*')", "-\t\t\t\tqualificationChars = null;", "-\t\t\ttypeChars = CharOperation.subarray(typePart, lastDotPosition+1, typePart.length);", "+\t// get type part and signature", "+\tchar[] typePart = null;", "+\ttry {", "+\t\ttypeSignature = Signature.createTypeSignature(type, false);", "+\t\tif (typeSignature.indexOf(Signature.C_GENERIC_START) < 0) {", "+\t\t\ttypePart = type.toCharArray();", "-\t\t\tqualificationChars = null;", "-\t\t\ttypeChars = typePart;", "+\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature.toCharArray()));", "-\t\tif (typeChars.length == 1 && typeChars[0] == '*')", "-\t\t\ttypeChars = null;", "+\t}", "+\tcatch (IllegalArgumentException iae) {", "+\t\t// string is not a valid type syntax", "+\t\treturn null;", "+\t}", "+", "+\t// get qualification name", "+\tint lastDotPosition = CharOperation.lastIndexOf('.', typePart);", "+\tif (lastDotPosition >= 0) {", "+\t\tqualificationChars = CharOperation.subarray(typePart, 0, lastDotPosition);", "+\t\tif (qualificationChars.length == 1 && qualificationChars[0] == '*')", "+\t\t\tqualificationChars = null;", "+\t\ttypeChars = CharOperation.subarray(typePart, lastDotPosition+1, typePart.length);", "+\t} else {", "+\t\ttypeChars = typePart;", "+\t}", "+\tif (typeChars.length == 1 && typeChars[0] == '*') {", "+\t\ttypeChars = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec3170c94866b72d5ac0587830ed206b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "3e3563fc2739979022c8ed5ef771769e6ddb9cf7", "commitAfterChange": "ac01f488e9b6b2b17a11c53e0a49f85c3d9e7aeb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void reportDeclaration(MethodBinding methodBinding, MatchLocator locator, SimpleSet knownMethods) throws CoreException", "signatureAfterChange": " protected void reportDeclaration(MethodBinding methodBinding, MatchLocator locator, SimpleSet knownMethods) throws CoreException", "diff": ["+\tboolean isBinary = type.isBinary();", "+\tIMethod method = null;", "-\tString[] parameterTypes = new String[parameterLength];", "-\tfor (int i = 0; i  < parameterLength; i++) {", "-\t\tchar[] typeName = parameters[i].shortReadableName();", "-\t\tif (parameters[i].isMemberType()) {", "-\t\t\ttypeName = CharOperation.subarray(typeName, CharOperation.indexOf('.', typeName)+1, typeName.length);", "+\tif (isBinary) {", "+\t\tchar[][] parameterTypes = new char[parameterLength][];", "+\t\tfor (int i = 0; i<parameterLength; i++) {", "+\t\t\tchar[] typeName = parameters[i].qualifiedSourceName();", "+\t\t\tfor (int j=0, dim=parameters[i].dimensions(); j<dim; j++) {", "+\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t}", "+\t\t\tparameterTypes[i] = typeName;", "-\t\tparameterTypes[i] = Signature.createTypeSignature(typeName, false);", "+\t\tmethod = locator.createBinaryMethodHandle(type, methodBinding.selector, parameterTypes, locator);", "+\t} else {", "+\t\tString[] parameterTypes = new String[parameterLength];", "+\t\tfor (int i = 0; i  < parameterLength; i++) {", "+\t\t\tchar[] typeName = parameters[i].shortReadableName();", "+\t\t\tif (parameters[i].isMemberType()) {", "+\t\t\t\ttypeName = CharOperation.subarray(typeName, CharOperation.indexOf('.', typeName)+1, typeName.length);", "+\t\t\t}", "+\t\t\tparameterTypes[i] = Signature.createTypeSignature(typeName, false);", "+\t\t}", "+\t\tmethod = type.getMethod(new String(bindingSelector), parameterTypes);", "-\tIMethod method = type.getMethod(new String(bindingSelector), parameterTypes);", "-\tif (knownMethods.includes(method)) return;", "+\tif (method == null || knownMethods.includes(method)) return;", "-\tboolean isBinary = type.isBinary();"]}], "num": 15640}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31f114ba1d254e82fc657a8b26cde7a2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ced6d518d9b0a028f4baa45b5d27f58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public void reportQualifiedReference(\r \tint sourceStart,\r \tint sourceEnd,\r \tchar[][] qualifiedName,\r \tIJavaElement element,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportQualifiedReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportQualifiedReference(\r", "-\tint sourceStart,\r", "-\tint sourceEnd,\r", "-\tchar[][] qualifiedName,\r", "-\tIJavaElement element,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// compute source positions of the qualified reference \r", "-\tScanner scanner = parser.scanner;\r", "-\tscanner.resetTo(sourceStart, sourceEnd);\r", "-\r", "-\tint refSourceStart = -1, refSourceEnd = -1;\r", "-\tint tokenNumber = qualifiedName.length;\r", "-\tint token = -1;\r", "-\tint previousValid = -1;\r", "-\tint i = 0;\r", "-\tdo {\r", "-\t\tint currentPosition = scanner.currentPosition;\r", "-\t\t// read token\r", "-\t\ttry {\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t} catch(InvalidInputException e) {\r", "-\t\t}\r", "-\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "-\t\t\twhile (i < tokenNumber && !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "-\t\t\t}\r", "-\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i-1]) && (previousValid == -1 || previousValid == i-2)) {\r", "-\t\t\t\tpreviousValid = i-1;\r", "-\t\t\t\tif (refSourceStart == -1) {\r", "-\t\t\t\t\trefSourceStart = currentPosition;\r", "-\t\t\t\trefSourceEnd = scanner.currentPosition-1;\r", "-\t\t\t} else {\r", "-\t\t\t\ti = 0;\r", "-\t\t\t\trefSourceStart = -1;\r", "-\t\t\t\tpreviousValid = -1;\r", "-\t\t\t// read '.'\r", "+\t */\r", "+\tpublic void reportQualifiedReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] qualifiedName,\r", "+\t\tIJavaElement element,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// compute source positions of the qualified reference \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(sourceStart, sourceEnd);\r", "+\r", "+\t\tint refSourceStart = -1, refSourceEnd = -1;\r", "+\t\tint tokenNumber = qualifiedName.length;\r", "+\t\tint token = -1;\r", "+\t\tint previousValid = -1;\r", "+\t\tint i = 0;\r", "+\t\tdo {\r", "+\t\t\tint currentPosition = scanner.currentPosition;\r", "+\t\t\t// read token\r", "-\t\t\t} catch(InvalidInputException e) {\r", "+\t\t\t} catch (InvalidInputException e) {\r", "-\t\t} \r", "-\t} while (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "-\r", "-\t// accept method declaration\r", "-\tif (refSourceStart != -1) {\r", "-\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t} else {\r", "-\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t}\r", "-}\r", "+\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "+\t\t\t\twhile (i < tokenNumber\r", "+\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t\t}\r", "+\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "+\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\t\tpreviousValid = i - 1;\r", "+\t\t\t\t\tif (refSourceStart == -1) {\r", "+\t\t\t\t\t\trefSourceStart = currentPosition;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ti = 0;\r", "+\t\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\t\tpreviousValid = -1;\r", "+\t\t\t\t}\r", "+\t\t\t\t// read '.'\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\r", "+\t\tif (refSourceStart != -1) {\r", "+\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "+\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41d1eb92df4d57b7558c25f0253df070", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public void reportQualifiedReference(\r \tint sourceStart,\r \tint sourceEnd,\r \tchar[][] qualifiedName,\r \tIJavaElement element,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportQualifiedReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportQualifiedReference(\r", "-\tint sourceStart,\r", "-\tint sourceEnd,\r", "-\tchar[][] qualifiedName,\r", "-\tIJavaElement element,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// compute source positions of the qualified reference \r", "-\tScanner scanner = parser.scanner;\r", "-\tscanner.resetTo(sourceStart, sourceEnd);\r", "-\r", "-\tint refSourceStart = -1, refSourceEnd = -1;\r", "-\tint tokenNumber = qualifiedName.length;\r", "-\tint token = -1;\r", "-\tint previousValid = -1;\r", "-\tint i = 0;\r", "-\tdo {\r", "-\t\tint currentPosition = scanner.currentPosition;\r", "-\t\t// read token\r", "-\t\ttry {\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t} catch(InvalidInputException e) {\r", "-\t\t}\r", "-\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "-\t\t\twhile (i < tokenNumber && !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "-\t\t\t}\r", "-\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i-1]) && (previousValid == -1 || previousValid == i-2)) {\r", "-\t\t\t\tpreviousValid = i-1;\r", "-\t\t\t\tif (refSourceStart == -1) {\r", "-\t\t\t\t\trefSourceStart = currentPosition;\r", "-\t\t\t\trefSourceEnd = scanner.currentPosition-1;\r", "-\t\t\t} else {\r", "-\t\t\t\ti = 0;\r", "-\t\t\t\trefSourceStart = -1;\r", "-\t\t\t\tpreviousValid = -1;\r", "-\t\t\t// read '.'\r", "+\t */\r", "+\tpublic void reportQualifiedReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] qualifiedName,\r", "+\t\tIJavaElement element,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// compute source positions of the qualified reference \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(sourceStart, sourceEnd);\r", "+\r", "+\t\tint refSourceStart = -1, refSourceEnd = -1;\r", "+\t\tint tokenNumber = qualifiedName.length;\r", "+\t\tint token = -1;\r", "+\t\tint previousValid = -1;\r", "+\t\tint i = 0;\r", "+\t\tdo {\r", "+\t\t\tint currentPosition = scanner.currentPosition;\r", "+\t\t\t// read token\r", "-\t\t\t} catch(InvalidInputException e) {\r", "+\t\t\t} catch (InvalidInputException e) {\r", "-\t\t} \r", "-\t} while (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "-\r", "-\t// accept method declaration\r", "-\tif (refSourceStart != -1) {\r", "-\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t} else {\r", "-\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t}\r", "-}\r", "+\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "+\t\t\t\twhile (i < tokenNumber\r", "+\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t\t}\r", "+\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "+\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\t\tpreviousValid = i - 1;\r", "+\t\t\t\t\tif (refSourceStart == -1) {\r", "+\t\t\t\t\t\trefSourceStart = currentPosition;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ti = 0;\r", "+\t\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\t\tpreviousValid = -1;\r", "+\t\t\t\t}\r", "+\t\t\t\t// read '.'\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\r", "+\t\tif (refSourceStart != -1) {\r", "+\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "+\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5874b6a7396e26cb7b97ea617d7e4da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public void reportQualifiedReference(\r \tint sourceStart,\r \tint sourceEnd,\r \tchar[][] qualifiedName,\r \tIJavaElement element,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportQualifiedReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportQualifiedReference(\r", "-\tint sourceStart,\r", "-\tint sourceEnd,\r", "-\tchar[][] qualifiedName,\r", "-\tIJavaElement element,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// compute source positions of the qualified reference \r", "-\tScanner scanner = parser.scanner;\r", "-\tscanner.resetTo(sourceStart, sourceEnd);\r", "-\r", "-\tint refSourceStart = -1, refSourceEnd = -1;\r", "-\tint tokenNumber = qualifiedName.length;\r", "-\tint token = -1;\r", "-\tint previousValid = -1;\r", "-\tint i = 0;\r", "-\tdo {\r", "-\t\tint currentPosition = scanner.currentPosition;\r", "-\t\t// read token\r", "-\t\ttry {\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t} catch(InvalidInputException e) {\r", "-\t\t}\r", "-\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "-\t\t\twhile (i < tokenNumber && !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "-\t\t\t}\r", "-\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i-1]) && (previousValid == -1 || previousValid == i-2)) {\r", "-\t\t\t\tpreviousValid = i-1;\r", "-\t\t\t\tif (refSourceStart == -1) {\r", "-\t\t\t\t\trefSourceStart = currentPosition;\r", "-\t\t\t\trefSourceEnd = scanner.currentPosition-1;\r", "-\t\t\t} else {\r", "-\t\t\t\ti = 0;\r", "-\t\t\t\trefSourceStart = -1;\r", "-\t\t\t\tpreviousValid = -1;\r", "-\t\t\t// read '.'\r", "+\t */\r", "+\tpublic void reportQualifiedReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] qualifiedName,\r", "+\t\tIJavaElement element,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// compute source positions of the qualified reference \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(sourceStart, sourceEnd);\r", "+\r", "+\t\tint refSourceStart = -1, refSourceEnd = -1;\r", "+\t\tint tokenNumber = qualifiedName.length;\r", "+\t\tint token = -1;\r", "+\t\tint previousValid = -1;\r", "+\t\tint i = 0;\r", "+\t\tdo {\r", "+\t\t\tint currentPosition = scanner.currentPosition;\r", "+\t\t\t// read token\r", "-\t\t\t} catch(InvalidInputException e) {\r", "+\t\t\t} catch (InvalidInputException e) {\r", "-\t\t} \r", "-\t} while (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "-\r", "-\t// accept method declaration\r", "-\tif (refSourceStart != -1) {\r", "-\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t} else {\r", "-\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t}\r", "-}\r", "+\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "+\t\t\t\twhile (i < tokenNumber\r", "+\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t\t}\r", "+\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "+\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\t\tpreviousValid = i - 1;\r", "+\t\t\t\t\tif (refSourceStart == -1) {\r", "+\t\t\t\t\t\trefSourceStart = currentPosition;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ti = 0;\r", "+\t\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\t\tpreviousValid = -1;\r", "+\t\t\t\t}\r", "+\t\t\t\t// read '.'\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\r", "+\t\tif (refSourceStart != -1) {\r", "+\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "+\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77310322dbcba1d224786116415ad97d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public void reportQualifiedReference(\r \tint sourceStart,\r \tint sourceEnd,\r \tchar[][] qualifiedName,\r \tIJavaElement element,\r \tint accuracy) throws CoreException", "signatureAfterChange": "\r \tpublic void reportQualifiedReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["- */\r", "-public void reportQualifiedReference(\r", "-\tint sourceStart,\r", "-\tint sourceEnd,\r", "-\tchar[][] qualifiedName,\r", "-\tIJavaElement element,\r", "-\tint accuracy) throws CoreException {\r", "-\t\t\r", "-\t// compute source positions of the qualified reference \r", "-\tScanner scanner = parser.scanner;\r", "-\tscanner.resetTo(sourceStart, sourceEnd);\r", "-\r", "-\tint refSourceStart = -1, refSourceEnd = -1;\r", "-\tint tokenNumber = qualifiedName.length;\r", "-\tint token = -1;\r", "-\tint previousValid = -1;\r", "-\tint i = 0;\r", "-\tdo {\r", "-\t\tint currentPosition = scanner.currentPosition;\r", "-\t\t// read token\r", "-\t\ttry {\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t} catch(InvalidInputException e) {\r", "-\t\t}\r", "-\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "-\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "-\t\t\twhile (i < tokenNumber && !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "-\t\t\t}\r", "-\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i-1]) && (previousValid == -1 || previousValid == i-2)) {\r", "-\t\t\t\tpreviousValid = i-1;\r", "-\t\t\t\tif (refSourceStart == -1) {\r", "-\t\t\t\t\trefSourceStart = currentPosition;\r", "-\t\t\t\trefSourceEnd = scanner.currentPosition-1;\r", "-\t\t\t} else {\r", "-\t\t\t\ti = 0;\r", "-\t\t\t\trefSourceStart = -1;\r", "-\t\t\t\tpreviousValid = -1;\r", "-\t\t\t// read '.'\r", "+\t */\r", "+\tpublic void reportQualifiedReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] qualifiedName,\r", "+\t\tIJavaElement element,\r", "+\t\tint accuracy)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// compute source positions of the qualified reference \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(sourceStart, sourceEnd);\r", "+\r", "+\t\tint refSourceStart = -1, refSourceEnd = -1;\r", "+\t\tint tokenNumber = qualifiedName.length;\r", "+\t\tint token = -1;\r", "+\t\tint previousValid = -1;\r", "+\t\tint i = 0;\r", "+\t\tdo {\r", "+\t\t\tint currentPosition = scanner.currentPosition;\r", "+\t\t\t// read token\r", "-\t\t\t} catch(InvalidInputException e) {\r", "+\t\t\t} catch (InvalidInputException e) {\r", "-\t\t} \r", "-\t} while (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "-\r", "-\t// accept method declaration\r", "-\tif (refSourceStart != -1) {\r", "-\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t} else {\r", "-\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t}\r", "-}\r", "+\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "+\t\t\t\twhile (i < tokenNumber\r", "+\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t\t}\r", "+\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "+\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\t\tpreviousValid = i - 1;\r", "+\t\t\t\t\tif (refSourceStart == -1) {\r", "+\t\t\t\t\t\trefSourceStart = currentPosition;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ti = 0;\r", "+\t\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\t\tpreviousValid = -1;\r", "+\t\t\t\t}\r", "+\t\t\t\t// read '.'\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\r", "+\t\tif (refSourceStart != -1) {\r", "+\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "+\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r"]}], "num": 61696}
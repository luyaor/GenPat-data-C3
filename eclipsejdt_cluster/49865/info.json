{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70922fb2c04ba51f63eb1fbe3d16ff12", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d7053c88e3a439153dbd03c6644d32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "b79c29d7f1a4a20398432bd28f19825acd39464f", "commitAfterChange": "acb9838f14c6b1a5ef6950eb28bfa26497eccaa4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "diff": ["-\t\t\t\t\t\tint awaitingWork;", "-\t\t\t\t\t\tIJob previousJob = null;", "-\t\t\t\t\t\tIJob currentJob;", "-\t\t\t\t\t\t\tint totalWork = this.awaitingJobsCount();", "-\t\t\t\t\t\t\tif (progress != null && totalWork > 0) {", "-\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork / 2);", "+\t\t\t\t\t\t\tint totalWork = 1000;", "+\t\t\t\t\t\t\tif (progress != null) {", "+\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork * 8 / 10);", "-\t\t\t\t\t\t\t\tconcurrentJobWork = concurrentJobWork / 2;", "+\t\t\t\t\t\t\t\tconcurrentJobWork = concurrentJobWork * 2 / 10;", "-\t\t\t\t\t\t\t\twhile ((awaitingWork = awaitingJobsCount()) > 0) {", "+\t\t\t\t\t\t\t\tIJob previousJob = null;", "+\t\t\t\t\t\t\t\tint awaitingJobsCount;", "+\t\t\t\t\t\t\t\tint lastJobsCount = totalWork;", "+\t\t\t\t\t\t\t\tfloat lastWorked = 0;", "+\t\t\t\t\t\t\t\tfloat totalWorked = 0;", "+\t\t\t\t\t\t\t\twhile ((awaitingJobsCount = awaitingJobsCount()) > 0) {", "-\t\t\t\t\t\t\t\t\tcurrentJob = currentJob();", "+\t\t\t\t\t\t\t\t\tIJob currentJob = currentJob();", "-\t\t\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.manager_filesToIndex, Integer.toString(awaitingWork))); ", "-\t\t\t\t\t\t\t\t\t\t\tsubProgress.worked(1);", "+\t\t\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.manager_filesToIndex, Integer.toString(awaitingJobsCount)));", "+\t\t\t\t\t\t\t\t\t\t\t// ratio of the amount of work relative to the total work", "+\t\t\t\t\t\t\t\t\t\t\tfloat ratio = awaitingJobsCount < totalWork ? 1 : ((float) totalWork) / awaitingJobsCount;", "+\t\t\t\t\t\t\t\t\t\t\tif (lastJobsCount > awaitingJobsCount) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttotalWorked += (lastJobsCount - awaitingJobsCount) * ratio;", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t// more jobs were added, just increment by the ratio", "+\t\t\t\t\t\t\t\t\t\t\t\ttotalWorked += ratio;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (totalWorked - lastWorked >= 1) {", "+\t\t\t\t\t\t\t\t\t\t\t\tsubProgress.worked((int) (totalWorked - lastWorked));", "+\t\t\t\t\t\t\t\t\t\t\t\tlastWorked = totalWorked;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tlastJobsCount = awaitingJobsCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a2d5ddcde9b095aad6390df8e99f2ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "fb2eb7acd5b5f912d44476dd03c9e941ddf18d2f", "commitAfterChange": "48ff5f20466784a6bb15b22fbabbff37579dc415", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\t\t\tthis.currentPosition -= 5;", "-\t\t\t\t\t\t\t\t\twhile(this.source[this.currentPosition] != '\\\\') {", "-\t\t\t\t\t\t\t\t\t\tthis.currentPosition--;", "+\t\t\t\t\t\t\t\t\tint start = this.currentPosition - 5;", "+\t\t\t\t\t\t\t\t\twhile(this.source[start] != '\\\\') {", "+\t\t\t\t\t\t\t\t\t\tstart--;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif(this.startPosition <= this.cursorLocation", "+\t\t\t\t\t\t\t\t\t\t\t&& this.cursorLocation <= this.currentPosition-1) {", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "+\t\t\t\t\t\t\t\t\t\t// complete inside a string literal", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tstart = this.currentPosition;", "+\t\t\t\t\t\t\t\t\tfor (int lookAhead = 0; lookAhead < 50; lookAhead++) {", "+\t\t\t\t\t\t\t\t\t\tif (this.currentPosition >= this.eofPosition) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition = start;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\') && (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode && this.currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // set current position on new line character", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (this.currentCharacter == '\\\"') {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif(this.startPosition <= this.cursorLocation", "+\t\t\t\t\t\t\t\t\t\t\t&& this.cursorLocation <= this.currentPosition-1) {", "+\t\t\t\t\t\t\t\t\t\t// complete inside a string literal", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHAR_IN_STRING);", "-\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\tif(this.startPosition <= this.cursorLocation", "+\t\t\t\t\t\t\t&& this.cursorLocation < this.currentPosition) {", "+\t\t\t\t\t\t\t// complete inside a string literal", "+\t\t\t\t\t\t\treturn TokenNameStringLiteral;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_STRING);", "+//\t\t\t\t\tif (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){", "+//\t\t\t\t\t}"]}], "num": 49865}
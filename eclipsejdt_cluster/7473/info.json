{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a2701cf04dbfd61cb4e7c973b4fb97f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e7ba85570c7f37feeca6e742697c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\t// check superclass & interfaces", "-\t\t\tif (this.binding.superclass != null) // watch out for Object ! (and other roots)\t", "-\t\t\t\tif (isTypeUseDeprecated(this.binding.superclass, this.scope))", "-\t\t\t\t\tthis.scope.problemReporter().deprecatedType(this.binding.superclass, this.superclass);", "-\t\t\tif (this.superInterfaces != null)", "-\t\t\t\tfor (int i = this.superInterfaces.length; --i >= 0;)", "-\t\t\t\t\tif (this.superInterfaces[i].resolvedType != null)", "-\t\t\t\t\t\tif (isTypeUseDeprecated(this.superInterfaces[i].resolvedType, this.scope))", "-\t\t\t\t\t\t\tthis.scope.problemReporter().deprecatedType(", "-\t\t\t\t\t\t\t\tthis.superInterfaces[i].resolvedType,", "-\t\t\t\t\t\t\t\tthis.superInterfaces[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c12b5070f78fcb0a8519bff49eb8e95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-\t\t\tTypeBinding valueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\t\tTypeBinding valueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "-\t\t\tif (valueIfTrueType != null) {", "-\t\t\t\tif (!valueIfTrueType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "-\t\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfTrueType, targetType, this.valueIfTrue, null);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.valueIfTrue.computeConversion(this.polyExpressionScope, targetType, this.originalValueIfTrueType);\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (valueIfFalseType != null) {", "-\t\t\t\tif (!valueIfFalseType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "-\t\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfFalseType, targetType, this.valueIfFalse, null);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.valueIfFalse.computeConversion(this.polyExpressionScope, targetType, this.originalValueIfFalseType);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tthis.originalValueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "+\t\t\tthis.originalValueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tcomputeConversions(this.polyExpressionScope, targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9188bc476ae4ce43492d4836965c90c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate boolean handleWhitespaceAround(int commentIndex)", "signatureAfterChange": "  \tprivate boolean handleWhitespaceAround(int commentIndex)", "diff": ["-\t\t\t}", "-", "-\t\t\tif (previous != null && previous.getLineBreaksAfter() == 0", "-\t\t\t\t\t&& next != null && next.getLineBreaksBefore() == 0", "-\t\t\t\t\t&& Arrays.binarySearch(NO_INDENT_AFTER_COMMENT, next.tokenType) < 0) {", "-\t\t\t\tint policyIndent = (commentToken.getIndent() - previous.getIndent());", "-\t\t\t\tWrapPolicy wrapPolicy = new WrapPolicy(policyIndent, commentIndex - 1, true);", "-\t\t\t\tif (this.tm.countLineBreaksBetween(previous, commentToken) == 1)", "-\t\t\t\t\tcommentToken.setWrapPolicy(wrapPolicy);", "-\t\t\t\tif (this.tm.countLineBreaksBetween(commentToken, next) == 1)", "-\t\t\t\t\tnext.setWrapPolicy(wrapPolicy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ad5d3748147de7251d4cd1eec07619e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "6e5d8fb1fa59c43c60c58828e1e292aaafa3465f", "commitAfterChange": "108910be72e713e6e104fafacd635988e5383096", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "    public void resolve()", "signatureAfterChange": "    public void resolve()", "diff": ["-\t\t\tif (this.superclass != null) {", "-\t\t\t\tthis.superclass.resolveAnnotations(this.staticInitializerScope);", "-\t\t\t}", "-\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\tfor (int i = 0, max = this.superInterfaces.length; i < max; i++) {", "-\t\t\t\t\tthis.superInterfaces[i].resolveAnnotations(this.staticInitializerScope);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.typeParameters != null) {", "-\t\t\t\tfor (int i = 0, count = this.typeParameters.length; i < count; i++) {", "-\t\t\t\t\tthis.typeParameters[i].resolveAnnotations(this.staticInitializerScope);", "-\t\t\t\t}", "-\t\t\t}"]}], "num": 7473}
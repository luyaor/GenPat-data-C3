{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a3b9bdadc51f120d55087f7258a224e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "691e6094d1a4c080be9c87268d26d61b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, NullAnnotationMatching status)", "signatureAfterChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, NullAnnotationMatching status)", "diff": ["+\tString superHint = null;", "+\tString superHintShort = null;", "-\t\targuments      = new String[] { null, null, status.superTypeHintName(this.options, false) };", "-\t\tshortArguments = new String[] { null, null, status.superTypeHintName(this.options, true) };", "+\t\tsuperHint = status.superTypeHintName(this.options, false);", "+\t\tsuperHintShort = status.superTypeHintName(this.options, true);", "-\t\t\t: IProblem.NullityMismatchingTypeAnnotation);", "-\t\targuments      = new String[2];", "-\t\tshortArguments = new String[2];", "+\t\t\t: (requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())", "+\t\t\t\t? IProblem.NullityMismatchAgainstFreeTypeVariable", "+\t\t\t\t: IProblem.NullityMismatchingTypeAnnotation);", "+\t\tif (problemId == IProblem.NullityMismatchAgainstFreeTypeVariable) {", "+\t\t\targuments      = new String[] { null, null, new String(requiredType.sourceName()) }; // don't show bounds here", "+\t\t\tshortArguments = new String[] { null, null, new String(requiredType.sourceName()) };", "+\t\t} else {", "+\t\t\targuments      = new String[2];", "+\t\t\tshortArguments = new String[2];", "+\t\t}", "-\targuments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, false));", "-\targuments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, false));", "-\tshortArguments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, true));", "-\tshortArguments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, true));", "+\tString requiredName;", "+\tString requiredNameShort;", "+\tif (problemId == IProblem.NullityMismatchAgainstFreeTypeVariable) {", "+\t\trequiredName\t\t= new String(requiredType.sourceName()); // don't show bounds here", "+\t\trequiredNameShort \t= new String(requiredType.sourceName()); // don't show bounds here", "+\t} else {", "+\t\trequiredName \t\t= new String(requiredType.nullAnnotatedReadableName(this.options, false));", "+\t\trequiredNameShort \t= new String(requiredType.nullAnnotatedReadableName(this.options, true));", "+\t}", "+\tString providedName\t\t = String.valueOf(providedType.nullAnnotatedReadableName(this.options, false));", "+\tString providedNameShort = String.valueOf(providedType.nullAnnotatedReadableName(this.options, true));", "+\t// assemble arguments:", "+\tif (superHint != null) {", "+\t\targuments \t\t= new String[] { requiredName, providedName, superHint };", "+\t\tshortArguments \t= new String[] { requiredNameShort, providedNameShort, superHintShort };", "+\t} else {", "+\t\targuments \t\t= new String[] { requiredName, providedName };", "+\t\tshortArguments \t= new String[] { requiredNameShort, providedNameShort };", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec68bb70254e37dbd46ab99881867d6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "04eaba0fe4e6b5a84c4e8dc4fffbab423284d555", "commitAfterChange": "a7a3afb7a8548d0fba296650ec89abc303b4be12", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["+\t\tif (node != null) {\r", "+\t\t\tif (node instanceof SingleNameReference) {\r", "+\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// this is a variable or a field\r", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t} else if (node instanceof QualifiedNameReference) {\r", "+\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;\r", "+\t\t\t\t\r", "+\t\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// this is a variable or a field\r", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// this might be a inner qualified name or simple name inside a qualified name\r", "+\t\tint index = 1;\r", "+\t\tQualifiedName firstQualifier = null;\r", "+\t\tName firstName = name;\r", "+\t\tif (name.isSimpleName()) {\r", "+\t\t\tif (name.getParent() instanceof QualifiedName) {\r", "+\t\t\t\tname = (QualifiedName) name.getParent();\r", "+\t\t\t\tfirstQualifier = (QualifiedName) name;\r", "+\t\t\t} else {\r", "+\t\t\t\treturn super.resolveName(name);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\twhile (name.getParent() instanceof QualifiedName) {\r", "+\t\t\tindex++;\r", "+\t\t\tname = (QualifiedName) name.getParent();\r", "+\t\t}\r", "+\t\t// now we can retrieve the enclosing compiler's node corresponding to the inner name\r", "+\t\tnode = (AstNode) this.newAstToOldAst.get(name);\r", "-\t\t}\r", "-\t\tif (node instanceof SingleNameReference) {\r", "-\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "-\t\t\tif (singleNameReference.isFieldReference()) {\r", "-\t\t\t\treturn this.getVariableBinding(singleNameReference.fieldBinding());\r", "-\t\t\t} else if (singleNameReference.isTypeReference()) {\r", "-\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "-\t\t\t} else {\r", "-\t\t\t\t// this is a variable\r", "-\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding)singleNameReference.binding);\t\t\t\t\r", "-\t\t\t}\r", "-\t\t} else if (node instanceof QualifiedNameReference) {\r", "+\t\t} else {\r", "-\t\t\tif (qualifiedNameReference.isFieldReference()) {\r", "-\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\r", "-\t\t\t} else if (qualifiedNameReference.isTypeReference()) {\r", "-\t\t\t\tthis.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "+\t\t\tif (firstQualifier != null) {\r", "+\t\t\t\t// handle the first simple name in a qualified name a.b.c.d (handles the 'a' case)\r", "+\t\t\t\tName firstQualifierName = firstQualifier.getQualifier();\r", "+\t\t\t\tif (firstQualifierName.isSimpleName() && firstName == firstQualifierName) {\r", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.binding);\t\t\t\t\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (qualifiedNameReference.isTypeReference()) {\r", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);\r", "-\t\t\t\t// this is a variable\r", "-\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - 1]);\t\t\t\t\r", "+\t\t\t\t// this is a variable or a field\r", "+\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) qualifiedNameReference.otherBindings[qualifiedNameReference.otherBindings.length - index]);\t\t\t\t\r", "-\t\treturn super.resolveName(name);\r"]}], "num": 26287}
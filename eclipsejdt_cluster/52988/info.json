{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a24f0f2e4350002e10f02636d9c2b5e2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31a71ec46cedb67e17541e39d1da1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t \tprotected void addCompilationUnit( \t\tICompilationUnit sourceUnit, \t\tCompilationUnitDeclaration parsedUnit)", "signatureAfterChange": " protected void buildBindings(PotentialMatch potentialMatch)", "diff": ["-\t}\t", "-\tprotected void addCompilationUnit(", "-\t\tICompilationUnit sourceUnit,", "-\t\tCompilationUnitDeclaration parsedUnit) {", "-", "-\t\t// append the unit to the list of ones to process later on", "-\t\tint size = this.unitsToProcess.length;", "-\t\tif (this.totalUnits == size) {", "-\t\t\t// when growing reposition units starting at position 0", "-\t\t\tint newSize = size == 0 ? 1 : size * 2;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.unitsToProcess,", "-\t\t\t\t0,", "-\t\t\t\t(this.unitsToProcess = new CompilationUnitDeclaration[newSize]),", "-\t\t\t\t0,", "-\t\t\t\tthis.totalUnits);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.matchesToProcess,", "-\t\t\t\t0,", "-\t\t\t\t(this.matchesToProcess = new PotentialMatch[newSize]),", "-\t\t\t\t0,", "-\t\t\t\tthis.totalUnits);", "-\t\t}", "-\t\tif (sourceUnit instanceof PotentialMatch) {", "-\t\t\tthis.matchesToProcess[this.totalUnits] = (PotentialMatch)sourceUnit;", "-\t\t}", "-\t\tthis.unitsToProcess[this.totalUnits] = parsedUnit;", "-\t\tthis.totalUnits++;", "-\t}\t", "+ */", "+protected void buildBindings(PotentialMatch potentialMatch) {", "+\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();", "+\ttry {", "+\t\tif (SearchEngine.VERBOSE)", "+\t\t\tSystem.out.println(\"Parsing \" + potentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+", "+\t\tthis.parser.matchSet = potentialMatch.matchingNodeSet;", "+\t\tCompilationResult unitResult = new CompilationResult(potentialMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(potentialMatch, unitResult);", "+\t\tif (parsedUnit != null) {", "+\t\t\tif (!parsedUnit.isEmpty())", "+\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "+", "+\t\t\t// add the potentialMatch with its parsedUnit to matchesToProcess", "+\t\t\tpotentialMatch.parsedUnit = parsedUnit;", "+\t\t\tint size = this.matchesToProcess.length;", "+\t\t\tif (this.numberOfMatches == size)", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PotentialMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = potentialMatch;", "+", "+\t\t\tif (this.progressMonitor != null)", "+\t\t\t\tthis.progressMonitor.worked(4);", "+\t} finally {", "+\t\tthis.parser.matchSet = null;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd8c7800640da9be229bd995bd31edea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "14d627dce82d56cfd2be03743c28c7ac3736df42", "commitAfterChange": "98d42611e634b1db50f18796da74a25e56b7b155", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tif (monitor != null) \tmonitor.beginTask(Messages.javamodel_initialization, 100);", "+\t\t\tif (monitor != null) {", "+\t\t\t\tmonitor.beginTask(Messages.javamodel_initialization, 100);", "+\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_classpath_containers);", "+\t\t\t}", "+\t\t\tSubProgressMonitor subMonitor = null;", "-\t\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_classpath_containers);", "-\t\t\t\t\tmanager.batchContainerInitializationsProgress.set(new SubProgressMonitor(monitor, 50)); // 50% of the time is spent in initializing containers and variables", "+\t\t\t\t\tsubMonitor = new SubProgressMonitor(monitor, 50); // 50% of the time is spent in initializing containers and variables", "+\t\t\t\t\tsubMonitor.beginTask(\"\", 100); //$NON-NLS-1$", "+\t\t\t\t\tsubMonitor.worked(5); // give feedback to the user that something is happening", "+\t\t\t\t\tmanager.batchContainerInitializationsProgress.initializeAfterLoadMonitor.set(subMonitor);", "-\t\t\t\t", "-\t\t\t\t// all classpaths in the workspace are going to be resolved, ensure that containers are initialized in one batch", "-\t\t\t\tmanager.batchContainerInitializations = true; ", "-\t\t\t\t", "-\t\t\t\t// avoid leaking source attachment properties (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=183413)", "-\t\t\t\tIJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "-\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tclasspath = ((JavaProject) projects[i]).getResolvedClasspath();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// project no longer exist: ignore", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "-\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\t\tif (entry.getSourceAttachmentPath() != null)", "-\t\t\t\t\t\t\t\tUtil.setSourceAttachmentProperty(entry.getPath(), null);", "-\t\t\t\t\t\t\t// else source might have been attached by IPackageFragmentRoot#attachSource(...), we keep it", "+\t\t\t\tif (manager.forceBatchInitializations(true/*initAfterLoad*/)) { // if no other thread has started the batch container initializations", "+\t\t\t\t\tmanager.getClasspathContainer(Path.EMPTY, null); // force the batch initialization", "+\t\t\t\t} else { // else wait for the batch initialization to finish", "+\t\t\t\t\twhile (manager.batchContainerInitializations == JavaModelManager.BATCH_INITIALIZATION_IN_PROGRESS) {", "+\t\t\t\t\t\tif (subMonitor != null) {", "+\t\t\t\t\t\t\tsubMonitor.subTask(manager.batchContainerInitializationsProgress.subTaskName);", "+\t\t\t\t\t\t\tsubMonitor.worked(manager.batchContainerInitializationsProgress.getWorked());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsynchronized(manager) {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tmanager.wait(100);", "+\t\t\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t\t\t// continue", "+\t\t\t\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// initialize delta state", "-\t\t\t\tmanager.deltaState.rootsAreStale = true; // in case it was already initialized before we cleaned up the source attachment proprties", "-\t\t\t\tmanager.deltaState.initializeRoots();", "-\t\t\t\tmanager.batchContainerInitializationsProgress.set(null);", "+\t\t\t\tif (subMonitor != null)", "+\t\t\t\t\tsubMonitor.done();", "+\t\t\t\tmanager.batchContainerInitializationsProgress.initializeAfterLoadMonitor.set(null);", "+\t\t\t", "+\t\t\t// avoid leaking source attachment properties (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=183413 )", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_resetting_source_attachment_properties);", "+\t\t\tfinal IJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "+\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\ttry {", "+\t\t\t\t\tclasspath = ((JavaProject) projects[i]).getResolvedClasspath();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// project no longer exist: ignore", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (classpath != null) {", "+\t\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "+\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\tif (entry.getSourceAttachmentPath() != null)", "+\t\t\t\t\t\t\tUtil.setSourceAttachmentProperty(entry.getPath(), null);", "+\t\t\t\t\t\t// else source might have been attached by IPackageFragmentRoot#attachSource(...), we keep it", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// initialize delta state", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_initializing_delta_state);", "+\t\t\tmanager.deltaState.rootsAreStale = true; // in case it was already initialized before we cleaned up the source attachment proprties", "+\t\t\tmanager.deltaState.initializeRoots(true/*initAfteLoad*/);", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_searchengine);", "-\t\t\t\tif (monitor != null)", "-\t\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_searchengine);", "-\t\t\t\t\t\tIJavaProject[] projects = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// could not get Java projects: ignore", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (projects != null) {", "-\t\t\t\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\t\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Touching \" + project.getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tproject.getProject().touch(progressMonitor2);", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\t// could not touch this project: ignore", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"Touching \" + project.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tproject.getProject().touch(progressMonitor2);", "+\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\t// could not touch this project: ignore"]}], "num": 52988}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54c66334572166f316ce7d5bd86eb705", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff510faeaff567993a7c6838b87e1db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "0d655eb7c5734b22e978a732e9dc70711c6565d1", "commitAfterChange": "e8e6bc5be64017fb64d9068aa06ee69d945c7195", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected ASTNode buildAST(String contents, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " \tprotected ASTNode buildAST(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "diff": ["-\tprotected ASTNode buildAST(String contents, ICompilationUnit cu) throws JavaModelException {", "+\tprotected ASTNode buildAST(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tIProblem[] problems = unit.getProblems();", "-\t\tfor (int i = 0, length = problems.length; i < length; i++)", "-\t\t\tUtil.appendProblem(buffer, problems[i], contents.toCharArray(), i+1);", "-\t\tif (buffer.length() > 0)", "-\t\t\tSystem.err.println(buffer.toString());", "+\t\tif (reportErrors) {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tIProblem[] problems = unit.getProblems();", "+\t\t\tfor (int i = 0, length = problems.length; i < length; i++)", "+\t\t\t\tUtil.appendProblem(buffer, problems[i], contents.toCharArray(), i+1);", "+\t\t\tif (buffer.length() > 0)", "+\t\t\t\tSystem.err.println(buffer.toString());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f730a6b82c012334ce65bdfe818ddd50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/NestedTypeBinding.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope)", "signatureAfterChange": "\r \r public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope, boolean onlyExactMatch)", "diff": ["-\r", "-public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope) {\r", "-\tif (enclosingInstances == null) return null;\t\t// is null if no enclosing instances are known\r", "-\r", "-\t// exact match\r", "-\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "-\t\tif (enclosingInstances[i].type == targetEnclosingType)\r", "-\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "-\t\t\t\treturn enclosingInstances[i];\r", "-\r", "-\t// type compatibility : to handle cases such as\r", "-\t// class T { class M{}}\r", "-\t// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r", "-\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "-\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "-\t\t\tif (targetEnclosingType.isSuperclassOf((ReferenceBinding) enclosingInstances[i].type))\r", "-\t\t\t\treturn enclosingInstances[i];\r", "-\treturn null;\r", "-}\r", "+\r", "+public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope, boolean onlyExactMatch) {\r", "+\tif (enclosingInstances == null) return null;\t\t// is null if no enclosing instances are known\r", "+\r", "+\t// exact match\r", "+\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "+\t\tif (enclosingInstances[i].type == targetEnclosingType)\r", "+\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "+\t\t\t\treturn enclosingInstances[i];\r", "+\r", "+\t// type compatibility : to handle cases such as\r", "+\t// class T { class M{}}\r", "+\t// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r", "+\tif (!onlyExactMatch){\r", "+\t\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "+\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "+\t\t\t\tif (targetEnclosingType.isSuperclassOf((ReferenceBinding) enclosingInstances[i].type))\r", "+\t\t\t\t\treturn enclosingInstances[i];\r", "+\t}\r", "+\treturn null;\r", "+}\r"]}], "num": 63347}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f5be7e45374811ee2a2086d1e27fc4c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51fea670f5cf61b2d9cd4bde2d0776a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private void addDefaultAbstractMethod(MethodBinding abstractMethod)", "signatureAfterChange": " private void addDefaultAbstractMethod(MethodBinding abstractMethod)", "diff": ["-\tMethodBinding[] temp = new MethodBinding[methods.length + 1];", "-\tSystem.arraycopy(methods, 0, temp, 0, methods.length);", "-\ttemp[methods.length] = defaultAbstract;", "-\tmethods = temp;", "+\tMethodBinding[] temp = new MethodBinding[this.methods.length + 1];", "+\tSystem.arraycopy(this.methods, 0, temp, 0, this.methods.length);", "+\ttemp[this.methods.length] = defaultAbstract;", "+\tthis.methods = temp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b89ea3a74d03129286ecda5b07f9fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean checkConstructors(Parser parser)", "signatureAfterChange": " public boolean checkConstructors(Parser parser)", "diff": ["-\t */", "-\tpublic boolean checkConstructors(Parser parser) {", "-", "-\t\t//if a constructor has not the name of the type,", "-\t\t//convert it into a method with 'null' as its return type", "-\t\tboolean hasConstructor = false;", "-\t\tif (methods != null) {", "-\t\t\tfor (int i = methods.length; --i >= 0;) {", "-\t\t\t\tAbstractMethodDeclaration am;", "-\t\t\t\tif ((am = methods[i]).isConstructor()) {", "-\t\t\t\t\tif (!CharOperation.equals(am.selector, name)) {", "-\t\t\t\t\t\t// the constructor was in fact a method with no return type", "-\t\t\t\t\t\t// unless an explicit constructor call was supplied", "-\t\t\t\t\t\tConstructorDeclaration c = (ConstructorDeclaration) am;", "-\t\t\t\t\t\tif (c.constructorCall == null || c.constructorCall.isImplicitSuper()) { //changed to a method", "-\t\t\t\t\t\t\tMethodDeclaration m = parser.convertToMethodDeclaration(c, this.compilationResult);", "-\t\t\t\t\t\t\tmethods[i] = m;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tswitch (kind(this.modifiers)) {", "-\t\t\t\t\t\t\tcase TypeDeclaration.INTERFACE_DECL :", "-\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "-\t\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors((ConstructorDeclaration) am);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL :", "-\t\t\t\t\t\t\t\t// report the problem and continue the parsing", "-\t\t\t\t\t\t\t\tparser.problemReporter().annotationTypeDeclarationCannotHaveConstructor((ConstructorDeclaration) am);", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\thasConstructor = true;", "+ */", "+public boolean checkConstructors(Parser parser) {", "+\t//if a constructor has not the name of the type,", "+\t//convert it into a method with 'null' as its return type", "+\tboolean hasConstructor = false;", "+\tif (this.methods != null) {", "+\t\tfor (int i = this.methods.length; --i >= 0;) {", "+\t\t\tAbstractMethodDeclaration am;", "+\t\t\tif ((am = this.methods[i]).isConstructor()) {", "+\t\t\t\tif (!CharOperation.equals(am.selector, this.name)) {", "+\t\t\t\t\t// the constructor was in fact a method with no return type", "+\t\t\t\t\t// unless an explicit constructor call was supplied", "+\t\t\t\t\tConstructorDeclaration c = (ConstructorDeclaration) am;", "+\t\t\t\t\tif (c.constructorCall == null || c.constructorCall.isImplicitSuper()) { //changed to a method", "+\t\t\t\t\t\tMethodDeclaration m = parser.convertToMethodDeclaration(c, this.compilationResult);", "+\t\t\t\t\t\tthis.methods[i] = m;", "+\t\t\t\t} else {", "+\t\t\t\t\tswitch (kind(this.modifiers)) {", "+\t\t\t\t\t\tcase TypeDeclaration.INTERFACE_DECL :", "+\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\tparser.problemReporter().interfaceCannotHaveConstructors((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TypeDeclaration.ANNOTATION_TYPE_DECL :", "+\t\t\t\t\t\t\t// report the problem and continue the parsing", "+\t\t\t\t\t\t\tparser.problemReporter().annotationTypeDeclarationCannotHaveConstructor((ConstructorDeclaration) am);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\thasConstructor = true;", "-\t\treturn hasConstructor;", "+\t}", "+\treturn hasConstructor;", "+}"]}], "num": 69878}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e491181d9221f0ecc5a9c04301c0a79", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16be02aa9ea0f4899427bb82b202c77d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "e5988aa6fffbfb1b20b8814c4bf08e1213cd12df", "commitAfterChange": "ac79ebad8b588bff5a071f74e9413cce9477383d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": "\r \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\t\t\t\t\tthis.performPreBuildCheck(delta, null); \r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t// don't fire classpath change deltas right away, but batch them\r", "+\t\t\t\t\t\t\tthis.manager.stopDeltas();\r", "+\t\t\t\t\t\t\tthis.performPreBuildCheck(delta, null); \r", "+\t\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\t\tthis.manager.startDeltas();\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbac4ef0c26e0cc7b5da6407df7af01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "183bd75c46b88010e052308e0b5a2ec9acc24639", "commitAfterChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\tif (requiredType == null) ", "-\t\t\treturn;", "+\t\tif (requiredType == null) {", "+\t\t\t// fault tolerance: keep resolving", "+\t\t\tif (this.value instanceof ArrayInitializer) {", "+\t\t\t\tthis.value.resolveTypeExpecting(scope, null);", "+\t\t\t} else {", "+\t\t\t\tthis.value.resolveType(scope);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}"]}], "num": 27052}
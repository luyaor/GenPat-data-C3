{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9031153af1aaa19de95bc803f1ff1fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a2c7886bf414ce7dcf0c3fb6e52d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "0a222a0541c13bcd788f2b776a79daeb47cc54b9", "commitAfterChange": "0b91e0375651a4b492ec74edfab75a9b71cf9fbd", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t// remaining binding keys are package binding keys", "-\t\t\tchar[][] pkgNames = this.requestedKeys.keyTable;", "-\t\t\tfor (int j = 0, pkgLength = pkgNames.length; j < pkgLength; j++) {", "-\t\t\t\tchar[] pkgName = pkgNames[j];", "-\t\t\t\tif (pkgName == null) continue;", "-\t\t\t\tBinding compilerBinding = new PackageBinding(CharOperation.splitOn('.', pkgName), null, this.lookupEnvironment);", "-\t\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(null, owner, this.bindingTables, this);", "+\t\t\t// remaining binding keys are package binding keys or base type binding keys", "+\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(null, owner, this.bindingTables, this);", "+\t\t\tObject[] keys = this.requestedKeys.valueTable;", "+\t\t\tfor (int j = 0, keysLength = keys.length; j < keysLength; j++) {", "+\t\t\t\tBindingKey key = (BindingKey) keys[j];", "+\t\t\t\tif (key == null) continue;", "+\t\t\t\tBinding compilerBinding = key.getCompilerBinding(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1e314c96060a28960ab7f7aa08b3925", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "c1a4eec7badf25da1ca6cc1d039b5627888514b8", "commitAfterChange": "2d75cef028da9a8fe8c9804711f5a598b2019a3c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["+\tint index = sourceFolders.length;\r", "+\tthis.hasSeparateOutputFolder = index > 0; // skip it if it doesn't have any source folders\r", "-\tthis.hasSeparateOutputFolder = !outputPath.equals(javaBuilder.currentProject.getFullPath());\r", "-\tfor (int i = 0, length = sourceFolders.length; hasSeparateOutputFolder && i < length; i++)\r", "-\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[i].getFullPath());\r", "+\twhile (this.hasSeparateOutputFolder && --index >= 0)\r", "+\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[index].getFullPath());\r"]}], "num": 4777}
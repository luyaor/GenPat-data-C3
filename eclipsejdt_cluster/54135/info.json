{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d7366aa78fe98b24fe1e446546b37b8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7bac4aa194d835c92201d14c8189a21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "e5fda1d929f48b1ed961a5e3c698240a2263aa5e", "commitAfterChange": "492742130581f98e928eea7bd4ac7e448a4c7517", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["+\tint[] overriddenInheritedMethods = findOverriddenInheritedMethods(methods, length);", "+\tif (overriddenInheritedMethods != null) {", "+\t\t// detected some overridden methods that can be ignored when checking return types", "+\t\tint index = 0;", "+\t\tMethodBinding[] closestMethods = new MethodBinding[length];", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tif (overriddenInheritedMethods[i] == 0)", "+\t\t\t\tclosestMethods[index++] = methods[i];", "+\t\tmethods = closestMethods;", "+\t\tlength = index;", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1915e0d87b1317b535802a6f7fc91b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b32fc1bd12e1af3d23b798a9c1ddb2d07b773695", "commitAfterChange": "e8809c830aa9910fa512262ec2fd91fe29f694ac", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["+\t// Internal use only - use findMethod()", "+\tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext) {", "+\t\t}", "+", "+\t\tif (inStaticContext) {", "+\t\t\tMethodBinding[] staticCandidates = new MethodBinding[visiblesCount];", "+\t\t\tint staticCount = 0;", "+\t\t\tfor (int i = 0; i < visiblesCount; i++)", "+\t\t\t\tif (candidates[i].isStatic())", "+\t\t\t\t\tstaticCandidates[staticCount++] = candidates[i];", "+\t\t\tif (staticCount == 1)", "+\t\t\t\treturn staticCandidates[0];", "+\t\t\tif (staticCount > 1)", "+\t\t\t\treturn mostSpecificMethodBinding(staticCandidates, staticCount, argumentTypes, invocationSite, receiverType);"]}], "num": 54135}
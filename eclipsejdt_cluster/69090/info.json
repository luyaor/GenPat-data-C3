{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd85f9abbef5464297b7977abf4f7e92", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fd1673bd5601e7d5e2d9ba2d1344770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "da0372488a7d84e7cb9c4ca0733fb42f30faa604", "commitAfterChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void checkNullComparison(BlockScope scope, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tpublic void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["-\tpublic void checkNullComparison(BlockScope scope, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse) {", "+\tpublic void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse) {", "-\t\t\tcheckVariableComparison(scope, flowInfo, initsWhenTrue, initsWhenFalse, local, right.nullStatus(flowInfo), this.left);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, right.nullStatus(flowInfo), this.left);", "-\t\t\tcheckVariableComparison(scope, flowInfo, initsWhenTrue, initsWhenFalse, local, left.nullStatus(flowInfo), this.right);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, left.nullStatus(flowInfo), this.right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0fdb217858fd2dc9e70506d0c0ff3ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "da0372488a7d84e7cb9c4ca0733fb42f30faa604", "commitAfterChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "signatureAfterChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "diff": ["-\tprivate void checkVariableComparison(BlockScope scope, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference) {", "+\tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference) {", "-\t\t\t\t\tscope.problemReporter().localVariableCannotBeNull(local, reference);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, FlowInfo.NON_NULL, flowInfo);", "-\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, FlowInfo.NULL, flowInfo);", "-\t\t\t\t\tscope.problemReporter().localVariableCanOnlyBeNull(local, reference);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, FlowInfo.NULL, flowInfo);"]}], "num": 69090}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbdc5992ee7b3cf58e8afa4966309bea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500841da320b16e5dec453f6a8d2fa98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "6e642a34a8b5c85df508f049684a8996f1b8df52", "commitAfterChange": "355460267a070a52738f93cd1e4e0f2039fb0d85", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static final int searchLineNumber(int[] startLineIndexes, int position)", "signatureAfterChange": " \t \tpublic static int getLineNumber(int position, int[] lineEnds, int g, int d)", "diff": ["+\tpublic static int getLineNumber(int position, int[] lineEnds, int g, int d) {", "+\t\tif (lineEnds == null)", "+\t\t\treturn 1;", "+\t\tif (d == -1)", "+\t\t\treturn 1;", "+\t\tint m = g, start;", "+\t\twhile (g <= d) {", "+\t\t\tm = g + (d - g) /2;", "+\t\t\tif (position < (start = lineEnds[m])) {", "+\t\t\t\td = m-1;", "+\t\t\t} else if (position > start) {", "+\t\t\t\tg = m+1;", "+\t\t\t} else {", "+\t\t\t\treturn m + 1;", "+\t\t\t}", "+\t\t}", "+\t\tif (position < lineEnds[m]) {", "+\t\t\treturn m+1;", "+\t\t}", "+\t\treturn m+2;", "+\t}", "-\t */", "-\tpublic static final int searchLineNumber(int[] startLineIndexes, int position) {", "-\t\tint length = startLineIndexes.length;", "-\t\tif (length == 0)", "-\t\t\treturn 1;", "-\t\tint g = 0, d = length - 1;", "-\t\tint m = 0, start;", "-\t\twhile (g <= d) {", "-\t\t\tm = d + (g - d) / 2;", "-\t\t\tif (position < (start = startLineIndexes[m])) {", "-\t\t\t\td = m - 1;", "-\t\t\t} else if (position > start) {", "-\t\t\t\tg = m + 1;", "-\t\t\t} else {", "-\t\t\t\treturn m + 1;", "-\t\t\t}", "-\t\t}", "-\t\tif (position < startLineIndexes[m]) {", "-\t\t\treturn m + 1;", "-\t\t}", "-\t\treturn m + 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aa72a8139ff5130de2100a699fe63c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "1a8cfd60f35f9eb233d4395676551d0101e49aa3", "commitAfterChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["-\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT ", "-\t\t\tPROBING_SCANNER = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT", "+\t\t\t// do not tokenize white spaces to get single comments even with spaces before...", "+\t\t\tPROBING_SCANNER = new Scanner(true, false/*do not tokenize whitespaces*/, false/*nls*/, ClassFileConstants.JDK1_6, ClassFileConstants.JDK1_6, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tPROBING_SCANNER.resetTo(offset, offset + length);", "+\t\tPROBING_SCANNER.resetTo(offset, offset + length - 1);", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {"]}], "num": 62436}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4f57bd4d9f2c7a147dc4b50c1073678", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626ba6ae313a55c64a89fa701114441b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "fd4873f8881450efaceb482ead403702f0b3cd50", "commitAfterChange": "efd7cd38b35f875ede44936aed68717b93ca608e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\tboolean skipInheritedMethods = mustImplementAbstractMethods && this.type.superInterfaces() == NoSuperInterfaces", "-\t\t&& this.type.superclass() != null && !this.type.superclass().isAbstract(); // have a single concrete superclass so only check overridden methods", "+\tboolean skipInheritedMethods = mustImplementAbstractMethods && canSkipInheritedMethods(); // have a single concrete superclass so only check overridden methods", "-\t\t\t\t\tif (otherInheritedMethod != null && otherInheritedMethod.declaringClass != inheritedMethod.declaringClass) { // must be from a different class for their params to be equal", "-\t\t\t\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);", "-\t\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "-\t\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "-\t\t\t\t\t\t\tinherited[j] = null; // do not want to find it again", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (canSkipInheritedMethods(inheritedMethod, otherInheritedMethod))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\totherInheritedMethod = computeSubstituteMethod(otherInheritedMethod, inheritedMethod);", "+\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\t\tmatchingInherited[++index] = otherInheritedMethod;", "+\t\t\t\t\t\tinherited[j] = null; // do not want to find it again"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eb82de735cf965d5a8a549149dc88cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "fd5fe0838929e5227d1524384a37e09b34bfb15e", "commitAfterChange": "35293aa2c53e258bd9815d912253aad7aabdda8f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " boolean isSkippableOrOverridden(MethodBinding specific, MethodBinding general, boolean[] skip, boolean[] isOverridden, int idx)", "signatureAfterChange": " boolean isSkippableOrOverridden(MethodBinding specific, MethodBinding general, boolean[] skip, boolean[] isOverridden, boolean[] isInherited, int idx)", "diff": ["-boolean isSkippableOrOverridden(MethodBinding specific, MethodBinding general, boolean[] skip, boolean[] isOverridden, int idx) {", "+boolean isSkippableOrOverridden(MethodBinding specific, MethodBinding general, boolean[] skip, boolean[] isOverridden, boolean[] isInherited, int idx) {", "-\t\tif (isInterfaceMethodImplemented(general, specific, general.declaringClass)) {", "+\t\tif (!specific.isAbstract() && isParameterSubsignature(specific, general)) {", "+\t\t\t// 8.4.8: abstract and default methods are not inherited if a concrete method with a subsignature is defined or inherited in C", "+\t\t\tisInherited[idx] = false;", "+\t\t\treturn true;", "+\t\t} else if (isInterfaceMethodImplemented(general, specific, general.declaringClass)) {"]}], "num": 59214}
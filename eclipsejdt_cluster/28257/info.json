{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b600b2c42b981ccd8b15294699d9821e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b983284ccfe543a1983da190410ba9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "2077a29bc8cfe42c01e5c07aa5d0c90e2eceb36b", "commitAfterChange": "ba2b33c0750d6d7311c1eadcadc15015d0ae8f36", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": " \tprivate void trimWhiteSpacesAndComments(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": " \tprivate void trimWhiteSpacesAndComments(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tint start = expression.sourceStart;", "-\t\tint end = expression.sourceEnd;", "+\t\tint[] positions = trimWhiteSpacesAndComments(expression.sourceStart, expression.sourceEnd);", "+\t\texpression.sourceStart = positions[0];", "+\t\texpression.sourceEnd = positions[1];", "+\t}", "-\t\tint trimLeftPosition = expression.sourceStart;", "-\t\tint trimRightPosition = expression.sourceEnd;", "-\t\t\t\t\t\texpression.sourceStart = trimLeftPosition;", "-\t\t\t\t\t\texpression.sourceEnd = trimRightPosition;", "-\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27739f0e4a78eaa2ca9c319ef37de4cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "commitAfterChange": "dfe6cc33aaef3c9c6160f09ab2a92557f3d235f0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\ttotalUnits = 0;", "-\t\tunitsToProcess = new CompilationUnitDeclaration[maxUnits];", "+\t\tthis.totalUnits = 0;", "+\t\tthis.unitsToProcess = new CompilationUnitDeclaration[maxUnits];", "-\t\t// Switch the current policy and compilation result for this unit to the requested one.", "-\t\tfor (int i = 0; i < maxUnits; i++) {", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tCompilationResult unitResult =", "-\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "-\t\t\ttry {", "-\t\t\t\tif (options.verbose) {", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(maxUnits),", "-\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\t// diet parsing for large collection of units", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t\t}", "-\t\t\t\t// initial type binding creation", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "-\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "-\t\t\t\tif (currentPackage != null) {", "-\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "-\t\t\t\t}", "-\t\t\t\t//} catch (AbortCompilationUnit e) {", "-\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} finally {", "-\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "-\t\t\t}", "-\t\t}", "-\t\t// binding resolution", "-\t\tlookupEnvironment.completeTypeBindings();", "-\t}", "+\t\tinternalBeginToCompile(sourceUnits, maxUnits);"]}], "num": 28257}
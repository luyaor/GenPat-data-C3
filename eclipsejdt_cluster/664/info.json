{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae2410ab52b1752446ca6334c6b2700f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325a85436c1f9beac4f25edb8a1855e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 50, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\tpublic Expression convert(BinaryExpression expression) {", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression) {", "-\t\tint expressionOperatorID = (expression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT;", "+\t\tint expressionOperatorID = (expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT;", "-\t\t\tcase OperatorIds.EQUAL_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\tcase OperatorIds.LESS_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\tcase OperatorIds.GREATER_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\tcase OperatorIds.NOT_EQUAL :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\tcase OperatorIds.LEFT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\tcase OperatorIds.RIGHT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\tcase OperatorIds.UNSIGNED_RIGHT_SHIFT :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\tcase OperatorIds.OR_OR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\tcase OperatorIds.AND_AND :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\tcase OperatorIds.PLUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\tcase OperatorIds.MINUS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\tcase OperatorIds.REMAINDER :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\tcase OperatorIds.XOR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\tcase OperatorIds.AND :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\tcase OperatorIds.MULTIPLY :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\tcase OperatorIds.OR :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\tcase OperatorIds.DIVIDE :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\tcase OperatorIds.GREATER :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\tcase OperatorIds.LESS :", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\tif (expression.left instanceof BinaryExpression && ((expression.left.bits & AstNode.ParenthesizedMASK) == 0)) {", "+\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "-\t\t\t\trightOperand = ((BinaryExpression) leftOperand).right;", "-\t\t\t\tif ((((leftOperand.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0))", "-\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & AstNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\trightOperand = ((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) leftOperand).right;", "+\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "+\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "-\t\t\t\tleftOperand = ((BinaryExpression) leftOperand).left;", "-\t\t\t} while (leftOperand instanceof BinaryExpression && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0));", "+\t\t\t\tleftOperand = ((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) leftOperand).left;", "+\t\t\t} while (leftOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc81e4621bc058d3d4af053857b489f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 104, "signatureBeforeChange": "  \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "signatureAfterChange": " \t \tprotected InfixExpression.Operator getOperatorFor(int operatorID)", "diff": ["+\t", "+\tprotected InfixExpression.Operator getOperatorFor(int operatorID) {", "+\t\tswitch (operatorID) {", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.LESS_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.GREATER_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.NOT_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.LEFT_SHIFT;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_SIGNED;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "+\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_OR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "+\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_AND;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "+\t\t\t\treturn InfixExpression.Operator.PLUS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "+\t\t\t\treturn InfixExpression.Operator.MINUS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "+\t\t\t\treturn InfixExpression.Operator.REMAINDER;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "+\t\t\t\treturn InfixExpression.Operator.XOR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "+\t\t\t\treturn InfixExpression.Operator.AND;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "+\t\t\t\treturn InfixExpression.Operator.TIMES;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "+\t\t\t\treturn InfixExpression.Operator.OR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "+\t\t\t\treturn InfixExpression.Operator.DIVIDE;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "+\t\t\t\treturn InfixExpression.Operator.GREATER;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "+\t\t\t\treturn InfixExpression.Operator.LESS;", "+\t\t}", "+\t\treturn null;", "+\t}", "-\tprivate InfixExpression.Operator getOperatorFor(int operatorID) {", "-\t\tswitch (operatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.LESS_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.GREATER_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.NOT_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.LEFT_SHIFT;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_SIGNED;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_OR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_AND;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\treturn InfixExpression.Operator.PLUS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\treturn InfixExpression.Operator.MINUS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\treturn InfixExpression.Operator.REMAINDER;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\treturn InfixExpression.Operator.XOR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\treturn InfixExpression.Operator.AND;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\treturn InfixExpression.Operator.TIMES;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\treturn InfixExpression.Operator.OR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\treturn InfixExpression.Operator.DIVIDE;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\treturn InfixExpression.Operator.GREATER;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\treturn InfixExpression.Operator.LESS;", "-\t\treturn null;"]}], "num": 664}
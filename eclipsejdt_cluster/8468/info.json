{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a13019234e55688dd6d8c14e4d4d6dfa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9f573ce87a02cd402acae9a5fd334e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "ca0a8d2a8dcbdca4c1d22b2aafd247d22556e537", "commitAfterChange": "1155b311a647fc5f126edd0c5e6b818f225baee0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void endVisit(Block node)", "signatureAfterChange": "  \tpublic void endVisit(Block node)", "diff": ["-\t\tint level = node.getAST().apiLevel;", "-\t\t", "-\t\tList statements = node.statements();", "-\t\tnext : for (int i = 0, max = statements.size(); i < max; i++) {", "-\t\t\tASTNode statement = (ASTNode) statements.get(i);", "-\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "-\t\t\t\tVariableDeclarationStatement variableDeclarationStatement =  (VariableDeclarationStatement) statement;", "-\t\t\t\t", "-\t\t\t\tif (level == AST.JLS2_INTERNAL) {", "-\t\t\t\t\tif (variableDeclarationStatement.getModifiers() != Modifier.NONE) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (level >= AST.JLS3_INTERNAL) {", "-\t\t\t\t\tif (variableDeclarationStatement.modifiers().size() != 0) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tType type = variableDeclarationStatement.getType();", "-\t\t\t\tif (type.getNodeType() != ASTNode.SIMPLE_TYPE) {", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tList fragments = variableDeclarationStatement.fragments();", "-\t\t\t\tif (fragments.size() == 1) {", "-\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\t\t\t", "-\t\t\t\t\tSimpleName simpleName = fragment.getName();", "-\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "-\t\t\t\t\t\tSimpleType simpleType = (SimpleType) type;", "-\t\t\t\t\t\tName name = simpleType.getName();", "-\t\t\t\t\t\tname.setParent(null, null);", "-\t\t\t\t\t\tname.setFlags(name.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tfinal ExpressionStatement stmt = new ExpressionStatement(name.getAST());", "-\t\t\t\t\t\tstmt.setExpression(name);", "-\t\t\t\t\t\tstmt.setSourceRange(variableDeclarationStatement.getStartPosition(), variableDeclarationStatement.getLength());", "-\t\t\t\t\t\tstmt.setFlags(stmt.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tstatements.add(i, stmt);", "-\t\t\t\t\t\tstatements.remove(variableDeclarationStatement);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86fb9ca4d0654cd9a6b77ca26c180b18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "commitAfterChange": "52597fb7db7ddfe8d0d19142d700054ae1d908a1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "diff": ["-\t\t", "-\t\t// register a preference listener so that we can watch for changes ", "-\t\t// to the gen src dir at the project scope...", "-\t\tIScopeContext projScope = new ProjectScope(aptProject.getJavaProject().getProject());", "-\t\tIEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);", "-\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\t", "-\t\t\t\tfinal String newValue = (String)event.getNewValue();", "-\t\t\t\tif (newValue == null) {", "-\t\t\t\t\t// Null is used to indicate this preference has", "-\t\t\t\t\t// been removed, as the project has been deleted.", "-\t\t\t\t\t// We do nothing", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tfinal String oldValue = (String)event.getOldValue();", "-\t\t\t\tif (newValue.equals(oldValue)) {", "-\t\t\t\t\t// No-op -- same config", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnewValue + ", "-\t\t\t\t\t\t\t\t\" old value = \"  + oldValue + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "-\t\t\t\t\t// If APT is enabled, ", "-\t\t\t\t\t// clean up the old cp entry, delete the old folder, ", "-\t\t\t\t\t// create the new one and update the classpath.", "-\t\t\t\t\tif( aptEnabled )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder( newValue, oldValue );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetGeneratedSourceFolderName(newValue);", "-\t\t\t\t}", "-\t\t\t\telse if(AptPreferenceConstants.APT_ENABLED.equals(event.getKey()) ){", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tAptPlugin.trace(\"Got preference change event for \" + AptPreferenceConstants.APT_ENABLED ); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// no-op;", "-\t\t\t\t\tif(newValue.equals(oldValue)){", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tfinal boolean isEnabling = Boolean.parseBoolean(newValue);", "-\t\t\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tAptPlugin.trace(\"diabling APT \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif( isEnabling )", "-\t\t\t\t\t\tconfigureGeneratedSourceFolder();", "-\t\t\t\t\telse{", "-\t\t\t\t\t\tfinal IFolder srcFolder = getGeneratedSourceFolder();", "-\t\t\t\t\t\tprojectClean(true);", "-\t\t\t\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\tprojPrefs.addPreferenceChangeListener(projListener);", "-\t\t", "-\t\t// ...and at the workspace scope.", "-\t\t// Note we check all projects, even those that have project-specific", "-\t\t// settings, when the workspace setting changes.  For projects with", "-\t\t// project-specific settings, the value of the setting won't change ", "-\t\t// so the request will be ignored.", "-\t\tIScopeContext wkspScope = new InstanceScope();", "-\t\tIEclipsePreferences wkspPrefs = wkspScope.getNode(AptPlugin.PLUGIN_ID);", "-\t\tIPreferenceChangeListener wkspListener = new IPreferenceChangeListener() {", "-\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "-\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "-\t\t\t\t\tconfigureGeneratedSourceFolder( AptConfig.getGenSrcDir(javaProject), null );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\twkspPrefs.addPreferenceChangeListener(wkspListener);"]}], "num": 8468}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e98672e4683079c4979d507313a63f54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8707c5128fd9347c5d7742dc494257af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["+\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t", "-\t\t\tif (token.length <= lengthField.length", "+\t\t\tif (proposeField", "+\t\t\t\t&& token.length <= lengthField.length", "-\t\t\tif (token.length <= cloneMethod.length", "+\t\t\tif (proposeMethod", "+\t\t\t\t&& token.length <= cloneMethod.length", "-\t\tfindFields(", "-\t\t\ttoken,", "-\t\t\t(ReferenceBinding) receiverType,", "-\t\t\tscope,", "-\t\t\tnew ObjectVector(),", "-\t\t\tnew ObjectVector(),", "-\t\t\tfalse,", "-\t\t\tinvocationSite,", "-\t\t\tinvocationScope,", "-\t\t\timplicitCall,", "-\t\t\ttrue);", "+\t\tif(proposeField) {", "+\t\t\tfindFields(", "+\t\t\t\ttoken,", "+\t\t\t\t(ReferenceBinding) receiverType,", "+\t\t\t\tscope,", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tinvocationScope,", "+\t\t\t\timplicitCall,", "+\t\t\t\ttrue);", "+\t\t}", "-\t\tfindMethods(", "-\t\t\ttoken,", "-\t\t\tnull,", "-\t\t\t(ReferenceBinding) receiverType,", "-\t\t\tscope,", "-\t\t\tmethodsFound,", "-\t\t\tfalse,", "-\t\t\tfalse,", "-\t\t\tfalse,", "-\t\t\tinvocationSite,", "-\t\t\tinvocationScope,", "-\t\t\timplicitCall,", "-\t\t\tsuperCall,", "-\t\t\ttrue);", "+\t\tif(proposeMethod) {", "+\t\t\tfindMethods(", "+\t\t\t\ttoken,", "+\t\t\t\tnull,", "+\t\t\t\t(ReferenceBinding) receiverType,", "+\t\t\t\tscope,", "+\t\t\t\tmethodsFound,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tinvocationScope,", "+\t\t\t\timplicitCall,", "+\t\t\t\tsuperCall,", "+\t\t\t\ttrue);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5b382cf284bf039b6bf2a87de3444fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3ff7b81bced83cc6ffeee9cd4ddf361110eeeb98", "commitAfterChange": "25f2a2d3f2ea6a2ed84c0af6dba49f7f2a42eab8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\tfindFields(\r", "-\t\t\t\tfieldName,\r", "-\t\t\t\tcurrentType.availableFields(),\r", "-\t\t\t\tscope,\r", "-\t\t\t\tfieldsFound,\r", "-\t\t\t\tlocalsFound,\r", "-\t\t\t\tonlyStaticFields,\r", "-\t\t\t\treceiverType,\r", "-\t\t\t\tinvocationSite,\r", "-\t\t\t\tinvocationScope,\r", "-\t\t\t\timplicitCall);\r", "+\t\t\tFieldBinding[] fields = currentType.availableFields();\r", "+\t\t\tif(fields != null) {\r", "+\t\t\t\tfindFields(\r", "+\t\t\t\t\tfieldName,\r", "+\t\t\t\t\tfields,\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tfieldsFound,\r", "+\t\t\t\t\tlocalsFound,\r", "+\t\t\t\t\tonlyStaticFields,\r", "+\t\t\t\t\treceiverType,\r", "+\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\timplicitCall);\r", "+\t\t\t}\r", "-\t\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\t\tfieldName,\r", "-\t\t\t\t\t\t\tanInterface.availableFields(),\r", "-\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\tfieldsFound,\r", "-\t\t\t\t\t\t\tlocalsFound,\r", "-\t\t\t\t\t\t\tonlyStaticFields,\r", "-\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\t\tinvocationScope,\r", "-\t\t\t\t\t\t\timplicitCall);\r", "+\t\t\t\t\t\tFieldBinding[] fields = anInterface.availableFields();\r", "+\t\t\t\t\t\tif(fields !=  null) {\r", "+\t\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\t\tfieldName,\r", "+\t\t\t\t\t\t\t\tfields,\r", "+\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\tfieldsFound,\r", "+\t\t\t\t\t\t\t\tlocalsFound,\r", "+\t\t\t\t\t\t\t\tonlyStaticFields,\r", "+\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\t\t\t\timplicitCall);\r", "+\t\t\t\t\t\t}\r"]}], "num": 68076}
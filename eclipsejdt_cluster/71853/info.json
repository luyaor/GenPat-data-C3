{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a027510f8959725a4e1cbbd4c8cd813", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c3146b8d989953a0fdcfec8b8990ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCodeStream.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void checkcast(int baseId)", "signatureAfterChange": " protected void checkcast(int baseId)", "diff": ["-\tcountLabels = 0;", "+\tthis.countLabels = 0;", "-\t\tposition++;", "-\t\tbCodeStream[classFileOffset++] = OPC_checkcast;", "+\t\tthis.position++;", "+\t\tthis.bCodeStream[this.classFileOffset++] = OPC_checkcast;", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangByte());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangByte());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangShort());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangShort());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangCharacter());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangCharacter());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangInteger());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangInteger());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangLong());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangLong());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangFloat());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangFloat());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangDouble());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangDouble());", "-\t\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangBoolean());", "+\t\t\twriteUnsignedShort(this.constantPool.literalIndexForJavaLangBoolean());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33da6d8fbd65b0a49378497ce90a22fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tchar[][] excludeNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "signatureAfterChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tchar[][] excludeNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "diff": ["-\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\trequestor.acceptVariableName(", "+\t\t\t\t\tCompletionEngine.this.noProposal = false;", "+\t\t\t\t\tCompletionEngine.this.requestor.acceptVariableName(", "-\t\t\t\t\t\tstartPosition - offset,", "-\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\tCompletionEngine.this.startPosition - CompletionEngine.this.offset,", "+\t\t\t\t\t\tCompletionEngine.this.endPosition - CompletionEngine.this.offset,", "-\t\t\t\t\tjavaProject,", "+\t\t\t\t\tthis.javaProject,", "-\t\t\t\t\tjavaProject,", "+\t\t\t\t\tthis.javaProject,", "-\t\t\t\t\tjavaProject,", "+\t\t\t\t\tthis.javaProject,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d97cc7f9eea4d623cd0523abaaa523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " protected void consumeMethodDeclaration(boolean isNotAbstract)", "signatureAfterChange": " protected void consumeMethodDeclaration(boolean isNotAbstract)", "diff": ["-\t\tintPtr--;", "-\t\tintPtr--;", "+\t\tthis.intPtr--;", "+\t\tthis.intPtr--;", "-\t\texplicitDeclarations = realBlockStack[realBlockPtr--];", "-\t\tif ((length = astLengthStack[astLengthPtr--]) != 0) {", "+\t\texplicitDeclarations = this.realBlockStack[this.realBlockPtr--];", "+\t\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\t\t\tastStack, ", "-\t\t\t\t(astPtr -= length) + 1, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\t(this.astPtr -= length) + 1, ", "-\tMethodDeclaration md = (MethodDeclaration) astStack[astPtr];", "+\tMethodDeclaration md = (MethodDeclaration) this.astStack[this.astPtr];", "-\t\tif (!diet && statements == null) {", "-\t\t\tif (!containsComment(md.bodyStart, endPosition)) {", "+\t\tif (!this.diet && statements == null) {", "+\t\t\tif (!containsComment(md.bodyStart, this.endPosition)) {", "-\tmd.bodyEnd = endPosition;", "-\tmd.declarationSourceEnd = flushCommentsDefinedPriorTo(endStatementPosition);", "+\tmd.bodyEnd = this.endPosition;", "+\tmd.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b6c8741a24d25a03702dc3fbeec435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "+\tint pc = codeStream.position;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "-\t\tint pc = codeStream.position;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t} else {", "+\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\t\tif (lastFieldBinding != null) {", "+\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\t\t\t\tif (valueRequired  ", "+\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSyntheticMethodBinding accessor =", "+\t\t\t\t\t\t\tthis.syntheticReadAccessors == null", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\tif (valueRequired) { // inline the last field constant", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "-\t\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\t\t\t\tif (valueRequired  ", "-\t\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\t\t\t\t\t|| ((implicitConversion & TypeIds.UNBOXING) != 0)", "-\t\t\t\t\t\t\t|| requiredGenericCast != null) {", "-\t\t\t\t\t\tint lastFieldPc = codeStream.position;", "-\t\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\t\t\t\tcodeStream.arraylength();", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSyntheticMethodBinding accessor =", "-\t\t\t\t\t\t\t\tsyntheticReadAccessors == null", "-\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "-\t\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t\t\t\t\t\t// conversion only generated if unboxing", "-\t\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "-\t\t\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (!isStatic){", "-\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e1c98e6c98f49fef16400a1b11ca950", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "fced1a7a2b8f5ce77723d058091976d51b43704e", "commitAfterChange": "6900dd1a03d1ad901ee84c7d15bd4e318744abe6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void acceptQualifiedTypes()", "signatureAfterChange": "  \tprivate void acceptQualifiedTypes()", "diff": ["-\t\tif(acceptedClasses != null){", "+\t\tif(this.acceptedClasses != null){", "-\t\t\tfor (int i = 0; i < acceptedClassesCount; i++) {", "-\t\t\t\tnoProposal = false;", "+\t\t\tfor (int i = 0; i < this.acceptedClassesCount; i++) {", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tacceptedClasses[i][0],", "-\t\t\t\t\tacceptedClasses[i][1],", "+\t\t\t\t\tthis.acceptedClasses[i][0],", "+\t\t\t\t\tthis.acceptedClasses[i][1],", "-\t\t\tacceptedClasses = null;", "-\t\t\tacceptedClassesCount = 0;", "+\t\t\tthis.acceptedClasses = null;", "+\t\t\tthis.acceptedClassesCount = 0;", "-\t\tif(acceptedInterfaces != null){", "+\t\tif(this.acceptedInterfaces != null){", "-\t\t\tfor (int i = 0; i < acceptedInterfacesCount; i++) {", "-\t\t\t\tnoProposal = false;", "+\t\t\tfor (int i = 0; i < this.acceptedInterfacesCount; i++) {", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\tacceptedInterfaces[i][0],", "-\t\t\t\t\tacceptedInterfaces[i][1],", "+\t\t\t\t\tthis.acceptedInterfaces[i][0],", "+\t\t\t\t\tthis.acceptedInterfaces[i][1],", "-\t\t\tacceptedInterfaces = null;", "-\t\t\tacceptedInterfacesCount = 0;", "+\t\t\tthis.acceptedInterfaces = null;", "+\t\t\tthis.acceptedInterfacesCount = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8283e9c0db5df53bc3f0b498c562b9e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "fced1a7a2b8f5ce77723d058091976d51b43704e", "commitAfterChange": "6900dd1a03d1ad901ee84c7d15bd4e318744abe6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\tif (qualifiedSelection != null", "-\t\t\t\t&& !CharOperation.equals(qualifiedSelection, typeBinding.readableName())) {", "+\t\t\tif (this.qualifiedSelection != null", "+\t\t\t\t&& !CharOperation.equals(this.qualifiedSelection, typeBinding.readableName())) {", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\tnoProposal = false;", "+\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\tactualSelectionStart,", "-\t\t\t\t\t\tactualSelectionEnd);", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t\t\tactualSelectionStart,", "-\t\t\t\t\t\tactualSelectionEnd);", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t\t\t\tnoProposal = false;", "+\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\t\t\t\trequestor.acceptPackage(packageBinding.readableName());", "+\t\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\t\tthis.requestor.acceptPackage(packageBinding.readableName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8338f7ea32dccfb41b226874e235ea88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblem.java", "commitBeforeChange": "38626b9db6f4c23d6e28ba50c8dfcdc942780467", "commitAfterChange": "3f8b6386f2cd9ac0059fbfe82973e311a492a851", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic String errorReportSource(char[] unitSource)", "signatureAfterChange": " \tpublic String errorReportSource(char[] unitSource)", "diff": ["-\t\tif ((startPosition > endPosition)", "-\t\t\t|| ((startPosition < 0) && (endPosition < 0)))", "+\t\tif ((this.startPosition > this.endPosition)", "+\t\t\t|| ((this.startPosition < 0) && (this.endPosition < 0)))", "-\t\terrorBuffer.append(Util.bind(\"problem.atLine\", String.valueOf(line))); //$NON-NLS-1$", "+\t\terrorBuffer.append(Util.bind(\"problem.atLine\", String.valueOf(this.line))); //$NON-NLS-1$", "-\t\tfor (begin = startPosition >= length ? length - 1 : startPosition; begin > 0; begin--) {", "+\t\tfor (begin = this.startPosition >= length ? length - 1 : this.startPosition; begin > 0; begin--) {", "-\t\tfor (end = endPosition >= length ? length - 1 : endPosition ; end+1 < length; end++) {", "+\t\tfor (end = this.endPosition >= length ? length - 1 : this.endPosition ; end+1 < length; end++) {", "-\t\tfor (int i = begin; i <startPosition; i++) {", "+\t\tfor (int i = begin; i <this.startPosition; i++) {", "-\t\tfor (int i = startPosition; i <= (endPosition >= length ? length - 1 : endPosition); i++) {", "+\t\tfor (int i = this.startPosition; i <= (this.endPosition >= length ? length - 1 : this.endPosition); i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94f2ba128b4032914c8ed19fae3e6575", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " protected void consumeLocalVariableDeclaration()", "signatureAfterChange": " protected void consumeLocalVariableDeclaration()", "diff": ["-\tint variableDeclaratorsCounter = astLengthStack[astLengthPtr];", "+\tint variableDeclaratorsCounter = this.astLengthStack[this.astLengthPtr];", "-\tint startIndex = astPtr - variablesCounter[nestedType] + 1;", "+\tint startIndex = this.astPtr - this.variablesCounter[this.nestedType] + 1;", "-\t\tastStack, ", "+\t\tthis.astStack, ", "-\t\tastStack, ", "+\t\tthis.astStack, ", "-\tastPtr--; // remove the type reference", "-\tastLengthStack[--astLengthPtr] = variableDeclaratorsCounter;", "-\tvariablesCounter[nestedType] = 0;", "+\tthis.astPtr--; // remove the type reference", "+\tthis.astLengthStack[--this.astLengthPtr] = variableDeclaratorsCounter;", "+\tthis.variablesCounter[this.nestedType] = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ade3aaa48cc81f2cbdb66a62d6f61f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " protected void consumeStatementIfWithElse()", "signatureAfterChange": " protected void consumeStatementIfWithElse()", "diff": ["-\texpressionLengthPtr--;", "+\tthis.expressionLengthPtr--;", "-\tastLengthPtr--;", "+\tthis.astLengthPtr--;", "-\tastStack[--astPtr] = ", "+\tthis.astStack[--this.astPtr] = ", "-\t\t\texpressionStack[expressionPtr--], ", "-\t\t\t(Statement) astStack[astPtr], ", "-\t\t\t(Statement) astStack[astPtr + 1], ", "-\t\t\tintStack[intPtr--], ", "-\t\t\tendStatementPosition); ", "+\t\t\tthis.expressionStack[this.expressionPtr--], ", "+\t\t\t(Statement) this.astStack[this.astPtr], ", "+\t\t\t(Statement) this.astStack[this.astPtr + 1], ", "+\t\t\tthis.intStack[this.intPtr--], ", "+\t\t\tthis.endStatementPosition); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4144a4c5dac603780c6889a8696775b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\t\tsyntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super", "+\t} else if (this.receiver instanceof QualifiedSuperReference){ // qualified super", "-\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);", "-\t\tsyntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)this.receiver).currentCompatibleType);", "+\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t} else if (binding.isProtected()){", "+\t} else if (this.binding.isProtected()){", "-\t\tif (((bits & DepthMASK) != 0) ", "+\t\tif (((this.bits & ASTNode.DepthMASK) != 0) ", "-\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "-\t\t\tsyntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "-\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object methods", "+\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(this.receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "+\t\t\t\t&& this.binding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object methods"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ef8ca248eedebfb9e87d76eab8f0bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 266, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tfor (int i = 0; i <= identifierPtr; i++) {", "-\t\ts = s + \"\\\"\" + String.valueOf(identifierStack[i]) + \"\\\",\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\tfor (int i = 0; i <= this.identifierPtr; i++) {", "+\t\ts = s + \"\\\"\" + String.valueOf(this.identifierStack[i]) + \"\\\",\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\tfor (int i = 0; i <= identifierLengthPtr; i++) {", "-\t\ts = s + identifierLengthStack[i] + \",\"; //$NON-NLS-1$", "+\tfor (int i = 0; i <= this.identifierLengthPtr; i++) {", "+\t\ts = s + this.identifierLengthStack[i] + \",\"; //$NON-NLS-1$", "-\tfor (int i = 0; i <= astLengthPtr; i++) {", "-\t\ts = s + astLengthStack[i] + \",\"; //$NON-NLS-1$", "+\tfor (int i = 0; i <= this.astLengthPtr; i++) {", "+\t\ts = s + this.astLengthStack[i] + \",\"; //$NON-NLS-1$", "-\ts = s + \"astPtr : int = \" + String.valueOf(astPtr) + \"\\n\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\ts = s + \"astPtr : int = \" + String.valueOf(this.astPtr) + \"\\n\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\tfor (int i = 0; i <= intPtr; i++) {", "-\t\ts = s + intStack[i] + \",\"; //$NON-NLS-1$", "+\tfor (int i = 0; i <= this.intPtr; i++) {", "+\t\ts = s + this.intStack[i] + \",\"; //$NON-NLS-1$", "-\tfor (int i = 0; i <= expressionLengthPtr; i++) {", "-\t\ts = s + expressionLengthStack[i] + \",\"; //$NON-NLS-1$", "+\tfor (int i = 0; i <= this.expressionLengthPtr; i++) {", "+\t\ts = s + this.expressionLengthStack[i] + \",\"; //$NON-NLS-1$", "-\ts = s + \"expressionPtr : int = \" + String.valueOf(expressionPtr) + \"\\n\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\ts = s + \"expressionPtr : int = \" + String.valueOf(this.expressionPtr) + \"\\n\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts = s + \"\\n\\n\\n----------------Scanner--------------\\n\" + scanner.toString(); //$NON-NLS-1$", "+\ts = s + \"\\n\\n\\n----------------Scanner--------------\\n\" + this.scanner.toString(); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e64bd6beb69480a3c23230f91d2c3214", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\t \t\tpublic ParentIterator()", "signatureAfterChange": " \t\t \t\tpublic ParentIterator()", "diff": ["-\t\t\tthis.eventIter= events.iterator();", "-\t\t\tif (nodeCopySources != null) {", "-\t\t\t\tthis.sourceNodeIter= nodeCopySources.iterator();", "+\t\t\tthis.eventIter= RewriteEventStore.this.events.iterator();", "+\t\t\tif (RewriteEventStore.this.nodeCopySources != null) {", "+\t\t\t\tthis.sourceNodeIter= RewriteEventStore.this.nodeCopySources.iterator();", "-\t\t\tif (rangeCopySources != null) {", "-\t\t\t\tthis.rangeNodeIter= rangeCopySources.iterator();", "+\t\t\tif (RewriteEventStore.this.rangeCopySources != null) {", "+\t\t\t\tthis.rangeNodeIter= RewriteEventStore.this.rangeCopySources.iterator();", "-\t\t\tif (trackedNodes != null) {", "-\t\t\t\tthis.trackedNodeIter= trackedNodes.keySet().iterator();", "+\t\t\tif (RewriteEventStore.this.trackedNodes != null) {", "+\t\t\t\tthis.trackedNodeIter= RewriteEventStore.this.trackedNodes.keySet().iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b9c57082fe5996bc044c2e804ee68e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": " protected void consumeUnaryExpression(int op)", "signatureAfterChange": " protected void consumeUnaryExpression(int op)", "diff": ["-\tExpression r, exp = expressionStack[expressionPtr];", "+\tExpression r, exp = this.expressionStack[this.expressionPtr];", "-\t\t\tr = expressionStack[expressionPtr] = new IntLiteralMinValue();", "+\t\t\tr = this.expressionStack[this.expressionPtr] = new IntLiteralMinValue();", "-\t\t\t\tr = expressionStack[expressionPtr] = new LongLiteralMinValue();", "+\t\t\t\tr = this.expressionStack[this.expressionPtr] = new LongLiteralMinValue();", "-\t\t\t\tr = expressionStack[expressionPtr] = new UnaryExpression(exp, op);", "+\t\t\t\tr = this.expressionStack[this.expressionPtr] = new UnaryExpression(exp, op);", "-\t\tr = expressionStack[expressionPtr] = new UnaryExpression(exp, op);", "+\t\tr = this.expressionStack[this.expressionPtr] = new UnaryExpression(exp, op);", "-\tr.sourceStart = intStack[intPtr--];", "+\tr.sourceStart = this.intStack[this.intPtr--];"]}], "num": 71853}
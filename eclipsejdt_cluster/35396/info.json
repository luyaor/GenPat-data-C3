{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30e4a856ca1bf62b143ab1a3e62f98dd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64cd5e02de99e43e0c81c5be5a6248ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "e4b55bd211dccbfbd971d96ae9fb1fa085f3370c", "commitAfterChange": "608a55b772f6bb6d5bb4b781bdb909738331065e", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " protected void consumeEnumConstantHeader()", "signatureAfterChange": " protected void consumeEnumConstantHeader()", "diff": ["+      anonymousType.bodyStart = this.scanner.currentPosition;", "-      this.lastCheckPoint = anonymousType.bodyStart = this.scanner.currentPosition;", "-      if (this.currentElement != null) {", "-         this.currentElement = this.currentElement.add(anonymousType, 0);", "-         this.lastIgnoredToken = -1;", "-         this.currentToken = 0; // opening brace already taken into account", "-      }", "+      if (this.currentElement != null) {", "+         this.currentElement = this.currentElement.add(anonymousType, 0);", "+       \tthis.lastCheckPoint = anonymousType.bodyStart;", "+        this.lastIgnoredToken = -1;", "+         this.currentToken = 0; // opening brace already taken into account", "+         return;", "+      }", "-      this.lastCheckPoint = enumConstant.declarationEnd + 1;", "-      this.currentElement = this.currentElement.add(enumConstant, 0);", "-//      this.currentElement.foundOpeningBrace = foundOpeningBrace;", "+\t  this.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a467982c2c7df9655c14751589ca2aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void consumeAllocationHeader()", "signatureAfterChange": " protected void consumeAllocationHeader()", "diff": ["-\tif (currentElement == null){", "+\tif (this.currentElement == null){", "-\tif (currentToken == TokenNameLBRACE){", "+\tif (this.currentToken == TokenNameLBRACE){", "-\t\tanonymousType.sourceStart = intStack[intPtr--];", "-\t\tanonymousType.sourceEnd = rParenPos; // closing parenthesis", "-\t\tlastCheckPoint = anonymousType.bodyStart = scanner.currentPosition;", "-\t\tcurrentElement = currentElement.add(anonymousType, 0);", "-\t\tlastIgnoredToken = -1;", "-\t\tcurrentToken = 0; // opening brace already taken into account", "+\t\tanonymousType.sourceStart = this.intStack[this.intPtr--];", "+\t\tanonymousType.sourceEnd = this.rParenPos; // closing parenthesis", "+\t\tthis.lastCheckPoint = anonymousType.bodyStart = this.scanner.currentPosition;", "+\t\tthis.currentElement = this.currentElement.add(anonymousType, 0);", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.currentToken = 0; // opening brace already taken into account", "-\tlastCheckPoint = scanner.startPosition; // force to restart at this exact position", "-\trestartRecovery = true; // request to restart from here on", "+\tthis.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position", "+\tthis.restartRecovery = true; // request to restart from here on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd197e6d758e0fa5c75daa0ca155f78b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void consumeCatchHeader()", "signatureAfterChange": " protected void consumeCatchHeader()", "diff": ["-\tif (currentElement == null){", "+\tif (this.currentElement == null){", "-\tif (!(currentElement instanceof RecoveredBlock)){", "-\t\tif(!(currentElement instanceof RecoveredMethod)) {", "+\tif (!(this.currentElement instanceof RecoveredBlock)){", "+\t\tif(!(this.currentElement instanceof RecoveredMethod)) {", "-\t\tRecoveredMethod rMethod = (RecoveredMethod) currentElement;", "+\t\tRecoveredMethod rMethod = (RecoveredMethod) this.currentElement;", "-\tArgument arg = (Argument)astStack[astPtr--];", "+\tArgument arg = (Argument)this.astStack[this.astPtr--];", "-\tcurrentElement = currentElement.add(localDeclaration, 0);", "-\tlastCheckPoint = scanner.startPosition; // force to restart at this exact position", "-\trestartRecovery = true; // request to restart from here on", "-\tlastIgnoredToken = -1;", "+\tthis.currentElement = this.currentElement.add(localDeclaration, 0);", "+\tthis.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position", "+\tthis.restartRecovery = true; // request to restart from here on", "+\tthis.lastIgnoredToken = -1;"]}], "num": 35396}
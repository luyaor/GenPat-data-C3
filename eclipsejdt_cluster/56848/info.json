{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d463e3540c45ef2af0ad48b5fc458223", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7249b2040b1e0a660571e58622408752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8cb3365a924e5869d5c8a5715a80d4cd8189b243", "commitAfterChange": "4ec04ec7ec987de2e86c2ac8cdacbf6a8acd72a4", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic ReferenceBinding[] superInterfaces()", "signatureAfterChange": " \tpublic ReferenceBinding[] superInterfaces()", "diff": ["-\t    \t\tif (this.type.isHierarchyBeingConnected())", "-\t    \t\t\treturn Binding.NO_SUPERINTERFACES; // prevent superinterfaces from being assigned before they are connected", "-\t    \t\tthis.superInterfaces = Scope.substitute(this, this.type.superInterfaces());", "+    \t\tif (this.type.isHierarchyBeingConnected())", "+    \t\t\treturn Binding.NO_SUPERINTERFACES; // prevent superinterfaces from being assigned before they are connected", "+    \t\tthis.superInterfaces = Scope.substitute(this, this.type.superInterfaces());", "+    \t\tif (this.superInterfaces != null) {", "+\t    \t\tfor (int i = this.superInterfaces.length; --i >= 0;) {", "+\t    \t\t\tthis.typeBits |= (this.superInterfaces[i].typeBits & TypeIds.InheritableBits);", "+\t    \t\t\tif ((this.typeBits & (TypeIds.BitAutoCloseable|TypeIds.BitCloseable)) != 0) // avoid the side-effects of hasTypeBit()! ", "+\t    \t\t\t\tthis.typeBits |= applyCloseableInterfaceWhitelists();", "+\t    \t\t}", "+    \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de0a8d53b30ea5a0d5b9f850f6634a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "f2fb5e44531d4df5da9264367df0b14b50434c61", "commitAfterChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public ReferenceBinding[] superInterfaces()", "signatureAfterChange": "     public ReferenceBinding[] superInterfaces()", "diff": ["+        \tif (this.typeVariable() != null) {", "+        \t\tthis.superInterfaces = this.typeVariable.superInterfaces();", "+        \t} else {", "+        \t\tthis.superInterfaces = NoSuperInterfaces;", "+        \t}", "-\t\t\t\tif (this.bound.isInterface())", "-\t\t\t\t\treturn new ReferenceBinding[] {(ReferenceBinding) this.bound};", "-\t\t\t\treturn NoSuperInterfaces;", "-\t\t\t} else if (this.typeVariable() != null) {", "-\t\t\t\treturn this.typeVariable.superInterfaces();", "+\t\t\t\tif (this.bound.isInterface()) {", "+\t\t\t\t\t// augment super interfaces with the wildcard bound", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tSystem.arraycopy(this.superInterfaces, 0, this.superInterfaces = new ReferenceBinding[length+1], 1, length);", "+\t\t\t\t\tthis.superInterfaces[0] = (ReferenceBinding) this.bound; // make bound first", "+\t\t\t\t}", "-\t\t\t// TODO (philippe) if we fall thru, we'll answer null but no one will expect it", "-\t\t\t// return NoSuperInterfaces;"]}], "num": 56848}
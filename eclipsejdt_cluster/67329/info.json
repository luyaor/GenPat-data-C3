{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3b1660ee863bfb07718181ff37c4da8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ac2781bcd77c206d1cce905c824e45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "89ec54c4f385f0879ec62813f92f9edadfbe2e55", "commitAfterChange": "fc956e4f332f45539062ed97c7419d35c84b1337", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void updateFromParserState()", "signatureAfterChange": "\r public void updateFromParserState()", "diff": ["-\t\t\tif (methodDeclaration.sourceEnd == parser.rParenPos){\r", "-\t\t\t\tparser.consumeMethodHeaderThrowsClause(); \r", "-\t\t\t\t// will reset typeListLength to zero\r", "-\t\t\t\t// thus this check will only be performed on first errorCheck after void foo() throws X, Y,\r", "+\t\t\tif (methodDeclaration.sourceEnd == parser.rParenPos) {\r", "+\t\t\t\tif (parser.astStack[parser.astPtr] instanceof TypeReference){\r", "+\t\t\t\t\tparser.consumeMethodHeaderThrowsClause(); \r", "+\t\t\t\t\t// will reset typeListLength to zero\r", "+\t\t\t\t\t// thus this check will only be performed on first errorCheck after void foo() throws X, Y,\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tparser.listLength = 0;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "724331fc304473d383e9a613a44c283a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "7cc8b716f398522fb04bd2b8ecf18989910b4ee2", "commitAfterChange": "4b0e88ec5088c7c00e913a56a58f9a382d280fe7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private IGenericType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IGenericType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\t\tif (superclassName != null) { // if original is not java.lang.Object", "+\t\t\t", "+\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "-\t\t\t\treturn new MissingType(new String(simpleName));", "+\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "+\t\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\t\treturn new MissingType(new String(simpleName));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d6c1c3e8407d28b3cf254c112d5b4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "289dce143850c03aff8ce780ffcfc4ff9946c93b", "commitAfterChange": "627ddb655d5f70180ea3a2ef27ecd181e1d5ac35", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodInfo otherMethodInfo)", "signatureAfterChange": " private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodInfo otherMethodInfo)", "diff": ["+\t// generic signature", "+\tif (!CharOperation.equals(currentMethodInfo.getGenericSignature(), otherMethodInfo.getGenericSignature()))", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3299862dd247c6ed941e50edd64c84e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "86cead58798f5caa4476f61f10c4efc894a8de75", "commitAfterChange": "db7728bc6aec6a13a8ea5468cf8a91349da9337e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tactionInfo = action.analyseCode(\r", "-\t\t\tscope, \r", "-\t\t\tloopingContext, \r", "-\t\t\t((condition != null) && (condition.constant != NotAConstant) && (condition.constant.booleanValue() == false)) ? // unreachable when condition inlined to false\r", "+\r", "+\t\tactionInfo = ((condition != null) && (condition.constant != NotAConstant) && (condition.constant.booleanValue() == false)) ? // unreachable when condition inlined to false\r", "-\t\t\t\tinitsWhenTrue.copy());\r", "+\t\t\t\tinitsWhenTrue.copy();\r", "+\t\tif (!actionInfo.complainIfUnreachable(action, scope)){\r", "+\t\t\tactionInfo = action.analyseCode(scope, loopingContext, actionInfo);\r", "+\t\t}\r"]}], "num": 67329}
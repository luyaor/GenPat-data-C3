{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb09640fb4217db9337e7778aa186b6e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "702fdcd71bc9cb14ca66ff694c3aecd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "8542678e2ceb736a9d19d031551da2cab5ea4a72", "commitAfterChange": "4ac6f89083748b9c4fc37b738ed82ea1a7c9c63b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["+\t// TODO (stephan): unclear if this srcMethod is actually needed", "+\tAbstractMethodDeclaration srcMethod = null;", "+\tif (analyseNullAnnotations && this.type.equals(concreteMethod.declaringClass)) // is currentMethod from the current type?", "+\t\tsrcMethod = concreteMethod.sourceMethod();", "+\tboolean hasNonNullDefault = concreteMethod.hasNonNullDefault();", "-\t\tif (analyseNullAnnotations && !concreteMethod.isStatic() && !abstractMethod.isStatic())", "-\t\t\tcheckNullSpecInheritance(concreteMethod, abstractMethod);", "+\t\tif (analyseNullAnnotations && !concreteMethod.isStatic() && !abstractMethod.isStatic()) {", "+\t\t\tcheckNullSpecInheritance(concreteMethod, srcMethod, hasNonNullDefault, true, abstractMethod, this.type.scope, null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81a3e801e70d824145a225ea3fbc88a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a8ed5c9ce2b125913ea11ffa5f66b79c1153133a", "commitAfterChange": "aff037e4075d974a1198e8a25c9e7f07acc35fc1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["+\t// TODO (stephan): unclear if this srcMethod is actually needed", "+\tAbstractMethodDeclaration srcMethod = null;", "+\tif (analyseNullAnnotations && this.type.equals(concreteMethod.declaringClass)) // is currentMethod from the current type?", "+\t\tsrcMethod = concreteMethod.sourceMethod();", "+\tboolean hasNonNullDefault = concreteMethod.hasNonNullDefault();", "-\t\tif (analyseNullAnnotations && !concreteMethod.isStatic() && !abstractMethod.isStatic())", "-\t\t\tcheckNullSpecInheritance(concreteMethod, abstractMethod);", "+\t\tif (analyseNullAnnotations && !concreteMethod.isStatic() && !abstractMethod.isStatic()) {", "+\t\t\tcheckNullSpecInheritance(concreteMethod, srcMethod, hasNonNullDefault, true, abstractMethod, this.type.scope, null);", "+\t\t}"]}], "num": 61223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25b52c763a514693d9943a41fbb555d7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca4c6c3a2bd68c710ffcdde9bc7767ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "8032392aee6168afb7d9361a5e7c32ded0b6567a", "commitAfterChange": "af7c555b94268663ad75bc44adea174c67a820bf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\tIIndexSearchRequestor orCombiner;", "-\tif (detailLevel == IInfoConstants.NameInfo) {", "-\t\torCombiner = new OrNameCombiner(requestor);", "-\t} else {", "-\t\torCombiner = new OrPathCombiner(requestor);", "-\t}", "+\tIIndexSearchRequestor orCombiner = ", "+\t\tdetailLevel == IInfoConstants.NameInfo", "+\t\t\t? (IIndexSearchRequestor) new OrNameCombiner(requestor)", "+\t\t\t: (IIndexSearchRequestor) new OrPathCombiner(requestor);", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "+\tif (progressMonitor != null && progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e44315c5830cffc674b256361b882edf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern)", "signatureAfterChange": " public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern)", "diff": ["-public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern) {", "-\tIProject project = javaProject.getProject();", "-\tfinal IPath container = project.getFullPath();", "-\tIContainer folder;", "-\tif (container.equals(sourceFolder)) {", "-\t\tfolder = project;", "-\t} else {", "-\t\tfolder = ResourcesPlugin.getWorkspace().getRoot().getFolder(sourceFolder);", "-\ttry {", "-\t\tfolder.accept(new IResourceVisitor() {", "-\t\t\t/*", "-\t\t\t * @see IResourceVisitor#visit(IResource)", "-\t\t\t */", "-\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\tif (resource instanceof IFile) {", "-\t\t\t\t\tif (org.eclipse.jdt.internal.core.Util.isJavaFileName(resource.getName()) ", "-\t\t\t\t\t\t\t&& !org.eclipse.jdt.internal.core.Util.isExcluded(resource, exclusionPattern)) {", "-\t\t\t\t\t\taddSource((IFile)resource, container);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t});", "-\t} catch (CoreException e) {", "-\t\t// Folder does not exist.", "-\t\t// It will be indexed only when DeltaProcessor detects its addition", "+ */", "+public void indexSourceFolder(JavaProject javaProject, IPath sourceFolder, final char[][] exclusionPattern) {", "+\tIProject project = javaProject.getProject();", "+\tfinal IPath container = project.getFullPath();", "+\tIContainer folder = container.equals(sourceFolder)", "+\t\t? (IContainer) project", "+\t\t : (IContainer) ResourcesPlugin.getWorkspace().getRoot().getFolder(sourceFolder);", "+\ttry {", "+\t\tfolder.accept(new IResourceVisitor() {", "+\t\t\t/*", "+\t\t\t * @see IResourceVisitor#visit(IResource)", "+\t\t\t */", "+\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\tif (resource instanceof IFile) {", "+\t\t\t\t\tif (org.eclipse.jdt.internal.core.Util.isJavaFileName(resource.getName()) ", "+\t\t\t\t\t\t\t&& !org.eclipse.jdt.internal.core.Util.isExcluded(resource, exclusionPattern)) {", "+\t\t\t\t\t\taddSource((IFile)resource, container);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t});", "+\t} catch (CoreException e) {", "+\t\t// Folder does not exist.", "+\t\t// It will be indexed only when DeltaProcessor detects its addition", "+\t}", "+}"]}], "num": 64113}
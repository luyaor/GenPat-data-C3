{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d51a06ac9ccb9feb5189c222f8e1342", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942f1744d1fda08548e46f082ca3f90e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "730ec55536b5ef142bbace222c0f6429c2cdd532", "commitAfterChange": "7b8b5171c862e2fd7e3a610686386f5127430137", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tJavaProject javaProject = (JavaProject)getJavaProject();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tif (length >0) {", "-\t\t\tString sourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "-\t\t\tString complianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\tif (length > 0) {", "+\t\t\t// if package fragment root refers to folder in another IProject, then", "+\t\t\t// folder.getProject() is different than getJavaProject().getProject()", "+\t\t\t// use the other java project's options to verify the name", "+\t\t\tIJavaProject otherJavaProject = JavaCore.create(folder.getProject());", "+\t\t\tString sourceLevel = otherJavaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = otherJavaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tJavaProject javaProject = (JavaProject) getJavaProject();", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71f35f1b9f665f1df737b6fe7ef1598", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "7ceb09d85452179b42407e05dd48c1ac5747d10a", "commitAfterChange": "cb8d9486d5e5f2bb20f5895e1cd434f7838ce4c6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tJavaProject javaProject = (JavaProject)getJavaProject();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tif (length >0) {", "-\t\t\tString sourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "-\t\t\tString complianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\tif (length > 0) {", "+\t\t\t// if package fragment root refers to folder in another IProject, then", "+\t\t\t// folder.getProject() is different than getJavaProject().getProject()", "+\t\t\t// use the other java project's options to verify the name", "+\t\t\tIJavaProject otherJavaProject = JavaCore.create(folder.getProject());", "+\t\t\tString sourceLevel = otherJavaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = otherJavaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tJavaProject javaProject = (JavaProject) getJavaProject();", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();"]}], "num": 40142}
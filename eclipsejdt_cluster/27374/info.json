{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f4af794472d997113a8eb029ec92108", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f1793432a9b6dbffa8420bb7dee1bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tboolean shouldPerformProblemDetection = false;", "-\t\tsynchronized(manager){", "-\t\t\tObject info = manager.getInfo(this);", "-\t\t\tif (info == null) {", "-\t\t\t\tshouldPerformProblemDetection = true;", "-\t\t\t}", "-\t\t}", "-\t\tObject info = super.getElementInfo(); // will populate if necessary", "+\t\tthis.computeProblems = this.problemRequestor != null && this.problemRequestor.isActive();", "-\t\t// perform problem detection outside the JavaModelManager lock", "-\t\tif (this.problemRequestor != null && shouldPerformProblemDetection && this.problemRequestor.isActive()){", "-\t\t\tthis.problemRequestor.beginReporting();", "-\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, null); ", "-\t\t\tthis.problemRequestor.endReporting();", "-\t\t}\t\t", "+\t\tWorkingCopyElementInfo info = null;", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tsynchronized(manager){", "+\t\t\tinfo = (WorkingCopyElementInfo)super.getElementInfo(); // will populate if necessary", "+\t\t}", "+", "+\t\t// report problems outside the JavaModelManager lock", "+\t\treportProblemsIfNeeded(info);", "+\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b3c97e4ed78ec525aa7e78150b5c84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "b93a217fe6b68aa2016c37812b125d5d097ba1a3", "commitAfterChange": "1beaef02926dace59f07acb73879fd00f7c0b3eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["-\t\tint preComputedTrueNullStatus = -1;", "+\t\tthis.ifTrueNullStatus = -1;", "-\t\t\tpreComputedTrueNullStatus = this.valueIfTrue.nullStatus(trueFlowInfo, flowContext);", "+\t\t\tthis.ifTrueNullStatus = this.valueIfTrue.nullStatus(trueFlowInfo, flowContext);", "-\t\t\tif (preComputedTrueNullStatus != -1) {", "-\t\t\t\tthis.nullStatus = preComputedTrueNullStatus;", "+\t\t\tif (this.ifTrueNullStatus != -1) {", "+\t\t\t\tthis.nullStatus = this.ifTrueNullStatus;", "-\t\t\tcomputeNullStatus(preComputedTrueNullStatus, trueFlowInfo, falseFlowInfo, flowContext);", "+\t\t\tcomputeNullStatus(trueFlowInfo, falseFlowInfo, flowContext);", "-\t\tif (isPolyExpression() && compilerOptions.isAnnotationBasedNullAnalysisEnabled && flowInfo.reachMode() == FlowInfo.REACHABLE) {", "-\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.resolvedType, this.valueIfTrue, flowContext, flowInfo);", "-\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.resolvedType, this.valueIfFalse, flowContext, flowInfo);", "-\t\t}"]}], "num": 27374}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b501e722703b045102878c3d7165f75c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf6e1fcdad8a4d498004681f6c6c08f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public char[] genericSignature()", "signatureAfterChange": " public char[] genericSignature()", "diff": ["-\t    for (int i = 0, length = this.typeVariables.length; i < length; i++) {", "+\t    for (int i = 0, length = this.typeVariables.length; i < length; i++)", "-\t    }", "-\t\t    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-\t\t        if (this.superInterfaces[i].isParameterizedType()) break noSignature;", "-\t\t    }        ", "+\t\t    for (int i = 0, length = this.superInterfaces.length; i < length; i++)", "+\t\t        if (this.superInterfaces[i].isParameterizedType())", "+\t\t\t\t\tbreak noSignature;", "-\tif (this.superclass != null) {", "+\tif (this.superclass != null)", "-\t} else {", "-\t\t// interface scenario only (as Object cannot be generic) - 65953", "+\telse // interface scenario only (as Object cannot be generic) - 65953", "-\t}", "-    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+    for (int i = 0, length = this.superInterfaces.length; i < length; i++)", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afae7df4f3d4661db5c8c42a7fa271f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " public boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t}", "-\tpublic boolean execute(IProgressMonitor progressMonitor) {", "+}", "+public boolean execute(IProgressMonitor progressMonitor) {", "+\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled())", "-\t\t\tthrow new OperationCanceledException();", "-\t\tboolean isComplete = COMPLETE;", "-\t\texecutionTime = 0;", "-\t\tIndex[] indexes = getIndexes(progressMonitor);", "-\t\ttry {", "-\t\t\tint max = indexes.length;", "+\tboolean isComplete = COMPLETE;", "+\texecutionTime = 0;", "+\tIndex[] indexes = getIndexes(progressMonitor);", "+\ttry {", "+\t\tint max = indexes.length;", "+\t\tif (progressMonitor != null)", "+\t\t\tprogressMonitor.beginTask(\"\", max); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < max; i++) {", "+\t\t\tisComplete &= search(indexes[i], progressMonitor);", "-\t\t\t\tprogressMonitor.beginTask(\"\", max); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < max; i++) {", "-\t\t\t\tisComplete &= search(indexes[i], progressMonitor);", "-\t\t\t\tif (progressMonitor != null) {", "-\t\t\t\t\tif (progressMonitor.isCanceled()) {", "-\t\t\t\t\t\tthrow new OperationCanceledException();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tprogressMonitor.worked(1);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (JobManager.VERBOSE) {", "-\t\t\t\tJobManager.verbose(\"-> execution time: \" + executionTime + \"ms - \" + this);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t}", "-\t\t\treturn isComplete;", "-\t\t} finally {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.done();", "+\t\t\t\tif (progressMonitor.isCanceled()) throw new OperationCanceledException();", "+\t\t\t\tprogressMonitor.worked(1);", "+\t\tif (JobManager.VERBOSE)", "+\t\t\tJobManager.verbose(\"-> execution time: \" + executionTime + \"ms - \" + this);//$NON-NLS-1$//$NON-NLS-2$", "+\t\treturn isComplete;", "+\t} finally {", "+\t\tif (progressMonitor != null)", "+\t\t\tprogressMonitor.done();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0694fc5e8042ccddecc50c8a63486c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-    ", "-\t\tfor (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\tfor (int i = 0, paramLength = typeParameters.length; i < paramLength; i++)", "-\t\t}", "-\t\t\tif (resolvedExceptionType == null) {", "+\t\t\tif (resolvedExceptionType == null)", "-\t\t\t}", "-\t\t    if ((resolvedExceptionType.modifiers & AccGenericSignature) != 0) {", "+\t\t    if ((resolvedExceptionType.modifiers & AccGenericSignature) != 0)", "-\t\t\t}", "-\t\t\t    if (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0) {", "+\t\t\t    if (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0)", "-\t\t\t\t}", "-\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0) {", "+\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding)leafType).modifiers & AccGenericSignature) != 0)", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0e3e6d911fca1c5bda3668c886d6a40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(QualifiedTypeReference qTypeRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tif (typeBinding instanceof ArrayBinding) {", "-\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;", "-\t}", "+\tif (typeBinding instanceof ArrayBinding)", "+\t\ttypeBinding = ((ArrayBinding) typeBinding).leafComponentType;", "-\twhile (typeBinding != null && lastIndex >= 0){", "+\twhile (typeBinding != null && lastIndex >= 0) {", "-\t\tif (typeBinding instanceof ReferenceBinding){", "+\t\tif (typeBinding instanceof ReferenceBinding)", "-\t\t} else {", "+\t\telse", "-\t\t}", "-\t\tif (typeBinding == null || typeBinding instanceof ProblemReferenceBinding) {", "+\t\tif (typeBinding == null || typeBinding instanceof ProblemReferenceBinding)", "-\t\t} else {", "+\t\telse", "-\t\t}"]}], "num": 53653}
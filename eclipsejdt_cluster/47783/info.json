{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5559ccacd63f3ebaa579fd703a99dab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5758c1541ded61590ccafd4da40fe2ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "e447d89530bf9d3a43064d5916817ebccc4e6812", "commitAfterChange": "b9b3b8c1fedf5d6daa213336839897b001a3416e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprivate Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables)", "signatureAfterChange": "  \tprivate Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables)", "diff": ["-\t\t// 18.5.2 bullet 6.1", "-\t\t//  A subset of constraints is selected, satisfying the property", "-\t\t// that, for each constraint, no input variable depends on an", "-\t\t// output variable of another constraint in C ...", "+\t\t// 18.5.2 bullet 5.(1)", "+\t\t//  A subset of constraints is selected, satisfying the property that,", "+\t\t//  for each constraint, no input variable can influence an output variable of another constraint in C. ...", "+\t\t//  An inference variable \u03b1 can influence an inference variable \u03b2 if \u03b1 depends on the resolution of \u03b2 (\u00a718.4), or vice versa;", "+\t\t//  or if there exists a third inference variable \u03b3 such that \u03b1 can influence \u03b3 and \u03b3 can influence \u03b2.  ...", "+\t\t// TODO: is indirect influence respected?", "-\t\tIterator<ConstraintFormula> it = constraints.iterator();", "-\t\tconstraintLoop: while (it.hasNext()) {", "-\t\t\tConstraintFormula constraint = it.next();", "-\t\t\tIterator<InferenceVariable> inputIt = constraint.inputVariables(this).iterator();", "-\t\t\tIterator<InferenceVariable> outputIt = allOutputVariables.iterator();", "-\t\t\twhile (inputIt.hasNext()) {", "-\t\t\t\tInferenceVariable in = inputIt.next();", "-\t\t\t\tif (allOutputVariables.contains(in)) // not explicit in the spec, but let's assume any inference variable depends on itself", "-\t\t\t\t\tcontinue constraintLoop;", "-\t\t\t\twhile (outputIt.hasNext()) {", "-\t\t\t\t\tif (this.currentBounds.dependsOnResolutionOf(in, outputIt.next()))", "+\t  constraintLoop:", "+\t\tfor (ConstraintFormula constraint : constraints) {", "+\t\t\tfor (InferenceVariable in : constraint.inputVariables(this)) {", "+\t\t\t\tfor (InferenceVariable out : allOutputVariables) {", "+\t\t\t\t\tif (this.currentBounds.dependsOnResolutionOf(in, out) || this.currentBounds.dependsOnResolutionOf(out, in))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96efadc723cb37e393e48db246c22177", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a8ae4c61c3fd8e7af5944aa40683b300c7cbf9e8", "commitAfterChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tprivate Set findBottomSet(Set constraints, Set allOutputVariables)", "signatureAfterChange": "  \tprivate Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables)", "diff": ["-\tprivate Set findBottomSet(Set constraints, Set allOutputVariables) {", "+\tprivate Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables) {", "-\t\tSet result = new HashSet();", "-\t\tIterator it = constraints.iterator();", "+\t\tSet<ConstraintFormula> result = new HashSet<ConstraintFormula>();", "+\t\tIterator<ConstraintFormula> it = constraints.iterator();", "-\t\t\tConstraintFormula constraint = (ConstraintFormula)it.next();", "-\t\t\tIterator inputIt = constraint.inputVariables(this).iterator();", "-\t\t\tIterator outputIt = allOutputVariables.iterator();", "+\t\t\tConstraintFormula constraint = it.next();", "+\t\t\tIterator<InferenceVariable> inputIt = constraint.inputVariables(this).iterator();", "+\t\t\tIterator<InferenceVariable> outputIt = allOutputVariables.iterator();", "-\t\t\t\tInferenceVariable in = (InferenceVariable) inputIt.next();", "+\t\t\t\tInferenceVariable in = inputIt.next();", "-\t\t\t\t\tif (this.currentBounds.dependsOnResolutionOf(in, (InferenceVariable) outputIt.next()))", "+\t\t\t\t\tif (this.currentBounds.dependsOnResolutionOf(in, outputIt.next()))"]}], "num": 47783}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7369ca626363d60b45164071affc8086", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa059b9ce140c5ba201a02fede295dee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0d1d10149bf9c26b080c1a4904327c7f2e8ddf98", "commitAfterChange": "6e0b96aad7cb418d8dc4d506663372291ca1bb36", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject project)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject project)", "diff": ["-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;\r", "-\r", "-\t\t\tcompilationUnitDeclaration =\r", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration =\r", "-\t\t\treturn convert(compilationUnitDeclaration, source);\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\t// FIXME - if this exception can happen, it needs to be converted\r", "-\t\t\t// to an appropriate RuntimeException of some ilk\r", "+\t\t\tASTConverter converter = new ASTConverter(true);\r", "+\t\t\tAST ast = new AST();\r", "+\t\t\tBindingResolver resolver = new DefaultBindingResolver(ast, compilationUnitDeclaration.scope);\r", "+\t\t\tast.setBindingResolver(resolver);\r", "+\t\t\tconverter.setAST(ast);\r", "+\t\t\r", "+\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);\r", "+\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);\r", "+\t\t\tresolver.storeModificationCount(ast.modificationCount());\r", "+\t\t\treturn cu;\r", "+\t\t} catch(JavaModelException e) {\r", "+\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment\r", "+\t\t\t * then we simply do a parsing without creating bindings.\r", "+\t\t\t * Therefore all binding resolution will return null.\r", "+\t\t\t */\r", "+\t\t\treturn parseCompilationUnit(source);\t\t\t\r", "-\t\t// FIXME - this method must not return null!\r", "-\t\treturn null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76e4fd8b4db6c04e13a84407df6f148", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "0d1d10149bf9c26b080c1a4904327c7f2e8ddf98", "commitAfterChange": "6e0b96aad7cb418d8dc4d506663372291ca1bb36", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\t\tICompilationUnit unit,\r \t\t\tboolean resolveBindings)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\t\tICompilationUnit unit,\r \t\t\tboolean resolveBindings)", "diff": ["-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;\r", "+\t\t\t// no source, then we cannot build anything\r", "+\t\t\tthrow new IllegalArgumentException();\r", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.resolve(\r", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.resolve(\r", "-\t\t\t\treturn convert(compilationUnitDeclaration, source);\r", "+\t\t\t\tASTConverter converter = new ASTConverter(true);\r", "+\t\t\t\tAST ast = new AST();\r", "+\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(ast, compilationUnitDeclaration.scope);\r", "+\t\t\t\tast.setBindingResolver(resolver);\r", "+\t\t\t\tconverter.setAST(ast);\r", "+\t\t\t\r", "+\t\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);\r", "+\t\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);\r", "+\t\t\t\tresolver.storeModificationCount(ast.modificationCount());\r", "+\t\t\t\treturn cu;\r", "-\t\t\t\t// FIXME - if this exception can happen, it needs to be converted\r", "-\t\t\t\t// to an appropriate RuntimeException of some ilk\r", "+\t\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment\r", "+\t\t\t\t * then we simply do a parsing without creating bindings.\r", "+\t\t\t\t * Therefore all binding resolution will return null.\r", "+\t\t\t\t */\r", "+\t\t\t\treturn parseCompilationUnit(source);\t\t\t\r", "-\t\t// FIXME - this method must not return null!\r", "-\t\treturn null;\r"]}], "num": 63223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6e4f614f6be2265f80cba1e348b1d14", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7600bf8a18cd90ed3677422fec886c6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "98f970f58fc61208a8cdd52e3b9981ef32c5937b", "commitAfterChange": "29a8044fc706583901ff89364d428dff04f6a567", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath)  \tthrows CoreException", "signatureAfterChange": "  \tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath)  \tthrows CoreException", "diff": ["-{", "-\tMap<FactoryContainer, FactoryPath.Attributes> result = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "-\tStringReader reader = new StringReader(xmlFactoryPath);", "-\tElement fpElement = null;", "-\t", "-\ttry {", "-\t\tDocumentBuilder parser = ", "-\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t", "-\t}", "-\tcatch (IOException e) {", "-\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t}", "-\tcatch (SAXException e) {", "-\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "-\t}", "-\tcatch (ParserConfigurationException e) {", "-\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "-\t}", "-\tfinally {", "-\t\treader.close();", "-\t}", "-\t", "-\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "-\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "-\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t}", "-\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "-\tfor (int i=0; i < nodes.getLength(); i++) {", "-\t\tNode node = nodes.item(i);", "-\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\tElement element = (Element)node;", "-\t\t\tString kindString = element.getAttribute(KIND);", "-\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "-\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "-\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tString idString = element.getAttribute(ID);", "-\t\t\tString enabledString = element.getAttribute(ENABLED);", "-\t\t\tString runInAptModeString = element.getAttribute(RUN_IN_BATCH_MODE); ", "-\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "-\t\t\tFactoryContainer container = null;", "-\t\t\tswitch (kind) {", "-\t\t\t", "-\t\t\tcase WKSPJAR :", "-\t\t\t\tcontainer = newWkspJarFactoryContainer(new Path(idString));", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase EXTJAR :", "-\t\t\t\tcontainer = newExtJarFactoryContainer(new File(idString));", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase VARJAR :", "-\t\t\t\tcontainer = newVarJarFactoryContainer(new Path(idString));", "-\t\t\t\tbreak;", "-\t\t\t", "-\t\t\tcase PLUGIN :", "-\t\t\t\tcontainer = getPluginFactoryContainer(idString);", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tdefault :", "-\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (null != container) {", "-\t\t\t\tFactoryPath.Attributes a = new FactoryPath.Attributes( ", "-\t\t\t\t\t\tBoolean.parseBoolean(enabledString), Boolean.parseBoolean(runInAptModeString));", "-\t\t\t\tresult.put(container, a);", "+\t{", "+\t\tMap<FactoryContainer, FactoryPath.Attributes> result = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\t\tStringReader reader = new StringReader(xmlFactoryPath);", "+\t\tElement fpElement = null;", "+", "+\t\ttry {", "+\t\t\tDocumentBuilder parser = ", "+\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+", "+\t\t}", "+\t\tcatch (IOException e) {", "+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t\t}", "+\t\tcatch (SAXException e) {", "+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "+\t\t}", "+\t\tcatch (ParserConfigurationException e) {", "+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "+\t\t}", "+\t\tfinally {", "+\t\t\treader.close();", "+\t\t}", "+", "+\t\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "+\t\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t\t}", "+\t\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "+\t\tfor (int i=0; i < nodes.getLength(); i++) {", "+\t\t\tNode node = nodes.item(i);", "+\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\t\tElement element = (Element)node;", "+\t\t\t\tString kindString = element.getAttribute(KIND);", "+\t\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "+\t\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "+\t\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tString idString = element.getAttribute(ID);", "+\t\t\t\tString enabledString = element.getAttribute(ENABLED);", "+\t\t\t\tString runInAptModeString = element.getAttribute(RUN_IN_BATCH_MODE); ", "+\t\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "+\t\t\t\tFactoryContainer container = null;", "+\t\t\t\tswitch (kind) {", "+", "+\t\t\t\tcase WKSPJAR :", "+\t\t\t\t\tcontainer = newWkspJarFactoryContainer(new Path(idString));", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase EXTJAR :", "+\t\t\t\t\tcontainer = newExtJarFactoryContainer(new File(idString));", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase VARJAR :", "+\t\t\t\t\tcontainer = newVarJarFactoryContainer(new Path(idString));", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase PLUGIN :", "+\t\t\t\t\tcontainer = FactoryPluginManager.getPluginFactoryContainer(idString);", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tdefault :", "+\t\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+", "+\t\t\t\tif (null != container) {", "+\t\t\t\t\tFactoryPath.Attributes a = new FactoryPath.Attributes( ", "+\t\t\t\t\t\t\tBoolean.parseBoolean(enabledString), Boolean.parseBoolean(runInAptModeString));", "+\t\t\t\t\tresult.put(container, a);", "+\t\t\t\t}", "+", "+\t\treturn result;", "-\treturn result;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f800a19e35f6d9d8f7240ef9c2a904b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath)  \t\tthrows CoreException", "signatureAfterChange": "  \tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath)  \tthrows CoreException", "diff": ["-\tpublic static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath) ", "-\t\tthrows CoreException", "-\t{", "-\t\tMap<FactoryContainer, Boolean> result = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tStringReader reader = new StringReader(xmlFactoryPath);", "-\t\tElement fpElement = null;", "-\t\t", "-\t\ttry {", "-\t\t\tDocumentBuilder parser = ", "-\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t\t", "-\t\t}", "-\t\tcatch (IOException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t\t}", "-\t\tcatch (SAXException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "-\t\t}", "-\t\tcatch (ParserConfigurationException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "-\t\t}", "-\t\tfinally {", "-\t\t\treader.close();", "-\t\t}", "-\t\t", "-\t\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "-\t\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t\t}", "-\t\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "-\t\tfor (int i=0; i < nodes.getLength(); i++) {", "-\t\t\tNode node = nodes.item(i);", "-\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\tElement element = (Element)node;", "-\t\t\t\tString kindString = element.getAttribute(KIND);", "-\t\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "-\t\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "-\t\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tString idString = element.getAttribute(ID);", "-\t\t\t\tString enabledString = element.getAttribute(ENABLED);", "-\t\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "-\t\t\t\tFactoryContainer container = null;", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t", "-\t\t\t\tcase WKSPJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newWkspJarFactoryContainer(new Path(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase EXTJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newExtJarFactoryContainer(new File(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase VARJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newVarJarFactoryContainer(new Path(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\t\tcase PLUGIN :", "-\t\t\t\t\tcontainer = FactoryPath.getPluginFactoryContainer(idString);", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (null != container) {", "-\t\t\t\t\tresult.put(container, new Boolean(enabledString));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\treturn result;", "+", "+\tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath) ", "+\tthrows CoreException", "+{", "+\tMap<FactoryContainer, FactoryPath.Attributes> result = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\tStringReader reader = new StringReader(xmlFactoryPath);", "+\tElement fpElement = null;", "+\t", "+\ttry {", "+\t\tDocumentBuilder parser = ", "+\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t", "+\t}", "+\tcatch (IOException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t}", "+\tcatch (SAXException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "+\t}", "+\tcatch (ParserConfigurationException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "+\t}", "+\tfinally {", "+\t\treader.close();", "+\t}", "+\t", "+\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "+\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t}", "+\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "+\tfor (int i=0; i < nodes.getLength(); i++) {", "+\t\tNode node = nodes.item(i);", "+\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\tElement element = (Element)node;", "+\t\t\tString kindString = element.getAttribute(KIND);", "+\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "+\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "+\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tString idString = element.getAttribute(ID);", "+\t\t\tString enabledString = element.getAttribute(ENABLED);", "+\t\t\tString runInAptModeString = element.getAttribute(RUN_IN_BATCH_MODE); ", "+\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "+\t\t\tFactoryContainer container = null;", "+\t\t\tswitch (kind) {", "+\t\t\t", "+\t\t\tcase WKSPJAR :", "+\t\t\t\tcontainer = newWkspJarFactoryContainer(new Path(idString));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase EXTJAR :", "+\t\t\t\tcontainer = newExtJarFactoryContainer(new File(idString));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase VARJAR :", "+\t\t\t\tcontainer = newVarJarFactoryContainer(new Path(idString));", "+\t\t\t\tbreak;", "+\t\t\t", "+\t\t\tcase PLUGIN :", "+\t\t\t\tcontainer = getPluginFactoryContainer(idString);", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tdefault :", "+\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (null != container) {", "+\t\t\t\tFactoryPath.Attributes a = new FactoryPath.Attributes( ", "+\t\t\t\t\t\tBoolean.parseBoolean(enabledString), Boolean.parseBoolean(runInAptModeString));", "+\t\t\t\tresult.put(container, a);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\treturn result;", "+}"]}], "num": 24323}
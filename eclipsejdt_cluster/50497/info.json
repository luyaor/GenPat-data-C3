{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0aae7e3a389b8b4571076799fcedd22e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b780ff6d9a1dbc3c0023598203cc2de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "2ddc36d9802fe92e03ac6931b2247b95e00b263a", "commitAfterChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "methodNumberBeforeChange": 748, "methodNumberAfterChange": 748, "signatureBeforeChange": " public void test743()", "signatureAfterChange": " public void test743()", "diff": ["-\t\t\"1. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\"\treturn this;//3\\n\" + ", "-\t\t\"\t       ^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from TestGeneric3<A>.Nested<B> to TestGeneric3<B>.Nested<B>\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\t@Override public Nested<B> getNested3() { // sub\\n\" + ", "+\t\t\"\t                           ^^^^^^^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with TestGeneric3<B>.getNested3()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\t@Override public Nested<B> getNested3() { // sub\\n\" + ", "+\t\t\"\t                           ^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method getNested3() of type TestGeneric3<A>.Nested<B> must override a superclass method\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41901448dd1f5680ad0f3fa8bab97000", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 211, "signatureBeforeChange": " public void test412650()", "signatureAfterChange": " public void test412650()", "diff": ["-\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tfoo(() -> foo(X::getInt));\\n\" +", "-\t\t\"\t              ^^^^^^^^^\\n\" +", "-\t\t\"The type of getInt() from the type X is Integer, this is incompatible with the descriptor's return type: String\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tfoo(() -> foo(X::getInt));\\n\" + ", "+\t\t\"\t          ^^^\\n\" + ", "+\t\t\"The method foo(I) in the type X is not applicable for the arguments (X::getInt)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tfoo(() -> foo(X::getInt));\\n\" + ", "+\t\t\"\t              ^^^^^^^^^\\n\" + ", "+\t\t\"The type of getInt() from the type X is Integer, this is incompatible with the descriptor\\'s return type: String\\n\" + "]}], "num": 50497}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "745466e85bd26b5ef0cf28946f59cc6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0120d210ad929f05f0dfd34982f487dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java", "commitBeforeChange": "b200ac7d7ee292ea3a174fc5a4e53520cc708094", "commitAfterChange": "85606d85d072a166e56a66b96ebe50ecf06f8b34", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testIsOnClasspath() throws CoreException", "signatureAfterChange": " public void testIsOnClasspath() throws CoreException", "diff": ["-\t\ttry {", "-\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "-\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "-\t\t\tassertTrue(\"working copy shouldn't answer to isOnClasspath (1/2)\", false);", "-\t\t} catch(JavaModelException e) {", "-\t\t}", "-\t\tworkingCopy.getJavaProject().getOptions(true); // bug 31799", "-\t\ttry {", "-\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "-\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "-\t\t\tassertTrue(\"working copy should dstill not answer to isOnClasspath (2/2)\", false);", "-\t\t} catch(JavaModelException e) {", "-\t\t}", "+\t\t// working creation will cause it to open, and thus request project options", "+\t\ttry {", "+\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "+\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "+\t\t\tassertTrue(\"working copy shouldn't answer to isOnClasspath\", false);", "+\t\t} catch(JavaModelException e) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a4f1a595c16cd27983793774e78d2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003() throws Exception", "diff": ["-\tpublic void test003() {", "+\tpublic void test003() throws Exception {", "-\t\tString actualOutput = null;", "-\t\ttry {", "-\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  + \"X$1LocalClass.class\"));", "-\t\t\tactualOutput =", "-\t\t\t\tdisassembler.disassemble(", "-\t\t\t\t\tclassFileBytes,", "-\t\t\t\t\t\"\\n\",", "-\t\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  + \"X$1LocalClass.class\"));", "+\t\tString actualOutput =", "+\t\t\tdisassembler.disassemble(", "+\t\t\t\tclassFileBytes,", "+\t\t\t\t\"\\n\",", "+\t\t\t\tClassFileBytesDisassembler.DETAILED); "]}], "num": 20649}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "288de0424a7363b6c4739505c1435bd2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b938ab0c40b5b6022ae857a8eb9a8a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "85633e99f21ec09406d32b988a3002563f4455d5", "commitAfterChange": "d6a5f7150c955097cc2dfb47cecf0f5f97dfc713", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original2.selector);", "+\t\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original2.selector, argumentTypes.length);", "-\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original.selector);", "+\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original.selector, argumentTypes.length);", "-\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original2.selector);", "+\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding) superType).getMethods(original2.selector, argumentTypes.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac283d1eccd1f8c3c89853303d64b237", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b32fc1bd12e1af3d23b798a9c1ddb2d07b773695", "commitAfterChange": "e8809c830aa9910fa512262ec2fd91fe29f694ac", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) resolvedImport, selector, argumentTypes, invocationSite, true);", "-\t\t\t\t\t\t\t\t\tpossible = findMethod(staticMethod.declaringClass, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\t\tpossible = findMethod(staticMethod.declaringClass, selector, argumentTypes, invocationSite, true);", "-\t\t\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) referencedType, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\t\t\tpossible = findMethod((ReferenceBinding) referencedType, selector, argumentTypes, invocationSite, true);"]}], "num": 9822}
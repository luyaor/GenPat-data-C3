{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3130e0d205ba94ffde9d576f6439ec3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "233cde874020355600c1791bfa6cd022", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "12fb3ecf388804aa7057e14bf4ec17ccc0ebc59e", "commitAfterChange": "0c07824a3373a555044221cb10d67e17d420e689", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void initializeKnownFileNames(String[] initialFileNames)", "signatureAfterChange": " private void initializeKnownFileNames(String[] initialFileNames)", "diff": ["+\t\tboolean globalPathMatches = false;", "+\t\t// the most nested path should be the selected one", "-\t\t\tif (this.classpaths[j] instanceof  ClasspathDirectory &&", "-\t\t\t\t\tCharOperation.prefixEquals(matchCandidate, fileName) &&", "-\t\t\t\t\t(matchingPathName == null ||", "-\t\t\t\t\t\t\tmatchCandidate.length < matchingPathName.length)) {", "-\t\t\t\tmatchingPathName = matchCandidate;", "+\t\t\tboolean currentPathMatch = false;", "+\t\t\tif (this.classpaths[j] instanceof ClasspathDirectory", "+\t\t\t\t\t&& CharOperation.prefixEquals(matchCandidate, fileName)) {", "+\t\t\t\tcurrentPathMatch = true;", "+\t\t\t\tif (matchingPathName == null) {", "+\t\t\t\t\tmatchingPathName = matchCandidate;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (currentPathMatch) {", "+\t\t\t\t\t\t// we have a second source folder that matches the path of the source file", "+\t\t\t\t\t\tif (matchCandidate.length > matchingPathName.length) {", "+\t\t\t\t\t\t\t// we want to preserve the shortest possible path", "+\t\t\t\t\t\t\tmatchingPathName = matchCandidate;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// we want to preserve the shortest possible path", "+\t\t\t\t\t\tif (!globalPathMatches && matchCandidate.length < matchingPathName.length) {", "+\t\t\t\t\t\t\tmatchingPathName = matchCandidate;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (currentPathMatch) {", "+\t\t\t\t\tglobalPathMatches = true;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54bf5853ba03b82975ffa2b0024d055f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationSetup.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void tearDown()", "signatureAfterChange": "  \tprotected void tearDown()", "diff": ["-}", "-protected void tearDown() {", "-\tif (context != null) {", "-\t\tLocalVirtualMachine vm = this.launchedVM;", "-\t\tif (vm != null) {", "-\t\t\t\tif (this.target != null) {", "-\t\t\t\t\tthis.target.disconnect(); // Close the socket first so that the OS resource has a chance to be freed. ", "-\t\t\t\t}", "-\t\t\t\tint retry = 0;", "-\t\t\t\twhile (vm.isRunning() && (++retry < 20)) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tThread.sleep(retry * 100);", "-\t\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (vm.isRunning()) {", "-\t\t\t\t\tvm.shutDown();", "-\t\t\t\t}", "-\t\t\t\tthis.context = null;", "+", "+\tprotected void tearDown() {", "+\t\tif (this.context != null) {", "+\t\t\tLocalVirtualMachine vm = this.launchedVM;", "+\t\t\tif (vm != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tif (this.target != null) {", "+\t\t\t\t\t\tthis.target.disconnect(); // Close the socket first so that the OS resource has a chance to be freed.", "+\t\t\t\t\t}", "+\t\t\t\t\tint retry = 0;", "+\t\t\t\t\twhile (vm.isRunning() && (++retry < 20)) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tThread.sleep(retry * 100);", "+\t\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (vm.isRunning()) {", "+\t\t\t\t\t\tvm.shutDown();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.context = null;", "+\t\t\t\t} catch (TargetException e) {", "+\t\t\t\t\tthrow new Error(e.getMessage());", "+\t\t\t\t}", "+\t\t\t}", "-}"]}], "num": 34688}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c58e840046e1ee62c1c74ee06dd6b77e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a04733dfe9c5084b7d40c20411b61f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r public void locateMatches(String[] filePaths, IWorkspace workspace) throws JavaModelException", "diff": ["+ */\r", "+public void locateMatches(String[] filePaths, IWorkspace workspace) throws JavaModelException {\r", "+\tUtil.sort(filePaths); // sort by projects\r", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();\r", "+\tHandleFactory factory = new HandleFactory(workspace.getRoot(), manager);\r", "+\tJavaProject previousJavaProject = null;\r", "+\tint length = filePaths.length;\r", "+\tdouble increment = 100.0 / length;\r", "+\tdouble totalWork = 0;\r", "+\tint lastProgress = 0;\r", "+\tboolean couldInitializePattern = false;\r", "+\tfor (int i = 0; i < length; i++) {\r", "+\t\tIProgressMonitor monitor = this.collector.getProgressMonitor();\r", "+\t\tif (monitor != null && monitor.isCanceled()) {\r", "+\t\t\tthrow new OperationCanceledException();\r", "+\t\t}\r", "+\t\tString pathString = filePaths[i];\r", "+\t\tthis.currentOpenable = factory.createOpenable(pathString);\r", "+\t\tif (this.currentOpenable == null) continue;  // match is outside classpath\r", "+\r", "+\t\t// create new parser and lookup environment if this is a new project\r", "+\t\ttry {\r", "+\t\t\tJavaProject javaProject = (JavaProject)this.currentOpenable.getJavaProject();\r", "+\t\t\tthis.currentResource = this.currentOpenable.getUnderlyingResource();\r", "+\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "+\t\t\t\tthis.currentResource = javaProject.getProject();\r", "+\t\t\t}\r", "+\t\t\tif (!javaProject.equals(previousJavaProject)) {\r", "+\t\t\t\t// create parser for this project\r", "+\t\t\t\tcouldInitializePattern = this.createParser(javaProject);\r", "+\t\t\t\tpreviousJavaProject = javaProject;\r", "+\t\t\t}\r", "+\t\t\tif (!couldInitializePattern) continue; // the pattern could not be initialized: the match cannot be in this project\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// file doesn't exist -> skip it\r", "+\t\t\tcontinue;\r", "+\t\t// locate matches in current file and report them\r", "+\t\ttry {\r", "+\t\t\tif (this.currentOpenable instanceof CompilationUnit) {\r", "+\t\t\t\tthis.locateMatchesInCompilationUnit();\r", "+\t\t\t} else if (this.currentOpenable instanceof org.eclipse.jdt.internal.core.ClassFile) {\r", "+\t\t\t\tthis.locateMatchesInClassFile();\r", "+\t\t\t}\r", "+\t\t} catch (AbortCompilation e) {\r", "+\t\t\t// problem with class path: it could not find base classes\r", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.BUILDER_INITIALIZATION_ERROR);\r", "+\t\t} catch (CoreException e) {\r", "+\t\t\tif (e instanceof JavaModelException) {\r", "+\t\t\t\tthrow (JavaModelException)e;\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (monitor != null) {\r", "+\t\t\ttotalWork = totalWork + increment;\r", "+\t\t\tint worked = (int)totalWork - lastProgress;\r", "+\t\t\tmonitor.worked(worked);\r", "+\t\t\tlastProgress = (int)totalWork;\r", "+\t\t}\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r", "-\t\tthrows JavaModelException {\r", "-\t\tUtil.sort(filePaths); // sort by projects\r", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();\r", "-\t\tHandleFactory factory = new HandleFactory(workspace.getRoot(), manager);\r", "-\t\tJavaProject previousJavaProject = null;\r", "-\t\tint length = filePaths.length;\r", "-\t\tdouble increment = 100.0 / length;\r", "-\t\tdouble totalWork = 0;\r", "-\t\tint lastProgress = 0;\r", "-\t\tboolean couldInitializePattern = false;\r", "-\t\tthis.potentialMatches = new PotentialMatch[10];\r", "-\t\tthis.potentialMatchesLength = 0;\r", "-\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tIProgressMonitor monitor = this.collector.getProgressMonitor();\r", "-\t\t\tif (monitor != null && monitor.isCanceled()) {\r", "-\t\t\t\tthrow new OperationCanceledException();\r", "-\t\t\t}\r", "-\t\t\tString pathString = filePaths[i];\r", "-\t\t\tOpenable openable = factory.createOpenable(pathString);\r", "-\t\t\tif (openable == null)\r", "-\t\t\t\tcontinue; // match is outside classpath\r", "-\r", "-\t\t\t// create new parser and lookup environment if this is a new project\r", "-\t\t\tIResource resource = null;\r", "-\t\t\ttry {\r", "-\t\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();\r", "-\t\t\t\tresource = openable.getUnderlyingResource();\r", "-\t\t\t\tif (resource == null) { // case of a file in an external jar\r", "-\t\t\t\t\tresource = javaProject.getProject();\r", "-\t\t\t\t}\r", "-\t\t\t\tif (!javaProject.equals(previousJavaProject)) {\r", "-\t\t\t\t\t// locate matches in previous project\r", "-\t\t\t\t\tif (previousJavaProject != null) {\r", "-\t\t\t\t\t\tthis.locateMatches();\r", "-\t\t\t\t\t\tthis.potentialMatchesLength = 0;\r", "-\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t// create parser for this project\r", "-\t\t\t\t\tcouldInitializePattern = this.createParser(javaProject);\r", "-\t\t\t\t\tpreviousJavaProject = javaProject;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (!couldInitializePattern)\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t// the pattern could not be initialized: the match cannot be in this project\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// file doesn't exist -> skip it\r", "-\t\t\t\tcontinue;\r", "-\t\t\t}\r", "-\r", "-\t\t\t// add potential match\r", "-\t\t\tthis.addPotentialMatch(resource, openable);\r", "-\r", "-\t\t\tif (monitor != null) {\r", "-\t\t\t\ttotalWork = totalWork + increment;\r", "-\t\t\t\tint worked = (int) totalWork - lastProgress;\r", "-\t\t\t\tmonitor.worked(worked);\r", "-\t\t\t\tlastProgress = (int) totalWork;\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\t// last project\r", "-\t\tif (previousJavaProject != null) {\r", "-\t\t\tthis.locateMatches();\r", "-\t\t\tthis.potentialMatchesLength = 0;\r", "-\t\t}\r", "-\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "685ab45acef7d98460c7b690a79c614c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t */", "+\tprivate void setUpFullSourceWorkspace() throws IOException, CoreException {", "+", "+\t\t// Get projects in workspace (save projects creation on local boxes...)", "+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "+\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\tint projectsLength = projects.length;", "+", "+\t\t// If no projects then unzip file", "+\t\tif (projectsLength == 0) {", "+\t\t\tprojects = createFullSourceWorkspace();", "+\t\t\tprojectsLength = projects.length;", "+\t\t}", "+", "+\t\t// Init environment with existing porjects", "+\t\tfor (int i = 0; i < projectsLength; i++) {", "+\t\t\tENV.addProject(projects[i]);", "+\t\t}", "+", "+\t\t// Init JRE_LIB variable", "+\t\tString jdkLib = Util.getJavaClassLibs()[0];", "+\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "+\t\t", "+\t\t// Set classpaths (workaround bug 73253 Project references not set on project open)", "+\t\tSystem.out.print(\"Set projects classpaths...\");", "+\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "+\t\tint length = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "+\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "+\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "+\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "+\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "+//\t\t\t} else if (JUNIT_PROJECT_NAME.equals(projectName)) {", "+//\t\t\t\tJUNIT_PROJECT = ALL_PROJECTS[i];", "+\t\t\t}", "+\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t\t// Make Big project dependent from jdt.core one", "+//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "+//\t\t\tint bpeLength = bigProjectEntries.length;", "+//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "+//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "+\t\t}", "+\t\tSystem.out.println(\"done\");", "+", "+\t\t// Initialize Parser wokring copy", "+\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "+\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "+\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();", "+\t}", "-\t */", "-\tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tif (workspaceRoot.getProjects().length == 0) {", "-\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "-\t\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-", "-\t\t\t// Print for log in case of project creation troubles...", "-\t\t\tlong start = System.currentTimeMillis();", "-\t\t\tSystem.out.println(\"Unzipping \"+fullSourceZipPath);", "-\t\t\tSystem.out.print(\"\tin \"+targetWorkspacePath+\"...\");", "-\t\t\t", "-\t\t\t// Unzip file", "-\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-", "-\t\t\t// Create and open projects", "-\t\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\t\tproject.open(monitor);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}, null);", "-\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t\t}", "-\t\tString jdkLib = Util.getJavaClassLibs()[0];", "-\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "-\t\t", "-\t\t// Set classpaths (workaround bug 73253 Project references not set on project open)", "-\t\tSystem.out.print(\"Set projects classpaths...\");", "-\t\tlong start = System.currentTimeMillis();", "-\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "-\t\tint length = ALL_PROJECTS.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "-\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "-\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "-\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "-\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "-\t\t\t}", "-\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "-\t\t\t// Make Big project dependent from jdt.core one", "-//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "-//\t\t\tint bpeLength = bigProjectEntries.length;", "-//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "-//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "-\t\t}", "-\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "-\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "-\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();", "-\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "-\t}"]}], "num": 37769}
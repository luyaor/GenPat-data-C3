{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6975e005bfb6379d6a5be1717afed0e4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5116377d74f23d25f79cdd6fde0714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "077229504ccd77d256450ca55e2c9e212f3f94d4", "commitAfterChange": "2d87d31e89bc602d928b4671e91e81b8af28ddbe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["- */", "-public void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+*/", "+public void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "-\tif (otherType == NullBinding) return;", "+\tif (actualType == NullBinding) return;", "-\tswitch(otherType.kind()) {", "+\tswitch(actualType.kind()) {", "-\t        int otherDim = otherType.dimensions();", "-\t        if (otherDim == this.dimensions) {", "-\t\t\t    this.leafComponentType.collectSubstitutes(scope, otherType.leafComponentType(), substitutes, constraint);", "-\t        } else if (otherDim > this.dimensions) {", "-\t            ArrayBinding otherReducedType = this.environment.createArrayType(otherType.leafComponentType(), otherDim - this.dimensions);", "-\t            this.leafComponentType.collectSubstitutes(scope, otherReducedType, substitutes, constraint);", "+\t        int actualDim = actualType.dimensions();", "+\t        if (actualDim == this.dimensions) {", "+\t\t\t    this.leafComponentType.collectSubstitutes(scope, actualType.leafComponentType(), substitutes, constraint);", "+\t        } else if (actualDim > this.dimensions) {", "+\t            ArrayBinding actualReducedType = this.environment.createArrayType(actualType.leafComponentType(), actualDim - this.dimensions);", "+\t            this.leafComponentType.collectSubstitutes(scope, actualReducedType, substitutes, constraint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9b4706d3e0b10a1ca68d2b69f0875f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "077229504ccd77d256450ca55e2c9e212f3f94d4", "commitAfterChange": "2d87d31e89bc602d928b4671e91e81b8af28ddbe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "-\t\tswitch (otherType.kind()) {", "+\t\tswitch (actualType.kind()) {", "-\t\t\t\tif (otherType == NullBinding) return;", "-\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(otherType);", "-\t\t\t\tif (boxedType == otherType) return;", "-\t\t\t\totherType = boxedType;", "+\t\t\t\tif (actualType == NullBinding) return;", "+\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(actualType);", "+\t\t\t\tif (boxedType == actualType) return;", "+\t\t\t\tactualType = boxedType;", "-\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\tif (otherWildcard.otherBounds != null) break; // intersection type", "+\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\tif (actualWildcard.otherBounds != null) break; // intersection type", "-\t\t\t            if (substitute == otherType) return; // already there", "+\t\t\t            if (substitute == actualType) return; // already there", "-\t\t\t                constraintSubstitutes[i] = otherType;", "+\t\t\t                constraintSubstitutes[i] = actualType;", "-\t\t        constraintSubstitutes[length] = otherType;", "+\t\t        constraintSubstitutes[length] = actualType;"]}], "num": 9509}
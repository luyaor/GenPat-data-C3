{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b4c4abaad4df9ef877410bc5f2dbfff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9a6d8e0f0a26872511891b5037f269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "ee88edc6852ca240266a0a82beb39fc6a3f8a578", "commitAfterChange": "321d0d2c500c247f0447784febbb6a14ba5499be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 13, "signatureBeforeChange": " private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method)", "signatureAfterChange": " private boolean matchOverriddenMethod(ReferenceBinding type, MethodBinding method, MethodBinding matchMethod)", "diff": ["- */", "-private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method) {", "-\tif (type == null) return false;", "-", "-\t// matches superclass", "-\tif (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {", "-\t\tReferenceBinding superClass = type.superclass();", "-\t\tif (superClass.isParameterizedType()) {", "-\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)superClass).erasure();", "-\t\t\tif (erasure instanceof ReferenceBinding) {", "-\t\t\t\tMethodBinding[] methods = superClass.getMethods(this.pattern.selector);", "-\t\t\t\tint length = methods.length;", "-\t\t\t\tfor (int i = 0; i<length; i++) {", "-\t\t\t\t\tif (methods[i].areParametersEqual(method)) return true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (isErasureMethodOverride(superClass, method)) {", "-\t\t\treturn true;", "-\t\t}", "-\t}", "-", "-\t// matches interfaces", "-\tReferenceBinding[] interfaces = type.superInterfaces();", "-\tif (interfaces == null) return false;", "-\tint iLength = interfaces.length;", "-\tfor (int i = 0; i<iLength; i++) {", "-\t\tif (interfaces[i].isParameterizedType()) {", "-\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)interfaces[i]).erasure();", "-\t\t\tif (erasure instanceof ReferenceBinding) {", "-\t\t\t\tMethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);", "-\t\t\t\tint length = methods.length;", "-\t\t\t\tfor (int j = 0; j<length; j++) {", "-\t\t\t\t\tif (methods[i].areParametersEqual(method)) return true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (isErasureMethodOverride(interfaces[i], method)) {", "-\t\t\treturn true;", "-\t\t}", "-\t}", "-\treturn false;", "+private boolean matchOverriddenMethod(ReferenceBinding type, MethodBinding method, MethodBinding matchMethod) {", "+\tif (type == null) return false;", "+", "+\t// matches superclass", "+\tif (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {", "+\t\tReferenceBinding superClass = type.superclass();", "+\t\tif (superClass.isParameterizedType()) {", "+\t\t\tMethodBinding[] methods = superClass.getMethods(this.pattern.selector);", "+\t\t\tint length = methods.length;", "+\t\t\tfor (int i = 0; i<length; i++) {", "+\t\t\t\tif (methods[i].areParametersEqual(method)) {", "+\t\t\t\t\tif (matchMethod == null) {", "+\t\t\t\t\t\tif (methodParametersEqualsPattern(methods[i].original())) return true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (methods[i].original().areParametersEqual(matchMethod)) return true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (matchOverriddenMethod(superClass, method, matchMethod)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+", "+\t// matches interfaces", "+\tReferenceBinding[] interfaces = type.superInterfaces();", "+\tif (interfaces == null) return false;", "+\tint iLength = interfaces.length;", "+\tfor (int i = 0; i<iLength; i++) {", "+\t\tif (interfaces[i].isParameterizedType()) {", "+\t\t\tMethodBinding[] methods = interfaces[i].getMethods(this.pattern.selector);", "+\t\t\tint length = methods.length;", "+\t\t\tfor (int j = 0; j<length; j++) {", "+\t\t\t\tif (methods[i].areParametersEqual(method)) {", "+\t\t\t\t\tif (matchMethod == null) {", "+\t\t\t\t\t\tif (methodParametersEqualsPattern(methods[i].original())) return true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (methods[i].original().areParametersEqual(matchMethod)) return true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (matchOverriddenMethod(interfaces[i], method, matchMethod)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+\treturn false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8fbf2f25aaaff0f6cda2400223e2f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "029a8f257514071d898cccd4122bad881aa576bc", "commitAfterChange": "89f5de86dbcff10e0a2f2dafa846f8c01996e885", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  String[] directoryList(String qualifiedPackageName)", "signatureAfterChange": "  SimpleLookupTable directoryTable(String qualifiedPackageName)", "diff": ["-String[] directoryList(String qualifiedPackageName) {", "-\tString[] dirList = (String[]) directoryCache.get(qualifiedPackageName);", "-\tif (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar", "-\tif (dirList != null) return dirList;", "+SimpleLookupTable directoryTable(String qualifiedPackageName) {", "+\tSimpleLookupTable dirTable = (SimpleLookupTable) directoryCache.get(qualifiedPackageName);", "+\tif (dirTable == missingPackageHolder) return null; // package exists in another classpath directory or jar", "+\tif (dirTable != null) return dirTable;", "-\t\t\tdirList = new String[members.length];", "-\t\t\tint index = 0;", "+\t\t\tdirTable = new SimpleLookupTable();", "-\t\t\t\tif (m.getType() == IResource.FILE && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(name = m.getName()))", "-\t\t\t\t\tdirList[index++] = name;", "+\t\t\t\tif (m.getType() == IResource.FILE) {", "+\t\t\t\t\tint index = Util.indexOfJavaLikeExtension(name = m.getName());", "+\t\t\t\t\tif (index >= 0) {", "+\t\t\t\t\t\tString fullPath = m.getFullPath().toString();", "+\t\t\t\t\t\tif (!org.eclipse.jdt.internal.compiler.util.Util.isExcluded(fullPath.toCharArray(), this.fulInclusionPatternChars, this.fullExclusionPatternChars, false/*not a folder path*/)) {", "+\t\t\t\t\t\t\tdirTable.put(name.substring(0, index), m);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (index < dirList.length)", "-\t\t\t\tSystem.arraycopy(dirList, 0, dirList = new String[index], 0, index);", "-\t\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "-\t\t\treturn dirList;", "+\t\t\tdirectoryCache.put(qualifiedPackageName, dirTable);", "+\t\t\treturn dirTable;", "-}"]}], "num": 26964}
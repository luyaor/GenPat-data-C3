{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b46f780819d957a2f0904d460a2ef5d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5298ff844db7784dca65f70553b6cdf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "df26ffb7769325830f9d9a476ff58e760e816f71", "commitAfterChange": "7e79ffb05fb342f1994da154dbf6a543569d8d3a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseParam() throws InvalidInputException", "diff": ["-\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "-\t\t\twhile ((token=readToken()) != TerminalTokens.TokenNameWHITESPACE && token != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tthis.currentTokenType = -1;", "+\t\t\tif (this.reportProblems) {", "+\t\t\t\t// we only need end if we report problems", "-\t\t\t}", "-\t\t\tif (this.reportProblems)", "+\t\t\t\ttry {", "+\t\t\t\t\twhile ((token=readToken()) != TerminalTokens.TokenNameWHITESPACE && token != TerminalTokens.TokenNameEOF) {", "+\t\t\t\t\t\tthis.currentTokenType = -1;", "+\t\t\t\t\t\tend = hasMultiLines ? this.lineEnd: this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\tend = this.lineEnd;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e316a436028bfeaf4ba2f33f13f63410", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "signatureAfterChange": " \t \tprotected void recordNodes(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc, TagElement tagElement)", "diff": ["-\t\t\t\t// get compiler node and record nodes", "-\t\t\t\tint start = name.getStartPosition();", "+\t\t\t\t// get method name start position", "+\t\t\t\tint start = methodRef.getStartPosition();", "+\t\t\t\tthis.scanner.resetTo(start, start + name.getStartPosition()+name.getLength());", "+\t\t\t\tint token;", "+\t\t\t\ttry {", "+\t\t\t\t\tnextToken: while((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF && token != TerminalTokens.TokenNameLPAREN)  {", "+\t\t\t\t\t\tif (token == TerminalTokens.TokenNameERROR && this.scanner.currentCharacter == '#') {", "+\t\t\t\t\t\t\tstart = this.scanner.getCurrentTokenEndPosition()+1;", "+\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcatch(InvalidInputException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}"]}], "num": 50144}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a6fa04329fecac4d636c8386269b9ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2af2a961270971bab953b2e825b944c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "39552b33c5ccb9a31d4a435abc646280e8026533", "commitAfterChange": "5f616341067096c98b141974f7f9bc6e24ba2b81", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t\t\t\t&& varargsType.leafComponentType.erasure() != lastArgType.leafComponentType().erasure()", "-\t\t\t\t\t\t\t\t\t\t&& lastArgType.isCompatibleWith(varargsType)) {", "+\t\t\t\t\t\t\t\t\t\t&& lastArgType != varargsType", "+\t\t\t\t\t\t\t\t\t\t&& lastArgType.leafComponentType().erasure() != varargsType.leafComponentType.erasure()", "+\t\t\t\t\t\t\t\t\t\t&& lastArgType.isCompatibleWith(varargsType.elementsType())", "+\t\t\t\t\t\t\t\t\t\t&& lastArgType.isCompatibleWith(varargsType)) {\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db628d1f019e47578050f7c62f98a957", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "0bc1dc4ace320749d81ad8fc342000dd64021e2c", "commitAfterChange": "38d1cd076e6181bfa6558db1b5b13eb2b3e5e8ce", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tif (lastArgType.isCompatibleWith(varargsType.elementsType()))", "+\t\t\t\t\t\tint dimensions = lastArgType.dimensions();", "+\t\t\t\t\t\tif (varargsType.dimensions < dimensions) {", "+\t\t\t\t\t\t} else if (varargsType.dimensions == dimensions) {", "+\t\t\t\t\t\t\tif (lastArgType.isCompatibleWith(varargsType.elementsType())", "+\t\t\t\t\t\t\t\t\t&& lastArgType.isCompatibleWith(varargsType)) {", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t"]}], "num": 17426}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a38cafae56020823acfdccd37b0568b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1104ac22b29c6dba740e57c99f0e9e74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "99d9827a13a83fa6bbad43196ec624282b8c65f9", "commitAfterChange": "f73ac72a4252a0f65e763fcd4775e57fa94c512c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void removeUserLibrary(String libName)", "signatureAfterChange": "  \tpublic void removeUserLibrary(String libName)", "diff": ["-\t\tsynchronized (this.userLibraries) {", "-\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\t\tinstancePreferences.remove(propertyName);", "-\t\t\ttry {", "-\t\t\t\tinstancePreferences.flush();", "-\t\t\t} catch (BackingStoreException e) {", "-\t\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "-\t\t\t}", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\tinstancePreferences.remove(propertyName);", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "-\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b402de27cc00ce870ba4efb5d0d450b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void buildSupertypes()", "signatureAfterChange": " \tprotected void buildSupertypes()", "diff": ["-\t\t\tsynchronized(nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set", "-\t\t\t\tIWorkingCopy[] workingCopies = this.getWokingCopies();", "-\t\t\t\tIWorkingCopy[] unitsToLookInside;", "-\t\t\t\tif (unitToLookInside != null) {", "-\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "-\t\t\t\t\tif (wcLength == 0) {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "-\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "-\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\t\t}", "+\t\t\tIWorkingCopy[] workingCopies = this.getWokingCopies();", "+\t\t\tIWorkingCopy[] unitsToLookInside;", "+\t\t\tif (unitToLookInside != null) {", "+\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "+\t\t\t\tif (wcLength == 0) {", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "+\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "+\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\ttry {", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside);", "-\t\t\t\t\t// resolve", "-\t\t\t\t\tthis.hierarchyResolver.resolve(type);", "-\t\t\t\t} finally {", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe", "+\t\t\t\t// resolve", "+\t\t\t\tthis.hierarchyResolver.resolve(type);", "+\t\t\t} finally {", "+\t\t\t\tnameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9f1b0db4954ab6d92d4fd9a343edc6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "diff": ["-\t\t\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});", "-\t\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits, monitor);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside}); // NB: this uses a PerThreadObject, so it is thread safe", "+\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits, monitor);", "+\t\t\t\t} finally {", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf6a551e612df0d22c18c15cd071e464", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the units to look inside are set", "-\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "-\t\t\t\tIWorkingCopy[] unitsToLookInside;", "-\t\t\t\tif (unitToLookInside != null) {", "-\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "-\t\t\t\t\tif (wcLength == 0) {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "-\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "-\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\t\t}", "+\t\tif (inProjectOfFocusType) {", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "+\t\t\tIWorkingCopy[] unitsToLookInside;", "+\t\t\tif (unitToLookInside != null) {", "+\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "+\t\t\t\tif (wcLength == 0) {", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "+\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "+\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside);", "+\t\t\t} else {", "+\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc64ca7e833877f0509994de6f91cfda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic  ClassFileReader classFileReader(IType type)", "signatureAfterChange": " \tpublic  ClassFileReader classFileReader(IType type)", "diff": ["-\t\t\tsynchronized(manager){", "-\t\t\t\treturn (ClassFileReader)manager.getInfo(type);", "-\t\t\t}", "+\t\t\treturn (ClassFileReader)manager.getInfo(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eebf82cccdf4d38e7a91baee92fcf099", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "99d9827a13a83fa6bbad43196ec624282b8c65f9", "commitAfterChange": "f73ac72a4252a0f65e763fcd4775e57fa94c512c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "-\t\tsynchronized (this.userLibraries) {", "-\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "-\t\t\ttry {", "-\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\tinstancePreferences.flush();", "-\t\t\t} catch (BackingStoreException e) {", "-\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "-\t\t\t}", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary) {", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX + libName;", "+\t\ttry {", "+\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// preferenceChange(...))", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\treturn;", "-\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t}", "+\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now."]}], "num": 23517}
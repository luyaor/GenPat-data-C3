{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e89ae6c5e5f967d6f700c53a5d3a0eff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "548889cca9c078184cc935c2931e8106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type)", "signatureAfterChange": " \tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult)", "diff": ["+\t */", "+\tprivate Initializer convert(InitializerElementInfo initializerInfo, CompilationResult compilationResult) {", "+", "+\t\tBlock block = new Block(0);", "+\t\tInitializer initializer = new Initializer(block, IConstants.AccDefault);", "+", "+\t\tint start = initializerInfo.getDeclarationSourceStart();", "+\t\tint end = initializerInfo.getDeclarationSourceEnd();", "+", "+\t\tinitializer.name = initializerInfo.getName();", "+\t\tinitializer.sourceStart = initializer.declarationSourceStart = start;", "+\t\tinitializer.sourceEnd = initializer.declarationSourceEnd = end;", "+\t\tinitializer.modifiers = initializerInfo.getModifiers();", "+", "+\t\t/* convert local and anonymous types */", "+\t\tIJavaElement[] children = initializerInfo.getChildren();", "+\t\tint typesLength = children.length;", "+\t\tif (typesLength > 0) {", "+\t\t\tStatement[] statements = new Statement[typesLength];", "+\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\tJavaElement type = (JavaElement)children[i];", "+\t\t\t\ttry {", "+\t\t\t\t\tTypeDeclaration localType = convert((ISourceType)type.getElementInfo(), compilationResult);", "+\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstatements[i] = localType;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tblock.statements = statements;", "+\t\t}", "+\t\t", "+\t\treturn initializer;", "+\t}", "-\tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type) {", "-\t\t\t/* conversion of field constant */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54b5d792598684b2e69cf0a88f760d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "91a5b49121a22c32ff81484145fe6ce15b755e81", "commitAfterChange": "16b9910572e7876db169469e4f3c509a31490ed4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "diff": ["+\t\t", "+\t\t/* convert local and anonymous types */", "+\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceMethod instanceof SourceMethodElementInfo) {", "+\t\t\tIJavaElement[] children = ((SourceMethodElementInfo)sourceMethod).getChildren();", "+\t\t\tint typesLength = children.length;", "+\t\t\tif (typesLength != 0) {", "+\t\t\t\tStatement[] statements = new Statement[typesLength];", "+\t\t\t\tfor (int i = 0; i < typesLength; i++) {", "+\t\t\t\t\tJavaElement type = (JavaElement)children[i];", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tTypeDeclaration localType = convert((SourceTypeElementInfo)type.getElementInfo(), compilationResult);", "+\t\t\t\t\t\tif ((localType.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\t\t\tQualifiedAllocationExpression expression = new QualifiedAllocationExpression(localType);", "+\t\t\t\t\t\t\texpression.type = localType.superclass;", "+\t\t\t\t\t\t\tlocalType.superclass = null;", "+\t\t\t\t\t\t\tlocalType.superInterfaces = null;", "+\t\t\t\t\t\t\tlocalType.allocation = expression;", "+\t\t\t\t\t\t\tstatements[i] = expression;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tstatements[i] = localType;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tmethod.statements = statements;", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 63434}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82adbc4760607e92d528d5fffd1e6d32", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20db75696a137a6ef7d71739a3a89719", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "e91a703eab271e6e509fa0880cd2ccbbc83f4ff3", "commitAfterChange": "f50fc8c9189dc4d436a8fe80d2776d88a2efa8bc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\t\t\tif (currentType.isGenericType()) {", "-\t\t\t\tqualifiedType = scope.environment().createRawType(currentType, qualifiedType);", "-\t\t\t} else if (qualifiedType != null) {", "+\t\t\tif (qualifiedType != null) {", "-\t\t\t\tif ((rawQualified = qualifiedType.isRawType()) && !currentType.isStatic()) {", "+\t\t\t\tif (currentType.isGenericType()) {", "+\t\t\t\t\tqualifiedType = scope.environment().createRawType(currentType, qualifiedType);", "+\t\t\t\t} else if ((rawQualified = qualifiedType.isRawType()) && !currentType.isStatic()) {", "-\t\t\t\tqualifiedType = currentType;", "+\t\t\t\tqualifiedType = currentType.isGenericType() ? (ReferenceBinding)scope.environment().convertToRawType(currentType) : currentType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8a714aedb8a02af5b7fe9da8c70fd64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tpublic TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \t\tpublic TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "+\t\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) (originalType.isStatic() ? substitution.environment().convertToRawType(originalEnclosing, true) : ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) substitute(substitution, originalEnclosing));"]}], "num": 21797}
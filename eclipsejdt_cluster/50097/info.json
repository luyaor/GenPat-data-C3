{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10e120201f00d1cc5f58ff1fec750a6f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520041748e23342d0a5c6ae75dacbc54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "2ead4bdcbfe85e4d5b336d70f2ec655c30027212", "commitAfterChange": "f616e9e60854b9ecc305ec556fb6b4dc12ff00d6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\tthis.reset(); // this will fork a new thread", "-\t\t\t\tthrow e;", "+\t\t\t\tthis.reset(); // this will fork a new thread with no waiting jobs, some indexes will be inconsistent", "+\t\t\tthrow e;", "+\t\t} catch (Error e) {", "+\t\t\tif (this.thread != null && !(e instanceof ThreadDeath)) {", "+\t\t\t\t// log exception", "+\t\t\t\torg.eclipse.jdt.internal.core.Util.log(e, \"Background Indexer Crash Recovery\"); //$NON-NLS-1$", "+\t\t\t\t", "+\t\t\t\t// keep job manager alive", "+\t\t\t\tthis.discardJobs(null);", "+\t\t\t\tthis.thread = null;", "+\t\t\t\tthis.reset(); // this will fork a new thread with no waiting jobs, some indexes will be inconsistent", "+\t\t\t}", "+\t\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e65ba5b2f101fa0c42a6793d2b7e053e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "37b18fe3dec30aacdbf97606c4be5a6236865064", "commitAfterChange": "1bf86fe4326efd3891490b85eefffb1c336ab872", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["+\t\t\t\tExplicitConstructorCall constructorCall = constructorDeclaration.constructorCall;", "+\t\t\t\tif (constructorCall != null && constructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\tblock.statements().add(converter.convert(constructorCall));", "+\t\t\t\t}"]}], "num": 50097}
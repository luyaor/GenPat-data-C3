{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c351b62dd3bf28a0e5571fdc61ce0da", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa3b0fc0131a2e6dee2a5bd1c8c65af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "aaa43eec904e27741de5c55121881f4c0383d53f", "commitAfterChange": "0ffd32ee08cd2dc832efa1134a050b16b350c66a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\t\tTypeBinding superType = this.superclass;", "-\t\t\tif (superType != argumentType) { // check identity before substituting (104649)", "-\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, superType) : superType;", "+\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superclass) : this.superclass;", "+\t    \tif (substitutedSuperType != argumentType) {", "-\t\t\t}", "+\t    \t}", "-\t    \tTypeBinding superType = this.superInterfaces[i];", "-\t    \tif (superType != argumentType) { // check identity before substituting (104649)", "-\t\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, superType) : superType;", "+\t\t\tTypeBinding substitutedSuperType = hasSubstitution ? Scope.substitute(substitution, this.superInterfaces[i]) : this.superInterfaces[i];", "+\t    \tif (substitutedSuperType != argumentType) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f933a6c9e37b15a85612fc24f9a7077b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testBecomeWorkingCopy1() throws CoreException", "signatureAfterChange": " \tpublic void testBecomeWorkingCopy1() throws CoreException", "diff": ["-\t\tICompilationUnit cu = null;", "-\t\ttry {", "-\t\t\tcu = getCompilationUnit(\"P/X.java\");", "-\t\t\tassertTrue(\"should not be in working copy mode\", !cu.isWorkingCopy());", "-\t\t\t", "-\t\t\tcu.becomeWorkingCopy(null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", cu.isWorkingCopy());", "-\t\t} finally {", "-\t\t\tif (cu != null) {", "-\t\t\t\tcu.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\");", "+\t\tassertTrue(\"should not be in working copy mode\", !this.workingCopy.isWorkingCopy());", "+\t\t", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "+\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());"]}], "num": 64432}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "965134384b6067ca540791d254de7e7c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4812ab07a687229292a4162205f8eb1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "78bbbeed8347e023a39893a354552d3196a82094", "commitAfterChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\tSyntheticArgumentBinding[] outerLocals = this.receiverType.syntheticOuterLocalVariables();", "+\t\tfor (int i = 0, length = outerLocals == null ? 0 : outerLocals.length; i < length; i++)", "+\t\t\timplicitLambda.addSyntheticArgument(outerLocals[i].actualOuterLocalVariable);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8a0d85521fe71267e9f207031464b6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/RemoveFolderFromIndex.java", "commitBeforeChange": "fd2df73ef9d8c1f3cb6f04f5169c0f3c5bb417cf", "commitAfterChange": "b9151e9319708f3d004c77f114c4f35584a87c41", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tfor (int i = 0, max = paths == null ? 0 : paths.length; i < max; i++) {", "-\t\t\t\tString documentPath = paths[i];", "-\t\t\t\tif (!Util.isExcluded(new Path(documentPath), this.inclusionPatterns, this.exclusionPatterns, false)) {", "-\t\t\t\t\tmanager.remove(documentPath, this.containerPath); // write lock will be acquired by the remove operation", "+\t\t\tif (this.exclusionPatterns == null && this.inclusionPatterns == null) {", "+\t\t\t\tfor (int i = 0, max = paths == null ? 0 : paths.length; i < max; i++)", "+\t\t\t\t\tmanager.remove(paths[i], this.containerPath); // write lock will be acquired by the remove operation", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0, max = paths == null ? 0 : paths.length; i < max; i++) {", "+\t\t\t\t\tString documentPath = paths[i];", "+\t\t\t\t\tif (!Util.isExcluded(new Path(documentPath), this.inclusionPatterns, this.exclusionPatterns, false))", "+\t\t\t\t\t\tmanager.remove(documentPath, this.containerPath); // write lock will be acquired by the remove operation"]}], "num": 55202}
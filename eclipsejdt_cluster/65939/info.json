{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c721c45bc7147b687500090ce8dc2a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e49851c47b18a4b7c0e8e6a3c1a25c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "e67d1dc6830648c83fdb0e0b83b59925424638d8", "commitAfterChange": "4817a4bde9db799e7a793068d64037f59bfa521f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": " void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (nullableAnnotationName == null || nonNullAnnotationName == null)", "+\tchar[][] nonNullByDefaultAnnotationName = this.environment.getNonNullByDefaultAnnotationName();", "+\tif (nullableAnnotationName == null || nonNullAnnotationName == null || nonNullByDefaultAnnotationName == null)", "+", "+\tint currentDefault = NO_NULL_DEFAULT;", "+\tif ((this.tagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "+\t\tcurrentDefault = NONNULL_BY_DEFAULT;", "+\t} else if ((this.tagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {", "+\t\tcurrentDefault = NULL_UNSPECIFIED_BY_DEFAULT;", "+\t}", "+\tboolean explicitNullness = false;", "-\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\tbreak;", "+\t\t\tif (CharOperation.equals(typeName, nonNullByDefaultAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tcurrentDefault = NONNULL_BY_DEFAULT;", "-\t\t\tif (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "+\t\t\t\texplicitNullness = true;", "+\t\t\t}", "+\t\t\tif (!explicitNullness && CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\tbreak;", "+\t\t\t\texplicitNullness = true;", "+\t}", "+\tif (!explicitNullness && currentDefault == NONNULL_BY_DEFAULT) {", "+\t\tmethodBinding.tagBits |= TagBits.AnnotationNonNull;", "-\tif (numParamAnnotations > 0) {", "-\t\tint startIndex = numParamAnnotations - numVisibleParams;", "+\tif (numParamAnnotations > 0 || currentDefault == NONNULL_BY_DEFAULT) {", "-\t\t\tIBinaryAnnotation[] paramAnnotations = method.getParameterAnnotations(j+startIndex);", "-\t\t\tif (paramAnnotations != null) {", "-\t\t\t\tfor (int i = 0; i < paramAnnotations.length; i++) {", "-\t\t\t\t\tchar[] annotationTypeName = paramAnnotations[i].getTypeName();", "-\t\t\t\t\tif (annotationTypeName[0] != Util.C_RESOLVED)", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tchar[][] typeName = CharOperation.splitOn('/', annotationTypeName, 1, annotationTypeName.length-1); // cut of leading 'L' and trailing ';'", "-\t\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "-\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "-\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "-\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "-\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "-\t\t\t\t\t\tbreak;", "+\t\t\texplicitNullness = false;", "+\t\t\tif (numParamAnnotations > 0) {", "+\t\t\t\tint startIndex = numParamAnnotations - numVisibleParams;", "+\t\t\t\tIBinaryAnnotation[] paramAnnotations = method.getParameterAnnotations(j+startIndex);", "+\t\t\t\tif (paramAnnotations != null) {", "+\t\t\t\t\tfor (int i = 0; i < paramAnnotations.length; i++) {", "+\t\t\t\t\t\tchar[] annotationTypeName = paramAnnotations[i].getTypeName();", "+\t\t\t\t\t\tif (annotationTypeName[0] != Util.C_RESOLVED)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tchar[][] typeName = CharOperation.splitOn('/', annotationTypeName, 1, annotationTypeName.length-1); // cut of leading 'L' and trailing ';'", "+\t\t\t\t\t\tif (CharOperation.equals(typeName, nonNullAnnotationName)) {", "+\t\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+\t\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+\t\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "+\t\t\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} else if (CharOperation.equals(typeName, nullableAnnotationName)) {", "+\t\t\t\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+\t\t\t\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+\t\t\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.FALSE;", "+\t\t\t\t\t\t\texplicitNullness = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!explicitNullness && currentDefault == NONNULL_BY_DEFAULT) {", "+\t\t\t\tif (methodBinding.parameterNonNullness == null)", "+\t\t\t\t\tmethodBinding.parameterNonNullness = new Boolean[numVisibleParams];", "+\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdae1b2e200d39563d659592b0cc1390", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "e4a4b50610c646cb6bf3bb4c3d31aa510f5cd436", "commitAfterChange": "674f4479b6b5621d2d1cd025a88c2a63b198bd88", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\t\t\t\t", "+\t\t\tcase K_BETWEEN_CASE_AND_COLON :", "+\t\t\t\tif(this.expressionPtr > 0) {", "+\t\t\t\t\tSwitchStatement switchStatement = new SwitchStatement();", "+\t\t\t\t\tswitchStatement.expression = this.expressionStack[this.expressionPtr - 1];", "+\t\t\t\t\tif(this.astLengthPtr > -1 && this.astPtr > -1) {", "+\t\t\t\t\t\tint length = this.astLengthStack[this.astLengthPtr];", "+\t\t\t\t\t\tint newAstPtr = this.astPtr - length;", "+\t\t\t\t\t\tASTNode firstNode = this.astStack[newAstPtr + 1];", "+\t\t\t\t\t\tif(length != 0 && firstNode.sourceStart > switchStatement.expression.sourceEnd) {", "+\t\t\t\t\t\t\tswitchStatement.statements = new Statement[length + 1];", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tthis.astStack, ", "+\t\t\t\t\t\t\t\tnewAstPtr + 1, ", "+\t\t\t\t\t\t\t\tswitchStatement.statements, ", "+\t\t\t\t\t\t\t\t0, ", "+\t\t\t\t\t\t\t\tlength); ", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tCaseStatement caseStatement = new CaseStatement(expression, expression.sourceStart, expression.sourceEnd);", "+\t\t\t\t\tif(switchStatement.statements == null) {", "+\t\t\t\t\t\tswitchStatement.statements = new Statement[]{caseStatement};", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitchStatement.statements[switchStatement.statements.length - 1] = caseStatement;", "+\t\t\t\t\t}", "+\t\t\t\t\tassistNodeParent = switchStatement;", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}], "num": 65939}
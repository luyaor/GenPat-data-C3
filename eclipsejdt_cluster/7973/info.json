{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bb9738f07874e9b64e23ffc82ecec39", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9efa4ff79b93a28da404115de85bd620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tBlockScope blockScope)", "signatureAfterChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tBlockScope blockScope)", "diff": ["-\t\t\ttryBlock.traverse(visitor, scope);", "-\t\t\tif (catchArguments != null) {", "-\t\t\t\tfor (int i = 0, max = catchBlocks.length; i < max; i++) {", "-\t\t\t\t\tcatchArguments[i].traverse(visitor, scope);", "-\t\t\t\t\tcatchBlocks[i].traverse(visitor, scope);", "+\t\t\tthis.tryBlock.traverse(visitor, this.scope);", "+\t\t\tif (this.catchArguments != null) {", "+\t\t\t\tfor (int i = 0, max = this.catchBlocks.length; i < max; i++) {", "+\t\t\t\t\tthis.catchArguments[i].traverse(visitor, this.scope);", "+\t\t\t\t\tthis.catchBlocks[i].traverse(visitor, this.scope);", "-\t\t\tif (finallyBlock != null)", "-\t\t\t\tfinallyBlock.traverse(visitor, scope);", "+\t\t\tif (this.finallyBlock != null)", "+\t\t\t\tthis.finallyBlock.traverse(visitor, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e595acffbefe8827e0497004b8d4ca39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["-\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "+\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){", "+\tif ((this.binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) this.binding).problemId() == NotFound)", "+\t\t|| (this.binding instanceof ProblemBinding && ((ProblemBinding) this.binding).problemId() == NotFound)){", "-\t\tFieldBinding fieldBinding = scope.getField(delegateThis.type, this.tokens[0], this);", "+\t\tFieldBinding fieldBinding = scope.getField(this.delegateThis.type, this.tokens[0], this);", "-\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);", "-\t\t\t\tif (binding.isValidBinding()) {", "+\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.tokens[0], this);", "+\t\t\t\tif (this.binding.isValidBinding()) {", "-\t\tthis.codegenBinding = binding = fieldBinding;", "+\t\tthis.codegenBinding = this.binding = fieldBinding;", "-\tif (binding instanceof ProblemFieldBinding", "-\t\t&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {", "+\tif (this.binding instanceof ProblemFieldBinding", "+\t\t&& ((ProblemFieldBinding) this.binding).problemId() == NotVisible) {"]}], "num": 7973}
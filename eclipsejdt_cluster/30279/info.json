{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82f8473d27865ae3081172762cfa5725", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0165e2a1022b3b97df4dfe21dc448570", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\tif (this.binding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "-\t\tboolean isStatic = this.binding.isStatic();", "+\t\tboolean isStatic = this.codegenBinding.isStatic();", "-\t\t\tcodeStream.invokestatic(this.binding);", "+\t\t\tcodeStream.invokestatic(this.codegenBinding);", "-\t\t\t\tcodeStream.invokespecial(this.binding);", "+\t\t\t\tcodeStream.invokespecial(this.codegenBinding);", "-\t\t\t\tif (this.binding.declaringClass.isInterface()) {", "-\t\t\t\t\tcodeStream.invokeinterface(this.binding);", "+\t\t\t\tif (this.codegenBinding.declaringClass.isInterface()) {", "+\t\t\t\t\tcodeStream.invokeinterface(this.codegenBinding);", "-\t\t\t\t\tcodeStream.invokevirtual(this.binding);", "+\t\t\t\t\tcodeStream.invokevirtual(this.codegenBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, this.binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, this.codegenBinding);", "-\t\tboolean isStatic = this.binding.isStatic();", "+\t\tboolean isStatic = this.codegenBinding.isStatic();", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));", "-\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.codegenBinding.parameters[i]);", "-\t\t\tcodeStream.newArray(currentScope, new ArrayBinding(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT), 1));\t\t\t", "+\t\t\tcodeStream.newArray(currentScope, currentScope.createArrayType(currentScope.getType(TypeConstants.JAVA_LANG_OBJECT, 3), 1));\t\t\t", "-\t\tif (this.binding.returnType.isBaseType()) {", "-\t\t\tint typeID = this.binding.returnType.id;", "+\t\tif (this.codegenBinding.returnType.isBaseType()) {", "+\t\t\tint typeID = this.codegenBinding.returnType.id;", "-\t\t\tcodeStream.checkcast(this.binding.returnType);", "+\t\t\tcodeStream.checkcast(this.codegenBinding.returnType);", "-\t\tswitch (this.binding.returnType.id) {", "+\t\tswitch (this.codegenBinding.returnType.id) {", "+\t// TODO (philippe) need to revise codegen to include genericCast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68721a16faf994a16c15fe721cc9d397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-public void generateCode(", "-\tBlockScope currentScope,", "-\tCodeStream codeStream,", "-\tboolean valueRequired) {", "-", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-", "-\tif (this.codegenBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "+\tMethodBinding codegenBinding = this.binding.original();", "+\tif (codegenBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "-\t\tboolean isStatic = this.codegenBinding.isStatic();", "+\t\tboolean isStatic = codegenBinding.isStatic();", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t} else if( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, codegenBinding, constantPoolDeclaringClass);", "+\t\t} else if( (this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);", "-\t\tcodeStream.generateEmulationForMethod(currentScope, this.codegenBinding);", "+\t\tcodeStream.generateEmulationForMethod(currentScope, codegenBinding);", "-\t\tboolean isStatic = this.codegenBinding.isStatic();", "+\t\tboolean isStatic = codegenBinding.isStatic();", "-\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = codegenBinding.parameters[i];", "-\t\t\t\t\tcodeStream.generateBoxingConversion(this.codegenBinding.parameters[i].id);", "+\t\t\t\t\tcodeStream.generateBoxingConversion(codegenBinding.parameters[i].id);", "-\t\tif (this.codegenBinding.returnType.isBaseType()) {", "-\t\t\tint typeID = this.codegenBinding.returnType.id;", "+\t\tif (codegenBinding.returnType.isBaseType()) {", "+\t\t\tint typeID = codegenBinding.returnType.id;", "-\t\t\tcodeStream.checkcast(this.codegenBinding.returnType);", "+\t\t\tcodeStream.checkcast(codegenBinding.returnType);", "-\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.codegenBinding.returnType.id) {", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : codegenBinding.returnType.id) {"]}], "num": 30279}
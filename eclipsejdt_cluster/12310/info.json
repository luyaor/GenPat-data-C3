{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8974764053d29b0fc3dc15f6a41d13dd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1eff54100eb4c9c1c4e5b4a4f27c8b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "42a83e286ceeeb29630f8c589f53ac9c4faaa3fa", "commitAfterChange": "daca3c57fe8ee65cb418bcec5cbbb6e712e7dc06", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report non-externalized string literals", "+\t\t\t// Report local var hiding another variable", "+\t\t\tif(optionID.equals(OPTION_ReportLocalVariableHiding)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= LocalVariableHiding;", "+\t\t\t\t\tthis.warningThreshold &= ~LocalVariableHiding;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~LocalVariableHiding;", "+\t\t\t\t\tthis.warningThreshold |= LocalVariableHiding;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~LocalVariableHiding;", "+\t\t\t\t\tthis.warningThreshold &= ~LocalVariableHiding;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t// Report field hiding another variable", "+\t\t\tif(optionID.equals(OPTION_ReportFieldHiding)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= FieldHiding;", "+\t\t\t\t\tthis.warningThreshold &= ~FieldHiding;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~FieldHiding;", "+\t\t\t\t\tthis.warningThreshold |= FieldHiding;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~FieldHiding;", "+\t\t\t\t\tthis.warningThreshold &= ~FieldHiding;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t// Report constructor parameter hiding another variable", "+\t\t\tif(optionID.equals(OPTION_ReportConstructorParameterHidingField)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= ConstructorParameterHidingField;", "+\t\t\t\t\tthis.warningThreshold &= ~ConstructorParameterHidingField;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ConstructorParameterHidingField;", "+\t\t\t\t\tthis.warningThreshold |= ConstructorParameterHidingField;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ConstructorParameterHidingField;", "+\t\t\t\t\tthis.warningThreshold &= ~ConstructorParameterHidingField;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}\t\t\t// Report non-externalized string literals"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da8ee83b8c86f543a17e3c7459372964", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "commitAfterChange": "c01ae722f1b8e267f566f56a56228af04d49effb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["+\tif (this.constant != null) {", "+\t\treturn this.constant;", "+\t}", "-\treturn info.initializationSource;", "+\tif (info.initializationSource == null) {", "+\t\treturn null;", "+\t}", "+\t\t\t", "+\tString constantSource = new String(info.initializationSource);", "+\tString signature = info.getTypeSignature();", "+\tif (signature.equals(Signature.SIG_INT)) {", "+\t\tthis.constant = new Integer(constantSource);", "+\t} else if (signature.equals(Signature.SIG_SHORT)) {", "+\t\tthis.constant = new Short(constantSource);", "+\t} else if (signature.equals(Signature.SIG_BYTE)) {", "+\t\tthis.constant = new Byte(constantSource);", "+\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "+\t\tthis.constant = new Boolean(constantSource);", "+\t} else if (signature.equals(Signature.SIG_CHAR)) {", "+\t\tthis.constant = new Character(constantSource.charAt(0));", "+\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "+\t\tthis.constant = new Double(constantSource);", "+\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "+\t\tthis.constant = new Float(constantSource);", "+\t} else if (signature.equals(Signature.SIG_LONG)) { ", "+\t\tthis.constant = new Long(constantSource);", "+\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "+\t\tthis.constant = constantSource;", "+\t}", "+\treturn this.constant;"]}], "num": 12310}
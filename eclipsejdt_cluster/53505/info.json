{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6421c567017e498a3458f6dec57f4f32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea7663337bb7233b6b1f48423187b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "f9abe0eae1be0e7103573798b92ccd764f2825ac", "commitAfterChange": "62ced9026f30eddc79c6a97850b3155aea91f5e5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void test422050a()", "signatureAfterChange": " public void test4008712x()", "diff": ["-// https://bugs.eclipse.org/bugs/show_bug.cgi?id=422050, [1.8][compiler] Overloaded method call with poly-conditional expression rejected by the compiler", "-public void test422050a() {", "-\t\t\t\t\"interface I { \\n\" +", "-\t\t\t\t\"\tInteger foo(); \\n\" +", "-\t\t\t\t\"interface J { \\n\" +", "-\t\t\t\t\"\tvoid foo(); \\n\" +", "-\t\t\t\t\"\tstatic int foo(I i) {\\n\" +", "-\t\t\t\t\"\t\treturn 0;\\n\" +", "-\t\t\t\t\"\tstatic int foo(J j) {\\n\" +", "-\t\t\t\t\"\t\treturn 1;\\n\" +", "-\t\t\t\t\"\tpublic static void main(String argv[]) {\\n\" +", "-\t\t\t\t\"\t\tSystem.out.println(foo (() -> foo((I) null)));\\n\" +", "-\t\t\t\"0\");", "+}", "+public void test4008712x() {", "+\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"interface I {\\n\" +", "+\t\t\t\t\"\tvoid foo(String x);\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"interface J {\\n\" +", "+\t\t\t\t\"\tString foo(String x);\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y<T> {\\n\" +", "+\t\t\t\t\"\tpublic T foo(T x) {\\n\" +", "+\t\t\t\t\"\t\t return null;\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"   private void foo() {}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"public class X<T> extends Y<String> {\\n\" +", "+\t\t\t\t\"   public String foo(String s) { return null; }\\n\" +", "+\t\t\t\t\"\tstatic void goo(I i) {\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(\\\"foo(I)\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tstatic void goo(J j) {\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(\\\"foo(J)\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) { \\n\" +", "+\t\t\t\t\"\t\tgoo(new X<String>()::foo);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"foo(J)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27a70730429873cba31056082c420385", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "d24e88cc9af0c97fc7cbd6e1048817022c7bd039", "commitAfterChange": "600cc6e957b3608b8d3c26027936fe87489e52d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test4()", "signatureAfterChange": " public void test4()", "diff": ["-\t\tnew ExpectedProblem[] {", "-\t\t\tnew ExpectedProblem(\"p/Warning.java\", IProblem.UsingDeprecatedMethod, new String[] {\"Date\", \"UTC\", \"int, int, int, int, int, int\"}),", "-\t\t\tnew ExpectedProblem(\"p/Warning.java\", IProblem.NonStaticAccessToStaticMethod, new String[] {\"Date\", \"UTC\", \"int, int, int, int, int, int\"}),", "-\t\t}", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\Warning.java (at line 7)\\n\" + ", "+\t\t\"\tdateObj.UTC(1,2,3,4,5,6);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method UTC(int, int, int, int, int, int) from the type Date is deprecated\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in p\\\\Warning.java (at line 7)\\n\" + ", "+\t\t\"\tdateObj.UTC(1,2,3,4,5,6);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The static method UTC(int, int, int, int, int, int) from the type Date should be accessed in a static way\\n\" + ", "+\t\t\"----------\\n\"", "+"]}], "num": 53505}
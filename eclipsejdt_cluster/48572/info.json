{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81bfdb054dba81e311b234bcfba935ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8735902d057ea61e923a9aecdd25ff01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate void prepareWraps()", "diff": ["-", "-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {", "-\t\tif (PROBING_SCANNER == null) {", "-\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT", "-\t\t\t// do not tokenize white spaces to get single comments even with spaces before...", "-\t\t\tPROBING_SCANNER = new Scanner(true, false/*do not tokenize whitespaces*/, false/*nls*/, ClassFileConstants.JDK1_6, ClassFileConstants.JDK1_6, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t}", "-\t\tPROBING_SCANNER.setSource(source.toCharArray());", "-", "-\t\tIRegion coveredRegion = getCoveredRegion(regions);", "-\t\tint offset = coveredRegion.getOffset();", "-\t\tint length = coveredRegion.getLength();", "-", "-\t\tPROBING_SCANNER.resetTo(offset, offset + length - 1);", "-\t\ttry {", "-\t\t\tint kind = -1;", "-\t\t\tswitch(PROBING_SCANNER.getNextToken()) {", "-\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\tkind = K_MULTI_LINE_COMMENT;", "-\t\t\t\t\t}", "-\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "-\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\tkind = K_SINGLE_LINE_COMMENT;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\tkind = K_JAVA_DOC;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\tif (kind != -1) {", "-\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, regions);", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "-\t\tPROBING_SCANNER.setSource((char[]) null);", "-\t\t// probe for expression", "-\t\tExpression expression = this.codeSnippetParsingUtil.parseExpression(source.toCharArray(), this.defaultCompilerOptions, true);", "-\t\tif (expression != null) {", "-\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, regions, includeComments);", "-\t\t// probe for body declarations (fields, methods, constructors)", "-\t\tASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), this.defaultCompilerOptions, true);", "-\t\tif (bodyDeclarations != null) {", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, regions, includeComments);", "-\t\t}", "-", "-\t\t// probe for statements", "-\t\tConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), this.defaultCompilerOptions, true, false);", "-\t\tif (constructorDeclaration.statements != null) {", "-\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, regions, includeComments);", "-\t\t}", "-", "-\t\t// this has to be a compilation unit", "-\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, includeComments);", "+\tprivate void prepareWraps() {", "+\t\tWrapPreparator wrapPreparator = new WrapPreparator(this.tokenManager, this.workingOptions);", "+\t\tthis.astRoot.accept(wrapPreparator);", "+\t\twrapPreparator.finishUp();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a982167a15f8538c0df23c26b168b197", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate void prepareWraps()", "diff": ["-", "-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {", "-\t\tif (PROBING_SCANNER == null) {", "-\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT", "-\t\t\t// do not tokenize white spaces to get single comments even with spaces before...", "-\t\t\tPROBING_SCANNER = new Scanner(true, false/*do not tokenize whitespaces*/, false/*nls*/, ClassFileConstants.JDK1_6, ClassFileConstants.JDK1_6, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t}", "-\t\tPROBING_SCANNER.setSource(source.toCharArray());", "-", "-\t\tIRegion coveredRegion = getCoveredRegion(regions);", "-\t\tint offset = coveredRegion.getOffset();", "-\t\tint length = coveredRegion.getLength();", "-", "-\t\tPROBING_SCANNER.resetTo(offset, offset + length - 1);", "-\t\ttry {", "-\t\t\tint kind = -1;", "-\t\t\tswitch(PROBING_SCANNER.getNextToken()) {", "-\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\tkind = K_MULTI_LINE_COMMENT;", "-\t\t\t\t\t}", "-\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "-\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\tkind = K_SINGLE_LINE_COMMENT;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\tkind = K_JAVA_DOC;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\tif (kind != -1) {", "-\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, regions);", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "-\t\tPROBING_SCANNER.setSource((char[]) null);", "-\t\t// probe for expression", "-\t\tExpression expression = this.codeSnippetParsingUtil.parseExpression(source.toCharArray(), this.defaultCompilerOptions, true);", "-\t\tif (expression != null) {", "-\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, regions, includeComments);", "-\t\t// probe for body declarations (fields, methods, constructors)", "-\t\tASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), this.defaultCompilerOptions, true);", "-\t\tif (bodyDeclarations != null) {", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, regions, includeComments);", "-\t\t}", "-", "-\t\t// probe for statements", "-\t\tConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), this.defaultCompilerOptions, true, false);", "-\t\tif (constructorDeclaration.statements != null) {", "-\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, regions, includeComments);", "-\t\t}", "-", "-\t\t// this has to be a compilation unit", "-\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, includeComments);", "+\tprivate void prepareWraps() {", "+\t\tWrapPreparator wrapPreparator = new WrapPreparator(this.tokenManager, this.workingOptions);", "+\t\tthis.astRoot.accept(wrapPreparator);", "+\t\twrapPreparator.finishUp();"]}], "num": 48572}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92015259a2fa49fcf537489804e5f61b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1879bcab3372adc92a5d899e3c5c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "a4657a1df055a272f769463c9d20e50f1888cccd", "commitAfterChange": "489f25fe78cb0819d2624c39dd4083ca458bdea3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.left.traverse(this, scope);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f271c7dcac92e8637436b44bd17656f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "3ba22e291e000d313f08c2f65103444b86598ec8", "commitAfterChange": "2430a281333449aecffa1fcade92c26003c5a2cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate static char[][] suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner)", "signatureAfterChange": " \t \tprivate static char[][] suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner)", "diff": ["-\t\t\t\t\tint count = 2;", "-\t\t\t\t\tint m = 0;", "-\t\t\t\t\twhile (m < excludedNames.length) {", "-\t\t\t\t\t\tif(CharOperation.equals(suffixName, excludedNames[m], false)) {", "-\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "-\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\tString.valueOf(count++).toCharArray(),", "-\t\t\t\t\t\t\t\tsuffixes[k]", "-\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\tm = 0;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tm++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tint count;", "+\t\t\t\t\tint m;", "+\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\tsuffixes[k],", "+\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsuffixName = CharOperation.concat(", "+\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "+\t\t\t\t\t\t\tsuffixes[k]", "+\t\t\t\t\t\t);", "+\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\tsuffixes[k],", "+\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "+\t\t\t\t\t\t\tnames[namesCount++] = suffixName;", "+\t\t\t\t\t\t}", "+\t\t", "+\t\t// if no names were found", "+\t\tif(names.length == 0) {", "+\t\t\tnames = new char[][]{excludeNames(DEFAULT_NAME, DEFAULT_NAME, CharOperation.NO_CHAR, excludedNames)};", "+\t\t}"]}], "num": 24045}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531614fa13f1ca136b97e54e0555e569", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "301d01c110a77decf261ecff02ca257b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String prefix, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-protected void computeFolderChildren(IContainer folder, boolean isIncluded, String prefix, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException {", "+protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException {", "-\t    IPackageFragment pkg = getPackageFragment(prefix);", "+\t    IPackageFragment pkg = getPackageFragment(pkgName);", "-\t\t\t\t\t\t\t\tString newPrefix;", "-\t\t\t\t\t\t\t\tif (prefix.length() == 0) {", "-\t\t\t\t\t\t\t\t\tnewPrefix = memberName;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tnewPrefix = prefix + \".\" + memberName; //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newPrefix, vChildren, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t\t\tString[] newNames = Util.arrayConcat(pkgName, memberName);", "+\t\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(prefix);", "+\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3fec382de36ca1c82b141d3f0da200", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "commitAfterChange": "4730ffa6af7b8ef865530621618933366af2da66", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["+\t\t\t\t\t// recurse into sub folders even even parent not included as a sub folder could be included", "+\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "-\t\t\t\t\t    boolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t// keep looking inside as long as included already, or may have child included due to inclusion patterns", "-\t\t\t\t\t    if (isMemberIncluded || inclusionPatterns != null) { ", "-\t\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "-\t\t\t\t\t\t\tif (javaProject.contains(member)) {", "-\t\t\t\t\t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "-\t\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "+\t\t\t\t\t\tif (javaProject.contains(member)) {", "+\t\t\t\t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "+\t\t\t\t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);"]}], "num": 22869}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "959bb63092b3537e1c612abc734a5ef0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "105093674ba37c9bc5c3566677a83770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "8aa2f16fc4c306369aa796a7a45d222acfe1fa95", "commitAfterChange": "189f7ceb3f6249774ccdb459fb188cbd17dc60ea", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  \t\tpublic boolean writeAndCacheClasspath(final JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": "  \t\tpublic boolean writeAndCacheClasspath(JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException", "diff": ["-\t\tpublic boolean writeAndCacheClasspath(final JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException {", "-\t\t\tfinal boolean[] result = new boolean[1];", "+\t\tpublic boolean writeAndCacheClasspath(JavaProject javaProject, final IClasspathEntry[] newRawClasspath, final IPath newOutputLocation) throws JavaModelException {", "-\t\t\t\t// use a workspace runnable so that the notification of .classpath file change is done outside the synchronized block (to avoid deadlocks)", "-\t\t\t\tIWorkspace workspace = \tResourcesPlugin.getWorkspace();", "-\t\t\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\t\t\t// ensure that the writing of the .classpath file and the caching in memory are synchronized (see also readAnCacheClasspath which is synchronized)", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tPerProjectInfo.this.writtingRawClasspath = true;", "-\t\t\t\t\t\t\tsynchronized (PerProjectInfo.this) {", "-\t\t\t\t\t\t\t\tif (!javaProject.writeFileEntries(newRawClasspath, newOutputLocation)) {", "-\t\t\t\t\t\t\t\t\tresult[0] = false;", "-\t\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// store new raw classpath, new output and new status, and null out resolved info", "-\t\t\t\t\t\t\t\tsetRawClasspath(newRawClasspath, newOutputLocation, JavaModelStatus.VERIFIED_OK);", "-\t\t\t\t\t\t\t\tresult[0] = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\tPerProjectInfo.this.writtingRawClasspath = false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t},", "-\t\t\t\tworkspace.getRuleFactory().modifyRule(this.project), // use project modification rule as this is needed to create the .classpath file if it doesn't exist yet", "-\t\t\t\tIWorkspace.AVOID_UPDATE,", "-\t\t\t\tnull);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t    // rethrow exception (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=245576 )", "-\t\t\t\tthrow e;", "-\t\t\t} catch (CoreException e) {", "-\t\t\t    // rethrow exception (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=245576 )", "-\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\tthis.writtingRawClasspath = true;", "+\t\t\t\t// write .classpath", "+\t\t\t\tif (!javaProject.writeFileEntries(newRawClasspath, newOutputLocation)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\t// store new raw classpath, new output and new status, and null out resolved info", "+\t\t\t\tsetRawClasspath(newRawClasspath, newOutputLocation, JavaModelStatus.VERIFIED_OK);", "+\t\t\t} finally {", "+\t\t\t\tthis.writtingRawClasspath = false;", "-\t\t\treturn result[0];", "+\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c65cf3e76a09d6cc2d2311dad9938bd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\t\tpublic Boolean call()", "signatureAfterChange": " \t\t\tpublic Boolean call()", "diff": ["-\t\t\t\tBoolean value = EclipseCompiler.this.call() ? Boolean.TRUE : Boolean.FALSE;", "+\t\t\t\tBoolean value = eclipseCompiler2.call() ? Boolean.TRUE : Boolean.FALSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff3e79baa633ad11d8d0684b7f6fa7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TestPessimisticProvider.java", "commitBeforeChange": "6e0c03610cbc826f510f4808a438e90bdc9be9b7", "commitAfterChange": "011e8e3a52083052e5657e005c0f9c924e859fa5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic IStatus validateEdit(final IFile[] files, Object context)", "signatureAfterChange": " \t\t\tpublic IStatus validateEdit(final IFile[] files, FileModificationValidationContext context)", "diff": ["+\t\treturn new FileModificationValidator() {", "+\t\t\tpublic IStatus validateEdit(final IFile[] files, FileModificationValidationContext context) {", "+\t\t\t\tif (TestPessimisticProvider.markWritableOnEdit) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run(", "+\t\t\t\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor)\t{", "+\t\t\t\t\t\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\t\t\tsetReadOnly(files[i], false);", "+\t\t\t\t\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t}", "-\tpublic IStatus validateEdit(final IFile[] files, Object context) {", "-\t\tif (markWritableOnEdit) {", "-\t\t\ttry {", "-\t\t\t\tResourcesPlugin.getWorkspace().run(", "-\t\t\t\t\tnew IWorkspaceRunnable() {", "-\t\t\t\t\t\tpublic void run(IProgressMonitor monitor)\t{", "-\t\t\t\t\t\t\tfor (int i = 0, length = files.length; i < length; i++) {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tsetReadOnly(files[i], false);", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t},", "-\t\t\t\t\tnull);", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t\treturn e.getStatus();", "-\t\t\t}", "-\t\t} ", "-\t\treturn Status.OK_STATUS;", "-\t}"]}], "num": 63591}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ef870e4e93ff146bc47a038f2030fc9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dfa11f3ca756aa16175caa0f4a223bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "27fcbc8377d5279cf55f4f3363243a669638c60f", "commitAfterChange": "72dd2259c6b0bf873e52961aeda8ec4762bdb50b", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=90423", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=94754", "-\t\t\t\t\"\t\t public static <S extends A> S foo() { \\n\" + ", "-\t\t\t\t\"\t\t     System.out.print(\\\"A\\\"); \\n\" + ", "-\t\t\t\t\"\t\t     return null; \\n\" + ", "-\t\t\t\t\"\t\t  }\\n\" + ", "-\t\t\t\t\"\t\t public static <N extends B> N foo() { \\n\" + ", "-\t\t\t\t\"\t\t     System.out.print(\\\"B\\\");\\n\" + ", "-\t\t\t\t\"\t\t     return null; \\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "+\t\t\t\t\"\t\t public static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t\t public static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "-\t\t\t\t\"\t\t \tX o = new X();\\n\" + ", "-\t\t\t\t\"\t\t    o.<B>foo();\\n\" + ", "+\t\t\t\t\"\t\t \tnew X().<B>foo();\\n\" + ", "-// TODO (philippe) we get BBB", "-//\t\tthis.runConformTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"public class X {\\n\" + ", "-//\t\t\t\t\"\t\t public static <S extends A> void foo() { \\n\" + ", "-//\t\t\t\t\"\t\t     System.out.print(\\\"A\\\"); \\n\" + ", "-//\t\t\t\t\"\t\t  }\\n\" + ", "-//\t\t\t\t\"\t\t public static <N extends B> N foo() { \\n\" + ", "-//\t\t\t\t\"\t\t     System.out.print(\\\"B\\\");\\n\" + ", "-//\t\t\t\t\"\t\t     return null; \\n\" + ", "-//\t\t\t\t\"\t\t }\\n\" + ", "-//\t\t\t\t\"\t\t public static void main(String[] args) {\\n\" + ", "-//\t\t\t\t\"\t\t \tX.foo();\\n\" + ", "-//\t\t\t\t\"\t\t \tX.<B>foo();\\n\" + ", "-//\t\t\t\t\"\t\t \tX o = new X();\\n\" + ", "-//\t\t\t\t\"\t\t    o.<B>foo();\\n\" + ", "-//\t\t\t\t\"\t\t }\\n\" + ", "-//\t\t\t\t\"}\\n\" + ", "-//\t\t\t\t\"class A {}\\n\" + ", "-//\t\t\t\t\"class B {}\\n\"", "-//\t\t\t},", "-//\t\t\t\"ABB\"", "-//\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\t\t public static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" + ", "+\t\t\t\t\"\t\t public static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t\t static void test () {\\n\" + ", "+\t\t\t\t\"\t\t \tX.foo();\\n\" + ", "+\t\t\t\t\"\t\t \tfoo();\\n\" + ", "+\t\t\t\t\"\t\t }\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B {}\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" + ", "+\t\t\t\"\tX.foo();\\r\\n\" + ", "+\t\t\t\"\t  ^^^\\n\" + ", "+\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "+\t\t\t\"\tfoo();\\r\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// both references are ambiguous", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dcc9d32bc7c79d466bc91950fd94432", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 385, "methodNumberAfterChange": 385, "signatureBeforeChange": " \tpublic void _test383()", "signatureAfterChange": " \tpublic void test383()", "diff": ["-\tpublic void _test383() {", "+\tpublic void test383() {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\t\"interface I { <T, S> void foo(Class<T> s); }\\n\" + ", "+\t\t\t\t\"class Y { public <T> void foo(Class<T> s) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method I.foo(Class<T>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }\\n\" + ", "+\t\t\t\"\t                                                        ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method foo(Class<T>) of type X has the same erasure as foo(Class<T>) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\t\t/*", "+\t\t\tX.java:1: X is not abstract and does not override abstract method <T,S>foo(java.lang.Class<T>) in I", "+\t\t\tpublic class X extends Y implements I { public <T> void foo(Class<T> s) {} }", "+\t\t\t       ^", "+       \t\t*/", "-\t\t\t\t\"class Y { <T> void foo(Class<T> s) {} }\\n\"", "+\t\t\t\t\"class Y { public <T> void foo(Class<T> s) {} }\\n\"", "-\t\t\t\"Class must implement the inherited abstract method I.foo(Class<T>)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y { <T> void foo(Class<T> s) {} }\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X extends Y implements I {}\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method I.foo(Class<T>)\\n\" + ", "+\t\t\t/*", "+\t\t\tX.java:1: X is not abstract and does not override abstract method <T,S>foo(java.lang.Class<T>) in I", "+\t\t\tpublic class X extends Y implements I {}", "+\t\t\t       ^", "+\t\t\t*/", "-\t\t\t\t\"public abstract class X extends Y implements I {}\\n\" + ", "+\t\t\t\t\"public abstract class X extends Y implements I {}\\n\" + // NOTE: X is abstract", "-\t\t\t\t\"class Y { <T, S> void foo(Class<T> s) {} }\\n\"", "+\t\t\t\t\"class Y { public <T, S> void foo(Class<T> s) {} }\\n\"", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass Y { <T, S> void foo(Class<T> s) {} }\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic abstract class X extends Y implements I {}\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t/*", "+\t\t\tX.java:1: name clash: <T,S>foo(java.lang.Class<T>) in Y and <T>foo(java.lang.Class<T>) in I have the same erasure, yet neither overrides the other", "+\t\t\tpublic abstract class X extends Y implements I {}", "+\t\t\t                ^", "+\t\t\t */"]}], "num": 69398}
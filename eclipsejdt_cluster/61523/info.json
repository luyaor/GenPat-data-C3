{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "649ebab25c9a8aca88338fde3ad4a9b8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0528b95bf9ad7537e1c98ccc0f005b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "e569ccbcfbcb74e518eafb76280b234f1f261194", "commitAfterChange": "2f320253f72e97c287894f0303a7d3fb710470ca", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "diff": ["-\tIndex[] indexes = new Index[length];", "-\tint count = 0;", "-\tIndexManager indexManager = JavaModelManager.getIndexManager();", "-\tfor (int i = 0; i < length; i++) {", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\t// may trigger some index recreation work", "-\t\tIPath indexLocation = indexLocations[i];", "-\t\tIndex index = indexManager.getIndex(indexLocation);", "-\t\tif (index == null) {", "-\t\t\t// only need containerPath if the index must be built", "-\t\t\tIPath containerPath = (IPath) indexManager.indexLocations.keyForValue(indexLocation);", "-\t\t\tif (containerPath != null) // sanity check", "-\t\t\t\tindex = indexManager.getIndex(containerPath, indexLocation, true /*reuse index file*/, false /*do not create if none*/);", "-\t\t}", "-\t\tif (index != null)", "-\t\t\tindexes[count++] = index; // only consider indexes which are ready", "-\t}", "-\tif (count == length) ", "-\t\tthis.areIndexesReady = true;", "-\telse", "-\t\tSystem.arraycopy(indexes, 0, indexes=new Index[count], 0, count);", "+\tIndex[] indexes = JavaModelManager.getIndexManager().getIndexes(indexLocations, progressMonitor);", "+\tthis.areIndexesReady = indexes.length == length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da5f1cf136af9afda68c8b2c47bb8525", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "e7d0e101e34b7b6ee4b85e7209dafee08091c658", "commitAfterChange": "834d43c8a6ac5f159a487c1c2a9a5b14b35b4864", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic IIndex[] getIndexes(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic Index[] getIndexes(IProgressMonitor progressMonitor)", "diff": ["-\tpublic IIndex[] getIndexes(IProgressMonitor progressMonitor) {", "+\tpublic Index[] getIndexes(IProgressMonitor progressMonitor) {", "-\t\tIPath[] indexPathes = this.participant.selectIndexes(this.pattern, this.scope);", "-\t\tint length = indexPathes.length;", "-\t\tIIndex[] indexes = new IIndex[length];", "+\t\tIPath[] indexPaths = this.participant.selectIndexes(this.pattern, this.scope);", "+\t\tint length = indexPaths.length;", "+\t\tIndex[] indexes = new Index[length];", "-\t\tfor (int i = 0; i < length; i++){", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIIndex index = indexManager.getIndex(indexPathes[i], true /*reuse index file*/, false /*do not create if none*/);", "-\t\t\tif (index != null) indexes[count++] = index; // only consider indexes which are ready yet", "+\t\t\tIndex index = indexManager.getIndex(indexPaths[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t\t\tif (index != null)", "+\t\t\t\tindexes[count++] = index; // only consider indexes which are ready", "-\t\tif (count != length) {", "-\t\t\tSystem.arraycopy(indexes, 0, indexes=new IIndex[count], 0, count);", "-\t\t}", "-\t\tthis.areIndexesReady = true;", "+\t\tif (count == length) ", "+\t\t\tthis.areIndexesReady = true;", "+\t\telse", "+\t\t\tSystem.arraycopy(indexes, 0, indexes=new Index[count], 0, count);"]}], "num": 61523}
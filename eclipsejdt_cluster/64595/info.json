{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9593cdcd09ee6924094739f98ece5e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "145ef025dc8b0fd5d6df5c22f75310cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["+\t\t\tfinal boolean isFinal = localBinding.isFinal();", "-\t\t\tif (localBinding.isFinal()) {", "+\t\t\tif (flowInfo.isPotentiallyAssigned(localBinding)) {", "+\t\t\t\tlocalBinding.tagBits &= ~TagBits.IsEffectivelyFinal;", "+\t\t\t\tif (!isFinal && (this.bits & ASTNode.IsCapturedOuterLocal) != 0) {", "+\t\t\t\t\tcurrentScope.problemReporter().cannotReferToNonEffectivelyFinalOuterLocal(localBinding, this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (isFinal) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2824c36a14ac8cd010802015b69951f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "b1cdfe3ee438c0a38b27b1a4134346d549384d6a", "commitAfterChange": "1fd3c9fc562cda07c874ee80cb4f5d32730433f0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\tif (valueAttribute != null ", "-\t\t\t\t\t&& valueAttribute.value instanceof FalseLiteral) ", "-\t\t\t\t{", "-\t\t\t\t\t// parameter 'false' means: this annotation cancels any defaults", "-\t\t\t\t\ttagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\tbreak;", "+\t\t\t\tif (valueAttribute != null) {", "+\t\t\t\t\tif (valueAttribute.value instanceof FalseLiteral) {", "+\t\t\t\t\t\t// parameter 'false' means: this annotation cancels any defaults", "+\t\t\t\t\t\ttagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t} else if (valueAttribute.compilerElementPair != null) {", "+\t\t\t\t\t\tObject value = valueAttribute.compilerElementPair.value;", "+\t\t\t\t\t\tif (value instanceof Object[] && ((Object[])value).length == 0) {", "+\t\t\t\t\t\t\t// empty parameter means: this annotation cancels any defaults", "+\t\t\t\t\t\t\ttagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().nonNullDefaultDetailNotEvaluated(valueAttribute);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fa8804151988a88351be400b1487de7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "cc370a50ac7ec603f065f1e6278826253518f4d4", "commitAfterChange": "1ae189eb0affddcddb5cf43f9552f434a9d25d38", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (binding.isStatic()) {", "+\t\t\t// static field accessed through receiver? legal but unoptimal (optional warning)", "+\t\t\tif (!(receiver == ThisReference.ThisImplicit", "+\t\t\t\t\t|| receiver.isSuper()", "+\t\t\t\t\t|| (receiver instanceof NameReference ", "+\t\t\t\t\t\t&& (((NameReference) receiver).bits & BindingIds.TYPE) != 0))) {", "+\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, binding);", "+\t\t\t}", "+\t\t}"]}], "num": 64595}
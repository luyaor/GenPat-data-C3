{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d64e5fd5dcb94c5d39689a197a073c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae057d73c067369216b71d9670a0446f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void copyExtraResourcesBack() throws CoreException", "signatureAfterChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation) throws CoreException", "diff": ["-protected void copyExtraResourcesBack() throws CoreException {", "+", "+protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation) throws CoreException {", "-\tfinal IPath outputPath = outputFolder.getFullPath();", "-\tfor (int i = 0, length = sourceFolders.length; i < length; i++) {", "-\t\tIContainer sourceFolder = sourceFolders[i];", "-\t\tfinal IPath sourcePath = sourceFolder.getFullPath();", "-\t\tfinal int segmentCount = sourcePath.segmentCount();", "-\t\tsourceFolder.accept(", "-\t\t\tnew IResourceVisitor() {", "-\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\tswitch(resource.getType()) {", "-\t\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\t\tString extension = resource.getFileExtension();", "-\t\t\t\t\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(extension)) return false;", "-\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(extension)) return false;", "-\t\t\t\t\t\t\tif (javaBuilder.filterResource(resource)) return false;", "+\tfinal int segmentCount = sourceLocation.sourceFolder.getFullPath().segmentCount();", "+\tfinal char[][] exclusionPatterns = sourceLocation.exclusionPatterns;", "+\tfinal IContainer outputFolder = sourceLocation.binaryFolder;", "+\tsourceLocation.sourceFolder.accept(", "+\t\tnew IResourceVisitor() {", "+\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "+\t\t\t\t\treturn false;", "+\t\t\t\tswitch(resource.getType()) {", "+\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\tString extension = resource.getFileExtension();", "+\t\t\t\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(extension)) return false;", "+\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(extension)) return false;", "+\t\t\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return false;", "-\t\t\t\t\t\t\tIPath partialPath = resource.getFullPath().removeFirstSegments(segmentCount);", "-\t\t\t\t\t\t\tIResource copiedResource = outputFolder.getFile(partialPath);", "-\t\t\t\t\t\t\tif (copiedResource.exists()) {", "-\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tresource.copy(copiedResource.getFullPath(), IResource.FORCE, null);", "-\t\t\t\t\t\t\t\tcopiedResource.setDerived(true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\t\tif (resource.getFullPath().equals(outputPath)) return false;", "-\t\t\t\t\t\t\tif (resource.getFullPath().equals(sourcePath)) return true;", "-\t\t\t\t\t\t\tif (javaBuilder.filterResource(resource)) return false;", "+\t\t\t\t\t\tIPath partialPath = resource.getFullPath().removeFirstSegments(segmentCount);", "+\t\t\t\t\t\tIResource copiedResource = outputFolder.getFile(partialPath);", "+\t\t\t\t\t\tif (copiedResource.exists()) {", "+\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\")); //$NON-NLS-1$", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tresource.copy(copiedResource.getFullPath(), IResource.FORCE, null);", "+\t\t\t\t\t\t\tcopiedResource.setDerived(true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\tif (resource.equals(outputFolder)) return false;", "+\t\t\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return false;", "-\t\t\t\t\t\t\tgetOutputFolder(resource.getFullPath().removeFirstSegments(segmentCount));", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "+\t\t\t\t\t\tgetOutputFolder(resource.getFullPath().removeFirstSegments(segmentCount), outputFolder);", "+\t\t\t\treturn true;", "-\t\t);", "-\t}", "+\t\t}", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4c99c02da013677e5f4543794c66807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "b68a77e60f9eebb5b8896e6265155db659717756", "commitAfterChange": "1cfd035d2d4f0239dc613b241b4b08c4c2f54dc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["-\tArrayList visited = new ArrayList(sourceLocations.length);", "-\tnext : for (int i = 0, l = sourceLocations.length; i < l; i++) {", "-\t\tnotifier.subTask(Util.bind(\"build.cleaningOutput\")); //$NON-NLS-1$", "-\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "-\t\tif (sourceLocation.hasIndependentOutputFolder) {", "-\t\t\tIContainer outputFolder = sourceLocation.binaryFolder;", "-\t\t\tif (!visited.contains(outputFolder)) {", "-\t\t\t\tvisited.add(outputFolder);", "-\t\t\t\tif (deleteAll) {", "+\tif (deleteAll) {", "+\t\tArrayList visited = new ArrayList(sourceLocations.length);", "+\t\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\t\tnotifier.subTask(Util.bind(\"build.cleaningOutput\")); //$NON-NLS-1$", "+\t\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "+\t\t\tif (sourceLocation.hasIndependentOutputFolder) {", "+\t\t\t\tIContainer outputFolder = sourceLocation.binaryFolder;", "+\t\t\t\tif (!visited.contains(outputFolder)) {", "+\t\t\t\t\tvisited.add(outputFolder);", "-\t\t\t\t} else {", "-\t\t\t\t\toutputFolder.accept(", "-\t\t\t\t\t\tnew IResourceVisitor() {", "-\t\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "-\t\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "+\t\t\t} else {", "+\t\t\t\tboolean isOutputFolder = sourceLocation.sourceFolder.equals(sourceLocation.binaryFolder);", "+\t\t\t\tfinal char[][] exclusionPatterns =", "+\t\t\t\t\tisOutputFolder", "+\t\t\t\t\t\t? sourceLocation.exclusionPatterns", "+\t\t\t\t\t\t: null; // ignore exclusionPatterns if output folder == another source folder... not this one", "+\t\t\t\tsourceLocation.binaryFolder.accept(", "+\t\t\t\t\tnew IResourceVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "+\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "-\t\t} else {", "-\t\t\tboolean isOutputFolder = sourceLocation.sourceFolder.equals(sourceLocation.binaryFolder);", "-\t\t\tfinal char[][] exclusionPatterns =", "-\t\t\t\tisOutputFolder", "-\t\t\t\t\t? sourceLocation.exclusionPatterns", "-\t\t\t\t\t: null; // ignore exclusionPatterns if output folder == another source folder... not this one", "-\t\t\tsourceLocation.binaryFolder.accept(", "-\t\t\t\tnew IResourceVisitor() {", "-\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "-\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t);", "-\t\t\tif (!isOutputFolder)", "-\t\t\t\tcopyPackages(sourceLocation);", "+\t\t\t\t);", "+\t\t\t\tif (!isOutputFolder)", "+\t\t\t\t\tcopyPackages(sourceLocation);", "+\t\t\t}", "+\t\t\tnotifier.checkCancel();", "-\t\tnotifier.checkCancel();", "+\t} else {", "+\t\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "+\t\t\tif (sourceLocation.hasIndependentOutputFolder)", "+\t\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "+\t\t\telse if (!sourceLocation.sourceFolder.equals(sourceLocation.binaryFolder))", "+\t\t\t\tcopyPackages(sourceLocation); // output folder is different from source folder", "+\t\t\tnotifier.checkCancel();", "+\t\t}"]}], "num": 56258}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "334363c3f623812017dc8b8712533e2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30867d7289149aafa4572a8e9fb7aa8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "fd8bd5ea880929603f28ff251e5d5a9e772d3c8b", "commitAfterChange": "3ed8aa0cab87ef81fde358f9cd9183982bdcb1b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tif (hasEmptyAction) break;", "-\t\t\t\t\tcodeStream.load(this.collectionVariable);", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "-\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\tswitch(this.kind) {", "+\t\t\tcase ARRAY :", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) break;", "+\t\t\t\tcodeStream.load(this.collectionVariable);", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "+\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t}", "+\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\tbreak;", "+\t\t\tcase RAW_ITERABLE :", "+\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t} else {", "-\t\t\t\t\tif (hasEmptyAction && !codeStream.preserveUnusedLocals) {", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// if unused variable, some side effects still need to be performed (86487)", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\t// still advance in iterator to prevent infinite loop", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tthis.postCollectionInitStateIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd3ae116348ce9f394ea50ebb27f11ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d8bba06dba65d28b4ac0590368e9ea6b313bfaa8", "commitAfterChange": "e734477cf19ee0bbdf44ea8e0b55e663163c306b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\tboolean pushText = (this.kind & TEXT_PARSE) != 0;", "-\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, invalidTagLineEnd);", "+\t\t\t\t\t\t\t\tpushText(this.textStart, invalidTagLineEnd);", "-\t\t\t\t\t\t\t\tif (pushText) pushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\tif (pushText) {", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\trefreshInlineTagPosition(previousPosition);", "-\t\t\t\t\t\t\tif (pushText) {", "-\t\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "-\t\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "+\t\t\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "-\t\t\t\t\t\t} else if (this.lineStarted) {", "+\t\t\t\t\t\t} else if (this.lineStarted && isDomParser) {", "-\t\t\t\tif (pushText) {", "-\t\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "-\t\t\t\t\t\tpushText(this.textStart, textEndPosition);", "-\t\t\t\t\t}", "-\t\t\t\t\trefreshInlineTagPosition(textEndPosition);", "+\t\t\t\tif (this.lineStarted && this.textStart != -1 && this.textStart < textEndPosition) {", "+\t\t\t\t\tpushText(this.textStart, textEndPosition);", "+\t\t\t\trefreshInlineTagPosition(textEndPosition);", "-\t\t\t} else if (pushText && this.lineStarted && this.textStart != -1 && this.textStart <= textEndPosition) {", "+\t\t\t} else if (this.lineStarted && this.textStart != -1 && this.textStart <= textEndPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d2948166bdaf81844ffca4085824e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d2f1cef7b0e84ef19aab589d93965b305b118ad6", "commitAfterChange": "9905630f974d01d005c27e87c48cb6bc796e934c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\tCompilationUnitScope unitScope = compilationUnitScope();", "-\t\tint foundSize = found.size;", "-\t\tif (foundSize == startFoundSize) {", "-\t\t\tif (concreteMatch != null) {", "-\t\t\t\tunitScope.recordTypeReferences(concreteMatch.thrownExceptions);", "-\t\t\t\treturn concreteMatch;", "-\t\t\t}", "-\t\t\treturn null;", "-\t\t}", "-\t\t// argument type compatibility check", "-\t\tfor (int i = startFoundSize; i < foundSize; i++) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-\t\t\tif (compatibleMethod != null) {", "-\t\t\t\tif (compatibleMethod.isValidBinding()) {", "-\t\t\t\t\tif (candidatesCount == 0) {", "-\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize + 1];", "-\t\t\t\t\t\tif (concreteMatch != null)", "-\t\t\t\t\t\t\tcandidates[candidatesCount++] = concreteMatch;", "+\t\tint foundSize = found.size;", "+\t\tif (foundSize > startFoundSize) {", "+\t\t\t// argument type compatibility check", "+\t\t\tfor (int i = startFoundSize; i < foundSize; i++) {", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tif (candidatesCount == 0) {", "+\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize + 1];", "+\t\t\t\t\t\t\tif (concreteMatch != null)", "+\t\t\t\t\t\t\t\tcandidates[candidatesCount++] = concreteMatch;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "+\t\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "-\t\t\t\t} else if (problemMethod == null) {", "-\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\tif (candidatesCount == 0) {", "-\t\t\tif (concreteMatch != null) {", "-\t\t\t\tunitScope.recordTypeReferences(concreteMatch.thrownExceptions);", "-\t\t\t\treturn concreteMatch;", "+\t\tif (candidatesCount < 2) {", "+\t\t\tif (concreteMatch == null) {", "+\t\t\t\tif (candidatesCount == 0)", "+\t\t\t\t\treturn problemMethod; // can be null", "+\t\t\t\tconcreteMatch = candidates[0];", "-\t\t\treturn problemMethod; // can be null", "-\t\t}", "-\t\tif (candidatesCount == 1) {", "-\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\treturn candidates[0]; ", "+\t\t\tcompilationUnitScope().recordTypeReferences(concreteMatch.thrownExceptions);", "+\t\t\treturn concreteMatch;"]}], "num": 13011}
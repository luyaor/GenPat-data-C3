{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51e338408876d5b56fc5272b44447e9b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14419edc8b311981a22002bb6700d1bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BufferManager.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r protected static char[] getInputStreamAsCharArray(InputStream stream) throws JavaModelException", "signatureAfterChange": "\r protected static char[] getInputStreamAsCharArray(InputStream stream) throws JavaModelException", "diff": ["-\tchar[] grow;\r", "-\t\tint available= stream.available();\t\r", "-\t\tint charsRead= 0;\r", "-\t\tint pos = 0;\r", "-\t\twhile (available > 0) {\r", "-\t\t\tgrow = new char[contents.length + available];\r", "-\t\t\tSystem.arraycopy(contents, 0, grow, 0, contents.length);\r", "-\t\t\tcontents = grow;\r", "-\t\t\tcharsRead= reader.read(contents, pos, available);\r", "-\t\t\tavailable= stream.available();\r", "-\t\t} \r", "-\t\tif (charsRead < available && charsRead > 0) {\r", "-\t\t\tgrow = new char[contents.length - (available - charsRead)];\r", "-\t\t\tSystem.arraycopy(contents, 0, grow, 0, grow.length);\r", "-\t\t\tcontents= grow;\r", "+\t\tint contentsLength = 0;\r", "+\t\tint charsRead = -1;\r", "+\t\tdo {\r", "+\t\t\tint available= stream.available();\r", "+\t\t\t\r", "+\t\t\t// resize contents if needed\r", "+\t\t\tif (contentsLength + available > contents.length) {\r", "+\t\t\t\tSystem.arraycopy(contents, 0, contents = new char[contentsLength + available], 0, contentsLength);\r", "+\t\t\t}\r", "+\r", "+\t\t\t// read as many chars as possible\r", "+\t\t\tcharsRead = reader.read(contents, contentsLength, available);\r", "+\t\t\t\r", "+\t\t\tif (charsRead > 0) {\r", "+\t\t\t\t// remember length of contents\r", "+\t\t\t\tcontentsLength += charsRead;\r", "+\t\t\t}\r", "+\t\t} while (charsRead > 0);\r", "+\t\t\r", "+\t\t// resize contents if necessary\r", "+\t\tif (contentsLength < contents.length) {\r", "+\t\t\tSystem.arraycopy(contents, 0, contents = new char[contentsLength], 0, contentsLength);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c50f25f9584b7a600faf183fb40f8472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BufferManager.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public static byte[] getResourceContentsAsBytes(IFile file) throws JavaModelException", "signatureAfterChange": "\r public static byte[] getResourceContentsAsBytes(IFile file) throws JavaModelException", "diff": ["-\tbyte[] grow;\r", "-\t\tint available = stream.available();\r", "-\t\tint pos = 0;\r", "-\t\twhile (available > 0) {\r", "-\t\t\tgrow = new byte[contents.length + available];\r", "-\t\t\tSystem.arraycopy(contents, 0, grow, 0, contents.length);\r", "-\t\t\tcontents = grow;\r", "-\t\t\tstream.read(contents, pos, available);\r", "-\t\t\tavailable = stream.available();\r", "+\t\tint contentsLength = 0;\r", "+\t\tint bytesRead = -1;\r", "+\t\tdo {\r", "+\t\t\tint available= stream.available();\r", "+\t\t\t\r", "+\t\t\t// resize contents if needed\r", "+\t\t\tif (contentsLength + available > contents.length) {\r", "+\t\t\t\tSystem.arraycopy(contents, 0, contents = new byte[contentsLength + available], 0, contentsLength);\r", "+\t\t\t}\r", "+\r", "+\t\t\t// read as many bytes as possible\r", "+\t\t\tbytesRead = stream.read(contents, contentsLength, available);\r", "+\t\t\t\r", "+\t\t\tif (bytesRead > 0) {\r", "+\t\t\t\t// remember length of contents\r", "+\t\t\t\tcontentsLength += bytesRead;\r", "+\t\t\t}\r", "+\t\t} while (bytesRead > 0);\r", "+\t\t\r", "+\t\t// resize contents if necessary\r", "+\t\tif (contentsLength < contents.length) {\r", "+\t\t\tSystem.arraycopy(contents, 0, contents = new byte[contentsLength], 0, contentsLength);\r"]}], "num": 776}
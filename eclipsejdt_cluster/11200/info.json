{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0270b17a4c24fc15318e972a8243d87d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2362fb9b4343d292023b67c2abfac96c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fccc3c9fd12b95c908b1566d2444bf312ceefff2", "commitAfterChange": "65db522775790e696e2711bd035a45d8d1048338", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["+", "-\t\t\t\t// copy the list, since single type imports are removed if they cannot be resolved", "-\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "-\t\t\t\t\tImportBinding typeImport = imports[i];", "-\t\t\t\t\tif (!typeImport.onDemand) {", "-\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "-\t\t\t\t\t\t\tif (unitScope.resolveSingleTypeImport(typeImport) != null) {", "-\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "-\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible", "+\t\t\t\tHashtableOfObject typeImports = unitScope.resolvedSingeTypeImports;", "+\t\t\t\tif (typeImports != null) {", "+\t\t\t\t\tImportBinding typeImport = (ImportBinding) typeImports.get(name);", "+\t\t\t\t\tif (typeImport != null) {", "+\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// walk all the imports since resolvedSingeTypeImports is not yet initialized", "+\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\t\tImportBinding typeImport = imports[i];", "+\t\t\t\t\t\tif (!typeImport.onDemand) {", "+\t\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\t\tif (unitScope.resolveSingleTypeImport(typeImport) != null) {", "+\t\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b0d20e71c874cd52afa330b79abdcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "276d690deab11e5ff278dd7a12340b7922d913fc", "commitAfterChange": "1ed5028f52cac9ac32a1eba090840061fb91b107", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportBinding) binding).resolvedImport); // already know its visible", "+\t\t\t\t\tif (binding instanceof ImportConflictBinding)", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportConflictBinding) binding).conflictingTypeBinding); // already know its visible", "+\t\t\t\t\telse", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportBinding) binding).resolvedImport); // already know its visible", "-\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "-\t\t\t\t\tImportBinding typeImport = imports[i];", "-\t\t\t\t\tif (!typeImport.onDemand) {", "-\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "-\t\t\t\t\t\t\tBinding resolvedImport = unitScope.resolveSingleImport(typeImport);", "-\t\t\t\t\t\t\tif (resolvedImport != null && resolvedImport instanceof TypeBinding) {", "-\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\tnextImport : for (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\tif (!importBinding.onDemand) {", "+\t\t\t\t\t\tif (CharOperation.equals(importBinding.compoundName[importBinding.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\tBinding resolvedImport = unitScope.resolveSingleImport(importBinding);", "+\t\t\t\t\t\t\tif (resolvedImport == null) continue nextImport;", "+\t\t\t\t\t\t\tif (resolvedImport instanceof MethodBinding) {", "+\t\t\t\t\t\t\t\tresolvedImport = (ReferenceBinding) getType(importBinding.compoundName, importBinding.compoundName.length);", "+\t\t\t\t\t\t\t\tif (!resolvedImport.isValidBinding()) continue nextImport;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (resolvedImport instanceof TypeBinding) {", "+\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;"]}], "num": 11200}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31cbce02865cd921641d465d04c87ea4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d5267caadb17f5d178a263622dda9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "8c8cd78ee7d91af397b355193b993289ef7f4454", "commitAfterChange": "dab69163a24dbd341ec146b21a1806a7799bbbc6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["-\t\t}catch (IllegalArgumentException e) {", "+\t\t} catch (IllegalArgumentException e) {", "-\t\t// ensure that 2 binary methods with the same signature but with different return types have different occurence counts.", "+\t\t// ensure that 2 binary methods with the same signature but with different return types have different occurrence counts.", "+\t\tint max = pNames.length;", "+\t\tchar[][] argumentNames = methodInfo.getArgumentNames();", "+\t\tif (argumentNames == null || argumentNames.length < max) {", "+\t\t\targumentNames = new char[max][];", "+\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\targumentNames[j] = (\"arg\" + j).toCharArray(); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tfor (int j = 0; j < max; j++) {", "+\t\t\tIBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j);", "+\t\t\tif (parameterAnnotations != null) {", "+\t\t\t\tLocalVariable localVariable = new LocalVariable(", "+\t\t\t\t\t\tmethod,", "+\t\t\t\t\t\tnew String(argumentNames[j]),", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\tmethod.parameterTypes[j],", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\ttrue);", "+\t\t\t\tgenerateAnnotationsInfos(localVariable, argumentNames[j], parameterAnnotations, methodInfo.getTagBits(), newElements);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec96e5dbe7b9ea76a545fa274b6aaeba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "245ac5a64fa1b2c3e6c4d54ba7019a89566be0e5", "commitAfterChange": "4ff905e78bafd71173d7f0334a042481d0575303", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t\t\t\t\t\tnull); // declaring class.", "+\t\t\t\t\t\t\tblockScope.enclosingSourceType()); // declaring class, for now - this is needed for annotation holder and such.", "-\t\t\tif (argument.annotations != null) {", "-\t\t\t\tthis.binding.tagBits |= TagBits.HasParameterAnnotations;", "-\t\t\t\tif (parameterAnnotations == null) {", "-\t\t\t\t\tparameterAnnotations = new AnnotationBinding[length][];", "-\t\t\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\t\t\tparameterAnnotations[j] = Binding.NO_ANNOTATIONS;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tparameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t} else if (parameterAnnotations != null) {", "-\t\t\t\tparameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "-\t\t\t}", "+\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\tthis.binding.tagBits |= TagBits.HasParameterAnnotations;", "+\t\t\t\t\tif (parameterAnnotations == null) {", "+\t\t\t\t\t\tparameterAnnotations = new AnnotationBinding[length][];", "+\t\t\t\t\t\tfor (int j = 0; j < i; j++) {", "+\t\t\t\t\t\t\tparameterAnnotations[j] = Binding.NO_ANNOTATIONS;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tparameterAnnotations[i] = argument.binding.getAnnotations();", "+\t\t\t\t} else if (parameterAnnotations != null) {", "+\t\t\t\t\tparameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "+\t\t\t\t}"]}], "num": 55964}
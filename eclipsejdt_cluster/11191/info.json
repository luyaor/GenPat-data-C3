{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ee6072d1134b5a19aa41deb6fd61dc4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f30156d6f0519dfc324f16c6f3ff643", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "03aab1ff69aae2de16de283aaf6df2cafa77af82", "commitAfterChange": "0c0e9f808d4509f3cefc470c2105f7ba1290fdb7", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "  \tprivate char[][] findUnresolvedReferenceAfter(int from, BlockScope scope, final char[][] discouragedNames)", "signatureAfterChange": "  \tprivate char[][] findUnresolvedReferenceAfter(int from, BlockScope scope, final char[][] discouragedNames)", "diff": ["+\t\t} else if (referenceContext instanceof LambdaExpression) {", "+\t\t\tLambdaExpression expression = (LambdaExpression) referenceContext;", "+\t\t\tUnresolvedReferenceNameFinder nameFinder = new UnresolvedReferenceNameFinder(this);", "+\t\t\tnameFinder.findAfter(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\texpression.scope,", "+\t\t\t\t\texpression.scope.classScope(),", "+\t\t\t\t\tfrom,", "+\t\t\t\t\texpression.body().sourceEnd,", "+\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\tnameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c95a482a85172e87c631f6a7119c0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "signatureAfterChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "diff": ["-\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\t// accept constructor reference for enum constant", "+\t\t\tif (fieldDeclaration.initialization instanceof AllocationExpression) {", "+\t\t\t\tAllocationExpression alloc = (AllocationExpression) fieldDeclaration.initialization;", "+\t\t\t\trequestor.acceptConstructorReference(", "+\t\t\t\t\tdeclaringType.name,", "+\t\t\t\t\talloc.arguments == null ? 0 : alloc.arguments.length, ", "+\t\t\t\t\talloc.sourceStart);", "+\t\t\t}", "+\t\t\t// fall through next case", "+\t\tcase AbstractVariableDeclaration.FIELD:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b980667c7e924f5bd32ea4ea3af45d12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "96ef6a1342ca74d72728b34641d9caf80d6d6997", "commitAfterChange": "2dc8c8168c71292aca0a9b4cb34971871475b18a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void preConnectTrackerAcrossAssignment(ASTNode location, LocalVariableBinding local, Expression rhs)", "signatureAfterChange": " \tpublic static void preConnectTrackerAcrossAssignment(ASTNode location, LocalVariableBinding local, Expression rhs)", "diff": ["-\t\t\t\t((AllocationExpression)rhs).closeTracker = closeTracker;", "+\t\t\t\tAllocationExpression allocation = (AllocationExpression)rhs;", "+\t\t\t\tallocation.closeTracker = closeTracker;", "+\t\t\t\tif (allocation.arguments != null && allocation.arguments.length > 0) {", "+\t\t\t\t\t// also push into nested allocations, see https://bugs.eclipse.org/368709", "+\t\t\t\t\tpreConnectTrackerAcrossAssignment(location, local, allocation.arguments[0]);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa71c6dac3a867b83dab19e28f12471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["+\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\tint argCount = constructor.arguments == null ? 0 : constructor.arguments.length;", "+\t\t\t\tchar[][] compoundName = constructor.type.getTypeName();", "+\t\t\t\trequestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);"]}], "num": 11191}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ec5fba8e4638b43c7144f2ed61701a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f93babc3e93dd81b28c2b266aba7063", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "6ca82f1a54d472af29c424861c5280a8ebc7b028", "commitAfterChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\tlong[] potentialRefs = null;", "+\tlong[] possibleRefs = null;", "-\t\tif (potentialRefs == null) {", "-\t\t\t/* first query : these are the potential references */", "-\t\t\tpotentialRefs = references;", "+\t\tif (possibleRefs == null) {", "+\t\t\t/* first query : these are the possible references */", "+\t\t\tpossibleRefs = references;", "-\t\t\t/* eliminate potential references that don't match the current references */", "-\t\t\tint potentialLength = potentialRefs.length;", "+\t\t\t/* eliminate possible references that don't match the current references */", "+\t\t\tint possibleLength = possibleRefs.length;", "-\t\t\t\tif (i < potentialLength)", "-\t\t\t\t\tpotentialRefs[i] &= references[i];", "+\t\t\t\tif (i < possibleLength)", "+\t\t\t\t\tpossibleRefs[i] &= references[i];", "-\t\t\t\t\tpotentialRefs[i] = 0;", "+\t\t\t\t\tpossibleRefs[i] = 0;", "-\t\t\t// check to see that there are still potential references after the merge", "-\t\t\twhile (--potentialLength >= 0 && potentialRefs[potentialLength] == 0);", "-\t\t\tif (potentialLength == -1) return;", "+\t\t\t// check to see that there are still possible references after the merge", "+\t\t\twhile (--possibleLength >= 0 && possibleRefs[possibleLength] == 0);", "+\t\t\tif (possibleLength == -1) return;", "-\t/* report potential references that remain */", "-\tif (potentialRefs != null) {", "+\t/* report possible references that remain */", "+\tif (possibleRefs != null) {", "-\t\t\tif ((potentialRefs[vectorIndex] & (1L << (reference % 64))) != 0)", "+\t\t\tif ((possibleRefs[vectorIndex] & (1L << (reference % 64))) != 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e72c38c9ef569961dc291b39e11383eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "e87f626a0744f3e42bfbad630a4e9545c488a83d", "commitAfterChange": "1dd3d22e7e24bc65554988bf75295210111ce474", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t\tfor (int i = 0, max = entries.length; i < max; i++){", "-", "+\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\tif (references == null) {", "-\t\t\t/* no references */", "-\t\t\treturn;", "+\t\tif (references == null) return;", "+\t\tif (potentialRefs == null) {", "+\t\t\t/* first query : these are the potential references */", "+\t\t\tpotentialRefs = references;", "+\t\t\tmaxRefs = numFiles;", "-\t\t\tif (potentialRefs == null) {", "-\t\t\t\t/* first query : these are the potential references */", "-\t\t\t\tpotentialRefs = references;", "-\t\t\t\tmaxRefs = numFiles;", "-\t\t\t} else {", "-\t\t\t\t/* eliminate potential references that don't match the current references */", "-\t\t\t\tfor (int i = 0, length = references.length; i < length; i++) {", "-\t\t\t\t\tif (i < potentialRefs.length) {", "-\t\t\t\t\t\tpotentialRefs[i] &= references[i];", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tpotentialRefs[i] = 0;", "-\t\t\t\t\t}", "+\t\t\t/* eliminate potential references that don't match the current references */", "+\t\t\tint potentialLength = potentialRefs.length;", "+\t\t\tfor (int i = 0, length = references.length; i < length; i++) {", "+\t\t\t\tif (i < potentialLength) {", "+\t\t\t\t\tpotentialRefs[i] &= references[i];", "+\t\t\t\t} else {", "+\t\t\t\t\tpotentialRefs[i] = 0;", "-\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\t// check to see that there are still potential references after the merge", "+\t\t\twhile (--potentialLength >= 0 && potentialRefs[potentialLength] == 0) {}", "+\t\t\tif (potentialLength == -1) return;", "-\t\t\t\t\t\t"]}], "num": 67810}
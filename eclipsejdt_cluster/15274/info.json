{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3eb1a93cdb0b6e6a4fddbe83c4580948", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e9cb15d64485661552c072e6a743382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "831d96bc5763622ed503192c35bfd6688abedd96", "commitAfterChange": "2b9e0aab771e40f0fa01ab73162468993f28d806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static void buildFileForCompliance( \t\t\tString file, \t\t\tint length, \t\t\tString[] tokens)", "signatureAfterChange": " \tprivate static void buildFileForCompliance( \t\t\tString file, \t\t\tint length, \t\t\tString[] tokens)", "diff": ["+\t\t\t\t\t} else if(\"1.6\".equals(token)) { //$NON-NLS-1$", "+\t\t\t\t\t\tcompliance = ClassFileConstants.JDK1_6;", "+\t\t\t\t\t} else if(\"1.7\".equals(token)) { //$NON-NLS-1$", "+\t\t\t\t\t\tcompliance = ClassFileConstants.JDK1_7;", "+\t\t\t\t\t} else if(\"1.8\".equals(token)) { //$NON-NLS-1$", "+\t\t\t\t\t\tcompliance = ClassFileConstants.JDK1_8;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a896f04d721142114fa6bfd9e1533a22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic AST(Map options)", "signatureAfterChange": " \tpublic AST(Map options)", "diff": ["-\t */", "-\tpublic AST(Map options) {", "-\t\tthis(JLS2);", "-\t\tObject sourceLevelOption = options.get(JavaCore.COMPILER_SOURCE);", "-\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "-\t\tif (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {", "-\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "-\t\t} else if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {", "-\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "-\t\t}", "-\t\tObject complianceLevelOption = options.get(JavaCore.COMPILER_COMPLIANCE);", "-\t\tlong complianceLevel = ClassFileConstants.JDK1_3;", "-\t\tif (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {", "-\t\t\tcomplianceLevel = ClassFileConstants.JDK1_4;", "-\t\t} else if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {", "-\t\t\tcomplianceLevel = ClassFileConstants.JDK1_5;", "-\t\t}", "-\t\t// override scanner if 1.4 or 1.5 asked for", "-\t\tthis.scanner = new Scanner(", "-\t\t\ttrue /*comment*/,", "-\t\t\ttrue /*whitespace*/,", "-\t\t\tfalse /*nls*/,", "-\t\t\tsourceLevel /*sourceLevel*/,", "-\t\t\tcomplianceLevel /*complianceLevel*/,", "-\t\t\tnull/*taskTag*/,", "-\t\t\tnull/*taskPriorities*/,", "-\t\t\ttrue/*taskCaseSensitive*/);", "-\t}", "+\t */", "+\tpublic AST(Map options) {", "+\t\tthis(JLS2);", "+\t\tObject sourceLevelOption = options.get(JavaCore.COMPILER_SOURCE);", "+\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "+\t\tif (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "+\t\t} else if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "+\t\t} else if (JavaCore.VERSION_1_7.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_7;", "+\t\t}", "+\t\tObject complianceLevelOption = options.get(JavaCore.COMPILER_COMPLIANCE);", "+\t\tlong complianceLevel = ClassFileConstants.JDK1_3;", "+\t\tif (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_4;", "+\t\t} else if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_5;", "+\t\t} else if (JavaCore.VERSION_1_7.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_7;", "+\t\t}", "+\t\t// override scanner if 1.4 or 1.5 asked for", "+\t\tthis.scanner = new Scanner(", "+\t\t\ttrue /*comment*/,", "+\t\t\ttrue /*whitespace*/,", "+\t\t\tfalse /*nls*/,", "+\t\t\tsourceLevel /*sourceLevel*/,", "+\t\t\tcomplianceLevel /*complianceLevel*/,", "+\t\t\tnull/*taskTag*/,", "+\t\t\tnull/*taskPriorities*/,", "+\t\t\ttrue/*taskCaseSensitive*/);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce850b781882d5ceed22964d53ef4814", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "59758b3ac964ea48fbbbf5d314c8ed8b19dc60bb", "commitAfterChange": "74fed5493a5e05f9b2b1c69610952bdae1f33d7e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static void buildFileForCompliance( \t\t\tString file, \t\t\tint length, \t\t\tString[] tokens)", "signatureAfterChange": " \tprivate static void buildFileForCompliance( \t\t\tString file, \t\t\tint length, \t\t\tString[] tokens)", "diff": ["+\t\t\t\t\t} else if(\"1.6\".equals(token)) { //$NON-NLS-1$", "+\t\t\t\t\t\tcompliance = ClassFileConstants.JDK1_6;", "+\t\t\t\t\t} else if(\"1.7\".equals(token)) { //$NON-NLS-1$", "+\t\t\t\t\t\tcompliance = ClassFileConstants.JDK1_7;", "+\t\t\t\t\t} else if(\"1.8\".equals(token)) { //$NON-NLS-1$", "+\t\t\t\t\t\tcompliance = ClassFileConstants.JDK1_8;"]}], "num": 15274}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b637a8f2cc44c96b393f7ae103ee8f67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9df38a9dee9a69601c0a2ce8eb003e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public ITypeHierarchy newTypeHierarchy(IJavaProject project, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ITypeHierarchy newTypeHierarchy(IJavaProject project, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException", "diff": ["+ */", "+public ITypeHierarchy newTypeHierarchy(IJavaProject project, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException {", "+\tif (project == null) {", "+\t\tthrow new IllegalArgumentException(Util.bind(\"hierarchy.nullProject\")); //$NON-NLS-1$", "+\t}", "+\tICompilationUnit[] workingCopies = JavaModelManager.getJavaModelManager().getWorkingCopies(owner, true/*add primary working copies*/);", "+\tint length = workingCopies.length;", "+\tICompilationUnit[] projectWCs = new ICompilationUnit[length];", "+\tint index = 0;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tICompilationUnit wc = workingCopies[i];", "+\t\tif (project.equals(wc.getJavaProject())) {", "+\t\t\tprojectWCs[index++] = wc;", "+\t\t}", "+\t}", "+\tif (index != length) {", "+\t\tSystem.arraycopy(projectWCs, 0, projectWCs = new ICompilationUnit[index], 0, index);", "+\t}", "+\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(", "+\t\tthis, ", "+\t\tprojectWCs,", "+\t\tproject, ", "+\t\ttrue);", "+\trunOperation(op, monitor);", "+\treturn op.getResult();", "+}", "-public ITypeHierarchy newTypeHierarchy(IJavaProject project, IProgressMonitor monitor) throws JavaModelException {", "-\tif (project == null) {", "-\t\tthrow new IllegalArgumentException(Util.bind(\"hierarchy.nullProject\")); //$NON-NLS-1$", "-\t}", "-\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(", "-\t\tthis, ", "-\t\t(IWorkingCopy[])null, // no working copies", "-\t\tproject, ", "-\t\ttrue);", "-\treturn op.getResult();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490cc4addd671448ec00dd2b1c7fe2aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "471c15cd43796bd63b4d1f53aca608e4822d5ab8", "commitAfterChange": "7a3ae46899cc014db3e6ff04c755844a7b20ac77", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic CopyResourceElementsOperation(IJavaElement[] resourcesToCopy, IJavaElement destContainer, boolean force)", "signatureAfterChange": " \tprotected ISchedulingRule getSchedulingRule()", "diff": ["-\t */", "-\tpublic CopyResourceElementsOperation(IJavaElement[] resourcesToCopy, IJavaElement destContainer, boolean force) {", "-\t\tthis(resourcesToCopy, new IJavaElement[]{destContainer}, force);", "-\t}", "+\tprotected ISchedulingRule getSchedulingRule() {", "+\t\tif (this.elementsToProcess == null)", "+\t\t\treturn null;", "+\t\tint length = this.elementsToProcess.length;", "+\t\tif (length == 1)", "+\t\t\treturn getSchedulingRule(this.elementsToProcess[0]);", "+\t\tISchedulingRule[] rules = new ISchedulingRule[length];", "+\t\tint index = 0;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tISchedulingRule rule = getSchedulingRule(this.elementsToProcess[i]);", "+\t\t\tif (rule != null) {", "+\t\t\t\trules[index++] = rule;", "+\t\t\t}", "+\t\t}", "+\t\tif (index != length)", "+\t\t\tSystem.arraycopy(rules, 0, rules = new ISchedulingRule[index], 0, index);", "+\t\treturn new MultiRule(rules);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7faa67ff83e2a2980f3edec04cd572e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Annotation.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic IMemberValuePair[] getMemberValuePairs() throws JavaModelException", "signatureAfterChange": "  \tpublic IMemberValuePair[] getMemberValuePairs() throws JavaModelException", "diff": ["-\t\tAnnotationInfo info = (AnnotationInfo) getElementInfo();", "-\t\treturn info.members;", "+\t\tObject info = getElementInfo();", "+\t\tif (info instanceof AnnotationInfo)", "+\t\t\treturn ((AnnotationInfo) info).members;", "+\t\tIBinaryElementValuePair[] binaryAnnotations = ((IBinaryAnnotation) info).getElementValuePairs();", "+\t\tint length = binaryAnnotations.length;", "+\t\tIMemberValuePair[] result = new IMemberValuePair[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tIBinaryElementValuePair binaryAnnotation = binaryAnnotations[i];", "+\t\t\tMemberValuePair memberValuePair = new MemberValuePair(new String(binaryAnnotation.getName()));", "+\t\t\tmemberValuePair.value = Util.getAnnotationMemberValue(this, memberValuePair, binaryAnnotation.getValue());", "+\t\t\tresult[i] = memberValuePair;", "+\t\t}", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea704e9b1809a8496ce31fed82745e64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public ITypeHierarchy newTypeHierarchy(IJavaProject project, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ITypeHierarchy newTypeHierarchy(IJavaProject project, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException", "diff": ["+ */", "+public ITypeHierarchy newTypeHierarchy(IJavaProject project, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException {", "+\tif (project == null) {", "+\t\tthrow new IllegalArgumentException(Util.bind(\"hierarchy.nullProject\")); //$NON-NLS-1$", "+\t}", "+\tICompilationUnit[] workingCopies = JavaModelManager.getJavaModelManager().getWorkingCopies(owner, true/*add primary working copies*/);", "+\tint length = workingCopies.length;", "+\tICompilationUnit[] projectWCs = new ICompilationUnit[length];", "+\tint index = 0;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tICompilationUnit wc = workingCopies[i];", "+\t\tif (project.equals(wc.getJavaProject())) {", "+\t\t\tprojectWCs[index++] = wc;", "+\t\t}", "+\t}", "+\tif (index != length) {", "+\t\tSystem.arraycopy(projectWCs, 0, projectWCs = new ICompilationUnit[index], 0, index);", "+\t}", "+\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(", "+\t\tthis, ", "+\t\tprojectWCs,", "+\t\tproject, ", "+\t\ttrue);", "+\trunOperation(op, monitor);", "+\treturn op.getResult();", "+}", "-public ITypeHierarchy newTypeHierarchy(IJavaProject project, IProgressMonitor monitor) throws JavaModelException {", "-\tif (project == null) {", "-\t\tthrow new IllegalArgumentException(Util.bind(\"hierarchy.nullProject\")); //$NON-NLS-1$", "-\t}", "-\t", "-\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(", "-\t\tthis, ", "-\t\t(IWorkingCopy[])null, // no working copies", "-\t\tproject,", "-\t\ttrue);", "-\treturn op.getResult();"]}], "num": 66056}
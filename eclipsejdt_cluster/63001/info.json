{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f410ddfa3f7c9d3db4760ddcdefe02ad", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9caab1c8fab299375a99ae2f9cb65e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": " \t \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["-\t\t\tif (enclosingInstance != null)", "-\t\t\t\tenclosingInstance.traverse(visitor, scope);", "+\t\t\tif (this.enclosingInstance != null)", "+\t\t\t\tthis.enclosingInstance.traverse(visitor, scope);", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentsLength = arguments.length;", "+\t\t\tif (this.arguments != null) {", "+\t\t\t\tint argumentsLength = this.arguments.length;", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.arguments[i].traverse(visitor, scope);", "-\t\t\tif (anonymousType != null)", "-\t\t\t\tanonymousType.traverse(visitor, scope);", "+\t\t\tif (this.anonymousType != null)", "+\t\t\t\tthis.anonymousType.traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87fc880fe35b54f19ce739ebc57c244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "80725f3277230b2c6b48548b2a0746bbcbd23f0d", "commitAfterChange": "2abb5c60316a8a4cab92c4dd0598d9a27a87d40b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate void formatMethodArguments( \t\t\tfinal Argument[] arguments, \t\t\tMethodScope scope, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstParameter, \t\t\tboolean spaceBeforeComma, \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "signatureAfterChange": " \tprivate void formatMethodArguments( \t\t\tReceiver receiver, \t\t\tfinal Argument[] arguments, \t\t\tMethodScope scope, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstParameter, \t\t\tboolean spaceBeforeComma, \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "diff": ["+\t\t\tReceiver receiver,", "-\t\tif (arguments != null) {", "+\t\tif (arguments != null || receiver != null) {", "-\t\t\tint argumentLength = arguments.length;", "+\t\t\tint receiverCount = receiver != null ? 1 : 0;", "+\t\t\tint realArgumentLength =  arguments != null ? arguments.length : 0;", "+\t\t\tint argumentLength = realArgumentLength + receiverCount;", "-\t\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t\t\tif (i < receiverCount) {", "+\t\t\t\t\t\t\treceiver.traverse(this, scope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\targuments[i - receiverCount].traverse(this, scope);", "+\t\t\t\t\t\t}"]}], "num": 63001}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16ffa0bee6a1586d82b4f9fbaf35ce0c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3510f45bc6486d890f91636aca3e2ee8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c1bb30283df026c4a2a5d897b14fca7bf877a83d", "commitAfterChange": "1f0c86832f53bb27ba689df50c93da060905a26e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate final void addOptimizedReplaceEdit(int offset, int length, String replacement)", "signatureAfterChange": "  \tprivate final void addOptimizedReplaceEdit(int offset, int length, String replacement)", "diff": ["+\t\t\t} else if ((offset + length == previousOffset) && (previousLength + length == replacementLength + previousReplacementLength)) {", "+\t\t\t\t// check if both edits corresponds to the orignal source code", "+\t\t\t\tboolean canBeRemoved = true;", "+\t\t\t\tString totalReplacement = replacement + previousReplacement;", "+\t\t\t\tloop: for (int i = 0; i < previousLength + length; i++) {", "+\t\t\t\t\tif (scanner.source[i + offset] != totalReplacement.charAt(i)) {", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(offset, previousLength + length, totalReplacement);", "+\t\t\t\t\t\tcanBeRemoved = false;", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (canBeRemoved) {", "+\t\t\t\t\tif (this.currentAlignment != null) {", "+\t\t\t\t\t\tfinal Location location = this.currentAlignment.location;", "+\t\t\t\t\t\tif (location.editsIndex == this.editsIndex) {", "+\t\t\t\t\t\t\tlocation.editsIndex--;", "+\t\t\t\t\t\t\tlocation.textEdit = previous;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.editsIndex--;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a2c9eb53d75de01c9cc4d14b4d1d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "57bbae793b080e332ffbe7d9a1eee58929157c9e", "commitAfterChange": "b217112507f53a311f9d32f09e4f736a9ed00294", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate final void addOptimizedReplaceEdit(int offset, int length, String replacement)", "signatureAfterChange": "  \tprivate final void addOptimizedReplaceEdit(int offset, int length, String replacement)", "diff": ["-\t\t\tif (previousOffset == offset && previousLength == length && (replacementLength == 0 || previous.replacement.length() == 0)) {", "+\t\t\tfinal String previousReplacement = previous.replacement;", "+\t\t\tfinal int previousReplacementLength = previousReplacement.length();", "+\t\t\tif (previousOffset == offset && previousLength == length && (replacementLength == 0 || previousReplacementLength == 0)) {", "-\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previous.replacement + replacement);", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previousReplacement + replacement);", "+\t\t\t\t\t} else if (previousLength + length == previousReplacementLength) {", "+\t\t\t\t\t\t// check the characters. If they are identical, we can get rid of the previous edit", "+\t\t\t\t\t\tboolean canBeRemoved = true;", "+\t\t\t\t\t\tloop: for (int i = previousOffset; i < previousOffset + previousReplacementLength; i++) {", "+\t\t\t\t\t\t\tif (scanner.source[i] != previousReplacement.charAt(i - previousOffset)) {", "+\t\t\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previousReplacement);", "+\t\t\t\t\t\t\t\tcanBeRemoved = false;", "+\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (canBeRemoved) {", "+\t\t\t\t\t\t\tif (this.currentAlignment != null) {", "+\t\t\t\t\t\t\t\tfinal Location location = this.currentAlignment.location;", "+\t\t\t\t\t\t\t\tif (location.editsIndex == this.editsIndex) {", "+\t\t\t\t\t\t\t\t\tlocation.editsIndex--;", "+\t\t\t\t\t\t\t\t\tlocation.textEdit = previous;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.editsIndex--;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previous.replacement);", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previousReplacement);", "-\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength, previous.replacement + replacement);", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength, previousReplacement + replacement);"]}], "num": 59002}
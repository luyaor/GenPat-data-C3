{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0790259a058e477056c12b183d5c8d8f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627651394c9733596c8b0d612cad8f0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "b38d183fc4bc8cb58dd4d9581cd22ea40ec0dfb9", "commitAfterChange": "f20fffc4a99e8adbeeb586f85659c5e5f3b94884", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t", "+\t}", "-\t\tif (false) {", "-\t\t\treturn allTests();", "-\t\t}", "-\t\tTestSuite suite= new Suite(\"one test\");", "-\t\tsuite.addTest(new ASTRewritingStatementsTest(\"testConstructorInvocation2\"));", "-\t\treturn suite;", "+\t\treturn buildTestSuite(THIS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc5222fd9040a93506b0a7b43f60d42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "779c0a269200bd2b753397ef48cdc2e22f6789e2", "commitAfterChange": "96046880955891c15e8d80e97d7a875daf5fddc3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tboolean nonReturningSubRoutine =", "-\t\t\t(subRoutineStartLabel != null) && subRoutineCannotReturn;", "+\t\tboolean nonReturningSubRoutine =subRoutineStartLabel != null && subRoutineCannotReturn;", "-\t\t\t\t\t(preserveExceptionHandler[i\t/ ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize)))", "-\t\t\t\t\t\t!= 0;", "+\t\t\t\t\t(preserveExceptionHandler[i / ExceptionHandlingFlowContext.BitCacheSize]", "+\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize)))", "-\t\t\t\t\t\t\t!= 0;", "+\t\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t}", "-\t\t\t// end of catch sequence, place label that will correspond to the finally block beginning, or end of statement", "-\t\t\tendLabel.place();", "-\t\t\tif (subRoutineStartLabel != null) {", "-\t\t\t\tif (nonReturningSubRoutine) {", "+\t\t\t\t// end of catch sequence, place label that will correspond to the finally block beginning, or end of statement", "+\t\t\t\tif (nonReturningSubRoutine) {//TODO: should not be necessary", "-\t\t\t\t}", "-\t\t\t\tLabel veryEndLabel = new Label(codeStream);", "-\t\t\t\tif (requiresNaturalJsr) {", "-\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "-\t\t\t\t\tcodeStream.goto_(veryEndLabel);", "+\t\t\t\t// will naturally fall into subsequent code after subroutine invocation", "+\t\t\t\tendLabel.place();", "-\t\t\t\t\tveryEndLabel.place();", "+\t\t\t\t\tcodeStream.jsr(subRoutineStartLabel);", "+\t\t\t} else {", "+\t\t\t\t// no subroutine, simply position end label", "+\t\t\t\tendLabel.place();", "+\t\t\tendLabel.place();"]}], "num": 65986}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a3e4cb838d161ddd08f54fb3f9a9a78", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ce2f03213269bd2a9f4d2c41f1fa788", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "fffe0226b316a10993369d727f8c3eea5e70ad6e", "commitAfterChange": "b9a24a44a980bf3229c906639157a97b45b07dd7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "diff": ["+\t\tIPath projectOutput = null;", "-\t\t\tclasspath = project.getExpandedClasspath(true);", "+\t\t\tclasspath = project.getResolvedClasspath(true/*ignore unresolved variable*/);", "-\t\t\tbinIsProject = projectPath.equals(project.getOutputLocation());", "+\t\t\tprojectOutput = project.getOutputLocation();", "+\t\t\tbinIsProject = projectPath.equals(projectOutput);", "-\t\t\t\t\t\t// ignore this file if referred to on the build path", "-\t\t\t\t\t\tif (project.findPackageFragmentRoot0(resFullPath) == null) {", "-\t\t\t\t\t\t\t// ignore .java file if src == project", "-\t\t\t\t\t\t\tif (srcIsProject ", "-\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "-\t\t\t\t\t\t\t\t&& !Util.isExcluded(res, exclusionPatterns)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// ignore .class file if bin == project", "-\t\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tnonJavaResources,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// ignore a jar file on the classpath", "+\t\t\t\t\t\tif (Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// ignore .java file if src == project", "+\t\t\t\t\t\tif (srcIsProject ", "+\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "+\t\t\t\t\t\t\t&& !Util.isExcluded(res, exclusionPatterns)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// ignore .class file if bin == project", "+\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tnonJavaResources,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "-\t\t\t\t\t\tif (!this.isOutputLocation(resFullPath, classpath, project.getOutputLocation())", "-\t\t\t\t\t\t\t&& project.findPackageFragmentRoot0(resFullPath) == null", "-\t\t\t\t\t\t\t&& project.findPackageFragment0(resFullPath) == null) {", "-\t\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tnonJavaResources,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// ignore folders on the classpath or that correspond to an output location", "+\t\t\t\t\t\tif (this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\tnonJavaResources,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t(nonJavaResources = new IResource[nonJavaResourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tnonJavaResourcesCounter);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = res;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18e60d760f308a03d90a2aa0cb1d475", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "diff": ["-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\t\tIResource res = members[i];", "-\t\t\t\tswitch (res.getType()) {", "-\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\tIPath resFullPath = res.getFullPath();", "-\t\t\t\t\t\tString resName = res.getName();", "+\t\t\tint length = members.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIResource res = members[i];", "+\t\t\t\t\tswitch (res.getType()) {", "+\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\tIPath resFullPath = res.getFullPath();", "+\t\t\t\t\t\t\tString resName = res.getName();", "-\t\t\t\t\t\t// ignore a jar file on the classpath", "-\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t// ignore a jar file on the classpath", "+\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// ignore .java file if src == project", "+\t\t\t\t\t\t\tif (srcIsProject ", "+\t\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName, sourceLevel, complianceLevel)", "+\t\t\t\t\t\t\t\t\t&& !Util.isExcluded(res, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// ignore .class file if bin == project", "+\t\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName, sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "+\t\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\t\t\tresources,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tresourcesCounter);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresources[resourcesCounter++] = res;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// ignore .java file if src == project", "-\t\t\t\t\t\tif (srcIsProject ", "-\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "-\t\t\t\t\t\t\t&& !Util.isExcluded(res, inclusionPatterns, exclusionPatterns)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// ignore .class file if bin == project", "-\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\tresources,", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\tresourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresources[resourcesCounter++] = res;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\tresFullPath = res.getFullPath();", "+\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\tresFullPath = res.getFullPath();", "-\t\t\t\t\t\t// ignore non-excluded folders on the classpath or that correspond to an output location", "-\t\t\t\t\t\tif ((srcIsProject && !Util.isExcluded(res, inclusionPatterns, exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName()))", "-\t\t\t\t\t\t\t\t|| this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\tresources,", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\tresourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresources[resourcesCounter++] = res;", "+\t\t\t\t\t\t\t// ignore non-excluded folders on the classpath or that correspond to an output location", "+\t\t\t\t\t\t\tif ((srcIsProject && !Util.isExcluded(res, inclusionPatterns, exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName(), sourceLevel, complianceLevel))", "+\t\t\t\t\t\t\t\t\t|| this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "+\t\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\t\t\tresources,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tresourcesCounter);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresources[resourcesCounter++] = res;", "+\t\t\t\t\t}"]}], "num": 62044}
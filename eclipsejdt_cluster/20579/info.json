{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "468b2aecf49d5bb7302b1220106dbc6c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc722bdd02b36b23efc3b0b17991914", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "409d050617fcf352393ff243104bdcc98737726e", "commitAfterChange": "79aa5b474819808453695ac530baf1e6c5fdeb6b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "signatureAfterChange": " private String extractJavadoc(IType declaringType, String contents) throws JavaModelException", "diff": ["-\tString anchor = Signature.toString(this.getSignature().replace('/', '.'), methodName, null, true, false, Flags.isVarargs(this.getFlags()));", "+\tIBinaryMethod info = (IBinaryMethod) getElementInfo();", "+\tchar[] genericSignature = info.getGenericSignature();", "+\tString anchor = null;", "+\tif (genericSignature != null) {", "+\t\tCharOperation.replace(genericSignature, '/', '.');", "+\t\tanchor = Util.toAnchor(genericSignature, methodName, Flags.isVarargs(this.getFlags()));", "+\t\tif (anchor == null) throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.UNKNOWN_JAVADOC_FORMAT, this));", "+\t} else {", "+\t\tanchor = Signature.toString(this.getSignature().replace('/', '.'), methodName, null, true, false, Flags.isVarargs(this.getFlags()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "985a0df0c5d9b6f406b063c41f197fdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java", "commitBeforeChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "commitAfterChange": "495498c492866181dc63a6039b81ee18c37f454c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void consumeMethod(char[] selector, char[] methodSignature)", "signatureAfterChange": " \t \tpublic void consumeMethod(char[] selector, char[] methodSignature)", "diff": ["-\t\tif (this.kind == SIGNATURE) {", "-\t\t\tthis.signature = new StringBuffer();", "-\t\t\tCharOperation.replace(methodSignature, '/', '.');", "-\t\t\tthis.signature.append(methodSignature);", "+\t\tCharOperation.replace(methodSignature, '/', '.');", "+\t\tswitch(this.kind) {", "+\t\t\tcase SIGNATURE:", "+\t\t\t\tthis.signature = new StringBuffer();", "+\t\t\t\tthis.signature.append(methodSignature);", "+\t\t\t\tbreak;", "+\t\t\tcase THROWN_EXCEPTIONS:", "+\t\t\t\tif (CharOperation.indexOf('^', methodSignature) > 0) {", "+\t\t\t\t\tchar[][] types = Signature.getThrownExceptionTypes(methodSignature);", "+\t\t\t\t\tint length = types.length;", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tthis.thrownExceptions.add(new String(types[i]));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}], "num": 20579}
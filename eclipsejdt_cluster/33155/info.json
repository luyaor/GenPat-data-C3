{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3522c8d40d523799164834cd8a930ee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c88a1646665ae49a384cc5c194d62b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic abstract String[] queryDocumentNames(String substring) throws IOException;", "signatureAfterChange": " public String[] queryDocumentNames(String substring) throws IOException", "diff": ["-\t */", "-\tpublic abstract String[] queryDocumentNames(String substring) throws IOException;", "+ */", "+public String[] queryDocumentNames(String substring) throws IOException {", "+\tSimpleSet results;", "+\tif (this.memoryIndex.hasChanged()) {", "+\t\tresults = this.diskIndex.addDocumentNames(substring, this.memoryIndex);", "+\t\tthis.memoryIndex.addDocumentNames(substring, results);", "+\t} else {", "+\t\tresults = this.diskIndex.addDocumentNames(substring, null);", "+\t}", "+\tif (results.elementSize == 0) return null;", "+", "+\tString[] documentNames = new String[results.elementSize];", "+\tint count = 0;", "+\tObject[] paths = results.values;", "+\tfor (int i = 0, l = paths.length; i < l; i++)", "+\t\tif (paths[i] != null)", "+\t\t\tdocumentNames[count++] = (String) paths[i];", "+\treturn documentNames;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d306c268584f0deb20a588b82cc0bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic abstract EntryResult[] query(char[][] categories, char[] key, int matchRule);", "signatureAfterChange": " public EntryResult[] query(char[][] categories, char[] key, int matchRule) throws IOException", "diff": ["-\t */", "-\tpublic abstract EntryResult[] query(char[][] categories, char[] key, int matchRule);", "+ */", "+public EntryResult[] query(char[][] categories, char[] key, int matchRule) throws IOException {", "+\tif (this.memoryIndex.shouldMerge() && monitor.exitReadEnterWrite()) {", "+\t\ttry {", "+\t\t\tsave();", "+\t\t} finally {", "+\t\t\tmonitor.exitWriteEnterRead();", "+\t\t}", "+\t}", "+", "+\tHashtableOfObject results;", "+\tif (this.memoryIndex.hasChanged()) {", "+\t\tresults = this.diskIndex.addQueryResults(categories, key, matchRule, this.memoryIndex);", "+\t\tthis.memoryIndex.addQueryResults(categories, key, matchRule, results);", "+\t} else {", "+\t\tresults = this.diskIndex.addQueryResults(categories, key, matchRule, null);", "+\t}", "+\tif (results.elementSize == 0) return null;", "+", "+\tEntryResult[] entryResults = new EntryResult[results.elementSize];", "+\tint count = 0;", "+\tObject[] values = results.valueTable;", "+\tfor (int i = 0, l = values.length; i < l; i++) {", "+\t\tEntryResult result = (EntryResult) values[i];", "+\t\tif (result != null)", "+\t\t\tentryResults[count++] = result;", "+\t}", "+\treturn entryResults;", "+}"]}], "num": 33155}
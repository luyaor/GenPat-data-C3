{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "910e4ee4834048f92d16492c0c977541", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcec51bdb9536f818b9f3687485c0bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "ead8e814ab499b7622eb426e1befbcf339b11ce8", "commitAfterChange": "557b79fe942a0c2ecd096efec77764eeda1e9de9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "diff": ["-\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType) {", "+\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope) {", "+\t\tint code = internalBoundCheck(substitution, argumentType, scope);", "+\t\tif (code == TypeConstants.MISMATCH) {", "+\t\t\tif (argumentType instanceof TypeVariableBinding && scope != null) {", "+\t\t\t\tTypeBinding bound = ((TypeVariableBinding)argumentType).firstBound;", "+\t\t\t\tif (bound instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1), scope); // no position needed as this capture will never escape this context", "+\t\t\t\t\treturn Math.min(code, code2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn code;", "+\t}", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\treturn boundCheck(substitution, wildcard.bound);", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "657a2b15111de432bf185182f69e3155", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "370fc9797484c96c0e1fdf0a7794604c16e52ccb", "commitAfterChange": "c50ca866bcc8a651da6c9f1ec9e6c29c39dc7ade", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "diff": ["-\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType) {", "+\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope) {", "+\t\tint code = internalBoundCheck(substitution, argumentType, scope);", "+\t\tif (code == TypeConstants.MISMATCH) {", "+\t\t\tif (argumentType instanceof TypeVariableBinding && scope != null) {", "+\t\t\t\tTypeBinding bound = ((TypeVariableBinding)argumentType).firstBound;", "+\t\t\t\tif (bound instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1), scope); // no position needed as this capture will never escape this context", "+\t\t\t\t\treturn Math.min(code, code2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn code;", "+\t}", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\treturn boundCheck(substitution, wildcard.bound);", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {"]}], "num": 61030}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb8d52231cc98cd81b573976025b7679", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "052ee714f3e69b53b760e025ebc907d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "bf9d2928e4aea900ad01f2ee2cd2674cd533cebe", "commitAfterChange": "2bf1aa54cfd1302b886c65b22925ff01f9308c14", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "-\t\tcurrentScope.emulateOuterAccess((LocalVariableBinding) this.binding);", "-\t}", "+\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) this.binding;", "+\t\tif (localVariableBinding != null) {", "+\t\t\tswitch(localVariableBinding.useFlag) {", "+\t\t\t\tcase LocalVariableBinding.FAKE_USED :", "+\t\t\t\tcase LocalVariableBinding.USED :", "+\t\t\t\t\tcurrentScope.emulateOuterAccess(localVariableBinding);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ad82ed0f919f55b20a7490e91f0fbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "bf9d2928e4aea900ad01f2ee2cd2674cd533cebe", "commitAfterChange": "2bf1aa54cfd1302b886c65b22925ff01f9308c14", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "-\t\t//If inlinable field, forget the access emulation, the code gen will directly target it", "-\t\tif (((this.bits & ASTNode.DepthMASK) == 0) || (this.constant != Constant.NotAConstant)) return;", "-", "-\t\tif ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL) {", "-\t\t\tcurrentScope.emulateOuterAccess((LocalVariableBinding) this.binding);", "+\t//If inlinable field, forget the access emulation, the code gen will directly target it", "+\tif (((this.bits & ASTNode.DepthMASK) == 0) || (this.constant != Constant.NotAConstant)) {", "+\t\treturn;", "+\t}", "+\tif ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL) {", "+\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) this.binding;", "+\t\tif (localVariableBinding != null) {", "+\t\t\tswitch(localVariableBinding.useFlag) {", "+\t\t\t\tcase LocalVariableBinding.FAKE_USED :", "+\t\t\t\tcase LocalVariableBinding.USED :", "+\t\t\t\t\tcurrentScope.emulateOuterAccess(localVariableBinding);", "+\t\t\t}"]}], "num": 48703}
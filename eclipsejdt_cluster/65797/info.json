{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "857358753e43e5f1d1fd665416040971", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e49bd5bacc9ad2f5b211dbe9f66066", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "344f41e4f3a0936f3d1a8dc22956abcf4bca93c4", "commitAfterChange": "2749db90d9b59a49ba8d955d8eddabda9be1d8ee", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": "\t \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int capturePosition)", "diff": ["-\t\tint index = replaceWildcards ? 0 : 1;", "+\t}\t", "+\tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int capturePosition) {", "+\t\tint index = replaceWildcards ? capturePosition < 0 ? 0 : 1 : 2; // capturePosition >= 0 IFF replaceWildcard == true", "-\t\t\treturn this.singleAbstractMethod[index];", "+\t\t\t\treturn this.singleAbstractMethod[index];", "-\t\t\tthis.singleAbstractMethod = new MethodBinding[2];", "+\t\t\tthis.singleAbstractMethod = new MethodBinding[3];", "+\t\t}", "+\t\tif (capturePosition >= 0) { ", "+\t\t\t// caller is going to require the sam's parameters to be treated as argument expressions, post substitution capture will lose identity, where substitution results in fan out", "+\t\t\t// capture first and then substitute.", "+\t\t\tfor (int i = 0, length = types.length; i < length; i++) {", "+\t\t\t\ttypes[i] = types[i].capture(scope, 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba7e4e12d70e79a2fe05f7866486603", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "bb58594beea7321f1a2a3673bab3e26af89ead20", "commitAfterChange": "7376fb10956e4a03cc528e86b634b5ca73ef755b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tCompilationUnitResolver resolver = null;", "-\t\t\tCompilationUnitResolver resolver =", "+\t\t\tresolver =", "-\t\t\t// unit cleanup is done by caller", "+\t\t\t// first unit cleanup is done by caller, but cleanup all enqueued requested units (not processed)", "+\t\t\tif (resolver != null) {", "+\t\t\t\tfor (int i = 1, length = resolver.totalUnits; i < length; i++) {", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = resolver.unitsToProcess[i];", "+\t\t\t\t\tif (parsedUnit.scope != null) ", "+\t\t\t\t\t\tparsedUnit.scope.faultInTypes(); // force resolution of signatures, so clients can query DOM AST", "+\t\t\t\t\tparsedUnit.cleanUp();", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea52a36ce617e181398a3d64e74d4ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "4a25a74830ec5d44bea0e86a821b6fe146ccdc4d", "commitAfterChange": "509692f4edb0ce705fd505934a81ec54e8a7a49f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfinal TypeBinding[] descriptorParameters = this.descriptor != null ? this.descriptor.parameters : Binding.NO_PARAMETERS;", "+    \t", "+    \t// Convert parameters into argument expressions for look up.", "+\t\tTypeBinding[] descriptorParameters = this.descriptor != null && this.descriptor.parameters != null && this.descriptor.parameters.length > 0 ? ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew TypeBinding[this.descriptor.parameters.length] : Binding.NO_PARAMETERS;", "+\t\tfor (int i = 0, length = descriptorParameters.length; i < length; i++)", "+\t\t\tdescriptorParameters[i] = this.descriptor.parameters[i].capture(scope, this.sourceEnd);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb9dcd053cca01a6d4d0776145715630", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "007f2027ff425d194812a64dbd50790ef7383015", "commitAfterChange": "f7f17008db6ff3c3f5e70873efcd612c1034949b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference)", "signatureAfterChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "diff": ["-\tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference) {", "+\tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes) {", "+\t\tif (argTypes != null) {", "+\t\t\tfor (int i = 0, l = argTypes.length; i < l; i++) {", "+\t\t\t\tTypeBinding argType = argTypes[i].leafComponentType();", "+\t\t\t    if (argType instanceof SourceTypeBinding)", "+\t\t\t    \t// ensure if this is a source superclass that it has already been checked", "+\t\t\t    \t((SourceTypeBinding) argType).scope.connectTypeHierarchyWithoutMembers();", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c16f80b078a1f36a4098dba98ee3ef77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "ade89e4fcc147d76e26736c6fadf9edebfc6386e", "commitAfterChange": "29f9f7b54f341569f134578b4014b331ae83ea82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource prereqOutputFolder)", "signatureAfterChange": "\r \r protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource[] binaryResources)", "diff": ["-protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource prereqOutputFolder) {\r", "-\tIResourceDelta binaryDelta = delta.findMember(prereqOutputFolder.getProjectRelativePath());\r", "-\tif (binaryDelta != null) {\r", "-\t\tif (binaryDelta.getKind() == IResourceDelta.ADDED || binaryDelta.getKind() == IResourceDelta.REMOVED)\r", "-\t\t\treturn false;\r", "-\t\tint outputFolderSegmentCount = prereqOutputFolder.getLocation().segmentCount();\r", "-\t\tIResourceDelta[] children = binaryDelta.getAffectedChildren();\r", "-\t\tfor (int i = 0, length = children.length; i < length; ++i)\r", "-\t\t\tfindAffectedSourceFiles(children[i], outputFolderSegmentCount);\r", "-\t\tnotifier.checkCancel();\r", "+protected boolean findAffectedSourceFiles(IResourceDelta delta, IResource[] binaryResources) {\r", "+\tfor (int j = 0, k = binaryResources.length; j < k; j++) {\r", "+\t\tIResource binaryResource = binaryResources[j];\r", "+\t\t// either a .class file folder or a zip/jar file\r", "+\t\tif (binaryResource != null) { // skip unchanged output folder\r", "+\t\t\tIResourceDelta binaryDelta = delta.findMember(binaryResource.getProjectRelativePath());\r", "+\t\t\tif (binaryDelta != null) {\r", "+\t\t\t\tif (binaryResource instanceof IFile) return false; // do full build since jar file was added/removed/changed\r", "+\t\t\t\tif (binaryDelta.getKind() == IResourceDelta.ADDED || binaryDelta.getKind() == IResourceDelta.REMOVED)\r", "+\t\t\t\t\treturn false; // added/removed binary folder should not make it here, but handle anyways\r", "+\t\t\t\tint segmentCount = binaryResource.getLocation().segmentCount();\r", "+\t\t\t\tIResourceDelta[] children = binaryDelta.getAffectedChildren(); // .class files from class folder\r", "+\t\t\t\tfor (int i = 0, length = children.length; i < length; ++i)\r", "+\t\t\t\t\tfindAffectedSourceFiles(children[i], segmentCount);\r", "+\t\t\t\tnotifier.checkCancel();\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b3b01d9e6ba63cbfba39c036f639a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/NameEnvironment.java", "commitBeforeChange": "d96668833851c6888b2777029dd7fc07b93f263f", "commitAfterChange": "65444f6bbda189372ebbf90cb8f83272733c23ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r void initialTypeNames(String[] initialTypeNames)", "signatureAfterChange": "\r \r void setNames(String[] initialTypeNames, String[] additionalSourceFilenames)", "diff": ["-\r", "-void initialTypeNames(String[] initialTypeNames) {\r", "-\t// assumed that each typeName is of the form a/b/ClassName\r", "-\tthis.initialTypeNames = initialTypeNames;\r", "+\r", "+void setNames(String[] initialTypeNames, String[] additionalSourceFilenames) {\r", "+\tthis.initialTypeNames = initialTypeNames;\r", "+\tthis.additionalSourceFilenames = additionalSourceFilenames;\r", "+\tfor (int i = 0, length = classpathLocations.length; i < length; i++) {\r", "+\t\tClasspathLocation classpath = classpathLocations[i];\r", "+\t\tclasspath.reset();\r", "+\t\tif (classpath instanceof ClasspathMultiDirectory)\r", "+\t\t\t((ClasspathMultiDirectory) classpath).nameEnvironment = this;\r", "+\t}\r", "+}\r"]}], "num": 65797}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97a90733b236d4dda9336528886f9728", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5f78964771973bcbc2ec70dd217e40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void executeWraps()", "signatureAfterChange": "  \tpublic void executeWraps()", "diff": ["-\t\tmainLoop: while (index < this.tm.size()) {", "+\t\twhile (index < this.tm.size()) {", "-\t\t\thandleOnColumnIndent(index, token.getWrapPolicy());", "-\t\t\t// this might be a pre-existing wrap that should trigger other top priority wraps", "-\t\t\tint jumpToIndex = handleTopPriorityWraps(index);", "-\t\t\tif (jumpToIndex >= 0) {", "-\t\t\t\tindex = jumpToIndex;", "-\t\t\t\tcontinue mainLoop;", "+\t\t\twhile (true) {", "+\t\t\t\ttry {", "+\t\t\t\t\tint currentIndent = getWrapIndent(token);", "+\t\t\t\t\tthis.wrapSearchResults.clear();", "+\t\t\t\t\tindex = applyWraps(index, currentIndent);", "+\t\t\t\t\tbreak;", "+\t\t\t\t} catch (WrapRestartException e) {", "+\t\t\t\t\thandleTopPriorityWraps(e);", "+\t\t\t\t}", "-", "-\t\t\t// determine wraps for incoming line", "-\t\t\tint currentIndent = getWrapIndent(token);", "-\t\t\tboolean isLineWrapped = token.isWrappable();", "-\t\t\tWrapResult wrapResult = findWraps(index, currentIndent);", "-\t\t\tif (wrapResult == WrapResult.TOP_PRIORITY_WRAP_MET) {", "-\t\t\t\tjumpToIndex = handleTopPriorityWraps(this.topPriorityWrapIndex);", "-\t\t\t\tassert jumpToIndex >= 0;", "-\t\t\t\tindex = Math.min(index, jumpToIndex);", "-\t\t\t\tcontinue mainLoop;", "-\t\t\t}", "-", "-\t\t\t// apply wraps and indents", "-\t\t\tWrapInfo wrapInfo = wrapResult.nextWrap;", "-\t\t\twhile (wrapInfo != null) {", "-\t\t\t\tisLineWrapped = true;", "-\t\t\t\tfor (; index < wrapInfo.wrapTokenIndex; index++) {", "-\t\t\t\t\ttoken = this.tm.get(index);", "-\t\t\t\t\tif (shouldForceWrap(token, currentIndent)) {", "-\t\t\t\t\t\tcurrentIndent = token.getIndent();", "-\t\t\t\t\t\twrapInfo = new WrapInfo(index, currentIndent);", "-\t\t\t\t\t\tfindWrapsCached(index, currentIndent);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tcurrentIndent = Math.max(currentIndent, token.getAlign());", "-\t\t\t\t\ttoken.setIndent(currentIndent);", "-\t\t\t\t}", "-\t\t\t\ttoken = this.tm.get(index);", "-\t\t\t\ttoken.breakBefore();", "-\t\t\t\ttoken.setIndent(currentIndent = wrapInfo.indent);", "-\t\t\t\thandleOnColumnIndent(index, token.getWrapPolicy());", "-\t\t\t\tjumpToIndex = handleTopPriorityWraps(index);", "-\t\t\t\tif (jumpToIndex >= 0) {", "-\t\t\t\t\tindex = jumpToIndex;", "-\t\t\t\t\tcontinue mainLoop;", "-\t\t\t\t}", "-\t\t\t\twrapInfo = this.wrapSearchResults.get(wrapInfo).nextWrap;", "-\t\t\t}", "-", "-\t\t\t// apply indent until the beginning of the next line", "-\t\t\ttoken.setIndent(currentIndent);", "-\t\t\tfor (index++; index < this.tm.size(); index++) {", "-\t\t\t\tif (token.getLineBreaksAfter() > 0)", "-\t\t\t\t\tbreak;", "-\t\t\t\ttoken = this.tm.get(index);", "-\t\t\t\tif (token.isNextLineOnWrap() && isLineWrapped)", "-\t\t\t\t\ttoken.breakBefore();", "-\t\t\t\tif (token.getLineBreaksBefore() > 0)", "-\t\t\t\t\tbreak;", "-\t\t\t\tif (shouldForceWrap(token, currentIndent))", "-\t\t\t\t\tcurrentIndent = token.getIndent();", "-\t\t\t\tcurrentIndent = Math.max(currentIndent, token.getAlign());", "-\t\t\t\ttoken.setIndent(currentIndent);", "-\t\t\t}", "+\t\t\tthis.usedTopPriorityWraps.clear();", "-\t\tthis.wrapSearchResults.clear();", "-\t\tthis.usedTopPriorityWraps.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0eebadc5de2eb7e75588db66d6ca8cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "commitAfterChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected IJavaElement getHandleFromMementoForBinaryMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException", "signatureAfterChange": " public IJavaElement getHandleFromMemento(String token, StringTokenizer memento, WorkingCopyOwner owner)", "diff": ["-protected IJavaElement getHandleFromMementoForBinaryMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException {", "-", "-\t//deal with class file and binary members", "-\tIPackageFragment frag = null;", "-\tif (rootEnd == end - 1) {", "-\t\t//default package", "-\t\tfrag= root.getPackageFragment(IPackageFragment.DEFAULT_PACKAGE_NAME);", "-\t} else {", "-\t\tfrag= root.getPackageFragment(memento.substring(rootEnd + 1, end));", "+public IJavaElement getHandleFromMemento(String token, StringTokenizer memento, WorkingCopyOwner owner) {", "+\tswitch (token.charAt(0)) {", "+\t\tcase JEM_COUNT:", "+\t\t\treturn getHandleUpdatingCountFromMemento(memento, owner);", "+\t\tcase JEM_JAVAPROJECT:", "+\t\t\tString projectName = memento.nextToken();", "+\t\t\tJavaElement project = (JavaElement)getJavaProject(projectName);", "+\t\t\treturn project.getHandleFromMemento(memento, owner);", "-\tint oldEnd = end;", "-\tend = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);", "-\tif (end == -1) {", "-\t\t//we ended with a class file ", "-\t\treturn frag.getClassFile(memento.substring(oldEnd + 1));", "-\t}", "-\tIClassFile cf = frag.getClassFile(memento.substring(oldEnd + 1, end));", "-\toldEnd = end;", "-\tend = memento.indexOf(JavaElement.JEM_TYPE, oldEnd);", "-\toldEnd = end;", "-\tend = memento.indexOf(JavaElement.JEM_FIELD, end);", "-\tif (end != -1) {", "-\t\t//binary field", "-\t\tIType type = cf.getType();", "-\t\treturn type.getField(memento.substring(end + 1));", "-\t}", "-\tend = memento.indexOf(JavaElement.JEM_METHOD, oldEnd);", "-\tif (end != -1) {", "-\t\t//binary method", "-\t\toldEnd = end;", "-\t\tIType type = cf.getType();", "-\t\tString methodName;", "-\t\tend = memento.lastIndexOf(JavaElement.JEM_METHOD);", "-\t\tString[] parameterTypes = null;", "-\t\tif (end == oldEnd) {", "-\t\t\tmethodName = memento.substring(end + 1);", "-\t\t\t//no parameter types", "-\t\t\tparameterTypes = new String[] {};", "-\t\t} else {", "-\t\t\tString parameters = memento.substring(oldEnd + 1);", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(parameters, new String(new char[] {JavaElement.JEM_METHOD}));", "-\t\t\tparameterTypes = new String[tokenizer.countTokens() - 1];", "-\t\t\tmethodName= tokenizer.nextToken();", "-\t\t\tint i = 0;", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tparameterTypes[i] = tokenizer.nextToken();", "-\t\t\t\ti++;", "-\t\t\t}", "-\t\t}", "-\t\treturn type.getMethod(methodName, parameterTypes);", "-\t}", "-", "-\t//binary type", "-\treturn cf.getType();", "-}", "+\treturn null;"]}], "num": 33071}
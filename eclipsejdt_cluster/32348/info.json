{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73c3f64180fb384a80e5a10d95c04062", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7f085ec53444d164e015c72b1bfac40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "3b6218bf29a9e110fd6530cc102e5abb2713eb28", "commitAfterChange": "fdc78eae04c092b433b059502afa80612c96fda8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\tTypeBinding[] parameterTypes = binding.parameters;", "+\t\t// iterate over arguments, and retrieve original argument types (before cast)", "+\t\tTypeBinding[] rawArgumentTypes = argumentTypes;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tExpression argument = arguments[i];", "+\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\tTypeBinding castedExpressionType = ((CastExpression)argument).expression.resolvedType;", "+\t\t\t\t// obvious identity cast", "+\t\t\t\tif (castedExpressionType == argumentTypes[i]) { ", "+\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)argument);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (rawArgumentTypes == argumentTypes) {", "+\t\t\t\t\t\tSystem.arraycopy(rawArgumentTypes, 0, rawArgumentTypes = new TypeBinding[length], 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\t// retain original argument type", "+\t\t\t\t\trawArgumentTypes[i] = castedExpressionType; ", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t", "+\t\t}", "+\t\t// perform alternate lookup with original types", "+\t\tif (rawArgumentTypes != argumentTypes) {", "+\t\t\tcheckAlternateBinding(scope, receiver, receiverType, binding, arguments, argumentTypes, rawArgumentTypes, invocationSite);", "+\t\t}", "+/* alternate implementation performing 2 passes of alternate lookup, once for widening casts, once for narrowing casts", "-\t\t\t\tif (castedExpressionType == parameterTypes[i]) { ", "+\t\t\t\tif (castedExpressionType == argumentTypes[i]) { ", "+*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d719addc6676975474b8706640bc98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "aadb2a658581a97e9459691d70634be53e0b7594", "commitAfterChange": "80724a8df94e8e8610a4d46586b0b0c806074736", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\t\tint length = internalAnnotations == null ? 0 : internalAnnotations.length;", "-\t\tif (length != 0) {", "-\t\t\tIAnnotationBinding[] tempAnnotations = new IAnnotationBinding[length];", "-\t\t\tint convertedAnnotationCount = 0;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalAnnotation = internalAnnotations[i];", "-\t\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotation);", "-\t\t\t\tif (annotationInstance == null) {", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\ttempAnnotations[convertedAnnotationCount++] = annotationInstance;", "-\t\t\t}", "-\t\t\tif (convertedAnnotationCount != length) {", "-\t\t\t\tif (convertedAnnotationCount == 0) {", "-\t\t\t\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "-\t\t\t\t}", "-\t\t\t\tSystem.arraycopy(tempAnnotations, 0, (tempAnnotations = new IAnnotationBinding[convertedAnnotationCount]), 0, convertedAnnotationCount);", "-\t\t\t}", "-\t\t\treturn this.annotations = tempAnnotations;", "-\t\t}", "-\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "+\t\treturn this.annotations = filterTypeAnnotations(internalAnnotations);"]}], "num": 32348}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31f7762e7a83da5e4ba3d242b3054fca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18f44f8e994e817e9d1d2521b61e61c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate double getWrapPenalty(int lineStartIndex, int lineIndent, int wrapIndex, int wrapIndent, \t\t\tWrapResult wrapResult)", "signatureAfterChange": "  \tprivate double getWrapPenalty(int lineStartIndex, int lineIndent, int wrapIndex, int wrapIndent, \t\t\tWrapResult wrapResult) throws WrapRestartException", "diff": ["-\t\t\tWrapResult wrapResult) {", "+\t\t\tWrapResult wrapResult) throws WrapRestartException {", "-\t\tWrapResult nextWrapResult = wrapResult;", "+\t\tWrapInfo nextWrap = wrapResult.nextWrap;", "-\t\twhile (checkDepth && nextWrapResult.nextWrap != null) {", "-\t\t\tWrapPolicy nextPolicy = this.tm.get(nextWrapResult.nextWrap.wrapTokenIndex).getWrapPolicy();", "+\t\twhile (checkDepth && nextWrap != null) {", "+\t\t\tWrapPolicy nextPolicy = this.tm.get(nextWrap.wrapTokenIndex).getWrapPolicy();", "-\t\t\tnextWrapResult = this.wrapSearchResults.get(nextWrapResult.nextWrap);", "+\t\t\tnextWrap = findWrapsCached(nextWrap.wrapTokenIndex, nextWrap.indent).nextWrap;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b66302288ca3f5fd27a5862c730c9f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, \tboolean valueRequired)", "diff": ["-public void generateCode(", "-\tBlockScope currentScope,", "-\tCodeStream codeStream,", "-\tboolean valueRequired) {", "-", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, \tboolean valueRequired) {", "-\tReferenceBinding allocatedType = this.codegenBinding.declaringClass;", "+\tMethodBinding codegenBinding = this.binding.original();", "+\tReferenceBinding allocatedType = codegenBinding.declaringClass;", "-\tif (this.codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "+\tif (codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "-\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, null /* default declaringClass */);", "+\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, null /* default declaringClass */);", "-\t\tcodeStream.generateEmulationForConstructor(currentScope, this.codegenBinding);", "+\t\tcodeStream.generateEmulationForConstructor(currentScope, codegenBinding);", "-\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = codegenBinding.parameters[i];", "-\t\t\t\t\tcodeStream.generateBoxingConversion(this.codegenBinding.parameters[i].id);", "+\t\t\t\t\tcodeStream.generateBoxingConversion(codegenBinding.parameters[i].id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d626a66a93bc324ad8c12792b511ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tboolean isStatic = this.codegenBinding.isStatic();", "+\tMethodBinding codegenBinding = this.binding.original();", "+\tboolean isStatic = codegenBinding.isStatic();", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t} else if( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, codegenBinding, constantPoolDeclaringClass);", "+\t\t} else if( (this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);", "-\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.codegenBinding.returnType.id) {", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : codegenBinding.returnType.id) {"]}], "num": 53381}
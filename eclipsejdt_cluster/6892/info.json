{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ffbe59ac2cd10cde130f402289a08f4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a75950833031a2cfe30ecd13fc32fc7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType)", "diff": ["-\tif (otherType == this) {", "-\t\tif (isWildcard()) return false;", "+\tif (otherType == this) ", "-\t}", "-\tif (otherType.id == T_JavaLangObject)", "+\tif (otherType.id == T_JavaLangObject) ", "-\tif (!(otherType instanceof ReferenceBinding))", "-\t\treturn false;", "-\tReferenceBinding otherReferenceType = (ReferenceBinding) otherType;", "-\tif (this.isEquivalentTo(otherReferenceType)) return true;", "-\tif (otherReferenceType.isWildcard()) {", "-\t\treturn false; // should have passed equivalence check above if wildcard", "+\t// equivalence may allow compatibility with array type through wildcard bound", "+\tif (this.isEquivalentTo(otherType)) ", "+\t\treturn true;", "+\tswitch (otherType.kind()) {", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn false; // should have passed equivalence check above if wildcard", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t// check compatibility with capture of ? super X", "+\t\t\tif (otherType.isCapture()) {", "+\t\t\t\tCaptureBinding otherCapture = (CaptureBinding) otherType;", "+\t\t\t\tif (otherCapture.lowerBound != null) {", "+\t\t\t\t\treturn this.isCompatibleWith(otherCapture.lowerBound);", "+\t\t\t\t}", "+\t\t\t}", "+\t\tcase Binding.GENERIC_TYPE :", "+\t\tcase Binding.TYPE :", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\tReferenceBinding otherReferenceType = (ReferenceBinding) otherType;", "+\t\t\tif (otherReferenceType.isInterface()) // could be annotation type", "+\t\t\t\treturn implementsInterface(otherReferenceType, true);", "+\t\t\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed", "+\t\t\t\treturn false;", "+\t\t\treturn otherReferenceType.isSuperclassOf(this);", "+\t\tdefault :", "+\t\t\treturn false;", "-\tif (otherReferenceType.isInterface())", "-\t\treturn implementsInterface(otherReferenceType, true);", "-\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed", "-\t\treturn false;", "-\treturn otherReferenceType.isSuperclassOf(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea751d40640cfdf33881ea067d356c9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "514d738c0bffc825612691df73674de74739817d", "commitAfterChange": "16bf517eac7b1a25f758fac5c593b2cb070073af", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areTypesEqual(TypeBinding one, TypeBinding two)", "signatureAfterChange": " boolean areTypesEqual(TypeBinding one, TypeBinding two)", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=329584", "+\tswitch(one.kind()) {", "+\t\tcase Binding.TYPE:", "+\t\t\tswitch (two.kind()) {", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\tcase Binding.RAW_TYPE:", "+\t\t\t\t\tif (one == two.erasure())", "+\t\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.RAW_TYPE:", "+\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\tswitch(two.kind()) {", "+\t\t\t\tcase Binding.TYPE:", "+\t\t\t\t\tif (one.erasure() == two)", "+\t\t\t\t\t\treturn true;", "+\t\t\t}", "+\t}"]}], "num": 6892}
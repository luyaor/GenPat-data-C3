{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f181d87ad90034a225b13490f712a3b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f33f24368d5da8556942f8fe09b87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\t\tif (valueAttribute.value instanceof FalseLiteral) {", "-\t\t\t\t\t\t// parameter 'false' means: this annotation cancels any defaults", "-\t\t\t\t\t\ttagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} else if (valueAttribute.compilerElementPair != null) {", "+\t\t\t\t\tif (valueAttribute.compilerElementPair != null)", "-\t\t\t\t\t}", "-\t\t\t\t} else if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) { // fetch default value  - TODO: cache it?", "+\t\t\t\t} else { // fetch default value  - TODO: cache it?", "-\t\t\t\t\tif (methods != null && methods.length == 1) {", "-\t\t\t\t\t\tObject defaultValue = methods[0].getDefaultValue();", "-\t\t\t\t\t\tif (defaultValue instanceof Object[])", "-\t\t\t\t\t\t\tvalue = defaultValue;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (methods != null && methods.length == 1)", "+\t\t\t\t\t\tvalue = methods[0].getDefaultValue();", "+\t\t\t\t\telse", "+\t\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault; // custom unconfigurable NNBD", "-\t\t\t\tif (value != null) {", "-\t\t\t\t\ttagBits |= nullTagBitsFromAnnotationValue(value);", "-\t\t\t\t} else {", "-\t\t\t\t\t// neither explicit value, nor default value from DefaultLocation (1.8)", "-\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tif (value instanceof BooleanConstant) {", "+\t\t\t\t\t// boolean value is used for declaration annotations, signal using the annotation tag bit:", "+\t\t\t\t\ttagBits |= ((BooleanConstant)value).booleanValue() ? TagBits.AnnotationNonNullByDefault : TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\t} else if (value != null) {", "+\t\t\t\t\t// non-boolean value signals type annotations, evaluate from DefaultLocation[] to bitvector a la Binding#NullnessDefaultMASK:", "+\t\t\t\t\ttagBits |= nullLocationBitsFromAnnotationValue(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d2948166bdaf81844ffca4085824e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d2f1cef7b0e84ef19aab589d93965b305b118ad6", "commitAfterChange": "9905630f974d01d005c27e87c48cb6bc796e934c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\tCompilationUnitScope unitScope = compilationUnitScope();", "-\t\tint foundSize = found.size;", "-\t\tif (foundSize == startFoundSize) {", "-\t\t\tif (concreteMatch != null) {", "-\t\t\t\tunitScope.recordTypeReferences(concreteMatch.thrownExceptions);", "-\t\t\t\treturn concreteMatch;", "-\t\t\t}", "-\t\t\treturn null;", "-\t\t}", "-\t\t// argument type compatibility check", "-\t\tfor (int i = startFoundSize; i < foundSize; i++) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-\t\t\tif (compatibleMethod != null) {", "-\t\t\t\tif (compatibleMethod.isValidBinding()) {", "-\t\t\t\t\tif (candidatesCount == 0) {", "-\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize + 1];", "-\t\t\t\t\t\tif (concreteMatch != null)", "-\t\t\t\t\t\t\tcandidates[candidatesCount++] = concreteMatch;", "+\t\tint foundSize = found.size;", "+\t\tif (foundSize > startFoundSize) {", "+\t\t\t// argument type compatibility check", "+\t\t\tfor (int i = startFoundSize; i < foundSize; i++) {", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tif (candidatesCount == 0) {", "+\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize + 1];", "+\t\t\t\t\t\t\tif (concreteMatch != null)", "+\t\t\t\t\t\t\t\tcandidates[candidatesCount++] = concreteMatch;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "+\t\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "-\t\t\t\t} else if (problemMethod == null) {", "-\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\tif (candidatesCount == 0) {", "-\t\t\tif (concreteMatch != null) {", "-\t\t\t\tunitScope.recordTypeReferences(concreteMatch.thrownExceptions);", "-\t\t\t\treturn concreteMatch;", "+\t\tif (candidatesCount < 2) {", "+\t\t\tif (concreteMatch == null) {", "+\t\t\t\tif (candidatesCount == 0)", "+\t\t\t\t\treturn problemMethod; // can be null", "+\t\t\t\tconcreteMatch = candidates[0];", "-\t\t\treturn problemMethod; // can be null", "-\t\t}", "-\t\tif (candidatesCount == 1) {", "-\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\treturn candidates[0]; ", "+\t\t\tcompilationUnitScope().recordTypeReferences(concreteMatch.thrownExceptions);", "+\t\t\treturn concreteMatch;"]}], "num": 6979}
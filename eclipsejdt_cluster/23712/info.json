{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad9558eb4ba533712a5db3e2c3d2c355", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a459d9286ddba016a592e7d35352de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "e4b120541cf6c404fcc534d957fc35fe80d78035", "commitAfterChange": "50d1489a949b2e888c9f126b8f39d1c4ff67eaa2", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": " \tpublic void test0300_switch()", "signatureAfterChange": " \tpublic void test0300_switch()", "diff": ["-\t// WORK minimize", "-\t\t\t\t\"\tint kind;\\n\" + ", "-\t\t\t\t\"\tX parent;\\n\" + ", "-\t\t\t\t\"\tObject[] foo() { return null; }\\n\" + ", "-\t\t\t\t\"\tprivate void findTypeParameters(X scope) {\\n\" + ", "-\t\t\t\t\"\t\tObject[] typeParameters = null;\\n\" + ", "-\t\t\t\t\"\t\twhile (scope != null) {\\n\" + ", "-\t\t\t\t\"\t\t\ttypeParameters = null;\\n\" + ", "-\t\t\t\t\"\t\t\tswitch (scope.kind) {\\n\" + ", "-\t\t\t\t\"\t\t\t\tcase 0 :\\n\" + ", "-\t\t\t\t\"\t\t\t\t\ttypeParameters = foo();\\n\" + ", "-\t\t\t\t\"\t\t\t\t\tbreak;\\n\" + ", "-\t\t\t\t\"\t\t\t\tcase 1 :\\n\" + ", "-\t\t\t\t\"\t\t\t\t\ttypeParameters = foo();\\n\" + ", "-\t\t\t\t\"\t\t\t\t\tbreak;\\n\" + ", "-\t\t\t\t\"\t\t\t\tcase 2 :\\n\" + ", "-\t\t\t\t\"\t\t\t\t\treturn;\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t\tif(typeParameters != null) {\\n\" + ", "-\t\t\t\t\"\t\t\t\tfoo();\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t\tscope = scope.parent;\\n\" + ", "+\t\t\t\t\"\tint k;\\n\" + ", "+\t\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\tObject o = null;\\n\" + ", "+\t\t\t\t\"\t\tswitch (k) {\\n\" + ", "+\t\t\t\t\"\t\t\tcase 0 :\\n\" + ", "+\t\t\t\t\"\t\t\t\to = new Object();\\n\" + ", "+\t\t\t\t\"\t\t\t\tbreak;\\n\" + ", "+\t\t\t\t\"\t\t\tcase 2 :\\n\" + ", "+\t\t\t\t\"\t\t\t\treturn;\\n\" + ", "+\t\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\t\"\t\tif(o == null) { /* */\t}\\n\" + // quiet: don't know whether came from 0 or default", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"},", "+\t\t\t\"\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69e7e7d73a052a290ec3f706aeb2461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 81, "signatureBeforeChange": " public void _testBug400905_0012() throws CoreException", "signatureAfterChange": " public void testBug400905_0013() throws CoreException", "diff": ["-public void _testBug400905_0012() throws CoreException {", "-\t\tcreateJavaProject(\"P\", new String[] { \"\", \"src\"}, new String[] {\"JCL_LIB\"}, null, null, \"bin\", null, null, new String[][] {new String[] {\"src/\"}, new String[0]}, \"1.8\");", "-\t\t\t\"/P/src/J.java\",", "-\t\t\t\"public class J implements I {\\n\" +", "-\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\"\t\tI i = Y::goo;\\n\" +", "-\t\t\t\"\t }\\n\" +", "-\t\t\t\"    void foo() {\\n\" +", "-\t\t\t\"       I i = Y::goo;\\n\" +", "-\t\t\t\"       Y.goo(()->{});\\n\" +", "-\t\t\t\"       I i2 = new I() {\\n\" +", "-\t\t\t\"\t\t    public void foo() {\\n\" +", "-\t\t\t\"\t\t    }\\n\" +", "-\t\t\t\"\t    };\\n\" +", "-\t\t\t\"   }\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t);", "-\t\tcreateFile(", "-\t\t\t\"/P/src/Y.java\",", "-\t\t\t\"public class Y {\\n\" +", "-\t\t\t\"    public static void goo(I i) {};\\n\" +", "-\t\t\t\"    public static void goo() {};\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t\t\"    public void foo();\\n\" +", "-\t\tIMethod method = type.getMethod(\"foo\", new String[0]);", "-\t\tassertSearchResults(\"\");", "+public void testBug400905_0013() throws CoreException {", "+\ttry {", "+\t\tcreateJavaProject(\"P\", new String[] { \"\", \"src\"}, new String[] {\"JCL18_LIB\"}, null, null, \"bin\", null, null, new String[][] {new String[] {\"src/\"}, new String[0]}, \"1.8\");", "+\t\tcreateFile(", "+\t\t\t\"/P/src/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"   void zoo() {\\n\" +", "+\t\t\t\"\t    I i = () -> 0;\\n\" +", "+\t\t\t\"\t    I i2 = new I() {\\n\" +", "+\t\t\t\"\t\t    public int doit() {\\n\" +", "+\t\t\t\"\t\t\t    return 0;\\n\" +", "+\t\t\t\"\t\t    }\\n\" +", "+\t\t\t\"\t    };\\n\" +", "+\t\t\t\"   }\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\" class Y {}\\n\"", "+\t\t);", "+\t\tcreateFile(", "+\t\t\t\"/P/src/I.java\",", "+\t\t\t\"public interface I {\\n\" +", "+\t\t\t\"    public int doit();\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t);", "+\t\t", "+\t\tIType type = getCompilationUnit(\"/P/src/I.java\").getType(\"I\");", "+\t\tIMethod method = type.getMethod(\"doit\", new String[0]);", "+\t\tsearch(method, DECLARATIONS|IGNORE_DECLARING_TYPE|IGNORE_RETURN_TYPE, SearchPattern.R_CASE_SENSITIVE | SearchPattern.R_ERASURE_MATCH, SearchEngine.createHierarchyScope(type), this.resultCollector);", "+\t\tassertSearchResults(\"src/I.java int I.doit() [doit] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<lambda>#1.lambda$1() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/X.java int void X.zoo():<anonymous>#1.doit() [doit] EXACT_MATCH\");", "+\t}", "+\tfinally {", "+\t\tdeleteProject(\"P\");", "+\t}", "+}"]}], "num": 23712}
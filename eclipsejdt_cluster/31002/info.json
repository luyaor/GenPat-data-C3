{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c02849c88b285429626e077bdf6b373c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a8b0b4b1a41dba67b039cd7937e03d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "ac56f2b73d9b33e4b9a6e4d4cb10ee0f16401ca0", "commitAfterChange": "075f0337e26b45d6db80c1a335ec63cbf2bb29bc", "methodNumberBeforeChange": 379, "methodNumberAfterChange": 379, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "+\t\t\tif (this.currentElement != null) {", "+\t\t\t\tboolean oldValue = this.recordStringLiterals;", "+\t\t\t\tthis.recordStringLiterals = false;", "+\t\t\t\tthis.recoveryTokenCheck();", "+\t\t\t\tthis.recordStringLiterals = oldValue;", "+\t\t\t}", "-\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\tif (this.currentElement != null) {", "+\t\t\t\t\tboolean oldValue = this.recordStringLiterals;", "+\t\t\t\t\tthis.recordStringLiterals = false;", "+\t\t\t\t\tthis.recoveryTokenCheck();", "+\t\t\t\t\tthis.recordStringLiterals = oldValue;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589bd8e74ca0364e1ddffffb1c52483b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "50b8b0acb5228e84131dfeba9c21f872ddd0e6e0", "commitAfterChange": "dde29313645bb8126a58151e5c083fccc6ec2f84", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void addAffectedChild(JavaElementDelta child)", "signatureAfterChange": "\r protected void addAffectedChild(JavaElementDelta child)", "diff": ["+\t\t\t\t\t\t// add the non-java resource deltas if needed\r", "+\t\t\t\t\t\t// note that the child delta always takes precedence over this existing child delta\r", "+\t\t\t\t\t\t// as non-java resource deltas are always created last (by the DeltaProcessor)\r", "+\t\t\t\t\t\tIResourceDelta[] resDeltas = child.getResourceDeltas();\r", "+\t\t\t\t\t\tif (resDeltas != null) {\r", "+\t\t\t\t\t\t\t((JavaElementDelta)existingChild).resourceDeltas = resDeltas;\r", "+\t\t\t\t\t\t\t((JavaElementDelta)existingChild).resourceDeltasCounter = child.resourceDeltasCounter;\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "803b7446892d79ff42b572b7fd6c8177", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 339, "signatureBeforeChange": " protected CompilationUnitDeclaration endParse(int act)", "signatureAfterChange": " protected CompilationUnitDeclaration endParse(int act)", "diff": ["-\tif (this.currentElement != null){", "-\t\tthis.currentElement.topElement().updateParseTree();", "+\tif(this.statementRecoveryActivated) {", "+\t\tRecoveredElement recoveredElement = this.buildInitialRecoveryState();", "+\t\trecoveredElement.topElement().updateParseTree();", "+\t\tif(this.hasError) this.resetStacks();", "+\t} else if (this.currentElement != null){", "+\t\tthis.currentElement.topElement().updateParseTree();", "-\t\tproblemReporter().task(", "+\t\tif(!this.statementRecoveryActivated) problemReporter().task("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2725e4eabf7f82db0b436a7dbd1a7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "signatureAfterChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "diff": ["-\t\t\t\t\t\tthis.currentResource = pkg.getUnderlyingResource();\r", "-\t\t\t\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "-\t\t\t\t\t\t\tthis.currentResource = javaProject.getProject();\r", "+\t\t\t\t\t\tIResource resource = pkg.getUnderlyingResource();\r", "+\t\t\t\t\t\tif (resource == null) { // case of a file in an external jar\r", "+\t\t\t\t\t\t\tresource = javaProject.getProject();\r", "+\t\t\t\t\t\tthis.potentialMatchesIndex = 0;\r", "+\t\t\t\t\t\tthis.potentialMatches = new PotentialMatch[] {\r", "+\t\t\t\t\t\t\tnew PotentialMatch(this, resource, null)\r", "+\t\t\t\t\t\t};\r"]}], "num": 31002}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d3e32e7083cedd6c04f907bc2c72363", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9e8aa1c917196473fc358e80768d54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "signatureAfterChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "diff": ["-\t\t\tHashMap packageFragToTypes= new HashMap();", "+\t\t\tHashtableOfArrayToObject packageFragToTypes= new HashtableOfArrayToObject();", "-\t\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\tpackageFragToTypes.put(CharOperation.NO_STRINGS, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\tint last = entryName.length() - 1;", "-\t\t\t\t\tentryName= entryName.substring(0, last);", "-\t\t\t\t\tentryName= entryName.replace('/', '.');", "+\t\t\t\t\tentryName= entryName.substring(0, entryName.length() - 1);", "+\t\t\t\t\tString[] names = CharOperation.toStrings(CharOperation.splitOn('/', entryName.toCharArray()));", "+\t\t\t\t\tint length = names.length;", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(entryName)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(entryName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(names)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(names, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\tif ((last = entryName.lastIndexOf('.')) < 0) break;", "-\t\t\t\t\t\tentryName = entryName.substring(0, last);", "+\t\t\t\t\t\tif (--length <= 0) break;", "+\t\t\t\t\t\tSystem.arraycopy(names, 0, names = new String[length], 0, length);", "-\t\t\t\t\tString packageName;", "+\t\t\t\t\tString[] names;", "-\t\t\t\t\t\tentryName= entryName.replace('/', '.');", "-\t\t\t\t\t\tpackageName= entryName.substring(0, lastSeparator);", "+\t\t\t\t\t\tchar[] packageName = new char[lastSeparator];", "+\t\t\t\t\t\tentryName.getChars(0, lastSeparator, packageName, 0);", "+\t\t\t\t\t\tnames = CharOperation.toStrings(CharOperation.splitOn('/', packageName));", "-\t\t\t\t\t\tpackageName =  IPackageFragment.DEFAULT_PACKAGE_NAME;", "+\t\t\t\t\t\tnames =  CharOperation.NO_STRINGS;", "-\t\t\t\t\tString currentPackageName = packageName;", "+\t\t\t\t\tString[] currentNames = names;", "+\t\t\t\t\tint length = currentNames.length;", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentPackageName)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(currentPackageName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentNames)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(currentNames, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\tint last;", "-\t\t\t\t\t\tif ((last = currentPackageName.lastIndexOf('.')) < 0) break;", "-\t\t\t\t\t\tcurrentPackageName = currentPackageName.substring(0, last);", "+\t\t\t\t\t\tif (--length <= 0) break;", "+\t\t\t\t\t\tSystem.arraycopy(currentNames, 0, currentNames = new String[length], 0, length);", "-\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(packageName);", "+\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(names);", "-\t\t\tIterator packages = packageFragToTypes.keySet().iterator();", "-\t\t\twhile (packages.hasNext()) {", "-\t\t\t\tString packName = (String) packages.next();", "+\t\t\tfor (int i = 0, length = packageFragToTypes.keyTable.length; i < length; i++) {", "+\t\t\t\tString[] pkgName = (String[]) packageFragToTypes.keyTable[i];", "+\t\t\t\tif (pkgName == null) continue;", "-\t\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);", "-\t\t\t\tJarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(packName);", "+\t\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(pkgName);", "+\t\t\t\tJarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(pkgName);", "-\t\t\t\t\tpackFrag.computeNonJavaResources(NO_STRINGS, fragInfo, jar.getName());", "+\t\t\t\t\tpackFrag.computeNonJavaResources(CharOperation.NO_STRINGS, fragInfo, jar.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e43acf1aef4eef1af469721b3fd2c49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected boolean computeChildren(OpenableElementInfo info) throws JavaModelException", "signatureAfterChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "diff": ["-\tprotected boolean computeChildren(OpenableElementInfo info) throws JavaModelException {", "+\tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException {", "+\t\t", "-\t\tcomputeJarChildren((JarPackageFragmentRootInfo) info, vChildren);", "+\t\tfinal int JAVA = 0;", "+\t\tfinal int NON_JAVA = 1;", "+\t\tZipFile jar= null;", "+\t\ttry {", "+\t\t\tjar= getJar();", "+\t", "+\t\t\tHashMap packageFragToTypes= new HashMap();", "+\t", "+\t\t\t// always create the default package", "+\t\t\tpackageFragToTypes.put(IPackageFragment.DEFAULT_PACKAGE_NAME, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t", "+\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "+\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "+\t\t\t\tString entryName= member.getName();", "+\t", "+\t\t\t\tif (member.isDirectory()) {", "+\t\t\t\t\t", "+\t\t\t\t\tint last = entryName.length() - 1;", "+\t\t\t\t\tentryName= entryName.substring(0, last);", "+\t\t\t\t\tentryName= entryName.replace('/', '.');", "+\t", "+\t\t\t\t\t// add the package name & all of its parent packages", "+\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t// extract the package name", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(entryName)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(entryName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif ((last = entryName.lastIndexOf('.')) < 0) break;", "+\t\t\t\t\t\tentryName = entryName.substring(0, last);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t//store the class file / non-java rsc entry name to be cached in the appropriate package fragment", "+\t\t\t\t\t//zip entries only use '/'", "+\t\t\t\t\tint lastSeparator= entryName.lastIndexOf('/');", "+\t\t\t\t\tString packageName;", "+\t\t\t\t\tString fileName;", "+\t\t\t\t\tif (lastSeparator != -1) { //not in the default package", "+\t\t\t\t\t\tentryName= entryName.replace('/', '.');", "+\t\t\t\t\t\tfileName= entryName.substring(lastSeparator + 1);", "+\t\t\t\t\t\tpackageName= entryName.substring(0, lastSeparator);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfileName = entryName;", "+\t\t\t\t\t\tpackageName =  IPackageFragment.DEFAULT_PACKAGE_NAME;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// add the package name & all of its parent packages", "+\t\t\t\t\tString currentPackageName = packageName;", "+\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t// extract the package name", "+\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentPackageName)) break;", "+\t\t\t\t\t\tpackageFragToTypes.put(currentPackageName, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint last;", "+\t\t\t\t\t\tif ((last = currentPackageName.lastIndexOf('.')) < 0) break;", "+\t\t\t\t\t\tcurrentPackageName = currentPackageName.substring(0, last);", "+\t\t\t\t\t}", "+\t\t\t\t\t// add classfile info amongst children", "+\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(packageName);", "+\t\t\t\t\tif (Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\tif (children[JAVA] == EMPTY_LIST) children[JAVA] = new ArrayList();", "+\t\t\t\t\t\tchildren[JAVA].add(fileName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (children[NON_JAVA] == EMPTY_LIST) children[NON_JAVA] = new ArrayList();", "+\t\t\t\t\t\tchildren[NON_JAVA].add(fileName);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t//loop through all of referenced packages, creating package fragments if necessary", "+\t\t\t// and cache the entry names in the infos created for those package fragments", "+\t\t\tIterator packages = packageFragToTypes.keySet().iterator();", "+\t\t\twhile (packages.hasNext()) {", "+\t\t\t\tString packName = (String) packages.next();", "+\t\t\t\t", "+\t\t\t\tArrayList[] entries= (ArrayList[]) packageFragToTypes.get(packName);", "+\t\t\t\tJarPackageFragment packFrag= (JarPackageFragment) getPackageFragment(packName);", "+\t\t\t\tJarPackageFragmentInfo fragInfo= (JarPackageFragmentInfo) packFrag.createElementInfo();", "+\t\t\t\tif (entries[0].size() > 0){", "+\t\t\t\t\tfragInfo.setEntryNames(entries[JAVA]);", "+\t\t\t\t}", "+\t\t\t\tint resLength= entries[NON_JAVA].size();", "+\t\t\t\tif (resLength == 0) {", "+\t\t\t\t\tpackFrag.computeNonJavaResources(NO_STRINGS, fragInfo, jar.getName());", "+\t\t\t\t} else {", "+\t\t\t\t\tString[] resNames= new String[resLength];", "+\t\t\t\t\tentries[NON_JAVA].toArray(resNames);", "+\t\t\t\t\tpackFrag.computeNonJavaResources(resNames, fragInfo, jar.getName());", "+\t\t\t\t}", "+\t\t\t\tpackFrag.computeChildren(fragInfo);", "+\t\t\t\tnewElements.put(packFrag, fragInfo);", "+\t\t\t\tvChildren.add(packFrag);", "+\t\t\t}", "+\t\t} catch (CoreException e) {", "+\t\t\tif (e instanceof JavaModelException) throw (JavaModelException)e;", "+\t\t\tthrow new JavaModelException(e);", "+\t\t} finally {", "+\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "+\t\t}", "+", "+"]}], "num": 43269}
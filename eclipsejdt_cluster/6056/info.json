{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "148781222b22e64c4d3c4055f7ab2794", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24f132c6a14a4b0a7bf09d5fbdfe4219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9efbe5554ac761a85464c2e1f07f87b5f5dd57eb", "commitAfterChange": "5af59e31692f51bf5a400460066038f2e641aee5", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-// waiting on philippe to fix array compares", "-//\t\tthis.runNegativeTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"interface X<T> { X<T>[] x(); }\\n\" +", "-//\t\t\t\t\"abstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + // warning: x() in Y implements x() in X; return type requires unchecked conversion", "-//\t\t\t\t\"abstract class Z implements X { public abstract X[] x(); }\\n\"", "-//\t\t\t},", "-//\t\t\t\"----------\\n\" + ", "-//\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-//\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + ", "-//\t\t\t\"\t                                                      ^\\n\" + ", "-//\t\t\t\"Type safety: The return type X[] of the method x() of type Y<S> needs unchecked conversion to conform to the return type X<T>[] of inherited method\\n\" + ", "-//\t\t\t\"----------\\n\"", "-//\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"interface X<T> { X<T>[] x(); }\\n\" +", "+\t\t\t\t\"abstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + // warning: x() in Y implements x() in X; return type requires unchecked conversion", "+\t\t\t\t\"abstract class Z implements X { public abstract X[] x(); }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                                                      ^^^\\n\" + ", "+\t\t\t\"Type safety: The return type X[] of the method x() of type Y<S> needs unchecked conversion to conform to the return type X<T>[] of inherited method\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1df6983ca7fc80881e9db77b96c6fed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in A.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                                                      ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                                                ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}], "num": 6056}
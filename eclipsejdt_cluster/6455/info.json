{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cacf2b99449381801443f3e52f97b99d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04aab08b6a86ad865c94610fccb7721c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5cb41f749c2ec22a8b1dbe9218fa57cb04d25c4a", "commitAfterChange": "071f59f477be631666f24420ca0aab156c270c65", "methodNumberBeforeChange": 471, "methodNumberAfterChange": 471, "signatureBeforeChange": " private boolean excludeDueToAnnotation(Annotation[] annotations)", "signatureAfterChange": " private boolean excludeDueToAnnotation(Annotation[] annotations, int problemId)", "diff": ["-private boolean excludeDueToAnnotation(Annotation[] annotations) {", "+private boolean excludeDueToAnnotation(Annotation[] annotations, int problemId) {", "+\t\t\t\tcase TypeIds.T_JavaxInjectInject:", "+\t\t\t\tcase TypeIds.T_ComGoogleInjectInject:", "+\t\t\t\t\tif (problemId != IProblem.UnusedPrivateField)", "+\t\t\t\t\t\treturn true; // @Inject on method/ctor does constitute a relevant use, just on fields it doesn't", "+\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bee6ca7d8e6701533d52b133e4e1d816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "03f2d9cad83654a82360483795a7407e799378bf", "commitAfterChange": "fc2bbd994a305724f9f5d9645163d8f7329cd965", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": " private boolean excludeDueToAnnotation(Annotation[] annotations)", "signatureAfterChange": " private boolean excludeDueToAnnotation(Annotation[] annotations, int problemId)", "diff": ["-private boolean excludeDueToAnnotation(Annotation[] annotations) {", "+private boolean excludeDueToAnnotation(Annotation[] annotations, int problemId) {", "+\t\t\t\tcase TypeIds.T_JavaxInjectInject:", "+\t\t\t\tcase TypeIds.T_ComGoogleInjectInject:", "+\t\t\t\t\tif (problemId != IProblem.UnusedPrivateField)", "+\t\t\t\t\t\treturn true; // @Inject on method/ctor does constitute a relevant use, just on fields it doesn't", "+\t\t\t\t\tbreak;"]}], "num": 6455}
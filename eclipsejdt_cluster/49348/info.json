{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "842b3a5636b0cc5ac99492ea4e736258", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524aa579e4957358b8e16a551913c2ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\tFormatJavadocNode previousNode = null;", "-\t\t\t\t\tif (newLines == 0 && previousNode.isText() && node.isText()) {", "+\t\t\t\t\tif (newLines == 0 && node.isText()) {", "-\t\t\t\t\t\t\tif ((this.column + tokenLength + 1) > this.formatter.preferences.comment_line_length) {", "-\t\t\t\t\t\t\t\t// finally a new line will be inserted while printing next text, just reset the column", "-\t\t\t\t\t\t\t\tthis.column = 1;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// print one", "-\t\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t\t\t\tif (nodeStart > (previousEnd+1)) {", "+\t\t\t\t\t\t\t\ttokenLength++; // include space between nodes", "+\t\t\t\t\t\t\tif ((this.column + tokenLength) > this.formatter.preferences.comment_line_length) {", "+\t\t\t\t\t\t\t\t// finally a new line will be inserted while printing next text", "+\t\t\t\t\t\t\t\tnewLines = 1;", "+\t\t\t\t\t\t\t\t((FormatJavadocText)node).linesBefore = 1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t\t\t// Immutable tags are not formatted", "-\t\t\t\t\t\t// Immutable tags are not formatted", "-//\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-//\t\t\t\t\t\tif ((text.htmlTagIndex & JAVADOC_TAGS_ID_MASK) != JAVADOC_CODE_TAGS_ID) {", "-//\t\t\t\t\t\t\taddReplaceEdit(text.sourceStart, text.sourceEnd, buffer.toString());", "-//\t\t\t\t\t\t}", "-\t\t\tpreviousNode = node;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4aa53cb6fb7bc0f8da9af863b0c636", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "818dca3cf84fd118ea99497de1f8b977d4253551", "commitAfterChange": "52f6144c4e9af7092e9f26d44a5197a00c39427c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint newLines = 0;", "-\t    \tif (node.isText()) {", "-\t    \t\tFormatJavadocText text = (FormatJavadocText)node;", "-    \t\t\tif (text.isImmutableHtmlTag()) {", "+\t\t\tFormatJavadocText text = null;", "+\t\t\tboolean isImmutableNode = node.isImmutable();", "+\t\t\tboolean nodeIsText = node.isText();", "+\t\t\tif (nodeIsText) {", "+\t    \t\ttext = (FormatJavadocText)node;", "+\t\t\t} else {", "+\t\t\t\tFormatJavadocBlock inlinedBlock = (FormatJavadocBlock)node;", "+\t\t\t\tif (isImmutableNode) {", "+\t\t\t\t\ttext = (FormatJavadocText) inlinedBlock.getLastNode();", "+\t\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;  // tag length", "+\t\t\t    \tif (nodeStart > (previousEnd+1)) {", "+\t\t\t    \t\tlength++; // include space between nodes", "+\t\t\t    \t}", "+\t\t\t\t\tthis.scanner.resetTo(text.sourceStart , node.sourceEnd);", "+\t\t\t\t}", "+\t\t\t}", "+\t    \tif (text != null) {", "+    \t\t\tif (isImmutableNode) {", "-\t\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "-\t\t    \t\t\t\t\t\t\treturn newLines;", "+\t\t    \t\t\t\t\t\tif (nodeIsText) {", "+\t\t\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "+\t\t\t    \t\t\t\t\t\t\treturn 0;", "+\t\t\t    \t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnewLines++;", "-\t\t\t\t    \t\tif (headerLine) {", "-\t\t\t\t\t\t\t\tmaxColumn--;", "-\t\t\t\t\t\t\t\theaderLine = false;", "-\t\t\t    \t\t\t}", "-\t\t\t\t\t\t\tlastColumn = firstColumn;", "+\t    \t\t\t\t\treturn 1;", "-\t    \t\t\treturn newLines;", "+\t    \t\t\treturn 0;"]}], "num": 49348}
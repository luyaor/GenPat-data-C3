{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc6502b959b8a3abf366a4847e1b670e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "040a25d535a8277e910c4548d264829b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/JavaDevelopmentContextImpl.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tbyte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file)", "signatureAfterChange": "\r byte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file)", "diff": ["+ */\r", "+byte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file) {\r", "+\ttry {\r", "+\t\tIPath location = file.getLocation();\r", "+\t\tif (location == null) return new byte[0];\r", "+\t\tInputStream input = new java.io.FileInputStream(location.toOSString());\r", "+\t\treturn org.eclipse.jdt.internal.core.Util.readContentsAsBytes(input);\r", "+\t} catch (IOException e) {\r", "+\t\treturn new byte[0];\r", "-\t */\r", "-\tbyte[] getBinaryFromFileSystem(org.eclipse.core.resources.IFile file) {\r", "-\t\ttry {\r", "-\t\t\tString osPath = file.getLocation().toOSString();\r", "-\t\t\tInputStream input = new java.io.FileInputStream(osPath);\r", "-\t\t\treturn org.eclipse.jdt.internal.core.Util.readContentsAsBytes(input);\r", "-\t\t} catch (IOException e) {\r", "-\t\t\treturn new byte[0];\r", "-\t\t}\r", "-\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd56813629e94453e3305671409d0b71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectBinaryOutput.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tpublic byte[] getBinary(TypeStructureEntry tsEntry, IType type)", "signatureAfterChange": "\r public byte[] getBinary(TypeStructureEntry tsEntry, IType type)", "diff": ["-\t */\r", "-\tpublic byte[] getBinary(TypeStructureEntry tsEntry, IType type) {\r", "-\t\tIPath path = getPathForBinary(type);\r", "-\t\tIFile file = getFile(path);\r", "-\t\ttry {\r", "-\t\t\tInputStream input = file.getContents(true);\r", "-\t\t\treturn Util.readContentsAsBytes(input);\r", "-\t\t} catch (IOException e) {\r", "-\t\t\tthrow this.dc.internalException(e);\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\treturn this.dc.getBinaryFromFileSystem(file);\r", "-\t\t}\r", "-\t}\r", "+ */\r", "+public byte[] getBinary(TypeStructureEntry tsEntry, IType type) {\r", "+\tIPath path = getPathForBinary(type);\r", "+\tIFile file = getFile(path);\r", "+\ttry {\r", "+\t\tInputStream input = file.getContents(true);\r", "+\t\treturn Util.readContentsAsBytes(input);\r", "+\t} catch (IOException e) {\r", "+\t\treturn new byte[0];\r", "+\t} catch (CoreException e) {\r", "+\t\treturn new byte[0];\t}\r", "+}\r"]}], "num": 13593}
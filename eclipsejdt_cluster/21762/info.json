{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6efcda746febacbca315e6fa4652f883", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1a3d675fd7ef14a1b93eb5e03265a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "91f3c8870f13ed83ebd6280cbfe1b3f0285abeea", "commitAfterChange": "bc783d19ecf0eacf7a7c450b320f7a35cdefecbf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected IType resolveType(char[] packageName, char[] typeName, int acceptFlags)", "signatureAfterChange": "\r protected IType resolveType(char[] packageName, char[] typeName, int acceptFlags)", "diff": ["-\t\t\t\ttype = wc.getType(new String(typeName));\r", "+\t\t\t\tchar[][] compoundName = CharOperation.splitOn('.', typeName);\r", "+\t\t\t\tif(compoundName.length > 0) {\r", "+\t\t\t\t\ttype = wc.getType(new String(compoundName[0]));\r", "+\t\t\t\t\tfor (int i = 1, length = compoundName.length; i < length; i++) {\r", "+\t\t\t\t\t\ttype = type.getType(new String(compoundName[i]));", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3991cb60ee99e41bbba0adcefeac201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/MethodNameMatchRequestorWrapper.java", "commitBeforeChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "commitAfterChange": "1b4ae3c306349bc12b5bd14c0b0208197346f4fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "signatureAfterChange": "  \t@Override \tpublic void acceptMethod(char[] methodName, int parameterCount, char[] declaringQualifier, \t\t\tchar[] simpleTypeName, int typeModifiers, char[] packageName, char[] signature, char[][] parameterTypes, \t\t\tchar[][] parameterNames, char[] returnType, int modifiers, String path, \t\t\tAccessRestriction access, int methodIndex)", "diff": ["-\t\tif (parameterTypes.length > 0) {", "+\t\tif (signature != null) {", "+\t\t\tchar[][] parTypes = Signature.getParameterTypes(signature);", "+\t\t\tif (parTypes.length > 0) {", "+\t\t\t\tfor (int i = 0, l = parTypes.length; i < l; ++i) {", "+\t\t\t\t\tCharOperation.replace(parTypes[i], '/', '.');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tparamTypeSigs = CharOperation.toStrings(parTypes);", "+\t\t} else if (parameterTypes.length > 0) {"]}], "num": 21762}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83662566d28bae0012aa2ba2d032763c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e17a07987751b06eea3d96db67bf77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition)", "signatureAfterChange": "\r public void complete(ICompilationUnit sourceUnit, int completionPosition)", "diff": ["-\t */\r", "-\tpublic void complete(ICompilationUnit sourceUnit, int completionPosition) {\r", "-\t\ttry {\r", "-\t\t\tactualCompletionPosition = completionPosition - 1;\r", "-\t\t\t// for now until we can change the UI.\r", "-\t\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "-\t\t\tCompilationUnitDeclaration parsedUnit =\r", "-\t\t\t\tparser.dietParse(sourceUnit, result, actualCompletionPosition);\r", "-\r", "-\t\t\t//\t\tboolean completionNodeFound = false;\r", "-\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t// scan the package & import statements first\r", "-\t\t\t\tif (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {\r", "-\t\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t\tImportReference[] imports = parsedUnit.imports;\r", "-\t\t\t\tif (imports != null) {\r", "-\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\t\t\t\t\t\tImportReference importReference = imports[i];\r", "-\t\t\t\t\t\tif (importReference instanceof CompletionOnImportReference) {\r", "-\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);\r", "-\t\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\tif (parsedUnit.types != null) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "-\t\t\t\t\t\tif ((unitScope = parsedUnit.scope) != null) {\r", "+ */\r", "+public void complete(ICompilationUnit sourceUnit, int completionPosition) {\r", "+\ttry {\r", "+\t\tint actualCompletionPosition = completionPosition - 1; // for now until we can change the UI.\r", "+\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "+\t\tCompilationUnitDeclaration parsedUnit = parser.dietParse(sourceUnit, result, actualCompletionPosition);\r", "+\r", "+//\t\tboolean completionNodeFound = false;\r", "+\t\tif (parsedUnit != null) {\r", "+\t\t\t// scan the package & import statements first\r", "+\t\t\tif (parsedUnit.currentPackage instanceof CompletionOnPackageReference) {\r", "+\t\t\t\tfindPackages((CompletionOnPackageReference) parsedUnit.currentPackage);\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t\tImportReference[] imports = parsedUnit.imports;\r", "+\t\t\tif (imports != null) {\r", "+\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\t\tImportReference importReference = imports[i];\r", "+\t\t\t\t\tif (importReference instanceof CompletionOnImportReference) {\r", "+\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);\r", "+\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\r", "+\t\t\tif (parsedUnit.types != null) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "+\t\t\t\t\tif ((unitScope = parsedUnit.scope) != null) {\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t} catch (CompletionNodeFound e) {\r", "-\t\t\t\t\t\t//\t\t\t\t\tcompletionNodeFound = true;\r", "-\t\t\t\t\t\tif (e.astNode != null)\r", "-\t\t\t\t\t\t\t// if null then we found a problem in the completion node\r", "-\t\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "+\t\t\t\t} catch (CompletionNodeFound e) {\r", "+//\t\t\t\t\tcompletionNodeFound = true;\r", "+\t\t\t\t\tif (e.astNode != null) // if null then we found a problem in the completion node\r", "+\t\t\t\t\t\tcomplete(e.astNode, e.qualifiedBinding, e.scope);\r", "-\r", "-\t\t\t/* Ignore package, import, class & interface keywords for now...\r", "-\t\t\t\t\tif (!completionNodeFound) {\r", "-\t\t\t\t\t\tif (parsedUnit == null || parsedUnit.types == null) {\r", "-\t\t\t\t\t\t\t// this is not good enough... can still be trying to define a second type\r", "-\t\t\t\t\t\t\tCompletionScanner scanner = (CompletionScanner) parser.scanner;\r", "-\t\t\t\t\t\t\tsetSourceRange(scanner.completedIdentifierStart, scanner.completedIdentifierEnd);\r", "-\t\t\t\t\t\t\tfindKeywords(scanner.completionIdentifier, mainDeclarations, null);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t// currently have no way to know if extends/implements are possible keywords\r", "-\t\t\t\t\t}\r", "-\t\t\t*/\r", "-\t\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\r", "-\t\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error\r", "-\t\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "-\t\t} finally {\r", "-\t\t\treset();\r", "-\t\t}\r", "-\t}\r", "+/* Ignore package, import, class & interface keywords for now...\r", "+\t\tif (!completionNodeFound) {\r", "+\t\t\tif (parsedUnit == null || parsedUnit.types == null) {\r", "+\t\t\t\t// this is not good enough... can still be trying to define a second type\r", "+\t\t\t\tCompletionScanner scanner = (CompletionScanner) parser.scanner;\r", "+\t\t\t\tsetSourceRange(scanner.completedIdentifierStart, scanner.completedIdentifierEnd);\r", "+\t\t\t\tfindKeywords(scanner.completionIdentifier, mainDeclarations, null);\r", "+\t\t\t// currently have no way to know if extends/implements are possible keywords\r", "+*/\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\r", "+\t} catch (InvalidCursorLocation e) { // may eventually report a usefull error\r", "+\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "+\t} finally {\r", "+\t\treset();\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ae4c0ae154e9457993fd5291493b4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tpublic void select(\r \t\tICompilationUnit sourceUnit,\r \t\tint selectionSourceStart,\r \t\tint selectionSourceEnd)", "signatureAfterChange": "\r public void select(ICompilationUnit sourceUnit, int selectionSourceStart, int selectionSourceEnd)", "diff": ["-\t */\r", "-\tpublic void select(\r", "-\t\tICompilationUnit sourceUnit,\r", "-\t\tint selectionSourceStart,\r", "-\t\tint selectionSourceEnd) {\r", "-\r", "-\t\tchar[] source = sourceUnit.getContents();\r", "-\t\tif (!checkSelection(source, selectionSourceStart, selectionSourceEnd - 1))\r", "-\t\t\treturn;\r", "-\t\ttry {\r", "-\t\t\tacceptedAnswer = false;\r", "-\t\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "-\t\t\tCompilationUnitDeclaration parsedUnit =\r", "-\t\t\t\tparser.dietParse(sourceUnit, result, actualSelectionStart, actualSelectionEnd);\r", "-\r", "-\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t// scan the package & import statements first\r", "-\t\t\t\tif (parsedUnit.currentPackage instanceof SelectionOnPackageReference) {\r", "-\t\t\t\t\tchar[][] tokens =\r", "-\t\t\t\t\t\t((SelectionOnPackageReference) parsedUnit.currentPackage).tokens;\r", "-\t\t\t\t\trequestor.acceptPackage(CharOperation.concatWith(tokens, '.'));\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t\tImportReference[] imports = parsedUnit.imports;\r", "-\t\t\t\tif (imports != null) {\r", "-\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\t\t\t\t\t\tImportReference importReference = imports[i];\r", "-\t\t\t\t\t\tif (importReference instanceof SelectionOnImportReference) {\r", "-\t\t\t\t\t\t\tchar[][] tokens = ((SelectionOnImportReference) importReference).tokens;\r", "-\t\t\t\t\t\t\trequestor.acceptPackage(CharOperation.concatWith(tokens, '.'));\r", "-\t\t\t\t\t\t\tnameEnvironment.findTypes(CharOperation.concatWith(tokens, '.'), this);\r", "-\t\t\t\t\t\t\tif (!acceptedAnswer)\r", "-\t\t\t\t\t\t\t\tnameEnvironment.findTypes(selectedIdentifier, this);\r", "-\t\t\t\t\t\t\t// try with simple type name\r", "-\t\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t\tif (parsedUnit.types != null) {\r", "-\t\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "-\t\t\t\t\tif (parsedUnit.scope != null) {\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, true);\r", "-\t\t\t\t\t\t\tparsedUnit.scope.faultInTypes();\r", "-\t\t\t\t\t\t\tparseMethod(parsedUnit, selectionSourceStart);\r", "-\t\t\t\t\t\t\tparsedUnit.resolve();\r", "-\t\t\t\t\t\t} catch (SelectionNodeFound e) {\r", "-\t\t\t\t\t\t\tif (e.binding != null) {\r", "-\t\t\t\t\t\t\t\t// if null then we found a problem in the selection node\r", "-\t\t\t\t\t\t\t\tselectFrom(e.binding);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\r", "-\t\t\t// only reaches here if no selection could be derived from the parsed tree\r", "-\t\t\t// thus use the selected source and perform a textual type search\r", "-\t\t\tif (!acceptedAnswer) {\r", "-\t\t\t\tnameEnvironment.findTypes(selectedIdentifier, this);\r", "-\t\t\t}\r", "-\t\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\t\t\r", "-\t\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "-\t\t} finally {\r", "-\t\t\treset();\r", "+ */\r", "+public void select(ICompilationUnit sourceUnit, int selectionSourceStart, int selectionSourceEnd) {\r", "+\tchar[] source = sourceUnit.getContents();\r", "+\tif (!checkSelection(source, selectionSourceStart, selectionSourceEnd)) return;\r", "+\ttry{\r", "+\t\tacceptedAnswer = false;\r", "+\t\tCompilationResult result = new CompilationResult(sourceUnit, 1, 1);\r", "+\t\tCompilationUnitDeclaration parsedUnit = parser.dietParse(sourceUnit, result, actualSelectionStart, actualSelectionEnd);\r", "+\r", "+\t\tif (parsedUnit != null) {\r", "+\t\t\t// scan the package & import statements first\r", "+\t\t\tif (parsedUnit.currentPackage instanceof SelectionOnPackageReference) {\r", "+\t\t\t\tchar[][] tokens = ((SelectionOnPackageReference) parsedUnit.currentPackage).tokens;\r", "+\t\t\t\trequestor.acceptPackage(CharOperation.concatWith(tokens, '.'));\r", "+\t\t\tImportReference[] imports = parsedUnit.imports;\r", "+\t\t\tif (imports != null) {\r", "+\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\t\tImportReference importReference = imports[i];\r", "+\t\t\t\t\tif (importReference instanceof SelectionOnImportReference) {\r", "+\t\t\t\t\t\tchar[][] tokens = ((SelectionOnImportReference) importReference).tokens;\r", "+\t\t\t\t\t\trequestor.acceptPackage(CharOperation.concatWith(tokens, '.'));\r", "+\t\t\t\t\t\tnameEnvironment.findTypes(CharOperation.concatWith(tokens, '.'), this);\r", "+\t\t\t\t\t\tif (!acceptedAnswer)\r", "+\t\t\t\t\t\t\tnameEnvironment.findTypes(selectedIdentifier, this); // try with simple type name\r", "+\t\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\tif (parsedUnit.types != null) {\r", "+\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "+\t\t\t\tif (parsedUnit.scope != null) {\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, true);\r", "+\t\t\t\t\t\tparsedUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\tparseMethod(parsedUnit, selectionSourceStart);\r", "+\t\t\t\t\t\tparsedUnit.resolve();\r", "+\t\t\t\t\t} catch (SelectionNodeFound e) {\r", "+\t\t\t\t\t\tif (e.binding != null) { // if null then we found a problem in the selection node\r", "+\t\t\t\t\t\t\tselectFrom(e.binding);\r", "+\t\t}\r", "+\t\t// only reaches here if no selection could be derived from the parsed tree\r", "+\t\t// thus use the selected source and perform a textual type search\r", "+\t\tif (!acceptedAnswer) {\r", "+\t\t\tnameEnvironment.findTypes(selectedIdentifier, this);\r", "+\t\t}\r", "+\t} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D\t\t\r", "+\t} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object\r", "+\t} finally {\r", "+\t\treset();\r", "+\t}\t\r", "+}\r"]}], "num": 9909}
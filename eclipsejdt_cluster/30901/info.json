{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20f7a841c96a5120634deb624759881d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69b17a744152f50d6b1cdd9b8c8185c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\tif (receiverType.isArrayType()) {", "-\t\t\tTypeBinding leafType = receiverType.leafComponentType();", "+\t\tcheckArrayField: {", "+\t\t\tTypeBinding leafType;", "+\t\t\tswitch (receiverType.kind()) {", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\tTypeBinding receiverErasure = receiverType.erasure();", "+\t\t\t\t\tif (!receiverErasure.isArrayType())", "+\t\t\t\t\t\tbreak checkArrayField;", "+\t\t\t\t\tleafType =receiverErasure.leafComponentType();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\tleafType = receiverType.leafComponentType();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tbreak checkArrayField;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cae8c8243daa9d152d580c5c6cadbcd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "265ec26aa6d2cbdb7df581eef4b2a30df572f94f", "commitAfterChange": "5d94e59203547041c3323b926241b976c3908892", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public boolean isDeclaringPackageFragment(IPackageFragment packageFragment, ReferenceBinding typeBinding)", "signatureAfterChange": " public boolean isDeclaringPackageFragment(IPackageFragment packageFragment, ReferenceBinding typeBinding)", "diff": ["-\t\tif (typeBinding.isBinaryBinding()) {", "-\t\t\tIClassFile classfile = packageFragment.getClassFile(new String(fileName));", "-\t\t\treturn classfile.exists();", "-\t\t} else {", "-\t\t\tICompilationUnit unit = packageFragment.getCompilationUnit(new String(fileName));", "-\t\t\treturn unit.exists();", "+\t\t", "+\t\ttry { ", "+\t\t\tswitch (packageFragment.getKind()) {", "+\t\t\t\tcase IPackageFragmentRoot.K_SOURCE :", "+\t\t\t\t\tif (!Util.isJavaFileName(fileName) || !packageFragment.getCompilationUnit(new String(fileName)).exists()) {", "+\t\t\t\t\t\treturn false; // unit doesn't live in selected package", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IPackageFragmentRoot.K_BINARY :", "+//\t\t\t\t\tif (Util.isJavaFileName(fileName)) { // binary with attached source", "+//\t\t\t\t\t\tint length = fileName.length;", "+//\t\t\t\t\t\tSystem.arraycopy(fileName, 0, fileName = new char[length], 0, length - 4); // copy all but extension", "+//\t\t\t\t\t\tSystem.arraycopy(SuffixConstants.SUFFIX_class, 0, fileName, length - 4, 4);", "+//\t\t\t\t\t}", "+\t\t\t\t\tif (!Util.isClassFileName(fileName) || !packageFragment.getClassFile(new String(fileName)).exists()) {", "+\t\t\t\t\t\treturn false; // classfile doesn't live in selected package", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t} catch(JavaModelException e) {", "+\t\t\t// unable to determine kind; tolerate this match"]}], "num": 30901}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d321860630632df08f244487903f34e2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03bf4b75043bab0508525a824bc49782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "fb8f376e81332a8e2eb0b6ab7b009417715a2326", "commitAfterChange": "504159d7229f244fe60c96f9b15d6167193a85b6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) {", "+\t\t\t} else if (castType.isTypeVariable()) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match == null) {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t}", "+\t\t\t\t// recursively on the type variable upper bound", "+\t\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\t\tscope,", "+\t\t\t\t\tcastType.erasure(),", "+\t\t\t\t\texpressionType,", "+\t\t\t\t\texpression);", "+\t\t\t} else if (castType.isClass()) {", "-\t", "+\t\tif (expressionType.isTypeVariable() || expressionType.isWildcard()) {", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\tif (match != null) {", "+\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\t// recursively on the type variable upper bound", "+\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\tscope,", "+\t\t\t\tcastType,", "+\t\t\t\texpressionType.erasure(),", "+\t\t\t\texpression);", "+\t\t}", "+\t\t", "+\t\t\t} else if (castType.isTypeVariable()) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match == null) {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t}", "+\t\t\t\t// recursively on the type variable upper bound", "+\t\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\t\tscope,", "+\t\t\t\t\tcastType.erasure(),", "+\t\t\t\t\texpressionType,", "+\t\t\t\t\texpression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "-\t\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t\t}", "+\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "-\t\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t\t}", "+\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t} else if (castType.isTypeVariable()) {", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\tif (match == null) {", "+\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t}", "+\t\t\t// recursively on the type variable upper bound", "+\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\tscope,", "+\t\t\t\tcastType.erasure(),", "+\t\t\t\texpressionType,", "+\t\t\t\texpression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo(expressionType.isTypeVariable() ? (ReferenceBinding)expressionType : (ReferenceBinding)expressionType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "-\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t}", "+\t\t\t\ttagAsNeedCheckCast();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0435a4ad6deabd290ea39e11028bf5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, ((ArrayBinding) castType).elementsType(), exprElementType, expression);", "-\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\t\tif (match == null) {", "-\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "+\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "-\t\t\t\treturn true;", "+\t\t\tif (castType instanceof ReferenceBinding) {", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType,", "-\t\t\t\texpressionType.erasure(),", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType, expressionType.erasure(), expression);", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\tcastType.erasure(),", "-\t\t\t\t\texpressionType,", "-\t\t\t\t\texpression);", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\tscope,", "-\t\t\t\tcastType.erasure(),", "-\t\t\t\texpressionType,", "-\t\t\t\texpression);", "+\t\t\treturn checkCastTypesCompatibility(scope, castType.erasure(), expressionType, expression);", "-\t\t\t\t\treportIllegalCast(scope, castType, expressionType);", "-\t\t\t\t\t\t\treportIllegalCast(scope, castType, expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22000dd7768149eb110465d139692778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\tif (match == null) {", "-\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "+\t\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\tif (castType instanceof ReferenceBinding) {", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tif (match != null) {", "-\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\tif (castType instanceof ReferenceBinding) {", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tif (match != null) {", "-\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(interfaceType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(interfaceType);", "-\t\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ee96bd38e0c3a622c8efea830f2c0e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\tTypeBinding match = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\tcase Binding.WILDCARD_TYPE : // intersection type", "-\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = interfaceType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = interfaceType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(interfaceType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(interfaceType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(expressionType);", "-\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = refExprType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = refExprType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(expressionType);", "-\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dc2e700da40aa0ea1099448f2c54205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "090fe346c72e2854da50fe3a145f46de3d4f7de0", "commitAfterChange": "a0b059290bf7b15573bfcb14661207df6f99dd45", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\tif (match != null) {", "-\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t}", "-\t\t\t", "-\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t}  else {", "-\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\tgetAllInheritedMethods((ReferenceBinding) expressionType);", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80745", "-\t\t\t\tMethodVerifier verifier = env.methodVerifier();", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++) {", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "-\t\t\t\t\t\tif (verifier.doReturnTypesCollide(castTypeMethods[i], expressionTypeMethods[j]))", "-\t\t\t\t\t\t\treturn false;", "+\t\t\t\tReferenceBinding interfaceType = (ReferenceBinding) expressionType;", "+\t\t\t\tTypeBinding match = interfaceType.findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t}", "+\t\t\t\t", "+\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)interfaceType.erasure());", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "+\t\t\t\t}", "+\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\t// pre1.5 semantics - no covariance allowed (even if 1.5 compliant, but 1.4 source)", "+\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "+\t\t\t\tMethodBinding[] expressionTypeMethods = getAllInheritedMethods((ReferenceBinding) expressionType);", "+\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\treturn false;", "+", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49088b470ee2f9ae228b5e96d7b7807f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t}", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t}", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo(expressionType.isTypeVariable() ? (ReferenceBinding)expressionType : (ReferenceBinding)expressionType.erasure());", "-\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5412f994d9b2793f7de9af0a3c8865f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "8b226a492ac84a08d6b25c8931ed21c4c6d95533", "commitAfterChange": "5df5b275110c6cdc85b67221e388c4e6ac6468cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\tif (expressionType == NullBinding) {", "-\t\t\tconstant = expression.constant;", "+\t\tif (expressionType == NullBinding) ", "-\t\t}", "+", "-\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionType).elementsType(scope);", "-\t\t\t\tif (expressionEltTb.isBaseType()) {", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == expressionEltTb)", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType)", "-\t\t\t\t\texpressionEltTb);", "+\t\t\t\t\texprElementType);", "-\t\t\t\t\tif (castType.id == T_String && expression.constant != Constant.NotAConstant){", "-\t\t\t\t\t\tconstant = expression.constant; // (String) cst is still a constant", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (castType.id == T_String) constant = expression.constant; // (String) cst is still a constant", "+\t\t\t\t\treturn;", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType))", "+\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)) ", "-\t\t} else if (", "-\t\t\tcastType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "+\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length;", "-\t\t\t\t\ti < castMethodsLength;", "-\t\t\t\t\ti++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "-\t\t\t\t\t\tif (castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\tif (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "-\t\t\t\t\t\t\t\tif (castTypeMethods[i].areParametersEqual(expressionTypeMethods[j]))", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5629cfc2039b12902c4362f9bde75c40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "740d8a3bbf7d827a9782a8704551b5892c828d42", "commitAfterChange": "37fa53fe1bcd1db81d377f564f101511c07818f5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = interfaceType.findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\t\t\t\t\tmatch = interfaceType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)interfaceType.erasure());", "+\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(interfaceType);", "-\t\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType);", "+\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = refExprType.findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\t\t\t\t\tmatch = refExprType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);"]}], "num": 60359}
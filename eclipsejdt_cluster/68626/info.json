{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27967a6475b558605ee0d904b449b717", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6ef4494269c0699e783dfda924efad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope)", "diff": ["-\t}\r", "-\tprivate void findConstructors(\r", "-\t\tReferenceBinding currentType,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\t// No visibility checks can be performed without the scope & invocationSite\r", "-\t\tMethodBinding[] methods = currentType.methods();\r", "-\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\t\tMethodBinding constructor = methods[f];\r", "-\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\tif (options.checkVisibilitySensitive()\r", "-\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope))\r", "-\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\t\tint paramLength = parameters.length;\r", "-\t\t\t\tif (minArgLength > paramLength)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t\t}\r", "-\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "-\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\t\tif (source == null\r", "-\t\t\t\t\t|| source.length <= endPosition\r", "-\t\t\t\t\t|| source[endPosition] != ')')\r", "-\t\t\t\t\tcompletion = new char[] { ')' };\r", "-\t\t\t\trequestor.acceptMethod(\r", "-\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tcompletion,\r", "-\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\tendPosition,\r", "-\t\t\t\t\tendPosition);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+}\r", "+private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope) {\r", "+\t// No visibility checks can be performed without the scope & invocationSite\r", "+\tMethodBinding[] methods = currentType.methods();\r", "+\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\tMethodBinding constructor = methods[f];\r", "+\t\tif (constructor.isConstructor()) {\r", "+\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\tint paramLength = parameters.length;\r", "+\t\t\tif (minArgLength > paramLength) continue next;\r", "+\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a])) continue next;\r", "+\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\tchar[] completion = TypeConstants.NoChar; // nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\tif (source == null || source.length <= endPosition || source[endPosition] != ')')\r", "+\t\t\t\tcompletion = new char[] {')'};\r", "+\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\tendPosition,\r", "+\t\t\t\tendPosition);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f593bf926d98b41e3479d476c056ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope)", "diff": ["-\t}\r", "-\tprivate void findConstructors(\r", "-\t\tReferenceBinding currentType,\r", "-\t\tTypeBinding[] argTypes,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite) {\r", "-\t\t// No visibility checks can be performed without the scope & invocationSite\r", "-\t\tMethodBinding[] methods = currentType.methods();\r", "-\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\t\tMethodBinding constructor = methods[f];\r", "-\t\t\tif (constructor.isConstructor()) {\r", "-\t\t\t\tif (options.checkVisibilitySensitive()\r", "-\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope))\r", "-\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\t\tint paramLength = parameters.length;\r", "-\t\t\t\tif (minArgLength > paramLength)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t\t}\r", "-\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "-\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\t\tif (source == null\r", "-\t\t\t\t\t|| source.length <= endPosition\r", "-\t\t\t\t\t|| source[endPosition] != ')')\r", "-\t\t\t\t\tcompletion = new char[] { ')' };\r", "-\t\t\t\trequestor.acceptMethod(\r", "-\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\t\tparameterPackageNames,\r", "-\t\t\t\t\tparameterTypeNames,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\t\tcompletion,\r", "-\t\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\t\tendPosition,\r", "-\t\t\t\t\tendPosition);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+}\r", "+private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope) {\r", "+\t// No visibility checks can be performed without the scope & invocationSite\r", "+\tMethodBinding[] methods = currentType.methods();\r", "+\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\tMethodBinding constructor = methods[f];\r", "+\t\tif (constructor.isConstructor()) {\r", "+\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\tint paramLength = parameters.length;\r", "+\t\t\tif (minArgLength > paramLength) continue next;\r", "+\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a])) continue next;\r", "+\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\tchar[] completion = TypeConstants.NoChar; // nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\tif (source == null || source.length <= endPosition || source[endPosition] != ')')\r", "+\t\t\t\tcompletion = new char[] {')'};\r", "+\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\tendPosition,\r", "+\t\t\t\tendPosition);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 68626}
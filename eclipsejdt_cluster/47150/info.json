{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ed4eedd9d69a4f16b3c877202522490", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cd58b91534f0a663dbd4559c1317d3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "65444f6bbda189372ebbf90cb8f83272733c23ae", "commitAfterChange": "82197baae0367830baca5c640478373ab5a7a62f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "signatureAfterChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "diff": ["-\tnameEnvironment.initialTypeNames(initialTypeNames);\r", "-\r", "-\tint i = 0;\r", "-\tboolean inFirstPass = true;\r", "-\twhile (i < toDo) {\r", "-\t\tArrayList doNow = new ArrayList(Math.min(toDo, MAX_AT_ONCE));\r", "-\t\twhile (i < toDo && doNow.size() < MAX_AT_ONCE) {\r", "-\t\t\tString filename = filenames[i++];\r", "-\t\t\t// Although it needed compiling when this method was called, it may have\r", "-\t\t\t// already been compiled when it was referenced by another unit.\r", "-\t\t\tif (inFirstPass || workQueue.isWaiting(filename)) {\r", "-\t\t\t\tCompilationUnit compUnit = new CompilationUnit(null, filename);\r", "-\t\t\t\tdoNow.add(compUnit);\r", "-\t\t\t}\r", "+\tif (toDo <= MAX_AT_ONCE) {\r", "+\t\t// do them all now\r", "+\t\tCompilationUnit[] toCompile = new CompilationUnit[toDo];\r", "+\t\tfor (int i = 0; i < toDo; i++) {\r", "+\t\t\tString filename = filenames[i];\r", "+\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\tSystem.out.println(\"About to compile \" + filename);\r", "+\t\t\ttoCompile[i] = new CompilationUnit(null, filename);\r", "-\t\tinFirstPass = false;\r", "-\t\tnotifier.checkCancel();\r", "-\t\tif (doNow.size() > 0) {\r", "-\t\t\tCompilationUnit[] toCompile = new CompilationUnit[doNow.size()];\r", "-\t\t\tdoNow.toArray(toCompile);\r", "-\t\t\ttry {\r", "-\t\t\t\tinCompiler = true;\r", "-\t\t\t\tcompiler.compile(toCompile);\r", "-\t\t\t} finally {\r", "-\t\t\t\tinCompiler = false;\r", "+\t\tcompile(toCompile, initialTypeNames, null);\r", "+\t} else {\r", "+\t\tint i = 0;\r", "+\t\tboolean compilingFirstGroup = true;\r", "+\t\twhile (i < toDo) {\r", "+\t\t\tint doNow = Math.min(toDo, MAX_AT_ONCE);\r", "+\t\t\tint index = 0;\r", "+\t\t\tCompilationUnit[] toCompile = new CompilationUnit[doNow];\r", "+\t\t\tString[] initialNamesInLoop = new String[doNow];\r", "+\t\t\twhile (i < toDo && index < doNow) {\r", "+\t\t\t\tString filename = filenames[i];\r", "+\t\t\t\t// Although it needed compiling when this method was called, it may have\r", "+\t\t\t\t// already been compiled when it was referenced by another unit.\r", "+\t\t\t\tif (compilingFirstGroup || workQueue.isWaiting(filename)) {\r", "+\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"About to compile \" + filename);\r", "+\t\t\t\t\ttoCompile[index] = new CompilationUnit(null, filename);\r", "+\t\t\t\t\tinitialNamesInLoop[index++] = initialTypeNames[i];\r", "+\t\t\t\t}\r", "+\t\t\t\ti++;\r", "-\r", "-\t\t\t// Check for cancel immediately after a compile, because the compiler may\r", "-\t\t\t// have been cancelled but without propagating the correct exception\r", "-\t\t\tnotifier.checkCancel();\r", "+\t\t\tif (index < doNow) {\r", "+\t\t\t\tSystem.arraycopy(toCompile, 0, toCompile = new CompilationUnit[index], 0, index);\r", "+\t\t\t\tSystem.arraycopy(initialNamesInLoop, 0, initialNamesInLoop = new String[index], 0, index);\r", "+\t\t\t}\r", "+\t\t\tString[] additionalFilenames = new String[toDo - i];\r", "+\t\t\tSystem.arraycopy(filenames, i, additionalFilenames, 0, additionalFilenames.length);\r", "+\t\t\tcompilingFirstGroup = false;\r", "+\t\t\tcompile(toCompile, initialNamesInLoop, additionalFilenames);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a24a442d1ccdb78441677bd28f2dbd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r public void notifySourceElementRequestor()", "signatureAfterChange": "\r public void notifySourceElementRequestor()", "diff": ["+\t// collect the top level ast nodes\r", "+\tint length = 0;\r", "+\tAstNode[] nodes = null;\r", "-\t\t// first we notify the package declaration\r", "-\t\tif (currentPackage != null) {\r", "-\t\t\tnotifySourceElementRequestor(currentPackage, true);\r", "-\t\t}\r", "-\t\t// then the imports\r", "+\t\tTypeDeclaration[] types = compilationUnit.types;\r", "+\t\tlength = \r", "+\t\t\t(currentPackage == null ? 0 : 1) \r", "+\t\t\t+ (imports == null ? 0 : imports.length)\r", "+\t\t\t+ (types == null ? 0 : types.length);\r", "+\t\tnodes = new AstNode[length];\r", "+\t\tint index = 0;\r", "+\t\tif (currentPackage != null) {\r", "+\t\t\tnodes[index++] = currentPackage;\r", "+\t\t}\r", "-\t\t\t\tnotifySourceElementRequestor(imports[i], false);\r", "+\t\t\t\tnodes[index++] = imports[i];\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (types != null) {\r", "+\t\t\tfor (int i = 0, max = types.length; i < max; i++) {\r", "+\t\t\t\tnodes[index++] = types[i];\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tTypeDeclaration[] types = compilationUnit.types;\r", "+\t\tif (types != null) {\r", "+\t\t\tlength = types.length;\r", "+\t\t\tnodes = new AstNode[length];\r", "+\t\t\tfor (int i = 0, max = types.length; i < max; i++) {\r", "+\t\t\t\tnodes[i] = types[i];\r", "-\t// then the types contained by this compilation unit\r", "-\tTypeDeclaration[] types = compilationUnit.types;\r", "-\tif (types != null) {\r", "-\t\tfor (int i = 0, max = types.length; i < max; i++) {\r", "-\t\t\tnotifySourceElementRequestor(types[i], sourceType == null);\r", "+\t\r", "+\t// notify the nodes in the syntactical order\r", "+\tif (nodes != null && length > 0) {\r", "+\t\tquickSort(nodes, 0, length-1);\r", "+\t\tfor (int i=0;i<length;i++) {\r", "+\t\t\tAstNode node = nodes[i];\r", "+\t\t\tif (node instanceof ImportReference) {\r", "+\t\t\t\tImportReference importRef = (ImportReference)node;\r", "+\t\t\t\tif (node == compilationUnit.currentPackage) {\r", "+\t\t\t\t\tnotifySourceElementRequestor(importRef, true);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tnotifySourceElementRequestor(importRef, false);\r", "+\t\t\t\t}\r", "+\t\t\t} else { // instanceof TypeDeclaration\r", "+\t\t\t\tnotifySourceElementRequestor((TypeDeclaration)node, sourceType == null);\r", "+\t\t\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d4f663acda3adf9336953fcfce2cf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "commitAfterChange": "f45c88f3e7a99f05a0822482d3d6807236a1c216", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\tIPath[] patterns = getInclusionPatterns();", "+\t\tIPath[] patterns = this.inclusionPatterns;", "-\t\tpatterns = getExclusionPatterns();", "+\t\tpatterns = this.exclusionPatterns;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tbuffer.append(patterns[i]);", "+\t\t\t\tif (i != length-1) {", "+\t\t\t\t\tbuffer.append('|');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(']');", "+\t\t}", "+\t\tpatterns = getAccessibleFiles();", "+\t\tif ((length = patterns == null ? 0 : patterns.length) > 0) {", "+\t\t\tbuffer.append(\"[accessible files:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tbuffer.append(patterns[i]);", "+\t\t\t\tif (i != length-1) {", "+\t\t\t\t\tbuffer.append('|');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(']');", "+\t\t}", "+\t\tpatterns = getNonAccessibleFiles();", "+\t\tif ((length = patterns == null ? 0 : patterns.length) > 0) {", "+\t\t\tbuffer.append(\"[non accessible files:\"); //$NON-NLS-1$", "+\t\tif ((length = this.extraAttributes == null ? 0 : this.extraAttributes.length) > 0) {", "+\t\t\tbuffer.append(\"[attributes:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tbuffer.append(this.extraAttributes[i]);", "+\t\t\t\tif (i != length-1) {", "+\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(']');", "+\t\t}"]}], "num": 47150}
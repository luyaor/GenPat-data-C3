{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91752c0986681ff286579620cd49729b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3c1a56f588ebc470d81ffe01bbe7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  private void parseTags()", "diff": ["-protected void parseTags(boolean hasLineComment) {", "-\tif (!hasLineComment) {", "-\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\tthis.nonNLSStrings.addAll(this.currentLine.elements);", "+private void parseTags() {", "+\tint position = 0;", "+\tfinal int currentStartPosition = this.startPosition;", "+\tfinal int currentLinePtr = this.linePtr;", "+\tif (currentLinePtr >= 0) {", "+\t\tposition = this.lineEnds[currentLinePtr] + 1; ", "+\t}", "+\twhile (Character.isWhitespace(this.source[position])) {", "+\t\tposition++;", "+\t}", "+\tif (currentStartPosition == position) {", "+\t\t// the whole line is commented out", "+\t\treturn;", "+\t}", "+\tchar[] s = null;", "+\tint sourceEnd = this.currentPosition;", "+\tint sourceStart = currentStartPosition;", "+\tint sourceDelta = 0;", "+\tif (this.withoutUnicodePtr != 0) {", "+\t\t// 0 is used as a fast test flag so the real first char is in position 1", "+\t\tSystem.arraycopy(", "+\t\t\tthis.withoutUnicodeBuffer, ", "+\t\t\t1, ", "+\t\t\ts = new char[this.withoutUnicodePtr], ", "+\t\t\t0, ", "+\t\t\tthis.withoutUnicodePtr);", "+\t\tsourceEnd = this.withoutUnicodePtr;", "+\t\tsourceStart = 1;", "+\t\tsourceDelta = currentStartPosition;", "-\t\tint position = 0;", "-\t\tif (this.linePtr >= 0) {", "-\t\t\tposition = this.lineEnds[this.linePtr] + 1; ", "+\t\ts = this.source;", "+\t}", "+\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "+\tif (pos != -1) {", "+\t\tif (this.nlsTags == null) {", "+\t\t\tthis.nlsTags = new NLSTag[10];", "+\t\t\tthis.nlsTagsPtr = 0;", "-\t\twhile (Character.isWhitespace(this.source[position])) {", "-\t\t\tposition++;", "-\t\t}", "-\t\tif (getCurrentTokenStartPosition() == position) {", "-\t\t\t// the whole line is commented out", "-\t\t\treturn;", "-\t\t}", "-\t\tfinal NLSLine line = this.currentLine;", "-\t\tchar[] s = null;", "-\t\tint sourceEnd = this.currentPosition;", "-\t\tint sourceStart = this.startPosition;", "-\t\tint sourceDelta = 0;", "-\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t// 0 is used as a fast test flag so the real first char is in position 1", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.withoutUnicodeBuffer, ", "-\t\t\t\t1, ", "-\t\t\t\ts = new char[this.withoutUnicodePtr], ", "-\t\t\t\t0, ", "-\t\t\t\tthis.withoutUnicodePtr);", "-\t\t\tsourceEnd = this.withoutUnicodePtr;", "-\t\t\tsourceStart = 1;", "-\t\t\tsourceDelta = this.getCurrentTokenStartPosition();", "-\t\t} else {", "-\t\t\ts = this.source;", "-\t\t}", "-\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "-\t\tfinal int lineSize = line.size();", "-\t\tif (pos != -1) {", "-\t\t\tif (this.unnecessaryNLSTags == null) this.unnecessaryNLSTags = new HashSet();", "-\t\t\twhile (pos != -1) {", "-\t\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "-\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "-\t\t\t\tif (end != -1) {", "-\t\t\t\t\tString index = new String(CharOperation.subarray(s, start, end));", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfinal int i = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t\t\t\tif (i >= 0 && i < lineSize) {", "-\t\t\t\t\t\t\tif (line.get(i) == null) {", "-\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + sourceDelta , end + sourceDelta, NLSTag.USED);", "-\t\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "-\t\t\t\t\t}", "+\t\twhile (pos != -1) {", "+\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "+\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "+\t\t\tif (end != -1) {", "+\t\t\t\tNLSTag currentTag = null;", "+\t\t\t\tfinal int currentLine = currentLinePtr + 1;", "+\t\t\t\ttry {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + sourceDelta, end + sourceDelta, currentLine, extractInt(s, start, end));", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + currentStartPosition, currentStartPosition + end, currentLine, -1);", "-\t\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, start);", "-\t\t\t}", "-\t\t}", "-\t", "-\t\tif (line.remainingElementsSize != 0) {", "-\t\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\t\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "-\t\t\t\tfinal StringLiteral literal = (StringLiteral) iterator.next();", "-\t\t\t\tif (literal != null) {", "-\t\t\t\t\tthis.nonNLSStrings.add(literal);", "+\t\t\t\tif (this.nlsTagsPtr == this.nlsTags.length) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(this.nlsTags, 0, (this.nlsTags = new NLSTag[this.nlsTagsPtr + 10]), 0, this.nlsTagsPtr);", "+\t\t\t\tthis.nlsTags[this.nlsTagsPtr++] = currentTag;", "+\t\t\t} else {", "+\t\t\t\tend = start;", "+\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, end, sourceEnd);", "-\tif (this.currentLine != null) this.currentLine.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a8c481bb824da09b049e7ce9d8316a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, int argEnd) throws InvalidInputException", "diff": ["+\tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, int argEnd) throws InvalidInputException {", "+\t\ttry {", "+\t\t\tTypeReference argTypeRef = (TypeReference) typeRef;", "+\t\t\tif (dim > 0) {", "+\t\t\t\tlong pos = ((long) argTypeRef.sourceStart) << 32 + argTypeRef.sourceEnd;", "+\t\t\t\t\targTypeRef = new JavadocArraySingleTypeReference(singleRef.token, dim, pos);", "+\t\t\t\t\targTypeRef = new JavadocArrayQualifiedTypeReference(qualifRef, dim);", "+\t\t\treturn new JavadocArgumentExpression(name, argTypeRef.sourceStart, argEnd, argTypeRef);", "-\t */", "-\tprivate boolean parseHref() throws InvalidInputException {", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tconsumeToken();", "-\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)", "-\t\t\t\t\t&& readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'h', 'r', 'e', 'f'}, false) &&", "-\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "-\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n' || this.scanner.getCurrentTokenStartPosition() > this.lineEnd) {", "-\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameDIVIDE) {", "-\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "-\t\t\t\t\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} catch (InvalidInputException ex) {", "-\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\treturn false;", "-\t}", "+\t\tcatch (ClassCastException ex) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd5feb8c3d2c490caf8652499035fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "signatureAfterChange": " private void notifySourceElementRequestor(TypeParameter[] typeParameters)", "diff": ["+private void notifySourceElementRequestor(TypeParameter[] typeParameters) {", "+\tif (typeParameters != null) {", "+\t\tint typeParametersLength = typeParameters.length;", "+\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\tTypeReference[] bounds = typeParameter.bounds;", "+\t\t\tchar[][] typeParameterBounds = null;", "+\t\t\tif (bounds != null) {", "+\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\tCharOperation.concatWith(bounds[j].getParameterizedTypeName(), '.'); ", "+\t\t\t\t}", "+\t\t\t\ttypeParameterBounds = boundNames;", "+\t\t\t}", "+\t\t\trequestor.enterTypeParameter(", "+\t\t\t\ttypeParameter.declarationSourceStart, ", "+\t\t\t\ttypeParameter.name, ", "+\t\t\t\ttypeParameter.sourceStart, ", "+\t\t\t\ttypeParameter.sourceEnd,", "+\t\t\t\ttypeParameterBounds);", "+\t\t\trequestor.exitTypeParameter(typeParameter.declarationSourceEnd);", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba091c9fdb9ddc2caa36dd4e519ba139", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  private void parseTags()", "diff": ["-protected void parseTags(boolean hasLineComment) {", "-\tif (!hasLineComment) {", "-\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\tthis.nonNLSStrings.addAll(this.currentLine.elements);", "+private void parseTags() {", "+\tint position = 0;", "+\tfinal int currentStartPosition = this.startPosition;", "+\tfinal int currentLinePtr = this.linePtr;", "+\tif (currentLinePtr >= 0) {", "+\t\tposition = this.lineEnds[currentLinePtr] + 1; ", "+\t}", "+\twhile (Character.isWhitespace(this.source[position])) {", "+\t\tposition++;", "+\t}", "+\tif (currentStartPosition == position) {", "+\t\t// the whole line is commented out", "+\t\treturn;", "+\t}", "+\tchar[] s = null;", "+\tint sourceEnd = this.currentPosition;", "+\tint sourceStart = currentStartPosition;", "+\tint sourceDelta = 0;", "+\tif (this.withoutUnicodePtr != 0) {", "+\t\t// 0 is used as a fast test flag so the real first char is in position 1", "+\t\tSystem.arraycopy(", "+\t\t\tthis.withoutUnicodeBuffer, ", "+\t\t\t1, ", "+\t\t\ts = new char[this.withoutUnicodePtr], ", "+\t\t\t0, ", "+\t\t\tthis.withoutUnicodePtr);", "+\t\tsourceEnd = this.withoutUnicodePtr;", "+\t\tsourceStart = 1;", "+\t\tsourceDelta = currentStartPosition;", "-\t\tint position = 0;", "-\t\tif (this.linePtr >= 0) {", "-\t\t\tposition = this.lineEnds[this.linePtr] + 1; ", "+\t\ts = this.source;", "+\t}", "+\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "+\tif (pos != -1) {", "+\t\tif (this.nlsTags == null) {", "+\t\t\tthis.nlsTags = new NLSTag[10];", "+\t\t\tthis.nlsTagsPtr = 0;", "-\t\twhile (Character.isWhitespace(this.source[position])) {", "-\t\t\tposition++;", "-\t\t}", "-\t\tif (getCurrentTokenStartPosition() == position) {", "-\t\t\t// the whole line is commented out", "-\t\t\treturn;", "-\t\t}", "-\t\tfinal NLSLine line = this.currentLine;", "-\t\tchar[] s = null;", "-\t\tint sourceEnd = this.currentPosition;", "-\t\tint sourceStart = this.startPosition;", "-\t\tint sourceDelta = 0;", "-\t\tif (this.withoutUnicodePtr != 0) {", "-\t\t\t// 0 is used as a fast test flag so the real first char is in position 1", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.withoutUnicodeBuffer, ", "-\t\t\t\t1, ", "-\t\t\t\ts = new char[this.withoutUnicodePtr], ", "-\t\t\t\t0, ", "-\t\t\t\tthis.withoutUnicodePtr);", "-\t\t\tsourceEnd = this.withoutUnicodePtr;", "-\t\t\tsourceStart = 1;", "-\t\t\tsourceDelta = this.getCurrentTokenStartPosition();", "-\t\t} else {", "-\t\t\ts = this.source;", "-\t\t}", "-\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "-\t\tfinal int lineSize = line.size();", "-\t\tif (pos != -1) {", "-\t\t\tif (this.unnecessaryNLSTags == null) this.unnecessaryNLSTags = new HashSet();", "-\t\t\twhile (pos != -1) {", "-\t\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "-\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "-\t\t\t\tif (end != -1) {", "-\t\t\t\t\tString index = new String(CharOperation.subarray(s, start, end));", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfinal int i = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t\t\t\tif (i >= 0 && i < lineSize) {", "-\t\t\t\t\t\t\tif (line.get(i) == null) {", "-\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + sourceDelta , end + sourceDelta, NLSTag.USED);", "-\t\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "-\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "-\t\t\t\t\t}", "+\t\twhile (pos != -1) {", "+\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "+\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "+\t\t\tif (end != -1) {", "+\t\t\t\tNLSTag currentTag = null;", "+\t\t\t\tfinal int currentLine = currentLinePtr + 1;", "+\t\t\t\ttry {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + sourceDelta, end + sourceDelta, currentLine, extractInt(s, start, end));", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tcurrentTag = new NLSTag(pos + currentStartPosition, currentStartPosition + end, currentLine, -1);", "-\t\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, start);", "-\t\t\t}", "-\t\t}", "-\t", "-\t\tif (line.remainingElementsSize != 0) {", "-\t\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "-\t\t\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "-\t\t\t\tfinal StringLiteral literal = (StringLiteral) iterator.next();", "-\t\t\t\tif (literal != null) {", "-\t\t\t\t\tthis.nonNLSStrings.add(literal);", "+\t\t\t\tif (this.nlsTagsPtr == this.nlsTags.length) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(this.nlsTags, 0, (this.nlsTags = new NLSTag[this.nlsTagsPtr + 10]), 0, this.nlsTagsPtr);", "+\t\t\t\tthis.nlsTags[this.nlsTagsPtr++] = currentTag;", "+\t\t\t} else {", "+\t\t\t\tend = start;", "+\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, end, sourceEnd);", "-\tif (this.currentLine != null) this.currentLine.clear();"]}], "num": 40959}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45cb93bd2a89b559198b0c49430bba1f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84dab03aead8a1de9addf7b79e6ab3d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t// generate boolean condition", "-\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tcurrentScope,", "-\t\t\tcodeStream,", "-\t\t\tnull,", "-\t\t\thasElsePart ? (falseLabel = new BranchLabel(codeStream)) : endifLabel,", "-\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t// generate boolean condition only if needed", "+\t\tif (cst != Constant.NotAConstant && cst.booleanValue() == true) {", "+\t\t\t// No need to generate if condition statement when we know that only the then action", "+\t\t\t// will be executed", "+\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t\t} else {", "+\t\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tnull,", "+\t\t\t\thasElsePart ? (falseLabel = new BranchLabel(codeStream)) : endifLabel,", "+\t\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t}", "-\t\t// generate boolean condition", "-\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tcurrentScope,", "-\t\t\tcodeStream,", "-\t\t\tendifLabel,", "-\t\t\tnull,", "-\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t// generate boolean condition only if needed", "+\t\tif (cst != Constant.NotAConstant && cst.booleanValue() == false) {", "+\t\t\t// No need to generate if condition statement when we know that only the else action", "+\t\t\t// will be executed", "+\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t\t} else {", "+\t\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tendifLabel,", "+\t\t\t\tnull,", "+\t\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8d87a81bc47f46d4b668e97b5dcbcbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "c16fc59ab5654c1c9ba882d21830089973cfaf23", "commitAfterChange": "d7e0c304d172fca497b655ba971da6ca54adad0f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\t\tint position = codeStream.position;", "-\t\t\t\tcodeStream.goto_(endifLabel);", "-\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, position);", "+\t\t\t\tJumpEndif: {", "+\t\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\t\t\tcst = this.optimizedIfTrueConstant;", "+\t\t\t\t\t\t\tboolean isValueIfTrueOptimizedTrue = cst != null && cst != Constant.NotAConstant && cst.booleanValue() == true;", "+\t\t\t\t\t\t\tif (isValueIfTrueOptimizedTrue) break JumpEndif; // no need to jump over, since branched to true already", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\t\tcst = this.optimizedIfTrueConstant;", "+\t\t\t\t\t\t\tboolean isValueIfTrueOptimizedFalse = cst != null && cst != Constant.NotAConstant && cst.booleanValue() == false;", "+\t\t\t\t\t\t\tif (isValueIfTrueOptimizedFalse) break JumpEndif; // no need to jump over, since branched to false already", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tint position = codeStream.position;", "+\t\t\t\t\tcodeStream.goto_(endifLabel);", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC(currentScope, position);", "+\t\t\t\t}"]}], "num": 47097}
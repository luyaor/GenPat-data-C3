{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a678bc8c060f62b4c1c5cb1697e6c109", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c0c7ee6776985c978cb241330615b11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = NotAConstant;", "+\t\tconstant = Constant.NotAConstant;", "-\t\tif ((condConstant = condition.constant) != NotAConstant", "-\t\t\t&& (trueConstant = valueIfTrue.constant) != NotAConstant", "-\t\t\t&& (falseConstant = valueIfFalse.constant) != NotAConstant) {", "+\t\tif ((condConstant = condition.constant) != Constant.NotAConstant", "+\t\t\t&& (trueConstant = valueIfTrue.constant) != Constant.NotAConstant", "+\t\t\t&& (falseConstant = valueIfFalse.constant) != Constant.NotAConstant) {", "-\t\t\t\tif (this.optimizedIfTrueConstant != NotAConstant ", "-\t\t\t\t\t\t&& this.optimizedIfFalseConstant != NotAConstant", "+\t\t\t\tif (this.optimizedIfTrueConstant != Constant.NotAConstant ", "+\t\t\t\t\t\t&& this.optimizedIfFalseConstant != Constant.NotAConstant", "-\t\t\t\t} else if ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant) { // Propagate the optimized boolean constant if possible", "+\t\t\t\t} else if ((condConstant = condition.optimizedBooleanConstant()) != Constant.NotAConstant) { // Propagate the optimized boolean constant if possible"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd2940f4002ea1059c5eeede6a70123c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bc8a42889f857ed7728b976d31e674de6afdad4d", "commitAfterChange": "e50f3d9d374cf35289e57b1f80fafcaa8e59eb2e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t", "-\t\tif (condition.constant != NotAConstant", "-\t\t\t&& valueIfTrue.constant != NotAConstant", "-\t\t\t&& valueIfFalse.constant != NotAConstant) {", "+\t\tConstant condConstant, trueConstant, falseConstant;", "+\t\tif ((condConstant = condition.constant) != NotAConstant", "+\t\t\t&& (trueConstant = valueIfTrue.constant) != NotAConstant", "+\t\t\t&& (falseConstant = valueIfFalse.constant) != NotAConstant) {", "-\t\t\tconstant =", "-\t\t\t\t(condition.constant.booleanValue())", "-\t\t\t\t\t? valueIfTrue.constant", "-\t\t\t\t\t: valueIfFalse.constant;", "+\t\t\tconstant = condConstant.booleanValue() ? trueConstant : falseConstant;", "-\t\t\tthis.resolvedType = valueIfTrueType;", "-\t\t\treturn valueIfTrueType;", "+", "+\t\t\t// Propagate the optimized boolean constant if possible", "+\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant", "+\t\t\t\t&& valueIfTrueType == BooleanBinding) {", "+\t\t\t\t", "+\t\t\t\tthis.optimizedBooleanConstant = condConstant.booleanValue()", "+\t\t\t\t\t? valueIfTrue.optimizedBooleanConstant()", "+\t\t\t\t\t: valueIfFalse.optimizedBooleanConstant();", "+\t\t\t}", "+\t\t\treturn this.resolvedType = valueIfTrueType;"]}], "num": 936}
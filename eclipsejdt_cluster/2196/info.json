{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d347dd3ff29182c78a3ce3e3dc65da6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de3596967917bb61640298343efc235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ba388ee53170dee91fb2402f317f8b352855c459", "commitAfterChange": "d043ef6776b1e3fad1bb618496ee2a48a9410e4b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare)", "signatureAfterChange": "  \tpublic void returnsExpression(Expression expression, TypeBinding resultType)", "diff": ["-\t\t\t\t\tprivate boolean throwSeen = false;", "-\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {", "-\t\t\t\t\t\tif (returnStatement.expression != null) {", "-\t\t\t\t\t\t\tLambdaExpression.this.returnExpressionsTally++;", "-\t\t\t\t\t\t\tthis.valueReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = !this.voidReturnSeen;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.voidReturnSeen = true;", "-\t\t\t\t\t\t\tLambdaExpression.this.valueCompatible = false;", "-\t\t\t\t\t\t\tLambdaExpression.this.voidCompatible = !this.valueReturnSeen;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false; // should not analyze any nested lambda returns.", "-\t\t\t\t\t}", "+", "+\tpublic void returnsExpression(Expression expression, TypeBinding resultType) {", "+\t\tif (this.expressionContext != INVOCATION_CONTEXT)", "+\t\t\treturn;", "+\t\tif (expression != null) {", "+\t\t\tthis.original.returnsValue = true;", "+\t\t\tthis.original.voidCompatible = false;", "+\t\t\tthis.original.valueCompatible = !this.original.returnsVoid;", "+\t\t\tif (resultType != null) {", "+\t\t\t\tExpression [] results = (Expression[]) this.original.resultExpressions.get(this.expectedType);", "+\t\t\t\tint resultsLength = results.length;", "+\t\t\t\tSystem.arraycopy(results, 0, results = new Expression[resultsLength + 1], 0, resultsLength);", "+\t\t\t\tresults[resultsLength] = expression;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.original.returnsVoid = true;", "+\t\t\tthis.original.valueCompatible = false;", "+\t\t\tthis.original.voidCompatible = !this.original.returnsValue;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f466ca83f73ef241842f9c2cd5551e0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "543a527ff2051798363d7f2a409c20a6964b6332", "commitAfterChange": "e65379b9057b35418a4c7491224b13ea19038724", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "signatureAfterChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "diff": ["+\t\t\t\t\tTypeReference[] typeArguments = currentMessageSend.typeArguments;", "+\t\t\t\t\tif (typeArguments != null) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_arguments); ", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint length = typeArguments.length;", "+\t\t\t\t\t\t\tfor (int j = 0; j < length - 1; j++) {", "+\t\t\t\t\t\t\t\ttypeArguments[j].traverse(this, scope);", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_arguments);", "+\t\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_arguments) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\ttypeArguments[length - 1].traverse(this, scope);", "+\t\t\t\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_arguments); ", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 2196}
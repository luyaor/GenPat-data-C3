{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "879dbdcadaec89a24ca3fca994f38d38", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "816829111b1316ad4e5270caf5a4028b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\tReferenceContext referenceContext;", "-\t\t\t\tif (isAnonymous()) {", "-\t\t\t\t\tClassScope classScope = scope.enclosingClassScope();", "-\t\t\t\t\treferenceContext = classScope.referenceContext;", "-\t\t\t\t} else {", "-\t\t\t\t\tMethodScope methodScope = scope.enclosingMethodScope();", "-\t\t\t\t\treferenceContext = methodScope.referenceContext;", "+\t\t\t\tClassScope classScope = scope.enclosingClassScope();", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceContext = classScope.referenceContext;", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = referenceContext.binding;", "+\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "+\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\tbuffer.append(typeBinding.getKey());", "-\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding internalBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "-\t\t\t\t\tIMethodBinding methodBinding = this.resolver.getMethodBinding(internalBinding);", "-\t\t\t\t\tif (methodBinding != null) {", "-\t\t\t\t\t\tbuffer.append(getNonRecursiveKey(methodBinding));", "-\t\t\t\t\t}", "-\t\t\t\t} else if (referenceContext instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) referenceContext).binding;", "-\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "-\t\t\t\t\tif (typeBinding != null) {", "-\t\t\t\t\t\tbuffer.append(typeBinding.getKey());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t", "-\t\t\t\tif (isAnonymous()) {", "-\t\t\t\t\tbuffer.append('$');", "-\t\t\t\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "-\t\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;", "-\t\t\t\t\tLocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;", "-\t\t\t\t\tfor (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {", "-\t\t\t\t\t\tif (localTypeBindings[i] == sourceBinding) {", "-\t\t\t\t\t\t\tbuffer.append(i+1);", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\tbuffer.append('$');", "+\t\t\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "+\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;", "+\t\t\t\tLocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;", "+\t\t\t\tfor (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {", "+\t\t\t\t\tif (localTypeBindings[i] == sourceBinding) {", "+\t\t\t\t\t\tbuffer.append(i+1);", "+\t\t\t\t\t\tif (!isAnonymous()) {", "+\t\t\t\t\t\t\tbuffer.append('$');", "+\t\t\t\t\t\t\tbuffer.append(sourceBinding.sourceName);", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t} else {", "-\t\t\t\t\t// type name", "-\t\t\t\t\tbuffer.append('/');", "-\t\t\t\t\tbuffer.append(getName());", "-\t\t\t\t\tchar[] constantPoolName = this.binding.constantPoolName();", "-\t\t\t\t\tif (constantPoolName != null) {", "-\t\t\t\t\t\tbuffer.append(constantPoolName);", "+\t\t\t\t\tchar[] qualifiedSourceName = this.binding.qualifiedSourceName();", "+\t\t\t\t\tif (qualifiedSourceName != null) {", "+\t\t\t\t\t\tCharOperation.replace(qualifiedSourceName, '.', '$');", "+\t\t\t\t\t\tbuffer", "+\t\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t\t.append('/')", "+\t\t\t\t\t\t\t.append(qualifiedSourceName);", "-\t\t\t\t\t\tchar[] qualifiedSourceName = this.binding.qualifiedSourceName();", "-\t\t\t\t\t\tif (qualifiedSourceName != null) {", "-\t\t\t\t\t\t\tCharOperation.replace(qualifiedSourceName, '.', '$');", "-\t\t\t\t\t\t\tbuffer", "-\t\t\t\t\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t\t\t\t\t.append('/')", "-\t\t\t\t\t\t\t\t.append(qualifiedSourceName);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tbuffer", "-\t\t\t\t\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t\t\t\t\t.append('/')", "-\t\t\t\t\t\t\t\t.append(getName());", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer", "+\t\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t\t.append('/')", "+\t\t\t\t\t\t\t.append(getName());", "-\t\t\t\t\tthis.key = this.getName();", "+\t\t\t\t\tthis.key = getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914e575f3eff52eca77cde5b4a425938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\tif (isLocal()) {", "-\t\t\treturn null;", "+\t\tif (this.key == null) {", "+\t\t\tif (isLocal()) {", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t", "+\t\t\t\t// declaring method or type", "+\t\t\t\tSourceTypeBinding sourceBinding = (SourceTypeBinding) this.binding; // per construction, a local type can only be defined in source", "+\t\t\t\tClassScope scope = sourceBinding.scope;", "+\t\t\t\tReferenceContext referenceContext;", "+\t\t\t\tif (isAnonymous()) {", "+\t\t\t\t\tClassScope classScope = scope.enclosingClassScope();", "+\t\t\t\t\treferenceContext = classScope.referenceContext;", "+\t\t\t\t} else {", "+\t\t\t\t\tMethodScope methodScope = scope.enclosingMethodScope();", "+\t\t\t\t\treferenceContext = methodScope.referenceContext;", "+\t\t\t\t}", "+\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding internalBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "+\t\t\t\t\tIMethodBinding methodBinding = this.resolver.getMethodBinding(internalBinding);", "+\t\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\t\tbuffer.append(methodBinding.getKey());", "+\t\t\t\t\t}", "+\t\t\t\t} else if (referenceContext instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = ((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) referenceContext).binding;", "+\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "+\t\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\t\tbuffer.append(typeBinding.getKey());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t", "+\t\t\t\tif (isAnonymous()) {", "+\t\t\t\t\tbuffer.append('$');", "+\t\t\t\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "+\t\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;", "+\t\t\t\t\tLocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;", "+\t\t\t\t\tfor (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {", "+\t\t\t\t\t\tif (localTypeBindings[i] == sourceBinding) {", "+\t\t\t\t\t\t\tbuffer.append(i+1);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// type name", "+\t\t\t\t\tbuffer.append('/');", "+\t\t\t\t\tbuffer.append(getName());", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.key = buffer.toString();", "+\t\t\t} else {", "+\t\t\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tbuffer", "+\t\t\t\t\t\t.append(getPackage().getName())", "+\t\t\t\t\t\t.append('/')", "+\t\t\t\t\t\t.append(getName());", "+\t\t\t\t\tthis.key = buffer.toString();", "+\t\t\t\t} else if (this.binding.isArrayType()) {", "+\t\t\t\t\tthis.key = this.getElementType().getKey() + this.getDimensions();", "+\t\t\t\t} else {", "+\t\t\t\t\t// this is a primitive type", "+\t\t\t\t\tthis.key = this.getName();", "+\t\t\t\t}", "+\t\t\t}", "-\t\tif (this.binding.isClass() || this.binding.isInterface()) {", "-\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\tbuffer", "-\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t.append('.')", "-\t\t\t\t.append(getName());", "-\t\t\treturn buffer.toString();", "-\t\t} else if (this.binding.isArrayType()) {", "-\t\t\treturn this.getElementType().getKey() + this.getDimensions();", "-\t\t}", "-\t\t// this is a primitive type", "-\t\treturn this.getName();", "+\t\treturn this.key;"]}], "num": 6719}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0d30ae644b888b590f0f3db103c7ce5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04a352056155fc5ca608fb2fb7a81deb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "96c7afd29f6893c16cf00a3ac29701c1a81f919d", "commitAfterChange": "dd45817f66a0a68c9747e1c73f77cc12766ad25c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["-\t\t\t}", "-", "-\t\t\tIRegion starting = getAdaptedRegionAt(editOffset + editLength);", "-\t\t\tif (starting != null) {", "-\t\t\t\tint i = editOffset;", "-\t\t\t\tfor (int max = editOffset + editLength; i < max; i++) {", "-\t\t\t\t\tint replacementStringIndex = i - editOffset;", "-\t\t\t\t\tif (replacementStringIndex >= editReplacementLength || this.scanner.source[i] != edit.replacement.charAt(replacementStringIndex)) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (i - editOffset != editReplacementLength && i != editOffset + editLength - 1) {", "-\t\t\t\t\tedit.offset = starting.getOffset();", "-\t\t\t\t\tedit.length = 0;", "-\t\t\t\t\tedit.replacement = edit.replacement.substring(i - editOffset);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ad3cf60ec1a732d44a7b858a170c270", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "81692e071192b9c42c4a6026dc5f6c18d5f213cc", "commitAfterChange": "aa6251de28ce7d8f307172e681d4401e486ea590", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "signatureAfterChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] paramterSignatures)", "diff": ["-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames) {", "-\tString[] parameterTypes= null;", "-\tif (parameterTypeNames != null) {", "-\t\tparameterTypes= new String[parameterTypeNames.length];", "-\t\tfor (int i= 0, max = parameterTypeNames.length; i < max; i++) {", "-\t\t\tString pkg = IPackageFragment.DEFAULT_PACKAGE_NAME;", "-\t\t\tif (parameterPackageNames[i] != null && parameterPackageNames[i].length > 0) {", "-\t\t\t\tpkg = new String(parameterPackageNames[i]) + \".\"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t\t", "-\t\t\tString typeName = new String(parameterTypeNames[i]);", "-\t\t\tif (typeName.indexOf('.') > 0) ", "-\t\t\t\ttypeName = typeName.replace('.', '$');", "-\t\t\tparameterTypes[i]= Signature.createTypeSignature(", "-\t\t\t\tpkg + typeName, true);", "-\t\t}", "-\t}", "-\tIMethod method= type.getMethod(new String(selector), parameterTypes);", "+protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] paramterSignatures) {", "+\tIMethod method= type.getMethod(new String(selector), paramterSignatures);"]}], "num": 54020}
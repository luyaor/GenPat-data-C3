{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "005d1181082e926b7bc31352ec7a5889", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01710da2f43c567ad947f2c52807d861", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void recordContinueFrom(FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordContinueFrom(FlowInfo flowInfo)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bc20bf11ba2624b4327f1de00822df5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void printComment(boolean insertNewLineAfterComment)", "signatureAfterChange": "  \tpublic void printComment(boolean insertNewLineAfterComment)", "diff": ["-\t\t\t};", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1251c2b5477c588093b0d02872b5a931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString)", "signatureAfterChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem expected, final char[] displayString)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1274732d597c00eb564c459c38aed344", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tif (delegateThis == null){ ; // if not found then internal error, field should have been found", "+\t\t\t\tif (delegateThis == null){ // if not found then internal error, field should have been found"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "127697ae7aa726aa956eca6052260100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 193, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12e212ba12e5f52da8294f76d5ffc5c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic Assignment convert(CompoundAssignment expression)", "signatureAfterChange": "  \tpublic Assignment convert(CompoundAssignment expression)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15106774c05895b9eb631fb766abc660", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "d0d2ebdf93a0c733986bd4ee3f23d88353e656b0", "commitAfterChange": "7894c894f661b36f40f86813e53ddbbcf8c6b1ce", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public static IStatus validatePackageName(String name)", "signatureAfterChange": "\r public static IStatus validatePackageName(String name)", "diff": ["-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.nameWithBlanks\"), null);; //$NON-NLS-1$\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.nameWithBlanks\"), null); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201ffc000b2da9b6c0da2c6006a08c06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "d0d2ebdf93a0c733986bd4ee3f23d88353e656b0", "commitAfterChange": "7894c894f661b36f40f86813e53ddbbcf8c6b1ce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r protected IJavaElement getHandleFromMementoForSourceMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException", "signatureAfterChange": "\r protected IJavaElement getHandleFromMementoForSourceMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException", "diff": ["-\t;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2143c482c5e3204c10135594067f6d5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo copy()", "signatureAfterChange": " \tpublic FlowInfo copy()", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2682e3ce2fed21b11ac812269e760364", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/SwitchFlowContext.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void recordBreakFrom(FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordBreakFrom(FlowInfo flowInfo)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2828db7f88c6f30d1817746c95392ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 228, "methodNumberAfterChange": 228, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2918f75bf5525abc39a945f06d852616", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexedFile.java", "commitBeforeChange": "6017f4facf1d44f5b60f882841fc9461dff344b3", "commitAfterChange": "8bb6b9481b79f29da1fc965f1ebeeb888e97d205", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic String getProperty(String propertyName)", "signatureAfterChange": "\r \tpublic String getProperty(String propertyName)", "diff": ["-\t\t;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6739145691603f335b5abd64b56e3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public int literalIndex(int key)", "signatureAfterChange": " public int literalIndex(int key)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9209d7050b3a364d90bfc1ccf32334", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tprivate int retrieveEndBlockPosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveEndBlockPosition(int start, int end)", "diff": ["-\t\t\t\t\t\t};", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3525dd9a83884697b4a95de3dc835c4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " protected static byte[] readUntil(InputStream input, byte separator, int offset) throws IOException, JavaModelException", "signatureAfterChange": " protected static byte[] readUntil(InputStream input, byte separator, int offset) throws IOException, JavaModelException", "diff": ["-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "+\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ce756bbd34f3b582791e1173f1e278", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void printTrailingComment(boolean insertNewLine)", "signatureAfterChange": "  \tpublic void printTrailingComment(boolean insertNewLine)", "diff": ["-\t\t\t};", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a3f78e15ac5e93955c3ffa87ecb761", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testRenameWithInvalidRenamings() throws JavaModelException", "signatureAfterChange": " public void testRenameWithInvalidRenamings() throws JavaModelException", "diff": ["-\tIMethod method = getCompilationUnit(\"/P/src/X.java\").getType(\"X\").getMethod(\"foo\", null);;", "+\tIMethod method = getCompilationUnit(\"/P/src/X.java\").getType(\"X\").getMethod(\"foo\", null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e9fbae47dc392741f6f87ee2f6bbcd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public int literalIndex(double key)", "signatureAfterChange": " public int literalIndex(double key)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5933de99bfa9922260e9b82362c63807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblem.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic String errorReportSource(ICompilationUnit compilationUnit)", "signatureAfterChange": "  \tpublic String errorReportSource(ICompilationUnit compilationUnit)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bab88212d190ab15ac2b395139bdd9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " \t \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "signatureAfterChange": " \t \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6134b2028c2f60c0c747e5ce13d10542", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void testCycleDetectionThroughContainerVariants() throws CoreException", "signatureAfterChange": " public void testCycleDetectionThroughContainerVariants() throws CoreException", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "661c1d7b692d4e65280ad8717ed84428", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DualParseSyntaxErrorTest.java", "commitBeforeChange": "329490ab70e4ff43aa5d83f5e80f1830a8179236", "commitAfterChange": "26dfaa26b996807ccefd2285d13c01f23491cbed", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void checkParse( \tchar[] source,  \tString expectedSyntaxErrorDiagnosis, \tString testName)", "signatureAfterChange": " public void checkParse( \tchar[] source,  \tString expectedSyntaxErrorDiagnosis, \tString testName)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a80528f6811bc8598bebea5960910b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " protected void consumeClassHeaderName()", "signatureAfterChange": " protected void consumeClassHeaderName()", "diff": ["-\t\t\t\t\tif(type.superclass == null) {;", "+\t\t\t\t\tif(type.superclass == null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70cf51601cb43576c5c2bd247f2931f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " protected void dispatchDeclarationInto(int length)", "signatureAfterChange": " protected void dispatchDeclarationInto(int length)", "diff": ["-\t\t\t};", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711f3d23ab983d866707b7b2f79a53d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tboolean recordFinalAssignment( \t\tVariableBinding binding, \t\tReference finalAssignment)", "signatureAfterChange": "  \tboolean recordFinalAssignment( \t\tVariableBinding binding, \t\tReference finalAssignment)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73daecc6a7446c417465fef697df66c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetParser.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected MessageSend newMessageSend()", "signatureAfterChange": " protected MessageSend newMessageSend()", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75ddf0a138e663ce5e0de86e26a93f1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "diff": ["-\t\t\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);;", "+\t\t\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76756806ff89874f0213e2ecc6c55e55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Block.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic StringBuffer printBody(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printBody(int indent, StringBuffer output)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "775a6acaa07a90ca10cc3af897f028d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 195, "methodNumberAfterChange": 195, "signatureBeforeChange": " protected NameReference getUnspecifiedReference()", "signatureAfterChange": " protected NameReference getUnspecifiedReference()", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77617624ba0590a694b9647141347677", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " protected MessageSend newMessageSend()", "signatureAfterChange": " protected MessageSend newMessageSend()", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bc7586c2f2eb86f2b7930af865437d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tboolean recordFinalAssignment( \t\tVariableBinding binding, \t\tReference finalAssignment)", "signatureAfterChange": "  \tboolean recordFinalAssignment( \t\tVariableBinding binding, \t\tReference finalAssignment)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f06a4df5dbf3eb19c72b3052bf19104", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ff557c7cb9e5b35c3c9a39237b227a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 158, "methodNumberAfterChange": 158, "signatureBeforeChange": " protected void consumeStatementFor()", "signatureAfterChange": " protected void consumeStatementFor()", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836c943800f3b2e694911c99b3f0fd93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "32f53661a42b6c1d5054592cbea1a94b72596966", "commitAfterChange": "4a64f2fcadd24cb17347438e74b1d8c3d7a392ab", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void setUp()", "signatureAfterChange": " \tprotected void setUp()", "diff": ["-\t\tTAG1S = \"[(TG@foo@fooTG)]\";;  //$NON-NLS-1$", "+\t\tTAG1S = \"[(TG@foo@fooTG)]\";  //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87fde7d85110fbbfeede6cc69eb8da9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public int literalIndex(float key)", "signatureAfterChange": " public int literalIndex(float key)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9b443c67968727a2e0734a890dbbe7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OperatorExpression.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic static final int[] get_EQUAL_EQUAL()", "signatureAfterChange": "  \tpublic static final int[] get_EQUAL_EQUAL()", "diff": ["-\t\tint[] table  = new int[16*16] ;", "+\t\tint[] table  = new int[16*16];", "-\t\t//\ttable[(T_undefined<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_undefined<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_byte<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_byte<<4)+T_byte] \t\t= (Byte2Int<<12)+(Byte2Int<<4)+T_boolean ;", "-\t\ttable[(T_byte<<4)+T_long] \t\t= (Byte2Long<<12)+(Long2Long<<4)+T_boolean ;", "-\t\ttable[(T_byte<<4)+T_short] \t\t= (Byte2Int<<12)+(Short2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_byte<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_String] \t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_Object] \t= T_undefined ;", "-\t\ttable[(T_byte<<4)+T_double] \t= (Byte2Double<<12)+(Double2Double<<4)+T_boolean ;", "+\t\t//\ttable[(T_byte<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_byte<<4)+T_byte] \t\t= (Byte2Int<<12)+(Byte2Int<<4)+T_boolean;", "+\t\ttable[(T_byte<<4)+T_long] \t\t= (Byte2Long<<12)+(Long2Long<<4)+T_boolean;", "+\t\ttable[(T_byte<<4)+T_short] \t\t= (Byte2Int<<12)+(Short2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_byte<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_String] \t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_Object] \t= T_undefined;", "+\t\ttable[(T_byte<<4)+T_double] \t= (Byte2Double<<12)+(Double2Double<<4)+T_boolean;", "-\t\t//\ttable[(T_byte<<4)+T_boolean] \t= T_undefined ;", "-\t\ttable[(T_byte<<4)+T_char] \t\t= (Byte2Int<<12)+(Char2Int<<4)+T_boolean ;", "+\t\t//\ttable[(T_byte<<4)+T_boolean] \t= T_undefined;", "+\t\ttable[(T_byte<<4)+T_char] \t\t= (Byte2Int<<12)+(Char2Int<<4)+T_boolean;", "-\t\t//\ttable[(T_byte<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_byte<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_long<<4)+T_undefined] \t= T_undefined ;", "+\t\t//\ttable[(T_long<<4)+T_undefined] \t= T_undefined;", "-\t\ttable[(T_long<<4)+T_long] \t\t= (Long2Long<<12)+(Long2Long<<4)+T_boolean ;", "-\t\ttable[(T_long<<4)+T_short] \t\t= (Long2Long<<12)+(Short2Long<<4)+T_boolean ;", "-\t\t//\ttable[(T_long<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_String] \t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_Object] \t= T_undefined ;", "-\t\ttable[(T_long<<4)+T_double] \t= (Long2Double<<12)+(Double2Double<<4)+T_boolean ;", "-\t\ttable[(T_long<<4)+T_float] \t\t= (Long2Float<<12)+(Float2Float<<4)+T_boolean ;", "-\t\t//\ttable[(T_long<<4)+T_boolean] \t= T_undefined ;", "-\t\ttable[(T_long<<4)+T_char] \t\t= (Long2Long<<12)+(Char2Long<<4)+T_boolean ;", "-\t\ttable[(T_long<<4)+T_int] \t\t= (Long2Long<<12)+(Int2Long<<4)+T_boolean ;", "-\t\t//\ttable[(T_long<<4)+T_null] \t\t= T_undefined ;", "+\t\ttable[(T_long<<4)+T_long] \t\t= (Long2Long<<12)+(Long2Long<<4)+T_boolean;", "+\t\ttable[(T_long<<4)+T_short] \t\t= (Long2Long<<12)+(Short2Long<<4)+T_boolean;", "+\t\t//\ttable[(T_long<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_String] \t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_Object] \t= T_undefined;", "+\t\ttable[(T_long<<4)+T_double] \t= (Long2Double<<12)+(Double2Double<<4)+T_boolean;", "+\t\ttable[(T_long<<4)+T_float] \t\t= (Long2Float<<12)+(Float2Float<<4)+T_boolean;", "+\t\t//\ttable[(T_long<<4)+T_boolean] \t= T_undefined;", "+\t\ttable[(T_long<<4)+T_char] \t\t= (Long2Long<<12)+(Char2Long<<4)+T_boolean;", "+\t\ttable[(T_long<<4)+T_int] \t\t= (Long2Long<<12)+(Int2Long<<4)+T_boolean;", "+\t\t//\ttable[(T_long<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_short<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_short<<4)+T_byte] \t\t\t= (Short2Int<<12)+(Byte2Int<<4)+T_boolean ;", "-\t\ttable[(T_short<<4)+T_long] \t\t\t= (Short2Long<<12)+(Long2Long<<4)+T_boolean ;", "-\t\ttable[(T_short<<4)+T_short] \t\t= (Short2Int<<12)+(Short2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_short<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_Object] \t\t= T_undefined ;", "-\t\ttable[(T_short<<4)+T_double] \t\t= (Short2Double<<12)+(Double2Double<<4)+T_boolean ;", "-\t\ttable[(T_short<<4)+T_float] \t\t= (Short2Float<<12)+(Float2Float<<4)+T_boolean ;", "-\t\t//\ttable[(T_short<<4)+T_boolean] \t\t= T_undefined ;", "-\t\ttable[(T_short<<4)+T_char] \t\t\t= (Short2Int<<12)+(Char2Int<<4)+T_boolean ;", "-\t\ttable[(T_short<<4)+T_int] \t\t\t= (Short2Int<<12)+(Int2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_short<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_short<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_short<<4)+T_byte] \t\t\t= (Short2Int<<12)+(Byte2Int<<4)+T_boolean;", "+\t\ttable[(T_short<<4)+T_long] \t\t\t= (Short2Long<<12)+(Long2Long<<4)+T_boolean;", "+\t\ttable[(T_short<<4)+T_short] \t\t= (Short2Int<<12)+(Short2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_short<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_Object] \t\t= T_undefined;", "+\t\ttable[(T_short<<4)+T_double] \t\t= (Short2Double<<12)+(Double2Double<<4)+T_boolean;", "+\t\ttable[(T_short<<4)+T_float] \t\t= (Short2Float<<12)+(Float2Float<<4)+T_boolean;", "+\t\t//\ttable[(T_short<<4)+T_boolean] \t\t= T_undefined;", "+\t\ttable[(T_short<<4)+T_char] \t\t\t= (Short2Int<<12)+(Char2Int<<4)+T_boolean;", "+\t\ttable[(T_short<<4)+T_int] \t\t\t= (Short2Int<<12)+(Int2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_short<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_void<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_long] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_String] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_Object] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_double] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_boolean] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_char] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_int] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_void<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_long] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_String] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_Object] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_double] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_boolean] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_char] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_int] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_String<<4)+T_undefined] \t= T_undefined ; ", "-\t\t//\ttable[(T_String<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_long] \t\t= T_undefined ; ", "-\t\t//\ttable[(T_String<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_void] \t\t= T_undefined ;", "+\t\t//\ttable[(T_String<<4)+T_undefined] \t= T_undefined; ", "+\t\t//\ttable[(T_String<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_long] \t\t= T_undefined; ", "+\t\t//\ttable[(T_String<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_void] \t\t= T_undefined;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_String<<12)+(T_Object<<8)+(T_String<<4)+T_boolean ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_String<<12)+(T_Object<<8)+(T_String<<4)+T_boolean;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_String<<12)+(T_Object<<8)+(T_Object<<4)+T_boolean ;", "-\t\t//\ttable[(T_String<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_float] \t\t= T_undefined ; ", "-\t\t//\ttable[(T_String<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_char] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_int] \t\t\t= T_undefined ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_String<<12)+(T_Object<<8)+(T_Object<<4)+T_boolean;", "+\t\t//\ttable[(T_String<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_float] \t\t= T_undefined; ", "+\t\t//\ttable[(T_String<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_char] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_int] \t\t\t= T_undefined;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_String<<12)+(T_Object<<8)+(T_null<<4)+T_boolean ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_String<<12)+(T_Object<<8)+(T_null<<4)+T_boolean;", "-\t\t//\ttable[(T_Object<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_long] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_short]\t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_void] \t\t= T_undefined ;", "+\t\t//\ttable[(T_Object<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_long] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_short]\t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_void] \t\t= T_undefined;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_Object<<12)+(T_Object<<8)+(T_String<<4)+T_boolean ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_Object<<12)+(T_Object<<8)+(T_String<<4)+T_boolean;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_Object<<12)+(T_Object<<8)+(T_Object<<4)+T_boolean ;", "-\t\t//\ttable[(T_Object<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_boolean]\t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_char] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_int] \t\t\t= T_undefined ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_Object<<12)+(T_Object<<8)+(T_Object<<4)+T_boolean;", "+\t\t//\ttable[(T_Object<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_boolean]\t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_char] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_int] \t\t\t= T_undefined;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_Object<<12)+(T_Object<<8)+(T_null<<4)+T_boolean ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_Object<<12)+(T_Object<<8)+(T_null<<4)+T_boolean;", "-\t\t//\ttable[(T_double<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_double<<4)+T_byte] \t\t= (Double2Double<<12)+(Byte2Double<<4)+T_boolean ;", "-\t\ttable[(T_double<<4)+T_long] \t\t= (Double2Double<<12)+(Long2Double<<4)+T_boolean ;", "-\t\ttable[(T_double<<4)+T_short] \t\t= (Double2Double<<12)+(Short2Double<<4)+T_boolean ;", "-\t\t//\ttable[(T_double<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_Object] \t\t= T_undefined ;", "-\t\ttable[(T_double<<4)+T_double] \t\t= (Double2Double<<12)+(Double2Double<<4)+T_boolean ;", "+\t\t//\ttable[(T_double<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_double<<4)+T_byte] \t\t= (Double2Double<<12)+(Byte2Double<<4)+T_boolean;", "+\t\ttable[(T_double<<4)+T_long] \t\t= (Double2Double<<12)+(Long2Double<<4)+T_boolean;", "+\t\ttable[(T_double<<4)+T_short] \t\t= (Double2Double<<12)+(Short2Double<<4)+T_boolean;", "+\t\t//\ttable[(T_double<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_Object] \t\t= T_undefined;", "+\t\ttable[(T_double<<4)+T_double] \t\t= (Double2Double<<12)+(Double2Double<<4)+T_boolean;", "-\t\t//\ttable[(T_double<<4)+T_boolean] \t\t= T_undefined ;", "-\t\ttable[(T_double<<4)+T_char] \t\t= (Double2Double<<12)+(Char2Double<<4)+T_boolean ;", "-\t\ttable[(T_double<<4)+T_int] \t\t\t= (Double2Double<<12)+(Int2Double<<4)+T_boolean ;", "-\t\t//\ttable[(T_double<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_double<<4)+T_boolean] \t\t= T_undefined;", "+\t\ttable[(T_double<<4)+T_char] \t\t= (Double2Double<<12)+(Char2Double<<4)+T_boolean;", "+\t\ttable[(T_double<<4)+T_int] \t\t\t= (Double2Double<<12)+(Int2Double<<4)+T_boolean;", "+\t\t//\ttable[(T_double<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_float<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_float<<4)+T_byte] \t\t\t= (Float2Float<<12)+(Byte2Float<<4)+T_boolean ;", "-\t\ttable[(T_float<<4)+T_long] \t\t\t= (Float2Float<<12)+(Long2Float<<4)+T_boolean ;", "-\t\ttable[(T_float<<4)+T_short] \t\t= (Float2Float<<12)+(Short2Float<<4)+T_boolean ;", "-\t\t//\ttable[(T_float<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_Object] \t\t= T_undefined ;", "-\t\ttable[(T_float<<4)+T_double] \t\t= (Float2Double<<12)+(Double2Double<<4)+T_boolean ;", "-\t\ttable[(T_float<<4)+T_float] \t\t= (Float2Float<<12)+(Float2Float<<4)+T_boolean ;", "-\t\t//\ttable[(T_float<<4)+T_boolean] \t\t= T_undefined ;", "-\t\ttable[(T_float<<4)+T_char] \t\t\t= (Float2Float<<12)+(Char2Float<<4)+T_boolean ;", "-\t\ttable[(T_float<<4)+T_int] \t\t\t= (Float2Float<<12)+(Int2Float<<4)+T_boolean ;", "-\t\t//\ttable[(T_float<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_float<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_float<<4)+T_byte] \t\t\t= (Float2Float<<12)+(Byte2Float<<4)+T_boolean;", "+\t\ttable[(T_float<<4)+T_long] \t\t\t= (Float2Float<<12)+(Long2Float<<4)+T_boolean;", "+\t\ttable[(T_float<<4)+T_short] \t\t= (Float2Float<<12)+(Short2Float<<4)+T_boolean;", "+\t\t//\ttable[(T_float<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_Object] \t\t= T_undefined;", "+\t\ttable[(T_float<<4)+T_double] \t\t= (Float2Double<<12)+(Double2Double<<4)+T_boolean;", "+\t\ttable[(T_float<<4)+T_float] \t\t= (Float2Float<<12)+(Float2Float<<4)+T_boolean;", "+\t\t//\ttable[(T_float<<4)+T_boolean] \t\t= T_undefined;", "+\t\ttable[(T_float<<4)+T_char] \t\t\t= (Float2Float<<12)+(Char2Float<<4)+T_boolean;", "+\t\ttable[(T_float<<4)+T_int] \t\t\t= (Float2Float<<12)+(Int2Float<<4)+T_boolean;", "+\t\t//\ttable[(T_float<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_boolean<<4)+T_undefined] \t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_short] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_String] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_Object] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_double] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_float] \t\t\t= T_undefined ;", "-\t\ttable[(T_boolean<<4)+T_boolean] \t\t= (Boolean2Boolean<<12)+(Boolean2Boolean<<4)+T_boolean ;", "-\t\t//\ttable[(T_boolean<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_boolean<<4)+T_undefined] \t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_short] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_String] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_Object] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_double] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_float] \t\t\t= T_undefined;", "+\t\ttable[(T_boolean<<4)+T_boolean] \t\t= (Boolean2Boolean<<12)+(Boolean2Boolean<<4)+T_boolean;", "+\t\t//\ttable[(T_boolean<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_char<<4)+T_undefined] \t\t= T_undefined ;", "-\t\ttable[(T_char<<4)+T_byte] \t\t\t= (Char2Int<<12)+(Byte2Int<<4)+T_boolean ;", "-\t\ttable[(T_char<<4)+T_long] \t\t\t= (Char2Long<<12)+(Long2Long<<4)+T_boolean ;", "-\t\ttable[(T_char<<4)+T_short] \t\t\t= (Char2Int<<12)+(Short2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_char<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_Object] \t\t= T_undefined ;", "-\t\ttable[(T_char<<4)+T_double] \t\t= (Char2Double<<12)+(Double2Double<<4)+T_boolean ;", "-\t\ttable[(T_char<<4)+T_float] \t\t\t= (Char2Float<<12)+(Float2Float<<4)+T_boolean ;", "-\t\t//\ttable[(T_char<<4)+T_boolean] \t\t= T_undefined ;", "-\t\ttable[(T_char<<4)+T_char] \t\t\t= (Char2Int<<12)+(Char2Int<<4)+T_boolean ;", "-\t\ttable[(T_char<<4)+T_int] \t\t\t= (Char2Int<<12)+(Int2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_char<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_char<<4)+T_undefined] \t\t= T_undefined;", "+\t\ttable[(T_char<<4)+T_byte] \t\t\t= (Char2Int<<12)+(Byte2Int<<4)+T_boolean;", "+\t\ttable[(T_char<<4)+T_long] \t\t\t= (Char2Long<<12)+(Long2Long<<4)+T_boolean;", "+\t\ttable[(T_char<<4)+T_short] \t\t\t= (Char2Int<<12)+(Short2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_char<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_Object] \t\t= T_undefined;", "+\t\ttable[(T_char<<4)+T_double] \t\t= (Char2Double<<12)+(Double2Double<<4)+T_boolean;", "+\t\ttable[(T_char<<4)+T_float] \t\t\t= (Char2Float<<12)+(Float2Float<<4)+T_boolean;", "+\t\t//\ttable[(T_char<<4)+T_boolean] \t\t= T_undefined;", "+\t\ttable[(T_char<<4)+T_char] \t\t\t= (Char2Int<<12)+(Char2Int<<4)+T_boolean;", "+\t\ttable[(T_char<<4)+T_int] \t\t\t= (Char2Int<<12)+(Int2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_char<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_int<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_int<<4)+T_byte] \t\t= (Int2Int<<12)+(Byte2Int<<4)+T_boolean ;", "-\t\ttable[(T_int<<4)+T_long] \t\t= (Int2Long<<12)+(Long2Long<<4)+T_boolean ;", "-\t\ttable[(T_int<<4)+T_short] \t\t= (Int2Int<<12)+(Short2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_int<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_Object] \t\t= T_undefined ;", "-\t\ttable[(T_int<<4)+T_double] \t\t= (Int2Double<<12)+(Double2Double<<4)+T_boolean ;", "+\t\t//\ttable[(T_int<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_int<<4)+T_byte] \t\t= (Int2Int<<12)+(Byte2Int<<4)+T_boolean;", "+\t\ttable[(T_int<<4)+T_long] \t\t= (Int2Long<<12)+(Long2Long<<4)+T_boolean;", "+\t\ttable[(T_int<<4)+T_short] \t\t= (Int2Int<<12)+(Short2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_int<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_Object] \t\t= T_undefined;", "+\t\ttable[(T_int<<4)+T_double] \t\t= (Int2Double<<12)+(Double2Double<<4)+T_boolean;", "-\t\t//\ttable[(T_int<<4)+T_boolean] \t= T_undefined ;", "-\t\ttable[(T_int<<4)+T_char] \t\t= (Int2Int<<12)+(Char2Int<<4)+T_boolean ;", "-\t\ttable[(T_int<<4)+T_int] \t\t= (Int2Int<<12)+(Int2Int<<4)+T_boolean ;", "-\t\t//\ttable[(T_int<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_int<<4)+T_boolean] \t= T_undefined;", "+\t\ttable[(T_int<<4)+T_char] \t\t= (Int2Int<<12)+(Char2Int<<4)+T_boolean;", "+\t\ttable[(T_int<<4)+T_int] \t\t= (Int2Int<<12)+(Int2Int<<4)+T_boolean;", "+\t\t//\ttable[(T_int<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_null<<4)+T_undefined] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_short] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_void] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_null<<4)+T_undefined] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_short] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_void] \t\t\t= T_undefined;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_null<<12)+(T_Object<<8)+(T_String<<4)+T_boolean ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_null<<12)+(T_Object<<8)+(T_String<<4)+T_boolean;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_null<<12)+(T_Object<<8)+(T_Object<<4)+T_boolean ; ;", "-\t\t//\ttable[(T_null<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_float] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_int] \t\t\t= T_undefined ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_null<<12)+(T_Object<<8)+(T_Object<<4)+T_boolean; ", "+\t\t//\ttable[(T_null<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_float] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_int] \t\t\t= T_undefined;", "-\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_null<<12)+(T_Object<<8)+(T_null<<4)+T_boolean ;", "-\t\treturn table ;", "+\t\t\t\t\t\t\t\t\t\t\t  (T_Object<<16)+(T_null<<12)+(T_Object<<8)+(T_null<<4)+T_boolean;", "+\t\treturn table;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7a23b0975374bdf66096f1f4adb355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SyntaxErrorTest.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void checkParse( \tchar[] source,  \tString expectedSyntaxErrorDiagnosis, \tString testName)", "signatureAfterChange": " public void checkParse( \tchar[] source,  \tString expectedSyntaxErrorDiagnosis, \tString testName)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "926a074ca08b23f28d81e8768258415a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": " protected NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93bbb4339f583b4ac9e2083154ed6ec2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  public void test88()", "signatureAfterChange": "  public void test88()", "diff": ["-\t\t\"}\\n\";;", "+\t\t\"}\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9721a434cdb07875187ace624bc7e77e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic void printTrailingComment()", "signatureAfterChange": "  \tpublic void printTrailingComment()", "diff": ["-\t\t\t};", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97f0d2abb87ab03f066dc0237a2a1626", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static org.eclipse.jdt.core.util.IClassFileDisassembler createDefaultClassFileDisassembler()", "signatureAfterChange": " \tpublic static org.eclipse.jdt.core.util.IClassFileDisassembler createDefaultClassFileDisassembler()", "diff": ["-\t\tclass DeprecatedDisassembler extends Disassembler implements org.eclipse.jdt.core.util.IClassFileDisassembler {};", "+\t\tclass DeprecatedDisassembler extends Disassembler implements org.eclipse.jdt.core.util.IClassFileDisassembler {}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e03b9bdc31ce29f2c6c484ce57680b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/SanityTestEvaluationContext.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testEvaluateVariable()", "signatureAfterChange": " public void testEvaluateVariable()", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a946f14f0850f86df1de325b0fa00bf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf8b60c6f11b07334061d85ca3132b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " protected int matchLevelAsSubtype(ReferenceBinding type, char[] simpleNamePattern, char[] qualificationPattern)", "signatureAfterChange": " protected int matchLevelAsSubtype(ReferenceBinding type, char[] simpleNamePattern, char[] qualificationPattern)", "diff": ["-\t\t\t};", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0fcd55c32f99f67b5bdccdbdd8579ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "commitAfterChange": "5e8c3183792bb167a28b31bd623b66ded11f658d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "signatureAfterChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "diff": ["-", "-//\t\t\tFlowInfo flowInfo = FlowInfo.initial(maxFieldCount); // start fresh init info", "-//\t\t\tReferenceBinding[] defaultHandledExceptions = new ReferenceBinding[] { scope.getJavaLangThrowable()}; // tolerate any kind of exception", "-//\t\t\tInitializationFlowContext initializerContext =", "-//\t\t\t\tnew InitializationFlowContext(null, this, initializerScope);", "-//\t\t\tInitializationFlowContext staticInitializerContext =", "-//\t\t\t\tnew InitializationFlowContext(null, this, staticInitializerScope);", "-//\t\t\tFlowInfo nonStaticFieldInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-//\t\t\tFlowInfo staticFieldInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-//\t\t\tif (fields != null) {", "-//\t\t\t\tfor (int i = 0, count = fields.length; i < count; i++) {", "-//\t\t\t\t\tFieldDeclaration field = fields[i];", "-//\t\t\t\t\tif (field.isStatic()) {", "-//\t\t\t\t\t\t/*if (field.isField()){", "-//\t\t\t\t\t\t\tstaticInitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "-//\t\t\t\t\t\t} else {*/", "-//\t\t\t\t\t\tstaticInitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "-//\t\t\t\t\t\t/*}*/", "-//\t\t\t\t\t\tstaticFieldInfo =", "-//\t\t\t\t\t\t\tfield.analyseCode(", "-//\t\t\t\t\t\t\t\tstaticInitializerScope,", "-//\t\t\t\t\t\t\t\tstaticInitializerContext,", "-//\t\t\t\t\t\t\t\tstaticFieldInfo);", "-//\t\t\t\t\t\t// in case the initializer is not reachable, use a reinitialized flowInfo and enter a fake reachable", "-//\t\t\t\t\t\t// branch, since the previous initializer already got the blame.", "-//\t\t\t\t\t\tif (staticFieldInfo == FlowInfo.DEAD_END) {", "-//\t\t\t\t\t\t\tstaticInitializerScope.problemReporter().initializerMustCompleteNormally(field);", "-//\t\t\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t} else {", "-//\t\t\t\t\t\t/*if (field.isField()){", "-//\t\t\t\t\t\t\tinitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "-//\t\t\t\t\t\t} else {*/", "-//\t\t\t\t\t\t\tinitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "-//\t\t\t\t\t\t/*}*/", "-//\t\t\t\t\t\tnonStaticFieldInfo =", "-//\t\t\t\t\t\t\tfield.analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);", "-//\t\t\t\t\t\t// in case the initializer is not reachable, use a reinitialized flowInfo and enter a fake reachable", "-//\t\t\t\t\t\t// branch, since the previous initializer already got the blame.", "-//\t\t\t\t\t\tif (nonStaticFieldInfo == FlowInfo.DEAD_END) {", "-//\t\t\t\t\t\t\tinitializerScope.problemReporter().initializerMustCompleteNormally(field);", "-//\t\t\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (memberTypes != null) {", "-//\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++) {", "-//\t\t\t\t\tmemberTypes[i].analyseCode(scope);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (methods != null) {", "-//\t\t\t\tUnconditionalFlowInfo outerInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-//\t\t\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-//\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++) {", "-//\t\t\t\t\tAbstractMethodDeclaration method = methods[i];", "-//\t\t\t\t\tif (method.ignoreFurtherInvestigation)", "-//\t\t\t\t\t\tcontinue;", "-//\t\t\t\t\tif (method.isInitializationMethod()) {", "-//\t\t\t\t\t\tif (method.isStatic()) { // <clinit>", "-//\t\t\t\t\t\t\t((Clinit)method).analyseCode(", "-//\t\t\t\t\t\t\t\tscope, ", "-//\t\t\t\t\t\t\t\tstaticInitializerContext, ", "-//\t\t\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "-//\t\t\t\t\t\t} else { // constructor", "-//\t\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(scope, initializerContext, constructorInfo.copy());", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t} else { // regular method", "-//\t\t\t\t\t\tmethod.analyseCode(scope, null, FlowInfo.initial(maxFieldCount));", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b77e4e4766eb1e0b6bfd8ddb409cc5e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": " protected void pushIdentifier(int flag)", "signatureAfterChange": " protected void pushIdentifier(int flag)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcf06d88c74043bdf899157ffec4b027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OperatorExpression.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tpublic String operatorToString()", "signatureAfterChange": " \t \tpublic String operatorToString()", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e9149102169336d137be05113d0636", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/SimpleTest.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected String errorReportSource(DefaultProblem problem, char[] source)", "signatureAfterChange": " protected String errorReportSource(DefaultProblem problem, char[] source)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c270a2458c7fda002f2b419de4c233e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c00ab8196c6314382534f67df43b8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " protected void consumeExplicitConstructorInvocation(int flag, int recFlag)", "signatureAfterChange": " protected void consumeExplicitConstructorInvocation(int flag, int recFlag)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9250bad36f96c8d7265404661b25319", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "commitAfterChange": "5e8c3183792bb167a28b31bd623b66ded11f658d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void analyseCode(ClassScope enclosingClassScope)", "signatureAfterChange": " \tpublic void analyseCode(ClassScope enclosingClassScope)", "diff": ["-//\t\t\tFlowInfo flowInfo = FlowInfo.initial(maxFieldCount); // start fresh init info", "-//", "-//\t\t\tReferenceBinding[] defaultHandledExceptions = new ReferenceBinding[] { scope.getJavaLangThrowable()}; // tolerate any kind of exception", "-//\t\t\tInitializationFlowContext initializerContext =", "-//\t\t\t\tnew InitializationFlowContext(null, this, initializerScope);", "-//\t\t\tInitializationFlowContext staticInitializerContext =", "-//\t\t\t\tnew InitializationFlowContext(null, this, staticInitializerScope);", "-//", "-//\t\t\tFlowInfo nonStaticFieldInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-//\t\t\tFlowInfo staticFieldInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-//", "-//\t\t\tif (fields != null) {", "-//\t\t\t\tfor (int i = 0, count = fields.length; i < count; i++) {", "-//\t\t\t\t\tFieldDeclaration field = fields[i];", "-//\t\t\t\t\tif (field.isStatic()) {", "-//\t\t\t\t\t\t/*if (field.isField()){", "-//\t\t\t\t\t\t\tstaticInitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "-//\t\t\t\t\t\t} else {*/", "-//\t\t\t\t\t\tstaticInitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "-//\t\t\t\t\t\t/*}*/", "-//\t\t\t\t\t\tstaticFieldInfo =", "-//\t\t\t\t\t\t\tfield.analyseCode(", "-//\t\t\t\t\t\t\t\tstaticInitializerScope,", "-//\t\t\t\t\t\t\t\tstaticInitializerContext,", "-//\t\t\t\t\t\t\t\tstaticFieldInfo);", "-//\t\t\t\t\t\t// in case the initializer is not reachable, use a reinitialized flowInfo and enter a fake reachable", "-//\t\t\t\t\t\t// branch, since the previous initializer already got the blame.", "-//\t\t\t\t\t\tif (staticFieldInfo == FlowInfo.DEAD_END) {", "-//\t\t\t\t\t\t\tstaticInitializerScope.problemReporter().initializerMustCompleteNormally(field);", "-//\t\t\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t} else {", "-//\t\t\t\t\t\t/*if (field.isField()){", "-//\t\t\t\t\t\t\tinitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "-//\t\t\t\t\t\t} else {*/", "-//\t\t\t\t\t\t\tinitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "-//\t\t\t\t\t\t/*}*/", "-//\t\t\t\t\t\tnonStaticFieldInfo = field.analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);", "-//\t\t\t\t\t\t// in case the initializer is not reachable, use a reinitialized flowInfo and enter a fake reachable", "-//\t\t\t\t\t\t// branch, since the previous initializer already got the blame.", "-//\t\t\t\t\t\tif (nonStaticFieldInfo == FlowInfo.DEAD_END) {", "-//\t\t\t\t\t\t\tinitializerScope.problemReporter().initializerMustCompleteNormally(field);", "-//\t\t\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (memberTypes != null) {", "-//\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++) {", "-//\t\t\t\t\tmemberTypes[i].analyseCode(scope);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (methods != null) {", "-//\t\t\t\tUnconditionalFlowInfo outerInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "-//\t\t\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-//\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++) {", "-//\t\t\t\t\tAbstractMethodDeclaration method = methods[i];", "-//\t\t\t\t\tif (method.ignoreFurtherInvestigation)", "-//\t\t\t\t\t\tcontinue;", "-//\t\t\t\t\tif (method.isInitializationMethod()) {", "-//\t\t\t\t\t\tif (method.isStatic()) { // <clinit>", "-//\t\t\t\t\t\t\t((Clinit)method).analyseCode(", "-//\t\t\t\t\t\t\t\tscope, ", "-//\t\t\t\t\t\t\t\tstaticInitializerContext, ", "-//\t\t\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "-//\t\t\t\t\t\t} else { // constructor", "-//\t\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(scope, initializerContext, constructorInfo.copy());", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t} else { // regular method", "-//\t\t\t\t\t\tmethod.analyseCode(scope, null, FlowInfo.initial(maxFieldCount));", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfbcefaaaf3b43c2d2d58136f38b9ee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic String operatorToString()", "signatureAfterChange": " \t \tpublic String operatorToString()", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53db3aaa606f76797a72aabaec16938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate String formatStatements(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate String formatStatements(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "diff": ["-\t\tString result = this.newCodeFormatter.format(source, positions, constructorDeclaration);;", "+\t\tString result = this.newCodeFormatter.format(source, positions, constructorDeclaration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f2ec5c0745cab33eed07b124ba3125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " protected MessageSend newMessageSend()", "signatureAfterChange": " protected MessageSend newMessageSend()", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc31f60adf5397b420025ca8fbb7b1f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testMethodWithError4() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError4() throws JavaModelException, CoreException", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddb98e285c3e88de55c836a9177792c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );;", "+\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "decd03702bb1c5916b7dd7ba926c0a75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OperatorExpression.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic static final int[] get_AND()", "signatureAfterChange": "  \tpublic static final int[] get_AND()", "diff": ["-\t\tint[] table  = new int[16*16] ;", "+\t\tint[] table  = new int[16*16];", "-\t\t//\ttable[(T_undefined<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_undefined<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_undefined<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_undefined<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_byte<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_byte<<4)+T_byte] \t\t= (Byte2Int<<12) +(Byte2Int<<4) +T_int ;", "-\t\ttable[(T_byte<<4)+T_long]\t\t= (Byte2Long<<12)+(Long2Long<<4)+T_long ;", "+\t\t//\ttable[(T_byte<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_byte<<4)+T_byte] \t\t= (Byte2Int<<12) +(Byte2Int<<4) +T_int;", "+\t\ttable[(T_byte<<4)+T_long]\t\t= (Byte2Long<<12)+(Long2Long<<4)+T_long;", "-\t\t//\ttable[(T_byte<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_String] \t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_Object] \t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_double] \t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_byte<<4)+T_boolean] \t= T_undefined ;", "-\t\ttable[(T_byte<<4)+T_char] \t\t= (Byte2Int<<12) +(Char2Int<<4) +T_int ;", "-\t\ttable[(T_byte<<4)+T_int] \t\t= (Byte2Int<<12) +(Int2Int<<4)  +T_int ;", "-\t\t//\ttable[(T_byte<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_byte<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_String] \t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_Object] \t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_double] \t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_byte<<4)+T_boolean] \t= T_undefined;", "+\t\ttable[(T_byte<<4)+T_char] \t\t= (Byte2Int<<12) +(Char2Int<<4) +T_int;", "+\t\ttable[(T_byte<<4)+T_int] \t\t= (Byte2Int<<12) +(Int2Int<<4)  +T_int;", "+\t\t//\ttable[(T_byte<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_long<<4)+T_undefined] \t= T_undefined ;", "+\t\t//\ttable[(T_long<<4)+T_undefined] \t= T_undefined;", "-\t\ttable[(T_long<<4)+T_long] \t\t= (Long2Long<<12)+(Long2Long<<4)+T_long ;", "-\t\ttable[(T_long<<4)+T_short] \t\t= (Long2Long<<12)+(Short2Long<<4)+T_long; ;", "-\t\t//\ttable[(T_long<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_String] \t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_Object] \t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_double] \t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_long<<4)+T_boolean] \t= T_undefined ;", "-\t\ttable[(T_long<<4)+T_char] \t\t= (Long2Long<<12)+(Char2Long<<4)+T_long ;", "-\t\ttable[(T_long<<4)+T_int] \t\t= (Long2Long<<12)+(Int2Long<<4)+T_long ;", "-\t\t//\ttable[(T_long<<4)+T_null] \t\t= T_undefined ;", "+\t\ttable[(T_long<<4)+T_long] \t\t= (Long2Long<<12)+(Long2Long<<4)+T_long;", "+\t\ttable[(T_long<<4)+T_short] \t\t= (Long2Long<<12)+(Short2Long<<4)+T_long;", "+\t\t//\ttable[(T_long<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_String] \t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_Object] \t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_double] \t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_long<<4)+T_boolean] \t= T_undefined;", "+\t\ttable[(T_long<<4)+T_char] \t\t= (Long2Long<<12)+(Char2Long<<4)+T_long;", "+\t\ttable[(T_long<<4)+T_int] \t\t= (Long2Long<<12)+(Int2Long<<4)+T_long;", "+\t\t//\ttable[(T_long<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_short<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_short<<4)+T_byte] \t\t\t= (Short2Int<<12)+(Byte2Int<<4)+T_int ;", "-\t\ttable[(T_short<<4)+T_long] \t\t\t= (Short2Long<<12)+(Long2Long<<4)+T_long ;", "-\t\ttable[(T_short<<4)+T_short] \t\t= (Short2Int<<12)+(Short2Int<<4)+T_int ;", "-\t\t//\ttable[(T_short<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_short<<4)+T_boolean] \t\t= T_undefined ;", "-\t\ttable[(T_short<<4)+T_char] \t\t\t= (Short2Int<<12)+(Char2Int<<4)+T_int ;", "-\t\ttable[(T_short<<4)+T_int] \t\t\t= (Short2Int<<12)+(Int2Int<<4)+T_int ;", "-\t\t//\ttable[(T_short<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_short<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_short<<4)+T_byte] \t\t\t= (Short2Int<<12)+(Byte2Int<<4)+T_int;", "+\t\ttable[(T_short<<4)+T_long] \t\t\t= (Short2Long<<12)+(Long2Long<<4)+T_long;", "+\t\ttable[(T_short<<4)+T_short] \t\t= (Short2Int<<12)+(Short2Int<<4)+T_int;", "+\t\t//\ttable[(T_short<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_short<<4)+T_boolean] \t\t= T_undefined;", "+\t\ttable[(T_short<<4)+T_char] \t\t\t= (Short2Int<<12)+(Char2Int<<4)+T_int;", "+\t\ttable[(T_short<<4)+T_int] \t\t\t= (Short2Int<<12)+(Int2Int<<4)+T_int;", "+\t\t//\ttable[(T_short<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_void<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_long] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_String] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_Object] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_double] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_boolean] \t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_char] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_int] \t\t= T_undefined ;", "-\t\t//\ttable[(T_void<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_void<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_long] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_String] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_Object] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_double] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_boolean] \t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_char] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_int] \t\t= T_undefined;", "+\t\t//\ttable[(T_void<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_String<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_long] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_char] \t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_String<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_String<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_long] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_char] \t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_String<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_Object<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_long] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_short]\t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_boolean]\t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_char] \t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_Object<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_Object<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_long] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_short]\t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_boolean]\t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_char] \t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_Object<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_double<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_byte] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_long] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_double<<4)+T_char] \t\t= T_undefined ;", "+\t\t//\ttable[(T_double<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_byte] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_long] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_double<<4)+T_char] \t\t= T_undefined;", "-\t\t//\ttable[(T_double<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_double<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_float<<4)+T_undefined] \t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_short] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_float<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_float<<4)+T_undefined] \t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_short] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_float<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_boolean<<4)+T_undefined] \t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_short] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_String] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_Object] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_double] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_float] \t\t\t= T_undefined ;", "-\t\ttable[(T_boolean<<4)+T_boolean] \t\t= (Boolean2Boolean << 12)+(Boolean2Boolean << 4)+T_boolean ;", "-\t\t//\ttable[(T_boolean<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_boolean<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_boolean<<4)+T_undefined] \t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_short] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_String] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_Object] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_double] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_float] \t\t\t= T_undefined;", "+\t\ttable[(T_boolean<<4)+T_boolean] \t\t= (Boolean2Boolean << 12)+(Boolean2Boolean << 4)+T_boolean;", "+\t\t//\ttable[(T_boolean<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_boolean<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_char<<4)+T_undefined] \t\t= T_undefined ;", "-\t\ttable[(T_char<<4)+T_byte] \t\t\t= (Char2Int<<12)+(Byte2Int<<4)+T_int ;", "+\t\t//\ttable[(T_char<<4)+T_undefined] \t\t= T_undefined;", "+\t\ttable[(T_char<<4)+T_byte] \t\t\t= (Char2Int<<12)+(Byte2Int<<4)+T_int;", "-\t\ttable[(T_char<<4)+T_short] \t\t\t= (Char2Int<<12)+(Short2Int<<4)+T_int ;", "-\t\t//\ttable[(T_char<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_float] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_char<<4)+T_boolean] \t\t= T_undefined ;", "-\t\ttable[(T_char<<4)+T_char] \t\t\t= (Char2Int<<12)+(Char2Int<<4)+T_int ;", "-\t\ttable[(T_char<<4)+T_int] \t\t\t= (Char2Int<<12)+(Int2Int<<4)+T_int ;", "-\t\t//\ttable[(T_char<<4)+T_null] \t\t\t= T_undefined ;", "+\t\ttable[(T_char<<4)+T_short] \t\t\t= (Char2Int<<12)+(Short2Int<<4)+T_int;", "+\t\t//\ttable[(T_char<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_float] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_char<<4)+T_boolean] \t\t= T_undefined;", "+\t\ttable[(T_char<<4)+T_char] \t\t\t= (Char2Int<<12)+(Char2Int<<4)+T_int;", "+\t\ttable[(T_char<<4)+T_int] \t\t\t= (Char2Int<<12)+(Int2Int<<4)+T_int;", "+\t\t//\ttable[(T_char<<4)+T_null] \t\t\t= T_undefined;", "-\t\t//\ttable[(T_int<<4)+T_undefined] \t= T_undefined ;", "-\t\ttable[(T_int<<4)+T_byte] \t\t= (Int2Int<<12)+(Byte2Int<<4)+T_int ;", "-\t\ttable[(T_int<<4)+T_long] \t\t= (Int2Long<<12)+(Long2Long<<4)+T_long ;", "-\t\ttable[(T_int<<4)+T_short] \t\t= (Int2Int<<12)+(Short2Int<<4)+T_int ;", "-\t\t//\ttable[(T_int<<4)+T_void] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_float] \t\t= T_undefined ;", "-\t\t//\ttable[(T_int<<4)+T_boolean] \t= T_undefined ;", "-\t\ttable[(T_int<<4)+T_char] \t\t= (Int2Int<<12)+(Char2Int<<4)+T_int ;", "-\t\ttable[(T_int<<4)+T_int] \t\t= (Int2Int<<12)+(Int2Int<<4)+T_int ;", "-\t\t//\ttable[(T_int<<4)+T_null] \t\t= T_undefined ;", "+\t\t//\ttable[(T_int<<4)+T_undefined] \t= T_undefined;", "+\t\ttable[(T_int<<4)+T_byte] \t\t= (Int2Int<<12)+(Byte2Int<<4)+T_int;", "+\t\ttable[(T_int<<4)+T_long] \t\t= (Int2Long<<12)+(Long2Long<<4)+T_long;", "+\t\ttable[(T_int<<4)+T_short] \t\t= (Int2Int<<12)+(Short2Int<<4)+T_int;", "+\t\t//\ttable[(T_int<<4)+T_void] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_float] \t\t= T_undefined;", "+\t\t//\ttable[(T_int<<4)+T_boolean] \t= T_undefined;", "+\t\ttable[(T_int<<4)+T_char] \t\t= (Int2Int<<12)+(Char2Int<<4)+T_int;", "+\t\ttable[(T_int<<4)+T_int] \t\t= (Int2Int<<12)+(Int2Int<<4)+T_int;", "+\t\t//\ttable[(T_int<<4)+T_null] \t\t= T_undefined;", "-\t\t//\ttable[(T_null<<4)+T_undefined] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_byte] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_long] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_short] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_void] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_String] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_Object] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_double] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_float] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_boolean] \t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_char] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_int] \t\t\t= T_undefined ;", "-\t\t//\ttable[(T_null<<4)+T_null] \t\t\t= T_undefined ;", "+\t\t//\ttable[(T_null<<4)+T_undefined] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_byte] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_long] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_short] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_void] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_String] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_Object] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_double] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_float] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_boolean] \t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_char] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_int] \t\t\t= T_undefined;", "+\t\t//\ttable[(T_null<<4)+T_null] \t\t\t= T_undefined;", "-\t\treturn table ;", "+\t\treturn table;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df28f0ce33fb29fdcb7f09540f4287e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfff59b16ca780e0d2925b86e1281206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void evaluate( \tchar[] codeSnippet,  \tchar[][] contextLocalVariableTypeNames, \tchar[][] contextLocalVariableNames,  \tint[] contextLocalVariableModifiers, \tchar[] contextDeclaringTypeName, \tboolean contextIsStatic, \tboolean contextIsConstructorCall, \tINameEnvironment environment,  \tMap options,  \tfinal IRequestor requestor,  \tIProblemFactory problemFactory) throws InstallException", "signatureAfterChange": " public void evaluate( \tchar[] codeSnippet,  \tchar[][] contextLocalVariableTypeNames, \tchar[][] contextLocalVariableNames,  \tint[] contextLocalVariableModifiers, \tchar[] contextDeclaringTypeName, \tboolean contextIsStatic, \tboolean contextIsConstructorCall, \tINameEnvironment environment,  \tMap options,  \tfinal IRequestor requestor,  \tIProblemFactory problemFactory) throws InstallException", "diff": ["-\t\t};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e200f7f2bfa9dda044da0dac8282c437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "bbe45833f0f4bb8e3281a3a949d4da891115a160", "commitAfterChange": "a2b797eb7226566ad166415dcfde6c744ad4c587", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void assertBindingsCreated(String[] pathAndSources, final String[] expectedKeys) throws JavaModelException", "signatureAfterChange": " \tprivate void assertBindingsCreated(String[] pathAndSources, final String[] expectedKeys) throws JavaModelException", "diff": ["-\t\t\t};", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3150d7c761fc9590837c32198b80553", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " protected TypeReference typeReference( \tint dim, \tint localIdentifierPtr,  \tint localIdentifierLengthPtr)", "signatureAfterChange": " protected TypeReference typeReference( \tint dim, \tint localIdentifierPtr,  \tint localIdentifierLengthPtr)", "diff": ["-\t};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3986760881757adf7dd1cbcbc328ae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testRenameSyntaxErrorMethod() throws CoreException", "signatureAfterChange": " public void testRenameSyntaxErrorMethod() throws CoreException", "diff": ["-\tIMethod method = getCompilationUnit(\"/P/src/Y.java\").getType(\"Y\").getMethod(\"foo\", null);;", "+\tIMethod method = getCompilationUnit(\"/P/src/Y.java\").getType(\"Y\").getMethod(\"foo\", null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee48fb4ebdb803b60c3689c66abbb500", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void selectType(ISourceType sourceType, char[] typeName, ISourceType[] topLevelTypes, boolean searchInEnvironment)", "signatureAfterChange": " \tpublic void selectType(ISourceType sourceType, char[] typeName, ISourceType[] topLevelTypes, boolean searchInEnvironment)", "diff": ["-\t\t\t\t};", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6acc98fb7f80ef54e9090a8d33825ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "8e33f97ee39e8610c3480bf6c8dc09b52195779b", "commitAfterChange": "fe0ff13a85af207787c3e61a795f2b7238947d6c", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  public void test44()", "signatureAfterChange": "  public void test44()", "diff": ["-\tString expectedCompletionDietUnitToString = expectedDietUnitToString;;", "+\tString expectedCompletionDietUnitToString = expectedDietUnitToString;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f72a5471c2d8f635b67043c557205d90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void printTrailingCommentForEmptyStatement()", "signatureAfterChange": "  \tpublic void printTrailingCommentForEmptyStatement()", "diff": ["-\t\t\t};", "+\t\t\t}"]}], "num": 17755}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b38489a25c80791435de8b9f9d1dd99", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2a0281d459b49ed3b370dc8f9e12234", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprivate IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tchar[][] definingTypeNames)", "signatureAfterChange": "\r \tprivate IMethod createMethodHandle(\r \t\tAbstractMethodDeclaration method,\r \t\tchar[][] definingTypeNames)", "diff": ["+\t\tif (type == null) return null;\r", "-\t\tString[] parameterTypeSignatures = new String[length];\r", "-\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tTypeReference parameterType = arguments[i].type;\r", "-\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "-\t\t\tfor (int j = 0; j < parameterType.dimensions(); j++) {\r", "-\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\tif (type.isBinary()) {\r", "+\t\t\tString selector = new String(method.selector);\r", "+\t\t\tIMethod[] methods;\r", "+\t\t\ttry {\r", "+\t\t\t\tmethods = type.getMethods();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\treturn null;\r", "-\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);\r", "+\t\t\tfor (int i = 0; i < methods.length; i++) {\r", "+\t\t\t\tIMethod methodHandle = methods[i];\r", "+\t\t\t\tif (methodHandle.getElementName().equals(selector) && length == methodHandle.getNumberOfParameters()) {\r", "+\t\t\t\t\tboolean sameParameters = true;\r", "+\t\t\t\t\tString[] parameterTypes = methodHandle.getParameterTypes();\r", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {\r", "+\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;\r", "+\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "+\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++) {\r", "+\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tString parameterTypeName = parameterTypes[j];\r", "+\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {\r", "+\t\t\t\t\t\t\tsameParameters = false;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (sameParameters) return methodHandle;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn null;\r", "+\t\t} else {\r", "+\t\t\tString[] parameterTypeSignatures = new String[length];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tTypeReference parameterType = arguments[i].type;\r", "+\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');\r", "+\t\t\t\tfor (int j = 0; j < parameterType.dimensions(); j++) {\r", "+\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);\r", "+\t\t\t}\r", "+\t\t\treturn type.getMethod(new String(method.selector), parameterTypeSignatures);\r", "-\t\treturn type.getMethod(new String(method.selector), parameterTypeSignatures);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b047e75ae169ec3239be3a248d5bc555", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "commitAfterChange": "a1fcf7304168cfe820abddf9b4c29fb602e9a7cd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-//??\tif(bindingType.isBinaryBinding()) return null;\r", "-\t\t\r", "+\r", "+\t\t\r", "+\t\t\t\t} else if(answer.isBinaryType()) {\r", "+\t\t\t\t\tIBinaryType binaryType = answer.getBinaryType();\r", "+\t\t\t\t\tIBinaryMethod[] binaryMethods = binaryType.getMethods();\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tfor(int i = 0; i < binaryMethods.length ; i++){\r", "+\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[i];\r", "+\t\t\t\t\t\tString[] argTypeStringNames = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "+\t\t\t\t\t\tchar[][] argTypeNames = new char[argTypeStringNames.length][];\r", "+\t\t\t\t\t\tfor(int j = 0; j < argTypeStringNames.length; j++){\r", "+\t\t\t\t\t\t\targTypeNames[j] = argTypeStringNames[j].toCharArray();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif(argTypeNames != null &&\r", "+\t\t\t\t\t\t\tCharOperation.equals(method.selector,binaryMethod.getSelector()) &&\r", "+\t\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){\r", "+\t\t\t\t\t\t\tparameterNames = binaryMethod.getArgumentNames();\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\r", "-\r", "+\t\t// default parameters name\r", "+\t\tif(parameterNames == null) {\r", "+\t\t\tparameterNames = new char[length][];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r"]}], "num": 46387}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c8bb58661af5c7494b74a7b24320ee1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cecab78eb93cc96e4929a86ee8c7cdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "515443afa63476354c141cf9420c616c6ee448d0", "commitAfterChange": "be3dcae21029dbb3f453eca15686a37b37ddca01", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\tFieldBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "-\t\t\t\tif (existingVariable instanceof FieldBinding) {", "-\t\t\t\t\tFieldBinding existingField = (FieldBinding) existingVariable;", "-\t\t\t\t\tif (existingField.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "-\t\t\t\t\tif (!existingField.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario", "-\t\t\t\t}", "+\t\t\t\tif (existingVariable.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\tif (!existingVariable.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f2b0253373363ce459f6cc8a3591213", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "cb1229e517a2018e5263ed249b199ae2a321da49", "commitAfterChange": "4732df192beaa38106d940c4bfeefb54a9e4a1cf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tFieldBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "-\t\t\t\tif (existingVariable.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "-\t\t\t\tif (!existingVariable.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\tif (existingVariable instanceof FieldBinding) {", "+\t\t\t\t\tFieldBinding existingField = (FieldBinding) existingVariable;", "+\t\t\t\t\tif (existingField.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t\tif (!existingField.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bf778c46ef1c258f44c02ebd649cce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "7ff2c64bcedb0278ce3a0fd328057a1eb9f06dc8", "commitAfterChange": "4308596b1c1f07fe83eab35ed5a705ab67283da2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "+\t\t\t\tFieldBinding existingVariable = classScope.findField(declaringType.superclass, this.name, this,  false /*do not resolve hidden field*/);", "-\t\t\t\tif (existingVariable instanceof FieldBinding) {", "-\t\t\t\t\tFieldBinding existingField = (FieldBinding) existingVariable;", "-\t\t\t\t\tif (existingField.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "-\t\t\t\t\tif (!existingField.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario", "-\t\t\t\t}", "+\t\t\t\tif (existingVariable.original() == this.binding) break checkHidingSuperField; // keep checking outer scenario", "+\t\t\t\tif (!existingVariable.canBeSeenBy(declaringType, this, initializationScope)) break checkHidingSuperField; // keep checking outer scenario"]}], "num": 10441}
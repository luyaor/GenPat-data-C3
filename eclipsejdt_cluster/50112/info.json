{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "253e97f4add344c47a7832c2f6841345", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0972cfe21279b13af40c0ad934add438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test399793b() throws JavaModelException", "signatureAfterChange": " \tpublic void test399793b() throws JavaModelException", "diff": ["-\t\tassertEquals(\"public int foo(int) \", binding.toString());", "+\t\tassertEquals(\"private static int lambda$0(int) \", binding.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1716dc2444530dc3be6c6eeb2cfb8452", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic void test032a()", "signatureAfterChange": " \tpublic void test032a()", "diff": ["-\t\t\t\"The return types are incompatible for the inherited methods J.foo(), I.foo()\\n\" +", "+\t\t\t\"The return types are incompatible for the inherited methods I.foo(), J.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d2ec8c50df5f55dab529c87e0f3397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "c200ff6a2e44d13b91c04a3bdf5e1a8816f5d7d7", "commitAfterChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private String getVerifyTestsCode()", "signatureAfterChange": " private String getVerifyTestsCode()", "diff": ["-\t\t\"\t\tif (name.startsWith(\\\"java\\\"))\\n\" + ", "+\t\t\"\t\tif (name.startsWith(\\\"java\\\") || name.startsWith(\\\"[Ljava\\\"))\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19306839a5724a2ae565f546ce3dc848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 414, "methodNumberAfterChange": 414, "signatureBeforeChange": " public void test354229c()", "signatureAfterChange": " public void test354229c()", "diff": ["-\t\t\t\t\t\"Name clash: The method e(Action<T>) of type X has the same erasure as e(Action<S>) of type Y but does not override it\\n\" + ", "+\t\t\t\t\t\"Name clash: The method e(Action<S>) of type Y has the same erasure as e(Action<T>) of type X but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dace2df045419704bed1893f7463919", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 242, "methodNumberAfterChange": 242, "signatureBeforeChange": " public void test0556_try_catch()", "signatureAfterChange": " public void test0556_try_catch()", "diff": ["-\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" +", "+\t\t\"Null pointer access: The variable o can only be null at this location\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "248adfafd27cb84f3af308c2d0a6e2e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "01507ee98d5beecae71082dd137e782bb5a3bef0", "commitAfterChange": "919024c6945d276058446a723145394a23656d2f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "     public void testBug376930_5c() throws Exception", "signatureAfterChange": "     public void testBug376930_5c() throws Exception", "diff": ["-\t\t\t\t\"import java.util.Map.*;\\n\" + ", "+\t\t\t\t\"import java.util.Map.*; \" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0287e62f3acf962e41899d99d1da27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void test095()", "signatureAfterChange": " public void test095()", "diff": ["-\t\t\"The type X must implement the inherited abstract method I.foo()\\n\" +", "+\t\t\"The type X must implement the inherited abstract method J.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ed47e2f8301ae892ed233a7d0c71177", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 1273, "methodNumberAfterChange": 1273, "signatureBeforeChange": " public void test1239()", "signatureAfterChange": " public void test1239()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods X.OtherSubInterface.and(X.SuperInterface), X.SubInterface.and(X.SuperInterface)\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods X.SubInterface.and(X.SuperInterface), X.OtherSubInterface.and(X.SuperInterface)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ebb08d89286bab50debc65f8a9a51f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "e37ddd2cb60251da977bfe008d0c558febeb1616", "commitAfterChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testAbstract05()", "signatureAfterChange": " \tpublic void testAbstract05()", "diff": ["-\t\t\t\"Duplicate methods named value1 with the parameters () and () are inherited from the types I2 and I1\\n\" + ", "+\t\t\t\"Duplicate default methods named value1 with the parameters () and () are inherited from the types I2 and I1\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50cb13b5f0793c2707a9e1b74623e271", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void test0043_autoboxing_literal()", "signatureAfterChange": " public void test0043_autoboxing_literal()", "diff": ["-\t\t\t\"Null pointer access: The variable i can only be null at this location\\n\" +", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53799d33611dc15cea36470bcdd9a5ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void test0023()", "signatureAfterChange": " public void test0023()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "-\t\t\"\timport static for;\\n\" +", "-\t\t\"\t              ^^^\\n\" +", "-\t\t\"Syntax error on token \\\"for\\\", Identifier expected\\n\" +", "-\t\t\"----------\\n\";", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\timport static for;\\n\" + ", "+\t\t\t\"\t              ^^^\\n\" + ", "+\t\t\t\"Syntax error on token \\\"for\\\", invalid Name\\n\" + ", "+\t\t\t\"----------\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57bf5f82d2bc421b7529de7025f05024", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test399793d() throws JavaModelException", "signatureAfterChange": " \tpublic void test399793d() throws JavaModelException", "diff": ["-\t\tassertEquals(\"public void doit() \", binding.toString());", "+\t\tassertEquals(\"private static void lambda$0() \", binding.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f04e0def69a1d611720a1effce6580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "418e34f57c9f7842d3534af171e657c264f02dd7", "commitAfterChange": "42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c", "methodNumberBeforeChange": 447, "methodNumberAfterChange": 452, "signatureBeforeChange": " public void testBug319201b()", "signatureAfterChange": " public void testBug319201b()", "diff": ["-\t\t\t\"Null pointer access: The variable bo can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "716beaf9d9593ac3f14b23e0b70f9c56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void testInheritedDefaultOverrides03()", "signatureAfterChange": " \tpublic void testInheritedDefaultOverrides03()", "diff": ["-\t\t\t\t\"\tString foo(List l) default { return \\\"\\\"; }\\n\" +", "+\t\t\t\t\"\tdefault String foo(List l) { return \\\"\\\"; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75e4368b8bcc6b958bb2e91d75a37e9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "commitAfterChange": "a8944173670c6319cce2438add6b3e87f478a46c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test_nonnull_list_elements_03()", "signatureAfterChange": " \tpublic void test_nonnull_list_elements_03()", "diff": ["-\t\t\t\t  \"    void bar(@Nullable java.util.List<@NonNull java.lang.Object> l) {\\n\" +", "+\t\t\t\t  \"    void bar(@Nullable List<@NonNull Object> l) {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778b9f66fca49902e3d289b0c69d03ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 290, "signatureBeforeChange": " public void test140()", "signatureAfterChange": " public void test140()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods K.foo(Number), J.foo(Number)\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.foo(Number), K.foo(Number)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7311a6f930d653f0930831e4033574", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test_nestedType_04()", "signatureAfterChange": " \tpublic void test_nestedType_04()", "diff": ["-\t\t\t\"Potential null pointer access: The variable ai may be null at this location\\n\" + ", "+\t\t\t\"Potential null pointer access: this expression has a '@Nullable' type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8990b51ce3715ad4ad2c69d9af44e468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "3e03e3984540d3907fa7739b419f89dad9725944", "commitAfterChange": "1c1d418ad63ddf8e8c36736ccc520ce9790f3c20", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["-\t\texpectedProblemAttributes.put(\"IllegalModifiersForPackage\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifiers\", SKIP);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8be79a6cfdad42d8c600b27e781a95e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "b56ee0a29e919d047b98aed991f4d73be016ed08", "commitAfterChange": "079de37f5a5bae65a968aa0699ca7ca223c351c8", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "\r public void test0060() throws IOException", "signatureAfterChange": "\r public void test0060() throws IOException", "diff": ["-\t\t\"    x = (Integer) (@Readonly Object) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Normal(Value = 0) [][]) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @SingleMember(0) [][]) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Marker [][]) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Normal(Value = 0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @SingleMember(0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Marker [][]) (@Readonly Object) (@Readonly String[] @Normal(Value = 0) [][]) (@Readonly String[] @SingleMember(0) [][]) (@Readonly String[] @Marker [][]) (@Readonly Object) (@Readonly int[] @Normal(Value = 0) [][]) (@Readonly int[] @SingleMember(0) [][]) (@Readonly int[] @Marker [][]) (@Readonly Object) ( @Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>) (@Readonly Object) (@ReadOnly String) (@Readonly Object) (@Readonly int) 10;\\n\" + \r", "+\t\t\"    x = (Integer) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Normal(Value = 0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @SingleMember(0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator[] @Marker [][]) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Normal(Value = 0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @SingleMember(0) [][]) (@Readonly HashMap<@Positive Integer, @Negative Integer>[] @Marker [][]) (@Readonly Object) (@Readonly String[] @Normal(Value = 0) [][]) (@Readonly String[] @SingleMember(0) [][]) (@Readonly String[] @Marker [][]) (@Readonly Object) (@Readonly int[] @Normal(Value = 0) [][]) (@Readonly int[] @SingleMember(0) [][]) (@Readonly int[] @Marker [][]) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>.Iterator) (@Readonly Object) (@Readonly HashMap<@Positive Integer, @Negative Integer>) (@Readonly Object) (@ReadOnly String) (@Readonly Object) (@Readonly int) 10;\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9121f5b7bf91841fdcc02a342f70f253", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 447, "methodNumberAfterChange": 452, "signatureBeforeChange": " public void testBug319201b()", "signatureAfterChange": " public void testBug319201b()", "diff": ["-\t\t\t\"Null pointer access: The variable bo can only be null at this location\\n\" + ", "+\t\t\t\"Null pointer access: This expression of type Boolean is null but requires auto-unboxing\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917305eda02db033db0e6214d4b4b2ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d32dbe370312bc68ef5b59c6268bfdfcda839b17", "commitAfterChange": "4b84620f8d71e6de7e42a2050aa5360e2143f846", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": " \tpublic void test0225()", "signatureAfterChange": " \tpublic void test0225()", "diff": ["-\t\t\t\"The parameter t is hiding another local variable defined in an enclosing type scope\\n\" +", "+\t\t\t\"The parameter t is hiding another local variable defined in an enclosing scope\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "971c9deb685d7bf70d989a719a5b61eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test399793a() throws JavaModelException", "signatureAfterChange": " \tpublic void test399793a() throws JavaModelException", "diff": ["-\t\tassertEquals(\"public int foo(int) \", binding.toString());", "+\t\tassertEquals(\"private static int lambda$0(int) \", binding.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a03d5616f3090c0879991ba499e18a9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "ac89e34b658454668afe2f1f4be9617e74cd6624", "commitAfterChange": "5ea91ed47e2e2277fa878fc631fcabfaf9ef89b3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "\r \tpublic void test065() throws Exception", "signatureAfterChange": "\r \tpublic void test065() throws Exception", "diff": ["-\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + \r", "+\t\t\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0a646c00eaded89ea1b30f99886be10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java", "commitBeforeChange": "31085e35ec6546fd0ce14d2c37082b7385a37318", "commitAfterChange": "9bafd098a4f01cb487df1e23626d9ca01b29c273", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tstatic final ChildListPropertyDescriptor internalExtraDimensions2PropertyFactory(Class nodeClass)", "signatureAfterChange": " \tstatic final ChildListPropertyDescriptor internalExtraDimensions2PropertyFactory(Class nodeClass)", "diff": ["-\t\treturn \tnew ChildListPropertyDescriptor(nodeClass, \"extraDimensions\", ExtraDimension.class, CYCLE_RISK); //$NON-NLS-1$", "+\t\treturn \tnew ChildListPropertyDescriptor(nodeClass, \"extraDimensions2\", ExtraDimension.class, CYCLE_RISK); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf90196dc98414124d01eaa079f1a76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testAbstract04()", "signatureAfterChange": " \tpublic void testAbstract04()", "diff": ["-\t\t\t\t\"    void test() default {}\\n\" +", "+\t\t\t\t\"    default void test() {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b16789b84e6c3ab0a14138eafd81db81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36a51a13ad828c97235dbbd0618742a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "67643a7c27a6d261feaad810d2590f1f6d33b749", "commitAfterChange": "da7a5227e034c2b6c8a4762e61c3ccf43066f02e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test0041_autoboxing_increment_operator()", "signatureAfterChange": " public void test0041_autoboxing_increment_operator()", "diff": ["-\t\t\t\"Null pointer access: The variable i can only be null at this location\\n\" +", "+\t\t\t\"Null pointer access: This expression of type Integer is null but requires auto-unboxing\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b592ce30b14c7ea566120c46ee2e99c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastingContextTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void test001()", "signatureAfterChange": " public void test001()", "diff": ["-\t\t\t\t\"\tvoid doitalso () default {}\\n\" +", "+\t\t\t\t\"\tdefault void doitalso () {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b852254b5a4ad6707e04b4478e8ed8eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "commitAfterChange": "39c80376eb5a4ddf3b0cc660e46c4e7575c329d8", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testStaticMethod04()", "signatureAfterChange": " \tpublic void testStaticMethod04()", "diff": ["-\t\t\t\t\"The method bar() is undefined for the type I\\n\" + ", "+\t\t\t\t\"This static method of interface I can only be accessed as I.bar\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d84ab4f8da1267d4d0363c85ef52f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "bd260a80ad431844690d641f800683459b9c2904", "commitAfterChange": "153b885ea368bcdf606fcdf8ffbb265189dbdbee", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 290, "signatureBeforeChange": " public void test140()", "signatureAfterChange": " public void test140()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods I.foo(Number), K.foo(Number), J.foo(Number)\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods K.foo(Number), J.foo(Number)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5a80ff4b227fd56c3efd1a9bad6c885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void test036d()", "signatureAfterChange": " \tpublic void test036d()", "diff": ["-\t\t\t\t\t\"Name clash: The method equalTo(T) of type Equivalent<T> has the same erasure as equalTo(T) of type EqualityComparable<T> but does not override it\\n\" + ", "+\t\t\t\t\t\"Name clash: The method equalTo(T) of type EqualityComparable<T> has the same erasure as equalTo(T) of type Equivalent<T> but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5b94943edfe00b4fa20fc68fefcac33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 290, "signatureBeforeChange": " public void test140()", "signatureAfterChange": " public void test140()", "diff": ["-\t\t\"The return types are incompatible for the inherited methods K.foo(Number), J.foo(Number)\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.foo(Number), K.foo(Number)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6f48a57fb9e70b478ae439cfcbcd585", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "commitAfterChange": "39c80376eb5a4ddf3b0cc660e46c4e7575c329d8", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testStaticMethod02()", "signatureAfterChange": " \tpublic void testStaticMethod02()", "diff": ["-\t\t\t\t\"The method foo() is undefined for the type I\\n\" + ", "+\t\t\t\t\"This static method of interface I can only be accessed as I.foo\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d138fbaeef5457bad2100d06e40a8864", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test399793c() throws JavaModelException", "signatureAfterChange": " \tpublic void test399793c() throws JavaModelException", "diff": ["-\t\tassertEquals(\"public java.lang.Object foo(int[]) \", binding.toString());", "+\t\tassertEquals(\"private static java.lang.Object lambda$0(int[]) \", binding.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ab9b039777cc06c70397237cb50e9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LookupTest.java", "commitBeforeChange": "8dc325b5ad83fe486573fca06bedec7b37f7c533", "commitAfterChange": "1aef615a23a262f5caabd6f48d0a4c046ef230b8", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " public void test090()", "signatureAfterChange": " public void test090()", "diff": ["-\t\t\"Illegal modifier for the method foo; only public, protected, private, static, final, abstract, synchronized & native are permitted\\n\" + ", "+\t\t\"Illegal modifier for the method foo; only public, protected, private, static, final, abstract, synchronized, strictfp & native are permitted\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a86e4f0691edb565ed414a5de407bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testInheritedDefaultOverrides04()", "signatureAfterChange": " \tpublic void testInheritedDefaultOverrides04()", "diff": ["-\t\t\t\t\"\tString foo(List<String> l) default { return \\\"\\\"; }\\n\" +", "+\t\t\t\t\"\tdefault String foo(List<String> l) { return \\\"\\\"; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da39dd254f216ab19c3fdb32a3f3d8ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "b56ee0a29e919d047b98aed991f4d73be016ed08", "commitAfterChange": "079de37f5a5bae65a968aa0699ca7ca223c351c8", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "\r public void test0061() throws IOException", "signatureAfterChange": "\r public void test0061() throws IOException", "diff": ["-\t\t\"    x = (Integer) (Object) ( @Readonly HashMap<Integer, @Negative Integer>.Iterator[] @Normal(Value = 0) [][]) (HashMap<@Positive Integer, Integer>.Iterator[] @SingleMember(0) [][]) ( @Readonly HashMap<Integer, @Negative Integer>.Iterator[] @Marker [][]) (Object) (@Readonly HashMap<@Positive Integer, Integer>[] @Normal(Value = 0) [][]) (HashMap<Integer, @Negative Integer>[] @SingleMember(0) [][]) (@Readonly HashMap<@Positive Integer, Integer>[] @Marker [][]) (Object) (@Readonly String[] @Normal(Value = 0) [][]) (String[] @SingleMember(0) [][]) (@Readonly String[] @Marker [][]) (Object) (@Readonly int[] @Normal(Value = 0) [][]) (int[] @SingleMember(0) [][]) (@Readonly int[] @Marker [][]) (Object) ( @Readonly HashMap<Integer, @Negative Integer>.Iterator) (Object) (@Readonly HashMap<@Positive Integer, Integer>) (Object) (@ReadOnly String) (Object) (@Readonly int) 10;\\n\" + \r", "+\t\t\"    x = (Integer) (Object) (@Readonly HashMap<Integer, @Negative Integer>.Iterator[] @Normal(Value = 0) [][]) (HashMap<@Positive Integer, Integer>.Iterator[] @SingleMember(0) [][]) (@Readonly HashMap<Integer, @Negative Integer>.Iterator[] @Marker [][]) (Object) (@Readonly HashMap<@Positive Integer, Integer>[] @Normal(Value = 0) [][]) (HashMap<Integer, @Negative Integer>[] @SingleMember(0) [][]) (@Readonly HashMap<@Positive Integer, Integer>[] @Marker [][]) (Object) (@Readonly String[] @Normal(Value = 0) [][]) (String[] @SingleMember(0) [][]) (@Readonly String[] @Marker [][]) (Object) (@Readonly int[] @Normal(Value = 0) [][]) (int[] @SingleMember(0) [][]) (@Readonly int[] @Marker [][]) (Object) (@Readonly HashMap<Integer, @Negative Integer>.Iterator) (Object) (@Readonly HashMap<@Positive Integer, Integer>) (Object) (@ReadOnly String) (Object) (@Readonly int) 10;\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3d517b589b03d92f01e7e9bd5d9f9f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["-\t\t\t\t\t\"Name clash: The method method(E1) of type X.I1<E1> has the same erasure as method(E2) of type X.I2<E2> but does not override it\\n\" + ", "+\t\t\t\t\t\"Name clash: The method method(E2) of type X.I2<E2> has the same erasure as method(E1) of type X.I1<E1> but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1515541a3011aa8f7333f14fa502e42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testAbstract03a()", "signatureAfterChange": " \tpublic void testAbstract03a()", "diff": ["-\t\t\t\t\"    void test() default {}\\n\" +", "+\t\t\t\t\"    default void test() {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f75085cf51e399601a7b962408446da4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DefaultMethodsTest.java", "commitBeforeChange": "2adf5e7af76ae05ae6976726576af8c12845ba88", "commitAfterChange": "f8ad0d5bfc02915772c8bb705662d0256beab7ec", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testModifiers6()", "signatureAfterChange": " \tpublic void testModifiers6()", "diff": ["-\t\t\t\t\"    void foo() default {}\\n\" +", "+\t\t\t\t\"    default void foo() {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf07f077105d78c469fe998cfaf3567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ImportRewriteTest.java", "commitBeforeChange": "2c31016dddf9aa4fc99eb36c535dd6602745e4be", "commitAfterChange": "fd3b7a5f13831ab502da35b25283f8932b2b1174", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "     public void testBug376930_5c() throws Exception", "signatureAfterChange": "     public void testBug376930_5c() throws Exception", "diff": ["-\t\t\t\t\"import java.util.Map.*;\\n\" + ", "+\t\t\t\t\"import java.util.Map.*; \" + "]}], "num": 50112}
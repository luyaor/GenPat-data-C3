{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5b02c5a39dc21d65aaa20d452c71244", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3cfa6091727fd6c80bbeb7bc81ceebe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "a5c56b9d9a1a6a7a2412b9e4fe79595e9a454729", "commitAfterChange": "808f8a4c125739a8b2d2237ba90c04dc1390f0b7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "signatureAfterChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "diff": ["-\t\tif (type instanceof ParameterizedSourceType) {", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(((ParameterizedSourceType)type).genericTypeSignature);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else if (type instanceof ParameterizedBinaryType) {", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(((ParameterizedBinaryType)type).genericTypeSignature);", "+\t\tif (type.isParameterized()) {", "+\t\t\tString signature = new BindingKey(type.getKey()).toSignature();", "+\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4fe3676ab24c235a614faddc09216a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "35a336ae4dee8fe75706ce1a1ce1cfa86d2ad222", "commitAfterChange": "4e63b50ba3ef9bcdccdff9a2ea673562f37143e4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate boolean addConstraintsToC_OneExpr(Expression expri, Set<ConstraintFormula> c, TypeBinding fsi, TypeBinding substF, MethodBinding method, boolean interleaved) throws InferenceFailureException", "signatureAfterChange": "  \tprivate boolean addConstraintsToC_OneExpr(Expression expri, Set<ConstraintFormula> c, TypeBinding fsi, TypeBinding substF, MethodBinding method, boolean interleaved) throws InferenceFailureException", "diff": ["+\t\t\tExpression[] arguments = invocation.arguments();", "+\t\t\tTypeBinding[] argumentTypes = arguments == null ? Binding.NO_PARAMETERS : new TypeBinding[arguments.length];", "+\t\t\tfor (int i = 0; i < argumentTypes.length; i++)", "+\t\t\t\targumentTypes[i] = arguments[i].resolvedType;", "+\t\t\tint applicabilityKind;", "+\t\t\tInferenceContext18 innerContext = null;", "+\t\t\tif (innerMethod instanceof ParameterizedGenericMethodBinding)", "+\t\t\t\t innerContext = invocation.getInferenceContext((ParameterizedGenericMethodBinding) innerMethod);", "+\t\t\tapplicabilityKind = innerContext != null ? innerContext.inferenceKind : getInferenceKind(innerMethod, argumentTypes);", "+\t\t\t", "-\t\t\t\t\tExpression[] arguments = invocation.arguments();", "-\t\t\t\t\tTypeBinding[] argumentTypes = arguments == null ? Binding.NO_PARAMETERS : new TypeBinding[arguments.length];", "-\t\t\t\t\tfor (int i = 0; i < argumentTypes.length; i++)", "-\t\t\t\t\t\targumentTypes[i] = arguments[i].resolvedType;", "-\t\t\t\t\tif (innerMethod instanceof ParameterizedGenericMethodBinding) {", "-\t\t\t\t\t\tInferenceContext18 innerCtx = invocation.getInferenceContext((ParameterizedGenericMethodBinding) innerMethod);", "-\t\t\t\t\t\tthis.inferenceKind = innerCtx.inferenceKind;", "-\t\t\t\t\t}", "+\t\t\t\t\tthis.inferenceKind = applicabilityKind;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tint applicabilityKind = CHECK_LOOSE;  // FIXME, for <> resolving to a non-generic method, this need to be computed.", "-\t\t\tif (innerMethod instanceof ParameterizedGenericMethodBinding) {", "-\t\t\t\tInferenceContext18 innerCtx = invocation.getInferenceContext((ParameterizedMethodBinding) innerMethod);", "-\t\t\t\tif (innerCtx != null) {", "-\t\t\t\t\tapplicabilityKind = innerCtx.inferenceKind;"]}], "num": 11484}
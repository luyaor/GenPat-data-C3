{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9f51a8c01506b4b56612430012ff26c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89c246320bc789704af81c932d3db5fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 40, "signatureBeforeChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": "\t \t \tpublic MethodBinding findMethod0(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite, APPLICABILITY);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-// ==== 1.8: Finalize type inference of generic methods: ====", "-\t\t\t\t\t\t\tMethodBinding improved = inferInvocationType(invocationSite, compatibleMethod, argumentTypes);", "-\t\t\t\t\t\t\tif (improved != null && improved.isValidBinding()) {", "-\t\t\t\t\t\t\t\tcompatibleMethod = improved;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tproblemMethod = improved;", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-// ==== 1.8 ====", "-\t\t\t\t// 1.8: Give inference a chance to perform outstanding tasks (18.5.2):", "-\t\t\t\tcandidate = inferInvocationType(invocationSite, candidates[0], argumentTypes);", "+\t\t\t\tcandidate = candidates[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9d6eb420d257b32ace44a76a04b2493", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite, APPLICABILITY);", "+// ==== 1.8: Finalize type inference of generic methods: ====", "+\t\t\t\t\t\t\tMethodBinding improved = inferInvocationType(invocationSite, compatibleMethod, argumentTypes);", "+\t\t\t\t\t\t\tif (improved.isValidBinding()) {", "+\t\t\t\t\t\t\t\tcompatibleMethod = improved;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tproblemMethod = improved;", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+// ==== 1.8 ====", "-\t\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\t\treturn candidates[0];", "+\t\t\t\t// 1.8: Give inference a chance to perform outstanding tasks (18.5.2):", "+\t\t\t\tcandidate = inferInvocationType(invocationSite, candidates[0], argumentTypes);", "+\t\t\t\tunitScope.recordTypeReferences(candidate.thrownExceptions);", "+\t\t\t\treturn candidate;"]}], "num": 21771}
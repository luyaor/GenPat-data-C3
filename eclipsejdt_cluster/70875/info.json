{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d13228ea726eb7b05e0c0334ca882cd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265be209ba783a6e45c3305ade37cf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "cb1176594034666f0f8d852dc8fc01987d54d11b", "commitAfterChange": "0096213f4b70c6196247b76dbfbdc7d2b6019590", "methodNumberBeforeChange": 819, "methodNumberAfterChange": 819, "signatureBeforeChange": " public void test813()", "signatureAfterChange": " public void test813()", "diff": ["-\tthis.runNegativeTest(", "+\tthis.runConformTest(", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"\tprivate T t;\\n\" + ", "-\t\t\"\t          ^\\n\" + ", "-\t\t\"The field X<T>.t is never read locally\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\"\tprivate X<?>.Inner[] inners;\\n\" + ", "-\t\t\"\t                     ^^^^^^\\n\" + ", "-\t\t\"The field X<T>.inners is never read locally\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tthis.inners = new X<?>.Inner[10];\\n\" + ", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot create a generic array of X<?>.Inner\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c04aada423f0af06d367341d2b67ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "c655d92a48125fd6350084ea43e33652c64e04fa", "commitAfterChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testBug45596a()", "signatureAfterChange": " \tpublic void testBug45596a()", "diff": ["-\t\tthis.runNegativeTest(", "+\t\tthis.runConformTest(", "-\t\t\"X.java\",", "-\t\t\"public class X {\\n\" + ", "-\t\t\"\tvoid foo(int x, String str) {}\\n\" + ", "-\t\t\"}\\n\",", "-\t\t\"Y1.java\",", "-\t\t\"public class Y1 {\\n\" + ", "-\t\t\"\t/** */\\n\" + ", "-\t\t\"\tprotected X field = new X() {\\n\" + ", "-\t\t\"\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "-\t\t\"\t\tvoid foo(String str) {}\\n\" + ", "-\t\t\"\t};\\n\" + ", "-\t\t\"}\\n\",", "-\t\t\"Y2.java\",", "-\t\t\"public class Y2 {\\n\" + ", "-\t\t\"\t/** */\\n\" + ", "-\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\"\t\tX x = new X() {\\n\" + ", "-\t\t\"\t\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "-\t\t\"\t\t\tvoid foo(String str) {}\\n\" + ", "-\t\t\"\t\t};\\n\" + ", "-\t\t\"\t\tx.foo(0, \\\"\\\");\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\",", "-\t\t\"Y3.java\",", "-\t\t\"public class Y3 {\\n\" + ", "-\t\t\"\tstatic X x;\\n\" + ", "-\t\t\"\tstatic {\\n\" + ", "-\t\t\"\t\tx = new X() {\\n\" + ", "-\t\t\"\t\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "-\t\t\"\t\t\tvoid foo(String str) {}\\n\" + ", "-\t\t\"\t\t};\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\" },", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "-\t\t\"\tvoid foo(String str) {}\\n\" + ", "-\t\t\"\t                ^^^\\n\" + ", "-\t\t\"Javadoc: Missing tag for parameter str\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in Y2.java (at line 6)\\n\" + ", "-\t\t\"\tvoid foo(String str) {}\\n\" + ", "-\t\t\"\t                ^^^\\n\" + ", "-\t\t\"Javadoc: Missing tag for parameter str\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in Y3.java (at line 6)\\n\" + ", "-\t\t\"\tvoid foo(String str) {}\\n\" + ", "-\t\t\"\t                ^^^\\n\" + ", "-\t\t\"Javadoc: Missing tag for parameter str\\n\" + ", "-\t\t\"----------\\n\"", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid foo(int x, String str) {}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"Y1.java\",", "+\t\t\t\t\"public class Y1 {\\n\" + ", "+\t\t\t\t\"\t/** */\\n\" +", "+\t\t\t\t\"\tprotected X field = new X() {\\n\" + ", "+\t\t\t\t\"\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "+\t\t\t\t\"\t\tvoid foo(String str) {}\\n\" + ", "+\t\t\t\t\"\t};\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"Y2.java\",", "+\t\t\t\t\"public class Y2 {\\n\" + ", "+\t\t\t\t\"\t/** */\\n\" + ", "+\t\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\tX x = new X() {\\n\" + ", "+\t\t\t\t\"\t\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "+\t\t\t\t\"\t\t\tvoid foo(String str) {}\\n\" + ", "+\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\"\t\tx.foo(0, \\\"\\\");\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"Y3.java\",", "+\t\t\t\t\"public class Y3 {\\n\" + ", "+\t\t\t\t\"\tstatic X x;\\n\" + ", "+\t\t\t\t\"\tstatic {\\n\" + ", "+\t\t\t\t\"\t\tx = new X() {\\n\" + ", "+\t\t\t\t\"\t\t\t/** Invalid javadoc comment in anonymous class */\\n\" + ", "+\t\t\t\t\"\t\t\tvoid foo(String str) {}\\n\" + ", "+\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" } /*,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tvoid foo(String str) {}\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter str\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in Y2.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tvoid foo(String str) {}\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter str\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in Y3.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tvoid foo(String str) {}\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter str\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9daa430f4b5fa4bf070df0079d3696af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 116, "signatureBeforeChange": " public void test119()", "signatureAfterChange": " public void test119()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\"\tvoid baz() {\\n\" +", "-\t\t\t\"\t     ^^^^^\\n\" +", "-\t\t\t\"The method baz() from the type new Object(){} is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\"\tvoid baz() {\\n\" +", "-\t\t\t\"\t     ^^^^^\\n\" +", "-\t\t\t\"The method baz() from the type Local is never used locally\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 35)\\n\" +", "-\t\t\t\"\tvoid baz() {\\n\" +", "-\t\t\t\"\t     ^^^^^\\n\" +", "-\t\t\t\"The method baz() from the type new Object(){} is never used locally\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b94f1eaef305e2549a30cbf3ff6e14d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d96b4f2d2690a613d86ff8a25f7f4e62c3b517ac", "commitAfterChange": "341ead40b71a0bffec0f8325f6b29d2b567caf8a", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void test428177()", "signatureAfterChange": " public void _test428177()", "diff": ["-public void test428177() {", "+public void _test428177() {", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 36)\\n\" + ", "-\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "-\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture#16-of ? extends String> to Stream<String>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"valid error messages go here - some are expected since javac also complains\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be289e72bfa3478b96ec6de6bff2c4cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "9d104d945debc84d285485abce2b81da74ac98c5", "commitAfterChange": "55b8138a08d89b11e13e7b2e4131608d674ff549", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void _test425152()", "signatureAfterChange": " public void test425152()", "diff": ["-public void _test425152() {", "-\trunNegativeTest(", "+public void test425152() {", "+\trunConformTest(", "-\t\t\t\"X.java\",", "+\t\t\t\"Main.java\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tSet<Z> x = foo(Set::new);\\n\" + ", "-\t\t\"\t    ^\\n\" + ", "-\t\t\"Z cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tSet<Z> x = foo(Set::new);\\n\" + ", "-\t\t\"\t           ^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from Collection<Object> to Set<Z>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tSet<Z> x = foo(Set::new);\\n\" + ", "-\t\t\"\t               ^^^\\n\" + ", "-\t\t\"Cannot instantiate the type Set\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cef5c0185ce7b54b11e1e89e9a26d478", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bef3e5a79fe47869598af3178c0ba26481433802", "commitAfterChange": "6e6f51aebf98352a0ce0c363fefcb4659f1b5e8a", "methodNumberBeforeChange": 702, "methodNumberAfterChange": 702, "signatureBeforeChange": " public void _test700()", "signatureAfterChange": " public void _test700()", "diff": ["-\t\t\t\"class X extends BaseFactory<String> implements StringFactory {\\n\" + ", "+\t\t\t\"public class X extends BaseFactory<String> implements StringFactory {\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X2.java (at line 6)\\n\" + ", "-\t\t\"\tOther2<? extends List<Throwable>> other1;\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends List<Throwable> is not a valid substitute for the bounded parameter <T extends List<Runnable>> of the type Other2<T>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X2.java (at line 7)\\n\" + ", "-\t\t\"\tOther2<? extends List<? super String>> other2;\t\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends List<? super String> is not a valid substitute for the bounded parameter <T extends List<Runnable>> of the type Other2<T>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X2.java (at line 8)\\n\" + ", "-\t\t\"\tOther2<? extends List<? extends String>> other3;\t\t\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Bound mismatch: The type ? extends List<? extends String> is not a valid substitute for the bounded parameter <T extends List<Runnable>> of the type Other2<T>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"We have \\'\\' of type class java.lang.String\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1028062fff30735323b7fac4daaf3c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "02d4f1049999a6639faf6572ec12176fbdb0f122", "commitAfterChange": "fecb7356870e11bfa0606dab85da0b88f89888ac", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void testBug429490()", "signatureAfterChange": " public void testBug429490()", "diff": ["-\trunNegativeTest(", "+\trunConformTest(", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in Junk11.java (at line 5)\\n\" + ", "-\t\t\"\tpublic void invalidated(Observable observable);\\n\" + ", "-\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "-\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in Junk11.java (at line 19)\\n\" + ", "-\t\t\"\tpublic void invalidated(Observable o) {throw new RuntimeException();}\\n\" + ", "-\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "-\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in Junk11.java (at line 21)\\n\" + ", "-\t\t\"\taddListener(null, null, (o) -> {throw new RuntimeException();});\\n\" + ", "-\t\t\"\t^^^^^^^^^^^\\n\" + ", "-\t\t\"The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11\\n\" +", "-\t\t\"----------\\n\");", "+\t\t});", "+//\tTODO: spec'd error:", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"1. WARNING in Junk11.java (at line 5)\\n\" + ", "+//\t\t\t\"\tpublic void invalidated(Observable observable);\\n\" + ", "+//\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+//\t\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"2. WARNING in Junk11.java (at line 19)\\n\" + ", "+//\t\t\t\"\tpublic void invalidated(Observable o) {throw new RuntimeException();}\\n\" + ", "+//\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+//\t\t\t\"Junk11.Observable is a raw type. References to generic type Junk11.Observable<T> should be parameterized\\n\" + ", "+//\t\t\t\"----------\\n\" + ", "+//\t\t\t\"3. ERROR in Junk11.java (at line 21)\\n\" + ", "+//\t\t\t\"\taddListener(null, null, (o) -> {throw new RuntimeException();});\\n\" + ", "+//\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+//\t\t\t\"The method addListener(Junk11.ExpressionHelper<Object>, Junk11.ObservableValue<Object>, Junk11.InvalidationListener) is ambiguous for the type Junk11\\n\" +", "+//\t\t\t\"----------\\n\";"]}], "num": 70875}
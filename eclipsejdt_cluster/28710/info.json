{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84a38f205a8c969295df8b13c38b0ebf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e24a9650ee1abf0589427ba423e824d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "406460504cd2ce326e8175c89e3901b483593d68", "commitAfterChange": "d552fa04b57c49a345a68b34dc573989b48684d9", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-        \t} else if (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "-        \t\tint length = JavaCore.PLUGIN_ID.length() + 1;", "-        \t\tString key = event.getKey();", "-        \t\tStringTokenizer tokenizer = new StringTokenizer(key.substring(length));", "-        \t\tString token = tokenizer.nextToken();", "-        \t\tif (key.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "-        \t\t\ttoken.equals(\"builder\") || //$NON-NLS-1$", "-        \t\t\tkey.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "-        \t\t\tkey.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "-        \t\t\tkey.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL) ||", "-        \t\t\ttoken.equals(\"classpath\")) //$NON-NLS-1$", "-        \t\t{", "-        \t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-        \t\t\tIJavaModel model = manager.getJavaModel();", "-        \t\t\tIJavaProject[] projects;", "-        \t\t\ttry {", "-        \t\t\t\tprojects = model.getJavaProjects();", "-        \t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "-        \t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "-\t    \t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "-\t    \t\t\t\t\ttry {", "-\t    \t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "-\t                            javaProject.getProject().touch(null);", "-                            } catch (CoreException e) {", "-\t                            // skip", "-                            }", "-        \t\t\t\t}", "-        \t\t\t} catch (JavaModelException e) {", "-        \t\t\t\t// skip", "-        \t\t\t}", "-        \t\t}", "+        \t} else if (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL)) {", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tIJavaModel model = manager.getJavaModel();", "+\t\t\t\tIJavaProject[] projects;", "+\t\t\t\ttry {", "+\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "+\t\t\t\t            javaProject.getProject().touch(null);", "+\t\t\t\t        } catch (CoreException e) {", "+\t\t\t\t            // skip", "+\t\t\t\t        }", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// skip", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5330cc2fcbb6d880d1b832a12b8dfa7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7d3413f2e54a1d74c024c68815343b32316b40c7", "commitAfterChange": "ce90018d214b0b5d93f0b2267d30c18ada4fb537", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "     \tpublic IEclipsePreferences getEclipsePreferences()", "signatureAfterChange": " \tpublic IEclipsePreferences getEclipsePreferences()", "diff": ["-    \t */", "-    \tpublic IEclipsePreferences getEclipsePreferences(){", "-    \t\tif (!JavaProject.hasJavaNature(this.project)) return null;", "-    \t\t// Get cached preferences if exist", "-    \t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);", "-    \t\tif (perProjectInfo.preferences != null) return perProjectInfo.preferences;", "-    \t\t// Init project preferences", "-    \t\tIScopeContext context = new ProjectScope(getProject());", "-    \t\tfinal IEclipsePreferences eclipsePreferences = context.getNode(JavaCore.PLUGIN_ID);", "-    \t\tupdatePreferences(eclipsePreferences);", "-    \t\tperProjectInfo.preferences = eclipsePreferences;", "+\t */", "+\tpublic IEclipsePreferences getEclipsePreferences() {", "+\t\tif (!JavaProject.hasJavaNature(this.project)) return null;", "+\t\t// Get cached preferences if exist", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);", "+\t\tif (perProjectInfo.preferences != null) return perProjectInfo.preferences;", "+\t\t// Init project preferences", "+\t\tIScopeContext context = new ProjectScope(getProject());", "+\t\tfinal IEclipsePreferences eclipsePreferences = context.getNode(JavaCore.PLUGIN_ID);", "+\t\tupdatePreferences(eclipsePreferences);", "+\t\tperProjectInfo.preferences = eclipsePreferences;", "-    \t\t// Listen to node removal from parent in order to reset cache (see bug 68993)", "-    \t\tIEclipsePreferences.INodeChangeListener nodeListener = new IEclipsePreferences.INodeChangeListener() {", "-    \t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "-    \t\t\t\t// do nothing", "-    \t\t\t}", "-    \t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "-    \t\t\t\tif (event.getChild() == eclipsePreferences) {", "-    \t\t\t\t\tJavaModelManager.getJavaModelManager().resetProjectPreferences(JavaProject.this);", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t};", "-    \t\t((IEclipsePreferences) eclipsePreferences.parent()).addNodeChangeListener(nodeListener);", "+\t\t// Listen to new preferences node", "+\t\tfinal IEclipsePreferences eclipseParentPreferences = (IEclipsePreferences) eclipsePreferences.parent();", "+\t\tif (eclipseParentPreferences != null) {", "+\t\t\tif (this.preferencesNodeListener != null) {", "+\t\t\t\teclipseParentPreferences.removeNodeChangeListener(this.preferencesNodeListener);", "+\t\t\t}", "+\t\t\tthis.preferencesNodeListener = new IEclipsePreferences.INodeChangeListener() {", "+\t\t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\tif (event.getChild() == eclipsePreferences) {", "+\t\t\t\t\t\tJavaModelManager.getJavaModelManager().resetProjectPreferences(JavaProject.this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\teclipseParentPreferences.addNodeChangeListener(this.preferencesNodeListener);", "+\t\t}", "-    \t\t// Listen to preference changes", "-    \t\tIEclipsePreferences.IPreferenceChangeListener preferenceListener = new IEclipsePreferences.IPreferenceChangeListener() {", "-    \t\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "-    \t\t\t\tString propertyName = event.getKey();", "-\t\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\t\tif (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "-\t\t\t\t\t\tif (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "-\t\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(JavaProject.this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tmanager.resetProjectOptions(JavaProject.this);", "-\t\t\t\t\t\tJavaProject.this.resetCaches(); // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=233568", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t};", "-    \t\teclipsePreferences.addPreferenceChangeListener(preferenceListener);", "-    \t\treturn eclipsePreferences;", "-    \t}", "+\t\t// Listen to preferences changes", "+\t\tif (this.preferencesChangeListener != null) {", "+\t\t\teclipsePreferences.removePreferenceChangeListener(this.preferencesChangeListener);", "+\t\t}", "+\t\tthis.preferencesChangeListener = new IEclipsePreferences.IPreferenceChangeListener() {", "+\t\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "+\t\t\t\tString propertyName = event.getKey();", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tif (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "+\t\t\t\t\tif (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+\t\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL))", "+\t\t\t\t\t{", "+\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(JavaProject.this);", "+\t\t\t\t\t}", "+\t\t\t\t\tmanager.resetProjectOptions(JavaProject.this);", "+\t\t\t\t\tJavaProject.this.resetCaches(); // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=233568", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\teclipsePreferences.addPreferenceChangeListener(this.preferencesChangeListener);", "+\t\treturn eclipsePreferences;", "+\t}"]}], "num": 28710}
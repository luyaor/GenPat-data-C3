{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ad31a596b69d51066dd7566d1444579", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f76d182efec5e86b34926a4a245bcc96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "a0d56ed99077ac2805fb6adf58fb2d4feb29fa95", "commitAfterChange": "fe07f8c458bfdc7cd198adc73916228052bd2ea6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "signatureAfterChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "diff": ["-\t\t\t\t\tfor (int i = 0, index = 1; i < types.length; i++) {", "+\t\t\t\t\tint length = types.length;", "+\t\t\t\t\tfor (int i = 0, index = 1; i < length; i++) {", "-\t\t\t\t\t\tif (!otherType.equals(topLevelType))", "+\t\t\t\t\t\tif (!otherType.equals(topLevelType) && index < length) // check that the index is in bounds (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=62861)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc09326dcb3cea46aa01838df6c1c381", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "3817fb9be5d23e5c6f76a434da338233b90b5a46", "commitAfterChange": "8d9f700412e8d76f89db3ccd17a42191a013d35d", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " public void generateBoxingConversion(int unboxedTypeID)", "signatureAfterChange": " public void generateBoxingConversion(int unboxedTypeID)", "diff": ["-}", "-public void generateBoxingConversion(int unboxedTypeID) {", "-\tsuper.generateBoxingConversion(unboxedTypeID);", "-\tVerificationTypeInfo info = null;", "-    switch (unboxedTypeID) {", "-        \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangByte, ConstantPool.JavaLangByteConstantPoolName);", "-        \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangShort, ConstantPool.JavaLangShortConstantPoolName);", "-           \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangCharacter, ConstantPool.JavaLangCharacterConstantPoolName);", "-           break;", "-        case TypeIds.T_int :             ", "-           \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangInteger, ConstantPool.JavaLangIntegerConstantPoolName);", "-           \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangLong, ConstantPool.JavaLangLongConstantPoolName);", "-           \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangFloat, ConstantPool.JavaLangFloatConstantPoolName);", "-           \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangDouble, ConstantPool.JavaLangDoubleConstantPoolName);", "-            break;  ", "-           \tinfo = new VerificationTypeInfo(TypeIds.T_JavaLangBoolean, ConstantPool.JavaLangBooleanConstantPoolName);", "-    if (info != null) {", "-    \tthis.currentFrame.stackItems[this.currentFrame.numberOfStackItems - 1] = info;", "+}", "+public void generateBoxingConversion(int unboxedTypeID) {", "+    super.generateBoxingConversion(unboxedTypeID);", "+    VerificationTypeInfo info = null;", "+    switch (unboxedTypeID) {", "+        case TypeIds.T_byte :", "+            info = new VerificationTypeInfo(TypeIds.T_JavaLangByte, ConstantPool.JavaLangByteConstantPoolName);", "+            break;", "+        case TypeIds.T_short :", "+            info = new VerificationTypeInfo(TypeIds.T_JavaLangShort, ConstantPool.JavaLangShortConstantPoolName);", "+            break;", "+        case TypeIds.T_char :", "+               info = new VerificationTypeInfo(TypeIds.T_JavaLangCharacter, ConstantPool.JavaLangCharacterConstantPoolName);", "+           break;", "+        case TypeIds.T_int :", "+               info = new VerificationTypeInfo(TypeIds.T_JavaLangInteger, ConstantPool.JavaLangIntegerConstantPoolName);", "+            break;", "+        case TypeIds.T_long :", "+               info = new VerificationTypeInfo(TypeIds.T_JavaLangLong, ConstantPool.JavaLangLongConstantPoolName);", "+            break;", "+        case TypeIds.T_float :", "+               info = new VerificationTypeInfo(TypeIds.T_JavaLangFloat, ConstantPool.JavaLangFloatConstantPoolName);", "+            break;", "+        case TypeIds.T_double :", "+               info = new VerificationTypeInfo(TypeIds.T_JavaLangDouble, ConstantPool.JavaLangDoubleConstantPoolName);", "+            break;", "+        case TypeIds.T_boolean :", "+               info = new VerificationTypeInfo(TypeIds.T_JavaLangBoolean, ConstantPool.JavaLangBooleanConstantPoolName);", "+    }", "+    int numberOfStackItems = this.currentFrame.numberOfStackItems;", "+    if (info != null && (numberOfStackItems >= 1)) {", "+        this.currentFrame.stackItems[numberOfStackItems - 1] = info;"]}], "num": 3488}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbd17b27f86245072a93db8d60f5df86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be98f6058e8547bf3d5196329e113a4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "77646fe802ce8842c3e468133491915f09e00874", "commitAfterChange": "95ad422ba75a97d9b8c3cb49bc8bd9dcf7d18a77", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertRequestedBindingFound(String[] pathAndSources, final String expectedKey) throws JavaModelException", "diff": ["-\t\tICompilationUnit[] copies = null;", "-\t\ttry {", "-\t\t\tfinal MarkerInfo[] markerInfos = createMarkerInfos(pathAndSources);", "-\t\t\tcopies = createWorkingCopies(markerInfos, this.owner);", "-\t\t\tclass Requestor extends TestASTRequestor {", "-\t\t\t\tString bindingKey;", "-\t\t\t\tint index = -1;", "-\t\t\t\tString foundKey;", "-\t\t\t\tpublic void acceptAST(ICompilationUnit source, CompilationUnit cu) {", "-\t\t\t\t\tsuper.acceptAST(source, cu);", "-\t\t\t\t\tASTNode node = findNode(cu, markerInfos[++this.index]);", "-\t\t\t\t\tif (node != null && !(node instanceof CompilationUnit)) {", "-\t\t\t\t\t\tIBinding binding = null;", "-\t\t\t\t\t\tif (node instanceof PackageDeclaration) {", "-\t\t\t\t\t\t\tbinding = ((PackageDeclaration) node).resolveBinding();", "-\t\t\t\t\t\t} else if (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\tbinding = ((TypeDeclaration) node).resolveBinding();", "-\t\t\t\t\t\t} else if (node instanceof AnonymousClassDeclaration) {", "-\t\t\t\t\t\t\tbinding = ((AnonymousClassDeclaration) node).resolveBinding();", "-\t\t\t\t\t\t} else if (node instanceof TypeDeclarationStatement) {", "-\t\t\t\t\t\t\tbinding = ((TypeDeclarationStatement) node).resolveBinding();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.bindingKey = binding == null ? null : binding.getKey();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tpublic void acceptBinding(String key, IBinding binding) {", "-\t\t\t\t\tsuper.acceptBinding(key, binding);", "-\t\t\t\t\tthis.foundKey = binding.getKey();", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tRequestor requestor = new Requestor();", "-\t\t\tresolveASTs(copies, new String[] {expectedKey}, requestor, getJavaProject(\"P\"), this.owner);", "-\t\t\t", "-\t\t\tif (!expectedKey.equals(requestor.bindingKey))", "-\t\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "-\t\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, requestor.bindingKey);", "-\t\t\t", "-\t\t\tif (!expectedKey.equals(requestor.foundKey)) {", "-\t\t\t\tSystem.out.println(Util.displayString(requestor.foundKey, 3));", "-\t\t\t}", "-\t\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, requestor.foundKey);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(copies);", "+\t\tBindingResolver resolver = requestBinding(pathAndSources, expectedKey);", "+\t\t", "+\t\tif (!expectedKey.equals(resolver.bindingKey))", "+\t\t\tSystem.out.println(Util.displayString(resolver.bindingKey, 3));", "+\t\tassertEquals(\"Unexpected binding for marked node\", expectedKey, resolver.bindingKey);", "+\t\t", "+\t\tif (!expectedKey.equals(resolver.foundKey)) {", "+\t\t\tSystem.out.println(Util.displayString(resolver.foundKey, 3));", "+\t\tassertEquals(\"Unexpected binding found by acceptBinding\", expectedKey, resolver.foundKey);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f460ef1e1fded2ded0a96bc444d670ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tNameLookup nameLookup = null;", "-\ttry {", "-\t\t// set the units to look inside", "-\t\tnameLookup = ((JavaProject)getJavaProject()).getNameLookup();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\tnameLookup.setUnitsToLookInside(workingCopies);", "-\t\t// code select", "-\t\tSelectionRequestor requestor= new SelectionRequestor(nameLookup, this);", "-\t\tIBuffer buffer = getBuffer();", "-\t\tif (buffer == null) {", "-\t\t\treturn requestor.getElements();", "-\t\t}", "-\t\tint end= buffer.getLength();", "-\t\tif (offset < 0 || length < 0 || offset + length > end ) {", "-\t\t\tthrow new IllegalArgumentException(\"Selected range (\"+offset+ \", \" + (offset+length)+\") is not located in supplied source range (0, \"+end+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\t}", "+\tJavaProject project = (JavaProject)getJavaProject();", "+\tSearchableEnvironment environment = (SearchableEnvironment) project.newSearchableNameEnvironment(owner);", "-\t\t// fix for 1FVGGKF", "-\t\tJavaProject project = (JavaProject)getJavaProject();", "-\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "-\t\t", "-\t\t// fix for 1FVXGDK", "-\t\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "-\t\tengine.select(cu, offset, offset + length - 1);", "+\tSelectionRequestor requestor= new SelectionRequestor(environment.nameLookup, this);", "+\tIBuffer buffer = getBuffer();", "+\tif (buffer == null) {", "-\t} finally {", "-\t\tif (nameLookup != null) {", "-\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t}", "+\tint end= buffer.getLength();", "+\tif (offset < 0 || length < 0 || offset + length > end ) {", "+\t\tthrow new IllegalArgumentException(\"Selected range (\"+offset+ \", \" + (offset+length)+\") is not located in supplied source range (0, \"+end+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t}", "+", "+\t// fix for 1FVXGDK", "+\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "+\tengine.select(cu, offset, offset + length - 1);", "+\treturn requestor.getElements();"]}], "num": 15860}
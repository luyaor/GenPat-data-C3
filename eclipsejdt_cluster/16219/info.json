{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7de744902c39bfb7e35cd7f3bd31fdad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e4d99e6747e483a6cbdb4481ad50aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3d74fc46f613564dbe52550c081fa58f357d0bc5", "commitAfterChange": "b02180d5cfd484077c935b61cfda329a4e9a0c9e", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t\tif (level != null)", "-\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null/*no binding*/, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t\tif (level != null) {", "+\t\t\t\t\tBinding binding = (importRef.bits & ASTNode.OnDemand) != 0", "+\t\t\t\t\t\t? unitScope.getImport(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length), true, importRef.isStatic())", "+\t\t\t\t\t\t: unitScope.getImport(importRef.tokens, false, importRef.isStatic());", "+\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, binding, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8687fb7442816152539504ac8e5f8eb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0b27550234989500fe53991aac8df517aea464df", "commitAfterChange": "938460306d40435cd50b7095042486eb645866f1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "diff": ["+\t\tString[] splittedName = partialMatch ? null : Util.splitOn('.', matchName, 0, matchName.length());", "-\t\t\t\tif (nameMatches(matchName, packageFragment, partialMatch))", "-\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\tif (partialMatch) {", "+\t\t\t\t\tif (packageFragment.getElementName().toLowerCase().startsWith(matchName))", "+\t\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (Util.equalArraysOrNull(((PackageFragment)packageFragment).names, splittedName))", "+\t\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\t}"]}], "num": 16219}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee66c6b504fd859fca5594ec5e38fcdf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18848ecfa80edb3321d33d3d84dc123f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test_illegal_annotation_001()", "signatureAfterChange": " public void test_illegal_annotation_001()", "diff": ["-\t\t\"The annotation @NonNull is disallowed for this location\\n\" +", "+\t\t((this.complianceLevel < ClassFileConstants.JDK1_8)", "+\t\t? \"The annotation @NonNull is disallowed for this location\\n\"", "+\t\t: \"The nullness annotation 'NonNull' is not applicable at this location\\n\") +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59e8fce261d79e69e3a3b210d8d24064", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test008() throws Exception", "signatureAfterChange": " \tpublic void test008() throws Exception", "diff": ["-\t\t\t\t\t\"        [pc: 14, full, stack: {java.io.PrintStream, java.lang.Comparable}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\";", "+\t\t\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\t\t\"        [pc: 14, full, stack: {java.io.PrintStream, java.lang.Comparable}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\"", "+\t\t\t\t\t: // in 1.8 the ternary is resolved to its target type j.l.Object", "+\t\t\t\t\t\"        [pc: 14, full, stack: {java.io.PrintStream, java.lang.Object}, locals: {X, java.lang.Comparable, java.lang.Comparable}]\\n\"", "+\t\t\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "605966f8aee77499a3a1718c2918cb46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test0035a()", "signatureAfterChange": " public void test0035a()", "diff": ["-\t\t\"Type mismatch: cannot convert from X<String> to X<Integer>\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"Type mismatch: cannot convert from X<String> to X<Integer>\\n\" ", "+\t\t:", "+\t\t\"Cannot infer type arguments for X<>\\n\"", "+\t\t) +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cd002cc9399295555190ea4118adb14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 552, "methodNumberAfterChange": 552, "signatureBeforeChange": " \tpublic void test0533()", "signatureAfterChange": " \tpublic void test0533()", "diff": ["-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum>\\n\" + ", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum>\\n\"", "+\t\t\t:", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum<Enum<E>>>\\n\"", "+\t\t\t) + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d8251de9b4df2e60fd0331637de085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void test001g()", "signatureAfterChange": " public void test001g()", "diff": ["-\t\t\"Type mismatch: cannot convert from X<Object>.X2<Integer> to X<String>.X2<Integer>\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"Type mismatch: cannot convert from X<Object>.X2<Integer> to X<String>.X2<Integer>\\n\"", "+\t\t:", "+\t\t\"Cannot infer type arguments for X2<>\\n\"", "+\t\t) +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9064d9a3dc4727094812e2c3a04163fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1666c32b249d36aa9547f4f66f511c5bb00d3d63", "commitAfterChange": "4e6bb96b0e120539a45cc4860f508bf12e097d37", "methodNumberBeforeChange": 552, "methodNumberAfterChange": 552, "signatureBeforeChange": " \tpublic void test0533()", "signatureAfterChange": " \tpublic void test0533()", "diff": ["-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum>\\n\" + ", "+\t\t\t(this.complianceLevel < ClassFileConstants.JDK1_8", "+\t\t\t? \"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum>\\n\"", "+\t\t\t: \"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum<Enum<E>>>\\n\") + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90da945f855ae16e935edcbdbb7b013d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test001f()", "signatureAfterChange": " public void test001f()", "diff": ["-\t\t\"Type mismatch: cannot convert from X<Object>.X2<String> to X<String>.X2<String>\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"Type mismatch: cannot convert from X<Object>.X2<String> to X<String>.X2<String>\\n\"", "+\t\t:", "+\t\t\"Cannot infer type arguments for X2<>\\n\"", "+\t\t) +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95954367760c48ee89b1476deff0de21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 81, "signatureBeforeChange": " public void test_illegal_annotation_003()", "signatureAfterChange": " public void test_illegal_annotation_003()", "diff": ["-\t\t\"\t^^^^^^^^^^^^^\\n\" +", "-\t\t\"The nullness annotation @NonNull is not applicable for the primitive type void\\n\" +", "+\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t((this.complianceLevel < ClassFileConstants.JDK1_8)", "+\t\t\t? \"The nullness annotation @NonNull is not applicable for the primitive type void\\n\"", "+\t\t\t: \"Type annotation is illegal for a method that returns void\\n\") +", "+\t\t\"----------\\n\",", "+\t\tthis.LIBS,", "+\t\tfalse/*shouldFlush*/);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca79786739d2a632e210f2262f69a684", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test001i()", "signatureAfterChange": " public void test001i()", "diff": ["-\t\t\"Type mismatch: cannot convert from X<Object>.X2<Object>.X22<X<String>> to X<String>.X2<Integer>.X22<X<String>>\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"Type mismatch: cannot convert from X<Object>.X2<Object>.X22<X<String>> to X<String>.X2<Integer>.X22<X<String>>\\n\" ", "+\t\t:", "+\t\t\"Cannot infer type arguments for X22<>\\n\"", "+\t\t) +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d526ca79634c28d752899d387279d807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void test0036a()", "signatureAfterChange": " public void test0036a()", "diff": ["-\t\t\"Type mismatch: cannot convert from X<String> to X<Integer>\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"Type mismatch: cannot convert from X<String> to X<Integer>\\n\" ", "+\t\t:", "+\t\t\"Cannot infer type arguments for X<>\\n\"", "+\t\t) +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d787cb9ac1d8957d349e1b3d0e22d451", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void test0044()", "signatureAfterChange": " public void test0044()", "diff": ["-\t\t\"Type mismatch: cannot convert from X<Object>.Y<String> to X<String>.Y<String>\\n\" + ", "+\t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ?", "+\t\t\"Type mismatch: cannot convert from X<Object>.Y<String> to X<String>.Y<String>\\n\"", "+\t\t:", "+\t\t\"Cannot infer type arguments for Y<>\\n\"", "+\t\t) +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9be9c90409a6ddac2737edb3237e78f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4758255b8284af577e4f7f81a9ecd60704ccc85c", "commitAfterChange": "eeb0d779ca54bfa774f6270ba7624121d1e2d305", "methodNumberBeforeChange": 646, "methodNumberAfterChange": 646, "signatureBeforeChange": "  \tpublic void test0627()", "signatureAfterChange": "  \tpublic void test0627()", "diff": ["-    \t\t\"Type mismatch: cannot convert from List<capture#2-of ? extends Object&Serializable&Comparable<?>> to String\\n\" +", "+    \t\t(this.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+    \t\t\"Type mismatch: cannot convert from List<capture#2-of ? extends Object&Serializable&Comparable<?>> to String\\n\"", "+\t\t\t:", "+\t\t\t\"Type mismatch: cannot convert from List<? extends Object&Serializable&Comparable<?>> to String\\n\"", "+    \t\t) +"]}], "num": 16665}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a143d6e097dee7bb216bca8d635cdb3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f9614bc09e6c00deac947183d953f4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 124, "signatureBeforeChange": " \tpublic IClasspathEntry[] readRawClasspath()", "signatureAfterChange": " \tpublic IClasspathEntry[] readRawClasspath()", "diff": ["-\t\tIClasspathEntry[] classpath = readFileEntries(null/*not interested in unknown elements*/);", "-\t\tif (classpath == JavaProject.INVALID_CLASSPATH)", "+\t\tIClasspathEntry[][] classpath = readFileEntries(null/*not interested in unknown elements*/);", "+\t\tif (classpath[0] == JavaProject.INVALID_CLASSPATH)", "-\t\tif (classpath.length > 0) {", "-\t\t\tIClasspathEntry entry = classpath[classpath.length - 1];", "+\t\tif (classpath[0].length > 0) {", "+\t\t\tIClasspathEntry entry = classpath[0][classpath[0].length - 1];", "-\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];", "-\t\t\t\tSystem.arraycopy(classpath, 0, copy, 0, copy.length);", "-\t\t\t\tclasspath = copy;", "+\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath[0].length - 1];", "+\t\t\t\tSystem.arraycopy(classpath[0], 0, copy, 0, copy.length);", "+\t\t\t\tclasspath[0] = copy;", "-\t\treturn classpath;", "+\t\treturn classpath[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d577e9b240cf19c1928c5591843ec83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 133, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession, boolean addClasspathChange) throws JavaModelException", "signatureAfterChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession, boolean addClasspathChange) throws JavaModelException", "diff": ["-\t\t\tIClasspathEntry[] rawClasspath;", "+\t\t\tIClasspathEntry[][] classpath = new IClasspathEntry[2][];", "-\t\t\t\trawClasspath= perProjectInfo.rawClasspath;", "-\t\t\t\tif (rawClasspath == null)", "-\t\t\t\t\trawClasspath = perProjectInfo.readAndCacheClasspath(this);", "+\t\t\t\tclasspath[0] = perProjectInfo.rawClasspath;", "+\t\t\t\tclasspath[1] = perProjectInfo.referencedEntries;", "+\t\t\t\t// Checking null only for rawClasspath enough", "+\t\t\t\tif (classpath[0] == null)", "+\t\t\t\t\tclasspath = perProjectInfo.readAndCacheClasspath(this);", "-\t\t\t", "-\t\t\tResolvedClasspath result = resolveClasspath(rawClasspath, usePreviousSession, true/*resolve chained libraries*/);", "+\t\t\tResolvedClasspath result = resolveClasspath(classpath[0], classpath[1], usePreviousSession, true/*resolve chained libraries*/);", "+\t\t\t", "-\t\t\tperProjectInfo.setResolvedClasspath(result.resolvedClasspath, result.rawReverseMap, result.rootPathToResolvedEntries, usePreviousSession ? PerProjectInfo.NEED_RESOLUTION : result.unresolvedEntryStatus, timeStamp, addClasspathChange);", "+\t\t\tperProjectInfo.setResolvedClasspath(result.resolvedClasspath, result.referencedEntries, result.rawReverseMap, result.rootPathToResolvedEntries, usePreviousSession ? PerProjectInfo.NEED_RESOLUTION : result.unresolvedEntryStatus, timeStamp, addClasspathChange);"]}], "num": 53848}
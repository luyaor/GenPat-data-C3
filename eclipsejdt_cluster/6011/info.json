{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8b1cdfd1a5d13ae769e9c6015ecf486", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e253afef564f262caac2efa9cc0e9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6b1d6ebbb73ca48f2e7db37fe962a15ff5c69f39", "commitAfterChange": "db260d93667acab111e64138469df12a566a7b90", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "signatureAfterChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "diff": ["-\t\ttry {", "-\t\t\tthis.astStack[++this.astPtr] = node;", "-\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\tint oldStackLength = this.astStack.length;", "-\t\t\tObject[] oldStack = this.astStack;", "-\t\t\tthis.astStack = new Object[oldStackLength + AstStackIncrement];", "-\t\t\tSystem.arraycopy(oldStack, 0, this.astStack, 0, oldStackLength);", "-\t\t\tthis.astPtr = oldStackLength;", "-\t\t\tthis.astStack[this.astPtr] = node;", "+\t\tint stackLength = this.astStack.length;", "+\t\tif (++this.astPtr >= stackLength) {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.astStack, 0,", "+\t\t\t\tthis.astStack = new Object[stackLength + AstStackIncrement], 0,", "+\t\t\t\tstackLength);", "+\t\t\tthis.astPtr = stackLength;", "+\t\tthis.astStack[this.astPtr] = node;", "-\t\t\ttry {", "-\t\t\t\tthis.astLengthStack[++this.astLengthPtr] = 1;", "-\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\tint oldStackLength = this.astLengthStack.length;", "-\t\t\t\tint[] oldPos = this.astLengthStack;", "-\t\t\t\tthis.astLengthStack = new int[oldStackLength + AstStackIncrement];", "-\t\t\t\tSystem.arraycopy(oldPos, 0, this.astLengthStack, 0, oldStackLength);", "-\t\t\t\tthis.astLengthStack[this.astLengthPtr] = 1;", "+\t\t\tstackLength = this.astLengthStack.length;", "+\t\t\tif (++this.astLengthPtr >= stackLength) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astLengthStack, 0,", "+\t\t\t\t\tthis.astLengthStack = new int[stackLength + AstStackIncrement], 0,", "+\t\t\t\t\tstackLength);", "+\t\t\tthis.astLengthStack[this.astLengthPtr] = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0c24e54e19bc9d3f916cd46a8c2e563", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "db260d93667acab111e64138469df12a566a7b90", "commitAfterChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " protected void pushOnAstStack(ASTNode node)", "signatureAfterChange": " protected void pushOnAstStack(ASTNode node)", "diff": ["-\ttry {", "-\t\tthis.astStack[++this.astPtr] = node;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.astStack.length;", "-\t\tASTNode[] oldStack = this.astStack;", "-\t\tthis.astStack = new ASTNode[oldStackLength + AstStackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, this.astStack, 0, oldStackLength);", "-\t\tthis.astPtr = oldStackLength;", "-\t\tthis.astStack[this.astPtr] = node;", "+\tint stackLength = this.astStack.length;", "+\tif (++this.astPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.astStack, 0,", "+\t\t\tthis.astStack = new ASTNode[stackLength + AstStackIncrement], 0,", "+\t\t\tstackLength);", "+\t\tthis.astPtr = stackLength;", "+\tthis.astStack[this.astPtr] = node;", "-\ttry {", "-\t\tthis.astLengthStack[++this.astLengthPtr] = 1;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\tint oldStackLength = this.astLengthStack.length;", "-\t\tint[] oldPos = this.astLengthStack;", "-\t\tthis.astLengthStack = new int[oldStackLength + AstStackIncrement];", "-\t\tSystem.arraycopy(oldPos, 0, this.astLengthStack, 0, oldStackLength);", "-\t\tthis.astLengthStack[this.astLengthPtr] = 1;", "+\tstackLength = this.astLengthStack.length;", "+\tif (++this.astLengthPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.astLengthStack, 0,", "+\t\t\tthis.astLengthStack = new int[stackLength + AstStackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.astLengthStack[this.astLengthPtr] = 1;"]}], "num": 6011}
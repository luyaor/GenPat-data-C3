{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80f0f6ddf0b22d3624620c1ae0b9745b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "083560bdaafae23b5bd0cdb3ff9af446", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void consumeEnterAnonymousClassBody()", "signatureAfterChange": " protected void consumeEnterAnonymousClassBody()", "diff": ["+\t", "+\t// trick to avoid creating a selection on type reference", "+\tchar [] oldIdent = this.assistIdentifier();", "+\tthis.setAssistIdentifier(null);\t\t", "+\tTypeReference typeReference = getTypeReference(0);", "+\tthis.setAssistIdentifier(oldIdent);\t\t", "+", "+", "+\talloc.type = typeReference;\t", "+", "+\tanonymousType.sourceEnd = alloc.sourceEnd;", "+\t//position at the type while it impacts the anonymous declaration", "+\tanonymousType.sourceStart = anonymousType.declarationSourceStart = alloc.type.sourceStart;", "+\talloc.sourceStart = intStack[intPtr--];", "+\tpushOnExpressionStack(alloc);", "+", "+\tassistNode = alloc;", "+\tthis.lastCheckPoint = alloc.sourceEnd + 1;", "+\tif (!diet){", "+\t\tthis.restartRecovery\t= true;\t// force to restart in recovery mode", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tcurrentToken = 0; // opening brace already taken into account", "+\t\thasReportedError = true;", "+\t}", "+", "+\tanonymousType.bodyStart = scanner.currentPosition;", "+\tlistLength = 0; // will be updated when reading super-interfaces", "+\t// recovery", "+\tif (currentElement != null){", "+\t\tlastCheckPoint = anonymousType.bodyStart;", "+\t\tcurrentElement = currentElement.add(anonymousType, 0);", "+\t\tcurrentToken = 0; // opening brace already taken into account", "+\t\tlastIgnoredToken = -1;\t\t", "+\t}", "+}", "-\tthis.setAssistIdentifier(null);\t\t\t", "-\talloc.type = getTypeReference(0);", "-\tthis.setAssistIdentifier(oldIdent);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f1cfbb5f3a0dea33b6bff5067fea24c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 130, "signatureBeforeChange": " protected void consumeEnterAnonymousClassBody()", "signatureAfterChange": " protected void consumeEnterAnonymousClassBody()", "diff": ["+\tTypeReference typeReference = getTypeReference(0);", "+", "-\talloc.type = getTypeReference(0);", "+\talloc.type = typeReference;", "+", "+\tanonymousType.sourceEnd = alloc.sourceEnd;", "+\t//position at the type while it impacts the anonymous declaration", "+\tanonymousType.sourceStart = anonymousType.declarationSourceStart = alloc.type.sourceStart;", "+\talloc.sourceStart = this.intStack[this.intPtr--];", "+\tpushOnExpressionStack(alloc);", "+", "+\tanonymousType.bodyStart = this.scanner.currentPosition;\t", "+\tthis.listLength = 0; // will be updated when reading super-interfaces", "+\t// recovery", "+\tif (this.currentElement != null){ ", "+\t\tthis.lastCheckPoint = anonymousType.bodyStart;\t\t", "+\t\tthis.currentElement = this.currentElement.add(anonymousType, 0);", "+\t\tthis.currentToken = 0; // opening brace already taken into account", "+\t\tthis.lastIgnoredToken = -1;", "+\t}\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c7192f9ba1b5d90c518e6e570d5460f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 77, "signatureBeforeChange": " protected void consumeClassHeaderExtends()", "signatureAfterChange": " protected void consumeClassHeaderExtends()", "diff": ["+\t//superclass", "+\tTypeReference superClass = getTypeReference(0);", "-\t//superclass", "-\ttypeDecl.superclass = getTypeReference(0);", "+\ttypeDecl.superclass = superClass;"]}], "num": 42764}
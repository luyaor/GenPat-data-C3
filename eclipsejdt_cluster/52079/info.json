{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47a21d39e71cd3efd41cae5cca709930", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "becb63d5411d5f4bd8c15dec3310e443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r private void initializeRoots()", "signatureAfterChange": "\r \t\r private void initializeRoots(IJavaModel model)", "diff": ["-\t}\r", "-private void initializeRoots() {\r", "-\tthis.roots = new HashMap();\r", "-\tthis.otherRoots = new HashMap();\r", "-\tIJavaProject[] projects;\r", "-\ttry {\r", "-\t\tprojects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();\r", "-\t} catch (JavaModelException e) {\r", "-\t\t// nothing can be done\r", "-\t\treturn;\r", "-\t}\r", "-\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "-\t\tIJavaProject project = projects[i];", "-\t\tIClasspathEntry[] classpath;\r", "-\t\t\tclasspath = project.getResolvedClasspath(true);\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\t// continue with next project\r", "-\t\t\tcontinue;\r", "-\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {", "-\t\t\tIClasspathEntry entry = classpath[j];\r", "-\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;\r", "-\t\t\tIPath path = entry.getPath();\r", "-\t\t\tif (this.roots.get(path) == null) {\r", "-\t\t\t\tthis.roots.put(path, project);\r", "-\t\t\t} else {\r", "-\t\t\t\tHashSet set = (HashSet)this.otherRoots.get(path);\r", "-\t\t\t\tif (set == null) {\r", "-\t\t\t\t\tset = new HashSet();\r", "-\t\t\t\t\tthis.otherRoots.put(path, set);\r", "-\t\t\t\t}\r", "-\t\t\t\tset.add(project);\r", "-\t\t\t}", "-\t\t}", "+private void initializeRoots(IJavaModel model) {\r", "+\tthis.roots = new HashMap();\r", "+\tthis.otherRoots = new HashMap();\r", "+\tIJavaProject[] projects;\r", "+\ttry {\r", "+\t\tprojects = model.getJavaProjects();\r", "+\t} catch (JavaModelException e) {\r", "+\t\t// nothing can be done\r", "+\t\treturn;\r", "+\t}\r", "+\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "+\t\tIJavaProject project = projects[i];\r", "+\t\tIClasspathEntry[] classpath;\r", "+\t\ttry {\r", "+\t\t\tclasspath = project.getResolvedClasspath(true);\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// continue with next project\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tfor (int j= 0, classpathLength = classpath.length; j < classpathLength; j++) {\r", "+\t\t\tIClasspathEntry entry = classpath[j];\r", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;\r", "+\t\t\tIPath path = entry.getPath();\r", "+\t\t\tif (this.roots.get(path) == null) {\r", "+\t\t\t\tthis.roots.put(path, project);\r", "+\t\t\t} else {\r", "+\t\t\t\tHashSet set = (HashSet)this.otherRoots.get(path);\r", "+\t\t\t\tif (set == null) {\r", "+\t\t\t\t\tset = new HashSet();\r", "+\t\t\t\t\tthis.otherRoots.put(path, set);\r", "+\t\t\t\t}\r", "+\t\t\t\tset.add(project);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcddc1dd5824e0e86aeb380aae7bc545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java", "commitBeforeChange": "c1f8b23725dd7ea4b476b40485a277dac1e772a8", "commitAfterChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t \tpublic static boolean hasAnnotationInstance( char[] source )", "signatureAfterChange": " \tpublic static AnnotationProcessorFactory getFactoryForAnnotation( \t\t\tfinal String fullyQualifiedAnnotation, \t\t\tfinal IProject project)", "diff": ["+\tpublic static AnnotationProcessorFactory getFactoryForAnnotation(", "+\t\t\tfinal String fullyQualifiedAnnotation,", "+\t\t\tfinal IProject project) {", "-\t", "-\tpublic static boolean hasAnnotationInstance( char[] source ) {", "-\t\ttry {\t\t", "-\t\t\tif ( source == null )", "-\t\t\t\treturn false;", "-\t\t\tIScanner scanner = ToolFactory.createScanner( ", "-\t\t\t\tfalse, false, false, JavaCore.VERSION_1_5 );", "-\t\t\tscanner.setSource( source );", "-\t\t\tint token = scanner.getNextToken();", "-\t\t\twhile ( token != ITerminalSymbols.TokenNameEOF ) {", "-\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\tif ( token == ITerminalSymbols.TokenNameAT )", "-\t\t\t\t{", "-\t\t\t\t\t//", "-\t\t\t\t\t// found an @ sign, see if next token is \"interface\"", "-\t\t\t\t\t// @interface is an annotation decl and not an annotation", "-\t\t\t\t\t// instance.  ", "-\t\t\t\t\t//", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tif ( token != ITerminalSymbols.TokenNameinterface )", "-\t\t\t\t\t\treturn true;", "+\t\t// TODO: go to config for project to pull out factories", "+\t\tList<AnnotationProcessorFactory> allFactories = ", "+\t\t\tAptCompilationParticipant.getInstance().getAllFactories();", "+\t\t", "+\t\tfor (AnnotationProcessorFactory factory : allFactories) {", "+\t\t\tCollection<String> supportedAnnos = factory.supportedAnnotationTypes();", "+\t\t\tfor (String anno : supportedAnnos) {", "+\t\t\t\tif (anno.equals(fullyQualifiedAnnotation)) {", "+\t\t\t\t\treturn factory;", "+\t\t\t\t}", "+\t\t\t\telse if (\"*\".equals(anno)) {", "+\t\t\t\t\t\treturn factory;", "+\t\t\t\t}", "+\t\t\t\telse if (anno.endsWith(\"*\")) {", "+\t\t\t\t\tfinal String prefix = anno.substring(0,", "+\t\t\t\t\t\t\tanno.length() - 2);", "+\t\t\t\t\tif (fullyQualifiedAnnotation.startsWith(prefix)) {", "+\t\t\t\t\t\treturn factory;", "+\t\t\t\t\t}", "-\t\t\treturn false;", "-\t\tcatch( InvalidInputException iie )", "-\t\t{", "-\t\t\t// lex error, so report false", "-\t\t\treturn false;", "-\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\t// TODO:  deal with this exception", "-\t\t\te.printStackTrace();", "-\t\t\treturn false;", "-\t\t}", "-\t}", "+\t\treturn null;"]}], "num": 52079}
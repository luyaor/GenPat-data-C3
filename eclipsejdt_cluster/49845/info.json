{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83b35fcf9bb00a45122dee3c220f6ff2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12875052a8dfb7ee90c8a19f17428787", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "460abf470b71772c6f8d4a0fe1b345129a0a6a80", "commitAfterChange": "f1ecb4b2d8ea593a495f1608bdd4d8fccb10a732", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["+\t\tCompilationUnit compilationUnit = ast.newCompilationUnit();", "+\t\t\t\tRecordedParsingInformation recordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\t\t\tint[][] comments = recordedParsingInformation.commentPositions;", "+\t\t\t\tif (comments != null) {", "+\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "+\t\t\t\t}", "+\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, block, codeSnippetParsingUtil);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, block, recordedParsingInformation);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "+\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn compilationUnit;", "+\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "+\t\t\t\tif (comments != null) {", "+\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "+\t\t\t\t}", "+\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, expression2, codeSnippetParsingUtil);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "+\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn compilationUnit;", "+\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "+\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "+\t\t\t\tif (comments != null) {", "+\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "+\t\t\t\t}", "+\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, typeDeclaration, codeSnippetParsingUtil);", "+\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn handledSevereErrorsWhileParsing(ast, codeSnippetParsingUtil);", "+\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "+\t\t\t\t\tif (problems != null) {", "+\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn compilationUnit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b44bbd18004a8656808d0033f69b1162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "signatureAfterChange": " \tpublic static ASTNode parse(int kind, char[] source, int offset, int length, Map options)", "diff": ["-\t\tif (options == null) {", "-\t\t\toptions = JavaCore.getOptions();", "-\t\t}", "-\t\tASTConverter converter = new ASTConverter(options, false, null);", "-\t\tconverter.compilationUnitSource = source;", "-\t\tconverter.scanner.setSource(source);", "-\t\t", "-\t\tAST ast = new AST();", "-\t\tast.setBindingResolver(new BindingResolver());", "-\t\tconverter.setAST(ast);", "-\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\tCompilationUnit compilationUnit = ast.newCompilationUnit();", "-\t\tswitch(kind) {", "-\t\t\tcase K_STATEMENTS :", "-\t\t\t\tConstructorDeclaration constructorDeclaration = codeSnippetParsingUtil.parseStatements(source, offset, length, options, true);", "-\t\t\t\tRecordedParsingInformation recordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\t\tint[][] comments = recordedParsingInformation.commentPositions;", "-\t\t\t\tif (comments != null) {", "-\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "-\t\t\t\t}", "-\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\tif (constructorDeclaration != null) {", "-\t\t\t\t\tBlock block = ast.newBlock();", "-\t\t\t\t\tStatement[] statements = constructorDeclaration.statements;", "-\t\t\t\t\tif (statements != null) {", "-\t\t\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\t\t\t\tblock.statements().add(converter.convert(statements[i]));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, block, recordedParsingInformation);", "-\t\t\t\t\treturn block;", "-\t\t\t\t} else {", "-\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "-\t\t\tcase K_EXPRESSION :", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression expression = codeSnippetParsingUtil.parseExpression(source, offset, length, options, true);", "-\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "-\t\t\t\tif (comments != null) {", "-\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "-\t\t\t\t}", "-\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\tif (expression != null) {", "-\t\t\t\t\tExpression expression2 = converter.convert(expression);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, expression2, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn expression2;", "-\t\t\t\t} else {", "-\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "-\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "-\t\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes = codeSnippetParsingUtil.parseClassBodyDeclarations(source, offset, length, options, true);", "-\t\t\t\trecordedParsingInformation = codeSnippetParsingUtil.recordedParsingInformation;", "-\t\t\t\tcomments = recordedParsingInformation.commentPositions;", "-\t\t\t\tif (comments != null) {", "-\t\t\t\t\tconverter.buildCommentsTable(compilationUnit, comments);", "-\t\t\t\t}", "-\t\t\t\tcompilationUnit.setLineEndTable(recordedParsingInformation.lineEnds);", "-\t\t\t\tif (nodes != null) {", "-\t\t\t\t\tTypeDeclaration typeDeclaration = converter.convert(nodes);", "-\t\t\t\t\trootNodeToCompilationUnit(ast, converter, compilationUnit, typeDeclaration, codeSnippetParsingUtil.recordedParsingInformation);", "-\t\t\t\t\treturn typeDeclaration;", "-\t\t\t\t} else {", "-\t\t\t\t\tIProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\tif (problems != null) {", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compilationUnit;", "-\t\t\t\t}", "-\t\t}", "-\t\tthrow new IllegalArgumentException();", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setKind(kind);", "+\t\tc.setSource(source);", "+\t\tc.setSourceRange(offset, length);", "+\t\tc.setCompilerOptions(options);", "+\t\treturn c.createAST(null);"]}], "num": 49845}
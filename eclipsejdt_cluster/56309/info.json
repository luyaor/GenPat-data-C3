{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d699cb1b38211e9421dae07e547008b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05216c24be534ff3232798d318ee88d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic Collection<Modifier> getModifiers()", "signatureAfterChange": "            public TypeMirror getType()", "diff": ["-\t", "-\tpublic Collection<Modifier> getModifiers()", "-\t{", "-\t\tfinal SingleVariableDeclaration paramDecl = getAstNode();", "-\t\tif( paramDecl == null ) return Collections.emptyList();", "-\t\tfinal List<IExtendedModifier> extMods = paramDecl.modifiers();", "-        if( extMods == null || extMods.isEmpty() ) return Collections.emptyList();      ", "-        for( IExtendedModifier extMod : extMods ){", "-            if( extMod.isModifier() ){\t\t\t\t", "-\t\t\t\tfinal org.eclipse.jdt.core.dom.Modifier mod = ", "-\t\t\t\t\t(org.eclipse.jdt.core.dom.Modifier)extMod;", "-\t\t\t\tif( org.eclipse.jdt.core.dom.Modifier.isFinal(mod.getFlags()) )", "-\t\t\t\t\treturn Collections.singletonList(Modifier.FINAL);                ", "-            }", "-        }", "-\t\treturn Collections.emptyList();", "-\t}", "+    ", "+    public TypeMirror getType()", "+    {", "+    \tfinal SingleVariableDeclaration astNode = getAstNode();", "+    \tfinal Type  type = astNode.getType();", "+    \tif( type == null )", "+    \t\treturn Factory.createErrorClassType(EMPTY_STRING);", "+    \tfinal IVariableBinding varBinding = astNode.resolveBinding();", "+    \tif( varBinding == null ){", "+    \t\tString typeName = type.toString();", "+\t\t\t if( astNode.isVarargs() )", "+\t\t\t\t return Factory.createErrorArrayType(typeName, 1);", "+\t\t\t else", "+\t\t\t\t return Factory.createErrorClassType(typeName);", "+    \t}", "+    \telse{", "+    \t\t final ITypeBinding typeBinding = varBinding.getType();", "+    \t\t if( typeBinding == null ){", "+    \t\t\t String typeName = type.toString();", "+    \t\t\t if( astNode.isVarargs() )", "+    \t\t\t\t return Factory.createErrorArrayType(typeName, 1);", "+    \t\t\t else", "+    \t\t\t\t return Factory.createErrorClassType(typeName);", "+             }", "+    \t\t else{", "+\t        \tfinal TypeMirror mirrorType = Factory.createTypeMirror(typeBinding, _env);", "+\t            if(mirrorType == null )", "+\t                return Factory.createErrorClassType(type.toString());", "+\t            return mirrorType;", "+    \t     }", "+    \t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee8acaf026cee53a659e812d40ec8d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "\r \r     public TypeDeclaration getTypeDeclaration(String name)", "signatureAfterChange": "      public TypeDeclaration getTypeDeclaration(String name)", "diff": ["-\r", "-    public TypeDeclaration getTypeDeclaration(String name)\r", "-    {\r", "-\t\tcheckValid();\r", "-\t\tif( name == null ) return null;\r", "-\t\t// first look into the current compilation unit\r", "-\t\tfinal String typeKey = BindingKey.createTypeBindingKey(name);\r", "-\t\tfinal ASTNode node = _astCompilationUnit.findDeclaringNode(typeKey);\r", "-\t\tITypeBinding typeBinding = null;\r", "-\t\tif( node != null ){\r", "-\t\t\tfinal int nodeType = node.getNodeType();\r", "-\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION || \r", "-\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||\r", "-\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )\r", "-\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();\r", "-\t\t}\r", "-\t\tif( typeBinding != null )\r", "-\t\t\treturn Factory.createReferenceType(typeBinding, this);\t\t \r", "-\t \r", "-\t\t// then go search for it else where.\r", "-\t\ttypeBinding = getTypeBinding(name);\t\r", "-\t\tif( typeBinding != null ){\r", "-\t\t\t//TODO: (theodora) record dependency on 'name'\r", "-\t\t\t// addDependency(name);\r", "-\t\t\treturn Factory.createReferenceType(typeBinding, this);\r", "-\t\t}\t\r", "-\t\r", "-\t\treturn null;\t\t\r", "-    }\r", "+", "+    public TypeDeclaration getTypeDeclaration(String name)", "+    {", "+\t\tcheckValid();", "+\t\tif( name == null ) return null;", "+\t\t// first look into the current compilation unit", "+\t\tfinal String typeKey = BindingKey.createTypeBindingKey(name);", "+\t\tfinal ASTNode node = _astCompilationUnit.findDeclaringNode(typeKey);", "+\t\tITypeBinding typeBinding = null;", "+\t\tif( node != null ){", "+\t\t\tfinal int nodeType = node.getNodeType();", "+\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION || ", "+\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "+\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "+\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\t}", "+\t\tif( typeBinding != null )", "+\t\t\treturn Factory.createReferenceType(typeBinding, this);\t\t ", "+\t ", "+\t\t// then go search for it else where.", "+\t\ttypeBinding = getTypeBinding(typeKey);\t", "+\t\tif( typeBinding != null ){", "+\t\t\taddTypeDependency( name );", "+\t\t\treturn Factory.createReferenceType(typeBinding, this);", "+\t\t}\t", "+\t", "+\t\treturn null;\t\t", "+    }"]}], "num": 56309}
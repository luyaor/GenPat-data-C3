{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b7cbb9bb18368f5dfdca92d845f2736", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64c3fa8270c47141009047ccff61e1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "4c1d7dbf50aec44bcaa78488f6494cabd5c936ec", "commitAfterChange": "1159f42f3e1e1aaac22ff9f396ef841945f2fbd4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public boolean contains(IResource resource)", "signatureAfterChange": " public boolean contains(IResource resource)", "diff": ["+\tswitch (resource.getType()) {", "+\t\tcase IResource.ROOT:", "+\t\tcase IResource.PROJECT:", "+\t\t\treturn true;", "+\t}", "+\t// file or folder", "-\t\tif (!resource.isAccessible()) return false;", "+", "-\t\t\t\tif (entryPath.isPrefixOf(path) ", "-\t\t\t\t\t\t&& (innerMostEntry == null || innerMostEntry.getPath().isPrefixOf(entryPath))) {", "+\t\t\t\tif ((innerMostEntry == null || innerMostEntry.getPath().isPrefixOf(entryPath))", "+\t\t\t\t\t\t&& entryPath.isPrefixOf(path)) {", "-\t\t\t\t\tbreak; // don't return here as we could have src=bin or lib=bin", "-\t\t\t\tif (innerMostEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "-\t\t\t\t\t// .class files are not visible in source folders ", "-\t\t\t\t\treturn !Util.isClassFileName(path.lastSegment());", "-\t\t\t\t} else {", "-\t\t\t\t\t// .java files are not visible in library folders", "-\t\t\t\t\treturn !Util.isJavaFileName(path.lastSegment());", "+\t\t\t\tif  (resource instanceof IFolder) {", "+\t\t\t\t\t // folders are always included in src/lib entries", "+\t\t\t\t\t return true;", "+\t\t\t\t}", "+\t\t\t\tswitch (innerMostEntry.getEntryKind()) {", "+\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:", "+\t\t\t\t\t\t// .class files are not visible in source folders ", "+\t\t\t\t\t\treturn !Util.isClassFileName(path.lastSegment());", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t// .java files are not visible in library folders", "+\t\t\t\t\t\treturn !Util.isJavaFileName(path.lastSegment());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7aee2170ca854174f01af532fffaef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "cbd955fb2a4598f2699dd195e39c5cb17dbd967e", "commitAfterChange": "4923f7bf4c07fe4ddafc97e39d6c8df65941fe37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public boolean contains(IResource resource)", "signatureAfterChange": " public boolean contains(IResource resource)", "diff": ["+\tIJavaProject[] projects;", "-\t\tIPath path = resource.getFullPath();", "-\t\tIJavaProject[] projects = this.getJavaProjects();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tIJavaProject project = projects[i];", "-\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "-\t\t\t", "-\t\t\tIPath output = project.getOutputLocation();", "-\t\t\tIPath innerMostOutput = output.isPrefixOf(path) ? output : null;", "-\t\t\tIClasspathEntry innerMostEntry = null;", "-\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\tIClasspathEntry entry = classpath[j];", "-", "-\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\tif ((innerMostEntry == null || innerMostEntry.getPath().isPrefixOf(entryPath))", "-\t\t\t\t\t\t&& entryPath.isPrefixOf(path)) {", "-\t\t\t\t\tinnerMostEntry = entry;", "-\t\t\t\t}", "-\t\t\t\tIPath entryOutput = classpath[j].getOutputLocation();", "-\t\t\t\tif (entryOutput != null && entryOutput.isPrefixOf(path)) {", "-\t\t\t\t\tinnerMostOutput = entryOutput;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (innerMostEntry != null) {", "-\t\t\t\t// special case prj==src and nested output location", "-\t\t\t\tif (innerMostOutput != null && innerMostOutput.segmentCount() > 1 // output isn't project", "-\t\t\t\t\t\t&& innerMostEntry.getPath().segmentCount() == 1) { // 1 segment must be project name", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif  (resource instanceof IFolder) {", "-\t\t\t\t\t // folders are always included in src/lib entries", "-\t\t\t\t\t return true;", "-\t\t\t\t}", "-\t\t\t\tswitch (innerMostEntry.getEntryKind()) {", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:", "-\t\t\t\t\t\t// .class files are not visible in source folders ", "-\t\t\t\t\t\treturn !Util.isClassFileName(path.lastSegment());", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "-\t\t\t\t\t\t// .java files are not visible in library folders", "-\t\t\t\t\t\treturn !Util.isJavaFileName(path.lastSegment());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (innerMostOutput != null) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn true;", "+\t\tprojects = this.getJavaProjects();", "+\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\tJavaProject project = (JavaProject)projects[i];", "+\t\tif (!project.contains(resource)) {", "+\t\t\treturn false;", "+\t\t}", "+\t}", "+\treturn true;"]}], "num": 26065}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bebac53ef6fdbe738115e76dd7fc751", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164ff9e993ed9ca02a50846180ce4af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/srcext/org/eclipse/jdt/apt/tests/external/annotations/batch/BatchProcessor.java", "commitBeforeChange": "b5b90ec2f42e0eb7ce3ad684f46b8d872887e632", "commitAfterChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void process()", "signatureAfterChange": " \tpublic void process()", "diff": ["+\t\tTIMES_CALLED++;", "+\t\t", "+\t\t", "+\t\t// Since we're a batch processor, we should never be called more than once", "+\t\tif (TIMES_CALLED > 1) {", "+\t\t\tmsger.printError(\"BatchProcessor called more than once: \" + TIMES_CALLED);", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fa8804151988a88351be400b1487de7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "cc370a50ac7ec603f065f1e6278826253518f4d4", "commitAfterChange": "1ae189eb0affddcddb5cf43f9552f434a9d25d38", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (binding.isStatic()) {", "+\t\t\t// static field accessed through receiver? legal but unoptimal (optional warning)", "+\t\t\tif (!(receiver == ThisReference.ThisImplicit", "+\t\t\t\t\t|| receiver.isSuper()", "+\t\t\t\t\t|| (receiver instanceof NameReference ", "+\t\t\t\t\t\t&& (((NameReference) receiver).bits & BindingIds.TYPE) != 0))) {", "+\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, binding);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab0b3e1309edbacb05e9b2955dc0e8cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "cc370a50ac7ec603f065f1e6278826253518f4d4", "commitAfterChange": "1ae189eb0affddcddb5cf43f9552f434a9d25d38", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["+\t\t\t\t", "+\t\t\t\tif (field.isStatic()) {", "+\t\t\t\t\t// static field accessed through receiver? legal but unoptimal (optional warning)", "+\t\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, field);", "+\t\t\t\t}", "+\t\t\t\t"]}], "num": 40363}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e34b2b5bec0cdc22ba88e3609be3e3b9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28e046a5ed23064d5d908512e1946a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "e2d31ef7ac94c5bb6285f9813df43a1164c5ca8d", "commitAfterChange": "11132934987e84219ca80fa47f5c2b4b4040e5de", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \tpublic MethodBinding findCompileTimeMethodTargeting(TypeBinding targetType, Scope scope)", "diff": ["-\t\tif (this.exactMethodBinding != null) {", "-\t\t\t// TODO: shouldn't extactMethodBinding already be parameterized?", "-\t\t\tif (this.exactMethodBinding.typeVariables != Binding.NO_TYPE_VARIABLES && this.resolvedTypeArguments != null) {", "-\t\t\t\treturn scope.environment().createParameterizedGenericMethod(this.exactMethodBinding, this.resolvedTypeArguments);", "-\t\t\t}", "-\t\t\treturn this.exactMethodBinding;", "-\t\t}", "-\t\treturn internalResolveTentatively(targetType, scope);", "+\t\tMethodBinding targetMethod = internalResolveTentatively(targetType, scope);", "+\t\tif (targetMethod == null || !targetMethod.isValidBinding())", "+\t\t\treturn null;", "+\t\treturn targetMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f55804b67ef1f21bedc310e482733d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["-\t\t\tthis.typeExpected = targetType;", "-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(scope);", "-\t\t\tif (inferredTypes == null)", "-\t\t\t\treturn false;", "-\t\t\tallocationType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, this.resolvedType.enclosingType());", "+\t\t\tMethodBinding method = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(targetType) : null;", "+\t\t\tif (method == null) {", "+\t\t\t\tthis.typeExpected = targetType;", "+\t\t\t\tmethod = inferConstructorOfElidedParameterizedType(scope); // caches result already.", "+\t\t\t\tif (method == null || !method.isValidBinding())", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tallocationType = method.declaringClass;"]}], "num": 4679}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd0dacd6d70e8cb2649d1a6eb775a0de", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e7d2d81079b9cc8b714b76bb8a6651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "0d4007eb15023a950a5e732906ce998c79797847", "commitAfterChange": "15f72ffb7ce100c1fef6b76e22aa8f994af88b5e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tprivate void parseFullyQualifiedName()", "signatureAfterChange": " \t \tprivate void parseFullyQualifiedName()", "diff": ["+\t\t\tcase Scanner.BASE_TYPE:", "+\t\t\t\tthis.keyStart = this.scanner.start-1;", "+\t\t\t\tconsumeBaseType(this.scanner.getTokenSource());", "+\t\t\t\tthis.hasTypeName = false;", "+\t\t\t\tbreak;", "-\t\t\t\tif (this.scanner.nextToken() == Scanner.TYPE)", "-\t \t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "-\t\t\t\telse {", "-\t\t\t\t\tmalformedKey();", "-\t\t\t\t\treturn;", "+\t \t\t\tswitch (this.scanner.nextToken()) {", "+\t \t\t\t\tcase Scanner.TYPE:", "+\t\t \t\t\t\tconsumeFullyQualifiedName(this.scanner.getTokenSource());", "+\t\t \t\t\t\tbreak;", "+\t \t\t\t\tcase Scanner.BASE_TYPE:", "+\t \t\t\t\t\tconsumeBaseType(this.scanner.getTokenSource());", "+\t \t\t\t\t\tthis.hasTypeName = false;", "+\t \t\t\t\t\tbreak;", "+\t \t\t\t\tdefault:", "+\t\t\t\t\t\tmalformedKey();", "+\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d62b70b4dd164baa41a3703b6f915464", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/CommitRollbackParser.java", "commitBeforeChange": "027433d18c80815de3076b7fd489422a48401f1a", "commitAfterChange": "e060e0428f7f92647e77ad8da2c7818eb4c4e3a7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected int fallBackToSpringForward(Statement unused)", "signatureAfterChange": " \tprotected int fallBackToSpringForward(Statement unused)", "diff": ["-\t\tboolean atCompletionSite = false;", "-\t\t\t\tatCompletionSite = true;", "+\t\t\t\tshouldStackAssistNode();", "+\t\t\t\tthis.scanner.ungetToken(nextToken); // spit out what has been bitten more than we can chew.", "-\t\t\t\tnextToken = TokenNameEOF;", "+\t\t\t\treturn HALT; // don't know how to proceed.", "+\t\t\tthis.scanner.ungetToken(nextToken);", "+\t\t\tif (nextToken == TokenNameRBRACE)", "+\t\t\t\tignoreNextClosingBrace(); // having ungotten it, recoveryTokenCheck will see this again. ", "-\t\tif (nextToken == TokenNameEOF)", "-\t\t\treturn HALT; // don't know how to proceed.", "-\t\tthis.scanner.ungetToken(nextToken); // spit out what has been bitten more than we can chew.", "-\t\tif (atCompletionSite) {", "+\t\tif (assistNodeNeedsStacking()) {", "-\t\t\tshouldStackAssistNode();"]}], "num": 46464}
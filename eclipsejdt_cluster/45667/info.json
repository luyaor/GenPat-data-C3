{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ff7ab04699ed663805fbc08d8d76a95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "152891cb1878ee038f43ef21963ee187", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "fb96a1c85d64a712beb45b02ec6ef71c691d3831", "commitAfterChange": "382b067fdb60eb61ee53faad83800b76fff0bbbf", "methodNumberBeforeChange": 311, "methodNumberAfterChange": 311, "signatureBeforeChange": " public void testFavoriteImports010() throws JavaModelException", "signatureAfterChange": " public void testFavoriteImports010() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, false, true, false, true);", "+\trequestor.allowAllRequiredProposals();", "+\tint start1 = str.lastIndexOf(\"foo\") + \"\".length();", "+\tint end1 = start1 + \"foo\".length();", "-\t\t\t\"foo[METHOD_REF]{foo(), Ltest.p.ZZZ;, ()I, foo, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+\"}\",", "+\t\t\t\"foo[METHOD_REF]{foo(), Ltest.p.ZZZ;, ()I, foo, null, [\"+start1+\", \"+end1+\"], \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED +R_NON_RESTRICTED)+\"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bb51618e434dad397543832a694bef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "d3213172d29e4c1010f79436308b94172cea83cc", "commitAfterChange": "2daf63d08a96c2ed6e0e08ccfe89195f55d9f8ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     @Override     public boolean contains(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": "     @Override     public boolean contains(TypeMirror t1, TypeMirror t2)", "diff": ["+    \tswitch(t1.getKind()) {", "+    \t\tcase EXECUTABLE :", "+    \t\tcase PACKAGE :", "+    \t\t\tthrow new IllegalArgumentException(\"Executable and package are illegal argument for Types.contains(..)\"); //$NON-NLS-1$", "+    \t}", "+    \tswitch(t2.getKind()) {", "+    \t\tcase EXECUTABLE :", "+    \t\tcase PACKAGE :", "+    \t\t\tthrow new IllegalArgumentException(\"Executable and package are illegal argument for Types.contains(..)\"); //$NON-NLS-1$", "+    \t}", "-        throw new UnsupportedOperationException(\"NYI: TypesImpl.contains(...)\"); //$NON-NLS-1$", "+        throw new UnsupportedOperationException(\"NYI: TypesImpl.contains(\" + t1 + \", \" + t2 + \")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}], "num": 45667}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc17bd63f70e8ec789c34e731aec3b83", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4589609d5cd394fe04a391d8358092d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DefaultJavaElementComparator.java", "commitBeforeChange": "bc1023a3db35de5f11d5861f411b9a4de78ba0ab", "commitAfterChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate String buildSignature(Name name)", "signatureAfterChange": " \t \tprivate String buildSignature(Name name)", "diff": ["-\t\t} else {", "-\t\t\tQualifiedName qualifiedName = (QualifiedName) name;", "-\t\t\treturn buildSignature(qualifiedName.getQualifier()) + \".\" + buildSignature(qualifiedName.getName()); //$NON-NLS-1$", "+\t\tQualifiedName qualifiedName = (QualifiedName) name;", "+\t\treturn buildSignature(qualifiedName.getQualifier()) + \".\" + buildSignature(qualifiedName.getName()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60f78745907fefc8fc24a7257cec1fee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "510e79670ef0450a78c7882799bbb7cd266ab2e6", "commitAfterChange": "0f759b07c6429afc1f52aea8d8fb2a9dd22f7a92", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "signatureAfterChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "diff": ["-\t\tif (method.isDefaultMethod()) {", "-\t\t\tfor (int j = 0; j < contractsCount; j++) {", "-\t\t\t\tif (contracts[j] == null)", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (MethodVerifier.doesMethodOverride(method, contracts[j], scope.environment())) {", "-\t\t\t\t\tcontractsCount--;", "-\t\t\t\t\t// abstract method from super type rendered default by present interface ==> contracts[j] = null;", "-\t\t\t\t\tif (j < contractsCount)", "-\t\t\t\t\t\tSystem.arraycopy(contracts, j+1, contracts, j, contractsCount - j);", "-\t\t\t\t}", "+\t\tfor (int j = 0; j < contractsCount; j++) {", "+\t\t\tif (contracts[j] == null)", "+\t\t\t\tcontinue;", "+\t\t\tif (MethodVerifier.doesMethodOverride(method, contracts[j], scope.environment())) {", "+\t\t\t\tcontractsCount--;", "+\t\t\t\t// abstract method from super type overridden by present interface ==> contracts[j] = null;", "+\t\t\t\tif (j < contractsCount)", "+\t\t\t\t\tSystem.arraycopy(contracts, j+1, contracts, j, contractsCount - j);", "-\t\t\tcontinue; // skip default method itself", "+\t\tif (method.isDefaultMethod())", "+\t\t\tcontinue; // skip default method itself"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622445ebd6e626a7cd922a8b667da588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void printTrailingComment()", "signatureAfterChange": " \tpublic void printTrailingComment()", "diff": ["-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699894b66ad7a6b537fdb79bef65e266", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "8d914897d8dd87d30d54ce7b8aa527cdc23f64d6", "commitAfterChange": "2023e53bbac2c330e32a3d9731b6b6b7eac687fd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\t\t\tif (complyTo15) {", "+\t\t\t\tif ((method.getAnnotationTagBits() & AnnotationDeprecated) != 0)", "+\t\t\t\t\tmethod.modifiers |= AccDeprecated;", "+\t\t\t\telse if ((method.modifiers & AccDeprecated) != 0)", "+\t\t\t\t\tscope.problemReporter().missingDeprecatedAnnotationForMethod(method.sourceMethod());", "+\t\t\t}", "+\t\t\tif (isViewedAsDeprecated && !method.isDeprecated())", "+\t\t\t\tmethod.modifiers |= AccDeprecatedImplicitly;", "-\t\t\t} else {", "-\t\t\t\tif (complyTo15) {", "-\t\t\t\t\tif ((method.getAnnotationTagBits() & AnnotationDeprecated) != 0)", "-\t\t\t\t\t\tmethod.modifiers |= AccDeprecated;", "-\t\t\t\t\telse if ((method.modifiers & AccDeprecated) != 0)", "-\t\t\t\t\t\tscope.problemReporter().missingDeprecatedAnnotationForMethod(method.sourceMethod());", "-\t\t\t\t}", "-\t\t\t\tif (isViewedAsDeprecated && !method.isDeprecated())", "-\t\t\t\t\tmethod.modifiers |= AccDeprecatedImplicitly;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91269361652f2b85e4ca2758b9ec84e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "commitAfterChange": "8e48752294c0bdafc35bf5d5bf2db780924b6282", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\t} else {", "-\t\t\t\t\tint kind = delta.getKind();", "-\t\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "-\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\t\t\t\tthis.updateRootIndex(root, root.getPackageFragment(\"\"), delta); //$NON-NLS-1$", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tint kind = delta.getKind();", "+\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "+\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "+\t\t\t\t\tthis.updateRootIndex(root, root.getPackageFragment(\"\"), delta); //$NON-NLS-1$", "+\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953c6e35e7ff66e9993b0e5b4bf36c0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "a6b5fd5588a8c0f5b7dfed8752c55371c0723187", "commitAfterChange": "461947f2c01be844dc49b93f75612c6157f2318c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected boolean parseReturn()", "signatureAfterChange": " \tprotected boolean parseReturn()", "diff": ["-\t\t} else {", "-\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocDuplicatedReturnTag(", "-\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition(),", "-\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition());", "-\t\t\treturn false;", "+\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocDuplicatedReturnTag(", "+\t\t\t\tthis.scanner.getCurrentTokenStartPosition(),", "+\t\t\t\tthis.scanner.getCurrentTokenEndPosition());", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c0b0b51fc29497195741b67d75003b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "15ba790478e0bbae95b2e33b81452f5363e56d0c", "commitAfterChange": "e4e607ac6102960357aeaf6422bc906f0d3c86ca", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\tif (foundInsideProblem != null){", "+\t\t\tif (foundInsideProblem != null)", "-\t\t\t}", "-\t\tif (problemField != null)", "-\t\t\treturn problemField;", "-\t\telse", "-\t\t\treturn new ProblemBinding(name, enclosingSourceType(), NotFound);", "+\t\tif (problemField != null) return problemField;", "+\t\treturn new ProblemBinding(name, enclosingSourceType(), NotFound);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b478d7d1781e171e63469b1f502a62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "db17ee723d38a69641c64f6f113d7d3fbf47f1a8", "commitAfterChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-        // TODO (philippe) What should we do when the otherType is a BinaryTypeBinding that is = to this? see 73837", "-        } else if (otherType.isWildcard()){ // wildcard", "-                return ((WildcardBinding) otherType).boundCheck(this);", "+        if (otherType.isWildcard())", "+        \treturn ((WildcardBinding) otherType).boundCheck(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b62aeb2434b788460839e5787a23e084", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "8d914897d8dd87d30d54ce7b8aa527cdc23f64d6", "commitAfterChange": "2023e53bbac2c330e32a3d9731b6b6b7eac687fd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public FieldBinding[] fields()", "signatureAfterChange": " public FieldBinding[] fields()", "diff": ["+\t\t\tif (complyTo15) {", "+\t\t\t\tif ((field.getAnnotationTagBits() & AnnotationDeprecated) != 0)", "+\t\t\t\t\tfield.modifiers |= AccDeprecated;", "+\t\t\t\telse if ((field.modifiers & AccDeprecated) != 0)", "+\t\t\t\t\tscope.problemReporter().missingDeprecatedAnnotationForField(field.sourceField());", "+\t\t\t}", "+\t\t\tif (isViewedAsDeprecated && !field.isDeprecated())", "+\t\t\t\tfield.modifiers |= AccDeprecatedImplicitly;", "-\t\t\t} else {", "-\t\t\t\tif (complyTo15) {", "-\t\t\t\t\tif ((field.getAnnotationTagBits() & AnnotationDeprecated) != 0)", "-\t\t\t\t\t\tfield.modifiers |= AccDeprecated;", "-\t\t\t\t\telse if ((field.modifiers & AccDeprecated) != 0)", "-\t\t\t\t\t\tscope.problemReporter().missingDeprecatedAnnotationForField(field.sourceField());", "-\t\t\t\t}", "-\t\t\t\tif (isViewedAsDeprecated && !field.isDeprecated())", "-\t\t\t\t\tfield.modifiers |= AccDeprecatedImplicitly;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca45f02cae0ef3b1529efa290050cc48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void printTrailingComment(int numberOfNewLinesToInsert)", "signatureAfterChange": "  \tpublic void printTrailingComment(int numberOfNewLinesToInsert)", "diff": ["-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e20aa303647633db1000989174005934", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "69fbd244c0dc4b4cb612a30a2e0ee1b282a9ce47", "commitAfterChange": "cb3a630359a22f7ce6166a489826cbd44a0698c7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "signatureAfterChange": " protected int matchReference(Reference node, MatchingNodeSet nodeSet, boolean writeOnlyAccess)", "diff": ["-\t} else {", "-\t\treturn super.matchReference(node, nodeSet, writeOnlyAccess);", "+\t\treturn IMPOSSIBLE_MATCH;", "-\treturn IMPOSSIBLE_MATCH;", "+\treturn super.matchReference(node, nodeSet, writeOnlyAccess);"]}], "num": 44711}
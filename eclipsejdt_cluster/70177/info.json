{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b3873b6ecb2a1d968578e7ba8066f2a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5637e54527afdf232178fb58291e3261", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "commitAfterChange": "867dd152ebfa0e20933236e2a9ac1203eb8cefb2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t// this currently produces an unavoidable warning against all @NonNull element vars:", "+\t\t\tint elementNullStatus = FlowInfo.tagBitsToNullStatus(this.collectionElementType.tagBits);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementVarBinding, FlowInfo.UNKNOWN, this.collection, this.collectionElementType);", "-\t\t\t// TODO (stephan): \tonce we have JSR 308 fetch nullStatus from the collection element type", "-\t\t\t//              \tand feed the result into the above check (instead of FlowInfo.UNKNOWN)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementVarBinding, elementNullStatus, this.collection, this.collectionElementType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa354b303e574431ccf706203fb412f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c5e448ecc90e8d75bf431155e497df695586ca94", "commitAfterChange": "d137239e9d64b43b4573cdfef965a2c47040a54e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\tLocalVariableBinding elementVarBinding = this.elementVariable.binding;", "-\t\tcondInfo.markAsDefinitelyAssigned(this.elementVariable.binding);", "+\t\tcondInfo.markAsDefinitelyAssigned(elementVarBinding);", "-\t\tactionInfo.markAsDefinitelyUnknown(this.elementVariable.binding);", "+\t\tactionInfo.markAsDefinitelyUnknown(elementVarBinding);", "+\t\tif (currentScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t// this currently produces an unavoidable warning against all @NonNull element vars:", "+\t\t\tint nullStatus = this.elementVariable.checkAssignmentAgainstNullAnnotation(currentScope, flowContext, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telementVarBinding, FlowInfo.UNKNOWN, this.collection);", "+\t\t\t// TODO (stephan): \tonce we have JSR 308 fetch nullStatus from the collection element type", "+\t\t\t//              \tand feed the result into the above check (instead of FlowInfo.UNKNOWN)", "+\t\t\tif ((elementVarBinding.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\t\t\tactionInfo.markNullStatus(elementVarBinding, nullStatus);", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\t\t|| this.elementVariable.binding.resolvedPosition != -1) {", "+\t\t\t\t\t\t|| elementVarBinding.resolvedPosition != -1) {"]}], "num": 70177}
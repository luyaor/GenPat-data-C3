{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1627c286e889ef28aede82e6e3b33ba9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1603e703c0e2068709084c852533a473", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "030eb4fda54a6751c1b822374d11bd8e8163881c", "commitAfterChange": "ec1201be6eb9490fec9fdaa6f4ea5d677aacc407", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "signatureAfterChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "diff": ["-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\t// Now we generate the constant attribute corresponding to the fieldBinding", "-\t\t\tint constantValueNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.ConstantValueName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (constantValueNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) constantValueNameIndex;", "-\t\t\t// The attribute length = 2 in case of a constantValue attribute", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\tattributesNumber++;", "-\t\t\t// Need to add the constant_value_index", "-\t\t\tswitch (fieldConstant.typeID()) {", "-\t\t\t\tcase T_boolean :", "-\t\t\t\t\tint booleanValueIndex =", "-\t\t\t\t\t\tthis.constantPool.literalIndex(fieldConstant.booleanValue() ? 1 : 0);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (booleanValueIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) booleanValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_byte :", "-\t\t\t\tcase T_char :", "-\t\t\t\tcase T_int :", "-\t\t\t\tcase T_short :", "-\t\t\t\t\tint integerValueIndex =", "-\t\t\t\t\t\tthis.constantPool.literalIndex(fieldConstant.intValue());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (integerValueIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) integerValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_float :", "-\t\t\t\t\tint floatValueIndex =", "-\t\t\t\t\t\tthis.constantPool.literalIndex(fieldConstant.floatValue());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (floatValueIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) floatValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tint doubleValueIndex =", "-\t\t\t\t\t\tthis.constantPool.literalIndex(fieldConstant.doubleValue());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (doubleValueIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) doubleValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_long :", "-\t\t\t\t\tint longValueIndex =", "-\t\t\t\t\t\tthis.constantPool.literalIndex(fieldConstant.longValue());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (longValueIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) longValueIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_JavaLangString :", "-\t\t\t\t\tint stringValueIndex =", "-\t\t\t\t\t\tthis.constantPool.literalIndex(", "-\t\t\t\t\t\t\t((StringConstant) fieldConstant).stringValue());", "-\t\t\t\t\tif (stringValueIndex == -1) {", "-\t\t\t\t\t\tif (!this.creatingProblemType) {", "-\t\t\t\t\t\t\t// report an error and abort: will lead to a problem type classfile creation", "-\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.referenceBinding.scope.referenceContext;", "-\t\t\t\t\t\t\tFieldDeclaration[] fieldDecls = typeDeclaration.fields;", "-\t\t\t\t\t\t\tfor (int i = 0, max = fieldDecls.length; i < max; i++) {", "-\t\t\t\t\t\t\t\tif (fieldDecls[i].binding == fieldBinding) {", "-\t\t\t\t\t\t\t\t\t// problem should abort", "-\t\t\t\t\t\t\t\t\ttypeDeclaration.scope.problemReporter().stringConstantIsExceedingUtf8Limit(", "-\t\t\t\t\t\t\t\t\t\tfieldDecls[i]);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// already inside a problem type creation : no constant for this field", "-\t\t\t\t\t\t\tthis.contentsOffset = fieldAttributeOffset;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (stringValueIndex >> 8);", "-\t\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) stringValueIndex;", "-\t\t\t\t\t}", "-\t\t\t}", "+\t\t\tattributesNumber += generateConstantValueAttribute(fieldConstant, fieldBinding, fieldAttributeOffset);", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint syntheticAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SyntheticName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (syntheticAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) syntheticAttributeNameIndex;", "-\t\t\t// the length of a synthetic attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateSyntheticAttribute();", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint deprecatedAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.DeprecatedName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (deprecatedAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) deprecatedAttributeNameIndex;", "-\t\t\t// the length of a deprecated attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateDeprecatedAttribute();", "-\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t\t// to the @fieldBinding", "-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\tint signatureAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SignatureName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureAttributeNameIndex;", "-\t\t\t// the length of a signature attribute is equals to 2", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\tint signatureIndex =", "-\t\t\t\tthis.constantPool.literalIndex(genericSignature);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureIndex;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateSignatureAttribute(genericSignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31039e83f558203a9bea687834af9759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tprivate void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t */", "-\tpublic void addFieldInfo(FieldBinding fieldBinding) {", "-\t\tint attributeNumber = 0;", "-\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t// to the @fieldBinding", "-\t\tif (contentsOffset + 30 >= contents.length) {", "-\t\t\tresizeContents(30);", "-\t\t}", "-\t\t// Now we can generate all entries into the byte array", "-\t\t// First the accessFlags", "-\t\tint accessFlags = fieldBinding.getAccessFlags();", "-\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "-\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "-\t\t    accessFlags &= ~AccSynthetic;", "-\t\t}\t\t", "-\t\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "-\t\tcontents[contentsOffset++] = (byte) accessFlags;", "-\t\t// Then the nameIndex", "-\t\tint nameIndex = constantPool.literalIndex(fieldBinding.name);", "-\t\tcontents[contentsOffset++] = (byte) (nameIndex >> 8);", "-\t\tcontents[contentsOffset++] = (byte) nameIndex;", "-\t\t// Then the descriptorIndex", "-\t\tint descriptorIndex = constantPool.literalIndex(fieldBinding.type.signature());", "-\t\tcontents[contentsOffset++] = (byte) (descriptorIndex >> 8);", "-\t\tcontents[contentsOffset++] = (byte) descriptorIndex;", "-\t\t// leave some space for the number of attributes", "-\t\tint fieldAttributeOffset = contentsOffset;", "-\t\tcontentsOffset += 2;", "-\t\t\tattributeNumber++;", "-\t\t\t\t\t\t\tcontentsOffset = fieldAttributeOffset + 2;", "-\t\t\t\t\t\t\t// +2 is necessary to keep the two byte space for the attribute number", "-\t\t\t\t\t\t\tattributeNumber--;", "-\t\t\tattributeNumber++;", "-\t\t\tattributeNumber++;", "-\t\t\tattributeNumber++;", "-\t\t}\t\t\t\t", "+\t */", "+\tprivate void addFieldInfo(FieldBinding fieldBinding) {", "+\t\t// check that there is enough space to write all the bytes for the field info corresponding", "+\t\t// to the @fieldBinding", "+\t\tif (contentsOffset + 8 >= contents.length) {", "+\t\t\tresizeContents(8);", "+\t\t}", "+\t\t// Now we can generate all entries into the byte array", "+\t\t// First the accessFlags", "+\t\tint accessFlags = fieldBinding.getAccessFlags();", "+\t\tif (targetJDK < ClassFileConstants.JDK1_5) {", "+\t\t    // pre 1.5, synthetic was an attribute, not a modifier", "+\t\t    accessFlags &= ~AccSynthetic;", "+\t\t}\t\t", "+\t\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "+\t\tcontents[contentsOffset++] = (byte) accessFlags;", "+\t\t// Then the nameIndex", "+\t\tint nameIndex = constantPool.literalIndex(fieldBinding.name);", "+\t\tcontents[contentsOffset++] = (byte) (nameIndex >> 8);", "+\t\tcontents[contentsOffset++] = (byte) nameIndex;", "+\t\t// Then the descriptorIndex", "+\t\tint descriptorIndex = constantPool.literalIndex(fieldBinding.type.signature());", "+\t\tcontents[contentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\tcontents[contentsOffset++] = (byte) descriptorIndex;", "+\t\tint fieldAttributeOffset = contentsOffset;", "+\t\tint attributeNumber = 0;", "+\t\t// leave some space for the number of attributes", "+\t\tcontentsOffset += 2;", "+\t\tattributeNumber += addFieldAttributes(fieldBinding, fieldAttributeOffset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8a5a1c47976888418ef10f7c39430f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "1c82ab4ca7a7921e02eb1c1295505414f94bc64d", "commitAfterChange": "b4a98585238f00ec169e6c6eb5998e9d404a7925", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " private void reportMatching(Annotation[][] annotationsList, IJavaElement enclosingElement, Binding binding, \t\tMatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException", "diff": ["+private void reportMatching(Annotation[][] annotationsList, IJavaElement enclosingElement, Binding binding,", "+\t\tMatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException {", "+\tif (annotationsList != null) {", "+\t\tfor (int i = 0, length = annotationsList.length; i < length; ++i) {", "+\t\t\tAnnotation[] annotations = annotationsList[i];", "+\t\t\tif (annotations != null) ", "+\t\t\t\treportMatching(annotations, enclosingElement, null, binding, nodeSet, matchedClassContainer, encloses(enclosingElement));\t", "+\t\t}", "+\t}", "+}"]}], "num": 10443}
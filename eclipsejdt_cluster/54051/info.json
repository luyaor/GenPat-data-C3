{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "477782d0c3e1fa8f52a57c4f44f53786", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00d5ad8b2f6d100b7174997b4f4b8c76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "bdf0b69cc9bdee81873205479690aa7d5db63ee8", "commitAfterChange": "093aaf24019732f4fd12a83e0ae0e11a2c6e512a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void addDefaultAbstractMethods()", "signatureAfterChange": "  public void addDefaultAbstractMethods()", "diff": ["-}", "-\t\tboolean hasAddedMethods = false;", "+\t\tMethodBinding[] defaultAbstracts = null;", "+\t\tint defaultAbstractsCount = 0;", "-\t\t\t\t\tfor (int m = superMethods.length; --m >= 0;) {", "+\t\t\t\t\tnextAbstractMethod: for (int m = superMethods.length; --m >= 0;) {", "-\t\t\t\t\t\tif (!implementsMethod(method)) {", "-\t\t\t\t\t\t\taddDefaultAbstractMethod(method);", "-\t\t\t\t\t\t\thasAddedMethods = true;", "+\t\t\t\t\t\t// explicitly implemented ?", "+\t\t\t\t\t\tif (implementsMethod(method)) {", "+\t\t\t\t\t\t\tcontinue nextAbstractMethod;", "+\t\t\t\t\t\tif (defaultAbstractsCount == 0) {", "+\t\t\t\t\t\t\tdefaultAbstracts = new MethodBinding[5];", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// already added as default abstract ?", "+\t\t\t\t\t\t\tfor(int k = 0; k < defaultAbstractsCount; k++) {", "+\t\t\t\t\t\t\t\tMethodBinding alreadyAddedMethod = \tdefaultAbstracts[k];", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(alreadyAddedMethod.selector, method.selector)", "+\t\t\t\t\t\t\t\t\t\t&& alreadyAddedMethod.areParametersEqual(method)) {", "+\t\t\t\t\t\t\t\t\tcontinue nextAbstractMethod;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tMethodBinding defaultAbstract = new MethodBinding(", "+\t\t\t\t\t\t\t\tmethod.modifiers | ExtraCompilerModifiers.AccDefaultAbstract,", "+\t\t\t\t\t\t\t\tmethod.selector,", "+\t\t\t\t\t\t\t\tmethod.returnType,", "+\t\t\t\t\t\t\t\tmethod.parameters,", "+\t\t\t\t\t\t\t\tmethod.thrownExceptions,", "+\t\t\t\t\t\t\t\tthis);", "+\t\t\t\t\t\tif (defaultAbstractsCount == defaultAbstracts.length) {", "+\t\t\t\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, defaultAbstracts = new MethodBinding[2*defaultAbstractsCount], 0, defaultAbstractsCount);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdefaultAbstracts[defaultAbstractsCount++] = defaultAbstract;", "-\t\tif (hasAddedMethods) {", "-\t\t\t// re-sort methods", "+\t\tif (defaultAbstractsCount > 0) {", "+\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length+defaultAbstractsCount], 0, length);", "+\t\t\tSystem.arraycopy(defaultAbstracts, 0, this.methods, length, defaultAbstractsCount);", "+\t\t\t// re-sort methods", "+\t\t\tlength = length+defaultAbstractsCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "547b2a888f1e36198d3743c725955f9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "6d3e536ecd8e7c91687c7c90569a25a3f6f6eb94", "commitAfterChange": "e97394b80d49fb5dc34a1a6fec8af65d69ccf130", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void addForwardReference(int iPos)", "signatureAfterChange": " void addForwardReference(int pos)", "diff": ["-void addForwardReference(int iPos) {", "-\tint length;", "-\tif (forwardReferenceCount >= (length = forwardReferences.length))", "-\t\tSystem.arraycopy(forwardReferences, 0, (forwardReferences = new int[2*length]), 0, length);", "-\tforwardReferences[forwardReferenceCount++] = iPos;", "+void addForwardReference(int pos) {", "+\tfinal int count = this.forwardReferenceCount;", "+\tif (count >= 1) {", "+\t\tint previousValue = this.forwardReferences[count - 1];", "+\t\tif (previousValue < pos) {", "+\t\t\tint length;", "+\t\t\tif (count >= (length = this.forwardReferences.length))", "+\t\t\t\tSystem.arraycopy(this.forwardReferences, 0, (this.forwardReferences = new int[2*length]), 0, length);", "+\t\t\tthis.forwardReferences[this.forwardReferenceCount++] = pos;\t\t\t", "+\t\t} else if (previousValue > pos) {", "+\t\t\tint[] refs = this.forwardReferences;", "+\t\t\t// check for duplicates", "+\t\t\tfor (int i = 0, max = this.forwardReferenceCount; i < max; i++) {", "+\t\t\t\tif (refs[i] == pos) return; // already recorded", "+\t\t\t}", "+\t\t\tint length;", "+\t\t\tif (count >= (length = refs.length))", "+\t\t\t\tSystem.arraycopy(refs, 0, (this.forwardReferences = new int[2*length]), 0, length);", "+\t\t\tthis.forwardReferences[this.forwardReferenceCount++] = pos;", "+\t\t\tArrays.sort(this.forwardReferences, 0, this.forwardReferenceCount);", "+\t\t}", "+\t} else {", "+\t\tint length;", "+\t\tif (count >= (length = this.forwardReferences.length))", "+\t\t\tSystem.arraycopy(this.forwardReferences, 0, (this.forwardReferences = new int[2*length]), 0, length);", "+\t\tthis.forwardReferences[this.forwardReferenceCount++] = pos;", "+\t}"]}], "num": 54051}
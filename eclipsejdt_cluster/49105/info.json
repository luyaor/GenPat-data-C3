{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "427128dde06c341185eadd73633973b4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e59e49fa0a207806056a8330ddf894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public char[][][] collect() throws JavaModelException", "signatureAfterChange": " public char[][][] collect() throws JavaModelException", "diff": ["-\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\t} finally {", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\ttry {", "-\t\tfor (int i = 0, length = paths.length; i < length; i++) {", "-\t\t\ttry {", "-\t\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "-\t\t\t\tif (openable == null) continue; // outside classpath", "+\tfor (int i = 0, length = paths.length; i < length; i++) {", "+\t\ttry {", "+\t\t\tOpenable openable = this.locator.handleFactory.createOpenable(paths[i], this.locator.scope);", "+\t\t\tif (openable == null) continue; // outside classpath", "-\t\t\t\tIJavaProject project = openable.getJavaProject();", "-\t\t\t\tif (!project.equals(previousProject)) {", "-\t\t\t\t\tif (previousProject != null)", "-\t\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);", "-\t\t\t\t\tpreviousProject = (JavaProject) project;", "-\t\t\t\t\tthis.locator.initialize(previousProject, 0);", "-\t\t\t\t\tthis.locator.nameLookup.setUnitsToLookInside(this.locator.workingCopies);", "-\t\t\t\t}", "-\t\t\t\tif (openable instanceof ICompilationUnit) {", "-\t\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);", "-\t\t\t\t\tif (parsedUnit != null)", "-\t\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "-\t\t\t\t} else if (openable instanceof IClassFile) {", "-\t\t\t\t\tIClassFile classFile = (IClassFile) openable;", "-\t\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "-\t\t\t\t\tif (matches(binding))", "-\t\t\t\t\t\tcollectSuperTypeNames(binding);", "-\t\t\t\t}", "-\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t// ignore: continue with next element", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// ignore: continue with next element", "+\t\t\tIJavaProject project = openable.getJavaProject();", "+\t\t\tif (!project.equals(previousProject)) {", "+\t\t\t\tpreviousProject = (JavaProject) project;", "+\t\t\t\tthis.locator.initialize(previousProject, 0);", "+\t\t\tif (openable instanceof ICompilationUnit) {", "+\t\t\t\tICompilationUnit unit = (ICompilationUnit) openable;", "+\t\t\t\tCompilationUnitDeclaration parsedUnit = buildBindings(unit, true /*only toplevel and member types are visible to the focus type*/);", "+\t\t\t\tif (parsedUnit != null)", "+\t\t\t\t\tparsedUnit.traverse(new TypeDeclarationVisitor(), parsedUnit.scope);", "+\t\t\t} else if (openable instanceof IClassFile) {", "+\t\t\t\tIClassFile classFile = (IClassFile) openable;", "+\t\t\t\tBinaryTypeBinding binding = this.locator.cacheBinaryType(classFile.getType());", "+\t\t\t\tif (matches(binding))", "+\t\t\t\t\tcollectSuperTypeNames(binding);", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// ignore: continue with next element", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore: continue with next element", "-\t} finally {", "-\t\tif (previousProject != null)", "-\t\t\tthis.locator.nameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fdf492f829ee0f0c72104d69cdb76c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void addTrustedMatch(ASTNode node, boolean isExact)", "signatureAfterChange": " public void addTrustedMatch(ASTNode node, boolean isExact)", "diff": ["+\taddTrustedMatch(node, isExact ? EXACT_MATCH : POTENTIAL_MATCH);", "+\t", "+}", "-\tthis.matchingNodes.put(node, isExact ? EXACT_MATCH : POTENTIAL_MATCH);"]}], "num": 49105}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a01982e5dd3bb9493c8672b9962bd0d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cdeaf733767b762e137a385a4986ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "a51f0328f1978f4c547fe994573879b0bcceba88", "commitAfterChange": "cbe22d350fa314e6e5df169cf670cab9bb8c2a20", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus) {", "+void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo) {", "+\tint nullStatus = this.expression.nullStatus(flowInfo, flowContext);", "-\t\tNullAnnotationMatching annotationStatus = NullAnnotationMatching.analyse(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "-\t\tif (annotationStatus.isDefiniteMismatch()) {", "-\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, annotationStatus);", "-\t\t} else if (annotationStatus.isUnchecked()) {", "-\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "-\t\t}", "+\t\tcheckAgainstNullTypeAnnotation(scope, methodBinding.returnType, this.expression, flowContext, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd53a7c0d52cca8383ac297836b69ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["-\t\tMethodBinding methodBinding;", "+\t\tMethodBinding methodBinding = null;", "+\t\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\t\ttagBits = methodBinding.tagBits;", "+\t\t\ttagBits = (useTypeAnnotations) ? methodBinding.returnType.tagBits : methodBinding.tagBits;", "-\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "+\t\t\tif (useTypeAnnotations && (this.expression.resolvedType.tagBits & TagBits.AnnotationNullMASK) != 0) // TODO(stephan) more detailed checking", "+\t\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, 3);", "+\t\t\telse", "+\t\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);"]}], "num": 66276}
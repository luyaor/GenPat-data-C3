{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56c229995f43f4db76fb7d6704e9f118", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f009594e305b91a1b8497f4587c5879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding castTypeBinding = type.resolveType(scope);", "-\t\t\tif(castTypeBinding == null)", "-\t\t\t\treturn null;", "-\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\t\tif (expressionTb == null)", "-\t\t\t\treturn null;", "-\t\t\tareTypesCastCompatible(scope, castTypeBinding, expressionTb);", "-\t\t\treturn this.expressionType = castTb = castTypeBinding;", "+\t\t\tthis.resolvedType = type.resolveType(scope);", "+\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "+\t\t\tif (this.resolvedType != null && castedExpressionType != null) {", "+\t\t\t\tareTypesCastCompatible(scope, this.resolvedType, castedExpressionType);", "+\t\t\t}", "+\t\t\treturn this.resolvedType;", "-\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\t\tif (expressionTb == null)", "-\t\t\t\treturn null;", "+\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "+\t\t\tif (castedExpressionType == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619e60139c5a96ac052c6d39d570e9a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tif (expressionTb == null)", "-\t\t\treturn null;", "-", "-\t\t\tif ((castTb = type.resolveType(scope)) == null)", "+\t\t\tTypeBinding castTypeBinding = type.resolveType(scope);", "+\t\t\tif(castTypeBinding == null)", "-\t\t\tareTypesCastCompatible(scope, castTb, expressionTb);", "-\t\t\treturn castTb;", "-\t\t} else { // expression as a cast !!!!!!!! ", "+\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "+\t\t\tif (expressionTb == null)", "+\t\t\t\treturn null;", "+\t\t\tareTypesCastCompatible(scope, castTypeBinding, expressionTb);", "+\t\t\treturn this.expressionType = castTb = castTypeBinding;", "+\t\t} else { // expression as a cast !!!!!!!!", "+\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "+\t\t\tif (expressionTb == null)", "+\t\t\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90989399fbe2a83e846cadcae4c4603b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+", "+", "-\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "-\t\t\tif (this.resolvedType != null && castedExpressionType != null) {", "-\t\t\t\tareTypesCastCompatible(scope, this.resolvedType, castedExpressionType);", "+\t\t\tTypeBinding expressionType = expression.resolveType(scope);", "+\t\t\tif (this.resolvedType != null && expressionType != null) {", "+\t\t\t\tboolean necessary = checkCastTypesCompatibility(scope, this.resolvedType, expressionType);", "+\t\t\t\tif (!necessary) {", "+\t\t\t\t\tthis.bits |= UnnecessaryCastMask;", "+\t\t\t\t\tif ((this.bits & IgnoreNeedForCastCheckMASK) == 0) {", "+\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "-\t\t\tif (castedExpressionType == null) return null;", "+\t\t\tTypeBinding expressionType = expression.resolveType(scope);", "+\t\t\tif (expressionType == null) return null;"]}], "num": 9144}
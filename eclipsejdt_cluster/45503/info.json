{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c75dc67a20a4b1652180209f93db9c73", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026cb77e631d1a6a560b114947a3fa56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprotected void computeProblemLog(String[] testFiles, Requestor requestor, String platformIndependantExpectedLog, Throwable exception)", "signatureAfterChange": " \tprotected void checkCompilerLog(String[] testFiles, Requestor requestor,  \t\t\tString platformIndependantExpectedLog, Throwable exception)", "diff": ["-\tprotected void computeProblemLog(String[] testFiles, Requestor requestor, String platformIndependantExpectedLog, Throwable exception) {", "-\t    String computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t    if (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t    \tSystem.out.println(getClass().getName() + '#' + getName());", "-\t    \tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t    \tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t    \t\tSystem.out.print(testFiles[i]);", "-\t    \t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t    \t\tSystem.out.println(testFiles[i + 1]);", "-\t    \t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t    \t}", "-\t    }", "+\tprotected void checkCompilerLog(String[] testFiles, Requestor requestor, ", "+\t\t\tString platformIndependantExpectedLog, Throwable exception) {", "+\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "+\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "+\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "+\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "375caafdf242c4e83d850312f0ec762a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput)", "signatureAfterChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput)", "diff": ["-\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "-\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\tThrowable exception = null;", "+\t\ttry {", "+\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "+\t\t} catch(RuntimeException e){", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} catch(Error e) {", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} finally {", "+\t\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "+\t\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "+\t\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\tif (exception == null)", "+\t\t\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);", "-\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);"]}], "num": 45503}
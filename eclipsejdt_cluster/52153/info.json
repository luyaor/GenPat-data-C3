{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad70a32da2a275998d02b3131c3e253b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e6847f7ff98b13783b52610311952e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 87, "signatureBeforeChange": " protected Object openWhenClosed(HashMap newElements, IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " protected void openParent(Object childInfo, HashMap newElements, IProgressMonitor pm) throws JavaModelException", "diff": ["- */", "-protected Object openWhenClosed(HashMap newElements, IProgressMonitor pm) throws JavaModelException {", "-\tif (!isValidCompilationUnit()) throw newNotPresentException();", "-\treturn super.openWhenClosed(newElements, pm);", "-}", "+ */", "+protected void openParent(Object childInfo, HashMap newElements, IProgressMonitor pm) throws JavaModelException {", "+\ttry {", "+\t\tsuper.openParent(childInfo, newElements, pm);", "+\t} catch(JavaModelException e){", "+\t\t// allow parent to not exist for working copies defined outside classpath", "+\t\tif (!(childInfo instanceof WorkingCopyElementInfo) && !e.isDoesNotExist()){ ", "+\t\t\tthrow e;", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf205bc3760d07863a5bc18d5cf0bf7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes)", "signatureAfterChange": "\r \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes)", "diff": ["-\t\t\tthis.initializeRoots();\r", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModel(ResourcesPlugin.getWorkspace());\r", "+\t\t\tif (!model.isOpen()) {\r", "+\t\t\t\t// force opening of java model so that java element delta are reported\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tmodel.open(null);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\tif (VERBOSE) {\r", "+\t\t\t\t\t\te.printStackTrace();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn NO_DELTA;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tthis.initializeRoots(model);\r", "-\t\t\t\tJavaModel model = JavaModelManager.getJavaModel(res.getWorkspace());\r", "-\t\t\t\tif (model != null) {\r", "-\t\t\t\t\tfCurrentDelta = new JavaElementDelta(model);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// find out whether the delta is a package fragment root\r", "-\t\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(res.getFullPath());\r", "-\t\t\t\t\tboolean isPkgFragmentRoot = projectOfRoot != null;\r", "-\t\t\t\t\tint elementType = this.elementType(delta, IJavaElement.JAVA_MODEL, isPkgFragmentRoot);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\ttraverseDelta(delta, elementType, projectOfRoot); // traverse delta\r", "-\t\t\t\t\ttranslatedDeltas[i] = fCurrentDelta;\r", "-\t\t\t\t}\r", "+\t\t\t\tfCurrentDelta = new JavaElementDelta(model);\r", "+\t\t\t\t\r", "+\t\t\t\t// find out whether the delta is a package fragment root\r", "+\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(res.getFullPath());\r", "+\t\t\t\tboolean isPkgFragmentRoot = projectOfRoot != null;\r", "+\t\t\t\tint elementType = this.elementType(delta, IJavaElement.JAVA_MODEL, isPkgFragmentRoot);\r", "+\t\t\t\t\r", "+\t\t\t\ttraverseDelta(delta, elementType, projectOfRoot); // traverse delta\r", "+\t\t\t\ttranslatedDeltas[i] = fCurrentDelta;\r"]}], "num": 52153}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6e8ad2c11e99b2c8b893c93920ca01c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a1b5a45c896edff02da1fd1a3f8795f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "11dcf3d3ee1968a8baaa68f96fb65b7f9b3db0b4", "commitAfterChange": "393d81e7a2750eabcb8c375616d604c7414bb307", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic DefaultCodeFormatterOptions(Map settings)", "signatureAfterChange": "  \tpublic DefaultCodeFormatterOptions(Map settings)", "diff": ["-\t\tfinal Object lineDelimiterOptions = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SEPARATOR);", "-\t\tif (lineDelimiterOptions != null) {", "-\t\t\tthis.line_delimiter = (String) lineDelimiterOptions;", "+\t\tfinal Object allocationExpressionArgumentsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT);", "+\t\tif (allocationExpressionArgumentsAlignmentOption != null) {", "+\t\t\tthis.allocation_expression_arguments_alignment = Integer.parseInt((String) allocationExpressionArgumentsAlignmentOption);", "-\t\tfinal Object tabChar = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "-\t\tif (tabChar != null) {", "-\t\t\tthis.use_tab = JavaCore.TAB.equals(tabChar);", "+\t\tfinal Object anonymousTypeDeclarationBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION);", "+\t\tif (anonymousTypeDeclarationBracePositionOption != null) {", "+\t\t\tthis.anonymous_type_declaration_brace_position = (String) anonymousTypeDeclarationBracePositionOption;", "-\t\tfinal Object tabSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE);", "-\t\tif (tabSizeOption != null) { ", "-\t\t\tthis.tab_size = Integer.parseInt((String)tabSizeOption);", "+\t\tfinal Object arrayInitializerExpressionsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT);", "+\t\tif (arrayInitializerExpressionsAlignmentOption != null) {", "+\t\t\tthis.array_initializer_expressions_alignment = Integer.parseInt((String) arrayInitializerExpressionsAlignmentOption);", "-\t\tfinal Object lineSplitOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT);", "-\t\tif (lineSplitOption != null) { ", "-\t\t\tthis.page_width = Integer.parseInt((String)lineSplitOption);", "-\t\t}", "-\t\tfinal Object blankLinesBeforePackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_PACKAGE);", "-\t\tif (blankLinesBeforePackageOption != null) { ", "-\t\t\tthis.blank_lines_before_package = Integer.parseInt((String)blankLinesBeforePackageOption);", "-\t\t}", "-\t\tfinal Object blankLinesAfterPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_PACKAGE);", "-\t\tif (blankLinesAfterPackageOption != null) { ", "-\t\t\tthis.blank_lines_after_package = Integer.parseInt((String)blankLinesAfterPackageOption);", "-\t\t}", "-\t\tfinal Object blankLinesBeforeImportsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_IMPORTS);", "-\t\tif (blankLinesBeforeImportsOption != null) { ", "-\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String)blankLinesBeforeImportsOption);", "+\t\tfinal Object binaryExpressionAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT);", "+\t\tif (binaryExpressionAlignmentOption != null) {", "+\t\t\tthis.binary_expression_alignment = Integer.parseInt((String) binaryExpressionAlignmentOption);", "-\t\tif (blankLinesAfterImportsOption != null) { ", "-\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String)blankLinesAfterImportsOption);", "+\t\tif (blankLinesAfterImportsOption != null) {", "+\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String) blankLinesAfterImportsOption);", "-\t\tfinal Object initialIndentationLevelOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INITIAL_INDENTATION_LEVEL);", "-\t\tif (initialIndentationLevelOption != null) { ", "-\t\t\tthis.initial_indentation_level = Integer.parseInt((String)initialIndentationLevelOption);", "+\t\tfinal Object blankLinesAfterPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_AFTER_PACKAGE);", "+\t\tif (blankLinesAfterPackageOption != null) {", "+\t\t\tthis.blank_lines_after_package = Integer.parseInt((String) blankLinesAfterPackageOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforeFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD);", "+\t\tif (blankLinesBeforeFieldOption != null) {", "+\t\t\tthis.blank_lines_before_field = Integer.parseInt((String) blankLinesBeforeFieldOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforeImportsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_IMPORTS);", "+\t\tif (blankLinesBeforeImportsOption != null) {", "+\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String) blankLinesBeforeImportsOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforeMemberTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE);", "+\t\tif (blankLinesBeforeMemberTypeOption != null) {", "+\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String) blankLinesBeforeMemberTypeOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforeMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD);", "+\t\tif (blankLinesBeforeMethodOption != null) {", "+\t\t\tthis.blank_lines_before_method = Integer.parseInt((String) blankLinesBeforeMethodOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforeNewChunkOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK);", "+\t\tif (blankLinesBeforeNewChunkOption != null) {", "+\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String) blankLinesBeforeNewChunkOption);", "+\t\t}", "+\t\tfinal Object blankLinesBeforePackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_PACKAGE);", "+\t\tif (blankLinesBeforePackageOption != null) {", "+\t\t\tthis.blank_lines_before_package = Integer.parseInt((String) blankLinesBeforePackageOption);", "+\t\t}", "+\t\tfinal Object blockBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION);", "+\t\tif (blockBracePositionOption != null) {", "+\t\t\tthis.block_brace_position = (String) blockBracePositionOption;", "+\t\t}", "+\t\tfinal Object compactElseIfOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF);", "+\t\tif (compactElseIfOption != null) {", "+\t\t\tthis.compact_else_if = DefaultCodeFormatterConstants.TRUE.equals(compactElseIfOption);", "+\t\t}", "+\t\tfinal Object compactIfAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT);", "+\t\tif (compactIfAlignmentOption != null) {", "+\t\t\tthis.compact_if_alignment = Integer.parseInt((String) compactIfAlignmentOption);", "+\t\t}", "+\t\tfinal Object conditionalExpressionAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT);", "+\t\tif (conditionalExpressionAlignmentOption != null) {", "+\t\t\tthis.conditional_expression_alignment = Integer.parseInt((String) conditionalExpressionAlignmentOption);", "-\t\tif (continuationIndentationOption != null) { ", "-\t\t\tthis.continuation_indentation = Integer.parseInt((String)continuationIndentationOption);", "+\t\tif (continuationIndentationOption != null) {", "+\t\t\tthis.continuation_indentation = Integer.parseInt((String) continuationIndentationOption);", "-\t\tfinal Object typeDeclarationBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_BRACE_POSITION);", "-\t\tif (typeDeclarationBracePositionOption != null) { ", "-\t\t\tthis.type_declaration_brace_position = (String) typeDeclarationBracePositionOption;", "+\t\tfinal Object explicitConstructorArgumentsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT);", "+\t\tif (explicitConstructorArgumentsAlignmentOption != null) {", "+\t\t\tthis.explicit_constructor_arguments_alignment = Integer.parseInt((String) explicitConstructorArgumentsAlignmentOption);", "+\t\t}", "+\t\tfinal Object fillingSpaceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE);", "+\t\tif (fillingSpaceOption != null) {", "+\t\t\tString fillingSpaceOptionValue = (String) fillingSpaceOption;", "+\t\t\tif (fillingSpaceOptionValue.length() >= 1) {", "+\t\t\t\tthis.filling_space = fillingSpaceOptionValue.charAt(0);", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object formatGuardianClauseOnOneLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE);", "+\t\tif (formatGuardianClauseOnOneLineOption != null) {", "+\t\t\tthis.format_guardian_clause_on_one_line = DefaultCodeFormatterConstants.TRUE.equals(formatGuardianClauseOnOneLineOption);", "+\t\t}", "+\t\tfinal Object indentBlockStatementsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS);", "+\t\tif (indentBlockStatementsOption != null) {", "+\t\t\tthis.indent_block_statements = DefaultCodeFormatterConstants.TRUE.equals(indentBlockStatementsOption);", "+\t\t}", "+\t\tfinal Object indentBodyDeclarationsCompareToTypeHeaderOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER);", "+\t\tif (indentBodyDeclarationsCompareToTypeHeaderOption != null) {", "+\t\t\tthis.indent_body_declarations_compare_to_type_header = DefaultCodeFormatterConstants.TRUE.equals(indentBodyDeclarationsCompareToTypeHeaderOption);", "+\t\t}", "+\t\tfinal Object indentBreaksCompareToCasesOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES);", "+\t\tif (indentBreaksCompareToCasesOption != null) {", "+\t\t\tthis.indent_breaks_compare_to_cases = DefaultCodeFormatterConstants.TRUE.equals(indentBreaksCompareToCasesOption);", "+\t\t}", "+\t\tfinal Object indentSwitchstatementsCompareToCasesOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES);", "+\t\tif (indentSwitchstatementsCompareToCasesOption != null) {", "+\t\t\tthis.indent_switchstatements_compare_to_cases = DefaultCodeFormatterConstants.TRUE.equals(indentSwitchstatementsCompareToCasesOption);", "+\t\t}", "+\t\tfinal Object indentSwitchstatementsCompareToSwitchOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH);", "+\t\tif (indentSwitchstatementsCompareToSwitchOption != null) {", "+\t\t\tthis.indent_switchstatements_compare_to_switch = DefaultCodeFormatterConstants.TRUE.equals(indentSwitchstatementsCompareToSwitchOption);", "+\t\t}", "+\t\tfinal Object initialIndentationLevelOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INITIAL_INDENTATION_LEVEL);", "+\t\tif (initialIndentationLevelOption != null) {", "+\t\t\tthis.initial_indentation_level = Integer.parseInt((String) initialIndentationLevelOption);", "+\t\t}", "+\t\tfinal Object insertNewLineBeforeClosingBraceInArrayInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER);", "+\t\tif (insertNewLineBeforeClosingBraceInArrayInitializerOption != null) {", "+\t\t\tthis.insert_new_line_before_closing_brace_in_array_initializer = JavaCore.INSERT.equals(insertNewLineBeforeClosingBraceInArrayInitializerOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInControlStatementsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS);", "+\t\tif (insertNewLineInControlStatementsOption != null) {", "+\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(insertNewLineInControlStatementsOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyAnonymousTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION);", "+\t\tif (insertNewLineInEmptyAnonymousTypeDeclarationOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = JavaCore.INSERT.equals(insertNewLineInEmptyAnonymousTypeDeclarationOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyBlockOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK);", "+\t\tif (insertNewLineInEmptyBlockOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_block = JavaCore.INSERT.equals(insertNewLineInEmptyBlockOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyMethodBodyOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY);", "+\t\tif (insertNewLineInEmptyMethodBodyOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_method_body = JavaCore.INSERT.equals(insertNewLineInEmptyMethodBodyOption);", "+\t\t}", "+\t\tfinal Object insertNewLineInEmptyTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION);", "+\t\tif (insertNewLineInEmptyTypeDeclarationOption != null) {", "+\t\t\tthis.insert_new_line_in_empty_type_declaration = JavaCore.INSERT.equals(insertNewLineInEmptyTypeDeclarationOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterAssignmentOperatorsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS);", "+\t\tif (insertSpaceAfterAssignmentOperatorsOption != null) {", "+\t\t\tthis.insert_space_after_assignment_operators = JavaCore.INSERT.equals(insertSpaceAfterAssignmentOperatorsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterBinaryOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR);", "+\t\tif (insertSpaceAfterBinaryOperatorOption != null) {", "+\t\t\tthis.insert_space_after_binary_operator = JavaCore.INSERT.equals(insertSpaceAfterBinaryOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterBlockCloseBraceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE);", "+\t\tif (insertSpaceAfterBlockCloseBraceOption != null) {", "+\t\t\tthis.insert_space_after_block_close_brace = JavaCore.INSERT.equals(insertSpaceAfterBlockCloseBraceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterClosingParenInCastOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST);", "+\t\tif (insertSpaceAfterClosingParenInCastOption != null) {", "+\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(insertSpaceAfterClosingParenInCastOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterColonInAssertOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT);", "+\t\tif (insertSpaceAfterColonInAssertOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_assert = JavaCore.INSERT.equals(insertSpaceAfterColonInAssertOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterColonInConditionalOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL);", "+\t\tif (insertSpaceAfterColonInConditionalOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_conditional = JavaCore.INSERT.equals(insertSpaceAfterColonInConditionalOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterColonInLabeledStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT);", "+\t\tif (insertSpaceAfterColonInLabeledStatementOption != null) {", "+\t\t\tthis.insert_space_after_colon_in_labeled_statement = JavaCore.INSERT.equals(insertSpaceAfterColonInLabeledStatementOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInAllocationExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION);", "+\t\tif (insertSpaceAfterCommaInAllocationExpressionOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_allocation_expression = JavaCore.INSERT.equals(insertSpaceAfterCommaInAllocationExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInArrayInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER);", "+\t\tif (insertSpaceAfterCommaInArrayInitializerOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_array_initializer = JavaCore.INSERT.equals(insertSpaceAfterCommaInArrayInitializerOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInConstructorArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS);", "+\t\tif (insertSpaceAfterCommaInConstructorArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_constructor_arguments = JavaCore.INSERT.equals(insertSpaceAfterCommaInConstructorArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInConstructorThrowsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS);", "+\t\tif (insertSpaceAfterCommaInConstructorThrowsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_constructor_throws = JavaCore.INSERT.equals(insertSpaceAfterCommaInConstructorThrowsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInExplicitconstructorcallArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS);", "+\t\tif (insertSpaceAfterCommaInExplicitconstructorcallArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_explicitconstructorcall_arguments = JavaCore.INSERT.equals(insertSpaceAfterCommaInExplicitconstructorcallArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInForIncrementsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS);", "+\t\tif (insertSpaceAfterCommaInForIncrementsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_for_increments = JavaCore.INSERT.equals(insertSpaceAfterCommaInForIncrementsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInForInitsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS);", "+\t\tif (insertSpaceAfterCommaInForInitsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_for_inits = JavaCore.INSERT.equals(insertSpaceAfterCommaInForInitsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInMessagesendArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS);", "+\t\tif (insertSpaceAfterCommaInMessagesendArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_messagesend_arguments = JavaCore.INSERT.equals(insertSpaceAfterCommaInMessagesendArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInMethodArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS);", "+\t\tif (insertSpaceAfterCommaInMethodArgumentsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_method_arguments = JavaCore.INSERT.equals(insertSpaceAfterCommaInMethodArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInMethodThrowsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS);", "+\t\tif (insertSpaceAfterCommaInMethodThrowsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_method_throws = JavaCore.INSERT.equals(insertSpaceAfterCommaInMethodThrowsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInMultipleFieldDeclarationsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS);", "+\t\tif (insertSpaceAfterCommaInMultipleFieldDeclarationsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_multiple_field_declarations = JavaCore.INSERT.equals(insertSpaceAfterCommaInMultipleFieldDeclarationsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInMultipleLocalDeclarationsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS);", "+\t\tif (insertSpaceAfterCommaInMultipleLocalDeclarationsOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_multiple_local_declarations = JavaCore.INSERT.equals(insertSpaceAfterCommaInMultipleLocalDeclarationsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterCommaInSuperinterfacesOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES);", "+\t\tif (insertSpaceAfterCommaInSuperinterfacesOption != null) {", "+\t\t\tthis.insert_space_after_comma_in_superinterfaces = JavaCore.INSERT.equals(insertSpaceAfterCommaInSuperinterfacesOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterOpenParenInParenthesizedExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHESIZED_EXPRESSION);", "+\t\tif (insertSpaceAfterOpenParenInParenthesizedExpressionOption != null) {", "+\t\t\tthis.insert_space_after_open_paren_in_parenthesized_expression = JavaCore.INSERT.equals(insertSpaceAfterOpenParenInParenthesizedExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterOpeningParenInCastOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST);", "+\t\tif (insertSpaceAfterOpeningParenInCastOption != null) {", "+\t\t\tthis.insert_space_after_opening_paren_in_cast = JavaCore.INSERT.equals(insertSpaceAfterOpeningParenInCastOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterPostfixOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR);", "+\t\tif (insertSpaceAfterPostfixOperatorOption != null) {", "+\t\t\tthis.insert_space_after_postfix_operator = JavaCore.INSERT.equals(insertSpaceAfterPostfixOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterPrefixOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR);", "+\t\tif (insertSpaceAfterPrefixOperatorOption != null) {", "+\t\t\tthis.insert_space_after_prefix_operator = JavaCore.INSERT.equals(insertSpaceAfterPrefixOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterQuestionInConditionalOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL);", "+\t\tif (insertSpaceAfterQuestionInConditionalOption != null) {", "+\t\t\tthis.insert_space_after_question_in_conditional = JavaCore.INSERT.equals(insertSpaceAfterQuestionInConditionalOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterSemicolonInForOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR);", "+\t\tif (insertSpaceAfterSemicolonInForOption != null) {", "+\t\t\tthis.insert_space_after_semicolon_in_for = JavaCore.INSERT.equals(insertSpaceAfterSemicolonInForOption);", "+\t\t}", "+\t\tfinal Object insertSpaceAfterUnaryOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR);", "+\t\tif (insertSpaceAfterUnaryOperatorOption != null) {", "+\t\t\tthis.insert_space_after_unary_operator = JavaCore.INSERT.equals(insertSpaceAfterUnaryOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeAnonymousTypeOpenBraceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE);", "+\t\tif (insertSpaceBeforeAnonymousTypeOpenBraceOption != null) {", "+\t\t\tthis.insert_space_before_anonymous_type_open_brace = JavaCore.INSERT.equals(insertSpaceBeforeAnonymousTypeOpenBraceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeAssignmentOperatorsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS);", "+\t\tif (insertSpaceBeforeAssignmentOperatorsOption != null) {", "+\t\t\tthis.insert_space_before_assignment_operators = JavaCore.INSERT.equals(insertSpaceBeforeAssignmentOperatorsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeBinaryOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR);", "+\t\tif (insertSpaceBeforeBinaryOperatorOption != null) {", "+\t\t\tthis.insert_space_before_binary_operator = JavaCore.INSERT.equals(insertSpaceBeforeBinaryOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeBlockOpenBraceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE);", "+\t\tif (insertSpaceBeforeBlockOpenBraceOption != null) {", "+\t\t\tthis.insert_space_before_block_open_brace = JavaCore.INSERT.equals(insertSpaceBeforeBlockOpenBraceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeBracketInArrayReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE);", "+\t\tif (insertSpaceBeforeBracketInArrayReferenceOption != null) {", "+\t\t\tthis.insert_space_before_bracket_in_array_reference = JavaCore.INSERT.equals(insertSpaceBeforeBracketInArrayReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeBracketInArrayTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE);", "+\t\tif (insertSpaceBeforeBracketInArrayTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_before_bracket_in_array_type_reference = JavaCore.INSERT.equals(insertSpaceBeforeBracketInArrayTypeReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCatchExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION);", "+\t\tif (insertSpaceBeforeCatchExpressionOption != null) {", "+\t\t\tthis.insert_space_before_catch_expression = JavaCore.INSERT.equals(insertSpaceBeforeCatchExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingBraceInArrayInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER);", "+\t\tif (insertSpaceBeforeClosingBraceInArrayInitializerOption != null) {", "+\t\t\tthis.insert_space_before_closing_brace_in_array_initializer = JavaCore.INSERT.equals(insertSpaceBeforeClosingBraceInArrayInitializerOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingParenOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN);", "+\t\tif (insertSpaceBeforeClosingParenOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingParenInCastOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST);", "+\t\tif (insertSpaceBeforeClosingParenInCastOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren_in_cast = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenInCastOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeClosingParenInParenthesizedExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSION);", "+\t\tif (insertSpaceBeforeClosingParenInParenthesizedExpressionOption != null) {", "+\t\t\tthis.insert_space_before_closing_paren_in_parenthesized_expression = JavaCore.INSERT.equals(insertSpaceBeforeClosingParenInParenthesizedExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeColonInAssertOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT);", "+\t\tif (insertSpaceBeforeColonInAssertOption != null) {", "+\t\t\tthis.insert_space_before_colon_in_assert = JavaCore.INSERT.equals(insertSpaceBeforeColonInAssertOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeColonInCaseOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE);", "+\t\tif (insertSpaceBeforeColonInCaseOption != null) {", "+\t\t\tthis.insert_space_before_colon_in_case = JavaCore.INSERT.equals(insertSpaceBeforeColonInCaseOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeColonInConditionalOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL);", "+\t\tif (insertSpaceBeforeColonInConditionalOption != null) {", "+\t\t\tthis.insert_space_before_colon_in_conditional = JavaCore.INSERT.equals(insertSpaceBeforeColonInConditionalOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeColonInDefaultOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT);", "+\t\tif (insertSpaceBeforeColonInDefaultOption != null) {", "+\t\t\tthis.insert_space_before_colon_in_default = JavaCore.INSERT.equals(insertSpaceBeforeColonInDefaultOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeColonInLabeledStatementOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT);", "+\t\tif (insertSpaceBeforeColonInLabeledStatementOption != null) {", "+\t\t\tthis.insert_space_before_colon_in_labeled_statement = JavaCore.INSERT.equals(insertSpaceBeforeColonInLabeledStatementOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInAllocationExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION);", "+\t\tif (insertSpaceBeforeCommaInAllocationExpressionOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_allocation_expression = JavaCore.INSERT.equals(insertSpaceBeforeCommaInAllocationExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInArrayInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER);", "+\t\tif (insertSpaceBeforeCommaInArrayInitializerOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_array_initializer = JavaCore.INSERT.equals(insertSpaceBeforeCommaInArrayInitializerOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInConstructorArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS);", "+\t\tif (insertSpaceBeforeCommaInConstructorArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_constructor_arguments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInConstructorArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInConstructorThrowsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS);", "+\t\tif (insertSpaceBeforeCommaInConstructorThrowsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_constructor_throws = JavaCore.INSERT.equals(insertSpaceBeforeCommaInConstructorThrowsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInExplicitconstructorcallArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS);", "+\t\tif (insertSpaceBeforeCommaInExplicitconstructorcallArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_explicitconstructorcall_arguments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInExplicitconstructorcallArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInForIncrementsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS);", "+\t\tif (insertSpaceBeforeCommaInForIncrementsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_for_increments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInForIncrementsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInForInitsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS);", "+\t\tif (insertSpaceBeforeCommaInForInitsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_for_inits = JavaCore.INSERT.equals(insertSpaceBeforeCommaInForInitsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInMessagesendArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS);", "+\t\tif (insertSpaceBeforeCommaInMessagesendArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_messagesend_arguments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInMessagesendArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInMethodArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS);", "+\t\tif (insertSpaceBeforeCommaInMethodArgumentsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_method_arguments = JavaCore.INSERT.equals(insertSpaceBeforeCommaInMethodArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInMethodThrowsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS);", "+\t\tif (insertSpaceBeforeCommaInMethodThrowsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_method_throws = JavaCore.INSERT.equals(insertSpaceBeforeCommaInMethodThrowsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInMultipleFieldDeclarationsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS);", "+\t\tif (insertSpaceBeforeCommaInMultipleFieldDeclarationsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_multiple_field_declarations = JavaCore.INSERT.equals(insertSpaceBeforeCommaInMultipleFieldDeclarationsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInMultipleLocalDeclarationsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS);", "+\t\tif (insertSpaceBeforeCommaInMultipleLocalDeclarationsOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_multiple_local_declarations = JavaCore.INSERT.equals(insertSpaceBeforeCommaInMultipleLocalDeclarationsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeCommaInSuperinterfacesOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES);", "+\t\tif (insertSpaceBeforeCommaInSuperinterfacesOption != null) {", "+\t\t\tthis.insert_space_before_comma_in_superinterfaces = JavaCore.INSERT.equals(insertSpaceBeforeCommaInSuperinterfacesOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeFirstArgumentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT);", "+\t\tif (insertSpaceBeforeFirstArgumentOption != null) {", "+\t\t\tthis.insert_space_before_first_argument = JavaCore.INSERT.equals(insertSpaceBeforeFirstArgumentOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeFirstInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER);", "+\t\tif (insertSpaceBeforeFirstInitializerOption != null) {", "+\t\t\tthis.insert_space_before_first_initializer = JavaCore.INSERT.equals(insertSpaceBeforeFirstInitializerOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeForParenOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN);", "+\t\tif (insertSpaceBeforeForParenOption != null) {", "+\t\t\tthis.insert_space_before_for_paren = JavaCore.INSERT.equals(insertSpaceBeforeForParenOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeIfConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION);", "+\t\tif (insertSpaceBeforeIfConditionOption != null) {", "+\t\t\tthis.insert_space_before_if_condition = JavaCore.INSERT.equals(insertSpaceBeforeIfConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeMessageSendOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND);", "+\t\tif (insertSpaceBeforeMessageSendOption != null) {", "+\t\t\tthis.insert_space_before_message_send = JavaCore.INSERT.equals(insertSpaceBeforeMessageSendOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeMethodDeclarationOpenParenOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_DECLARATION_OPEN_PAREN);", "+\t\tif (insertSpaceBeforeMethodDeclarationOpenParenOption != null) {", "+\t\t\tthis.insert_space_before_method_declaration_open_paren = JavaCore.INSERT.equals(insertSpaceBeforeMethodDeclarationOpenParenOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeMethodOpenBraceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE);", "+\t\tif (insertSpaceBeforeMethodOpenBraceOption != null) {", "+\t\t\tthis.insert_space_before_method_open_brace = JavaCore.INSERT.equals(insertSpaceBeforeMethodOpenBraceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpenParenInParenthesizedExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHESIZED_EXPRESSION);", "+\t\tif (insertSpaceBeforeOpenParenInParenthesizedExpressionOption != null) {", "+\t\t\tthis.insert_space_before_open_paren_in_parenthesized_expression = JavaCore.INSERT.equals(insertSpaceBeforeOpenParenInParenthesizedExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeOpeningBraceInArrayInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER);", "+\t\tif (insertSpaceBeforeOpeningBraceInArrayInitializerOption != null) {", "+\t\t\tthis.insert_space_before_opening_brace_in_array_initializer = JavaCore.INSERT.equals(insertSpaceBeforeOpeningBraceInArrayInitializerOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforePostfixOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR);", "+\t\tif (insertSpaceBeforePostfixOperatorOption != null) {", "+\t\t\tthis.insert_space_before_postfix_operator = JavaCore.INSERT.equals(insertSpaceBeforePostfixOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforePrefixOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR);", "+\t\tif (insertSpaceBeforePrefixOperatorOption != null) {", "+\t\t\tthis.insert_space_before_prefix_operator = JavaCore.INSERT.equals(insertSpaceBeforePrefixOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeQuestionInConditionalOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL);", "+\t\tif (insertSpaceBeforeQuestionInConditionalOption != null) {", "+\t\t\tthis.insert_space_before_question_in_conditional = JavaCore.INSERT.equals(insertSpaceBeforeQuestionInConditionalOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeSemicolonOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON);", "+\t\tif (insertSpaceBeforeSemicolonOption != null) {", "+\t\t\tthis.insert_space_before_semicolon = JavaCore.INSERT.equals(insertSpaceBeforeSemicolonOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeSwitchConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION);", "+\t\tif (insertSpaceBeforeSwitchConditionOption != null) {", "+\t\t\tthis.insert_space_before_switch_condition = JavaCore.INSERT.equals(insertSpaceBeforeSwitchConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeSwitchOpenBraceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE);", "+\t\tif (insertSpaceBeforeSwitchOpenBraceOption != null) {", "+\t\t\tthis.insert_space_before_switch_open_brace = JavaCore.INSERT.equals(insertSpaceBeforeSwitchOpenBraceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeSynchronizedConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION);", "+\t\tif (insertSpaceBeforeSynchronizedConditionOption != null) {", "+\t\t\tthis.insert_space_before_synchronized_condition = JavaCore.INSERT.equals(insertSpaceBeforeSynchronizedConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeTypeOpenBraceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE);", "+\t\tif (insertSpaceBeforeTypeOpenBraceOption != null) {", "+\t\t\tthis.insert_space_before_type_open_brace = JavaCore.INSERT.equals(insertSpaceBeforeTypeOpenBraceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeUnaryOperatorOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR);", "+\t\tif (insertSpaceBeforeUnaryOperatorOption != null) {", "+\t\t\tthis.insert_space_before_unary_operator = JavaCore.INSERT.equals(insertSpaceBeforeUnaryOperatorOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBeforeWhileConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION);", "+\t\tif (insertSpaceBeforeWhileConditionOption != null) {", "+\t\t\tthis.insert_space_before_while_condition = JavaCore.INSERT.equals(insertSpaceBeforeWhileConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBetweenBracketsInArrayReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE);", "+\t\tif (insertSpaceBetweenBracketsInArrayReferenceOption != null) {", "+\t\t\tthis.insert_space_between_brackets_in_array_reference = JavaCore.INSERT.equals(insertSpaceBetweenBracketsInArrayReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBetweenBracketsInArrayTypeReferenceOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE);", "+\t\tif (insertSpaceBetweenBracketsInArrayTypeReferenceOption != null) {", "+\t\t\tthis.insert_space_between_brackets_in_array_type_reference = JavaCore.INSERT.equals(insertSpaceBetweenBracketsInArrayTypeReferenceOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBetweenEmptyArgumentsOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS);", "+\t\tif (insertSpaceBetweenEmptyArgumentsOption != null) {", "+\t\t\tthis.insert_space_between_empty_arguments = JavaCore.INSERT.equals(insertSpaceBetweenEmptyArgumentsOption);", "+\t\t}", "+\t\tfinal Object insertSpaceBetweenEmptyArrayInitializerOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARRAY_INITIALIZER);", "+\t\tif (insertSpaceBetweenEmptyArrayInitializerOption != null) {", "+\t\t\tthis.insert_space_between_empty_array_initializer = JavaCore.INSERT.equals(insertSpaceBetweenEmptyArrayInitializerOption);", "+\t\t}", "+\t\tfinal Object insertSpaceInCatchExpressionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION);", "+\t\tif (insertSpaceInCatchExpressionOption != null) {", "+\t\t\tthis.insert_space_in_catch_expression = JavaCore.INSERT.equals(insertSpaceInCatchExpressionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceInForParensOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS);", "+\t\tif (insertSpaceInForParensOption != null) {", "+\t\t\tthis.insert_space_in_for_parens = JavaCore.INSERT.equals(insertSpaceInForParensOption);", "+\t\t}", "+\t\tfinal Object insertSpaceInIfConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION);", "+\t\tif (insertSpaceInIfConditionOption != null) {", "+\t\t\tthis.insert_space_in_if_condition = JavaCore.INSERT.equals(insertSpaceInIfConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceInSwitchConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION);", "+\t\tif (insertSpaceInSwitchConditionOption != null) {", "+\t\t\tthis.insert_space_in_switch_condition = JavaCore.INSERT.equals(insertSpaceInSwitchConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceInSynchronizedConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION);", "+\t\tif (insertSpaceInSynchronizedConditionOption != null) {", "+\t\t\tthis.insert_space_in_synchronized_condition = JavaCore.INSERT.equals(insertSpaceInSynchronizedConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceInWhileConditionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION);", "+\t\tif (insertSpaceInWhileConditionOption != null) {", "+\t\t\tthis.insert_space_in_while_condition = JavaCore.INSERT.equals(insertSpaceInWhileConditionOption);", "+\t\t}", "+\t\tfinal Object insertSpaceWithinMessageSendOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND);", "+\t\tif (insertSpaceWithinMessageSendOption != null) {", "+\t\t\tthis.insert_space_within_message_send = JavaCore.INSERT.equals(insertSpaceWithinMessageSendOption);", "+\t\t}", "+\t\tfinal Object keepElseStatementOnSameLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE);", "+\t\tif (keepElseStatementOnSameLineOption != null) {", "+\t\t\tthis.keep_else_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(keepElseStatementOnSameLineOption);", "+\t\t}", "+\t\tfinal Object keepSimpleIfOnOneLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE);", "+\t\tif (keepSimpleIfOnOneLineOption != null) {", "+\t\t\tthis.keep_simple_if_on_one_line = DefaultCodeFormatterConstants.TRUE.equals(keepSimpleIfOnOneLineOption);", "+\t\t}", "+\t\tfinal Object keepThenStatementOnSameLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE);", "+\t\tif (keepThenStatementOnSameLineOption != null) {", "+\t\t\tthis.keep_then_statement_on_same_line = DefaultCodeFormatterConstants.TRUE.equals(keepThenStatementOnSameLineOption);", "+\t\t}", "+\t\tfinal Object lineDelimiterOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SEPARATOR);", "+\t\tif (lineDelimiterOption != null) {", "+\t\t\tthis.line_delimiter = (String) lineDelimiterOption;", "+\t\t}", "+\t\tfinal Object messageSendArgumentsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT);", "+\t\tif (messageSendArgumentsAlignmentOption != null) {", "+\t\t\tthis.message_send_arguments_alignment = Integer.parseInt((String) messageSendArgumentsAlignmentOption);", "+\t\t}", "+\t\tfinal Object messageSendSelectorAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT);", "+\t\tif (messageSendSelectorAlignmentOption != null) {", "+\t\t\tthis.message_send_selector_alignment = Integer.parseInt((String) messageSendSelectorAlignmentOption);", "+\t\t}", "+\t\tfinal Object methodDeclarationArgumentsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT);", "+\t\tif (methodDeclarationArgumentsAlignmentOption != null) {", "+\t\t\tthis.method_declaration_arguments_alignment = Integer.parseInt((String) methodDeclarationArgumentsAlignmentOption);", "-\t\tif (methodDeclarationBracePositionOption != null) { ", "+\t\tif (methodDeclarationBracePositionOption != null) {", "-\t\t}\t\t", "-\t\tfinal Object insertSpaceBeforeMethodDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_DECLARATION_OPEN_PAREN);", "-\t\tif (insertSpaceBeforeMethodDeclarationOption != null) { ", "-\t\t\tthis.insert_space_before_method_declaration_open_paren = insertSpaceBeforeMethodDeclarationOption.equals(JavaCore.INSERT);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_type_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_TYPE_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\tfinal Object methodThrowsClauseAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT);", "+\t\tif (methodThrowsClauseAlignmentOption != null) {", "+\t\t\tthis.method_throws_clause_alignment = Integer.parseInt((String) methodThrowsClauseAlignmentOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_method_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_METHOD_OPEN_BRACE).equals(JavaCore.INSERT);", "+\t\tfinal Object multipleFieldsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT);", "+\t\tif (multipleFieldsAlignmentOption != null) {", "+\t\t\tthis.multiple_fields_alignment = Integer.parseInt((String) multipleFieldsAlignmentOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_between_empty_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_ARGUMENTS).equals(JavaCore.INSERT);", "+\t\tfinal Object numberOfBlankLinesToInsertAtBeginningOfMethodBodyOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY);", "+\t\tif (numberOfBlankLinesToInsertAtBeginningOfMethodBodyOption != null) {", "+\t\t\tthis.number_of_blank_lines_to_insert_at_beginning_of_method_body = Integer.parseInt((String) numberOfBlankLinesToInsertAtBeginningOfMethodBodyOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT) != null) { ", "-\t\t\tthis.insert_space_before_first_argument = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_ARGUMENT).equals(JavaCore.INSERT);", "+\t\tfinal Object numberOfEmptyLinesToPreserveOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE);", "+\t\tif (numberOfEmptyLinesToPreserveOption != null) {", "+\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String) numberOfEmptyLinesToPreserveOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN) != null) { ", "-\t\t\tthis.insert_space_before_closing_paren = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN).equals(JavaCore.INSERT);", "+\t\tfinal Object pageWidthOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT);", "+\t\tif (pageWidthOption != null) {", "+\t\t\tthis.page_width = Integer.parseInt((String) pageWidthOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS) != null) { ", "-\t\t\tthis.insert_space_after_assignment_operators = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATORS).equals(JavaCore.INSERT);", "+\t\tfinal Object preserveUserLinebreaksOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_PRESERVE_USER_LINEBREAKS);", "+\t\tif (preserveUserLinebreaksOption != null) {", "+\t\t\tthis.preserve_user_linebreaks = DefaultCodeFormatterConstants.TRUE.equals(preserveUserLinebreaksOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS) != null) { ", "-\t\t\tthis.insert_space_before_assignment_operators = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATORS).equals(JavaCore.INSERT);", "-\t\t}\t\t\t\t\t\t\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE) != null) { ", "-\t\t\tthis.put_empty_statement_on_new_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE).equals(JavaCore.INSERT);", "-\t\t}\t\t\t\t\t\t\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON) != null) { ", "-\t\t\tthis.insert_space_before_semicolon = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON).equals(JavaCore.INSERT);", "+\t\tfinal Object putEmptyStatementOnNewLineOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE);", "+\t\tif (putEmptyStatementOnNewLineOption != null) {", "+\t\t\tthis.put_empty_statement_on_new_line = DefaultCodeFormatterConstants.TRUE.equals(putEmptyStatementOnNewLineOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND) != null) { ", "-\t\t\tthis.insert_space_within_message_send = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_WITHIN_MESSAGE_SEND).equals(JavaCore.INSERT);", "+\t\tfinal Object qualifiedAllocationExpressionArgumentsAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT);", "+\t\tif (qualifiedAllocationExpressionArgumentsAlignmentOption != null) {", "+\t\t\tthis.qualified_allocation_expression_arguments_alignment = Integer.parseInt((String) qualifiedAllocationExpressionArgumentsAlignmentOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND) != null) { ", "-\t\t\tthis.insert_space_before_message_send = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_MESSAGE_SEND).equals(JavaCore.INSERT);", "+\t\tfinal Object switchBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION);", "+\t\tif (switchBracePositionOption != null) {", "+\t\t\tthis.switch_brace_position = (String) switchBracePositionOption;", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_before_first_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FIRST_INITIALIZER).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_before_closing_brace_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION) != null) { ", "-\t\t\tthis.block_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_BLOCK_BRACE_POSITION);", "+\t\tfinal Object tabSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE);", "+\t\tif (tabSizeOption != null) {", "+\t\t\tthis.tab_size = Integer.parseInt((String) tabSizeOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_block_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BLOCK_OPEN_BRACE).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_case = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST) != null) { ", "-\t\t\tthis.insert_space_after_opening_paren_in_cast = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST) != null) { ", "-\t\t\tthis.insert_space_before_closing_paren_in_cast = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_default = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_while_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_WHILE_CONDITION).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_if_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_IF_CONDITION).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF) != null) { ", "-\t\t\tthis.compact_else_if = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_ELSE_IF).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_if_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_IF_CONDITION).equals(JavaCore.INSERT);", "+\t\tfinal Object typeDeclarationBracePositionOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_BRACE_POSITION);", "+\t\tif (typeDeclarationBracePositionOption != null) {", "+\t\t\tthis.type_declaration_brace_position = (String) typeDeclarationBracePositionOption;", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN) != null) { ", "-\t\t\tthis.insert_space_before_for_paren = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_FOR_PAREN).equals(JavaCore.INSERT);", "+\t\tfinal Object typeDeclarationSuperclassAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT);", "+\t\tif (typeDeclarationSuperclassAlignmentOption != null) {", "+\t\t\tthis.type_declaration_superclass_alignment = Integer.parseInt((String) typeDeclarationSuperclassAlignmentOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS) != null) { ", "-\t\t\tthis.insert_space_in_for_parens = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_FOR_PARENS).equals(JavaCore.INSERT);", "+\t\tfinal Object typeDeclarationSuperinterfacesAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT);", "+\t\tif (typeDeclarationSuperinterfacesAlignmentOption != null) {", "+\t\t\tthis.type_declaration_superinterfaces_alignment = Integer.parseInt((String) typeDeclarationSuperinterfacesAlignmentOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION) != null) { ", "-\t\t\tthis.switch_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_SWITCH_BRACE_POSITION);", "+\t\tfinal Object typeMemberAlignmentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT);", "+\t\tif (typeMemberAlignmentOption != null) {", "+\t\t\tthis.type_member_alignment = Integer.parseInt((String) typeMemberAlignmentOption);", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_switch_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_OPEN_BRACE).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_switch_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SWITCH_CONDITION).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_switch_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SWITCH_CONDITION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION) != null) { ", "-\t\t\tthis.insert_space_in_synchronized_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_SYNCHRONIZED_CONDITION).equals(JavaCore.INSERT);", "-\t\t}\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_synchronized_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_SYNCHRONIZED_CONDITION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_in_catch_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_IN_CATCH_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_catch_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CATCH_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION) != null) { ", "-\t\t\tthis.insert_space_before_while_condition = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_WHILE_CONDITION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS) != null) { ", "-\t\t\tthis.insert_new_line_in_control_statements = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_CONTROL_STATEMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_binary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_binary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_unary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_unary_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_multiple_field_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_multiple_field_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_superinterfaces = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_superinterfaces = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_allocation_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_allocation_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_assert = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT) != null) { ", "-\t\t\tthis.insert_space_after_colon_in_assert = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_before_question_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_after_question_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL) != null) { ", "-\t\t\tthis.insert_space_after_colon_in_conditional = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_constructor_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_constructor_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_constructor_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_THROWS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_constructor_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_THROWS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_for_increments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_for_increments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_explicitconstructorcall_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_explicitconstructorcall_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICITCONSTRUCTORCALL_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT) != null) { ", "-\t\t\tthis.insert_space_before_colon_in_labeled_statement = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT) != null) { ", "-\t\t\tthis.insert_space_after_colon_in_labeled_statement = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_messagesend_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MESSAGESEND_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_messagesend_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MESSAGESEND_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_method_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_method_arguments = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_ARGUMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_method_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_THROWS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_method_throws = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_THROWS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_multiple_local_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_multiple_local_declarations = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS) != null) { ", "-\t\t\tthis.insert_space_before_comma_in_for_inits = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS) != null) { ", "-\t\t\tthis.insert_space_after_comma_in_for_inits = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR) != null) { ", "-\t\t\tthis.insert_space_after_semicolon_in_for = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_postfix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_postfix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_before_prefix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR) != null) { ", "-\t\t\tthis.insert_space_after_prefix_operator = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH) != null) { ", "-\t\t\tthis.indent_switchstatements_compare_to_switch = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES) != null) { ", "-\t\t\tthis.indent_switchstatements_compare_to_cases = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES) != null) { ", "-\t\t\tthis.indent_breaks_compare_to_cases = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES).equals(JavaCore.INSERT);", "-\t\t}\t\t", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION) != null) { ", "-\t\t\tthis.anonymous_type_declaration_brace_position = (String) settings.get(DefaultCodeFormatterConstants.FORMATTER_ANONYMOUS_TYPE_DECLARATION_BRACE_POSITION);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE) != null) { ", "-\t\t\tthis.insert_space_before_anonymous_type_open_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_ANONYMOUS_TYPE_OPEN_BRACE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER) != null) { ", "-\t\t\tthis.indent_body_declarations_compare_to_type_header = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE) != null) { ", "-\t\t\tthis.filling_space = ((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_FILLING_SPACE)).charAt(0);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST) != null) { ", "-\t\t\tthis.insert_space_after_closing_paren_in_cast = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY) != null) { ", "-\t\t\tthis.number_of_blank_lines_to_insert_at_beginning_of_method_body = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_BLANK_LINES_TO_INSERT_AT_BEGINNING_OF_METHOD_BODY));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE) != null) { ", "-\t\t\tthis.keep_simple_if_on_one_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE) != null) { ", "-\t\t\tthis.format_guardian_clause_on_one_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_FORMAT_GUARDIAN_CLAUSE_ON_ONE_LINE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_open_paren_in_parenthesized_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_after_open_paren_in_parenthesized_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPEN_PAREN_IN_PARENTHIZED_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHIZED_EXPRESSION) != null) { ", "-\t\t\tthis.insert_space_before_closing_paren_in_parenthesized_expression = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHIZED_EXPRESSION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE) != null) { ", "-\t\t\tthis.keep_then_statement_on_same_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK) != null) { ", "-\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD) != null) { ", "-\t\t\tthis.blank_lines_before_field = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_FIELD));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD) != null) { ", "-\t\t\tthis.blank_lines_before_method = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_METHOD));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE) != null) { ", "-\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE) != null) {", "-\t\t\tthis.insert_space_after_block_close_brace = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_BLOCK_CLOSE_BRACE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE) != null) {", "-\t\t\tthis.keep_else_statement_on_same_line = settings.get(DefaultCodeFormatterConstants.FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE) != null) {", "-\t\t\tthis.insert_space_before_bracket_in_array_type_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_TYPE_REFERENCE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE) != null) {", "-\t\t\tthis.insert_space_between_brackets_in_array_type_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT) != null) { ", "-\t\t\tthis.compact_if_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_COMPACT_IF_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT) != null) { ", "-\t\t\tthis.type_declaration_superclass_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERCLASS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT) != null) { ", "-\t\t\tthis.type_declaration_superinterfaces_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_DECLARATION_SUPERINTERFACES_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.method_declaration_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_DECLARATION_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.message_send_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT) != null) { ", "-\t\t\tthis.message_send_selector_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MESSAGE_SEND_SELECTOR_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT) != null) { ", "-\t\t\tthis.method_throws_clause_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_METHOD_THROWS_CLAUSE_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT) != null) { ", "-\t\t\tthis.type_member_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_TYPE_MEMBER_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.allocation_expression_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.qualified_allocation_expression_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_QUALIFIED_ALLOCATION_EXPRESSION_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT) != null) { ", "-\t\t\tthis.array_initializer_expressions_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_EXPRESSIONS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT) != null) { ", "-\t\t\tthis.explicit_constructor_arguments_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_EXPLICIT_CONSTRUCTOR_ARGUMENTS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT) != null) { ", "-\t\t\tthis.conditional_expression_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_CONDITIONAL_EXPRESSION_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT) != null) { ", "-\t\t\tthis.binary_expression_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_BINARY_EXPRESSION_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY) != null) {", "-\t\t\tthis.insert_new_line_in_empty_method_body = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION) != null) {", "-\t\t\tthis.insert_new_line_in_empty_type_declaration = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION) != null) {", "-\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK) != null) {", "-\t\t\tthis.insert_new_line_in_empty_block = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE) != null) { ", "-\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER) != null) {", "-\t\t\tthis.insert_new_line_before_closing_brace_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT) != null) { ", "-\t\t\tthis.multiple_fields_alignment = Integer.parseInt((String)settings.get(DefaultCodeFormatterConstants.FORMATTER_MULTIPLE_FIELDS_ALIGNMENT));", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE) != null) {", "-\t\t\tthis.insert_space_before_bracket_in_array_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_BRACKET_IN_ARRAY_REFERENCE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE) != null) {", "-\t\t\tthis.insert_space_between_brackets_in_array_reference = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_REFERENCE).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS) != null) {", "-\t\t\tthis.indent_block_statements = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENT_BLOCK_STATEMENTS).equals(JavaCore.INSERT);", "-\t\t}", "-\t\tif (settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER) != null) {", "-\t\t\tthis.insert_space_before_opening_brace_in_array_initializer = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER).equals(JavaCore.INSERT);", "+\t\tfinal Object useTabOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "+\t\tif (useTabOption != null) {", "+\t\t\tthis.use_tab = JavaCore.TAB.equals(useTabOption);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcc9be7c2279259002d7e35920563b6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "5b2c155b9caca8bad7497ee7506c1681db8d49b2", "commitAfterChange": "f7b6c5bb1ddca0d93c72689a37e296273599775b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["+\t\texpectedProblemAttributes.put(\"IllegalModifierForConstructor\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalModifierForConstructor\", SKIP);"]}], "num": 29392}
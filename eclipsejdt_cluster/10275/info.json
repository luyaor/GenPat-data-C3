{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86fd0a56d71363dd77d94a6341ae76f2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90062e7d67d3aa53014e89836ad5712c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "58a9cdb775828812909aee547fd1ca9469a5050e", "commitAfterChange": "98c487057a8d2de923f33c88de2fc136cc388566", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "signatureAfterChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "diff": ["-\t\t\t\t\t\tchar[] path = relativePath.toString().toCharArray();", "+\t\t\t\t\t\tchar[] path;", "+\t\t\t\t\t\tif (relativePath.segmentCount() == 0) {", "+\t\t\t\t\t\t\t// case of a binary type in a jar (see 82542 Internal error during AST creation)", "+\t\t\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "+\t\t\t\t\t\t\tchar[] classFileChars = type.getParent().getElementName().toCharArray();", "+\t\t\t\t\t\t\tpath = CharOperation.concatWith(packageChars, classFileChars, '/');", "+\t\t\t\t\t\t} else", "+\t\t\t\t\t\t\tpath = relativePath.toString().toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c738caa655bf9103af2d83fbeb763206", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void decodeIndexKey(char[] key)", "signatureAfterChange": " public void decodeIndexKey(char[] key)", "diff": ["+\t\tthis.typeParameterSignatures = null;", "+\t} else {", "+\t\tchar[] names = CharOperation.subarray(key, start, slash);", "+\t\tthis.typeParameterSignatures = CharOperation.splitOn(',', names);", "+\t}", "+", "+\tslash = CharOperation.indexOf(SEPARATOR, key, start = slash + 1);", "+\tif (slash == start) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea552567da0803cf95c8fe9459436b10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b92bafecd030777e0d6056677f8286cf640a489f", "commitAfterChange": "fb0e428ed030f082ab1d3e242c3a3df4aa9ceb3d", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "signatureAfterChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "diff": ["+\tif (expectedImport.problemId() == InvalidTypeForStaticImport) {", "+\t\tchar[][] tokens = importRef.tokens;", "+\t\tString[] arguments = new String[]{CharOperation.toString(tokens)};", "+\t\tthis.handle(", "+\t\t        IProblem.InvalidTypeForStaticImport, ", "+\t\t        arguments, ", "+\t\t        arguments, ", "+\t\t        importRef.sourceStart, ", "+\t\t        (int) importRef.sourcePositions[tokens.length - 1]);", "+\t\treturn;", "+\t}"]}], "num": 10275}
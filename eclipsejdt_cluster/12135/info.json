{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f93667892f7e957ba7e732538471885", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b840fcea66e275c407d163437bc9c48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "2c216d62729c7bf0a533819d86bda0a688a39a26", "commitAfterChange": "789f8ee3dc78aa2cb74e4e857fb2da09cf6b5b4e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\t\tTypeVariableBinding[] originalVariables = this.originalMethod.typeVariables;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tnewArguments[i] = environment.convertToRawType(originalVariables[i].upperBound());", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tif (originalVariable.boundsCount() == 1) {", "+\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(originalVariable.upperBound());", "+\t\t\t\t} else {", "+\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(", "+\t\t\t\t\t\t\t// use an intersection type to retain full bound information", "+\t\t\t\t\t\t\tthis.environment.createWildcard(null, 0, originalVariable.superclass(), originalVariable.superInterfaces(), Wildcard.EXTENDS));", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "704eb33fa3b14ff4ab89c557abcbff4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "ea0c13f57ba1bc8fcf24d57a6ed1fca3a4943554", "commitAfterChange": "76fc29f1af4e9ec86970c2a456c7b7805a597ea2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["+", "+\t\tif (shouldComplain && useTypeAnnotations && srcMethod != null) {", "+\t\t\tTypeVariableBinding[] currentTypeVariables = currentMethod.typeVariables();", "+\t\t\tTypeVariableBinding[] inheritedTypeVariables = inheritedMethod.typeVariables();", "+\t\t\tif (currentTypeVariables != Binding.NO_TYPE_VARIABLES && currentTypeVariables.length == inheritedTypeVariables.length) {", "+\t\t\t\tfor (int i = 0; i < currentTypeVariables.length; i++) {", "+\t\t\t\t\tTypeVariableBinding inheritedVariable = inheritedTypeVariables[i];", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedVariable, currentTypeVariables[i], null, null, -1, CheckMode.BOUND_CHECK).isAnyMismatch())", "+\t\t\t\t\t\tscope.problemReporter().cannotRedefineTypeArgumentNullity(inheritedVariable, inheritedMethod, srcMethod.typeParameters()[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece7194217947109be183c74c9c5d6cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "3655fb3ae21ac46b5060eb9e240a41cd2462bac2", "commitAfterChange": "83445beb69e15e5eb2488d8746136cbbd8c4461a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context) throws InferenceFailureException", "diff": ["-\t\t\t\tTypeVariableBinding[] parameters = g.typeVariables();", "+\t\t\t\tfinal TypeVariableBinding[] parameters = g.typeVariables();", "+\t\t\t\t// construct theta = [P1:=alpha1,...]", "+\t\t\t\tfinal InferenceVariable[] alphas = new InferenceVariable[gAlpha.arguments.length];", "+\t\t\t\tSystem.arraycopy(gAlpha.arguments, 0, alphas, 0, alphas.length);", "+\t\t\t\tInferenceSubstitution theta = new InferenceSubstitution(context.environment, alphas) {", "+\t\t\t\t\t@Override", "+\t\t\t\t\tprotected TypeBinding getP(int i) {", "+\t\t\t\t\t\treturn parameters[i];", "+\t\t\t\t\t}", "+\t\t\t\t};", "-\t\t\t\t\taddBounds(pi.getTypeBounds(alpha, context), context.environment);", "+\t\t\t\t\taddBounds(pi.getTypeBounds(alpha, theta), context.environment);", "-\t\t\t\t\t\t\t\t\t\taddTypeBoundsFromWildcardBound(context, wildcardBinding.boundKind, t, r, bi);", "+\t\t\t\t\t\t\t\t\t\taddTypeBoundsFromWildcardBound(context, theta, wildcardBinding.boundKind, t, r, bi);"]}], "num": 12135}
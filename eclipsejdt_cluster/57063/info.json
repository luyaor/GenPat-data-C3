{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a021034160091ca00e25e65a4b30abf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7793fbc7c94eb0294ff8245d5015ecd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 345, "signatureBeforeChange": " public void test0953_assert_combined()", "signatureAfterChange": " public void test0953_assert_combined()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tif (o1 == null) { };\\n\" +", "-\t\t\t\"\t    ^^\\n\" +", "-\t\t\t\"Null comparison always yields false: The variable o1 cannot be null at this location\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tif (o2 == null) { };\\n\" +", "-\t\t\t\"\t    ^^\\n\" +", "-\t\t\t\"Redundant null check: The variable o2 can only be null at this location\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (o1 == null) { };\\n\" + ", "+\t\t\t\"\t    ^^\\n\" + ", "+\t\t\t\"Null comparison always yields false: The variable o1 cannot be null at this location\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (o1 == null) { };\\n\" + ", "+\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tif (o2 == null) { };\\n\" + ", "+\t\t\t\"\t    ^^\\n\" + ", "+\t\t\t\"Redundant null check: The variable o2 can only be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8286762c4a945571a62f71715a91a0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 297, "signatureBeforeChange": " public void test0953_assert_combined()", "signatureAfterChange": " public void test0953_assert_combined()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tif (o1 == null) { };\\n\" + ", "-\t\t\"\t    ^^\\n\" + ", "-\t\t\"The variable o1 cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tif (o2 == null) { };\\n\" + ", "-\t\t\"\t    ^^\\n\" + ", "-\t\t\"The variable o2 can only be null; it was either set to null or checked for null when last used\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (o1 == null) { };\\n\" + ", "+\t\t\t\"\t    ^^\\n\" + ", "+\t\t\t\"Null comparison always yields false: The variable o1 cannot be null at this location\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tif (o2 == null) { };\\n\" + ", "+\t\t\t\"\t    ^^\\n\" + ", "+\t\t\t\"Redundant null check: The variable o2 can only be null at this location\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe15d707ba875c66370bf66c47e9032e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 348, "methodNumberAfterChange": 348, "signatureBeforeChange": " public void test0956_assert_combined()", "signatureAfterChange": " public void test0956_assert_combined()", "diff": ["-\t\t\t\t\"    assert(o != null);\\n\" +    // don't complain", "+\t\t\t\t\"    assert(o != null);\\n\" +    // complain", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tif (o == null) { };\\n\" +", "-\t\t\"\t    ^\\n\" +", "-\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tassert(o != null);\\n\" + ", "+\t\t\"\t       ^\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tif (o == null) { };\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o cannot be null at this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tif (o == null) { };\\n\" + ", "+\t\t\"\t               ^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}], "num": 57063}
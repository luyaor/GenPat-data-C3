{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5aa0dcccfe5fedeeb7f3912c32c1d0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c2e086c823047cbb6e7cae41a6a1fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10278a797430cb698cfd46cf8e9f8d898ccc6e22", "commitAfterChange": "68f08d6c81f3b848e0fcb2f296b83150ef5cf8c0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (methodDeclaration != null) {", "-\t\t\tArrayList parameterSignatures = new ArrayList();", "-\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\t\tType type = parameter.getType();", "-\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (node != null) {", "+\t\t\tif (node instanceof MethodDeclaration) {", "+\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\t\t\tArrayList parameterSignatures = new ArrayList();", "+\t\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\t\tType type = parameter.getType();", "+\t\t\t\t\tparameterSignatures.add(Util.getSignature(type));", "+\t\t\t\t}", "+\t\t\t\tint parameterCount = parameterSignatures.size();", "+\t\t\t\tString[] parameters = new String[parameterCount];", "+\t\t\t\tparameterSignatures.toArray(parameters);", "+\t\t\t\treturn declaringType.getMethod(getName(), parameters);", "+\t\t\t} else {", "+\t\t\t\t// annotation type member declaration", "+\t\t\t\tAnnotationTypeMemberDeclaration typeMemberDeclaration = (AnnotationTypeMemberDeclaration) node;", "+\t\t\t\treturn declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), new String[0]); // annotation type members don't have parameters", "-\t\t\tint parameterCount = parameterSignatures.size();", "-\t\t\tString[] parameters = new String[parameterCount];", "-\t\t\tparameterSignatures.toArray(parameters);", "-\t\t\treturn declaringType.getMethod(getName(), parameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500dd4936b5a5c445941bff3a331047c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "e7c40dbc434529a8379a830b9ae4ab2c74d0fc13", "commitAfterChange": "ae7797d27bfed7c3f6e7630a551ffec98598a05e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\t\tnode = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\t\tif (parentType instanceof ArrayCreation) {\r", "+\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(parentType);\r", "+\t\t\t} else {\r", "+\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\t\t}\r", "+\t\t\t} else if (node instanceof ArrayAllocationExpression) {\r", "+\t\t\t\tArrayAllocationExpression arrayAllocationExpression = (ArrayAllocationExpression) node;\r", "+\t\t\t\treturn this.getTypeBinding(arrayAllocationExpression.arrayTb);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1bbe3fed61b4e54259c4ec84980af8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "b3a2f7bfaa3438c01da8001220d197a764da19bb", "commitAfterChange": "40a85c2d4c57226c917bc0f991a26ac5a5d8b085", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveExpressionType(Expression expression)", "diff": ["-\t\t\tOperatorExpression operatorExpression = (OperatorExpression) this.newAstToOldAst.get(expression);", "-\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "+\t\t\tObject node = this.newAstToOldAst.get(expression);", "+\t\t\tif (node instanceof OperatorExpression) {", "+\t\t\t\tOperatorExpression operatorExpression = (OperatorExpression) node;", "+\t\t\t\treturn this.getTypeBinding(operatorExpression.resolvedType);", "+\t\t\t} else if (node instanceof StringLiteralConcatenation) {", "+\t\t\t\tStringLiteralConcatenation stringLiteralConcatenation = (StringLiteralConcatenation) node;", "+\t\t\t\treturn this.getTypeBinding(stringLiteralConcatenation.resolvedType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7ea8270fa337b97f34c951f3ff55fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "78e8a5c1a2e383b6d515ba3aab0d674e5548befa", "commitAfterChange": "4cb6b481d6e3c4ba44985d7b9c454fbe1bc42a7d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\tTypeReference typeReference = (TypeReference) this.newAstToOldAst.get(type);\r", "-\t\tif (typeReference == null) {\r", "-\t\t\treturn super.resolveType(type);\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\tif (node != null) {\r", "+\t\t\tif (node instanceof TypeReference) {\r", "+\t\t\t\tTypeReference typeReference = (TypeReference) node;\r", "+\t\t\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\t\t} else if (node instanceof SingleNameReference) {\r", "+\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// it should be a type reference\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\treturn null;\r"]}], "num": 65854}
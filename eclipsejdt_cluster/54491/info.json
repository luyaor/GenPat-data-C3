{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9243ab8a8d9dbbfee22bb54ec152db4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed0b129598f613b5fa6eed7cbc2e45c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private SimpleLookupTable findDeltas()", "signatureAfterChange": "  private SimpleLookupTable findDeltas()", "diff": ["-\tObject[] keyTable = binaryResources.keyTable;", "-\tObject[] valueTable = binaryResources.valueTable;", "+\tObject[] keyTable = binaryLocationsPerProject.keyTable;", "+\tObject[] valueTable = binaryLocationsPerProject.valueTable;", "-\t\t\t\tIResource[] classFoldersAndJars = (IResource[]) valueTable[i];", "-\t\t\t\tif (classFoldersAndJars.length <= 1)", "-\t\t\t\t\tcontinue nextProject; // project has no structural changes in its output folder", "-\t\t\t\tclassFoldersAndJars[0] = null; // skip the output folder", "+\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) valueTable[i];", "+\t\t\t\tboolean canSkip = true;", "+\t\t\t\tfor (int j = 0, m = classFoldersAndJars.length; j < m; j++) {", "+\t\t\t\t\tif (classFoldersAndJars[j].isOutputFolder())", "+\t\t\t\t\t\tclassFoldersAndJars[j] = null; // can ignore output folder since project was not structurally changed", "+\t\t\t\t\telse", "+\t\t\t\t\t\tcanSkip = false;", "+\t\t\t\t}", "+\t\t\t\tif (canSkip) continue nextProject; // project has no structural changes in its output folders"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01ed797a27de0cba3f02e2307e615a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["-\t\tfor (int i = 0; i < paramLength; i++)", "+\t\tboolean declaresNullTypeAnnotation = false;", "+\t\tfor (int i = 0; i < paramLength; i++) {", "+\t\t\tdeclaresNullTypeAnnotation |= typeParameters[i].binding.hasNullTypeAnnotations();", "+\t\t}", "+\t\tif (declaresNullTypeAnnotation)", "+\t\t\tfor (int i = 0; i < paramLength; i++)", "+\t\t\t\ttypeParameters[i].binding.updateTagBits(); // <T extends List<U>, @NonNull U> --> tag T as having null type annotations "]}], "num": 54491}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21e0d02bcf3ce7ffd16d6454315335ca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f90f8b99953b0e68641fabf71d2a114", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\tint pc = codeStream.position;\r", "-\t\tif (constant.booleanValue() == true) {\r", "-\t\t\t// constant == true\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel == null) {\r", "-\t\t\t\t\t// implicit falling through the FALSE case\r", "-\t\t\t\t\tif (trueLabel != null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\t// constant == false\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel != null) {\r", "-\t\t\t\t\t// implicit falling through the TRUE case\r", "-\t\t\t\t\tif (trueLabel == null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "+\tint pc = codeStream.position;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "155d916f7f02db9f446b2075d3542388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t\tint pc = codeStream.position;\r", "-\t\tif (constant.booleanValue() == true) {\r", "-\t\t\t// constant == true\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel == null) {\r", "-\t\t\t\t\t// implicit falling through the FALSE case\r", "-\t\t\t\t\tif (trueLabel != null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel != null) {\r", "-\t\t\t\t\t// implicit falling through the TRUE case\r", "-\t\t\t\t\tif (trueLabel == null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a95beea7e82fdf4490968ba3e0a41c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "e5e6f9097f2c3bf7294bd658643d6be9f7aaa5ef", "commitAfterChange": "d00bc48524f3df289951f11fca95cb39820be47f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": "\r \tpublic void generateOptimizedBoolean(\r \t\tBlockScope currentScope,\r \t\tCodeStream codeStream,\r \t\tLabel trueLabel,\r \t\tLabel falseLabel,\r \t\tboolean valueRequired)", "diff": ["- */\r", "-public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {\r", "-\r", "-\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {\r", "-\t\tint pc = codeStream.position;\r", "-\t\tif (constant.booleanValue() == true) {\r", "-\t\t\t// constant == true\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel == null) {\r", "-\t\t\t\t\t// implicit falling through the FALSE case\r", "-\t\t\t\t\tif (trueLabel != null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tif (valueRequired) {\r", "-\t\t\t\tif (falseLabel != null) {\r", "-\t\t\t\t\t// implicit falling through the TRUE case\r", "-\t\t\t\t\tif (trueLabel == null) {\r", "-\t\t\t\t\t\tcodeStream.goto_(falseLabel);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\treturn;\r", "-\t}\r", "-\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {\r", "-\t\texpression.generateOptimizedBoolean(currentScope, codeStream, falseLabel, trueLabel, valueRequired);\r", "-\t} else {\r", "-\t\tsuper.generateOptimizedBoolean(currentScope, codeStream, trueLabel, falseLabel, valueRequired);\r", "-\t}\r", "-}\r", "+\t */\r", "+\tpublic void generateOptimizedBoolean(\r", "+\t\tBlockScope currentScope,\r", "+\t\tCodeStream codeStream,\r", "+\t\tLabel trueLabel,\r", "+\t\tLabel falseLabel,\r", "+\t\tboolean valueRequired) {\r", "+\r", "+\t\tif ((constant != Constant.NotAConstant) && (constant.typeID() == T_boolean)) {\r", "+\t\t\tsuper.generateOptimizedBoolean(\r", "+\t\t\t\tcurrentScope,\r", "+\t\t\t\tcodeStream,\r", "+\t\t\t\ttrueLabel,\r", "+\t\t\t\tfalseLabel,\r", "+\t\t\t\tvalueRequired);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT) {\r", "+\t\t\texpression.generateOptimizedBoolean(\r", "+\t\t\t\tcurrentScope,\r", "+\t\t\t\tcodeStream,\r", "+\t\t\t\tfalseLabel,\r", "+\t\t\t\ttrueLabel,\r", "+\t\t\t\tvalueRequired);\r", "+\t\t} else {\r", "+\t\t\tsuper.generateOptimizedBoolean(\r", "+\t\t\t\tcurrentScope,\r", "+\t\t\t\tcodeStream,\r", "+\t\t\t\ttrueLabel,\r", "+\t\t\t\tfalseLabel,\r", "+\t\t\t\tvalueRequired);\r", "+\t\t}\r", "+\t}\r"]}], "num": 11213}
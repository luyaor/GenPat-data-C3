{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "708bbad82861813320cc54a4d9d1a6ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d57bfd3a8ed8ec586ecadafc855a3e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t System.out.println(\" and working copies [\"); //$NON-NLS-1$", "+\t\t\t\t System.out.println(\"and working copies [\"); //$NON-NLS-1$", "-\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 10); // 1 for file path, 3 for parsing, 6 for binding resolution //$NON-NLS-1$", "+\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 10); // 1 for file path, 4 for parsing and binding creation, 5 for binding resolution //$NON-NLS-1$", "-\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 4); // 1 for file path, 3 for parsing //$NON-NLS-1$", "+\t\t\t\t\tprogressMonitor.beginTask(\"\", length * 5); // 1 for file path, 4 for parsing and binding creation //$NON-NLS-1$", "-\t\t\tthis.matchingOpenables = new MatchingOpenableSet();", "+\t\t\tthis.potentialMatches = new PotentialMatchSet();", "-\t\t\tJavaProject previousJavaProject = null;", "+\t\t\tIType focusType = getFocusType();", "+\t\t\tJavaProject previousJavaProject = focusType == null ? null : (JavaProject)focusType.getJavaProject();", "-\t\t\t\t\tif (!javaProject.equals(previousJavaProject)) {", "+\t\t\t\t\tif (focusType == null // when searching in hierarchy, all potential matches are resolved in the focus project context", "+\t\t\t\t\t\t\t&& !javaProject.equals(previousJavaProject)) {", "-\t\t\t\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();", "+\t\t\t\t\t\t\tthis.potentialMatches = new PotentialMatchSet();", "-\t\t\t\t\t\t// initialization for this project", "-\t\t\t\t\t\tif (length == 1) {", "-\t\t\t\t\t\t\t// if only one potential match, a file name environment costs too much,", "-\t\t\t\t\t\t\t// so use the existing searchable  environment wich will populate the java model", "-\t\t\t\t\t\t\t// only for this potential match and its required types.", "-\t\t\t\t\t\t\tif (this.nameEnvironment != null) { // cleanup", "-\t\t\t\t\t\t\t\tthis.nameEnvironment.cleanup();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.nameEnvironment = javaProject.getSearchableNameEnvironment();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.initializeNameEnvironment(javaProject);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.initialize(javaProject);", "-\t\t\t\t// add matching openable", "-\t\t\t\tthis.addMatchingOpenable(resource, openable, null/*no CompilationUnitDeclaration yet*/, null/*no Matchset yet*/);", "+\t\t\t\t// add potential match", "+\t\t\t\tthis.addPotentialMatch(resource, openable);", "-\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();", "+\t\t\t\tthis.potentialMatches = new PotentialMatchSet();", "-\t\t\tthis.parsedUnits = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddbf0c808c3d4eb3a7b597c3e34010cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public void locateMatches(String[] filePaths, IWorkspace workspace) throws JavaModelException", "signatureAfterChange": "\r public void locateMatches(String[] filePaths, IWorkspace workspace) throws JavaModelException", "diff": ["+\tthis.potentialMatches = new PotentialMatch[10];\r", "+\tthis.potentialMatchesLength = 0;\r", "-\t\tthis.currentOpenable = factory.createOpenable(pathString);\r", "-\t\tif (this.currentOpenable == null) continue;  // match is outside classpath\r", "+\t\tOpenable openable = factory.createOpenable(pathString);\r", "+\t\tif (openable == null) \r", "+\t\t\tcontinue;  // match is outside classpath\r", "+\t\tIResource resource = null;\r", "-\t\t\tJavaProject javaProject = (JavaProject)this.currentOpenable.getJavaProject();\r", "-\t\t\tthis.currentResource = this.currentOpenable.getUnderlyingResource();\r", "-\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "-\t\t\t\tthis.currentResource = javaProject.getProject();\r", "+\t\t\tJavaProject javaProject = (JavaProject)openable.getJavaProject();\r", "+\t\t\tresource = openable.getUnderlyingResource();\r", "+\t\t\tif (resource == null) { // case of a file in an external jar\r", "+\t\t\t\tresource = javaProject.getProject();\r", "+\t\t\t\t// locate matches in previous project\r", "+\t\t\t\tif (previousJavaProject != null) {\r", "+\t\t\t\t\tthis.locateMatches();\r", "+\t\t\t\t\tthis.potentialMatchesLength = 0;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "-\t\t\tif (!couldInitializePattern) continue; // the pattern could not be initialized: the match cannot be in this project\r", "+\t\t\tif (!couldInitializePattern) \r", "+\t\t\t\tcontinue; // the pattern could not be initialized: the match cannot be in this project\r", "-\t\t// locate matches in current file and report them\r", "-\t\ttry {\r", "-\t\t\tif (this.currentOpenable instanceof CompilationUnit) {\r", "-\t\t\t\tthis.locateMatchesInCompilationUnit();\r", "-\t\t\t} else if (this.currentOpenable instanceof org.eclipse.jdt.internal.core.ClassFile) {\r", "-\t\t\t\tthis.locateMatchesInClassFile();\r", "-\t\t\t}\r", "-\t\t} catch (AbortCompilation e) {\r", "-\t\t\t// problem with class path: it could not find base classes\r", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.BUILDER_INITIALIZATION_ERROR);\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tif (e instanceof JavaModelException) {\r", "-\t\t\t\tthrow (JavaModelException)e;\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new JavaModelException(e);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\t// add potential match\r", "+\t\tthis.addPotentialMatch(resource, openable);\r", "+\t\t\r", "-}\r", "+\t// last project\r", "+\tif (previousJavaProject != null) {\r", "+\t\tthis.locateMatches();\r", "+\t\tthis.potentialMatchesLength = 0;\r"]}], "num": 31704}
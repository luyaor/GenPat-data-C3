{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d27c0ef62913a60e914d2d50a76a96bd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a99e9a9208df06e7a8a1b60c1eb812", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "677c4b39a30069207f57550aec27ea9d04477c82", "commitAfterChange": "a8939af811304c63be0e7f585bcaea4e93cb581f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ClasspathEntry( \t\tint contentKind, \t\tint entryKind, \t\tIPath path, \t\tIPath[] inclusionPatterns, \t\tIPath[] exclusionPatterns, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tIPath specificOutputLocation, \t\tboolean isExported, \t\tIAccessRule[] accessRules, \t\tboolean combineAccessRules, \t\tIClasspathAttribute[] extraAttributes)", "signatureAfterChange": " \tpublic ClasspathEntry( \t\tint contentKind, \t\tint entryKind, \t\tIPath path, \t\tIPath[] inclusionPatterns, \t\tIPath[] exclusionPatterns, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tIPath specificOutputLocation, \t\tboolean isExported, \t\tIAccessRule[] accessRules, \t\tboolean combineAccessRules, \t\tIClasspathAttribute[] extraAttributes)", "diff": ["-\t\tAccessRuleSet ruleSet = createAccessRuleSet(accessRules);", "-\t\tif (ruleSet != null) {", "-\t\t\t// compute message template", "-\t\t\truleSet.messageTemplates = getMessageTemplates();", "+\t\tint length;", "+\t\tif (accessRules != null && (length = accessRules.length) > 0) {", "+\t\t\tAccessRule[] rules = new AccessRule[length];", "+\t\t\tSystem.arraycopy(accessRules, 0, rules, 0, length);", "+\t\t\tthis.accessRuleSet = new AccessRuleSet(rules, getMessageTemplates());", "-\t\tthis.accessRuleSet = ruleSet;", "+//\t\telse { -- implicit!", "+//\t\t\tthis.accessRuleSet = null;", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f3e768f68c81c329bd1678f92bb2542", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileFinder.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public void find(File f, String pattern, boolean verbose)", "signatureAfterChange": " \t public static String[] find(File f, String pattern)", "diff": ["-\tpublic int count = 0;", "-public void find(File f, String pattern, boolean verbose) {", "-\tif (verbose) {", "-\t\tSystem.out.println(Main.bind(\"scanning.start\",f.getAbsolutePath())); //$NON-NLS-1$", "-\t}", "-\tfind0(f, pattern, verbose);", "-\tSystem.arraycopy(this.resultFiles, 0, (this.resultFiles = new String[this.count]), 0, this.count);", "+\t", "+public static String[] find(File f, String pattern) {", "+\tArrayList files = new ArrayList();", "+\tfind0(f, pattern, files);", "+\tString[] result = new String[files.size()];", "+\tfiles.toArray(result);", "+\treturn result;"]}], "num": 70476}
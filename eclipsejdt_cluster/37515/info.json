{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ab695c70a7dc0aa61ee6b624ecc7749", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec4558f962d9e88fa4dbd29ccf6d588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 474, "methodNumberAfterChange": 474, "signatureBeforeChange": " \tpublic void test470()", "signatureAfterChange": " \tpublic void test470()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tComparable s1 = choose(true, \\\"string\\\", new Integer(1));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tComparable s3 = choose(true, new Integer(1), new Float(2));\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79cde970e51fddfa296170c9356e4801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 806, "methodNumberAfterChange": 806, "signatureBeforeChange": " public void test800()", "signatureAfterChange": " public void test800()", "diff": ["-\t\t\"1. WARNING in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfor (Constructor constructor  : constrs) {\\n\" + ", "+\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 8)\\r\\n\" + ", "-\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\r\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tfinal String message = constructor.getAnnotation(AnnClass).message();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f2078cade10672d15274a8c858fe541", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test422134()", "signatureAfterChange": " \tpublic void test422134()", "diff": ["+\t\t\t\"\t\t\treturn o1.compareToIgnoreCase(o1);\\n\" + ", "+\t\t\t\"\t\t});\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation sort(ArrayList, (<no type> o1, <no type> o2) -> {\\n\" + ", "+\t\t\t\"  return o1.compareToIgnoreCase(o1);\\n\" + ", "+\t\t\t\"}) of the generic method sort(List<T>, Comparator<? super T>) of type Collections\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tCollections.sort(new ArrayList(), (o1, o2) -> {\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type ArrayList needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tCollections.sort(new ArrayList(), (o1, o2) -> {\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + "]}], "num": 37515}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdd15b5c077adfaa6a076ee6773eb802", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58cd86195199f295ae5cf77bf701fde3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\t// try to retrieve imports from the source\r", "+\t\t\tSourceMapper sourceMapper = ((ClassFile) declaringType.getClassFile()).getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tchar[][] imports = sourceMapper.getImports((BinaryType) declaringType);\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tthis.context.setImports(imports);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71714e79c88595e8d0793b1d323ca782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\t// try to retrieve imports from the source\r", "+\t\t\tSourceMapper sourceMapper = ((ClassFile) declaringType.getClassFile()).getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tchar[][] imports = sourceMapper.getImports((BinaryType) declaringType);\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tthis.context.setImports(imports);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e07a36fdfa7244d7c482fffe97ab0548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/eval/EvaluationContextWrapper.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "signatureAfterChange": "\r public void evaluateCodeSnippet(\r \tString codeSnippet, \r \tString[] localVariableTypeNames, \r \tString[] localVariableNames, \r \tint[] localVariableModifiers, \r \tIType declaringType, \r \tboolean isStatic, \r \tboolean isConstructorCall, \r \tICodeSnippetRequestor requestor, \r \tIProgressMonitor progressMonitor) throws org.eclipse.jdt.core.JavaModelException", "diff": ["+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\t// try to retrieve imports from the source\r", "+\t\t\tSourceMapper sourceMapper = ((ClassFile) declaringType.getClassFile()).getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tchar[][] imports = sourceMapper.getImports((BinaryType) declaringType);\r", "+\t\t\t\tif (imports != null) {\r", "+\t\t\t\t\tthis.context.setImports(imports);\r", "+\t\t\t\t}\r"]}], "num": 41170}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e2efd2b37ddeed7635b4cbcbdb1d508", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0674f6e3ed813ac6ce46398cdf925942", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java", "commitBeforeChange": "504d9c930db0a7b3e061db7df86f22966a0a6152", "commitAfterChange": "21b7e8fca889a53ea1492dacfa8764858f158168", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void initializeDefaultPreferences()", "signatureAfterChange": " \tpublic void initializeDefaultPreferences()", "diff": ["-\t\tMap defaultOptionsMap = Util.getOriginalDefaultOptions(optionNames);", "+\t\tMap defaultOptionsMap = new CompilerOptions().getMap(); // compiler defaults", "+", "+\t\t// Override some compiler defaults", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_LOCAL_VARIABLE_ATTR, JavaCore.GENERATE);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_CODEGEN_UNUSED_LOCAL, JavaCore.PRESERVE);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_TAGS, JavaCore.DEFAULT_TASK_TAGS);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_PRIORITIES, JavaCore.DEFAULT_TASK_PRIORITIES);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_CASE_SENSITIVE, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);", "+", "+\t\t// Builder settings", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, JavaCore.ABORT);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE, JavaCore.WARNING);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER, JavaCore.CLEAN);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER, JavaCore.IGNORE);", "+", "+\t\t// JavaCore settings", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_ORDER, JavaCore.IGNORE);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_INCOMPLETE_CLASSPATH, JavaCore.ERROR);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_CIRCULAR_CLASSPATH, JavaCore.ERROR);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, JavaCore.IGNORE);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, JavaCore.ENABLED);", "+", "+\t\t// encoding setting comes from resource plug-in", "+\t\toptionNames.add(JavaCore.CORE_ENCODING);", "+", "+\t\t// Formatter settings", "+\t\tMap codeFormatterOptionsMap = DefaultCodeFormatterConstants.getEclipseDefaultSettings(); // code formatter defaults", "+\t\tfor (Iterator iter = codeFormatterOptionsMap.entrySet().iterator(); iter.hasNext();) {", "+\t\t\tMap.Entry entry = (Map.Entry) iter.next();", "+\t\t\tString optionName = (String) entry.getKey();", "+\t\t\tdefaultOptionsMap.put(optionName, entry.getValue());", "+\t\t\toptionNames.add(optionName);", "+\t\t}", "+", "+\t\t// CodeAssist settings", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_DEPRECATION_CHECK, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_IMPLICIT_QUALIFICATION, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_DISCOURAGED_REFERENCE_CHECK, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_SUGGEST_STATIC_IMPORTS, JavaCore.ENABLED);", "+", "+\t\t// Time out for parameter names", "+\t\tdefaultOptionsMap.put(JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC, \"50\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183585a6a13c8c1acadd7c28353fe3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "fb96a1c85d64a712beb45b02ec6ef71c691d3831", "commitAfterChange": "382b067fdb60eb61ee53faad83800b76fff0bbbf", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tprivate void findFieldsFromFavorites( \t\t\tchar[] fieldName, \t\t\tFieldBinding[] fields, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector localsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "signatureAfterChange": " \t \tprivate void findFieldsFromFavorites( \t\t\tchar[] fieldName, \t\t\tFieldBinding[] fields, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector localsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "diff": ["-\t\t\tchar[] completion = CharOperation.concat(typeName, field.name, '.');", "-", "+\t\t\tCompilationUnitDeclaration cu = this.unitScope.referenceContext;", "+\t\t\tint importStart = cu.types[0].declarationSourceStart;", "+\t\t\tint importEnd = importStart;", "+\t\t\t", "-\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(field.type));", "-\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "-\t\t\t\tproposal.setName(field.name);", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(field.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\tif (this.compilerOptions.complianceLevel < ClassFileConstants.JDK1_5 ||", "+\t\t\t\t\t!this.options.suggestStaticImport) {", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, CompletionProposal.TYPE_IMPORT)) {", "+\t\t\t\t\tchar[] completion = CharOperation.concat(receiverType.sourceName, field.name, '.');", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tchar[] typeImportCompletion = createImportCharArray(typeName, false, false);", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal typeImportProposal = this.createProposal(CompletionProposal.TYPE_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\ttypeImportProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\ttypeImportProposal.completionEngine = this;", "+\t\t\t\t\tchar[] packageName = receiverType.qualifiedPackageName();", "+\t\t\t\t\ttypeImportProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\ttypeImportProposal.setSignature(getSignature(receiverType));", "+\t\t\t\t\ttypeImportProposal.setPackageName(packageName);", "+\t\t\t\t\ttypeImportProposal.setTypeName(receiverType.qualifiedSourceName());", "+\t\t\t\t\ttypeImportProposal.setCompletion(typeImportCompletion);", "+\t\t\t\t\ttypeImportProposal.setFlags(receiverType.modifiers);", "+\t\t\t\t\ttypeImportProposal.setAdditionalFlags(CompletionFlags.Default);", "+\t\t\t\t\ttypeImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\ttypeImportProposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{typeImportProposal});", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, CompletionProposal.FIELD_IMPORT)) {", "+\t\t\t\t\tchar[] completion = field.name;", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tchar[] fieldImportCompletion = createImportCharArray(CharOperation.concat(typeName, field.name, '.'), true, false);", "+", "+\t\t\t\t\tCompletionProposal fieldImportProposal = this.createProposal(CompletionProposal.FIELD_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\tfieldImportProposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tfieldImportProposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tfieldImportProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tfieldImportProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tfieldImportProposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tfieldImportProposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tfieldImportProposal.setName(field.name);", "+\t\t\t\t\tfieldImportProposal.setCompletion(fieldImportCompletion);", "+\t\t\t\t\tfieldImportProposal.setFlags(field.modifiers);", "+\t\t\t\t\tfieldImportProposal.setAdditionalFlags(CompletionFlags.StaticImport);", "+\t\t\t\t\tfieldImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\tfieldImportProposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{fieldImportProposal});", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523aad4a1977095a8ecf2eed81722f5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "diff": ["-\t\tAssert.isTrue(false, \"Modifications in nodes of type \" + node.getClass().getName() + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\tint pos= rewriteJavadoc(node, EnumConstantDeclaration.JAVADOC_PROPERTY);", "+\t\trewriteModifiers2(node, EnumConstantDeclaration.MODIFIERS2_PROPERTY, pos);", "+\t\tpos= rewriteRequiredNode(node, EnumConstantDeclaration.NAME_PROPERTY);", "+\t\tRewriteEvent argsEvent= getEvent(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY);", "+\t\tif (argsEvent != null && argsEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\tRewriteEvent[] children= argsEvent.getChildren();", "+\t\t\ttry {", "+\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "+\t\t\t\tboolean hasParents= (nextTok == ITerminalSymbols.TokenNameLPAREN);", "+\t\t\t\tboolean isAllRemoved= hasParents && isAllOfKind(children, RewriteEvent.REMOVED);", "+\t\t\t\tString prefix= \"\"; //$NON-NLS-1$", "+\t\t\t\tif (!hasParents) {", "+\t\t\t\t\tprefix= \"(\"; //$NON-NLS-1$", "+\t\t\t\t} else if (!isAllRemoved) {", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t}", "+\t\t\t\tpos= rewriteNodeList(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, pos, prefix, \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t", "+\t\t\t\tif (!hasParents) {", "+\t\t\t\t\tdoTextInsert(pos, \")\", getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "+\t\t\t\t} else if (isAllRemoved) {", "+\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\tpos= afterClosing;", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tpos= doVisit(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, 0);", "+\t\t}", "+\t\t// 'pos' can be before brace", "+\t\t", "+\t\tRewriteEvent bodyEvent= getEvent(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\tif (bodyEvent != null && bodyEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\tRewriteEvent[] children= bodyEvent.getChildren();", "+\t\t\ttry {", "+\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "+\t\t\t\tif (nextTok == ITerminalSymbols.TokenNameRPAREN) { // ", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t\tnextTok= getScanner().readNext(pos, true);", "+\t\t\t\t}", "+\t\t\t\tboolean hasBraces= (nextTok == ITerminalSymbols.TokenNameLBRACE);", "+\t\t\t\tboolean isAllRemoved= hasBraces && isAllOfKind(children, RewriteEvent.REMOVED);", "+\t\t\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "+\t\t\t\tif (!hasBraces) {", "+\t\t\t\t\tString prefix= this.formatter.ENUM_BODY_START.getPrefix(startIndent, getLineDelimiter());", "+\t\t\t\t\tdoTextInsert(pos, prefix, getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t} else if (!isAllRemoved) {", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t}", "+", "+\t\t\t\tpos= rewriteParagraphList(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, pos, startIndent, 0, 0);", "+\t\t\t\t", "+\t\t\t\tif (!hasBraces) {", "+\t\t\t\t\tString suffix= this.formatter.ENUM_BODY_END.getPrefix(startIndent, getLineDelimiter());", "+\t\t\t\t\tdoTextInsert(pos, suffix, getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\tif (isAllRemoved) {", "+\t\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdoVisit(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, 0);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e85b931116447fcd4a7bc655c45aa36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed)", "diff": ["-\t\tint fieldLength = fieldName.length;", "-\t\t\tif (fieldLength > field.name.length) continue next;", "-", "-\t\t\tif (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */))\tcontinue next;", "+\t\t\tif (fieldName != null) {", "+\t\t\t\tif (fieldName.length > field.name.length) continue next;", "+\t\t\t\tif (!CharOperation.prefixEquals(fieldName, field.name, false /* ignore case */))\tcontinue next;", "+\t\t\t}", "+\t\t\t// Special case for javadoc completion", "+\t\t\tif (this.assistNodeInJavadoc > 0) {", "+\t\t\t\tif (invocationSite instanceof CompletionOnJavadocFieldReference) {", "+\t\t\t\t\tCompletionOnJavadocFieldReference fieldRef = (CompletionOnJavadocFieldReference) invocationSite;", "+\t\t\t\t\tif (fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tif (fieldRef.completeInText()) {", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(new char[] { '#' }, field.name);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (fieldRef.completeInText()) {", "+\t\t\t\t\t\tif (fieldRef.receiver instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\t\t\tJavadocSingleTypeReference typeRef = (JavadocSingleTypeReference) fieldRef.receiver;", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(typeRef.token, field.name, '#');", "+\t\t\t\t\t\t} else if (fieldRef.receiver instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\t\t\tJavadocQualifiedTypeReference typeRef = (JavadocQualifiedTypeReference) fieldRef.receiver;", "+\t\t\t\t\t\t\tcompletion = CharOperation.concat(CharOperation.concatWith(typeRef.tokens, '.'), field.name, '#');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "-\t\t\trelevance += computeRelevanceForCaseMatching(fieldName, field.name);", "+\t\t\tif (fieldName != null) relevance += computeRelevanceForCaseMatching(fieldName, field.name);", "-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t// Standard proposal", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// Javadoc completions", "+\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_FIELD_REF)) {", "+\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\tproposal.setName(field.name);", "+\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "+\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\tif(DEBUG) {", "+\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t}", "+\t\t\t\t// Javadoc value completion for static fields", "+\t\t\t\tif (field.isStatic() && !this.requestor.isIgnored(CompletionProposal.JAVADOC_VALUE_REF)) {", "+\t\t\t\t\tjavadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_VALUE);", "+\t\t\t\t\tCompletionProposal valueProposal = this.createProposal(CompletionProposal.JAVADOC_VALUE_REF, this.actualCompletionPosition);", "+\t\t\t\t\tvalueProposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tvalueProposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tvalueProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tvalueProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tvalueProposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tvalueProposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tvalueProposal.setName(field.name);", "+\t\t\t\t\tvalueProposal.setCompletion(javadocCompletion);", "+\t\t\t\t\tvalueProposal.setFlags(field.modifiers);", "+\t\t\t\t\tvalueProposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tvalueProposal.setRelevance(relevance+R_VALUE_TAG);", "+\t\t\t\t\tthis.requestor.accept(valueProposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(valueProposal);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22526226ba1bf60cca01c88f239b947", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "  \tprotected void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprotected void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector methodsFound, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["+\t}", "+\t\tObjectVector fieldsFound,", "+\t\tObjectVector methodsFound,", "-\t\tboolean missingElementsHaveProblems) {", "+\t\tboolean missingElementsHaveProblems,", "+\t\tchar[] castedReceiver,", "+\t\tint receiverStart,", "+\t\tint receiverEnd) {", "-\t\tboolean proposeField = !this.isIgnored(CompletionProposal.FIELD_REF, missingElements != null);", "-\t\tboolean proposeMethod = !this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null);", "-\t\t", "-\t\tObjectVector methodsFound = new ObjectVector();", "+\t\tboolean proposeField =", "+\t\t\tcastedReceiver == null ?", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.FIELD_REF, missingElements != null) :", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, missingElements != null) ;", "+\t\tboolean proposeMethod = ", "+\t\t\tcastedReceiver == null ?", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null) :", "+\t\t\t\t\t!this.isIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, missingElements != null);", "-\t\t\t\tif(!isIgnored(CompletionProposal.FIELD_REF, missingElements != null)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "-\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "-\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "-\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "-\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\tproposal.setTypeName(INT);", "-\t\t\t\t\tproposal.setName(lengthField);", "-\t\t\t\t\tif (missingElements != null) {", "-\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "-\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "-\t\t\t\t\t\t\tsubProposals[i] =", "-\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "-\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "-\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\tif (castedReceiver == null) {", "+\t\t\t\t\tif(!isIgnored(CompletionProposal.FIELD_REF, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "+\t\t\t\t\t\tproposal.setTypeName(INT);", "+\t\t\t\t\t\tproposal.setName(lengthField);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "-\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\tproposal.setCompletion(lengthField);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tproposal.setCompletion(lengthField);", "-\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t} else {", "+\t\t\t\t\tchar[] completion = CharOperation.concat(castedReceiver, lengthField);", "+\t\t\t\t\t", "+\t\t\t\t\tif(!this.isIgnored(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(INT_SIGNATURE);", "+\t\t\t\t\t\tproposal.setReceiverSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setTypeName(INT);", "+\t\t\t\t\t\tproposal.setName(lengthField);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setReceiverRange(receiverStart - this.offset, receiverEnd - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (castedReceiver != null) {", "+\t\t\t\t\tcompletion = CharOperation.concat(castedReceiver, completion);", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\tif (!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null)) {", "-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "-\t\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\t\tthis.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4 && receiverType.isArrayType() ?", "-\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tgetSignature(receiverType)) :", "-\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\t\t\t\tOBJECT));", "-\t\t\t\t\t//proposal.setOriginalSignature(null);", "-\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "-\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "-\t\t\t\t\t//proposal.setParameterPackageNames(null);", "-\t\t\t\t\t//proposal.setParameterTypeNames(null);", "-\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "-\t\t\t\t\tproposal.setTypeName(OBJECT);", "-\t\t\t\t\tproposal.setName(cloneMethod);", "-\t\t\t\t\tif (missingElements != null) {", "-\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "-\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "-\t\t\t\t\t\t\tsubProposals[i] =", "-\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "-\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "-\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "-\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\tif (castedReceiver == null) {", "+\t\t\t\t\tif (!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\t\tthis.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4 && receiverType.isArrayType() ?", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tgetSignature(receiverType)) :", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\t\t\t\t\t\t\tOBJECT));", "+\t\t\t\t\t\t//proposal.setOriginalSignature(null);", "+\t\t\t\t\t\t//proposal.setDeclarationPackageName(null);", "+\t\t\t\t\t\t//proposal.setDeclarationTypeName(null);", "+\t\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "+\t\t\t\t\t\tproposal.setTypeName(OBJECT);", "+\t\t\t\t\t\tproposal.setName(cloneMethod);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "-\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\tmethodsFound.add(new Object[]{objectRef.getMethods(cloneMethod)[0], objectRef});", "+\t\t\t\t} else {", "+\t\t\t\t\tif(!this.isIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, missingElements != null)) {", "+\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, this.actualCompletionPosition);", "+\t\t\t\t\t\tproposal.setDeclarationSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\t\tthis.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4 && receiverType.isArrayType() ?", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tgetSignature(receiverType)) :", "+\t\t\t\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\t\t\t\t\t\t\tOBJECT));", "+\t\t\t\t\t\tproposal.setReceiverSignature(getSignature(receiverType));", "+\t\t\t\t\t\tproposal.setPackageName(CharOperation.concatWith(JAVA_LANG, '.'));", "+\t\t\t\t\t\tproposal.setTypeName(OBJECT);", "+\t\t\t\t\t\tproposal.setName(cloneMethod);", "+\t\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tproposal.setReceiverRange(receiverStart - this.offset, receiverEnd - this.offset);", "+\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t}", "-\t\t\t\tmethodsFound.add(new Object[]{objectRef.getMethods(cloneMethod)[0], objectRef});", "-\t\t\t\tnew ObjectVector(),", "+\t\t\t\tfieldsFound,", "-\t\t\t\tmissingElementsHaveProblems);", "+\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\tcastedReceiver,", "+\t\t\t\treceiverStart,", "+\t\t\t\treceiverEnd);", "-\t\t\t\tmissingElementsHaveProblems);", "+\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\tcastedReceiver,", "+\t\t\t\treceiverStart,", "+\t\t\t\treceiverEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bee078c12faf1fb2b6c40d56b4b579a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemInvalidImport\",2); //$NON-NLS-1$\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.WARNING);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 1);\t\t\t\t\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 2);\r", "-\t\t\t\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);\r", "+\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.WARNING);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_PreserveUnusedLocal, 0);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 1);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);\r", "+\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "+\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 1);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "-\t\tfor(int i = 0; i < problemOption.length ; i++){\r", "-\t\t\tfor(int j = 0 ; j < options.length ; j++){\r", "-\t\t\t\tif(options[j].getID().equals(problemOption[i]) && options[j].getValueIndex() == 1){\r", "-\t\t\t\t\toptions[j].setValueIndex(2);\r", "-\t\t\t\t}\r", "+\t\t// filter options which are related to the assist component\r", "+\t\tObject[] entries = options.entrySet().toArray();\r", "+\t\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)){\r", "+\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);\r", "+}\r"]}], "num": 61684}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8c5281884eda139d534c86d44f5e587", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9305333aad2b6a42fadb1458a162fc1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void testTypeRefGenericAll02_AllGenericFlags() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll02_AllGenericFlags() throws CoreException", "diff": ["-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<\ufffd|String|\ufffd> x;@130] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<\ufffd|A|\ufffd, B, C> t;@148] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, \ufffd|B|\ufffd, C> t;@151] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, \ufffd|C|\ufffd> t;@154] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>> bar() {@198] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>> bar() {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>>();@267] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>>();@269] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<\ufffd|A|\ufffd, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, \ufffd|Z|\ufffd<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<\ufffd|String|\ufffd>, X<String>> () {@101] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, \ufffd|X|\ufffd<String>> () {@110] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<\ufffd|String|\ufffd>> () {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<\ufffd|A|\ufffd, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends \ufffd|B|\ufffd, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super \ufffd|C|\ufffd> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super \ufffd|A|\ufffd, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, \ufffd|B|\ufffd, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends \ufffd|C|\ufffd> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends \ufffd|A|\ufffd, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super \ufffd|B|\ufffd, C> param) {@352] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, \ufffd|C|\ufffd> param) {@355] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.C [class C extends X<\ufffd|String|\ufffd> {}@428] EXACT_MATCH\"", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<!|String|!> x;@130] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<!|A|!, B, C> t;@148] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, !|B|!, C> t;@151] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, !|C|!> t;@154] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>> bar() {@198] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>> bar() {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>>();@267] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>>();@269] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<!|A|!, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, !|Z|!<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<!|String|!>, X<String>> () {@101] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, !|X|!<String>> () {@110] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<!|String|!>> () {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<!|A|!, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends !|B|!, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super !|C|!> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super !|A|!, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, !|B|!, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends !|C|!> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends !|A|!, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super !|B|!, C> param) {@352] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, !|C|!> param) {@355] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.C [class C extends X<!|String|!> {}@428] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb0cb9b3773e7ea63f6d896fa963429c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void testTypeRefGenericsTest13_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest13_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test13/Test.java test13.Test [public class Test<T> extends S<\ufffd|Exception|\ufffd> {@47] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\tvoid foo(Test<\ufffd|Exception|\ufffd> test) {@75] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tthis.<\ufffd|X|\ufffd<Exception>>foo(null);@102] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tthis.<X<\ufffd|Exception|\ufffd>>foo(null);@104] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tsuper.<\ufffd|X|\ufffd<X<Exception>>>foo(null);@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tsuper.<X<\ufffd|X|\ufffd<Exception>>>foo(null);@137] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tsuper.<X<X<\ufffd|Exception|\ufffd>>>foo(null);@139] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<\ufffd|X|\ufffd<X<X<RuntimeException>>>>foo(null);@183] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<X<\ufffd|X|\ufffd<X<RuntimeException>>>>foo(null);@185] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<X<X<\ufffd|X|\ufffd<RuntimeException>>>>foo(null);@187] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<X<X<X<\ufffd|RuntimeException|\ufffd>>>>foo(null);@189] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\tvoid fred(Test<\ufffd|String|\ufffd> test) {@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<\ufffd|X|\ufffd<Object>, Exception, Test<Exception>>bar(null);@263] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<\ufffd|Object|\ufffd>, Exception, Test<Exception>>bar(null);@265] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<Object>, \ufffd|Exception|\ufffd, Test<Exception>>bar(null);@274] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<Object>, Exception, \ufffd|Test|\ufffd<Exception>>bar(null);@285] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<Object>, Exception, Test<\ufffd|Exception|\ufffd>>bar(null);@290] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<\ufffd|X|\ufffd<X<Object>>, RuntimeException, Test<X<Exception>>>bar(null);@321] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<\ufffd|X|\ufffd<Object>>, RuntimeException, Test<X<Exception>>>bar(null);@323] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<\ufffd|Object|\ufffd>>, RuntimeException, Test<X<Exception>>>bar(null);@325] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, \ufffd|RuntimeException|\ufffd, Test<X<Exception>>>bar(null);@335] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, RuntimeException, \ufffd|Test|\ufffd<X<Exception>>>bar(null);@353] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, RuntimeException, Test<\ufffd|X|\ufffd<Exception>>>bar(null);@358] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, RuntimeException, Test<X<\ufffd|Exception|\ufffd>>>bar(null);@360] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<\ufffd|X|\ufffd<X<X<Object>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@404] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<\ufffd|X|\ufffd<X<Object>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@406] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<\ufffd|X|\ufffd<Object>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@408] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<\ufffd|Object|\ufffd>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@410] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, \ufffd|RuntimeException|\ufffd, Test<X<X<Exception>>>>bar(null);@421] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, \ufffd|Test|\ufffd<X<X<Exception>>>>bar(null);@439] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, Test<\ufffd|X|\ufffd<X<Exception>>>>bar(null);@444] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, Test<X<\ufffd|X|\ufffd<Exception>>>>bar(null);@446] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, Test<X<X<\ufffd|Exception|\ufffd>>>>bar(null);@448] EXACT_MATCH\\n\" +", "-\t\t\"src/test13/Test.java void test13.S.bar(S) [\t<T, U extends Exception, V extends S<\ufffd|R|\ufffd>>void bar(S s) {}@558] EXACT_MATCH\"", "+\t\t\"src/test13/Test.java test13.Test [public class Test<T> extends S<!|Exception|!> {@47] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\tvoid foo(Test<!|Exception|!> test) {@75] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tthis.<!|X|!<Exception>>foo(null);@102] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tthis.<X<!|Exception|!>>foo(null);@104] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tsuper.<!|X|!<X<Exception>>>foo(null);@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tsuper.<X<!|X|!<Exception>>>foo(null);@137] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\tsuper.<X<X<!|Exception|!>>>foo(null);@139] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<!|X|!<X<X<RuntimeException>>>>foo(null);@183] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<X<!|X|!<X<RuntimeException>>>>foo(null);@185] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<X<X<!|X|!<RuntimeException>>>>foo(null);@187] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.foo(Test<Exception>) [\t\ttest.<X<X<X<!|RuntimeException|!>>>>foo(null);@189] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\tvoid fred(Test<!|String|!> test) {@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<!|X|!<Object>, Exception, Test<Exception>>bar(null);@263] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<!|Object|!>, Exception, Test<Exception>>bar(null);@265] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<Object>, !|Exception|!, Test<Exception>>bar(null);@274] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<Object>, Exception, !|Test|!<Exception>>bar(null);@285] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tthis.<X<Object>, Exception, Test<!|Exception|!>>bar(null);@290] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<!|X|!<X<Object>>, RuntimeException, Test<X<Exception>>>bar(null);@321] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<!|X|!<Object>>, RuntimeException, Test<X<Exception>>>bar(null);@323] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<!|Object|!>>, RuntimeException, Test<X<Exception>>>bar(null);@325] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, !|RuntimeException|!, Test<X<Exception>>>bar(null);@335] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, RuntimeException, !|Test|!<X<Exception>>>bar(null);@353] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, RuntimeException, Test<!|X|!<Exception>>>bar(null);@358] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\tsuper.<X<X<Object>>, RuntimeException, Test<X<!|Exception|!>>>bar(null);@360] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<!|X|!<X<X<Object>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@404] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<!|X|!<X<Object>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@406] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<!|X|!<Object>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@408] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<!|Object|!>>>, RuntimeException, Test<X<X<Exception>>>>bar(null);@410] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, !|RuntimeException|!, Test<X<X<Exception>>>>bar(null);@421] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, !|Test|!<X<X<Exception>>>>bar(null);@439] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, Test<!|X|!<X<Exception>>>>bar(null);@444] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, Test<X<!|X|!<Exception>>>>bar(null);@446] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.Test.fred(Test<String>) [\t\ttest.<X<X<X<Object>>>, RuntimeException, Test<X<X<!|Exception|!>>>>bar(null);@448] EXACT_MATCH\\n\" +", "+\t\t\"src/test13/Test.java void test13.S.bar(S) [\t<T, U extends Exception, V extends S<!|R|!>>void bar(S s) {}@558] EXACT_MATCH\""]}], "num": 33206}
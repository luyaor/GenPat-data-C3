{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3bb878d413aeec09dd72e030c96d807", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f0dbfac56c9966e306c81455098ad84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["+ */", "+public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose) {", "+\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7 && location instanceof ThrowStatement) {", "+\t\tExpression throwExpression = ((ThrowStatement)location).exception;", "+\t\tLocalVariableBinding throwArgBinding = throwExpression.localVariableBinding();", "+\t\tif (throwExpression instanceof SingleNameReference // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350361 ", "+\t\t\t\t&& throwArgBinding instanceof CatchParameterBinding && throwArgBinding.isEffectivelyFinal()) {", "+\t\t\tCatchParameterBinding parameter = (CatchParameterBinding) throwArgBinding;", "+\t\t\tcheckExceptionHandlers(parameter.getPreciseTypes(), location, flowInfo, scope);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t\t\t\t\t\t\t\traisedException, // precise exception that will be caught", "+\t\t\t\t\t\t\t\tcaughtException,", "-\tscope.problemReporter().unhandledException(raisedException, location);", "+\tif (isExceptionOnAutoClose) {", "+\t\tscope.problemReporter().unhandledExceptionFromAutoClose(raisedException, location);", "+\t} else {", "+\t\tscope.problemReporter().unhandledException(raisedException, location);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf521ed8d352abb6bebf62252c394b2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "0451f7d8d4c6c8405b9315cd6272871fc556bba4", "commitAfterChange": "99792a3ac5be202887d314558a46b5851f3a5997", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(TypeElement a)", "signatureAfterChange": " \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(TypeElement a)", "diff": ["+\t */", "-\t\treturn _annoToUnit.getValues(a);", "+\t\tif (a.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\tthrow new IllegalArgumentException(\"Argument must represent an annotation type\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (isAnnotationInherited(a)) {", "+\t\t\tSet<Element> annotatedElements = new HashSet<Element>(_annoToUnit.getValues(a));", "+\t\t\t// For all other root elements that are TypeElements, and for their recursively enclosed", "+\t\t\t// types, add each element if it has a superclass are annotated with 'a'", "+\t\t\tReferenceBinding annoTypeBinding = (ReferenceBinding)((TypeElementImpl)a)._binding;", "+\t\t\tfor (TypeElement element : ElementFilter.typesIn(getRootElements())) {", "+\t\t\t\tReferenceBinding typeBinding = (ReferenceBinding)((TypeElementImpl)element)._binding;", "+\t\t\t\taddAnnotatedElements(annoTypeBinding, typeBinding, annotatedElements);", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableSet(annotatedElements);", "+\t\t}", "+\t\treturn Collections.unmodifiableSet(_annoToUnit.getValues(a));"]}], "num": 66735}
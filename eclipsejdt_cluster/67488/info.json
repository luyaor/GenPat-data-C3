{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12d7b8f5a83f4c494f00e16c3f8fb524", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "755312032bc4529436fd6c3e4a71bee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "10a7931aec1c8332a21c39057c6b5465506f45bd", "commitAfterChange": "ac67adfb696f3d698561eed93e542c7d574b5a91", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-\t\t\t\tif (localBinding.useFlag != LocalVariableBinding.USED) {", "-\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682", "-\t\t\t\t\t// access from compound assignment does not prevent \"unused\" warning, unless unboxing is involved:", "-\t\t\t\t\tif (isReachable && (this.implicitConversion & TypeIds.UNBOXING) != 0) {", "-\t\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.FAKE_USED;", "-\t\t\t\t\t}", "+\t\t\t\tif (isReachable) {", "+\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t\t} else if (localBinding.useFlag == LocalVariableBinding.UNUSED) {", "+\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.FAKE_USED;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc05911496fb318cb3988bcf69baf56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "signatureAfterChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "diff": ["-\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "-\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "-\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "-\t\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "-\t\t\t\t\t\tif ((fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "-\t\t\t\tif (fieldType != null ", "-\t\t\t\t\t\t&& ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0)", "-\t\t\t\t\t\t&& ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "-\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "-\t\t\t\t}", "-\t\t\t\tint size = allTypeAnnotationContexts.size();", "-\t\t\t\tif (size != 0) {", "-\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "-\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "-\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "-\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "-\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "-\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "-\t\t\t\t\t\t}", "+", "+\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "+\t\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "+\t\t\t\t\tif (annotations != null && (fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "-\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "-\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "-\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "-\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);", "+\t\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "+\t\t\t\t\tif (fieldType != null && ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "+\t\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t\t}", "+\t\t\t\t\tint size = allTypeAnnotationContexts.size();", "+\t\t\t\t\tif (size != 0) {", "+\t\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "+\t\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "+\t\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);", "+\t\t\t\t\t}"]}], "num": 67488}
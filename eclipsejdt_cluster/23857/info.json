{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bfbaf57d10ee448625f1290802ba3c0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33896d53ff15ba8831ebf084afbe54a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["+\t", "+\tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement) {", "+\t\tForStatement forStatement = this.ast.newForStatement();", "+\t\tforStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);", "+\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] initializations = statement.initializations;", "+\t\tif (initializations != null) {", "+\t\t\t// we know that we have at least one initialization", "+\t\t\tif (initializations[0] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[0]);", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 1; i < initializationsLength; i++) {", "+\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)initializations[i]));", "+\t\t\t\t}", "+\t\t\t\tif (initializationsLength != 1) {", "+\t\t\t\t\tint start = variableDeclarationExpression.getStartPosition();", "+\t\t\t\t\tint end = ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[initializationsLength - 1]).declarationSourceEnd;", "+\t\t\t\t\tvariableDeclarationExpression.setSourceRange(start, end - start + 1);", "+\t\t\t\t}", "+\t\t\t\tforStatement.initializers().add(variableDeclarationExpression);", "+\t\t\t} else {", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "+\t\t\t\t\tExpression initializer = convertToExpression(initializations[i]);", "+\t\t\t\t\tif (initializer != null) {", "+\t\t\t\t\t\tforStatement.initializers().add(initializer);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tforStatement.setFlags(forStatement.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (statement.condition != null) {", "+\t\t\tforStatement.setExpression(convert(statement.condition));", "+\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] increments = statement.increments;", "+\t\tif (increments != null) {", "+\t\t\tint incrementsLength = increments.length;", "+\t\t\tfor (int i = 0; i < incrementsLength; i++) {", "+\t\t\t\tforStatement.updaters().add(convertToExpression(increments[i]));\t\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\tforStatement.setBody(convert(statement.action));", "+\t\treturn forStatement;", "+\t}", "-\t", "-\tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement) {", "-\t\tForStatement forStatement = this.ast.newForStatement();", "-\t\tforStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);", "-\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] initializations = statement.initializations;", "-\t\tif (initializations != null) {", "-\t\t\t// we know that we have at least one initialization", "-\t\t\tif (initializations[0] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "-\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[0]);", "-\t\t\t\tint initializationsLength = initializations.length;", "-\t\t\t\tfor (int i = 1; i < initializationsLength; i++) {", "-\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)initializations[i]));", "-\t\t\t\t}", "-\t\t\t\tif (initializationsLength != 1) {", "-\t\t\t\t\tint start = variableDeclarationExpression.getStartPosition();", "-\t\t\t\t\tint end = ((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) initializations[initializationsLength - 1]).declarationSourceEnd;", "-\t\t\t\t\tvariableDeclarationExpression.setSourceRange(start, end - start + 1);", "-\t\t\t\t}", "-\t\t\t\tforStatement.initializers().add(variableDeclarationExpression);", "-\t\t\t} else {", "-\t\t\t\tint initializationsLength = initializations.length;", "-\t\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "-\t\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (statement.condition != null) {", "-\t\t\tforStatement.setExpression(convert(statement.condition));", "-\t\t}", "-\t\torg.eclipse.jdt.internal.compiler.ast.Statement[] increments = statement.increments;", "-\t\tif (increments != null) {", "-\t\t\tint incrementsLength = increments.length;", "-\t\t\tfor (int i = 0; i < incrementsLength; i++) {", "-\t\t\t\tforStatement.updaters().add(convertToExpression(increments[i]));\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\tforStatement.setBody(convert(statement.action));", "-\t\treturn forStatement;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adddb53ffa8b902539b8557631e3b4f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "signatureAfterChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "diff": ["+\t", "+\tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement) {", "+\t\tStatement newStatement;", "+\t\tif (statement.isSuperAccess() || statement.isSuper()) {", "+\t\t\tSuperConstructorInvocation superConstructorInvocation = this.ast.newSuperConstructorInvocation();", "+\t\t\tif (statement.qualification != null) {", "+\t\t\t\tsuperConstructorInvocation.setExpression(convert(statement.qualification));", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint length = arguments.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tsuperConstructorInvocation.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (statement.typeArguments != null) {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tsuperConstructorInvocation.setFlags(superConstructorInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tfor (int i = 0, max = statement.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tsuperConstructorInvocation.typeArguments().add(convertType(statement.typeArguments[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewStatement = superConstructorInvocation;", "+\t\t} else {", "+\t\t\tConstructorInvocation constructorInvocation = this.ast.newConstructorInvocation();", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint length = arguments.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tconstructorInvocation.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (statement.typeArguments != null) {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tconstructorInvocation.setFlags(constructorInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tfor (int i = 0, max = statement.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tconstructorInvocation.typeArguments().add(convertType(statement.typeArguments[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewStatement = constructorInvocation;", "+\t\t}", "+\t\tnewStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);", "+\t\tretrieveSemiColonPosition(newStatement);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(newStatement, statement);", "+\t\t}", "+\t\treturn newStatement;", "+\t}", "-\t", "-\tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement) {", "-\t\tStatement newStatement;", "-\t\tif (statement.isSuperAccess() || statement.isSuper()) {", "-\t\t\tSuperConstructorInvocation superConstructorInvocation = this.ast.newSuperConstructorInvocation();", "-\t\t\tif (statement.qualification != null) {", "-\t\t\t\tsuperConstructorInvocation.setExpression(convert(statement.qualification));", "-\t\t\t}", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tsuperConstructorInvocation.arguments().add(convert(arguments[i]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewStatement = superConstructorInvocation;", "-\t\t} else {", "-\t\t\tConstructorInvocation constructorInvocation = this.ast.newConstructorInvocation();", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tconstructorInvocation.arguments().add(convert(arguments[i]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewStatement = constructorInvocation;", "-\t\t}", "-\t\tnewStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);", "-\t\tretrieveSemiColonPosition(newStatement);", "-\t\t\trecordNodes(newStatement, statement);", "-\t\treturn newStatement;", "-\t}"]}], "num": 23857}
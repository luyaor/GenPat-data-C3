{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f2de4d9f1e924dc3af134e50b68c772", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ba3428dd56e4070d505c0bcec84198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0e160bd57ca4572e4cc317f77eef59eff0c912a6", "commitAfterChange": "1b0238cbdda2702f17c4f0b30e4c8493818f8888", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprotected final boolean isMoreSpecificMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["+\tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two) {", "+\t\tTypeBinding[] oneParams = one.parameters;", "+\t\tTypeBinding[] twoParams = two.parameters;", "+\t\tint oneParamsLength = oneParams.length;", "+\t\tint twoParamsLength = twoParams.length;", "+\t\tif (oneParamsLength == twoParamsLength) {", "+\t\t\tfor (int i = 0; i < oneParamsLength; i++) {", "+\t\t\t\tTypeBinding oneParam = oneParams[i];", "+\t\t\t\tTypeBinding twoParam = twoParams[i];", "+\t\t\t\tif (oneParam == twoParam) continue;", "+\t\t\t\tif (oneParam.isRawType()) {", "+\t\t\t\t\tTypeBinding match = oneParam.findSuperTypeWithSameErasure(twoParam);", "+\t\t\t\t\tif (match != twoParam)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (!oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t\tif (i == oneParamsLength - 1 && one.isVarargs() && two.isVarargs()) {", "+\t\t\t\t\t\tTypeBinding eType = ((ArrayBinding) twoParam).elementsType();", "+\t\t\t\t\t\tif (oneParam == eType || oneParam.isCompatibleWith(eType))", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t}", "+", "+\t\tif (one.isVarargs() && two.isVarargs() && oneParamsLength > twoParamsLength) {", "+\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "+\t\t\t\treturn false;", "+\t\t\t// check that each parameter before the vararg parameters are compatible (no autoboxing allowed here)", "+\t\t\tfor (int i = twoParamsLength - 2; i >= 0; i--)", "+\t\t\t\tif (oneParams[i] != twoParams[i] && !oneParams[i].isCompatibleWith(twoParams[i]))", "+\t\t\t\t\treturn false;", "+\t\t\tif (parameterCompatibilityLevel(one, twoParams) == NOT_COMPATIBLE", "+\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\t\t\treturn true; ", "+\t\t}", "+\t\treturn false;", "+\t}", "-", "-\tprotected final boolean isMoreSpecificMethod(MethodBinding one, MethodBinding two) {", "-\t\tTypeBinding[] oneParams = one.parameters;", "-\t\tTypeBinding[] twoParams = two.parameters;", "-\t\tint oneParamsLength = oneParams.length;", "-\t\tint twoParamsLength = twoParams.length;", "-\t\tif (oneParamsLength == twoParamsLength) {", "-\t\t\tfor (int i = 0; i < oneParamsLength; i++) {", "-\t\t\t\tif (oneParams[i] != twoParams[i] && !oneParams[i].isCompatibleWith(twoParams[i])) {", "-\t\t\t\t\tif (i == oneParamsLength - 1 && one.isVarargs() && two.isVarargs()) {", "-\t\t\t\t\t\tTypeBinding eType = ((ArrayBinding) twoParams[i]).elementsType();", "-\t\t\t\t\t\tif (oneParams[i] == eType || oneParams[i].isCompatibleWith(eType))", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\tif (one.isVarargs() && two.isVarargs() && oneParamsLength > twoParamsLength) {", "-\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "-\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "-\t\t\t\treturn false;", "-\t\t\t// check that each parameter before the vararg parameters are compatible (no autoboxing allowed here)", "-\t\t\tfor (int i = twoParamsLength - 2; i >= 0; i--)", "-\t\t\t\tif (oneParams[i] != twoParams[i] && !oneParams[i].isCompatibleWith(twoParams[i]))", "-\t\t\t\t\treturn false;", "-\t\t\tif (parameterCompatibilityLevel(one, twoParams) == NOT_COMPATIBLE", "-\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "-\t\t\t\t\treturn true; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9cedb8d292cca4b12b3cb183f9fca7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "a689ad07ca8ba338d705bde61cab6ba7c1398518", "commitAfterChange": "f8069544c2b2660f8b2415856be61642ab9369f1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "signatureAfterChange": " \tpublic void analyseCode(CompilationUnitScope unitScope)", "diff": ["+\t\t\tReferenceBinding[] defaultHandledExceptions = new ReferenceBinding[] { scope.getJavaLangThrowable()}; // tolerate any kind of exception", "-\t\t\t\t\tif (fields[i].isStatic()) {", "+\t\t\t\t\tFieldDeclaration field = fields[i];", "+\t\t\t\t\tif (field.isStatic()) {", "+\t\t\t\t\t\tif (field.isField()){", "+\t\t\t\t\t\t\tstaticInitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tstaticInitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfields[i].analyseCode(", "+\t\t\t\t\t\t\tfield.analyseCode(", "-\t\t\t\t\t\t\tstaticInitializerScope.problemReporter().initializerMustCompleteNormally(", "-\t\t\t\t\t\t\t\tfields[i]);", "+\t\t\t\t\t\t\tstaticInitializerScope.problemReporter().initializerMustCompleteNormally(field);", "+\t\t\t\t\t\tif (field.isField()){", "+\t\t\t\t\t\t\tinitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tinitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfields[i].analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);", "+\t\t\t\t\t\t\tfield.analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);", "-\t\t\t\t\t\t\tinitializerScope.problemReporter().initializerMustCompleteNormally(fields[i]);", "+\t\t\t\t\t\t\tinitializerScope.problemReporter().initializerMustCompleteNormally(field);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4f55364ac2d9cb02b4b16b3ef33bb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "a689ad07ca8ba338d705bde61cab6ba7c1398518", "commitAfterChange": "f8069544c2b2660f8b2415856be61642ab9369f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void analyseCode(ClassScope classScope1)", "signatureAfterChange": " \tpublic void analyseCode(ClassScope classScope1)", "diff": ["+", "+\t\t\tReferenceBinding[] defaultHandledExceptions = new ReferenceBinding[] { scope.getJavaLangThrowable()}; // tolerate any kind of exception", "-\t\t\t\t\tif (fields[i].isStatic()) {", "+\t\t\t\t\tFieldDeclaration field = fields[i];", "+\t\t\t\t\tif (field.isStatic()) {", "+\t\t\t\t\t\tif (field.isField()){", "+\t\t\t\t\t\t\tstaticInitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tstaticInitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfields[i].analyseCode(", "+\t\t\t\t\t\t\tfield.analyseCode(", "-\t\t\t\t\t\t\tstaticInitializerScope.problemReporter().initializerMustCompleteNormally(", "-\t\t\t\t\t\t\t\tfields[i]);", "+\t\t\t\t\t\t\tstaticInitializerScope.problemReporter().initializerMustCompleteNormally(field);", "-\t\t\t\t\t\tnonStaticFieldInfo =", "-\t\t\t\t\t\t\tfields[i].analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);", "+\t\t\t\t\t\tif (field.isField()){", "+\t\t\t\t\t\t\tinitializerContext.handledExceptions = NoExceptions; // no exception is allowed jls8.3.2", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tinitializerContext.handledExceptions = defaultHandledExceptions; // tolerate them all, and record them", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnonStaticFieldInfo = field.analyseCode(initializerScope, initializerContext, nonStaticFieldInfo);", "-\t\t\t\t\t\t\tinitializerScope.problemReporter().initializerMustCompleteNormally(fields[i]);", "+\t\t\t\t\t\t\tinitializerScope.problemReporter().initializerMustCompleteNormally(field);"]}], "num": 31444}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d31b4f0432d829bb736cb4d0bb5c1306", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ef3d93978bf146e1c3e07b5d990370", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "commitAfterChange": "5e5b42592bef6fdd64e1e290eec08f6437050079", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tConstant cst = this.assertExpression.optimizedBooleanConstant();\t\t", "-\t\t\tboolean isOptimizedTrueAssertion = cst != NotAConstant && cst.booleanValue() == true;", "-\t\t\tif (isOptimizedTrueAssertion) {", "-\t\t\t\tthis.assertExpression.generateCode(currentScope, codeStream, false);", "+\t\t\tLabel falseLabel = new Label(codeStream);", "+\t\t\tthis.assertExpression.generateOptimizedBoolean(currentScope, codeStream, (falseLabel = new Label(codeStream)), null , true);", "+\t\t\tcodeStream.newJavaLangAssertionError();", "+\t\t\tcodeStream.dup();", "+\t\t\tif (exceptionArgument != null) {", "+\t\t\t\texceptionArgument.generateCode(currentScope, codeStream, true);", "+\t\t\t\tcodeStream.invokeJavaLangAssertionErrorConstructor(exceptionArgument.implicitConversion & 0xF);", "-\t\t\t\tLabel falseLabel = new Label(codeStream);", "-\t\t\t\tthis.assertExpression.generateOptimizedBoolean(currentScope, codeStream, (falseLabel = new Label(codeStream)), null , true);", "-\t\t\t\tcodeStream.newJavaLangAssertionError();", "-\t\t\t\tcodeStream.dup();", "-\t\t\t\tif (exceptionArgument != null) {", "-\t\t\t\t\texceptionArgument.generateCode(currentScope, codeStream, true);", "-\t\t\t\t\tcodeStream.invokeJavaLangAssertionErrorConstructor(exceptionArgument.implicitConversion & 0xF);", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.invokeJavaLangAssertionErrorDefaultConstructor();", "-\t\t\t\t}", "-\t\t\t\tcodeStream.athrow();", "-\t\t\t\tfalseLabel.place();", "-\t\t\t}\t\t\t", "+\t\t\t\tcodeStream.invokeJavaLangAssertionErrorDefaultConstructor();", "+\t\t\t}", "+\t\t\tcodeStream.athrow();", "+\t\t\tfalseLabel.place();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92de167b3600ee04e069d3ad2d002717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "265b404ef8ae8af9ea43e8acc15fcc2a70fcda8a", "commitAfterChange": "0bd08607af1cf6abfc3e9f5f47b786584dc6a727", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tLabel falseLabel = new Label(codeStream);", "-\t\t\tassertExpression.generateOptimizedBoolean(currentScope, codeStream, (falseLabel = new Label(codeStream)), null , true);", "-\t\t\tcodeStream.newJavaLangAssertionError();", "-\t\t\tcodeStream.dup();", "-\t\t\tif (exceptionArgument != null) {", "-\t\t\t\texceptionArgument.generateCode(currentScope, codeStream, true);", "-\t\t\t\tcodeStream.invokeJavaLangAssertionErrorConstructor(exceptionArgument.implicitConversion & 0xF);", "+\t\t\t", "+\t\t\tConstant cst = this.assertExpression.optimizedBooleanConstant();\t\t", "+\t\t\tboolean isOptimizedTrueAssertion = cst != NotAConstant && cst.booleanValue() == true;", "+\t\t\tif (isOptimizedTrueAssertion) {", "+\t\t\t\tthis.assertExpression.generateCode(currentScope, codeStream, false);", "-\t\t\t\tcodeStream.invokeJavaLangAssertionErrorDefaultConstructor();", "-\t\t\t}", "-\t\t\tcodeStream.athrow();", "-\t\t\tfalseLabel.place();", "+\t\t\t\tLabel falseLabel = new Label(codeStream);", "+\t\t\t\tthis.assertExpression.generateOptimizedBoolean(currentScope, codeStream, (falseLabel = new Label(codeStream)), null , true);", "+\t\t\t\tcodeStream.newJavaLangAssertionError();", "+\t\t\t\tcodeStream.dup();", "+\t\t\t\tif (exceptionArgument != null) {", "+\t\t\t\t\texceptionArgument.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\tcodeStream.invokeJavaLangAssertionErrorConstructor(exceptionArgument.implicitConversion & 0xF);", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.invokeJavaLangAssertionErrorDefaultConstructor();", "+\t\t\t\t}", "+\t\t\t\tcodeStream.athrow();", "+\t\t\t\tfalseLabel.place();", "+\t\t\t}\t\t\t"]}], "num": 15786}
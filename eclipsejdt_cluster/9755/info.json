{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6fd85c97898b39087ac88b1168ba7b7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a81be26aa0af7d0d2753f0508d4923c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tIIndex index = manager.getIndexForUpdate(this.indexPath, false, /*do not reuse index file*/ false /*do not create if none*/);", "+\t\t\tIIndex index = manager.getIndexForUpdate(this.containerPath, false, /*do not reuse index file*/ false /*do not create if none*/);", "-\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.containerPath); //$NON-NLS-1$", "-\t\t\tindex = manager.getIndexForUpdate(this.indexPath, true, /*reuse index file*/ true /*create if none*/);", "+\t\t\tindex = manager.getIndexForUpdate(this.containerPath, true, /*reuse index file*/ true /*create if none*/);", "-\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.containerPath); //$NON-NLS-1$", "-\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.indexPath + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.containerPath + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.indexPath); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t\t\t\tzip = new ZipFile(this.indexPath.toFile());", "-\t\t\t\t\tzipFilePath = (Path) this.indexPath;", "+\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.containerPath); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t\tzip = new ZipFile(this.containerPath.toFile());", "+\t\t\t\t\tzipFilePath = (Path) this.containerPath;", "-\t\t\t\tindex = manager.recreateIndex(this.indexPath);", "+\t\t\t\tindex = manager.recreateIndex(this.containerPath);", "-\t\t\t\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);", "-\t\t\t\t\t\t// Add the name of the file to the index", "-\t\t\t\t\t\tindex.add(", "-\t\t\t\t\t\t\tnew JarFileEntryDocument(ze, classFileBytes, zipFilePath),", "-\t\t\t\t\t\t\tnew BinaryIndexer(true));", "+\t\t\t\t\t\tfinal byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getZipEntryByteContent(ze, zip);", "+\t\t\t\t\t\tSearchParticipant participant = SearchEngine.getDefaultSearchParticipant();", "+\t\t\t\t\t\tJarFileEntryDocument entryDocument = new JarFileEntryDocument(ze, null, zipFilePath);", "+\t\t\t\t\t\tSearchDocument document = new JavaSearchDocument(entryDocument.getName(), participant) {", "+\t\t\t\t\t\t\tpublic byte[] getByteContents() {", "+\t\t\t\t\t\t\t\treturn classFileBytes;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic String toString() {", "+\t\t\t\t\t\t\t\treturn \"JarEntryDocument for \" + getPath(); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t};", "+\t\t\t\t\t\tthis.manager.indexDocument(document, participant, index);", "-\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.indexPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.containerPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tmanager.removeIndex(this.indexPath);", "+\t\t\tmanager.removeIndex(this.containerPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24fdcfc9e6b9b54ab49745b1b0a2ddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "fe7b697ca16cd240df01b1ad29e35b2693b4b160", "commitAfterChange": "68fbbc2b696126776a21b18e5e10fb30f89536f0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void commit(boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void commit(boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "-\trunOperation(op, monitor);", "+\tICompilationUnit original = (ICompilationUnit)this.getOriginalElement();", "+\tif (original.exists()) {", "+\t\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "+\t\trunOperation(op, monitor);", "+\t} else {", "+\t\tIFile originalRes = (IFile)original.getResource();", "+\t\ttry {", "+\t\t\toriginalRes.create(", "+\t\t\t\tnew InputStream() {", "+\t\t\t\t\tpublic int read() throws IOException {", "+\t\t\t\t\t\treturn -1;", "+\t\t\t\t\t}", "+\t\t\t\t},", "+\t\t\t\tforce,", "+\t\t\t\tmonitor);", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}", "+\t\toriginal.getBuffer().setContents(this.getContents());", "+\t\toriginal.save(monitor, force);", "+\t}"]}], "num": 9755}
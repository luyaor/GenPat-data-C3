{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "286f5a73465f06f9c634b0a1bc2d386d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52aed919d676264e1d5b4aa1549c9429", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "commitAfterChange": "5e8c3183792bb167a28b31bd623b66ded11f658d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["+\t\tif ((errorThreshold & IncompatibleNonInheritedInterfaceMethod) != 0){", "+\t\t\tbuf.append(\"\\n-incompatible non inherited interface method: ERROR\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tif ((warningThreshold & IncompatibleNonInheritedInterfaceMethod) != 0){", "+\t\t\t\tbuf.append(\"\\n-incompatible non inherited interface method: WARNING\"); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tbuf.append(\"\\n-incompatible non inherited interface method: IGNORE\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tif ((errorThreshold & UnusedPrivateMember) != 0){", "+\t\t\tbuf.append(\"\\n-unused private member: ERROR\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tif ((warningThreshold & UnusedPrivateMember) != 0){", "+\t\t\t\tbuf.append(\"\\n-unused private member: WARNING\"); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tbuf.append(\"\\n-unused private member: IGNORE\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "764175870455e6d68a246222505d5bcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "673b7eda95cd26449992e862f0c63f2c612903a0", "commitAfterChange": "b04602938404af4f8569a399fb36a5018768a262", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \r \tpublic String toString()", "signatureAfterChange": "\r public String toString()", "diff": ["-\r", "-\tpublic String toString() {\r", "-\r", "-\t\tStringBuffer buf = new StringBuffer(\"CompilerOptions:\");\r", "-\t\tif ((produceDebugAttributes & Vars) != 0) {\r", "-\t\t\tbuf.append(\"\\n-local variables debug attributes: ON\");\r", "-\t\t} else {\r", "-\t\t\tbuf.append(\"\\n-local variables debug attributes: OFF\");\r", "-\t\t}\r", "-\t\tif ((produceDebugAttributes & Lines) != 0) {\r", "-\t\t\tbuf.append(\"\\n-line number debug attributes: ON\");\r", "-\t\t} else {\r", "-\t\t\tbuf.append(\"\\n-line number debug attributes: OFF\");\r", "-\t\t}\r", "-\t\tif ((produceDebugAttributes & Source) != 0) {\r", "-\t\t\tbuf.append(\"\\n-source debug attributes: ON\");\r", "-\t\t} else {\r", "-\t\t\tbuf.append(\"\\n-source debug attributes: OFF\");\r", "-\t\t}\r", "-\t\tif (preserveAllLocalVariables) {\r", "-\t\t\tbuf.append(\"\\n-preserve all local variables: ON\");\r", "-\t\t} else {\r", "-\t\t\tbuf.append(\"\\n-preserve all local variables: OFF\");\r", "-\t\t}\r", "-\t\tif ((errorThreshold & UnreachableCode) != 0) {\r", "-\t\t\tbuf.append(\"\\n-unreachable code: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & UnreachableCode) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-unreachable code: WARNING\");\r", "-\t\t\t\tbuf.append(\"\\n-unreachable code: IGNORE\");\r", "-\t\t}\r", "-\t\tif ((errorThreshold & ImportProblem) != 0) {\r", "-\t\t\tbuf.append(\"\\n-import problem: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & ImportProblem) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-import problem: WARNING\");\r", "-\t\t\t\tbuf.append(\"\\n-import problem: IGNORE\");\r", "-\t\t}\r", "-\t\tif ((errorThreshold & MethodWithConstructorName) != 0) {\r", "-\t\t\tbuf.append(\"\\n-method with constructor name: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & MethodWithConstructorName) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-method with constructor name: WARNING\");\r", "-\t\t\t\tbuf.append(\"\\n-method with constructor name: IGNORE\");\r", "-\t\t}\r", "-\t\tif ((errorThreshold & OverriddenPackageDefaultMethod) != 0) {\r", "-\t\t\tbuf.append(\"\\n-overridden package default method: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & OverriddenPackageDefaultMethod) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-overridden package default method: WARNING\");\r", "-\t\t\t} else {\r", "-\t\t\t\tbuf.append(\"\\n-overridden package default method: IGNORE\");\r", "-\t\t}\r", "-\t\tif ((errorThreshold & UsingDeprecatedAPI) != 0) {\r", "-\t\t\tbuf.append(\"\\n-deprecation: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & UsingDeprecatedAPI) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-deprecation: WARNING\");\r", "-\t\t\t} else {\r", "-\t\t\t\tbuf.append(\"\\n-deprecation: IGNORE\");\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif ((errorThreshold & MaskedCatchBlock) != 0) {\r", "-\t\t\tbuf.append(\"\\n-masked catch block: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & MaskedCatchBlock) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-masked catch block: WARNING\");\r", "-\t\t\t} else {\r", "-\t\t\t\tbuf.append(\"\\n-masked catch block: IGNORE\");\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif ((errorThreshold & UnusedLocalVariable) != 0) {\r", "-\t\t\tbuf.append(\"\\n-unused local variable: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & UnusedLocalVariable) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-unused local variable: WARNING\");\r", "-\t\t\t} else {\r", "-\t\t\t\tbuf.append(\"\\n-unused local variable: IGNORE\");\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif ((errorThreshold & UnusedArgument) != 0) {\r", "-\t\t\tbuf.append(\"\\n-unused parameter: ERROR\");\r", "-\t\t} else {\r", "-\t\t\tif ((warningThreshold & UnusedArgument) != 0) {\r", "-\t\t\t\tbuf.append(\"\\n-unused parameter: WARNING\");\r", "-\t\t\t} else {\r", "-\t\t\t\tbuf.append(\"\\n-unused parameter: IGNORE\");\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tswitch (targetJDK) {\r", "-\t\t\tcase JDK1_1 :\r", "-\t\t\t\tbuf.append(\"\\n-target JDK: 1.1\");\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase JDK1_2 :\r", "-\t\t\t\tbuf.append(\"\\n-target JDK: 1.2\");\r", "-\t\t}\r", "-\t\tbuf.append(\"\\n-verbose : \" + (verbose ? \"ON\" : \"OFF\"));\r", "-\t\tbuf.append(\r", "-\t\t\t\"\\n-produce reference info : \" + (produceReferenceInfo ? \"ON\" : \"OFF\"));\r", "-\t\tbuf.append(\r", "-\t\t\t\"\\n-parse literal expressions as constants : \"\r", "-\t\t\t\t+ (parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"));\r", "-\t\tbuf.append(\r", "-\t\t\t\"\\n-runtime exception name for compile error : \"\r", "-\t\t\t\t+ runtimeExceptionNameForCompileError);\r", "-\t\treturn buf.toString();\r", "+}\r", "+public String toString() {\r", "+\tStringBuffer buf = new StringBuffer(\"CompilerOptions:\");\r", "+\tif ((produceDebugAttributes & Vars) != 0){\r", "+\t\tbuf.append(\"\\n-local variables debug attributes: ON\");\r", "+\t} else {\r", "+\t\tbuf.append(\"\\n-local variables debug attributes: OFF\");\r", "+\t}\r", "+\tif ((produceDebugAttributes & Lines) != 0){\r", "+\t\tbuf.append(\"\\n-line number debug attributes: ON\");\r", "+\t} else {\r", "+\t\tbuf.append(\"\\n-line number debug attributes: OFF\");\r", "+\t}\r", "+\tif ((produceDebugAttributes & Source) != 0){\r", "+\t\tbuf.append(\"\\n-source debug attributes: ON\");\r", "+\t} else {\r", "+\t\tbuf.append(\"\\n-source debug attributes: OFF\");\r", "+\t}\r", "+\tif (preserveAllLocalVariables){\r", "+\t\tbuf.append(\"\\n-preserve all local variables: ON\");\r", "+\t} else {\r", "+\t\tbuf.append(\"\\n-preserve all local variables: OFF\");\r", "+\t}\r", "+\tif ((errorThreshold & UnreachableCode) != 0){\r", "+\t\tbuf.append(\"\\n-unreachable code: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & UnreachableCode) != 0){\r", "+\t\t\tbuf.append(\"\\n-unreachable code: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-unreachable code: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & ImportProblem) != 0){\r", "+\t\tbuf.append(\"\\n-import problem: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & ImportProblem) != 0){\r", "+\t\t\tbuf.append(\"\\n-import problem: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-import problem: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & MethodWithConstructorName) != 0){\r", "+\t\tbuf.append(\"\\n-method with constructor name: ERROR\");\t\t\r", "+\t} else {\r", "+\t\tif ((warningThreshold & MethodWithConstructorName) != 0){\r", "+\t\t\tbuf.append(\"\\n-method with constructor name: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-method with constructor name: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & OverriddenPackageDefaultMethod) != 0){\r", "+\t\tbuf.append(\"\\n-overridden package default method: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & OverriddenPackageDefaultMethod) != 0){\r", "+\t\t\tbuf.append(\"\\n-overridden package default method: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-overridden package default method: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & UsingDeprecatedAPI) != 0){\r", "+\t\tbuf.append(\"\\n-deprecation: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & UsingDeprecatedAPI) != 0){\r", "+\t\t\tbuf.append(\"\\n-deprecation: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-deprecation: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & MaskedCatchBlock) != 0){\r", "+\t\tbuf.append(\"\\n-masked catch block: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & MaskedCatchBlock) != 0){\r", "+\t\t\tbuf.append(\"\\n-masked catch block: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-masked catch block: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & UnusedLocalVariable) != 0){\r", "+\t\tbuf.append(\"\\n-unused local variable: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & UnusedLocalVariable) != 0){\r", "+\t\t\tbuf.append(\"\\n-unused local variable: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-unused local variable: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & UnusedArgument) != 0){\r", "+\t\tbuf.append(\"\\n-unused parameter: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & UnusedArgument) != 0){\r", "+\t\t\tbuf.append(\"\\n-unused parameter: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-unused parameter: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & AccessEmulation) != 0){\r", "+\t\tbuf.append(\"\\n-synthetic access emulation: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & AccessEmulation) != 0){\r", "+\t\t\tbuf.append(\"\\n-synthetic access emulation: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-synthetic access emulation: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tif ((errorThreshold & NonExternalizedString) != 0){\r", "+\t\tbuf.append(\"\\n-non externalized string: ERROR\");\r", "+\t} else {\r", "+\t\tif ((warningThreshold & NonExternalizedString) != 0){\r", "+\t\t\tbuf.append(\"\\n-non externalized string: WARNING\");\r", "+\t\t} else {\r", "+\t\t\tbuf.append(\"\\n-non externalized string: IGNORE\");\r", "+\t\t}\r", "+\t}\r", "+\tswitch(targetJDK){\r", "+\t\tcase JDK1_1 :\r", "+\t\t\tbuf.append(\"\\n-target JDK: 1.1\");\r", "+\t\t\tbreak;\r", "+\t\tcase JDK1_2 :\r", "+\t\t\tbuf.append(\"\\n-target JDK: 1.2\");\r", "+\t}\r", "+\tbuf.append(\"\\n-verbose : \" + (verbose ? \"ON\" : \"OFF\"));\r", "+\tbuf.append(\"\\n-produce reference info : \" + (produceReferenceInfo ? \"ON\" : \"OFF\"));\r", "+\tbuf.append(\"\\n-parse literal expressions as constants : \" + (parseLiteralExpressionsAsConstants ? \"ON\" : \"OFF\"));\r", "+\tbuf.append(\"\\n-runtime exception name for compile error : \" + runtimeExceptionNameForCompileError);\r", "+\treturn buf.toString();\r", "+}\r"]}], "num": 3898}
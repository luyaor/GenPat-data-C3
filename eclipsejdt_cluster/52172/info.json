{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b93c75c84dcdf4a8188e1d9727291b96", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "359b9531a11aa8bbcb8f6542141ce8aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 317, "methodNumberAfterChange": 317, "signatureBeforeChange": " protected void dispatchDeclarationInto(int length)", "signatureAfterChange": " protected void dispatchDeclarationInto(int length)", "diff": ["-\tint size1 = 0, size2 = 0, size3 = 0, size4 = 0;", "+\tint size1 = 0, size2 = 0, size3 = 0;", "-\t\t\tflag[i] = 3;", "-\t\t\tsize2++;", "-\t\t} else if (astNode instanceof EnumDeclaration) {", "-\t\t\tsize4++;", "+\t\t\tsize2++;", "-\t\t\tflag[i] = 4;", "+\t\t\tflag[i] = 3;", "-\tif (size4 != 0) {", "-\t\ttypeDecl.enums = new EnumDeclaration[size4];", "-\t}", "-\tsize1 = size2 = size3 = size4 = 0;", "+\tsize1 = size2 = size3 = 0;", "-\t\t\t\t\tsize4 += (length2 = end - start);", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tthis.astStack, ", "-\t\t\t\t\t\tthis.astPtr + start + 1, ", "-\t\t\t\t\t\ttypeDecl.enums, ", "-\t\t\t\t\t\tsize4 - length2, ", "-\t\t\t\t\t\tlength2); ", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 3 :", "-\t\t\t\tcase 4 :", "+\t\t\t\tcase 3 :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2e5a559dcd686c770c1fa1b1affb0e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 318, "signatureBeforeChange": " protected void dispatchDeclarationIntoEnumDeclaration(int length)", "signatureAfterChange": " protected void dispatchDeclarationIntoEnumDeclaration(int length)", "diff": ["+\t", "-\t\treturn;", "-\tint[] flag = new int[length + 1]; //plus one -- see <HERE>", "-\tint size1 = 0, size2 = 0, size3 = 0, size4 = 0;", "-\tfor (int i = length - 1; i >= 0; i--) {", "-\t\tASTNode astNode = this.astStack[this.astPtr--];", "-\t\tif (astNode instanceof AbstractMethodDeclaration) {", "-\t\t\t//methods and constructors have been regrouped into one single list", "-\t\t\tflag[i] = 3;", "-\t\t\tsize2++;", "-\t\t} else if (astNode instanceof EnumConstant) {", "-\t\t\t// enum constants", "-\t\t\tflag[i] = 2;", "-\t\t\tsize4++;", "-\t\t} else if (astNode instanceof TypeDeclaration) {", "-\t\t\tflag[i] = 4;", "-\t\t\tsize3++;", "-\t\t} else if (astNode instanceof FieldDeclaration) {", "-\t\t\tflag[i] = 1;", "-\t\t\tsize1++;", "-\t\t}", "-\t}", "-", "-\t//arrays creation", "-\tEnumDeclaration enumDeclaration = (EnumDeclaration) this.astStack[this.astPtr];", "-\tif (size1 != 0) {", "-\t\tenumDeclaration.fields = new FieldDeclaration[size1];", "-\t}", "-\tif (size2 != 0) {", "-\t\tenumDeclaration.methods = new AbstractMethodDeclaration[size2];", "-\t}", "-\tif (size3 != 0) {", "-\t\tenumDeclaration.memberTypes = new TypeDeclaration[size3];", "-\t}", "-\tif (size4 != 0) {", "-\t\tenumDeclaration.enumConstants = new EnumConstant[size4];", "-\t}", "-", "-\t//arrays fill up", "-\tsize1 = size2 = size3 = size4 = 0;", "-\tint flagI = flag[0], start = 0;", "-\tint length2;", "-\tfor (int end = 0; end <= length; end++) //<HERE> the plus one allows to ", "-\t\t{", "-\t\tif (flagI != flag[end]) //treat the last element as a ended flag.....", "-\t\t\t{ //array copy", "-\t\t\tswitch (flagI) {", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tsize1 += (length2 = end - start);", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tthis.astStack, ", "-\t\t\t\t\t\tthis.astPtr + start + 1, ", "-\t\t\t\t\t\tenumDeclaration.fields, ", "-\t\t\t\t\t\tsize1 - length2, ", "-\t\t\t\t\t\tlength2); ", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 2 :", "-\t\t\t\t\tsize4 += (length2 = end - start);", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tthis.astStack, ", "-\t\t\t\t\t\tthis.astPtr + start + 1, ", "-\t\t\t\t\t\tenumDeclaration.enumConstants, ", "-\t\t\t\t\t\tsize4 - length2, ", "-\t\t\t\t\t\tlength2); ", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 3 :", "-\t\t\t\t\tsize2 += (length2 = end - start);", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tthis.astStack, ", "-\t\t\t\t\t\tthis.astPtr + start + 1, ", "-\t\t\t\t\t\tenumDeclaration.methods, ", "-\t\t\t\t\t\tsize2 - length2, ", "-\t\t\t\t\t\tlength2); ", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 4 :", "-\t\t\t\t\tsize3 += (length2 = end - start);", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tthis.astStack, ", "-\t\t\t\t\t\tthis.astPtr + start + 1, ", "-\t\t\t\t\t\tenumDeclaration.memberTypes, ", "-\t\t\t\t\t\tsize3 - length2, ", "-\t\t\t\t\t\tlength2); ", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tflagI = flag[start = end];", "-\t\t}", "-\t}", "-", "-\tif (enumDeclaration.memberTypes != null) {", "-\t\tfor (int i = enumDeclaration.memberTypes.length - 1; i >= 0; i--) {", "-\t\t\tenumDeclaration.memberTypes[i].enclosingType = enumDeclaration;", "-\t\t}", "-\t}", "-}", "+      return;", "+   int[] flag = new int[length + 1]; //plus one -- see <HERE>", "+   int size1 = 0, size2 = 0, size3 = 0;", "+   TypeDeclaration enumDeclaration = (TypeDeclaration) this.astStack[this.astPtr - length];", "+   for (int i = length - 1; i >= 0; i--) {", "+      ASTNode astNode = this.astStack[this.astPtr--];", "+      if (astNode instanceof AbstractMethodDeclaration) {", "+         //methods and constructors have been regrouped into one single list", "+         flag[i] = 2;", "+         size2++;", "+      } else if (astNode instanceof TypeDeclaration) {", "+         flag[i] = 3;", "+         size3++;", "+      } else if (astNode instanceof FieldDeclaration) {", "+         flag[i] = 1;", "+         size1++;", "+//         if(astNode instanceof EnumConstant) {", "+//            EnumConstant constant = (EnumConstant) astNode;", "+//            ((AllocationExpression)constant.initialization).type = new SingleTypeReference(enumDeclaration.name,", "+//                  (((long) enumDeclaration.sourceStart) << 32) + enumDeclaration.sourceEnd);", "+//         }", "+      }", "+   }", "+ ", "+   //arrays creation", "+   if (size1 != 0) {", "+      enumDeclaration.fields = new FieldDeclaration[size1];", "+   }", "+   if (size2 != 0) {", "+      enumDeclaration.methods = new AbstractMethodDeclaration[size2];", "+   }", "+   if (size3 != 0) {", "+      enumDeclaration.memberTypes = new TypeDeclaration[size3];", "+   }", "+ ", "+   //arrays fill up", "+   size1 = size2 = size3 = 0;", "+   int flagI = flag[0], start = 0;", "+   int length2;", "+   for (int end = 0; end <= length; end++) //<HERE> the plus one allows to ", "+      {", "+      if (flagI != flag[end]) //treat the last element as a ended flag.....", "+         { //array copy", "+         switch (flagI) {", "+            case 1 :", "+               size1 += (length2 = end - start);", "+               System.arraycopy(", "+                  this.astStack, ", "+                  this.astPtr + start + 1, ", "+                  enumDeclaration.fields, ", "+                  size1 - length2, ", "+                  length2); ", "+               break;", "+            case 2 :", "+               size2 += (length2 = end - start);", "+               System.arraycopy(", "+                  this.astStack, ", "+                  this.astPtr + start + 1, ", "+                  enumDeclaration.methods, ", "+                  size2 - length2, ", "+                  length2); ", "+               break;", "+            case 3 :", "+               size3 += (length2 = end - start);", "+               System.arraycopy(", "+                  this.astStack, ", "+                  this.astPtr + start + 1, ", "+                  enumDeclaration.memberTypes, ", "+                  size3 - length2, ", "+                  length2); ", "+               break;", "+         }", "+         flagI = flag[start = end];", "+      }", "+   }", "+ ", "+   if (enumDeclaration.memberTypes != null) {", "+      for (int i = enumDeclaration.memberTypes.length - 1; i >= 0; i--) {", "+         enumDeclaration.memberTypes[i].enclosingType = enumDeclaration;", "+      }", "+   }}"]}], "num": 52172}
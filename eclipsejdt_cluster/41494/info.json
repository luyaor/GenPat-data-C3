{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf35f103bc495666ad5f2437922fe4fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "804e868594f47ec2c0fff6a28502c7b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap rawReverseMap) \t\tthrows JavaModelException", "diff": ["-\t\tMap reverseMap) // can be null if not interested in reverse mapping", "+\t\tMap rawReverseMap) // can be null if not interested in reverse mapping", "-\t\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) reverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tIClasspathEntry cEntry = containerEntries[j];", "+\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry)containerEntries[j];", "-\t\t\t\t\t\t// if container is exported, then its nested entries must in turn be exported  (21749)", "-\t\t\t\t\t\tif (rawEntry.isExported()){", "-\t\t\t\t\t\t\tcEntry = new ClasspathEntry(cEntry.getContentKind(),", "-\t\t\t\t\t\t\t\tcEntry.getEntryKind(), cEntry.getPath(),", "-\t\t\t\t\t\t\t\tcEntry.getInclusionPatterns(), cEntry.getExclusionPatterns(), ", "-\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentPath(), cEntry.getSourceAttachmentRootPath(), ", "-\t\t\t\t\t\t\t\tcEntry.getOutputLocation(), true); // duplicate container entry for tagging it as exported", "+\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "+\t\t\t\t\t\tcEntry = cEntry.combineWith(rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "-\t\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = cEntry.getPath()) == null) reverseMap.put(resolvedPath, rawEntry);", "-\t\t\t\t\tif (reverseMap != null && reverseMap.get(resolvedPath = rawEntry.getPath()) == null) reverseMap.put(resolvedPath, rawEntry);", "+\t\t\t\t\tif (rawReverseMap != null) {", "+\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89af22accf9e2863d3b60290280c699f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5266b947a41bc87e33ca243d2f06d621c5b35d8c", "commitAfterChange": "5b0c62f0c85cc7c393266b52408d3bd3c14d0ef5", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException", "signatureAfterChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException", "diff": ["+\t\t\tMap rootPathToResolvedEntries = new HashMap();", "-\t\t\t\t\t\t\tif (rawReverseMap != null) {", "-\t\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) {", "+\t\t\t\t\t\t\t\trawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\t\trootPathToResolvedEntries.put(resolvedPath, resolvedEntry);", "-\t\t\t\t\t\t\tif (rawReverseMap != null) {", "-\t\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) {", "+\t\t\t\t\t\t\t\trawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\t\trootPathToResolvedEntries.put(resolvedPath, cEntry);", "-\t\t\t\t\t\tif (rawReverseMap != null) {", "-\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) {", "+\t\t\t\t\t\t\trawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\trootPathToResolvedEntries.put(resolvedPath, rawEntry);", "+", "-\t\t\tperProjectInfo.setClasspath(rawClasspath, outputLocation, rawClasspathStatus, resolvedClasspath, rawReverseMap, unresolvedEntryStatus);", "+\t\t\tperProjectInfo.setClasspath(rawClasspath, outputLocation, rawClasspathStatus, resolvedClasspath, rawReverseMap, rootPathToResolvedEntries, unresolvedEntryStatus);"]}], "num": 41494}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae74c87c4fe57cab37ed0eef9e287da0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22fa2f4646cfe948810b51316e2bdc10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java", "commitBeforeChange": "3896c928f2181f18f6740dee0a59c7ad2e4c256d", "commitAfterChange": "bb2aa8fa4883217f6f859ee7f082135cad7ea6d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void populate(StringBuffer buffer, IJavaElement element, int indent) throws CoreException", "signatureAfterChange": " protected void populate(StringBuffer buffer, IJavaElement element, int indent) throws CoreException", "diff": ["-\tIJavaElement[] children = parent.getChildren();", "-\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\tpopulate(buffer, children[i], indent+1);", "+\tIJavaElement[] children = null;", "+\ttry {", "+\t\tchildren = parent.getChildren();", "+\t} catch (JavaModelException e) {", "+\tif (children != null) {", "+\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\tpopulate(buffer, children[i], indent+1);", "+\t\t}", "+\t}", "+\t", "-\tif (element instanceof IJavaProject) {", "-\t\tnonJavaResources = ((IJavaProject)element).getNonJavaResources();", "-\t} else if (element instanceof IPackageFragmentRoot) {", "-\t\tnonJavaResources = ((IPackageFragmentRoot)element).getNonJavaResources();", "-\t} else if (element instanceof IPackageFragment) {", "-\t\tnonJavaResources = ((IPackageFragment)element).getNonJavaResources();", "+\ttry {", "+\t\tif (element instanceof IJavaProject) {", "+\t\t\tnonJavaResources = ((IJavaProject)element).getNonJavaResources();", "+\t\t} else if (element instanceof IPackageFragmentRoot) {", "+\t\t\tnonJavaResources = ((IPackageFragmentRoot)element).getNonJavaResources();", "+\t\t} else if (element instanceof IPackageFragment) {", "+\t\t\tnonJavaResources = ((IPackageFragment)element).getNonJavaResources();", "+\t\t}", "+\t} catch (JavaModelException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c5a3423c69251b76e2cc4972eca32e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "commitAfterChange": "6ca7b05ef1b6b0934e3b4a61271beb56d55912f0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tIBinding resolveName(Name name)", "signatureAfterChange": " \tIBinding resolveName(Name name)", "diff": ["-\t\t\t\tif (internalScope == null) {", "-\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "-\t\t\t\t} else {", "-\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "+\t\t\t\ttry {", "+\t\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t}", "+\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "-\t\t\t\t\tif (internalScope == null) {", "-\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, indexInImportReference));", "+\t\t\t\tBinding binding = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, indexInImportReference));", "+\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1a1c1d646fcbf46a9b16a44c298108", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ReadManager.java", "commitBeforeChange": "48628a48bc30e9f74feb6b693bbfe398c063e4b8", "commitAfterChange": "fea4095ba208aac8a9915b5d68b0792beec39b62", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void run()", "signatureAfterChange": "  public void run()", "diff": ["-\twhile (this.readingThreads != null && this.nextFileToRead < this.units.length) {", "-\t\tICompilationUnit unit = null;", "-\t\tint position = -1;", "-\t\tsynchronized (this) {", "-\t\t\tif (this.readingThreads == null) return;", "-", "-\t\t\twhile (this.filesRead[this.nextAvailablePosition] != null) {", "-\t\t\t\tthis.sleepingThreadCount++;", "-\t\t\t\ttry {", "-\t\t\t\t\twait(250); // wait until a spot in contents is available", "-\t\t\t\t} catch (InterruptedException e) { // ignore", "-\t\t\t\t}", "-\t\t\t\tthis.sleepingThreadCount--;", "+\ttry {", "+\t\twhile (this.readingThreads != null && this.nextFileToRead < this.units.length) {", "+\t\t\tICompilationUnit unit = null;", "+\t\t\tint position = -1;", "+\t\t\tsynchronized (this) {", "+\t", "+\t\t\t\twhile (this.filesRead[this.nextAvailablePosition] != null) {", "+\t\t\t\t\tthis.sleepingThreadCount++;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twait(250); // wait until a spot in contents is available", "+\t\t\t\t\t} catch (InterruptedException e) { // ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.sleepingThreadCount--;", "+\t\t\t\t\tif (this.readingThreads == null) return;", "+\t\t\t\t}", "+\t", "+\t\t\t\tif (this.nextFileToRead >= this.units.length) return;", "+\t\t\t\tunit = this.units[this.nextFileToRead++];", "+\t\t\t\tposition = this.nextAvailablePosition;", "+\t\t\t\tif (++this.nextAvailablePosition >= this.contentsRead.length)", "+\t\t\t\t\tthis.nextAvailablePosition = 0;", "+\t\t\t\tthis.filesRead[position] = unit;", "+\t\t\t\tthis.contentsRead[position] = readInProcessMarker; // mark the spot so we know its being read", "-", "-\t\t\tif (this.nextFileToRead >= this.units.length) return;", "-\t\t\tunit = this.units[this.nextFileToRead++];", "-\t\t\tposition = this.nextAvailablePosition;", "-\t\t\tif (++this.nextAvailablePosition >= this.contentsRead.length)", "-\t\t\t\tthis.nextAvailablePosition = 0;", "-\t\t\tthis.filesRead[position] = unit;", "-\t\t\tthis.contentsRead[position] = readInProcessMarker; // mark the spot so we know its being read", "+\t\t\tchar[] result = unit.getContents();", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.filesRead[position] == unit) {", "+\t\t\t\t\tif (this.contentsRead[position] == null) // wake up main thread which is waiting for this file", "+\t\t\t\t\t\tnotifyAll();", "+\t\t\t\t\tthis.contentsRead[position] = result;", "+\t\t\t\t}", "+\t\t\t}", "-\t\tchar[] result = unit.getContents();", "+\t} catch (Error e) {", "-\t\t\tif (this.filesRead[position] == unit) {", "-\t\t\t\tif (this.contentsRead[position] == null) // wake up main thread which is waiting for this file", "-\t\t\t\t\tnotifyAll();", "-\t\t\t\tthis.contentsRead[position] = result;", "-\t\t\t}", "+\t\t\tthis.caughtException = e;", "+\t\t\tshutdown();", "+\t\treturn;", "+\t} catch (RuntimeException e) {", "+\t\tsynchronized (this) {", "+\t\t\tthis.caughtException = e;", "+\t\t\tshutdown();", "+\t\t}", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4092d67e1aac85333dabbebe2b2f48a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "ec3d2b8d7bc5e4b4b2d91a6a1cfd252341798462", "commitAfterChange": "dfdf5cdb33faed31f1d77a512774b27d49c87683", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "signatureAfterChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "diff": ["-\t\tthis.createAndResolveBindings(potentialMatches);", "-", "-\t\tif (!this.createHierarchyResolver()) {", "-\t\t\treturn;", "+\t\t// create and resolve binding (equivalent to beginCompilation() in Compiler)", "+\t\ttry {", "+\t\t\tthis.createAndResolveBindings(potentialMatches);", "+\t\t} catch (AbortCompilation e) {", "+\t\t\tthis.compilationAborted = true;", "-", "+\t", "+\t\t// create hierarchy resolver if needed", "+\t\ttry {", "+\t\t\tif (!this.compilationAborted && !this.createHierarchyResolver()) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} catch (AbortCompilation e) {", "+\t\t\tthis.compilationAborted = true;", "+\t\t}", "+\t"]}], "num": 22972}
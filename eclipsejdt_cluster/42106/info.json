{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8548c7188cbf239a611589de83f71ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d464658f26924ac2e2a55bbbc31306e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "272c951df671b1ff904ed6bfcde81c10aeb94ffd", "commitAfterChange": "a9dd5518f87ef0feeb42f8f7b9c8664624a32457", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public void parseMethods(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": "  public void parseMethods(Parser parser, CompilationUnitDeclaration unit)", "diff": ["-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tthis.memberTypes[i].parseMethods(parser, unit);", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeDeclaration typeDeclaration = this.memberTypes[i];", "+\t\t\ttypeDeclaration.parseMethods(parser, unit);", "+\t\t\tthis.bits |= (typeDeclaration.bits & ASTNode.HasSyntaxErrors);", "+\t\t}", "-\t\t\tthis.methods[i].parseStatements(parser, unit);", "+\t\t\tAbstractMethodDeclaration abstractMethodDeclaration = this.methods[i];", "+\t\t\tabstractMethodDeclaration.parseStatements(parser, unit);", "+\t\t\tthis.bits |= (abstractMethodDeclaration.bits & ASTNode.HasSyntaxErrors);", "+\t\t\t\t\tthis.bits |= (fieldDeclaration.bits & ASTNode.HasSyntaxErrors);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb9d5a11fdba85a4874a85397a6819a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["+\t\t\tthis.bits |= (this.returnType.bits & ASTNode.HasTypeAnnotations);", "-\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t\t\tTypeParameter typeParameter = this.typeParameters[i];", "+\t\t\t\tthis.bits |= (typeParameter.bits & ASTNode.HasTypeAnnotations);", "+\t\t\t\ttypeParameter.resolve(this.scope);", "+\t\t\t\ttypeParameter.resolveAnnotations(this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6f37442d44885abbc746c63ba9ed7fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t    switch(this.boundKind) {", "-\t        case Wildcard.EXTENDS :", "-\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "-\t        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "-\t\t\t\t\tthis.otherBounds[i]= BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "-\t        \t}", "+\t\tswitch(this.boundKind) {", "+\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\tTypeBinding resolveType = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "+\t\t\t\tthis.bound = resolveType;", "+\t\t\t\tthis.tagBits |= resolveType.tagBits & TagBits.ContainsNestedTypeReferences;", "+\t\t\t\tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "+\t\t\t\t\tresolveType = BinaryTypeBinding.resolveType(this.otherBounds[i], this.environment, true /* raw conversion */);", "+\t\t\t\t\tthis.otherBounds[i]= resolveType;", "+\t\t\t\t\tthis.tagBits |= resolveType.tagBits & TagBits.ContainsNestedTypeReferences;", "+\t\t\t\t}", "-\t        case Wildcard.SUPER :", "-\t\t\t\tthis.bound = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "+\t\t\tcase Wildcard.SUPER :", "+\t\t\t\tresolveType = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);", "+\t\t\t\tthis.bound = resolveType;", "+\t\t\t\tthis.tagBits |= resolveType.tagBits & TagBits.ContainsNestedTypeReferences;", "-\t    }", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "def9c415096ba7638a8a1991b70d3c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \tpublic void resolve(BlockScope scope)", "diff": ["+\t}", "+\t\tthis.bits |= (this.type.bits & ASTNode.HasTypeAnnotations);", "+\t\t// jsr 308", "+\t\tAnnotation[] typeAnnotations = this.type.annotations;", "+\t\tif (typeAnnotations != null) {", "+\t\t\tASTNode.resolveAnnotations(scope, typeAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "+\t\t}"]}], "num": 42106}
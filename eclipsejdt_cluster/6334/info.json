{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77f68492929ce09df29c42ebe280bfc7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "592e5cd91cb5016f2cded2103bcb6a34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (use15specifics) {", "-\t\t\tif (valueIfTrueType != valueIfFalseType) {", "-\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "-\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "-\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "-\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "-\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "-\t\t\t\t} else if (valueIfTrueType.isBaseType()) {", "-\t\t\t\t\tif ((valueIfTrueType == NullBinding) == valueIfFalseType.isBaseType()) {  // bool ? null : 12 --> Integer", "-\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\tif (use15specifics && valueIfTrueType != valueIfFalseType) {", "+\t\t\tif (valueIfTrueType.isBaseType()) {", "+\t\t\t\tif (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\t// bool ? baseType : baseType", "+\t\t\t\t\tif (valueIfTrueType == NullBinding) {  // bool ? null : 12 --> Integer", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType); // boxing", "+\t\t\t\t\t} else if (valueIfFalseType == NullBinding) {  // bool ? 12 : null --> Integer", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType); // boxing", "-\t\t\t\t} else if (valueIfFalseType.isBaseType()) {", "-\t\t\t\t\tif ((valueIfFalseType == NullBinding) == valueIfTrueType.isBaseType()) {  // bool ? 12 : null --> Integer", "-\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t} else {", "+\t\t\t\t\t// bool ? baseType : nonBaseType", "+\t\t\t\t\tTypeBinding unboxedIfFalseType = valueIfFalseType.isBaseType() ? valueIfFalseType : env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\tif (valueIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType; // unboxing", "+\t\t\t\t\t} else if (valueIfTrueType != NullBinding) {  // bool ? 12 : new Integer(12) --> int", "+\t\t\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType); // unboxing", "-\t\t\t}", "+\t\t\t} else if (valueIfFalseType.isBaseType()) {", "+\t\t\t\t\t// bool ? nonBaseType : baseType", "+\t\t\t\t\tTypeBinding unboxedIfTrueType = valueIfTrueType.isBaseType() ? valueIfTrueType : env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\tif (unboxedIfTrueType.isNumericType() && valueIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType; // unboxing", "+\t\t\t\t\t} else if (valueIfFalseType != NullBinding) {  // bool ? new Integer(12) : 12 --> int", "+\t\t\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType); // unboxing", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\t\t// bool ? nonBaseType : nonBaseType", "+\t\t\t\t\tTypeBinding unboxedIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t\t\tTypeBinding unboxedIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t\t\tif (unboxedIfTrueType.isNumericType() && unboxedIfFalseType.isNumericType()) {", "+\t\t\t\t\t\tvalueIfTrueType = unboxedIfTrueType;", "+\t\t\t\t\t\tvalueIfFalseType = unboxedIfFalseType;", "+\t\t\t\t\t}", "+\t\t\t} ", "-\t\tif ((valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding)", "-\t\t\t\t|| (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding)) {", "-\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(", "-\t\t\t\tthis,", "-\t\t\t\tvalueIfTrueType,", "-\t\t\t\tvalueIfFalseType);", "-\t\t\treturn null;", "+\t\tif (valueIfTrueType.isBaseType() && valueIfTrueType != NullBinding) {", "+\t\t\tif (use15specifics) {", "+\t\t\t\tvalueIfTrueType = env.computeBoxingType(valueIfTrueType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(this, valueIfTrueType, valueIfFalseType);", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t} else if (valueIfFalseType.isBaseType() && valueIfFalseType != NullBinding) {", "+\t\t\tif (use15specifics) {", "+\t\t\t\tvalueIfFalseType = env.computeBoxingType(valueIfFalseType);", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().conditionalArgumentsIncompatibleTypes(this, valueIfTrueType, valueIfFalseType);", "+\t\t\t\treturn null;", "+\t\t\t}", "-\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, commonType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, commonType, originalValueIfFalseType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c256959c95c687a8b83cf0704cbc48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tboolean use15specifics = scope.environment().options.sourceLevel >= ClassFileConstants.JDK1_5;", "-\t\tTypeBinding valueIfTrueType = valueIfTrue.resolveType(scope);", "+\t\tTypeBinding originalValueIfTrueType = valueIfTrue.resolveType(scope);", "-\t\tTypeBinding valueIfFalseType = valueIfFalse.resolveType(scope);", "+\t\tTypeBinding originalValueIfFalseType = valueIfFalse.resolveType(scope);", "-\t\tif (conditionType == null || valueIfTrueType == null || valueIfFalseType == null)", "+\t\tif (conditionType == null || originalValueIfTrueType == null || originalValueIfFalseType == null)", "+\t\tTypeBinding valueIfTrueType = originalValueIfTrueType;", "+\t\tTypeBinding valueIfFalseType = originalValueIfFalseType;", "+\t\tif (use15specifics) {", "+\t\t\tif (valueIfTrueType.isBaseType()) {", "+\t\t\t\tif (!valueIfFalseType.isBaseType()) {", "+\t\t\t\t\tvalueIfFalseType = scope.computeBoxingType(valueIfFalseType);", "+\t\t\t\t}", "+\t\t\t} else if (valueIfFalseType.isBaseType()) {", "+\t\t\t\tvalueIfTrueType = scope.computeBoxingType(valueIfTrueType);", "+\t\t\t}", "+\t\t}", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\t\tvalueIfTrue.computeConversion(scope, ShortBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, ShortBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, ShortBinding, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, ShortBinding, originalValueIfFalseType);", "-\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "-\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\t\t\tvalueIfTrue.computeConversion(scope, IntBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, IntBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, IntBinding, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, IntBinding, originalValueIfFalseType);", "-\t\t\t\tvalueIfTrue.computeConversion(scope, LongBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, LongBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, LongBinding, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, LongBinding, originalValueIfFalseType);", "-\t\t\t\tvalueIfTrue.computeConversion(scope, FloatBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.computeConversion(scope, FloatBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, FloatBinding, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, FloatBinding, originalValueIfFalseType);", "-\t\t\tvalueIfTrue.computeConversion(scope, DoubleBinding, valueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, DoubleBinding, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, DoubleBinding, originalValueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, DoubleBinding, originalValueIfFalseType);", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, originalValueIfFalseType);", "-\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, valueIfTrueType);", "-\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, originalValueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "-\t\tif (scope.environment().options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\tif (use15specifics) {"]}], "num": 6334}
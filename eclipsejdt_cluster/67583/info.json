{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04cd1ae751b8dd571778882edb9226f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ef6c5339d449f60e426f4ae3c97bb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "signatureAfterChange": " \tprotected NameEnvironmentAnswer find(String typeName, String packageName)", "diff": ["-\t\t\tAccessRestriction accessRestriction;", "-\t\t\tif (isBinary) {", "-\t\t\t\taccessRestriction = (AccessRestriction)this.accessRestrictions.get(this.project);", "-\t\t\t\tif (accessRestriction == null) {", "-\t\t\t\t\taccessRestriction = this.project.getProjectImportRestriction();", "+\t\t\tAccessRestriction accessRestriction = null;", "+\t\t\t", "+\t\t\tif (this.checkAccessRestrictions && (isBinary || !type.getJavaProject().equals(this.project))) {", "+\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\t\tClasspathEntry entry = (ClasspathEntry) this.nameLookup.rootToResolvedEntries.get(root);", "+\t\t\t\tif (entry != null) { // reverse map always contains resolved CP entry", "+\t\t\t\t\taccessRestriction = entry.getImportRestriction();", "-\t\t\t\t\t\tthis.accessRestrictions.put(this.project, accessRestriction);", "+\t\t\t\t\t\t// TODO (philippe) improve char[] <-> String conversions to avoid performing them on the fly", "+\t\t\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "+\t\t\t\t\t\tchar[] typeChars = typeName.toCharArray();", "+\t\t\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(CharOperation.concatWith(packageChars, typeChars, '/'), null);", "-\t\t\t} else {", "-\t\t\t\tJavaProject definingProject = (JavaProject) type.getJavaProject();", "-\t\t\t\tif (!definingProject.equals(this.project)) {", "-\t\t\t\t\taccessRestriction = (AccessRestriction)this.accessRestrictions.get(definingProject);", "-\t\t\t\t\tif (accessRestriction == null) {", "-\t\t\t\t\t\taccessRestriction = this.project.getProjectDependencyRestriction(definingProject);", "-\t\t\t\t\t\tif (accessRestriction != null) {", "-\t\t\t\t\t\t\tthis.accessRestrictions.put(definingProject, accessRestriction);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\taccessRestriction = null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (accessRestriction != null) {", "-\t\t\t\t// TODO (philippe) improve char[] <-> String conversions to avoid performing them on the fly", "-\t\t\t\tchar[][] packageChars = CharOperation.splitOn('.', packageName.toCharArray());", "-\t\t\t\tchar[] typeChars = typeName.toCharArray();", "-\t\t\t\taccessRestriction = accessRestriction.getViolatedRestriction(CharOperation.concatWith(packageChars, typeChars, '/'), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cda9782058023160a2e747dbb658df6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 259, "signatureBeforeChange": " public final void load(TypeBinding typeBinding, int resolvedPosition)", "signatureAfterChange": " public final void load(TypeBinding typeBinding, int resolvedPosition)", "diff": ["-\tif (typeBinding == TypeBinding.INT) {", "-\t\tswitch (resolvedPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.iload_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.iload_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.iload_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.iload_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.iload(resolvedPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated float bytecode", "-\tif (typeBinding == TypeBinding.FLOAT) {", "-\t\tswitch (resolvedPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.fload_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.fload_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.fload_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.fload_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.fload(resolvedPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated long bytecode", "-\tif (typeBinding == TypeBinding.LONG) {", "-\t\tswitch (resolvedPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.lload_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.lload_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.lload_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.lload_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.lload(resolvedPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// Using dedicated double bytecode", "-\tif (typeBinding == TypeBinding.DOUBLE) {", "-\t\tswitch (resolvedPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.dload_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.dload_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.dload_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.dload_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.dload(resolvedPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t// boolean, byte, char and short are handled as int", "-\tif ((typeBinding == TypeBinding.BYTE) || (typeBinding == TypeBinding.CHAR) || (typeBinding == TypeBinding.BOOLEAN) || (typeBinding == TypeBinding.SHORT)) {", "-\t\tswitch (resolvedPosition) {", "-\t\t\tcase 0 :", "-\t\t\t\tthis.iload_0();", "-\t\t\t\tbreak;", "-\t\t\tcase 1 :", "-\t\t\t\tthis.iload_1();", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\tthis.iload_2();", "-\t\t\t\tbreak;", "-\t\t\tcase 3 :", "-\t\t\t\tthis.iload_3();", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.iload(resolvedPosition);", "-\t\t}", "-\t\treturn;", "-\t}", "-", "-\t// Reference object", "-\tswitch (resolvedPosition) {", "-\t\tcase 0 :", "-\t\t\tthis.aload_0();", "+\tswitch(typeBinding.id) {", "+\t\tcase TypeIds.T_int :", "+\t\tcase TypeIds.T_byte :", "+\t\tcase TypeIds.T_char :", "+\t\tcase TypeIds.T_boolean :", "+\t\tcase TypeIds.T_short :", "+\t\t\tswitch (resolvedPosition) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tthis.iload_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tthis.iload_1();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tthis.iload_2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3 :", "+\t\t\t\t\tthis.iload_3();", "+\t\t\t\t\tbreak;", "+\t\t\t\t//case -1 :", "+\t\t\t\t// internal failure: trying to load variable not supposed to be generated", "+\t\t\t\t//\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tthis.iload(resolvedPosition);", "+\t\t\t}", "-\t\tcase 1 :", "-\t\t\tthis.aload_1();", "+\t\tcase TypeIds.T_float :", "+\t\t\tswitch (resolvedPosition) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tthis.fload_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tthis.fload_1();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tthis.fload_2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3 :", "+\t\t\t\t\tthis.fload_3();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tthis.fload(resolvedPosition);", "+\t\t\t}", "-\t\tcase 2 :", "-\t\t\tthis.aload_2();", "+\t\tcase TypeIds.T_long :", "+\t\t\tswitch (resolvedPosition) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tthis.lload_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tthis.lload_1();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tthis.lload_2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3 :", "+\t\t\t\t\tthis.lload_3();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tthis.lload(resolvedPosition);", "+\t\t\t}", "-\t\tcase 3 :", "-\t\t\tthis.aload_3();", "+\t\tcase TypeIds.T_double :", "+\t\t\tswitch (resolvedPosition) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tthis.dload_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tthis.dload_1();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tthis.dload_2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3 :", "+\t\t\t\t\tthis.dload_3();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tthis.dload(resolvedPosition);", "+\t\t\t}", "-\t\t\tthis.aload(resolvedPosition);", "+\t\t\tswitch (resolvedPosition) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tthis.aload_0();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tthis.aload_1();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tthis.aload_2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 3 :", "+\t\t\t\t\tthis.aload_3();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tthis.aload(resolvedPosition);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9a3501d982fe23acebf181bdaa60e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "09c9d84aad79985551ce918cbcc33cdee71ab4e2", "commitAfterChange": "0f631524aef87d3ee7b5140c20a85cb2799ddd71", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 368, "signatureBeforeChange": " private void jumpOverType()", "signatureAfterChange": " private void jumpOverType()", "diff": ["+\t\t", "+\t\tif (DEBUG_AUTOMATON) {", "+\t\t\tSystem.out.println(\"Jump         -\"); //$NON-NLS-1$", "+\t\t}", "+\t\t", "-\t\t\tpushOnAstStack(typeDeclaration);", "-\t\t\tif(this.astLengthPtr > 0) {", "-\t\t\t\tconcatNodeLists();", "-\t\t\t}", "-\t\t\t", "-\t\t\tif(this.currentElement != null) {", "-\t\t\t\tthis.currentElement = this.currentElement.add(typeDeclaration, 0);", "-\t\t\t}", "-\t\t\t", "-\t\t\ttry {", "-\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t} catch(InvalidInputException e){", "-\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "-\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t}", "-\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "-\t\t\t}", "+\t\t\t((RecoveryScanner)this.scanner).setPendingTokens(new int[]{TokenNameSEMICOLON, TokenNamebreak});", "-\t\t\tif(this.astPtr > -1 && this.astStack[this.astPtr] instanceof TypeDeclaration) {", "-\t\t\t\tthis.astStack[astPtr] = typeDeclaration;", "-\t\t\t\tthis.expressionStack[this.expressionPtr] = typeDeclaration.allocation;", "-\t\t\t}", "-\t\t\tthis.currentToken = TokenNameRBRACE;", "+\t\t\t((RecoveryScanner)this.scanner).setPendingTokens(new int[]{TokenNameIdentifier, TokenNameEQUAL, TokenNameIdentifier});", "+\t\t}", "+\t\t", "+\t\tthis.pendingRecoveredType = typeDeclaration;", "+\t\t", "+\t\ttry {", "+\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t} catch(InvalidInputException e){", "+\t\t\t// it's impossible because we added pending tokens before", "-\t\t\t\t\t? nextTypeDeclaration.declarationSourceStart", "-\t\t\t\t\t\t\t: nextTypeDeclaration.bodyStart;", "+\t\t\t\t\t? nextTypeDeclaration.declarationSourceStart ", "+\t\t\t\t\t\t\t: nextTypeDeclaration.allocation.sourceStart;"]}], "num": 67583}
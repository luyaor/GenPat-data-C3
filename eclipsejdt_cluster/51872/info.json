{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "924794f09cc3893b1c047b926b3d4316", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b6df525fdca8f6d838e884ac55be6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "diff": ["+\t// TODO (olivier) should optimize to use switch(binding.kind()) & modifier bitmask comparisons", "-\t\tif (typeBinding == null) {", "-\t\t\treturn typeBinding2 == null;", "-\t\t} else if (typeBinding2 == null) {", "+\t\tif (typeBinding == typeBinding2)", "+\t\t\treturn true;", "+\t\tif (typeBinding == null || typeBinding2 == null)", "-\t\t} else if (typeBinding.isBaseType()) {", "-\t\t\t// base type", "-\t\t\tif (!typeBinding2.isBaseType()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\treturn typeBinding.id == typeBinding2.id;", "-\t\t} else if (typeBinding.isArrayType()) {", "-\t\t\t// array case", "-\t\t\tif (!typeBinding2.isArrayType()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\treturn typeBinding.dimensions() == typeBinding2.dimensions()", "-\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType(), checkTypeVariables);", "-\t\t} else {", "-\t\t\t// reference type", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) typeBinding;", "-\t\t\tif (!(typeBinding2 instanceof ReferenceBinding)) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tReferenceBinding referenceBinding2 = (ReferenceBinding) typeBinding2;", "-\t\t\tif (referenceBinding.isParameterizedType()) {", "-\t\t\t\tif (!referenceBinding2.isParameterizedType()) {", "+\t\t", "+\t\tswitch (typeBinding.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\tif (!typeBinding2.isBaseType()) {", "-\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) referenceBinding;", "-\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding2 = (ParameterizedTypeBinding) referenceBinding2;", "+\t\t\t\treturn typeBinding.id == typeBinding2.id;", "+\t\t\t\t", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tif (!typeBinding2.isArrayType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding.dimensions() == typeBinding2.dimensions()", "+\t\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType(), checkTypeVariables);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tif (!typeBinding2.isParameterizedType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) typeBinding;", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding2 = (ParameterizedTypeBinding) typeBinding2;", "-\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "-\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t\t&& ((referenceBinding.modifiers & CompilerModifiers.AccJustFlag) == (referenceBinding2.modifiers & CompilerModifiers.AccJustFlag));", "-\t\t\t} else if (referenceBinding.isWildcard()) {", "-\t\t\t\tif (!referenceBinding2.isWildcard()) {", "+\t\t\t\treturn CharOperation.equals(parameterizedTypeBinding.compoundName, parameterizedTypeBinding2.compoundName)", "+\t\t\t\t\t&& (parameterizedTypeBinding.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t\t\t== (parameterizedTypeBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t\t\t\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tif (!typeBinding2.isWildcard()) {", "-\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) referenceBinding;", "-\t\t\t\tWildcardBinding wildcardBinding2 = (WildcardBinding) referenceBinding2;", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) typeBinding;", "+\t\t\t\tWildcardBinding wildcardBinding2 = (WildcardBinding) typeBinding2;", "-\t\t\t\t\t&& wildcardBinding.kind == wildcardBinding2.kind;", "-\t\t\t} else if (referenceBinding.isGenericType()) {", "-\t\t\t\tif (!referenceBinding2.isGenericType()) {", "+\t\t\t\t\t&& wildcardBinding.boundKind == wildcardBinding2.boundKind;", "+\t\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tif (!(typeBinding2.isTypeVariable())) {", "-\t\t\t\tif (checkTypeVariables) {", "-\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables(), true)) {", "+\t\t\t\tif (typeBinding.isCapture()) {", "+\t\t\t\t\tif (!(typeBinding2.isCapture())) {", "+\t\t\t\t\tCaptureBinding captureBinding = (CaptureBinding) typeBinding;", "+\t\t\t\t\tCaptureBinding captureBinding2 = (CaptureBinding) typeBinding2;", "+\t\t\t\t\treturn isEqual(captureBinding.wildcard, captureBinding2.wildcard, checkTypeVariables);", "-\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "-\t\t\t\t\t&& (referenceBinding.isGenericType() == referenceBinding2.isGenericType())", "-\t\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "-\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t\t&& ((referenceBinding.modifiers & CompilerModifiers.AccJustFlag) == (referenceBinding2.modifiers & CompilerModifiers.AccJustFlag));", "-\t\t\t} else if (referenceBinding instanceof TypeVariableBinding) {", "-\t\t\t\tif (!(referenceBinding2 instanceof TypeVariableBinding)) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) referenceBinding;", "-\t\t\t\tTypeVariableBinding typeVariableBinding2 = (TypeVariableBinding) referenceBinding2;", "+\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) typeBinding;", "+\t\t\t\tTypeVariableBinding typeVariableBinding2 = (TypeVariableBinding) typeBinding2;", "-\t\t\t} else {", "+\t\t\t", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tif (!typeBinding2.isGenericType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) typeBinding;", "+\t\t\t\tReferenceBinding referenceBinding2 = (ReferenceBinding) typeBinding2;", "+\t\t\t\tif (checkTypeVariables) {", "+\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables(), true)) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t\t\t== (referenceBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t", "+\t\t\tcase Binding.RAW_TYPE :", "+\t\t\tdefault :", "+\t\t\t\tif (!(typeBinding2 instanceof ReferenceBinding)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\treferenceBinding = (ReferenceBinding) typeBinding;", "+\t\t\t\treferenceBinding2 = (ReferenceBinding) typeBinding2;", "+\t\t\t\t\t&& (!referenceBinding2.isGenericType())", "-\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t\t&& ((referenceBinding.modifiers & CompilerModifiers.AccJustFlag) == (referenceBinding2.modifiers & CompilerModifiers.AccJustFlag));", "-\t\t\t}", "+\t\t\t\t\t&& (referenceBinding.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t\t\t== (referenceBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44bc1752fe5d5f2de89fe69f44a065ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "commitAfterChange": "9fe7a0961c6a22749dae4c4e81b9646dbf13e5af", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["+\t */", "-\t\tboolean noProblems = true;", "-\t\tnextVariable : for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\tboolean noProblems = true;", "+\t\tnextVariable: for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\t\tboolean isFirstBoundTypeVariable = false;", "-\t\t\t\tnoProblems = false;", "-\t\t\t\tcontinue nextVariable;", "-\t\t\t}", "-\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "-\t\t\tif (superType.isArrayType()) {", "-\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "-\t\t\t\tcontinue nextVariable;", "-\t\t\t}", "-\t\t\tboolean isTypeVariableFirstBound =  superType.isTypeVariable();", "-\t\t\tif (isTypeVariableFirstBound) {", "-\t\t\t\tTypeVariableBinding varSuperType = (TypeVariableBinding) superType;", "-\t\t\t\tif (varSuperType.rank >= typeVariable.rank && varSuperType.declaringElement == typeVariable.declaringElement) {", "-\t\t\t\t\tproblemReporter().forwardTypeVariableReference(typeParameter, varSuperType);", "-\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\tcontinue nextVariable;", "+\t\t\t} else {", "+\t\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "+\t\t\t\tfirstBound: {", "+\t\t\t\t\tswitch (superType.kind()) {", "+\t\t\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "+\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\tbreak firstBound; // do not keep first bound", "+\t\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t\tisFirstBoundTypeVariable = true;", "+\t\t\t\t\t\t\tTypeVariableBinding varSuperType = (TypeVariableBinding) superType;", "+\t\t\t\t\t\t\tif (varSuperType.rank >= typeVariable.rank && varSuperType.declaringElement == typeVariable.declaringElement) {", "+\t\t\t\t\t\t\t\tproblemReporter().forwardTypeVariableReference(typeParameter, varSuperType);", "+\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t\tbreak firstBound; // do not keep first bound", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tif (((ReferenceBinding) superType).isFinal()) {", "+\t\t\t\t\t\t\t\tproblemReporter().finalVariableBound(typeVariable, typeRef);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "+\t\t\t\t\tif (!superType.isInterface()) {", "+\t\t\t\t\t\ttypeVariable.superclass = superRefType;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superRefType};", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeVariable.firstBound = superRefType; // first bound used to compute erasure", "-\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "-\t\t\tif (superRefType.isFinal())", "-\t\t\t\tproblemReporter().finalVariableBound(typeVariable, typeRef);", "-\t\t\tif (!superType.isInterface()) {", "-\t\t\t\ttypeVariable.superclass = superRefType;", "-\t\t\t} else {", "-\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superRefType};", "-\t\t\t}", "-\t\t\ttypeVariable.firstBound = superRefType; // first bound used to compute erasure", "-\t\t\t\tfor (int j = 0, boundLength = boundRefs.length; j < boundLength; j++) {", "+\t\t\t\tnextBound: for (int j = 0, boundLength = boundRefs.length; j < boundLength; j++) {", "-\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t}", "-\t\t\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "-\t\t\t\t\tif (isTypeVariableFirstBound && j == 0) {", "-\t\t\t\t\t\tproblemReporter().noAdditionalBoundAfterTypeVariable(typeRef);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (superType.isArrayType()) {", "-\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "-\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t}", "-\t\t\t\t\tsuperRefType = (ReferenceBinding) superType;", "-\t\t\t\t\tif (!superType.isInterface()) {", "-\t\t\t\t\t\tproblemReporter().boundMustBeAnInterface(typeRef, superType);", "-\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "-\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t}", "-\t\t\t\t\t// check against superclass", "-\t\t\t\t\tif (checkForErasedCandidateCollisions && typeVariable.firstBound == typeVariable.superclass) {", "-\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, typeVariable.superclass, invocations, typeVariable, typeRef)) {", "-\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t// check against superinterfaces", "-\t\t\t\t\tfor (int index = typeVariable.superInterfaces.length; --index >= 0;) {", "-\t\t\t\t\t\tReferenceBinding previousInterface = typeVariable.superInterfaces[index];", "-\t\t\t\t\t\tif (previousInterface == superRefType) {", "-\t\t\t\t\t\t\tproblemReporter().duplicateBounds(typeRef, superType);", "+\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "+\t\t\t\t\t\tboolean didAlreadyComplain = false;", "+\t\t\t\t\t\tif (isFirstBoundTypeVariable && j == 0) {", "+\t\t\t\t\t\t\tproblemReporter().noAdditionalBoundAfterTypeVariable(typeRef);", "-\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\tcontinue nextVariable;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (checkForErasedCandidateCollisions) {", "-\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, previousInterface, invocations, typeVariable, typeRef)) {", "-\t\t\t\t\t\t\t\tnoProblems = false;", "-\t\t\t\t\t\t\t\tcontinue nextVariable;", "+\t\t\t\t\t\t\tdidAlreadyComplain = true;", "+\t\t\t\t\t\t\t//continue nextBound; - keep these bounds to minimize secondary errors", "+\t\t\t\t\t\t} else if (superType.isArrayType()) {", "+\t\t\t\t\t\t\tif (!didAlreadyComplain) {", "+\t\t\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "+\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (!superType.isInterface()) {", "+\t\t\t\t\t\t\t\tif (!didAlreadyComplain) {", "+\t\t\t\t\t\t\t\t\tproblemReporter().boundMustBeAnInterface(typeRef, superType);", "+\t\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t// check against superclass", "+\t\t\t\t\t\tif (checkForErasedCandidateCollisions && typeVariable.firstBound == typeVariable.superclass) {", "+\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, typeVariable.superclass, invocations, typeVariable, typeRef)) {", "+\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// check against superinterfaces", "+\t\t\t\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "+\t\t\t\t\t\tfor (int index = typeVariable.superInterfaces.length; --index >= 0;) {", "+\t\t\t\t\t\t\tReferenceBinding previousInterface = typeVariable.superInterfaces[index];", "+\t\t\t\t\t\t\tif (previousInterface == superRefType) {", "+\t\t\t\t\t\t\t\tproblemReporter().duplicateBounds(typeRef, superType);", "+\t\t\t\t\t\t\t\ttypeVariable.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (checkForErasedCandidateCollisions) {", "+\t\t\t\t\t\t\t\tif (hasErasedCandidatesCollisions(superType, previousInterface, invocations, typeVariable, typeRef)) {", "+\t\t\t\t\t\t\t\t\tcontinue nextBound;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint size = typeVariable.superInterfaces.length;", "+\t\t\t\t\t\tSystem.arraycopy(typeVariable.superInterfaces, 0, typeVariable.superInterfaces = new ReferenceBinding[size + 1], 0, size);", "+\t\t\t\t\t\ttypeVariable.superInterfaces[size] = superRefType;", "-\t\t\t\t\tint size = typeVariable.superInterfaces.length;", "-\t\t\t\t\tSystem.arraycopy(typeVariable.superInterfaces, 0, typeVariable.superInterfaces = new ReferenceBinding[size + 1], 0, size);", "-\t\t\t\t\ttypeVariable.superInterfaces[size] = superRefType;", "+\t\t\tnoProblems &= (typeVariable.tagBits & TagBits.HierarchyHasProblems) == 0;"]}], "num": 51872}
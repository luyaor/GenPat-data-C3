{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0af184c99cc381a245ea702531e2ca1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3932e4bc89b87bb9f591cd99574d36f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedAnnotationBinding.java", "commitBeforeChange": "833acf9fd171cc3b88beb3f35c58318abd7b1b7c", "commitAfterChange": "e83ae1e37e0f93b696a44a9888bf8d5e9425c659", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public ReferenceBinding getAnnotationType()", "signatureAfterChange": "  public ReferenceBinding getAnnotationType()", "diff": ["-\t// the type is resolved when requested", "-\tif (this.env != null) {", "-\t\t// annotation type are never parameterized", "+\tif (this.typeUnresolved) { // the type is resolved when requested", "-\t\tthis.env = null;", "-\t\tsetMethodBindings();", "+\t\t\t// annotation type are never parameterized", "+\t\tthis.typeUnresolved = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c452ee9a4017cbbc9eaaa3b254f86848", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\t\t// tag parameters as being set", "-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(this.arguments[i].binding);", "-\t\t\t}", "-\t\t}", "+\t\t// nullity and mark as assigned", "+\t\tanalyseArguments(flowInfo);"]}], "num": 57070}
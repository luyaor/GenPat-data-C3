{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de28734fadc4919edc2cefb70b10d359", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1260ee13820f9fb691ddb9a91b392bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "7c0be3631ccaa5ae2d50fbe318ed50c01164d856", "commitAfterChange": "c8fa56c625729a2c5aff4c492dea2eebe9fdcef6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\tif (invocationType == this.declaringClass && invocationType == receiverType) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass) && TypeBinding.equalsEquals(invocationType, receiverType)) return true;", "-\t\tif (invocationType == this.declaringClass) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass)) return true;", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "+\t\t\t\tif (TypeBinding.equalsEquals(currentType, receiverErasure) || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "-\t\t\tif (receiverType != this.declaringClass) {", "+\t\t\tif (TypeBinding.notEquals(receiverType, this.declaringClass)) {", "-\t\tif (invocationType != this.declaringClass) {", "+\t\tif (TypeBinding.notEquals(invocationType, this.declaringClass)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == currentType.erasure().original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.erasure().original())) return true;", "-\t\t\tif (originalDeclaringClass == currentType.original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.original())) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be877514df3ddd8871cebf43a2362637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "7c0be3631ccaa5ae2d50fbe318ed50c01164d856", "commitAfterChange": "c8fa56c625729a2c5aff4c492dea2eebe9fdcef6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\tif (invocationSite.isTypeAccess() && receiverType == this.declaringClass)", "+\t\tif (invocationSite.isTypeAccess() && TypeBinding.equalsEquals(receiverType, this.declaringClass))", "-\t\tif (invocationSite.receiverIsImplicitThis() && invocationType == this.declaringClass)", "+\t\tif (invocationSite.receiverIsImplicitThis() && TypeBinding.equalsEquals(invocationType, this.declaringClass))", "-\tif (invocationType == this.declaringClass && invocationType == receiverType) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass) && TypeBinding.equalsEquals(invocationType, receiverType)) return true;", "-\t\tif (invocationType == this.declaringClass) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, this.declaringClass)) return true;", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "+\t\t\t\tif (TypeBinding.equalsEquals(currentType, receiverErasure) || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {", "-\t\t\tif (receiverType != this.declaringClass) {", "+\t\t\tif (TypeBinding.notEquals(receiverType, this.declaringClass)) {", "-\t\tif (invocationType != this.declaringClass) {", "+\t\tif (TypeBinding.notEquals(invocationType, this.declaringClass)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == currentType.erasure().original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.erasure().original())) return true;", "-\t\t\tif (originalDeclaringClass == currentType.original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.original())) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb3ec75d0783f6141aaa0c017a14ead0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "e31e89499c545f3404d7787f4d333516631375ec", "commitAfterChange": "0eef8a719c726a9948e73db62c7f81adbce0f319", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public final boolean canBeSeenBy(ReferenceBinding receiverType, ReferenceBinding invocationType)", "signatureAfterChange": " public final boolean canBeSeenBy(ReferenceBinding receiverType, ReferenceBinding invocationType)", "diff": ["-\tif (invocationType == this && invocationType == receiverType) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this) && TypeBinding.equalsEquals(invocationType, receiverType)) return true;", "-\t\tif (invocationType == this) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, this)) return true;", "-\t\tif (declaringClass == invocationType) return true;", "+\t\tif (TypeBinding.equalsEquals(declaringClass, invocationType)) return true;", "-\t\t\tif (!(receiverType == this || receiverType == enclosingType())) {", "+\t\t\tif (!(TypeBinding.equalsEquals(receiverType, this) || TypeBinding.equalsEquals(receiverType, enclosingType()))) {", "-\t\tif (invocationType != this) {", "+\t\tif (TypeBinding.notEquals(invocationType, this)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == currentType.erasure().original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.erasure().original())) return true;", "-\t\t\tif (equalsEquals(originalDeclaringClass, currentType.original())) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, currentType.original())) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f09a39a693fd74dd6b466083d7556213", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (valueIfTrueType == TypeBinding.BOOLEAN) {", "+\t\t\tif (TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.BOOLEAN)) {", "-\t\t\tif ((valueIfTrueType == TypeBinding.BYTE && valueIfFalseType == TypeBinding.SHORT)", "-\t\t\t\t|| (valueIfTrueType == TypeBinding.SHORT && valueIfFalseType == TypeBinding.BYTE)) {", "+\t\t\tif ((TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.BYTE) && TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.SHORT))", "+\t\t\t\t|| (TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.SHORT) && TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.BYTE))) {", "-\t\t\tif ((valueIfTrueType == TypeBinding.BYTE || valueIfTrueType == TypeBinding.SHORT || valueIfTrueType == TypeBinding.CHAR)", "-\t\t\t\t\t&& (valueIfFalseType == TypeBinding.INT", "+\t\t\tif ((TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.BYTE) || TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.SHORT) || TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.CHAR))", "+\t\t\t\t\t&& (TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.INT)", "-\t\t\tif ((valueIfFalseType == TypeBinding.BYTE", "-\t\t\t\t\t|| valueIfFalseType == TypeBinding.SHORT", "-\t\t\t\t\t|| valueIfFalseType == TypeBinding.CHAR)", "-\t\t\t\t\t&& (valueIfTrueType == TypeBinding.INT", "+\t\t\tif ((TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.BYTE)", "+\t\t\t\t\t|| TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.SHORT)", "+\t\t\t\t\t|| TypeBinding.equalsEquals(valueIfFalseType, TypeBinding.CHAR))", "+\t\t\t\t\t&& (TypeBinding.equalsEquals(valueIfTrueType, TypeBinding.INT)"]}], "num": 26963}
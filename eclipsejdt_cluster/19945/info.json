{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c43442cbed0cc2f9693ce81da91814f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a3f50895f847a03469077a18e1bef9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "2452619bb5034f0a0ba9b6e9747cd6db77b2eb53", "commitAfterChange": "8d4f2ebabb0e50507cab6ea5f17acab787cfb10b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic static Test buildTestSuiteUniqueCompliance(Class evaluationTestClass, String uniqueCompliance)", "signatureAfterChange": " \tpublic static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance)", "diff": ["+\t */", "+\tpublic static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance) {", "+\t\tString highestLevel = highestComplianceLevels();", "+\t\tif (highestLevel.compareTo(uniqueCompliance) < 0) {", "+\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "+\t\t\treturn new TestSuite();", "+\t\t}", "+\t\tTestSuite complianceSuite = new TestSuite(uniqueCompliance);", "+\t\t\tcomplianceSuite.addTest((Test)tests.get(index));", "+\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "+\t\tsuite.addTest(new RegressionTestSetup(complianceSuite, uniqueCompliance));", "+\t\treturn suite;", "-\tpublic static Test buildTestSuiteUniqueCompliance(Class evaluationTestClass, String uniqueCompliance) {", "-\t\t\tString highestLevel = highestComplianceLevels();", "-\t\t\tif (highestLevel.compareTo(uniqueCompliance) < 0) {", "-\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "-\t\t\t\treturn new TestSuite();", "-\t\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "-\t\t\tsuite.addTest(buildTestSuite(evaluationTestClass, uniqueCompliance));", "-\t\t\treturn suite;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b942b8010a1ee6f694373400977cf58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "14aaae6e589afc08756540e2b0c7b0b83003376b", "commitAfterChange": "0f2fe4c87f2d34f3b54dd9231d53f8675d730578", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance)", "signatureAfterChange": " \tpublic static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, String uniqueCompliance)", "diff": ["+\t */", "+\tpublic static Test buildUniqueComplianceTestSuite(Class evaluationTestClass, String uniqueCompliance) {", "+\t\tString highestLevel = highestComplianceLevels();", "+\t\tif (highestLevel.compareTo(uniqueCompliance) < 0) {", "+\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "+\t\t\treturn new TestSuite();", "+\t\t}", "+\t\tTestSuite complianceSuite = new TestSuite(uniqueCompliance);", "+\t\tList tests = buildTestsList(evaluationTestClass);", "+\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\tcomplianceSuite.addTest((Test)tests.get(index));", "+\t\t}", "+\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "+\t\tsuite.addTest(new RegressionTestSetup(complianceSuite, uniqueCompliance));", "+\t\treturn suite;", "+\t}", "-\t */", "-\tpublic static Test buildComplianceRegressionSetupSuite(Class evaluationTestClass, String uniqueCompliance) {", "-\t\tString highestLevel = highestComplianceLevels();", "-\t\tif (highestLevel.compareTo(uniqueCompliance) < 0) {", "-\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+highestLevel+\"!\");", "-\t\t\treturn new TestSuite();", "-\t\t}", "-\t\tTestSuite complianceSuite = new TestSuite(uniqueCompliance);", "-\t\tList tests = buildTestsList(evaluationTestClass);", "-\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "-\t\t\tcomplianceSuite.addTest((Test)tests.get(index));", "-\t\t}", "-\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "-\t\tsuite.addTest(new RegressionTestSetup(complianceSuite, uniqueCompliance));", "-\t\treturn suite;", "-\t}"]}], "num": 19945}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef34aa592e9361618d66108895534d16", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "674b68dd6e81d80f37b6fcf1d5c67b4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic static Object getTarget(IContainer container, IPath path)", "signatureAfterChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "diff": ["-\t */\r", "-\tpublic static Object getTarget(IContainer container, IPath path) {\r", "-\r", "-\t\tif (path == null)\r", "-\t\t\treturn null;\r", "-\r", "-\t\t// lookup - inside the container\r", "-\t\tIResource resource = container.findMember(path);\r", "-\t\tif (resource != null)\r", "-\t\t\treturn resource;\r", "-\r", "-\t\t// lookup - outside the container\r", "-\t\tFile externalFile = new File(path.toOSString());\r", "-\t\tif (externalFile.exists())\r", "-\t\t\treturn externalFile;\r", "-\t\treturn null;\r", "-\t}\r", "+ */\r", "+public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence) {\r", "+\r", "+\tif (path == null) return null;\r", "+\t\r", "+\t// lookup - inside the container\r", "+\tIResource resource = container.findMember(path);\r", "+\tif (resource != null){\r", "+\t\tif (!checkResourceExistence ||resource.exists()) return resource;\r", "+\t\treturn null;\r", "+\t}\r", "+\r", "+\t// lookup - outside the container\r", "+\tFile externalFile = new File(path.toOSString());\r", "+\tif (externalFile.exists()) return externalFile;\r", "+\treturn null;\t\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4f3923afe6e5e54fb3e84f97c88a39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " private synchronized static Object getTargetAsExternalFile(IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getExternalTarget(IPath path, boolean checkResourceExistence)", "diff": ["-private synchronized static Object getTargetAsExternalFile(IPath path, boolean checkResourceExistence) {", "+}", "+public static Object getExternalTarget(IPath path, boolean checkResourceExistence) {", "+\tif (path == null)", "+\t\treturn null;", "+\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "+\tObject linkedFolder = externalFoldersManager.getFolder(path);", "+\tif (linkedFolder != null) {", "+\t\tif (checkResourceExistence) {", "+\t\t\t// check if external folder is present", "+\t\t\tFile externalFile = new File(path.toOSString());", "+\t\t\tif (!externalFile.isDirectory()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\treturn linkedFolder;", "+\t}", "-\t} else if (existingExternalFiles.contains(externalFile)) {", "+\t} else if (existingExternalFilesContains(externalFile)) {", "-\t\tif (externalFile.exists()) {", "+\t\tif (externalFile.isFile()) { // isFile() checks for existence (it returns false if a directory)", "-\t\t\texistingExternalFiles.add(externalFile);", "+\t\t\texistingExternalFilesAdd(externalFile);", "+\t\t} else if (externalFile.isDirectory()) {", "+\t\t\treturn externalFoldersManager.addFolder(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc7720d1002ac2bda81e74578de781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": " public static Object getTarget(IPath path, boolean checkResourceExistence)", "diff": ["-public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence) {", "-", "-\tif (path == null) return null;", "-\t", "-\t// lookup - inside the container", "-\tif (path.getDevice() == null) { // container relative paths should not contain a device ", "-\t\t\t\t\t\t\t\t\t\t\t\t// (see http://dev.eclipse.org/bugs/show_bug.cgi?id=18684)", "-\t\t\t\t\t\t\t\t\t\t\t\t// (case of a workspace rooted at d:\\ )", "-\t\tIResource resource = container.findMember(path);", "-\t\tif (resource != null){", "-\t\t\tif (!checkResourceExistence ||resource.exists()) return resource;", "-\t\t\treturn null;", "-\t\t}", "-\t}", "-\t", "-\t// if path is relative, it cannot be an external path", "-\t// (see http://dev.eclipse.org/bugs/show_bug.cgi?id=22517)", "-\tif (!path.isAbsolute()) return null; ", "-", "-\t// lookup - outside the container", "-\treturn getTargetAsExternalFile(path, checkResourceExistence);\t", "+public static Object getTarget(IPath path, boolean checkResourceExistence) {", "+\tObject target = getWorkspaceTarget(path); // Implicitly checks resource existence", "+\tif (target != null)", "+\t\treturn target;", "+\treturn getExternalTarget(path, checkResourceExistence);"]}], "num": 58568}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85836328016b4645e957c5f39493329b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1291517c569fae1ac79d8fdafcf07375", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "ad2166cdb4061bd08d277e145a390369585ad35a", "commitAfterChange": "3ecd15451330956435ccef213a5775052d6006c5", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 139, "signatureBeforeChange": "  \t\tprotected int getNodeIndent(int nodeIndex)", "signatureAfterChange": "  \t\tprotected int getNodeIndent(int nodeIndex)", "diff": ["-\t\t\tASTNode node= (ASTNode) this.list[nodeIndex].getOriginalValue();", "-\t\t\tif (node == null) {", "-\t\t\t\tnode= (ASTNode) this.list[nodeIndex].getNewValue();", "-\t\t\t}", "-\t\t\tif (node.getNodeType() != ASTNode.SWITCH_CASE) {", "-\t\t\t\tindent++;", "+\t\t\t", "+\t\t\tif (this.indentSwitchStatementsCompareToCases) {", "+\t\t\t\tRewriteEvent event = this.list[nodeIndex];", "+\t\t\t\tint changeKind = event.getChangeKind();", "+\t\t\t\t", "+\t\t\t\tASTNode node;", "+\t\t\t\tif (changeKind == RewriteEvent.INSERTED || changeKind == RewriteEvent.REPLACED) {", "+\t\t\t\t\tnode= (ASTNode)event.getNewValue();", "+\t\t\t\t} else {", "+\t\t\t\t\tnode= (ASTNode)event.getOriginalValue();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (node.getNodeType() != ASTNode.SWITCH_CASE) {", "+\t\t\t\t\tindent++;", "+\t\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f609f44563094f105951baab1b395468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\t\tif ((this.tagBits & TagBits.HasTypeVariable) == 0) return;", "+\t\tif ((this.tagBits & TagBits.HasTypeVariable) == 0) {", "+\t\t\tTypeBinding actualEquivalent = actualType.findSuperTypeOriginatingFrom(this.type);", "+\t\t\tif (actualEquivalent != null && actualEquivalent.isRawType()) {", "+\t\t\t\tinferenceContext.isUnchecked = true;", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "-        \t\tif (!inferenceContext.checkRawSubstitution()) {", "+        \t\tif (inferenceContext.depth > 0) {", "-        \t\tif (!inferenceContext.checkRawSubstitution()) {", "+        \t\tif (inferenceContext.depth > 0) {", "+        \t\t} else {", "+\t        \t\tinferenceContext.isUnchecked = true;"]}], "num": 72824}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4b2e28580ac8d51d43f22f6eac76df2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e5a57b28c70b0c1de0199080dcc825d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void test026()", "signatureAfterChange": " \tpublic void test026()", "diff": ["-\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     7  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 15] local: i index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28019334cbc2066ead89cf58817adfd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " \tpublic void test081()", "signatureAfterChange": " \tpublic void test081()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic A<String> foo() { return null; }\\r\\n\" +", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic A<String> foo() { return null; }\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tpublic <S> A<U> bar() { return null; }\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tpublic <S> A<U> bar() { return null; }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280b5cd0b28a12d7c5a3cfbe2f271313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testAnonymousType4() throws JavaModelException", "signatureAfterChange": " public void testAnonymousType4() throws JavaModelException", "diff": ["-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"  X [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "-\t\t\"    Object [in Object.class [in java.lang [in \"+  getExternalJCLPathString() +\" [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"  X {key=Lp7/X;} [in X.java [in p7 [in src [in TypeHierarchy]]]]\\n\" + ", "+\t\t\"    Object {key=Ljava/lang/Object;} [in Object.class [in java.lang [in \"+ getExternalJCLPathString() + \" [in TypeHierarchy]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ece10281e34b43dbedb74aa68d34e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testStringNoArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3daa6dc7e1e938023942c1960147dcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test052()", "signatureAfterChange": " public void test052()", "diff": ["-\t\"----------\\n\" + ", "-\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\"\tpublic abstract void foo();\\n\" + ", "-\t\"\t                     ^^^^^\\n\" + ", "-\t\"The enum X can only define the abstract method foo() if it also defines enum constants with corresponding implementations\\n\" + ", "-\t\"----------\\n\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tA\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method foo()\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc426734f6bc84df30a0fec75bae5c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/JavaDocTestCase.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test75460()", "signatureAfterChange": " \tpublic void test75460()", "diff": ["-\t\t\t\t\" * objects[0] = new String(&quot;Hallo Welt !!!&quot;);\" + DELIMITER +", "-\t\t\t\t\" * objects[1] = new String(&quot;Test !!!&quot;);\" + DELIMITER +", "-\t\t\t\t\" * objects[2] = new Integer(&quot;1980&quot;);\" + DELIMITER +", "+\t\t\t\t\" * objects[0] = new String(\\\"Hallo Welt !!!\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[1] = new String(\\\"Test !!!\\\");\" + DELIMITER +", "+\t\t\t\t\" * objects[2] = new Integer(\\\"1980\\\");\" + DELIMITER +", "-\t\t\t\t\" * for (int i = 0; i &lt; objs.length; i++) {\" + DELIMITER +", "+\t\t\t\t\" * for (int i = 0; i < objs.length; i++) {\" + DELIMITER +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90fe3ca25ea5b9304fe8f26f257c8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void testBug400905_0002() throws CoreException", "signatureAfterChange": " public void testBug400905_0002() throws CoreException", "diff": ["-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [() ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [()  ->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):Lambda(I).foo() [()->] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b400905/X.java int I b400905.X.bar():Lambda(I).foo() [() ->] EXACT_MATCH\");\t", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [() ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [()  ->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int void b400905.X.main(String[]):<lambda #1>.foo() [()->] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/b400905/X.java int I b400905.X.bar():<lambda #1>.foo() [() ->] EXACT_MATCH\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06ca9bd54f8c9c2a6091c76df27a440", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void test054c()", "signatureAfterChange": " \tpublic void test054c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\t<T1 extends X<T1>> void dupT() {}\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\t<T2 extends X<T2>> Object dupT() {return null;}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f78e145fd92f64c377e6c5a349967dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\""]}], "num": 21703}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8f625031eb5b1b292274c4eaef43326", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565a3bd2afb37c15f090620fdf00c3fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 110, "signatureBeforeChange": " \tpublic void _test0118_while()", "signatureAfterChange": " public void test0408_while()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0118_while() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = null,\\n\" + ", "-\t\t\t\t\"\t\t        u = new Object(),\\n\" + ", "-\t\t\t\t\"\t\t        v = new Object();\\n\" + ", "-\t\t\t\t\"\t\t while (o == null) {\\n\" +", "-\t\t\t\t\"\t\t   if (v == null) {\\n\" +", "-\t\t\t\t\"\t\t     o = new Object();\\n\" +", "-\t\t\t\t\"\t\t   };\\n\" +", "-\t\t\t\t\"\t\t   if (u == null) {\\n\" +", "-\t\t\t\t\"\t\t     v = null;\\n\" +", "-\t\t\t\t\"\t\t   };\\n\" +", "-\t\t\t\t\"\t\t   u = null;\\n\" +", "-\t\t\t\t\"\t\t }\\n\" +", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"  ", "-\t\t);", "-\t}", "+// null analysis", "+public void test0408_while() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = null,\\n\" + ", "+\t\t\t\"           u = new Object(),\\n\" + ", "+\t\t\t\"           v = new Object();\\n\" + ", "+\t\t\t\"    while (o == null) {\\n\" +", "+\t\t\t\"      if (v == null) {\\n\" +", "+\t\t\t\"        o = new Object();\\n\" +", "+\t\t\t\"      };\\n\" +", "+\t\t\t\"      if (u == null) {\\n\" +", "+\t\t\t\"        v = null;\\n\" +", "+\t\t\t\"      };\\n\" +", "+\t\t\t\"      u = null;\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef71d1c75525f313016a6bb6e7f0e030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test0172_try_catch()", "signatureAfterChange": " public void test0552_try_catch()", "diff": ["-\t// null analysis - try/catch", "-\tpublic void test0172_try_catch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t boolean dummy;\\n\" + ", "-\t\t\t\t\"\t void foo() throws Exception {\\n\" + ", "-\t\t\t\t\"\t\t Object o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t\t if (dummy) {\\n\" + ", "-\t\t\t\t\"\t\t\t   o = null;\\n\" + ", "-\t\t\t\t\"\t\t\t   throw new Exception();\\n\" + ", "-\t\t\t\t\"\t\t\t }\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t catch (Exception e) {\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t if (o != null) {\\n\" +", "-\t\t\t\t  // quiet: get out of try either through normal flow, leaves a new", "-\t\t\t\t  // object, or through Exception, leaves a null ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"", "-\t\t);", "-\t}", "+// null analysis - try/catch", "+public void test0552_try_catch() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  boolean dummy;\\n\" + ", "+\t\t\t\"  void foo() throws Exception {\\n\" + ", "+\t\t\t\"    Object o = new Object();\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      if (dummy) {\\n\" + ", "+\t\t\t\"        o = null;\\n\" + ", "+\t\t\t\"        throw new Exception();\\n\" + ", "+\t\t\t\"      }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    catch (Exception e) {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    if (o != null) {\\n\" +", "+\t\t\t  // quiet: get out of try either through normal flow, leaves a new", "+\t\t\t  // object, or through Exception, leaves a null ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}], "num": 3178}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "200423ac72844eabc1b808ee7bcc0147", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "635edd8b5147510340de027c8a5ce390", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "2452619bb5034f0a0ba9b6e9747cd6db77b2eb53", "commitAfterChange": "8d4f2ebabb0e50507cab6ea5f17acab787cfb10b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic static Test buildTestSuiteWithMinimalCompliance(Class evaluationTestClass, int minimalCompliance)", "signatureAfterChange": " \tpublic static Test buildComplianceRegressionTestSetupSuite(Class evaluationTestClass, int minimalCompliance)", "diff": ["+\t */", "+\tpublic static Test buildComplianceRegressionTestSetupSuite(Class evaluationTestClass, int minimalCompliance) {", "+\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "+\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\t\tint level13 = complianceLevels & AbstractCompilerTest.F_1_3;", "+\t\tif (level13 != 0) {", "+\t\t\tif (level13 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_3+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));", "-", "-\tpublic static Test buildTestSuiteWithMinimalCompliance(Class evaluationTestClass, int minimalCompliance) {", "-\t\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "-\t\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "-\t\t\tint level13 = complianceLevels & AbstractCompilerTest.F_1_3;", "-\t\t\tif (level13 != 0) {", "-\t\t\t\tif (level13 < minimalCompliance) {", "-\t\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_3+\"!\");", "-\t\t\t\t} else {", "-\t\t\t\t\tsuite.addTest(buildTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));", "-\t\t\t\t}", "+\t\t}", "+\t\tint level14 = complianceLevels & AbstractCompilerTest.F_1_4;", "+\t\tif (level14 != 0) {", "+\t\t\tif (level14 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_4+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));", "-\t\t\tint level14 = complianceLevels & AbstractCompilerTest.F_1_4;", "-\t\t\tif (level14 != 0) {", "-\t\t\t\tif (level14 < minimalCompliance) {", "-\t\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_4+\"!\");", "-\t\t\t\t} else {", "-\t\t\t\t\tsuite.addTest(buildTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));", "-\t\t\t\t}", "+\t\t}", "+\t\tint level15 = complianceLevels & AbstractCompilerTest.F_1_5;", "+\t\tif (level15 != 0) {", "+\t\t\tif (level15 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_5+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));", "-\t\t\tint level15 = complianceLevels & AbstractCompilerTest.F_1_5;", "-\t\t\tif (level15 != 0) {", "-\t\t\t\tif (level15 < minimalCompliance) {", "-\t\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_5+\"!\");", "-\t\t\t\t} else {", "-\t\t\t\t\tsuite.addTest(buildTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));", "-\t\t\t\t}", "+\t\t}", "+\t\tint level16 = complianceLevels & AbstractCompilerTest.F_1_6;", "+\t\tif (level16 != 0) {", "+\t\t\tif (level16 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_6+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));", "-\t\t\tint level16 = complianceLevels & AbstractCompilerTest.F_1_6;", "-\t\t\tif (level16 != 0) {", "-\t\t\t\tif (level16 < minimalCompliance) {", "-\t\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_6+\"!\");", "-\t\t\t\t} else {", "-\t\t\t\t\tsuite.addTest(buildTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn suite;", "+\t\t}", "+\t\treturn suite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65757c02d33d26931bc4c291438cb9c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "14aaae6e589afc08756540e2b0c7b0b83003376b", "commitAfterChange": "0f2fe4c87f2d34f3b54dd9231d53f8675d730578", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static Test buildComplianceRegressionTestSetupSuite(Class evaluationTestClass, int minimalCompliance)", "signatureAfterChange": " \tpublic static Test buildMinimalComplianceTestSuite(Class evaluationTestClass, int minimalCompliance)", "diff": ["+\t */", "+\tpublic static Test buildMinimalComplianceTestSuite(Class evaluationTestClass, int minimalCompliance) {", "+\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "+\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\t\tint level13 = complianceLevels & AbstractCompilerTest.F_1_3;", "+\t\tif (level13 != 0) {", "+\t\t\tif (level13 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_3+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));", "+\t\t\t}", "+\t\t}", "+\t\tint level14 = complianceLevels & AbstractCompilerTest.F_1_4;", "+\t\tif (level14 != 0) {", "+\t\t\tif (level14 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_4+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));", "+\t\t\t}", "+\t\t}", "+\t\tint level15 = complianceLevels & AbstractCompilerTest.F_1_5;", "+\t\tif (level15 != 0) {", "+\t\t\tif (level15 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_5+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));", "+\t\t\t}", "+\t\t}", "+\t\tint level16 = complianceLevels & AbstractCompilerTest.F_1_6;", "+\t\tif (level16 != 0) {", "+\t\t\tif (level16 < minimalCompliance) {", "+\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_6+\"!\");", "+\t\t\t} else {", "+\t\t\t\tsuite.addTest(buildUniqueComplianceTestSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));", "+\t\t\t}", "+\t\t}", "+\t\treturn suite;", "+\t}", "-\t */", "-\tpublic static Test buildComplianceRegressionTestSetupSuite(Class evaluationTestClass, int minimalCompliance) {", "-\t\tTestSuite suite = new TestSuite(evaluationTestClass.getName());", "-\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "-\t\tint level13 = complianceLevels & AbstractCompilerTest.F_1_3;", "-\t\tif (level13 != 0) {", "-\t\t\tif (level13 < minimalCompliance) {", "-\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_3+\"!\");", "-\t\t\t} else {", "-\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_3));", "-\t\t\t}", "-\t\t}", "-\t\tint level14 = complianceLevels & AbstractCompilerTest.F_1_4;", "-\t\tif (level14 != 0) {", "-\t\t\tif (level14 < minimalCompliance) {", "-\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_4+\"!\");", "-\t\t\t} else {", "-\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_4));", "-\t\t\t}", "-\t\t}", "-\t\tint level15 = complianceLevels & AbstractCompilerTest.F_1_5;", "-\t\tif (level15 != 0) {", "-\t\t\tif (level15 < minimalCompliance) {", "-\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_5+\"!\");", "-\t\t\t} else {", "-\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_5));", "-\t\t\t}", "-\t\t}", "-\t\tint level16 = complianceLevels & AbstractCompilerTest.F_1_6;", "-\t\tif (level16 != 0) {", "-\t\t\tif (level16 < minimalCompliance) {", "-\t\t\t\tSystem.err.println(\"Cannot run \"+evaluationTestClass.getName()+\" at compliance \"+COMPLIANCE_1_6+\"!\");", "-\t\t\t} else {", "-\t\t\t\tsuite.addTest(buildComplianceRegressionSetupSuite(evaluationTestClass, AbstractCompilerTest.COMPLIANCE_1_6));", "-\t\t\t}", "-\t\t}", "-\t\treturn suite;"]}], "num": 54026}
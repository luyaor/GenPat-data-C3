{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cffc560e1261301b045dca38bb1f6a8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0522c6e8e605f2ba06f540b276d6419a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "03525d5333122348a198e2e98f2ec5602bfa2061", "commitAfterChange": "9ca09d5ed1be915e478e63cfb298cfaff9af7f75", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected static Test suite(File inputDir, String profile, Map directories)", "signatureAfterChange": "  protected static Test suite(File inputDir, String profile, Map directories)", "diff": ["+\t\tFile listFile = new File(inputDir.getParentFile(), inputDir.getName()+\".lst\");", "+\t\tBufferedWriter listFileWriter = null;", "-\t\t\tSystem.out.print(\"Get all files from \"+inputDir+\"...\");", "-\t\t\tallFiles = ModelTestsUtil.getAllFiles(inputDir, filter);", "-\t\t\tdirectories.put(inputDir, allFiles);", "-\t\t\tSystem.out.println(\"done\");", "+\t\t\tif (CLEAN || !listFile.exists()) {", "+\t\t\t\t// Get the files list", "+\t\t\t\tSystem.out.print(\"Get all files from \"+inputDir+\"...\");", "+\t\t\t\tallFiles = ModelTestsUtil.getAllFiles(inputDir, filter);", "+\t\t\t\tdirectories.put(inputDir, allFiles);", "+\t\t\t\tSystem.out.println(\"done\");", "+\t\t\t\t// Delete the files list", "+\t\t\t\tif (listFile.exists()) {", "+\t\t\t\t\tlistFile.delete();", "+\t\t\t\t}", "+\t\t\t\t// Initialize the files list writer", "+\t\t\t\tlistFileWriter = new BufferedWriter(new FileWriter(listFile));", "+\t\t\t\tlistFileWriter.write(Integer.toString(allFiles.length));", "+\t\t\t\tlistFileWriter.newLine();", "+\t\t\t} else {", "+\t\t\t\tSystem.out.print(\"Get all files from stored list in \"+listFile.getPath()+\"...\");", "+\t\t\t\tBufferedReader listFileReader = new BufferedReader(new InputStreamReader(new FileInputStream(listFile.getAbsolutePath())));", "+\t\t\t\ttry {", "+\t\t\t\t\t// First line is the number of files", "+\t\t\t\t\tString line = listFileReader.readLine();", "+\t\t\t\t\tint maxFiles = Integer.parseInt(line);", "+\t\t\t\t\t// Following lines are the files path", "+\t\t\t\t\tallFiles = new File[maxFiles];", "+\t\t\t\t\tfor (int i=0; i<maxFiles; i++) {", "+\t\t\t\t\t\tallFiles[i] = new File(inputDir, listFileReader.readLine());", "+\t\t\t\t\t\tif (!allFiles[i].exists()) {", "+\t\t\t\t\t\t\tthrow new IOException(\"Cannot find file \"+allFiles[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcatch (NumberFormatException nfe) {", "+\t\t\t\t\tnfe.printStackTrace();", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t\tioe.printStackTrace();", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tfinally {", "+\t\t\t\t\tlistFileReader.close();", "+\t\t\t\t}", "+\t\t\t}", "-\t\tfor (int i=0; i<maxFiles[0]; i++) {", "-\t\t\tif (CLEAN) {", "-\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, false/*do not compare while cleaning*/));", "-\t\t\t} else {", "-\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, CAN_COMPARE));", "+\t\ttry {", "+\t\t\tfinal int inputDirPathLength = inputDir.getPath().length()+1;", "+\t\t\tfor (int i=0; i<maxFiles[0]; i++) {", "+\t\t\t\tif (CLEAN) {", "+\t\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, false/*do not compare while cleaning*/));", "+\t\t\t\t} else {", "+\t\t\t\t\tsuite.addTest(new FormatterMassiveRegressionTests(inputDir, allFiles[i], i, profiles, CAN_COMPARE));", "+\t\t\t\t}", "+\t\t\t\tif (listFileWriter != null) {", "+\t\t\t\t\tlistFileWriter.write(allFiles[i].getPath().substring(inputDirPathLength));", "+\t\t\t\t\tlistFileWriter.newLine();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (listFileWriter != null) {", "+\t\t\t\tlistFileWriter.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8916635cad388354eb239578c0b2f65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "commitAfterChange": "ec093de0c723a8394ab4c83656f6e94579a11225", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["+", "-\t\tinitVersion();", "-\t\tinitProfiles();", "+\t\t// Init version", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tinitVersion(buffer);", "+\t\t", "+\t\t// Init profiles", "+\t\tinitProfiles(buffer);", "+", "+\t\t// Log date of test", "+\t\tlong start = System.currentTimeMillis();", "+\t\tSimpleDateFormat format = new SimpleDateFormat();", "+\t\tDate now = new Date(start);", "+\t\tbuffer.append(\"Test date : \");", "+\t\tbuffer.append(format.format(now));", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Get input dir", "+\t\tbuffer.append(\"Input dir : \");", "+\t\tbuffer.append(INPUT_DIR);", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Output to console to show startup", "+\t\tString firstBuffer = buffer.toString();", "+\t\tSystem.out.println(firstBuffer);", "+\t\tbuffer.setLength(0);", "+", "+\t\t// Get files from input dir", "-\t\tlong start = System.currentTimeMillis();", "-\t\tSimpleDateFormat format = new SimpleDateFormat();", "-\t\tDate now = new Date(start);", "-\t\tSystem.out.println(\"Test date : \"+format.format(now));", "-\t\tSystem.out.println(\"Input dir : \"+INPUT_DIR);", "-\t\tSystem.out.println(\"            \"+length+\" java files found\");", "-\t\tboolean clean = initDirectories();", "-\t\tSystem.out.println(\"Comparison: \"+CAN_COMPARE);", "+\t\tbuffer.append(\"            \");", "+\t\tbuffer.append(length);", "+\t\tbuffer.append(\" java files found\");", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Init directories", "+\t\tboolean clean = initDirectories(buffer);", "+\t\tbuffer.append(\"Comparison: \"+CAN_COMPARE);", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Write logs", "+\t\tSystem.out.println(buffer.toString());", "+\t\tif (LOG_STREAM != null) {", "+\t\t\tLOG_STREAM.println(firstBuffer);", "+\t\t\tLOG_STREAM.println(buffer.toString());", "+\t\t\tLOG_STREAM.flush();", "+\t\t}", "+\t\t", "+\t\t// Add tests to clean the output directory and rebuild the references", "+\t\t", "+\t\t// Add one test per found file"]}], "num": 53110}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a04efaaade773fe40eca8bd9765de81c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500841da320b16e5dec453f6a8d2fa98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "6e642a34a8b5c85df508f049684a8996f1b8df52", "commitAfterChange": "355460267a070a52738f93cd1e4e0f2039fb0d85", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static final int searchLineNumber(int[] startLineIndexes, int position)", "signatureAfterChange": " \t \tpublic static int getLineNumber(int position, int[] lineEnds, int g, int d)", "diff": ["+\tpublic static int getLineNumber(int position, int[] lineEnds, int g, int d) {", "+\t\tif (lineEnds == null)", "+\t\t\treturn 1;", "+\t\tif (d == -1)", "+\t\t\treturn 1;", "+\t\tint m = g, start;", "+\t\twhile (g <= d) {", "+\t\t\tm = g + (d - g) /2;", "+\t\t\tif (position < (start = lineEnds[m])) {", "+\t\t\t\td = m-1;", "+\t\t\t} else if (position > start) {", "+\t\t\t\tg = m+1;", "+\t\t\t} else {", "+\t\t\t\treturn m + 1;", "+\t\t\t}", "+\t\t}", "+\t\tif (position < lineEnds[m]) {", "+\t\t\treturn m+1;", "+\t\t}", "+\t\treturn m+2;", "+\t}", "-\t */", "-\tpublic static final int searchLineNumber(int[] startLineIndexes, int position) {", "-\t\tint length = startLineIndexes.length;", "-\t\tif (length == 0)", "-\t\t\treturn 1;", "-\t\tint g = 0, d = length - 1;", "-\t\tint m = 0, start;", "-\t\twhile (g <= d) {", "-\t\t\tm = d + (g - d) / 2;", "-\t\t\tif (position < (start = startLineIndexes[m])) {", "-\t\t\t\td = m - 1;", "-\t\t\t} else if (position > start) {", "-\t\t\t\tg = m + 1;", "-\t\t\t} else {", "-\t\t\t\treturn m + 1;", "-\t\t\t}", "-\t\t}", "-\t\tif (position < startLineIndexes[m]) {", "-\t\t\treturn m + 1;", "-\t\t}", "-\t\treturn m + 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69ed43477156c7540b7e2ae1259e3535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "06f23e3e171e1532838272ad3cfed1dbf476c295", "commitAfterChange": "fd83708e4f6c48e5f68b55d90ce222d8723ca6ce", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public boolean isPackage(char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r public boolean isPackage(char[][] compoundName, char[] packageName)", "diff": ["-\tString qualifiedPackageName = new String(CharOperation.concatWith(compoundName, packageName, File.separatorChar));\r", "+\tif (compoundName == null)\r", "+\t\tcompoundName = new char[0][];\r", "+\r", "-\t\tif (classpaths[i].isPackage(qualifiedPackageName))\r", "+\t\tif (classpaths[i].isPackage(compoundName, packageName))\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d581b571c725cc8e1a961fd54670309", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t Binding getArrayBinding(TypeBinding binding, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getArrayBinding(int dim, TypeBinding binding, CompilationUnitResolver resolver)", "diff": ["+\t  */", "+\t Binding getArrayBinding(int dim, TypeBinding binding, CompilationUnitResolver resolver) {", "+\t \tif (binding == null) return null;", "+\t \tif (dim == 0) return binding;", "+\t\treturn resolver.lookupEnvironment.createArrayType(binding, dim);", "+\t}", "-\t  */", "-\t Binding getArrayBinding(TypeBinding binding, CompilationUnitResolver resolver) {", "-\t\tchar[] tokenSource = this.scanner.getTokenSource();", "-\t\tint dimension = tokenSource.length / 2;", "-\t\treturn resolver.lookupEnvironment.createArrayType(binding, dimension);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "729991824f0ee9842f16ae6fc5844c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "30210dace16fbfb20e6910ce9f1394f40ee548a8", "commitAfterChange": "5a6c51c6c96c32c434285845bfd71f9a0c6d8df5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic static Hashtable getOptions()", "signatureAfterChange": " \tpublic static Hashtable getOptions()", "diff": ["-\t\t\t// get preferences set to their default", "-\t\t\tString[] defaultPropertyNames = preferences.defaultPropertyNames();", "-\t\t\tfor (int i = 0; i < defaultPropertyNames.length; i++){", "-\t\t\t\tString propertyName = defaultPropertyNames[i];", "-\t\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\t// initialize preferences to their default", "+\t\t\tIterator iterator = optionNames.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t    String propertyName = (String) iterator.next();", "+\t\t\t    options.put(propertyName, preferences.getDefaultString(propertyName));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77286fc78366c41178dcd404513ebf0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "b68ef63283c9f409824eec0ff2124a6153a7e920", "commitAfterChange": "a1a6d45179940b02582a205f563838be0a6dc046", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\r", "-\tCompilationResult result = new CompilationResult(sourceTypes[0].getFileName(), 1, 1);\r", "+\t// find most enclosing type first (needed when explicit askForType(...) is done \r", "+\t// with a member type (e.g. p.A$B))\r", "+\tISourceType sourceType = sourceTypes[0];\r", "+\twhile (sourceType.getEnclosingType() != null)\r", "+\t\tsourceType = sourceType.getEnclosingType();\r", "+\t\r", "+\t// build corresponding compilation unit\r", "+\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1);\r", "-\t\tSourceTypeConverter.buildCompilationUnit(sourceTypes, false, true, lookupEnvironment.problemReporter, result);\r", "-\r", "+\t\tSourceTypeConverter.buildCompilationUnit(new ISourceType[] {sourceType}, false, true, lookupEnvironment.problemReporter, result);\r", "+\t\t\r", "+\t// build bindings\r", "-\t\tfor (int i = 0, length = sourceTypes.length; i < length; i++) {\r", "-\t\t\trememberWithMemberTypes(sourceTypes[i], unit.types[i].binding);\r", "-\t\t}\r", "-\r", "+\t\trememberWithMemberTypes(sourceType, unit.types[0].binding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aa72a8139ff5130de2100a699fe63c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "1a8cfd60f35f9eb233d4395676551d0101e49aa3", "commitAfterChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["-\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT ", "-\t\t\tPROBING_SCANNER = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t\t// scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT", "+\t\t\t// do not tokenize white spaces to get single comments even with spaces before...", "+\t\t\tPROBING_SCANNER = new Scanner(true, false/*do not tokenize whitespaces*/, false/*nls*/, ClassFileConstants.JDK1_6, ClassFileConstants.JDK1_6, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tPROBING_SCANNER.resetTo(offset, offset + length);", "+\t\tPROBING_SCANNER.resetTo(offset, offset + length - 1);", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getNextToken() == TerminalTokens.TokenNameEOF) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1e314c96060a28960ab7f7aa08b3925", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "c1a4eec7badf25da1ca6cc1d039b5627888514b8", "commitAfterChange": "2d75cef028da9a8fe8c9804711f5a598b2019a3c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["+\tint index = sourceFolders.length;\r", "+\tthis.hasSeparateOutputFolder = index > 0; // skip it if it doesn't have any source folders\r", "-\tthis.hasSeparateOutputFolder = !outputPath.equals(javaBuilder.currentProject.getFullPath());\r", "-\tfor (int i = 0, length = sourceFolders.length; hasSeparateOutputFolder && i < length; i++)\r", "-\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[i].getFullPath());\r", "+\twhile (this.hasSeparateOutputFolder && --index >= 0)\r", "+\t\tthis.hasSeparateOutputFolder = !outputPath.equals(sourceFolders[index].getFullPath());\r"]}], "num": 40715}
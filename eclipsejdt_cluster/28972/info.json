{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c94052c09691ef9b99c0bcca6df91bc5", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1590605cfc8d594e77cf96125138a1a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return false;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\tif (!field.isField()) return false; // ignore field initializers\r", "-\t\r", "-\t// field name\r", "-\tif (!this.matchesName(this.name, field.name))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tFieldBinding binding = field.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\r", "-\t// field type\r", "-\tif (this.typeQualification == null) {\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn false;\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(field.binding);\r", "+\t} else {\r", "+\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "+\t\t\r", "+\t\t// field name\r", "+\t\tif (!this.matchesName(this.name, field.name))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// field type\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ff98cf9a1547755789947a00b31c1b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return false;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\tif (!field.isField()) return false; // ignore field initializers\r", "-\t\r", "-\t// field name\r", "-\tif (!this.matchesName(this.name, field.name))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tFieldBinding binding = field.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\r", "-\t// field type\r", "-\tif (this.typeQualification == null) {\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn false;\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(field.binding);\r", "+\t} else {\r", "+\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "+\t\t\r", "+\t\t// field name\r", "+\t\tif (!this.matchesName(this.name, field.name))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// field type\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427e07dcc58998ef1e26d8ade06892b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return false;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\tif (!field.isField()) return false; // ignore field initializers\r", "-\t\r", "-\t// field name\r", "-\tif (!this.matchesName(this.name, field.name))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tFieldBinding binding = field.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\r", "-\t// field type\r", "-\tif (this.typeQualification == null) {\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn false;\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(field.binding);\r", "+\t} else {\r", "+\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "+\t\t\r", "+\t\t// field name\r", "+\t\tif (!this.matchesName(this.name, field.name))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// field type\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5f4bbbbfe98b4f3273fb3d9f41bee2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return false;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\tif (!field.isField()) return false; // ignore field initializers\r", "-\t\r", "-\t// field name\r", "-\tif (!this.matchesName(this.name, field.name))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tFieldBinding binding = field.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\r", "-\t// field type\r", "-\tif (this.typeQualification == null) {\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn false;\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(field.binding);\r", "+\t} else {\r", "+\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "+\t\t\r", "+\t\t// field name\r", "+\t\tif (!this.matchesName(this.name, field.name))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// field type\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7647c9123435cbe94323e0f8eb3ec92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return false;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\tif (!field.isField()) return false; // ignore field initializers\r", "-\t\r", "-\t// field name\r", "-\tif (!this.matchesName(this.name, field.name))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tFieldBinding binding = field.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "-\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\r", "-\t// field type\r", "-\tif (this.typeQualification == null) {\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn false;\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(field.binding);\r", "+\t} else {\r", "+\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "+\t\t\r", "+\t\t// field name\r", "+\t\tif (!this.matchesName(this.name, field.name))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// field type\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}], "num": 28972}
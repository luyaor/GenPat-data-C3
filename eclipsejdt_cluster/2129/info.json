{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caadb67d7443a318f721b756328e3b2e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90cdff781c26d9879af6cccb51052ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-\t", "+", "-\t", "+", "-\tIEntryResult[] entries = (IEntryResult[])this.entryResults.get(input);", "+\tIEntryResult[] entries = (IEntryResult[]) this.entryResults.get(input);", "-\t\tif (entries == null) {", "+\t\tif (entries == null)", "-\t\t}", "-\tnextEntry: for (int i = 0, max = entries.length; i < max; i++){", "+\tnextEntry: for (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\tif (word[length+slash] != '/') continue; ", "+\t\t\tif (word[length + slash] != '/') continue; ", "-\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\tchar value = word[j+slash];", "-\t\t\t\tif (value != simpleName[j]) continue nextEntry;", "-\t\t\t}", "+\t\t\tfor (int j = 0; j < length; j++)", "+\t\t\t\tif (word[j + slash] != simpleName[j]) continue nextEntry;", "-\t\t", "+", "-\t\tthis.decodeIndexEntry(entry);", "+\t\tdecodeIndexEntry(entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61b47a605e0670973b6adebaf41fe7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "bc1ab2814efa96b0090d7fa3a6e0df572ad09b84", "commitAfterChange": "812814d4d7336d2de6b5ef94acb359cf36b0dc37", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic final static boolean isExcluded(IResource resource, char[][] exclusionPatterns)", "signatureAfterChange": " \tpublic final static boolean isExcluded(IResource resource, char[][] exclusionPatterns)", "diff": ["-\t\tfor (int i = 0, length = exclusionPatterns.length; i < length; i++) {", "-\t\t\tchar[] exclusionPattern = exclusionPatterns[i];", "-\t\t\tchar[] path = resource.getFullPath().toString().toCharArray();", "-\t\t\tif (CharOperation.pathMatch(exclusionPattern, path, true, '/')) {", "+\t\tchar[] path = resource.getFullPath().toString().toCharArray();", "+\t\tfor (int i = 0, length = exclusionPatterns.length; i < length; i++)", "+\t\t\tif (CharOperation.pathMatch(exclusionPatterns[i], path, true, '/'))", "-\t\t\t}", "-\t\t}"]}], "num": 2129}
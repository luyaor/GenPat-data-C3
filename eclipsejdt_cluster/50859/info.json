{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d02ebd5c197f42735710c9a0a20118ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c254ffd84f0c573b36ec3ec27ea491e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "028715233e83730a9b58b487ee5c57b64348364c", "commitAfterChange": "76623358e8f03500966e9b9a0c7cbdeda3393726", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tprivate void setJavaCommand( \t\tIProjectDescription description, \t\tICommand newCommand) \t\tthrows CoreException", "signatureAfterChange": " \tprivate void setJavaCommand( \t\tIProjectDescription description, \t\tICommand newCommand) \t\tthrows CoreException", "diff": ["-\t\tICommand[] oldCommands = description.getBuildSpec();", "-\t\tICommand oldJavaCommand = getJavaCommand(description);", "+\t\tICommand[] oldBuildSpec = description.getBuildSpec();", "+\t\tint oldJavaCommandIndex = getJavaCommandIndex(oldBuildSpec);", "-\t\tif (oldJavaCommand == null) {", "+\t\tif (oldJavaCommandIndex == -1) {", "-\t\t\tnewCommands = new ICommand[oldCommands.length + 1];", "-\t\t\tSystem.arraycopy(oldCommands, 0, newCommands, 1, oldCommands.length);", "+\t\t\tnewCommands = new ICommand[oldBuildSpec.length + 1];", "+\t\t\tSystem.arraycopy(oldBuildSpec, 0, newCommands, 1, oldBuildSpec.length);", "-\t\t\tfor (int i = 0, max = oldCommands.length; i < max; i++) {", "-\t\t\t\tif (oldCommands[i] == oldJavaCommand) {", "-\t\t\t\t\toldCommands[i] = newCommand;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewCommands = oldCommands;", "+\t\t    oldBuildSpec[oldJavaCommandIndex] = newCommand;", "+\t\t\tnewCommands = oldBuildSpec;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d25e4fe12a1791590b067b8186f99dcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 176, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-\tif (scanner.wasNonExternalizedStringLiteral) {", "-\t\tStringLiteral[] literals = this.scanner.nonNLSStrings;", "-\t\t// could not reproduce, but this is the only NPE", "-\t\t// added preventive null check see PR 9035", "-\t\tif (literals != null) {", "-\t\t\tfor (int i = 0, max = literals.length; i < max; i++) {", "-\t\t\t\tproblemReporter().nonExternalizedStringLiteral(literals[i]);", "-\t\t\t}", "-\t\t}", "-\t\tscanner.wasNonExternalizedStringLiteral = false;", "-\t}", "+\tcheckNonExternalizedStringLiteral();"]}], "num": 50859}
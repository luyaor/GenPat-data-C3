{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f7bf36cc84c35611513cf5309b9fcb1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c88bb9e3735a98ba8cd4e82e2890e3a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "59f134d776625487d5c6b62a9862cfb00a070d3e", "commitAfterChange": "96b4864be18ed8951f75fa1c52f7e975191f2b07", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\tif (typeBinding.isInterface()) {", "+\t\t\t", "+\t\t\tif(typeBinding instanceof ProblemReferenceBinding) {", "+\t\t\t\ttypeBinding = ((ProblemReferenceBinding) typeBinding).original;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\tif (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "-\t\t\t\t} else {", "-\t\t\t\t\tchar[] genericTypeSignature = null;", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "-\t\t\t\t\t}", "+\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "+\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t}", "+\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "+\t\t\t} else {", "+\t\t\t\tthis.noProposal = false;", "+\t\t\t\t", "+\t\t\t\tchar[] genericTypeSignature = null;", "+\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "+\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "+\t\t\t\t}", "+\t\t\t\tif (typeBinding.isAnnotationType()) {", "+\t\t\t\t\tthis.requestor.acceptAnnotation(", "+\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "+\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tgenericTypeSignature,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t} else if (typeBinding.isInterface()) {", "-\t\t\t\t}", "-\t\t\t} else if(typeBinding instanceof ProblemReferenceBinding){", "-\t\t\t\tReferenceBinding original = ((ProblemReferenceBinding) typeBinding).original;", "-\t\t\t\tif(original == null) return;", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif (isLocal(original) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\tif(original.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(original);", "-\t\t\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(original);", "-\t\t\t\t} else {", "-\t\t\t\t\tchar[] genericTypeSignature = null;", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\toriginal.qualifiedPackageName(),", "-\t\t\t\t\t\toriginal.qualifiedSourceName(),", "+\t\t\t\t} else if (typeBinding.isEnum()) {", "+\t\t\t\t\tthis.requestor.acceptEnum(", "+\t\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "+\t\t\t\t\t\ttypeBinding.qualifiedSourceName(),", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif (isLocal(typeBinding) && this.requestor instanceof SelectionRequestor) {", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "-\t\t\t\t\tchar[] genericTypeSignature = null;", "-\t\t\t\t\tif(typeBinding.isParameterizedType() || typeBinding.isRawType()) {", "-\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "-\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "-\t\t\t\t\t}", "+\t\t\t\t\tthis.noProposal = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa57cf3fdc9b27ae4a1abf7639aef6a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void selectFrom(ASTNode node, Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\tprivate void selectFrom(ASTNode node, Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {", "+\tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {", "-\t\t\tif(!checkQualification(", "-\t\t\t\t\tnode,", "-\t\t\t\t\ttypeBinding.qualifiedPackageName(),", "-\t\t\t\t\ttypeBinding.qualifiedSourceName())) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType((SourceTypeBinding)typeBinding);", "+\t\t\t\t\tif(typeBinding.isParameterizedType()) {", "+\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\t}", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "+\t\t\t\t\tchar[] genericTypeSignature = null;", "+\t\t\t\t\tif(typeBinding.isParameterizedType()) {", "+\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "+\t\t\t\t\t}", "-\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tgenericTypeSignature,", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType((SourceTypeBinding)original);", "+\t\t\t\t\tif(original.isParameterizedType()) {", "+\t\t\t\t\t\tcompleteLocalTypes(original);", "+\t\t\t\t\t}", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(original);", "+\t\t\t\t\tchar[] genericTypeSignature = null;", "+\t\t\t\t\tif(typeBinding.isParameterizedType()) {", "+\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "+\t\t\t\t\t}", "-\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tgenericTypeSignature,", "-\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType((SourceTypeBinding)typeBinding);", "+\t\t\t\t\tif(typeBinding.isParameterizedType()) {", "+\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\t}", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalType(typeBinding);", "+\t\t\t\t\tchar[] genericTypeSignature = null;", "+\t\t\t\t\tif(typeBinding.isParameterizedType()) {", "+\t\t\t\t\t\tcompleteLocalTypes(typeBinding);", "+\t\t\t\t\t\tgenericTypeSignature = typeBinding.computeUniqueKey();", "+\t\t\t\t\t}", "-\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tgenericTypeSignature,", "-\t\t\t\t\t\t\tselectFrom(null, ((LocalVariableBinding) binding).type, parsedUnit, false);", "+\t\t\t\t\t\t\tselectFrom(((LocalVariableBinding) binding).type, parsedUnit, false);", "-\t\t\t\t\t\t\tselectFrom(node, ((ArrayBinding) binding).leafComponentType, parsedUnit, false);", "+\t\t\t\t\t\t\tselectFrom(((ArrayBinding) binding).leafComponentType, parsedUnit, false);"]}], "num": 72858}
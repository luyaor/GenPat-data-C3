{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d570c5114d4ed5c4407ad760aed848c9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea989e420bf950cb83f1b3f475475ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tconstant = NotAConstant;", "-\tthis.resolvedType = type.resolveType(scope); // will check for null after args are resolved", "+\tthis.constant = NotAConstant;", "+\tthis.resolvedType = this.type.resolveType(scope); // will check for null after args are resolved", "-\tif (arguments != null) {", "+\tif (this.arguments != null) {", "-\t\tint length = arguments.length;", "+\t\tint length = this.arguments.length;", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null) {", "+\t\t\tif ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null) {", "-\t\tscope.problemReporter().cannotInstantiate(type, this.resolvedType);", "+\t\tscope.problemReporter().cannotInstantiate(this.type, this.resolvedType);", "-\tif (!(binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {", "-\t\tif (binding instanceof ProblemMethodBinding", "-\t\t\t&& ((ProblemMethodBinding) binding).problemId() == NotVisible) {", "+\tif (!(this.binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemMethodBinding", "+\t\t\t&& ((ProblemMethodBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\tif (delegateThis == null) {", "-\t\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\tif (this.delegateThis == null) {", "+\t\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)delegateThis.type, argumentTypes, this);", "+\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)this.delegateThis.type, argumentTypes, this);", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\t\tbinding = privateBinding;", "+\t\t\t\tthis.binding = privateBinding;", "-\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\tif (arguments != null) {", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "+\tif (this.arguments != null) {", "+\t\tfor (int i = 0; i < this.arguments.length; i++) {", "+\t\t\tthis.arguments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e2a7ec468ff2dcc7b7ee0fd5a56983", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\treceiverType = receiver.resolveType(scope);", "-\tif (receiverType == null){", "-\t\tconstant = NotAConstant;", "+\tthis.receiverType = this.receiver.resolveType(scope);", "+\tif (this.receiverType == null){", "+\t\tthis.constant = NotAConstant;", "-\tthis.codegenBinding = this.binding = scope.getField(receiverType, token, this);", "-\tFieldBinding firstAttempt = binding;", "+\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, this.token, this);", "+\tFieldBinding firstAttempt = this.binding;", "-\tif (!binding.isValidBinding()) {", "-\t\tif (binding instanceof ProblemFieldBinding", "-\t\t\t&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {", "+\tif (!this.binding.isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemFieldBinding", "+\t\t\t&& ((ProblemFieldBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "-\t\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "+\t\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\t\t\t\tthis.constant = NotAConstant;", "+\t\t\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, token, this);", "+\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.token, this);", "-\tif (!binding.isValidBinding()) {", "-\t\tconstant = NotAConstant;", "+\tif (!this.binding.isValidBinding()) {", "+\t\tthis.constant = NotAConstant;", "-\t\tscope.problemReporter().invalidField(this, receiverType);", "+\t\tscope.problemReporter().invalidField(this, this.receiverType);", "-\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "-\t\tscope.problemReporter().deprecatedField(binding, this);", "+\tif (isFieldUseDeprecated(this.binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "+\t\tscope.problemReporter().deprecatedField(this.binding, this);", "-\tconstant = FieldReference.getConstantFor(binding, this, receiver.isImplicitThis(), scope);", "-\tif (!receiver.isThis()) {", "-\t\tconstant = NotAConstant;", "+\tthis.constant = FieldReference.getConstantFor(this.binding, this, this.receiver.isImplicitThis(), scope);", "+\tif (!this.receiver.isThis()) {", "+\t\tthis.constant = NotAConstant;", "-\treturn this.resolvedType = binding.type;", "+\treturn this.resolvedType = this.binding.type;"]}], "num": 58268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "949c5256ba4a2f3509eee1e537ba1565", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092b80f8c80499335d8701668c33a6fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "9e52c15d15d394b53153c5ea38c3a83d68121d6a", "commitAfterChange": "9951b7a54ba18cc36a88513505c20a6b6559265f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic String rootID()", "signatureAfterChange": "\r \tpublic String rootID()", "diff": ["-\t\tbuffer.append(JavaProject.kindToString(this.entryKind));\r", "-\t\tbuffer.append(']');\r", "-\t\tbuffer.append(this.path);\r", "-\t\treturn buffer.toString();\r", "+\t\tswitch(this.entryKind){\r", "+\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "+\t\t\t\treturn \"[LIB]\"+this.path;  //$NON-NLS-1$\r", "+\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+\t\t\t\treturn \"[PRJ]\"+this.path;  //$NON-NLS-1$\r", "+\t\t\tcase IClasspathEntry.CPE_SOURCE :\r", "+\t\t\t\treturn \"[SRC]\"+this.path;  //$NON-NLS-1$\r", "+\t\t\tcase IClasspathEntry.CPE_VARIABLE :\r", "+\t\t\t\treturn \"[VAR]\"+this.path;  //$NON-NLS-1$\r", "+\t\t}\r", "+\t\treturn \"\";  //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "866a96d7113fec092ce0b82e46c3f687", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "signatureAfterChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "diff": ["-\tif (this.isTypeVariable() || otherArgument.isTypeVariable())", "-\t\treturn true;", "-\tif (this.isWildcard()) {", "-\t\tif (!otherArgument.isWildcard()) {", "-\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "-\t\t\tswitch(wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "-\t\t\t\tcase Wildcard. SUPER :", "-\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "-\t\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\tdefault:", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t} else if (otherArgument.isWildcard()) {", "-\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\tswitch(otherWildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\treturn this.isCompatibleWith(otherWildcard.bound);", "-\t\t\tcase Wildcard. SUPER :", "-\t\t\t\treturn otherWildcard.bound.isCompatibleWith(this);", "-\t\t\tcase Wildcard.UNBOUND :", "-\t\t\tdefault:", "-\t\t\t\treturn true;", "-\t\t}", "-\t}", "-\tTypeBinding lowerBound1 = null;", "-\tTypeBinding upperBound1 = null;", "-\tWildcardBinding wildcard = (WildcardBinding) this;", "-\tswitch(wildcard.boundKind) {", "-\t\tcase Wildcard.EXTENDS :", "-\t\t\tupperBound1 = wildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard. SUPER :", "-\t\t\tlowerBound1 = wildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard.UNBOUND :", "-\t}", "-", "-\tTypeBinding lowerBound2 = null;", "-\tTypeBinding upperBound2 = null;", "-\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\tswitch(otherWildcard.boundKind) {", "-\t\tcase Wildcard.EXTENDS :", "-\t\t\tupperBound2 = otherWildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard. SUPER :", "-\t\t\tlowerBound2 = otherWildcard.bound;", "-\t\t\tbreak;", "-\t\tcase Wildcard.UNBOUND :", "-\t}", "-\tif (lowerBound1 != null) {", "-\t\tif (lowerBound2 != null) {", "-\t\t\treturn true; // Object could always be a candidate", "+\tswitch (kind()) {", "+\t\t", "+\t\t// TYPE_PARAM & ANY TYPE", "+\t\tcase Binding.TYPE_PARAMETER :   ", "+\t\t\treturn true;", "-\t\t} else if (upperBound2 != null) {", "-\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t} else {", "-\t\t\treturn true;", "-\t\t}", "-\t} else if (upperBound1 != null) {", "-\t\tif (lowerBound2 != null) {", "-\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "-", "-\t\t} else if (upperBound2 != null) {", "-\t\t\tif (upperBound1.isInterface()) {", "-\t\t\t\tif (upperBound2.isInterface())", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tswitch (otherArgument.kind()) {", "+\t\t\t\t", "+\t\t\t\t// WILDCARD & TYPE_PARAM", "+\t\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\tif (upperBound2.isArrayType() || ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound2).isFinal())) {", "-\t\t\t\t\treturn upperBound2.isCompatibleWith(upperBound1);", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t} else if (upperBound2.isInterface()) {", "-\t\t\t\tif (upperBound1.isArrayType() || ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound1).isFinal())) {", "-\t\t\t\t\treturn upperBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t// WILDCARD & WILDCARD", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\tTypeBinding lowerBound1 = null;", "+\t\t\t\t\tTypeBinding upperBound1 = null;", "+\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tupperBound1 = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\tlowerBound1 = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t\tTypeBinding lowerBound2 = null;", "+\t\t\t\t\tTypeBinding upperBound2 = null;", "+\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tupperBound2 = otherWildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t}", "+\t\t\t\t\tif (lowerBound1 != null) {", "+\t\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\t\treturn true; // Object could always be a candidate", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (upperBound1 != null) {", "+\t\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "+\t\t\t\t", "+\t\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\t\tif (upperBound1.isInterface()) {", "+\t\t\t\t\t\t\t\tif (upperBound2.isInterface())", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\tif (upperBound2.isArrayType() || ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound2).isFinal())) {", "+\t\t\t\t\t\t\t\t\treturn upperBound2.isCompatibleWith(upperBound1);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t} else if (upperBound2.isInterface()) {", "+\t\t\t\t\t\t\t\tif (upperBound1.isArrayType() || ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding)upperBound1).isFinal())) {", "+\t\t\t\t\t\t\t\t\treturn upperBound1.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t// WILDCARD & OTHER TYPE", "+\t\t\t\tdefault :", "+\t\t\t\t\t wildcard = (WildcardBinding) this;", "+\t\t\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "-\t\t\treturn true;", "-\t\t} else {", "-\t\t\treturn true;", "-\t\t}", "-\t} else {", "-\t\treturn true;", "+\t\t\t", "+\t\tdefault:", "+\t\t\tswitch (otherArgument.kind()) {", "+", "+\t\t\t\t// OTHER TYPE & TYPE_PARAM", "+\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\treturn true;", "+", "+\t\t\t\t// OTHER TYPE & WILDCARD", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\treturn this.isCompatibleWith(otherWildcard.bound);", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\treturn otherWildcard.bound.isCompatibleWith(this);", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}\t\t\t\t\t", "+", "+\t\t\t\t// OTHER TYPE & OTHER TYPE", "+\t\t\t\tdefault :", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}], "num": 31209}
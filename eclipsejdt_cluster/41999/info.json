{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c60e70b667f3771dae416b8cc47a932a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37217fe46e81e1e3fd667fc5dcda170", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "c4fa4d272fd0c5fb7e1db44c8cef0ea47f3df504", "commitAfterChange": "ead0ac8b76ebb49296393f52adae3ef70f089242", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t\t\t// arity check", "-\t\t\tTypeVariableBinding[] refTypeVariables = resolvedType.typeVariables();", "-\t\t\tif (refTypeVariables == Binding.NO_TYPE_VARIABLES) { // check generic", "-\t\t\t\t// Below 1.5, we should have already complained about the use of type parameters.", "-\t\t\t\tboolean isCompliant15 = this.environment.globalOptions.originalSourceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\t\tif (isCompliant15 && (resolvedType.tagBits & TagBits.HasMissingType) == 0) {", "-\t\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "-\t\t\t\t}", "-\t\t\t\treturn this;", "-\t\t\t} else if (argLength != refTypeVariables.length) { // check arity", "-\t\t\t\tthis.environment.problemReporter.incorrectArityForParameterizedType(null, resolvedType, this.arguments);", "-\t\t\t\treturn this; // cannot reach here as AbortCompilation is thrown", "-\t\t\t}", "+\t\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=186565, Removed generic check", "+\t\t\t   and arity check since we are dealing with binary types here and the fact that", "+\t\t\t   the compiler produced class files for these types at all is proof positive that", "+\t\t\t   the generic check and the arity check passed in the build environment that produced", "+\t\t\t   these class files. Otherwise we don't handle mixed 1.5 and 1.4 projects correctly.", "+\t\t\t   Just as with bounds check below, incremental build will propagate the change and", "+\t\t\t   detect problems in source.", "+\t\t\t */", "+\t\t\t", "+//\t\t\t// arity check", "+//\t\t\tTypeVariableBinding[] refTypeVariables = resolvedType.typeVariables();", "+//\t\t\tif (refTypeVariables == Binding.NO_TYPE_VARIABLES) { // check generic", "+//\t\t\t\t// Below 1.5, we should have already complained about the use of type parameters.", "+//\t\t\t\tboolean isCompliant15 = this.environment.globalOptions.originalSourceLevel >= ClassFileConstants.JDK1_5;", "+//\t\t\t\tif (isCompliant15 && (resolvedType.tagBits & TagBits.HasMissingType) == 0) {", "+//\t\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "+//\t\t\t\t}", "+//\t\t\t\treturn this;", "+//\t\t\t} else if (argLength != refTypeVariables.length) { // check arity", "+//\t\t\t\tthis.environment.problemReporter.incorrectArityForParameterizedType(null, resolvedType, this.arguments);", "+//\t\t\t\treturn this; // cannot reach here as AbortCompilation is thrown", "+//\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed0d951391a6927474191182a8e88f23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t}", "-\t\tif (this.expression.nullStatus(flowInfo) != FlowInfo.NON_NULL) {", "-\t\t\t// if we can't prove non-null check against declared null-ness of the enclosing method:", "-\t\t\tAbstractMethodDeclaration referenceMethod = currentScope.methodScope().referenceMethod();", "-\t\t\tif (referenceMethod != null) {", "-\t\t\t\tMethodBinding method = referenceMethod.binding;", "-\t\t\t\tif ((method.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t\t\t\t\tchar[][] annotationName = currentScope.environment().globalOptions.nonNullAnnotationName;", "-\t\t\t\t\tcurrentScope.problemReporter().possiblyNullFromNonNullMethod(this, this.expression.nullStatus(flowInfo), ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t annotationName[annotationName.length-1]);", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6cb3f0501e1bc747d3d4025f86620d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic String debugName()", "signatureAfterChange": " \tpublic String debugName()", "diff": ["-\t    if (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "-\t    \t// restore applied null annotation from tagBits:", "-\t\t    if ((this.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t\t    \tchar[][] nonNullAnnotationName = environment().getNonNullAnnotationName();", "-\t\t\t\tnameBuffer.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]).append(' ');", "-\t\t    } else if ((this.tagBits & TagBits.AnnotationNullable) != 0) {", "-\t\t    \tchar[][] nullableAnnotationName = environment().getNullableAnnotationName();", "-\t\t\t\tnameBuffer.append('@').append(nullableAnnotationName[nullableAnnotationName.length-1]).append(' ');", "-\t\t    }", "-\t    }", "+\t    appendNullAnnotation(nameBuffer);"]}], "num": 41999}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8fd352c0bde93dda3ca53900d8b23fc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ee65378634060f79831446eeca381c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "e220e880a69da1e85c42fe1dcced26582c72c0de", "commitAfterChange": "c7371df70a444e50c08430dc41d164acf6d1e998", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public AnnotationBinding[][] getParameterAnnotations()", "signatureAfterChange": " public AnnotationBinding[][] getParameterAnnotations()", "diff": ["-\tif (allParameterAnnotations == null && (this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "+\tif (allParameterAnnotations == null) {", "-\t\t// forward reference to method, where param annotations have not yet been associated to method", "-\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "-\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "-\t\t\tif (sourceType.scope != null) {", "-\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "-\t\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "-\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "+\t\tif ((this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "+\t\t\t// forward reference to method, where param annotations have not yet been associated to method", "+\t\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "+\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "+\t\t\t\tif (sourceType.scope != null) {", "+\t\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "+\t\t\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "+\t\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "-\t\t\t\tthis.setParameterAnnotations(allParameterAnnotations);", "+\t\tthis.setParameterAnnotations(allParameterAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47622a6b950b691b891002ceb9f624f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "a447c6e04da7419e9c341882312d341d2a7be3fd", "commitAfterChange": "acc6e9dd91bf6b774847a32dd6da3bb481276405", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void addConstantFieldsMask(UnconditionalFlowInfo other)", "signatureAfterChange": " public void addConstantFieldsMask(UnconditionalFlowInfo other)", "diff": ["-\t    \tif (otherLen >= (oldLength = this.extraConstantFieldMask.length)) {", "+\t    \tif (otherLen > (oldLength = this.extraConstantFieldMask.length)) {", "-\t\t\t}", "-\t    \tfor (int i = 0; i < this.extraConstantFieldMask.length; i++) {", "-\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "+\t\t\t\tfor (int i = 0; i < oldLength; i++) {", "+\t\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < otherLen; i++) {", "+\t\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "+\t\t\t\t}"]}], "num": 70067}
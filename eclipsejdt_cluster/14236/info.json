{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3a4b66ced0264bf4cf4ddffd2f1ceb2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bfc7efba5cac514cc63033241b4cba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\tMethodBinding[] resolvedMethods = this.methods;", "-\t\t\t\tthis.methods[i] = null; // unable to resolve parameters", "+\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tresolvedMethods[i] = null; // unable to resolve parameters", "-\t\t\tMethodBinding method = this.methods[i];", "+\t\t\tMethodBinding method = resolvedMethods[i];", "-\t\t\t\tMethodBinding method2 = this.methods[j];", "+\t\t\t\tMethodBinding method2 = resolvedMethods[j];", "-\t\t\t\t\t\tthis.methods[i] = null;", "+\t\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\tresolvedMethods[i] = null;", "-\t\t\t\t\tthis.methods[j] = null;", "+\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\tresolvedMethods[j] = null;", "-\t\t\t\tmethod.sourceMethod().binding = null;", "-\t\t\t\tthis.methods[i] = null;", "+\t\t\t\tmethodDecl = method.sourceMethod();", "+\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\tmethodDecl.binding = null;", "+\t\t\t\t}", "+\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tresolvedMethods[i] = null;", "-\t\t\tint newSize = this.methods.length - failed;", "+\t\t\tint newSize = resolvedMethods.length - failed;", "-\t\t\t\tfor (int i = 0, j = 0, length = this.methods.length; i < length; i++)", "-\t\t\t\t\tif (this.methods[i] != null)", "-\t\t\t\t\t\tnewMethods[j++] = this.methods[i];", "+\t\t\t\tfor (int i = 0, j = 0, length = resolvedMethods.length; i < length; i++)", "+\t\t\t\t\tif (resolvedMethods[i] != null)", "+\t\t\t\t\t\tnewMethods[j++] = resolvedMethods[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c9674093069103e0ee33f73211fb5c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "484bb49f20ab3dfdc1bd0aad8e6eff3ac06b3aff", "commitAfterChange": "cfd501694f5288c5b2d25d4e0376aabc070087d8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\t\t\t\tif (methodDecl == null) {", "+\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost & may still be null if method is special", "+\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) { // ensure its a valid user defined method", "+\t\t\t\t\t\tif (isEnumSpecialMethod)", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateEnumSpecialMethod(this, methodDecl);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tthis.scope.problemReporter().duplicateMethodInType(this, methodDecl, method.areParametersEqual(method2));", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\tif (isEnumSpecialMethod) {", "+\t\t\t\t\tif (isEnumSpecialMethod)", "-\t\t\t\t\t} else {", "+\t\t\t\t\telse", "-\t\t\t\t\t}"]}], "num": 14236}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e87d3c9cb6739e19d93ce22ff8bbe279", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efd3f7bb532c8b22b4050d4663c9ad8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "dc5e73f6ffdfbb2bb9fa45c265cb2df1a4eade24", "commitAfterChange": "647ef1f5fbd22561d52237b6837eee4e116eb337", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "signatureAfterChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "diff": ["-\t\t&& inheritedMethod.returnType == existingMethod.returnType", "+\t\t&& (inheritedMethod.returnType == existingMethod.returnType ||", "+\t\t\t\tinheritedMethod.returnType.isCompatibleWith(inheritedMethod.returnType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb8df0f08dedb4fe05f68e3dd304437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "8f906774856d3fb8be48e8c1fa76527878a0f865", "commitAfterChange": "ecf6de5abf72d6130a58d26da044687c85216430", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "signatureAfterChange": " public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "diff": ["-\t\t\tif (targetMethod.returnType != accessMethod.returnType)", "-\t\t\t\tthis.checkcast(accessMethod.returnType); // for bridge methods", "+\t\t\tTypeBinding accessErasure = accessMethod.returnType.erasure();", "+\t\t\tif (!targetMethod.returnType.isCompatibleWith(accessErasure))", "+\t\t\t\tthis.checkcast(accessErasure); // for bridge methods"]}], "num": 25118}
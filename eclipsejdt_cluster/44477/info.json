{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38bbbcdb2178ec241faca6073a29480f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f41c767e8c1425d33dba2ee8066d300", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f28c28de6ed3d2e9e475bca36caf25c219a92533", "commitAfterChange": "29530aea390a72e4225d01267051bcdef2bb5cd8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tif (block != null", "-\t\t\t\t\t&& (Modifier.isAbstract(methodDecl.getModifiers())", "-\t\t\t\t\t\t\t|| Modifier.isNative(methodDecl.getModifiers())", "-\t\t\t\t\t\t\t|| isInterface)) {", "-\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\tif (block != null) {", "+\t\t\t\tif ((methodDeclaration.modifiers & (ClassFileConstants.AccAbstract | ClassFileConstants.AccNative)) != 0", "+\t\t\t\t\t\t|| (isInterface && (this.ast.apiLevel < AST.JLS8 ||", "+\t\t\t\t\t\t\t(methodDeclaration.modifiers & (ClassFileConstants.AccStatic | ExtraCompilerModifiers.AccDefaultMethod)) == 0))) {", "+\t\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc2475d48a06b538f45216e03bc8f90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "commitAfterChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t// by grammatical construction, interface methods are always abstract", "+\t\t\t\tbreak;", "+\t\t\tcase TypeDeclaration.INTERFACE_DECL :", "+\t\t\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8", "+\t\t\t\t\t\t&& (this.modifiers & (ExtraCompilerModifiers.AccSemicolonBody | ClassFileConstants.AccAbstract)) == ExtraCompilerModifiers.AccSemicolonBody) {", "+\t\t\t\t\tif ((this.modifiers & (ClassFileConstants.AccStatic | ExtraCompilerModifiers.AccDefaultMethod)) != 0) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().methodNeedBody(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}], "num": 44477}
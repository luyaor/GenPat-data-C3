{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bdfb1db5965fbde8ea2b7146effbee3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c959c4b33c43981f30ecd53aca1327ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "a41e619c58860e4fb0ad103984917e455aa47d4f", "commitAfterChange": "6166acc1a72eef4415ab90fa4d71205848f659db", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean encloses(IJavaElement element)", "signatureAfterChange": " \tpublic boolean encloses(IJavaElement element)", "diff": ["-\t\t\tif (this.focusType.equals(element.getAncestor(IJavaElement.TYPE))) {", "+\t\t\tif (this.subTypes == null && this.focusType.equals(element.getAncestor(IJavaElement.TYPE))) {", "+\t\t\t// potentially allow travelling in:", "+\t\t\tif (enclosesType(type, this.allowMemberTypes)) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif (this.allowMemberTypes) {", "+\t\t\t\t// travel out: queried type is enclosed in this scope if its (indirect) declaring type is:", "+\t\t\t\tIType enclosing = type.getDeclaringType();", "+\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t// don't allow travelling in again:", "+\t\t\t\t\tif (enclosesType(enclosing, false)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tenclosing = enclosing.getDeclaringType();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}", "-\t\t\t\t\treturn this.hierarchy.contains(original);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfe0dc3be3b9fedd2d0ab96697146c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "c2258f3a34b02ad7356115c6022b2790f990bcd4", "commitAfterChange": "b114726e6672732b572036987107a1d4de90980d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\t\tif (this.arguments != null) {", "-\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "-\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t}", "-\t\t}", "+\t\tgenerateArguments(binding, arguments, currentScope, codeStream);", "-\tif (valueRequired) {", "+\tif (valueRequired){", "-\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tif (this.valueCast != null) ", "+\t\t\tcodeStream.checkcast(this.valueCast);", "+\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\tswitch (this.codegenBinding.returnType.id) {", "+\t\tswitch(binding.returnType.id){", "-\t\t\tdefault :", "+\t\t\tdefault:", "-\t// TODO (philippe) need to revise codegen to include genericCast", "-\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tcodeStream.recordPositionsFrom(pc, (int)(this.nameSourcePosition >>> 32)); // highlight selector"]}], "num": 35160}
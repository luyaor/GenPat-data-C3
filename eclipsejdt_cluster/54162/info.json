{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae20f77dc88c57674074471589b930b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "719ea89a4a4022e5d9580d73b2e5b901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "63969f0e42bcdfc0a055ac0f3d2f47fa48cf3e29", "commitAfterChange": "b3b347145ddd14cd49627dacc39ebc40cb4c285a", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \t \tprivate void completionOnMarkerAnnotationName(ASTNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void completionOnMarkerAnnotationName(ASTNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\tCompletionOnAnnotationOfType fakeType = (CompletionOnAnnotationOfType)scope.parent.referenceContext();", "-\t\tif (fakeType.annotations[0] == annot) {", "+\t\t// When completion is inside lambda body, the fake type cannot be attached to the lambda.", "+\t\tReferenceContext referenceContext = scope.parent.referenceContext();", "+\t\tCompletionOnAnnotationOfType fakeType = (CompletionOnAnnotationOfType) (referenceContext instanceof CompletionOnAnnotationOfType ? referenceContext : null);", "+\t\tif (fakeType != null && fakeType.annotations[0] == annot) {", "-\t\t\t\t\t!fakeType.isParameter) {", "+\t\t\t\t\tfakeType != null && !fakeType.isParameter) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b032c080dc75002151824838695a5ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "a05f72a9389097f85d037088e479172e5f54b397", "commitAfterChange": "264e20b3b391e1bf2368fe3b934918be326e6ec2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tAbstractMethodDeclaration methodDeclaration = methodScope.referenceMethod();", "+\t\tAbstractMethodDeclaration methodDeclaration = (methodScope != null) ? methodScope.referenceMethod() : null;", "+\t\t\tif (typeVariables == null) typeVariables = Binding.NO_TYPE_VARIABLES;", "-\t\t\t\tif (typeVariableBinding.declaringElement instanceof TypeBinding)", "+\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)", "-\t\t\t\t\tif (typeVariableBinding.declaringElement instanceof TypeBinding)", "+\t\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c7080b33b1b5df54687780b5b85a90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void resolve(BlockScope scope)", "signatureAfterChange": "\r public void resolve(BlockScope scope)", "diff": ["+\tMethodBinding methodBinding;\r", "-\t\t\t? ((AbstractMethodDeclaration) methodScope.referenceContext).binding.returnType\r", "+\t\t\t? ((methodBinding = ((AbstractMethodDeclaration) methodScope.referenceContext).binding) == null \r", "+\t\t\t\t? null \r", "+\t\t\t\t: methodBinding.returnType)\r", "-\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {\r", "+\tif (methodType != null && expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)) {\r", "-\tif (scope.areTypesCompatible(expressionType, methodType)) {\r", "+\tif (methodType != null && scope.areTypesCompatible(expressionType, methodType)) {\r", "-\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionType, methodType);\r", "+\tif (methodType != null){\r", "+\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionType, methodType);\r", "+\t}\r"]}], "num": 54162}
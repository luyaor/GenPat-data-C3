{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39f0740f94e3db39e7dca3f853c25de1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71a15b8d0242033d0e216d4c772cc00f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClassFileMatchLocator.java", "commitBeforeChange": "150ea6aad0e3f07df1c56f34e2968d5c4e914a0c", "commitAfterChange": "e91110df42d468297a7f0f4f917c63937b06463a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void matchAnnotations(SearchPattern pattern, MatchLocator locator, ClassFile classFile, IBinaryType binaryType) throws CoreException", "signatureAfterChange": " void matchAnnotations(SearchPattern pattern, MatchLocator locator, ClassFile classFile, IBinaryType binaryType) throws CoreException", "diff": ["-\t\tlocator.reportBinaryMemberDeclaration(null, classFileBinaryType, null, binaryType, SearchMatch.A_ACCURATE);", "+\t\tSearchMatch match = new TypeReferenceMatch(classFileBinaryType, SearchMatch.A_ACCURATE, -1, 0, false, locator.getParticipant(), locator.currentPossibleMatch.resource);", "+\t\tlocator.report(match);", "-\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, methodHandle, null, binaryType, SearchMatch.A_ACCURATE);", "+\t\t\t\t\tSearchMatch match = new TypeReferenceMatch(methodHandle, SearchMatch.A_ACCURATE, -1, 0, false, locator.getParticipant(), locator.currentPossibleMatch.resource);", "+\t\t\t\t\tlocator.report(match);", "-\t\t\t\t\tlocator.reportBinaryMemberDeclaration(null, fieldHandle, null, binaryType, SearchMatch.A_ACCURATE);", "+\t\t\t\t\tSearchMatch match = new TypeReferenceMatch(fieldHandle, SearchMatch.A_ACCURATE, -1, 0, false, locator.getParticipant(), locator.currentPossibleMatch.resource);", "+\t\t\t\t\tlocator.report(match);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc725338b37a9040dd99f9676f9da208", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1798df591429fc6a5448f8a074f2d563846bcebb", "commitAfterChange": "e8a92b10517fc0e6b59559ac009096fb50176b96", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\tthis.annotationPath = null;", "+\tthis.annotationPaths = null;", "+\tthis.annotationsFromClasspath = false;", "-\t\t\t\tthis.annotationPath = currentArg;", "+\t\t\t\tif (currentArg.isEmpty() || currentArg.charAt(0) == '-')", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.missingAnnotationPath\", currentArg)); //$NON-NLS-1$", "+\t\t\t\tif (ANNOTATION_SOURCE_CLASSPATH.equals(currentArg)) {", "+\t\t\t\t\tthis.annotationsFromClasspath = true;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.annotationPaths == null)", "+\t\t\t\t\t\tthis.annotationPaths = new ArrayList<String>();", "+\t\t\t\t\tStringTokenizer tokens = new StringTokenizer(currentArg, File.pathSeparator);", "+\t\t\t\t\twhile (tokens.hasMoreTokens())", "+\t\t\t\t\t\tthis.annotationPaths.add(tokens.nextToken());", "+\t\t\t\t}"]}], "num": 42074}
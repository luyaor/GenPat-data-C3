{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69a10ba4080f9b16ddc752656f0a520b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4af85a1c29c0e5e26a6071a31935ed6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t */", "-", "+\t", "-", "+\t", "+\t\tboolean hasTypeVarArgs = false;", "+\t\t\t\t} else if (!hasTypeVarArgs) {", "+\t\t\t\t\thasTypeVarArgs = argumentTypes[i].isTypeVariable();", "-", "+\t", "+\t\tthis.resolvedType = scope.convertToRawType(this.type.resolvedType);", "-", "+\t", "+\t\t} else if (hasTypeVarArgs) {", "+\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding) {", "+\t\t\tif (allocationType.isGenericType() || allocationType.isRawType() || allocationType.isParameterizedType()) {", "+\t\t\t\tMethodBinding exactMethod = scope.findExactMethod(allocationType, this.binding.selector, argumentTypes, this);", "+\t\t\t\tif (exactMethod == null) {", "+\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.binding.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\tscope.problemReporter().javadocInvalidConstructor(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9471a40fb969f28f76e6784e7f529f34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "7cc08fd6458164ad4911bfd35d3157c5667751d0", "commitAfterChange": "d790a2ca8d6b4d448bd19ba6c16b13d5ab5db43f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tIJavaModelStatus cachedStatus = null;", "-\t\t\t\tif (output == null) continue; // 36465 - for 2.0 backward compatibility, only check specific output locations (the default can still coincidate)", "-\t\t\t\t// if (output == null) output = projectOutputLocation; // if no specific output, still need to check using default output (this line would check default output)", "+\t\t\t\tif (output == null) output = projectOutputLocation; // if no specific output, still need to check using default output (this line would check default output)", "-\t\t\t\t\t// Build some common strings for status message", "-\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));", "-\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "-", "-\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output)) {", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Messages.bind(Messages.classpath_cannotUseDistinctSourceFolderAsOutput, new String[] {entryPathMsg, otherPathMsg, projectName}));", "+\t\t\t\t\t\t\t// Bug 287164 : Report errors of overlapping output locations only if the user sets the corresponding preference.", "+\t\t\t\t\t\t\t// The check is required for backward compatibility with bug-fix 36465.", "+\t\t\t\t\t\t\tString option = javaProject.getOption(JavaCore.CORE_OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, true);", "+\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output) ", "+\t\t\t\t\t\t\t\t\t&& !JavaCore.IGNORE.equals(option)) {", "+\t\t\t\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));", "+\t\t\t\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "+\t\t\t\t\t\t\t\tif (JavaCore.ERROR.equals(option)) {", "+\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IStatus.ERROR, IJavaModelStatusConstants.OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, ", "+\t\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotUseDistinctSourceFolderAsOutput, new String[] {", "+\t\t\t\t\t\t\t\t\t\t\tentryPathMsg, otherPathMsg, projectName }));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (cachedStatus == null) {", "+\t\t\t\t\t\t\t\t\t// Note that the isOK() is being overridden to return true. This is an exceptional scenario", "+\t\t\t\t\t\t\t\t\tcachedStatus = new JavaModelStatus(IStatus.OK, IJavaModelStatusConstants.OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, ", "+\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotUseDistinctSourceFolderAsOutput, new String[] {", "+\t\t\t\t\t\t\t\t\t\tentryPathMsg, otherPathMsg, projectName })){", "+\t\t\t\t\t\t\t\t\t\tpublic boolean isOK() {", "+\t\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t};", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (otherEntry.getPath().equals(output)) {", "+\t\t\t\t\t\t\tif (output != projectOutputLocation && otherEntry.getPath().equals(output)) {", "+\t\t\t\t\t\t\t\tboolean opStartsWithProject = projectName.equals(otherEntry.getPath().segment(0));", "+\t\t\t\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "+", "+\t\t// NOTE: The above code that checks for IJavaModelStatusConstants.OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE, can be configured to return", "+\t\t// a WARNING status and hence should be at the end of this validation method. Any other code that might return a more severe ERROR should be ", "+\t\t// inserted before the mentioned code.", "+\t\tif (cachedStatus != null) return cachedStatus;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97bf2cb482bd4bc7f361c4144bc1e518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "34b4972480c62fc99b17d4728db2648e98460b52", "commitAfterChange": "a234173ab4d645c8990c97cafa00ec82ce0a909f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " private void evaluateNullAnnotations(long annotationTagBits)", "signatureAfterChange": " private void evaluateNullAnnotations(long annotationTagBits)", "diff": ["+\tboolean isPackageInfo = CharOperation.equals(this.sourceName, TypeConstants.PACKAGE_INFO_NAME);", "+\tPackageBinding pkg = getPackage();", "+\tboolean isInDefaultPkg = (pkg.compoundName == CharOperation.NO_CHAR_CHAR);", "+\tif (!isPackageInfo) {", "+\t\tboolean isInNullnessAnnotationPackage = ", "+\t\t\t\tpkg == this.scope.environment().nonnullAnnotationPackage", "+\t\t\t\t|| pkg == this.scope.environment().nullableAnnotationPackage", "+\t\t\t\t|| pkg == this.scope.environment().nonnullByDefaultAnnotationPackage;", "+\t\tif (pkg.defaultNullness == NO_NULL_DEFAULT && !isInDefaultPkg && !isInNullnessAnnotationPackage && !(this instanceof NestedTypeBinding)) {", "+\t\t\tReferenceBinding packageInfo = pkg.getType(TypeConstants.PACKAGE_INFO_NAME);", "+\t\t\tif (packageInfo == null) {", "+\t\t\t\t// no pkgInfo - complain", "+\t\t\t\tthis.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);", "+\t\t\t\tpkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\t\t} else {", "+\t\t\t\t// if pkgInfo has no default annot. - complain", "+\t\t\t\tpackageInfo.getAnnotationTagBits();", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\tif (CharOperation.equals(this.sourceName, TypeConstants.PACKAGE_INFO_NAME)) {", "-\t\t\tgetPackage().defaultNullness = newDefaultNullness;", "+\t\tif (isPackageInfo) {", "+\t\t\tpkg.defaultNullness = newDefaultNullness;", "+\t} else if (isPackageInfo || (isInDefaultPkg && !(this instanceof NestedTypeBinding))) {", "+\t\tthis.scope.problemReporter().missingNonNullByDefaultAnnotation(this.scope.referenceContext);", "+\t\tif (!isInDefaultPkg)", "+\t\t\tpkg.defaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4f8a7ab0fe34074098a32e10a80439", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t", "+\t\tboolean hasTypeVarArgs = false;", "+\t\t\t\t} else if (!hasTypeVarArgs) {", "+\t\t\t\t\thasTypeVarArgs = argumentTypes[i].isTypeVariable();", "+\t\tthis.actualReceiverType = scope.convertToRawType(this.receiver.resolvedType);", "+\t\t} else if (hasTypeVarArgs) {", "+\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t} else if (this.binding instanceof ParameterizedMethodBinding && this.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.actualReceiverType;", "+\t\t\tif (refBinding.isGenericType() || refBinding.isRawType() || refBinding.isParameterizedType()) {", "+\t\t\t\tMethodBinding exactMethod = scope.findExactMethod(refBinding, this.selector, argumentTypes, this);", "+\t\t\t\tif (exactMethod == null) {", "+\t\t\t\t\tMethodBinding problem = new ProblemMethodBinding(this.binding, this.selector, argumentTypes, ProblemReasons.NotFound);", "+\t\t\t\t\tscope.problemReporter().javadocInvalidMethod(this, problem, scope.getDeclarationModifiers());", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 35862}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49dd65d5ced14ac7999ec4613df928ac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c30326cb8d870cd9820609f2e9607f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/MovePackageFragmentRootOperation.java", "commitBeforeChange": "7a0f7a0578e7db65e3230a9b47f63ddf8bbaf581", "commitAfterChange": "39ddd9d45288a92edcd3f72a719183c283bd2afb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected void renameEntryInClasspath(IPath rootPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tprotected void renameEntryInClasspath(IPath rootPath, IJavaProject project) throws JavaModelException", "diff": ["+\t\t\t} else if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "+\t\t\t\t// update exclusion/inclusion patterns", "+\t\t\t\tIPath projectRelativePath = rootPath.removeFirstSegments(1);", "+\t\t\t\tIPath[] newExclusionPatterns = renamePatterns(projectRelativePath, entry.getExclusionPatterns());", "+\t\t\t\tIPath[] newInclusionPatterns = renamePatterns(projectRelativePath, entry.getInclusionPatterns());", "+\t\t\t\tif (newExclusionPatterns != null || newInclusionPatterns != null) {", "+\t\t\t\t\tif (newClasspath == null) {", "+\t\t\t\t\t\tnewClasspath = new IClasspathEntry[cpLength];", "+\t\t\t\t\t\tSystem.arraycopy(classpath, 0, newClasspath, 0, i);", "+\t\t\t\t\t\tnewCPIndex = i;", "+\t\t\t\t\t}", "+\t\t\t\t\tnewClasspath[newCPIndex++] = ", "+\t\t\t\t\t\tJavaCore.newSourceEntry(", "+\t\t\t\t\t\t\tentry.getPath(), ", "+\t\t\t\t\t\t\tnewInclusionPatterns == null ? entry.getInclusionPatterns() : newInclusionPatterns, ", "+\t\t\t\t\t\t\tnewExclusionPatterns == null ? entry.getExclusionPatterns() : newExclusionPatterns, ", "+\t\t\t\t\t\t\tentry.getOutputLocation(), ", "+\t\t\t\t\t\t\tentry.getExtraAttributes());", "+\t\t\t\t} else if (newClasspath != null) {", "+\t\t\t\t\tnewClasspath[newCPIndex++] = entry;", "+\t\t\t\t}", "-\t\t\tproject.setRawClasspath(newClasspath, progressMonitor);", "+\t\t\tIJavaModelStatus status = JavaConventions.validateClasspath(project, newClasspath, project.getOutputLocation());", "+\t\t\tif (status.isOK())", "+\t\t\t\tproject.setRawClasspath(newClasspath, progressMonitor);", "+\t\t\t// don't update classpath if status is not ok to avoid JavaModelException (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=129991)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd521bf2ea153ad8d3bffd2d03dc9eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "1d91bb6095cf925ea7ef511c76b46befc586fea4", "commitAfterChange": "11e4e14c87ae9f5d3c387265b339332ab33728bd", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate String[] initPackageFragToTypes(HashtableOfArrayToObject packageFragToTypes, String entryName, int lastSeparator)", "signatureAfterChange": " \tprivate void initPackageFragToTypes(HashtableOfArrayToObject packageFragToTypes, String entryName, boolean isDirectory)", "diff": ["-\tprivate String[] initPackageFragToTypes(HashtableOfArrayToObject packageFragToTypes, String entryName, int lastSeparator) {", "+\tprivate void initPackageFragToTypes(HashtableOfArrayToObject packageFragToTypes, String entryName, boolean isDirectory) {", "+\t\tint lastSeparator = isDirectory ? entryName.length()-1 : entryName.lastIndexOf('/');", "-\t\t\tSystem.arraycopy(existing, 0, existing = new String[i+1], 0, i);", "-\t\t\texisting[i] = manager.intern(pkgName[i]);", "-\t\t\tpackageFragToTypes.put(existing, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\tif (Util.isValidFolderNameForPackage(pkgName[i])) {", "+\t\t\t\tSystem.arraycopy(existing, 0, existing = new String[i+1], 0, i);", "+\t\t\t\texisting[i] = manager.intern(pkgName[i]);", "+\t\t\t\tpackageFragToTypes.put(existing, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "+\t\t\t} else {", "+\t\t\t\t// non-Java esource folder", "+\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(existing);", "+\t\t\t\tif (children[1/*NON_JAVA*/] == EMPTY_LIST) children[1/*NON_JAVA*/] = new ArrayList();", "+\t\t\t\tchildren[1/*NON_JAVA*/].add(entryName);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tif (isDirectory)", "+\t\t\treturn;", "+\t\t", "+\t\t// add classfile info amongst children", "+\t\tString fileName = entryName.substring(lastSeparator + 1);", "+\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(pkgName);", "+\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "+\t\t\tif (children[0/*JAVA*/] == EMPTY_LIST) children[0/*JAVA*/] = new ArrayList();", "+\t\t\tchildren[0/*JAVA*/].add(fileName);", "+\t\t} else {", "+\t\t\tif (children[1/*NON_JAVA*/] == EMPTY_LIST) children[1/*NON_JAVA*/] = new ArrayList();", "+\t\t\tchildren[1/*NON_JAVA*/].add(fileName);", "-\t\treturn existing;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a413f1aa6b5edb163cf212720a6aab70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundDispatcher.java", "commitBeforeChange": "600d3eda20c6510ad5218c514ac30249f7b449a9", "commitAfterChange": "f3c706bfa8df1589d5835736528d83fcc35878b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void round()", "signatureAfterChange": " \tpublic void round()", "diff": ["+\t\tif (null != _traceRounds) {", "+\t\t\tStringBuilder sbElements = new StringBuilder();", "+\t\t\tsbElements.append(\"\\tinput files: {\"); //$NON-NLS-1$", "+\t\t\tIterator<? extends Element> iElements = _roundEnv.getRootElements().iterator();", "+\t\t\tboolean hasNext = iElements.hasNext();", "+\t\t\twhile (hasNext) {", "+\t\t\t\tsbElements.append(iElements.next());", "+\t\t\t\thasNext = iElements.hasNext();", "+\t\t\t\tif (hasNext) {", "+\t\t\t\t\tsbElements.append(',');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tsbElements.append('}');", "+\t\t\t_traceRounds.println(sbElements.toString());", "+\t\t\t", "+\t\t\tStringBuilder sbAnnots = new StringBuilder();", "+\t\t\tsbAnnots.append(\"\\tannotations: [\"); //$NON-NLS-1$", "+\t\t\tIterator<TypeElement> iAnnots = _unclaimedAnnotations.iterator();", "+\t\t\thasNext = iAnnots.hasNext();", "+\t\t\twhile (hasNext) {", "+\t\t\t\tsbAnnots.append(iAnnots.next());", "+\t\t\t\thasNext = iAnnots.hasNext();", "+\t\t\t\tif (hasNext) {", "+\t\t\t\t\tsbAnnots.append(',');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tsbAnnots.append(']');", "+\t\t\t_traceRounds.println(sbAnnots.toString());", "+\t\t\t", "+\t\t\t_traceRounds.println(\"\\tlast round: \" + _roundEnv.processingOver()); //$NON-NLS-1$", "+\t\t}", "+\t\t"]}], "num": 35068}
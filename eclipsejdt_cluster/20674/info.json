{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52c347ce9402b479a0eb3ac8a7bfb76b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04edbe56497eb8f45af423700e60ad70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void test048()", "signatureAfterChange": " public void test048()", "diff": ["-\t\t\"The return type is incompatible with J.method(), I.method()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.method(), I.method()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "135d9f9d58ef2c5c75e741a0a33440b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 575, "methodNumberAfterChange": 575, "signatureBeforeChange": " public void testBug216875() throws CoreException", "signatureAfterChange": " public void testBug216875() throws CoreException", "diff": ["-\t\t\"src/Test.java void Test.m() [        \ufffd|test|\ufffd.fField = 42; // match for t is writeAccess, should be readAccess] EXACT_MATCH\"", "+\t\t\"src/Test.java void Test.m() [        \ufffd|test|\ufffd.fField = 42; // match for t is writeAccess, should be readAccess] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1809e0a2329d5364419bb4e544870685", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "a3e63b72d2efd2058d202d3e2711391afc827fec", "commitAfterChange": "f0131d199789fbf75036ba10803faed4ef08b399", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void testGetBaseName001()", "signatureAfterChange": " public void testGetBaseName001()", "diff": ["-\t\t\t\"OneName\", //$NON-NLS-1$", "+\t\t\t\"oneName\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1817bf10611f7ec8c90f818f8f24bc96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 579, "methodNumberAfterChange": 579, "signatureBeforeChange": " public void testBug216875e() throws CoreException", "signatureAfterChange": " public void testBug216875e() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo(Test, Test) [\t\t\ufffd|t1|\ufffd = t2;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b636972594a3122debcbcbeccfd9d78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": " \tpublic void test0385()", "signatureAfterChange": " \tpublic void test0385()", "diff": ["-\t\t\t\"The return type is incompatible with IDoubles.getList(), B.getList()\\n\" +", "+\t\t\t\"The return types are incompatible for the inherited methods IDoubles.getList(), B.getList()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e172afdb881fbc909d8fe3f6b1dbcbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 469, "methodNumberAfterChange": 469, "signatureBeforeChange": " public void testBug153765() throws CoreException", "signatureAfterChange": " public void testBug153765() throws CoreException", "diff": ["-\t\t\t\"src/b153765/test/SomeClass.java void b153765.test.SomeClass.foo() [        @\ufffd|b153765|\ufffd.Unimportant public void foo() {}] EXACT_MATCH\"", "+\t\t\t\"src/b153765/test/SomeClass.java void b153765.test.SomeClass.foo() [        @\ufffd|b153765|\ufffd.Unimportant public void foo() {}] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3255e6444cbe65598ebebe61282ae3c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 583, "methodNumberAfterChange": 583, "signatureBeforeChange": " public void testBug218397() throws CoreException", "signatureAfterChange": " public void testBug218397() throws CoreException", "diff": ["-\t\t\"src/Bug.java Bug.{}:Inner#1.field [\t\t\t\ufffd|Row|\ufffd field;//LINE 3] EXACT_MATCH\"", "+\t\t\"src/Bug.java Bug.{}:Inner#1.field [\t\t\t\ufffd|Row|\ufffd field;//LINE 3] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b7f4c69dc239be9ca3ff895ba78c4b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "1fb602b75e740fee79145d5e2e5fdf04a9fb5ee8", "commitAfterChange": "e0c65d48fbfbc2b240962f72967bed335ff04a38", "methodNumberBeforeChange": 748, "methodNumberAfterChange": 748, "signatureBeforeChange": " public void test0728()", "signatureAfterChange": " public void test0728()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tfoobar(ctrl.getView().getContent()); \\n\" +", "-\t\t\"\t^^^^^^\\n\" +", "-\t\t\"The method foobar(X<String>) in the type X<E> is not applicable for the arguments (?)\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tfoobar(ctrl.getView().getContent()); \\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The method foobar(X<String>) in the type X<E> is not applicable for the arguments (capture#2-of ?)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "477295922f9859b6c9cb0682ee0c3e83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 559, "methodNumberAfterChange": 559, "signatureBeforeChange": " public void testBug209996a() throws CoreException", "signatureAfterChange": " public void testBug209996a() throws CoreException", "diff": ["-\t\t\"src/test/Test.java @Annot(clazz=Test.class) [        @Annot(clazz=\ufffd|Test|\ufffd.class) int x;]\",", "+\t\t\"src/test/Test.java @Annot(clazz=Test.class) [        @Annot(clazz=\ufffd|Test|\ufffd.class) int x;]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0f8bde1cdad84fa3fc1a5006a60dc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 477, "methodNumberAfterChange": 477, "signatureBeforeChange": " \tpublic void test0459()", "signatureAfterChange": " \tpublic void test0459()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 16)\\n\" +", "-\t\t\t\"\treturn m_manager.getById(getClass(), new Integer(1));\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation getById(Class<capture#1-of ? extends Test>, Integer) of the generic method getById(Class<T>, Integer) of type Test.Manager<C>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 16)\\n\" +", "-\t\t\t\"\treturn m_manager.getById(getClass(), new Integer(1));\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type capture#1-of ? extends Test needs unchecked conversion to conform to ITest<C>\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\treturn m_manager.getById(getClass(), new Integer(1));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation getById(Class<capture#1-of ? extends Test>, Integer) of the generic method getById(Class<T>, Integer) of type Test.Manager<C>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\treturn m_manager.getById(getClass(), new Integer(1));\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type ITest needs unchecked conversion to conform to ITest<C>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5530fce038b83949d55e56e9a7905145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cc5105214055493937549b61fac95d343064ee5", "commitAfterChange": "7568a4350d418633b0b504fd95408219cea387db", "methodNumberBeforeChange": 1113, "methodNumberAfterChange": 1113, "signatureBeforeChange": " public void test1085()", "signatureAfterChange": " public void test1085()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in Y.java (at line 2)\\n\" +", "-\t\t\"\tZ z1 = z1;\\n\" +", "-\t\t\"\t       ^^\\n\" +", "-\t\t\"Cannot reference a field before it is defined\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in Y.java (at line 3)\\n\" +", "-\t\t\"\tZ[] z2 = z2;\\n\" +", "-\t\t\"\t         ^^\\n\" +", "-\t\t\"Cannot reference a field before it is defined\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in Y.java (at line 6)\\n\" +", "-\t\t\"\tE e0 = es[0];\\n\" +", "-\t\t\"\t       ^^\\n\" +", "-\t\t\"Cannot reference a field before it is defined\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in Y.java (at line 7)\\n\" +", "-\t\t\"\tE e = e;\\n\" +", "-\t\t\"\t      ^\\n\" +", "-\t\t\"Cannot reference a field before it is defined\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in Y.java (at line 8)\\n\" +", "-\t\t\"\tE[] es = es;\\n\" +", "-\t\t\"\t         ^^\\n\" +", "-\t\t\"Cannot reference a field before it is defined\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in Y.java (at line 9)\\n\" +", "-\t\t\"\tE e2 = e2.e;\\n\" +", "-\t\t\"\t       ^^^^\\n\" +", "-\t\t\"Cannot reference a field before it is defined\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. ERROR in Y.java (at line 9)\\n\" +", "-\t\t\"\tE e2 = e2.e;\\n\" +", "-\t\t\"\t       ^^^^\\n\" +", "-\t\t\"e2.e cannot be resolved or is not a field\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Y.java (at line 2)\\n\" + ", "+\t\t\"\tZ z1 = z1;\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in Y.java (at line 3)\\n\" + ", "+\t\t\"\tZ[] z2 = z2;\\n\" + ", "+\t\t\"\t         ^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in Y.java (at line 6)\\n\" + ", "+\t\t\"\tE e0 = es[0];\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in Y.java (at line 7)\\n\" + ", "+\t\t\"\tE e = e;\\n\" + ", "+\t\t\"\t      ^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in Y.java (at line 8)\\n\" + ", "+\t\t\"\tE[] es = es;\\n\" + ", "+\t\t\"\t         ^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in Y.java (at line 9)\\n\" + ", "+\t\t\"\tE e2 = e2.e;\\n\" + ", "+\t\t\"\t       ^^\\n\" + ", "+\t\t\"Cannot reference a field before it is defined\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in Y.java (at line 9)\\n\" + ", "+\t\t\"\tE e2 = e2.e;\\n\" + ", "+\t\t\"\t       ^^^^\\n\" + ", "+\t\t\"e2.e cannot be resolved or is not a field\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f7310ad6d9af5976c9cf366334214f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 308, "signatureBeforeChange": " public void test159()", "signatureAfterChange": " public void test159()", "diff": ["-\t\t\"The return type is incompatible with BFoo.bar(), AFoo.bar()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods BFoo.bar(), AFoo.bar()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65435b9373be11d9705ebc52cec6bf76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void test047()", "signatureAfterChange": " public void test047()", "diff": ["-\t\t\"The return type is incompatible with J.method(), I.method()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.method(), I.method()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fe4b68bc54a4411c04004fc60c61647", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 576, "methodNumberAfterChange": 576, "signatureBeforeChange": " public void testBug216875b() throws CoreException", "signatureAfterChange": " public void testBug216875b() throws CoreException", "diff": ["-\t\t\"src/Test.java void Test.wrapper() [        \ufffd|fWrapped|\ufffd.fField = 12; // match for fWrapped is writeAccess] EXACT_MATCH\"", "+\t\t\"src/Test.java void Test.wrapper() [        \ufffd|fWrapped|\ufffd.fField = 12; // match for fWrapped is writeAccess] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7011d8838f67e88dc2feb7f4e40431f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 304, "methodNumberAfterChange": 304, "signatureBeforeChange": " public void test155()", "signatureAfterChange": " public void test155()", "diff": ["-\t\t\"The return type is incompatible with J.foo(), I.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.foo(), I.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "707fb16c12a47d40172320b313dbfc9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "a3e63b72d2efd2058d202d3e2711391afc827fec", "commitAfterChange": "f0131d199789fbf75036ba10803faed4ef08b399", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testGetBaseName003()", "signatureAfterChange": " public void testGetBaseName003()", "diff": ["-\t\t\t\"OneName\", //$NON-NLS-1$", "+\t\t\t\"oneName\", //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75de58817fdae5a2173a5ca67279a6c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "d5cfbf43310ee4287ca95e41bcf01793920b4037", "commitAfterChange": "19036ed763985597632dc62fba09c6522d0864ac", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 111, "signatureBeforeChange": " public void testDotDotContainerEntry2() throws Exception", "signatureAfterChange": " public void testDotDotContainerEntry2() throws Exception", "diff": ["-\t\t\t\"Project \\'P\\' is missing required library: \\'\"+ getExternalPath() + \"nonExisting.jar\\'\",", "+\t\t\t\"The container 'Test container' references non existing library \\'\" + getExternalPath() + \"nonExisting.jar\\'\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d80f6036f84c47dac88f72985ed6fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["-        \"    -deprecation     + deprecation outside deprecated code\\n\" +", "+        \"    -deprecation         + deprecation outside deprecated code\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0586320d97c863d40aff8a0cb1c7f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 562, "methodNumberAfterChange": 562, "signatureBeforeChange": " public void testBug209996_c10() throws CoreException", "signatureAfterChange": " public void testBug209996_c10() throws CoreException", "diff": ["-\t\t\"src/comment10/Ref.java @Num(number=Num.CONST) [@Num(number= Num.\ufffd|CONST|\ufffd)]\",", "+\t\t\"src/comment10/Ref.java @Num(number=Num.CONST) [@Num(number= Num.\ufffd|CONST|\ufffd)]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817849eebf332f63b74d87b40bbfde6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 580, "methodNumberAfterChange": 580, "signatureBeforeChange": " public void testBug216875f() throws CoreException", "signatureAfterChange": " public void testBug216875f() throws CoreException", "diff": ["-\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] EXACT_MATCH\"", "+\t\t\"src/test/X.java void test.X.foo() [\t\t\ufffd|t1|\ufffd = t2;] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88aba89e4a12945327eb7bfbf9764523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 626, "methodNumberAfterChange": 626, "signatureBeforeChange": " \tpublic void test0608()", "signatureAfterChange": " \tpublic void test0608()", "diff": ["-            \"----------\\n\" +", "-    \t\t\"1. WARNING in Ball.java (at line 2)\\n\" +", "-    \t\t\"\tclass Ball implements Comparable {\\n\" +", "-    \t\t\"\t                      ^^^^^^^^^^\\n\" +", "-    \t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" +", "-    \t\t\"----------\\n\" +", "-    \t\t\"2. WARNING in Ball.java (at line 10)\\n\" +", "-    \t\t\"\tCollections.sort(foo);\\n\" +", "-    \t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-    \t\t\"Type safety: Unchecked invocation sort(List<Ball>) of the generic method sort(List<T>) of type Collections\\n\" +", "-    \t\t\"----------\\n\" +", "-    \t\t\"3. ERROR in Ball.java (at line 12)\\n\" +", "-    \t\t\"\tZork z;\\n\" +", "-    \t\t\"\t^^^^\\n\" +", "-    \t\t\"Zork cannot be resolved to a type\\n\" +", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. WARNING in Ball.java (at line 2)\\n\" + ", "+    \t\t\"\tclass Ball implements Comparable {\\n\" + ", "+    \t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+    \t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in Ball.java (at line 10)\\n\" + ", "+    \t\t\"\tCollections.sort(foo);\\n\" + ", "+    \t\t\"\t^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Unchecked invocation sort(LinkedList<Ball>) of the generic method sort(List<T>) of type Collections\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in Ball.java (at line 12)\\n\" + ", "+    \t\t\"\tZork z;\\n\" + ", "+    \t\t\"\t^^^^\\n\" + ", "+    \t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d53d988e06f323a91145fe955b5418a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 305, "methodNumberAfterChange": 305, "signatureBeforeChange": " public void test156()", "signatureAfterChange": " public void test156()", "diff": ["-\t\t\"The return type is incompatible with J.foo(), I.foo()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.foo(), I.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ce62ffa23f3dd439f69668ba24f438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void test075()", "signatureAfterChange": " public void test075()", "diff": ["-\t\t\"The enum constant A must define the abstract method test()\\n\" +", "+\t\t\"The enum constant A must implement the abstract method test()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3369716f18a6eb70d08956ed614ac1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 583, "methodNumberAfterChange": 583, "signatureBeforeChange": " public void testBug218397() throws CoreException", "signatureAfterChange": " public void testBug218397() throws CoreException", "diff": ["-\t\t\"src/Bug.java Bug.{}:Inner#1.field [\t\t\t\ufffd|Row|\ufffd field;//LINE 3] EXACT_MATCH\"", "+\t\t\"src/Bug.java Bug.{}:Inner#1.field [\t\t\t\ufffd|Row|\ufffd field;//LINE 3] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9192ad1ee6fd6933c68e75c23b5426e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 978, "methodNumberAfterChange": 978, "signatureBeforeChange": " public void test0955()", "signatureAfterChange": " public void test0955()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tif (o instanceof List<E>[]) { //incorrect: bug 104695\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tList<E>[] es= (List<E>[]) o; //unchecked\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o instanceof List<E>[]) { //incorrect: bug 104695\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tList<E>[] es= (List<E>[]) o; //unchecked\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e8431877034eee9491a33b9298c5b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tpublic void test032a()", "signatureAfterChange": " \tpublic void test032a()", "diff": ["-\t\t\t\"The return type is incompatible with J.foo(), I.foo()\\n\" +", "+\t\t\t\"The return types are incompatible for the inherited methods J.foo(), I.foo()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c23c4a992c7380c96dc011818e5563", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 564, "methodNumberAfterChange": 564, "signatureBeforeChange": " public void testBug209996_c22_4() throws CoreException", "signatureAfterChange": " public void testBug209996_c22_4() throws CoreException", "diff": ["-\t\t\"src/test/Test.java @Annot(clazz=test.Test.class) [    @Annot(clazz = \ufffd|test.Test|\ufffd.class) int x, y;]\",", "+\t\t\"src/test/Test.java @Annot(clazz=test.Test.class) [    @Annot(clazz = \ufffd|test.Test|\ufffd.class) int x, y;]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e055244ae40c3658a9d392fee165ad5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "ab9a706cb19f2f2eac77ce9aa86b568f8fa1be99", "commitAfterChange": "cfdd662bec42f5d5e062111a13d87bd30fa87cbf", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " public void testExtraLibraries06() throws Exception", "signatureAfterChange": " public void testExtraLibraries06() throws Exception", "diff": ["-\t\t\t\"Project \\'P\\' is missing required library: \\'lib2.jar\\'\",", "+\t\t\t\"\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5790784ddf1ea54c55f5da5b73e5be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "be2cc93d845983531740f996d21ff395fe56b532", "commitAfterChange": "e28f43e10ef52ae9d2879a1a39bdff7cce868319", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.deadCode\\\" value=\\\"ignore\\\"/>\\n\" +", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.deadCode\\\" value=\\\"warning\\\"/>\\n\" +"]}], "num": 20674}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45ea9cf97b374c3a54d1cb9f6874f8dc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c41ac4a659aff189bfa7428ed0e5ed69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceImplTransformations.java", "commitBeforeChange": "a892813e8b7a5d041e5d0d3d868b173ea1f47ce5", "commitAfterChange": "b077f1ec27f6f9c95317db4e5e225319a96f87d5", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 45, "signatureBeforeChange": " void printDefinitions(BufferedWriter output, State[] consideredStates, String tab) \t\tthrows IOException", "signatureAfterChange": " void printDefinitions(BufferedWriter output, State[] consideredStates, String tab) \t\tthrows IOException", "diff": ["-\tint i, j, length;", "+\tint i, j, length = consideredStates.length;", "-\tfor (i = 0, length = consideredStates.length; i < length; i++) {", "+\t// temporary store to support lexical sorting:", "+\tString[] lines = new String[length * (length +1) / 2 ];", "+\tint lCount = 0;", "+\tfor (i = 0; i < length; i++) {", "-\t\t\toutput.write(tab);", "-\t\t\toutput.write(\"// \");", "-\t\t\toutput.write(consideredStates[i].name);", "-\t\t\toutput.write(\" + \");", "-\t\t\toutput.write(consideredStates[j].name);", "-\t\t\toutput.write(\" => \");", "-\t\t\toutput.write(", "-\t\t\t\t(result = (State)", "-\t\t\t\t\t((Map) this.computedTransitions.get(consideredStates[i])).get(consideredStates[j])).name);", "+\t\t\tStringBuffer line = new StringBuffer();", "+\t\t\tline.append(tab);", "+\t\t\tline.append(\"// \");", "+\t\t\tline.append(consideredStates[i].name);", "+\t\t\tline.append(\" + \");", "+\t\t\tline.append(consideredStates[j].name);", "+\t\t\tline.append(\" => \");", "+\t\t\tline.append(", "+\t\t\t\t(result = (State) getResult(this.computedTransitions, consideredStates[i], consideredStates[j])).name);", "-\t\t\t\tresult != this.initializedTransitions.get(consideredStates[i])) {", "-\t\t\t\toutput.write(\"\\t\\t CHECK\");", "+\t\t\t\tresult != getResult(this.initializedTransitions, consideredStates[i], consideredStates[j])) {", "+\t\t\t\tline.append(\"\\t\\t CHECK\");", "-\t\t\toutput.write('\\n');", "+\t\t\tline.append('\\n');", "+\t\t\tlines[lCount++] = line.toString();", "+\tArrays.sort(lines);", "+\tfor (i = 0; i < lCount; i++) {", "+\t\toutput.write(lines[i]);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d279f0b53988fdbd5b6619cb4e3a17d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceImplTransformations.java", "commitBeforeChange": "a892813e8b7a5d041e5d0d3d868b173ea1f47ce5", "commitAfterChange": "b077f1ec27f6f9c95317db4e5e225319a96f87d5", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " void printDefinitions(BufferedWriter output, State[] consideredStates, String tab) \t\tthrows IOException", "signatureAfterChange": " void printDefinitions(BufferedWriter output, State[] consideredStates, String tab) \t\tthrows IOException", "diff": ["-\tint i, j, length;", "+\tint i, j, length = consideredStates.length;", "-\tfor (i = 0, length = consideredStates.length; i < length; i++) {", "+\t// temporary store to support lexical sorting:", "+\tString[] lines = new String[length * length];", "+\tint lCount = 0;", "+\tfor (i = 0; i < length; i++) {", "-\t\t\toutput.write(tab);", "-\t\t\toutput.write(\"// \");", "-\t\t\toutput.write(consideredStates[i].name);", "-\t\t\toutput.write(\" + \");", "-\t\t\toutput.write(consideredStates[j].name);", "-\t\t\toutput.write(\" => \");", "-\t\t\toutput.write(", "-\t\t\t\t(result = (State)", "-\t\t\t\t\t((Map) this.computedTransitions.get(consideredStates[i])).get(consideredStates[j])).name);", "+\t\t\tStringBuffer line = new StringBuffer();", "+\t\t\tline.append(tab);", "+\t\t\tline.append(\"// \");", "+\t\t\tline.append(consideredStates[i].name);", "+\t\t\tline.append(\" + \");", "+\t\t\tline.append(consideredStates[j].name);", "+\t\t\tline.append(\" => \");", "+\t\t\tline.append(", "+\t\t\t\t(result = (State) getResult(this.computedTransitions, consideredStates[i], consideredStates[j])).name);", "-\t\t\t\tresult != this.initializedTransitions.get(consideredStates[i])) {", "-\t\t\t\toutput.write(\"\\t\\t CHECK\");", "+\t\t\t\tresult != getResult(this.initializedTransitions, consideredStates[i], consideredStates[j])) {", "+\t\t\t\tline.append(\"\\t\\t CHECK\");", "-\t\t\toutput.write('\\n');", "+\t\t\tline.append('\\n');", "+\t\t\tlines[lCount++] = line.toString();", "+\tArrays.sort(lines);", "+\tfor (i = 0; i < lCount; i++) {", "+\t\toutput.write(lines[i]);", "+\t}", "+}"]}], "num": 15945}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e0228d7b99fbf62c0a65741da57c82e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a6711da79d952de90a9b938c3622b64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4e854a19e9e9ebd789e2214910ea2619bcb51ddb", "commitAfterChange": "31be6e8d42cb659b279825ea1e93bdb14b71a1ce", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tboolean hierarchyContainsAbstractClasses = false;\r", "-\t\t\tif (currentType.isAbstract()) hierarchyContainsAbstractClasses = true;\r", "-\t\t\tif (matchingMethod == null && hierarchyContainsAbstractClasses){\r", "+\t\t\tif (matchingMethod == null){\r", "-\t\t\tif (hierarchyContainsAbstractClasses){\r", "-\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\t\t}\r", "+\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "+\r", "-\t\t\tif (hierarchyContainsAbstractClasses){\r", "-\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\t\t}\r", "+\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (interfaceMethod != null) return interfaceMethod;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6cb0c3aff9a788bfb34ea9d6e62b109", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c6eaf8522a1a36af9ad6ac5cdc9ead859016f6c5", "commitAfterChange": "4e854a19e9e9ebd789e2214910ea2619bcb51ddb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "+\t\t\tfoundSize = found.size;\r", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbeb4b0a50df0d194fc04e37a4e1a1d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8cc940e0f7737c5f198b9632e86ecfcd6479e105", "commitAfterChange": "cb998bf2848dbe13467716ab126d457f7b87a36f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t} else if (currentLength > 1) {\r", "-\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\tfound.add(currentMethods[f]);\r", "+\t\t\t} else if (currentLength > 0) {\r", "+\t\t\t\tfound.addAll(currentMethods);\r", "-\t\t\r", "-\t\t\t\tif (found.size == 0 && matchingMethod != null)\r", "+\t\t\t\tif (found.size == 0 && matchingMethod != null) {\r", "-\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\tfound.add(currentMethods[f]);\r", "+\t\t\t\t\tmatchingMethod = null;\r", "+\t\t\t\t}\r", "+\t\t\t\tfound.addAll(currentMethods);\r", "-\t\t\tif (matchingMethod == null){\r", "-\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (matchingMethod == null) {\r", "+\t\t\t\tMethodBinding interfaceMethod =\r", "+\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tMethodBinding interfaceMethod =\r", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tMethodBinding interfaceMethod =\r", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\treturn new ProblemMethodBinding(\r", "-\t\t\t\tcandidates[0].selector,\r", "-\t\t\t\targumentTypes,\r", "-\t\t\t\tcandidates[0].declaringClass,\r", "-\t\t\t\tNotVisible);\r", "+\t\t\treturn new ProblemMethodBinding(candidates[0].selector, argumentTypes, candidates[0].declaringClass, NotVisible);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8114db108f66f1861efffaef522b1aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "4e854a19e9e9ebd789e2214910ea2619bcb51ddb", "commitAfterChange": "31be6e8d42cb659b279825ea1e93bdb14b71a1ce", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public MethodBinding findMethod(\r \tReferenceBinding receiverType,\r \tchar[] selector,\r \tTypeBinding[] argumentTypes,\r \tInvocationSite invocationSite)", "signatureAfterChange": "\r public MethodBinding findMethod(\r \tReferenceBinding receiverType,\r \tchar[] selector,\r \tTypeBinding[] argumentTypes,\r \tInvocationSite invocationSite)", "diff": ["-\t\tboolean hierarchyContainsAbstractClasses = false;\r", "-\t\t\tif (currentType.isAbstract()) hierarchyContainsAbstractClasses = true;\r", "-\t\t\tif (matchingMethod == null && hierarchyContainsAbstractClasses){\r", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (matchingMethod == null){\r", "+\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\tif (candidatesCount == 1)\r", "+\t\tif (candidatesCount == 1) {\r", "+\t\t\t//compilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);\r", "+\t\t}\r", "-\t\t\tif (hierarchyContainsAbstractClasses){\r", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t}\r", "+\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "+\r", "+\t\t\tfoundSize = found.size;\r", "-\t\t\tif (hierarchyContainsAbstractClasses){\r", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t}\r", "+\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-}\r", "+\t}\r"]}], "num": 61147}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd188e2a6ccc86aa4a51a2c51ae012ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6816e40cd4f63a5a5803d14c987faba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/comment/Java2HTMLEntityReader.java", "commitBeforeChange": "73a2bfb7ab4fb1d0f14032f336d16ec42d8ff723", "commitAfterChange": "8cd4f2186ff72374d9d956e12f5e1334f1f7e262", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected String computeSubstitution(int c) throws IOException", "signatureAfterChange": " \tprotected String computeSubstitution(int c) throws IOException", "diff": ["-\t\t/*", "-\t\t * When @ is first on a line, translate it to &#064; so it isn't", "-\t\t * misinterpreted as a Javadoc tag.", "-\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=197169", "-\t\t */", "-\t\tif (c == '@') {", "-\t\t\treturn (this.bits & BEGIN_LINE) != 0 ? \"&#064;\" : null; //$NON-NLS-1$", "-\t\t}", "-\t\tif (c == '*') {", "+\t\tStringBuffer buf = new StringBuffer();", "+\t\t// Accumulate *s into the buffer until we see something other than *.", "+\t\twhile (c == '*') {", "-\t\t\tint next = nextChar();", "-\t\t\tif (next == '/') {", "-\t\t\t\treturn \"&#42;/\"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tif (next == -1) {", "-\t\t\t\treturn \"*\"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn \"*\" + (char) next; //$NON-NLS-1$", "+\t\t\tc = nextChar();", "+\t\t\tbuf.append('*');", "+\t\tif (c == -1)", "+\t\t\t// Snippet must have ended with *s.  Just return them.", "+\t\t\treturn buf.toString();", "+\t\tif (c == '/' && buf.length() > 0) {", "+\t\t\t/*", "+\t\t\t * Translate a * that precedes a / to &#42; so it isn't", "+\t\t\t * misinterpreted as the end of the Javadoc comment that contains", "+\t\t\t * the code we are formatting.", "+\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=109636", "+\t\t\t */", "+\t\t\tbuf.setLength(buf.length() - 1);", "+\t\t\tbuf.append(\"&#42;/\"); //$NON-NLS-1$", "+\t\t} else if (c == '@' && (this.bits & BEGIN_LINE) != 0) {", "+\t\t\t/*", "+\t\t\t * When @ is first on a line, translate it to &#064; so it isn't", "+\t\t\t * misinterpreted as a Javadoc tag.", "+\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=197169", "+\t\t\t */", "+\t\t\tbuf.append(\"&#064;\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t * Ordinary processing.  If the character needs an entity in HTML,", "+\t\t\t * add the entity, otherwise add the character.", "+\t\t\t */", "+\t\t\tString entity = (String) fgEntityLookup.get(String.valueOf((char) c));", "+\t\t\tif (entity != null)", "+\t\t\t\tbuf.append(entity);", "+\t\t\telse", "+\t\t\t\tbuf.append((char) c);", "+\t\t}", "+\t\t// Update bits for the benefit of the next character.", "-\t\treturn (String) fgEntityLookup.get(String.valueOf((char) c));", "+\t\treturn buf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b564f5c4d5098ac8234c06eceba67852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "7086675b9016b36eb3327ff794af3728a774a189", "commitAfterChange": "08be90368f9af9d6750464056e901efd458851a8", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tbuffer.append(this.focusType == null ? \"<NONE>\" : ((JavaElement)this.focusType).toStringWithAncestors(false/*don't show key*/)); //$NON-NLS-1$", "-\tbuffer.append(\"\\n\"); //$NON-NLS-1$", "+\tif (this.focusType == null) {", "+\t\tbuffer.append(\"<NONE>\\n\"); //$NON-NLS-1$", "+\t} else {", "+\t\ttoString(buffer, this.focusType, 0);", "+\t}", "-\t\t\ttoString(buffer, this.focusType, 1, true);", "+\t\t\ttoString(buffer, this.focusType, 0, true);", "-\t\t\ttoString(buffer, this.focusType, 1, false);", "+\t\t\ttoString(buffer, this.focusType, 0, false);", "-\t\t\tbuffer.append(\"Sub types of root classes:\\n\"); //$NON-NLS-1$", "-\t\t\tIJavaElement[] roots = Util.sortCopy(getRootClasses());", "-\t\t\tfor (int i= 0; i < roots.length; i++) {", "-\t\t\t\ttoString(buffer, (IType) roots[i], 1, false);", "+\t\t\tif (this.rootClasses.size > 0) {", "+\t\t\t\tIJavaElement[] roots = Util.sortCopy(getRootClasses());", "+\t\t\t\tbuffer.append(\"Super types of root classes:\\n\"); //$NON-NLS-1$", "+\t\t\t\tint length = roots.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIJavaElement root = roots[i];", "+\t\t\t\t\ttoString(buffer, root, 1);", "+\t\t\t\t\ttoString(buffer, root, 1, true);", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(\"Sub types of root classes:\\n\"); //$NON-NLS-1$", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIJavaElement root = roots[i];", "+\t\t\t\t\ttoString(buffer, root, 1);", "+\t\t\t\t\ttoString(buffer, root, 1, false);", "+\t\t\t\t}", "+\t\t\t} else if (this.rootClasses.size == 0) {", "+\t\t\t\t// see http://bugs.eclipse.org/bugs/show_bug.cgi?id=24691", "+\t\t\t\tbuffer.append(\"No root classes\"); //$NON-NLS-1$", "-\t\t}", "-\t\tif (this.rootClasses.size > 1) {", "-\t\t\tbuffer.append(\"Root classes:\\n\"); //$NON-NLS-1$", "-\t\t\tIJavaElement[] roots = Util.sortCopy(getRootClasses());", "-\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "-\t\t\t\ttoString(buffer, (IType) roots[i], 1, false);", "-\t\t\t}", "-\t\t} else if (this.rootClasses.size == 0) {", "-\t\t\t// see http://bugs.eclipse.org/bugs/show_bug.cgi?id=24691", "-\t\t\tbuffer.append(\"No root classes\"); //$NON-NLS-1$"]}], "num": 42173}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1924c843abc3104e3b950874fbe3d2b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c871fa48154fb49a96865e6d5c37df1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a6b76fc7d7890cbbcb2fc001b8031466dd0ad995", "commitAfterChange": "8c05bff0d88a6a537ed2accc1c62c5430e927aee", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// type variables take precedence over member types", "-\t\t\t\t\t\tTypeVariableBinding typeVariable = sourceType.getTypeVariable(name);", "-\t\t\t\t\t\tif (typeVariable != null) {", "-\t\t\t\t\t\t\tif (insideStaticContext) // do not consider this type modifiers: access is legite within same type", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\treturn typeVariable;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t// member types take precedence over type variables", "-\t\t\t\t\t\tinsideTypeAnnotation = false;", "+\t\t\t\t\t\tTypeVariableBinding typeVariable = sourceType.getTypeVariable(name);", "+\t\t\t\t\t\tif (typeVariable != null) {", "+\t\t\t\t\t\t\tif (insideStaticContext) // do not consider this type modifiers: access is legite within same type", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\treturn typeVariable;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tinsideTypeAnnotation = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1a8556bf70237d9ef48033e815226dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "commitAfterChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "diff": ["-\t\tParameterizedGenericMethodBinding methodSubstitute = null;", "+\t\tif (invocationSite.checkingPotentialCompatibility()) {", "+\t\t\t// Not interested in a solution, only that there could potentially be one.", "+\t\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, typeVariables);", "+\t\t}", "+\t\t", "+\t\tParameterizedGenericMethodBinding methodSubstitute = null;", "-\t\t", "-\t\tif (invocationSite.checkingPotentialCompatibility()) {", "-\t\t\treturn scope.environment().createParameterizedGenericMethod(originalMethod, typeVariables);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f8f0734009e77664f18fef3d7c48bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+", "+\t\t// Parse comments", "+\t\tint[][] comments = unit.comments;", "+\t\tif (comments != null) {", "+\t\t\tbuildCommentsTable(compilationUnit, comments);", "+\t\t}", "+", "-\t\t}", "-", "-\t\t// Parse comments", "-\t\tint[][] comments = unit.comments;", "-\t\tif (comments != null) {", "-\t\t\tbuildCommentsTable(compilationUnit, comments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f17e88df269fe5475024f42df1cbdf2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9677f97e795f4e791a050726a4329f6a49e4595c", "commitAfterChange": "74187a49cf531f40f8b8fafd3f5db01750edef2a", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["+\t\t\t\t\t\t// cleanup old preferences", "+\t\t\t\t\t\tpreferences.remove(propertyName); ", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// add variable to table", "-\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences", "+\t\t\t\t\t\t// cleanup old preferences", "+\t\t\t\t\t\tpreferences.remove(propertyName); ", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// recreate container", "-\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences"]}], "num": 69338}
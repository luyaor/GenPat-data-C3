{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f6caf6078ea4b40092b802d62b4b3c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "121cdde3df0be09d61f996875734861e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": " \tpublic void test048d()", "signatureAfterChange": " \tpublic void test048d()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X5.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Object foo(I<String> z) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X5 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X5 and foo(I<? extends T>) in Y have the", "+ same erasure, yet neither overrides the other", "+    public Object foo(I<String> z) { return null; }", "+                  ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93dafca38a87673c7109f8a371fed6e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " \tpublic void test048a()", "signatureAfterChange": " \tpublic void test048a()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X2.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Object foo(I<String> z) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X2 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X2 and foo(I<? extends T>) in Y have the same erasure, yet neither overrides the other", "+    public Object foo(I<String> z) { return null; }", "+                  ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}], "num": 33957}
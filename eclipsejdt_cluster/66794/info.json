{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe213942ea03a9f7037dc8a226acd425", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ae6dbd680c28d172807900c7681f33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "afc072045911f3f0e0550579afe3acabb4002ca8", "commitAfterChange": "423d016920f3097905fe56138db30d43ac6cb2ca", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\tboolean checkIfUnicode = false;", "+\t\t\t\ttry {", "+\t\t\t\t\tcheckIfUnicode = ((currentCharacter = source[currentPosition++]) == '\\\\')", "+\t\t\t\t\t&& (source[currentPosition] == 'u');", "+\t\t\t\t} catch(IndexOutOfBoundsException e) {", "+\t\t\t\t\tif (tokenizeWhiteSpace && (whiteStart != currentPosition - 1)) {", "+\t\t\t\t\t\t// reposition scanner in case we are interested by spaces as tokens", "+\t\t\t\t\t\tcurrentPosition--;", "+\t\t\t\t\t\tstartPosition = whiteStart;", "+\t\t\t\t\t\treturn TokenNameWHITESPACE;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentPosition >= eofPosition)", "+\t\t\t\t\t\treturn TokenNameEOF;", "+\t\t\t\t\tthrow new InvalidInputException(INVALID_CHARACTER_CONSTANT);", "+\t\t\t\t}", "+\t\t\t\tif (checkIfUnicode) {", "-\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\t\tboolean checkIfUnicode = false;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tcheckIfUnicode = ((currentCharacter = source[currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t&& (source[currentPosition] == 'u');", "+\t\t\t\t\t\t} catch(IndexOutOfBoundsException e) {", "+\t\t\t\t\t\t\tif (currentPosition >= eofPosition)", "+\t\t\t\t\t\t\t\treturn TokenNameEOF;", "+\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_CHARACTER_CONSTANT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (checkIfUnicode) {", "-\t\t\t\t\t\t\tboolean isJavadoc = false, star = false;", "-\t\t\t\t\t\t\tboolean isUnicode = false;", "-\t\t\t\t\t\t\t// consume next character", "-\t\t\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t\tif (currentCharacter == '*') {", "-\t\t\t\t\t\t\t\tisJavadoc = true;", "-\t\t\t\t\t\t\t\tstar = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {", "-\t\t\t\t\t\t\t\tcheckNonExternalizeString();", "-\t\t\t\t\t\t\t\tif (recordLineSeparator) {", "-\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\ttry { //get the next char", "+\t\t\t\t\t\t\t\tboolean isJavadoc = false, star = false;", "+\t\t\t\t\t\t\t\tboolean isUnicode = false;", "+\t\t\t\t\t\t\t\t// consume next character", "+\t\t\t\t\t\t\t\tunicodeAsBackSlash = false;", "+\t\t\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t\t\t\t\tisUnicode = true;", "-\t\t\t\t\t\t\t\t\tcurrentLine = null;", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\ttry { //get the next char ", "+\t", "+\t\t\t\t\t\t\t\tif (currentCharacter == '*') {", "+\t\t\t\t\t\t\t\t\tisJavadoc = true;", "+\t\t\t\t\t\t\t\t\tstar = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {", "+\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcurrentLine = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tisUnicode = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b8dcea77213c9268569a9db6680145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "735ec08d01cb739d2750c79098bb1ec5f311fb83", "commitAfterChange": "e872af6f3b1d66cbebb28423fbb7a0221da674d2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations( \tIWorkspaceRoot workspaceRoot, \tJavaProject javaProject) throws CoreException", "signatureAfterChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "diff": ["-private void computeClasspathLocations(", "-\tIWorkspaceRoot workspaceRoot,", "-\tJavaProject javaProject) throws CoreException {", "+private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {", "-\tIPackageFragmentRoot[] roots = javaProject.getAllPackageFragmentRoots();", "+\tIPackageFragmentRoot[] roots = null;", "+\ttry {", "+\t\troots = javaProject.getAllPackageFragmentRoots();", "+\t} catch (JavaModelException e) {", "+\t\t// project doesn't exist", "+\t\tthis.locations = new ClasspathLocation[0];", "+\t\treturn;", "+\t}", "+\tint index = 0;", "-\t\tif (root.isArchive()) {", "-\t\t\tZipFile zipFile = manager.getZipFile(path);", "-\t\t\tcpLocations[i] = new ClasspathJar(zipFile);", "-\t\t} else {", "-\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "-\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\tif (encoding == null) {", "-\t\t\t\t\tencoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "-\t\t\t\t}", "-\t\t\t\tcpLocations[i] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\ttry {", "+\t\t\tif (root.isArchive()) {", "+\t\t\t\tZipFile zipFile = manager.getZipFile(path);", "+\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile);", "-\t\t\t\tcpLocations[i] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "+\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "+\t\t\t\t\tif (encoding == null) {", "+\t\t\t\t\t\tencoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "+\t\t\t\t\t}", "+\t\t\t\t\tcpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\t\t\t} else {", "+\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t\t}", "+\t\t} catch (CoreException e1) {", "+\t\t\t// problem opening zip file or getting root kind", "+\t\t\t// consider root corrupt and ignore", "+\t\t\t// just resize cpLocations", "+\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "906f22c8720d31f51f210002f2db481b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "35479e92cf76ddb81a077e36ac9bcdd2a30c6978", "commitAfterChange": "0a0c65dd1c0bd06d4f10a0a8165667bb0b6d1700", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["+\t\tfinal boolean isConstructor = methodInfo.isConstructor();", "+\t\tboolean isEnum = false;", "+\t\ttry {", "+\t\t\tisEnum = type.isEnum();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tString[] pNames = null;", "+\t\t\tif (isEnum && isConstructor) {", "+\t\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t\t\tint length = pNames.length - 2;", "+\t\t\t\tSystem.arraycopy(pNames, 2, pNames = new String[length], 0, length);", "+\t\t\t}", "-\t\tfinal boolean isConstructor = methodInfo.isConstructor();", "-\t\tString[] pNames = null;", "-\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t\tif (!(isEnum && isConstructor && !useGenericSignature)) {", "+\t\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t\t}", "-\t\t\t\tif (type.isEnum()) {", "+\t\t\t\tif (isEnum) {"]}], "num": 66794}
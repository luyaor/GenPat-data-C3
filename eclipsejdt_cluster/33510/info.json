{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6163a5ff7955c20aecb7fd14baa2d34f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ce15ae2df058fcbbf13670e820a1ddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "13012d4d345052a766efaa509c91e36e4e9c4bd7", "commitAfterChange": "0e6d159b6b5bd2cefe41360d930f2e2ea9602f91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding getAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "signatureAfterChange": " \tpublic TypeBinding getAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "diff": ["+\t\t\t\t", "+\t\t\t\tif (type.isUnresolvedType() && CharOperation.indexOf('$', type.sourceName()) > 0)", "+\t\t\t\t    type = BinaryTypeBinding.resolveType(type, this.environment, false /* no raw conversion */); // must resolve member types before asking for enclosingType", "+\t\t\t\t", "-\t\t\t\t\tannotatedType = getAnnotatedType(types[j], enclosingType, types[j].typeArguments(), annotations[i]);", "+\t\t\t\t\tfinal TypeBinding currentType = types[j];", "+\t\t\t\t\t// while handling annotations from SE7 locations, take care not to drop existing annotations.", "+\t\t\t\t\tAnnotationBinding [] currentAnnotations = annotations[i] != null && annotations[i].length > 0 ? annotations[i] : currentType.getTypeAnnotations();", "+\t\t\t\t\tannotatedType = getAnnotatedType(currentType, enclosingType, currentType.typeArguments(), currentAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2a199dca31e83c9af32b4a441737705", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding getAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "signatureAfterChange": " \tpublic TypeBinding getAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "diff": ["-\t\t\t\t   @T X.@T Y.@T Z                             type => Z  annotations => [[][][@T][@T][@T]] ", "-\t\t\t\t   java.lang.@T X.@T Y.@T Z", "-\t\t\t\t   in all these cases the incoming type binding is for Z, but annotations are for different levels. Align their layout for proper attribution.", "+\t\t\t\t   @T X.@T Y.@T Z                             type => Z  annotations => [[@T][@T][@T]] ", "+\t\t\t\t   java.lang.@T X.@T Y.@T Z                   type => Z  annotations => [[][][@T][@T][@T]]", "+\t\t\t\t   in all these cases the incoming type binding is for Z, but annotations are for different levels. We need to align their layout for proper attribution.", "-\t\t\t\t\tannotatedType = getAnnotatedType(currentType, enclosingType, currentType.typeArguments(), currentAnnotations);", "+\t\t\t\t\tannotatedType = getAnnotatedType(currentType, enclosingType, currentAnnotations);"]}], "num": 33510}
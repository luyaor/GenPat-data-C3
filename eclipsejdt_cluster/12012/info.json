{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b4a89df3cd0df4d608bfd225c4c7b56", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0b7815f714738fa56522d479bfa057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "030294305389e5486e7f63658830617d44acd9c2", "commitAfterChange": "3f4495ecc3a42cb049fa3e01aeaf49a7722af380", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 150, "signatureBeforeChange": " \t\t \tprivate int findTagNameEnd(TagElement tagNode)", "signatureAfterChange": " \t\t \tprivate int findTagNameEnd(TagElement tagNode)", "diff": ["-\t\t    try {", "-\t\t        IDocument doc = getDocument();", "-\t\t        int len= doc.getLength();", "-\t\t        int i= tagNode.getStartPosition();", "-\t\t        while (i < len && !Indents.isIndentChar(doc.getChar(i))) {", "-\t\t            i++;", "-\t\t        }", "-\t\t        return i;", "-\t\t    } catch (BadLocationException e) {", "-\t\t        handleException(e);", "-\t\t    }", "+\t\t\tchar[] cont= getContent();", "+\t\t    int len= cont.length;", "+\t\t\tint i= tagNode.getStartPosition();", "+\t\t\twhile (i < len && !Indents.isIndentChar(cont[i])) {", "+\t\t\t    i++;", "+\t\t\t}", "+\t\t\treturn i;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38b66eec36ba3efee1d84a937fceccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/InMemoryIndex.java", "commitBeforeChange": "0050ce1e7f4e1aa09d2a0680eb2a656c745b9584", "commitAfterChange": "c557f8e28df32d4f3742c65d1f4547b281353194", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r \tprotected void save(IndexOutput output) throws IOException", "signatureAfterChange": "\r \r \tprotected void save(IndexOutput output) throws IOException", "diff": ["-\t\tgetSortedWordEntries(); // init the slot\r", "-\t\t\tint numFiles= this.files.size();\r", "-\t\t\tfor (int i= 0; i < numFiles; ++i) {\r", "-\t\t\t\tIndexedFile indexedFile= (IndexedFile) this.files.get(i);\r", "-\t\t\t\toutput.addFile(indexedFile); // written out in order BUT not alphabetical\r", "-\t\t\t}\r", "+\t\t\tIndexedFile[] indexedFiles= files.asArray();\r", "+\t\t\tfor (int i= 0, length = indexedFiles.length; i < length; ++i)\r", "+\t\t\t\toutput.addFile(indexedFiles[i]); // written out in order BUT not alphabetical\r", "+\t\t\tgetSortedWordEntries(); // init the slot\r"]}], "num": 12012}
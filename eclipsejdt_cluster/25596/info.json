{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eddf465151f87f4e7f18489828e4ba02", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194028b2d0e0eb2ae2c1023d37d87e24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "44bb613cc5c3c46c068bd744b8bd3672d2dacb7a", "commitAfterChange": "3e29de302b9f16584da144bfb4192f62d3964b7a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void computeInheritedMethods()", "signatureAfterChange": "\r private void computeInheritedMethods()", "diff": ["+*/\r", "-\t} else {\r", "-\t\tMethodBinding[] methods = this.type.scope.getJavaLangObject().methods();\r", "-\t\tfor (int m = methods.length; --m >= 0;) {\r", "-\t\t\tMethodBinding method = methods[m];\r", "-\t\t\tif (!method.isConstructor()) {\r", "-\t\t\t\tMethodBinding[] existingMethods = (MethodBinding[]) this.inheritedMethods.get(method.selector);\r", "-\t\t\t\tif (existingMethods == null)\r", "-\t\t\t\t\texistingMethods = new MethodBinding[1];\r", "-\t\t\t\telse\r", "-\t\t\t\t\tSystem.arraycopy(existingMethods, 0,\r", "-\t\t\t\t\t\t(existingMethods = new MethodBinding[existingMethods.length + 1]), 0, existingMethods.length - 1);\r", "-\t\t\t\texistingMethods[existingMethods.length - 1] = method;\r", "-\t\t\t\tthis.inheritedMethods.put(method.selector, existingMethods);\r", "-\t\t\t}\r", "-\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f833b5bd780c205ca2e7220d998ad06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "commitAfterChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": " protected void purgeMethodStatements(TypeDeclaration type, boolean checkEachMethod)", "signatureAfterChange": " protected void purgeMethodStatements(TypeDeclaration type, boolean checkEachMethod)", "diff": ["-\t\t\t\t\tmethod.statements = null;", "-\t\t\t\t\tmethod.javadoc = null;", "+\t\t\t\t\tif (this.sourceStartOfMethodToRetain != method.declarationSourceStart || this.sourceEndOfMethodToRetain != method.declarationSourceEnd) { // approximate, but no big deal", "+\t\t\t\t\t\tmethod.statements = null;", "+\t\t\t\t\t\tmethod.javadoc = null;", "+\t\t\t\t\t}", "-\t\t\t\tmethods[j].statements = null;", "-\t\t\t\tmethods[j].javadoc = null;", "+\t\t\t\tAbstractMethodDeclaration method = methods[j];", "+\t\t\t\tif (this.sourceStartOfMethodToRetain != method.declarationSourceStart || this.sourceEndOfMethodToRetain != method.declarationSourceEnd) { // approximate, but no big deal", "+\t\t\t\t\tmethod.statements = null;", "+\t\t\t\t\tmethod.javadoc = null;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8bb9f369e0f22efb9cbaa79bc09a7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid buildMethods()", "signatureAfterChange": "  \tvoid buildMethods()", "diff": ["-\t\t\tMethodBinding[] abstractMethods = null;", "+\t\t\tboolean hasAbstractMethods = false;", "-\t\t\t\t\t\tif (methodBinding.isAbstract()) {", "-\t\t\t\t\t\t\tif (abstractMethods == null) {", "-\t\t\t\t\t\t\t\tabstractMethods = new MethodBinding[] {methodBinding};", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint length = abstractMethods.length;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(abstractMethods, 0, abstractMethods = new MethodBinding[length + 1], 0, length);", "-\t\t\t\t\t\t\t\tabstractMethods[length] = methodBinding;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\thasAbstractMethods = hasAbstractMethods || methodBinding.isAbstract();", "-\t\t\tif (abstractMethods != null)", "-\t\t\t\tproblemReporter().abstractMethodInAbstractClass(sourceType, abstractMethods);", "+\t\t\tif (hasAbstractMethods)", "+\t\t\t\tproblemReporter().abstractMethodInConcreteClass(sourceType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1f434f43ab3d4797a39a10755d44bab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "a82ce37ff874ba0e833f2970ef837c525377a572", "commitAfterChange": "b4f075361126213edb4ab60051081d2143c229e2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final void addClinit()", "signatureAfterChange": " \tpublic final void addClinit()", "diff": ["-\t\t\tAbstractMethodDeclaration[] methods;", "-\t\t\tif ((methods = this.methods) == null) {", "+\t\t\tAbstractMethodDeclaration[] methodDeclarations;", "+\t\t\tif ((methodDeclarations = this.methods) == null) {", "-\t\t\t\tmethods = new AbstractMethodDeclaration[1];", "+\t\t\t\tmethodDeclarations = new AbstractMethodDeclaration[1];", "-\t\t\t\tlength = methods.length;", "+\t\t\t\tlength = methodDeclarations.length;", "-\t\t\t\t\tmethods,", "+\t\t\t\t\tmethodDeclarations,", "-\t\t\t\t\t(methods = new AbstractMethodDeclaration[length + 1]),", "+\t\t\t\t\t(methodDeclarations = new AbstractMethodDeclaration[length + 1]),", "-\t\t\tmethods[0] = clinit;", "+\t\t\tmethodDeclarations[0] = clinit;", "-\t\t\tthis.methods = methods;", "+\t\t\tthis.methods = methodDeclarations;"]}], "num": 25596}
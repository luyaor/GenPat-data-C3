{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a10a3df09a5f5b6cd53fe6a51c87dfd7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcba05654d3e2b868e2431863fc54365", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "471e141b80ea33efa7013235dd0328fbb0893f8e", "commitAfterChange": "28df2a7b92aacfbe35b286180fa8d061396eb699", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tpublic boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "diff": ["+\t\t\t\tif (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT)", "+\t\t\t\t\tthis.state.addClasspathValidation(rootInfo.project);", "+\t\t\t\tif (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT) ", "+\t\t\t\t\tthis.state.addClasspathValidation(rootInfo.project);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff949730ae6522501d1f9d39dbb1954c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 55, "signatureBeforeChange": " protected void parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve)", "signatureAfterChange": " protected boolean parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve) throws CoreException", "diff": ["- */", "-protected void parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve) {", "-\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "-\t\tthrow new OperationCanceledException();", "-", "-\ttry {", "-\t\tif (BasicSearchEngine.VERBOSE)", "-\t\t\tSystem.out.println(\"Parsing \" + possibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-", "-\t\tthis.parser.nodeSet = possibleMatch.nodeSet;", "-\t\tCompilationResult unitResult = new CompilationResult(possibleMatch, 1, 1, this.options.maxProblemsPerUnit);", "-\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(possibleMatch, unitResult);", "-\t\tif (parsedUnit != null) {", "-\t\t\tif (mustResolve && !parsedUnit.isEmpty())", "-\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-", "-\t\t\t// add the possibleMatch with its parsedUnit to matchesToProcess", "-\t\t\tpossibleMatch.parsedUnit = parsedUnit;", "-\t\t\tint size = this.matchesToProcess.length;", "-\t\t\tif (this.numberOfMatches == size)", "-\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PossibleMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "-\t\t\tthis.matchesToProcess[this.numberOfMatches++] = possibleMatch;", "-\t\t}", "-\t} finally {", "-\t\tthis.parser.nodeSet = null;", "-\t}", "-}", "+ */", "+protected boolean parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve) throws CoreException {", "+\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();", "+", "+\ttry {", "+\t\tif (BasicSearchEngine.VERBOSE)", "+\t\t\tSystem.out.println(\"Parsing \" + possibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+", "+\t\tthis.parser.nodeSet = possibleMatch.nodeSet;", "+\t\tCompilationResult unitResult = new CompilationResult(possibleMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(possibleMatch, unitResult);", "+\t\tif (parsedUnit != null) {", "+\t\t\tif (!parsedUnit.isEmpty()) {", "+\t\t\t\tif (mustResolve) {", "+\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t}", "+\t\t\t\tif (hasAlreadyDefinedType(parsedUnit)) return false; // skip type has it is hidden so not visible", "+\t\t\t\tgetMethodBodies(parsedUnit, possibleMatch.nodeSet);", "+\t\t\t\tif (this.patternLocator.mayBeGeneric && !mustResolve && possibleMatch.nodeSet.mustResolve) {", "+\t\t\t\t\t// special case: possible match node set force resolution although pattern does not", "+\t\t\t\t\t// => we need to build types for this compilation unit", "+\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t}", "+\t\t\t}", "+\t", "+\t\t\t// add the possibleMatch with its parsedUnit to matchesToProcess", "+\t\t\tpossibleMatch.parsedUnit = parsedUnit;", "+\t\t\tint size = this.matchesToProcess.length;", "+\t\t\tif (this.numberOfMatches == size)", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PossibleMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = possibleMatch;", "+\t\t}", "+\t} finally {", "+\t\tthis.parser.nodeSet = null;", "+\t}", "+\treturn true;", "+}"]}], "num": 48973}
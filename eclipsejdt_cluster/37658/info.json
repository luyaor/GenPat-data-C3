{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7e29e6c75df6e938944b88cf1c270e3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67158a9348d2597781d880af1bdef9f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "82e3492687fb385a8a9ba6c56e1f6d491dc8d79a", "commitAfterChange": "0b30f6ac807cc8aa14a5978d1dd305dd71baedda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void verifyComments(String testNbre) throws JavaModelException", "signatureAfterChange": " \tprivate void verifyComments(String testNbre, boolean flattened) throws JavaModelException", "diff": ["-\tprotected void verifyComments(String testNbre) throws JavaModelException {", "+\tprivate void verifyComments(String testNbre, boolean flattened) throws JavaModelException {", "-\t\t// Verify comments positions", "-//\t\tEnumeration commentStrings = commentsInfo.keys();", "-//\t\tEnumeration commentTags = commentsInfo.elements();", "+\t\t// Verify comments positions and bindings", "-//\t\t\tint start = unitComments[i].getStartPosition();", "-//\t\t\tassertEquals(\"Comment at position \"+start+\" does NOT match source!\", comment, sourceStr.substring(start, start+unitComments[i].getLength()));", "-\t\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", comment, docComment.toString());", "-\t\t\t\tverifyFragmentsPositions(docComment, source);", "+\t\t\t\tif (flattened) {", "+\t\t\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", comment, docComment.toString());", "+\t\t\t\t}", "+\t\t\t\tverifyPositions(docComment, source);", "-\t\t/* Verify each javadoc", "+\t\t/* Verify each javadoc: not implemented yet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef488f915f94de52e3151d2d67a94129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprotected void verifyComments(String sourceStr, char[] source, Comment[] unitComments)", "signatureAfterChange": " \tprotected void verifyComments(String sourceStr, char[] source, List unitComments)", "diff": ["-\tprotected void verifyComments(String sourceStr, char[] source, Comment[] unitComments) {", "+\tprotected void verifyComments(String sourceStr, char[] source, List unitComments) {", "-\t\tassertEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), unitComments.length);", "+\t\tint size = unitComments.size();", "+\t\tassumeEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), size);", "-\t\tfor (int i=0; i<unitComments.length; i++) {", "-\t\t\tComment comment = unitComments[i];", "+\t\tfor (int i=0; i<size; i++) {", "+\t\t\tComment comment = (Comment) unitComments.get(i);", "-\t\t\tassertEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "+\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\tassertEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "+\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));"]}], "num": 37658}
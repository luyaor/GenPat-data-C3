{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0f1d6a3eb874193b14e874ec0a6653f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92419612302b775c4f23aa9de249ee69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "commitAfterChange": "ac106841a196855c6b6f3e4eb6862eaf680b2f0c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate GeneratedFileManager(final IProject project)", "signatureAfterChange": " \tprivate GeneratedFileManager(final IProject project)", "diff": ["-\t\t// register a preference listener so that we can watch for changes to the gen src dir", "-\t\tProjectScope projScope = new ProjectScope(project);", "+\t\t// register a preference listener so that we can watch for changes ", "+\t\t// to the gen src dir at the project scope...", "+\t\tIScopeContext projScope = new ProjectScope(project);", "-\t\tIPreferenceChangeListener listener = new IPreferenceChangeListener() {", "+\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\tprojPrefs.addPreferenceChangeListener(listener);", "+\t\tprojPrefs.addPreferenceChangeListener(projListener);", "+\t\t", "+\t\t// ...and at the workspace scope.", "+\t\t// Note we check all projects, even those that have project-specific", "+\t\t// settings, when the workspace setting changes.  For projects with", "+\t\t// project-specific settings, the value of the setting won't change ", "+\t\t// so the request will be ignored.", "+\t\tIScopeContext wkspScope = new InstanceScope();", "+\t\tIEclipsePreferences wkspPrefs = wkspScope.getNode(AptPlugin.PLUGIN_ID);", "+\t\tIPreferenceChangeListener wkspListener = new IPreferenceChangeListener() {", "+\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "+\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "+\t\t\t\t\tsetGeneratedSourceFolderName( AptConfig.getGenSrcDir(_javaProject) );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\twkspPrefs.addPreferenceChangeListener(wkspListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d111238e9ecb792aec10081369c5714b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e9369369dba0e10810d40bdf943f83653668255c", "commitAfterChange": "343d4279aa701152313517156fc77bbf7ec9f350", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 205, "signatureBeforeChange": "  \tpublic void shutdown ()", "signatureAfterChange": "  \tpublic void shutdown ()", "diff": ["-\t\t", "-\t\t// Stop listening to user library changes", "-\t\tif (this.userLibraryManager != null)", "-\t\t\tgetInstancePreferences().removePreferenceChangeListener(this.userLibraryManager);", "-\t", "-\t\tif (this.indexManager != null){ // no more indexing", "+", "+\t\t// Stop indexing", "+\t\tif (this.indexManager != null) {", "+\t\t// Stop listening to preferences changes", "+\t\tJavaCore.getPlugin().getPluginPreferences().removePropertyChangeListener(this.propertyListener);", "+\t\t((IEclipsePreferences) preferencesLookup[PREF_DEFAULT].parent()).removeNodeChangeListener(this.defaultNodeListener);", "+\t\tpreferencesLookup[PREF_DEFAULT] = null;", "+\t\t((IEclipsePreferences) preferencesLookup[PREF_INSTANCE].parent()).removeNodeChangeListener(this.instanceNodeListener);", "+\t\tpreferencesLookup[PREF_INSTANCE].removePreferenceChangeListener(this.instancePreferencesListener);", "+\t\tpreferencesLookup[PREF_INSTANCE] = null;", "+\t\t"]}], "num": 20475}
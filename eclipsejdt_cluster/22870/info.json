{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f1fe1ea5b73dc99f128ab1727c99e95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3004d9655087274ef01d604d2fc4ab65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f2f45b09c61cdc4a3bb7702f92f8e4fdcb969052", "commitAfterChange": "f33fe27819e8270eb24d0e5a64c8fba3d823b0e8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate GeneratedFileManager(final IProject project)", "signatureAfterChange": " \tprivate GeneratedFileManager(final IProject project)", "diff": ["+\t\t// properly initialize the GeneratedFileManager if project path is up-to-date and the generated ", "+\t\t// source folder is there.", "+\t\tfinal IFolder folder = project.getFolder(_generatedSourceFolderName);", "+\t\tif(folder.exists()){", "+\t\t\tboolean uptodate = false;", "+\t\t\ttry{", "+\t\t\t\tuptodate = isProjectClassPathUpToDate(_javaProject, folder.getFullPath(), null);", "+\t\t\t}catch(JavaModelException e){", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t\tif( uptodate )", "+\t\t\t\t_generatedSourceFolder = folder;", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd66a86b3c2be998efaa93a222df339", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "b97ded2f83297eeeca5d1431ded2373cd5cd9a87", "commitAfterChange": "db5d3330558f8c3dc02b2913325d1658af93a1d6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tJavaModelManager manager, \t\tfinal JavaProject project)", "diff": ["-\t\tMap allRemovedRoots = manager.deltaProcessor.removedRoots;", "-\t\tMap removedRoots = null;", "-\t\tif (allRemovedRoots != null) {", "-\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) allRemovedRoots.get(project);", "-\t\t\tif (roots != null) {", "-\t\t\t\tremovedRoots = new HashMap();", "-\t\t\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\t\t\tIPackageFragmentRoot root = roots[i];", "-\t\t\t\t\tremovedRoots.put(root.getPath(), root);", "-\t\t\t\t}", "+\t\tMap oldRoots = null;", "+\t\tIPackageFragmentRoot[] roots = null;", "+\t\tif (project.isOpen()) {", "+\t\t\ttry {", "+\t\t\t\troots = project.getPackageFragmentRoots();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t}", "+\t\t} else {", "+\t\t\tMap allRemovedRoots ;", "+\t\t\tif ((allRemovedRoots = manager.deltaProcessor.removedRoots) != null) {", "+\t\t \t\troots = (IPackageFragmentRoot[]) allRemovedRoots.get(project);", "+\t\t\t}", "+\t\t}", "+\t\tif (roots != null) {", "+\t\t\toldRoots = new HashMap();", "+\t\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\t\toldRoots.put(root.getPath(), root);", "-\t\t\t\tif (removedRoots != null) {", "-\t\t\t\t\tIPackageFragmentRoot removedRoot = (IPackageFragmentRoot)  removedRoots.get(oldResolvedPath[i].getPath());", "-\t\t\t\t\tif (removedRoot != null) { // use old root if any (could be none if entry wasn't bound)", "-\t\t\t\t\t\tpkgFragmentRoots = new IPackageFragmentRoot[] { removedRoot };", "+\t\t\t\tif (oldRoots != null) {", "+\t\t\t\t\tIPackageFragmentRoot oldRoot = (IPackageFragmentRoot)  oldRoots.get(oldResolvedPath[i].getPath());", "+\t\t\t\t\tif (oldRoot != null) { // use old root if any (could be none if entry wasn't bound)", "+\t\t\t\t\t\tpkgFragmentRoots = new IPackageFragmentRoot[] { oldRoot };"]}], "num": 22870}
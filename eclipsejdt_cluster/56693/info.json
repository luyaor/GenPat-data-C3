{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2fdb38285d9d8c0daf15c30833393f3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0291bea3e680fd96bfe070e7acf837bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "4258235f7bd226d0dfb8701ffe19643b12592deb", "commitAfterChange": "67ca3e07328b80bf938c28e6f963dfa90af7b58e", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic void setupExternalJCL() throws IOException", "signatureAfterChange": " \tpublic void setupExternalJCL(String jclName) throws IOException", "diff": ["-\t\t", "+\t */", "+\tpublic void setupExternalJCL(String jclName) throws IOException {", "-\t\tString localJCLPath = getWorkspaceRoot().getLocation().toFile().getParentFile().getCanonicalPath();", "-\t\tEXTERNAL_JAR_DIR_PATH = localJCLPath;", "-\t\tjava.io.File jclDir = new java.io.File(localJCLPath);", "+\t\tjava.io.File jclDir = new java.io.File(EXTERNAL_JAR_DIR_PATH);", "-\t\t\tnew java.io.File(localJCLPath + separator + \"jclMin.jar\");", "-\t\tjava.io.File jclMinsrc = new java.io.File(localJCLPath + separator + \"jclMinsrc.zip\");", "+\t\t\tnew java.io.File(EXTERNAL_JAR_DIR_PATH + separator + jclName + \".jar\");", "+\t\tjava.io.File jclMinsrc = new java.io.File(EXTERNAL_JAR_DIR_PATH + separator + jclName + \"src.zip\");", "-\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"jclMin.jar\");", "+\t\t\t\tnew java.io.File(resourceJCLDir + separator + jclName + \".jar\");", "-\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"jclMinsrc.zip\");", "+\t\t\t\tnew java.io.File(resourceJCLDir + separator + jclName + \"src.zip\");", "-\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"jclMin.jar\");", "+\t\t\t\tnew java.io.File(resourceJCLDir + separator + jclName + \".jar\");", "-\t\t\t\tnew java.io.File(resourceJCLDir + separator + \"jclMinsrc.zip\");", "+\t\t\t\tnew java.io.File(resourceJCLDir + separator + jclName + \"src.zip\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316aa3387ec66f3d480421274c5a6edc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/BuildBatchCompilerTest.java", "commitBeforeChange": "504159d7229f244fe60c96f9b15d6167193a85b6", "commitAfterChange": "5cd6d58769a50d0c17684a6868642380a176871e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "signatureAfterChange": " \t\t \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "diff": ["-\t\tString batchCompilerSource = getPluginDirectoryPath() + File.separator + \"compiler-R3_0.zip\"; //$NON-NLS-1$", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-\t\tfinal String compilerPath = targetWorkspacePath + File.separator + \"compiler\"; //$NON-NLS-1$", "-\t\tfinal String sources = compilerPath + File.separator + \"src\"; //$NON-NLS-1$", "-\t\tfinal String bins = compilerPath + File.separator + \"bin\"; //$NON-NLS-1$", "-\t\tfinal String logs = compilerPath + File.separator + \"log.txt\"; //$NON-NLS-1$", "-\t\tUtil.unzip(batchCompilerSource, targetWorkspacePath);", "+\t\tfinal String targetWorkspacePath =  workspaceRoot.getProject(JavaCore.PLUGIN_ID).getLocation().toFile().getCanonicalPath();", "+\t\tfinal String compilerPath = targetWorkspacePath + File.separator + \"src\"; //$NON-NLS-1$", "+\t\tfinal String sources = targetWorkspacePath + File.separator + \"compiler\"; //$NON-NLS-1$", "+\t\tfinal String bins = targetWorkspacePath + File.separator + \"bin\"; //$NON-NLS-1$", "+\t\tfinal String logs = targetWorkspacePath + File.separator + \"log.txt\"; //$NON-NLS-1$", "+\t\ttagAsSummary(\"Build jdt-core/compiler using batch compiler\", Dimension.CPU_TIME);", "+\t\t", "+\t\t// Compile 10 times", "-\t\tcleanupDirectory(new File(compilerPath));"]}], "num": 56693}
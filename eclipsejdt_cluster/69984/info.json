{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8fcf8ad4fcce119a8875271fcbc2557", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85704ad57451a0264ff13d364f3c68f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["-\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments", "+\t\tflushAnnotationsDefinedPriorTo(endStatementPosition); // discard obsolete comments during recovery", "-\tboolean deprecated = false;", "-\tboolean checkDeprecated = false;", "-\tint lastAnnotationIndex = -1;", "-", "-\t//since jdk1.2 look only in the last java doc comment...", "-\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "-\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "-\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "-\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {", "-\t\t\tcontinue nextComment;", "+\t", "+\tint lastComment = this.scanner.commentPtr;", "+\t", "+\tif (this.modifiersSourceStart >= 0) {", "+\t\t// eliminate comments located after modifierSourceStart if positionned", "+\t\twhile (lastComment >= 0 && this.scanner.commentStarts[lastComment] > modifiersSourceStart) lastComment--;", "+\t}", "+\tif (lastComment >= 0) {", "+\t\t// consider all remaining leading comments to be part of current declaration", "+\t\tthis.modifiersSourceStart = scanner.commentStarts[0]; ", "+\t", "+\t\t// check deprecation in last comment if javadoc \t", "+\t\tif (this.scanner.commentStops[lastComment] > 0) { \t// non javadoc comment have negative end positions", "+\t\t\tif (checkDeprecation(", "+\t\t\t\t\tthis.scanner.commentStarts[lastComment],", "+\t\t\t\t\tthis.scanner.commentStops[lastComment] - 1, //stop is one over,", "+\t\t\t\t\tthis.scanner.source)) {", "+\t\t\t\tcheckAndSetModifiers(AccDeprecated);", "+\t\t\t}", "-\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "-\t\t\tcontinue nextComment;", "-\t\t}", "-\t\tcheckDeprecated = true;", "-\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "-\t\tchar[] comment = scanner.source;", "-", "-\t\tdeprecated =", "-\t\t\tcheckDeprecation(", "-\t\t\t\tcommentSourceStart,", "-\t\t\t\tcommentSourceEnd,", "-\t\t\t\tcomment);", "-\t\tbreak nextComment;", "-\t}", "-\tif (deprecated) {", "-\t\tcheckAndSetModifiers(AccDeprecated);", "-\t}", "-\t// modify the modifier source start to point at the first comment", "-\tif (lastAnnotationIndex >= 0 && checkDeprecated) {", "-\t\tmodifiersSourceStart = scanner.commentStarts[lastAnnotationIndex]; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee19369a281fc93914798b6e127afd82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "5a64717913d84cfb4164c8c518f717f18f92060c", "commitAfterChange": "39c618471b3ea47080d3f5012ddba5a7f73be788", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["+\tint commentPtr = scanner.commentPtr;", "-\tfound : {", "-\t\tif ((lastAnnotationIndex = scanner.commentPtr) >= 0) { //look for @deprecated", "-\t\t\tscanner.commentPtr = -1;", "-\t\t\t// reset the comment stack, since not necessary after having checked", "-\t\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "-\t\t\t// javadoc only (non javadoc comment have negative end positions.)", "-\t\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "-\t\t\t\tbreak found;", "-\t\t\t}", "-\t\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1;", "-\t\t\t//stop is one over", "-\t\t\tchar[] comment = scanner.source;", "-\t\t\tdeprecated =", "-\t\t\t\tcheckDeprecation(", "-\t\t\t\t\tcommentSourceStart,", "-\t\t\t\t\tcommentSourceEnd,", "-\t\t\t\t\tcomment);", "-\t\t\tbreak found;", "+\tnextComment : for (lastAnnotationIndex = scanner.commentPtr; lastAnnotationIndex >= 0; lastAnnotationIndex--){", "+\t\t//look for @deprecated into the first javadoc comment preceeding the declaration", "+\t\tint commentSourceStart = scanner.commentStarts[lastAnnotationIndex];", "+\t\t// javadoc only (non javadoc comment have negative end positions.)", "+\t\tif (modifiersSourceStart != -1 && modifiersSourceStart < commentSourceStart) {", "+\t\t\tcontinue nextComment;", "+\t\tif (scanner.commentStops[lastAnnotationIndex] < 0) {", "+\t\t\tcontinue nextComment;", "+\t\t}", "+\t\tint commentSourceEnd = scanner.commentStops[lastAnnotationIndex] - 1; //stop is one over", "+\t\tchar[] comment = scanner.source;", "+", "+\t\tdeprecated =", "+\t\t\tcheckDeprecation(", "+\t\t\t\tcommentSourceStart,", "+\t\t\t\tcommentSourceEnd,", "+\t\t\t\tcomment);", "+\t\tbreak nextComment;", "-\tif (lastAnnotationIndex >= 0) {", "+\tif (commentPtr >= 0) {"]}], "num": 69984}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed555e3ad5205e3b719186c934b3af90", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c708683fda7bc1dddfa0a7227dee16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "00cabdb6b90ee48364f71e75a5da5edca1e7837c", "commitAfterChange": "fcccc4dd1377e549112e0bdc9a74b0eb625c6ab2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block)", "diff": ["-\t\t", "-\t\t// Local variables init", "+", "+\t\t// Compute indentation if necessary", "+\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isDescription();", "+\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isParamTag();", "+\t\tboolean headerLine = block.isHeaderLine() && this.lastNumberOfNewLines == 0;", "+\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\tif (headerLine) firstColumn++;", "+\t\tStringBuffer indentationBuffer = null;", "+\t\tif (indentRootTags) {", "+\t\t\tint indentLevel = this.indentationLevel;", "+\t\t\tint indentations = this.numberOfIndentations;", "+\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "+\t\t\tthis.indentationLevel = this.numberOfIndentations * this.indentationSize;", "+\t\t\tint currentColumn = this.column;", "+\t\t\tthis.column = firstColumn;", "+\t\t\tif (indentParamTag) {", "+\t\t\t\tthis.indentationLevel += this.indentationSize;", "+\t\t\t\tthis.numberOfIndentations++;", "+\t\t\t}", "+\t\t\tprintIndentationIfNecessary(indentationBuffer = new StringBuffer());", "+\t\t\tthis.column = currentColumn;", "+\t\t\tthis.indentationLevel = indentLevel;", "+\t\t\tthis.numberOfIndentations = indentations;", "+\t\t}", "+", "+\t\t// Local variables init", "-\t\t\t\t\tif (textStart < previousEnd) addReplaceEdit(textStart, previousEnd, buffer.toString());", "+\t\t\t\t\tif (textStart < previousEnd) {", "+\t\t\t\t\t\taddReplaceEdit(textStart, previousEnd, buffer.toString());", "+//\t\t\t\t\t\tthis.column += buffer.length();", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean immutable = htmlTag == null ? false : htmlTag.isImmutableHtmlTag();", "+\t\t\t\t\tboolean overEndLine = false;", "+\t\t\t\t\tif (immutable) {", "+\t\t\t\t\t\toverEndLine = (this.column + htmlTag.getLength()) > this.formatter.preferences.comment_line_length;", "+\t\t\t\t\t\tif (overEndLine) {", "+\t\t\t\t\t\t\tif (newLines < 1) newLines = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer = new StringBuffer();", "-\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block);", "+\t\t\t\t\t\tif (immutable) {", "+\t\t\t\t\t\t\t// do not change immutable tags, just increment column", "+\t\t\t\t\t\t\tthis.column += getTextLength(block, htmlTag);", "+\t\t\t\t\t\t\tlinesAfter = 0;", "+\t\t\t\t\t\t\tif (overEndLine) {", "+\t\t\t\t\t\t\t\t// need to indent", "+\t\t\t\t\t\t\t\tif (indentationBuffer != null) {", "+\t\t\t\t\t\t\t\t\taddInsertEdit(node.sourceStart, indentationBuffer.toString());", "+\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\tbuffer.append(' ');", "+//\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tbuffer = new StringBuffer();", "-\t\t\t\t\ttextStart = node.sourceEnd + 1;", "+\t\t\t\t\ttextStart = node.sourceEnd+1;", "-\t\t\t\t\t\tif (wasHtmlTag || idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID))) {", "+//\t\t\t\t\t\tif (wasHtmlTag || idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID))) {", "+\t\t\t\t\t\tif (idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID)) || (idx < max && wasHtmlTag && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) != JAVADOC_IMMUTABLE_TAGS_ID)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93acf6f2affe7ce592b25c9be26a67dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "3cbc5a17035fd93e630a5ce3a447371924b2eaec", "commitAfterChange": "2fbac062d3f933d7974166e3d20ea9843fdd9750", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printLineComment()", "signatureAfterChange": "  \tprivate void printLineComment()", "diff": ["-    \tif (this.indentationLevel != 0) {", "-    \t\tif (!this.formatter.preferences.never_indent_line_comments_on_first_column", "-    \t\t\t\t|| !isOnFirstColumn(start)) {", "-    \t\t\tprintIndentationIfNecessary();", "+    \t// Print comment line indentation", "+    \tint commentIndentationLevel;", "+    \tif (this.indentationLevel == 0) {", "+    \t\tcommentIndentationLevel = this.column - 1;", "+    \t} else {", "+    \t\tif (this.formatter.preferences.never_indent_line_comments_on_first_column &&", "+    \t\t\tisOnFirstColumn(start)) {", "+\t   \t\t\tcommentIndentationLevel = this.column - 1;", "+    \t\t} else {", "+    \t\t\t// Indentation may be specific for contiguous comment", "+    \t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=293300", "+\t\t\t\tif (this.lastLineComment.contiguous) {", "+\t\t\t\t\t// The leading spaces have been set while looping in the printComment(int) method", "+\t\t\t\t\tint currentCommentIndentation = getCurrentColumn(this.lastLineComment.leadingSpaces);", "+\t\t\t\t\t// Keep the current comment indentation when over the previous contiguous line comment", "+\t\t\t\t\t// and the previous comment has not been reindented", "+\t\t\t\t\tint lastCommentColumn = this.lastLineComment.currentColumn;", "+\t\t\t\t\tif (this.tabLength > 0) {", "+\t\t\t\t\t\tif ((currentCommentIndentation % this.tabLength) == 0) {", "+\t\t\t\t\t\t\tlastCommentColumn = (lastCommentColumn / this.tabLength) * this.tabLength;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcurrentCommentIndentation = ((currentCommentIndentation / this.tabLength) + 1) * this.tabLength;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (currentCommentIndentation >= lastCommentColumn && this.lastLineComment.indentation != this.indentationLevel) {", "+\t\t\t\t\t\tint currentIndentationLevel = this.indentationLevel;", "+\t\t\t\t\t\tthis.indentationLevel = this.lastLineComment.indentation ;", "+\t\t\t\t\t\tprintIndentationIfNecessary();", "+\t\t\t\t\t\tthis.indentationLevel = currentIndentationLevel;", "+\t\t\t   \t\t\tcommentIndentationLevel = this.lastLineComment.indentation ;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tprintIndentationIfNecessary();", "+\t\t\t   \t\t\tcommentIndentationLevel = this.column - 1;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (this.currentAlignment != null && this.currentAlignment.name.equals(\"array_initializer\") && //$NON-NLS-1$", "+\t\t\t\t\t\tthis.indentationLevel < this.currentAlignment.breakIndentationLevel &&", "+\t\t\t\t\t\tthis.lastLineComment.lines > 0)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tint currentIndentationLevel = this.indentationLevel;", "+\t\t\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t    \t\t\tprintIndentationIfNecessary();", "+\t\t\t\t\t\tthis.indentationLevel = currentIndentationLevel;", "+\t\t\t   \t\t\tcommentIndentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t\t\t\t} else {", "+\t\t    \t\t\tprintIndentationIfNecessary();", "+\t\t\t   \t\t\tcommentIndentationLevel = this.column - 1;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+    \t", "+    \t// Store line comment information", "+   \t\tthis.lastLineComment.contiguous = true;", "+\t\tthis.lastLineComment.currentColumn = getCurrentCommentColumn(currentTokenStartPosition);", "+\t\tthis.lastLineComment.indentation = commentIndentationLevel;", "+\t\t", "+\t\t// Add pending space if necessary"]}], "num": 20481}
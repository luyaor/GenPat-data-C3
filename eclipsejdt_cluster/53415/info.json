{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a57592360ed88b98b3c79ea6ed5727ab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fa9bbfb6840c5da9de1f17d6a3848ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public static List buildTestsList(Class evaluationTestClass)", "signatureAfterChange": "  public static List buildTestsList(Class evaluationTestClass)", "diff": ["+\treturn buildTestsList(evaluationTestClass, 0);", "+}", "-\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\t\t\ttestNames.add(methName);", "-\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\ttests.add(constructor.newInstance(params));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bba4c8b3b2993edcb79fa777a62174de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort)", "signatureAfterChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["+ */", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth) {", "+\treturn buildTestsList(evaluationTestClass, inheritedDepth, ORDERING);", "+}", "-public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort) {", "-\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !tests.contains(methName)) {", "-\t// Add corresponding tests", "-\tif (sort>0) {", "-\t} else if (sort<0) {", "-\t\t// TODO (frederic) implement execution in reverse order"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec95b9bb58f902e58c1c0e727528a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "33cf2c285ddb9d801a508bfb1e7446c0a204b2e0", "commitAfterChange": "74a2e94cebab14bcc7fbeac54bdb9333b5128dbe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\t// Init suite with class name", "-\t\tList tests = new ArrayList();", "-\t\tConstructor constructor = null;", "-\t\ttry {", "-\t\t\t// Get class constructor", "-\t\t\tClass[] paramTypes = new Class[] { String.class };", "-\t\t\tconstructor = evaluationTestClass.getConstructor(paramTypes);", "-\t\t}", "-\t\tcatch (Exception e) {", "-\t\t\t// cannot get constructor, skip suite", "-\t\t\treturn suite;", "-\t\t}", "-", "-\t\t// Get all tests from \"test%\" methods", "-\t\tMethod[] methods = evaluationTestClass.getDeclaredMethods();", "-\t\tnextMethod: for (int m = 0, max = methods.length; m < max; m++) {", "-\t\t\ttry {", "-\t\t\t\tif (Flags.isPublic(methods[m].getModifiers()) &&", "-\t\t\t\t\tmethods[m].getName().startsWith(\"test\")) {", "-\t\t\t\t\tString methName = methods[m].getName();", "-\t\t\t\t\tObject[] params = {methName};", "-\t\t\t\t\t// no prefix, no subsets => add method", "-\t\t\t\t\tif (TESTS_PREFIX == null && TESTS_NAMES == null && TESTS_NUMBERS == null && TESTS_RANGE == null) {", "-\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t}", "-\t\t\t\t\t// no prefix or method matches prefix", "-\t\t\t\t\tif (TESTS_PREFIX == null || methName.startsWith(TESTS_PREFIX)) {", "-\t\t\t\t\t\tint numStart = TESTS_PREFIX==null ? 4 /* test */ : TESTS_PREFIX.length();", "-\t\t\t\t\t\t// tests names subset", "-\t\t\t\t\t\tif (TESTS_NAMES != null) {", "-\t\t\t\t\t\t\tfor (int i = 0, imax= TESTS_NAMES.length; i<imax; i++) {", "-\t\t\t\t\t\t\t\tif (TESTS_NAMES[i].equals(methName) || TESTS_NAMES[i].equals(methName.substring(numStart))) {", "-\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// look for test number", "-\t\t\t\t\t\tint length = methName.length();", "-\t\t\t\t\t\tif (numStart < length) {", "-\t\t\t\t\t\t\t// get test number", "-\t\t\t\t\t\t\twhile (numStart<length && !Character.isDigit(methName.charAt(numStart))) numStart++; // skip to first digit", "-\t\t\t\t\t\t\twhile (numStart<length && methName.charAt(numStart) == '0') numStart++; // skip to first non-nul digit", "-\t\t\t\t\t\t\tint n = numStart;", "-\t\t\t\t\t\t\twhile (n<length && Character.isDigit(methName.charAt(n))) n++; // skip to next non-digit", "-\t\t\t\t\t\t\tif (n>numStart && n <= length) {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(numStart, n));", "-\t\t\t\t\t\t\t\t\t// tests numbers subset", "-\t\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < TESTS_NUMBERS.length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (TESTS_NUMBERS[i] == num) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// tests range subset", "-\t\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\t\t\tif ((TESTS_RANGE[0]==-1 || num>=TESTS_RANGE[0]) && (TESTS_RANGE[1]==-1 || num<=TESTS_RANGE[1])) {", "-\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t// no subset, add all tests", "-\t\t\t\t\t\tif (TESTS_NAMES==null && TESTS_NUMBERS==null && TESTS_RANGE==null) {", "-\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (Exception e) {", "-\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "-\t\t\t}", "+\t\tList tests = buildTestsList(evaluationTestClass);", "+\t\tfor (int index=0, size=tests.size(); index<size; index++) {", "+\t\t\tsuite.addTest((Test)tests.get(index));"]}], "num": 53415}
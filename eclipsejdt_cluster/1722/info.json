{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b78350a71fadba5de4bed19f8ef36ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a6ce5212a2295c1832edd29e109776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "5a12a220bc147ceb34370c89306997df47624c96", "commitAfterChange": "2a31afdf467fbea6343929950855b2cce0d4c7fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void resolve(BlockScope upperScope)", "signatureAfterChange": "\r public void resolve(BlockScope upperScope)", "diff": ["+\t\tMethodScope methodScope = scope.methodScope();\r", "+\t\t\r", "-\t\tscope.methodScope().addLocalVariable(returnAddressVariable);\r", "+\t\tmethodScope.addLocalVariable(returnAddressVariable);\r", "-\t\tanyExceptionVariable = new LocalVariableBinding(SecretAnyHandlerName, scope.getJavaLangThrowable(), 0);\r", "-\t\tfinallyScope.addLocalVariable(anyExceptionVariable);\r", "-\t\tanyExceptionVariable.constant = NotAConstant; // not inlinable\r", "+\t\tthis.anyExceptionVariable = new LocalVariableBinding(SecretAnyHandlerName, scope.getJavaLangThrowable(), 0);\r", "+\t\tfinallyScope.addLocalVariable(this.anyExceptionVariable);\r", "+\t\tthis.anyExceptionVariable.constant = NotAConstant; // not inlinable\r", "+\r", "+\t\tthis.secretReturnValue = new LocalVariableBinding(\r", "+\t\t\tSecretLocalDeclarationName, \r", "+\t\t\t((AbstractMethodDeclaration)methodScope.referenceContext).binding.returnType, \r", "+\t\t\tAccDefault);\r", "+\t\tfinallyScope.addLocalVariable(this.secretReturnValue);\r", "+\t\tthis.secretReturnValue.constant = NotAConstant; // not inlinable\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "452127b00a3f75184eeddb1986b0b954", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fb2096a8900d812472337f28518928b970bad197", "commitAfterChange": "cb9297d0b2c1bdcf8963e89b9c822b2bdceb54dc", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 74, "signatureBeforeChange": " public boolean compile(String[] argv)", "signatureAfterChange": " public boolean compile(String[] argv)", "diff": ["+\t\tif (this.progress != null)", "+\t\t\tthis.progress.begin(this.filenames == null ? 0 : this.filenames.length * this.maxRepetition);", "-\t\t\t\tperformCompilation();", "+\t\t\t\tperformCompilation(this.maxRepetition-this.currentRepetition/*remaining iterations including this one*/);", "+\t\tif (this.progress != null)", "+\t\t\tthis.progress.done();", "-\tif (this.globalErrorsCount == 0)", "+\tif (this.globalErrorsCount == 0 && (this.progress == null || !this.progress.isCanceled()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5afdd3cfe354b0d4e038579899ba39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d7e050c27656f3c655cbceb92a53dfdd3a265d24", "commitAfterChange": "36dbe4a61ccd2e283322ec353cff1f83cf809e44", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public boolean checkAndReportBracketAnomalies(ProblemReporter problemReporter)", "signatureAfterChange": " public boolean checkAndReportBracketAnomalies(ProblemReporter problemReporter)", "diff": ["+\t\t\t\t\t\t\t\t\t\tif (this.scanner.taskTags != null) {", "+\t\t\t\t\t\t\t\t\t\t\tthis.scanner.checkTaskTag(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.scanner.taskTags != null) {", "+\t\t\t\t\t\t\t\t\tthis.scanner.checkTaskTag(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86df87be95d3395a532daca053b72cd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "354ebb443c1299f35a4e7d9feb7df720666960e5", "commitAfterChange": "f5d7f3f14e69a955635d98e0e88aeb491988cae5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "signatureAfterChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(final Scope scope)", "diff": ["-\t", "+\tif (this.typeExpected != null && this.binding != null) {", "+\t\tMethodBinding cached = this.solutionsPerTargetType != null ? this.solutionsPerTargetType.get(this.typeExpected) : null;", "+\t\tif (cached != null)", "+\t\t\treturn cached;", "+\t}", "-\t\t\t// force an inference context to be established, but avoid tunneling through overload resolution. We know this is the MSMB.", "-\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\t\t// force an inference context to be established for nested poly allocations (to be able to transfer b2), but avoid tunneling through overload resolution. We know this is the MSMB.", "+\t\t\tif (this.expressionContext == INVOCATION_CONTEXT && this.typeExpected == null)", "+\t\t\t\tconstructor = ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), this.argumentTypes, scope, this);", "+\t\tif (this.typeExpected != null)", "+\t\t\tregisterResult(this.typeExpected, constructor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18bf88094c160ddb540a2c8070f7526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f73fdb0a354f2f38e3faeb7d9eceabb3d85530d5", "commitAfterChange": "5c2dc76a8d3cf16dded8b483e956ad365692fb92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (isMethodReference() && this.haveReceiver) {", "+\t\t\t\tthis.receiverVariable = new LocalVariableBinding(", "+\t\t\t\t\t\t(SecretReceiverVariableName + this.nameSourceStart).toCharArray(), this.lhs.resolvedType,", "+\t\t\t\t\t\tClassFileConstants.AccDefault, false);", "+\t\t\t\tscope.addLocalVariable(this.receiverVariable);", "+\t\t\t\tthis.receiverVariable.setConstant(Constant.NotAConstant); // not inlinable", "+\t\t\t\tthis.receiverVariable.useFlag = LocalVariableBinding.USED;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56f3c2f7fb0d1496458a0f4dd15f74d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "be99a78ebde70e086535a722e0c99b2c26590dce", "commitAfterChange": "15b09e3657f237aa7526b08315f9749226cbc20e", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 284, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-\t\t\tStringLiteral stringLiteral = new StringLiteral(", "+\t\t\tStringLiteral stringLiteral;", "+\t\t\tif (this.recordStringLiterals && this.checkExternalizeStrings) {", "+\t\t\t\tstringLiteral = new StringLiteral(", "-\t\t\t\t\tthis.scanner.currentPosition - 1); ", "+\t\t\t\t\tthis.scanner.currentPosition - 1,", "+\t\t\t\t\tthis.scanner.getLineNumber(this.scanner.startPosition));", "+\t\t\t\tthis.compilationUnit.recordStringLiteral(stringLiteral);", "+\t\t\t} else {", "+\t\t\t\tstringLiteral = new StringLiteral(", "+\t\t\t\t\tthis.scanner.getCurrentTokenSourceString(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1,", "+\t\t\t\t\t0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc377e76d10dd40cd80e3f9e2b739cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "7915a529d4dab8b70a0cdb9189fc342b9112ed8e", "commitAfterChange": "f28c28de6ed3d2e9e475bca36caf25c219a92533", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-    \tif (lhsType == null || !lhsType.isValidBinding()) ", "-\t\t\treturn this.resolvedType = null;", "+    \tif (lhsType == null) ", "+\t\t\treturn this.resolvedType = null; \t// no hope", "+\t\tif (lhsType.problemId() == ProblemReasons.AttemptToBypassDirectSuper)", "+\t\t\tlhsType = lhsType.closestMatch();\t// improve resolving experience", "+    \tif (!lhsType.isValidBinding()) ", "+\t\t\treturn this.resolvedType = null;\t// nope, no useful type found", "-        ", "+    \tif (this.lhs.isSuper() && this.lhs.resolvedType.isInterface()) {", "+    \t\tscope.checkAppropriateMethodAgainstSupers(this.selector, someMethod, this.descriptor.parameters, this);", "+    \t}", "+"]}], "num": 1722}
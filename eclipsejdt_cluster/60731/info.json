{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eda6f648923fcf02688574959ece1b82", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac890a57aa14e0fd752395f7bad90ffe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedAnnotationBinding.java", "commitBeforeChange": "833acf9fd171cc3b88beb3f35c58318abd7b1b7c", "commitAfterChange": "e83ae1e37e0f93b696a44a9888bf8d5e9425c659", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public ElementValuePair[] getElementValuePairs()", "signatureAfterChange": "  public ElementValuePair[] getElementValuePairs()", "diff": ["-\tif (this.env != null)", "-\t\tgetAnnotationType(); // resolve the annotation type & method bindings of each pair", "-", "+\tif (this.env != null) {", "+\t\tif (this.typeUnresolved) {", "+\t\t\tgetAnnotationType(); // resolve the annotation type", "+\t\t}", "+\t\t// resolve method binding and value type (if unresolved) for each pair", "+\t\tfor (int i = this.pairs.length; --i >= 0;) {", "+\t\t\tElementValuePair pair = this.pairs[i];", "+\t\t\tMethodBinding[] methods = this.type.getMethods(pair.getName());", "+\t\t\t// there should be exactly one since the type is an annotation type.", "+\t\t\tif (methods != null && methods.length == 1) {", "+\t\t\t\tpair.setMethodBinding(methods[0]);", "+\t\t\t} // else silently leave a null there", "+\t\t\tObject value = pair.getValue();", "+\t\t\tif (value instanceof UnresolvedReferenceBinding) {", "+\t\t\t\tpair.setValue(((UnresolvedReferenceBinding) value).", "+\t\t\t\t\t\tresolve(this.env, false));", "+\t\t\t\t\t\t\t// no parameterized types in annotation values", "+\t\t\t} // do nothing for UnresolvedAnnotationBinding-s, since their ", "+\t\t\t  // content is only accessed through get* methods", "+\t\t}", "+\t\tthis.env = null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34f34a6670fcc5cb36c21505cbab569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "f5937020c6b957eed03745f57cfee671f23dd9b8", "commitAfterChange": "ad2aca1c2960107e50013b8f7866125addb168b4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["+", "+\t\tif (annotations != null && length > 0 && recipient != null && recipient.isAnnotationType()) {", "+\t\t\t// See if this is meta-annotated as repeatable and if so validate constraints.", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAnnotation annotation = sourceAnnotations[i];", "+\t\t\t\tMemberValuePair[] valuePairs = annotation.memberValuePairs();", "+\t\t\t\tReferenceBinding annotationType = annotations[i] != null ? annotations[i].getAnnotationType() : null;", "+\t\t\t\tif (annotationType != null && annotationType.id == TypeIds.T_JavaLangAnnotationRepeatable && valuePairs != null && valuePairs.length > 0) {", "+\t\t\t\t\tannotation.checkRepeatableAnnotation(valuePairs[0], scope, valuePairs[0].compilerElementPair.value);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\t\t\t\tAnnotation.checkAnnotationContainerTarget(sourceAnnotations[i], scope, annotationType, resolvedContainer);", "+\t\t\t\t\t\t\t\t// Validate the repeated *use* of a repeatable annotation.", "+\t\t\t\t\t\t\t\tAnnotation.checkContainingAnnotation(sourceAnnotations[i], scope, resolvedContainer, annotationType);", "+\t\t\t// Check for presence of repeating annotation together with the containing annotation"]}], "num": 60731}
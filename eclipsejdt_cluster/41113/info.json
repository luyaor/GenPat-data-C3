{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2df2a9f51d343136c9d2eb2a2492f6cd", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f48b428d1e1cc462210051950d6ff13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return false;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\tif (!field.isField()) return false; // ignore field initializers\r", "+\t\r", "+\t// field name\r", "+\tif (!this.matchesName(this.name, field.name))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tFieldBinding binding = field.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\r", "+\t// field type\r", "+\tif (this.typeQualification == null) {\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn false;\r", "+\t} else {\r", "+\t\tif (resolve \r", "+\t\t\t\t&& binding != null \r", "+\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(field.binding);\r", "-\t} else {\r", "-\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "-\t\t\r", "-\t\t// field name\r", "-\t\tif (!this.matchesName(this.name, field.name))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\t\t// field type\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c654d30943fdd3ed6118b946fce69789", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldDeclarationPattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof FieldDeclaration)) return false;\r", "+\r", "+\tFieldDeclaration field = (FieldDeclaration)node;\r", "+\tif (!field.isField()) return false; // ignore field initializers\r", "+\t\r", "+\t// field name\r", "+\tif (!this.matchesName(this.name, field.name))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tFieldBinding binding = field.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (declaringBinding != null && !this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\r", "+\t// field type\r", "+\tif (this.typeQualification == null) {\r", "+\t\tTypeReference fieldType = field.type;\r", "+\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "+\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "+\t\t\tfieldType.dimensions());\r", "+\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "+\t\t\treturn false;\r", "+\t} else {\r", "+\t\tif (resolve \r", "+\t\t\t\t&& binding != null \r", "+\t\t\t\t&& !this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof FieldDeclaration)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tFieldDeclaration field = (FieldDeclaration)node;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(field.binding);\r", "-\t} else {\r", "-\t\tif (!field.isField()) return IMPOSSIBLE_MATCH; // ignore field initializers\r", "-\t\t\r", "-\t\t// field name\r", "-\t\tif (!this.matchesName(this.name, field.name))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\t\t// field type\r", "-\t\tTypeReference fieldType = field.type;\r", "-\t\tchar[][] fieldTypeName = fieldType.getTypeName();\r", "-\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\tfieldTypeName[fieldTypeName.length-1], \r", "-\t\t\tfieldType.dimensions());\r", "-\t\tif (!this.matchesName(this.typeSimpleName, sourceName))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}], "num": 41113}
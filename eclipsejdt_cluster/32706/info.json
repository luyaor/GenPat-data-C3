{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8df0a434a5771288a255f28c37cd9614", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092b1b728898cfc5d3d2c59597af82bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "7065da01531bf4c318c59206b62aa1503a948abe", "commitAfterChange": "0d303c13e0085d7aef9947e46f37c617f206a066", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static FieldDeclaration convert(ISourceField sourceField)", "signatureAfterChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type)", "diff": ["-\tprivate static FieldDeclaration convert(ISourceField sourceField) {", "+\tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type) {", "-\t\t/* conversion of field constant: if not present, then cannot generate binary against ", "-\t\t\tconverted parse nodes */", "-\t\t/*", "-\t\tif (field.modifiers & AccFinal){", "+\t\tif (this.needFieldInitialization) {", "+\t\t\t/* conversion of field constant */", "+\t\t\tif (initializationSource != null) {", "+\t\t\t\tif (this.parser == null) {", "+\t\t\t\t\tthis.parser = ", "+\t\t\t\t\t\tnew Parser(", "+\t\t\t\t\t\t\tthis.problemReporter, ", "+\t\t\t\t\t\t\ttrue, ", "+\t\t\t\t\t\t\tthis.problemReporter.options.sourceLevel >= CompilerOptions.JDK1_4);", "+\t\t\t\t}", "+\t\t\t\tthis.parser.parse(field, type, this.unit, initializationSource);", "+\t\t\t}", "-\t\t*/", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280f094ffcb7457a8deebfc1a9cd01ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "2a23c62d5a3b74783613a638cca640e487db040a", "commitAfterChange": "79c4ba61903262b42e2a1f500afb283891f6e429", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding targetMethod)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding targetMethod)", "diff": ["+\t\t\t\t\t\tSyntheticMethodBinding olderBridge = getSyntheticBridgeMethod(method);", "+\t\t\t\t\t\tMethodBinding olderTarget;", "+\t\t\t\t\t\tif (olderBridge == null || ((olderTarget = olderBridge.targetMethod) == null)) {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (olderTarget.returnType.erasure() != targetMethod.returnType.erasure()", "+\t\t\t\t\t\t\t\t|| !olderTarget.areParameterErasuresEqual(targetMethod)) {", "+\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=83162", "+\t\t\t\t\t\t\tthis.scope.problemReporter().inheritedMethodsHaveNameClash(this, method, inheritedMethodToBridge);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f29539ce461c6472266f1a547106b7d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "16854241687f97764faa9f85ee1f3765fd3ba174", "commitAfterChange": "38d650016715ef9203472d6cae057b9ec4d53fc1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\tchar[] qualifiedName = this.getQualifiedName();\r", "+\t\tif (qualifiedName == null || (this.parsedUnit = (CompilationUnitDeclaration)this.locator.parsedUnits.get(qualifiedName)) == null) {\r", "+\t\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\t}\r", "+\t\t\t\t\t\t\tif (this.parsedUnit.scope == null) {\r", "+\t\t\t\t\t\t\t\t// bindings were not created (case of a FieldReferencePattern that doesn't need resolve, \r", "+\t\t\t\t\t\t\t\t// but we need to resolve because of a SingleNameReference being a potential match)\r", "+\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);\r", "+\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.completeTypeBindings(this.parsedUnit, true);\r", "+\t\t\t\t\t\t\t}\r"]}], "num": 32706}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c274a658832c79598cbd103648e1f26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39afbcd105f8bdb8cbbf0abf95132a65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java", "commitBeforeChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "commitAfterChange": "11f5a7cc7c9c65b20b52b279ac1ac913311b9b45", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void testWarningAssert()", "signatureAfterChange": " public void testWarningTokens()", "diff": ["-public void testWarningAssert() {", "+public void testWarningTokens() {", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.UsingDeprecatedConstructor));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.OverridingDeprecatedMethod));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.UsingDeprecatedType));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.UsingDeprecatedMethod));", "+\tassertEquals(\"wrong token\", \"deprecation\", CorrectionEngine.getWarningToken(IProblem.UsingDeprecatedField));", "+\tassertEquals(\"wrong token\", \"boxing\", CorrectionEngine.getWarningToken(IProblem.BoxingConversion));", "+\tassertEquals(\"wrong token\", \"boxing\", CorrectionEngine.getWarningToken(IProblem.UnboxingConversion));", "+\tassertEquals(\"wrong token\", \"dep-ann\", CorrectionEngine.getWarningToken(IProblem.FieldMissingDeprecatedAnnotation));", "+\tassertEquals(\"wrong token\", \"dep-ann\", CorrectionEngine.getWarningToken(IProblem.MethodMissingDeprecatedAnnotation));", "+\tassertEquals(\"wrong token\", \"dep-ann\", CorrectionEngine.getWarningToken(IProblem.TypeMissingDeprecatedAnnotation));", "+\tassertEquals(\"wrong token\", \"finally\", CorrectionEngine.getWarningToken(IProblem.FinallyMustCompleteNormally));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.FieldHidingLocalVariable));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.FieldHidingField));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.LocalVariableHidingLocalVariable));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.LocalVariableHidingField));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.ArgumentHidingLocalVariable));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.ArgumentHidingField));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.MaskedCatch));", "+\tassertEquals(\"wrong token\", \"hiding\", CorrectionEngine.getWarningToken(IProblem.TypeParameterHidingType));", "+\tassertEquals(\"wrong token\", \"nls\", CorrectionEngine.getWarningToken(IProblem.NonExternalizedStringLiteral));", "+\tassertEquals(\"wrong token\", \"incomplete-switch\", CorrectionEngine.getWarningToken(IProblem.MissingEnumConstantCase));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedImport));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.LocalVariableIsNeverUsed));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.ArgumentIsNeverUsed));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedPrivateConstructor));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedPrivateMethod));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedPrivateField));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedPrivateType));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedMethodDeclaredThrownException));", "+\tassertEquals(\"wrong token\", \"unused\", CorrectionEngine.getWarningToken(IProblem.UnusedConstructorDeclaredThrownException));", "+\tassertEquals(\"wrong token\", \"static-access\", CorrectionEngine.getWarningToken(IProblem.IndirectAccessToStaticMethod));", "+\tassertEquals(\"wrong token\", \"static-access\", CorrectionEngine.getWarningToken(IProblem.IndirectAccessToStaticField));", "+\tassertEquals(\"wrong token\", \"static-access\", CorrectionEngine.getWarningToken(IProblem.IndirectAccessToStaticType));", "+\tassertEquals(\"wrong token\", \"static-access\", CorrectionEngine.getWarningToken(IProblem.NonStaticAccessToStaticMethod));", "+\tassertEquals(\"wrong token\", \"static-access\", CorrectionEngine.getWarningToken(IProblem.NonStaticAccessToStaticField));", "+\tassertEquals(\"wrong token\", \"synthetic-access\", CorrectionEngine.getWarningToken(IProblem.NeedToEmulateFieldReadAccess));", "+\tassertEquals(\"wrong token\", \"synthetic-access\", CorrectionEngine.getWarningToken(IProblem.NeedToEmulateFieldWriteAccess));", "+\tassertEquals(\"wrong token\", \"synthetic-access\", CorrectionEngine.getWarningToken(IProblem.NeedToEmulateMethodAccess));", "+\tassertEquals(\"wrong token\", \"synthetic-access\", CorrectionEngine.getWarningToken(IProblem.NeedToEmulateConstructorAccess));", "+\tassertEquals(\"wrong token\", \"unqualified-field-access\", CorrectionEngine.getWarningToken(IProblem.UnqualifiedFieldAccess));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeRawConstructorInvocation));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeRawMethodInvocation));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeTypeConversion));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeRawFieldAssignment));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeGenericCast));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeReturnTypeOverride));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeRawGenericMethodInvocation));", "+\tassertEquals(\"wrong token\", \"unchecked\", CorrectionEngine.getWarningToken(IProblem.UnsafeRawGenericConstructorInvocation));", "+\tassertEquals(\"wrong token\", \"serial\", CorrectionEngine.getWarningToken(IProblem.MissingSerialVersion));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c559ddf077df1659a6c195e4939eacd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "0692ba5ff15b98317f2a4290688c2b50bed5ba7f", "commitAfterChange": "c1e0d163b88855506518c675888a22f1264cd248", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\tif (currentArg.equals(\"-1.6\") || currentArg.equals(\"-6\") || currentArg.equals(\"-6.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\tmode = Default;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\t\t} else if (CompilerOptions.VERSION_1_6.equals(version)) {", "+\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t} else if (CompilerOptions.VERSION_1_6.equals(version)) {", "+\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t// target must be 1.6 if source is 1.6", "+\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_6){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t}", "-\t\t// compliance must be 1.5 if source is 1.5", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_6) {", "+\t\t\t// compliance must be 1.6 if source is 1.6", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "+\t\t\t// compliance must be 1.5 if source is 1.5", "-\t\t} else ", "+\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "-\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) { ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_6)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t}"]}], "num": 12023}
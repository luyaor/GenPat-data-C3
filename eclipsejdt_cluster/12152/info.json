{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edc47c16d5aa574c57e675e8693f5536", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dc50743c3948d9a7dcfc554e5fd056c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "3cd7725ae10f43738c5f0638f918d9e23da18aa4", "commitAfterChange": "eebfb231fd7e6ee98747d5335cf2b140503ced34", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\tICompilationUnit sourceUnit, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\tICompilationUnit sourceUnit, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "-\t\t\t\tunit = this.unitsToProcess[0];", "+\t\t\t\t// find the right unit from what was injected via accept(ICompilationUnit,..):", "+\t\t\t\tfor (int i=0; i<this.totalUnits; i++) {", "+\t\t\t\t\tif (   this.unitsToProcess[i] != null", "+\t\t\t\t\t\t&& this.unitsToProcess[i].compilationResult.compilationUnit == sourceUnit)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tunit = this.unitsToProcess[i];", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (unit == null)", "+\t\t\t\t\tunit = this.unitsToProcess[0]; // fall back to old behavior", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "386e99aa9ce54a317627b445a1a655a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "947b49b32e7050f776cb224d4e387fbfba005680", "commitAfterChange": "5a8e0ebcbe7a48bae1be079e6a906d2255f8238d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "-\t\t\t\tunit = this.unitsToProcess[0];", "+\t\t\t\t// find the right unit from what was injected via accept(ICompilationUnit,..):", "+\t\t\t\tfor (int i=0, max = this.totalUnits; i < max; i++) {", "+\t\t\t\t\tCompilationUnitDeclaration currentCompilationUnitDeclaration = this.unitsToProcess[i];", "+\t\t\t\t\tif (currentCompilationUnitDeclaration != null", "+\t\t\t\t\t\t\t&& currentCompilationUnitDeclaration.compilationResult.compilationUnit == sourceUnit) {", "+\t\t\t\t\t\tunit = currentCompilationUnitDeclaration;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (unit == null) {", "+\t\t\t\t\tunit = this.unitsToProcess[0]; // fall back to old behavior", "+\t\t\t\t}"]}], "num": 12152}
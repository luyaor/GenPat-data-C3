{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e0c46198e8d38746fcf22afe9830c00", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bda8fce8352b10fa79a7ecccc76190d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic void testSearch2() throws CoreException", "signatureAfterChange": " \tpublic void testSearch2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "-\t\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\t", "-\t\t\t// remove type X", "-\t\t\tworkingCopy.getBuffer().setContents(\"\");", "-\t\t\tworkingCopy.makeConsistent(null);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "+\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t", "+\t\t// remove type X", "+\t\tthis.workingCopy.getBuffer().setContents(\"\");", "+\t\tthis.workingCopy.makeConsistent(null);", "-\t\t\tSearchPattern pattern = SearchPattern.createPattern(", "-\t\t\t\t\"X\", ", "-\t\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\t\tIJavaSearchConstants.DECLARATIONS, ", "-\t\t\t\tSearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "-\t\t\tJavaSearchTests.JavaSearchResultCollector resultCollector = new JavaSearchTests.JavaSearchResultCollector();", "-\t\t\tnew SearchEngine(owner).search(", "-\t\t\t\tpattern, ", "-\t\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "-\t\t\t\tSearchEngine.createWorkspaceScope(), ", "-\t\t\t\tresultCollector,", "-\t\t\t\tnull);", "-\t\t\tassertEquals(", "-\t\t\t\t\"\", // should not find any in the owner's context", "-\t\t\t\tresultCollector.toString());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tSearchPattern pattern = SearchPattern.createPattern(", "+\t\t\t\"X\", ", "+\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\tIJavaSearchConstants.DECLARATIONS, ", "+\t\t\tSearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\t\tJavaSearchTests.JavaSearchResultCollector resultCollector = new JavaSearchTests.JavaSearchResultCollector();", "+\t\tnew SearchEngine(owner).search(", "+\t\t\tpattern, ", "+\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "+\t\t\tSearchEngine.createWorkspaceScope(), ", "+\t\t\tresultCollector,", "+\t\t\tnull);", "+\t\tassertEquals(", "+\t\t\t\"\", // should not find any in the owner's context", "+\t\t\tresultCollector.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f1723abd1575639c752afc3fd96988", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic void testSearch1() throws CoreException", "signatureAfterChange": " \tpublic void testSearch1() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tICompilationUnit cu = getCompilationUnit(\"P/Y.java\");", "-\t\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tworkingCopy.getBuffer().setContents(", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"  X field;\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t);", "-\t\t\tworkingCopy.makeConsistent(null);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/Y.java\");", "+\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "+\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\tthis.workingCopy.getBuffer().setContents(", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"  X field;\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tthis.workingCopy.makeConsistent(null);", "-\t\t\tSearchPattern pattern = SearchPattern.createPattern(", "-\t\t\t\t\"X\", ", "-\t\t\t\tIJavaSearchConstants.TYPE,", "-\t\t\t\tIJavaSearchConstants.REFERENCES, ", "-\t\t\t\tSearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "-\t\t\tJavaSearchTests.JavaSearchResultCollector resultCollector = new JavaSearchTests.JavaSearchResultCollector();", "-\t\t\tnew SearchEngine(owner).search(", "-\t\t\t\tpattern, ", "-\t\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "-\t\t\t\tSearchEngine.createWorkspaceScope(), ", "-\t\t\t\tresultCollector,", "-\t\t\t\tnull);", "-\t\t\tassertEquals(", "-\t\t\t\t\"Y.java Y.field [X]\",", "-\t\t\t\tresultCollector.toString());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tSearchPattern pattern = SearchPattern.createPattern(", "+\t\t\t\"X\", ", "+\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\tIJavaSearchConstants.REFERENCES, ", "+\t\t\tSearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\t\tJavaSearchTests.JavaSearchResultCollector resultCollector = new JavaSearchTests.JavaSearchResultCollector();", "+\t\tnew SearchEngine(owner).search(", "+\t\t\tpattern, ", "+\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "+\t\t\tSearchEngine.createWorkspaceScope(), ", "+\t\t\tresultCollector,", "+\t\t\tnull);", "+\t\tassertEquals(", "+\t\t\t\"Y.java Y.field [X]\",", "+\t\t\tresultCollector.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6bb2d6db22a342ff61cd88e3dd83d55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testParseCompilationUnit2() throws CoreException", "signatureAfterChange": " \tpublic void testParseCompilationUnit2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "-\t\t\tworkingCopy = getCompilationUnit(\"P/Y.java\").getWorkingCopy(owner, null, null);", "-\t\t\tworkingCopy.getBuffer().setContents(", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t);", "-\t\t\tworkingCopy.makeConsistent(null);", "+\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "+\t\tthis.workingCopy = getCompilationUnit(\"P/Y.java\").getWorkingCopy(owner, null, null);", "+\t\tthis.workingCopy.getBuffer().setContents(", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tthis.workingCopy.makeConsistent(null);", "-\t\t\tchar[] source = (", "-\t\t\t\t\"public class Z extends Y {\\n\" +", "-\t\t\t\t\"}\").toCharArray();", "-\t\t\tASTParser parser = ASTParser.newParser(AST.JLS2);", "-\t\t\tparser.setSource(source);", "-\t\t\tparser.setUnitName(\"Z.java\");", "-\t\t\tparser.setProject(getJavaProject(\"P\"));", "-\t\t\tparser.setWorkingCopyOwner(owner);", "-\t\t\tCompilationUnit cu = (CompilationUnit) parser.createAST(null);", "+\t\tchar[] source = (", "+\t\t\t\"public class Z extends Y {\\n\" +", "+\t\t\t\"}\").toCharArray();", "+\t\tASTParser parser = ASTParser.newParser(AST.JLS2);", "+\t\tparser.setSource(source);", "+\t\tparser.setUnitName(\"Z.java\");", "+\t\tparser.setProject(getJavaProject(\"P\"));", "+\t\tparser.setWorkingCopyOwner(owner);", "+\t\tCompilationUnit cu = (CompilationUnit) parser.createAST(null);", "-\t\t\tList types = cu.types();", "-\t\t\tassertEquals(\"Unexpected number of types in AST\", 1, types.size());", "-\t\t\tTypeDeclaration type = (TypeDeclaration)types.get(0);", "-\t\t\tITypeBinding typeBinding = type.resolveBinding();", "-\t\t\tassertEquals(", "-\t\t\t\t\"Unexpected super type\", ", "-\t\t\t\t\"Y\",", "-\t\t\t\ttypeBinding.getSuperclass().getQualifiedName());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tList types = cu.types();", "+\t\tassertEquals(\"Unexpected number of types in AST\", 1, types.size());", "+\t\tTypeDeclaration type = (TypeDeclaration)types.get(0);", "+\t\tITypeBinding typeBinding = type.resolveBinding();", "+\t\tassertEquals(", "+\t\t\t\"Unexpected super type\", ", "+\t\t\t\"Y\",", "+\t\t\ttypeBinding.getSuperclass().getQualifiedName());"]}], "num": 10778}
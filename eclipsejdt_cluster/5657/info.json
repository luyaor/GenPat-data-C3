{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0940942266c00ea3639261c66b2a6d0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8fe437fec598d6f91580b5962e43ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "42d0e867915c53d81d65bec90350d5bf95684e73", "commitAfterChange": "97b330eb505dfca0980041926ec66a0261a5be5c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t\t\t// TODO (frederic) remove when bug 45110 will be fixed", "-\t\t\t\tif (JavaCore.COMPILER_PB_MISSING_JAVADOC.equals(propertyName)) {", "+\t\t\t\t// TODO (frederic) remove when jdt-ui will change to new values", "+\t\t\t\tif (inheritJavaCoreOptions && JavaCore.COMPILER_PB_INVALID_JAVADOC.equals(propertyName)) {", "+\t\t\t\t\toptions.put(JavaCore.OLD_COMPILER_PB_INVALID_ANNOTATION, value);", "+\t\t\t\t}", "+\t\t\t\tif (inheritJavaCoreOptions && JavaCore.COMPILER_PB_MISSING_JAVADOC.equals(propertyName)) {", "-\t\t\t\t// end bug 45110", "+\t\t\t\t// end to do", "-\t\t\t// bug 45112 backward compatibility.  TODO (frederic) remove after 3.0-M6", "+\t\t\t// bug 45112 backward compatibility.", "+\t\t\t// TODO (frederic) remove for 3.0", "+\t\t\t\t// TODO (frederic) remove when jdt-ui will change to new values", "+\t\t\t\toptions.put(JavaCore.OLD_COMPILER_PB_INVALID_ANNOTATION, value);", "-\t\t\t\t// TODO (frederic) remove when bug 45110 will be fixed", "+\t\t\t\t// TODO (frederic) remove when jdt-ui will change to new values", "-\t\t// TODO (frederic) remove when bug 45110 will be fixed", "-\t\tif (!options.containsKey(JavaCore.OLD_COMPILER_PB_MISSING_ANNOTATION)) {", "-\t\t\toptions.put(JavaCore.OLD_COMPILER_PB_MISSING_ANNOTATION, JavaCore.DISABLED);", "+\t\t// TODO (frederic) remove when jdt-ui will change to new values", "+\t\tif (inheritJavaCoreOptions) {", "+\t\t\tif (!options.containsKey(JavaCore.OLD_COMPILER_PB_INVALID_ANNOTATION)) {", "+\t\t\t\toptions.put(JavaCore.OLD_COMPILER_PB_INVALID_ANNOTATION, JavaCore.IGNORE);", "+\t\t\t}", "+\t\t\tif (!options.containsKey(JavaCore.OLD_COMPILER_PB_MISSING_ANNOTATION)) {", "+\t\t\t\toptions.put(JavaCore.OLD_COMPILER_PB_MISSING_ANNOTATION, JavaCore.DISABLED);", "+\t\t\t}", "-\t\t// end bug 45110", "+\t\t// end to do"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c83b051b4f6f06a0775edd0891fe660b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "diff": ["-\t\t\tParameterizedTypeBinding gA = capt.getValue();", "+\t\t\t// We come in with capture(gA), we need to work with gA below. It was necessary to establish capture at the call site.", "+\t\t\tParameterizedTypeBinding cgA = capt.getValue();", "+\t\t\tParameterizedTypeBinding gA = (ParameterizedTypeBinding) cgA.uncapture(context.scope);", "+\t\t\t\tTypeBinding cai = cgA.arguments[i];", "-\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable))", "+\t\t\t\t\t\t\t\t/* With the expected type's declared type being Collector<? super T, A, R> and gAlpha being Collector<T#0,?#1,List<T#0>#2> and cgA being", "+\t\t\t\t\t\t\t\t   Collector<T#0,capture#1-of ?,List<T#0>>, without the constraint reduction below - we will never discover A to be capture#1-of ? and", "+\t\t\t\t\t\t\t\t   claim A is jlO. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c24 - #27", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (!reduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, cai, ReductionResult.SAME)))", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t// Our = reduction transitively adds a new bound that necessitates the check below for capture. ", "+\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable) && !bound.right.isCapture())", "+\t\tthis.captures.clear();"]}], "num": 5657}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6554fcc3b7c27b8d9deb1a6ed30093c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05fe32bff9d017e24fea09c34386507", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "3e74f4ef73845fee74b0867380da94913c5a23bb", "commitAfterChange": "9b26565edd8f00a28f01564be0384c99bbdfa335", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, Expression right, int rightTypeId)", "diff": ["+\t */", "+\t\tint alternateLeftTypeId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftTypeId;", "+\t\tif (unnecessaryLeftCast && alternateLeftTypeId == leftTypeId) {", "+\t\t\t// obvious identity cast", "+\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)left); ", "+\t\t\tunnecessaryLeftCast = false;", "+\t\t}", "+\t\tint alternateRightTypeId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightTypeId;", "+\t\tif (unnecessaryRightCast && alternateRightTypeId == rightTypeId) {", "+\t\t\t// obvious identity cast", "+\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)right); ", "+\t\t\tunnecessaryRightCast = false;", "+\t\t}", "-\t\t\tint alternateLeftTypeId = unnecessaryLeftCast ? ((CastExpression)left).expression.resolvedType.id : leftTypeId;", "-\t\t\tint alternateRightTypeId = unnecessaryRightCast ? ((CastExpression)right).expression.resolvedType.id : rightTypeId;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d513565b25bd4bd4f9b4456bf09465bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4874f3c07ca9ca090ef8ea0a7c6f93e3cab913e3", "commitAfterChange": "6b709bf6ea70d3d534a47bbc5c2e238ec217a717", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public FieldBinding addSyntheticFieldForInnerclass(ReferenceBinding enclosingType)", "signatureAfterChange": "  public FieldBinding addSyntheticFieldForInnerclass(ReferenceBinding enclosingType)", "diff": ["-\tFieldBinding existingField;", "-\tif ((existingField = this.getField(synthField.name, true /*resolve*/)) != null) {", "-\t\tTypeDeclaration typeDecl = scope.referenceContext;", "-\t\tfor (int i = 0, max = typeDecl.fields.length; i < max; i++) {", "-\t\t\tFieldDeclaration fieldDecl = typeDecl.fields[i];", "-\t\t\tif (fieldDecl.binding == existingField) {", "-\t\t\t\tscope.problemReporter().duplicateFieldInType(this, fieldDecl);", "-\t\t\t\tbreak;", "+\tboolean needRecheck;", "+\tdo {", "+\t\tneedRecheck = false;", "+\t\tFieldBinding existingField;", "+\t\tif ((existingField = this.getField(synthField.name, true /*resolve*/)) != null) {", "+\t\t\tTypeDeclaration typeDecl = scope.referenceContext;", "+\t\t\tfor (int i = 0, max = typeDecl.fields.length; i < max; i++) {", "+\t\t\t\tFieldDeclaration fieldDecl = typeDecl.fields[i];", "+\t\t\t\tif (fieldDecl.binding == existingField) {", "+\t\t\t\t\tif (this.scope.environment().options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tsynthField.name = CharOperation.concat(", "+\t\t\t\t\t\t\tsynthField.name,", "+\t\t\t\t\t\t\t\"$\".toCharArray()); //$NON-NLS-1$", "+\t\t\t\t\t\tneedRecheck = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tscope.problemReporter().duplicateFieldInType(this, fieldDecl);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t}\t\t", "+\t} while (needRecheck);"]}], "num": 18601}
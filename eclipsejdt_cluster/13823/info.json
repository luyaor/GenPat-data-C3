{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04432e90df3a1ac0921b1b96326a43c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80eb819edfa9813e865b73541e054b12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((expression != null) && (expression.constant == NotAConstant)) {", "-\t\t\texpression.generateCode(currentScope, codeStream, needValue()); // no value needed if non-returning subroutine", "+\t\tif ((this.expression != null) && (this.expression.constant == NotAConstant)) {", "+\t\t\tthis.expression.generateCode(currentScope, codeStream, needValue()); // no value needed if non-returning subroutine", "-\t\tif ((expression != null) && (expression.constant != NotAConstant)) {", "-\t\t\tcodeStream.generateConstant(expression.constant, expression.implicitConversion);", "+\t\tif ((this.expression != null) && (this.expression.constant != NotAConstant)) {", "+\t\t\tcodeStream.generateConstant(this.expression.constant, this.expression.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b466a1759d042d6ca53a20338f9210e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": "  \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\tcodeStream.ldc(String.valueOf(enumConstant.name));", "-\t\t\tcodeStream.generateInlinedValue(enumConstant.binding.id);", "+\t\t\tcodeStream.ldc(String.valueOf(this.enumConstant.name));", "+\t\t\tcodeStream.generateInlinedValue(this.enumConstant.binding.id);", "-\t\tgenerateArguments(binding, arguments, currentScope, codeStream);", "+\t\tgenerateArguments(this.binding, this.arguments, currentScope, codeStream);", "-\t\tif (syntheticAccessor == null) {", "+\t\tif (this.syntheticAccessor == null) {", "-\t\t\t\tmax = syntheticAccessor.parameters.length - this.codegenBinding.parameters.length;", "+\t\t\t\tmax = this.syntheticAccessor.parameters.length - this.codegenBinding.parameters.length;", "-\t\t\tcodeStream.invokespecial(syntheticAccessor);", "+\t\t\tcodeStream.invokespecial(this.syntheticAccessor);", "-\t\tif (anonymousType != null) {", "-\t\t\tanonymousType.generateCode(currentScope, codeStream);", "+\t\tif (this.anonymousType != null) {", "+\t\t\tthis.anonymousType.generateCode(currentScope, codeStream);"]}], "num": 13823}
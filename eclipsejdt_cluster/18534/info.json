{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0240f55b204085df2937370f7bc19e9c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123ce7005e87da0a223e0992dae541ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "e760e456d0e96ba9bce504014e582b9dbdf7e542", "commitAfterChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tif (expressionType != null && checkedType != null && findNullTypeAnnotationMismatch(checkedType, expressionType, -1) > 0) {", "+\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);", "+\t\tcheckedType = checkedType.unannotated();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6dff9c640e3ca23adc915272933434", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   LocalVariableBinding local, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["+\t\tint severity = 0;", "+\t\t} else if ((severity = findNullTypeAnnotationMismatch(local.type, providedType)) > 0) {", "+\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, local.type, severity==1, currentScope.environment());"]}], "num": 18534}
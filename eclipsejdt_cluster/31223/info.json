{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae577caceb3768d289f3be27eca0847c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a7a095e7e42f60ca8952906841d5ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a53e0f6f60b988e927d553381431ae6a40286252", "commitAfterChange": "2d9b05bb71b127652760933dafce873a5ec0cb28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\tMethodBinding first = methods[0];", "-\tint index = length;", "-\twhile (--index > 0 && areReturnTypesEqual(first, methods[index])){/*empty*/}", "-\tif (index > 0) {  // All inherited methods do NOT have the same vmSignature", "-\t\tif (this.type.isInterface())", "-\t\t\tfor (int i = length; --i >= 0;)", "-\t\t\t\tif (methods[i].declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\t\t\treturn; // do not complain since the super interface already got blamed", "-\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\tif (!checkInheritedReturnTypes(methods, length))", "-\t}", "-\tindex = 0;", "+\tint index = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7946c4117d2c0ed8181187286e9cbe40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": "  boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "diff": ["-boolean checkInheritedReturnTypes(MethodBinding[] methods, int length) {", "-\tMethodBinding first = methods[0];", "-\tint index = length;", "-\twhile (--index > 0 && areReturnTypesCompatible(first, methods[index])){/*empty*/}", "-\tif (index == 0)", "-\t\treturn true;", "+boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod) {", "+\tif (areReturnTypesCompatible(method, otherMethod)) return true;", "-\t// All inherited methods do NOT have the same vmSignature", "-\tif (this.type.isInterface())", "-\t\tfor (int i = length; --i >= 0;)", "-\t\t\tif (methods[i].declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\t\treturn false; // do not complain since the super interface already got blamed", "-\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\tif (!this.type.isInterface())", "+\t\tif (method.declaringClass.isClass() || !this.type.implementsInterface(method.declaringClass, false))", "+\t\t\tif (otherMethod.declaringClass.isClass() || !this.type.implementsInterface(otherMethod.declaringClass, false))", "+\t\t\t\treturn true; // do not complain since the superclass already got blamed", "+"]}], "num": 31223}
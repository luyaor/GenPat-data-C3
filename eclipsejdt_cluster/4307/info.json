{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66c59ff655f312ae96cf5e274515474c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10fa149a612190b94f7c8460ac6d8077", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "02094f80a5c4fb457f351af88fa5c38dc019efca", "commitAfterChange": "d1a1fe4dc192a0d7931f9395cbc8ad34a751f9b0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\tmanageSyntheticReadAccessIfNecessary(currentScope, (FieldBinding) binding, this.actualReceiverType, 0);", "+\t\t\t\t\tmanageSyntheticReadAccessIfNecessary(currentScope, (FieldBinding) binding, this.actualReceiverType, 0, flowInfo);", "-\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope);", "+\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "-\t\t\t\t\t\ti + 1);", "+\t\t\t\t\t\ti + 1,", "+\t\t\t\t\t\tflowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16be959f1081dbf058b7c79c78dfb6b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "79774393baaba7f9e5f3461242a5b822bf662647", "commitAfterChange": "8b644ce068ecf49daa5da8af14e814933ab3df61", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "diff": ["-\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfTrue, ce.ifTrueNullStatus, expectedNonNullness, originalExpected);", "-\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfFalse, ce.ifFalseNullStatus, expectedNonNullness, originalExpected);", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfTrue, flowInfo, ce.ifTrueNullStatus, expectedNonNullness, originalExpected);", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfFalse, flowInfo, ce.ifFalseNullStatus, expectedNonNullness, originalExpected);", "-\tinternalAnalyseOneArgument18(currentScope, flowContext, expectedType, argument, nullStatus,", "-\t\t\t\t\t\t\t\t\texpectedNonNullness, originalExpected);", "+\tinternalAnalyseOneArgument18(currentScope, flowContext, expectedType, argument, flowInfo,", "+\t\t\t\t\t\t\t\t\tnullStatus, expectedNonNullness, originalExpected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f51e0737427443404959d1f4390b4bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "79774393baaba7f9e5f3461242a5b822bf662647", "commitAfterChange": "8b644ce068ecf49daa5da8af14e814933ab3df61", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  protected void checkAgainstNullTypeAnnotation(BlockScope scope, TypeBinding requiredType, Expression expression, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  protected void checkAgainstNullTypeAnnotation(BlockScope scope, TypeBinding requiredType, Expression expression, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfTrue, ce.ifTrueNullStatus, flowContext);", "-\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfFalse, ce.ifFalseNullStatus, flowContext);", "+\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfTrue, ce.ifTrueNullStatus, flowContext, flowInfo);", "+\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfFalse, ce.ifFalseNullStatus, flowContext, flowInfo);", "-\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, expression, nullStatus, flowContext);", "+\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, expression, nullStatus, flowContext, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b861a19c2aa8a3e45408e66f46493ad4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "02094f80a5c4fb457f351af88fa5c38dc019efca", "commitAfterChange": "d1a1fe4dc192a0d7931f9395cbc8ad34a751f9b0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": " public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-\t\t\t\tmanageSyntheticReadAccessIfNecessary(currentScope);", "+\t\t\t\tmanageSyntheticReadAccessIfNecessary(currentScope, flowInfo);", "-\t\t\tmanageSyntheticWriteAccessIfNecessary(currentScope);", "+\t\t\tmanageSyntheticWriteAccessIfNecessary(currentScope, flowInfo);", "-\tmanageEnclosingInstanceAccessIfNecessary(currentScope);", "+\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);"]}], "num": 4307}
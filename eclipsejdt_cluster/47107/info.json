{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b632b6a94212bdb43d78451d8a007bb7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ae52edd66917daf25622640981da7b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 12, "signatureBeforeChange": " private int matchLevel(TypeReference typeRef, boolean resolve)", "signatureAfterChange": " protected int matchLevel(TypeReference typeRef, boolean resolve)", "diff": ["+ */", "+protected int matchLevel(TypeReference typeRef, boolean resolve) {", "+\tif (!resolve) {", "+\t\tif (this.simpleName == null)", "+\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+", "+\t\tif (typeRef instanceof SingleTypeReference) {", "+\t\t\tif (matchesName(this.simpleName, ((SingleTypeReference) typeRef).token))", "+\t\t\t\treturn this.mustResolve ? POTENTIAL_MATCH : ACCURATE_MATCH;", "+\t\t} else { // QualifiedTypeReference", "+\t\t\tchar[][] tokens = ((QualifiedTypeReference) typeRef).tokens;", "+\t\t\t// can only be a possible match since resolution is needed to find out if it is a type ref", "+\t\t\tfor (int i = 0, max = tokens.length; i < max; i++)", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) return POTENTIAL_MATCH;", "+\t\t}", "+\t\treturn IMPOSSIBLE_MATCH;", "+\t}", "+", "+\tTypeBinding typeBinding = typeRef.resolvedType;", "+\tif (typeBinding instanceof ArrayBinding)", "+\t\ttypeBinding = ((ArrayBinding) typeBinding).leafComponentType;", "+\tif (typeBinding instanceof ProblemReferenceBinding) {", "+\t\tBinding binding = ((ProblemReferenceBinding) typeBinding).original;", "+\t\tif (binding instanceof TypeBinding)", "+\t\t\ttypeBinding = (TypeBinding) binding;", "+\t\telse if (binding == null)", "+\t\t\ttypeBinding = null;", "+\t}", "+\tif (typeBinding == null) return INACCURATE_MATCH;", "+", "+\tif (typeRef instanceof SingleTypeReference)", "+\t\treturn matchLevelForType(this.simpleName, this.qualification, typeBinding);", "+", "+\tQualifiedTypeReference qTypeRef = (QualifiedTypeReference) typeRef;", "+\tchar[][] tokens = qTypeRef.tokens;", "+\tint lastIndex = tokens.length-1;", "+\t// try to match all enclosing types for which the token matches as well.", "+\twhile (typeBinding != null && lastIndex >= 0) {", "+\t\tif (matchesName(this.simpleName, tokens[lastIndex--])) {", "+\t\t\tint level = matchLevelForType(this.simpleName, this.qualification, typeBinding);", "+\t\t\tif (level != IMPOSSIBLE_MATCH) return level;", "+\t\t}", "+\t\tif (typeBinding instanceof ReferenceBinding)", "+\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();", "+\t\telse return IMPOSSIBLE_MATCH;", "+\t}", "+\treturn IMPOSSIBLE_MATCH;", "+}", "- */", "-private int matchLevel(TypeReference typeRef, boolean resolve) {", "-\tif (!resolve) {", "-\t\tif (this.simpleName == null) {", "-\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tif (typeRef instanceof SingleTypeReference) {", "-\t\t\t\tif (this.matchesName(this.simpleName, ((SingleTypeReference)typeRef).token)) {", "-\t\t\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t} else { // QualifiedTypeReference", "-\t\t\t\tchar[][] tokens = ((QualifiedTypeReference)typeRef).tokens;", "-\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) {", "-\t\t\t\t\t\t// can only be a possible match since resolution is needed ", "-\t\t\t\t\t\t// to find out if it is a type ref", "-\t\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t}\t\t\t\t", "-\t\t} ", "-\t} else {", "-\t\tTypeBinding typeBinding = typeRef.resolvedType;", "-\t\tif (typeBinding instanceof ArrayBinding) {", "-\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;", "-\t\t}", "-\t\tif (typeBinding instanceof ProblemReferenceBinding) {", "-\t\t\tBinding binding = ((ProblemReferenceBinding)typeBinding).original;", "-\t\t\tif (binding instanceof TypeBinding) {", "-\t\t\t\ttypeBinding = (TypeBinding)binding;", "-\t\t\t} else if (binding == null) {", "-\t\t\t\ttypeBinding = null;", "-\t\t\t}", "-\t\t}", "-\t\tif (typeBinding == null) {", "-\t\t\treturn INACCURATE_MATCH;", "-\t\t}", "-\t\tif (typeRef instanceof SingleTypeReference){", "-\t\t\treturn this.matchLevelForType(this.simpleName, this.qualification, typeBinding);", "-\t\t} else { // QualifiedTypeReference", "-\t\t\tQualifiedTypeReference qTypeRef = (QualifiedTypeReference)typeRef;", "-\t\t\tchar[][] tokens = qTypeRef.tokens;", "-\t\t\tint lastIndex = tokens.length-1;", "-\t\t\t// try to match all enclosing types for which the token matches as well.", "-\t\t\twhile (typeBinding != null && lastIndex >= 0){", "-\t\t\t\tif (matchesName(this.simpleName, tokens[lastIndex--])) {", "-\t\t\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);", "-\t\t\t\t\tif (level != IMPOSSIBLE_MATCH) {", "-\t\t\t\t\t\treturn level;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (typeBinding instanceof ReferenceBinding){", "-\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();", "-\t\t\t\t} else {", "-\t\t\t\t\ttypeBinding = null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t} ", "-\t\t\t", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3990d06715e17e71f407da50773739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "349b245f426a9d65e4f19eb6b518fad225b1dccb", "commitAfterChange": "f7529141d7e838cb41f5908a7631797fc0e75f0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);"]}], "num": 47107}
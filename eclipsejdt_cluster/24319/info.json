{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531506f45f392ad75fd3e58781581233", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "503132fb09e11315ff4ce68863778d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "9033b38dbde8d5f7ad2f8e95220a29f0a229ea8f", "commitAfterChange": "810d2a46e73e304780d3a58f117d6c63103b4e72", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "signatureAfterChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "diff": ["+\t\t\tExtraDimension lastDimension = null;", "+\t\t\tif (this.ast.apiLevel() >= AST.JLS8) {", "+\t\t\t\tif (type.isArrayType()) { // should always be true", "+\t\t\t\t\tList dimensions = ((ArrayType) type).dimensions();", "+\t\t\t\t\tif (!dimensions.isEmpty()) {", "+\t\t\t\t\t\tlastDimension = (ExtraDimension) dimensions.get(dimensions.size() - 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tList annotations  = null;", "-\t\t\t\tif (type.isAnnotatable()) {", "-\t\t\t\t\tannotations = ((AnnotatableType) type).annotations();", "-\t\t\t\t} else if (type.isArrayType()) {", "-\t\t\t\t\tArrayType arrayType = (ArrayType) type;", "-\t\t\t\t\tannotations = arrayType.dimensions().isEmpty() ? null : ((arrayType.getDimensionAt(0)).annotations());", "-\t\t\t\t}", "-\t\t\t\tif (annotations != null) {", "+\t\t\t\tif (lastDimension != null) { // should always be true", "+\t\t\t\t\tList annotations = lastDimension.annotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4970fb384d63c56dc659a3a9103cd4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuilderTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void expectingNoProblemsFor(IPath[] roots)", "signatureAfterChange": " \tprotected void expectingNoProblemsFor(IPath[] roots)", "diff": ["-\t\tif (DEBUG)", "-\t\t\tprintProblemsFor(roots);", "-", "-\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\tProblem[] problems = env.getProblemsFor(roots[i]);", "-\t\t\tif (problems.length != 0)", "-\t\t\t\tassertTrue(\"unexpected problem(s) : \" + problems[0], false); //$NON-NLS-1$", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tProblem[] allProblems = allSortedProblems(roots);", "+\t\tif (allProblems != null) {", "+\t\t\tfor (int i=0, length=allProblems.length; i<length; i++) {", "+\t\t\t\tbuffer.append(allProblems[i]+\"\\n\");", "+\t\t\t}", "+\t\tString actual = buffer.toString();", "+\t\tassumeEquals(\"Unexpected problem(s)!!!\", \"\", actual); //$NON-NLS-1$"]}], "num": 24319}
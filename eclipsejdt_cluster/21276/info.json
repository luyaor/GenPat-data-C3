{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "059a67305560c94ea9a3c1dd7f435d84", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b67f08241b28922adbf6254affdd66e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "c0a0c19db3e1c410023eabce30626d520ce59204", "commitAfterChange": "b522a66d284b0239a056370560676a12fc9ec458", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": "\r \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["+\t\tIClasspathEntry targetEntry;\r", "+\t\t\r", "-\t\t\t\t\tcase IResource.PROJECT :\r", "-\t\t\t\t\t\treturn JavaCore.newProjectEntry(resolvedPath); // internal project\r", "-\t\t\t\t\tcase IResource.FILE :\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tcase IResource.PROJECT :  \r", "+\t\t\t\t\t\t// internal project\r", "+\t\t\t\t\t\ttargetEntry = JavaCore.newProjectEntry(resolvedPath);\r", "+\t\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "+\t\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\tcase IResource.FILE : \r", "-\t\t\t\t\t\tif (\"jar\"  //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t.equalsIgnoreCase(extension) || \"zip\"  //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t.equalsIgnoreCase(extension)) { // internal binary archive\r", "-\t\t\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\tif (\"jar\".equalsIgnoreCase(extension)  //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t || \"zip\".equalsIgnoreCase(extension)) {  //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t// internal binary archive\r", "+\t\t\t\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\t\t\t\tresolvedPath,\r", "+\t\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),\r", "+\t\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "+\t\t\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "+\t\t\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\tcase IResource.FOLDER : \r", "+\t\t\t\t\t\t// internal binary folder\r", "+\t\t\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResource.FOLDER : // internal binary folder\r", "-\t\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),\r", "-\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "+\t\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "+\t\t\t\t\t\treturn targetEntry;\r", "-\t\t\t\t\treturn JavaCore.newLibraryEntry(\r", "+\t\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\t\tresolvedPath,\r", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),\r", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "+\t\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "+\t\t\t\t\treturn targetEntry;\r", "+\t\t\t\t}\r", "+\t\t\t} else { // external binary folder\r", "+\t\t\t\ttargetEntry = JavaCore.newLibraryEntry(\r", "-\t\t\t\t}\r", "-\t\t\t} else { // external binary folder\r", "-\t\t\t\treturn JavaCore.newLibraryEntry(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),\r", "-\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()));\r", "+\t\t\t\ttargetEntry.setExported(entry.isExported());\r", "+\t\t\t\treturn targetEntry;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74f00c70e1f3714ea6ace720e516d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "64633e564146a810870e383e4c41b9c4f39f79e1", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["+\t\t\tHashSet externalPaths = new HashSet();", "-\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(entryPath, true);", "+\t\t\t\t\t\t\t\texternalPaths.add(entryPath);", "+\t\t\t", "+\t\t\tISchedulingRule rule = null;", "+\t\t\t\t// Use a schedule rule to avoid a race condition (https://bugs.eclipse.org/bugs/show_bug.cgi?id=369251)", "+\t\t\t\trule = ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(externalFoldersManager.getExternalFoldersProject());", "+\t\t\t\tJob.getJobManager().beginRule(rule, monitor);", "+\t\t\t\t", "+\t\t\t\tIterator externalPathIter = externalPaths.iterator();", "+\t\t\t\twhile (externalPathIter.hasNext()) {", "+\t\t\t\t\texternalFoldersManager.addFolder((IPath) externalPathIter.next(), true);", "+\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch(JavaModelException jme) {", "+\t\t\t\t", "+\t\t\t} catch (JavaModelException jme) {", "+\t\t\t} finally {", "+\t\t\t\tJob.getJobManager().endRule(rule);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecdf39b5c251c6ef2bf8f77a8bf17884", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "ac894da9b0ea3c039ce6982330527517abe54897", "commitAfterChange": "e3d1a6cf758d351b80734729b068cc97373e684d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testArrayCreation() throws Exception", "signatureAfterChange": "   \tpublic void testArrayCreation() throws Exception", "diff": ["-\t/** @deprecated using deprecated code */", "+\t\t{\t// add a new ArrayCreation", "+\t\t\tArrayCreation arrayCreation= ast.newArrayCreation();", "+\t\t\tarrayCreation.setType(ast.newArrayType(ast.newSimpleType(ast.newSimpleName(\"Object\")), 3));", "+\t\t\tarrayCreation.dimensions().add(ast.newNumberLiteral(\"1\"));", "+\t\t\tarrayCreation.dimensions().add(ast.newNumberLiteral(\"2\"));", "+\t\t\t", "+\t\t\trewrite.getListRewrite(invocation, MethodInvocation.ARGUMENTS_PROPERTY).insertLast(arrayCreation, null);", "+\t\t}", "-\t\tbuf.append(\"        new int[10][11][]);\\n\");", "+\t\tbuf.append(\"        new int[10][11][], new Object[1][2][]);\\n\");"]}], "num": 21276}
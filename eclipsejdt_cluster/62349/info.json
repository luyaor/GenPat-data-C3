{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f30b0211ec1c1df973100ccb5c7108d7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "365e8e449f399820860f75e3ee234784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "07b82c9368bd10ac7ebb1046caebd6da084b537f", "commitAfterChange": "cb61394506c50bdecec5c108eded9cebfe12f3fe", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["-\t\t\tint initializationsLength = initializations.length;", "-\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "-\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "+\t\t\t// we know that we have at least one initialization", "+\t\t\tif (initializations[0] instanceof LocalDeclaration) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((LocalDeclaration) initializations[0]);", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 1; i < initializationsLength; i++) {", "+\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((LocalDeclaration)initializations[i]));", "+\t\t\t\t}", "+\t\t\t\tforStatement.initializers().add(variableDeclarationExpression);", "+\t\t\t} else {", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "+\t\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68981b6007aa4f52157d284c5a9fb9a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  \tpublic TryStatement convert(org.eclipse.jdt.internal.compiler.ast.TryStatement statement)", "signatureAfterChange": "  \tpublic TryStatement convert(org.eclipse.jdt.internal.compiler.ast.TryStatement statement)", "diff": ["-", "+\t\tLocalDeclaration[] localDeclarations = statement.resources;", "+\t\tint resourcesLength = localDeclarations.length;", "+\t\tif (resourcesLength > 0) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t// convert it to a simple try statement tagged as MALFORMED", "+\t\t\t\t\ttryStatement.setFlags(tryStatement.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tfor (int i = 0; i < resourcesLength; i++) {", "+\t\t\t\t\t\tLocalDeclaration localDeclaration = localDeclarations[i];", "+\t\t\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression(localDeclaration);", "+\t\t\t\t\t\tint start = variableDeclarationExpression.getStartPosition();", "+\t\t\t\t\t\tint end = localDeclaration.declarationEnd;", "+\t\t\t\t\t\tvariableDeclarationExpression.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\ttryStatement.resources().add(variableDeclarationExpression);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d093ca43c3b1a95a55949ca6a87361c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "6eb04387ef3ee5335f206eb99b3c936de2847d3d", "commitAfterChange": "b01f0952648a27a3dbc985907cc5ced8ba10ed91", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void endVisit(VariableDeclarationStatement node)", "signatureAfterChange": " \t \tpublic void endVisit(ForStatement node)", "diff": ["+\tpublic void endVisit(ForStatement node) {", "+\t\tendVisitNode(node);", "+\t\tList initializers = node.initializers();", "+\t\tif (initializers.size() == 1) {", "+\t\t\tExpression expression = (Expression) initializers.get(0);", "+\t\t\tif (expression.getNodeType() == ASTNode.VARIABLE_DECLARATION_EXPRESSION) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression) expression;", "+\t\t\t\tList fragments = variableDeclarationExpression.fragments();", "+\t\t\t\tfor (int i = 0, max = fragments.size(); i <max; i++) {", "+\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(i);", "+\t\t\t\t\tSimpleName simpleName = fragment.getName();", "+\t\t\t\t\tif (CharOperation.equals(RecoveryScanner.FAKE_IDENTIFIER, simpleName.getIdentifier().toCharArray())) {", "+\t\t\t\t\t\tfragments.remove(fragment);", "+\t\t\t\t\t\tvariableDeclarationExpression.setFlags(variableDeclarationExpression.getFlags() | ASTNode.RECOVERED);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "-\t\t\t\t\tfragment.setFlags(node.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\t}\t\t\t"]}], "num": 62349}
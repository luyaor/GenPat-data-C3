{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c5f63b6e4d6782b92adcd0adf13d809", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2def759f6cef6b8369430d862a40d223", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "69622d139cf7be8059928288f19c2f5b2d55bdc5", "commitAfterChange": "bd0b42da240c9e3160dab0f23f741fededbd0813", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " final char[] optimizedCurrentTokenSource6()", "signatureAfterChange": " final char[] optimizedCurrentTokenSource6()", "diff": ["-\t\t((((long) (c0 = source[startPosition])) << 32)", "-\t\t\t+ (((long) (c1 = source[startPosition + 1])) << 24)", "-\t\t\t+ (((long) (c2 = source[startPosition + 2])) << 18)", "-\t\t\t+ ((c3 = source[startPosition + 3]) << 12)", "-\t\t\t+ ((c4 = source[startPosition + 4]) << 6)", "-\t\t\t+ (c5 = source[startPosition + 5]))", "+\t\t((((long) (c0 = this.source[this.startPosition])) << 32)", "+\t\t\t+ (((long) (c1 = this.source[this.startPosition + 1])) << 24)", "+\t\t\t+ (((long) (c2 = this.source[this.startPosition + 2])) << 18)", "+\t\t\t+ ((c3 = this.source[this.startPosition + 3]) << 12)", "+\t\t\t+ ((c4 = this.source[this.startPosition + 4]) << 6)", "+\t\t\t+ (c5 = this.source[this.startPosition + 5]))", "-\tchar[][] table = charArray_length[4][(int) hash];", "+\tchar[][] table = this.charArray_length[4][(int) hash];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41409f38348164be7773d2d51bb23676", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "2e3b506bd16c2dfca1b01615ff44e6bfc5c42dab", "commitAfterChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " final char[] optimizedCurrentTokenSource6()", "signatureAfterChange": " final char[] optimizedCurrentTokenSource6()", "diff": ["-\t\t((((long) (c0 = source[startPosition])) << 32)", "-\t\t\t+ (((long) (c1 = source[startPosition + 1])) << 24)", "-\t\t\t+ (((long) (c2 = source[startPosition + 2])) << 18)", "-\t\t\t+ ((c3 = source[startPosition + 3]) << 12)", "-\t\t\t+ ((c4 = source[startPosition + 4]) << 6)", "-\t\t\t+ (c5 = source[startPosition + 5]))", "+\t\t((((long) (c0 = this.source[this.startPosition])) << 32)", "+\t\t\t+ (((long) (c1 = this.source[this.startPosition + 1])) << 24)", "+\t\t\t+ (((long) (c2 = this.source[this.startPosition + 2])) << 18)", "+\t\t\t+ ((c3 = this.source[this.startPosition + 3]) << 12)", "+\t\t\t+ ((c4 = this.source[this.startPosition + 4]) << 6)", "+\t\t\t+ (c5 = this.source[this.startPosition + 5]))", "-\tchar[][] table = charArray_length[4][(int) hash];", "+\tchar[][] table = this.charArray_length[4][(int) hash];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba61f2362371ed574a65f8e5d2b24a83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug51226() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51226() throws JavaModelException", "diff": ["-\t\t\tString fileName = units[i].getElementName();", "-\t\t\tassertEquals(fileName+\": Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\t\tassertEquals(fileName+\": Wrong number of comments\", 1, unit.getCommentTable().length);", "+\t\t\tassertEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\t\tassertEquals(this.prefix+\"Wrong number of comments\", 1, unit.getCommentTable().length);", "-\t\t\tassertTrue(fileName+\": Comment should be a Javadoc one\", comment.isDocComment());", "+\t\t\tassertTrue(this.prefix+\"Comment should be a Javadoc one\", comment.isDocComment());", "-\t\t\tassertEquals(fileName+\": Wrong number of tags\", 1, docComment.tags().size());", "+\t\t\tassertEquals(this.prefix+\"Wrong number of tags\", 1, docComment.tags().size());", "-\t\t\tassertNull(fileName+\": Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "-\t\t\tassertEquals(fileName+\": Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "+\t\t\tassertNull(this.prefix+\"Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "+\t\t\tassertEquals(this.prefix+\"Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "-\t\t\tassertEquals(fileName+\": Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "+\t\t\tassertEquals(this.prefix+\"Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "-\t\t\tassertEquals(fileName+\": Invalid content for text element \", \"Test\", textElement.getText());", "+\t\t\tassertEquals(this.prefix+\"Invalid content for text element \", \"Test\", textElement.getText());"]}], "num": 67266}
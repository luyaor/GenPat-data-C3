{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52da6ac7eb67db563fc3820aedf6a854", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09095c4b61b907ca5e5e6ffa95eed0b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "6ec24b06cd0bcb5a744d15b20332350fd24ef6a3", "commitAfterChange": "02dcf6f68bd209d5530306427455d30bd6fad0d9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static int getPossibleComplianceLevels()", "signatureAfterChange": " \tpublic static int getPossibleComplianceLevels()", "diff": ["-\t\tif (possibleComplianceLevels == -1) {", "+\t\tif (possibleComplianceLevels == UNINITIALIZED) {", "-\t\t\t\t\tpossibleComplianceLevels = F_1_3;", "+\t\t\t\t\tpossibleComplianceLevels = RUN_JAVAC ? NONE : F_1_3;", "-\t\t\t\t\tpossibleComplianceLevels = F_1_4;", "+\t\t\t\t\tpossibleComplianceLevels = RUN_JAVAC ? NONE : F_1_4;", "-\t\t\tif (possibleComplianceLevels == -1) {", "-\t\t\t\tpossibleComplianceLevels = F_1_3;", "+\t\t\tif (possibleComplianceLevels == UNINITIALIZED) {", "-\t\t\t\tboolean canRun1_4 = !\"1.0\".equals(specVersion)", "-\t\t\t\t\t&& !CompilerOptions.VERSION_1_1.equals(specVersion)", "-\t\t\t\t\t&& !CompilerOptions.VERSION_1_2.equals(specVersion)", "-\t\t\t\t\t&& !CompilerOptions.VERSION_1_3.equals(specVersion);", "-\t\t\t\tif (canRun1_4) {", "-\t\t\t\t\tpossibleComplianceLevels |= F_1_4;", "-\t\t\t\t}", "-\t\t\t\tboolean canRun1_5 = canRun1_4 && !CompilerOptions.VERSION_1_4.equals(specVersion);", "-\t\t\t\tif (canRun1_5) {", "-\t\t\t\t\tpossibleComplianceLevels |= F_1_5;", "-\t\t\t\t}", "-\t\t\t\tboolean canRun1_6 = canRun1_5 && !CompilerOptions.VERSION_1_5.equals(specVersion);", "-\t\t\t\tif (canRun1_6) {", "-\t\t\t\t\tpossibleComplianceLevels |= F_1_6;", "-\t\t\t\t}", "-\t\t\t\tboolean canRun1_7 = canRun1_6 && !CompilerOptions.VERSION_1_6.equals(specVersion);", "-\t\t\t\tif (canRun1_7) {", "-\t\t\t\t\tpossibleComplianceLevels |= F_1_7;", "+\t\t\t\tif (!RUN_JAVAC) {", "+\t\t\t\t\tpossibleComplianceLevels = F_1_3;", "+\t\t\t\t\tboolean canRun1_4 = !\"1.0\".equals(specVersion)", "+\t\t\t\t\t\t&& !CompilerOptions.VERSION_1_1.equals(specVersion)", "+\t\t\t\t\t\t&& !CompilerOptions.VERSION_1_2.equals(specVersion)", "+\t\t\t\t\t\t&& !CompilerOptions.VERSION_1_3.equals(specVersion);", "+\t\t\t\t\tif (canRun1_4) {", "+\t\t\t\t\t\tpossibleComplianceLevels |= F_1_4;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean canRun1_5 = canRun1_4 && !CompilerOptions.VERSION_1_4.equals(specVersion);", "+\t\t\t\t\tif (canRun1_5) {", "+\t\t\t\t\t\tpossibleComplianceLevels |= F_1_5;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean canRun1_6 = canRun1_5 && !CompilerOptions.VERSION_1_5.equals(specVersion);", "+\t\t\t\t\tif (canRun1_6) {", "+\t\t\t\t\t\tpossibleComplianceLevels |= F_1_6;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean canRun1_7 = canRun1_6 && !CompilerOptions.VERSION_1_6.equals(specVersion);", "+\t\t\t\t\tif (canRun1_7) {", "+\t\t\t\t\t\tpossibleComplianceLevels |= F_1_7;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (\"1.0\".equals(specVersion)", "+\t\t\t\t\t\t\t|| CompilerOptions.VERSION_1_1.equals(specVersion)", "+\t\t\t\t\t\t\t|| CompilerOptions.VERSION_1_2.equals(specVersion)", "+\t\t\t\t\t\t\t|| CompilerOptions.VERSION_1_3.equals(specVersion)", "+\t\t\t\t\t\t\t|| CompilerOptions.VERSION_1_4.equals(specVersion)) {", "+\t\t\t\t\tpossibleComplianceLevels = NONE;", "+\t\t\t\t} else {", "+\t\t\t\t\tpossibleComplianceLevels = F_1_5;", "+\t\t\t\t\tif (!CompilerOptions.VERSION_1_5.equals(specVersion)) {", "+\t\t\t\t\t\tpossibleComplianceLevels |= F_1_6;", "+\t\t\t\t\t\tif (!CompilerOptions.VERSION_1_6.equals(specVersion)) {", "+\t\t\t\t\t\t\tpossibleComplianceLevels |= F_1_7;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\tif (possibleComplianceLevels == NONE) {", "+\t\t\tSystem.out.println(\"Skipping all compliances (found none compatible with run.javac=enabled).\");", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321c67bf256f798628196864beb2fa5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 204, "signatureBeforeChange": " private String parametersAsShortString(MethodBinding method)", "signatureAfterChange": " private String parameterBoundAsString(TypeVariableBinding typeVariable, boolean makeShort)", "diff": ["+private String parameterBoundAsString(TypeVariableBinding typeVariable, boolean makeShort) {", "+    StringBuffer nameBuffer = new StringBuffer(10);", "+    if (typeVariable.firstBound == typeVariable.superclass) {", "+        nameBuffer.append(makeShort ? typeVariable.superclass.shortReadableName() : typeVariable.superclass.readableName());", "+    }", "+    int length;", "+    if ((length = typeVariable.superInterfaces.length) > 0) {", "+\t    for (int i = 0; i < length; i++) {", "+\t        if (i > 0 || typeVariable.firstBound == typeVariable.superclass) nameBuffer.append(\" & \"); //$NON-NLS-1$", "+\t        nameBuffer.append(makeShort ? typeVariable.superInterfaces[i].shortReadableName() : typeVariable.superInterfaces[i].readableName());", "+\t    }", "+\treturn nameBuffer.toString();", "-private String parametersAsShortString(MethodBinding method) {", "-\tTypeBinding[] params = method.parameters;", "-\tStringBuffer buffer = new StringBuffer();", "-\t\tbuffer.append(new String(params[i].shortReadableName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "346bb83cce9a1be7a10f4117cc5b437b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "64e9473f82af48ea4e5b2ff0272cf87fb1916f12", "commitAfterChange": "1612764cac82755ece5bb371b617dba233a98e7f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tpublic char[][] getResults()", "signatureAfterChange": " \t\tpublic char[][] getResults()", "diff": ["-\t\t\tint count = prefixAndSuffixResultsCount + prefixResultsCount + suffixResultsCount + otherResultsCount;", "+\t\t\tint count = ", "+\t\t\t\tfirstPrefixAndFirstSuffixResultsCount", "+\t\t\t\t+ firstPrefixAndSuffixResultsCount", "+\t\t\t\t+ prefixAndFirstSuffixResultsCount", "+\t\t\t\t+ prefixAndSuffixResultsCount", "+\t\t\t\t+ firstPrefixResultsCount", "+\t\t\t\t+ prefixResultsCount", "+\t\t\t\t+ firstSuffixResultsCount", "+\t\t\t\t+ suffixResultsCount", "+\t\t\t\t+ otherResultsCount;", "+\t\t\t\t", "+\t\t\tSystem.arraycopy(firstPrefixAndFirstSuffixResults, 0, results, index, firstPrefixAndFirstSuffixResultsCount);", "+\t\t\tindex += firstPrefixAndFirstSuffixResultsCount;", "+\t\t\tSystem.arraycopy(firstPrefixAndSuffixResults, 0, results, index, firstPrefixAndSuffixResultsCount);", "+\t\t\tindex += firstPrefixAndSuffixResultsCount;", "+\t\t\tSystem.arraycopy(prefixAndFirstSuffixResults, 0, results, index, prefixAndFirstSuffixResultsCount);", "+\t\t\tindex += prefixAndFirstSuffixResultsCount;\t\t", "+\t\t\tSystem.arraycopy(firstPrefixResults, 0, results, index, firstPrefixResultsCount);", "+\t\t\tindex += firstPrefixResultsCount;", "+\t\t\tSystem.arraycopy(firstSuffixResults, 0, results, index, firstSuffixResultsCount);", "+\t\t\tindex += firstSuffixResultsCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e7c7ed68f47edc070cc39334caf3b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a7da40a1a62439fc4b1ece4f5221022e1778c205", "commitAfterChange": "0ad2415ee4f1a2517a3e261113b08f2dfc4514f8", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\tboolean didSpecifyDefaultEncoding = false;", "+\t", "+\tSet specifiedEncodings = null;", "-\t\t\t\tif (didSpecifyDefaultEncoding) {", "-\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\tif (specifiedEncodings != null) {", "+\t\t\t\t\t// check already defined encoding", "+\t\t\t\t\tif (!specifiedEncodings.contains(currentArg)) {", "+\t\t\t\t\t\tif (specifiedEncodings.size() > 1) {", "+\t\t\t\t\t\t\tthis.logger.logWarning(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.differentencodings\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tcurrentArg,", "+\t\t\t\t\t\t\t\t\tgetAllEncodings(specifiedEncodings)));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.logger.logWarning(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.differentencoding\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tcurrentArg,", "+\t\t\t\t\t\t\t\t\tgetAllEncodings(specifiedEncodings)));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tspecifiedEncodings = new HashSet();", "+\t\t\t\tspecifiedEncodings.add(currentArg);", "-\t\t\t\tdidSpecifyDefaultEncoding = true;", "+\tif (specifiedEncodings != null && specifiedEncodings.size() > 1) {", "+\t\tthis.logger.logWarning(this.bind(\"configure.multipleencodings\", //$NON-NLS-1$", "+\t\t\t\t(String) this.options.get(CompilerOptions.OPTION_Encoding),", "+\t\t\t\tgetAllEncodings(specifiedEncodings)));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66d2d4a9a40f4c4b85e11afe16f59fdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "017b3e7b4a0eb8977eddf3d61548e2949c330fd3", "commitAfterChange": "b8098db1e88dce762af01dca78879f57b1edfb90", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["-\t\tif (parent instanceof MethodDeclaration) {\r", "+\t\tif (parent instanceof MethodDeclaration && name.equals(((MethodDeclaration) parent).getName())) {\r", "-\t\tif (parent instanceof TypeDeclaration) {\r", "+\t\tif (parent instanceof TypeDeclaration && name.equals(((TypeDeclaration) parent).getName())) {\r", "-\t\tif (parent instanceof MethodInvocation\r", "-\t\t\t|| parent instanceof SuperMethodInvocation) {\r", "+\t\tif ((parent instanceof MethodInvocation && name.equals(((MethodInvocation) parent).getName()))\r", "+\t\t\t|| (parent instanceof SuperMethodInvocation && name.equals(((SuperMethodInvocation) parent).getName()))) {\r", "-\t\tif (parent instanceof FieldAccess\r", "-\t\t   || parent instanceof SuperFieldAccess) {\r", "+\t\tif ((parent instanceof FieldAccess && name.equals(((FieldAccess) parent).getName()))\r", "+\t\t   || (parent instanceof SuperFieldAccess && name.equals(((SuperFieldAccess) parent).getName()))) {\r", "-\t\tif (parent instanceof PackageDeclaration) {\r", "+\t\tif (parent instanceof PackageDeclaration && name.equals(((PackageDeclaration) parent).getName())) {\r", "-\t\tif (parent instanceof SimpleType) {\r", "+\t\tif (parent instanceof SimpleType && name.equals(((SimpleType) parent).getName())) {\r"]}], "num": 34282}
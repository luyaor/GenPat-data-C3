{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "683de53ad1a828cdff4787445560d86f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ad87579395624aba9f8e1757375f417", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "2af4d6c5a01ec5b5f71fc5f4417f402b3cbb8976", "commitAfterChange": "938c6a1a841b22e47405cea69af1a008feb65db4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tint lhsID = lhsType.id;", "-\t\tint expressionID = expressionType.id;", "-\t\t", "-\t\tboolean use15specifics = env.options.sourceLevel >= JDK1_5;", "+\t\tboolean use15specifics = scope.environment().options.sourceLevel >= JDK1_5;", "-\t\t\tif (!lhsType.isBaseType() && expressionID != T_JavaLangString) {", "-\t\t\t\tint unboxedID = env.computeBoxingType(lhsType).id;", "-\t\t\t\tif (unboxedID != lhsID) {", "-\t\t\t\t\tlhsID = unboxedID;", "+\t\t\tif (!lhsType.isBaseType() && expressionType.id != T_JavaLangString && expressionType.id != T_null) {", "+\t\t\t\tTypeBinding unboxedType = env.computeBoxingType(lhsType);", "+\t\t\t\tif (unboxedType != lhsType) {", "+\t\t\t\t\tlhsType = unboxedType;", "-\t\t\tif (!expressionType.isBaseType() && lhsID != T_JavaLangString) {", "-\t\t\t\tint unboxedID = env.computeBoxingType(expressionType).id;", "-\t\t\t\tif (unboxedID != expressionID) {", "-\t\t\t\t\texpressionID = unboxedID;", "+\t\t\tif (!expressionType.isBaseType() && lhsType.id != T_JavaLangString  && lhsType.id != T_null) {", "+\t\t\t\tTypeBinding unboxedType = env.computeBoxingType(expressionType);", "+\t\t\t\tif (unboxedType != expressionType) {", "+\t\t\t\t\texpressionType = unboxedType;", "+\t\tint lhsID = lhsType.id;", "+\t\tint expressionID = expressionType.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf12ba359542aa40deb61b70b5ba657", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "4e7caa3a77ad20f357ad4b6907dbbeb13267be58", "commitAfterChange": "90e913a6f89a9a5089d1398987b958c3f2bb0a05", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tTypeBinding lhsTb = lhs.resolveType(scope);\r", "-\tTypeBinding expressionTb = expression.resolveType(scope);\r", "-\tif (lhsTb == null || expressionTb == null)\r", "+\tTypeBinding lhsType = lhs.resolveType(scope);\r", "+\tTypeBinding expressionType = expression.resolveType(scope);\r", "+\tif (lhsType == null || expressionType == null)\r", "-\tint lhsId = lhsTb.id;\r", "-\tint expressionId = expressionTb.id;\r", "-\tif (restrainUsageToNumericTypes() && !lhsTb.isNumericType()) {\r", "-\t\tscope.problemReporter().operatorOnlyValidOnNumericType(this, lhsTb, expressionTb);\r", "+\tint lhsId = lhsType.id;\r", "+\tint expressionId = expressionType.id;\r", "+\tif (restrainUsageToNumericTypes() && !lhsType.isNumericType()) {\r", "+\t\tscope.problemReporter().operatorOnlyValidOnNumericType(this, lhsType, expressionType);\r", "-\t\t\tscope.problemReporter().invalidOperator(this, lhsTb, expressionTb);\r", "+\t\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "-\t\tscope.problemReporter().invalidOperator(this, lhsTb, expressionTb);\r", "+\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "-\tif (operator == PLUS && scope.isJavaLangObject(lhsTb)) {\r", "-\t\t// Object o = \"hello\"; \r", "-\t\t// o += \" world\"  // <--illegal\r", "-\t\tscope.problemReporter().invalidOperator(this, lhsTb, expressionTb);\r", "-\t\treturn null;\r", "+\tif (operator == PLUS){\r", "+\t\tif(scope.isJavaLangObject(lhsType)) {\r", "+\t\t\t// <Object> += <String> is illegal\r", "+\t\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "+\t\t\treturn null;\r", "+\t\t} else if (lhsType.isNumericType() && !expressionType.isNumericType()){\r", "+\t\t\t// <int> += <String> is illegal\r", "+\t\t\tscope.problemReporter().invalidOperator(this, lhsType, expressionType);\r", "+\t\t\treturn null;\r", "+\t\t}\r", "-\treturn lhsTb;\r", "+\treturn lhsType;\r"]}], "num": 33219}
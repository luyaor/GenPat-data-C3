{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6308b150d697c0c8d723ebeeafbc310", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34310804f9e9379a3d99da3949646f0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "489c8df8b304202e6d95c31d2657dd3b11577e64", "commitAfterChange": "11e96c9dafd71d6efeeef32eb7653fd847eaeb30", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tif (!use15specifics) {", "+\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t// ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>", "+\t\t\t\t\t\t\t\t\tif (interfaceType.hasIncompatibleSuperType((ReferenceBinding)castType))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+//\t\t\t\t\t\t\t\t\tTypeBinding[] types = { castType, interfaceType };", "+//\t\t\t\t\t\t\t\t\tif (scope.lowerUpperBound(types) == null) /* would answer VoidBinding if unrelated interfaces */", "+//\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a745926a2156dba16d640eb3c91ec25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-//\t\t\t\t\t\t\t\t\tTypeBinding[] types = { castType, interfaceType };", "-//\t\t\t\t\t\t\t\t\tif (scope.lowerUpperBound(types) == null) /* would answer VoidBinding if unrelated interfaces */", "-//\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\t\t\t\tif (match == null /*|| !match.isCompatibleWith(expressionType)*/) {", "-\t\t\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t// ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>", "+\t\t\t\t\t\t\t\t\tif (((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t// ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>", "+\t\t\t\t\t\t\t\t\tif (refExprType.hasIncompatibleSuperType((ReferenceBinding) castType))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t"]}], "num": 62125}
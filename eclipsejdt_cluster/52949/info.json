{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6997d86b2999423c504a2f24cd5ab8a7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c3fb2320936f9c773825b1ae979771", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "357e7f80c15f23eab4aa968e46d39c66d6f56a92", "commitAfterChange": "8164609d0329b8e1757d2e11bb01a0c925e98561", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public String createIndentString(int indentationUnits)", "signatureAfterChange": " \t     public String createIndentString(int indentationUnits)", "diff": ["-     */", "-\t\tfinal String tabChar= (String) options.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "-\t\tfinal int tabs, spaces;", "-\t\tif (JavaCore.SPACE.equals(tabChar)) {", "-\t\t\ttabs= 0;", "-\t\t\tspaces= indentationUnits * this.indentWidth;", "-\t\t} else if (JavaCore.TAB.equals(tabChar)) {", "-\t\t\t// indentWidth == tabWidth", "-\t\t\ttabs= indentationUnits;", "-\t\t\tspaces= 0;", "-\t\t} else if (DefaultCodeFormatterConstants.MIXED.equals(tabChar)){", "-\t\t\tint spaceEquivalents= indentationUnits * this.indentWidth;", "-\t\t\tif (this.tabWidth > 0) {", "-\t\t\t\ttabs= spaceEquivalents / this.tabWidth;", "-\t\t\t\tspaces= spaceEquivalents % this.tabWidth;", "-\t\t\t} else {", "-\t\t\t\ttabs= 0;", "-\t\t\t\tspaces= spaceEquivalents;", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// new indent type not yet handled", "-\t\t\t//Assert.isTrue(false); bug 90580", "-\t\t\ttabs= 0;", "-\t\t\tspaces= indentationUnits * this.indentWidth;", "-\t\t}", "-\t\t", "-\t\tStringBuffer buffer= new StringBuffer(tabs + spaces);", "-\t\tfor(int i= 0; i < tabs; i++)", "-\t\t\tbuffer.append('\\t');", "-\t\tfor(int i= 0; i < spaces; i++)", "-\t\t\tbuffer.append(' ');", "-\t\treturn buffer.toString();", "-", "+    \treturn ToolFactory.createCodeFormatter(this.options).createIndentationString(indentationUnits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edd4782455696031921079e4bfd2d264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "115aa955b9babd8a2ed6e802830c5035a2e2a28f", "commitAfterChange": "c555269f6d77af957f827daf14cfb9a3af0c01ad", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public String createIndentString(int indentationUnits)", "signatureAfterChange": "     public String createIndentString(int indent)", "diff": ["-    public String createIndentString(int indentationUnits) {", "-\t\tfinal String tabChar= (String) options.get(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR);", "-\t\tfinal int tabs, spaces;", "-\t\tif (JavaCore.SPACE.equals(tabChar)) {", "-\t\t\ttabs= 0;", "-\t\t\tspaces= indentationUnits * this.indentWidth;", "-\t\t} else if (JavaCore.TAB.equals(tabChar)) {", "-\t\t\t// indentWidth == tabWidth", "-\t\t\ttabs= indentationUnits;", "-\t\t\tspaces= 0;", "-\t\t} else if (DefaultCodeFormatterConstants.MIXED.equals(tabChar)){", "-\t\t\tint spaceEquivalents= indentationUnits * this.indentWidth;", "-\t\t\tif (this.tabWidth > 0) {", "-\t\t\t\ttabs= spaceEquivalents / this.tabWidth;", "-\t\t\t\tspaces= spaceEquivalents % this.tabWidth;", "-\t\t\t} else {", "-\t\t\t\ttabs= 0;", "-\t\t\t\tspaces= spaceEquivalents;", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// new indent type not yet handled", "-\t\t\tAssert.isTrue(false);", "-\t\t\treturn null;", "-\t\t}", "-\t\t", "-\t\tStringBuffer buffer= new StringBuffer(tabs + spaces);", "-\t\tfor(int i= 0; i < tabs; i++)", "-\t\t\tbuffer.append('\\t');", "-\t\tfor(int i= 0; i < spaces; i++)", "-\t\t\tbuffer.append(' ');", "-\t\treturn buffer.toString();", "-", "+    public String createIndentString(int indent) {", "+        StringBuffer buf= new StringBuffer(indent * this.singleIndentString.length());", "+        for (int i = 0; i < indent; i++) {", "+            buf.append(this.singleIndentString);", "+        }", "+        return buf.toString();"]}], "num": 52949}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47e59e9087aa5b8f8828cf64495ec622", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05957734dd57983f684d2a0abfda2cff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic void test056()", "signatureAfterChange": "  \tpublic void test056()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    15  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    18  iload_0\\n\" + ", "-\t\t\t\"    19  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    18  iload_0 [i]\\n\" + ", "+\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0625cbb8f1fb5606abd4ee68febf6883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tpublic void test050g()", "signatureAfterChange": " \tpublic void test050g()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> N b(A<String> s) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<N extends B> N b(A<String> s) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<String>) in type X\\n\" + ", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0834ba7f57b0f7208f6705e89770d8c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void testMultipleParameterizedStringPattern02() throws CoreException", "signatureAfterChange": " \tpublic void testMultipleParameterizedStringPattern02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [g1.t.m.def.Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [g1.t.m.def.Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bc4021dddd9c577b8f7fa74219a5561", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "838caba12e247af5c4863a120942184a24f008a6", "commitAfterChange": "a41e619c58860e4fb0ad103984917e455aa47d4f", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"    -error:<warnings separated by ,>    convert exactly the listed warnings\\n\" + ", "-        \"                                        to be reported as errors\\n\" + ", "-        \"    -error:+<warnings separated by ,>   enable additional warnings to be\\n\" + ", "-        \"                                        reported as errors\\n\" + ", "-        \"    -error:-<warnings separated by ,>   disable specific warnings to be\\n\" + ", "-        \"                                        reported as errors\\n\" + ", "+        \"    -err:<warnings separated by ,>    convert exactly the listed warnings\\n\" + ", "+        \"                                      to be reported as errors\\n\" + ", "+        \"    -err:+<warnings separated by ,>   enable additional warnings to be\\n\" + ", "+        \"                                      reported as errors\\n\" + ", "+        \"    -err:-<warnings separated by ,>   disable specific warnings to be\\n\" + ", "+        \"                                      reported as errors\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ed61b712f2b63df9c44c9a15cae761d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-\t\t\t\"1. ERROR in X3.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract void test();\\r\\n\" + ", "+\t\t\t\"1. ERROR in X3.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\t\"1. ERROR in X3a.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract void test();\\r\\n\" + ", "+\t\t\t\"1. ERROR in X3a.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\t\"1. ERROR in X3c.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tA() { void random() {} };\\r\\n\" + ", "+\t\t\t\"1. ERROR in X3c.java (at line 2)\\n\" + ", "+\t\t\t\"\tA() { void random() {} };\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147abd1107d8d2e4cd112d2d5e0f8138", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-\t\t\t\t\"class B extends A { Integer test() { return 1; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override Integer test() { return 1; } }\\n\"", "-\t\t\t\"\tclass B extends A { Integer test() { return 1; } }\\n\" + ", "-\t\t\t\"\t                    ^^^^^^^\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override Integer test() { return 1; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^^^^\\n\" + ", "-\t\t\t\t\"class B extends A { List getList() { return null; } }\\n\"", "+\t\t\t\t\"class B extends A { @Override List getList() { return null; } }\\n\"", "-\t\t\t\"\tclass B extends A { List getList() { return null; } }\\n\" + ", "-\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16df0b433727651420027e7a477983a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "46bb2fc11bd9440d4fff5ca5f3078f9c39a1d152", "commitAfterChange": "cc1ae7d3e1f618e7e804996cc901b77df44b4213", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void test19() throws JavaModelException", "signatureAfterChange": "  \tpublic void test19() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in src [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in src [in Tests]]]]]\",", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1752371053ae42e9ed9ad3db1090a72f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 343, "methodNumberAfterChange": 343, "signatureBeforeChange": " public void testBug110336e() throws CoreException", "signatureAfterChange": " public void testBug110336e() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv1 [Test]+[lv2,lv3]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv4 [Test]+[lv5,lv6]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv4 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv7 [Test]+[lv8,lv9]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.foo().lv9 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv1]+[lv2,lv3]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv2]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv4]+[lv5,lv6]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv4]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv7]+[lv8,lv9]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.foo() [Test]+[lv9]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17745f79392d4d79ffda2a4e6bed24b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "f8334cc2f4707a38bb8c442d2aa0203f2137a4bf", "commitAfterChange": "9a9eb1da67c537f40d1da2f5e30136ee08f18a99", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \t \tpublic void test058()", "signatureAfterChange": " \t \tpublic void test058()", "diff": ["-\t\t\t\"    0  iconst_5\\n\" + ", "-\t\t\t\"    1  istore_0\\n\" + ", "-\t\t\t\"    2  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    5  iload_0\\n\" + ", "-\t\t\t\"    6  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "-\t\t\t\"    9  return\\n\" + ", "+\t\t\t\"     0  iconst_5\\n\" + ", "+\t\t\t\"     1  istore_0\\n\" + ", "+\t\t\t\"     2  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\t\"     5  iload_0\\n\" + ", "+\t\t\t\"     6  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  return\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a25997210d946bb36aa29813c8132b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3f763dca9b8d462419c1e251b91d85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 123, "signatureBeforeChange": "  \tpublic void test163()", "signatureAfterChange": "  \tpublic void test163()", "diff": ["-\t\t\t\t+ \"\t                                             ^^\\n\"", "+\t\t\t\t+ \"\t                                            ^^^\\n\"", "-\t\t\t\t+ \"\t                                            ^^\\n\"", "+\t\t\t\t+ \"\t                                           ^^^\\n\"", "-\t\t\t\t+ \"\t                                                       ^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                                      ^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                                      ^\\n\"", "+\t\t\t\t+ \"\t                                                     ^^\\n\"", "-\t\t\t\t+ \"\t                                                      ^\\n\"", "+\t\t\t\t+ \"\t                                                     ^^\\n\"", "-\t\t\t\t+ \"\t                                                     ^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                                    ^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb865d2af40e9b3319ba117befdbb6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7cdc478cdd8ecd6517119ed517a89b2200812e0f", "commitAfterChange": "8a633d56819c44af45234d7a3760b2d36e5276ed", "methodNumberBeforeChange": 1211, "methodNumberAfterChange": 1211, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2067175f4ec651d181c073878ba52519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "65b4e15798189e35310112aac16988bcdf7eef0b", "commitAfterChange": "78b182da9e370f6f00f239fd2a2de8309bdf9aac", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void test125()", "signatureAfterChange": " public void test125()", "diff": ["-\t\t? \t\"private class X$1$Local {\\n\" + ", "+\t\t? \t\"class X$1$Local {\\n\" + ", "-\t\t\t\"     inner name: #43 Local, accessflags: 2 private ]\\n\"", "+\t\t\t\"     inner name: #43 Local, accessflags: 0 default]\\n\"", "-\t\t\t?  \t\"private class X$1$Local {\\n\" + ", "+\t\t\t?  \t\"class X$1$Local {\\n\" + ", "-\t\t\t\t\"     inner name: #40 Local, accessflags: 2 private ]\\n\"", "-\t\t\t:\t\"private class X$1Local {\\n\" + ", "+\t\t\t\t\"     inner name: #40 Local, accessflags: 0 default]\\n\"", "+\t\t\t:\t\"class X$1Local {\\n\" + ", "-\t\t\t\t\"     inner name: #39 Local, accessflags: 2 private ]\\n\" + ", "+\t\t\t\t\"     inner name: #39 Local, accessflags: 0 default]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21dd82eefdd6992d7fec5ecaca299583", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion_Reflection() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion_Reflection() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber z expected true but got false\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber s expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber i expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber c expected 1 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber b expected 49 but got 0\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for memeber l expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member z expected true but got false\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member s expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member i expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member c expected 1 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member b expected 49 but got 0\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"value mismatch for member l expected 49 but got 0\", testPath),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23121f47cd87bf4e910fe032d736a757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "f8334cc2f4707a38bb8c442d2aa0203f2137a4bf", "commitAfterChange": "9a9eb1da67c537f40d1da2f5e30136ee08f18a99", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic void test062()", "signatureAfterChange": " \t \tpublic void test062()", "diff": ["-\t\t\t\"    0  iconst_5\\n\" + ", "-\t\t\t\"    1  istore_0\\n\" + ", "-\t\t\t\"    2  getstatic #31 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    5  iload_0\\n\" + ", "-\t\t\t\"    6  invokevirtual #37 <Method java/io/PrintStream.println(I)V>\\n\" + ", "-\t\t\t\"    9  return\\n\" + ", "+\t\t\t\"     0  iconst_5\\n\" + ", "+\t\t\t\"     1  istore_0\\n\" + ", "+\t\t\t\"     2  getstatic #31 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\t\"     5  iload_0\\n\" + ", "+\t\t\t\"     6  invokevirtual #37 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  return\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26203b622e5aef2c91d0b868544e1449", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 291, "signatureBeforeChange": " public void test0903_non_null_protection_tag()", "signatureAfterChange": " public void test0903_non_null_protection_tag()", "diff": ["-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + ", "-\t\t\"The variable o may be null\\n\" + ", "+\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aeadbd281e4d28c5c9ff1ab37fe33a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void test112()", "signatureAfterChange": " \tpublic void test112()", "diff": ["-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c2c6edf2183dad0a75c9affad5edb20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e5a87e6e5f218a9022340bd6600f05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": " \tpublic void test051a()", "signatureAfterChange": " \tpublic void test051a()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tvoid foo(A<String> a) {}\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "-\t\t\t\"Duplicate method foo(A<String>) in type X\\n\" + ", "+\t\t\t\"Method foo(A<String>) has the same erasure foo(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tvoid foo(A<Integer> a) {}\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tvoid foo(A<Integer> a) {}\\n\" + ", "-\t\t\t\"Duplicate method foo(A<Integer>) in type X\\n\" + ", "+\t\t\t\"Method foo(A<Integer>) has the same erasure foo(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31edeabf270ad1e5ed27755306aa74a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3829568d8dccb9ede6bdb4a6c32bad8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "f8b6b46eb549003d602669d933e8c4d912cfd694", "commitAfterChange": "ccc0792be277c61897d6812d61e917773111eeb0", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 226, "signatureBeforeChange": " public void testBug260381_wksp2_05() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_05() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390a98381d78ffcada6acd99808a340e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "80adc997ad4594d86c098c1d65d4ab0307d988e5", "commitAfterChange": "bd9f1604b7023aa96308289af9053f02dd227d2f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void test017()", "signatureAfterChange": "  \tpublic void test017()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], 1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], 1);\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], 1, 1);\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], 1, 1);\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\tY.count(new int[0], 1, 1, 1);\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tY.count(new int[0], 1, 1, 1);\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d8d8717abf06bbdcbd1ca3930d6ec6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"1. ERROR in X4.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract void test();\\r\\n\" + ", "+\t\t\t\"1. ERROR in X4.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\t\"1. ERROR in X4a.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tpublic abstract void test();\\r\\n\" + ", "+\t\t\t\"1. ERROR in X4a.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\t\"1. ERROR in X4c.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tA() { void random() {} };\\r\\n\" + ", "+\t\t\t\"1. ERROR in X4c.java (at line 2)\\n\" + ", "+\t\t\t\"\tA() { void random() {} };\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf70c163bbe2f8d835efe622a4aeb2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tpublic void test068()", "signatureAfterChange": "  \tpublic void test068()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     9  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    15  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    18  iload_0\\n\" + ", "-\t\t\t\"    19  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    15  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    18  iload_0 [i]\\n\" + ", "+\t\t\t\"    19  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3de0eec89ac74bb43c4cdc688ec32480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "424b3d5b67618e14a6425d3a14155227", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6ed1cf547d485640f7cc1b111de3d2b3735f006a", "commitAfterChange": "166c95a7f5d14add7c42133646d3ce6662785db7", "methodNumberBeforeChange": 407, "methodNumberAfterChange": 407, "signatureBeforeChange": " public void testBug317719h() throws Exception", "signatureAfterChange": " public void testBug317719h() throws Exception", "diff": ["-\t\t\t\"\tpublic class Test<Key, Value> extends LinkedHashMap<Key, Collection<Value>> {\\n\" + ", "+\t\t\t\"\tpublic class Test<Key, Value> extends HashMap<Key, Collection<Value>> {\\n\" + ", "-\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type LinkedHashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type HashMap<K,V> but does not override it\\n\" + ", "-\t\t\t\t\"\tpublic class Test<Key, Value> extends LinkedHashMap<Key, Collection<Value>> {\\n\" + ", "+\t\t\t\t\"\tpublic class Test<Key, Value> extends HashMap<Key, Collection<Value>> {\\n\" + ", "-\t\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type LinkedHashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\t\"Name clash: The method get(Key) of type Test<Key,Value> has the same erasure as get(Object) of type HashMap<K,V> but does not override it\\n\" + ", "-\t\t\t\"import java.util.LinkedHashMap;\\n\" +", "-\t\t\t\"public class Test<Key, Value> extends LinkedHashMap<Key, Collection<Value>> {\\n\" +", "+\t\t\t\"import java.util.HashMap;\\n\" +", "+\t\t\t\"public class Test<Key, Value> extends HashMap<Key, Collection<Value>> {\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43433db66df2e281eca940a9c717c82f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test008() throws JavaModelException", "signatureAfterChange": "  public void test008() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"code[JAVADOC_INLINE_TAG]{{@code }, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal }, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"code[JAVADOC_INLINE_TAG]{{@code}, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal}, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "435a93959449f3ee2fa390cd6089d12b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 105, "signatureBeforeChange": "  \tpublic void test144()", "signatureAfterChange": "  \tpublic void test144()", "diff": ["-\t\t\t\t+ \"\t                             ^\\n\"", "+\t\t\t\t+ \"\t                            ^^\\n\"", "-\t\t\t\t+ \"\t                            ^\\n\"", "+\t\t\t\t+ \"\t                           ^^\\n\"", "-\t\t\t\t+ \"\t                                       ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                      ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                      ^\\n\"", "+\t\t\t\t+ \"\t                                     ^^\\n\"", "-\t\t\t\t+ \"\t                                      ^^^^^\\n\"", "+\t\t\t\t+ \"\t                                     ^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                     ^\\n\"", "+\t\t\t\t+ \"\t                                    ^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44cac7969a92bff21c26af9101633702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "7109b1b8695adc90efc89b381fbef11f66adc5d7", "commitAfterChange": "737754e9e10e391c87e1274f991c2e257be4069b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion() throws Exception", "diff": ["-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber s expected java.lang.Short but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber i expected java.lang.Integer but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber c expected java.lang.Character but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber b expected java.lang.Byte but got java.lang.Float\", testPath),", "-\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for memeber l expected java.lang.Long but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member z expected java.lang.Boolean but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member s expected java.lang.Short but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member i expected java.lang.Integer but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member c expected java.lang.Character but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member b expected java.lang.Byte but got java.lang.Float\", testPath),", "+\t\t\t\tnew ExpectedProblem(\"\", \"type mismatch for member l expected java.lang.Long but got java.lang.Float\", testPath),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "459884530dfa210e537d26c2c1165c50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug96237_Public07()", "signatureAfterChange": " \tpublic void testBug96237_Public07()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4613134cc88377a035f270f2aaed006e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsBugsTest.java", "commitBeforeChange": "bb2219f73a65d80105bc92727133ff8011c4e284", "commitAfterChange": "28ac5b5368dcd64802ba668460817e2bb2a5db8e", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 226, "signatureBeforeChange": " public void testBug260381_wksp2_05() throws JavaModelException", "signatureAfterChange": " public void testBug260381_wksp2_05() throws JavaModelException", "diff": ["-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + ", "-\t\t\"\t * \\n\" + ", "+\t\t\"\t *\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48af58a0e4215c71f6cbb61f77b36048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "c8d7e735b1fdf27bd805f7e5ae0a6eacad7e4530", "commitAfterChange": "8fed2cc02e45d0c02f4805c1a6592bef37ca778a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void test037() throws Exception", "signatureAfterChange": " public void test037() throws Exception", "diff": ["-\t\t\"  // Method descriptor #43 (Ljava/util/ArrayList;)V\\n\" +", "-\t\t\"  // Signature: <T:Ljava/util/ArrayList<Ljava/lang/String;>;>(TT;)V\\n\" +", "-\t\t\"  // Stack: 2, Locals: 3\\n\" +", "-\t\t\"  public static void foo(java.util.ArrayList t);\\n\" +", "-\t\t\"     0  aload_0 [t]\\n\" +", "-\t\t\"     1  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [45]\\n\" +", "-\t\t\"     4  astore_2\\n\" +", "-\t\t\"     5  goto 25\\n\" +", "-\t\t\"     8  aload_2\\n\" +", "-\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [49] [nargs: 1]\\n\" +", "-\t\t\"    14  checkcast java.lang.String [19]\\n\" +", "-\t\t\"    17  astore_1 [s]\\n\" +", "-\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [55]\\n\" +", "-\t\t\"    21  aload_1 [s]\\n\" +", "-\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [61]\\n\" +", "-\t\t\"    25  aload_2\\n\" +", "-\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [67] [nargs: 1]\\n\" +", "-\t\t\"    31  ifne 8\\n\" +", "-\t\t\"    34  return\\n\" +", "-\t\t\"      Line numbers:\\n\" +", "-\t\t\"        [pc: 0, line: 8]\\n\" +", "-\t\t\"        [pc: 18, line: 9]\\n\" +", "-\t\t\"        [pc: 25, line: 8]\\n\" +", "-\t\t\"        [pc: 34, line: 10]\\n\" +", "-\t\t\"      Local variable table:\\n\" +", "-\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: java.util.ArrayList\\n\" +", "-\t\t\"        [pc: 18, pc: 25] local: s index: 1 type: java.lang.String\\n\" +", "-\t\t\"      Local variable type table:\\n\" +", "+\t\t\"  // Method descriptor #41 (Ljava/util/ArrayList;)V\\n\" + ", "+\t\t\"  // Signature: <T:Ljava/util/ArrayList<Ljava/lang/String;>;>(TT;)V\\n\" + ", "+\t\t\"  // Stack: 2, Locals: 3\\n\" + ", "+\t\t\"  public static void foo(java.util.ArrayList t);\\n\" + ", "+\t\t\"     0  aload_0 [t]\\n\" + ", "+\t\t\"     1  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator [43]\\n\" + ", "+\t\t\"     4  astore_2\\n\" + ", "+\t\t\"     5  goto 25\\n\" + ", "+\t\t\"     8  aload_2\\n\" + ", "+\t\t\"     9  invokeinterface java.util.Iterator.next() : java.lang.Object [47] [nargs: 1]\\n\" + ", "+\t\t\"    14  checkcast java.lang.String [19]\\n\" + ", "+\t\t\"    17  astore_1 [s]\\n\" + ", "+\t\t\"    18  getstatic java.lang.System.out : java.io.PrintStream [53]\\n\" + ", "+\t\t\"    21  aload_1 [s]\\n\" + ", "+\t\t\"    22  invokevirtual java.io.PrintStream.print(java.lang.String) : void [59]\\n\" + ", "+\t\t\"    25  aload_2\\n\" + ", "+\t\t\"    26  invokeinterface java.util.Iterator.hasNext() : boolean [65] [nargs: 1]\\n\" + ", "+\t\t\"    31  ifne 8\\n\" + ", "+\t\t\"    34  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 8]\\n\" + ", "+\t\t\"        [pc: 18, line: 9]\\n\" + ", "+\t\t\"        [pc: 25, line: 8]\\n\" + ", "+\t\t\"        [pc: 34, line: 10]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 35] local: t index: 0 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 18, pc: 25] local: s index: 1 type: java.lang.String\\n\" + ", "+\t\t\"      Local variable type table:\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4937fc432b4a74c4d555e7f25cbf7acb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocFieldCompletionModelTest.java", "commitBeforeChange": "b90d03d10edcf027d98e7722223f9b745793a6bb", "commitAfterChange": "e353428f475e976a008afa67ff7f1e16e03ec95c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test007() throws JavaModelException", "signatureAfterChange": "  public void test007() throws JavaModelException", "diff": ["-\t\t\"link[JAVADOC_INLINE_TAG]{{@link }, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot }, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain }, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"value[JAVADOC_INLINE_TAG]{{@value }, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"code[JAVADOC_INLINE_TAG]{{@code }, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal }, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"link[JAVADOC_INLINE_TAG]{{@link}, null, null, link, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"docRoot[JAVADOC_INLINE_TAG]{{@docRoot}, null, null, docRoot, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"linkplain[JAVADOC_INLINE_TAG]{{@linkplain}, null, null, linkplain, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"value[JAVADOC_INLINE_TAG]{{@value}, null, null, value, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"code[JAVADOC_INLINE_TAG]{{@code}, null, null, code, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "+\t\t\"literal[JAVADOC_INLINE_TAG]{{@literal}, null, null, literal, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49f99858d0e6b35d5afca58429b1136a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 346, "signatureBeforeChange": " public void testBug110336h() throws CoreException", "signatureAfterChange": " public void testBug110336h() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java b110336.Test.static {}.lv1 [Test]+[lv2,lv3]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.static {}.lv2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.static {}.lv4 [Test]+[lv5,lv6]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.static {}.lv4 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.static {}.lv7 [Test]+[lv8,lv9]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.static {}.lv9 [Test]\",", "+\t\t\"src/b110336/Test.java b110336.Test.static {} [Test]+[lv1]+[lv2,lv3]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.static {} [Test]+[lv2]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.static {} [Test]+[lv4]+[lv5,lv6]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.static {} [Test]+[lv4]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.static {} [Test]+[lv7]+[lv8,lv9]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.static {} [Test]+[lv9]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c593aa838662cccfdd5c48870a96de5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"The return type is incompatible with J.c(), X.c()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.c(), X.c()\\n\" +", "-\t\t\"The return type is incompatible with I.b(), X.b()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.b(), X.b()\\n\" +", "-\t\t\"The return type is incompatible with J.a(), I.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.a(), I.a()\\n\" +", "-\t\t\"The return type is incompatible with J.c(), X.c()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods J.c(), X.c()\\n\" +", "-\t\t\"The return type is incompatible with I.b(), X.b()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.b(), X.b()\\n\" +", "-\t\t\"The return type is incompatible with I.a(), J.a()\\n\" +", "+\t\t\"The return types are incompatible for the inherited methods I.a(), J.a()\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9fef75f0010db3bd5b218b1b80ade9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": "  \tpublic void test153()", "signatureAfterChange": "  \tpublic void test153()", "diff": ["-\t\t\t\t+ \"\t                                              ^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                             ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                             ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                            ^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                                        ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                                       ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                                       ^\\n\"", "+\t\t\t\t+ \"\t                                                      ^^\\n\"", "-\t\t\t\t+ \"\t                                                       ^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                                      ^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                                      ^\\n\"", "+\t\t\t\t+ \"\t                                                     ^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52fe3d8dfcb44ad58f3556c870cb3477", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test0007()", "signatureAfterChange": " public void test0007()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"    break ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"    break;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"        case BAR : ;\\n\" +", "-\t\t\"            break ;\\n\" +", "-\t\t\"        case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"        case BAR :\\n\" +", "+\t\t\"            break;\\n\" +", "+\t\t\"        case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b4ccbb55daf0a38e4006e0324b22b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test010()", "signatureAfterChange": " public void test010()", "diff": ["-\t\t\"     0  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"     3  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"     5  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     3  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"     5  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "-\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    12  ldc #31 <String \\\"SHOULDN\\'T BE GENERATED\\\">\\n\" + ", "-\t\t\"    14  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    12  ldc <String \\\"SHOULDN\\'T BE GENERATED\\\"> [31]\\n\" + ", "+\t\t\"    14  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "566e6e62fbc844aca01a4b9bf3f1342b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 493, "methodNumberAfterChange": 493, "signatureBeforeChange": "\t\t \t \tpublic void test491()", "signatureAfterChange": "\t\t \t \tpublic void test491()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from ? to ?\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture-of ? to capture-of ?\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<? extends Number> to X<? super Number>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Number> to X<? super Number>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from ? extends Number to ? extends Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture-of ? extends Number to capture-of ? extends Number\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<? super Number> to X<? extends Number>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture-of ? super Number> to X<? extends Number>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from ? super Number to ? extends Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture-of ? super Number to capture-of ? extends Number\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from ? super Number to ? super Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture-of ? super Number to capture-of ? super Number\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5789a46a78f8e381c3578666e79ba513", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tpublic void test148()", "signatureAfterChange": "  \tpublic void test148()", "diff": ["-\t\t\t\t+ \"\t                              ^\\n\"", "+\t\t\t\t+ \"\t                             ^^\\n\"", "-\t\t\t\t+ \"\t                             ^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                            ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                         ^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                        ^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                        ^\\n\"", "+\t\t\t\t+ \"\t                                       ^^\\n\"", "-\t\t\t\t+ \"\t                                        ^^^^^\\n\"", "+\t\t\t\t+ \"\t                                       ^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                       ^\\n\"", "+\t\t\t\t+ \"\t                                      ^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58abc39da33376bb6117f84793089ab6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"    38  invokevirtual #32 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "+\t\t\"    38  invokevirtual #31 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    48  invokeinterface [nargs : 1] #38 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "+\t\t\"    48  invokeinterface [nargs : 1] #37 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    59  invokevirtual #42 <Method java/lang/Integer.intValue()I>\\n\" + ", "+\t\t\"    59  invokevirtual #41 <Method java/lang/Integer.intValue()I>\\n\" + ", "-\t\t\"    66  invokeinterface [nargs : 1] #46 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    66  invokeinterface [nargs : 1] #45 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "-\t\t\"    74  getstatic #52 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    74  getstatic #51 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    78  invokevirtual #57 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\"    78  invokevirtual #56 <Method java/io/PrintStream.println(I)V>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58b43aaeb799a22e1b399626e24dc143", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 371, "methodNumberAfterChange": 371, "signatureBeforeChange": " \tpublic void test367()", "signatureAfterChange": " \tpublic void test367()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tvoid foo1(MX<? extends MX> target, MX<MX<String>> value) {\\r\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tvoid foo1(MX<? extends MX> target, MX<MX<String>> value) {\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 9)\\r\\n\" + ", "-\t\t\t\"\tvoid foo3(MX<? super MX> target, MX<MX<String>> value) {\\r\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tvoid foo3(MX<? super MX> target, MX<MX<String>> value) {\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 10)\\r\\n\" + ", "-\t\t\t\"\ttarget= value; // foo3\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\ttarget= value; // foo3\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fed883299089a70f7bd54078c339dc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testSingleParameterizedStringPattern02() throws CoreException", "signatureAfterChange": " \tpublic void testSingleParameterizedStringPattern02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [g1.t.s.def.Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f6405dab34510de0c03fcb5824ed4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 206, "methodNumberAfterChange": 206, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"1. ERROR in D.java (at line 2)\\r\\n\" +", "-\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" +", "+\t\t\t\"1. ERROR in D.java (at line 2)\\n\" +", "+\t\t\t\"\t@Override void m(Number t) {}\\n\" +", "-\t\t\t\"2. ERROR in D.java (at line 2)\\r\\n\" +", "-\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" +", "+\t\t\t\"2. ERROR in D.java (at line 2)\\n\" +", "+\t\t\t\"\t@Override void m(Number t) {}\\n\" +", "-\t\t\t\"3. WARNING in D.java (at line 6)\\r\\n\" +", "-\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\r\\n\" +", "+\t\t\t\"3. WARNING in D.java (at line 6)\\n\" +", "+\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "636292d5699e71a429307fd4f00a5629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/NameReferenceCompletionTest.java", "commitBeforeChange": "18f82f9b3d96b0cbaed089b15d61446eb0618142", "commitAfterChange": "8ab73b3fd3410dbf30af626275dd87b20a54b001", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testQualifiedNameReferenceShrinkAll()", "signatureAfterChange": " public void testQualifiedNameReferenceShrinkAll()", "diff": ["-\t\t\"\t\tcom.ibm.tests.Xxx o = new Y(i);\t\t\\n\" +", "+\t\t\"\t\ta.b.c.Xxx o = new Y(i);\t\t\\n\" +", "-\t\t\"com\",", "+\t\t\"\t\ta\",", "-\t\t\"<CompleteOnName:com>\",", "+\t\t\"<CompleteOnName:a>\",", "-\t\t\"    <CompleteOnName:com>;\\n\" +", "+\t\t\"    <CompleteOnName:a>;\\n\" +", "-\t\t\"com\",", "+\t\t\"a\",", "-\t\t\"com\",", "+\t\t\"a\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665f248d4c2894051588e30fdb9d3849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test0005()", "signatureAfterChange": " public void test0005()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"    break ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"    break;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case BAR : ;\\n\" +", "-\t\t\"          break ;\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case BAR :\\n\" +", "+\t\t\"          break;\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67e12a6d7cfe05784bdccb34180b9465", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void test0006()", "signatureAfterChange": " public void test0006()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"    break ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"    break;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case BAR : ;\\n\" +", "-\t\t\"          break ;\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case BAR :\\n\" +", "+\t\t\"          break;\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68869a628429c59791e47c2971732e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 834, "methodNumberAfterChange": 834, "signatureBeforeChange": " public void test828()", "signatureAfterChange": " public void test828()", "diff": ["-\t\t\"Type safety: Transformable is a raw type. References to generic type Transformable<T> should be parameterized\\n\" + ", "+\t\t\"Transformable is a raw type. References to generic type Transformable<T> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "-\t\t\"Type safety: Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + ", "+\t\t\"Volume is a raw type. References to generic type Volume<V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba6cb76c4a5634505b913a2248027d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void test074()", "signatureAfterChange": " public void test074()", "diff": ["-\t\t\"1. ERROR in X4a.java (at line 3)\\n\" + ", "-\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\"\t                     ^^^^^^\\n\" + ", "-\t\t\"The enum X4a can only define the abstract method test() if it also defines enum constants with corresponding implementations\\n\" + ", "+\t\t\"1. ERROR in X4a.java (at line 2)\\n\" + ", "+\t\t\"\tA;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + ", "-\t\t\"\t    ^\\n\" + ", "-\t\t\"The type new X4c(){} must implement the inherited abstract method X4c.test()\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cc4236dedaa4667484325370773a0c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "80adc997ad4594d86c098c1d65d4ab0307d988e5", "commitAfterChange": "bd9f1604b7023aa96308289af9053f02dd227d2f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test023()", "signatureAfterChange": " \tpublic void test023()", "diff": ["-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"    public static void main (String[] args) {\\r\\n\" + ", "-\t\t\t\t\"        new X().test (new byte[5]);\\r\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"    public static void main (String[] args) {\\n\" + ", "+\t\t\t\t\"        new X().test (new byte[5]);\\n\" + ", "-\t\t\t\t\"    }\\r\\n\" + ", "-\t\t\t\t\"    private void test (Object... params) {\\r\\n\" + ", "-\t\t\t\t\"    }\\r\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    private void test (Object... params) {\\n\" + ", "+\t\t\t\t\"    }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4c8e2835034acb51ffe8e8ba78b81f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Unsafe type operation: The cast from List to parameterized type List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to List<X> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type List to type List<X>. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type List is converted to List<X>. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: Should not convert expression of raw type Iterator to type Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of raw type Iterator is converted to Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from Collection to parameterized type List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Collection to List<X> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unsafe type operation: The cast from List to parameterized type Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "-\t\t\t\"Unnecessary cast to type Collection<?> for expression of type List\\n\" + ", "+\t\t\t\"Unnecessary cast from List to Collection<?>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f91de358ca0f5d7c2583b69f689ba11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LocalVariableTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "845d2e8457ba0f850503aec1e4cf782f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 589, "methodNumberAfterChange": 589, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class !|Test|! {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest !|test|!;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t!|Test|! test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid !|test|!(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(!|Test|! test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.!|test|!) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85b8df70c94d0154d0d911c227cb75a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82d58f9af854b98a92f7d694d40ac1e84e13013c", "commitAfterChange": "6d114aac1fbfd4c23041534efbb02c24c883ba25", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"1. ERROR in X3a.java (at line 3)\\n\" + ", "-\t\t\"\tpublic abstract void test();\\n\" + ", "-\t\t\"\t                     ^^^^^^\\n\" + ", "-\t\t\"The enum X3a can only define the abstract method test() if it also defines enum constants with corresponding implementations\\n\" + ", "+\t\t\"1. ERROR in X3a.java (at line 2)\\n\" + ", "+\t\t\"\tA;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + ", "-\t\t\"\t    ^\\n\" + ", "-\t\t\"The type new X3c(){} must implement the inherited abstract method X3c.test()\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"The enum constant A must define the abstract method test()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864a4cb3eafa2e448459f0e53bd21d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "5fde937cb0bc31806c0ffa2c25a2ec1e65a28a74", "commitAfterChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test039()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" +", "-\t\t\t\"\timport static p.A.foo_I;\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" +", "+\t\t\t\"\timport static p.A.foo_I;\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tstatic int i = p.A.foo_I();\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tstatic int i = p.A.foo_I();\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\t\"\tstatic int m = foo_I();\\r\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tstatic int m = foo_I();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a2110dfd73d6f74ffc596663d1d2ef7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void test19() throws JavaModelException", "signatureAfterChange": "  \tpublic void test19() throws JavaModelException", "diff": ["-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Other {key=LTest$Other;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\",", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Other [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ed940925662f28a94e21037e505be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 1211, "methodNumberAfterChange": 1211, "signatureBeforeChange": " public void test1181()", "signatureAfterChange": " public void test1181()", "diff": ["-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method max(T, S) has the same erasure max(Comparable<T>, Object) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method max(T, S) is the same as another method in type X\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92161151bdadd7129d9e51739a53461e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "27a11ce8ecc325901777098d9d0eafdb0be3dc5b", "commitAfterChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e7d5eaf96ff5e36c9a63e937f41df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": " \tpublic void test384()", "signatureAfterChange": " \tpublic void test384()", "diff": ["-\t\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "+\t\t\t\t\"\t@Override Class<? extends String> foo() { return null; }\\n\" + ", "+\t\t\t\t\"\t@Override Class<? extends String>[] foo2() { return null; }\\n\" + ", "-\t\t\t\"\tClass<? extends String> foo() { return null; }\\n\" + ", "-\t\t\t\"\t                        ^^^^^\\n\" + ", "+\t\t\t\"\t@Override Class<? extends String> foo() { return null; }\\n\" + ", "+\t\t\t\"\t                                  ^^^^^\\n\" + ", "-\t\t\t\"\tClass<? extends String>[] foo2() { return null; }\\n\" + ", "-\t\t\t\"\t                          ^^^^^^\\n\" + ", "+\t\t\t\"\t@Override Class<? extends String>[] foo2() { return null; }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5ca4cece06cb6fbbd07f2ccac0e8df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic.Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c076842e0d0dae30d325d95ace74c23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "0bd8e1b1cf24c00d081a70bccd79f0e53ad3dc52", "commitAfterChange": "b35be838b9d57695e23b927dc647a592275feef5", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test056k()", "signatureAfterChange": " public void test056k()", "diff": ["-\t\t\"Resource \\\"ra1\\\" should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource 'ra1' should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource leak: \\\"ra2\\\" is never closed\\n\" + ", "+\t\t\"Resource leak: 'ra2' is never closed\\n\" + ", "-\t\t\"Resource \\\"ra3\\\" should be managed by try-with-resource\\n\" +", "+\t\t\"Resource 'ra3' should be managed by try-with-resource\\n\" +", "-\t\t\"Resource \\\"rb1\\\" should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource 'rb1' should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource leak: \\\"rb2\\\" is never closed\\n\" + ", "+\t\t\"Resource leak: 'rb2' is never closed\\n\" + ", "-\t\t\"Resource \\\"rb3\\\" should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource 'rb3' should be managed by try-with-resource\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d251c75b8b9bd76b63fb908bcc69c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": " \tpublic void test127()", "signatureAfterChange": " \tpublic void test127()", "diff": ["-\t\t\t\t\"public enum X {\\r\\n\" + ", "-\t\t\t\t\"\tVALUE {\\r\\n\" + ", "-\t\t\t\t\"\t\tvoid foo() {\\r\\n\" + ", "-\t\t\t\t\"\t\t};\\r\\n\" + ", "-\t\t\t\t\"\t};\\r\\n\" + ", "-\t\t\t\t\"\tabstract void foo();\\r\\n\" + ", "+\t\t\t\t\"public enum X {\\n\" + ", "+\t\t\t\t\"\tVALUE {\\n\" + ", "+\t\t\t\t\"\t\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\"\t};\\n\" + ", "+\t\t\t\t\"\tabstract void foo();\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d970446796685e103c84fc4e59c7279", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryWithResourcesStatementTest.java", "commitBeforeChange": "2689c910e7993d7f2e4c96a00f4868eadf947850", "commitAfterChange": "7dc01ab99c724b043476264c1ff8612bbfa20971", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " public void test056k()", "signatureAfterChange": " public void test056k()", "diff": ["-\t\t\"Resource \\'ra1\\' should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource \\\"ra1\\\" should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource leak: 'ra2' is never closed\\n\" + ", "+\t\t\"Resource leak: \\\"ra2\\\" is never closed\\n\" + ", "-\t\t\"Resource \\'ra3\\' should be managed by try-with-resource\\n\" +", "+\t\t\"Resource \\\"ra3\\\" should be managed by try-with-resource\\n\" +", "-\t\t\"Resource \\'rb1\\' should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource \\\"rb1\\\" should be managed by try-with-resource\\n\" + ", "-\t\t\"Resource leak: 'rb2' is never closed\\n\" + ", "+\t\t\"Resource leak: \\\"rb2\\\" is never closed\\n\" + ", "-\t\t\"Resource \\'rb3\\' should be managed by try-with-resource\\n\" + ", "+\t\t\"Resource \\\"rb3\\\" should be managed by try-with-resource\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a242c57652a786d0d57505bc58c4606c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void test010()", "signatureAfterChange": " public void test010()", "diff": ["-\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"     3  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "-\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"     3  ldc <String \\\"SUCCESS\\\"> [22]\\n\" + ", "+\t\t\"     5  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + ", "-\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    12  ldc <String \\\"SHOULDN\\'T BE GENERATED\\\"> [31]\\n\" + ", "-\t\t\"    14  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "+\t\t\"     9  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "+\t\t\"    12  ldc <String \\\"SHOULDN\\'T BE GENERATED\\\"> [30]\\n\" + ", "+\t\t\"    14  invokevirtual java.io.PrintStream.print(java.lang.String) : void [24]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a33d402adf82e66551d9ff2a2416741f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 339, "signatureBeforeChange": " public void testBug110336a() throws CoreException", "signatureAfterChange": " public void testBug110336a() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).TP [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).clazz [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>).localVar2 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[TP]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[clazz]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar1]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar1]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar2]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method(Class<Test>) [Test]+[localVar2]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a665f051e1a149c91b66d1b9f88c157f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 412, "methodNumberAfterChange": 412, "signatureBeforeChange": " \tpublic void test410()", "signatureAfterChange": " \tpublic void test410()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 11)\\r\\n\" + ", "-\t\t\t\"\tlist.add(new Object());                       // should fail\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tlist.add(new Object());                       // should fail\\n\" + ", "-\t\t\t\"The method add(? super Exception) in the type List<? super Exception> is not applicable for the arguments (Object)\\n\" + ", "+\t\t\t\"The method add(capture-of ? super Exception) in the type List<capture-of ? super Exception> is not applicable for the arguments (Object)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\r\\n\" + ", "-\t\t\t\"\tlist.add(new Throwable());                    // should fail\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tlist.add(new Throwable());                    // should fail\\n\" + ", "-\t\t\t\"The method add(? super Exception) in the type List<? super Exception> is not applicable for the arguments (Throwable)\\n\" + ", "+\t\t\t\"The method add(capture-of ? super Exception) in the type List<capture-of ? super Exception> is not applicable for the arguments (Throwable)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa248cb7bfb0d2d55e77e0233cc9c345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tpublic void test050h()", "signatureAfterChange": " \tpublic void test050h()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tB c(A<String> s) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tB c(A<String> s) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method c(A<String>) in type X\\n\" + ", "+\t\t\t\"Method c(A<String>) has the same erasure c(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tB c(A<Number> n) { return null; }\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tB c(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method c(A<Number>) in type X\\n\" + ", "+\t\t\t\"Method c(A<Number>) has the same erasure c(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acb988c0b1b307bbe93f6313ec3c12f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LocalVariableTest.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +", "-\t\t\"The parameter value is never read\\n\" +", "+\t\t\"The value of the parameter value is not used\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed62a16ffe5417d15073390a47d52b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test034()", "signatureAfterChange": " public void test034()", "diff": ["-\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"     8  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"     8  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"    16  new java.util.ArrayList [17]\\n\" + ", "+\t\t\"    16  new java.util.ArrayList [16]\\n\" + ", "-\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [24]\\n\" + ", "-\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [26]\\n\" + ", "-\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void  [32]\\n\" + ", "+\t\t\"    28  getstatic java.lang.System.out : java.io.PrintStream [19]\\n\" + ", "+\t\t\"    31  ldc <String \\\"SUCCESS\\\"> [25]\\n\" + ", "+\t\t\"    33  invokevirtual java.io.PrintStream.println(java.lang.String) : void [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0b0cd6f8ca0ca94fbaa0bb658253067", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "c9e02661baa80cf1f75154d10de9df61ce3f636d", "commitAfterChange": "d92419d7d90bedd902391c7e83696cf6304867ae", "methodNumberBeforeChange": 264, "methodNumberAfterChange": 264, "signatureBeforeChange": " \tpublic void test0623() throws JavaModelException", "signatureAfterChange": " \tpublic void test0623() throws JavaModelException", "diff": ["-\t\t\t\t\"first cannot be resolved\\n\" +", "-\t\t\t\t\"second cannot be resolved\\n\" +", "-\t\t\t\t\"first cannot be resolved\\n\" +", "-\t\t\t\t\"second cannot be resolved\\n\" +", "-\t\t\t\t\"first cannot be resolved\\n\" +", "-\t\t\t\t\"second cannot be resolved\";", "+\t\t\t\t\"first cannot be resolved to a variable\\n\" +", "+\t\t\t\t\"second cannot be resolved to a variable\\n\" +", "+\t\t\t\t\"first cannot be resolved to a variable\\n\" +", "+\t\t\t\t\"second cannot be resolved to a variable\\n\" +", "+\t\t\t\t\"first cannot be resolved to a variable\\n\" +", "+\t\t\t\t\"second cannot be resolved to a variable\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45ce63d6c5d3138d988104bab1af3fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "commitAfterChange": "5d080762ae8d3ca1ae1910319f56194e1932135d", "methodNumberBeforeChange": 584, "methodNumberAfterChange": 584, "signatureBeforeChange": " public void testBug221081() throws CoreException", "signatureAfterChange": " public void testBug221081() throws CoreException", "diff": ["-\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "-\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\"", "+\t\t\"src/Test.java Test [public class \ufffd|Test|\ufffd {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\tTest \ufffd|test|\ufffd;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java Test.test [\t\ufffd|Test|\ufffd test;] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid \ufffd|test|\ufffd(Test test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\tvoid test(\ufffd|Test|\ufffd test) {] EXACT_MATCH\\n\" +", "+\t\t\"src/Test.java void Test.test(Test) [\t\tif (test == this.\ufffd|test|\ufffd) {] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52a998023c732d078b4c10acd2cedc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 118, "signatureBeforeChange": "  \tpublic void test158()", "signatureAfterChange": "  \tpublic void test158()", "diff": ["-\t\t\t\t+ \"\t                                   ^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                  ^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                  ^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                             ^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                            ^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                            ^\\n\"", "+\t\t\t\t+ \"\t                                           ^^\\n\"", "-\t\t\t\t+ \"\t                                            ^^\\n\"", "+\t\t\t\t+ \"\t                                           ^^^\\n\"", "-\t\t\t\t+ \"\t                                           ^^^\\n\"", "+\t\t\t\t+ \"\t                                          ^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbdb087ac18954ce701fca9b7404165b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug96237_Public07()", "signatureAfterChange": " \tpublic void testBug96237_Public07()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21fc6983bef4e3f36ddf455dc85b156", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testCompatibility3a()", "signatureAfterChange": " \tpublic void testCompatibility3a()", "diff": ["+\t// FIXME(Stephan) : Old messages are wrong, the new diagnostics are correct, but the leaf component types differ - null annotated readable names don't reflect that - this needs to be fixed.", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'String[]\\' needs unchecked conversion to conform to \\'String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c271873ee990b4357f4b844fd9ca65b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 345, "signatureBeforeChange": " public void testBug110336g() throws CoreException", "signatureAfterChange": " public void testBug110336g() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java b110336.Test.{}.lv1 [Test]+[lv2,lv3]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv2 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv4 [Test]+[lv5,lv6]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv4 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv7 [Test]+[lv8,lv9]\\n\" +", "-\t\t\"src/b110336/Test.java b110336.Test.{}.lv9 [Test]\",", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv1]+[lv2,lv3]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv2]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv4]+[lv5,lv6]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv4]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv7]+[lv8,lv9]\\n\" + ", "+\t\t\"src/b110336/Test.java b110336.Test.{} [Test]+[lv9]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32aa96567b6ca77b4a68d988e7d98da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 235, "signatureBeforeChange": " \tpublic void test085c()", "signatureAfterChange": " \tpublic void test085c()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tabstract class X2 extends CX implements IX {}\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\tabstract class X2 extends CX implements IX {}\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tabstract class X2 extends CX implements IX {}\\r\\n\" +", "+\t\t\t\"3. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\"\tabstract class X2 extends CX implements IX {}\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tabstract class X2 extends CX implements IX {}\\r\\n\" +", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" +", "+\t\t\t\"\tabstract class X2 extends CX implements IX {}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4301c15273336d28be2460ad5a80f20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "a4c3ac4c4476b0535c9f4bcee41fc3bc1a1adef9", "commitAfterChange": "67766e5b27ea79987add5b8cee1657ec3cbfbedb", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test101()", "signatureAfterChange": " \tpublic void test101()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\tnew X().foo(1);\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\tnew X().foo(1);\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tnew X().foo(new Integer(1));\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\"\tnew X().foo(new Integer(1));\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\tnew X().foo(1, new Integer(1));\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "+\t\t\t\"\tnew X().foo(1, new Integer(1));\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87d795d189b8c4a13f7acb116c0a68b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/EnumCompletionParserTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test0004()", "signatureAfterChange": " public void test0004()", "diff": ["-\t\t\"case BAR : ;\\n\" +", "-\t\t\"    break ;\\n\" +", "-\t\t\"case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"case BAR :\\n\" +", "+\t\t\"    break;\\n\" +", "+\t\t\"case <CompleteOnName:FOO> :\\n\" +", "-\t\t\"      case BAR : ;\\n\" +", "-\t\t\"          break ;\\n\" +", "-\t\t\"      case <CompleteOnName:FOO> : ;\\n\" +", "+\t\t\"      case BAR :\\n\" +", "+\t\t\"          break;\\n\" +", "+\t\t\"      case <CompleteOnName:FOO> :\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdfc5dfd6739d61963910448b2f78ab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a4dd9602a292bc61f084e3f53637cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 370, "methodNumberAfterChange": 370, "signatureBeforeChange": " public void test312_warn_options()", "signatureAfterChange": " public void test312_warn_options()", "diff": ["-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Null comparison always yields false: The variable o2 cannot be null at this location\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o2 is specified as @NonNull\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"Null comparison always yields false: The variable o2 cannot be null at this location\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o2 is specified as @NonNull\\n\" + ", "-\t\t\"Null comparison always yields false: The variable o2 cannot be null at this location\\n\" + ", "+\t\t\"Null comparison always yields false: The variable o2 is specified as @NonNull\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d437aca0d834c4f69a9414693427989d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d451043b4291721f8296c1df17c737fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "16d2bb22ab0669ee00790465fa843455279af5ae", "commitAfterChange": "cb2ffae6de1377c8c53c98f0144305fd03d135f4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test077()", "signatureAfterChange": " \tpublic void test077()", "diff": ["-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db109471ae4646f46dd23ba97ebfb49e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \t \tpublic void test066()", "signatureAfterChange": " \t \tpublic void test066()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    14  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    17  iload_0\\n\" + ", "-\t\t\t\"    18  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    17  iload_0 [i]\\n\" + ", "+\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff2a14470e01eca3cd81ab17a266742", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "9b5849b276b557fc60d6c04ed0f5505fe74ef589", "commitAfterChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testCompatibility4a()", "signatureAfterChange": " \tpublic void testCompatibility4a()", "diff": ["-\t// should mention the annotation on the leaf type.", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@Nullable String []\\' but this expression has type \\'@NonNull String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String []\\' but this expression has type \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String []\\' but this expression has type \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@Nullable String []\\' but this expression has type \\'@NonNull String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@NonNull String []\\' but this expression has type \\'@Nullable String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'@Nullable String []\\' but this expression has type \\'@NonNull String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47c5280385e983b2e522eaab60b8e70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"Duplicate method foo(A<Y>) in type X.C5\\n\" + ", "+\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"Duplicate method foo(A<Z>) in type X.C5\\n\" + ", "+\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e880a0f7bbda87f7c7e8c4ecd47a68a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java", "commitBeforeChange": "bf2199048d434ee8a7461950468d3a2335a30990", "commitAfterChange": "99697e231d7abf709bf21ed4dc6a92bbb307b9f9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test429435() throws CoreException, IOException", "signatureAfterChange": " public void test429435() throws CoreException, IOException", "diff": ["-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in <anonymous #1> [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in doit() [in Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]\\n\" + ", "-\t\t\t\t\t\t\t\"  Lambda(I) [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <anonymous #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in doit() [in <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]]]\\n\" + ", "+\t\t\t\t\t\t\t\"  <lambda #1> [in zoo() [in X [in [Working copy] A.java [in x.y [in src [in P]]]]]]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8826490da15da8afaff05ecf623e945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>.MemberGeneric<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>.MemberGeneric<?, ?, ?>] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eba43183b21309e5dfb28c939d1825e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void testTypeRefGenericAll02_WildcardBound() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll02_WildcardBound() throws CoreException", "diff": ["-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends \ufffd|B|\ufffd, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super \ufffd|C|\ufffd> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super \ufffd|A|\ufffd, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends \ufffd|C|\ufffd> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends \ufffd|A|\ufffd, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super \ufffd|B|\ufffd, C> param) {@352] EXACT_MATCH\"", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends !|B|!, ? super C> field = new Test<A, Z<String>, X<String>> () {@65] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super !|C|!> field = new Test<A, Z<String>, X<String>> () {@76] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super !|A|!, B, ? extends C> foo(Test<? extends A, ? super B, C> param) {@303] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends !|C|!> foo(Test<? extends A, ? super B, C> param) {@319] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends !|A|!, ? super B, C> param) {@341] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super !|B|!, C> param) {@352] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2dfee2189a4188a3f7f6a938877358", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void test054()", "signatureAfterChange": "  \tpublic void test054()", "diff": ["-\t\t\t\"     1  istore_0\\n\" + ", "-\t\t\t\"     2  iload_0\\n\" + ", "+\t\t\t\"     1  istore_0 [i]\\n\" + ", "+\t\t\t\"     2  iload_0 [i]\\n\" + ", "-\t\t\t\"     8  invokestatic #27 <Method X.boom()Z>\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "-\t\t\t\"    14  getstatic #33 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    17  iload_0\\n\" + ", "-\t\t\t\"    18  invokevirtual #39 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    17  iload_0 [i]\\n\" + ", "+\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed452b846fab07f70578350d13bc486c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testCompatibility4a()", "signatureAfterChange": " \tpublic void testCompatibility4a()", "diff": ["+\t// should mention the annotation on the leaf type.", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[]\\' but this expression has type \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @NonNull[]\\' but this expression has type \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @NonNull[]\\' but this expression has type \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[]\\' but this expression has type \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @NonNull[]\\' but this expression has type \\'String @Nullable[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + ", "-\t\t\t\"Null type mismatch (type annotations): required \\'String @Nullable[]\\' but this expression has type \\'String @NonNull[]\\'\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'String []\\' but this expression has type \\'String []\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f372e8ffdcd3415af6ea0066dea88e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 111, "signatureBeforeChange": "  \tpublic void test151()", "signatureAfterChange": "  \tpublic void test151()", "diff": ["-\t\t\t\t+ \"\t                                    ^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                   ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                   ^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                  ^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                              ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                             ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                             ^\\n\"", "+\t\t\t\t+ \"\t                                            ^^\\n\"", "-\t\t\t\t+ \"\t                                             ^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t                                            ^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                                            ^\\n\"", "+\t\t\t\t+ \"\t                                           ^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f43e772bd0a114234ce54ff8e37ec137", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 400, "methodNumberAfterChange": 400, "signatureBeforeChange": " \tpublic void test396()", "signatureAfterChange": " \tpublic void test396()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 22)\\r\\n\" + ", "-\t\t\t\"\tfinal Collection<String> cL = (Collection<String>)emptyList(); // 2\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tfinal Collection<String> cL = (Collection<String>)emptyList(); // 2\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 25)\\r\\n\" + ", "-\t\t\t\"\tfinal Iterable<String> iL = (Iterable<String>)emptyList(); // 3\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 25)\\n\" + ", "+\t\t\t\"\tfinal Iterable<String> iL = (Iterable<String>)emptyList(); // 3\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 31)\\r\\n\" + ", "-\t\t\t\"\tfinal Iterable<String> iC = (Iterable<String>)emptyCollection(); // 5\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 31)\\n\" + ", "+\t\t\t\"\tfinal Iterable<String> iC = (Iterable<String>)emptyCollection(); // 5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f924ca8cd46169c2b0f5c6948763ee7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 496, "methodNumberAfterChange": 496, "signatureBeforeChange": "\t\t \t \tpublic void test0491()", "signatureAfterChange": "\t\t \t \tpublic void test0491()", "diff": ["-\t\t\t\"Type mismatch: cannot convert from capture-of ? to capture-of ?\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture#4-of ? to capture#3-of ?\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<capture-of ? extends Number> to X<? super Number>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture#8-of ? extends Number> to X<? super Number>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from capture-of ? extends Number to capture-of ? extends Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture#14-of ? extends Number to capture#13-of ? extends Number\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<capture-of ? super Number> to X<? extends Number>\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<capture#16-of ? super Number> to X<? extends Number>\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from capture-of ? super Number to capture-of ? extends Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture#18-of ? super Number to capture#17-of ? extends Number\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from capture-of ? super Number to capture-of ? super Number\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from capture#22-of ? super Number to capture#21-of ? super Number\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c83ae4fa8c379d9f0582d5e3348e4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void test075()", "signatureAfterChange": " \tpublic void test075()", "diff": ["-\t\t\t\"1. ERROR in X5.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic enum X5 implements I {\\r\\n\" + ", "+\t\t\t\"1. ERROR in X5.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic enum X5 implements I {\\n\" + ", "-\t\t\t\"1. ERROR in X5a.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic enum X5a implements I {\\r\\n\" + ", "+\t\t\t\"1. ERROR in X5a.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic enum X5a implements I {\\n\" + ", "-\t\t\t\"1. ERROR in X5c.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tA() { void random() {} };\\r\\n\" + ", "+\t\t\t\"1. ERROR in X5c.java (at line 2)\\n\" + ", "+\t\t\t\"\tA() { void random() {} };\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa45a25b836f6c10341a5fd148c6a27c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     4  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"     8  invokevirtual long[].clone() : java.lang.Object  [27]\\n\" + ", "-\t\t\t\"    11  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [33]\\n\" + ", "-\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "+\t\t\t\"     8  invokevirtual long[].clone() : java.lang.Object [22]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [28]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [16]\\n\" + ", "-\t\t\t\"    18  invokevirtual long[].clone() : java.lang.Object  [27]\\n\" + ", "-\t\t\t\"    21  invokevirtual java.io.PrintStream.println(java.lang.Object) : void  [33]\\n\" + ", "+\t\t\t\"    18  invokevirtual long[].clone() : java.lang.Object [22]\\n\" + ", "+\t\t\t\"    21  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [28]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa78af1512d33f865b639d9d115d98cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testBug96237_Public07()", "signatureAfterChange": " \tpublic void testBug96237_Public07()", "diff": ["-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + ", "-\t\t\t\"Javadoc: Not visible reference\\n\" + ", "+\t\t\t\"Javadoc: 'public' visibility for malformed doc comments hides this 'default' reference\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fad151206c5eccd475c3dd32219f1705", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tpublic void test048()", "signatureAfterChange": "  \tpublic void test048()", "diff": ["-\t\t\t\"    14  astore_3 [local_3]\\n\" + ", "+\t\t\t\"    14  astore_3\\n\" + ", "-\t\t\t\"    18  aload_3 [local_3]\\n\" + ", "+\t\t\t\"    18  aload_3\\n\" + ", "-\t\t\t\"    20  astore_2 [local_2]\\n\" + ", "+\t\t\t\"    20  astore_2\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 30] local: bool index: 0 type: Z\\n\" + ", "-\t\t\t\"        [pc: 11, pc: 14] local: j index: 1 type: I\\n\" + ", "-\t\t\t\"        [pc: 23, pc: 30] local: j index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 30] local: bool index: 0 type: boolean\\n\" + ", "+\t\t\t\"        [pc: 11, pc: 14] local: j index: 1 type: int\\n\" + ", "+\t\t\t\"        [pc: 23, pc: 30] local: j index: 1 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb60451d8eb0d4840acece17af5357b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "cbc781423397a753d7a0e29b64da02f9ae05e6ae", "commitAfterChange": "e659592a32935b3480e8554de2e33b0870ea4573", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "\r public void testDefault07()", "signatureAfterChange": "\r public void testDefault07()", "diff": ["-\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "+\t\t\t\"\t\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" +\r", "-\t\t\"\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "-\t\t\"\t                                    ^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"Null type safety (type annotations): The expression of type \\'int\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null type safety (type annotations): The expression of type \\'Integer\\' needs unchecked conversion to conform to \\'@NonNull Integer\\'\\n\" + \r", "-\t\t\"\t@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "-\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + \r"]}], "num": 28322}
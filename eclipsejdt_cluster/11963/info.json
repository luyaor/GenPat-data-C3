{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50147c7fc022ddf87e0fe92203dce3c8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4274e50e8238312dbc8fde9efdebc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void completeCodeAttributeForSyntheticAccessMethod( \t\tSyntheticAccessMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes)", "signatureAfterChange": " \tpublic void completeCodeAttributeForSyntheticAccessMethod( \t\tSyntheticAccessMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes)", "diff": ["-\t\t\tfor (int i = 0; i < codeStream.allLocalsCounter; i++) {", "+", "+\t\t\t// used to remember the local variable with a generic type", "+\t\t\tint genericLocalVariablesCounter = 0;", "+\t\t\tLocalVariableBinding[] genericLocalVariables = null;", "+\t\t\tint numberOfGenericEntries = 0;", "+\t\t\t", "+\t\t\tfor (int i = 0, max = codeStream.allLocalsCounter; i < max; i++) {", "+\t\t\t\tfinal TypeBinding localVariableTypeBinding = localVariable.type;", "+\t\t\t\tboolean isParameterizedType = localVariableTypeBinding.isParameterizedType() || localVariableTypeBinding.isTypeVariable();", "+\t\t\t\tif (localVariable.initializationCount != 0 && isParameterizedType) {", "+\t\t\t\t\tif (genericLocalVariables == null) {", "+\t\t\t\t\t\t// we cannot have more than max locals", "+\t\t\t\t\t\tgenericLocalVariables = new LocalVariableBinding[max];", "+\t\t\t\t\t}", "+\t\t\t\t\tgenericLocalVariables[genericLocalVariablesCounter++] = localVariable;", "+\t\t\t\t}", "+\t\t\t\t\t\tif (isParameterizedType) {", "+\t\t\t\t\t\t\tnumberOfGenericEntries++;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.signature());", "+\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariableTypeBinding.signature());", "+", "+\t\t\tif (genericLocalVariablesCounter != 0) {", "+\t\t\t\t// add the local variable type table attribute", "+\t\t\t\tint maxOfEntries = 8 + numberOfGenericEntries * 10;", "+\t\t\t\t// reserve enough space", "+\t\t\t\tif (localContentsOffset + maxOfEntries >= this.contents.length) {", "+\t\t\t\t\tresizeContents(maxOfEntries);", "+\t\t\t\t}", "+\t\t\t\tint localVariableTypeNameIndex =", "+\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.LocalVariableTypeTableName);", "+\t\t\t\tcontents[localContentsOffset++] = (byte) (localVariableTypeNameIndex >> 8);", "+\t\t\t\tcontents[localContentsOffset++] = (byte) localVariableTypeNameIndex;", "+\t\t\t\tvalue = numberOfGenericEntries * 10 + 2;", "+\t\t\t\tcontents[localContentsOffset++] = (byte) (value >> 24);", "+\t\t\t\tcontents[localContentsOffset++] = (byte) (value >> 16);", "+\t\t\t\tcontents[localContentsOffset++] = (byte) (value >> 8);", "+\t\t\t\tcontents[localContentsOffset++] = (byte) value;", "+\t\t\t\tcontents[localContentsOffset++] = (byte) (numberOfGenericEntries >> 8);", "+\t\t\t\tcontents[localContentsOffset++] = (byte) numberOfGenericEntries;", "+", "+\t\t\t\tfor (int i = 0; i < genericLocalVariablesCounter; i++) {", "+\t\t\t\t\tLocalVariableBinding localVariable = genericLocalVariables[i];", "+\t\t\t\t\tfor (int j = 0; j < localVariable.initializationCount; j++) {", "+\t\t\t\t\t\tint startPC = localVariable.initializationPCs[j << 1];", "+\t\t\t\t\t\tint endPC = localVariable.initializationPCs[(j << 1) + 1];", "+\t\t\t\t\t\tif (startPC != endPC) { // only entries for non zero length", "+\t\t\t\t\t\t\t// now we can safely add the local entry", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) (startPC >> 8);", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) startPC;", "+\t\t\t\t\t\t\tint length = endPC - startPC;", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) (length >> 8);", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) length;", "+\t\t\t\t\t\t\tnameIndex = constantPool.literalIndex(localVariable.name);", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.genericTypeSignature());", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\t\t\tint resolvedPosition = localVariable.resolvedPosition;", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) (resolvedPosition >> 8);", "+\t\t\t\t\t\t\tcontents[localContentsOffset++] = (byte) resolvedPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tattributeNumber++;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cde5735c4a08459f4c243f0600594dbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void completeCodeAttributeForClinit(int codeAttributeOffset)", "signatureAfterChange": " \tpublic void completeCodeAttributeForClinit(int codeAttributeOffset)", "diff": ["+", "-\t\t\t\tfor (int i = 0; i < codeStream.allLocalsCounter; i++) {", "+", "+\t\t\t\t// used to remember the local variable with a generic type", "+\t\t\t\tint genericLocalVariablesCounter = 0;", "+\t\t\t\tLocalVariableBinding[] genericLocalVariables = null;", "+\t\t\t\tint numberOfGenericEntries = 0;", "+", "+\t\t\t\tfor (int i = 0, max = codeStream.allLocalsCounter; i < max; i++) {", "+\t\t\t\t\tfinal TypeBinding localVariableTypeBinding = localVariable.type;", "+\t\t\t\t\tboolean isParameterizedType = localVariableTypeBinding.isParameterizedType() || localVariableTypeBinding.isTypeVariable();", "+\t\t\t\t\tif (localVariable.initializationCount != 0 && isParameterizedType) {", "+\t\t\t\t\t\tif (genericLocalVariables == null) {", "+\t\t\t\t\t\t\t// we cannot have more than max locals", "+\t\t\t\t\t\t\tgenericLocalVariables = new LocalVariableBinding[max];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tgenericLocalVariables[genericLocalVariablesCounter++] = localVariable;", "+\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (isParameterizedType) {", "+\t\t\t\t\t\t\t\tnumberOfGenericEntries++;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.signature());", "+\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariableTypeBinding.signature());", "+", "+\t\t\t\tif (genericLocalVariablesCounter != 0) {", "+\t\t\t\t\t// add the local variable type table attribute", "+\t\t\t\t\t// reserve enough space", "+\t\t\t\t\tint maxOfEntries = 8 + numberOfGenericEntries * 10;", "+", "+\t\t\t\t\tif (localContentsOffset + maxOfEntries >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(maxOfEntries);", "+\t\t\t\t\t}", "+\t\t\t\t\tint localVariableTypeNameIndex =", "+\t\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.LocalVariableTypeTableName);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (localVariableTypeNameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) localVariableTypeNameIndex;", "+\t\t\t\t\tvalue = numberOfGenericEntries * 10 + 2;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 24);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 16);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) value;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (numberOfGenericEntries >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) numberOfGenericEntries;", "+\t\t\t\t\tfor (int i = 0; i < genericLocalVariablesCounter; i++) {", "+\t\t\t\t\t\tLocalVariableBinding localVariable = genericLocalVariables[i];", "+\t\t\t\t\t\tfor (int j = 0; j < localVariable.initializationCount; j++) {", "+\t\t\t\t\t\t\tint startPC = localVariable.initializationPCs[j << 1];", "+\t\t\t\t\t\t\tint endPC = localVariable.initializationPCs[(j << 1) + 1];", "+\t\t\t\t\t\t\tif (startPC != endPC) { // only entries for non zero length", "+\t\t\t\t\t\t\t\t// now we can safely add the local entry", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (startPC >> 8);", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) startPC;", "+\t\t\t\t\t\t\t\tint length = endPC - startPC;", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (length >> 8);", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) length;", "+\t\t\t\t\t\t\t\tnameIndex = constantPool.literalIndex(localVariable.name);", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.genericTypeSignature());", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\t\t\t\tint resolvedPosition = localVariable.resolvedPosition;", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (resolvedPosition >> 8);", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) resolvedPosition;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tattributeNumber++;", "+\t\t\t\t}"]}], "num": 11963}
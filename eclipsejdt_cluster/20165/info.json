{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd113d16912f896187c98ef908606109", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51046022c73f5ae8ca5aada6717167b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugs8Tests.java", "commitBeforeChange": "b6e21c793f3617f9c60f843e02a0537d5bd09d93", "commitAfterChange": "bf2199048d434ee8a7461950468d3a2335a30990", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": " public void testBug429012_0015() throws CoreException", "signatureAfterChange": " public void testBug429012_0015() throws CoreException", "diff": ["-\t\t\t\"interface I {\\n\" +", "-\t\t\t\t\"    void foo(Y<String> y);\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"public class X  {\\n\" +", "-\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\"        I i = Y<String>.Z<String>::<String>new;\\n\" +", "-\t\t\t\"        i.foo(new Y<String>()); \\n\" +", "-\t\t\t\"    }\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"class Y<T> {\\n\" +", "-\t\t\t\"    class Z<K> {\\n\" +", "-\t\t\t\"        Z(Y<String> y) {\\n\" +", "-\t\t\t\"            System.out.println(\\\"Y<T>.Z<K>::new\\\");\\n\" +", "-\t\t\t\"        }\\n\" +", "-\t\t\t\"        Z1(Y<String> y) {\\n\" +", "-\t\t\t\"            System.out.println(\\\"Y<T>.Z<K>::new\\\");\\n\" +", "-\t\t\t\"        }\\n\" +", "-\t\t\t\"    }\\n\" +", "+\t\t\t\"interface I<T> {\\n\"+", "+\t\t\t\"    T get();\\n\"+", "+\t\t\t\"}\\n\"+", "+\t\t\t\"/**\\n\"+", "+\t\t\t\" * @see Y#Y()\\n\"+", "+\t\t\t\" */\\n\"+", "+\t\t\t\"public class X  {\\n\"+", "+\t\t\t\"    public static void main(String [] args) {\\n\"+", "+\t\t\t\"        I<Y<String>> s = Y<String>::<Integer>new;\\n\"+", "+\t\t\t\"        s.get().equals(new Y<String>()); \\n\"+", "+\t\t\t\"    }\\n\"+", "+\t\t\t\"}\\n\"+", "+\t\t\t\"class Y<E> {\\n\"+", "+\t\t\t\"    <T> Y() {\\n\"+", "+\t\t\t\"        System.out.println(\\\"Y<E>::<T>new\\\");\\n\"+", "+\t\t\t\"    }\\n\"+", "-\ttype = type.getType(\"Z\");", "-\tIMethod method = type.getMethod(\"Z\", new String[] {\"QY<QString;>;\"});", "-\tsearch(method, METHOD_REFERENCE_EXPRESSION, EXACT_RULE);", "+\tIMethod method = type.getMethod(\"Y\", new String[] {});", "+\tsearch(method, METHOD_REFERENCE_EXPRESSION, ERASURE_RULE);", "-\t\t\t\"src/b429012/X.java void b429012.X.main(String[]) [Y<String>.Z<String>::<String>new] EXACT_MATCH\"", "+\t\t\t\"src/b429012/X.java void b429012.X.main(String[]) [Y<String>::<Integer>new] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6395a239a903d8b861bec9e0512c57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/LambdaExpressionSyntaxTest.java", "commitBeforeChange": "8af48aa5660e72584abef914d9f2b32173f50c99", "commitAfterChange": "3f60c9b8b6041548c5cf76290845b4be1c2aa43b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test0018() throws IOException", "signatureAfterChange": " \tpublic void test0018() throws IOException", "diff": ["-\t// Reference expression - super:: form, without type arguments. ", "-\tpublic void test0018() throws IOException {", "-\t\tString source = ", "-\t\t\t\t\"interface I {\\n\" +", "-\t\t\t\t\"    void foo(int x);\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"public class X extends Y {\\n\" +", "-\t\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\t\"\tnew X().doit();\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"    void doit() {\\n\" +", "-\t\t\t\t\"        I i = super::foo;\\n\" +", "-\t\t\t\t\"        i.foo(10); \\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y {\\n\" +", "-\t\t\t\t\"    public void foo(int x) {\\n\" +", "-\t\t\t\t\"\tSystem.out.println(x);\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\tString expectedUnitToString = ", "-\t\t\t\t\"interface I {\\n\" + ", "-\t\t\t\t\"  void foo(int x);\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"  public X() {\\n\" + ", "-\t\t\t\t\"    super();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"    new X().doit();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  void doit() {\\n\" + ", "-\t\t\t\t\"    I i = super::foo;\\n\" + ", "-\t\t\t\t\"    i.foo(10);\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class Y {\\n\" + ", "-\t\t\t\t\"  Y() {\\n\" + ", "-\t\t\t\t\"    super();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"  public void foo(int x) {\\n\" + ", "-\t\t\t\t\"    System.out.println(x);\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\";", "-\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, \"test0018\", expectedUnitToString);", "-\t}", "+\tpublic void test0018() throws IOException {", "+\t\t\t\t\"  J j1 = () -> 0;\\n\" + ", "+\t\tcheckParse(CHECK_PARSER | CHECK_JAVAC_PARSER , source.toCharArray(), null, \"test0018\", expectedUnitToString);"]}], "num": 20165}
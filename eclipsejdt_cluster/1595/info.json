{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbdfb19d141e9582ad8b97f4153ad750", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "375caafdf242c4e83d850312f0ec762a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput)", "signatureAfterChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput)", "diff": ["-\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "-\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\tThrowable exception = null;", "+\t\ttry {", "+\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "+\t\t} catch(RuntimeException e){", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} catch(Error e) {", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} finally {", "+\t\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "+\t\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "+\t\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\tif (exception == null)", "+\t\t\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);", "-\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd80e389d220033d1287289a77235ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d1adb49c37ffedded033367d49226373a027a74a", "commitAfterChange": "bb78eb5668b505d8cc58cdf0f1742d5d5430764d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprotected void runConformTestThrowingError( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments)", "signatureAfterChange": "  \tprotected void runConformTestThrowingError( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments)", "diff": ["-\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\tif (!requestor.hasErrors) {", "-\t\t\tString sourceFile = testFiles[0];", "+\t\tThrowable exception = null;", "+\t\ttry {", "+\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "+\t\t} catch(RuntimeException e){", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} catch(Error e) {", "+\t\t\texception = e;", "+\t\t\tthrow e;", "+\t\t} finally {", "-\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-", "-\t\t\tboolean passed = ", "-\t\t\t\tthis.verifier.verifyClassFilesThrowingError(", "-\t\t\t\t\tsourceFile, ", "-\t\t\t\t\tclassName, ", "-\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\tnull, ", "-\t\t\t\t\tvmArguments);", "-\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\tpassed);", "-\t\t} else {", "-\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "+\t\t\tif (!requestor.hasErrors) {", "+\t\t\t\tString sourceFile = testFiles[0];", "+\t", "+\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "+\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "+\t", "+\t\t\t\tboolean passed = ", "+\t\t\t\t\tthis.verifier.verifyClassFilesThrowingError(", "+\t\t\t\t\t\tsourceFile, ", "+\t\t\t\t\t\tclassName, ", "+\t\t\t\t\t\texpectedSuccessOutputString,", "+\t\t\t\t\t\tthis.classpaths, ", "+\t\t\t\t\t\tnull, ", "+\t\t\t\t\t\tvmArguments);", "+\t\t\t\tif (exception == null)", "+\t\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "+\t\t\t\t\t\tpassed);", "+\t\t\t} else {", "+\t\t\t\tif (exception == null)", "+\t\t\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "+\t\t\t}"]}], "num": 1595}
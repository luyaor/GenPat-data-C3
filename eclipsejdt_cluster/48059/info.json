{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b1f0cfff2760a1b5c4b6e201ffa36fc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ef61a35f3e767a1a628d344ef2271c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e583360467dd665e6a3741180b503b0c70aed18f", "commitAfterChange": "ad648a891664f32be31b2bef9cbde5423892935e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\tpublic void propertyChange(Preferences.PropertyChangeEvent event)", "signatureAfterChange": " \t\tpublic void propertyChange(Preferences.PropertyChangeEvent event)", "diff": ["-\t\t\t\tString newValue = (String)event.getNewValue();", "-\t\t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "-\t\t\t\t\trecreatePersistedContainer(propertyName, newValue, false);", "-\t\t\t\t}", "+\t\t\t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520826c96139c6757be197b92b464ab5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "4e907850ddc55384eab3db9a6cd45146c9e7c02d", "commitAfterChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tIPackageFragmentRoot root,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes, \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["-\t\t\tIPackageFragmentRoot root, ", "-\t\t\tboolean waitForIndexes,", "+\t\t\tboolean waitForIndexes, ", "-\t\t\tif (root != null && !packages[i].getParent().equals(root)) {", "-\t\t\t\t// filter package which are not in same root", "-\t\t\t\tcontinue;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a3ccc6691eea658a6056964976c07e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 120, "signatureBeforeChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables)", "signatureAfterChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods)", "diff": ["-\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables) {", "+\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods) {", "-\t\t}", "-\t\tif (tolerateInferenceVariables && (!arg.isProperType(false) || !param.isProperType(false))) {", "-\t\t\t// during type inference involving a ReferenceExpression ignore incompatibility due to an inference variable,", "-\t\t\t// knowing that we will produce constraints that will ensure compatible instantiation (if one exists).", "-\t\t\treturn COMPATIBLE; "]}], "num": 48059}
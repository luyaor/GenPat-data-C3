{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b989307f41c608a7a1e93fd89091b242", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c7137713842952fb891d4c49038a97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4b3205881d2b83b4d22e7e7448a1c8a755f73982", "commitAfterChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "methodNumberBeforeChange": 836, "methodNumberAfterChange": 836, "signatureBeforeChange": " public void test830()", "signatureAfterChange": " public void test830()", "diff": ["-\t\t\"1. WARNING in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tX x = (X) o;\\r\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tX x = (X) o;\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 6)\\r\\n\" + ", "-\t\t\"\tX<String> xs = (X<String>)o;\\r\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tX<String> xs = (X<String>)o;\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\"\tZork z;\\r\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 10)\\r\\n\" + ", "-\t\t\"\tList l = (List) al;\\r\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 10)\\r\\n\" + ", "-\t\t\"\tList l = (List) al;\\r\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "082ddacac35bef2c2b94b37a02b0089b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "8c77956bb14bf31d316463be9556a2204834682b", "commitAfterChange": "366617dbc4fc1d9363db17217a7ae199f0f005ea", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to byte[][] for the invocation of the varargs method byte2(byte[]...) from type Y. It could alternatively be cast to byte[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method byte2(byte[]...) doesn't exactly match the vararg parameter type. Cast to byte[][] to confirm the non-varargs invocation, or pass individual arguments of type byte[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to String[] for the invocation of the varargs method string(String...) from type Y. It could alternatively be cast to String for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method string(String...) doesn't exactly match the vararg parameter type. Cast to String[] to confirm the non-varargs invocation, or pass individual arguments of type String for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c2f9b6b6f4b7d69af07f93885f2da0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "85fe43540d2fa2b41e90fbadb73dc3c8d856ecfb", "commitAfterChange": "e60ca02f81acc7600a43413bd7fb7c0779ae6a52", "methodNumberBeforeChange": 712, "methodNumberAfterChange": 712, "signatureBeforeChange": " public void test706b()", "signatureAfterChange": " public void test706b()", "diff": ["-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tAA<CC> res = bb.test();\\r\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tBB res2 = bb.test();\\r\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tBB res2 = bb.test();\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\"\tAA<CC> res = bb.test();\\r\\n\" + ", "-\t\t\"\t       ^^^\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "+\t\t\"\t             ^^^^^^^^^\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\"\tBB res2 = bb.test();\\r\\n\" + ", "-\t\t\"\t   ^^^^\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tBB res2 = bb.test();\\n\" + ", "+\t\t\"\t          ^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa38f90b451c857477b1011121c6b54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic void test15() throws JavaModelException", "signatureAfterChange": "  \tpublic void test15() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest~Method;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"foo(int, String) {key=LTest~Method;.foo(ILjava/lang/String;)V} [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"foo(int, String) [in Method [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"RuntimeException {key=Ljava/lang/RuntimeException;} [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "-\t\t\t\"InterruptedException {key=Ljava/lang/InterruptedException;} [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\",", "+\t\t\t\"RuntimeException [in RuntimeException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\\n\" + ", "+\t\t\t\"InterruptedException [in InterruptedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \" [in Tests]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b43780047e664d6966045669cb2a43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b09d663340f4402c8c2b9ef89ef94f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "13ddaed1183f3b1cf1f564ae1899ec423c4435d7", "commitAfterChange": "579829d4867b5583bfe72f32f009d0dbea13c114", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private String getVerifyTestsCode()", "signatureAfterChange": " private String getVerifyTestsCode()", "diff": ["-\t\t\"/*******************************************************************************\\n\" + ", "-\t\t\" * Copyright (c) 2000, 2004 IBM Corporation and others.\\n\" + ", "-\t\t\" * All rights reserved. This program and the accompanying materials \\n\" + ", "-\t\t\" * are made available under the terms of the Common Public License v1.0\\n\" + ", "-\t\t\" * which accompanies this distribution, and is available at\\n\" + ", "-\t\t\" * http://www.eclipse.org/legal/cpl-v10.html\\n\" + ", "-\t\t\" * \\n\" + ", "-\t\t\" * Contributors:\\n\" + ", "-\t\t\" *     IBM Corporation - initial API and implementation\\n\" + ", "-\t\t\" *******************************************************************************/\\n\" + ", "+\t\t\"/*******************************************************************************\" +", "+\t\t\" * Copyright (c) 2000, 2005 IBM Corporation and others.\" +", "+\t\t\" * All rights reserved. This program and the accompanying materials\" +", "+\t\t\" * are made available under the terms of the Eclipse Public License v1.0\" +", "+\t\t\" * which accompanies this distribution, and is available at\" +", "+\t\t\" * http://www.eclipse.org/legal/epl-v10.html\" +", "+\t\t\" *\" +", "+\t\t\" * Contributors:\" +", "+\t\t\" *     IBM Corporation - initial API and implementation\" +", "+\t\t\" *******************************************************************************/\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "328ff8d09447b4e55b85a2d6bdcb3188", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryException [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.entryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Multiple.java g6.t.ref.Multiple.tableOfEntryExceptionArray [Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [g6.t.def.Table<String, Exception>.Entry] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4166bcac9d0a9812e8e7d37710108228", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments04() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<GM<?, ?, ?>.Member,GM<?, ?, ?>.Member,GM<?, ?, ?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<GM<?, ?, ?>.Member,GM<?, ?, ?>.Member,GM<?, ?, ?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GM<GS<?>.Member, GS<?>.Member, GS<?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GM<GS<?>.Member, GS<GS<?>.Member>.Member, GS<GS<GS<?>.Member>.Member>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GM<GS<Object>.Member, GS<? extends Throwable>.Member, GS<? super RuntimeException>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GM<GS<?>.Member, GS<?>.Member, GS<?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GM<GS<?>.Member, GS<GS<?>.Member>.Member, GS<GS<GS<?>.Member>.Member>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GM<GS<Object>.Member, GS<? extends Throwable>.Member, GS<? super RuntimeException>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<g3.t.def.GS<?>.Member>.Member, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Member>.Member>.Member>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [g3.t.def.GM<g3.t.def.GS<java.lang.Object>.Member, g3.t.def.GS<? extends java.lang.Throwable>.Member, g3.t.def.GS<? super java.lang.RuntimeException>.Member>.Member] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<g3.t.def.GS<?>.Member>.Member, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Member>.Member>.Member>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [g3.t.def.GM<g3.t.def.GS<java.lang.Object>.Member, g3.t.def.GS<? extends java.lang.Throwable>.Member, g3.t.def.GS<? super java.lang.RuntimeException>.Member>.Member] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dcc30473b0ba07728cc40b3c3572b3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test050j()", "signatureAfterChange": " \tpublic void test050j()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\r\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\t<N> B a(A<Number> n) { return null; }\\r\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N> B a(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\t<N> B b(A<String> n) { return null; }\\r\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t<N> B b(A<String> n) { return null; }\\n\" + ", "-\t\t\t\"Duplicate method b(A<String>) in type X\\n\" + ", "+\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e8c29ca1936122ead93d1aed3bf4d77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "\r public void test0075() throws IOException", "signatureAfterChange": "\r public void test0075() throws IOException", "diff": ["-\tassertEquals(\"Wrong location\", \"{0}\", locations.get(\"@I\"));\r", "-\tassertEquals(\"Wrong location\", \"{1}\", locations.get(\"@F\"));\r", "-\tassertEquals(\"Wrong location\", \"{2}\", locations.get(\"@J\"));\r", "-\tassertEquals(\"Wrong location\", \"{3}\", locations.get(\"@A\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0}\", locations.get(\"@C\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0,0}\", locations.get(\"@E\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0,0,1}\", locations.get(\"@G\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,0,0,2}\", locations.get(\"@H\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,1}\", locations.get(\"@B\"));\r", "-\tassertEquals(\"Wrong location\", \"{3,1,0,0}\", locations.get(\"@D\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY]\", locations.get(\"@I\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY]\", locations.get(\"@F\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY]\", locations.get(\"@J\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY]\", locations.get(\"@A\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0)]\", locations.get(\"@C\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0)]\", locations.get(\"@E\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY]\", locations.get(\"@G\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(0), TYPE_ARGUMENT(0), ARRAY, ARRAY, ARRAY]\", locations.get(\"@H\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1)]\", locations.get(\"@B\"));\r", "+\tassertEquals(\"Wrong location\", \"[ARRAY, ARRAY, ARRAY, ARRAY, TYPE_ARGUMENT(1), TYPE_ARGUMENT(0), ARRAY]\", locations.get(\"@D\"));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9070a09cad2ad38e7c079b768073e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e68b1816736387ae75f2fcff3421bb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "be3076081a68f52e55442746b375d20d2f473b0c", "commitAfterChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-", "+\t// TODO (kent) split in smaller test cases", "-\t\t\t\"Inexact parameter for the vararg method byte2(byte[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method byte2(byte[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "-\t\t\t\"Inexact parameter for the vararg method string(String[]) from the type Y\\n\" + ", "+\t\t\t\"Inexact argument for the varargs method string(String[]) from the type Y\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700b49e8bfc7d1f36ad51f8abb563849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testBug198074_c3b() throws JavaModelException", "signatureAfterChange": " public void testBug198074_c3b() throws JavaModelException", "diff": ["-\t\t\"             + \\\" nommbr=\\'\\\"+getName()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nomgrp=\\'\\\"+getService().getArgtbl()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" typmbr=\\'\\\"+getMemberType().getArgument()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" srcpat=\\'\\\"+getPhysicalPath()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nommdl=\\'\\\"+getModel()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nommbr=\\'\\\"+getName()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nomgrp=\\'\\\"+getService().getArgtbl()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" typmbr=\\'\\\"+getMemberType().getArgument()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" srcpat=\\'\\\"+getPhysicalPath()+\\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nommdl=\\'\\\"+getModel()+\\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "-\t\t\"             + \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + ", "+\t\t\"                + \\\" nommbr=\\'\\\" + getName() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nomgrp=\\'\\\" + getService().getArgtbl() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" typmbr=\\'\\\" + getMemberType().getArgument() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" srcpat=\\'\\\" + getPhysicalPath() + \\\"\\'\\\"\\n\" + ", "+\t\t\"                + \\\" nommdl=\\'\\\" + getModel() + \\\"\\'\\\";\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "768f8c929895e65d926e1d56478a1467", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void testTypeRef() throws CoreException", "signatureAfterChange": " public void testTypeRef() throws CoreException", "diff": ["-\t\t\"src/type/ref/TestTypes.java [import \ufffd|type.def.Types|\ufffd;@25] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends \ufffd|Types|\ufffd {@111] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t\ufffd|Types|\ufffd field;@143] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\ufffd|Types|\ufffd method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(\ufffd|Types|\ufffd param) throws Types {@206] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws \ufffd|Types|\ufffd {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new \ufffd|Types|\ufffd();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t\ufffd|Types|\ufffd local = (Types) obj;@264] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (\ufffd|Types|\ufffd) obj;@279] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (\ufffd|Types|\ufffd ex) {@366] EXACT_MATCH\"", "+\t\t\"src/type/ref/TestTypes.java [import !|type.def.Types|!;@25] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends !|Types|! {@111] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t!|Types|! field;@143] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t!|Types|! method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(!|Types|! param) throws Types {@206] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws !|Types|! {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new !|Types|!();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t!|Types|! local = (Types) obj;@264] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (!|Types|!) obj;@279] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (!|Types|! ex) {@366] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77469669497649f438bc96231154205f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testStringAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79337423b7f46cdaf37ebe9893ab628d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic void test118()", "signatureAfterChange": "  \tpublic void test118()", "diff": ["-\t\t\t\t+ \"\t                ^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8062a66e9ed9a109e3962a43c1b274ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "87ae141af8fce3aef7e67ba02676b958a112fef6", "commitAfterChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 204, "signatureBeforeChange": " \tpublic void test069()", "signatureAfterChange": " \tpublic void test069()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic class X implements I<A> {\\r\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic class X implements I<A> {\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 2)\\r\\n\" +", "-\t\t\t\"\tpublic class X implements I<A> {\\r\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\tpublic class X implements I<A> {\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tpublic <N extends Number> void x2() {}\\r\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\tpublic <N extends Number> void x2() {}\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tpublic <N extends Number> void x3() {}\\r\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\tpublic <N extends Number> void x3() {}\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 9)\\r\\n\" +", "-\t\t\t\"\t<N extends String> void x2();\\r\\n\" +", "+\t\t\t\"5. WARNING in X.java (at line 9)\\n\" +", "+\t\t\t\"\t<N extends String> void x2();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba7d150b76e9ef57b03f69e5b5ab5e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void testTypeRefAll_Annotation() throws CoreException", "signatureAfterChange": " public void testTypeRefAll_Annotation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@\ufffd|Bug|\ufffd(num=155013)@70] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@\ufffd|Bug|\ufffd(comment=\\\"field\\\")@127] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t@\ufffd|Bug|\ufffd(comment=\\\"method\\\", num=155013)@424] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|Bug|\ufffd@19] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|ATest|\ufffd@24] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest1 [@\ufffd|Bug|\ufffd@128] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [@\ufffd|ATest|\ufffd@153] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|Bug|\ufffd@195] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|ATest|\ufffd@200] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ATest [@\ufffd|Bug|\ufffd@221] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@!|Bug|!(num=155013)@70] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@!|Bug|!(comment=\\\"field\\\")@127] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java Types all.types.ref.TestTypes.method(Types) [\t@!|Bug|!(comment=\\\"method\\\", num=155013)@424] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|Bug|!@19] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|ATest|!@24] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest1 [@!|Bug|!@128] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [@!|ATest|!@153] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|Bug|!@195] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|ATest|!@200] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ATest [@!|Bug|!@221] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f4987f340f73c02f5dd9663533b31a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "commitAfterChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " \tpublic void test112()", "signatureAfterChange": " \tpublic void test112()", "diff": ["-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\t\"    void foo(X<Thread>.MX.MMX<X> mx) {}\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"    void foo(X<Thread>.MX<String>.MMX<X> mx) {}\\n\" + ", "-\t\t\t\"\tvoid foo(X<Thread>.MX.MMX<X> mx) {}\\n\" + ", "+\t\t\t\"\tvoid foo(X<Thread>.MX<String>.MMX<X> mx) {}\\n\" + ", "-\t\t\t\"Bound mismatch: The type Thread is not a valid substitute for the bounded parameter <T extends X.MX<Runnable>.MMX<Iterable<String>>> of the type X<T>\\n\" + ", "+\t\t\t\"Bound mismatch: The type Thread is not a valid substitute for the bounded parameter <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>> of the type X<T>\\n\" + ", "-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\tpublic class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\t                               ^^^^^^^^\\n\" +", "+\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                                         ^^^^^^^^\\n\" + ", "-\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"public class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\tpublic class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"\t                                             ^^^^^^^^\\n\" +", "+\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                                                       ^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94df20a2f6286ba1b601c6febc91a43e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9985670d6cab2b1578b32622dc26b9ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tpublic void testBug95521b()", "signatureAfterChange": " \tpublic void testBug95521b()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce4792e5bd20d4baf3412fb08d17352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "130cb4765fd3f636bbf53ed159d4905dec0a5fd5", "commitAfterChange": "938f4b2ad6ef3c12e60db3be23aed731979677d7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"The argument of type null should explicitly be cast to byte[][] for the invocation of the varargs method byte2(byte[]...) from type Y. It could alternatively be cast to byte[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method byte2(byte[]...) doesn't exactly match the vararg parameter type. Cast to byte[][] to confirm the non-varargs invocation, or pass individual arguments of type byte[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object(Object...) doesn't exactly match the vararg parameter type. Cast to Object[] to confirm the non-varargs invocation, or pass individual arguments of type Object for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type byte[][][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type String[][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" +", "+\t\t\t\"Type String[][] of the last argument to method object2(Object[]...) doesn't exactly match the vararg parameter type. Cast to Object[][] to confirm the non-varargs invocation, or pass individual arguments of type Object[] for a varargs invocation.\\n\" +", "-\t\t\t\"The argument of type null should explicitly be cast to String[] for the invocation of the varargs method string(String...) from type Y. It could alternatively be cast to String for a varargs invocation\\n\" +", "+\t\t\t\"Type null of the last argument to method string(String...) doesn't exactly match the vararg parameter type. Cast to String[] to confirm the non-varargs invocation, or pass individual arguments of type String for a varargs invocation.\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a36422e04c09ffdbd8d6fa1c92d692ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments03() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GM<?, ?, ?>.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>.Generic<?,?,?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a72ca98cfc51e561146f8c9db2e93c09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test17() throws JavaModelException", "signatureAfterChange": "  \tpublic void test17() throws JavaModelException", "diff": ["-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Field {key=LTest$Field;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo {key=LTest$Field;.foo} [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\",", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo [in Field [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abd80819ee490028d6fb595ffa9c24b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testTypeRef_AllFlags() throws CoreException", "signatureAfterChange": " public void testTypeRef_AllFlags() throws CoreException", "diff": ["-\t\t\"src/type/ref/TestTypes.java [import \ufffd|type.def.Types|\ufffd;@25] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends \ufffd|Types|\ufffd {@111] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t\ufffd|Types|\ufffd field;@143] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\ufffd|Types|\ufffd method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(\ufffd|Types|\ufffd param) throws Types {@206] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws \ufffd|Types|\ufffd {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new \ufffd|Types|\ufffd();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t\ufffd|Types|\ufffd local = (Types) obj;@264] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (\ufffd|Types|\ufffd) obj;@279] EXACT_MATCH\\n\" +", "-\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (\ufffd|Types|\ufffd ex) {@366] EXACT_MATCH\"", "+\t\t\"src/type/ref/TestTypes.java [import !|type.def.Types|!;@25] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes [public class TestTypes extends !|Types|! {@111] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java type.ref.TestTypes.field [\t!|Types|! field;@143] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t!|Types|! method(Types param) throws Types {@193] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(!|Types|! param) throws Types {@206] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\tTypes method(Types param) throws !|Types|! {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tObject obj = new !|Types|!();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\t!|Types|! local = (Types) obj;@264] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Types type.ref.TestTypes.method(Types) [\t\tTypes local = (!|Types|!) obj;@279] EXACT_MATCH\\n\" +", "+\t\t\"src/type/ref/TestTypes.java Bug type.ref.TestTypes.bar(Bug) [\t\t} catch (!|Types|! ex) {@366] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c1dade0d30d327087df3f4bee9f8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments02() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0f87cfb4d5a6149937d517a910a305", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java", "commitBeforeChange": "d82bab5c3bc5a3dc0c32d13db0378bcec919d784", "commitAfterChange": "8d68c9962442e5181cbad94c9202c0f79b424840", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void test18() throws JavaModelException", "signatureAfterChange": "  \tpublic void test18() throws JavaModelException", "diff": ["-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "-\t\t\t\"Test {key=LTest;} [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "-\t\t\t\"Method {key=LTest$Method;} [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "-\t\t\t\"foo() {key=LTest$Method;.foo()V} [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\",", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\\n\" + ", "+\t\t\t\"Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]\\n\" + ", "+\t\t\t\"Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]\\n\" + ", "+\t\t\t\"foo() [in Method [in Test [in [Working copy] Test.java [in <default> [in <project root> [in Tests]]]]]]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfa30d21c57b843a68a87fb3ddcc498f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArray [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionList [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArray [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionList [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArray [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/QualifSingle.java g6.t.ref.QualifSingle.exceptionListArrayList [g6.t.def.List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java [g6.t.def.List] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.list [List] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionList [List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArray [List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g6/t/ref/Single.java g6.t.ref.Single.exceptionListArrayList [List] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb693bcc64a25dc599266fdb3bee503", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"Ambiguous argument for the varargs method byte2(byte[]...) from the type Y. Argument should be casted to byte[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to byte[][] when passed to the method byte2(byte[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[] when passed to the method object(Object...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[][] when passed to the method object2(Object[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[][] when passed to the method object2(Object[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to Object[][] when passed to the method object2(Object[]...) from the type Y\\n\" + ", "-\t\t\t\"Ambiguous argument for the varargs method string(String...) from the type Y. Argument should be casted to String[] to disambiguate, since it is passed as is\\n\" + ", "+\t\t\t\"Varargs argument should be cast to String[] when passed to the method string(String...) from the type Y\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24b2e91a1006b3f99593c518a2c8782", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void testTypeRefQualifiedAll_Annotation() throws CoreException", "signatureAfterChange": " public void testTypeRefQualifiedAll_Annotation() throws CoreException", "diff": ["-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@\ufffd|type.def.Bug|\ufffd(num=155013)@25] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@\ufffd|type.def.Bug|\ufffd(comment=\\\"field\\\")@100] EXACT_MATCH\\n\" +", "-\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t@\ufffd|type.def.Bug|\ufffd(comment=\\\"method\\\", num=155013)@460] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|Bug|\ufffd@19] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.Types [@\ufffd|ATest|\ufffd@24] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest1 [@\ufffd|Bug|\ufffd@128] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ITest2 [@\ufffd|ATest|\ufffd@153] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|Bug|\ufffd@195] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ETest [@\ufffd|ATest|\ufffd@200] EXACT_MATCH\\n\" +", "-\t\t\"src/type/def/Types.java type.def.ATest [@\ufffd|Bug|\ufffd@221] EXACT_MATCH\"", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes [@!|type.def.Bug|!(num=155013)@25] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java all.types.ref.TestTypes.field [\t@!|type.def.Bug|!(comment=\\\"field\\\")@100] EXACT_MATCH\\n\" +", "+\t\t\"src/all/types/ref/TestTypes.java type.def.Types all.types.ref.TestTypes.method(type.def.Types) [\t@!|type.def.Bug|!(comment=\\\"method\\\", num=155013)@460] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|Bug|!@19] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.Types [@!|ATest|!@24] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest1 [@!|Bug|!@128] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ITest2 [@!|ATest|!@153] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|Bug|!@195] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ETest [@!|ATest|!@200] EXACT_MATCH\\n\" +", "+\t\t\"src/type/def/Types.java type.def.ATest [@!|Bug|!@221] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5fdaa245db6f1ddf464d34050be3552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "96a363e844088de7fad02c93968495ea0dca52ac", "commitAfterChange": "20306af2785b6993ef03f5b59102e1d76672145c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"Varargs argument null should be cast to byte[][] when passed to the method byte2(byte[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to byte[][] for the invocation of the varargs method byte2(byte[]...) from type Y. It could alternatively be cast to byte[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument byte[][] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type byte[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument byte[][][] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument String[] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type String[] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument String[][] should be cast to Object[] when passed to the method object(Object...) from type Y\\n\" + ", "+\t\t\t\"The argument of type String[][] should explicitly be cast to Object[] for the invocation of the varargs method object(Object...) from type Y. It could alternatively be cast to Object for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to Object[][] when passed to the method object2(Object[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument byte[][][] should be cast to Object[][] when passed to the method object2(Object[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type byte[][][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument String[][] should be cast to Object[][] when passed to the method object2(Object[]...) from type Y\\n\" + ", "+\t\t\t\"The argument of type String[][] should explicitly be cast to Object[][] for the invocation of the varargs method object2(Object[]...) from type Y. It could alternatively be cast to Object[] for a varargs invocation\\n\" + ", "-\t\t\t\"Varargs argument null should be cast to String[] when passed to the method string(String...) from type Y\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to String[] for the invocation of the varargs method string(String...) from type Y. It could alternatively be cast to String for a varargs invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99e6b390503f62a2ca57cda5181de0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testStringAnyStrings03() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EXACT_MATCH\","]}], "num": 11350}
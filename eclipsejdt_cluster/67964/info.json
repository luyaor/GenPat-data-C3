{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a78816a094e9a602fb31f7f1dbb2531e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e5124e4fc5cc64d42b25605bdd1d09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "34e1323714720fac6c0469cd7d4221981cde60ef", "commitAfterChange": "cd0ef371d41af41215f5d9573eaf8b0116d8b98f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t\tStringWriter stringWriter = new StringWriter();", "+\t\t\t\t\t\t\tPrintWriter writer = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\twriter = new PrintWriter(stringWriter);", "+\t\t\t\t\t\t\t\te.printStackTrace(writer);", "+\t\t\t\t\t\t\t} finally {", "+\t\t\t\t\t\t\t\tif (writer != null) writer.close();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthrow new IllegalStateException(String.valueOf(stringWriter.getBuffer()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230d0fe64c6e12a61460aac1ab30466a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "acfd6219b4879c4f154d609311f730da9a1473fe", "commitAfterChange": "ba5522acacd2cbe8e43baf52d73c691d0f7ad183", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "signatureAfterChange": " \tprotected String getURLContents(String docUrlValue) throws JavaModelException", "diff": ["-\t\t} catch(IOException e) {", "-\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this));", "+\t\t} /*catch(SocketException e) {", "+\t\t\t// ignore. see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=120559", "+\t\t} */catch(IOException e) {", "+\t\t\tStringWriter stringWriter = new StringWriter();", "+\t\t\tPrintWriter writer = new PrintWriter(stringWriter);", "+\t\t\te.printStackTrace(writer);", "+\t\t\twriter.flush();", "+\t\t\twriter.close();", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC, this, String.valueOf(stringWriter.getBuffer())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a6e307fc57454e90fd84585a31e1772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "82bb8e030c97c8b6d4b4c5a8a55fcc04604c66cf", "commitAfterChange": "86daaec2d4ad901c52360cac0138f3cff784d3b8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\t\r \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "\r \t\t\r \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "diff": ["+\t\tExplicitConstructorCall explicitConstructorCall = null;\r", "+\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) methodDeclaration;\r", "+\t\t\texplicitConstructorCall = constructorDeclaration.constructorCall;\r", "-\t\tif (statements != null) {\r", "+\t\t\r", "+\t\tif (statements != null || explicitConstructorCall != null) {\r", "-\t\t\tint statementsLength = statements.length;\r", "+\t\t\tif (explicitConstructorCall != null) {\r", "+\t\t\t\tblock.statements().add(convert(explicitConstructorCall));\r", "+\t\t\t}\r", "+\t\t\tint statementsLength = statements == null ? 0 : statements.length;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbef058d3b21182177d0424bdd92f3be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static IClassFileReader createDefaultClassFileReader(IClassFile classfile, int decodingFlag)", "signatureAfterChange": " \tpublic static IClassFileReader createDefaultClassFileReader(IClassFile classfile, int decodingFlag)", "diff": ["-\t\t\t\t\tIPath location = classfile.getResource().getLocation();", "-\t\t\t\t\tif (location == null) return null;", "-\t\t\t\t\treturn createDefaultClassFileReader(location.toOSString(), decodingFlag);", "+\t\t\t\t\tURI uri = classfile.getResource().getLocationURI();", "+\t\t\t\t\tif (uri == null) return null;", "+\t\t\t\t\tInputStream in = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tin = EFS.getStore(uri).openInputStream(EFS.NONE, null);", "+\t\t\t\t\t\treturn createDefaultClassFileReader(in, decodingFlag);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tif (in != null)", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tin.close();", "+\t\t\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22936249dbc8ab0814188e7a57999b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "ab20fccfe10c557b2eadd05f353546a2c1937b1d", "commitAfterChange": "30f4f00f119897159bc44be7bed4fd917933e44b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["+\t\t\tclass ProgressJob extends Job {", "+\t\t\t\tProgressJob(String name) {", "+\t\t\t\t\tsuper(name);", "+\t\t\t\t}", "+\t\t\t\tprotected IStatus run(IProgressMonitor monitor) {", "+\t\t\t\t\tint awaitingJobsCount;", "+\t\t\t\t\twhile ((awaitingJobsCount = awaitingJobsCount()) > 0) {", "+\t\t\t\t\t\tmonitor.subTask(Util.bind(\"manager.filesToIndex\", Integer.toString(awaitingJobsCount))); //$NON-NLS-1$", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tThread.sleep(500);", "+\t\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tProgressJob progressJob = null;", "+\t\t\t\t\t\t\tif (progressJob != null) progressJob = null;", "+\t\t\t\t\t\tif (progressJob == null) {", "+\t\t\t\t\t\t\tprogressJob = new ProgressJob(Util.bind(\"manager.indexingInProgress\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\tprogressJob.setPriority(Job.LONG);", "+\t\t\t\t\t\t\tprogressJob.setSystem(true);", "+\t\t\t\t\t\t\tprogressJob.schedule();", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8269bb7fcbf5ee5f7da0179e3795894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "364162b9feaf5e9e5e71252e944c7714c800d11d", "commitAfterChange": "e236c25d0328a0463731f0c77528d8496cfa816e", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void test021_output_streams() throws IOException", "signatureAfterChange": " public void test021_output_streams() throws IOException", "diff": ["-\tassertTrue(outBuffer.toString().startsWith(\"Eclipse Compiler for Java\"));", "+\tProperties properties = new Properties();", "+\tInputStream resourceAsStream = null;", "+\ttry {", "+\t\tresourceAsStream = Main.class.getResourceAsStream(\"messages.properties\");", "+\t\tproperties.load(resourceAsStream);", "+\t} finally {", "+\t\tif (resourceAsStream != null) {", "+\t\t\tresourceAsStream.close();", "+\t\t}", "+\t}", "+\tassertTrue(outBuffer.toString().startsWith(properties.getProperty(\"compiler.name\")));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea677095712d48f12fc6903e92f474fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "193042cfcc3e974ade1d4da172a703fabd891361", "commitAfterChange": "bba53a7d9b86041ddcc96b8e42826ecbf3c21464", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void init()", "signatureAfterChange": " \tpublic static void init()", "diff": ["+\t\tClass<?> c = null;", "+\t\ttry {", "+\t\t\tc = Class.forName(\"org.eclipse.jdt.internal.compiler.tool.EclipseCompiler\");", "+\t\t} catch (ClassNotFoundException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tif (c == null) {", "+\t\t\tAssert.assertTrue(\"Eclipse compiler is not available\", false);", "+\t\t}", "-\t\t\tif (javaCompiler instanceof EclipseCompiler) {", "+\t\t\tif (c.isInstance(javaCompiler)) {", "+\t\tAssert.assertNotNull(\"No Eclipse compiler found\", _eclipseCompiler);"]}], "num": 67964}
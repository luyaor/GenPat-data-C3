{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af01eb1ecf82aca70e6550f726f8d637", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b94bd7a53909ac53eb0b4e6c020bc32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateReturnBytecode(CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateReturnBytecode(CodeStream codeStream)", "diff": ["-\t\t\tswitch (expression.implicitConversion >> 4) {", "+\t\t\tfinal int implicitConversion = expression.implicitConversion;", "+\t\t\tif ((implicitConversion & BOXING) != 0) {", "+\t\t\t\tcodeStream.areturn();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tint runtimeType = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "+\t\t\tswitch (runtimeType) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "984f9d132bde383bf3b1934b131c11af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "bce0dbd9dd489d3038652b337b4b76bb1f2246a4", "commitAfterChange": "f04ae71cc7d18b0e34f184a3124e4f7f58dafcf3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic final boolean isFieldUseDeprecated(FieldBinding field, Scope scope, boolean isStrictlyAssigned)", "signatureAfterChange": "  \tpublic final boolean isFieldUseDeprecated(FieldBinding field, Scope scope, int filteredBits)", "diff": ["-\tpublic final boolean isFieldUseDeprecated(FieldBinding field, Scope scope, boolean isStrictlyAssigned) {", "-\t\t// ignore references insing Javadoc comments", "-\t\tif ((this.bits & ASTNode.InsideJavadoc) == 0 && !isStrictlyAssigned && field.isOrEnclosedByPrivateType() && !scope.isDefinedInField(field)) {", "-\t\t\t// ignore cases where field is used from inside itself", "-\t\t\tfield.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\tpublic final boolean isFieldUseDeprecated(FieldBinding field, Scope scope, int filteredBits) {", "+\t\tif ((this.bits & ASTNode.InsideJavadoc) == 0\t\t\t// ignore references inside Javadoc comments ", "+\t\t\t\t&& (filteredBits & IsStrictlyAssigned) == 0 \t// ignore write access", "+\t\t\t\t&& field.isOrEnclosedByPrivateType() ", "+\t\t\t\t&& !scope.isDefinedInField(field)) \t\t\t\t// ignore cases where field is used from inside itself ", "+\t\t{\t\t", "+\t\t\tif (((filteredBits & IsCompoundAssigned) != 0))", "+\t\t\t\t// used, but usage may not be relevant", "+\t\t\t\tfield.original().compoundUseFlag++;", "+\t\t\telse", "+\t\t\t\tfield.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;"]}], "num": 4289}
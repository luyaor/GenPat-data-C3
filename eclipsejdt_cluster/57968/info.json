{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "878d838f7b01cf809493791fe094d31f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd496e1b6409d999325510c1fea122d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testDiscardWorkingCopy3() throws CoreException", "signatureAfterChange": " \tpublic void testDiscardWorkingCopy3() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t\tassertTrue(\"should be opened\", workingCopy.isOpen());", "-\t\t\tassertTrue(\"should exist\", workingCopy.exists());", "+\t\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tthis.workingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());", "+\t\t\tassertTrue(\"should be opened\", this.workingCopy.isOpen());", "+\t\t\tassertTrue(\"should exist\", this.workingCopy.exists());", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\tassertTrue(\"should still be in working copy mode (1)\", workingCopy.isWorkingCopy());", "-\t\t\tassertTrue(\"should still be opened\", workingCopy.isOpen());", "-\t\t\tassertTrue(\"should still exist\", workingCopy.exists());", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t\tassertTrue(\"should still be in working copy mode (1)\", this.workingCopy.isWorkingCopy());", "+\t\t\tassertTrue(\"should still be opened\", this.workingCopy.isOpen());", "+\t\t\tassertTrue(\"should still exist\", this.workingCopy.exists());", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\tassertTrue(\"should still be in working copy mode (2)\", workingCopy.isWorkingCopy());", "-\t\t\tassertTrue(\"should no longer be opened\", !workingCopy.isOpen());", "-\t\t\tassertTrue(\"should no longer exist\", !workingCopy.exists());", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "+\t\t\tassertTrue(\"should still be in working copy mode (2)\", this.workingCopy.isWorkingCopy());", "+\t\t\tassertTrue(\"should no longer be opened\", !this.workingCopy.isOpen());", "+\t\t\tassertTrue(\"should no longer exist\", !this.workingCopy.exists());", "-\t\t\tif (workingCopy != null) {", "+\t\t\tif (this.workingCopy != null) {", "-\t\t\t\twhile (workingCopy.isWorkingCopy() && max-- > 0) {", "-\t\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\t\twhile (this.workingCopy.isWorkingCopy() && max-- > 0) {", "+\t\t\t\t\tthis.workingCopy.discardWorkingCopy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e8a74a99a62782558596a99cf63c3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "signatureAfterChange": " \t \tpublic boolean isPolyExpression() throws UnsupportedOperationException", "diff": ["+\t\tif (!this.use18specifics)", "+\t\t\treturn false;", "+\t\t", "+\t\tif (this.originalValueIfTrueType == null || this.originalValueIfFalseType == null) // resolution error.", "+\t\t\treturn false;", "+\t\t", "+\t\tif (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE)", "+\t\t\treturn true;", "+\t\t", "-\t\tTypeBinding opType = this.valueIfTrue.resolvedType;", "-\t\tif (opType != null && opType.id != TypeIds.T_null) {", "-\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "+\t\tif (this.originalValueIfTrueType.isBaseType() || (this.originalValueIfTrueType.id >= TypeIds.T_JavaLangByte && this.originalValueIfTrueType.id <= TypeIds.T_JavaLangBoolean)) {", "+\t\t\tif (this.originalValueIfFalseType.isBaseType() || (this.originalValueIfFalseType.id >= TypeIds.T_JavaLangByte && this.originalValueIfFalseType.id <= TypeIds.T_JavaLangBoolean))", "-\t\topType = this.valueIfFalse.resolvedType;", "-\t\tif (opType != null && opType.id != TypeIds.T_null) {", "-\t\t\tif (opType.isBaseType() || (opType.id >= TypeIds.T_JavaLangByte && opType.id <= TypeIds.T_JavaLangBoolean))", "-\t\t\t\treturn false;", "-\t\t}", "-", "+\t\t", "+\t\t// clause around generic method's return type prior to instantiation needs double check. "]}], "num": 57968}
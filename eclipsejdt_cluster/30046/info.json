{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e80e757cb8e9e939ac848d45fd15879", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b94f2ede18ef9117d0f8da73fb78f49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RuntimeTests.java", "commitBeforeChange": "3be7934f7c94514efb5e3694ac0f03c0517495d6", "commitAfterChange": "8b652598c17549faef51247e93db0d72df65b405", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void _test0600_reflection()", "signatureAfterChange": " public void test0600_reflection()", "diff": ["-public void _test0600_reflection() {", "+// **", "+public void test0600_reflection() {", "-\t\t\"SUCCESS\\nSUCCESS\"", "+\t\t\"SUCCESS\\n\" + ", "+\t\t\"FAILURE: Class X can not access a member of class p.Z with modifiers \\\"public\\\"\\n\" + ", "+\t\t\"java.lang.IllegalAccessException: Class X can not access a member of class p.Z with modifiers \\\"public\\\"\\n\" + ", "+\t\t\"\tat sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)\\n\" + ", "+\t\t\"\tat java.lang.reflect.Method.invoke(Method.java:588)\\n\" + ", "+\t\t\"\tat X.main(X.java:9)\\n\" + ", "+\t\t\"\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\" + ", "+\t\t\"\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\\n\" + ", "+\t\t\"\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\\n\" + ", "+\t\t\"\tat java.lang.reflect.Method.invoke(Method.java:597)\\n\" + ", "+\t\t\"\tat\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766589e5138564d6e42f333e1034b0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ae58cbb90a0e72a8dd69c0cd98dc1505a8668bf", "commitAfterChange": "4a1a6051dae9d70af8f16177f47bcc456f4eca12", "methodNumberBeforeChange": 597, "methodNumberAfterChange": 597, "signatureBeforeChange": "\t\t\t \tpublic void test593()", "signatureAfterChange": "\t\t\t \tpublic void test0593()", "diff": ["-\tpublic void test593() {", "+\tpublic void test0593() {", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tList<Class<?>> classes1 = Arrays.asList(String.class, Boolean.class);\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from List<Class<? extends Object&Serializable&Comparable<?>>> to List<Class<?>>\\n\" + ", "-\t\t\t\"----------\\n\");", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+    \t\t\"\tList<Class<?>> classes1 = Arrays.asList(String.class, Boolean.class);\\n\" + ", "+    \t\t\"\t               ^^^^^^^^\\n\" + ", "+    \t\t\"Type mismatch: cannot convert from List<Class<? extends Object&Serializable&Comparable<?>>> to List<Class<?>>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+    \t\t\"\tList<Class<?>> classes1 = Arrays.asList(String.class, Boolean.class);\\n\" + ", "+    \t\t\"\t                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety : A generic array of Class<? extends Object&Serializable&Comparable<?>> is created for a varargs parameter\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+    \t\t\"\tList<? extends Class<?>> classes2 = Arrays.asList(String.class, Boolean.class);\\n\" + ", "+    \t\t\"\t                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety : A generic array of Class<? extends Object&Serializable&Comparable<?>> is created for a varargs parameter\\n\" + ", "+    \t\t\"----------\\n\");"]}], "num": 30046}
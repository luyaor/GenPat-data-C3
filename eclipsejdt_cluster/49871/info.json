{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbf56aafc66bad7411d8e9c01da13272", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cecf37a62b96e49e7e4aa5d7d8c2dec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "f64c781b520a5d04053021f1d2ec4228934d3094", "commitAfterChange": "f4cb909d55448a19964594cbb4a048da9d7e78f7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["+\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ComparingIdentical\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"MissingSynchronizedModifierInInheritedMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "-\t\texpectedProblemAttributes.put(\"ShouldImplementHashcode\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\tStringBuffer correctResult = new StringBuffer(70000);", "-\t\t\t\tint problemId = field.getInt(iProblemClass), maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "+\t\t\t\tint problemId = field.getInt(iProblemClass);", "+\t\t\t\tint maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "-\t\t\t\t\t\tSystem.out.println(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.CAT_UNSPECIFIED));\");", "+\t\t\t\t\t\tint actualCategory = ProblemReporter.getProblemCategory(ProblemSeverities.Error, problemId);", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\\n\");", "-\t\t\t\t\t\t\tSystem.out.println(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", new ProblemAttributes(CategorizedProblem.\" + categoryName(actualCategory) + \"));\");", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcorrectResult.append(\"\\t\\texpectedProblemAttributes.put(\\\"\" + field.getName() + \"\\\", DEPRECATED);\\n\");", "+\t\t}", "+\t\tif (failures.length() > 0) {", "+\t\t\tSystem.out.println(correctResult);", "+\t\t\tSystem.out.println();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f47ac35f0fd2ffad4c4c137d89dc64e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["+\t\texpectedProblemAttributes.put(\"ConflictingTypeEmulation\", new ProblemAttributes(CategorizedProblem.CAT_BUILDPATH));", "+\t\texpectedProblemAttributes.put(\"DefiniteNullFromNonNullMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"DefiniteNullToNonNullParameter\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"DefiniteNullToNonNullLocal\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"IllegalDefinitionToNonNullParameter\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"IllegalRedefinitionToNullableReturn\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"IllegalRedefinitionToNonNullParameter\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"MissingNullAnnotationType\", new ProblemAttributes(CategorizedProblem.CAT_BUILDPATH));", "+\t\texpectedProblemAttributes.put(\"NonNullLocalInsufficientInfo\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NonNullParameterInsufficientInfo\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"NonNullReturnInsufficientInfo\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"PotentialNullFromNonNullMethod\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"PotentialNullToNonNullLocal\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"PotentialNullToNonNullParameter\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));"]}], "num": 49871}
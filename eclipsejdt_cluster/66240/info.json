{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca9adae423788f0c5c0bcd1ae5fbe509", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b4192ab84ea39ef95798a54b69c9b2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "commitAfterChange": "124dd88225a5a14f52eb2599c64569ad41838fe8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\t\t\tif (currentType.isStatic() && enclosingType.isGenericType()) {", "-\t\t\t\t\tenclosingType = scope.environment().createRawType(enclosingType, enclosingType.enclosingType());", "+\t\t\t\tif (currentType.isStatic() && (enclosingType.isGenericType() || enclosingType.isParameterizedType())) {", "+\t\t\t\t\tenclosingType = scope.environment().createRawType((ReferenceBinding)enclosingType.erasure(), enclosingType.enclosingType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de051081e452815ab7f01f1549391fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a725c7050ef02b8e240004926fb73e6f29767ffe", "commitAfterChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey()", "signatureAfterChange": " \t \tpublic char[] computeUniqueKey()", "diff": ["+\t\t} else if(this.type.isLocalType()){", "+\t\t\tLocalTypeBinding localTypeBinding = (LocalTypeBinding) this.type;", "+\t\t\tReferenceBinding enclosing = localTypeBinding.enclosingType();", "+\t\t\tReferenceBinding temp;", "+\t\t\twhile ((temp = enclosing.enclosingType()) != null)", "+\t\t\t\tenclosing = temp;", "+\t\t\tchar[] typeSig = enclosing.signature();", "+\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t\tsig.append('$');", "+\t\t\tsig.append(localTypeBinding.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f8af4d31e2c9666ea0970aed0a7702d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "167bbad42ecb0a9d7f5fb34b71f36a09040fde91", "commitAfterChange": "f46971551de7cadf79c08b3a267e0e31fff38966", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\t\tif (enclosingType != null && enclosingType.isGenericType()) {", "+\t\t\tif (enclosingType != null && (enclosingType.isGenericType() || enclosingType.isParameterizedType())) {", "-\t\t\t\t? (ReferenceBinding) scope.environment().convertToRawType(enclosingType)", "-\t\t\t\t: scope.environment().convertToParameterizedType(enclosingType);", "+\t\t\t\t\t? (ReferenceBinding) scope.environment().convertToRawType(enclosingType)", "+\t\t\t\t\t: scope.environment().convertToParameterizedType(enclosingType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7ee6edddfe0b27b883f827232dcdba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "0f82c3c2351d2b4aa115f915a692d896ffbf12db", "commitAfterChange": "42ba068696287a55bc72837ef925c3e42a2ffc11", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \t \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\t\tif (this.isMemberType() && enclosingType().isParameterizedType()) {", "-\t\t    char[] typeSig = enclosingType().computeUniqueKey(false/*not a leaf*/);", "+\t    ReferenceBinding enclosing;", "+\t\tif (isMemberType() && ((enclosing = enclosingType()).isParameterizedType() || enclosing.isRawType())) {", "+\t\t    char[] typeSig = enclosing.computeUniqueKey(false/*not a leaf*/);", "-\t\t\tReferenceBinding enclosing = localTypeBinding.enclosingType();", "+\t\t\tenclosing = localTypeBinding.enclosingType();", "-", "+\t", "-   \t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3b4add5de33cf956bb067a80f8b780", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "b1ae1329170704a653622075caf9054b53c5ea54", "commitAfterChange": "e719dd5a3586c01e5265dc68f8e6023c180424cf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r public void emulateOuterAccess(ReferenceBinding targetEnclosingType, boolean useDirectReference)", "signatureAfterChange": "\r \r public void emulateOuterAccess(ReferenceBinding targetEnclosingType, boolean useDirectReference)", "diff": ["-\tif (currentType.isNestedType() && currentType != targetEnclosingType) {\r", "+\tif (currentType.isNestedType() \r", "+\t\t&& currentType != targetEnclosingType \r", "+\t\t&& !targetEnclosingType.isSuperclassOf(currentType)) {\r", "+\r", "-\t\t\twhile (currentType != targetEnclosingType && !targetEnclosingType.isSuperclassOf(currentType)) {\r", "+\t\t\twhile (currentType.isNestedType() \r", "+\t\t\t\t\t&& currentType != targetEnclosingType \r", "+\t\t\t\t\t&& !targetEnclosingType.isSuperclassOf(currentType)) {\r", "+\t\t\t\t\t\t\r"]}], "num": 66240}
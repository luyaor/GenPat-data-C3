{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9207d1a768b5df4c88059c55532b3bd0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54e73802d1eb5ef4c211830bcff427e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfinal boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;", "+\t\t}", "+\t\tif (isDiamond) {", "+\t\t\tscope.problemReporter().diamondNotWithExplicitTypeArguments(this.typeArguments);", "+\t\t\treturn null;", "+\t\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=345359, if arguments have errors, completely bail out in the <> case.", "+\t\t\t   No meaningful type resolution is possible since inference of the elided types is fully tied to argument types. Do", "+\t\t\t   not return the partially resolved type.", "+\t\t\t */", "+\t\t\tif (isDiamond) {", "+\t\t\t\treturn null; // not the partially cooked this.resolvedType", "+\t\t\t}", "-\t\t\t\t// record a best guess, for clients who need hint about possible contructor match", "+\t\t\t\t// record a best guess, for clients who need hint about possible constructor match", "+\tif (isDiamond) {", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes(((ParameterizedTypeBinding) this.resolvedType).genericType(), null, argumentTypes, scope);", "+\t\tif (inferredTypes == null) {", "+\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "+\t\t\treturn this.resolvedType = null;", "+\t\t}", "+\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) this.resolvedType).genericType(), inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "+ \t}", "+\tif (!isDiamond && this.resolvedType.isParameterizedTypeWithActualArguments()) {", "+ \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, null, argumentTypes, scope);", "+ \t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e561280225d360e8998b0d80c2a60717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tfinal boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;", "+\t\t\t}", "+\t\t\tif (isDiamond) {", "+\t\t\t\tscope.problemReporter().diamondNotWithExplicitTypeArguments(this.typeArguments);", "+\t\t\t\treturn null;", "+\t\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=345359, if arguments have errors, completely bail out in the <> case.", "+\t\t\t   No meaningful type resolution is possible since inference of the elided types is fully tied to argument types. Do", "+\t\t\t   not return the partially resolved type.", "+\t\t\t */", "+\t\t\tif (isDiamond) {", "+\t\t\t\treturn null; // not the partially cooked this.resolvedType", "+\t\t\t}", "+\t\t\tif (isDiamond) {", "+\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(((ParameterizedTypeBinding) receiverType).genericType(), receiverType.enclosingType(), argumentTypes, scope);", "+\t\t\t\tif (inferredTypes == null) {", "+\t\t\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "+\t\t\t\t\treturn this.resolvedType = null;", "+\t\t\t\t}", "+\t\t\t\treceiverType = this.type.resolvedType = scope.environment().createParameterizedType(((ParameterizedTypeBinding) receiverType).genericType(), inferredTypes, ((ParameterizedTypeBinding) receiverType).enclosingType());", "+\t\t\t}", "+\t\t\tif (!isDiamond && receiverType.isParameterizedTypeWithActualArguments()) {", "+\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), argumentTypes , scope);", "+\t\t \t}", "+\t\t} else {", "+\t\t\tif (isDiamond) {", "+\t\t\t\tscope.problemReporter().diamondNotWithAnoymousClasses(this.type);", "+\t\t\t\treturn null;", "+\t\t\t}\t"]}], "num": 43891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8328f08c66eb78f833c55cf362ad1aae", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf8179190007826e55bcf793349c090", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel)", "diff": ["-\t\t\tif (isViewedAsDeprecated && !method.isDeprecated()) {", "+\t\t\tif (isViewedAsDeprecated && !method.isDeprecated())", "-\t\t\t}\t\t", "-\t\tfor (int i = 0, index = 0; i < initialTotal; i++)", "+\t\tfor (int i = 0, index = 0; i < initialTotal; i++) {", "-\t\t\t\tif (isViewedAsDeprecated && !method.isDeprecated()) {", "+\t\t\t\tif (isViewedAsDeprecated && !method.isDeprecated())", "-\t\t\t\t}\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5892585072623427aacf17ad1ab76491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void faultInTypesForFieldsAndMethods()", "signatureAfterChange": " void faultInTypesForFieldsAndMethods()", "diff": ["-", "-\tif (enclosingType != null && enclosingType.isViewedAsDeprecated() && !this.isDeprecated()) {", "-\t\tmodifiers |= AccDeprecatedImplicitly;\t", "-\t}", "+\tif (enclosingType != null && enclosingType.isViewedAsDeprecated() && !this.isDeprecated())", "+\t\tmodifiers |= AccDeprecatedImplicitly;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2774a2f119de836e234a2fd60a6653", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "cae2235178dd91d5be4ed811b5134ba4b502f56a", "commitAfterChange": "20291e123853b40f3437b01ca0907aa48371db12", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\tboolean isViewedAsDeprecated = isViewedAsDeprecated();", "-\t\t\tif (isViewedAsDeprecated && !method.isDeprecated())", "-\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "-\t\t\t\tif (isViewedAsDeprecated && !method.isDeprecated())", "-\t\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f31700a6e87e283062b0bf015264de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "cae2235178dd91d5be4ed811b5134ba4b502f56a", "commitAfterChange": "20291e123853b40f3437b01ca0907aa48371db12", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["+\t\t\tboolean isViewedAsDeprecated = isViewedAsDeprecated();", "+\t\t\tif (isViewedAsDeprecated) {", "+\t\t\t\tfor (int i = 0, max = this.fields.length; i < max; i++) {", "+\t\t\t\t\tFieldBinding field = this.fields[i];", "+\t\t\t\t\tif (!field.isDeprecated()) {", "+\t\t\t\t\t\tfield.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0, max = this.methods.length; i < max; i++) {", "+\t\t\t\t\tMethodBinding method = this.methods[i];", "+\t\t\t\t\tif (!method.isDeprecated()) {", "+\t\t\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7ff1aaf76d075293cadae5b5ff64776", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "27b04348f6378e421a1a2788716e3b7fc8643774", "commitAfterChange": "f91a77f7dbbae615b9ce90f64f6be8f6d8a36ad5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \t\r \tprivate void checkAndSetModifiers()", "signatureAfterChange": "\r \t\r \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\t\tif (method.isStrictfp())\r", "-\t\t\t\t\tmodifiers |= AccStrictfp;\r", "-\t\t\t\tif (method.isDeprecated())\r", "-\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;\r", "+\t\t\t\tif (method != null){\r", "+\t\t\t\t\tif (method.isStrictfp())\r", "+\t\t\t\t\t\tmodifiers |= AccStrictfp;\r", "+\t\t\t\t\tif (method.isDeprecated())\r", "+\t\t\t\t\t\tmodifiers |= AccDeprecatedImplicitly;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e99abae855d98300b5b366e8b0f3abe7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-\t\tif (!methodDeclaration.isNative() && !methodDeclaration.isAbstract() && ((methodDeclaration.modifiers & CompilerModifiers.AccSemicolonBody) == 0)) {", "+\t\tif (!methodDeclaration.isNative() && !methodDeclaration.isAbstract() && ((methodDeclaration.modifiers & ExtraCompilerModifiers.AccSemicolonBody) == 0)) {"]}], "num": 58156}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7be69488b159516d71c67994fa871deb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341de14f6f718f09d25e1491f794c718", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "25a9dba189bcefd34377713ece67fd65377cdf3c", "commitAfterChange": "0eced122edcf3b4bb706c54234938f891591dcdc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException", "signatureAfterChange": " \tvoid compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException", "diff": ["+\t\tcompile(pluginID, options, null, log, srcPaths);", "+\t}", "-\t\tString compliance = \" -\" + (COMPLIANCE==null ? \"1.4\" : COMPLIANCE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "558d8732829df7fcf0ed979ebb1923f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "signatureAfterChange": " \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "diff": ["+\t// WORK good candidate for elimination (8 instances)", "-\t\t// Non-javac part", "-\t\ttry {", "-\t\t\tif (shouldFlushOutputDirectory)", "-\t\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-\t", "-\t\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\t\tRequestor requestor = ", "-\t\t\t\tnew Requestor(", "-\t\t\t\t\tproblemFactory, ", "-\t\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tclientRequestor,", "-\t\t\t\t\tfalse, /* show category */", "-\t\t\t\t\tfalse /* show warning token*/);", "-\t", "-\t\t\tMap options = getCompilerOptions();", "-\t\t\tif (customOptions != null) {", "-\t\t\t\toptions.putAll(customOptions);", "-\t\t\t}", "-\t\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\t\tcompilerOptions.performMethodsFullRecovery = false;", "-\t\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\t\tCompiler batchCompiler = ", "-\t\t\t\tnew Compiler(", "-\t\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\t\tcompilerOptions,", "-\t\t\t\t\trequestor, ", "-\t\t\t\t\tproblemFactory);", "-\t\t\tcompilerOptions.produceReferenceInfo = true;", "-\t\t\ttry {", "-\t\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t\t} catch(RuntimeException e) {", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\te.printStackTrace();", "-\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthrow e;", "-\t\t\t}", "-\t\t\tif (!requestor.hasErrors) {", "-\t\t\t\tString sourceFile = testFiles[0];", "-\t", "-\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-\t", "-\t\t\t\tif (vmArguments != null) {", "-\t\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\t}", "-\t\t\t\tboolean passed = ", "-\t\t\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\t\t\tsourceFile, ", "-\t\t\t\t\t\tclassName, ", "-\t\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\t\tnull, ", "-\t\t\t\t\t\tvmArguments);", "-\t\t\t\tif (!passed) {", "-\t\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\t\tpassed);", "-\t\t\t\tif (vmArguments != null) {", "-\t\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\tSystem.out.println(Util.displayString(requestor.problemLog, INDENT, SHIFT));", "-\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "-\t\t\t}", "-\t\t// javac part", "-\t\t} catch (AssertionFailedError e) {", "-\t\t\tthrow e;", "-\t\t} finally {", "-\t\t\tif (RUN_JAVAC && !skipJavac)", "-\t\t\t\trunJavac(testFiles, null, expectedSuccessOutputString, shouldFlushOutputDirectory);", "-\t\t\t  // PREMATURE for now, skipping javac implies skipping the compile", "-\t\t\t  //                and execution steps; yet, only cases for which the", "-\t\t\t  //                execution step was a problem have been discovered so", "-\t\t\t  //                far; may consider skipping the execution step only", "-\t\t}", "+\t\trunTest(", "+\t\t\tshouldFlushOutputDirectory, ", "+\t\t\ttestFiles,", "+\t\t\tclassLib,", "+\t\t\tcustomOptions,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tclientRequestor,", "+\t\t\tfalse,", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tvmArguments, ", "+\t\t\texpectedSuccessOutputString,", "+\t\t\tnull,", "+\t\t\t(skipJavac ? ", "+\t\t\t\t\tJavacTestOptions.SKIP : ", "+\t\t\t\t\tJavacTestOptions.DEFAULT));"]}], "num": 65884}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96fb6ca065a301b6ab9c12107e0fdb10", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33e6c196fc7c545e1bf1b8333480fea1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 376, "signatureBeforeChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "signatureAfterChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "diff": ["-// A P I", "-protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken) {", "-\tif(this.referenceContext instanceof MethodDeclaration) {", "-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) this.referenceContext;", "-\t\tif(methodDeclaration.errorInSignature){", "-\t\t\treturn;", "-\t\t}", "-\t}", "-\tthis.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();", "-\tthis.scanner.recordLineSeparator = false;", "-\t", "-\tint start = this.scanner.initialPosition;", "-\tint end = this.scanner.eofPosition <= Integer.MAX_VALUE ? this.scanner.eofPosition - 1 : this.scanner.eofPosition;", "-\tif(isDietParse) {", "-\t\tTypeDeclaration[] types = this.compilationUnit.types;", "-\t\t", "-\t\tint[][] intervalToSkip = org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil.computeDietRange(types);", "-\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end, intervalToSkip[0], intervalToSkip[1], intervalToSkip[2]);", "-\t\tdiagnoseParser.diagnoseParse();", "-\t\t", "-\t\treportSyntaxErrorsForSkippedMethod(types);", "-\t\tthis.scanner.resetTo(start, end);", "-\t} else {", "-\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end);", "-\t\tdiagnoseParser.diagnoseParse();", "-\t}", "-}", "+// A P I", "+protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken) {", "+\tif(this.referenceContext instanceof MethodDeclaration) {", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) this.referenceContext;", "+\t\tif(methodDeclaration.errorInSignature){", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\tthis.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();", "+\tthis.scanner.recordLineSeparator = false;", "+\t", "+\tint start = this.scanner.initialPosition;", "+\tint end = this.scanner.eofPosition <= Integer.MAX_VALUE ? this.scanner.eofPosition - 1 : this.scanner.eofPosition;", "+\tif(isDietParse) {", "+\t\tTypeDeclaration[] types = this.compilationUnit.types;", "+\t\t", "+\t\tint[][] intervalToSkip = org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil.computeDietRange(types);", "+\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end, intervalToSkip[0], intervalToSkip[1], intervalToSkip[2], this.options);", "+\t\tdiagnoseParser.diagnoseParse();", "+\t\t", "+\t\treportSyntaxErrorsForSkippedMethod(types);", "+\t\tthis.scanner.resetTo(start, end);", "+\t} else {", "+\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, oldFirstToken, start, end, this.options);", "+\t\tdiagnoseParser.diagnoseParse();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af0cd5c775fd7fb9dcc5f750947629ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 377, "signatureBeforeChange": " private void reportSyntaxErrorsForSkippedMethod(TypeDeclaration[] types)", "signatureAfterChange": " private void reportSyntaxErrorsForSkippedMethod(TypeDeclaration[] types)", "diff": ["-}", "-private void reportSyntaxErrorsForSkippedMethod(TypeDeclaration[] types){", "-\tif(types != null) {", "-\t\tfor (int i = 0; i < types.length; i++) {", "-\t\t\tTypeDeclaration[] memberTypes = types[i].memberTypes;", "-\t\t\tif(memberTypes != null) {", "-\t\t\t\treportSyntaxErrorsForSkippedMethod(memberTypes);", "-\t\t\t}", "-\t\t\t", "-\t\t\tAbstractMethodDeclaration[] methods = types[i].methods;", "-\t\t\tif(methods != null) {", "-\t\t\t\tfor (int j = 0; j < methods.length; j++) {", "-\t\t\t\t\tAbstractMethodDeclaration method = methods[j];", "-\t\t\t\t\tif(methods[j].errorInSignature) {", "-\t\t\t\t\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, TokenNameDIVIDE, method.declarationSourceStart, method.declarationSourceEnd);", "-\t\t\t\t\t\tdiagnoseParser.diagnoseParse();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tFieldDeclaration[] fields = types[i].fields;", "-\t\t\tif (fields != null) {", "-\t\t\t\tint length = fields.length;", "-\t\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\t\tif (fields[j] instanceof Initializer) {", "-\t\t\t\t\t\tInitializer initializer = (Initializer)fields[j];", "-\t\t\t\t\t\tif(initializer.errorInSignature){", "-\t\t\t\t\t\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, TokenNameRIGHT_SHIFT, initializer.declarationSourceStart, initializer.declarationSourceEnd);", "-\t\t\t\t\t\t\tdiagnoseParser.diagnoseParse();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+}", "+private void reportSyntaxErrorsForSkippedMethod(TypeDeclaration[] types){", "+\tif(types != null) {", "+\t\tfor (int i = 0; i < types.length; i++) {", "+\t\t\tTypeDeclaration[] memberTypes = types[i].memberTypes;", "+\t\t\tif(memberTypes != null) {", "+\t\t\t\treportSyntaxErrorsForSkippedMethod(memberTypes);", "+\t\t\t}", "+\t\t\t", "+\t\t\tAbstractMethodDeclaration[] methods = types[i].methods;", "+\t\t\tif(methods != null) {", "+\t\t\t\tfor (int j = 0; j < methods.length; j++) {", "+\t\t\t\t\tAbstractMethodDeclaration method = methods[j];", "+\t\t\t\t\tif(methods[j].errorInSignature) {", "+\t\t\t\t\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, TokenNameDIVIDE, method.declarationSourceStart, method.declarationSourceEnd, this.options);", "+\t\t\t\t\t\tdiagnoseParser.diagnoseParse();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tFieldDeclaration[] fields = types[i].fields;", "+\t\t\tif (fields != null) {", "+\t\t\t\tint length = fields.length;", "+\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\tif (fields[j] instanceof Initializer) {", "+\t\t\t\t\t\tInitializer initializer = (Initializer)fields[j];", "+\t\t\t\t\t\tif(initializer.errorInSignature){", "+\t\t\t\t\t\t\tDiagnoseParser diagnoseParser = new DiagnoseParser(this, TokenNameRIGHT_SHIFT, initializer.declarationSourceStart, initializer.declarationSourceEnd, this.options);", "+\t\t\t\t\t\t\tdiagnoseParser.diagnoseParse();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}], "num": 53803}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e79966ac423448411a689f558bd1cb6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b63eab8bacf679b1bf04aaaa576384", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "325515486943983b7a88008e5754d5b6e036732c", "commitAfterChange": "9837a318cff1d3ca193241d0933e473191f5604d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+\t\t\tcase TerminalTokens.TokenNameabstract:", "+\t\t\tcase TerminalTokens.TokenNameassert:", "+\t\t\tcase TerminalTokens.TokenNameboolean:", "+\t\t\tcase TerminalTokens.TokenNamebreak:", "+\t\t\tcase TerminalTokens.TokenNamebyte:", "+\t\t\tcase TerminalTokens.TokenNamecase:", "+\t\t\tcase TerminalTokens.TokenNamecatch:", "+\t\t\tcase TerminalTokens.TokenNamechar:", "+\t\t\tcase TerminalTokens.TokenNameclass:", "+\t\t\tcase TerminalTokens.TokenNamecontinue:", "+\t\t\tcase TerminalTokens.TokenNamedefault:", "+\t\t\tcase TerminalTokens.TokenNamedo:", "+\t\t\tcase TerminalTokens.TokenNamedouble:", "+\t\t\tcase TerminalTokens.TokenNameelse:", "+\t\t\tcase TerminalTokens.TokenNameextends:", "+\t\t\tcase TerminalTokens.TokenNamefalse:", "+\t\t\tcase TerminalTokens.TokenNamefinal:", "+\t\t\tcase TerminalTokens.TokenNamefinally:", "+\t\t\tcase TerminalTokens.TokenNamefloat:", "+\t\t\tcase TerminalTokens.TokenNamefor:", "+\t\t\tcase TerminalTokens.TokenNameif:", "+\t\t\tcase TerminalTokens.TokenNameimplements:", "+\t\t\tcase TerminalTokens.TokenNameimport:", "+\t\t\tcase TerminalTokens.TokenNameinstanceof:", "+\t\t\tcase TerminalTokens.TokenNameint:", "+\t\t\tcase TerminalTokens.TokenNameinterface:", "+\t\t\tcase TerminalTokens.TokenNamelong:", "+\t\t\tcase TerminalTokens.TokenNamenative:", "+\t\t\tcase TerminalTokens.TokenNamenew:", "+\t\t\tcase TerminalTokens.TokenNamenull:", "+\t\t\tcase TerminalTokens.TokenNamepackage:", "+\t\t\tcase TerminalTokens.TokenNameprivate:", "+\t\t\tcase TerminalTokens.TokenNameprotected:", "+\t\t\tcase TerminalTokens.TokenNamepublic:", "+\t\t\tcase TerminalTokens.TokenNameshort:", "+\t\t\tcase TerminalTokens.TokenNamestatic:", "+\t\t\tcase TerminalTokens.TokenNamestrictfp:", "+\t\t\tcase TerminalTokens.TokenNamesuper:", "+\t\t\tcase TerminalTokens.TokenNameswitch:", "+\t\t\tcase TerminalTokens.TokenNamesynchronized:", "+\t\t\tcase TerminalTokens.TokenNamethis:", "+\t\t\tcase TerminalTokens.TokenNamethrow:", "+\t\t\tcase TerminalTokens.TokenNametransient:", "+\t\t\tcase TerminalTokens.TokenNametrue:", "+\t\t\tcase TerminalTokens.TokenNametry:", "+\t\t\tcase TerminalTokens.TokenNamevoid:", "+\t\t\tcase TerminalTokens.TokenNamevolatile:", "+\t\t\tcase TerminalTokens.TokenNamewhile:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6b90580add1a89edb5ace158a571195", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "1639bd6af95429f315066bc991f1a39635a7a06b", "commitAfterChange": "39fac05fa8b77fcaf96c0cb04f6cdf322c685cfd", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " private final boolean atReferenceExpression()", "signatureAfterChange": " private final boolean atReferenceExpression()", "diff": ["-\treturn getVanguardParser().parse(TokenNameCOLON_COLON);", "+\tswitch (this.lookBack[1]) {", "+\t\tcase TokenNameIdentifier:", "+\t\t\tswitch (this.lookBack[0]) {", "+\t\t\t\tcase TokenNameSEMICOLON:  // for (int i = 0; i < 10; i++);", "+\t\t\t\tcase TokenNameRBRACE:     // class X { void foo() {} X<String> x = null; }", "+\t\t\t\tcase TokenNameclass:      // class X<T> {}", "+\t\t\t\tcase TokenNameinterface:  // interface I<T> {}", "+\t\t\t\tcase TokenNameenum:       // enum E<T> {}", "+\t\t\t\tcase TokenNamefinal:      // final Collection<String>", "+\t\t\t\tcase TokenNameLESS:       // Collection<IScalarData<AbstractData>>", "+\t\t\t\tcase TokenNameGREATER:    // public <T> List<T> foo() { /* */ }", "+\t\t\t\tcase TokenNameRIGHT_SHIFT:// static <T extends SelfType<T>> List<T> makeSingletonList(T t) { /* */ }", "+\t\t\t\tcase TokenNamenew:        // new ArrayList<String>();", "+\t\t\t\tcase TokenNamepublic:     // public List<String> foo() {}", "+\t\t\t\tcase TokenNameabstract:   // abstract List<String> foo() {}", "+\t\t\t\tcase TokenNameprivate:    // private List<String> foo() {}", "+\t\t\t\tcase TokenNameprotected:  // protected List<String> foo() {}", "+\t\t\t\tcase TokenNamestatic:     // public static List<String> foo() {}", "+\t\t\t\tcase TokenNameextends:    // <T extends Y<Z>>", "+\t\t\t\tcase TokenNamesuper:      // ? super Context<N>", "+\t\t\t\tcase TokenNameAND:        // T extends Object & Comparable<? super T>", "+\t\t\t\tcase TokenNameimplements: // class A implements I<Z>", "+\t\t\t\tcase TokenNamethrows:     // throws Y<Z>", "+\t\t\t\tcase TokenNameAT:         // @Deprecated <T> void foo() {} ", "+\t\t\t\tcase TokenNameinstanceof: // if (o instanceof List<E>[])  ", "+\t\t\t\t\treturn false;", "+\t\t\t\tdefault:", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase TokenNameNotAToken: // Not kosher, don't touch.", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\treturn false;", "+\t}", "+\treturn this.activeParser.atConflictScenario(TokenNameLESS) && getVanguardParser().parse(TokenNameCOLON_COLON);"]}], "num": 34693}
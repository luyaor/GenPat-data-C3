{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1d66bf46d20617c00894ed15f348e2e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d854e8166db16f08f7a3596e865dbbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public boolean isEquivalent(Reference reference)", "diff": ["+", "+public boolean isEquivalent(Reference reference) {", "+\t// only consider field references relative to \"this\":", "+\tif (this.receiver.isThis() && !(this.receiver instanceof QualifiedThisReference)) {", "+\t\t// current is a simple \"this.f1\"", "+\t\tchar[] otherToken = null;", "+\t\t// matching 'reference' could be \"f1\" or \"this.f1\":", "+\t\tif (reference instanceof SingleNameReference) {", "+\t\t\totherToken = ((SingleNameReference) reference).token;", "+\t\t} else if (reference instanceof FieldReference) {", "+\t\t\tFieldReference fr = (FieldReference) reference;", "+\t\t\tif (fr.receiver.isThis() && !(fr.receiver instanceof QualifiedThisReference)) {", "+\t\t\t\totherToken = fr.token;", "+\t\t\t}\t\t", "+\t\t}", "+\t\treturn otherToken != null && CharOperation.equals(this.token, otherToken);", "+\t} else {", "+\t\t// search deeper for \"this\" inside:", "+\t\tchar[][] thisTokens = getThisFieldTokens(1);", "+\t\tif (thisTokens == null) {", "+\t\t\treturn false;", "+\t\t}", "+\t\t// other can be \"this.f1.f2\", too, or \"f1.f2\":", "+\t\tchar[][] otherTokens = null;", "+\t\tif (reference instanceof FieldReference) {", "+\t\t\totherTokens = ((FieldReference) reference).getThisFieldTokens(1);", "+\t\t} else if (reference instanceof QualifiedNameReference) {", "+\t\t\tif (((QualifiedNameReference)reference).binding instanceof LocalVariableBinding)", "+\t\t\t\treturn false; // initial variable mismatch: local (from f1.f2) vs. field (from this.f1.f2)", "+\t\t\totherTokens = ((QualifiedNameReference) reference).tokens;", "+\t\t}", "+\t\treturn CharOperation.equals(thisTokens, otherTokens);", "+\t}", "+}", "-", "-public int nullStatus(FlowInfo flowInfo) {", "-\treturn FlowInfo.UNKNOWN;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e2d1b189f68422667661af4c6b31d3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public boolean isEquivalent(Reference reference)", "diff": ["+", "+public boolean isEquivalent(Reference reference) {", "+\t// only consider field references relative to \"this\":", "+\tif (this.receiver.isThis() && !(this.receiver instanceof QualifiedThisReference)) {", "+\t\t// current is a simple \"this.f1\"", "+\t\tchar[] otherToken = null;", "+\t\t// matching 'reference' could be \"f1\" or \"this.f1\":", "+\t\tif (reference instanceof SingleNameReference) {", "+\t\t\totherToken = ((SingleNameReference) reference).token;", "+\t\t} else if (reference instanceof FieldReference) {", "+\t\t\tFieldReference fr = (FieldReference) reference;", "+\t\t\tif (fr.receiver.isThis() && !(fr.receiver instanceof QualifiedThisReference)) {", "+\t\t\t\totherToken = fr.token;", "+\t\t\t}\t\t", "+\t\t}", "+\t\treturn otherToken != null && CharOperation.equals(this.token, otherToken);", "+\t} else {", "+\t\t// search deeper for \"this\" inside:", "+\t\tchar[][] thisTokens = getThisFieldTokens(1);", "+\t\tif (thisTokens == null) {", "+\t\t\treturn false;", "+\t\t}", "+\t\t// other can be \"this.f1.f2\", too, or \"f1.f2\":", "+\t\tchar[][] otherTokens = null;", "+\t\tif (reference instanceof FieldReference) {", "+\t\t\totherTokens = ((FieldReference) reference).getThisFieldTokens(1);", "+\t\t} else if (reference instanceof QualifiedNameReference) {", "+\t\t\tif (((QualifiedNameReference)reference).binding instanceof LocalVariableBinding)", "+\t\t\t\treturn false; // initial variable mismatch: local (from f1.f2) vs. field (from this.f1.f2)", "+\t\t\totherTokens = ((QualifiedNameReference) reference).tokens;", "+\t\t}", "+\t\treturn CharOperation.equals(thisTokens, otherTokens);", "+\t}", "+}", "-", "-public int nullStatus(FlowInfo flowInfo) {", "-\treturn FlowInfo.UNKNOWN;"]}], "num": 61990}
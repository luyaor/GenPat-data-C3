{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a4f913cfc531a5667c16703ead990ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ca05908e2ac544540cb5553e5ab960", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "287a8246425dec3b8e6cdd428f661326776e45cd", "commitAfterChange": "058b7e49b52c7b18f15a01083d7620b3d5aa8490", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptLocalMethod(MethodBinding methodBinding)", "diff": ["-public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end) {", "-\tIType type = (IType)this.handleFactory.createElement(typeBinding.scope.referenceContext, parsedUnit, this.openable);", "-\t// fix for 1FWFT6Q", "-\tif (type != null) {", "-\t\tif (type.isBinary()) {", "-\t\t\t", "-\t\t\t// need to add a paramater for constructor in binary type", "-\t\t\tIType declaringDeclaringType = type.getDeclaringType();", "-\t\t\t", "-\t\t\tboolean isStatic = false;", "-\t\t\ttry {", "-\t\t\t\tisStatic = Flags.isStatic(type.getFlags());", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// isStatic == false", "-\t\t\t}", "-\t\t\t", "-\t\t\tif(declaringDeclaringType != null && isConstructor\t&& !isStatic) {", "-\t\t\t\tint length = parameterPackageNames.length;", "-\t\t\t\tSystem.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);", "-\t\t\t\tSystem.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);", "-\t\t\t\tSystem.arraycopy(parameterSignatures, 0, parameterSignatures = new String[length+1], 1, length);", "-\t\t\t\t", "-\t\t\t\tparameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();", "-\t\t\t\tparameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();", "-\t\t\t\tparameterSignatures[0] = new String(Engine.getSignature(typeBinding.enclosingType()));", "-\t\t\t}", "-\t\t\t", "-\t\t\tacceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures);", "-\t\t} else {", "-\t\t\tacceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);", "-\t\t}", "-\t}", "-}", "+public void acceptLocalMethod(MethodBinding methodBinding) {", "+\tIJavaElement res = findLocalElement(methodBinding.sourceStart());", "+\tif(res != null && res.getElementType() == IJavaElement.METHOD) {", "+\t\taddElement(res);", "+\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(res.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76c43b821048753f7bdba99f6a9dc92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "039fe9e46951f3ae4fb135033e62de597c68c2d9", "commitAfterChange": "9a2f6070469e990d6a98dbcb9b47ac6f4413a2cc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void assertMatchBindings(TagElement tagElement)", "signatureAfterChange": " \t \tvoid verifyName(Name name)", "diff": ["-\tprotected void assertMatchBindings(TagElement tagElement) {", "-\t\t\t\tassertMatchBindings((TagElement) fragment);", "-\t\t\t} else if (fragment.getNodeType() == ASTNode.SIMPLE_NAME || fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "-\t\t\t\tpreviousBinding = ((Name)fragment).resolveBinding();", "-\t\t\t} else if (fragment.getNodeType() == ASTNode.MEMBER_REF) {", "-\t\t\t\tpreviousBinding = ((MemberRef)fragment).resolveBinding();", "-\t\t\t\tresolvedBinding = true;", "-\t\t\t} else if (fragment.getNodeType() == ASTNode.METHOD_REF) {", "-\t\t\t\tpreviousBinding = ((MethodRef) fragment).resolveBinding();", "-\t\t\t\tresolvedBinding = true;", "-\t\t\tpreviousFragment = fragment;", "+\t", "+\tvoid verifyName(Name name) {", "+\t\tif (name != null) {", "+\t\t\tassertNotNull(name+\" binding was not found!\", name.resolveBinding());", "+\t\t\tSimpleName simpleName = null;", "+\t\t\twhile (name.isQualifiedName()) {", "+\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+\t\t\t\tassertNotNull(simpleName+\" binding was not found!\", simpleName.resolveBinding());", "+\t\t\t\tname = ((QualifiedName) name).getQualifier();", "+\t\t\t\tassertNotNull(name+\" binding was not found!\", name.resolveBinding());", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 419}
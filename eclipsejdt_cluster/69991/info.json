{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d857b9f97baa20fdf5dc0bf0408d155a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1305b1453de8e13f4aecbb5b8c273b21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "030eb4fda54a6751c1b822374d11bd8e8163881c", "commitAfterChange": "ec1201be6eb9490fec9fdaa6f4ea5d677aacc407", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["-\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t\t// to the @fieldBinding", "-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\tint sourceAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SourceName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (sourceAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) sourceAttributeNameIndex;", "-\t\t\t// The length of a source file attribute is 2. This is a fixed-length", "-\t\t\t// attribute", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\t// write the source file name", "-\t\t\tint fileNameIndex = this.constantPool.literalIndex(fullFileName.toCharArray());", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (fileNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) fileNameIndex;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateSourceAttribute(fullFileName);", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint deprecatedAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.DeprecatedName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (deprecatedAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) deprecatedAttributeNameIndex;", "-\t\t\t// the length of a deprecated attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateDeprecatedAttribute();", "-\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t\t// to the @fieldBinding", "-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\tint signatureAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SignatureName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureAttributeNameIndex;", "-\t\t\t// the length of a signature attribute is equals to 2", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\tint signatureIndex =", "-\t\t\t\tthis.constantPool.literalIndex(genericSignature);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureIndex;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateSignatureAttribute(genericSignature);", "-\t\t\tif (this.contentsOffset + 10 >= this.contents.length) {", "-\t\t\t\tresizeContents(10);", "-\t\t\t}", "-\t\t\tint enclosingMethodAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.EnclosingMethodName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (enclosingMethodAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) enclosingMethodAttributeNameIndex;", "-\t\t\t// the length of a signature attribute is equals to 2", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 4;", "-", "-\t\t\tint enclosingTypeIndex = this.constantPool.literalIndexForType(this.referenceBinding.enclosingType().constantPoolName());", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (enclosingTypeIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) enclosingTypeIndex;", "-\t\t\tbyte methodIndexByte1 = 0;", "-\t\t\tbyte methodIndexByte2 = 0;", "-\t\t\tif (this.referenceBinding instanceof LocalTypeBinding) {", "-\t\t\t\tMethodBinding methodBinding = ((LocalTypeBinding) this.referenceBinding).enclosingMethod;", "-\t\t\t\tif (methodBinding != null) {", "-\t\t\t\t\tint enclosingMethodIndex = this.constantPool.literalIndexForNameAndType(methodBinding.selector, methodBinding.signature(this));", "-\t\t\t\t\tmethodIndexByte1 = (byte) (enclosingMethodIndex >> 8);", "-\t\t\t\t\tmethodIndexByte2 = (byte) enclosingMethodIndex;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.contents[this.contentsOffset++] = methodIndexByte1;", "-\t\t\tthis.contents[this.contentsOffset++] = methodIndexByte2;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateEnclosingMethodAttribute();", "-\t\t\t// add an attribute for inconsistent hierarchy", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint inconsistentHierarchyNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.InconsistentHierarchy);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (inconsistentHierarchyNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) inconsistentHierarchyNameIndex;", "-\t\t\t// the length of an inconsistent hierarchy attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateHierarchyInconsistentAttribute();", "-\t\t\t// Generate the inner class attribute", "-\t\t\tint exSize = 8 * numberOfInnerClasses + 8;", "-\t\t\tif (exSize + this.contentsOffset >= this.contents.length) {", "-\t\t\t\tresizeContents(exSize);", "-\t\t\t}", "-\t\t\t// Now we now the size of the attribute and the number of entries", "-\t\t\t// attribute name", "-\t\t\tint attributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.InnerClassName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (attributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) attributeNameIndex;", "-\t\t\tint value = (numberOfInnerClasses << 3) + 2;", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (value >> 24);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (value >> 16);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (value >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) value;", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (numberOfInnerClasses >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) numberOfInnerClasses;", "-\t\t\tfor (int i = 0; i < numberOfInnerClasses; i++) {", "-\t\t\t\tReferenceBinding innerClass = innerClasses[i];", "-\t\t\t\tint accessFlags = innerClass.getAccessFlags();", "-\t\t\t\tint innerClassIndex = this.constantPool.literalIndexForType(innerClass.constantPoolName());", "-\t\t\t\t// inner class index", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (innerClassIndex >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) innerClassIndex;", "-\t\t\t\t// outer class index: anonymous and local have no outer class index", "-\t\t\t\tif (innerClass.isMemberType()) {", "-\t\t\t\t\t// member or member of local", "-\t\t\t\t\tint outerClassIndex = this.constantPool.literalIndexForType(innerClass.enclosingType().constantPoolName());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (outerClassIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) outerClassIndex;", "-\t\t\t\t} else {", "-\t\t\t\t\t// equals to 0 if the innerClass is not a member type", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t}", "-\t\t\t\t// name index", "-\t\t\t\tif (!innerClass.isAnonymousType()) {", "-\t\t\t\t\tint nameIndex = this.constantPool.literalIndex(innerClass.sourceName());", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (nameIndex >> 8);", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = (byte) nameIndex;", "-\t\t\t\t} else {", "-\t\t\t\t\t// equals to 0 if the innerClass is an anonymous type", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\t}", "-\t\t\t\t// access flag", "-\t\t\t\tif (innerClass.isAnonymousType()) {", "-\t\t\t\t\taccessFlags &= ~ClassFileConstants.AccFinal;", "-\t\t\t\t} else if (innerClass.isMemberType() && innerClass.isInterface()) {", "-\t\t\t\t\taccessFlags |= ClassFileConstants.AccStatic; // implicitely static", "-\t\t\t\t}", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (accessFlags >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) accessFlags;", "-\t\t\t}", "-\t\t\tattributesNumber++;", "+\t\t\tattributesNumber += generateInnerClassAttribute(numberOfInnerClasses, innerClasses);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff93cab5d93efdfb80468aa322c5f8d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "030eb4fda54a6751c1b822374d11bd8e8163881c", "commitAfterChange": "ec1201be6eb9490fec9fdaa6f4ea5d677aacc407", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic int generateMethodInfoAttribute(MethodBinding methodBinding)", "signatureAfterChange": " \tpublic int generateMethodInfoAttributes(MethodBinding methodBinding)", "diff": ["-\tpublic int generateMethodInfoAttribute(MethodBinding methodBinding) {", "+\tpublic int generateMethodInfoAttributes(MethodBinding methodBinding) {", "-\t\tint attributeNumber = 0;", "+\t\tint attributesNumber = 0;", "-\t\t\tint length = thrownsExceptions.length;", "-\t\t\tint exSize = 8 + length * 2;", "-\t\t\tif (exSize + this.contentsOffset >= this.contents.length) {", "-\t\t\t\tresizeContents(exSize);", "-\t\t\t}", "-\t\t\tint exceptionNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.ExceptionsName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (exceptionNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) exceptionNameIndex;", "-\t\t\t// The attribute length = length * 2 + 2 in case of a exception attribute", "-\t\t\tint attributeLength = length * 2 + 2;", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (attributeLength >> 24);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (attributeLength >> 16);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (attributeLength >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) attributeLength;", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (length >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tint exceptionIndex = this.constantPool.literalIndexForType(thrownsExceptions[i]);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (exceptionIndex >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) exceptionIndex;", "-\t\t\t}", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber += generateExceptionsAttribute(thrownsExceptions);", "-\t\t\t// Check that there is enough space to write the deprecated attribute", "-\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\tresizeContents(6);", "-\t\t\t}", "-\t\t\tint deprecatedAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.DeprecatedName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (deprecatedAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) deprecatedAttributeNameIndex;", "-\t\t\t// the length of a deprecated attribute is equals to 0", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber += generateDeprecatedAttribute();", "-\t\t\t\t// Synthetic attribute", "-\t\t\t\t// Check that there is enough space to write the deprecated attribute", "-\t\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\t\tresizeContents(6);", "-\t\t\t\t}", "-\t\t\t\tint syntheticAttributeNameIndex =", "-\t\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SyntheticName);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (syntheticAttributeNameIndex >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) syntheticAttributeNameIndex;", "-\t\t\t\t// the length of a synthetic attribute is equals to 0", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-", "-\t\t\t\tattributeNumber++;", "+\t\t\t\tattributesNumber += generateSyntheticAttribute();", "-\t\t\t\t/*", "-\t\t\t\t * handle of the target jsr14 for varargs in the source", "-\t\t\t\t * Varargs attribute", "-\t\t\t\t * Check that there is enough space to write the deprecated attribute", "-\t\t\t\t */", "-\t\t\t\tif (this.contentsOffset + 6 >= this.contents.length) {", "-\t\t\t\t\tresizeContents(6);", "-\t\t\t\t}", "-\t\t\t\tint varargsAttributeNameIndex =", "-\t\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.VarargsName);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) (varargsAttributeNameIndex >> 8);", "-\t\t\t\tthis.contents[this.contentsOffset++] = (byte) varargsAttributeNameIndex;", "-\t\t\t\t// the length of a varargs attribute is equals to 0", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "-", "-\t\t\t\tattributeNumber++;", "+\t\t\t\tattributesNumber += generateVarargsAttribute();", "-\t\t\t// check that there is enough space to write all the bytes for the field info corresponding", "-\t\t\t// to the @fieldBinding", "-\t\t\tif (this.contentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "-\t\t\t}", "-\t\t\tint signatureAttributeNameIndex =", "-\t\t\t\tthis.constantPool.literalIndex(AttributeNamesConstants.SignatureName);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureAttributeNameIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureAttributeNameIndex;", "-\t\t\t// the length of a signature attribute is equals to 2", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 0;", "-\t\t\tthis.contents[this.contentsOffset++] = 2;", "-\t\t\tint signatureIndex =", "-\t\t\t\tthis.constantPool.literalIndex(genericSignature);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) (signatureIndex >> 8);", "-\t\t\tthis.contents[this.contentsOffset++] = (byte) signatureIndex;", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber += generateSignatureAttribute(genericSignature);", "-\t\t\t\t\tattributeNumber += generateRuntimeAnnotations(annotations);", "+\t\t\t\t\tattributesNumber += generateRuntimeAnnotations(annotations);", "-\t\t\t\t\t\tattributeNumber += generateRuntimeAnnotationsForParameters(arguments);", "+\t\t\t\t\t\tattributesNumber += generateRuntimeAnnotationsForParameters(arguments);", "-\t\treturn attributeNumber;", "+\t\treturn attributesNumber;"]}], "num": 69991}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e09e1eb3c93abafea8c32927caaa7d18", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd0f55351b9d6a818fe10ef723ef2e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\tcase ProblemReasons.ParameterizedMethodExpectedTypeProblem:", "+\t\tcase ProblemReasons.InferredApplicableMethodInapplicable:", "+\t\tcase ProblemReasons.InvocationTypeInferenceFailure:", "-\t\t\tInferenceContext18 inferenceContext = problemMethod.inferenceContext;", "-\t\t\tif (inferenceContext != null && inferenceContext.outerContext != null) {", "-\t\t\t\t// problem relates to a nested inference context, let the outer handle it:", "-\t\t\t\tinferenceContext.outerContext.addProblemMethod(problemMethod);", "-\t\t\t\treturn;", "-\t\t\t}", "+\t\t\tif (problemMethod.returnType == shownMethod.returnType) //$IDENTITY-COMPARISON$", "+\t\t\t\treturn; // funnily this can happen in a deeply nested call, because the inner lies by stealing its closest match and the outer does not know so. See GRT1_8.testBug430296"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b9c665f43b7b654feaf1306dbc1aa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "56dbcf2a723a2496d9406a9295b337384afdff1d", "commitAfterChange": "356ef270158cfd8719df7baf47652712175545cd", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t\t\t\t\t\t\t\tReferenceBinding declaringClass = ((FieldBinding) importBinding.resolvedImport).declaringClass;", "-\t\t\t\t\t\t\t\t\t\tif (declaringClass.canBeSeenBy(this)) {", "-\t\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "-\t\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(declaringClass);\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\treturn importBinding.resolvedImport;", "+\t\t\t\t\t\t\t\t\t\tfoundField = (FieldBinding) importBinding.resolvedImport;", "+\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(foundField.declaringClass);\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\tif (foundField.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\t\t\treturn foundField;", "-\t\t\t\t\t\t\t\t\t\t\tproblemField = new ProblemFieldBinding(declaringClass, name, ProblemReasons.ReceiverTypeNotVisible);", "+\t\t\t\t\t\t\t\t\t\t\tproblemField = foundField;"]}], "num": 62232}
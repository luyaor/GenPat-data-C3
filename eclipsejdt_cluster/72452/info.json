{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd2a7fd98d8f53c51deafe65d871e25f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744bbfd1bb4b5110dfa5fcd32016349b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "445862b3ac94af052eb272bc07b8bce2907ade1f", "commitAfterChange": "3695268f3d47cb88012e58d6baed589f7f62bb31", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0172() throws JavaModelException", "signatureAfterChange": " \tpublic void test0172() throws JavaModelException", "diff": ["-\t\t\t\"    num().add(null);\\n\" + ", "-\t\t\t\"    num().add(n);\\n\" + ", "+\t\t\t\"    /*start1*/num().add(null)/*end1*/;\\n\" + ", "+\t\t\t\"    /*start2*/num().add(n)/*end2*/;\\n\" + ", "-\t   \tCompilationUnit compilationUnit = (CompilationUnit) buildAST(", "-\t\t\tcontents,", "-    \t\tthis.workingCopy);", "-\t   \tMarkerInfo info = new MarkerInfo(contents);", "-\t   \tinfo.astStart = contents.indexOf(\"num().add(null);\");", "-\t   \tinfo.astEnd = info.astStart + \"num().add(null)\".length();", "-\t   \tMethodInvocation invocation = (MethodInvocation) findNode(compilationUnit, info);", "-\t   \tIMethodBinding binding1 = invocation.resolveMethodBinding();", "-\t   \tinfo = new MarkerInfo(contents);", "-\t   \tinfo.astStart = contents.indexOf(\"num().add(n);\");", "-\t   \tinfo.astEnd = info.astStart + \"num().add(n)\".length();", "-\t   \tinvocation = (MethodInvocation) findNode(compilationUnit, info);", "-\t   \tIMethodBinding binding2 = invocation.resolveMethodBinding();", "-\t   \tassertTrue(\"2 different capture bindings should not be equals\", !binding1.isEqualTo(binding2));", "+\t   \tIBinding[] bindings = resolveBindings(contents, this.workingCopy);", "+\t   \tassertTrue(\"2 different capture bindings should not be equals\", !bindings[0].isEqualTo(bindings[1]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b551a689426c67b3e69159ee9ee0b9ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "41073afde07bc165731dc0876951fb4352f46439", "commitAfterChange": "95ccf829fe70457c64a0e61794a7f1137ca9c9b0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["-\t\tString previousClassName = CURRENT_CLASS_NAME;", "-\t\tif (isFirst()) {", "-\t\t\tIPath dir = new Path(Util.getOutputDirectory());", "-\t\t\tif (previousClassName != null) {", "-\t\t\t\t// Minimize resilient files by removing previous test class global output dir", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(previousClassName, \".\");", "-\t\t\t\tIPath previousDir = dir;", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tpreviousDir = previousDir.append(tokenizer.nextToken());", "-\t\t\t\t}", "-\t\t\t\tUtil.rmdir(new File(previousDir.toOSString()));", "-\t\t\t}", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(CURRENT_CLASS_NAME, \".\");", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tdir = dir.append(tokenizer.nextToken());", "-\t\t\t}", "-\t\t\tOUTPUT_DIR =  dir.append(\"output\").toOSString();", "-\t\t\tSOURCE_DIRECTORY = dir.append(\"source\").toOSString();", "-\t\t\tJAVAC_OUTPUT_DIR = dir.append(\"javac\").toOSString();", "-\t\t}", "-"]}], "num": 72452}
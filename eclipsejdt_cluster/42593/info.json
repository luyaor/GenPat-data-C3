{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b07c1e1228557cd7b80244b4241cefa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7e93c51beb56056d2d8e119c9240b8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\ttry {", "-\t\t\t\tif (options.verbose) {", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(maxUnits),", "-\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\t// diet parsing for large collection of units", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t\t}", "-\t\t\t\t// initial type binding creation", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "-\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "-\t\t\t\tif (currentPackage != null) {", "-\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "-\t\t\t\t}", "-\t\t\t\t//} catch (AbortCompilationUnit e) {", "-\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} finally {", "-\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "+\t\t\tif (options.verbose) {", "+\t\t\t\tthis.out.println(", "+\t\t\t\t\tMessages.bind(Messages.compilation_request,", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\tString.valueOf(maxUnits),", "+\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "+\t\t\t\t\t}));", "+\t\t\t// diet parsing for large collection of units", "+\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "+\t\t\t} else {", "+\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "+\t\t\t}", "+\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "+\t\t\tif (currentPackage != null) {", "+\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "+\t\t\t}", "+\t\t\t// initial type binding creation", "+\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "+\t\t\t//} catch (AbortCompilationUnit e) {", "+\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1231087877360ad4bc9d18d005d641f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "commitAfterChange": "1e3cab7d0b692bb39daf45f0094d3b638d19b411", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\tif (options.verbose) {", "-\t\t\t\tthis.out.println(", "-\t\t\t\t\tMessages.bind(Messages.compilation_request,", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\tString.valueOf(maxUnits),", "-\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "-\t\t\t\t\t}));", "+\t\t\ttry {", "+\t\t\t\tif (options.verbose) {", "+\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\t\tString.valueOf(maxUnits),", "+\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "+\t\t\t\t\t\t}));", "+\t\t\t\t}", "+\t\t\t\t// diet parsing for large collection of units", "+\t\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "+\t\t\t\t} else {", "+\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "+\t\t\t\t}", "+\t\t\t\t// initial type binding creation", "+\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "+\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "+\t\t\t\tif (currentPackage != null) {", "+\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "+\t\t\t\t}", "+\t\t\t\t//} catch (AbortCompilationUnit e) {", "+\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "+\t\t\t} finally {", "+\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "-\t\t\t// diet parsing for large collection of units", "-\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t} else {", "-\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t}", "-\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "-\t\t\tif (currentPackage != null) {", "-\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "-\t\t\t}", "-\t\t\t// initial type binding creation", "-\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "-\t\t\t//} catch (AbortCompilationUnit e) {", "-\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());"]}], "num": 42593}
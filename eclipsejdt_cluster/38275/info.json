{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1c358ae9a83f40210258d0b18a42b4e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b8dc7c59fd09e84e9e8a05bc939048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\t\tif (previousFragment == null) {", "-\t\t\t\t\tif (tagName != null && (source[tagStart] == '\\r' || source[tagStart] == '\\n')) {", "-\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "-\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "-\t\t\t\t\t\t}", "+\t\t\t\tif (previousFragment == null && TagElement.TAG_PARAM.equals(tagName) && ((TextElement)fragment).getText().equals(\"<\")) { // special case here for @param <E> syntax", "+\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t// verify '<'", "+\t\t\t\t\twhile (source[start] == ' ' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge white characters", "+\t\t\t\t\ttext = new String(source, start, fragment.getLength());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tstart += fragment.getLength();", "+\t\t\t\t\t// verify simple name", "+\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tfragment = (ASTNode) elements.next();", "+\t\t\t\t\twhile (source[start] == ' ' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge white characters", "+\t\t\t\t\t}", "+\t\t\t\t\tassumeEquals(this.prefix+\"Unexpected node type for tag element \"+tagElement, ASTNode.SIMPLE_NAME, fragment.getNodeType());", "+\t\t\t\t\tName name = (Name) fragment;", "+\t\t\t\t\tverifyNamePositions(start, name, source);", "+\t\t\t\t\tstart += fragment.getLength();", "+\t\t\t\t\t// verify simple name", "+\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tfragment = (ASTNode) elements.next();", "+\t\t\t\t\twhile (source[start] == ' ' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge white characters", "+\t\t\t\t\t}", "+\t\t\t\t\ttext = new String(source, start, fragment.getLength());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tstart += fragment.getLength();", "+\t\t\t\t\t// reset fragment as simple name to avoid issue with next text element", "+\t\t\t\t\tfragment = name;", "+\t\t\t\t\ttagStart += (start- tagStart) - name.getLength();", "-\t\t\t\t\tif (previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "-\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "-\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "-\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint start = tagStart;", "-\t\t\t\t\t\tboolean newLine = false;", "-\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "-\t\t\t\t\t\t\tstart++; // purge non-stored characters", "-\t\t\t\t\t\t\tif (source[tagStart] == '\\r' || source[tagStart] == '\\n') {", "-\t\t\t\t\t\t\t\tnewLine = true;", "+\t\t\t\t\tif (previousFragment == null) {", "+\t\t\t\t\t\tif (tagName != null && (source[tagStart] == '\\r' || source[tagStart] == '\\n')) {", "+\t\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "-\t\t\t\t\t\tif (newLine) tagStart = start;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "+\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "+\t\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (TagElement.TAG_PARAM.equals(tagName) && previousFragment.getNodeType() == ASTNode.SIMPLE_NAME && ((TextElement)fragment).getText().equals(\">\")) {", "+\t\t\t\t\t\t\twhile (source[tagStart] == ' ' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\t\ttagStart++; // purge white characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t\t\tboolean newLine = false;", "+\t\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\t\tif (source[tagStart] == '\\r' || source[tagStart] == '\\n') {", "+\t\t\t\t\t\t\t\t\tnewLine = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (newLine) tagStart = start;", "+\t\t\t\t\t\t}", "+\t\t\t\t\ttext = new String(source, tagStart, fragment.getLength());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\ttext = new String(source, tagStart, fragment.getLength());", "-\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4b414084fdbebe75c8fa8aa55c208d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "04969acd296957373e2c11d1fa6749ece6b3b165", "commitAfterChange": "a6b612a10e662a9a3068db57f25ae43c85426c25", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "-\t\t\t\t\tstart++;", "-\t\t\t\t\t// Verify parameters", "-\t\t\t\t\tIterator parameters = methodRef.parameters().listIterator();", "-\t\t\t\t\twhile (parameters.hasNext()) {", "-\t\t\t\t\t\tMethodRefParameter param = (MethodRefParameter) parameters.next();", "-\t\t\t\t\t\t// Verify parameter type positions", "-\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "-\t\t\t\t\t\t\t start++; // purge non-stored characters", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tType type = param.getType();", "-\t\t\t\t\t\tif (type.isSimpleType()) {", "-\t\t\t\t\t\t\tverifyNamePositions(start, ((SimpleType)type).getName(), source);", "-\t\t\t\t\t\t} else if (type.isPrimitiveType()) {", "-\t\t\t\t\t\t\ttext = new String(source, start, type.getLength());", "-\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "-\t\t\t\t\t\t} else if (type.isArrayType()) {", "-\t\t\t\t\t\t\tType elementType = ((ArrayType) param.getType()).getElementType();", "-\t\t\t\t\t\t\tif (elementType.isSimpleType()) {", "-\t\t\t\t\t\t\t\tverifyNamePositions(start, ((SimpleType)elementType).getName(), source);", "-\t\t\t\t\t\t\t} else if (elementType.isPrimitiveType()) {", "-\t\t\t\t\t\t\t\ttext = new String(source, start, elementType.getLength());", "-\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tstart += type.getLength();", "-\t\t\t\t\t\t// Verify parameter name positions", "-\t\t\t\t\t\twhile (Character.isWhitespace(source[start])) { // do NOT accept '*' in parameter declaration", "-\t\t\t\t\t\t\t start++; // purge non-stored characters", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tname = param.getName();", "-\t\t\t\t\t\tif (name != null) {", "-\t\t\t\t\t\t\ttext = new String(source, start, name.getLength());", "-\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "-\t\t\t\t\t\t\tstart += name.getLength();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// Verify end parameter declaration", "-\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "-\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tassumeTrue(this.prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "+//\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "+\t\t\t\t\tif (source[start] == '(') { // now method reference may have no parenthesis...", "-\t\t\t\t\t\tif (source[start] == ')') {", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// Verify parameters", "+\t\t\t\t\t\tIterator parameters = methodRef.parameters().listIterator();", "+\t\t\t\t\t\twhile (parameters.hasNext()) {", "+\t\t\t\t\t\t\tMethodRefParameter param = (MethodRefParameter) parameters.next();", "+\t\t\t\t\t\t\t// Verify parameter type positions", "+\t\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\t start++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tType type = param.getType();", "+\t\t\t\t\t\t\tif (type.isSimpleType()) {", "+\t\t\t\t\t\t\t\tverifyNamePositions(start, ((SimpleType)type).getName(), source);", "+\t\t\t\t\t\t\t} else if (type.isPrimitiveType()) {", "+\t\t\t\t\t\t\t\ttext = new String(source, start, type.getLength());", "+\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "+\t\t\t\t\t\t\t} else if (type.isArrayType()) {", "+\t\t\t\t\t\t\t\tType elementType = ((ArrayType) param.getType()).getElementType();", "+\t\t\t\t\t\t\t\tif (elementType.isSimpleType()) {", "+\t\t\t\t\t\t\t\t\tverifyNamePositions(start, ((SimpleType)elementType).getName(), source);", "+\t\t\t\t\t\t\t\t} else if (elementType.isPrimitiveType()) {", "+\t\t\t\t\t\t\t\t\ttext = new String(source, start, elementType.getLength());", "+\t\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstart += type.getLength();", "+\t\t\t\t\t\t\t// Verify parameter name positions", "+\t\t\t\t\t\t\twhile (Character.isWhitespace(source[start])) { // do NOT accept '*' in parameter declaration", "+\t\t\t\t\t\t\t\t start++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tname = param.getName();", "+\t\t\t\t\t\t\tif (name != null) {", "+\t\t\t\t\t\t\t\ttext = new String(source, start, name.getLength());", "+\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "+\t\t\t\t\t\t\t\tstart += name.getLength();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// Verify end parameter declaration", "+\t\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "+\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\tif (source[start] == ')') {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}"]}], "num": 38275}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b823b7a06c6b8d271c6e025a2cb32558", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fce2f32989da8f8741e435fe428cfab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "commitAfterChange": "41800ceef1e22df640004021a2ad024169ee7b90", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\t\tsynchronized(this.zipFiles) { // TODO: (jerome) use PerThreadObject which does synchronization", "-\t\t\tThread currentThread = Thread.currentThread();", "-\t\t\tHashMap map = null;", "-\t\t\tZipFile zipFile;", "-\t\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "-\t\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "-\t\t\t\t\t", "-\t\t\t\treturn zipFile;", "+\t\tHashMap map;", "+\t\tZipFile zipFile;", "+\t\tif ((map = (HashMap)this.zipFiles.getCurrent()) != null ", "+\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "+\t\t\t\t", "+\t\t\treturn zipFile;", "+\t\t}", "+\t\tString fileSystemPath= null;", "+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\tIResource file = root.findMember(path);", "+\t\tif (file != null) {", "+\t\t\t// internal resource", "+\t\t\tIPath location;", "+\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\tString fileSystemPath= null;", "-\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "-\t\t\tIResource file = root.findMember(path);", "-\t\t\tif (file != null) {", "-\t\t\t\t// internal resource", "-\t\t\t\tIPath location;", "-\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tfileSystemPath= location.toOSString();", "-\t\t\t} else {", "-\t\t\t\t// external resource", "-\t\t\t\tfileSystemPath= path.toOSString();", "+\t\t\tfileSystemPath= location.toOSString();", "+\t\t} else {", "+\t\t\t// external resource", "+\t\t\tfileSystemPath= path.toOSString();", "+\t\t}", "+", "+\t\ttry {", "+\t\t\tif (ZIP_ACCESS_VERBOSE) {", "+\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t", "-\t\t\ttry {", "-\t\t\t\tif (ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\tzipFile = new ZipFile(fileSystemPath);", "-\t\t\t\tif (map != null) {", "-\t\t\t\t\tmap.put(path, zipFile);", "-\t\t\t\t}", "-\t\t\t\treturn zipFile;", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$", "+\t\t\tzipFile = new ZipFile(fileSystemPath);", "+\t\t\tif (map != null) {", "+\t\t\t\tmap.put(path, zipFile);", "+\t\t\treturn zipFile;", "+\t\t} catch (IOException e) {", "+\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891d1a60d8bb8c636595139b9f2eb997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\tpublic synchronized ZipFile getZipFile(IPath path) throws CoreException {", "-\t\tThread currentThread = Thread.currentThread();", "-\t\tHashMap map = null;", "-\t\tZipFile zipFile;", "-\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "-\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "-\t\t\t\t", "-\t\t\treturn zipFile;", "-\t\t}", "-\t\tString fileSystemPath= null;", "-\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tIResource file = root.findMember(path);", "-\t\tif (path.isAbsolute() && file != null) {", "-\t\t\tif (file == null) { // external file", "-\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t\t} else { // internal resource (not an IFile or not existing)", "-\t\t\t\tIPath location;", "-\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\tpublic ZipFile getZipFile(IPath path) throws CoreException {", "+\t\t\t", "+\t\tsynchronized(this.zipFiles) { // TODO:  use PeThreadObject which does synchronization", "+\t\t\tThread currentThread = Thread.currentThread();", "+\t\t\tHashMap map = null;", "+\t\t\tZipFile zipFile;", "+\t\t\tif ((map = (HashMap)this.zipFiles.get(currentThread)) != null ", "+\t\t\t\t\t&& (zipFile = (ZipFile)map.get(path)) != null) {", "+\t\t\t\t\t", "+\t\t\t\treturn zipFile;", "+\t\t\t}", "+\t\t\tString fileSystemPath= null;", "+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\tIResource file = root.findMember(path);", "+\t\t\tif (path.isAbsolute() && file != null) {", "+\t\t\t\tif (file == null) { // external file", "+\t\t\t\t\tfileSystemPath= path.toOSString();", "+\t\t\t\t} else { // internal resource (not an IFile or not existing)", "+\t\t\t\t\tIPath location;", "+\t\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tfileSystemPath= location.toOSString();", "+\t\t\t\t}", "+\t\t\t} else if (!path.isAbsolute()) {", "+\t\t\t\tfile= root.getFile(path);", "+\t\t\t\tif (file == null || file.getType() != IResource.FILE) {", "+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tIPath location = file.getLocation();", "+\t\t\t\tif (location == null) {", "+\t\t\t} else {", "+\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t} else if (!path.isAbsolute()) {", "-\t\t\tfile= root.getFile(path);", "-\t\t\tif (file == null || file.getType() != IResource.FILE) {", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "+\t", "+\t\t\ttry {", "+\t\t\t\tif (ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tzipFile = new ZipFile(fileSystemPath);", "+\t\t\t\tif (map != null) {", "+\t\t\t\t\tmap.put(path, zipFile);", "+\t\t\t\t}", "+\t\t\t\treturn zipFile;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$", "-\t\t\tIPath location = file.getLocation();", "-\t\t\tif (location == null) {", "-\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tfileSystemPath= location.toOSString();", "-\t\t} else {", "-\t\t\tfileSystemPath= path.toOSString();", "-\t\t}", "-", "-\t\ttry {", "-\t\t\tif (ZIP_ACCESS_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"(\" + currentThread + \") [JavaModelManager.getZipFile(IPath)] Creating ZipFile on \" + fileSystemPath ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "-\t\t\tzipFile = new ZipFile(fileSystemPath);", "-\t\t\tif (map != null) {", "-\t\t\t\tmap.put(path, zipFile);", "-\t\t\t}", "-\t\t\treturn zipFile;", "-\t\t} catch (IOException e) {", "-\t\t\tthrow new CoreException(new Status(Status.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"status.IOException\"), e)); //$NON-NLS-1$"]}], "num": 37591}
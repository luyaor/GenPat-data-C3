{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c94f0930642b438b98f1295568dafb1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91efe7d3c00da21658e4310569e7523d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void test0100() throws JavaModelException", "signatureAfterChange": " \tpublic void test0100() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public enum E {\\n\" +", "-\t\t\t\t\"\tA, B, C;\\n\" +", "-\t\t\t\t\"\tpublic static final E D = B;\\n\" +", "-\t\t\t\t\"\tpublic static final String F = \\\"Hello\\\";\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/E.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tassertEquals(\"Not an enum declaration\", ASTNode.ENUM_DECLARATION, node.getNodeType());", "-\t\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "-\t\t\tList enumConstants = enumDeclaration.enumConstants();", "-\t\t\tassertEquals(\"wrong size\", 3, enumConstants.size());", "-\t\t\tEnumConstantDeclaration enumConstantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "-\t\t\tIVariableBinding variableBinding = enumConstantDeclaration.resolveVariable();", "-\t\t\tassertNotNull(\"no binding\", variableBinding);", "-\t\t\tassertNull(\"is constant\", variableBinding.getConstantValue());", "-\t\t\tassertTrue(\"Not an enum constant\", variableBinding.isEnumConstant());", "-\t\t\t", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "-\t\t\tList fragments = fieldDeclaration.fragments();", "-\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "-\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tassertEquals(\"wrong name\", \"D\", fragment.getName().getIdentifier());", "-\t\t\tvariableBinding = fragment.resolveBinding();", "-\t\t\tassertNotNull(\"no binding\", variableBinding);\t\t\t", "-\t\t\tassertFalse(\"An enum constant\", variableBinding.isEnumConstant());", "+\t\tString contents =", "+\t\t\t\"public enum E {\\n\" +", "+\t\t\t\"\tA, B, C;\\n\" +", "+\t\t\t\"\tpublic static final E D = B;\\n\" +", "+\t\t\t\"\tpublic static final String F = \\\"Hello\\\";\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/E.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tassertEquals(\"Not an enum declaration\", ASTNode.ENUM_DECLARATION, node.getNodeType());", "+\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "+\t\tList enumConstants = enumDeclaration.enumConstants();", "+\t\tassertEquals(\"wrong size\", 3, enumConstants.size());", "+\t\tEnumConstantDeclaration enumConstantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "+\t\tIVariableBinding variableBinding = enumConstantDeclaration.resolveVariable();", "+\t\tassertNotNull(\"no binding\", variableBinding);", "+\t\tassertNull(\"is constant\", variableBinding.getConstantValue());", "+\t\tassertTrue(\"Not an enum constant\", variableBinding.isEnumConstant());", "+\t\t", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\tList fragments = fieldDeclaration.fragments();", "+\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tassertEquals(\"wrong name\", \"D\", fragment.getName().getIdentifier());", "+\t\tvariableBinding = fragment.resolveBinding();", "+\t\tassertNotNull(\"no binding\", variableBinding);\t\t\t", "+\t\tassertFalse(\"An enum constant\", variableBinding.isEnumConstant());", "-\t\t\tnode = getASTNode(compilationUnit, 0, 1);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tfieldDeclaration = (FieldDeclaration) node;", "-\t\t\tfragments = fieldDeclaration.fragments();", "-\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "-\t\t\tfragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tassertEquals(\"wrong name\", \"F\", fragment.getName().getIdentifier());", "-\t\t\tvariableBinding = fragment.resolveBinding();", "-\t\t\tassertNotNull(\"no binding\", variableBinding);\t", "-\t\t\tassertNotNull(\"is constant\", variableBinding.getConstantValue());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tnode = getASTNode(compilationUnit, 0, 1);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tfieldDeclaration = (FieldDeclaration) node;", "+\t\tfragments = fieldDeclaration.fragments();", "+\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\tfragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tassertEquals(\"wrong name\", \"F\", fragment.getName().getIdentifier());", "+\t\tvariableBinding = fragment.resolveBinding();", "+\t\tassertNotNull(\"no binding\", variableBinding);\t", "+\t\tassertNotNull(\"is constant\", variableBinding.getConstantValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2490adf837977627a384c3c26dfb11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tpublic void _test0108() throws JavaModelException", "signatureAfterChange": " \tpublic void _test0108() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"class X<E> {\\n\" +", "-\t\t\t\t\"    enum Numbers {\\n\" +", "-\t\t\t\t\"        ONE {\\n\" +", "-\t\t\t\t\"            Numbers getSquare() {\\n\" +", "-\t\t\t\t\"                return ONE;\\n\" +", "-\t\t\t\t\"            }\\n\" +", "-\t\t\t\t\"        };\\n\" +", "-\t\t\t\t\"        abstract Numbers getSquare();\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "-\t\t\tSimpleName simpleName = enumDeclaration.getName();", "-\t\t\tITypeBinding typeBinding = simpleName.resolveTypeBinding();", "-\t\t\t", "-\t\t\tList enumConstants = enumDeclaration.enumConstants();", "-\t\t\tassertEquals(\"Wrong size\", 1, enumConstants.size());", "-\t\t\tEnumConstantDeclaration constantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "-\t\t\tAnonymousClassDeclaration anonymousClassDeclaration = constantDeclaration.getAnonymousClassDeclaration();", "-\t\t\tassertNotNull(\"No anonymous\", anonymousClassDeclaration);", "-\t\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "-\t\t\tassertEquals(\"Wrong size\", 1, bodyDeclarations.size());", "-\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) bodyDeclarations.get(0);", "-\t\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, bodyDeclaration.getNodeType());", "-\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;", "-\t\t\tType type = methodDeclaration.getReturnType2();", "-\t\t\tassertEquals(\"Not a simple type\", ASTNode.SIMPLE_TYPE, type.getNodeType());", "-\t\t\tSimpleType simpleType = (SimpleType) type;", "-\t\t\tName name = simpleType.getName();", "-\t\t\tassertEquals(\"Not a simple name\", ASTNode.SIMPLE_NAME, name.getNodeType());", "-\t\t\tsimpleName = (SimpleName) name;", "-\t\t\tITypeBinding typeBinding2 = simpleName.resolveTypeBinding();", "-\t\t\t", "-\t\t\tassertTrue(\"Not identical\", typeBinding == typeBinding2);", "-\t\t\tassertTrue(\"Not equals\", typeBinding.isEqualTo(typeBinding2));", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"class X<E> {\\n\" +", "+\t\t\t\"    enum Numbers {\\n\" +", "+\t\t\t\"        ONE {\\n\" +", "+\t\t\t\"            Numbers getSquare() {\\n\" +", "+\t\t\t\"                return ONE;\\n\" +", "+\t\t\t\"            }\\n\" +", "+\t\t\t\"        };\\n\" +", "+\t\t\t\"        abstract Numbers getSquare();\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "+\t\tSimpleName simpleName = enumDeclaration.getName();", "+\t\tITypeBinding typeBinding = simpleName.resolveTypeBinding();", "+\t\t", "+\t\tList enumConstants = enumDeclaration.enumConstants();", "+\t\tassertEquals(\"Wrong size\", 1, enumConstants.size());", "+\t\tEnumConstantDeclaration constantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "+\t\tAnonymousClassDeclaration anonymousClassDeclaration = constantDeclaration.getAnonymousClassDeclaration();", "+\t\tassertNotNull(\"No anonymous\", anonymousClassDeclaration);", "+\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "+\t\tassertEquals(\"Wrong size\", 1, bodyDeclarations.size());", "+\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) bodyDeclarations.get(0);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, bodyDeclaration.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;", "+\t\tType type = methodDeclaration.getReturnType2();", "+\t\tassertEquals(\"Not a simple type\", ASTNode.SIMPLE_TYPE, type.getNodeType());", "+\t\tSimpleType simpleType = (SimpleType) type;", "+\t\tName name = simpleType.getName();", "+\t\tassertEquals(\"Not a simple name\", ASTNode.SIMPLE_NAME, name.getNodeType());", "+\t\tsimpleName = (SimpleName) name;", "+\t\tITypeBinding typeBinding2 = simpleName.resolveTypeBinding();", "+\t\t", "+\t\tassertTrue(\"Not identical\", typeBinding == typeBinding2);", "+\t\tassertTrue(\"Not equals\", typeBinding.isEqualTo(typeBinding2));"]}], "num": 48409}
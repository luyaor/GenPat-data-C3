{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb13d7720f40a00c710c0061b5c873b3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f5ff4aea122cc48cea19a8405a14f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["-\t\t\t\t// only local and field can share annnotations", "+\t\t\t\t// only local and field can share annnotations and their types.", "+\t\t\t\t\tcase Binding.TYPE_USE:", "+\t\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\t\t// need to fill the instances array", "+\t\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\t\t\tannotations[j] = sourceAnnotations[j].getCompilerAnnotation();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7db3bf3ae633a2e58b61222947e9389c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "13499a9d54e3730934e955e16198107a22c7d274", "commitAfterChange": "84a3c171d0b3c8c8ef97992d14a7b85fba11c57c", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  \tprivate Scope computeForbiddenBindings(ASTNode astNode, ASTNode astNodeParent, Scope scope)", "signatureAfterChange": "  \tprivate Scope computeForbiddenBindings(ASTNode astNode, ASTNode astNodeParent, Scope scope)", "diff": ["+\t\t\tint astNodeIndex = -1;", "-\t\t\t\t\treturn scope.parent;", "+\t\t\t\t\tastNodeIndex = i;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (astNodeIndex >= 0) {", "+\t\t\t\t// Need to loop only up to astNodeIndex as the rest will be undefined.", "+\t\t\t\tfor (int i = 0; i < astNodeIndex; i++) {", "+\t\t\t\t\taddForbiddenBindings(superInterfaces[i].resolvedType);", "+\t\t\t\t}", "+\t\t\t\treturn scope.parent;"]}], "num": 57731}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdfa02752e4cdb7e63c8b9cf63d6b687", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b17947a1e95940188b230bdcd47ad9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "da518c52dcbfe044bb9f162f86d0c3f3de2bc467", "commitAfterChange": "1bc1a66dee8786645fc203b9ded688e657fbf446", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "diff": ["-\t\tif ((originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t\t\tif (originalType.isTypeVariable()) {", "+\t\t", "+\t\tswitch (originalType.bindingType()) {", "+\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER:", "-\t\t\t} else if (originalType.isParameterizedType()) {", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\t\tif (substitutedArguments != originalArguments) {", "-\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+\t\t\t\tif (originalArguments != null) {", "+\t\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\t\tif (substitutedArguments != originalArguments) {", "+\t\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+\t\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+\t\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "+\t\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType);", "+\t\t\t\t\t\treturn this.environment.createParameterizedType(", "+\t\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType);", "+\t\t\t\t\t}\t\t\t\t", "-\t\t\t} else if (originalType.isArrayType()) {", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase Binding.ARRAY_TYPE:", "-\t\t\t} else if (originalType.isWildcard()) {", "+\t\t\t\tbreak;", "+", "+\t\t\tcase Binding.WILDCARD_TYPE:", "-\t\t\t}", "-\t\t} else if (originalType.isGenericType()) {", "-\t\t    // treat as if parameterized with its type variables", "-\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "-\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "-\t\t\tint length = originalVariables.length;", "-\t\t\tTypeBinding[] originalArguments;", "-\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "-\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\tif (substitutedArguments != originalArguments) {", "-\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "-\t\t\t}", "+\t\t\t\tbreak;", "+", "+\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\t    // treat as if parameterized with its type variables", "+\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "+\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "+\t\t\t\tint length = originalVariables.length;", "+\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "+\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\tif (substitutedArguments != originalArguments) {", "+\t\t\t\t\treturn this.environment.createParameterizedType(", "+\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b931d1f7a08d1bf7638f211ca8ba0b84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "da518c52dcbfe044bb9f162f86d0c3f3de2bc467", "commitAfterChange": "1bc1a66dee8786645fc203b9ded688e657fbf446", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": "     public TypeBinding substitute(TypeBinding originalType)", "diff": ["-        if ((originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "-    \t    if (originalType.isTypeVariable()) {", "+\t\tswitch (originalType.bindingType()) {", "+\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER:", "-       \t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "-    \t\t\t\t\treturn this.typeArguments[originalVariable.rank];", "-       \t\t        }", "-    \t    } else if (originalType.isParameterizedType()) {", "+   \t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "+\t\t\t\t\treturn this.typeArguments[originalVariable.rank];", "+   \t\t        }", "+   \t\t        break;", "+       \t\t       ", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-    \t        TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-    \t        if (substitutedArguments != originalArguments) {", "-\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "-\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t}    \t        \t", "-    \t            return this.environment.createParameterizedType(", "-    \t                    originalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType());", "-        \t    } ", "-\t\t\t} else if (originalType.isArrayType()) {", "+    \t        if (originalArguments != null) {", "+\t    \t        TypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "+\t    \t        if (substitutedArguments != originalArguments) {", "+\t\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+\t\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+\t\t\t\t\t\t\tlength = originalVariables.length;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn originalParameterizedType.type;", "+\t\t\t\t\t\t}    \t        \t", "+\t    \t            return this.environment.createParameterizedType(", "+\t    \t                    originalParameterizedType.type, substitutedArguments, originalParameterizedType.enclosingType());", "+\t        \t    } ", "+    \t        }", "+    \t        break;", "+    \t        ", "+\t\t\tcase Binding.ARRAY_TYPE:", "-\t\t\t} else if (originalType.isWildcard()) {", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE:", "-    \t    }", "-\t\t} else if (originalType.isGenericType()) {", "-\t\t    // treat as if parameterized with its type variables", "-\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "-\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "-\t\t\tint length = originalVariables.length;", "-\t\t\tTypeBinding[] originalArguments;", "-\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "-\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\tif (substitutedArguments != originalArguments) {", "-\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "-\t\t\t}", "+\t\t        break;", "+", "+\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\t    // treat as if parameterized with its type variables", "+\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "+\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "+\t\t\t\tlength = originalVariables.length;", "+\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "+\t\t\t\tTypeBinding[] substitutedArguments = Scope.substitute(this, originalArguments);", "+\t\t\t\tif (substitutedArguments != originalArguments) {", "+\t\t\t\t\treturn this.environment.createParameterizedType(", "+\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, null);", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db37642f9e527d2bcb6fc4569acf00a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "625969c0953342413f4e431356ea71fb95e0a242", "commitAfterChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, TypeVariableBinding eliminatedVariable)", "signatureAfterChange": "  public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, Set eliminatedVariables)", "diff": ["-public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, TypeVariableBinding eliminatedVariable) {", "+public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, Set eliminatedVariables) {", "-\t\t\t\tTypeBinding substitute = convertEliminatingTypeVariables(originalLeafComponentType, genericType, rank, eliminatedVariable); // substitute could itself be array type", "+\t\t\t\tTypeBinding substitute = convertEliminatingTypeVariables(originalLeafComponentType, genericType, rank, eliminatedVariables); // substitute could itself be array type", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, paramType.genericType(), i, eliminatedVariable);", "+\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, paramType.genericType(), i, eliminatedVariables);", "-\t\t\t\tif (eliminatedVariable == originalType) {", "+\t\t\t\tif (eliminatedVariables != null && eliminatedVariables.contains(originalType)) {", "-\t\t\t\tTypeBinding substitutedUpperBound = convertEliminatingTypeVariables(originalUpperBound, genericType, rank, variable);", "+\t\t\t\tif (eliminatedVariables == null) {", "+\t\t\t\t\teliminatedVariables = new HashSet(2);", "+\t\t\t\t}", "+\t\t\t\teliminatedVariables.add(variable);", "+\t\t\t\tTypeBinding substitutedUpperBound = convertEliminatingTypeVariables(originalUpperBound, genericType, rank, eliminatedVariables);", "+\t\t\t\teliminatedVariables.remove(variable);", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, currentType, i, eliminatedVariable);", "+\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, currentType, i, eliminatedVariables);", "-\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tTypeBinding substitutedOtherBound = convertEliminatingTypeVariables(originalOtherBound, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tTypeBinding substitutedOtherBound = convertEliminatingTypeVariables(originalOtherBound, genericType, rank, eliminatedVariables);"]}], "num": 38969}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "156bac2852cc1bba87f3bed4fa46bab6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b1f5992e7f148ec7065f0ef61ec0533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuilderTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void expectingProblemsFor(IPath[] expected)", "signatureAfterChange": " \tprotected void expectingProblemsFor(IPath[] roots, String expected)", "diff": ["-\tprotected void expectingProblemsFor(IPath[] expected) {", "-\t\tif (DEBUG)", "-\t\t\tprintProblemsFor(expected);", "-", "-\t\tfor (int i = 0; i < expected.length; i++) {", "-\t\t\t/* get the leaf problems for this type */", "-\t\t\tProblem[] problems = env.getProblemsFor(expected[i]);", "-\t\t\tassertTrue(\"missing expected problem with \" + expected[i].toString(), problems.length > 0); //$NON-NLS-1$", "+\tprotected void expectingProblemsFor(IPath[] roots, String expected) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tProblem[] allProblems = allSortedProblems(roots);", "+\t\tif (allProblems != null) {", "+\t\t\tfor (int i=0, length=allProblems.length; i<length; i++) {", "+\t\t\t\tif (i>0) buffer.append('\\n');", "+\t\t\t\tbuffer.append(allProblems[i]);", "+\t\t\t}", "+\t\tString actual = buffer.toString();", "+\t\tassumeEquals(\"Invalid problem(s)!!!\", expected, actual); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2acfe31bcd79a54be44b831d00a7373", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "4a0e763ec848dfb4aae74e117447af4a67fb4eec", "commitAfterChange": "325515486943983b7a88008e5754d5b6e036732c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "signatureAfterChange": " \tprotected void logPerfResult(PrintStream[] logStreams, int count)", "diff": ["-\t\t\tdFormat.setMaximumFractionDigits(2);", "+\t\t\tdFormat.setMaximumFractionDigits(0);", "+\t\t\tString stddevThresholdStr = dFormat.format(STDDEV_THRESHOLD*100);", "+\t\t\tNumberFormat dFormat2 = NumberFormat.getNumberInstance();", "+\t\t\tdFormat2.setMaximumFractionDigits(2);", "-\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "-\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over 2%: \"+dFormat.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "+//\t\t\t\t\t\tif (logStreams[0] != null) logStreams[0].print(\"'\");", "+\t\t\t\t\t\tSystem.out.println(\"\tWARNING: CPU time standard deviation is over \"+stddevThresholdStr+\"%: \"+dFormat2.format(cpuStats.stddev)+\"/\"+cpuStats.average+\"=\"+ pFormat.format(percent));", "-\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "-\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over 2%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));", "+//\t\t\t\t\t\tif (logStreams[1] != null) logStreams[1].print(\"'\");", "+\t\t\t\t\t\tSystem.out.println(\"\tWARNING: Elapsed time standard deviation is over \"+stddevThresholdStr+\"%: \"+dFormat.format(elapsedStats.stddev)+\"/\"+elapsedStats.average+\"=\"+ pFormat.format(percent));"]}], "num": 36275}
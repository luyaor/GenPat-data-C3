{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "943d966f13144bc34c91b1a15fa40568", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6288e54ac57643768217217067a3d916", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 1177, "methodNumberAfterChange": 1178, "signatureBeforeChange": " public void test1148()", "signatureAfterChange": " public void test1148()", "diff": ["+\t\tthis.complianceLevel == ClassFileConstants.JDK1_7 ?", "+\t\t\t\"\tpublic static <E> List<E> asList(E a, E b, E... rest) {\\n\" + ", "+\t\t\t\"\t                                                ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t: // fewer errors in 1.8+:", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <T> Comparator<T> compound(Comparator<? super T> a, Comparator<? super T> b, Comparator<? super T>... rest) {\\n\" + ", "+\t\t\t\"\t                                                                                                                    ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tint i = asList(a, b, rest);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<?>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint j = compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tcompound(c);\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\treturn compound(c);\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 16)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5954b9bdea977da83dcbb7e725aae82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1177, "methodNumberAfterChange": 1177, "signatureBeforeChange": " public void test1148()", "signatureAfterChange": " public void test1148()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <T> Comparator<T> compound(Comparator<? super T> a, Comparator<? super T> b, Comparator<? super T>... rest) {\\n\" + ", "+\t\t\t\"\t                                                                                                                    ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tint i = asList(a, b, rest);\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from List<Comparator<?>> to int\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tint j = compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tcompound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tif (true) return compound(asList(a, b, rest));\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tcompound(c);\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\treturn compound(c);\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"The method compound(Iterable<? extends Comparator<? super U>>) in the type X is not applicable for the arguments (List<Comparator<?>>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tpublic static <E> List<E> asList(E a, E b, E... rest) {\\n\" + ", "+\t\t\t\"\t                                                ^^^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter rest\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 67116}
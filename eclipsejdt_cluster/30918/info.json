{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b30dc1d70d583bc0ff5945fc24a1d0c5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e196df4ee836660a28fb84abeb001b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "b7403b29059200afb0a63e6027ea84fe3b4ecb92", "commitAfterChange": "1ee3b257e822fcbedfd61f468d0d681f07548107", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\t\tboolean rawEnclosing = false;", "-\t\tReferenceBinding targetEnclosingType = targetType.enclosingType();", "-\t\tif (targetEnclosingType != null && targetEnclosingType.isGenericType()) { // convert to raw type since wasn't parameterized", "-\t\t\trawEnclosing = true;", "-\t\t\ttargetEnclosingType = environment.createRawType(targetEnclosingType, targetEnclosingType.enclosingType());", "-\t\t}", "-\t\tif (targetType.isGenericType()) { // raw reference to generic ?", "-\t\t    return environment.createRawType(targetType, targetEnclosingType);", "-\t\t} else if (rawEnclosing) {", "-\t\t\treturn environment.createParameterizedType(targetType, null, targetEnclosingType);", "-\t\t}", "+\t\ttargetType = (ReferenceBinding) environment.convertToRawType(targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242b602631556500ef5bbe3d3f5ee95e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void buildTypeBindings()", "signatureAfterChange": "\r public void buildTypeBindings()", "diff": ["-\t\ttry {\r", "-\t\t\tchar[] source = null; \r", "-\t\t\torg.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile)openable;\r", "-\t\t\tSourceMapper sourceMapper = classFile.getSourceMapper();\r", "-\t\t\tif (sourceMapper != null) {\r", "-\t\t\t\tsource = sourceMapper.findSource(classFile.getType());\r", "+\t\tchar[] source = this.locator.findSource((org.eclipse.jdt.internal.core.ClassFile)openable); \r", "+\t\tif (source != null) {\r", "+\t\t\tthis.buildTypeBindings(source);\r", "+\t\t\t\r", "+\t\t\t// try to use the main type's class file as the openable\r", "+\t\t\tTypeDeclaration[] types = this.parsedUnit.types;\r", "+\t\t\tif (types != null && types.length > 0) {\r", "+\t\t\t\tString simpleTypeName = new String(types[0].name);\r", "+\t\t\t\tIPackageFragment parent = (IPackageFragment)openable.getParent();\r", "+\t\t\t\torg.eclipse.jdt.core.IClassFile mainTypeClassFile = \r", "+\t\t\t\t\tparent.getClassFile(simpleTypeName + \".class\"); //$NON-NLS-1$\r", "+\t\t\t\tif (mainTypeClassFile.exists()) {\r", "+\t\t\t\t\tthis.openable = (Openable)mainTypeClassFile;\r", "+\t\t\t\t} \r", "-\t\t\tif (source == null) {\r", "-\t\t\t\t// default to opening the class file\r", "-\t\t\t\tString sourceFromBuffer = classFile.getSource();\r", "-\t\t\t\tif (sourceFromBuffer != null) {\r", "-\t\t\t\t\tsource = sourceFromBuffer.toCharArray();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (source != null) {\r", "-\t\t\t\tthis.buildTypeBindings(source);\r", "-\t\t\t\t\r", "-\t\t\t\t// try to use the main type's class file as the openable\r", "-\t\t\t\tTypeDeclaration[] types = this.parsedUnit.types;\r", "-\t\t\t\tif (types != null && types.length > 0) {\r", "-\t\t\t\t\tString simpleTypeName = new String(types[0].name);\r", "-\t\t\t\t\tIPackageFragment parent = (IPackageFragment)openable.getParent();\r", "-\t\t\t\t\torg.eclipse.jdt.core.IClassFile mainTypeClassFile = \r", "-\t\t\t\t\t\tparent.getClassFile(simpleTypeName + \".class\"); //$NON-NLS-1$\r", "-\t\t\t\t\tif (mainTypeClassFile.exists()) {\r", "-\t\t\t\t\t\tthis.openable = (Openable)mainTypeClassFile;\r", "-\t\t\t\t\t} \r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (JavaModelException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1dd3592d53661cc53550428f57b48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public CompilationUnit getCompilationUnitForBinding(final IBinding binding)", "signatureAfterChange": "     public CompilationUnit getCompilationUnitForBinding(final IBinding binding)", "diff": ["+\t\t\t\t// binary type don't have compilation unit.", "+\t\t\t\tif( !typeBinding.isFromSource() )", "+\t\t\t\t\treturn null;", "-\t\t\t\t\tfinal String pathname = qname.replace('.', File.separatorChar);", "-\t\t\t\t\tfinal IPath path = Path.fromOSString(pathname);", "-\t\t\t\t\ttry{", "-\t\t\t\t\t\tunit = (ICompilationUnit)_javaProject.findElement(path);", "-\t\t\t\t\t\t_typeBinding2ModelCompUnit.put(typeBinding, unit);", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch(JavaModelException e){", "-\t\t\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t\t\t}", "+\t\t\t\t\tunit = getICompilationUnitForTopLevelType(qname);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8357bca9e7eff984f57642ac0d4a9dac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic char[] findSource(String fullName)", "signatureAfterChange": " \t \tpublic char[] findSource(String fullName)", "diff": ["-\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), this.sourcePath, true);", "-\t\t\tif (target instanceof IResource) {", "-\t\t\t\tif (target instanceof IContainer) {", "-\t\t\t\t\tIResource res = ((IContainer)target).findMember(fullName);", "-\t\t\t\t\tif (res instanceof IFile) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tsource = org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsCharArray((IFile)res);", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// ignore", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (target instanceof File) {", "-\t\t\t\tFile file = (File)target;", "-\t\t\t\tif (file.isDirectory()) {", "-\t\t\t\t\tFile sourceFile = new File(file, fullName);", "-\t\t\t\t\tif (sourceFile.isFile()) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tsource = Util.getFileCharContent(sourceFile, this.encoding);", "-\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\t// ignore", "-\t\t\t\t\t\t}", "+\t\t\tObject target = JavaModel.getTarget(this.sourcePath, true);", "+\t\t\tif (target instanceof IContainer) {", "+\t\t\t\tIResource res = ((IContainer)target).findMember(fullName);", "+\t\t\t\tif (res instanceof IFile) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tsource = org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsCharArray((IFile)res);", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9091fad4726e10f1979e1a8d84d7d83d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PossibleMatch.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public char[] getContents()", "signatureAfterChange": " public char[] getContents()", "diff": ["-\ttry {", "-\t\tif (this.openable instanceof CompilationUnit) {", "-\t\t\tif (((CompilationUnit) this.openable).isWorkingCopy()) {", "-\t\t\t\tIBuffer buffer = this.openable.getBuffer();", "-\t\t\t\tif (buffer == null) return null;", "-\t\t\t\treturn this.source = buffer.getCharacters();", "-\t\t\t}", "-\t\t\treturn this.source = Util.getResourceContentsAsCharArray((IFile) this.resource);", "-\t\t} else if (this.openable instanceof ClassFile) {", "-\t\t\tString fileName = getSourceFileName();", "-\t\t\tif (fileName == NO_SOURCE_FILE_NAME) return null;", "+\tif (this.openable instanceof ClassFile) {", "+\t\tString fileName = getSourceFileName();", "+\t\tif (fileName == NO_SOURCE_FILE_NAME) return null;", "-\t\t\tSourceMapper sourceMapper = this.openable.getSourceMapper();", "-\t\t\tIType type = ((ClassFile) this.openable).getType();", "-\t\t\treturn this.source = sourceMapper.findSource(type, fileName);", "-\t\t}", "-\t} catch (JavaModelException e) { // ignored", "+\t\tSourceMapper sourceMapper = this.openable.getSourceMapper();", "+\t\tIType type = ((ClassFile) this.openable).getType();", "+\t\treturn this.source = sourceMapper.findSource(type, fileName);", "-\treturn null;", "+\treturn this.source = this.document.getCharContents();"]}], "num": 30918}
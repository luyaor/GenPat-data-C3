{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84c80c8073bf407000e479b36edd8c67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5844e5789f1340ee44e2ca8f2d2fb0f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "f78e4675edd2e8b24e6d49d405330196881697a0", "commitAfterChange": "aaea056b63df0d51dde45ba7280dde54d23c0cca", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void test074_Bug155003() throws CoreException", "signatureAfterChange": " public void test074_Bug155003() throws CoreException", "diff": ["+\tString content = \"public class X {\\n\" + ", "+\t\t\t\"    public void foo() throws InterruptedException, IllegalMonitorStateException {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    void test() throws InterruptedException, IllegalMonitorStateException {\\n\" + ", "+\t\t\t\"    \t/*start*/foo()/*end*/;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\";", "+\tthis.workingCopies = createWorkingCopies(new String[] { \"/P/X.java\", content }, true /*resolve*/);", "+\tASTNode node = buildAST(content, this.workingCopies[0]);", "+\tassertEquals(\"Invalid node type!\", ASTNode.METHOD_INVOCATION, node.getNodeType());", "+\tIBinding binding = resolveBinding(node);", "+\tBindingKey bindingKey = new BindingKey(binding.getKey());", "+\tassertStringsEqual(\"Unexpected thrown exceptions\",", "+\t\t\"Ljava.lang.InterruptedException;\\n\" + ", "+\t\t\"Ljava.lang.IllegalMonitorStateException;\\n\",", "+\t\tbindingKey.getThrownExceptions()", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7332f44b7243e79f73043ebd3cef4b6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "f78e4675edd2e8b24e6d49d405330196881697a0", "commitAfterChange": "aaea056b63df0d51dde45ba7280dde54d23c0cca", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 102, "signatureBeforeChange": " public void test076_Bug155003() throws CoreException", "signatureAfterChange": " public void test076_Bug155003() throws CoreException", "diff": ["-\tassertBindingCreated(", "-\t\tnew String[] {", "-\t\t\t\"/P/X.java\",", "-\t\t\t\"public class X<T> {\\n\" + ", "-\t\t\t\"\t<K, V> V bar(K key, V value) throws Exception {\\n\" + ", "-\t\t\t\"\t\treturn value;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"\tvoid test() throws Exception {\\n\" + ", "-\t\t\t\"\t\t/*start*/bar(\\\"\\\", \\\"\\\")/*end*/;\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\"", "-\t\t},", "-\t\t\"LX<LX;:TT;>;.bar<K:Ljava/lang/Object;V:Ljava/lang/Object;>(TK;TV;)TV;|Ljava/lang/Exception;%<Ljava/lang/String;Ljava/lang/String;>\"", "+\tString content = \"public class X<T> {\\n\" + ", "+\t\t\"\t<K, V> V bar(K key, V value) throws Exception {\\n\" + ", "+\t\t\"\t\treturn value;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tvoid test() throws Exception {\\n\" + ", "+\t\t\"\t\t/*start*/bar(\\\"\\\", \\\"\\\")/*end*/;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\";", "+\tthis.workingCopies = createWorkingCopies(new String[] { \"/P/X.java\", content }, true /*resolve*/);", "+\tASTNode node = buildAST(content, this.workingCopies[0]);", "+\tassertEquals(\"Invalid node type!\", ASTNode.METHOD_INVOCATION, node.getNodeType());", "+\tIBinding binding = resolveBinding(node);", "+\tBindingKey bindingKey = new BindingKey(binding.getKey());", "+\tassertStringsEqual(\"Unexpected thrown exceptions\",", "+\t\t\"Ljava.lang.Exception;\\n\",", "+\t\tbindingKey.getThrownExceptions()", "+\t);", "+}"]}], "num": 20016}
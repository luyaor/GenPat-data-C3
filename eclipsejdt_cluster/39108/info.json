{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edfef60c62a4daf6b27c71d5b401771e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de93d486db44559c398c1d41216fd85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "a5c56b9d9a1a6a7a2412b9e4fe79595e9a454729", "commitAfterChange": "808f8a4c125739a8b2d2237ba90c04dc1390f0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tboolean varargs, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tboolean varargs, \tIMethod method, \tint matchRule)", "diff": ["-\tif (method instanceof ParameterizedSourceMethod) {", "-\t\tParameterizedSourceMethod parameterizedMethod = (ParameterizedSourceMethod) method;", "-\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "-//\t\tgenericSignature = parameterizedMethod.genericSignature;", "-\t} else if (method instanceof ParameterizedBinaryMethod) {", "-\t\tParameterizedBinaryMethod parameterizedMethod = (ParameterizedBinaryMethod) method;", "-\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "-//\t\tgenericSignature = parameterizedMethod.genericSignature;", "+\tif (method.isParameterized()) {", "+\t\tgenericDeclaringTypeSignature = new BindingKey(method.getKey()).getDeclaringTypeSignature();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aec42cf5c5dd23276d556b0ecca1b69b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java", "commitBeforeChange": "a5c56b9d9a1a6a7a2412b9e4fe79595e9a454729", "commitAfterChange": "808f8a4c125739a8b2d2237ba90c04dc1390f0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public ConstructorPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] declaringSimpleName,\t \tchar[] declaringQualification, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tboolean varargs, \tint matchRule)", "signatureAfterChange": " public ConstructorPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] declaringSimpleName,\t \tchar[] declaringQualification, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tboolean varargs, \tint matchRule)", "diff": ["-//\tString genericSignature = null;", "-\tif (method instanceof ParameterizedSourceMethod) {", "-\t\tParameterizedSourceMethod parameterizedMethod = (ParameterizedSourceMethod) method;", "-\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "-//\t\tgenericSignature = parameterizedMethod.genericSignature;", "-\t} else if (method instanceof ParameterizedBinaryMethod) {", "-\t\tParameterizedBinaryMethod parameterizedMethod = (ParameterizedBinaryMethod) method;", "-\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "-//\t\tgenericSignature = parameterizedMethod.genericSignature;", "+\tif (method.isParameterized()) {", "+\t\tBindingKey key = new BindingKey(method.getKey());", "+\t\tgenericDeclaringTypeSignature = key.getDeclaringTypeSignature();"]}], "num": 39108}
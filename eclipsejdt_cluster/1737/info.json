{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "899dbd84a116300aa6cddd5dc37aa5ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740805f568f84cb0742c0d034b3b5e36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "105a4ca655d44213ffe23400e85e9364ac7516e4", "commitAfterChange": "3e28b00b3ff1ea2877f4a4e8b245ac6023e86b59", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["+\t", "-\t\t\t\t\tchar[] source = null;", "-\t\t\t\t\tchar[][] packageName = null;", "-\t\t\t\t\tString fileName = null;", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tsource = this.compilationUnitSource.getSource().toCharArray();", "-\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t// no source, then we cannot build anything", "-\t\t\t\t\t\t\tthrow new IllegalStateException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPackageFragment packageFragment = (PackageFragment)this.compilationUnitSource.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\t\t\t\tif (packageFragment != null){", "-\t\t\t\t\t\t\tpackageName = Util.toCharArrays(packageFragment.names);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfileName = this.compilationUnitSource.getElementName();", "+\t\t\t\t\t\tsourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) this.compilationUnitSource;", "-\t\t\t\t\t\tString sourceString = null;", "-\t\t\t\t\t\t\tsourceString = this.classFileSource.getSource();", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// nothing to do", "-\t\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t\tif (sourceString == null) {", "-\t\t\t\t\t\t\tthrow new IllegalStateException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsource = sourceString.toCharArray();", "-\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tString sourceString = this.classFileSource.getSource();", "+\t\t\t\t\t\t\tif (sourceString == null) {", "+\t\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpackageName = Util.toCharArrays(packageFragment.names);", "-\t\t\t\t\t\t\tfileName = type.sourceFileName(binaryType);", "+\t\t\t\t\t\t\tString fileName = type.sourceFileName(binaryType);", "+\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceString.toCharArray(), Util.toCharArrays(packageFragment.names), fileName, this.project);", "+\t\t\t\t\t\t\t// class file doesn't exist", "-\t\t\t\t\t\tsource = this.rawSource;", "-\t\t\t\t\t\tif (this.unitName == null || this.project == null || this.compilerOptions == null) {", "-\t\t\t\t\t\t\tneedToResolveBindings = false;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfileName = this.unitName;", "-\t\t\t\t\t\t\tneedToResolveBindings = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (source == null) {", "+\t\t\t\t\t\tneedToResolveBindings = this.unitName != null && this.project != null && this.compilerOptions != null;", "+\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(this.rawSource, null, this.unitName == null ? \"\" : this.unitName, this.project); //$NON-NLS-1$", "+\t\t\t\t\t} else {", "-\t\t\t\t\t}", "-\t\t\t\t\tif (this.sourceLength == -1) {", "-\t\t\t\t\t\tthis.sourceLength = source.length;", "-\t\t\t\t\t\t\t\t\tsource,", "-\t\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\t\tfileName,", "+\t\t\t\t\t\t\t\t\tsourceUnit,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tsourceUnit,", "-\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\tsourceUnit,", "-\t\t\t\t\treturn convert(monitor, compilationUnitDeclaration, source, needToResolveBindings);", "+\t\t\t\t\treturn CompilationUnitResolver.convert(", "+\t\t\t\t\t\tcompilationUnitDeclaration, ", "+\t\t\t\t\t\tsourceUnit.getContents(), ", "+\t\t\t\t\t\tthis.apiLevel, ", "+\t\t\t\t\t\tthis.compilerOptions,", "+\t\t\t\t\t\tneedToResolveBindings,", "+\t\t\t\t\t\tthis.compilationUnitSource == null ? this.workingCopyOwner : this.compilationUnitSource.getOwner(),", "+\t\t\t\t\t\tneedToResolveBindings ? new DefaultBindingResolver.BindingTables() : null, ", "+\t\t\t\t\t\tmonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78ddd944e8e28558b50c1bd8ed879057", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ad99e8346223888eb2f8e2613d918829f95fd2b2", "commitAfterChange": "7c65ba31905e387e2902b13fe71f33b55f069273", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": " \t \tprivate char[] getResolvedSignature(char[][] parameterTypes, char[] fullyQualifiedTypeName, int parameterCount, Scope scope)", "signatureAfterChange": " \t \tprivate char[] getResolvedSignature(char[][] parameterTypes, char[] fullyQualifiedTypeName, int parameterCount, Scope scope)", "diff": ["-\t\t\tif (guessedType instanceof ReferenceBinding) {", "-\t\t\t\tReferenceBinding refBinding = (ReferenceBinding) guessedType;", "+\t\t\tif (guessedType instanceof SourceTypeBinding) {", "+\t\t\t\tSourceTypeBinding refBinding = (SourceTypeBinding) guessedType;", "-\t\t\t\tMethodBinding bestConstructor = null;", "-\t\t\t\tint[] bestMatchingLengths = null;", "-\t\t\t\t", "-\t\t\t\tMethodBinding[] methods = refBinding.methods();", "+\t\t\t\trefBinding.methods(); // force resolution", "+\t\t\t\tif (refBinding.scope == null || refBinding.scope.referenceContext == null) return null;", "+\t\t\t\tTypeDeclaration typeDeclaration = refBinding.scope.referenceContext;", "+\t\t\t\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\t\t\t\t\tMethodBinding method = methods[i];", "+\t\t\t\t\tAbstractMethodDeclaration method = methods[i];", "-\t\t\t\t\tif (!method.isConstructor()) break next;", "+\t\t\t\t\tif (method.binding == null || !method.isConstructor()) continue next;", "-\t\t\t\t\tTypeBinding[] parameters = method.parameters;", "-\t\t\t\t\t//TODO take careful of member types", "-\t\t\t\t\tint parametersLength = parameters == null ? 0 : parameters.length;", "-\t\t\t\t\tif (parameterCount != parametersLength) continue next;", "+\t\t\t\t\tArgument[] arguments = method.arguments;", "+\t\t\t\t\tint argumentsLength = arguments == null ? 0 : arguments.length;", "+\t\t\t\t\tif (parameterCount != argumentsLength) continue next;", "-\t\t\t\t\tint[] matchingLengths = new int[parameterCount];", "-\t\t\t\t\tfor (int j = 0; j < parametersLength; j++) {", "-\t\t\t\t\t\tTypeBinding parameter = parameters[j];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tchar[] parameterTypeName;", "-\t\t\t\t\t\tif (parameter instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tparameterTypeName = CharOperation.concatWith(((ReferenceBinding)parameter).compoundName, '.');", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tparameterTypeName = parameter.sourceName();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (!CharOperation.endsWith(parameterTypeName, parameterTypes[j])) {", "+\t\t\t\t\tfor (int j = 0; j < argumentsLength; j++) {", "+\t\t\t\t\t\tif (!CharOperation.equals(CharOperation.concatWith(arguments[j].type.getTypeName(), '.'), parameterTypes[j])) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint matchingLength = parameterTypes[j].length;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (bestMatchingLengths != null) {", "-\t\t\t\t\t\t\tif (bestMatchingLengths[j] > matchingLength) {", "-\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tmatchingLengths[j] = matchingLength;", "-\t\t\t\t\t", "-\t\t\t\t\tbestConstructor = method;", "-\t\t\t\t\tbestMatchingLengths = matchingLengths;", "+\t\t\t\t\treturn getSignature(method.binding);", "-\t\t\t\t", "-\t\t\t\tif (bestConstructor == null) return null;", "-\t\t\t\treturn getSignature(bestConstructor);"]}], "num": 1737}
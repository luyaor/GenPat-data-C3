{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0d7d10dc9e3f36d287ad784587cffdb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d3d559ab2eaaa4bb54cf1979f012c5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "signatureAfterChange": " public void traverse(ASTVisitor visitor, CompilationUnitScope unitScope)", "diff": ["+ */", "+public void traverse(ASTVisitor visitor, CompilationUnitScope unitScope) {", "+", "+\tif (this.ignoreFurtherInvestigation)", "+\t\treturn;", "+\ttry {", "+\t\tif (visitor.visit(this, unitScope)) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.superclass != null)", "+\t\t\t\tthis.superclass.traverse(visitor, this.scope);", "+\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.typeParameters != null) {", "+\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.memberTypes[i].traverse(visitor, this.scope);", "+\t\t\t\tint length = this.fields.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tFieldDeclaration field;", "+\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "+\t\t\t\t\t\tfield.traverse(visitor, this.staticInitializerScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfield.traverse(visitor, this.initializerScope);", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.methods[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t}", "+\t\tvisitor.endVisit(this, unitScope);", "+\t} catch (AbortType e) {", "+\t\t// silent abort", "+\t}", "+}", "-\t */", "-\tpublic void traverse(", "-\t\tASTVisitor visitor,", "-\t\tCompilationUnitScope unitScope) {", "-", "-\t\tif (ignoreFurtherInvestigation)", "-\t\t\treturn;", "-\t\ttry {", "-\t\t\tif (visitor.visit(this, unitScope)) {", "-\t\t\t\tif (this.annotations != null) {", "-\t\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (this.superclass != null)", "-\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "-\t\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\t\tint length = this.superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.typeParameters != null) {", "-\t\t\t\t\tint length = this.typeParameters.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tif (this.memberTypes != null) {", "-\t\t\t\t\tint length = this.memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.fields != null) {", "-\t\t\t\t\tint length = this.fields.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tFieldDeclaration field;", "-\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\t\t\t\tfield.traverse(visitor, staticInitializerScope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfield.traverse(visitor, initializerScope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (this.methods != null) {", "-\t\t\t\t\tint length = this.methods.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);", "-\t\t\tvisitor.endVisit(this, unitScope);", "-\t\t} catch (AbortType e) {", "-\t\t\t// silent abort", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ed93731f59662aa8313a38d2f5f53c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "afcefcc52a6e235f9ed640317727929d84135cf0", "commitAfterChange": "5ce294a787e58643d5e8115fe2ddfea119e53aa2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "signatureAfterChange": "  public void traverse(ASTVisitor visitor,\tClassScope classScope)", "diff": ["-", "-\tpublic void traverse(", "-\t\tASTVisitor visitor,", "-\t\tClassScope classScope) {", "-", "-\t\t", "-\t\tif (visitor.visit(this, classScope)) {", "-\t\t\tif (this.annotations != null) {", "-\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (this.typeParameters != null) {", "-\t\t\t\tint typeParametersLength = this.typeParameters.length;", "-\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t}\t\t\t", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentLength = arguments.length;", "-\t\t\t\tfor (int i = 0; i < argumentLength; i++)", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (thrownExceptions != null) {", "-\t\t\t\tint thrownExceptionsLength = thrownExceptions.length;", "-\t\t\t\tfor (int i = 0; i < thrownExceptionsLength; i++)", "-\t\t\t\t\tthrownExceptions[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (constructorCall != null)", "-\t\t\t\tconstructorCall.traverse(visitor, scope);", "-\t\t\tif (statements != null) {", "-\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\tfor (int i = 0; i < statementsLength; i++)", "-\t\t\t\t\tstatements[i].traverse(visitor, scope);", "-\t\tvisitor.endVisit(this, classScope);", "+", "+public void traverse(ASTVisitor visitor,\tClassScope classScope) {", "+\tif (visitor.visit(this, classScope)) {", "+\t\tif (this.annotations != null) {", "+\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t}", "+\t\tif (this.typeParameters != null) {", "+\t\t\tint typeParametersLength = this.typeParameters.length;", "+\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t}\t\t\t", "+\t\tif (this.arguments != null) {", "+\t\t\tint argumentLength = this.arguments.length;", "+\t\t\tfor (int i = 0; i < argumentLength; i++)", "+\t\t\t\tthis.arguments[i].traverse(visitor, this.scope);", "+\t\t}", "+\t\tif (this.thrownExceptions != null) {", "+\t\t\tint thrownExceptionsLength = this.thrownExceptions.length;", "+\t\t\tfor (int i = 0; i < thrownExceptionsLength; i++)", "+\t\t\t\tthis.thrownExceptions[i].traverse(visitor, this.scope);", "+\t\t}", "+\t\tif (this.constructorCall != null)", "+\t\t\tthis.constructorCall.traverse(visitor, this.scope);", "+\t\tif (this.statements != null) {", "+\t\t\tint statementsLength = this.statements.length;", "+\t\t\tfor (int i = 0; i < statementsLength; i++)", "+\t\t\t\tthis.statements[i].traverse(visitor, this.scope);", "+\t\t}", "+\t}", "+\tvisitor.endVisit(this, classScope);", "+}"]}], "num": 48261}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8805731f35f962b6ed9ce4ff2a13ced", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ee0a52c78a02bf1ad27088827dbe53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "da5be92848053087506e3795d2b7a39a9d351430", "commitAfterChange": "c96ea754cbc1843e6373572c9a41527df8e971a2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void _test016()", "signatureAfterChange": "  \tpublic void _test016()", "diff": ["-\t// cannot have 2 methods with compatible return types like Object & String so how is this legal?", "-\tpublic void _test016() { // 77228", "+\tpublic void _test016() { // 73971 and 77228", "+\t\t\t\t\"class X {\\n\" + ", "+\t\t\t\t\"\tstatic <E extends A> void m(E e) { System.out.print(\\\"A=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tstatic <E extends B> void m(E e) { System.out.print(\\\"B=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tm(new A());\\n\" + ", "+\t\t\t\t\"\t\tm(new B());\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\"", "+\t\t\t},", "+\t\t\t\"A=AB=B\"", "+\t\t);", "+\t\tthis.runConformTest(\t// cannot have 2 methods with compatible return types like Object & String so how is this legal?", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8810ef3cb949e69d99dbafb62bbee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0cad9a75d8029433899afbdf88cbb39e8dd0618a", "commitAfterChange": "af1194b54eafec10f8134c763fe3f4b7174111fb", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tpublic void test243()", "signatureAfterChange": "\t\t \tpublic void test243()", "diff": ["-\t// TODO (kent) simple covariance cases", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"    public X foo() {\\n\" +", "+\t\t\t\t\"        System.out.println(\\\"Did NOT add bridge method\\\");\\n\" +", "+\t\t\t\t\"        return this;\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) throws Exception {\\n\" +", "+\t\t\t\t\"        X x = new A();\\n\" +", "+\t\t\t\t\"        x.foo();\\n\" +", "+\t\t\t\t\"        System.out.print(\\\" + \\\");\\n\" +", "+\t\t\t\t\"        I i = new A();\\n\" +", "+\t\t\t\t\"        i.foo();\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"interface I {\\n\" +", "+\t\t\t\t\"    public I foo();\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A extends X implements I {\\n\" +", "+\t\t\t\t\"    public A foo() {\\n\" +", "+\t\t\t\t\"        System.out.print(\\\"Added bridge method\\\");\\n\" +", "+\t\t\t\t\"        return this;\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"Added bridge method + Added bridge method\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a11d62917d18ad24d94e73eb5c8da974", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6d4fe8b897d9f85de3c7e4f3c65c2b0dfb35f1ed", "commitAfterChange": "e99876c3df14b077c8fdb45729d7e80e1c7f1686", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-// TODO (kent) incorrectly reported as ambiguous", "-//\t\tthis.runConformTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"NumericArray3.java\",", "-//\t\t\t\t\"class Array<T> {\\n\" + ", "-//\t\t\t\t\"\tpublic <U extends Number> void add(U u) {}\\n\" + ", "-//\t\t\t\t\"}\\n\" + ", "-//\t\t\t\t\"public class NumericArray3<T extends Number> extends Array<T> {\\n\" +", "-//\t\t\t\t\"\tpublic static void main(String[] s) { new NumericArray3<Integer>().add(1); }\\n\" +", "-//\t\t\t\t\"\t@Override public void add(Number n) { System.out.println(true); }\\n\" +", "-//\t\t\t\t\"}\"", "-//\t\t\t},", "-//\t\t\t\"true\"", "-//\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"NumericArray3.java\",", "+\t\t\t\t\"class Array<T> {\\n\" + ", "+\t\t\t\t\"\tpublic <U extends Number> void add(U u) {}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"public class NumericArray3<T extends Number> extends Array<T> {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) { new NumericArray3<Integer>().add(1); }\\n\" +", "+\t\t\t\t\"\t@Override public void add(Number n) { System.out.println(true); }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"true\"", "+\t\t);"]}], "num": 5927}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae2bc52b5973ffe9e7b3e0ae3add1cf5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d193f17b9c8258d824923201a20b2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "commitAfterChange": "ea2bbf7bacf87faa676c47fde1479a0938fb73cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "diff": ["-\t\t\tif (leafType instanceof ReferenceBinding)", "-\t\t\tif (!((ReferenceBinding)leafType).canBeSeenBy(this)) {", "-\t\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ReceiverTypeNotVisible);", "+\t\t\tif (leafType instanceof ReferenceBinding) {", "+\t\t\t\tif (!((ReferenceBinding) leafType).canBeSeenBy(this))", "+\t\t\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ReceiverTypeNotVisible);", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6624738b756959d9cd86715f844c135d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "1a523523632cd1a64bce4e193fddecc091f0a09b", "commitAfterChange": "2da53a14245271c999bfef856e9b2ece46065198", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  private void checkMethods()", "signatureAfterChange": " private void checkMethods()", "diff": ["-", "-\t\t\t\t} else {", "-\t\t\t\t\tif (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract())", "-\t\t\t\t\t\tif (mustImplementAbstractMethod(matchingInherited[0])) {", "-\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "-\t\t\t\t\t\t\tif (typeDeclaration != null) {", "-\t\t\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(matchingInherited[0]);", "-\t\t\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t} else if (mustImplementAbstractMethods && index == 0 && matchingInherited[0].isAbstract()) {", "+\t\t\t\t\tif (mustImplementAbstractMethod(matchingInherited[0])) {", "+\t\t\t\t\t\tTypeDeclaration typeDeclaration = this.type.scope.referenceContext;", "+\t\t\t\t\t\tif (typeDeclaration != null) {", "+\t\t\t\t\t\t\tMethodDeclaration missingAbstractMethod = typeDeclaration.addMissingAbstractMethodFor(matchingInherited[0]);", "+\t\t\t\t\t\t\tmissingAbstractMethod.scope.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, matchingInherited[0]);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1a943f83064ddcfd76790f7c0e3973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \t\r \tpublic Expression convert(ThisReference reference)", "signatureAfterChange": "\r \t\r \tpublic Expression convert(ThisReference reference)", "diff": ["-\t\tif (reference instanceof QualifiedThisReference) {\r", "-\t\t\treturn convert((QualifiedThisReference) reference);\r", "-\t\t}\r", "-\t\tif (reference instanceof QualifiedSuperReference) {\r", "-\t\t\treturn convert((QualifiedSuperReference) reference);\r", "-\t\t}\r", "-\t\t} else {\r", "+\t\t} else if (reference instanceof QualifiedSuperReference) {\r", "+\t\t\treturn convert((QualifiedSuperReference) reference);\r", "+\t\t} else if (reference instanceof QualifiedThisReference) {\r", "+\t\t\treturn convert((QualifiedThisReference) reference);\r", "+\t\t}  else {\r"]}], "num": 18096}
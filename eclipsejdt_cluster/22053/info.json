{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da87850262ba1238998adf9269e77670", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1914040ead23e97b18757ac51b7c25ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "b8f31731e75965ced53a2b2bb7747f2f3f0bdc77", "commitAfterChange": "90b243491d35267d13bcf8f4b3b622ed87af2ae7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean strict)", "signatureAfterChange": " \tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean overrideDetailChecking)", "diff": ["-\tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean strict) {", "-\t\tif ((requiredBits != 0 || strict) && requiredBits != providedBits) {", "+\t */", "+\tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean overrideDetailChecking) {", "+\t\t// nullStatus: ", "+\t\t// overrideDetailChecking: ", "+\t\tif ((requiredBits != 0 || overrideDetailChecking) && requiredBits != providedBits) {", "+\t\t\tif (nullStatus != -1 && !overrideDetailChecking && requiredBits == TagBits.AnnotationNullable)", "+\t\t\t\treturn 0; // when using flow info, everything is compatible to nullable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd7f023219248845936197d4a6ff2fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict)", "diff": ["+\t// additional parameter strict: if true we do not tolerate incompatibly missing annotations on type parameters (for overriding analysis)", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict) {", "-\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus));", "+\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict));", "-\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "+\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict && nullStatus == -1);", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1);", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1, strict);", "-\t\t\t\t\t\tNullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus);", "+\t\t\t\t\t\tNullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus, strict);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1);", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1, strict);"]}], "num": 22053}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bed55b32f974d9ad4be798c928eeb72", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74669709e50aa85c702a27c24b073d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": " \tpublic void setUpJCLClasspathVariables(String compliance, boolean useFullJCL) throws JavaModelException, IOException", "diff": ["+\t}", "+\tpublic void setUpJCLClasspathVariables(String compliance, boolean useFullJCL) throws JavaModelException, IOException {", "-\t\t\tif (JavaCore.getClasspathVariable(\"JCL18_LIB\") == null) {", "-\t\t\t\tsetupExternalJCL(\"jclMin1.8\");", "-\t\t\t\tJavaCore.setClasspathVariables(", "-\t\t\t\t\tnew String[] {\"JCL18_LIB\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "-\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.8\"), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "-\t\t\t\t\tnull);", "-\t\t\t}\t", "+\t\t\tif (useFullJCL) {", "+\t\t\t\tif (JavaCore.getClasspathVariable(\"JCL18_FULL\") == null) {", "+\t\t\t\t\tsetupExternalJCL(\"jclMin1.8\"); // Create the whole mininmal 1.8 set, though we will need only the source zip", "+\t\t\t\t\tsetupExternalJCL(\"jclFull1.8\");", "+\t\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\t\tnew String[] {\"JCL18_FULL\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\t\tnew IPath[] {new Path(getExternalJCLPathString(\"1.8\", true)), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\t\tnull);", "+\t\t\t\t} ", "+\t\t\t} else if (JavaCore.getClasspathVariable(\"JCL18_LIB\") == null) {", "+\t\t\t\t\t\tsetupExternalJCL(\"jclMin1.8\");", "+\t\t\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\t\t\tnew String[] {\"JCL18_LIB\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.8\"), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\t\t\tnull);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfe126b24b2b0927db0e789cc555491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "86397dfc80023f615cc88c0705b2ada916e6efb2", "commitAfterChange": "24624a25f60573230ed7652730faedca15fd4d8b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] patterns, boolean areExclusionPatterns, String specificOutputLocation) throws JavaModelException", "diff": ["+\t */", "+\tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] patterns, boolean areExclusionPatterns, String specificOutputLocation) throws JavaModelException {", "-\t\tIClasspathEntry entry = JavaCore.newSourceEntry(path, exclusionPatterns == null ? new Path[0] : exclusionPatterns, outputPath);", "+\t\tIClasspathEntry entry;", "+\t\tif (areExclusionPatterns)", "+\t\t\t// exclusion patterns", "+\t\t\tentry = JavaCore.newSourceEntry(path, patterns == null ? new Path[0] : patterns, outputPath);", "+\t\telse", "+\t\t\t// inclusion patterns", "+\t\t\tentry = JavaCore.newSourceEntry(path, patterns == null ? new Path[0] : patterns, new Path[0], outputPath);"]}], "num": 51122}
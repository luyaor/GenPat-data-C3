{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fd3a94f51987d57fe6afd5348bf56f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b805c0a8e383b03e57ee2c88f5e495c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void testMemberTypeReference() throws CoreException", "signatureAfterChange": " public void testTypeReference10() throws CoreException", "diff": ["- */", "-public void testMemberTypeReference() throws CoreException {", "-\t// references to second level member type", "-\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tsearch(", "-\t\t\"BMember\", ", "-\t\tTYPE,", "-\t\tREFERENCES,", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertSearchResults(", "-\t\t\"References to type BMember\",", "-\t\t\"src/MemberTypeReference/Azz.java void MemberTypeReference.Azz.poo() [BMember] EXACT_MATCH\\n\" + ", "-\t\t\"src/MemberTypeReference/Azz.java MemberTypeReference.Azz$AzzMember [BMember] EXACT_MATCH\\n\" + ", "-\t\t\"src/MemberTypeReference/Azz.java MemberTypeReference.X.val [BMember] EXACT_MATCH\\n\" + ", "-\t\t\"src/MemberTypeReference/B.java void MemberTypeReference.B.foo() [BMember] EXACT_MATCH\",", "-\t\tresultCollector);", "-", "-\t// references to first level member type", "-\tresultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tsearch(", "-\t\t\"AzzMember\", ", "-\t\tTYPE,", "-\t\tREFERENCES,", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertSearchResults(", "-\t\t\"References to type AzzMember\",", "-\t\t\"src/MemberTypeReference/Azz.java MemberTypeReference.X.val [AzzMember] EXACT_MATCH\\n\" + ", "-\t\t\"src/MemberTypeReference/B.java void MemberTypeReference.B.foo() [AzzMember] EXACT_MATCH\",", "-\t\tresultCollector);", "-", "-\t// no reference to a field with same name as member type", "-\tresultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tsearch(", "-\t\t\"BMember\", ", "-\t\tFIELD,", "-\t\tREFERENCES,", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertSearchResults(", "-\t\t\"References to field BMember\",", "-\t\t\"\",", "-\t\tresultCollector);", "-}", "+ */", "+public void testTypeReference10() throws CoreException { // was testMemberTypeReference", "+\t// references to second level member type", "+\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\tresultCollector.showAccuracy = true;", "+\tsearch(", "+\t\t\"BMember\", ", "+\t\tTYPE,", "+\t\tREFERENCES,", "+\t\tgetJavaSearchScope(), ", "+\t\tresultCollector);", "+\tassertSearchResults(", "+\t\t\"References to type BMember\",", "+\t\t\"src/MemberTypeReference/Azz.java void MemberTypeReference.Azz.poo() [BMember] EXACT_MATCH\\n\" + ", "+\t\t\"src/MemberTypeReference/Azz.java MemberTypeReference.Azz$AzzMember [BMember] EXACT_MATCH\\n\" + ", "+\t\t\"src/MemberTypeReference/Azz.java MemberTypeReference.X.val [BMember] EXACT_MATCH\\n\" + ", "+\t\t\"src/MemberTypeReference/B.java void MemberTypeReference.B.foo() [BMember] EXACT_MATCH\",", "+\t\tresultCollector);", "+", "+\t// references to first level member type", "+\tresultCollector = new JavaSearchResultCollector();", "+\tresultCollector.showAccuracy = true;", "+\tsearch(", "+\t\t\"AzzMember\", ", "+\t\tTYPE,", "+\t\tREFERENCES,", "+\t\tgetJavaSearchScope(), ", "+\t\tresultCollector);", "+\tassertSearchResults(", "+\t\t\"References to type AzzMember\",", "+\t\t\"src/MemberTypeReference/Azz.java MemberTypeReference.X.val [AzzMember] EXACT_MATCH\\n\" + ", "+\t\t\"src/MemberTypeReference/B.java void MemberTypeReference.B.foo() [AzzMember] EXACT_MATCH\",", "+\t\tresultCollector);", "+", "+\t// no reference to a field with same name as member type", "+\tresultCollector = new JavaSearchResultCollector();", "+\tresultCollector.showAccuracy = true;", "+\tsearch(", "+\t\t\"BMember\", ", "+\t\tFIELD,", "+\t\tREFERENCES,", "+\t\tgetJavaSearchScope(), ", "+\t\tresultCollector);", "+\tassertSearchResults(", "+\t\t\"References to field BMember\",", "+\t\t\"\",", "+\t\tresultCollector);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d97d2b1c6e82ff278eaa385dd21ccc9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "2d86a2056325f93b4ade5bd0b8bf932dcb982fd5", "commitAfterChange": "aa7a65081771999e54f29a295541444307143029", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void testPotentialMatchInBinary() throws JavaModelException, CoreException", "signatureAfterChange": " public void testPotentialMatchInBinary() throws JavaModelException, CoreException", "diff": ["-\t// potential match for a field declaration", "-\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tnew SearchEngine().search(", "-\t\tgetWorkspace(),", "-\t\t\"MissingFieldType.*\",", "-\t\tFIELD, ", "-\t\tDECLARATIONS, ", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertEquals(", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.field [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.missing [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.otherField [No source] POTENTIAL_MATCH\", ", "-\t\tresultCollector.toString());", "-", "-\t// potential match for a method declaration", "-\tresultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tnew SearchEngine().search(", "-\t\tgetWorkspace(),", "-\t\t\"MissingArgumentType.foo*\",", "-\t\tMETHOD, ", "-\t\tDECLARATIONS, ", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertEquals(", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo() -> void [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo(java.util.EventListener) -> void [No source] POTENTIAL_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo2() -> void [No source] POTENTIAL_MATCH\", ", "-\t\tresultCollector.toString());", "-", "-\t// potential match for a type declaration", "-\tresultCollector = new JavaSearchResultCollector();", "-\tresultCollector.showAccuracy = true;", "-\tnew SearchEngine().search(", "-\t\tgetWorkspace(),", "-\t\t\"Missing*\",", "-\t\tTYPE, ", "-\t\tDECLARATIONS, ", "-\t\tgetJavaSearchScope(), ", "-\t\tresultCollector);", "-\tassertEquals(", "-\t\t\"AbortCompilation.jar AbortCompilation.EnclosingType$MissingEnclosingType [No source] EXACT_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType [No source] EXACT_MATCH\\n\" +", "-\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType [No source] EXACT_MATCH\", ", "-\t\tresultCollector.toString());", "+\tIJavaProject project = this.getJavaProject(\"JavaSearch\");", "+\tIClasspathEntry[] classpath = project.getRawClasspath();", "+\ttry {", "+\t\t// add AbortCompilation.jar to classpath", "+\t\tint length = classpath.length;", "+\t\tIClasspathEntry[] newClasspath = new IClasspathEntry[length+1];", "+\t\tSystem.arraycopy(classpath, 0, newClasspath, 0, length);", "+\t\tnewClasspath[length] = JavaCore.newLibraryEntry(new Path(\"/JavaSearch/AbortCompilation.jar\"), null, null);", "+\t\tproject.setRawClasspath(newClasspath, null);", "+\t\t", "+\t\t// potential match for a field declaration", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+\t\tresultCollector.showAccuracy = true;", "+\t\tnew SearchEngine().search(", "+\t\t\tgetWorkspace(),", "+\t\t\t\"MissingFieldType.*\",", "+\t\t\tFIELD, ", "+\t\t\tDECLARATIONS, ", "+\t\t\tgetJavaSearchScope(), ", "+\t\t\tresultCollector);", "+\t\tassertEquals(", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.field [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.missing [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType.otherField [No source] POTENTIAL_MATCH\", ", "+\t\t\tresultCollector.toString());", "+\t", "+\t\t// potential match for a method declaration", "+\t\tresultCollector = new JavaSearchResultCollector();", "+\t\tresultCollector.showAccuracy = true;", "+\t\tnew SearchEngine().search(", "+\t\t\tgetWorkspace(),", "+\t\t\t\"MissingArgumentType.foo*\",", "+\t\t\tMETHOD, ", "+\t\t\tDECLARATIONS, ", "+\t\t\tgetJavaSearchScope(), ", "+\t\t\tresultCollector);", "+\t\tassertEquals(", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo() -> void [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo(java.util.EventListener) -> void [No source] POTENTIAL_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType.foo2() -> void [No source] POTENTIAL_MATCH\", ", "+\t\t\tresultCollector.toString());", "+\t", "+\t\t// potential match for a type declaration", "+\t\tresultCollector = new JavaSearchResultCollector();", "+\t\tresultCollector.showAccuracy = true;", "+\t\tnew SearchEngine().search(", "+\t\t\tgetWorkspace(),", "+\t\t\t\"Missing*\",", "+\t\t\tTYPE, ", "+\t\t\tDECLARATIONS, ", "+\t\t\tgetJavaSearchScope(), ", "+\t\t\tresultCollector);", "+\t\tassertEquals(", "+\t\t\t\"AbortCompilation.jar AbortCompilation.EnclosingType$MissingEnclosingType [No source] EXACT_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingArgumentType [No source] EXACT_MATCH\\n\" +", "+\t\t\t\"AbortCompilation.jar AbortCompilation.MissingFieldType [No source] EXACT_MATCH\", ", "+\t\t\tresultCollector.toString());", "+\t} finally {", "+\t\t// reset classpath", "+\t\tproject.setRawClasspath(classpath, null);", "+\t}"]}], "num": 67968}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afa24ea4932e2d78a44f61f52b4c90b0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ada89cdbb906e7e3411f83d1aa836d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3bf739514a83473db763d6e900f7cc23c49722a4", "commitAfterChange": "2549563b41e6c85c6b89404895eaa0cb6c474e96", "methodNumberBeforeChange": 931, "methodNumberAfterChange": 931, "signatureBeforeChange": " public void testBug310427a() throws JavaModelException", "signatureAfterChange": " public void testBug310427a() throws JavaModelException", "diff": ["-// content assist is being invoked", "+// inside a field declaration statement", "-\t\t\"\tprivate int myField1;\\n\" +", "-\t\t\"   private int myField2 = myFiel;\\n\" +", "+\t\t\"       int myVar1 = 1;\\n\" +", "+\t\t\"\t\tint myVar2 = 1;\\n\" +", "+\t\t\"\t\tint myVar3 = myVar;\\n\" +", "+\t\t\"       int myVar4 = 1;\\n\" +", "+\t\t\"\t\tint myVar5 = 1;\\n\" +", "+\t\t\"\t}\\n\" +", "-\tString completeBehind = \"private int myField2 = myFiel\";", "+\tString completeBehind = \"int myVar3 = myVar\";", "-\t\t\t\"myField1[FIELD_REF]{myField1, Ltest.Test;, I, myField1, null, 57}\",", "+\t\t\t\"myVar1[FIELD_REF]{myVar1, Ltest.Test;, I, myVar1, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED + R_EXACT_EXPECTED_TYPE) + \"}\\n\" +", "+\t\t\t\"myVar2[FIELD_REF]{myVar2, Ltest.Test;, I, myVar2, null, \" + (R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED + R_EXACT_EXPECTED_TYPE) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d6f77699c921259231039c613846bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "7336215b569e42bf0d7946c272b0da8ff71d12fb", "commitAfterChange": "e29082e6108e43f171cfe9fae0a56914a1f2ec3e", "methodNumberBeforeChange": 991, "methodNumberAfterChange": 991, "signatureBeforeChange": " public void testBug350652k() throws JavaModelException", "signatureAfterChange": " public void testBug350652k() throws JavaModelException", "diff": ["-// types in same CU", "+// according to comment 5, supertypes of exceptions should also be proposed", "-\t\t\t\"package test;\"+", "+\t\t\t\"package test;\\n\"+", "-\t\t\t\"public class IZZException extends Exception {\\n\" +", "+\t\t\t\"class IZZException extends Exception {\\n\" +", "-\t\t\t\"public class IZZAException extends IZZException {\\n\" +", "+\t\t\t\"class IZZAException extends IZZException {\\n\" +", "-\t\tString completeBehind = \"IZZException |\";", "+\t\tString completeBehind = \"catch (IZZAException |\";", "-\t\t\t\"\",", "+\t\t\t\"Exception[TYPE_REF]{Exception, java.lang, Ljava.lang.Exception;, null, null, \" + (R_DEFAULT + R_EXACT_EXPECTED_TYPE + R_RESOLVED + R_UNQUALIFIED + R_EXCEPTION + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\"IZZException[TYPE_REF]{IZZException, test, Ltest.IZZException;, null, null, \" + (R_DEFAULT + R_EXACT_EXPECTED_TYPE + R_RESOLVED + R_CASE + R_UNQUALIFIED + R_EXCEPTION + R_NON_RESTRICTED) + \"}\","]}], "num": 67342}
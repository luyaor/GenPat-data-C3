{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6715fd04e0e0e60acfcf9ec5d11a743d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26718e05f68a7c915ac1752531187dbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  private static AccessRestriction readRestriction(DataInputStream in) throws IOException", "signatureAfterChange": "  private static AccessRuleSet readRestriction(DataInputStream in) throws IOException", "diff": ["-private static AccessRestriction readRestriction(DataInputStream in) throws IOException {", "-\tif (in.readBoolean())", "-\t\t// skip the AccessRestriction.furtherRestriction until we decide if it will be used", "-\t\treturn new AccessRestriction(in.readUTF(), readNames(in), readNames(in), null);", "-", "-\treturn null; // no restriction specified", "+private static AccessRuleSet readRestriction(DataInputStream in) throws IOException {", "+\tint length = in.readInt();", "+\tif (length == 0) return null; // no restriction specified", "+\tAccessRule[] accessRules = new AccessRule[length];", "+\tfor (int i = 0; i < length; i++) {", "+\t\tchar[] pattern = readName(in);", "+\t\tint severity = in.readInt();", "+\t\taccessRules[i] = new ClasspathAccessRule(pattern, severity);", "+\t}", "+\tString messageTemplate = in.readUTF();", "+\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules);", "+\taccessRuleSet.messageTemplate = messageTemplate;", "+\treturn accessRuleSet;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e26baa2ce266a5e30183a7e12dc548b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "  private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException", "signatureAfterChange": "  private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException", "diff": ["-private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException {", "-\tif (restriction == null) {", "-\t\tout.writeBoolean(false);", "+private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException {", "+\tif (accessRuleSet == null) {", "+\t\tout.writeInt(0);", "-\t\tout.writeBoolean(true);", "-\t\tout.writeUTF(restriction.getMessageTemplate());", "-\t\twriteNames(restriction.getInclusionPatterns(), out); // inclusion patterns come first, see readRestriction()", "-\t\twriteNames(restriction.getExclusionPatterns(), out);", "-\t\t// skip the AccessRestriction.furtherRestriction until we decide if it will be used", "+\t\tAccessRule[] accessRules = accessRuleSet.getAccessRules();", "+\t\tint length = accessRules.length;", "+\t\tout.writeInt(length);", "+\t\tif (length != 0) { ", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAccessRule accessRule = accessRules[i];", "+\t\t\t\twriteName(accessRule.pattern, out);", "+\t\t\t\tout.writeInt(accessRule.severity);", "+\t\t\t}", "+\t\t\tout.writeUTF(accessRuleSet.messageTemplate);", "+\t\t}"]}], "num": 31674}
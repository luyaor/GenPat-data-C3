{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd298349cf0ac1be2677325fe8cadead", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ceecaf6120198e8bebd91c52ca0d581", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "59e26d7d44dd6102df4b7a4747425328bf55da24", "commitAfterChange": "74b7e9bbbee0eebec4c9550b37cb671ca5d91239", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession) throws JavaModelException", "signatureAfterChange": " \t \tprivate ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession) throws JavaModelException", "diff": ["+\t", "+\tprivate ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession) throws JavaModelException {", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "+\t\tResolvedClasspath result = new ResolvedClasspath();", "+", "+\t\tint length = rawClasspath.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+", "+\t\t\tIPath resolvedPath;", "+", "+", "+\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "+\t\t\t\t\t\tresolvedEntry = manager.getResolvedClasspathEntry(rawEntry, usePreviousSession);", "+\t\t\t\t\t\t// Catch the assertion failure and set status instead", "+\t\t\t\t\t\tresult.unresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, e.getMessage());", "+\t\t\t\t\tif (resolvedEntry == null) {", "+\t\t\t\t\t\tresult.unresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, this, rawEntry.getPath());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (result.rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) {", "+\t\t\t\t\t\t\tresult.rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\tresult.rootPathToResolvedEntries.put(resolvedPath, resolvedEntry);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "+\t\t\t\t\tIClasspathContainer container = usePreviousSession ? manager.getPreviousSessionContainer(rawEntry.getPath(), this) : JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "+\t\t\t\t\tif (container == null){", "+\t\t\t\t\t\tresult.unresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, this, rawEntry.getPath());", "+\t\t\t\t\t}", "+", "+\t\t\t\t\t\tif (result.rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) {", "+\t\t\t\t\t\t\tresult.rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\t\tresult.rootPathToResolvedEntries.put(resolvedPath, cEntry);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (cEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered", "+\t\t\t\t\t\t}", "+", "+\t\t\t\tdefault :", "+\t\t\t\t\tif (result.rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) {", "+\t\t\t\t\t\tresult.rawReverseMap.put(resolvedPath , rawEntry);", "+\t\t\t\t\t\tresult.rootPathToResolvedEntries.put(resolvedPath, rawEntry);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (rawEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "+\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered", "+\t\t\t\t\t}", "+", "+\t\tresult.resolvedClasspath = new IClasspathEntry[resolvedEntries.size()];", "+\t\tresolvedEntries.toArray(result.resolvedClasspath);", "-\t\t\tExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();", "-", "-", "-\t\t\tIJavaModelStatus unresolvedEntryStatus = JavaModelStatus.VERIFIED_OK;", "-\t\t\tHashMap rawReverseMap = new HashMap();", "-\t\t\tMap rootPathToResolvedEntries = new HashMap();", "-", "-\t\t\tArrayList resolvedEntries = new ArrayList();", "-\t\t\tint length = rawClasspath.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-", "-\t\t\t\tIClasspathEntry rawEntry = rawClasspath[i];", "-\t\t\t\tIPath resolvedPath;", "-", "-\t\t\t\tswitch (rawEntry.getEntryKind()){", "-", "-\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "-\t\t\t\t\t\tIClasspathEntry resolvedEntry = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tresolvedEntry = manager.getResolvedClasspathEntry(rawEntry, usePreviousSession);", "-\t\t\t\t\t\t} catch (ClasspathEntry.AssertionFailedException e) {", "-\t\t\t\t\t\t\t// Catch the assertion failure and set status instead", "-\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=55992", "-\t\t\t\t\t\t\tunresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, e.getMessage());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (resolvedEntry == null) {", "-\t\t\t\t\t\t\tunresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, this, rawEntry.getPath());", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) {", "-\t\t\t\t\t\t\t\trawReverseMap.put(resolvedPath , rawEntry);", "-\t\t\t\t\t\t\t\trootPathToResolvedEntries.put(resolvedPath, resolvedEntry);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);", "-\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "-\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-", "-\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "-\t\t\t\t\t\tIClasspathContainer container = usePreviousSession ? manager.getPreviousSessionContainer(rawEntry.getPath(), this) : JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "-\t\t\t\t\t\tif (container == null){", "-\t\t\t\t\t\t\tunresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, this, rawEntry.getPath());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "-\t\t\t\t\t\tif (containerEntries == null) {", "-\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE || JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\t\tJavaModelManager.getJavaModelManager().verbose_missbehaving_container_null_entries(this, rawEntry.getPath());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\t// container was bound", "-\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){", "-\t\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry) containerEntries[j];", "-\t\t\t\t\t\t\tif (cEntry == null) {", "-\t\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE || JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "-\t\t\t\t\t\t\t\t\tJavaModelManager.getJavaModelManager().verbose_missbehaving_container(this, rawEntry.getPath(), containerEntries);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "-\t\t\t\t\t\t\tcEntry = cEntry.combineWith((ClasspathEntry) rawEntry);", "-\t\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) {", "-\t\t\t\t\t\t\t\trawReverseMap.put(resolvedPath , rawEntry);", "-\t\t\t\t\t\t\t\trootPathToResolvedEntries.put(resolvedPath, cEntry);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tresolvedEntries.add(cEntry);", "-\t\t\t\t\t\t\tif (cEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "-\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\tif (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) {", "-\t\t\t\t\t\t\trawReverseMap.put(resolvedPath , rawEntry);", "-\t\t\t\t\t\t\trootPathToResolvedEntries.put(resolvedPath, rawEntry);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresolvedEntries.add(rawEntry);", "-\t\t\t\t\t\tif (rawEntry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && ExternalFoldersManager.isExternalFolderPath(resolvedPath)) {", "-\t\t\t\t\t\t\texternalFoldersManager.addFolder(resolvedPath); // no-op if not an external folder or if already registered", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tIClasspathEntry[] resolvedClasspath = new IClasspathEntry[resolvedEntries.size()];", "-\t\t\tresolvedEntries.toArray(resolvedClasspath);", "-\t\t\tperProjectInfo.setResolvedClasspath(resolvedClasspath, rawReverseMap, rootPathToResolvedEntries, usePreviousSession ? PerProjectInfo.NEED_RESOLUTION : unresolvedEntryStatus, timeStamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dcfe368acb010c50104eaf5ce0b5d31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "bc11b8ca976f8360b7224f086a28378398f2dfd3", "commitAfterChange": "48f756ae0727772676a244af8217d19fe8e81145", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException", "signatureAfterChange": " \tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException", "diff": ["+\t\tthis.prefix = unit.getElementName()+\": \";", "-\t\tif (problems) {", "-\t\t\ttry {", "-\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, JavaCore.ERROR);", "-\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, JavaCore.ERROR);", "-\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, JavaCore.ERROR);", "-\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, true); // resolve bindings", "-\t\t\t\tassertEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\ttry {", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, this.compilerOption);", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, this.compilerOption);", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, this.compilerOption);", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, JavaCore.IGNORE);", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, this.resolveBinding); // resolve bindings", "+\t\t\t\tif (problems.equals(JavaCore.ERROR)) {", "+\t\t\t\t\tassertEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\t\t\t} else if (problems.equals(JavaCore.WARNING)) {", "+\t\t\t\t\tIProblem[] problemsList = compilUnit.getProblems();", "+\t\t\t\t\tint length = problemsList.length;", "+\t\t\t\t\tSystem.out.println(this.prefix+length+\" unexpected problems:\"); //$NON-NLS-1$", "+\t\t\t\t\tfor (int i = 0; i < problemsList.length; i++) {", "+\t\t\t\t\t\tSystem.out.println(\"  - \"+problemsList[i]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tproject.setOptions(originalOptions);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, true); // resolve bindings", "-\t\t\t\tunitComments = compilUnit.getCommentTable();", "+\t\t} finally {", "+\t\t\tproject.setOptions(originalOptions);", "-", "-\t\t// Get comments infos from test file", "+\t\t", "+\t\t// Verify source regardings converted comments", "+\t\tverifyComments(sourceStr, source, unitComments);", "+\t}", "-\t\t\t\tverifyBindings(docComment);"]}], "num": 58250}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "487f9d9378e704d49da4ec55d3067dbd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd8b85c650842e14d73d7bfb30074b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "3ed934203361f92bc6723885a6bcbaf0d8220354", "commitAfterChange": "d91e1f720567f8c9f4c6f41313738e9df1d21a2c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["+\t\t// Type annotations may need attaching to the type references", "+\t\t// Example of code this block handles: } catch(@A Exception e) {", "+\t\tif (this.annotations != null) {", "+\t\t\tfor (int i = 0, max = this.annotations.length; i < max; i++) {", "+\t\t\t\tAnnotation annotation = this.annotations[i];", "+\t\t\t\tif ((annotation.resolvedType.tagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "+\t\t\t\t\t// Copy it to the type reference.", "+\t\t\t\t\tif (this.type instanceof UnionTypeReference) {", "+\t\t\t\t\t\t// Only need to consider the first element of the union type reference", "+\t\t\t\t\t\tTypeReference firstTypeReference = ((UnionTypeReference) this.type).typeReferences[0];", "+\t\t\t\t\t\tAnnotation[][] annotationsOnFirstReference = firstTypeReference.annotations;", "+\t\t\t\t\t\tif (annotationsOnFirstReference == null) {", "+\t\t\t\t\t\t\tfirstTypeReference.annotations = annotationsOnFirstReference = new Annotation[firstTypeReference.getAnnotatableLevels()][];", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\tif (annotationsOnFirstReference[0] == null) {", "+\t\t\t\t\t\t\tfirstTypeReference.annotations[0] = new Annotation[] { annotation };", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint len = annotationsOnFirstReference.length;", "+\t\t\t\t\t\t\tAnnotation[] newAnnotations = new Annotation[len + 1];", "+\t\t\t\t\t\t\tSystem.arraycopy(annotationsOnFirstReference[0], 0, newAnnotations, 0, len);", "+\t\t\t\t\t\t\tnewAnnotations[len] = annotation;", "+\t\t\t\t\t\t\tfirstTypeReference.annotations[0] = newAnnotations;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfirstTypeReference.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.type.annotations == null) {", "+\t\t\t\t\t\t\tthis.type.annotations = new Annotation[this.type.getAnnotatableLevels()][];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.type.annotations[0] == null) {", "+\t\t\t\t\t\t\tthis.type.annotations[0] = new Annotation[] { annotation };", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint len = this.type.annotations[0].length;", "+\t\t\t\t\t\t\tAnnotation[] newAnnotations = new Annotation[len + 1];", "+\t\t\t\t\t\t\tSystem.arraycopy(this.type.annotations[0], 0, newAnnotations, 0, len);", "+\t\t\t\t\t\t\tnewAnnotations[len] = annotation;", "+\t\t\t\t\t\t\tthis.type.annotations[0] = newAnnotations;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.type.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f61efb87f40c835ea3b1402815fc0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "ddff8dde894947390c9a90bd347a6ae6239b2112", "commitAfterChange": "e1bb62a6f97249ff77a2f0164d289109644f1d09", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\t// Type annotations may need attaching to the type references", "-\t\t// Example of code this block handles: } catch(@A Exception e) {", "-\t\tif (this.annotations != null) {", "-\t\t\tfor (int i = 0, max = this.annotations.length; i < max; i++) {", "-\t\t\t\tAnnotation annotation = this.annotations[i];", "-\t\t\t\tif ((annotation.resolvedType.tagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t// Copy it to the type reference.", "-\t\t\t\t\tif (this.type instanceof UnionTypeReference) {", "-\t\t\t\t\t\t// Only need to consider the first element of the union type reference", "-\t\t\t\t\t\tTypeReference firstTypeReference = ((UnionTypeReference) this.type).typeReferences[0];", "-\t\t\t\t\t\tAnnotation[][] annotationsOnFirstReference = firstTypeReference.annotations;", "-\t\t\t\t\t\tif (annotationsOnFirstReference == null) {", "-\t\t\t\t\t\t\tfirstTypeReference.annotations = annotationsOnFirstReference = new Annotation[firstTypeReference.getAnnotatableLevels()][];", "-\t\t\t\t\t\t} ", "-\t\t\t\t\t\tif (annotationsOnFirstReference[0] == null) {", "-\t\t\t\t\t\t\tfirstTypeReference.annotations[0] = new Annotation[] { annotation };", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tint len = annotationsOnFirstReference.length;", "-\t\t\t\t\t\t\tAnnotation[] newAnnotations = new Annotation[len + 1];", "-\t\t\t\t\t\t\tSystem.arraycopy(annotationsOnFirstReference[0], 0, newAnnotations, 0, len);", "-\t\t\t\t\t\t\tnewAnnotations[len] = annotation;", "-\t\t\t\t\t\t\tfirstTypeReference.annotations[0] = newAnnotations;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfirstTypeReference.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.type.annotations == null) {", "-\t\t\t\t\t\t\tthis.type.annotations = new Annotation[this.type.getAnnotatableLevels()][];", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.type.annotations[0] == null) {", "-\t\t\t\t\t\t\tthis.type.annotations[0] = new Annotation[] { annotation };", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tint len = this.type.annotations[0].length;", "-\t\t\t\t\t\t\tAnnotation[] newAnnotations = new Annotation[len + 1];", "-\t\t\t\t\t\t\tSystem.arraycopy(this.type.annotations[0], 0, newAnnotations, 0, len);", "-\t\t\t\t\t\t\tnewAnnotations[len] = annotation;", "-\t\t\t\t\t\t\tthis.type.annotations[0] = newAnnotations;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.type.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-"]}], "num": 47634}
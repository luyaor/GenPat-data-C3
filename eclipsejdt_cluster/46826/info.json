{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7434b1b3564e61dbd2ca4c915d5779a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d459c039ed7d2fc17ff4b0aa2d2ddb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "b7e412596013883ea5a197320620d3a941f98770", "commitAfterChange": "cc9c0e2f2fd1f7dbe2567253bf0c6cb676752fcb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\tif (!valueType.isCompatibleWith(requiredType)) {", "-\t\t\tif (!(requiredType.isArrayType() && requiredType.dimensions() == 1 && valueType.isCompatibleWith(requiredType.leafComponentType()))) {", "+\t\tTypeBinding leafType = requiredType.leafComponentType();", "+\t\tif (!((this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "+\t\t\t\t|| (requiredType.isBaseType() && BaseTypeBinding.isWidening(requiredType.id, valueType.id)))", "+\t\t\t\t|| valueType.isCompatibleWith(requiredType))) {", "+", "+\t\t\tif (!(requiredType.isArrayType() ", "+\t\t\t\t\t&& requiredType.dimensions() == 1 ", "+\t\t\t\t\t&& (this.value.isConstantValueOfTypeAssignableToType(valueType, leafType)", "+\t\t\t\t\t\t\t|| (leafType.isBaseType() && BaseTypeBinding.isWidening(leafType.id, valueType.id)))", "+\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType))) {", "+\t\t\t\t", "-\t\t\tTypeBinding leafType = requiredType.leafComponentType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ade9fd79d3ca94451e65f3e8921f1769", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "4536803cd5b2a0c257b0b0ad983aa6ff48927661", "commitAfterChange": "cd2843c8a5aedbfeba5f759ec4b2577ec3055c26", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "signatureAfterChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "diff": ["-\t\t\t\t\t", "-\t\t\t\t\t// Compile-time conversion of base-types : implicit narrowing integer into byte/short/character", "-\t\t\t\t\t// may require to widen the rhs expression at runtime", "-\t\t\t\t\tif (expectedValueType != valueType) // must call before computeConversion() and typeMismatchError()", "-\t\t\t\t\t\tscope.compilationUnitScope().recordTypeConversion(expectedValueType, valueType);", "-\t\t\t\t\tif ((memberValue.isConstantValueOfTypeAssignableToType(valueType, expectedValueType)", "-\t\t\t\t\t\t\t|| (expectedValueType.isBaseType() && BaseTypeBinding.isWidening(expectedValueType.id, valueType.id)))", "-\t\t\t\t\t\t\t|| valueType.isCompatibleWith(expectedValueType)) {", "-\t\t\t\t\t\tmemberValue.computeConversion(scope, expectedValueType, valueType);", "-\t\t\t\t\t\tcontinue nextMember;", "-\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(valueType, expectedValueType, memberValue);", "-\t\t\t\t\tcontinue nextMember;"]}], "num": 46826}
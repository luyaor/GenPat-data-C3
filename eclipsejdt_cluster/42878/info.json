{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e5204ff1fa09fd5c793e8e2834d262b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735aa7adee8efb7e0a22de1105d32aba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocSingleTypeReference.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": "  \tTypeBinding internalResolveType(Scope scope)", "diff": ["-\t\treturn this.resolvedType = scope.convertToRawType(this.resolvedType);", "+\t\tif (resolvedType instanceof ParameterizedTypeBinding) {", "+\t\t\tresolvedType = ((ParameterizedTypeBinding)resolvedType).type;", "+\t\t}", "+\t\treturn resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a51a8463e21eeb38c020cce395e9bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "f000b81f70edf0fb40319f8edb7c5d0c8cfe94b6", "commitAfterChange": "57e4d4c87d35c6ae3978a396ec1884b0ad8efb22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\t// ignore previous (inner) inference result and do a fresh start:", "-\t\t\t\tMethodBinding method = previousMethod.original();", "+\t\t\t\tMethodBinding method = previousMethod;", "+\t\t\t\t// ignore previous (inner) inference result and do a fresh start:", "+\t\t\t\tif (previousMethod instanceof ParameterizedMethodBinding) {", "+\t\t\t\t\t// avoid original(), since we only want to discard one level of instantiation ", "+\t\t\t\t\t// (method type variables - not class type variables)!", "+\t\t\t\t\tmethod = ((ParameterizedMethodBinding)previousMethod).originalMethod;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f592c8bfdc3f38ca70a5c4f36ce1b9e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 43, "signatureBeforeChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-", "-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "-\t\tif ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) != 0) {", "-\t\t\treturn convertToParenthesizedExpression(expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);", "-\t\t}", "-\t\t// switch between all types of expression", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AllocationExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.PrefixExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.PrefixExpression) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.PostfixExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.PostfixExpression) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Assignment) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Assignment) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FalseLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FalseLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TrueLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TrueLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.NullLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.NullLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CharLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FloatLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FloatLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteral) expression);", "-\t\t}", "-\t\tif (expression instanceof StringLiteralConcatenation) {", "-\t\t\treturn convert((StringLiteralConcatenation) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) expression);", "-\t\t}\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.StringLiteral) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.EqualExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EqualExpression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.UnaryExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.UnaryExpression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ConditionalExpression) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ConditionalExpression) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.MessageSend) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.MessageSend) expression);", "-\t\t}\t\t\t\t", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Reference) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Reference) expression);", "-\t\t}", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) expression);", "-\t\t}\t\t\t\t", "-\t\tthrow new IllegalArgumentException(\"Not yet implemented: convert(\" + expression.getClass() + \")\");//$NON-NLS-1$//$NON-NLS-2$", "-\t}", "+", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression) {", "+\t\tif ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) != 0) {", "+\t\t\treturn convertToParenthesizedExpression(expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Annotation) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Annotation) expression);", "+\t\t}\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);", "+\t\t}", "+\t\t// switch between all types of expression", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.PrefixExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.PrefixExpression) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.PostfixExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.PostfixExpression) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Assignment) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Assignment) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FalseLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FalseLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TrueLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TrueLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.NullLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.NullLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CharLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FloatLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FloatLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteral) expression);", "+\t\t}", "+\t\tif (expression instanceof StringLiteralConcatenation) {", "+\t\t\treturn convert((StringLiteralConcatenation) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) expression);", "+\t\t}\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.StringLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.StringLiteral) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.EqualExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EqualExpression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.UnaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.UnaryExpression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ConditionalExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ConditionalExpression) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.MessageSend) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.MessageSend) expression);", "+\t\t}\t\t\t\t", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Reference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Reference) expression);", "+\t\t}", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) expression);", "+\t\t}\t\t\t\t", "+\t\treturn null;", "+\t}"]}], "num": 42878}
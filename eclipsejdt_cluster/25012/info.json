{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee50db028ebdd4e6ddba85acd4fc5c0a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a24bd411edab3543f8d0fe0fd12cd48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic void test050a()", "signatureAfterChange": " \tpublic void test050a()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" + ", "+\t\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tX.foo();\\n\" + ", "+\t\t\t\t\"\t  ^^^\\n\" + ", "+\t\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tfoo();\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" + ", "+\t\t\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" + ", "-\t\t\t\"\t                                 ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a61b61b4a15dfbe0c57d3c2b1ecc08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " \tpublic void test050k()", "signatureAfterChange": " \tpublic void test050k()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" +", "+\t\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" +", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" +", "+\t\t\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" +", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" +", "-\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f826b59649ac9094f58b5f8a2a902c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": " \tpublic void test058b()", "signatureAfterChange": " \tpublic void test058b()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "-\t\t\t\"\t                ^^^\\n\" + ", "-\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "-\t\t\t\"\t                ^^^^\\n\" + ", "-\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354779d869939ae788b4b19da49c4b56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test050i()", "signatureAfterChange": " \tpublic void test050i()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42b55a6c9095ff9b5e2a66dff2b67c2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 726, "methodNumberAfterChange": 726, "signatureBeforeChange": " public void test0706a()", "signatureAfterChange": " public void test0706a()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tAA<Object> res1 = bb.test();\\n\" + ", "+\t\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"AA is a raw type. References to generic type AA<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\t\"\t             ^^^^\\n\" + ", "+\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tAA<Object> res1 = bb.test();\\n\" + ", "+\t\t\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\t\t\"\t^^\\n\" + ", "+\t\t\t\t\"AA is a raw type. References to generic type AA<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\t\t\"\t             ^^^^\\n\" + ", "+\t\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tAA<Object> res1 = bb.test();\\n\" + ", "-\t\t\"\t                     ^^^^\\n\" + ", "-\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tAA res3 = bb.test();\\n\" + ", "-\t\t\"\t^^\\n\" + ", "-\t\t\"AA is a raw type. References to generic type AA<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tAA res3 = bb.test();\\n\" + ", "-\t\t\"\t             ^^^^\\n\" + ", "-\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "-\t\t\"\t                                 ^^^^^^\\n\" + ", "-\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f88a06e0a92a7efe51038653f2adce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81824ec5f5f9c1edd1d54b2cee36542f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " \tpublic void test054d()", "signatureAfterChange": " \tpublic void test054d()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "-\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825350f308488585d7a4cd64da198b17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test011b()", "signatureAfterChange": " \tpublic void test011b()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"Test1.java\",", "-\t\t\t\t\"public class Test1<AA, BB> {\\n\" +", "-\t\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" +", "-\t\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" +", "-\t\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "-\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "-\t\t\t},", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in Test1.java (at line 2)\\n\" + ", "+\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Test1<AA,BB>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in Test1.java (at line 3)\\n\" + ", "+\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Test1<AA,BB>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation pickOne(Comparable) of the generic method pickOne(T) of type Test1<Integer,Integer>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\":", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"Test1.java\",", "+\t\t\t\t\"public class Test1<AA, BB> {\\n\" +", "+\t\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" +", "+\t\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" +", "+\t\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "+\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37390bcc8031b3d4c06abd2f5d1f22b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"   void test() {\\n\" +", "-\t\t\t\t\"   \tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   \tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   }\\n\" +", "-\t\t\t\t\"\t<U1> U1 foo(U1 t) {return null;}\\n\" +", "-\t\t\t\t\"\t<U2> U2 foo2(U2 t) {return null;}\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y<T2> extends X<T2> {\\n\" +", "-\t\t\t\t\"\tvoid foo(T2 t) {}\\n\" +", "-\t\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tnew Y<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"The method foo(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tnew Y<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"The method foo2(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tvoid foo(T2 t) {}\\n\" + ", "+\t\t\"\t     ^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(T2) of type Y<T2> has the same erasure as foo(U1) of type X<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\t<U3> void foo2(T2 t) {}\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo2(T2) of type Y<T2> has the same erasure as foo2(U2) of type X<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\"   void test() {\\n\" +", "+\t\t\t\t\"   \tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "+\t\t\t\t\"   \tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "+\t\t\t\t\"   }\\n\" +", "+\t\t\t\t\"\t<U1> U1 foo(U1 t) {return null;}\\n\" +", "+\t\t\t\t\"\t<U2> U2 foo2(U2 t) {return null;}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y<T2> extends X<T2> {\\n\" +", "+\t\t\t\t\"\tvoid foo(T2 t) {}\\n\" +", "+\t\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef8bb1c19d4cceb36de04d777ec444e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tString getX(List<String> l) {\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tString getX(List<String> l) {\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tString getX(List<String> l) {\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}], "num": 25012}
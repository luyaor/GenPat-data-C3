{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c50e41db14e8407398d07c4e45fdc644", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06a86e91a293cb3bd209dbcae25b5772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9bafd098a4f01cb487df1e23626d9ca01b29c273", "commitAfterChange": "79363a0cf2877d51c36b4085a9d2b719b103bf6c", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic boolean visit(Initializer initializer, MethodScope scope)", "signatureAfterChange": " \tpublic boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope) {", "+\t\tint length = intersectionCastTypeReference.typeReferences == null ? 0 : intersectionCastTypeReference.typeReferences.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tintersectionCastTypeReference.typeReferences[i].traverse(this, scope);", "+\t\t\tif (i != length - 1) {", "+\t\t\t\t// Borrowing the formatting option from binary operators", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_binary_operator);", "+\t\t\t\tif (this.preferences.insert_space_after_binary_operator) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4628c19e9618cd24e08e63ec80a8486c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " \tpublic boolean visit(Wildcard wildcard, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tUnionTypeReference unionTypeReference, \t\tBlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(", "+\t\tUnionTypeReference unionTypeReference,", "+\t\tBlockScope scope) {", "+", "+\t\tTypeReference[] typeReferences = unionTypeReference.typeReferences;", "+\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameOR, true);", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\ttypeReferences[i].traverse(this, scope);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 27672}
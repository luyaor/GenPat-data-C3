{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c612e29dab612590ff011158f4caa3a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ed02a07ea314741a4cae52a3cd5b09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": "  public ExceptionHandlingFlowContext( \t\t\tFlowContext parent, \t\t\tASTNode associatedNode, \t\t\tReferenceBinding[] handledExceptions, \t\t\tFlowContext initializationParent, \t\t\tBlockScope scope, \t\t\tUnconditionalFlowInfo flowInfo)", "diff": ["+", "+public ExceptionHandlingFlowContext(", "+\t\t\tFlowContext parent,", "+\t\t\tASTNode associatedNode,", "+\t\t\tReferenceBinding[] handledExceptions,", "+\t\t\tFlowContext initializationParent,", "+\t\t\tBlockScope scope,", "+\t\t\tUnconditionalFlowInfo flowInfo) {", "+\tthis(parent, associatedNode, handledExceptions, null, NO_ARGUMENTS, initializationParent, scope, flowInfo);", "+}", "-\t\t\tthis.initsOnExceptions[i] = flowInfo.unconditionalCopy();", "-\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "-\tthis.\tinitializationParent = initializationParent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9343dbb6ddca60a46d7edae5090ae686", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tint [] exceptionToCatchBlockMap, \t\tArgument [] catchArguments, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "diff": ["+}", "+\t\tint [] exceptionToCatchBlockMap,", "+\t\tArgument [] catchArguments,", "+\tthis.catchArguments = catchArguments;", "+\tthis.exceptionToCatchBlockMap = exceptionToCatchBlockMap;", "+\t\tint catchBlock = this.exceptionToCatchBlockMap != null? this.exceptionToCatchBlockMap[i] : i;", "-\t\t\tthis.initsOnExceptions[i] = flowInfo.unconditionalCopy();", "+\t\t\tthis.initsOnExceptions[catchBlock] = flowInfo.unconditionalCopy();", "-\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "+\t\t\tthis.initsOnExceptions[catchBlock] = FlowInfo.DEAD_END;", "-\tthis.\tinitializationParent = initializationParent;", "+\tthis.initializationParent = initializationParent;"]}], "num": 66044}
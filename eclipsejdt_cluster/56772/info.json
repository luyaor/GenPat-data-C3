{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5c8bb8a7aac9f5bc5c9b07761c9801f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c4f75dec83d8e00f1fb2cf0c19ca03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\t", "-\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\tIPath rootPath = entry.getPath();", "-\t\t\t\tif (rootPath.equals(resourcePath)) {", "-\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "-\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "-\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "-\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "-\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "-\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "-\t\t\t\t\t\tif (root == null) return null;", "-\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "+\t\t\t", "+\t\t\tint length\t= entries.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\tIPath rootPath = entry.getPath();", "+\t\t\t\t\tif (rootPath.equals(resourcePath)) {", "+\t\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "+\t\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "+\t\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "+\t\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "+\t\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "+\t\t\t\t\t\t\tif (root == null) return null;", "+\t\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "-\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "-\t\t\t\t\t\t\t// is the file name in the package", "-\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "+\t\t\t\t\t\t\t\t// is the file name in the package", "+\t\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "+\t\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath, sourceLevel, complianceLevel), sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn root.getPackageFragment(pkgName);", "-\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "-\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath)).getSeverity() == IStatus.ERROR) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn root.getPackageFragment(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d102e38d2efb3b5e28e5e86637c8fe1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "ade133e0ba99ce8f261b5dbbb001561f152f4db8", "commitAfterChange": "a6c0426e8a97e5c69fdac3bea072af18fea82d0e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static IPath resolveDotDot(IPath path)", "signatureAfterChange": " \tpublic static IPath resolveDotDot(IPath reference, IPath path)", "diff": ["-\tpublic static IPath resolveDotDot(IPath path) {", "+\tpublic static IPath resolveDotDot(IPath reference, IPath path) {", "-\t\tIPath workspaceLocation = null;", "-\t\tfor (int i = 0, length = path.segmentCount(); i < length; i++) {", "-\t\t\tString segment = path.segment(i);", "-\t\t\tif (DOT_DOT.equals(segment)) {", "-\t\t\t\tif (newPath == null) {", "-\t\t\t\t\tif (i == 0) {", "-\t\t\t\t\t\tworkspaceLocation = workspaceRoot.getLocation();", "-\t\t\t\t\t\tnewPath = workspaceLocation;", "+\t\tIPath workspaceLocation = workspaceRoot.getLocation();", "+\t\tif (reference == null || workspaceLocation.isPrefixOf(reference)) {", "+\t\t\tfor (int i = 0, length = path.segmentCount(); i < length; i++) {", "+\t\t\t\tString segment = path.segment(i);", "+\t\t\t\tif (DOT_DOT.equals(segment)) {", "+\t\t\t\t\tif (newPath == null) {", "+\t\t\t\t\t\tif (i == 0) {", "+\t\t\t\t\t\t\tnewPath = workspaceLocation;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnewPath = path.removeFirstSegments(i);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tnewPath = path.removeFirstSegments(i);", "+\t\t\t\t\t\tif (newPath.segmentCount() > 0) {", "+\t\t\t\t\t\t\tnewPath = newPath.removeLastSegments(1);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnewPath = workspaceLocation;", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "+\t\t\t\t} else if (newPath != null) {", "+\t\t\t\t\tif (newPath.equals(workspaceLocation) && workspaceRoot.getProject(segment).isAccessible()) {", "+\t\t\t\t\t\tnewPath = new Path(segment).makeAbsolute();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnewPath = newPath.append(segment);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\tfor (int i = 0, length = path.segmentCount(); i < length; i++) {", "+\t\t\t\tString segment = path.segment(i);", "+\t\t\t\tif (DOT_DOT.equals(segment)) {", "+\t\t\t\t\tif (newPath == null){", "+\t\t\t\t\t\tnewPath = reference;", "+\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tworkspaceLocation = workspaceRoot.getLocation();", "-\t\t\t\t\t\tnewPath = workspaceLocation;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (newPath != null) {", "-\t\t\t\tif (newPath.equals(workspaceLocation) && workspaceRoot.getProject(segment).isAccessible()) {", "-\t\t\t\t\tnewPath = new Path(segment).makeAbsolute();", "-\t\t\t\t} else {", "+\t \t\t\t\t}", "+\t\t\t\t} else if (newPath != null) {", "-\t\t\t\t}", "+\t \t\t\t}"]}], "num": 56772}
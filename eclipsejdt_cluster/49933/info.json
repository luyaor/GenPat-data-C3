{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcb298841a1ebfd73302cb5c3144d748", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85cc0de4a3b862a9f45497e53ff3bd44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "f15f3a4daa4f7cbf363475bdb20d4707912f834f", "commitAfterChange": "1e2211eded7d5ae87dfcf507bb00676a5a81d8e9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "signatureAfterChange": " \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "diff": ["-", "-\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-\t\tfinal String sources = targetWorkspacePath + File.separator + \"compiler\"; //$NON-NLS-1$", "-\t\tfinal String bins = targetWorkspacePath + File.separator + \"bin\"; //$NON-NLS-1$", "-\t\tfinal String logs = targetWorkspacePath + File.separator + \"log.txt\"; //$NON-NLS-1$", "-", "-\t\t// Note this test is not a finger print test, so we don't want to use", "-\t\t// tagAsGlobalSummary(...)", "-\t\ttagAsSummary(\"Build jdt-core/compiler using batch compiler\", Dimension.CPU_TIME);", "-", "-\t\t// Compile 10 times", "-\t\tMain.compile(sources + \" -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d \" + bins + \" -log \" + logs); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tfor (int i = 0; i < REPEAT; i++) {", "-\t\t\tstartMeasuring();", "-\t\t\tMain.compile(sources + \" -1.4 -g -preserveAllLocals -enableJavadoc -nowarn -d \" + bins + \" -log \" + logs); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tstopMeasuring();", "-\t\t\tcleanupDirectory(new File(bins));", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t\tFile logsFile = new File(logs);", "+\t */", "+\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "+\t\t// Do no longer print results in performance fingerprint", "+\t\ttagAsSummary(\"Compile>Build>Batch>Src:compiler>Options:DocCommentSupport,None\", Dimension.CPU_TIME, true); // put in fingerprint", "+", "+\t\tFile logsFile = buildUsingBatchCompiler(\"-enableJavadoc -nowarn\");", "+", "+\t\t// Should not get any error", "-\t\tassertEquals(\"Has errors\", 0, logsFile.length());", "+\t\tif (logsFile.length() != 0) {", "+\t\t\tchar[] errors = Util.getFileCharContent(logsFile, null);", "+\t\t\tint length = Math.min(errors.length, 1000);", "+\t\t\tassertTrue(\"Should have NO warning!\\nAlthoug, got following ones:\\n\"+(new String(errors, 0, length)), false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95624db8e0bf83f2066def83e866bc72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void parseFiles(final long limit) throws InvalidInputException, IOException", "signatureAfterChange": " \tvoid parseParserFile(int kind) throws InvalidInputException, IOException", "diff": ["+\tvoid parseParserFile(int kind) throws InvalidInputException, IOException {", "+\t\t// Get workspace path", "+\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "+\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "+\t\t\t.getLocation()", "+\t\t\t.toFile()", "+\t\t\t.getCanonicalPath();", "+\t\t", "+\t\t// Run test", "+\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", kind, ITERATIONS_COUNT*6);", "+", "+\t\t// dump measure", "+\t\tcommitMeasurements();", "+\t\tassertPerformance();", "-\t */", "-\tprivate void parseFiles(final long limit) throws InvalidInputException, IOException {", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tString wkspPath = workspace.getRoot()", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-", "-\t\t// Get files", "-\t\tFile wkspFile = new File(wkspPath);", "-\t\tFile[] wkspFiles = getAllFiles(wkspFile, new FileFilter() {", "-\t\t\tpublic boolean accept(File pathname) {", "-\t\t\t\tString name = pathname.getName();", "-\t\t\t\tString path = pathname.getAbsolutePath().toLowerCase();", "-\t\t\t\tlong length = pathname.length();", "-\t\t\t\treturn !name.startsWith(\".\") && !name.equalsIgnoreCase(\"cvs\") && ((pathname.isDirectory() || length >= limit && path.endsWith(\".java\")));", "-\t\t\t}", "-\t\t});", "-\t\tif (DEBUG) {", "-\t\t\tSystem.out.println(\"Number of files over \"+limit+\" chars in \"+wkspPath+\": \" + wkspFiles.length);", "-\t\t}", "-", "-\t\t// loop for time measuring", "-\t\tlong parsedCharacters = 0;", "-\t\tlong parsedLines = 0;", "-\t\tfor (int i = 0, max = wkspFiles.length; i < max; i++) {", "-\t\t\tlong[] stats = parseFile(wkspFiles[i].getCanonicalPath(), ITERATIONS_COUNT*10);", "-\t\t\tparsedCharacters += stats[0];", "-\t\t\tparsedLines += stats[1];", "-\t\t}", "-", "-\t\t// Debug", "-\t\tif (DEBUG) {", "-            System.out.print(\"Finally, \"+ parsedLines + \" lines/\"+ parsedCharacters + \" characters were parsed\");", "-\t\t}"]}], "num": 49933}
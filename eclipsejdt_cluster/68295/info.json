{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb75cd489a0d0b6769ab5784d95a5dc1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dfa6469b8a0327e28c4fb3b96b8191a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "e70a97840585a3ede400b971666912929897851b", "commitAfterChange": "f5104ea8b01f4418b9868445123db4c689077583", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void build(boolean computeSubtypes) throws JavaModelException, CoreException", "signatureAfterChange": " public void build(boolean computeSubtypes) throws JavaModelException, CoreException", "diff": ["-\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes();", "+\t\t\tIProgressMonitor possibleSubtypesMonitor = ", "+\t\t\t\tthis.hierarchy.progressMonitor == null ? ", "+\t\t\t\t\tnull : ", "+\t\t\t\t\tnew SubProgressMonitor(this.hierarchy.progressMonitor, 95);", "+\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes(possibleSubtypesMonitor);", "+\t\t\tIProgressMonitor buildMonitor = ", "+\t\t\t\tthis.hierarchy.progressMonitor == null ? ", "+\t\t\t\t\tnull : ", "+\t\t\t\t\tnew SubProgressMonitor(this.hierarchy.progressMonitor, 5);", "-\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes);", "+\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes, buildMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0771c7dab6bfb6651bb506e37110d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "2808c167f87e5191890bb92d5e4f0af641d2f6e4", "commitAfterChange": "0199702ff6cca8392f62e334c86875a1b31484e2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void build(boolean computeSubtypes)", "signatureAfterChange": " public void build(boolean computeSubtypes)", "diff": ["-\t\t\tIProgressMonitor possibleSubtypesMonitor =", "-\t\t\t\tthis.hierarchy.progressMonitor == null ?", "-\t\t\t\t\tnull :", "-\t\t\t\t\tnew SubProgressMonitor(this.hierarchy.progressMonitor, amountOfWorkForSubtypes);", "+\t\t\tSubMonitor possibleSubtypesMonitor = this.hierarchy.progressMonitor.split(amountOfWorkForSubtypes);", "-\t\t\t\tIProgressMonitor buildMonitor =", "-\t\t\t\t\tthis.hierarchy.progressMonitor == null ?", "-\t\t\t\t\t\tnull :", "-\t\t\t\t\t\tnew SubProgressMonitor(this.hierarchy.progressMonitor, 100 - amountOfWorkForSubtypes);", "+\t\t\t\tSubMonitor buildMonitor = this.hierarchy.progressMonitor.split(100 - amountOfWorkForSubtypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36624ada19d28cb7e7e5ba1c07f8e82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "b17f0033873962e79cd540a0937b76249dec8a6c", "commitAfterChange": "360e136a8e044225071869fa38d7072ea1d3cdac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void build(boolean computeSubtypes)", "signatureAfterChange": " public void build(boolean computeSubtypes)", "diff": ["-\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes(possibleSubtypesMonitor);", "+\t\t\tHashSet localTypes = new HashSet(10); // contains the paths that have potential subtypes that are local/anonymous types", "+\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes(localTypes, possibleSubtypesMonitor);", "-\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes, buildMonitor);", "+\t\t\t\tbuildFromPotentialSubtypes(allPossibleSubtypes, localTypes, buildMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdcc64406e79186a240ab4407b535246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "82c1b88ed9a85ef92f48dfaf4bf7faa575b6d782", "commitAfterChange": "88a4dd39dc6c1f5f682680ea6c30a4a9958ce465", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void build(boolean computeSubtypes)", "signatureAfterChange": " public void build(boolean computeSubtypes)", "diff": ["-\t\t\tboolean focusIsObject = getType().getElementName().equals(new String(IIndexConstants.OBJECT));", "+\t\t\tIType focusType = getType();", "+\t\t\tboolean focusIsObject = focusType.getElementName().equals(new String(IIndexConstants.OBJECT));", "-\t\t\tString[] allPossibleSubtypes = this.determinePossibleSubTypes(localTypes, possibleSubtypesMonitor);", "+\t\t\tString[] allPossibleSubtypes;", "+\t\t\tif (((Member)focusType).getOuterMostLocalContext() == null) {", "+\t\t\t\t// top level or member type", "+\t\t\t\tallPossibleSubtypes = this.determinePossibleSubTypes(localTypes, possibleSubtypesMonitor);", "+\t\t\t} else {", "+\t\t\t\t// local or anonymous type", "+\t\t\t\tallPossibleSubtypes = new String[0];", "+\t\t\t}"]}], "num": 68295}
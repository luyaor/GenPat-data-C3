{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "703c12b3b714def040ed34aa1c35efbf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cb4391c4433e24360a251c41f3938ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5dcefdb7b6dc4ca118d352248744f6f6f0cfd53e", "commitAfterChange": "6568a2476b22c2b9915b48b3eb9ea4ea62f741d4", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["+\t\tboolean insideTypeAnnotation = false;", "+\t\t\t\t\t\tinsideTypeAnnotation = methodScope.insideTypeAnnotation;", "-\t\t\t\t\t\t// 6.5.5.1 - member types have precedence over top-level type in same unit", "-\t\t\t\t\t\tReferenceBinding memberType = findMemberType(name, sourceType);", "-\t\t\t\t\t\tif (memberType != null) { // skip it if we did not find anything", "-\t\t\t\t\t\t\tif (memberType.problemId() == Ambiguous) {", "-\t\t\t\t\t\t\t\tif (foundType == null || foundType.problemId() == NotVisible)", "-\t\t\t\t\t\t\t\t\t// supercedes any potential InheritedNameHidesEnclosingName problem", "-\t\t\t\t\t\t\t\t\treturn memberType;", "-\t\t\t\t\t\t\t\t// make the user qualify the type, likely wants the first inherited type", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (memberType.isValidBinding()) {", "-\t\t\t\t\t\t\t\tif (sourceType == memberType.enclosingType()", "-\t\t\t\t\t\t\t\t\t\t|| environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t\t\t\t\t\t\t\t\t// found a valid type in the 'immediate' scope (ie. not inherited)", "-\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited shadows enclosing)", "-\t\t\t\t\t\t\t\t\tif (foundType == null)", "-\t\t\t\t\t\t\t\t\t\treturn memberType; ", "-\t\t\t\t\t\t\t\t\t// if a valid type was found, complain when another is found in an 'immediate' enclosing type (ie. not inherited)", "-\t\t\t\t\t\t\t\t\tif (foundType.isValidBinding() && foundType != memberType)", "-\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\tif (!insideTypeAnnotation) {", "+\t\t\t\t\t\t\t// 6.5.5.1 - member types have precedence over top-level type in same unit", "+\t\t\t\t\t\t\tReferenceBinding memberType = findMemberType(name, sourceType);", "+\t\t\t\t\t\t\tif (memberType != null) { // skip it if we did not find anything", "+\t\t\t\t\t\t\t\tif (memberType.problemId() == Ambiguous) {", "+\t\t\t\t\t\t\t\t\tif (foundType == null || foundType.problemId() == NotVisible)", "+\t\t\t\t\t\t\t\t\t\t// supercedes any potential InheritedNameHidesEnclosingName problem", "+\t\t\t\t\t\t\t\t\t\treturn memberType;", "+\t\t\t\t\t\t\t\t\t// make the user qualify the type, likely wants the first inherited type", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\tif (memberType.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tif (sourceType == memberType.enclosingType()", "+\t\t\t\t\t\t\t\t\t\t\t|| environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\t\t\t\t// found a valid type in the 'immediate' scope (ie. not inherited)", "+\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited shadows enclosing)", "+\t\t\t\t\t\t\t\t\t\tif (foundType == null)", "+\t\t\t\t\t\t\t\t\t\t\treturn memberType; ", "+\t\t\t\t\t\t\t\t\t\t// if a valid type was found, complain when another is found in an 'immediate' enclosing type (ie. not inherited)", "+\t\t\t\t\t\t\t\t\t\tif (foundType.isValidBinding() && foundType != memberType)", "+\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (foundType == null || (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))", "+\t\t\t\t\t\t\t\t\t// only remember the memberType if its the first one found or the previous one was not visible & memberType is...", "+\t\t\t\t\t\t\t\t\tfoundType = memberType;", "-\t\t\t\t\t\t\tif (foundType == null || (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))", "-\t\t\t\t\t\t\t\t// only remember the memberType if its the first one found or the previous one was not visible & memberType is...", "-\t\t\t\t\t\t\t\tfoundType = memberType;", "+\t\t\t\t\t\tinsideTypeAnnotation = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855fd5c81b40e5744ea73bb6c634c6b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\t\tif (memberType.problemId() == Ambiguous) {", "-\t\t\t\t\t\t\t\t\tif (foundType == null || foundType.problemId() == NotVisible)", "+\t\t\t\t\t\t\t\tif (memberType.problemId() == ProblemReasons.Ambiguous) {", "+\t\t\t\t\t\t\t\t\tif (foundType == null || foundType.problemId() == ProblemReasons.NotVisible)", "-\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, memberType, NonStaticReferenceInStaticContext);", "+\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, memberType, ProblemReasons.NonStaticReferenceInStaticContext);", "-\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\t\tif (foundType == null || (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))", "+\t\t\t\t\t\t\t\tif (foundType == null || (foundType.problemId() == ProblemReasons.NotVisible && memberType.problemId() != ProblemReasons.NotVisible))", "-\t\t\t\t\t\t\tif (foundType != null && foundType != sourceType && foundType.problemId() != NotVisible)", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\tif (foundType != null && foundType != sourceType && foundType.problemId() != ProblemReasons.NotVisible)", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, foundType, ProblemReasons.InheritedNameHidesEnclosingName);", "-\t\t\tif (foundType != null && foundType.problemId() != NotVisible)", "+\t\t\tif (foundType != null && foundType.problemId() != ProblemReasons.NotVisible)", "-\t\t\t\t\tif (foundType != null && foundType.problemId() != NotVisible && binding.problemId() != Ambiguous)", "+\t\t\t\t\tif (foundType != null && foundType.problemId() != ProblemReasons.NotVisible && binding.problemId() != ProblemReasons.Ambiguous)", "-\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, null, Ambiguous);", "+\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, null, ProblemReasons.Ambiguous);", "-\t\t\tfoundType = new ProblemReferenceBinding(name, null, NotFound);", "+\t\t\tfoundType = new ProblemReferenceBinding(name, null, ProblemReasons.NotFound);"]}], "num": 62401}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64e23722487240bcc66ef5fd2fea9621", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "638a3a44fc4c1ddd5ee0267da417f63c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "05396c2aadbdf694b3e24041198b7173f55ce8f9", "commitAfterChange": "dbfcb8d7fd5ffcddbe22e6b1ba82be9083ee4d44", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 44, "signatureBeforeChange": " private MethodBinding getMethodBinding0(MethodPattern methodPattern)", "signatureAfterChange": "  private MethodBinding getMethodBinding0(MethodPattern methodPattern)", "diff": ["+", "+\tMethodBinding result = null;", "+\t\t\tList <MethodBinding> possibleMethods = new ArrayList<MethodBinding>(methodsLength);", "-\t\t\t\t\tthis.bindings.put(methodPattern, methods[i]);", "-\t\t\t\t\treturn methods[i];", "+\t\t\t\t\tpossibleMethods.add(methods[i]);", "+\t\t\tresult =  getMostApplicableMethod(possibleMethods);", "-\tthis.bindings.put(methodPattern, new ProblemMethodBinding(methodPattern.selector, null, ProblemReasons.NotFound));", "-\treturn null;", "+\tthis.bindings.put(methodPattern, result != null ? result : new ProblemMethodBinding(methodPattern.selector, null, ProblemReasons.NotFound));", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b62c0bacb31e12e5e24ae103df66a04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t    if (!typeVariable.boundCheck(methodSubstitute, substitute))", "-\t\t\t        // incompatible due to bound check", "-\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, new TypeBinding[]{substitute, typeVariables[i] }, ParameterBoundMismatch);", "+\t\t\t\tswitch (typeVariable.boundCheck(methodSubstitute, substitute)) {", "+\t\t\t\t\tcase TypeConstants.MISMATCH :", "+\t\t\t\t        // incompatible due to bound check", "+\t\t\t\t        return new ProblemMethodBinding(methodSubstitute, originalMethod.selector, new TypeBinding[]{substitute, typeVariables[i] }, ParameterBoundMismatch);", "+\t\t\t\t\tcase TypeConstants.UNCHECKED :", "+\t\t\t\t\t\t// tolerate unchecked bounds", "+\t\t\t\t\t\tmethodSubstitute.isUnchecked = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}"]}], "num": 52508}
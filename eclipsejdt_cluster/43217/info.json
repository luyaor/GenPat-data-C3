{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c610a37d5fad19aa2c400e6c07d17f29", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b559db11ca1be8651e1dbac81637befc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "1e0939ec1342f33cc576e5556b3bbbd30d18fa9c", "commitAfterChange": "f75e3dcdecd624753994c8fc505a6e72b5b90cda", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "diff": ["-\t\t\tthis.implicitConversion |= (TypeIds.T_int << 4) + compileTimeTypeID;", "+\t\t\tif (compileTimeTypeID == TypeIds.T_JavaLangObject) {", "+\t\t\t\tthis.implicitConversion |= (runtimeTypeID << 4) + compileTimeTypeID;", "+\t\t\t} else {", "+\t\t\t\tthis.implicitConversion |= (TypeIds.T_int << 4) + compileTimeTypeID;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d2aa80c7a2053485a8d24bcd6d9443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t\t\tif ((left.implicitConversion & 0xF) /*compile-time*/ == T_boolean) {", "+\t\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) /*compile-time*/ == T_boolean) {", "-\t\t\tif ((left.implicitConversion & 0xF) /*compile-time*/ == T_boolean) {", "+\t\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) /*compile-time*/ == T_boolean) {"]}], "num": 43217}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "842ee88e962d436122e61e0ff254a084", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2076a5019fee861086f8914274076709", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "commitAfterChange": "ce0032759c3236d2ea392944fcdfb033987155c8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "diff": ["-\tprotected boolean traverseDelta(IResourceDelta delta, int parentType, IJavaProject parentProject) {\r", "+\tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject) {\r", "-\t\t// check if current resource is now on classpath and determine the element type\r", "-\t\tIJavaProject currentProject = parentProject;\r", "-\t\tIPath fullPath = res.getFullPath();\r", "-\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(fullPath);\r", "-\t\tint elementType = -1;\r", "-\t\tif (projectOfRoot != null) {\r", "-\t\t\tcurrentProject = projectOfRoot;\r", "-\t\t\tif (parentType == IJavaElement.JAVA_MODEL && delta.getKind() != IResourceDelta.CHANGED) {\r", "-\t\t\t\t// project is added or removed\r", "-\t\t\t\telementType = IJavaElement.JAVA_PROJECT;\r", "-\t\t\t} else {\r", "-\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tswitch (parentType) {\r", "-\t\t\t\tcase IJavaElement.JAVA_MODEL:\r", "-\t\t\t\tcase IJavaElement.JAVA_PROJECT:\r", "-\t\t\t\t\tif (currentProject != null) {\r", "-\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT_ROOT;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\telementType = IJavaElement.JAVA_PROJECT; // not yet in a package fragment root\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "-\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\tif (res instanceof IFolder) {\r", "-\t\t\t\t\t\telementType = IJavaElement.PACKAGE_FRAGMENT;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tString extension = res.getFileExtension();\r", "-\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\telementType = IJavaElement.COMPILATION_UNIT;\r", "-\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\telementType = IJavaElement.CLASS_FILE;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "+\t\t// process current delta\r", "-\t\tboolean result;\r", "+\r", "+\t\t// process children if needed\r", "-\t\t\tOpenable element = null;\r", "+\t\t\tOpenable parent = null;\r", "-\t\t\t\tif (!traverseDelta(child, elementType, currentProject)) {\r", "+\t\t\t\tIResource childRes = child.getResource();\r", "+\t\t\t\tIPath childPath = childRes.getFullPath();\r", "+\r", "+\t\t\t\t// find out whether the child is a package fragment root of the current project\r", "+\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(childPath);\r", "+\t\t\t\tboolean isPkgFragmentRoot = \r", "+\t\t\t\t\tprojectOfRoot != null \r", "+\t\t\t\t\t&& (projectOfRoot.getProject().getFullPath().isPrefixOf(childPath));\r", "+\t\t\t\tint childType = this.elementType(child, elementType, isPkgFragmentRoot);\r", "+\t\t\t\t\r", "+\t\t\t\t// traverse delta for child in the same project\r", "+\t\t\t\tif (!this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject)) {\r", "-\t\t\t\t\t\t\tif (element == null) {\r", "+\t\t\t\t\t\t\tif (parent == null) {\r", "-\t\t\t\t\t\t\t\tif (fullPath.equals(currentProject.getProject().getFullPath())) {\r", "-\t\t\t\t\t\t\t\t\telement = (Openable)currentProject;\r", "+\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT) {\r", "+\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;\r", "-\t\t\t\t\t\t\t\t\telement = this.createElement(res, elementType, currentProject);\r", "+\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);\r", "-\t\t\t\t\t\t\t\tif (element == null) continue;\r", "+\t\t\t\t\t\t\t\tif (parent == null) continue;\r", "-\t\t\t\t\t\t\t// add child as non java resource if current element on classpath\r", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(element, child);\r", "+\t\t\t\t\t\t\t// add child as non java resource\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\t// if child is a package fragment root of another project, traverse delta too\r", "+\t\t\t\tif (projectOfRoot != null && !isPkgFragmentRoot) {\r", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot);\r", "+\t\t\t\t\t// NB: No need to check the return value as the child can only be on the classpath\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\t// if the child is a package fragment root of one or several other projects\r", "+\t\t\t\tHashSet set;\r", "+\t\t\t\tif ((set = (HashSet)this.otherRoots.get(childPath)) != null) {\r", "+\t\t\t\t\tIPackageFragmentRoot currentRoot = \r", "+\t\t\t\t\t\t(currentProject == null ? \r", "+\t\t\t\t\t\t\tprojectOfRoot : \r", "+\t\t\t\t\t\t\tcurrentProject).getPackageFragmentRoot(childRes);\r", "+\t\t\t\t\tIterator iterator = set.iterator();\r", "+\t\t\t\t\twhile (iterator.hasNext()) {\r", "+\t\t\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();\r", "+\t\t\t\t\t\tthis.cloneCurrentDelta(project, currentRoot);\r", "+\t\t\t\t\t}\r", "-\t\t\tresult = currentProject != null || oneChildOnClasspath;\r", "+\t\t\treturn currentProject != null || oneChildOnClasspath;\r", "-\t\t\t// if we changed the current project or if the element type is -1, \r", "+\t\t\t// if not on classpath or if the element type is -1, \r", "-\t\t\tresult = \r", "-\t\t\t\tcurrentProject != null \r", "-\t\t\t\t&& currentProject.equals(parentProject)\r", "-\t\t\t\t&& elementType != -1;\r", "+\t\t\treturn currentProject != null && elementType != -1;\r", "-\t\t\r", "-\t\t// other roots\r", "-\t\tHashSet set;\r", "-\t\tif ((set = (HashSet)this.otherRoots.get(fullPath)) != null) {\r", "-\t\t\tIPackageFragmentRoot currentRoot = currentProject.getPackageFragmentRoot(res);\r", "-\t\t\tIterator iterator = set.iterator();\r", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();", "-\t\t\t\tthis.cloneCurrentDelta(project, currentRoot);", "-\t\t\t}\r", "+\t}\r", "-\t\t\r", "-\t\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e9a9bf001740723de106d0d75f8f89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "3c339caa1e7b5ca6c56cf03ac002e58b4380b89e", "commitAfterChange": "51917a0c83743a82a23c6f16badda9326a65b40d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tIJavaProject currentProject, \t\tIPath currentOutput, \t\tint outputTraverseMode)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputInfo outputInfo)", "diff": ["-\t\tIJavaProject currentProject,", "-\t\tIPath currentOutput,", "-\t\tint outputTraverseMode) {", "+\t\tRootInfo rootInfo,", "+\t\tOutputInfo outputInfo) {", "+\t", "+\t\t// set stack of elements", "+\t\tif (this.currentElement == null && rootInfo != null) {", "+\t\t\tthis.currentElement = (Openable)rootInfo.project;", "+\t\t}", "-\t\tif (currentProject != null || res instanceof IProject) {", "-\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "-\t\t\t\t// force the currentProject to be used", "-\t\t\t\tthis.currentElement = (Openable)currentProject;", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// non java resource or invalid project", "-\t\t\t\treturn false;", "-\t\t\t}", "+\t\tif (rootInfo != null || res instanceof IProject) {", "+\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, rootInfo);", "-\t\t// get the project's output location", "-\t\tif (currentOutput == null) {", "-\t\t\ttry {", "-\t\t\t\tIJavaProject proj =", "-\t\t\t\t\tcurrentProject == null ?", "-\t\t\t\t\t\t(IJavaProject)this.createElement(res.getProject(), IJavaElement.JAVA_PROJECT, null) :", "-\t\t\t\t\t\tcurrentProject;", "-\t\t\t\tif (proj != null) {", "-\t\t\t\t\tcurrentOutput = proj.getOutputLocation();", "-\t\t\t\t\tif (proj.getProject().getFullPath().equals(currentOutput)){ // case of proj==bin==src", "-\t\t\t\t\t\toutputTraverseMode = SOURCE;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// check case of src==bin", "-\t\t\t\t\t\tIClasspathEntry[] classpath = proj.getResolvedClasspath(true);", "-\t\t\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {", "-\t\t\t\t\t\t\tIClasspathEntry entry = classpath[i];", "-\t\t\t\t\t\t\tif (entry.getPath().equals(currentOutput)) {", "-\t\t\t\t\t\t\t\toutputTraverseMode = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t}", "-", "+\t\t// get the project's output location and traverse mode", "+\t\tif (outputInfo == null) outputInfo = this.outputInfo(rootInfo, res);", "+\t", "-", "+\t", "-\t\t\t\tIJavaProject projectOfRoot = (IJavaProject)this.roots.get(childPath);", "-\t\t\t\tboolean isPkgFragmentRoot = ", "-\t\t\t\t\tprojectOfRoot != null ", "-\t\t\t\t\t&& (projectOfRoot.getProject().getFullPath().isPrefixOf(childPath));", "+\t\t\t\tRootInfo childInfo = rootInfo == null ? (RootInfo)this.roots.get(childPath) : null;", "+\t\t\t\tif (childInfo != null && !childInfo.project.getProject().getFullPath().isPrefixOf(childPath)) {", "+\t\t\t\t\t// package fragment root of another project (dealt with later)", "+\t\t\t\t\tchildInfo = null;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// compute child type", "-\t\t\t\t\t\tisPkgFragmentRoot);", "+\t\t\t\t\t\trootInfo == null ? childInfo : rootInfo", "+\t\t\t\t\t);", "-\t\t\t\tif (isPkgFragmentRoot) {", "-\t\t\t\t\tthis.currentExclusionPatterns = (char[][])this.exclusionPatterns.get(childPath);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// filter out changes in output location", "-\t\t\t\tboolean outputIsFiltered = false;", "-\t\t\t\tif (currentOutput != null && currentOutput.isPrefixOf(childPath)) {", "-\t\t\t\t\tif (outputTraverseMode != IGNORE) {", "-\t\t\t\t\t\t// case of bin=src", "-\t\t\t\t\t\tif (outputTraverseMode == SOURCE && childType == IJavaElement.CLASS_FILE) {", "-\t\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// case of .class file under project and no source folder", "-\t\t\t\t\t\t\t// proj=bin", "-\t\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT ", "-\t\t\t\t\t\t\t\t\t&& childRes instanceof IFile ", "-\t\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {", "-\t\t\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t// are changes in output location filtered out ?", "+\t\t\t\tboolean outputIsFiltered = this.isOutputFiltered(outputInfo, childRes, childType);", "-\t\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {", "+\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childInfo : rootInfo, outputInfo)) {", "-\t\t\t\t\t\t\tif (currentProject != null) {", "+\t\t\t\t\t\t\tif (rootInfo != null) {", "-\t\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "+\t\t\t\t\t\t\t\t\tif (this.currentElement == null ", "+\t\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "-\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "+\t\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);", "+\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t// if child is a package fragment root of another project, traverse delta too", "-\t\t\t\tif (projectOfRoot != null && !isPkgFragmentRoot) {", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, IGNORE); // binary output of projectOfRoot cannot be this root", "+\t\t\t\t// if child was not a package fragment root of the current project", "+\t\t\t\t// but it is a package fragment root of another project, traverse delta too", "+\t\t\t\tif (childInfo == null && (childInfo = (RootInfo)this.roots.get(childPath)) != null) {", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childInfo, null); // binary output of childInfo.project cannot be this root", "-\t\t\t\t", "+\t", "-\t\t\t\tHashSet set;", "-\t\t\t\tif ((set = (HashSet)this.otherRoots.get(childPath)) != null) {", "-\t\t\t\t\tIPackageFragmentRoot currentRoot = ", "-\t\t\t\t\t\t(currentProject == null ? ", "-\t\t\t\t\t\t\tprojectOfRoot : ", "-\t\t\t\t\t\t\tcurrentProject).getPackageFragmentRoot(childRes);", "-\t\t\t\t\tIterator iterator = set.iterator();", "+\t\t\t\tArrayList rootList;", "+\t\t\t\tif ((rootList = (ArrayList)this.otherRoots.get(childPath)) != null) {", "+\t\t\t\t\tIterator iterator = rootList.iterator();", "-\t\t\t\t\t\tIJavaProject project = (IJavaProject) iterator.next();", "-\t\t\t\t\t\tthis.cloneCurrentDelta(project, currentRoot);", "+\t\t\t\t\t\tchildInfo = (RootInfo) iterator.next();", "+\t\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, childInfo, null); // binary output of childInfo.project cannot be this root", "-\t\t\treturn isValidParent && (currentProject != null || oneChildOnClasspath);", "+\t\t\treturn isValidParent && (rootInfo != null || oneChildOnClasspath);", "-\t\t\treturn currentProject != null && elementType != -1;", "+\t\t\treturn rootInfo != null && elementType != -1;"]}], "num": 36768}
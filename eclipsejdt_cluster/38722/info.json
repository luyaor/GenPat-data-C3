{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ce3b0182b356ad6bdf1d9832911a970", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c144c7d6fef597890d7dc76b4fcd94c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c7f9539fa0d2c7dd5ba718179636fb1d50eefced", "commitAfterChange": "1de4b4e3b8ec35df71e570f058c8d7726752e872", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-\t\t\t\t\tIJavaProject[] projects;", "+\t\t\t\t\tIJavaProject[] jProjects;", "-\t\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "-\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t\t\t\tjProjects = model.getJavaProjects();", "+\t\t\t\t\t\tIProject[] projects = new IProject[jProjects.length];", "+\t\t\t\t\t\tfor (int i = 0, pl = jProjects.length; i < pl; i++) {", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject) jProjects[i];", "+\t\t\t\t\t\t\tprojects[i] = javaProject.getProject();", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "-\t\t\t\t\t            javaProject.getProject().touch(null);", "-\t\t\t\t\t        } catch (CoreException e) {", "-\t\t\t\t\t            // skip", "-\t\t\t\t\t        }", "+\t\t\t\t\t\tmanager.touchProjects(projects, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675fbae63f403599c540816ab3665ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "signatureAfterChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "diff": ["+\tpublic String[] results = new String[10];", "+\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "+\t\tint length = results.length;", "+\t\tif (++index > length) {", "+\t\t\tSystem.arraycopy(results, 0, results = new String[length+10], 0, length);", "+\t\t}", "+\t\ttry {", "+\t\t\tIType type = match.getType();", "+\t\t\tif (type != null) {", "+\t\t\t\tresults[index] = type.toString();", "+\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\tassertTrue(\"We should not have any JavaModel exception! Message:\"+jme.getMessage(), false);", "+\t\t}", "+\t}", "-\tpublic StringBuffer results = new StringBuffer();", "-\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\tif (results.length() > 0) results.append('\\n');", "-\t\ttry {", "-\t\t\tIType type = match.resolvedType();", "-\t\t\tif (type != null) {", "-\t\t\t\tresults.append(type.toString());", "-\t\t\t}", "-\t\t}", "-\t\tcatch (JavaModelException jme) {", "-\t\t\tassertTrue(\"We should not have no JavaModel exception! Message:\"+jme.getMessage(), false);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3254668c3094675810e410d7ca0e9b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/SimpleLookupTable.java", "commitBeforeChange": "0a902f02dbe85869aef1b7ecd659a6f0a0c2a6cf", "commitAfterChange": "7309a168ec14ef344be356b511e1dff1584a0562", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r public Object removeKey(Object key)", "signatureAfterChange": "\r \r public void removeKey(Object key)", "diff": ["-public Object removeKey(Object key) {\r", "-\tint index = (key.hashCode() & 0x7FFFFFFF) % keyTable.length;\r", "+public void removeKey(Object key) {\r", "+\tint length = keyTable.length;\r", "+\tint index = (key.hashCode() & 0x7FFFFFFF) % length;\r", "-\t\t\t\tObject value = valueTable[index];\r", "-\t\t\t\telementSize--;\r", "-\t\t\t\tkeyTable[index] = null;\r", "-\t\t\t\tvalueTable[index] = null;\r", "-\t\t\t\trehash();\r", "-\t\t\t\treturn value;\r", "-\t\t\t}\r", "-\t\tindex = (index + 1) % keyTable.length;\r", "+\t\t\telementSize--;\r", "+\t\t\tkeyTable[index] = null;\r", "+\t\t\tvalueTable[index] = null;\r", "+\t\t\tif (keyTable[index + 1 == length ? 0 : index + 1] != null)\r", "+\t\t\t\trehash(); // only needed if a possible collision existed\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tif (++index == length) index = 0;\r", "-\treturn null;\r"]}], "num": 38722}
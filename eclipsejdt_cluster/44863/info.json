{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "061f2c2c0cf14d84b7d4c570a6047e0a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085c67fbc206b7dcfd908441e4f963eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "ddff8dde894947390c9a90bd347a6ae6239b2112", "commitAfterChange": "e1bb62a6f97249ff77a2f0164d289109644f1d09", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "   \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["+\t\t\t\tAnnotation [] annotations = this.annotationsOnDimensions == null ? null : this.annotationsOnDimensions[i];", "+\t\t\t\tint annotationsLength = annotations == null ? 0 : annotations.length;", "+\t\t\t\tfor (int j = 0; j < annotationsLength; j++) {", "+\t\t\t\t\tannotations[j].traverse(visitor, scope);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "132d66b711798db9f0fcf7376e18af7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " private int fieldSourceEnd(FieldBinding field, ASTNode node)", "signatureAfterChange": " private int fieldSourceEnd(FieldBinding field, ASTNode node)", "diff": ["-\t\tFieldBinding[] bindings = ref.otherBindings;", "-\t\tif (bindings != null)", "-\t\t\tfor (int i = bindings.length; --i >= 0;)", "-\t\t\t\tif (bindings[i] == field)", "-\t\t\t\t\treturn (int) ref.sourcePositions[i + 1]; // first position is for the primary field", "-\t}", "+\t\tif (ref.binding == field) {", "+\t\t\treturn (int) (ref.sourcePositions[ref.indexOfFirstFieldBinding-1]);", "+\t\t}", "+\t\tFieldBinding[] otherFields = ref.otherBindings;", "+\t\tif (otherFields != null) {", "+\t\t\tint offset = ref.indexOfFirstFieldBinding == 1 ? 1 : ref.indexOfFirstFieldBinding - 1;", "+\t\t\tfor (int i = 0, length = otherFields.length; i < length; i++) {", "+\t\t\t\tif (otherFields[i] == field)", "+\t\t\t\t\treturn (int) (ref.sourcePositions[i + offset]);", "+\t\t\t}", "+\t\t}", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2126275d20d92a8b124b2db76b8a6d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "commitAfterChange": "2b6b723d87be49aecbb1b89e893d389af560ea10", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void addSpecialMethods()", "signatureAfterChange": " \tpublic void addSpecialMethods()", "diff": ["+\t\t}", "+\t\t", "+\t\tLambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();", "+\t\tfor (int i = 0, length = lambdas == null ? 0 : lambdas.length; i < length; i++) {", "+\t\t\tlambdas[i].generateCode(this.referenceBinding.scope, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc4d3de334d2f2fa298bb7e00237a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public IResource getResource()", "signatureAfterChange": " public IResource getResource()", "diff": ["-\t\tString elementName = this.getElementName();", "-\t\tif (elementName.length() == 0) {", "+\t\tint length = this.names.length;", "+\t\tif (length == 0) {", "-\t\t\treturn ((IContainer)root.getResource()).getFolder(new Path(this.getElementName().replace('.', '/')));", "+\t\t\tIPath path = new Path(this.names[0]);", "+\t\t\tfor (int i = 1; i < length; i++)", "+\t\t\t\tpath = path.append(this.names[i]);", "+\t\t\treturn ((IContainer)root.getResource()).getFolder(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05a0fc18a41a36bbf358be75bfa78ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public IPath getPath()", "signatureAfterChange": " public IPath getPath()", "diff": ["-\t\treturn root.getPath().append(this.getElementName().replace('.', '/'));", "+\t\tIPath path = root.getPath();", "+\t\tfor (int i = 0, length = this.names.length; i < length; i++) {", "+\t\t\tString name = this.names[i];", "+\t\t\tpath = path.append(name);", "+\t\t}", "+\t\treturn path;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4ca80c44d41bc906f70798cda9db5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\tboolean ignoreUnresolvedVariable,", "-\t\tboolean generateMarkerOnError,", "-\t\tObjectVector accumulatedEntries,", "-\t\tMap preferredClasspaths,", "-\t\tMap preferredOutputs) throws JavaModelException {", "+\t\tObjectVector accumulatedEntries) throws JavaModelException {", "-\t\tIClasspathEntry[] preferredClasspath = preferredClasspaths != null ? (IClasspathEntry[])preferredClasspaths.get(this) : null;", "-\t\tIPath preferredOutput = preferredOutputs != null ? (IPath)preferredOutputs.get(this) : null;", "-\t\tIClasspathEntry[] immediateClasspath = ", "-\t\t\tpreferredClasspath != null ", "-\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null /*no reverse map*/)", "-\t\t\t\t: getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError, false/*don't returnResolutionInProgress*/);", "+\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath();", "-\t\tfor (int i = 0, length = immediateClasspath.length; i < length; i++){", "-\t\t\tClasspathEntry entry = (ClasspathEntry) immediateClasspath[i];", "+\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++){", "+\t\t\tClasspathEntry entry = (ClasspathEntry) resolvedClasspath[i];", "-\t\t\t\t\t\t\t\tignoreUnresolvedVariable, ", "-\t\t\t\t\t\t\t\tfalse /* no marker when recursing in prereq*/,", "-\t\t\t\t\t\t\t\trootIDs,", "-\t\t\t\t\t\t\t\taccumulatedEntries,", "-\t\t\t\t\t\t\t\tpreferredClasspaths,", "-\t\t\t\t\t\t\t\tpreferredOutputs);", "+\t\t\t\t\t\t\t\trootIDs, ", "+\t\t\t\t\t\t\t\taccumulatedEntries);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81b7bd7376e8b08c2e4eb9a5256a858", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b194948ba50d941338edfde90b53618594f5f418", "commitAfterChange": "3a5401b27a838fcf33757f0b2ef8214fd68d66ea", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+\t\t\tannotations = typeReference.annotations != null ? typeReference.annotations[0] : null;", "+\t\t\tint annotationsEnd = annotations != null ? annotations[annotations.length - 1].declarationSourceEnd + 1 : -1;", "-\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);", "-\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);", "-\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de5ea5f8edeec18d98c18d70ec626d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "57bd7f827fb4e26e2f4fcfb421451c18e4a1d09f", "commitAfterChange": "6eea20ade3a92e767b892a10ecaadeddc013ba12", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict)", "diff": ["-\t// additional parameter strict: if true we do not tolerate incompatibly missing annotations on type parameters (for overriding analysis)", "-\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict) {", "+\t */", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict) {", "-\t\tif (areSameTypes(requiredType, providedType)) // for type variable identity (and as shortcut for others)", "+\t\tif (areSameTypes(requiredType, providedType, providedSubstitute)) // for type variable identity (and as shortcut for others)", "+\t\t\t\t\tTypeBinding[] providedSubstitutes = (providedSubstitute instanceof ParameterizedTypeBinding) ? ((ParameterizedTypeBinding)providedSubstitute).arguments : null;", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1, strict);", "+\t\t\t\t\t\t\tTypeBinding providedArgSubstitute = providedSubstitutes != null ? providedSubstitutes[i] : null;", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, strict);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1, strict);", "+\t\t\t\t\tTypeBinding providedEnclSubstitute = providedSubstitute != null ? providedSubstitute.enclosingType() : null;", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, strict);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59616f5f310b7fb41a9710da0473a41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "commitAfterChange": "97903a14c53cc534c10e28f894e41633eed2dcf2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected void createProblemFor(IResource resource, String message, String problemSeverity)", "signatureAfterChange": "  protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity)", "diff": ["-protected void createProblemFor(IResource resource, String message, String problemSeverity) {", "+protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity) {", "+\t\tISourceRange range = javaElement == null ? null : javaElement.getNameRange();", "+\t\tint start = range == null ? 0 : range.getOffset();", "+\t\tint end = range == null ? 1 : start + range.getLength();", "-\t\t\tnew Object[] {message, new Integer(severity), new Integer(0), new Integer(1)});", "+\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82ef3b7597768bb330c24568b13cb91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tObjectVector accumulatedEntries) throws JavaModelException {", "+\t\tObjectVector accumulatedEntries,", "+\t\tMap preferredClasspaths,", "+\t\tMap preferredOutputs) throws JavaModelException {", "+\t\tIClasspathEntry[] preferredClasspath = preferredClasspaths != null ? (IClasspathEntry[])preferredClasspaths.get(this) : null;", "+\t\tIPath preferredOutput = preferredOutputs != null ? (IPath)preferredOutputs.get(this) : null;", "-\t\t\tgetResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);", "+\t\t\tpreferredClasspath != null ", "+\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null)", "+\t\t\t\t: getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);", "-\t\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\t\t\t\taccumulatedEntries,", "+\t\t\t\t\t\t\t\tpreferredClasspaths,", "+\t\t\t\t\t\t\t\tpreferredOutputs);"]}], "num": 44863}
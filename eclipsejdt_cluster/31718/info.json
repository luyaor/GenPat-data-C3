{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2b1f05a6f293534e2badd0aff416198", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23acf95113c07980585469942735786d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "3d4c211d581e5ab7a648e648f6e07c2d98cd2b06", "commitAfterChange": "985d5704b5812718c29d572a9f4e88e4ef1e7e81", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void test012()", "signatureAfterChange": "  \tpublic void test012()", "diff": ["-// TODO (kent) must support static methods too... how? cannot hold onto a specific MethodBinding...", "-//\t\tthis.runConformTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"import static java.lang.Math.max;\\n\" +", "-//\t\t\t\t\"public class X {\\n\" +", "-//\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "-//\t\t\t\t\"\t\tSystem.out.println(max(1, 3));\\n\" +", "-//\t\t\t\t\"\t}\\n\" +", "-//\t\t\t\t\"}\\n\",", "-//\t\t\t},", "-//\t\t\t\"3\");", "-//", "-// another static method case", "-//\t\tthis.runConformTest( // 80280", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"import static p1.C.F;\\n\" +", "-//\t\t\t\t\"import p2.*;\\n\" +", "-//\t\t\t\t\"public class X implements F {}\\n\",", "-//\t\t\t\t\"p1/C.java\",", "-//\t\t\t\t\"package p1;\\n\" +", "-//\t\t\t\t\"public class C {\\n\" +", "-//\t\t\t\t\"\tpublic static int F() { return 0; }\\n\" +", "-//\t\t\t\t\"}\\n\",", "-//\t\t\t\t\"p2/F.java\",", "-//\t\t\t\t\"package p2;\\n\" +", "-//\t\t\t\t\"public interface F {}\\n\"", "-//\t\t\t},", "-//\t\t\t\"\"", "-//\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import static java.lang.Math.max;\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(max(1, 3));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"3\");", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import static p1.C.F;\\n\" +", "+\t\t\t\t\"import p2.*;\\n\" +", "+\t\t\t\t\"public class X implements F {\" +", "+\t\t\t\t\"\tint i = F();\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"p1/C.java\",", "+\t\t\t\t\"package p1;\\n\" +", "+\t\t\t\t\"public class C {\\n\" +", "+\t\t\t\t\"\tpublic static int F() { return 0; }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"p2/F.java\",", "+\t\t\t\t\"package p2;\\n\" +", "+\t\t\t\t\"public interface F {}\\n\"", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb50f106a37de29d3775077c56ea681", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void test063()", "signatureAfterChange": " \tpublic void test063() throws Exception", "diff": ["+\t//safe varargs support", "+\tpublic void test063() throws Exception {", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) return;", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"java/lang/SafeVarargs.java\",", "+\t\t\t\t\"package java.lang;\\n\" +", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.RUNTIME;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.CONSTRUCTOR;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.METHOD;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"@Retention(value=RUNTIME)\\n\" + ", "+\t\t\t\t\"@Target(value={CONSTRUCTOR,METHOD})\\n\" + ", "+\t\t\t\t\"public @interface SafeVarargs {}\",", "+\t\t\t\t\"Y.java\",", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\"public class Y {\\r\\n\" +", "+\t\t\t\t\"\t@SafeVarargs\\n\" +", "+\t\t\t\t\"\tpublic static <T> List<T> asList(T... a) {\\n\" + ", "+\t\t\t\t\"\t\treturn null;\\n\" + ", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\tMap options = getCompilerOptions();", "+\t\toptions.put(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION, JavaCore.ERROR);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\"public class X {\\r\\n\" +", "+\t\t\t\t\"\tpublic void bar() {\\n\" +", "+\t\t\t\t\"\t\tList<? extends Class<?>> classes = Y.asList(String.class, Boolean.class);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"\",", "+\t\t\tnull,", "+\t\t\tfalse,", "+\t\t\tnull,", "+\t\t\toptions,", "+\t\t\tnull);", "+\t}", "-\tpublic void test063() {", "-\t\t\t\t\"Type safety : A generic array of Collection<? extends Number> is created for a varargs parameter\\n\" + "]}], "num": 31718}
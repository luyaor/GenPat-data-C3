{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4989b267ee0b60f9bd2f39dd4b01d1b6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201f19d010d232e5111a03826b22c3f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "f6ec57dbf9dbd373990009e9f5e5c537dfa4f803", "commitAfterChange": "ec855d59adac57c3c75aab5b4f348cc7c271aac2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected void runConformTest(String[] testFiles, String expectedSuccessOutputString, String[] classLib, boolean shouldFlushOutputDirectory, String[] vmArguments, Map customOptions)", "signatureAfterChange": "  protected void runConformTest(String[] testFiles, String expectedSuccessOutputString, String[] classLib, boolean shouldFlushOutputDirectory, String[] vmArguments, Map customOptions)", "diff": ["+\t\tif (!passed) {", "+\t\t\tSystem.out.println(this.getClass().getName() + '#' + this.getName());", "+\t\t \tfor (int i = 0; i < testFiles.length; i+=2) {", "+\t\t \t\tSystem.out.print(testFiles[i]);", "+\t\t \t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t \t\tSystem.out.println(testFiles[i+1]);", "+\t\t \t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t \t}", "+\t\t}", "+\t\tSystem.out.println(this.getClass().getName() + '#' + this.getName());", "+\t \tSystem.out.println(Util.displayString(requestor.problemLog, 2));", "+\t \tfor (int i = 0; i < testFiles.length; i+=2) {", "+\t \t\tSystem.out.print(testFiles[i]);", "+\t \t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t \t\tSystem.out.println(testFiles[i+1]);", "+\t \t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406bc0306d2ac585e22b22e50db75ed0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "fe024fd7797ce73b0a83969f685073606863b79e", "commitAfterChange": "124641ac651bbea2bd062a9605817d39b473bf0e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void indexResolvedDocument()", "signatureAfterChange": "  \tpublic void indexResolvedDocument()", "diff": ["-", "-public void indexResolvedDocument() {", "-\tif (this.cu != null && this.cu.scope != null) {", "-\t\tfinal ASTVisitor visitor = new ASTVisitor() {", "+\tpublic void indexResolvedDocument() {", "+\t\ttry {", "+\t\t\tif (DEBUG) {", "+\t\t\t\tSystem.out.println(new String(this.cud.compilationResult.fileName) + ':');", "+\t\t\t}", "+\t\t\tfinal ASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\t\tif (DEBUG) {", "+\t\t\t\t\t\t\tSystem.out.println('\\t' + new String(lambdaExpression.descriptor.declaringClass.sourceName()) + '.' + ", "+\t\t\t\t\t\t\t\t\tnew String(lambdaExpression.descriptor.selector) + \"-> {}\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (DEBUG) {", "+\t\t\t\t\t\t\tSystem.out.println(\"\\tnull/bad binding in lambda\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (DEBUG) {", "+\t\t\t\t\t\t\tSystem.out.println('\\t' + new String(referenceExpression.descriptor.declaringClass.sourceName()) + \"::\"  //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t+ new String(referenceExpression.descriptor.selector) + \" == \" + new String(binding.declaringClass.sourceName()) + '.' + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tnew String(binding.selector));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (DEBUG) {", "+\t\t\t\t\t\t\tSystem.out.println(\"\\tnull/bad binding in reference expression\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "-\t\tthis.cu.traverse(visitor , this.cu.scope, false);", "+\t\t\tthis.cud.traverse(visitor , this.cud.scope, false);", "+\t\t} catch (Exception e) {", "+\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e0467f06fd522456bfd5174feae068", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "30b30e8c56b7e7a44eebf42932935c15fe10b232", "commitAfterChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprotected void compile(String pluginID, String options, boolean log) throws IOException, CoreException", "signatureAfterChange": " \tprotected void compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException", "diff": ["-\tprotected void compile(String pluginID, String options, boolean log) throws IOException, CoreException {", "+\tprotected void compile(String pluginID, String options, boolean log, String[] srcPaths) throws IOException, CoreException {", "-\t\tString sources = targetWorkspacePath;", "-//\t\tif (JavaCore.PLUGIN_ID.equals(pluginID)) sources += File.separator + \"compiler\";", "+\t\tString workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath()+File.separator;", "+\t\tString binPath = File.separator+\"bin\"+File.pathSeparator;", "+\t\tString classpath = \" -cp \" +", "+\t\t\tworkspacePath+\"org.eclipse.osgi\" + binPath +", "+\t\t\tworkspacePath+\"org.eclipse.jface\" + binPath +", "+\t\t\tworkspacePath+\"org.eclipse.core.runtime\" + binPath +", "+\t\t\tworkspacePath+\"org.eclipse.core.resources\"+binPath +", "+\t\t\tworkspacePath+\"org.eclipse.text\"+binPath;", "+\t\tString sources = srcPaths == null ? \" \"+targetWorkspacePath : \"\";", "+\t\tif (srcPaths != null) {", "+\t\t\tfor (int i=0, l=srcPaths.length; i<l; i++) {", "+\t\t\t\tString path = workspacePath + pluginID + File.separator + srcPaths[i];", "+\t\t\t\tif (path.indexOf(\" \") > 0) {", "+\t\t\t\t\tpath = \"\\\"\" + path + \"\\\"\";", "+\t\t\t\t}", "+\t\t\t\tsources += \" \" + path;", "+\t\t\t}", "+\t\t}", "-\t\tfinal String cmdLine = sources + compliance + \" -g -preserveAllLocals \"+(options==null?\"\":options)+\" -d \" + COMPILER_OUTPUT_DIR + (log?\" -log \"+logFileName:\"\");", "+\t\tfinal String cmdLine = classpath + compliance + \" -g -preserveAllLocals \"+(options==null?\"\":options)+\" -d \" + COMPILER_OUTPUT_DIR + (log?\" -log \"+logFileName:\"\") + sources;", "+", "+\t\t// Clean writer", "+\t\terr = null;", "+\t\tout = null;", "+\t\terrStrWriter = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "487ce31e4237f934785153e9564c4deb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "8ceb51d3aeb97f81e6ea986960d31cca67514932", "commitAfterChange": "79ea7516ee993fa0354e3522ad8337d5c8c5bf24", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\t\tSystem.out.println(newSourceLocations[n] + \" != \" + oldSourceLocations[o]); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < newLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < oldLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t}", "-\t\tif (DEBUG)", "+\t\tif (DEBUG) {", "+\t\t\tSystem.out.println(\"New source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < newLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + newSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Old source folders:\"); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < oldLength; i++)", "+\t\t\t\tSystem.out.println(\"    \" + oldSourceLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t}", "-\t\t\tSystem.out.println(newBinaryLocations[n] + \" != \" + oldBinaryLocations[o]); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"New binary locations:\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(newBinaryLocations[i]);", "-\t\t\tSystem.out.println(\"was:\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"    \" + newBinaryLocations[i].debugPathString()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Old binary locations:\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(oldBinaryLocations[i]);", "+\t\t\t\tSystem.out.println(\"    \" + oldBinaryLocations[i].debugPathString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ed20976452c9959d93f1b9af1aceec4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 268, "methodNumberAfterChange": 382, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-}", "-\tString s = \"identifierStack : char[][] = {\"; //$NON-NLS-1$", "+\tString s = \"identifierStack : char[\"+(this.identifierPtr + 1)+\"][] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts = s + \"identierLengthStack : int[] = {\"; //$NON-NLS-1$", "+\ts = s + \"identifierLengthStack : int[\"+(this.identifierLengthPtr + 1)+\"] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts = s + \"astLengthStack : int[] = {\"; //$NON-NLS-1$", "+\ts = s + \"astLengthStack : int[\"+(this.astLengthPtr + 1)+\"] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts = s + \"intStack : int[] = {\"; //$NON-NLS-1$", "+\ts = s + \"intStack : int[\"+(this.intPtr + 1)+\"] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ts = s + \"expressionLengthStack : int[] = {\"; //$NON-NLS-1$", "+\ts = s + \"expressionLengthStack : int[\"+(this.expressionLengthPtr + 1)+\"] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\ts = s + \"genericsIdentifiersLengthStack : int[\"+(this.genericsIdentifiersLengthPtr + 1)+\"] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\tfor (int i = 0; i <= this.genericsIdentifiersLengthPtr; i++) {", "+\t\ts = s + this.genericsIdentifiersLengthStack[i] + \",\"; //$NON-NLS-1$", "+\t}", "+\ts = s + \"}\\n\"; //$NON-NLS-1$", "+\t", "+\ts = s + \"genericsLengthStack : int[\"+(this.genericsLengthPtr + 1)+\"] = {\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\tfor (int i = 0; i <= this.genericsLengthPtr; i++) {", "+\t\ts = s + this.genericsLengthStack[i] + \",\"; //$NON-NLS-1$", "+\t}", "+\ts = s + \"}\\n\"; //$NON-NLS-1$", "+", "+\ts = s + \"genericsPtr : int = \" + String.valueOf(this.genericsPtr) + \"\\n\"; //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6feb8da6299a5ec9e944e423ed7e4c04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "d9f5208ccd9842b7305a76e615fa0b04487a1a33", "commitAfterChange": "9ac3d3205dd69d72df25a75c1584224d5519622d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "signatureAfterChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "diff": ["-\tchar[] initialSource = unit.getSource().toCharArray();", "+\tString initialSource = unit.getSource();", "+\tint[] initialPositions = null;", "+\tArrayList arrayList = new ArrayList();", "-\t\tpositions = new int[initialSource.length];", "-\t\tfor (int i = 0; i < initialSource.length; i++) {", "-\t\t\tpositions[i] = i;", "+\t\tfor (int i = 0; i < initialSource.length(); i++) {", "+\t\t\tif (!Character.isWhitespace(initialSource.charAt(i))) {", "+\t\t\t\tarrayList.add(new Integer(i));", "+\t\t\t}", "+\t\tfinal int length = arrayList.size();", "+\t\tpositions = new int[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tpositions[i] = ((Integer) arrayList.get(i)).intValue();", "+\t\t}", "+\t\tinitialPositions = new int[length];", "+\t\tSystem.arraycopy(positions, 0, initialPositions, 0, length);", "+\tfinal int expectedResultLength = expectedResult.length();", "-\t\t\tassertEquals(\"wrong mapped positions at \" + i + \" <-> \" + positions[i], expectedResult.charAt(positions[i]), initialSource[i]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tchar mappedChar = ' ';", "+\t\t\tchar initial = initialSource.charAt(initialPositions[i]);", "+\t\t\ttry {", "+\t\t\t\tmappedChar = expectedResult.charAt(positions[i]);", "+\t\t\t\tif (mappedChar != initial) {", "+\t\t\t\t\tSystem.out.println(\"wrong mapped positions: \" + initialPositions[i] + \" <-> \" + positions[i] + \": expected \" + initial + \" but was \" + mappedChar); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tassertEquals(\"wrong mapped positions: \" + initialPositions[i] + \" <-> \" + positions[i], initial, mappedChar); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t} catch(StringIndexOutOfBoundsException e) {", "+\t\t\t\tSystem.out.println(\"Out of bounds : (length = \" + expectedResultLength + \") \" + positions[i]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace897764b09e9bafd0804637c4b4235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "commitAfterChange": "b9f6281b56af6781d8bb8cc727077eb3dccaebba", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems)", "signatureAfterChange": " \tprotected void expectingSpecificProblemsFor(IPath root, Problem[] problems)", "diff": ["-\t\texpectingSpecificProblemsFor(root, problems, false);", "-\t}", "+\t\tProblem[] rootProblems = env.getProblemsFor(root);", "+\t\t\t\tSystem.out.print(\", \" + pb.getStart() + \", \" + pb.getEnd() +  \", \" + pb.getCategoryId());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea4025dc33fb174e431156111efa61e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "8f26d11c4ba332f2be7ec8dbf571250694ed7207", "commitAfterChange": "43a0c55f94ed86f30ef95f5f1ba26a35207a73d3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tvoid basicMatch(ASTNode node)", "signatureAfterChange": " \tvoid basicMatch(ASTNode node)", "diff": ["-\t\tint count = nodeCount(node);", "+\t\tTestMatcher[] m = {", "+\t\t\tnew TestMatcher(),", "+\t\t\tnew TestMatcher(true),", "+\t\t\tnew TestMatcher(false)};", "+\t\tfor (int i = 0; i < m.length; i++) {", "+\t\t\t// check that matcher was called with right arguments", "+\t\t\t// and that matches succeed", "+\t\t\tTestMatcher m1 = m[i];", "+\t\t\tObject o1 = new Object();", "+\t\t\tm1.result = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, o1);", "+\t\t\tassertTrue(m1.matchCalls == 1);", "+\t\t\tassertTrue(m1.receiverNode == node);", "+\t\t\tassertTrue(m1.otherNode == o1);", "+\t\t\tassertTrue(result == true);", "+\t\t}", "-\t\t// check that matcher was called with right arguments", "-\t\t// and that matches succeed", "-\t\tTestMatcher m1 = new TestMatcher();", "-\t\tObject o1 = new Object();", "-\t\tm1.result = true;", "-\t\tboolean result = node.subtreeMatch(m1, o1);", "-\t\tassertTrue(m1.matchCalls == 1);", "-\t\tassertTrue(m1.receiverNode == node);", "-\t\tassertTrue(m1.otherNode == o1);", "-\t\tassertTrue(result == true);", "+\t\tm = new TestMatcher[] {", "+\t\t\t\t\t\t\tnew TestMatcher(),", "+\t\t\t\t\t\t\tnew TestMatcher(true),", "+\t\t\t\t\t\t\tnew TestMatcher(false)};", "+\t\tfor (int i = 0; i < m.length; i++) {", "+\t\t\t// check that matcher was called with right arguments", "+\t\t\t// and that non-matches fail", "+\t\t\tTestMatcher m1 = m[i];", "+\t\t\tObject o1 = new Object();", "+\t\t\tm1.result = false;", "+\t\t\tboolean result = node.subtreeMatch(m1, o1);", "+\t\t\tassertTrue(m1.matchCalls == 1);", "+\t\t\tassertTrue(m1.receiverNode == node);", "+\t\t\tassertTrue(m1.otherNode == o1);", "+\t\t\tassertTrue(result == false);", "+\t\t}", "-\t\t// check that matcher was called with right arguments", "-\t\t// and that non-matches fail", "-\t\tm1 = new TestMatcher();", "-\t\to1 = new Object();", "-\t\tm1.result = false;", "-\t\tresult = node.subtreeMatch(m1, o1);", "-\t\tassertTrue(m1.matchCalls == 1);", "-\t\tassertTrue(m1.receiverNode == node);", "-\t\tassertTrue(m1.otherNode == o1);", "-\t\tassertTrue(result == false);", "+\t\t// check that ASTMatcher() default implementations delegate", "+\t\t{", "+\t\t\tint count = nodeCount(node, false); // ignore doc tags", "+\t\t\tTestMatcher m1 = new TestMatcher();", "+\t\t\tm1.superMatch = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, node);", "+\t\t\tassertTrue(m1.matchCalls == count);", "+\t\t\tassertTrue(result == true);", "+\t\t}", "-\t\t// check that ASTMatcher default implementations delegate", "-\t\tm1 = new TestMatcher();", "-\t\tm1.superMatch = true;", "-\t\tresult = node.subtreeMatch(m1, node);", "-\t\tassertTrue(m1.matchCalls == count);", "-\t\tassertTrue(result == true);", "+\t\t// check that ASTMatcher(false) default implementations delegate", "+\t\t{", "+\t\t\tint count = nodeCount(node, false); // ignore doc tags", "+\t\t\tTestMatcher m1 = new TestMatcher(false);", "+\t\t\tm1.superMatch = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, node);", "+\t\t\tassertTrue(m1.matchCalls == count);", "+\t\t\tassertTrue(result == true);", "+\t\t}", "+\t\t", "+\t\t// check that ASTMatcher(true) default implementations delegate", "+\t\t{", "+\t\t\tint count = nodeCount(node, true); // include doc tags", "+\t\t\tTestMatcher m1 = new TestMatcher(true);", "+\t\t\tm1.superMatch = true;", "+\t\t\tboolean result = node.subtreeMatch(m1, node);", "+\t\t\tassertTrue(m1.matchCalls == count);", "+\t\t\tassertTrue(result == true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce52fc4aba5e093b16d901a0b863da71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/DebugEvaluationTest.java", "commitBeforeChange": "dc9a89d9f844d31b09ec158bf347daa2976701f3", "commitAfterChange": "7bcf1741dcb918f3307ee7d52f0450e52fdd3029", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test012() throws Exception", "signatureAfterChange": " public void test012() throws Exception", "diff": ["+\tEvaluationResult[] results = requestor.results;", "+\tSystem.out.println(\"\\nDebugEvaluationTests:test012: Results (1):\");", "+\tfor(int i = 0; i < results.length; i++) {", "+\t\tEvaluationResult r = results[i];", "+\t\tif (r == null) continue;", "+\t\tSystem.out.println(\"\\t[\" + i + \"] Evaluation Type: \"+ r.getEvaluationType() + ", "+\t\t\t\t\" Value Type: \" + new String(r.getValueTypeName()) + ", "+\t\t\t\t\" Value: \" + new String(r.getValueDisplayString()));", "+\t}", "+\tresults = requestor.results;", "+\tSystem.out.println(\"\\nDebugEvaluationTests:test012: Results (2):\");", "+\tfor(int i = 0; i < results.length; i++) {", "+\t\tEvaluationResult r = results[i];", "+\t\tif (r == null) continue;", "+\t\tSystem.out.println(\"\\t[\" + i + \"] Evaluation Type: \"+ r.getEvaluationType() + ", "+\t\t\t\t\" Value Type: \" + new String(r.getValueTypeName()) + ", "+\t\t\t\t\" Value: \" + new String(r.getValueDisplayString()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1763198b5150de8cc4d0a44960f5c21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["- * String\t\toutput location", "-\tout.writeUTF(outputLocationString);", "- * Class path locations[]", "+ * ClasspathMultiDirectory[]", "- * ", "- * NOTE: Cannot have portable build states while classpath directories are full filesystem paths", "-\tout.writeInt(length = classpathLocations.length);", "-\tfor (int i = 0; i < length; ++i) {", "-\t\tClasspathLocation c = classpathLocations[i];", "+\tout.writeInt(length = sourceLocations.length);", "+\tfor (int i = 0; i < length; i++) {", "+\t\tClasspathMultiDirectory md = sourceLocations[i];", "+\t\tout.writeUTF(md.sourceFolder.getProjectRelativePath().toString());", "+\t\tout.writeUTF(md.binaryFolder.getProjectRelativePath().toString());", "+\t\twriteNames(md.exclusionPatterns, out);", "+\t\tout.writeBoolean(md.hasIndependentOutputFolder);", "+\t}", "+", "+/*", "+ * ClasspathLocation[]", "+ * int\t\t\t\tid", "+ * String\t\tpath(s)", "+*/", "+\tout.writeInt(length = binaryLocations.length);", "+\tnext : for (int i = 0; i < length; i++) {", "+\t\tClasspathLocation c = binaryLocations[i];", "-\t\t\tClasspathMultiDirectory md = (ClasspathMultiDirectory) c;", "-\t\t\tout.writeUTF(md.sourcePath);", "-\t\t\tout.writeUTF(md.binaryPath);", "+\t\t\tfor (int j = 0, m = sourceLocations.length; j < m; j++) {", "+\t\t\t\tif (sourceLocations[j] == c) {", "+\t\t\t\t\tout.writeInt(j);", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tout.writeUTF(((ClasspathDirectory) c).binaryPath);", "-\t\t} else if (c instanceof ClasspathJar) {", "-\t\t\tout.writeByte(3);", "-\t\t\tout.writeUTF(((ClasspathJar) c).zipFilename);", "+\t\t\tClasspathDirectory cd = (ClasspathDirectory) c;", "+\t\t\tout.writeUTF(cd.binaryFolder.getProjectRelativePath().toString());", "+\t\t\tout.writeBoolean(cd.isOutputFolder);", "+\t\t} else {", "+\t\t\tClasspathJar jar = (ClasspathJar) c;", "+\t\t\tif (jar.zipFilename.equals(jar.relativePathname)) {", "+\t\t\t\tout.writeByte(3);", "+\t\t\t\tout.writeUTF(jar.relativePathname);", "+\t\t\t} else {", "+\t\t\t\tout.writeByte(4);", "+\t\t\t\tout.writeUTF(jar.zipFilename);", "+\t\t\t}", "- * String[]\t\tInterned locations", "+ * String[]\t\tInterned type locators", "-\tArrayList internedLocations = new ArrayList(length);", "+\tArrayList internedTypeLocators = new ArrayList(length);", "-\t\t\t\tinternedLocations.add(key);", "+\t\t\t\tinternedTypeLocators.add(key);", "- * Type locations table", "+ * Type locators table", "- * int\t\t\t\tinterned location id", "+ * int\t\t\t\tinterned locator id", "-\tout.writeInt(length = typeLocations.elementSize);", "+\tout.writeInt(length = typeLocators.elementSize);", "-\t\tkeyTable = typeLocations.keyTable;", "-\t\tvalueTable = typeLocations.valueTable;", "+\t\tkeyTable = typeLocators.keyTable;", "+\t\tvalueTable = typeLocators.valueTable;", "-\t\t\t\tout.writeInt(internedLocations.indexOf((String) valueTable[i]));", "+\t\t\t\tout.writeInt(internedTypeLocators.indexOf((String) valueTable[i]));", "-\t\t\tSystem.out.println(\"typeLocations table is inconsistent\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"typeLocators table is inconsistent\"); //$NON-NLS-1$", "-\t\t\tfor (int j = 0, qLength = qNames.length; j < qLength; j++) {", "+\t\t\tfor (int j = 0, m = qNames.length; j < m; j++) {", "-\t\t\t\t\tfor (int k = 0, sLength = qName.length; k < sLength; k++) {", "+\t\t\t\t\tfor (int k = 0, n = qName.length; k < n; k++) {", "-\t\t\tfor (int j = 0, sLength = sNames.length; j < sLength; j++) {", "+\t\t\tfor (int j = 0, m = sNames.length; j < m; j++) {", "- * int\t\t\tinterned location id", "+ * int\t\t\tinterned locator id", "-\t\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));", "+\t\t\t\tout.writeInt(internedTypeLocators.indexOf((String) keyTable[i]));"]}], "num": 47268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d59c1df93f9ac98cbd005e9c2f2d536", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c0db5ca74c5a98f9f2e39b2fe7d1e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, \t\t\tInvocationSite invocationSite, int inferenceLevel)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,\tInvocationSite invocationSite)", "diff": ["-\tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,", "-\t\t\tInvocationSite invocationSite, int inferenceLevel)", "+\tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,\tInvocationSite invocationSite)", "-// ==== 1.8: The main driver for inference of generic methods: ====", "-\t\t\tInferenceContext18 infCtx18 = null;", "-\t\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "-\t\t\t\tif ((inferenceLevel & Scope.APPLICABILITY) != 0)", "-\t\t\t\t\tinfCtx18 = invocationSite.freshInferenceContext(scope);", "-\t\t\t\telse if (invocationSite instanceof Invocation && originalMethod instanceof ParameterizedGenericMethodBinding)", "-\t\t\t\t\tinfCtx18 = ((Invocation) invocationSite).getInferenceContext((ParameterizedGenericMethodBinding) originalMethod);", "-\t\t\t\tif (infCtx18 == null)", "-\t\t\t\t\treturn originalMethod;", "-\t\t\t}", "-\t\t\tif (infCtx18 != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tBoundSet provisionalResult = null;", "-\t\t\t\t\tBoundSet result = null;", "-\t\t\t\t\tif ((inferenceLevel & Scope.APPLICABILITY) != 0) {", "+\t\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8)", "+\t\t\t\treturn computeCompatibleMethod18(originalMethod, arguments, scope, invocationSite);", "-\t\t\t\t\t\t// ---- 18.5.1 (Applicability): ----", "-\t\t\t\t\t\tboolean isDiamond = originalMethod.isConstructor()", "-\t\t\t\t\t\t\t\t&& invocationSite instanceof Expression", "-\t\t\t\t\t\t\t\t&& ((Expression)invocationSite).isPolyExpression(originalMethod);", "-\t\t\t\t\t\tif (arguments.length == parameters.length) {", "-\t\t\t\t\t\t\tinfCtx18.inferenceKind = InferenceContext18.CHECK_LOOSE; // TODO: validate if 2 phase checking (strict/loose + vararg) is sufficient.", "-\t\t\t\t\t\t\tinfCtx18.inferInvocationApplicability(originalMethod, arguments, isDiamond);", "-\t\t\t\t\t\t\tprovisionalResult = infCtx18.solve();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (provisionalResult == null && originalMethod.isVarargs()) {", "-\t\t\t\t\t\t\t// check for variable-arity applicability", "-\t\t\t\t\t\t\tinfCtx18 = invocationSite.freshInferenceContext(scope); // start over", "-\t\t\t\t\t\t\tinfCtx18.inferenceKind = InferenceContext18.CHECK_VARARG;", "-\t\t\t\t\t\t\tinfCtx18.inferInvocationApplicability(originalMethod, arguments, isDiamond);", "-\t\t\t\t\t\t\tprovisionalResult = infCtx18.solve();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (provisionalResult != null && infCtx18.isResolved(provisionalResult)) {", "-\t\t\t\t\t\t\tinfCtx18.storedSolution = provisionalResult;", "-\t\t\t\t\t\t\tinfCtx18.stepCompleted = InferenceContext18.APPLICABILITY_INFERRED;", "-\t\t\t\t\t\t\tif (invocationSite instanceof ReferenceExpression)", "-\t\t\t\t\t\t\t\t((ReferenceExpression) invocationSite).inferenceKind = infCtx18.inferenceKind;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tprovisionalResult = infCtx18.storedSolution;", "-\t\t\t\t\t}", "-\t\t\t\t\tresult = infCtx18.currentBounds.copy(); // the result after reduction, without effects of resolve()", "+\t\t\t// 1.7- only.", "+\t\t\tinferenceContext = new InferenceContext(originalMethod);", "+\t\t\tmethodSubstitute = inferFromArgumentTypes(scope, originalMethod, arguments, parameters, inferenceContext);", "+\t\t\tif (methodSubstitute == null)", "+\t\t\t\treturn null;", "-\t\t\t\t\tTypeBinding expectedType = invocationSite.invocationTargetType();", "-\t\t\t\t\tboolean hasReturnProblem = false;", "-\t\t\t\t\tboolean invocationTypeInferred = false;", "-\t\t\t\t\tif ((inferenceLevel & Scope.INVOCATION_TYPE) != 0 // requested?", "-\t\t\t\t\t\t\t&& (expectedType != null || !invocationSite.getExpressionContext().definesTargetType())) { // possible?", "-", "-\t\t\t\t\t\t// ---- 18.5.2 (Invocation type): ----", "-\t\t\t\t\t\tresult = infCtx18.inferInvocationType(result, expectedType, invocationSite, originalMethod);", "-\t\t\t\t\t\tinvocationTypeInferred = true;", "-\t\t\t\t\t\thasReturnProblem |= result == null;", "-\t\t\t\t\t\tif (hasReturnProblem)", "-\t\t\t\t\t\t\tresult = provisionalResult; // let's prefer a type error regarding the return type over reporting no match at all", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// we're not yet ready for invocation type inference", "-\t\t\t\t\t\tresult = provisionalResult;", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tif (result != null) {", "-\t\t\t\t\t\t// assemble the solution etc:", "-\t\t\t\t\t\tTypeBinding[] solutions = infCtx18.getSolutions(typeVariables, invocationSite, result);", "-\t\t\t\t\t\tif (solutions != null) {", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tmethodSubstitute = scope.environment().createParameterizedGenericMethod(originalMethod, solutions);", "-\t\t\t\t\t\t\tif (hasReturnProblem) { // illegally working from the provisional result?", "-\t\t\t\t\t\t\t\tMethodBinding problemMethod = infCtx18.getReturnProblemMethodIfNeeded(expectedType, methodSubstitute);", "-\t\t\t\t\t\t\t\tif (problemMethod instanceof ProblemMethodBinding)", "-\t\t\t\t\t\t\t\t\treturn problemMethod;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (invocationTypeInferred) {", "-\t\t\t\t\t\t\t\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled)", "-\t\t\t\t\t\t\t\t\tNullAnnotationMatching.checkForContraditions(methodSubstitute, invocationSite, scope);", "-\t\t\t\t\t\t\t\tinfCtx18.rebindInnerPolies(result, methodSubstitute.parameters);", "-\t\t\t\t\t\t\t\tMethodBinding problemMethod = methodSubstitute.boundCheck18(scope, arguments);", "-\t\t\t\t\t\t\t\tif (problemMethod != null)", "-\t\t\t\t\t\t\t\t\treturn problemMethod;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (invocationSite instanceof Invocation)", "-\t\t\t\t\t\t\t\t\t((Invocation) invocationSite).registerInferenceContext(methodSubstitute, infCtx18); // keep context so we can finish later", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn methodSubstitute;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn null;", "-\t\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\t\t// FIXME stop-gap measure", "-\t\t\t\t\tscope.problemReporter().genericInferenceError(e.getMessage(), invocationSite);", "-\t\t\t\t\treturn null;", "+\t\t\t// substitutes may hold null to denote unresolved vars, but null arguments got replaced with respective original variable in param method", "+\t\t\t// 15.12.2.8 - inferring unresolved type arguments", "+\t\t\tif (inferenceContext.hasUnresolvedTypeArgument()) {", "+\t\t\t\tif (inferenceContext.isUnchecked) { // only remember unchecked status post 15.12.2.7", "+\t\t\t\t\tint length = inferenceContext.substitutes.length;", "+\t\t\t\t\tSystem.arraycopy(inferenceContext.substitutes, 0, uncheckedArguments = new TypeBinding[length], 0, length);", "-\t\t\t} else {", "-// ==== 1.8 ====", "-\t\t\t\tinferenceContext = new InferenceContext(originalMethod);", "-\t\t\t\tmethodSubstitute = inferFromArgumentTypes(scope, originalMethod, arguments, parameters, inferenceContext);", "+\t\t\t\tif (methodSubstitute.returnType != TypeBinding.VOID) {", "+\t\t\t\t\tTypeBinding expectedType = invocationSite.invocationTargetType();", "+\t\t\t\t\tif (expectedType != null) {", "+\t\t\t\t\t\t// record it was explicit from context, as opposed to assumed by default (see below)", "+\t\t\t\t\t\tinferenceContext.hasExplicitExpectedType = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\texpectedType = scope.getJavaLangObject(); // assume Object by default", "+\t\t\t\t\t}", "+\t\t\t\t\tinferenceContext.expectedType = expectedType;", "+\t\t\t\t}", "+\t\t\t\tmethodSubstitute = methodSubstitute.inferFromExpectedType(scope, inferenceContext);", "-\t\t\t\t", "-\t\t\t\t// substitutes may hold null to denote unresolved vars, but null arguments got replaced with respective original variable in param method", "-\t\t\t\t// 15.12.2.8 - inferring unresolved type arguments", "-\t\t\t\tif (inferenceContext.hasUnresolvedTypeArgument()) {", "-\t\t\t\t\tif (inferenceContext.isUnchecked) { // only remember unchecked status post 15.12.2.7", "-\t\t\t\t\t\tint length = inferenceContext.substitutes.length;", "-\t\t\t\t\t\tSystem.arraycopy(inferenceContext.substitutes, 0, uncheckedArguments = new TypeBinding[length], 0, length);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (methodSubstitute.returnType != TypeBinding.VOID) {", "-\t\t\t\t\t\tTypeBinding expectedType = invocationSite.invocationTargetType();", "-\t\t\t\t\t\tif (expectedType != null) {", "-\t\t\t\t\t\t\t// record it was explicit from context, as opposed to assumed by default (see below)", "-\t\t\t\t\t\t\tinferenceContext.hasExplicitExpectedType = true;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\texpectedType = scope.getJavaLangObject(); // assume Object by default", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinferenceContext.expectedType = expectedType;", "-\t\t\t\t\t}", "-\t\t\t\t\tmethodSubstitute = methodSubstitute.inferFromExpectedType(scope, inferenceContext);", "-\t\t\t\t\tif (methodSubstitute == null)", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807b4066a52bba1b5f33c2a80ac7a0dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "a744e65ca211ca7be2dd3830d1bd4009b273df27", "commitAfterChange": "c95e24ef2e4bfa2139fbca3e3b2078e40695cacf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void formatLocalDeclaration(VariableDeclarationExpression declarationExpression, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma)", "signatureAfterChange": "  \tprivate void formatLocalDeclaration(VariableDeclarationExpression declarationExpression, boolean insertSpaceBeforeComma, boolean insertSpaceAfterComma)", "diff": ["-\t\tList fragments = declarationExpression.fragments();", "+\t\tformatVariableDeclarationFragments(declarationExpression.fragments(), insertSpaceBeforeComma, insertSpaceAfterComma);", "+\t}", "-\t\t\t\t\t\t\tinitialization.accept(this);", "-\t\t\t\tAlignment2 assignmentAlignment = this.scribe.createAlignment(\"localDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdc18033624906bec33ecb02dd889b93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "a744e65ca211ca7be2dd3830d1bd4009b273df27", "commitAfterChange": "c95e24ef2e4bfa2139fbca3e3b2078e40695cacf", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 93, "signatureBeforeChange": "  \tpublic boolean visit(VariableDeclarationStatement node)", "signatureAfterChange": "  \tpublic boolean visit(VariableDeclarationStatement node)", "diff": ["-\t\tList fragments = node.fragments();", "-\t\tfinal int fragmentsLength = fragments.size();", "-\t\tif (fragmentsLength > 1) {", "-\t\t\t// multiple field declaration", "-\t\t\tAlignment2 multiFieldDeclarationsAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\"multiple_field\",//$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.alignment_for_multiple_fields,", "-\t\t\t\t\tfragmentsLength - 1,", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(multiFieldDeclarationsAlignment);", "-\t\t", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tfor (int i = 0; i < fragmentsLength; i++) {", "-\t\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(i);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * Field name", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (i == 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, false);", "-\t\t\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * Check for extra dimensions", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tfinal int extraDimensions = fragment.getExtraDimensions();", "-\t\t\t\t\t\tif (extraDimensions != 0) {", "-\t\t\t\t\t\t\t for (int index = 0; index < extraDimensions; index++) {", "-\t\t\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t\t\t\t }", "-\t\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * Field initialization", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tfinal Expression initialization = fragment.getInitializer();", "-\t\t\t\t\t\tif (initialization != null) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_assignment_operator) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tinitialization.accept(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (i != fragmentsLength - 1) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_multiple_local_declarations);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(multiFieldDeclarationsAlignment, i);", "-", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_multiple_local_declarations) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t}", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(multiFieldDeclarationsAlignment, true);\t\t\t\t", "-\t\t} else {", "-\t\t\t// single field declaration", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "-\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tfinal int extraDimensions = fragment.getExtraDimensions();", "-\t\t\tif (extraDimensions != 0) {", "-\t\t\t\tfor (int i = 0; i < extraDimensions; i++) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinal Expression initialization = fragment.getInitializer();", "-\t\t\tif (initialization != null) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameEQUAL, this.preferences.insert_space_before_assignment_operator);", "-\t\t\t\tif (this.preferences.insert_space_after_assignment_operator) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tAlignment2 assignmentAlignment = this.scribe.createAlignment(\"localDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "-\t\t\t\tthis.scribe.enterAlignment(assignmentAlignment);", "-\t\t\t\tboolean ok = false;", "-\t\t\t\tdo {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.scribe.alignFragment(assignmentAlignment, 0);", "-\t\t\t\t\t\tinitialization.accept(this);", "-\t\t\t\t\t\tok = true;", "-\t\t\t\t\t} catch(AlignmentException e){", "-\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t}", "-\t\t\t\t} while (!ok);\t\t", "-\t\t\t\tthis.scribe.exitAlignment(assignmentAlignment, true);\t\t\t", "-\t\t\t}", "-\t\t}", "+\t\tformatVariableDeclarationFragments(node.fragments(), this.preferences.insert_space_before_comma_in_multiple_local_declarations, this.preferences.insert_space_after_comma_in_multiple_local_declarations);"]}], "num": 4344}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b5a4c7a8192ddc8b47a38178bbcd1e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973d0460160017c6e72e3dd39f3f8dd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "ba48713f8fe162de096e876002c466289dc8a647", "commitAfterChange": "42f61a276ba7d1e6da8e4e7be639a302682158f7", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  \tpublic boolean visit(ReturnStatement node)", "signatureAfterChange": "  \tpublic boolean visit(ReturnStatement node)", "diff": ["-\t\t\tthis.scribe.space();", "+\t\t\tswitch(expression.getNodeType()) {", "+\t\t\t\tcase ASTNode.CAST_EXPRESSION :", "+\t\t\t\tcase ASTNode.STRING_LITERAL :", "+\t\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "+\t\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "+\t\t\t\t\tif (this.preferences.insert_space_before_expression_in_return) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4cd6e9746ee9169c7577c29a8fa923b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "f0c0b7fa1dec1406e600a295953ddede773bcc39", "commitAfterChange": "cce0aa62595ed29a0680749ad737dfe2377b0e97", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t} else {", "+\t\t\t// if unused variable, some side effects still need to be performed (86487)", "+\t\t\tswitch(this.kind) {", "+\t\t\t\tcase ARRAY :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase RAW_ITERABLE :", "+\t\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t\t// still advance in iterator to prevent infinite loop", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\tbreak;", "+\t\t\t}"]}], "num": 44822}
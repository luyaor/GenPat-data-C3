{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4804d31687be8c38808542ef3935ddd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a885773531d40914f0a9114af5a300f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void initializeMaxLocals(MethodBinding methodBinding)", "signatureAfterChange": "  public void initializeMaxLocals(MethodBinding methodBinding)", "diff": ["-}", "-public void initializeMaxLocals(MethodBinding methodBinding) {", "-    super.initializeMaxLocals(methodBinding);", "-    StackMapFrame frame = new StackMapFrame();", "-    frame.pc = -1;", "-", "-    if (this.maxLocals != 0) {", "-        int resolvedPosition = 0;", "-        // take into account enum constructor synthetic name+ordinal", "-        final boolean isConstructor = methodBinding.isConstructor();", "-        if (isConstructor) {", "-            frame.putLocal(resolvedPosition, new VerificationTypeInfo(VerificationTypeInfo.ITEM_UNINITIALIZED_THIS, methodBinding.declaringClass));", "-            resolvedPosition++;", "-        } else if (!methodBinding.isStatic()) {", "-            frame.putLocal(resolvedPosition, new VerificationTypeInfo(VerificationTypeInfo.ITEM_OBJECT, methodBinding.declaringClass));", "-            resolvedPosition++;", "-        }", "-", "-        if (isConstructor) {", "-            if (methodBinding.declaringClass.isEnum()) {", "-                frame.putLocal(resolvedPosition, new VerificationTypeInfo(TypeIds.T_JavaLangString, ConstantPool.JavaLangStringConstantPoolName));", "-                resolvedPosition++;", "-                frame.putLocal(resolvedPosition, new VerificationTypeInfo(TypeBinding.INT));", "-                resolvedPosition++;", "-            }", "-", "-            // take into account the synthetic parameters", "-            if (methodBinding.declaringClass.isNestedType()) {", "-                ReferenceBinding enclosingInstanceTypes[];", "-                if ((enclosingInstanceTypes = methodBinding.declaringClass.syntheticEnclosingInstanceTypes()) != null) {", "-                    for (int i = 0, max = enclosingInstanceTypes.length; i < max; i++) {", "-                         // an enclosingInstanceType can only be a reference binding. It cannot be", "-                        // LongBinding or DoubleBinding", "-                        frame.putLocal(resolvedPosition, new VerificationTypeInfo(enclosingInstanceTypes[i]));", "-                        resolvedPosition++;", "-                    }", "-                }", "-", "-                TypeBinding[] arguments;", "-                if ((arguments = methodBinding.parameters) != null) {", "-                    for (int i = 0, max = arguments.length; i < max; i++) {", "-                        final TypeBinding typeBinding = arguments[i];", "-                        frame.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "-                        switch(typeBinding.id) {", "-                            case TypeIds.T_double :", "-                            case TypeIds.T_long :", "-                                resolvedPosition += 2;", "-                                break;", "-                            default:", "-                                resolvedPosition++;", "-                        }", "-                    }", "-                }", "-", "-                SyntheticArgumentBinding syntheticArguments[];", "-                if ((syntheticArguments = methodBinding.declaringClass.syntheticOuterLocalVariables()) != null) {", "-                    for (int i = 0, max = syntheticArguments.length; i < max; i++) {", "-                        final TypeBinding typeBinding = syntheticArguments[i].type;", "-                        frame.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "-                        switch(typeBinding.id) {", "-                            case TypeIds.T_double :", "-                            case TypeIds.T_long :", "-                                resolvedPosition+=2;", "-                                break;", "-                            default:", "-                                resolvedPosition++;", "-                        }", "-                    }", "-                }", "-            } else {", "-                TypeBinding[] arguments;", "-                if ((arguments = methodBinding.parameters) != null) {", "-                    for (int i = 0, max = arguments.length; i < max; i++) {", "-                        final TypeBinding typeBinding = arguments[i];", "-                        frame.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "-                        switch(typeBinding.id) {", "-                            case TypeIds.T_double :", "-                            case TypeIds.T_long :", "-                                resolvedPosition += 2;", "-                                break;", "-                            default:", "-                                resolvedPosition++;", "-                        }", "-                    }", "-                }", "-            }", "-        } else {", "-            TypeBinding[] arguments;", "-            if ((arguments = methodBinding.parameters) != null) {", "-                for (int i = 0, max = arguments.length; i < max; i++) {", "-                    final TypeBinding typeBinding = arguments[i];", "-                    frame.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "-                    switch(typeBinding.id) {", "-                        case TypeIds.T_double :", "-                        case TypeIds.T_long :", "-                            resolvedPosition += 2;", "-                            break;", "-                        default:", "-                            resolvedPosition++;", "-                    }", "-                }", "-            }", "-        }", "-    }", "-    try {", "-        this.frames = new ArrayList();", "-        this.frames.add(frame.clone());", "-    } catch (CloneNotSupportedException e) {", "-        e.printStackTrace();", "-    }", "-    this.currentFrame = frame;", "-    this.framePositions = new HashSet();", "-    this.variablesModificationsPositions = new ArrayList();", "-}", "+", "+public void initializeMaxLocals(MethodBinding methodBinding) {", "+\tsuper.initializeMaxLocals(methodBinding);", "+\tif (this.framePositions == null) {", "+\t\tthis.framePositions = new HashMap();", "+\t} else {", "+\t\tthis.framePositions.clear();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b804e53bf905f2cb06bdc91bc2613e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "8fb88598900ff0c1072aa7669424703dbc139194", "commitAfterChange": "4c091ce71f1c6a2472a4afd7104c5d8f3424456d", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["+\t\treturn suite(evaluationTestClass, suiteName, 3);", "+\t}", "-\t\t\t\t\tObject[] params = {\"test\" + methNameFormat.format(testsNumbers[i])};", "-\t\t\t\t\t\tObject[] params = {\"test\" + methNameFormat.format(i)};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbc13c3c7751c976d89532379939523c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "c749187c3509d25572fda835551dc23f15ce8895", "commitAfterChange": "807b2bf6b37b8c98063e0b73f3e9e111197c660a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["+\t\treturn suite(evaluationTestClass, suiteName, 3);", "+\t}", "-\t\t\t\t\tObject[] params = {\"test\" + methNameFormat.format(testsNumbers[i])};", "-\t\t\t\t\t\tObject[] params = {\"test\" + methNameFormat.format(i)};"]}], "num": 30053}
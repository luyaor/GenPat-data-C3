{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68503a3e7319c2c15fd5ac000c5dbb8a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3270b680f5075ee3edb21bcbbb9d86a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/VariablePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public VariablePattern( \tint kind, \tboolean findDeclarations, \tboolean readAccess, \tboolean writeAccess, \tchar[] name,  \tint matchMode,  \tboolean isCaseSensitive)", "signatureAfterChange": " \t public VariablePattern( \tint patternKind, \tboolean findDeclarations, \tboolean readAccess, \tboolean writeAccess, \tchar[] name, \tint matchRule)", "diff": ["-\tint kind,", "+\tint patternKind,", "-\tchar[] name, ", "-\tint matchMode, ", "-\tboolean isCaseSensitive) {", "+\tchar[] name,", "+\tint matchRule) {", "-\tsuper(kind, matchMode, isCaseSensitive);", "+\tsuper(patternKind, matchRule);", "-\tthis.name = isCaseSensitive ? name : CharOperation.toLowerCase(name);", "+\tthis.name = isCaseSensitive() ? name : CharOperation.toLowerCase(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62bc4529e3124b5e191cb156c0a2e68e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public AndPattern(int kind, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": " \t public AndPattern(int patternKind, int matchRule)", "diff": ["-public abstract class AndPattern extends SearchPattern {", "-public AndPattern(int kind, int matchMode, boolean isCaseSensitive) {", "-\tsuper(kind, matchMode, isCaseSensitive);", "+\t", "+public AndPattern(int patternKind, int matchRule) {", "+\tsuper(patternKind, matchRule);"]}], "num": 40145}
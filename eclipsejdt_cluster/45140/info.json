{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7c96d75c95c8d0ddcd7b09273a5d809", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0385cc6ba8224f02cfba10a7839796fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "signatureAfterChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "diff": ["+\t\tcase ReceiverTypeNotVisible :", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.NotVisibleType,", "+\t\t\t\tnew String[] {new String(searchedType.leafComponentType().readableName())},", "+\t\t\t\tnew String[] {new String(searchedType.leafComponentType().shortReadableName())},", "+\t\t\t\tfieldRef.receiver.sourceStart,", "+\t\t\t\tfieldRef.receiver.sourceEnd);", "+\t\t\treturn;", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57b958ba523a0d1237f115c5643e06fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "86113d82738e778f8e0f07729ab352d227a867ad", "commitAfterChange": "2d89f0516f5e5910bcd18015e8090ed0805dbb4e", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": " public void incorrectSwitchType(Expression expression, TypeBinding testType)", "signatureAfterChange": " public void incorrectSwitchType(Expression expression, TypeBinding testType)", "diff": ["-\t\t\tthis.handle(", "-\t\t\t\tIProblem.IncorrectSwitchType,", "-\t\t\t\tnew String[] {new String(testType.readableName())},", "-\t\t\t\tnew String[] {new String(testType.shortReadableName())},", "-\t\t\t\texpression.sourceStart,", "-\t\t\t\texpression.sourceEnd);", "+\t\t\tif (this.options.sourceLevel < ClassFileConstants.JDK1_5 && testType.isEnum()) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.SwitchOnEnumNotBelow15,", "+\t\t\t\t\t\tnew String[] {new String(testType.readableName())},", "+\t\t\t\t\t\tnew String[] {new String(testType.shortReadableName())},", "+\t\t\t\t\t\texpression.sourceStart,", "+\t\t\t\t\t\texpression.sourceEnd);", "+\t\t\t} else {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.IncorrectSwitchType,", "+\t\t\t\t\t\tnew String[] {new String(testType.readableName())},", "+\t\t\t\t\t\tnew String[] {new String(testType.shortReadableName())},", "+\t\t\t\t\t\texpression.sourceStart,", "+\t\t\t\t\t\texpression.sourceEnd);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b74548f860f8abff6e7c604e3b819f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ab74babcdf0f89ee66e36b91189c0d301a4da95d", "commitAfterChange": "66a4221dd418603b7f2bc6722d99e4e300585ef1", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": " public void javadocDeprecatedType(TypeBinding type, ASTNode location, int modifiers)", "signatureAfterChange": " public void javadocDeprecatedType(TypeBinding type, ASTNode location, int modifiers)", "diff": ["-\t\tthis.handle(", "-\t\t\tIProblem.JavadocUsingDeprecatedType,", "-\t\t\tnew String[] {new String(type.readableName())},", "-\t\t\tnew String[] {new String(type.shortReadableName())},", "-\t\t\tseverity,", "-\t\t\tlocation.sourceStart,", "-\t\t\tlocation.sourceEnd);", "+\t\tif (type.isMemberType() && type instanceof ReferenceBinding && !javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, ((ReferenceBinding)type).modifiers)) {", "+\t\t\tthis.handle(IProblem.JavadocNotVisibleReference, NoArgument, NoArgument, location.sourceStart, location.sourceEnd);", "+\t\t} else {", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.JavadocUsingDeprecatedType,", "+\t\t\t\tnew String[] {new String(type.readableName())},", "+\t\t\t\tnew String[] {new String(type.shortReadableName())},", "+\t\t\t\tseverity,", "+\t\t\t\tlocation.sourceStart,", "+\t\t\t\tlocation.sourceEnd);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bb28ed0bf90eae004967e42a5d596c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+\t\tcase ReceiverTypeNotVisible :", "+\t\t\tthis.handle(", "+\t\t\t\tIProblem.NotVisibleType,", "+\t\t\t\tnew String[] {new String(method.declaringClass.leafComponentType().readableName())},", "+\t\t\t\tnew String[] {new String(method.declaringClass.leafComponentType().shortReadableName())},", "+\t\t\t\tmessageSend.receiver.sourceStart,", "+\t\t\t\tmessageSend.receiver.sourceEnd);", "+\t\t\treturn;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69bcaff4e6887578ff4d47b71dd92d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 179, "signatureBeforeChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "signatureAfterChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "diff": ["+\t\t\tif ((searchedType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.handle(", "+\t\t\t\t\t\tIProblem.UndefinedType,", "+\t\t\t\t\t\tnew String[] {new String(searchedType.leafComponentType().readableName())},", "+\t\t\t\t\t\tnew String[] {new String(searchedType.leafComponentType().shortReadableName())},", "+\t\t\t\t\t\tfieldRef.receiver.sourceStart,", "+\t\t\t\t\t\tfieldRef.receiver.sourceEnd);", "+\t\t\t\t\treturn;", "+\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc73c4abe4cfa6ce33398357249aff24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 81, "signatureBeforeChange": "  public void duplicateInheritedMethods(SourceTypeBinding type, MethodBinding inheritedMethod1, MethodBinding inheritedMethod2)", "signatureAfterChange": "  public void duplicateInheritedMethods(SourceTypeBinding type, MethodBinding inheritedMethod1, MethodBinding inheritedMethod2)", "diff": ["+\tif (inheritedMethod1.declaringClass != inheritedMethod2.declaringClass) {", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateInheritedMethods,", "+\t\t\tnew String[] {", "+\t\t        new String(inheritedMethod1.selector),", "+\t\t\t\ttypesAsString(inheritedMethod1, inheritedMethod1.original().parameters, false),", "+\t\t\t\ttypesAsString(inheritedMethod2, inheritedMethod2.original().parameters, false),", "+\t\t\t\tnew String(inheritedMethod1.declaringClass.readableName()),", "+\t\t\t\tnew String(inheritedMethod2.declaringClass.readableName()),", "+\t\t\t},", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(inheritedMethod1.selector),", "+\t\t\t\ttypesAsString(inheritedMethod1, inheritedMethod1.original().parameters, true),", "+\t\t\t\ttypesAsString(inheritedMethod2, inheritedMethod2.original().parameters, true),", "+\t\t\t\tnew String(inheritedMethod1.declaringClass.shortReadableName()),", "+\t\t\t\tnew String(inheritedMethod2.declaringClass.shortReadableName()),", "+\t\t\t},", "+\t\t\ttype.sourceStart(),", "+\t\t\ttype.sourceEnd());", "+\t\treturn;", "+\t}", "+\t// Handle duplicates from same class.", "-\t\t\ttypesAsString(inheritedMethod1.isVarargs(), inheritedMethod1.original().parameters, false),", "-\t\t\ttypesAsString(inheritedMethod2.isVarargs(), inheritedMethod2.original().parameters, false)},", "+\t\t\ttypesAsString(inheritedMethod1, inheritedMethod1.original().parameters, false),", "+\t\t\ttypesAsString(inheritedMethod2, inheritedMethod2.original().parameters, false)},", "-\t\t\ttypesAsString(inheritedMethod1.isVarargs(), inheritedMethod1.original().parameters, true),", "-\t\t\ttypesAsString(inheritedMethod2.isVarargs(), inheritedMethod2.original().parameters, true)},", "+\t\t\ttypesAsString(inheritedMethod1, inheritedMethod1.original().parameters, true),", "+\t\t\ttypesAsString(inheritedMethod2, inheritedMethod2.original().parameters, true)},"]}], "num": 45140}
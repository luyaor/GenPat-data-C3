{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d90d0be6b9f7f43bb2312b03e67c060", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8f495c35985bfafd729b78ed4c511b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding)", "diff": ["-\t", "-\tprotected TypeBinding getTypeBinding(Scope scope) {", "-\t\t", "-\t\tif (this.resolvedType != null)", "-\t\t\treturn this.resolvedType;", "+", "+\tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding) {", "-\t\t\treturn scope.getType(this.tokens, this.tokens.length);", "+\t\t    if (this.resolvedType == null) {", "+\t\t\t\tthis.resolvedType = scope.getType(this.tokens[tokenIndex], packageBinding);", "+\t\t    } else {", "+\t\t\t    this.resolvedType = scope.getMemberType(this.tokens[tokenIndex], (ReferenceBinding) this.resolvedType);", "+\t\t\t\tif (this.resolvedType instanceof ProblemReferenceBinding) {", "+\t\t\t\t\tProblemReferenceBinding problemBinding = (ProblemReferenceBinding) this.resolvedType;", "+\t\t\t\t\tthis.resolvedType = new ProblemReferenceBinding(", "+\t\t\t\t\t\torg.eclipse.jdt.core.compiler.CharOperation.subarray(this.tokens, 0, tokenIndex + 1),", "+\t\t\t\t\t\tproblemBinding.original,", "+\t\t\t\t\t\tthis.resolvedType.problemId());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t    return this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d654df1d43754988ed7ae1082779797c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "848c414ceb7f8dfa6bf1cb908b31047bf78910eb", "commitAfterChange": "827bc8f09eb6be33972723284a202745477c7656", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\t} else if (isArrayConstructorReference()) {", "+\t\t\t// We don't care for annotations, source positions etc. They are immaterial, just drop.", "+\t\t\tArrayAllocationExpression arrayAllocationExpression = new ArrayAllocationExpression();", "+\t\t\tarrayAllocationExpression.dimensions = new Expression[] { argv[0] };", "+\t\t\tif (this.lhs instanceof ArrayTypeReference) {", "+\t\t\t\tArrayTypeReference arrayTypeReference = (ArrayTypeReference) this.lhs;", "+\t\t\t\tarrayAllocationExpression.type = arrayTypeReference.dimensions == 1 ? new SingleTypeReference(arrayTypeReference.token, 0L) : ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ArrayTypeReference(arrayTypeReference.token, arrayTypeReference.dimensions - 1, 0L);", "+\t\t\t} else {", "+\t\t\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference = (ArrayQualifiedTypeReference) this.lhs;", "+\t\t\t\tarrayAllocationExpression.type = arrayQualifiedTypeReference.dimensions == 1 ? new QualifiedTypeReference(arrayQualifiedTypeReference.tokens, arrayQualifiedTypeReference.sourcePositions)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: new ArrayQualifiedTypeReference(arrayQualifiedTypeReference.tokens, arrayQualifiedTypeReference.dimensions - 1, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayQualifiedTypeReference.sourcePositions);", "+\t\t\t}", "+\t\t\timplicitLambda.setBody(arrayAllocationExpression);"]}], "num": 33188}
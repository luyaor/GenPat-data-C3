{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "158e66ae7845cb998e126a1445e44d66", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "072a0919608ce69a7d9179e6ddc14a07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void test079()", "signatureAfterChange": " public void test079() throws Exception", "diff": ["-public void test079() {", "+public void test079() throws Exception {", "-\tString actualOutput = null;", "-\ttry {", "-\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "-\t\tactualOutput =", "-\t\t\tdisassembler.disassemble(", "-\t\t\t\tclassFileBytes,", "-\t\t\t\t\"\\n\",", "-\t\t\t\tClassFileBytesDisassembler.DETAILED);", "-\t\t", "-\t\tfor (int i = 0, max = expectedOutputs.length; i < max; i++) {", "-\t\t\tString expectedOutput = expectedOutputs[i];", "-\t\t\tint index = actualOutput.indexOf(expectedOutput);", "-\t\t\tif (index == -1 || expectedOutput.length() == 0) {", "-\t\t\t\tSystem.out.println(Util.displayString(actualOutput, 3));", "-\t\t\t}", "-\t\t\tif (index == -1) {", "-\t\t\t\tassertEquals(\"Wrong contents\", expectedOutput, actualOutput);", "-\t\t\t}", "+\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "+\tString actualOutput =", "+\t\tdisassembler.disassemble(", "+\t\t\tclassFileBytes,", "+\t\t\t\"\\n\",", "+\t\t\tClassFileBytesDisassembler.DETAILED);", "+\t", "+\tfor (int i = 0, max = expectedOutputs.length; i < max; i++) {", "+\t\tString expectedOutput = expectedOutputs[i];", "+\t\tint index = actualOutput.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(actualOutput, 3));", "-\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\tassertTrue(\"ClassFormatException\", false);", "-\t} catch (IOException e) {", "-\t\tassertTrue(\"IOException\", false);", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, actualOutput);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a4f1a595c16cd27983793774e78d2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test003()", "signatureAfterChange": " \tpublic void test003() throws Exception", "diff": ["-\tpublic void test003() {", "+\tpublic void test003() throws Exception {", "-\t\tString actualOutput = null;", "-\t\ttry {", "-\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  + \"X$1LocalClass.class\"));", "-\t\t\tactualOutput =", "-\t\t\t\tdisassembler.disassemble(", "-\t\t\t\t\tclassFileBytes,", "-\t\t\t\t\t\"\\n\",", "-\t\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  + \"X$1LocalClass.class\"));", "+\t\tString actualOutput =", "+\t\t\tdisassembler.disassemble(", "+\t\t\t\tclassFileBytes,", "+\t\t\t\t\"\\n\",", "+\t\t\t\tClassFileBytesDisassembler.DETAILED); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325e89a5661b4c914ffca8e75b186ecc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "ac57d09afd251c5c3e8f5a329155e4ee05cc3840", "commitAfterChange": "87c50fb2021a87bd8a7e850d4f8d8664d740e464", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate IProject createExternalFoldersProject(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate IProject createExternalFoldersProject(IProgressMonitor monitor) throws CoreException", "diff": ["-\tprivate IProject createExternalFoldersProject(IProgressMonitor monitor) {", "+\tprivate IProject createExternalFoldersProject(IProgressMonitor monitor) throws CoreException {", "+\t\t\tif (!project.exists()) {", "+\t\t\t\tcreateExternalFoldersProject(project, monitor);", "+\t\t\t}", "-\t\t\t\tif (!project.exists()) {", "+\t\t\t\tproject.open(monitor);", "+\t\t\t} catch (CoreException e1) {", "+\t\t\t\tif (e1.getStatus().getCode() == IResourceStatus.FAILED_READ_METADATA) {", "+\t\t\t\t\t// workspace was moved (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=241400)", "+\t\t\t\t\tproject.delete(true, monitor);", "-\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\tproject.open(monitor);", "-\t\t\t\t} catch (CoreException e1) {", "-\t\t\t\t\tif (e1.getStatus().getCode() == IResourceStatus.FAILED_READ_METADATA) {", "-\t\t\t\t\t\t// workspace was moved (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=241400)", "-\t\t\t\t\t\tproject.delete(true, monitor);", "-\t\t\t\t\t\tcreateExternalFoldersProject(project, monitor);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// .project or folder on disk have been deleted, recreate them", "-\t\t\t\t\t\tIPath stateLocation = DEBUG ? ResourcesPlugin.getWorkspace().getRoot().getLocation() : JavaCore.getPlugin().getStateLocation();", "-\t\t\t\t\t\tIPath projectPath = stateLocation.append(EXTERNAL_PROJECT_NAME);", "-\t\t\t\t\t\tprojectPath.toFile().mkdirs();", "+\t\t\t\t} else {", "+\t\t\t\t\t// .project or folder on disk have been deleted, recreate them", "+\t\t\t\t\tIPath stateLocation = DEBUG ? ResourcesPlugin.getWorkspace().getRoot().getLocation() : JavaCore.getPlugin().getStateLocation();", "+\t\t\t\t\tIPath projectPath = stateLocation.append(EXTERNAL_PROJECT_NAME);", "+\t\t\t\t\tprojectPath.toFile().mkdirs();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// fallback to re-creating the project", "+\t\t\t\t\t\tproject.delete(true, monitor);", "+\t\t\t\t\t\tcreateExternalFoldersProject(project, monitor);", "-\t\t\t\t\tproject.open(monitor);", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tUtil.log(e, \"Problem creating hidden project for external folders\"); //$NON-NLS-1$", "-\t\t\t\treturn project;", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tUtil.log(e, \"Problem creating hidden project for external folders\"); //$NON-NLS-1$", "-\t\t\t\treturn project;", "+\t\t\t\tproject.open(monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744cf9ae2e529c44d8833b664637c6c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate String disassembleSingleFile(String fileName) throws IOException", "signatureAfterChange": "  \tprivate String disassembleSingleFile(String fileName) throws IOException", "diff": ["-\t\tIClassFileReader classFileReader = null;", "-\t\ttry {", "-\t\t\tclassFileReader = new ClassFileReader(Util.getBytes(fileName), DecodingFlag.ALL);", "-\t\t} catch(ClassFormatException e) {", "-\t\t\treturn null;", "-\t\t} catch(IOException e) {", "-\t\t\treturn null;", "-\t\t}", "+\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(fileName, DecodingFlag.ALL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddbdf4f8b6ae0537c55e507e4274b87e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathJar.java", "commitBeforeChange": "fb1cdfed170508154ac69c6283fb498228204f0f", "commitAfterChange": "524f4ffae49579e103a152caac281a0f346c952b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t\r \r ClasspathJar(String zipFilename)", "signatureAfterChange": "\t\r \r ClasspathJar(String zipFilename)", "diff": ["-\ttry {\r", "-\t\tthis.zipFilename = zipFilename;\r", "-\t\tthis.zipFile = new ZipFile(new File(zipFilename));\r", "-\t\tbuildDirectoryStructure();\r", "-\t} catch(IOException e) {\r", "-\t\tdirectoryCache = new SimpleLookupTable();\r", "-\t}\r", "+\tthis.zipFilename = zipFilename;\r", "+\tthis.zipFile = null;\r", "+\tthis.directoryCache = null;\r"]}], "num": 15008}
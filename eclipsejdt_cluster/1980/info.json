{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cfb18b0cad39c574adaadf8edf4f93d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2962af4ad86a5e8e0a2ff2898754a534", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "f4e74d70f4887f5aa91dac7da4ca9525dd9faf46", "commitAfterChange": "67e2d890d140f0b0ae567bdbbeeb1263627c1c3f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\tfor (int i = 0; i < enumConstants.size() - 1; i++) {", "+\t\tfor (int i = 0; i < enumConstants.size(); i++) {", "-\t\t\tif (declaration.getAnonymousClassDeclaration() != null)", "+\t\t\tif (declaration.getJavadoc() != null)", "+\t\t\t\tthis.tm.firstTokenIn(declaration, TokenNameCOMMENT_JAVADOC).breakBefore();", "+\t\t\tif (declaration.getAnonymousClassDeclaration() != null && i < enumConstants.size() - 1)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ea250b8df319b44fdf88595d46ad57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["+\t\t\t\t\t\tif (concreteMatch != null && concreteMatch.declaringClass.findSuperTypeWithSameErasure(compatibleMethod.declaringClass) != null)", "+\t\t\t\t\t\t\tif (environment().methodVerifier().doesMethodOverride(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it"]}], "num": 1980}
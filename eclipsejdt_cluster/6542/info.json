{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cccd0000d17a306e26d58208df53277", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852cb4f55cd1727b5c110f295f40ef7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 29, "signatureBeforeChange": "\t \tpublic AccessRestriction getImportRestriction()", "signatureAfterChange": " \t \tprivate String getMessageTemplate()", "diff": ["+\t", "+\tprivate String getMessageTemplate() {", "+\t\tif (this.entryKind == CPE_PROJECT || this.entryKind == CPE_SOURCE) { // can be remote source entry when reconciling", "+\t\t\treturn org.eclipse.jdt.internal.core.util.Util.bind(\"restrictedAccess.project\", \"{0}\", getPath().segment(0)); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t} else {", "+\t\t\tIPath libPath = getPath();", "+\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), libPath, false);", "+\t\t\tString pathString;", "+\t\t\tif (target instanceof java.io.File)", "+\t\t\t\tpathString = libPath.toOSString();", "+\t\t\telse", "+\t\t\t\tpathString = libPath.makeRelative().toString();", "+\t\t\treturn org.eclipse.jdt.internal.core.util.Util.bind(\"restrictedAccess.library\", \"{0}\", pathString); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t}", "-\t */\t", "-\tpublic AccessRestriction getImportRestriction() {", "-\t\t", "-\t\tif (this.importRestriction == UNINIT_RESTRICTION) {", "-\t\t\tchar[][] accessibleFilesPatterns = getAccessRestrictionPatterns(this.accessibleFiles);", "-\t\t\tchar[][] nonAccessibleFilesPatterns = getAccessRestrictionPatterns(this.nonAccessibleFiles);", "-\t\t\tif (accessibleFilesPatterns == null && nonAccessibleFilesPatterns == null) {", "-\t\t\t\tthis.importRestriction = null;", "-\t\t\t} else {", "-\t\t\t\tString messageTemplate;", "-\t\t\t\tif (this.entryKind == CPE_PROJECT || this.entryKind == CPE_SOURCE) { // can be remote source entry when reconciling", "-\t\t\t\t\tmessageTemplate = org.eclipse.jdt.internal.core.util.Util.bind(\"restrictedAccess.project\", \"{0}\", getPath().segment(0)); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t} else {", "-\t\t\t\t\tIPath libPath = getPath();", "-\t\t\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), libPath, false);", "-\t\t\t\t\tString pathString;", "-\t\t\t\t\tif (target instanceof java.io.File)", "-\t\t\t\t\t\tpathString = libPath.toOSString();", "-\t\t\t\t\telse", "-\t\t\t\t\t\tpathString = libPath.makeRelative().toString();", "-\t\t\t\t\tmessageTemplate = org.eclipse.jdt.internal.core.util.Util.bind(\"restrictedAccess.library\", \"{0}\", pathString); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t}\t", "-\t\t\t\tthis.importRestriction = ", "-\t\t\t\t\tnew AccessRestriction(", "-\t\t\t\t\t\tmessageTemplate,", "-\t\t\t\t\t\taccessibleFilesPatterns, ", "-\t\t\t\t\t\tnonAccessibleFilesPatterns,", "-\t\t\t\t\t\tnull /* no further restriction */);", "-\t\t\t}", "-\t\t}", "-\t\treturn this.importRestriction;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cecd7ffd7eb0aa24d140a8154821ebdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "45457c087850a9bcb1e2d528c971be662d0a4e96", "commitAfterChange": "40ad9904e939ba54abece52421044021edd6e1c0", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " void scanTypeForNullAnnotation(IBinaryType binaryType)", "signatureAfterChange": " void scanPackageInfoForNullDefaultAnnotation(IBinaryType binaryType)", "diff": ["-void scanTypeForNullAnnotation(IBinaryType binaryType) {", "-\tif (!this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled)", "-\t\treturn;", "+void scanPackageInfoForNullDefaultAnnotation(IBinaryType binaryType) {", "-\t\tlong annotationBit = 0L;", "-\t\tTypeBinding defaultNullness = null;", "-\t\tfor (int i = 0; i < annotations.length; i++) {", "+\t\tint length = annotations.length;", "+\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tannotationBit = TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\t\tdefaultNullness = ReferenceBinding.NULL_UNSPECIFIED;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tthis.getPackage().nullnessDefaultAnnotation = ReferenceBinding.NULL_UNSPECIFIED;", "+\t\t\t\t\t\treturn;", "-\t\t\t\tannotationBit = TagBits.AnnotationNonNullByDefault;", "-\t\t\t\tdefaultNullness = this.environment.getNullAnnotationBinding(TagBits.AnnotationNonNull, false/*resolve*/);", "-\t\t\t\tbreak;", "+\t\t\t\tthis.getPackage().nullnessDefaultAnnotation = ", "+\t\t\t\t\t\tthis.environment.getNullAnnotationBinding(TagBits.AnnotationNonNull, false/*resolve*/);", "+\t\t\t\treturn;", "-\t\t}", "-\t\tif (annotationBit != 0L) {", "-\t\t\tthis.tagBits |= annotationBit;", "-\t\t\tif (CharOperation.equals(this.sourceName(), TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\tthis.getPackage().nullnessDefaultAnnotation = defaultNullness;"]}], "num": 6542}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0de021ed43c274cae0c5dfcfdd46f05", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bbcc36c1ac33438c6dfbd61f738f802", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "618a6ff3d34de5a5e41db8b1f1893c42061e44cd", "commitAfterChange": "71dea98c1d878b28c8144aaff13d309d86912875", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate static void checkContainingAnnotationTarget(ASTNode markerNode, Scope scope, ReferenceBinding container, ReferenceBinding repeatableAnnotation)", "signatureAfterChange": " \tprivate static void checkContainerAnnotationTypeTarget(ASTNode culpritNode, Scope scope, ReferenceBinding containerType, ReferenceBinding repeatableAnnotationType)", "diff": ["-\tprivate static void checkContainingAnnotationTarget(ASTNode markerNode, Scope scope, ReferenceBinding container, ReferenceBinding repeatableAnnotation) {", "-\t\tlong tagBits = repeatableAnnotation.getAnnotationTagBits();", "-\t\tif ((tagBits & TagBits.AnnotationTargetMASK) != 0) { ", "-\t\t\tlong containingTagBits = container.getAnnotationTagBits();", "-\t\t\tif ((containingTagBits & TagBits.AnnotationTargetMASK) == 0) {", "-\t\t\t\trepeatableAnnotation.tagAsHavingDefectiveContainerType();", "-\t\t\t\tscope.problemReporter().repeatableAnnotationHasTargets(markerNode, repeatableAnnotation, container);", "-\t\t\t} else {", "-\t\t\t\tfinal long targets = tagBits & TagBits.AnnotationTargetMASK;", "-\t\t\t\tfinal long containingTargets = containingTagBits & TagBits.AnnotationTargetMASK;", "-\t\t\t\t", "-\t\t\t\tif ((containingTargets & ~targets) != 0) {", "-\t\t\t\t\tclass MissingTargetBuilder {", "-\t\t\t\t\t\tStringBuffer targetBuffer = new StringBuffer();", "-\t\t\t\t\t\tvoid check(long targetMask, char[] targetName) {", "-\t\t\t\t\t\t\tif ((containingTargets & targetMask & ~targets) != 0) {", "-\t\t\t\t\t\t\t\tadd(targetName);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tvoid checkAnnotationType(char[] targetName) {", "-\t\t\t\t\t\t\tif ((containingTargets & TagBits.AnnotationForAnnotationType) != 0 &&", "-\t\t\t\t\t\t\t\t\t((targets & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType))) == 0) {", "-\t\t\t\t\t\t\t\tadd(targetName);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tprivate void add(char[] targetName) {", "-\t\t\t\t\t\t\tif (this.targetBuffer.length() != 0) {", "-\t\t\t\t\t\t\t\tthis.targetBuffer.append(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.targetBuffer.append(targetName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic String toString() {", "-\t\t\t\t\t\t\treturn this.targetBuffer.toString();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic boolean hasError() {", "-\t\t\t\t\t\t\treturn this.targetBuffer.length() != 0;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tMissingTargetBuilder builder = new MissingTargetBuilder();", "+\tprivate static void checkContainerAnnotationTypeTarget(ASTNode culpritNode, Scope scope, ReferenceBinding containerType, ReferenceBinding repeatableAnnotationType) {", "+\t\tlong tagBits = repeatableAnnotationType.getAnnotationTagBits();", "+\t\tif ((tagBits & TagBits.AnnotationTargetMASK) == 0)", "+\t\t\ttagBits = TagBits.SE7AnnotationTargetMASK; // absence of @Target meta-annotation implies all SE7 targets not all targets.", "+\t\t", "+\t\tlong containerAnnotationTypeTypeTagBits = containerType.getAnnotationTagBits();", "+\t\tif ((containerAnnotationTypeTypeTagBits & TagBits.AnnotationTargetMASK) == 0)", "+\t\t\tcontainerAnnotationTypeTypeTagBits = TagBits.SE7AnnotationTargetMASK;", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForType, TypeConstants.TYPE);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForField, TypeConstants.UPPER_FIELD);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForMethod, TypeConstants.UPPER_METHOD);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForParameter, TypeConstants.UPPER_PARAMETER);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForConstructor, TypeConstants.UPPER_CONSTRUCTOR);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForLocalVariable, TypeConstants.UPPER_LOCAL_VARIABLE);", "-\t\t\t\t\tbuilder.checkAnnotationType(TypeConstants.UPPER_ANNOTATION_TYPE);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForPackage, TypeConstants.UPPER_PACKAGE);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForTypeParameter, TypeConstants.TYPE_PARAMETER_TARGET);", "-\t\t\t\t\tbuilder.check(TagBits.AnnotationForTypeUse, TypeConstants.TYPE_USE_TARGET);", "-\t\t\t\t\tif (builder.hasError()) {", "-\t\t\t\t\t\trepeatableAnnotation.tagAsHavingDefectiveContainerType();", "-\t\t\t\t\t\tscope.problemReporter().repeatableAnnotationTargetMismatch(markerNode, repeatableAnnotation, container, builder.toString());", "+\t\tfinal long targets = tagBits & TagBits.AnnotationTargetMASK;", "+\t\tfinal long containerAnnotationTypeTargets = containerAnnotationTypeTypeTagBits & TagBits.AnnotationTargetMASK;", "+", "+\t\tif ((containerAnnotationTypeTargets & ~targets) != 0) {", "+\t\t\tclass MissingTargetBuilder {", "+\t\t\t\tStringBuffer targetBuffer = new StringBuffer();", "+\t\t\t\tvoid check(long targetMask, char[] targetName) {", "+\t\t\t\t\tif ((containerAnnotationTypeTargets & targetMask & ~targets) != 0) {", "+\t\t\t\t\t\tadd(targetName);", "+\t\t\t\tvoid checkAnnotationType(char[] targetName) {", "+\t\t\t\t\tif ((containerAnnotationTypeTargets & TagBits.AnnotationForAnnotationType) != 0 &&", "+\t\t\t\t\t\t\t((targets & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType))) == 0) {", "+\t\t\t\t\t\tadd(targetName);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tprivate void add(char[] targetName) {", "+\t\t\t\t\tif (this.targetBuffer.length() != 0) {", "+\t\t\t\t\t\tthis.targetBuffer.append(\", \"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.targetBuffer.append(targetName);", "+\t\t\t\t}", "+\t\t\t\tpublic String toString() {", "+\t\t\t\t\treturn this.targetBuffer.toString();", "+\t\t\t\t}", "+\t\t\t\tpublic boolean hasError() {", "+\t\t\t\t\treturn this.targetBuffer.length() != 0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tMissingTargetBuilder builder = new MissingTargetBuilder();", "+", "+\t\t\tbuilder.check(TagBits.AnnotationForType, TypeConstants.TYPE);", "+\t\t\tbuilder.check(TagBits.AnnotationForField, TypeConstants.UPPER_FIELD);", "+\t\t\tbuilder.check(TagBits.AnnotationForMethod, TypeConstants.UPPER_METHOD);", "+\t\t\tbuilder.check(TagBits.AnnotationForParameter, TypeConstants.UPPER_PARAMETER);", "+\t\t\tbuilder.check(TagBits.AnnotationForConstructor, TypeConstants.UPPER_CONSTRUCTOR);", "+\t\t\tbuilder.check(TagBits.AnnotationForLocalVariable, TypeConstants.UPPER_LOCAL_VARIABLE);", "+\t\t\tbuilder.checkAnnotationType(TypeConstants.UPPER_ANNOTATION_TYPE);", "+\t\t\tbuilder.check(TagBits.AnnotationForPackage, TypeConstants.UPPER_PACKAGE);", "+\t\t\tbuilder.check(TagBits.AnnotationForTypeParameter, TypeConstants.TYPE_PARAMETER_TARGET);", "+\t\t\tbuilder.check(TagBits.AnnotationForTypeUse, TypeConstants.TYPE_USE_TARGET);", "+\t\t\tif (builder.hasError()) {", "+\t\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\t\tscope.problemReporter().repeatableAnnotationTargetMismatch(culpritNode, repeatableAnnotationType, containerType, builder.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd7871e0035238d473484ab51023c000", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "a8073c80a69f6c184e71b3ada3faf15faa3ff3ae", "commitAfterChange": "33e49b6e14282ee69dc2c2cf0c73bec5e674cdf2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// check (meta)target compatibility", "-\t\t\tcheckTargetCompatibility: {", "-\t\t\t\tif (!annotationType.isValidBinding()) {", "-\t\t\t\t\t// no need to check annotation usage if missing", "-\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t}", "-", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) {", "-\t\t\t\t\t// does not specify any target restriction - all locations supported in Java 7 and before are possible", "-\t\t\t\t\tif (kind == Binding.TYPE_PARAMETER || kind == Binding.TYPE_USE) {", "-\t\t\t\t\t\tscope.problemReporter().explitAnnotationTargetRequired(this);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t}", "-", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391201", "-\t\t\t\tif ((metaTagBits & TagBits.SE7AnnotationTargetMASK) == 0", "-\t\t\t\t\t\t&& (metaTagBits & (TagBits.AnnotationForTypeUse | TagBits.AnnotationForTypeParameter)) != 0) {", "-\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\t\t\tscope.problemReporter().invalidUsageOfTypeAnnotations(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t\tcase Binding.PACKAGE :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE_USE :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\t// jsr 308", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE :", "-\t\t\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType)) != 0)", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & (TagBits.AnnotationForType | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForPackage) != 0) {", "-\t\t\t\t\t\t\tif (CharOperation.equals(((ReferenceBinding)this.recipient).sourceName, TypeConstants.PACKAGE_INFO_NAME))", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.METHOD :", "-\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) this.recipient;", "-\t\t\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForConstructor | TagBits.AnnotationForTypeUse)) != 0)", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "-\t\t\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.FIELD :", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tFieldBinding sourceField = (FieldBinding) this.recipient;", "-\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "-\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.LOCAL :", "-\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding)this.recipient;", "-\t\t\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "-\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391196", "-\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForTypeParameter | TagBits.AnnotationForTypeUse)) != 0) {", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\tscope.problemReporter().disallowedTargetForAnnotation(this);", "-\t\t\t}", "+\t\t\tcheckAnnotationTarget(this, scope, annotationType, kind);"]}], "num": 5519}
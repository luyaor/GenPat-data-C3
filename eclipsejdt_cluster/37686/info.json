{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3189f4ccc9b77e23bc5ce9e95097b140", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b05233f6c840c043799d98db13ecca4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean isPatternSourceType, int depth, MatchLocator locator)", "signatureAfterChange": " int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean isPatternSourceType, int depth, MatchLocator locator)", "diff": ["-\t\t\t\t\trefinedAccuracy |= SearchMatch.RAW_MASK;", "+\t\t\t\t\trefinedAccuracy |= RAW_MASK;", "-\t\t\t\trefinedAccuracy |= SearchMatch.A_ERASURE;", "-\t\t\t\trefinedAccuracy &= ~SearchMatch.A_COMPATIBLE;", "+\t\t\t\trefinedAccuracy |= SearchPattern.R_ERASURE_MATCH;", "+\t\t\t\trefinedAccuracy &= ~SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\trefinedAccuracy |= SearchMatch.RAW_MASK;", "+\t\t\t\t\trefinedAccuracy |= RAW_MASK;", "-\t\t\t\trefinedAccuracy |= SearchMatch.RAW_MASK;", "+\t\t\t\trefinedAccuracy |= RAW_MASK;", "-\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\trefinedAccuracy |= SearchMatch.A_ERASURE;", "+\t\t\t\t\t\trefinedAccuracy |= SearchPattern.R_ERASURE_MATCH;", "-\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\treturn SearchMatch.A_ERASURE;", "+\t\t\treturn SearchPattern.R_ERASURE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2144577cc3b334545f5ecb4bd442ca7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " protected int refineAccuracy(int accuracy, TypeBinding[] argumentsBinding, MatchLocator locator, char[][] patternArguments, boolean hasTypeParameters)", "signatureAfterChange": " protected void updateMatch(TypeBinding[] argumentsBinding, MatchLocator locator, char[][] patternArguments, boolean hasTypeParameters)", "diff": ["-protected int refineAccuracy(int accuracy, TypeBinding[] argumentsBinding, MatchLocator locator, char[][] patternArguments, boolean hasTypeParameters) {", "-\t// We can only refine if locator has an unit scope.", "-\tif (locator.unitScope == null) return accuracy;", "+ */", "+protected void updateMatch(TypeBinding[] argumentsBinding, MatchLocator locator, char[][] patternArguments, boolean hasTypeParameters) {", "+\t// Only possible if locator has an unit scope.", "+\tif (locator.unitScope == null) return;", "-\tint refinedAccuracy =  accuracy;", "+", "+\t// Initialize match rule", "+\tint matchRule = match.getRule();", "+\tif (match.isRaw()) {", "+\t\tif (patternTypeArgsLength != 0) {", "+\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "+\t\t}", "+\t}", "+\tif (hasTypeParameters) {", "+\t\tmatchRule = SearchPattern.R_ERASURE_MATCH;", "+\t}", "+\t", "+\t// Compare arguments lengthes", "-\t\tif (patternTypeArgsLength == 0) {", "-\t\t\tif (hasTypeParameters) { // raw source type pattern is always compatible erasure...", "-\t\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE) // ...except if accuracy has been already refined", "-\t\t\t\t\trefinedAccuracy |= RAW_MASK;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (hasTypeParameters) {", "-\t\t\t\t// parameterized source type pattern is always an incompatible erasure match", "-\t\t\t\trefinedAccuracy |= SearchPattern.R_ERASURE_MATCH;", "-\t\t\t\trefinedAccuracy &= ~SearchPattern.R_EQUIVALENT_MATCH;", "-\t\t\t}", "+\t\tif (!match.isRaw() && hasTypeParameters) {", "+\t\t\t// generic patterns are always not compatible match", "+\t\t\tmatch.setRule(SearchPattern.R_ERASURE_MATCH);", "+\t\t\treturn;", "-\t\tif (patternTypeArgsLength==0) { // raw pattern", "-\t\t\t// if valid type arguments, then it is always compatible erasure except if accuracy has been already refined", "-\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE) {", "-\t\t\t\trefinedAccuracy |= RAW_MASK;", "+\t\tif (patternTypeArgsLength==0) {", "+\t\t\tif (!match.isRaw() || hasTypeParameters) {", "+\t\t\t\tmatch.setRule(matchRule & ~SearchPattern.R_FULL_MATCH);", "-\t\t\treturn refinedAccuracy;", "-\t\t} else  if (typeArgumentsLength==0) { // raw binding", "-\t\t\t// then it is always compatible erasure except if accuracy has been already refined", "-\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE)", "-\t\t\t\trefinedAccuracy |= RAW_MASK;", "-\t\t\treturn refinedAccuracy;", "+\t\t} else  if (typeArgumentsLength==0) {", "+\t\t\t// raw binding is always compatible", "+\t\t\tmatch.setRule(matchRule & ~SearchPattern.R_FULL_MATCH);", "+\t\t} else {", "+\t\t\tmatch.setRule(0); // impossible match", "-\t\treturn -1;", "+\t\treturn;", "-\tif (!hasTypeParameters) {", "+\tif (!hasTypeParameters && !match.isRaw() && (match.isEquivalent() || match.isExact())) {", "-\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\trefinedAccuracy |= SearchPattern.R_ERASURE_MATCH;", "+\t\t\t\t\t\tmatch.setRule(SearchPattern.R_ERASURE_MATCH);", "+\t\t\t\t\t\treturn;", "-\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchPattern.R_ERASURE_MATCH) refinedAccuracy |= SearchPattern.R_EQUIVALENT_MATCH;", "+\t\t\t\t\t\t\t\tmatchRule &= ~SearchPattern.R_FULL_MATCH;", "-\t\t\treturn SearchPattern.R_ERASURE_MATCH;", "+\t\t\tmatch.setRule(SearchPattern.R_ERASURE_MATCH);", "+\t\t\treturn;", "-\t// Return refined accuracy", "-\treturn refinedAccuracy;", "+\t// Set match rule", "+\tmatch.setRule(matchRule);"]}], "num": 37686}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b7521054b33092e4688dec0e171c0cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "345607dfb0caa9c20bc0cf087771382d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void complainOnDeferredChecks(FlowInfo flowInfo, BlockScope scope)", "diff": ["-\t\t\tif (this.nullCheckTypes[i] == ASSIGN_TO_NONNULL)", "+\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == ASSIGN_TO_NONNULL)", "-\t\t\tswitch (this.nullCheckTypes[i]) {", "+\t\t\tswitch (this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) {", "-\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47484e2289291b8d08ca3e0e2f113bf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java", "commitBeforeChange": "aadb2a658581a97e9459691d70634be53e0b7594", "commitAfterChange": "80724a8df94e8e8610a4d46586b0b0c806074736", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "\r \tpublic void testBinaryWithoutGenericSignature() throws CoreException, IOException", "signatureAfterChange": "\r \tpublic void testBinaryWithoutGenericSignature() throws CoreException, IOException", "diff": ["-\t\t\tassertTrue(\"Should be 1\", annotations.length == 1);\r", "-\t\t\tassertEquals(\"Annotation mismatch\", \"@T(value = 29)\", annotations[0].toString());\r", "+\t\t\tassertTrue(\"Should be 0\", annotations.length == 0);\r", "-\t\t\tassertTrue(\"Should be 1\", annotations.length == 1);\r", "-\t\t\tassertEquals(\"Annotation mismatch\", \"@T(value = 9)\", annotations[0].toString());\r", "+\t\t\tassertTrue(\"Should be 0\", annotations.length == 0);\r"]}], "num": 31060}
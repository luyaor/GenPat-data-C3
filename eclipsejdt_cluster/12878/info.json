{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7a98bc4435300f46c0cfc4d7b0da171", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa22c31e7fa14af83640d93acf30457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean getNextCharAsJavaIdentifierPart()", "signatureAfterChange": " public boolean getNextCharAsJavaIdentifierPart()", "diff": ["-\tint temp = currentPosition;", "+\tint temp = this.currentPosition;", "-\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "+\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\tcurrentPosition++;", "-\t\t\twhile (source[currentPosition] == 'u') {", "-\t\t\t\tcurrentPosition++;", "+\t\t\tthis.currentPosition++;", "+\t\t\twhile (this.source[this.currentPosition] == 'u') {", "+\t\t\t\tthis.currentPosition++;", "-\t\t\tif (((c1 = Character.getNumericValue(source[currentPosition++])) > 15", "+\t\t\tif (((c1 = Character.getNumericValue(this.source[this.currentPosition++])) > 15", "-\t\t\t\t|| ((c2 = Character.getNumericValue(source[currentPosition++])) > 15 || c2 < 0)", "-\t\t\t\t|| ((c3 = Character.getNumericValue(source[currentPosition++])) > 15 || c3 < 0)", "-\t\t\t\t|| ((c4 = Character.getNumericValue(source[currentPosition++])) > 15 || c4 < 0)) {", "-\t\t\t\tcurrentPosition = temp;", "+\t\t\t\t|| ((c2 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c2 < 0)", "+\t\t\t\t|| ((c3 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c3 < 0)", "+\t\t\t\t|| ((c4 = Character.getNumericValue(this.source[this.currentPosition++])) > 15 || c4 < 0)) {", "+\t\t\t\tthis.currentPosition = temp;", "-\t\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "-\t\t\tif (!Character.isJavaIdentifierPart(currentCharacter)) {", "-\t\t\t\tcurrentPosition = temp;", "+\t\t\tthis.currentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "+\t\t\t\tthis.currentPosition = temp;", "-\t\t\tif (withoutUnicodePtr == 0) {", "+\t\t\tif (this.withoutUnicodePtr == 0) {", "-\t\t\t\twithoutUnicodePtr = currentPosition - unicodeSize - startPosition;", "+\t\t\t\tthis.withoutUnicodePtr = this.currentPosition - unicodeSize - this.startPosition;", "-\t\t\t\t\tsource, ", "-\t\t\t\t\tstartPosition, ", "-\t\t\t\t\twithoutUnicodeBuffer, ", "+\t\t\t\t\tthis.source, ", "+\t\t\t\t\tthis.startPosition, ", "+\t\t\t\t\tthis.withoutUnicodeBuffer, ", "-\t\t\t\t\twithoutUnicodePtr); ", "+\t\t\t\t\tthis.withoutUnicodePtr); ", "-\t\t\tif (temp < cursorLocation && cursorLocation < currentPosition-1){", "+\t\t\tif (temp < this.cursorLocation && this.cursorLocation < this.currentPosition-1){", "-\t\t\t// store the current unicode, only if we did not pass the cursorLocation", "+\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\tif ((completionIdentifier != null)", "-\t\t\t\t|| (startPosition <= cursorLocation+1 && cursorLocation >= currentPosition-1)){", "-\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\tif ((this.completionIdentifier != null)", "+\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "+\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\t\tif (!Character.isJavaIdentifierPart(currentCharacter)) {", "-\t\t\t\tcurrentPosition = temp;", "+\t\t\tif (!Character.isJavaIdentifierPart(this.currentCharacter)) {", "+\t\t\t\tthis.currentPosition = temp;", "-\t\t\tif (withoutUnicodePtr != 0){", "-\t\t\t\t// store the current unicode, only if we did not pass the cursorLocation", "+\t\t\tif (this.withoutUnicodePtr != 0){", "+\t\t\t\t// store the current unicode, only if we did not pass the cursor location", "-\t\t\t\tif ((completionIdentifier != null)", "-\t\t\t\t\t|| (startPosition <= cursorLocation+1 && cursorLocation >= currentPosition-1)){", "-\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\tif ((this.completionIdentifier != null)", "+\t\t\t\t\t|| (this.startPosition <= this.cursorLocation+1 && this.cursorLocation >= this.currentPosition-1)){", "+\t\t\t\t\tthis.withoutUnicodeBuffer[++this.withoutUnicodePtr] = this.currentCharacter;", "-\t\tcurrentPosition = temp;", "+\t\tthis.currentPosition = temp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3087899d41152694f983bd96be34519d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public CodeSnippetClassFile( \torg.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding aType, \torg.eclipse.jdt.internal.compiler.ClassFile enclosingClassFile, \tboolean creatingProblemType)", "signatureAfterChange": " public CodeSnippetClassFile( \torg.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding aType, \torg.eclipse.jdt.internal.compiler.ClassFile enclosingClassFile, \tboolean creatingProblemType)", "diff": ["-\treferenceBinding = aType;", "-\theader = new byte[INITIAL_HEADER_SIZE];", "+\tthis.referenceBinding = aType;", "+\tthis.header = new byte[INITIAL_HEADER_SIZE];", "-\theader[headerOffset++] = (byte) (0xCAFEBABEL >> 24);", "-\theader[headerOffset++] = (byte) (0xCAFEBABEL >> 16);", "-\theader[headerOffset++] = (byte) (0xCAFEBABEL >> 8);", "-\theader[headerOffset++] = (byte) (0xCAFEBABEL >> 0);", "+\tthis.header[this.headerOffset++] = (byte) (0xCAFEBABEL >> 24);", "+\tthis.header[this.headerOffset++] = (byte) (0xCAFEBABEL >> 16);", "+\tthis.header[this.headerOffset++] = (byte) (0xCAFEBABEL >> 8);", "+\tthis.header[this.headerOffset++] = (byte) (0xCAFEBABEL >> 0);", "-\tlong targetJDK = referenceBinding.scope.environment().options.targetJDK;", "+\tlong targetJDK = this.referenceBinding.scope.environment().options.targetJDK;", "-\theader[headerOffset++] = (byte) (targetJDK >> 8); // minor high", "-\theader[headerOffset++] = (byte) (targetJDK >> 0); // minor low", "-\theader[headerOffset++] = (byte) (targetJDK >> 24); // major high", "-\theader[headerOffset++] = (byte) (targetJDK >> 16); // major low", "+\tthis.header[this.headerOffset++] = (byte) (targetJDK >> 8); // minor high", "+\tthis.header[this.headerOffset++] = (byte) (targetJDK >> 0); // minor low", "+\tthis.header[this.headerOffset++] = (byte) (targetJDK >> 24); // major high", "+\tthis.header[this.headerOffset++] = (byte) (targetJDK >> 16); // major low", "-\tconstantPoolOffset = headerOffset;", "-\theaderOffset += 2;", "-\tconstantPool = new CodeSnippetConstantPool(this);", "+\tthis.constantPoolOffset = this.headerOffset;", "+\tthis.headerOffset += 2;", "+\tthis.constantPool = new CodeSnippetConstantPool(this);", "-\tcontents = new byte[INITIAL_CONTENTS_SIZE];", "+\tthis.contents = new byte[INITIAL_CONTENTS_SIZE];", "-\tcontents[contentsOffset++] = (byte) (accessFlags >> 8);", "-\tcontents[contentsOffset++] = (byte) accessFlags;", "-\tint classNameIndex = constantPool.literalIndex(aType);", "-\tcontents[contentsOffset++] = (byte) (classNameIndex >> 8);", "-\tcontents[contentsOffset++] = (byte) classNameIndex;", "+\tthis.contents[this.contentsOffset++] = (byte) (accessFlags >> 8);", "+\tthis.contents[this.contentsOffset++] = (byte) accessFlags;", "+\tint classNameIndex = this.constantPool.literalIndex(aType);", "+\tthis.contents[this.contentsOffset++] = (byte) (classNameIndex >> 8);", "+\tthis.contents[this.contentsOffset++] = (byte) classNameIndex;", "-\t\tsuperclassNameIndex = constantPool.literalIndexForJavaLangObject();", "+\t\tsuperclassNameIndex = this.constantPool.literalIndexForJavaLangObject();", "-\t\t\t(aType.superclass == null ? 0 : constantPool.literalIndex(aType.superclass));", "+\t\t\t(aType.superclass == null ? 0 : this.constantPool.literalIndex(aType.superclass));", "-\tcontents[contentsOffset++] = (byte) (superclassNameIndex >> 8);", "-\tcontents[contentsOffset++] = (byte) superclassNameIndex;", "+\tthis.contents[this.contentsOffset++] = (byte) (superclassNameIndex >> 8);", "+\tthis.contents[this.contentsOffset++] = (byte) superclassNameIndex;", "-\tcontents[contentsOffset++] = (byte) (interfacesCount >> 8);", "-\tcontents[contentsOffset++] = (byte) interfacesCount;", "+\tthis.contents[this.contentsOffset++] = (byte) (interfacesCount >> 8);", "+\tthis.contents[this.contentsOffset++] = (byte) interfacesCount;", "-\t\t\tint interfaceIndex = constantPool.literalIndex(superInterfacesBinding[i]);", "-\t\t\tcontents[contentsOffset++] = (byte) (interfaceIndex >> 8);", "-\t\t\tcontents[contentsOffset++] = (byte) interfaceIndex;", "+\t\t\tint interfaceIndex = this.constantPool.literalIndex(superInterfacesBinding[i]);", "+\t\t\tthis.contents[this.contentsOffset++] = (byte) (interfaceIndex >> 8);", "+\t\t\tthis.contents[this.contentsOffset++] = (byte) interfaceIndex;", "-\tproduceDebugAttributes = referenceBinding.scope.environment().options.produceDebugAttributes;", "-\tinnerClassesBindings = new ReferenceBinding[INNER_CLASSES_SIZE];", "+\tthis.produceDebugAttributes = this.referenceBinding.scope.environment().options.produceDebugAttributes;", "+\tthis.innerClassesBindings = new ReferenceBinding[INNER_CLASSES_SIZE];", "-\tcodeStream = new CodeSnippetCodeStream(this);", "+\tthis.codeStream = new CodeSnippetCodeStream(this);", "-\t\tcodeStream.maxFieldCount = aType.scope.referenceType().maxFieldCount;", "+\t\tthis.codeStream.maxFieldCount = aType.scope.referenceType().maxFieldCount;", "-\t\tcodeStream.maxFieldCount = outermostClassFile.codeStream.maxFieldCount;", "+\t\tthis.codeStream.maxFieldCount = outermostClassFile.codeStream.maxFieldCount;"]}], "num": 12878}
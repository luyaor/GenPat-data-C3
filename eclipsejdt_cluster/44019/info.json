{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a420e34fccc09378372be33fb388c8c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9258f7e696a1b075661ad1287262ad4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "7ea60a7b6970ae1932f1363685910c0b3ca8b604", "commitAfterChange": "96878bc07e7a9647f60558b58f70b91ca3d6868a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif ((continueLabel != null) && (increments != null)) {", "-\t\t\tLoopingFlowContext loopContext =", "-\t\t\t\tnew LoopingFlowContext(flowContext, this, null, null, scope);", "-\t\t\tfor (int i = 0, count = increments.length; i < count; i++) {", "-\t\t\t\tactionInfo = increments[i].analyseCode(scope, loopContext, actionInfo);", "+\t\tFlowInfo exitBranch = flowInfo.initsWhenFalse();", "+\t\tif (continueLabel != null) {", "+\t\t\tif (increments != null) {", "+\t\t\t\tLoopingFlowContext loopContext =", "+\t\t\t\t\tnew LoopingFlowContext(flowContext, this, null, null, scope);", "+\t\t\t\tfor (int i = 0, count = increments.length; i < count; i++) {", "+\t\t\t\t\tactionInfo = increments[i].analyseCode(scope, loopContext, actionInfo);", "+\t\t\t\t}", "+\t\t\t\tloopContext.complainOnDeferredChecks(scope, actionInfo);", "-\t\t\tloopContext.complainOnDeferredChecks(scope, actionInfo);", "+\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "-\t\t\t\tflowInfo.initsWhenFalse(), ", "+\t\t\t\texitBranch, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf4ac7fa1e5c5f6e58c11a8a4b71cf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (enclosingInstance != null) {", "-\t\t\tflowInfo = enclosingInstance.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.enclosingInstance != null) {", "+\t\t\tflowInfo = this.enclosingInstance.analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, count = arguments.length; i < count; i++) {", "-\t\t\t\tflowInfo = arguments[i].analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.arguments != null) {", "+\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "+\t\t\t\tflowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (anonymousType != null) {", "-\t\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.anonymousType != null) {", "+\t\t\tflowInfo = this.anonymousType.analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (((thrownExceptions = binding.thrownExceptions).length) != 0) {", "+\t\tif (((thrownExceptions = this.binding.thrownExceptions).length) != 0) {"]}], "num": 44019}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9149f57f590e184b77e7dd457f8f8130", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26ef7f55a7a892d3d9e1463817f62cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tboolean didSpecifySource = false;", "+\t\t\tif (currentArg.equals(\"-1.5\")) { //$NON-NLS-1$", "+\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\tmode = Default;", "+\t\t\t\tcontinue;", "+\t\t\t}\t\t\t", "+\t\t\t\t\t} else if (token.equals(\"unsafe\")) {//$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnsafeTypeOperation,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "+\t\t\t\t\t} else if (token.equals(\"finalBound\")) {//$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportFinalParameterBound,", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "-\t\t\t\t\t} else if (token.equals(\"javadoc\")) {//$NON-NLS-1$", "+\t\t\t\t\t} else if (token.equals(\"javadoc\")) {//$NON-NLS-1$ ", "+\t\t\t\tif (didSpecifyTarget) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) <= ClassFileConstants.JDK1_3) {", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\t} else if (currentArg.equals(\"1.5\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\tif (didSpecifySource) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tdidSpecifySource = true;", "+\t\t\t\t} else if (currentArg.equals(\"1.5\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-", "-\t\t// target must be 1.4 if source is 1.4", "-\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4", "-\t\t\t\t&& didSpecifyTarget){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource14\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "-\t\t}", "-", "-\t\t// target cannot be 1.4 if compliance is 1.3", "-\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4", "-\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) >= ClassFileConstants.JDK1_4", "-\t\t\t\t&& didSpecifyTarget){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\t}", "-\t\t// check and set compliance/source/target compatibilities", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){", "-\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\tif (didSpecifyCompliance) {", "+\t\t\tObject version = this.options.get(CompilerOptions.OPTION_Compliance);", "+\t\t\tif (CompilerOptions.VERSION_1_3.equals(version)) {", "+\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t} else if (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(version)) {", "+\t\t\t\t\tif (!didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t}", "-\t\t// compliance must be 1.4 if source is 1.4", "-\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource14\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\tif (didSpecifySource) {", "+\t\t\tObject version = this.options.get(CompilerOptions.OPTION_Source);", "+\t\t\t if (CompilerOptions.VERSION_1_4.equals(version)) {", "+\t\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t} else if (CompilerOptions.VERSION_1_5.equals(version)) {", "+\t\t\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tif (!didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t}", "+\t\t// check and set compliance/source/target compatibilities", "+\t\tif (didSpecifyTarget) {", "+\t\t\t// target must be 1.5 if source is 1.5", "+\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_5", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_5){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t}", "+\t   \t\t // target must be 1.4 if source is 1.4", "+\t   \t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "+\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String)this.options.get(CompilerOptions.OPTION_TargetPlatform), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t   \t\t}", "+\t\t\t// target cannot be greater than compliance level", "+\t\t\tif (CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) < CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_TargetPlatform))){ ", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String)this.options.get(CompilerOptions.OPTION_TargetPlatform))); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+", "+\t\t// compliance must be 1.5 if source is 1.5", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)", "+\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)){", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t} else ", "+\t\t\t// compliance must be 1.4 if source is 1.4", "+\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& !this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)){ ", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t}", "+\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_5)) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d367b8e2b78e89d63450c13a24338e8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "commitAfterChange": "54e21838d5d72a577ad5b83bd2ddcc9c60b93259", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic String loadClasspath() throws JavaModelException", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t */", "-\tpublic String loadClasspath() throws JavaModelException {", "-\t\ttry {", "-\t\t\treturn getSharedProperty(CLASSPATH_FILENAME);", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new JavaModelException(e);", "-\t\t}", "-\t}", "+\tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems) {", "+\t\ttry {", "+\t\t\tString xmlClasspath = getSharedProperty(CLASSPATH_FILENAME);", "+\t\t\tif (xmlClasspath == null) return null;", "+\t\t\tStringReader reader = new StringReader(xmlClasspath);", "+\t\t\tElement cpElement;", "+\t", "+\t\t\ttry {", "+\t\t\t\tDocumentBuilder parser =", "+\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t\t} catch (SAXException e) {", "+\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t} catch (ParserConfigurationException e) {", "+\t\t\t\treader.close();", "+\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t} finally {", "+\t\t\t\treader.close();", "+\t\t\t}", "+\t", "+\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "+\t\t\t\tthrow new IOException(Util.bind(\"file.badFormat\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tIPath projectPath = getProject().getFullPath();", "+\t\t\tNodeList list = cpElement.getChildNodes();", "+\t\t\tint length = list.getLength();", "+\t", "+\t\t\tfor (int i = 0; i < length; ++i) {", "+\t\t\t\tNode node = list.item(i);", "+\t\t\t\tshort type = node.getNodeType();", "+\t\t\t\tif (type == Node.ELEMENT_NODE) {", "+\t\t\t\t\tElement cpeElement = (Element) node;", "+\t", "+\t\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "+\t\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "+\t\t\t\t\t\t// ensure path is absolute", "+\t\t\t\t\t\tIPath path = new Path(pathStr);", "+\t\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "+\t\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "+\t\t\t\t\t\t\tpath = projectPath.append(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// source attachment info (optional)", "+\t\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "+\t\t\t\t\t\tIPath sourceAttachmentPath =", "+\t\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "+\t\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "+\t\t\t\t\t\tIPath sourceAttachmentRootPath =", "+\t\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// exported flag", "+\t\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\t\t\t\t\t\t// recreate the CP entry", "+\t\t\t\t\t\tswitch (kind) {", "+\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "+\t\t\t\t\t\t\t\tString projSegment = path.segment(0);", "+\t\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "+\t\t\t\t\t\t\t\t\t// this project", "+\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path));", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t// another project", "+\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "+\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "+\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "+\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\t\tbreak;", "+\t", "+\t\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "+\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "+\t\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "+\t\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "+\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\tfalse));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t} catch(CoreException e) {", "+\t\t\t// file does not exist (or not accessible)", "+\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\tthis.createClasspathProblemMarker(", "+\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", this.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t}", "+\t\t\tif (logProblems) {", "+\t\t\t\tUtil.log(e, ", "+\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "+\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\t// bad format", "+\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\tthis.createClasspathProblemMarker(", "+\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", this.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t}", "+\t\t\tif (logProblems) {", "+\t\t\t\tUtil.log(e, ", "+\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "+\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\treturn INVALID_CLASSPATH;", "+\t\t} catch (Assert.AssertionFailedException e) { ", "+\t\t\t// failed creating CP entries from file", "+\t\t\tif (createMarker && this.getProject().isAccessible()) {", "+\t\t\t\tthis.createClasspathProblemMarker(", "+\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", this.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t}", "+\t\t\tif (logProblems) {", "+\t\t\t\tUtil.log(e, ", "+\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "+\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\treturn INVALID_CLASSPATH;"]}], "num": 67376}
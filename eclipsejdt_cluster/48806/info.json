{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2a15970c922aa430aca91ccc412a035", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e21637f73f8691401b7b02f7a479cdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "825afbe96327e445bddd85dee169dccb701b4c5f", "commitAfterChange": "e944f831810e143e8894d05428eb208a2cd78cce", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options)", "signatureAfterChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options)", "diff": ["-\t\t\t\tlong compilerResult = compiler.compile(javacOutputDirectory, \"\" /* options */, sourceFileNames, compilerLog);", "+\t\t\t\tlong compilerResult = compiler.compile(javacOutputDirectory, options.getCompilerOptions() /* options */, sourceFileNames, compilerLog);", "+\t\t\t\t\t// WORK move to a logic in which if stdout is empty whereas ", "+\t\t\t\t\t//      it should have had contents, stderr is leveraged as", "+\t\t\t\t\t//      potentially holding indications regarding the failure"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f9098723f8a2ae5317a3421d0623d08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits)", "signatureAfterChange": " \tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits)", "diff": ["+\t\t\tCompilationResult unitResult = null;", "-\t\t\t\tCompilationResult unitResult =", "-\t\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "+\t\t\t\tunitResult = new CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "+\t\t\t} catch (AbortCompilation a) {", "+\t\t\t\t// best effort to find a way for reporting this problem:", "+\t\t\t\tif (a.compilationResult == null)", "+\t\t\t\t\ta.compilationResult = unitResult;", "+\t\t\t\tthrow a;"]}], "num": 48806}
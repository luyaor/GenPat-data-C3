{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb75fd73d90e1bc8d2cb91f99fac849d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "105c765f8c75c8828f240a193ebc5094", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "a248aca30602bc356baefb0786ac871ca71971b3", "commitAfterChange": "13b3d93ad06f327dd1b71c8b4a9dd41c3f6dfa1e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t private void initializeRoots(IJavaModel model)", "signatureAfterChange": " \t private void initializeRoots(IJavaModel model)", "diff": ["+\tthis.sourceAttachments = new HashMap();", "+\t\t\t", "+\t\t\t// root path", "+\t\t\t", "+\t\t\t// source attachment path", "+\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;", "+\t\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"sourceattachment: \" + path.toOSString()); //$NON-NLS-1$;", "+\t\t\tString propertyString = null;", "+\t\t\ttry {", "+\t\t\t\tpropertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tIPath sourceAttachmentPath;", "+\t\t\tif (propertyString != null) {", "+\t\t\t\tint index= propertyString.lastIndexOf(JarPackageFragmentRoot.ATTACHMENT_PROPERTY_DELIMITER);", "+\t\t\t\tif (index < 0) continue;", "+\t\t\t\tsourceAttachmentPath = new Path(propertyString.substring(0, index));", "+\t\t\t} else {", "+\t\t\t\tsourceAttachmentPath = entry.getSourceAttachmentPath();", "+\t\t\t}", "+\t\t\tif (sourceAttachmentPath != null) {", "+\t\t\t\tthis.sourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "602183d8bd2d00a98d9cecdf8c829ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "fb79acb2f88020666334c353888dcdeb37abd070", "commitAfterChange": "4a7d6bdefb8cc07325fb8a5c7d2a751e2d99c2eb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "signatureAfterChange": " \tprotected boolean generateInfos( \t\tOpenableElementInfo info, \t\tIProgressMonitor pm, \t\tMap newElements, \t\tIResource underlyingResource) throws JavaModelException", "diff": ["+\t\t\t\t// remember the timestamps of external libraries the first time they are looked up", "+\t\t\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath(true/*ignore unresolved variable*/);", "+\t\t\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = resolvedClasspath[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {", "+\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), path, true);", "+\t\t\t\t\t\tif (target instanceof java.io.File) {", "+\t\t\t\t\t\t\tMap externalTimeStamps = JavaModelManager.getJavaModelManager().deltaProcessor.externalTimeStamps;", "+\t\t\t\t\t\t\tif (externalTimeStamps.get(path) == null) {", "+\t\t\t\t\t\t\t\tlong timestamp = DeltaProcessor.getTimeStamp((java.io.File)target);", "+\t\t\t\t\t\t\t\texternalTimeStamps.put(path, new Long(timestamp));\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a097b8e19a33f696d0464c9986b87c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tprivate void updateClasspathMarkers()", "signatureAfterChange": " \tprivate void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs)", "diff": ["-\tprivate void updateClasspathMarkers() {", "-\t\ttry {", "-\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "-\t\t\t\tIterator iterator = this.rootsToRefresh.iterator();", "-\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tJavaProject project = (JavaProject)iterator.next();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t // force classpath marker refresh", "-\t\t\t\t\t\tproject.getResolvedClasspath(", "-\t\t\t\t\t\t\ttrue, // ignoreUnresolvedEntry", "-\t\t\t\t\t\t\ttrue); // generateMarkerOnError", "-\t\t\t\t\t\t", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// project doesn't exist: ignore", "+\tprivate void updateClasspathMarkers(Map preferredClasspaths, Map preferredOutputs) {", "+\t\t", "+\t\tif (!this.rootsToRefresh.isEmpty()) {", "+\t\t\ttry {", "+\t\t\t\tif (!ResourcesPlugin.getWorkspace().isAutoBuilding()) {", "+\t\t\t\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\t\t\t\tIProject[] projects = workspaceRoot.getProjects();", "+\t\t\t\t\tint length = projects.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++){", "+\t\t\t\t\t\tIProject project = projects[i];", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\tif (preferredClasspaths.get(javaProject) == null) { // not already updated", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tIClasspathEntry[] classpath = javaProject.getResolvedClasspath(true); // allowed to reuse model cache", "+\t\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "+\t\t\t\t\t\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && this.rootsToRefresh.contains(entry.getPath())) {", "+\t\t\t\t\t\t\t\t\t\tjavaProject.updateClasspathMarkers(null, null);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t\t\t\t\t// project no longer exists", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t// update all cycle markers", "+\t\t\t\tJavaProject.updateAllCycleMarkers(preferredClasspaths);", "+\t\t\t} catch(JavaModelException e) {", "+\t\t\t\t\t// project no longer exists", "+\t\t\t} finally {", "+\t\t\t\tthis.rootsToRefresh = new HashSet();", "-\t\t\tif (!this.rootsToRefresh.isEmpty()){", "-\t\t\t\ttry {", "-\t\t\t\t\t// update all cycle markers", "-\t\t\t\t\tJavaProject.updateAllCycleMarkers();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// one of the projects doesn't exist: ignore", "-\t\t\t\t}", "-\t\t\t}\t\t\t\t", "-\t\t} finally {", "-\t\t\tthis.rootsToRefresh = new HashSet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e32bafbc3d5486c415c914cb55564c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "7b4fdf4780132144ccc7c2e7370ef3841befc3d9", "commitAfterChange": "6a5ede81dc60cc482d4fde0564e95e20c9055fee", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected Object createTypeReference(int primitiveToken)", "signatureAfterChange": " \tprotected Object createTypeReference(int primitiveToken)", "diff": ["+\t\t// Update ref for whole name", "-\t\tint end = (int) this.identifierPositionStack[this.identifierPtr];", "-\t\ttypeRef.setSourceRange(start, end-start+1);", "+//\t\tint end = (int) this.identifierPositionStack[this.identifierPtr];", "+//\t\ttypeRef.setSourceRange(start, end-start+1);", "+\t\t// Update references of each simple name", "+\t\tif (size > 1) {", "+\t\t\tName name = (Name)typeRef;", "+\t\t\tfor (int i=this.identifierPtr; i>pos; i--) {", "+\t\t\t\tint s = (int) (this.identifierPositionStack[i] >>> 32);", "+\t\t\t\tint e = (int) this.identifierPositionStack[i];", "+\t\t\t\tSimpleName simpleName = ((QualifiedName)name).getName();", "+\t\t\t\tsimpleName.setSourceRange(s, e-s+1);", "+\t\t\t\tname.setSourceRange(start, e-start+1);", "+\t\t\t\tname =  ((QualifiedName)name).getQualifier();", "+\t\t\t}", "+\t\t\tint end = (int) this.identifierPositionStack[pos];", "+\t\t\tname.setSourceRange(start, end-start+1);", "+\t\t} else {", "+\t\t\tint end = (int) this.identifierPositionStack[pos];", "+\t\t\ttypeRef.setSourceRange(start, end-start+1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec65911fd9dcb4dad86febd0a1fb05b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic HierarchyScope(IType type) throws JavaModelException", "signatureAfterChange": " \tpublic HierarchyScope(IType type) throws JavaModelException", "diff": ["-\t\tthis.initialize();", "-\t\tfHierarchy = type.newTypeHierarchy(null);", "-\t\tbuildResourceVector();", "+\t\tthis.focusType = type;", "+\t\t", "+\t\tthis.enclosingProjectsAndJars = this.computeProjectsAndJars(type);", "+", "+\t\t// resource path", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)type.getPackageFragment().getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\tIPath jarPath = root.getPath();", "+\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), jarPath, true);", "+\t\t\tString zipFileName;", "+\t\t\tif (target instanceof IFile) {", "+\t\t\t\t// internal jar", "+\t\t\t\tzipFileName = jarPath.toString();", "+\t\t\t} else if (target instanceof File) {", "+\t\t\t\t// external jar", "+\t\t\t\tzipFileName = ((File)target).getPath();", "+\t\t\t} else {", "+\t\t\t\treturn; // unknown target", "+\t\t\t}", "+\t\t\tthis.focusPath =", "+\t\t\t\tzipFileName", "+\t\t\t\t\t+ JAR_FILE_ENTRY_SEPARATOR", "+\t\t\t\t\t+ type.getFullyQualifiedName().replace('.', '/')", "+\t\t\t\t\t+ \".class\";//$NON-NLS-1$", "+\t\t} else {", "+\t\t\tthis.focusPath = type.getPath().toString();", "+\t\t}"]}], "num": 8679}
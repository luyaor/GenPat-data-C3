{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5c574be1021976e409057bb246d8696", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02098cb1c5675a8cc3591beff6b6fc1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "2a3a314298ecbfa699627e12aea382d2f3836e7f", "commitAfterChange": "530c55e93f31f5f02c425be3970d4f24f81f74f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding localTargetMethod)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding localTargetMethod)", "diff": ["-    ", "+\tif (!isClass()) return null; // only classes get bridge methods", "+\tif (inheritedMethodToBridge.returnType.erasure() == localTargetMethod.returnType.erasure())", "+\t\tif (inheritedMethodToBridge.areParameterErasuresEqual(localTargetMethod))", "+\t\t\treturn null; // do not need bridge method", "+", "-\t\t\t\tif (inheritedMethodToBridge.areParameterErasuresEqual((MethodBinding) method))", "-\t\t\t\t\tif (inheritedMethodToBridge.returnType.erasure() == ((MethodBinding) method).returnType.erasure())", "+\t\t\t\tif (inheritedMethodToBridge.returnType.erasure() == ((MethodBinding) method).returnType.erasure())", "+\t\t\t\t\tif (inheritedMethodToBridge.areParameterErasuresEqual((MethodBinding) method))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "090b0c4f268dbd9f497ecd285907a302", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "8c3c66471763201137503760710e54e98c86a2ff", "commitAfterChange": "187b51c698ed19fcae521771e99092d2e75d91e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\t&& isSameOrSubTypeOf(currentMethod.returnType, inheritedMethod.returnType);", "+\t\t\t&& isTypeSubstituable(currentMethod.returnType, inheritedMethod.returnType);", "-\t\t\tif (!areReturnTypeErasuresEqual(currentMethod, inheritedMethod)) {", "+\t\t\tif (!isReturnTypeSubstituable(currentMethod, inheritedMethod)) {", "-\t\t    if (!areReturnTypeErasuresEqual(original, currentMethod) || !areParameterErasuresEqual(original, currentMethod))", "+\t\t    if (!isReturnTypeSubstituable(original, currentMethod) || !areParameterErasuresEqual(original, currentMethod))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f39e2d7f5087596e022f08389b8c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "36cfe82a075699d2a0eb4fa6f987724ecb548c8c", "commitAfterChange": "37d61d5c5c650829214bf858cd078e7d345a9a26", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " void computeInheritedMethods()", "diff": ["-private void computeInheritedMethods() {", "+void computeInheritedMethods() {", "-\t\t\t\t\t\tif (isReturnTypeSubstituable(method, existingMethods[i]) && areParameterErasuresEqual(method, existingMethods[i])) {", "+\t\t\t\t\t\tif (areReturnTypesEqual(method, existingMethods[i]) && areParametersEqual(method, existingMethods[i])) {", "-\t\t\t\t\t\tif (isReturnTypeSubstituable(method, nonVisible[i]) && areParameterErasuresEqual(method, nonVisible[i])) ", "+\t\t\t\t\t\tif (areReturnTypesEqual(method, nonVisible[i]) && areParametersEqual(method, nonVisible[i])) ", "-\t\t\t\t\t\t\tif (isReturnTypeSubstituable(method, current[i]) && areParameterErasuresEqual(method, current[i])) {", "+\t\t\t\t\t\t\tif (areReturnTypesEqual(method, current[i]) && areParametersEqual(method, current[i])) {", "-\t\t\t\t\t\t\t\tif (areParameterErasuresEqual(method, existing) && existing.declaringClass.implementsInterface(superType, true))", "+\t\t\t\t\t\t\t\tif (areParametersEqual(method, existing) && existing.declaringClass.implementsInterface(superType, true))"]}], "num": 41863}
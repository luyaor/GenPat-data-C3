{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e99bde310f4cfca52f99389225a8f36", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41bb870cf3b4bd98c5d93405c6d6664c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "signatureAfterChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "diff": ["-\t\tif (this == DeadEnd) return otherInits;", "-\t\tif (otherInits == DeadEnd) return this;", "+\t\tif (this == DEAD_END) return otherInits;", "+\t\tif (otherInits == DEAD_END) return this;", "-\t\tif (!otherInits.isFakeReachable())", "-\t\t\tmarkAsFakeReachable(false);", "+\t\tthis.reachMode &= otherInits.reachMode;", "-\t\tdefiniteInits &= otherInits.definiteInits;", "+\t\tthis.definiteInits &= otherInits.definiteInits;", "-\t\tpotentialInits |= otherInits.potentialInits;", "+\t\tthis.potentialInits |= otherInits.potentialInits;", "-\t\tif (extraDefiniteInits != null) {", "+\t\tif (this.extraDefiniteInits != null) {", "-\t\t\t\tif ((length = extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "+\t\t\t\tif ((length = this.extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "-\t\t\t\t\tSystem.arraycopy(extraDefiniteInits, 0, (extraDefiniteInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(extraPotentialInits, 0, (extraPotentialInits = new long[otherLength]), 0, length);", "+\t\t\t\t\tSystem.arraycopy(this.extraDefiniteInits, 0, (this.extraDefiniteInits = new long[otherLength]), 0, length);", "+\t\t\t\t\tSystem.arraycopy(this.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, length);", "-\t\t\t\t\t\textraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\tthis.extraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "+\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t\textraPotentialInits[i] = otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\tthis.extraPotentialInits[i] = otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t\textraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\tthis.extraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "+\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t\textraDefiniteInits[i++] = 0;", "+\t\t\t\t\t\tthis.extraDefiniteInits[i++] = 0;", "-\t\t\t\tint i = 0, length = extraDefiniteInits.length;", "+\t\t\t\tint i = 0, length = this.extraDefiniteInits.length;", "-\t\t\t\t\textraDefiniteInits[i++] = 0;", "+\t\t\t\t\tthis.extraDefiniteInits[i++] = 0;", "-\t\t\t\textraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length];", "-\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (extraPotentialInits = new long[otherLength]), 0, otherLength);", "+\t\t\t\tthis.extraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length];", "+\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, otherLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbb1030d8cd45da804d718b4ecd2bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void initialize(JavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException", "diff": ["+\t */", "+\tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException {", "+\t\t// create name environment", "+\t\tif (this.nameEnvironment != null) { // cleanup", "+\t\t\tthis.nameEnvironment.cleanup();", "+\t\t}", "+\t\tif (potentialMatches.length == 1) {", "+\t\t\t// if only one potential match, a file name environment costs too much,", "+\t\t\t// so use the existing searchable  environment which will populate the java model", "+\t\t\t// only for this potential match and its required types.", "+\t\t\tthis.nameEnvironment = project.getSearchableNameEnvironment();", "+\t\t} else {", "+\t\t\tthis.nameEnvironment = new JavaSearchNameEnvironment2(project);", "+\t\t}", "+", "-\t\tCompilerOptions options = new CompilerOptions(project.getOptions(true));", "+\t\tthis.options = new CompilerOptions(project.getOptions(true));", "-\t\t\t\toptions,", "+\t\t\t\tthis.options,", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, this.nameEnvironment);", "+\t\t\tnew LookupEnvironment(this, this.options, problemReporter, this.nameEnvironment);", "-\t\tthis.parser = new MatchLocatorParser(problemReporter, options.sourceLevel);", "-\t\t", "-\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)", "-\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());", "-\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "-\t\t\tMatchingOpenable matchingOpenable = openables[i];", "-\t\t\tmatchingOpenable.reset();", "-\t\t}", "-\t\tthis.parsedUnits = new HashtableOfObject(10);", "-\t\t", "+\t\tthis.parser = new MatchLocatorParser(problemReporter, this.options.sourceLevel);", "+\t\t\t\t", "-\t}", "+\t\t", "+\t\t// initialize queue of units", "+\t\tthis.totalUnits = 0;", "+\t\tint maxUnits = potentialMatches.length;", "+\t\tthis.unitsToProcess = new CompilationUnitDeclaration[maxUnits];", "+\t\tthis.matchesToProcess = new PotentialMatch[maxUnits];", "+\t}"]}], "num": 40501}
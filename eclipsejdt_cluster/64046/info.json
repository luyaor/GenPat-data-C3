{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "094a9552b68dc9cc2034f066c0cf6c79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18e80011afcad86f432ca4b2fb103af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"1. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I<E extends Comparable> { void test(E element); }\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A implements I<Integer> { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 1)\\n\" + ", "+\t\t\t\"\tabstract class AA<E extends Comparable> { abstract void test(E element); }\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e2bf143dfc500a1a6887ec8ab06346b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["-\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"5. WARNING in p\\\\X.java (at line 32)\\n\" + ", "+\t\t\"\tClass _getClasses [] = X.class.getClasses(); \\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in p\\\\X.java (at line 36)\\n\" + ", "+\t\t\"\tConstructor _getConstructors[] = c.getConstructors(); \\n\" + ", "+\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"\tMethod _getMethod = c.getMethod(\\\"d\\\",null);\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The method getMethod(String, Class...) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\t\"5. WARNING in p\\\\X.java (at line 32)\\n\" + ", "+\t\t\t\"\tClass _getClasses [] = X.class.getClasses(); \\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in p\\\\X.java (at line 36)\\n\" + ", "+\t\t\t\"\tConstructor _getConstructors[] = c.getConstructors(); \\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in p\\\\X.java (at line 39)\\n\" + ", "-\t\t\t\"6. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\t\"8. WARNING in p\\\\X.java (at line 39)\\n\" + "]}], "num": 64046}
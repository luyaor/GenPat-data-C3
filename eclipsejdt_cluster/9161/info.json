{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "072c2b0afa9e54964e8944dedfb3acfc", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626e722001e58fe8683e6612ae683ed6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding reportError(BlockScope scope)", "diff": ["-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)\r", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){\r", "+\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){\r", "+\t\t// will not support innerclass emulation inside delegate\r", "+\t\tbinding = scope.getField(delegateThis.type, this.tokens[0], this);\r", "+\t\tif (!binding.isValidBinding()) return super.reportError(scope);\r", "+\t\treturn checkFieldAccess(scope);\r", "+\t}\r", "+\r", "+\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){\r", "-\t\tif (!fieldBinding.isValidBinding()) {\r", "-\t\t\tif (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {\r", "-\t\t\t\t// manage the access to a private field of the enclosing type\r", "-\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "-\t\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);\r", "-\t\t\t\tif (binding.isValidBinding()) {\r", "-\t\t\t\t\treturn checkFieldAccess(scope);\t\t\t\t\t\t\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tif (!fieldBinding.isValidBinding()) return super.reportError(scope);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da10e9838cf51e9a7a57853a77d41b0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding reportError(BlockScope scope)", "diff": ["-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)\r", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){\r", "+\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){\r", "+\t\t// will not support innerclass emulation inside delegate\r", "+\t\tbinding = scope.getField(delegateThis.type, this.tokens[0], this);\r", "+\t\tif (!binding.isValidBinding()) return super.reportError(scope);\r", "+\t\treturn checkFieldAccess(scope);\r", "+\t}\r", "+\r", "+\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){\r", "-\t\tif (!fieldBinding.isValidBinding()) {\r", "-\t\t\tif (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {\r", "-\t\t\t\t// manage the access to a private field of the enclosing type\r", "-\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "-\t\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);\r", "-\t\t\t\tif (binding.isValidBinding()) {\r", "-\t\t\t\t\treturn checkFieldAccess(scope);\t\t\t\t\t\t\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\treturn super.reportError(scope);\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tif (!fieldBinding.isValidBinding()) return super.reportError(scope);\r"]}], "num": 9161}
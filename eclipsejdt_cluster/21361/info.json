{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65326051ed2c26c788d7efc77f87153b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b252bc014e610b1f9503727649fbb7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "7b3309da9229750686e478a0bba24cf03c887fb9", "commitAfterChange": "e72851f7c02ccfbc91816922dcb863357cca4426", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "\r public void test443467() throws Exception", "signatureAfterChange": "\r public void test443467() throws Exception", "diff": ["-\tString jreDirectory = Util.getJREDirectory();\r", "-\tString jfxJar = Util.toNativePath(jreDirectory + \"/lib/ext/jfxrt.jar\");\r", "-\tthis.runNegativeTestWithExtraLibs(\r", "+\trunNegativeTestWithLibs(\r", "+\t\t\t\"import java.util.AbstractMap.SimpleEntry;\\n\" +\r", "-\t\t\t\"import javafx.util.Pair;\\n\" +\r", "-\t\t\t\"static void writeUpdates(Stream<Path> filter2, HashMap<Path, Pair<byte[], Instant>> ideFiles, HashMap<Path, Path> updateToFile) {\\n\" +\r", "-\t\t\t\"   filter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" +\r", "+\t\t\t\"static void writeUpdates(Stream<Path> filter2, HashMap<Path, SimpleEntry<byte[], Instant>> ideFiles, HashMap<Path, Path> updateToFile) {\\n\" +\r", "+\t\t\t\"   filter2.map(p -> new SimpleEntry<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" +\r", "-\t\t\"\tfilter2.map(p -> new Pair<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + \r", "-\t\t\"\t                                                 ^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"\tfilter2.map(p -> new SimpleEntry<>(updateToFile.get(p), p->ideFiles.get(p)));\\n\" + \r", "+\t\t\"\t                                                        ^^^^^^^^^^^^^^^^^^\\n\" + \r", "-\t\t\"----------\\n\",\r", "-\t\tnew String[]{jfxJar});\r", "+\t\t\"----------\\n\");\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e360a777ec402a1881519192fe5118c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "d79de0229c608563894d10437737b39e54570982", "commitAfterChange": "6b8ea1fe34801155ff098e297d8447ae3bdf9761", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " public void testBug478848()", "signatureAfterChange": " public void testBug478848()", "diff": ["-\trunNegativeTest(", "+\trunConformTest(", "-\t\t\t\"import java.util.Optional;\\n\" + ", "+\t\t\t\"import java.util.*;\\n\" + ", "-\t\t\t\"        for (Wrapper<String> attribute: c1.optionalArrayOfStringWrappers().get()) {\\n\" + ", "-\t\t\t\"            // error in previous line:\\n\" + ", "-\t\t\t\"            // Can only iterate over an array or an instance of java.lang.Iterable\\n\" + ", "+\t\t\t\"        try {\\n\" + ", "+\t\t\t\"            for (Wrapper<String> attribute: c1.optionalArrayOfStringWrappers().get()) {\\n\" + ", "+\t\t\t\"                // error in previous line:\\n\" + ", "+\t\t\t\"                // Can only iterate over an array or an instance of java.lang.Iterable\\n\" +", "+\t\t\t\"            }\\n\" + ", "+\t\t\t\"        } catch (NoSuchElementException nsee) {\\n\" +", "+\t\t\t\"            System.out.print(\\\"No such element\\\");\\n\" +", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in InferenceBug.java (at line 20)\\n\" + ", "-\t\t\"\tfor (Wrapper<String> attribute: c1.optionalArrayOfStringWrappers().get()) {\\n\" + ", "-\t\t\"\t                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Can only iterate over an array or an instance of java.lang.Iterable\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"No such element\");"]}], "num": 21361}
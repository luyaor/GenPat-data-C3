{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1edb0e13135f6cc78aabcb39afb1264", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b472a508a244a17d5e2eb828a4d92a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e5d472ae376881b61d2a17c3e23cd62b7ed964f0", "commitAfterChange": "447de272007f97647787cc473ca78784fcaddeeb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic IPackageFragment findPackageFragment(IPath path) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic IJavaElement findPackageFragment(String packageName) \t\t\tthrows JavaModelException", "diff": ["+\tpublic IJavaElement findPackageFragment(String packageName)", "+\t\t\tthrows JavaModelException {", "+\t\tNameLookup lookup = newNameLookup((WorkingCopyOwner)null/*no need to look at working copies for pkgs*/);", "+\t\tIPackageFragment[] pkgFragments = lookup.findPackageFragments(packageName, false);", "+\t\tif (pkgFragments == null) {", "+\t\t\treturn null;", "+", "+\t\t} else {", "+\t\t\t// try to return one that is a child of this project", "+\t\t\tfor (int i = 0, length = pkgFragments.length; i < length; i++) {", "+", "+\t\t\t\tIPackageFragment pkgFragment = pkgFragments[i];", "+\t\t\t\tif (this.equals(pkgFragment.getParent().getParent())) {", "+\t\t\t\t\treturn pkgFragment;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// default to the first one", "+\t\t\treturn pkgFragments[0];", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59620a848bd061637f3e7a28417b7f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7fe004f7b5f0bcd4b089b0ee8582afd2bc4b79cd", "commitAfterChange": "530c48877da8402a05b3f0b84990331c9acd9df4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \tprivate void locateMatches() throws JavaModelException", "signatureAfterChange": "\r \tprivate void locateMatches(JavaProject previousJavaProject) throws JavaModelException", "diff": ["-\tprivate void locateMatches() throws JavaModelException {\r", "+\tprivate void locateMatches(JavaProject previousJavaProject) throws JavaModelException {\r", "+\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(previousJavaProject.getPackageFragmentRoots());\r", "+\t\r", "+\t\t// binding creation\r", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) { \r", "+\t\t\topenables[i].buildTypeBindings();\r", "+\t\t}\r", "+\r", "-\t\t// potential match resolution\r", "-\t\tfor (this.potentialMatchesIndex = 0;\r", "-\t\t\tthis.potentialMatchesIndex < this.potentialMatchesLength;\r", "-\t\t\tthis.potentialMatchesIndex++) {\r", "-\t\t\t\t\r", "+\t\t// matching openable resolution\r", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) { \r", "-\t\t\t\tPotentialMatch potentialMatch =\r", "-\t\t\t\t\tthis.potentialMatches[this.potentialMatchesIndex];\r", "-\t\t\t\tpotentialMatch.shouldResolve = shouldResolve;\r", "-\t\t\t\tpotentialMatch.locateMatches();\r", "-\t\t\t\tpotentialMatch.reset();\r", "+\t\t\t\tthis.currentMatchingOpenable = openables[i];\r", "+\t\t\t\t\r", "+\t\t\t\t// skip type has it is hidden so not visible\r", "+\t\t\t\tif (this.currentMatchingOpenable.hasAlreadyDefinedType()) {\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\tthis.currentMatchingOpenable.shouldResolve = shouldResolve;\r", "+\t\t\t\tthis.currentMatchingOpenable.locateMatches();\r", "+\t\t\t\tthis.currentMatchingOpenable.reset();\r", "-\t\t\t\t// continue and try next potential match\r", "+\t\t\t\t// continue and try next matching openable\r", "+\t\tthis.currentMatchingOpenable = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f814fac754e4ea22a4d4cfce033cd1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "19de0bf25a38cb3c78ae5b1452a4badcf6ffab4c", "commitAfterChange": "d45a6d72ecac1399ae839b8bb0faf0b4626c38b4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tpublic void consumeTypeVariable(char[] typeVariableName)", "signatureAfterChange": " \t \tpublic void consumeTypeVariable(char[] position, char[] typeVariableName)", "diff": ["-\tpublic void consumeTypeVariable(char[] typeVariableName) {", "+\tpublic void consumeTypeVariable(char[] position, char[] typeVariableName) {", "+\t\tif (position.length > 0) {", "+\t\t\tint sourceStart = Integer.parseInt(new String(position));", "+\t\t\tMethodBinding[] methods = ((ReferenceBinding) this.typeBinding).methods();", "+\t\t\tif (methods != null) {", "+\t\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\t\t\tMethodBinding binding = methods[i];", "+\t\t\t\t\tif (sourceStart == binding.sourceStart()) {", "+\t\t\t\t\t\tthis.methodBinding = binding;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 67982}
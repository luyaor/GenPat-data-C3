{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97254c2089edb139a688224e951008fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbee700989ca63d25f25bf2b4386c61a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public boolean checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo)", "diff": ["-", "-public boolean checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo) {", "-\tif (super.checkNPE(scope, flowContext, flowInfo)) {", "-\t\treturn true;", "-\t}", "-\tFieldBinding fieldBinding = null;", "-\tlong position = 0L;", "-\tif (this.otherBindings == null) {", "-\t\tif ((this.bits & RestrictiveFlagMASK) == Binding.FIELD) {", "-\t\t\tfieldBinding = (FieldBinding) this.binding;", "-\t\t\tposition = this.sourcePositions[0];", "-\t\t}", "-\t} else {", "-\t\tfieldBinding = this.otherBindings[this.otherBindings.length - 1];", "-\t\tposition = this.sourcePositions[this.sourcePositions.length - 1];", "-\t}", "-\tif (fieldBinding != null) {", "-\t\treturn checkNullableDereference(scope, fieldBinding, position);", "-\t}", "-\treturn false;", "+", "+public int nullStatus(FlowInfo flowInfo) {", "+\treturn FlowInfo.UNKNOWN;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb51e8d3a37f0f0fc8cbb347c19170c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void checkInternalNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "signatureAfterChange": "  public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "diff": ["-/* check if any dot in this QNR may trigger an NPE. */", "-private void checkInternalNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "+public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "+\t// cannot override localVariableBinding because this would project o.m onto o when", "+\t// analyzing assignments", "-\t} else if ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.FIELD) {", "-\t\t// look for annotated fields, they do not depend on flow context -> check immediately:", "-\t\tcheckNullableDereference(scope, (FieldBinding) this.binding, this.sourcePositions[0]);", "-\tif (this.otherBindings != null) {", "-\t\t// look for annotated fields, they do not depend on flow context -> check immediately:", "-\t\tint length = this.otherBindings.length - 1; // don't check the last binding", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tcheckNullableDereference(scope, this.otherBindings[i], this.sourcePositions[i+1]);", "-\t\t}", "-\t}", "-}"]}], "num": 39841}
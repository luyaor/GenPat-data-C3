{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a644e51536555bd5d91baf8ac9cb49a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b692b925a621829e4e4ba9de567c2b02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 149, "signatureBeforeChange": "  \tprotected void findMembers( \t\t\tchar[] token, \t\t\tReferenceBinding receiverType, \t\t\tScope scope, \t\t\tInvocationSite invocationSite, \t\t\tboolean isInsideAnnotationAttribute, \t\t\tBinding[] missingElements, \t\t\tint[] missingElementsStarts, \t\t\tint[] missingElementsEnds, \t\t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprotected void findMembers( \t\t\tchar[] token, \t\t\tReferenceBinding receiverType, \t\t\tScope scope, \t\t\tInvocationSite invocationSite, \t\t\tboolean isInsideAnnotationAttribute, \t\t\tBinding[] missingElements, \t\t\tint[] missingElementsStarts, \t\t\tint[] missingElementsEnds, \t\t\tboolean missingElementsHaveProblems)", "diff": ["-\tprotected void findMembers(", "-\t\t\tchar[] token,", "-\t\t\tReferenceBinding receiverType,", "-\t\t\tScope scope,", "-\t\t\tInvocationSite invocationSite,", "-\t\t\tboolean isInsideAnnotationAttribute,", "-\t\t\tBinding[] missingElements,", "-\t\t\tint[] missingElementsStarts,", "-\t\t\tint[] missingElementsEnds,", "-\t\t\tboolean missingElementsHaveProblems) {", "-", "-\t\tif (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\tfindMemberTypes(", "-\t\t\t\t\ttoken,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\tmissingElements,", "-\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\tmissingElementsHaveProblems);", "-\t\t}", "-\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\tfindClassField(", "-\t\t\t\t\ttoken,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmissingElements,", "-\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\tmissingElementsHaveProblems);", "-\t\t}", "-", "-\t\tMethodScope methodScope = null;", "-\t\tif (!isInsideAnnotationAttribute &&", "-\t\t\t\t!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "-\t\t\t\t((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "-\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic))) {", "-\t\t\tif (token.length > 0) {", "-\t\t\t\tfindKeywords(token, new char[][]{Keywords.THIS}, false, true);", "-\t\t\t} else {", "-\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.THIS);", "-\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "-\t\t\t\trelevance += R_NON_INHERITED;", "-\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setName(Keywords.THIS);", "-\t\t\t\t\tproposal.setCompletion(Keywords.THIS);", "-\t\t\t\t\tif (DEBUG) {", "-", "-\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\tfindFields(", "-\t\t\t\ttoken,", "-\t\t\t\treceiverType,", "-\t\t\t\tscope,", "-\t\t\t\tnew ObjectVector(),", "-\t\t\t\tnew ObjectVector(),", "-\t\t\t\ttrue,", "-\t\t\t\tinvocationSite,", "-\t\t\t\tscope,", "-\t\t\t\tfalse,", "-\t\t\t\tfalse,", "-\t\t\t\tmissingElements,", "-\t\t\t\tmissingElementsStarts,", "-\t\t\t\tmissingElementsEnds,", "-\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\tnull,", "-\t\t\t\t-1,", "-\t\t\t\t-1);", "-\t\t}", "-", "-\t\tif (!isInsideAnnotationAttribute && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\tfindMethods(", "-\t\t\t\ttoken,", "-\t\t\t\tnull,", "-\t\t\t\tnull,", "-\t\t\t\treceiverType,", "-\t\t\t\tscope,", "-\t\t\t\tnew ObjectVector(),", "-\t\t\t\ttrue,", "-\t\t\t\tfalse,", "-\t\t\t\tfalse,", "-\t\t\t\tinvocationSite,", "-\t\t\t\tscope,", "-\t\t\t\tfalse,", "-\t\t\t\tfalse,", "-\t\t\t\tfalse,", "-\t\t\t\tmissingElements,", "-\t\t\t\tmissingElementsStarts,", "-\t\t\t\tmissingElementsEnds,", "-\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\tnull,", "-\t\t\t\t-1,", "-\t\t\t\t-1);", "-\t\t}", "+\t}", "+\tprotected void findMembers(", "+\t\t\tchar[] token,", "+\t\t\tReferenceBinding receiverType,", "+\t\t\tScope scope,", "+\t\t\tInvocationSite invocationSite,", "+\t\t\tboolean isInsideAnnotationAttribute,", "+\t\t\tBinding[] missingElements,", "+\t\t\tint[] missingElementsStarts,", "+\t\t\tint[] missingElementsEnds,", "+\t\t\tboolean missingElementsHaveProblems) {", "+", "+\t\tif (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\tfindMemberTypes(", "+\t\t\t\t\ttoken,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\tfalse,", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems);", "+\t\t}", "+\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\tfindClassField(", "+\t\t\t\t\ttoken,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems);", "+\t\t}", "+", "+\t\tMethodScope methodScope = null;", "+\t\tif (!isInsideAnnotationAttribute &&", "+\t\t\t\t!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "+\t\t\t\t((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "+\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic))) {", "+\t\t\tif (token.length > 0) {", "+\t\t\t\tfindKeywords(token, new char[][]{Keywords.THIS}, false, true);", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.THIS);", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\trelevance += R_NON_INHERITED;", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tInternalCompletionProposal proposal =  createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setName(Keywords.THIS);", "+\t\t\t\t\tproposal.setCompletion(Keywords.THIS);", "+\t\t\t\t\tif (DEBUG) {", "+", "+\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\tfindFields(", "+\t\t\t\ttoken,", "+\t\t\t\treceiverType,", "+\t\t\t\tscope,", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\ttrue,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tscope,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tmissingElements,", "+\t\t\t\tmissingElementsStarts,", "+\t\t\t\tmissingElementsEnds,", "+\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\tnull,", "+\t\t\t\t-1,", "+\t\t\t\t-1);", "+\t\t}", "+", "+\t\tif (!isInsideAnnotationAttribute && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\tfindMethods(", "+\t\t\t\ttoken,", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\treceiverType,", "+\t\t\t\tscope,", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\ttrue,", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tscope,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tmissingElements,", "+\t\t\t\tmissingElementsStarts,", "+\t\t\t\tmissingElementsEnds,", "+\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\tnull,", "+\t\t\t\t-1,", "+\t\t\t\t-1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdc0d3e0f9fcc9128dd04927dff2de6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 131, "signatureBeforeChange": "  \tprivate void findImplicitMessageSends( \t\tchar[] token, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tObjectVector methodsFound)", "signatureAfterChange": " \tprivate void findImplicitMessageSends( \t\tchar[] token, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tObjectVector methodsFound)", "diff": ["+\tprivate void findImplicitMessageSends(", "+\t\tchar[] token,", "+\t\tTypeBinding[] argTypes,", "+\t\tScope scope,", "+\t\tInvocationSite invocationSite,", "+\t\tScope invocationScope,", "+\t\tObjectVector methodsFound) {", "+\t\tif (token == null)", "+\t\t\treturn;", "+", "+\t\tboolean staticsOnly = false;", "+\t\t// need to know if we're in a static context (or inside a constructor)", "+", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "+", "+\t\t\tswitch (scope.kind) {", "+", "+\t\t\t\tcase Scope.METHOD_SCOPE :", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase Scope.CLASS_SCOPE :", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;", "+\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\ttoken,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\tenclosingType,", "+\t\t\t\t\t\tclassScope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tstaticsOnly,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t-1,", "+\t\t\t\t\t\t-1);", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "+\t\t\t\t\tbreak done;", "+\t\t\t}", "+\t\t\tscope = scope.parent;", "+\t\t}", "+\t}", "-", "-\tprivate void findImplicitMessageSends(", "-\t\tchar[] token,", "-\t\tTypeBinding[] argTypes,", "-\t\tScope scope,", "-\t\tInvocationSite invocationSite,", "-\t\tScope invocationScope,", "-\t\tObjectVector methodsFound) {", "-", "-\t\tif (token == null)", "-\t\t\treturn;", "-", "-\t\tboolean staticsOnly = false;", "-\t\t// need to know if we're in a static context (or inside a constructor)", "-", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found", "-", "-\t\t\tswitch (scope.kind) {", "-", "-\t\t\t\tcase Scope.METHOD_SCOPE :", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase Scope.CLASS_SCOPE :", "-\t\t\t\t\tClassScope classScope = (ClassScope) scope;", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;", "-\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\ttoken,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\tenclosingType,", "-\t\t\t\t\t\tclassScope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tstaticsOnly,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t-1,", "-\t\t\t\t\t\t-1);", "-\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :", "-\t\t\t\t\tbreak done;", "-\t\t\t}", "-\t\t\tscope = scope.parent;", "-\t\t}"]}], "num": 30262}
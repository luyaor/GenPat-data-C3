{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e52309aa94a011c86975138a1848af57", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d44d8491af9013b48c0e43ef62eddb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047() throws Exception", "diff": ["-\tpublic void test047() {", "+\tpublic void test047() throws Exception {", "-\t\tString actualOutput = null;", "-\t\ttry {", "-\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "-\t\t\tactualOutput =", "-\t\t\t\tdisassembler.disassemble(", "-\t\t\t\t\tclassFileBytes,", "-\t\t\t\t\t\"\\n\",", "-\t\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "+\t\tString actualOutput =", "+\t\t\tdisassembler.disassemble(", "+\t\t\t\tclassFileBytes,", "+\t\t\t\t\"\\n\",", "+\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\t\ttry {", "-\t\t\tClassFileReader fileReader = ClassFileReader.read(new File(OUTPUT_DIR + File.separator  +\"I.class\"));", "-\t\t\tassertEquals(\"Not an annotation type declaration\", TypeDeclaration.ANNOTATION_TYPE_DECL, TypeDeclaration.kind(fileReader.getModifiers()));", "-\t\t} catch (ClassFormatException e1) {", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e1) {", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tClassFileReader fileReader = ClassFileReader.read(new File(OUTPUT_DIR + File.separator  +\"I.class\"));", "+\t\tassertEquals(\"Not an annotation type declaration\", TypeDeclaration.ANNOTATION_TYPE_DECL, TypeDeclaration.kind(fileReader.getModifiers()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6975962c4776692cf7a3137e5ee0858b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " \tpublic void test166()", "signatureAfterChange": " \tpublic void test166() throws Exception", "diff": ["-\tpublic void test166() {", "+\tpublic void test166() throws Exception {", "-\t\ttry {", "-\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\t\tfinal byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "-\t\t\tnew ClassFileReader(classFileBytes, \"X.java\".toCharArray(), true);", "-\t\t\tdisassembler.disassemble(", "-\t\t\t\t\tclassFileBytes,", "-\t\t\t\t\t\"\\n\",", "-\t\t\t\t\tClassFileBytesDisassembler.DETAILED);\t\t\t", "-\t\t} catch (ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tfinal byte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "+\t\tnew ClassFileReader(classFileBytes, \"X.java\".toCharArray(), true);", "+\t\tdisassembler.disassemble(", "+\t\t\t\tclassFileBytes,", "+\t\t\t\t\"\\n\",", "+\t\t\t\tClassFileBytesDisassembler.DETAILED);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea21a0685d3b9916a13d989f228609c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode)", "signatureAfterChange": " \tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) throws Exception", "diff": ["-\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) {", "+\tprotected void checkDisassembledClassFile(String fileName, String className, String expectedOutput, int mode) throws Exception {", "-\t\tString result = null;", "-\t\ttry {", "-\t\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "-\t\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\t\t\tresult = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"Should not happen : \", false);", "-\t\t} catch (ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"Should not happen : \", false);", "-\t\t}", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(classFile);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);", "-\t\t", "-\t\ttry {", "-\t\t\tFileInputStream stream = new FileInputStream(classFile);", "-\t\t\tClassFileReader.read(stream, className + \".class\", true);", "-\t\t\tstream.close();", "-\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"ClassFormatException\", false);", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t\tassertTrue(\"IOException\", false);", "-\t\t}", "+\t\tFileInputStream stream = new FileInputStream(classFile);", "+\t\tClassFileReader.read(stream, className + \".class\", true);", "+\t\tstream.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f48dcc4fc8d94776552d509e0cf261e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "d785f90166aa4c50a893672b2f8b10875313fedd", "commitAfterChange": "b8b352fc846455808f45330cfd0c7d70c44859bf", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": " public void test127()", "signatureAfterChange": " public void test127() throws Exception", "diff": ["-public void test127() {", "+public void test127() throws Exception {", "-\tString actualOutput = null;", "-\ttry {", "-\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "-\t\tactualOutput =", "-\t\t\tdisassembler.disassemble(", "-\t\t\t\tclassFileBytes,", "-\t\t\t\t\"\\n\",", "-\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\tassertTrue(\"ClassFormatException\", false);", "-\t} catch (IOException e) {", "-\t\tassertTrue(\"IOException\", false);", "-\t}", "+\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X.class\"));", "+\tString actualOutput =", "+\t\tdisassembler.disassemble(", "+\t\t\tclassFileBytes,", "+\t\t\t\"\\n\",", "+\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\tactualOutput = null;", "-\ttry {", "-\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X$1.class\"));", "-\t\tactualOutput =", "-\t\t\tdisassembler.disassemble(", "-\t\t\t\tclassFileBytes,", "-\t\t\t\t\"\\n\",", "-\t\t\t\tClassFileBytesDisassembler.DETAILED); ", "-\t} catch (org.eclipse.jdt.core.util.ClassFormatException e) {", "-\t\tassertTrue(\"ClassFormatException\", false);", "-\t} catch (IOException e) {", "-\t\tassertTrue(\"IOException\", false);", "-\t}", "+\tclassFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(new File(OUTPUT_DIR + File.separator  +\"X$1.class\"));", "+\tactualOutput =", "+\t\tdisassembler.disassemble(", "+\t\t\tclassFileBytes,", "+\t\t\t\"\\n\",", "+\t\t\tClassFileBytesDisassembler.DETAILED); "]}], "num": 17680}
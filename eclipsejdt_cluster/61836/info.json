{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ccfa159be6d1f28062e84328903d50b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ba9056f781b0032392c9d85c6c3a7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static Set<IFile> runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": "  \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\tprivate static Set<IFile> runAPT(", "+\tprivate static APTResult runAPT(", "-\t\t\tfinal ProcessorEnvImpl processorEnv) {", "+\t\t\tfinal ProcessorEnvImpl processorEnv) ", "+\t{", "-\t\t\t\treturn Collections.emptySet();", "-", "+\t\t\t{", "+\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because there are no factories\");", "+\t\t\t\treturn EMPTY_APT_RESULT;", "+\t\t\t}", "+\t\t\t\t", "-\t\t\t\treturn Collections.emptySet();", "-\t\t\t", "+\t\t\t{", "+\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because file doesn't exist\");", "+\t\t\t\treturn EMPTY_APT_RESULT;", "+\t\t\t}", "+\t\t\t\t", "+\t\t\t", "-\t\t\t\treturn Collections.emptySet();", "+\t\t\t{", "+\t\t\t\tif ( DEBUG ) trace ( \"runAPT:  leaving early because annotationDecls is empty\" );", "+\t\t\t\treturn EMPTY_APT_RESULT;", "+\t\t\t}", "+\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( processorEnv.getJavaProject().getProject() );", "+\t\t\tSet<IFile> lastGeneratedFiles = gfm.getGeneratedFilesForParent( processorEnv.getFile() );", "+\t\t\t", "+\t\t\t\t\t{", "+\t\t\t\t\t\tif ( DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() );", "+\t\t\t\t\t}", "-\t\t\tfinal Set<IFile> generatedFiles = new HashSet<IFile>();", "-\t\t\tgeneratedFiles.addAll( processorEnv.getGeneratedFiles() );", "+\t\t\tfinal Set<IFile> allGeneratedFiles = new HashSet<IFile>();", "+\t\t\tSet<IFile> modifiedFiles = new HashSet<IFile>();", "+\t\t\tMap<IFile, Boolean> filesMap = processorEnv.getGeneratedFiles();", "+\t\t\tfor (Map.Entry<IFile, Boolean> entry : filesMap.entrySet()) {", "+\t\t\t\tallGeneratedFiles.add(entry.getKey());", "+\t\t\t\tif (entry.getValue()) {", "+\t\t\t\t\tmodifiedFiles.add(entry.getKey());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// any files that were generated for this parent on the last", "+\t\t\t// run, but are no longer generated should be removed", "+\t\t\tSet<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( processorEnv.getFile(), lastGeneratedFiles, allGeneratedFiles, gfm );", "+", "+\t\t\tAPTResult result = new APTResult( modifiedFiles, deletedFiles, processorEnv.getTypeDependencies() );", "-\t\t\treturn generatedFiles;", "+\t\t\treturn result;", "-\t\treturn Collections.emptySet();", "+\t\treturn EMPTY_APT_RESULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4336c44be82854fbf6b60d569372345c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "d4fbb2dc620a3bd100b1dfc77464dd2b555e2dbc", "commitAfterChange": "a87cbcf6820e29c784cdbeba4d4d7b888f3bb8dc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t// methodDvoid3 has an annotation with string array type, but its value is a single string.", "+\t\t// See bug 261969.", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid3 = _methodDvoid3.getAnnotationMirrors();", "+\t\tif (1 != annotsMethodDvoid3.size()) {", "+\t\t\treportError(\"Wrong number of annotations on D.methodDvoid3(): expected 1, got \" + annotsMethodDvoid3.size());", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationMirror annotMethodDvoid3 = annotsMethodDvoid3.get(0);", "+\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> annotMethodDvoid3Values = annotMethodDvoid3.getElementValues();", "+\t\tif (1 != annotMethodDvoid3Values.size()) {", "+\t\t\treportError(\"Wrong number of values on annotation on D.methodDvoid3(): expected 1, got \" ", "+\t\t\t\t\t+ annotMethodDvoid3Values.size());", "+\t\t\treturn false;", "+\t\t}", "+\t\tAnnotationValue annotMethodDvoid3Value = annotMethodDvoid3Values.values().iterator().next();", "+\t\tObject annotMethodDvoid3RealValue = annotMethodDvoid3Value.getValue();", "+\t\tif (null == annotMethodDvoid3RealValue) {", "+\t\t\treportError(\"Value of annotation on D.methodDvoid3() was null\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!(annotMethodDvoid3RealValue instanceof List<?>)) {", "+\t\t\treportError(\"Expected type of annotation on D.methodDvoid3() to be List<?> but was: \" +", "+\t\t\t\t\tannotMethodDvoid3RealValue.getClass().getName());", "+\t\t\treturn false;", "+\t\t}", "+\t\t// If it's a List, then it's a List<AnnotationValue> so we've got another layer to decipher", "+\t\tAnnotationValue innerDvoid3Value = ((AnnotationValue)((List<?>)annotMethodDvoid3RealValue).get(0));", "+\t\tif (!\"methodDvoid3Value\".equals((String)innerDvoid3Value.getValue())) {", "+\t\t\treportError(\"Expected value of annotation on D.methodDvoid3() to be \\\"methodDvoid3Value\\\" but was: \" +", "+\t\t\t\t\tinnerDvoid3Value.getValue());", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e766c7fe9f023ca34033d66557a956a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "ca3904810f95e1bcd38fe30169e6be65df9fab10", "commitAfterChange": "8d889a3eb8b924cc60e70fa9d37c9ce9262cf8ad", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t\tint order = 0;", "+\t\t\t\t++order;", "+\t\t\t\t\t// Annotation value map should preserve order of annotation values", "+\t\t\t\t\tif (order != 1) {", "+\t\t\t\t\t\treportError(\"The annoZint param on D.methodDvoid should be first in the map, but was \" + order);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t// methodDvoid2 is like methodDvoid but the annotation values are in opposite order;", "+\t\t// check to see that order has been preserved", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid2 = _methodDvoid2.getAnnotationMirrors();", "+\t\tfor (AnnotationMirror annotMethodDvoid2 : annotsMethodDvoid2) {", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annotMethodDvoid2.getElementValues();", "+\t\t\tif (null == values || values.size() != 2) {", "+\t\t\t\treportError(\"@AnnoZ on D.methodDvoid2() should have two values but had: \" +", "+\t\t\t\t\t\t(values == null ? 0 : values.size()));", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tint order = 0;", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tswitch (++order) {", "+\t\t\t\tcase 1:", "+\t\t\t\t\tif (!\"annoZString\".equals(methodName)) {", "+\t\t\t\t\t\treportError(\"First value of @AnnoZ on D.methodDvoid2 should be annoZString, but was: \" + methodName);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2:", "+\t\t\t\t\tif (!\"annoZint\".equals(methodName)) {", "+\t\t\t\t\t\treportError(\"Second value of @AnnoZ on D.methodDvoid2 should be annoZint, but was: \" + methodName);", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 61836}
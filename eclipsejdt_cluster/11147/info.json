{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36f96bb7c492816079adf82e439cbbb7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e17066ea1f016e437b3af87fe3c74f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "eae9b6d133d1e0c7d2c9c5eea34b3530b0d87bc7", "commitAfterChange": "f3b2714ce76600cbff47416c089b334d95e8398e", "methodNumberBeforeChange": 240, "methodNumberAfterChange": 240, "signatureBeforeChange": " public void test0554_try_catch()", "signatureAfterChange": " public void test0554_try_catch()", "diff": ["-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\"", "-\t\t// conservative flow analysis suppresses the warning", "-//\t\t\"----------\\n\" +", "-//\t\t\"1. ERROR in X.java (at line 10)\\n\" +", "-//\t\t\"\tif (o != null) {\\n\" +", "-//\t\t\"\t    ^\\n\" +", "-//\t\t\"Redundant null check: The variable o can only be null at this location\\n\" +", "-//\t\t\"----------\\n\"", "+\t\t\"----------\\n\" +", "+\t\t\"1. ERROR in X.java (at line 10)\\n\" +", "+\t\t\"\tif (o != null) {\\n\" +", "+\t\t\"\t    ^\\n\" +", "+\t\t\"Null comparison always yields false: The variable o can only be null at this location\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 10)\\n\" +", "+\t\t\"\tif (o != null) {\\n\" +", "+\t\t\"    }\\n\" +", "+\t\t\"\t               ^^^^^^^\\n\" +", "+\t\t\"Dead code\\n\" +", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bd70493b47b8ea583a7c51ed8f35b57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 437, "methodNumberAfterChange": 437, "signatureBeforeChange": " \tpublic void test435()", "signatureAfterChange": " \tpublic void test435()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80083", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80765", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\"*** public void Test.test1(): success*** public void Test.test2(): success*** public void Test.test3(): success*** public void Test.test4(): success\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in orders\\\\impl\\\\IntegerOrder2.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\tpublic Comparable previous(Comparable arg0) {\\r\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method previous(Comparable) of type IntegerOrder2 has the same erasure as previous(E) of type DiscreteOrder<E> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in orders\\\\impl\\\\IntegerOrder2.java (at line 14)\\r\\n\" + ", "+\t\t\t\"\tpublic Comparable next(Comparable arg0) {\\r\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method next(Comparable) of type IntegerOrder2 has the same erasure as next(E) of type DiscreteOrder<E> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// \"*** public void Test.test1(): success*** public void Test.test2(): success*** public void Test.test3(): success*** public void Test.test4(): success\"", "+\t\t\t// name clash: next(java.lang.Comparable) in orders.impl.IntegerOrder2 and next(E) in orders.DiscreteOrder<java.lang.Integer> have the same erasure, yet neither overrides the other", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1b008b6121d37e0d79de41099550a43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void test079()", "signatureAfterChange": " public void test079()", "diff": ["+// See that this test case exhibits the bug 345947", "-\tthis.runConformTest(", "+\tthis.runNegativeTest(", "-\t\t\"\"", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\t<T extends A> I<T> x() throws IllegalAccessError;\\n\" + ", "+\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method x() of type Two has the same erasure as x() of type One but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tI<B> y() throws IllegalAccessError;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Type safety: The return type I<B> for y() from the type Two needs unchecked conversion to conform to I<A> from the type One\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a34a4b7a7fdf4223cd9b64cbcee36e72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 544, "methodNumberAfterChange": 544, "signatureBeforeChange": " \tpublic void test540()", "signatureAfterChange": " \tpublic void test540()", "diff": ["-\t// javac incorrectly rejects it", "+\t// test paramtype argument compatibility", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Baz.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tinterface Bar extends Foo {\\r\\n\" + ", "+\t\t\t\"\t                      ^^^\\n\" + ", "+\t\t\t\"Foo is a raw type. References to generic type Foo<X> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Baz.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\treturn visit(c, d);\\r\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"The method visit(Collection<? extends Foo<?>>, D) in the type Baz<R,D> is not applicable for the arguments (Collection<Bar>, D)\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5d7d7d5264b225d5353168fe529c4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": " \t\tpublic void _test025()", "signatureAfterChange": " \t\tpublic void test025()", "diff": ["-\t\tpublic void _test025(){", "+\t\tpublic void test025(){", "-\t\t        \"[2 .class files generated]\\n\",", "+\t\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/1]\\n\" + ", "+\t\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t\t\t\"[reading    java/lang/Object.class]\\n\" + ", "+\t\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "+\t\t\t\t\"[writing    Y.class - #1]\\n\" + ", "+\t\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "+\t\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t\t\t\"[reading    sun/net/spi/nameservice/dns/DNSNameService.class]\\n\" + ", "+\t\t\t\t\"[writing    X.class - #2]\\n\" + ", "+\t\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t\t\t\"[2 units compiled]\\n\" + ", "+\t\t\t\t\"[2 .class files generated]\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c56a0c46a2d1ce8cfe55046b697f47ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "348bd876780869d134d8b9dcd3416e2478160c68", "commitAfterChange": "cdd098ef58e71732005f513537bb4c52226dd628", "methodNumberBeforeChange": 412, "methodNumberAfterChange": 412, "signatureBeforeChange": " \tpublic void test410()", "signatureAfterChange": " \tpublic void test410()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"  list.add(new RuntimeException());             // JDT works, Javac works\\n\" + ", "-\t\t\t\t\"  list.add(new IllegalMonitorStateException()); // JDT works, Javac works\\n\" + ", "+\t\t\t\t\"  list.add(new RuntimeException());             // works\\n\" + ", "+\t\t\t\t\"  list.add(new IllegalMonitorStateException()); // works\\n\" + ", "-\t\t\t\t\"  list.add(exc);                                // both works\\n\" + ", "-\t\t\t\t\"  list.add(new Object());                       // JDT works, Javac fails\\n\" + ", "-\t\t\t\t\"  list.add(new Throwable());                    // JDT works, Javac fails\\n\" + ", "-\t\t\t\t\"  list.add(new Exception());                    // both works\\n\" + ", "+\t\t\t\t\"  list.add(exc);                                // works\\n\" + ", "+\t\t\t\t\"  list.add(new Object());                       // should fail\\n\" + ", "+\t\t\t\t\"  list.add(new Throwable());                    // should fail\\n\" + ", "+\t\t\t\t\"  list.add(new Exception());                    // works\\n\" + ", "-\t\t\t\"\");\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\r\\n\" + ", "+\t\t\t\"\tlist.add(new Object());                       // should fail\\r\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"The method add(? super Exception) in the type List<? super Exception> is not applicable for the arguments (Object)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\r\\n\" + ", "+\t\t\t\"\tlist.add(new Throwable());                    // should fail\\r\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"The method add(? super Exception) in the type List<? super Exception> is not applicable for the arguments (Throwable)\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7e6bf657d195bea368ee28b590c0b29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "0edd2a8da94febc0bef7418a02cfac9f1a30d36a", "commitAfterChange": "85f48e0f08275e1f81e9995073d5c4f69bfd0707", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"112\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tx.a(true);\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method a(boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tx.a(true, \\\"foobar\\\");\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method a(boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 11147}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05257b5548ad9b56cc1337aaab7df7b8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a91a90469ef8d6b7314cf29b9a2ae23e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "diff": ["-\t\t\tthis.trailingComments.put(node, new int[] { -1, -1 });", "+\t\t\tif (++this.trailingPtr == 0) {", "+\t\t\t\tthis.trailingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.lastTrailingPtr = -1;", "+\t\t\t} else if (this.trailingPtr == this.trailingNodes.length) {", "+\t\t\t\tint newLength = (this.trailingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[newLength], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t}", "+\t\t\tthis.trailingNodes[this.trailingPtr] = node;", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = new int[] { -1, -1 };", "-\t\t\tthis.trailingComments.put(node, new int[] { startIdx, endIdx });", "+\t\t\tif (++this.trailingPtr == 0) {", "+\t\t\t\tthis.trailingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.lastTrailingPtr = -1;", "+\t\t\t} else if (this.trailingPtr == this.trailingNodes.length) {", "+\t\t\t\tint newLength = (this.trailingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[newLength], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t}", "+\t\t\tthis.trailingNodes[this.trailingPtr] = node;", "+\t\t\tint[] nodeRange = new int[] { startIdx, endIdx };", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = nodeRange;", "+\t\t\t// Compute new extended end", "+\t\t\t// Look for children unresolved extended end", "+\t\t\tASTNode previousNode = node;", "+\t\t\tint ptr = this.trailingPtr - 1; // children extended end were stored before", "+\t\t\tunresolved: while (ptr >= 0) {", "+\t\t\t\tint[] range = this.trailingIndexes[ptr];", "+\t\t\t\tif (range[0] != -1 || range[1] != -1) break; // there's no more unresolved nodes", "+\t\t\t\tASTNode unresolved = this.trailingNodes[ptr];", "+\t\t\t\tif (previousNode != unresolved.getParent()) break; // we're no longer in node ancestor hierarchy", "+\t\t\t\tthis.trailingIndexes[ptr] = nodeRange;", "+\t\t\t\tpreviousNode = unresolved;", "+\t\t\t\tptr--; // get previous node", "+\t\t\t}", "+\t\t\t// Remove remaining unresolved nodes", "+\t\t\tif (ptr > this.lastTrailingPtr) {", "+\t\t\t\tint offset = ptr - this.lastTrailingPtr;", "+\t\t\t\tfor (int i=ptr+1; i<=this.trailingPtr; i++) {", "+\t\t\t\t\tthis.trailingNodes[i-offset] = this.trailingNodes[i];", "+\t\t\t\t\tthis.trailingIndexes[i-offset] = this.trailingIndexes[i];", "+\t\t\t\t}", "+\t\t\t\tthis.trailingPtr -= offset;", "+\t\t\t}", "+\t\t\tthis.lastTrailingPtr = this.trailingPtr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2811524c72967f387c237948ecde42d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": "  \tpublic void acceptType(char[] packageName, char[] typeName, int modifiers, AccessRestriction accessRestriction)", "diff": ["+\tpublic void acceptType(char[] packageName, char[] typeName, int modifiers, AccessRestriction accessRestriction) {", "+\t\t\t\tint length = 0;", "+\t\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\t\tswitch (kind) {", "+\t\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\t\tchar[][] acceptedAnnotation = new char[2][];", "+\t\t\t\t\t\tacceptedAnnotation[0] = packageName;", "+\t\t\t\t\t\tacceptedAnnotation[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedAnnotations == null) {", "+\t\t\t\t\t\t\tthis.acceptedAnnotations = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedAnnotationsModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedAnnotationsCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedAnnotations.length;", "+\t\t\t\t\t\tif(length == this.acceptedAnnotationsCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedAnnotations, 0, this.acceptedAnnotations = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedAnnotationsModifiers, 0, this.acceptedAnnotationsModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedAnnotationsModifiers[this.acceptedAnnotationsCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedAnnotations[this.acceptedAnnotationsCount++] = acceptedAnnotation;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\t\tchar[][] acceptedEnum = new char[2][];", "+\t\t\t\t\t\tacceptedEnum[0] = packageName;", "+\t\t\t\t\t\tacceptedEnum[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedEnums == null) {", "+\t\t\t\t\t\t\tthis.acceptedEnums = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedEnumsModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedEnumsCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedEnums.length;", "+\t\t\t\t\t\tif(length == this.acceptedEnumsCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedEnums, 0, this.acceptedEnums = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedEnumsModifiers, 0, this.acceptedEnumsModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedEnumsModifiers[this.acceptedEnumsCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedEnums[this.acceptedEnumsCount++] = acceptedEnum;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\t\tchar[][] acceptedInterface= new char[2][];", "+\t\t\t\t\t\tacceptedInterface[0] = packageName;", "+\t\t\t\t\t\tacceptedInterface[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedInterfaces == null) {", "+\t\t\t\t\t\t\tthis.acceptedInterfaces = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedInterfacesModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedInterfacesCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedInterfaces.length;", "+\t\t\t\t\t\tif(length == this.acceptedInterfacesCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedInterfaces, 0, this.acceptedInterfaces = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedInterfacesModifiers, 0, this.acceptedInterfacesModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedInterfacesModifiers[this.acceptedInterfacesCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedInterfaces[this.acceptedInterfacesCount++] = acceptedInterface;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tchar[][] acceptedClass = new char[2][];", "+\t\t\t\t\t\tacceptedClass[0] = packageName;", "+\t\t\t\t\t\tacceptedClass[1] = typeName;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif(this.acceptedClasses == null) {", "+\t\t\t\t\t\t\tthis.acceptedClasses = new char[10][][];", "+\t\t\t\t\t\t\tthis.acceptedClassesModifiers = new int[10];", "+\t\t\t\t\t\t\tthis.acceptedClassesCount = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlength = this.acceptedClasses.length;", "+\t\t\t\t\t\tif(length == this.acceptedClassesCount) {", "+\t\t\t\t\t\t\tint newLength = (length + 1)* 2;", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedClasses, 0, this.acceptedClasses = new char[newLength][][], 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(this.acceptedClasses, 0, this.acceptedClassesModifiers = new int[newLength], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.acceptedClassesModifiers[this.acceptedClassesCount] = modifiers;", "+\t\t\t\t\t\tthis.acceptedClasses[this.acceptedClassesCount++] = acceptedClass;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\tthis.requestor.acceptType(", "-\t */", "-\tpublic void acceptInterface(", "-\t\tchar[] packageName,", "-\t\tchar[] interfaceName,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tif (CharOperation.equals(interfaceName, this.selectedIdentifier)) {", "-\t\t\tif(mustQualifyType(packageName, interfaceName)) {", "-\t\t\t\tchar[][] acceptedInterface= new char[2][];", "-\t\t\t\tacceptedInterface[0] = packageName;", "-\t\t\t\tacceptedInterface[1] = interfaceName;", "-\t\t\t\t", "-\t\t\t\tif(this.acceptedInterfaces == null) {", "-\t\t\t\t\tthis.acceptedInterfaces = new char[10][][];", "-\t\t\t\t\tthis.acceptedInterfacesCount = 0;", "-\t\t\t\t}", "-\t\t\t\tint length = this.acceptedInterfaces.length;", "-\t\t\t\tif(length == this.acceptedInterfacesCount) {", "-\t\t\t\t\tSystem.arraycopy(this.acceptedInterfaces, 0, this.acceptedInterfaces = new char[(length + 1) * 2][][], 0, length);", "-\t\t\t\t}", "-\t\t\t\tthis.acceptedInterfaces[this.acceptedInterfacesCount++] = acceptedInterface;", "-\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\tpackageName,", "-\t\t\t\t\tinterfaceName,", "+\t\t\t\t\tmodifiers,"]}], "num": 10090}
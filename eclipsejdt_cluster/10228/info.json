{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72bcb477408eacef48db7ae47952be7c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "821dd028ef4482746f100ff88533460f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\tif ((!dotPrefix) && (this.currentCharacter == '0')) {", "+\tif (!dotPrefix && (this.currentCharacter == '0')) {", "-\t\t\twhile (getNextCharAsDigit(16)){/*empty*/}", "+\t\t\tconsumeDigits(16, true);", "-\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\tif (end == start) {", "-\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.currentPosition = end;", "-\t\t\t\t\treturn TokenNameIntegerLiteral;", "-\t\t\t\t}", "-\t\t\t\twhile (getNextCharAsDigit(16)){/*empty*/}", "+\t\t\t\tconsumeDigits(16, true);", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t\t\t\t// wrongly place '_'", "+\t\t\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t\t\t\t}", "-\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "-\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t// if we are in source level < 1.5 we report an integer literal", "-\t\t\t\t\tthis.currentPosition = end;", "-\t\t\t\t\treturn TokenNameIntegerLiteral;", "-\t\t\t\t}", "-\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "+\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t\t\t// wrongly place '_'", "+\t\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t\t\t}", "-\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "-\t\t\t\tif (getNextChar('f', 'F') >= 0)", "+\t\t\t\t}", "+\t\t\t\tconsumeDigits(10);", "+\t\t\t\tif (getNextChar('f', 'F') >= 0) {", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "-\t\t\t\tif (getNextChar('d', 'D') >= 0)", "+\t\t\t\t}", "+\t\t\t\tif (getNextChar('d', 'D') >= 0) {", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t} else if (getNextChar('b', 'B') >= 0) { //----------binary-----------------", "+\t\t\tint start = this.currentPosition;", "+\t\t\tconsumeDigits(2, true);", "+\t\t\tint end = this.currentPosition;", "+\t\t\tif (end == start) {", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\tthrow new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);", "+\t\t\t\t}", "+\t\t\t\tthrow new InvalidInputException(INVALID_BINARY);", "+\t\t\t}", "+\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\tthrow new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);", "+\t\t\t\t}", "+\t\t\t\treturn TokenNameLongLiteral;", "+\t\t\t}", "+\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\tthrow new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);", "+\t\t\t}", "+\t\t\treturn TokenNameIntegerLiteral;", "-\t\t//there is x or X in the number", "-\t\t//potential octal ! ... some one may write 000099.0 ! thus 00100 < 00078.0 is true !!!!! crazy language", "+\t\t//there is no x or X nor b or B in the number", "+\t\t//potential octal", "-\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\tconsumeDigits(10);", "-\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\tconsumeDigits(10);", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "+\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "+\t\t\t\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t\t\t\t// wrongly place '_'", "+\t\t\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t\t\t\t}", "-\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\t}", "+\t\t\t\t\tconsumeDigits(10);", "-\twhile (getNextCharAsDigit()){/*empty*/}", "+\tconsumeDigits(10);", "-\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\tconsumeDigits(10, true);", "-\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "+\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "+\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t// wrongly place '_'", "+\t\t\t\tconsumeDigits(10);", "+\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t}", "-\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t}", "+\t\t// current character is a digit so we expect no digit first (the next character could be an underscore)", "+\t\tconsumeDigits(10);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7e9a13cdaeea66cc1f5077e84d91f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": "   public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\tif ((!dotPrefix) && (this.currentCharacter == '0')) {", "+\tif (!dotPrefix && (this.currentCharacter == '0')) {", "-\t\t\twhile (getNextCharAsDigit(16)){/*empty*/}", "+\t\t\tconsumeDigits(16, true);", "-\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\tif (end == start) {", "-\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HEXA);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.currentPosition = end;", "-\t\t\t\t\treturn TokenNameIntegerLiteral;", "-\t\t\t\t}", "-\t\t\t\twhile (getNextCharAsDigit(16)){/*empty*/}", "+\t\t\t\tconsumeDigits(16, true);", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t\t\t\t// wrongly place '_'", "+\t\t\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t\t\t\t}", "-\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "-\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t// if we are in source level < 1.5 we report an integer literal", "-\t\t\t\t\tthis.currentPosition = end;", "-\t\t\t\t\treturn TokenNameIntegerLiteral;", "-\t\t\t\t}", "-\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "+\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t\t\t// wrongly place '_'", "+\t\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t\t\t}", "-\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "-\t\t\t\tif (getNextChar('f', 'F') >= 0)", "+\t\t\t\t}", "+\t\t\t\tconsumeDigits(10);", "+\t\t\t\tif (getNextChar('f', 'F') >= 0) {", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "-\t\t\t\tif (getNextChar('d', 'D') >= 0)", "+\t\t\t\t}", "+\t\t\t\tif (getNextChar('d', 'D') >= 0) {", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\tthrow new InvalidInputException(ILLEGAL_HEXA_LITERAL);", "+\t\t} else if (getNextChar('b', 'B') >= 0) { //----------binary-----------------", "+\t\t\tint start = this.currentPosition;", "+\t\t\tconsumeDigits(2, true);", "+\t\t\tint end = this.currentPosition;", "+\t\t\tif (end == start) {", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\tthrow new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);", "+\t\t\t\t}", "+\t\t\t\tthrow new InvalidInputException(INVALID_BINARY);", "+\t\t\t}", "+\t\t\tif (getNextChar('l', 'L') >= 0) {", "+\t\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\t\tthrow new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);", "+\t\t\t\t}", "+\t\t\t\treturn TokenNameLongLiteral;", "+\t\t\t}", "+\t\t\tif (this.sourceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\t\tthrow new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);", "+\t\t\t}", "+\t\t\treturn TokenNameIntegerLiteral;", "-\t\t//there is x or X in the number", "-\t\t//potential octal ! ... some one may write 000099.0 ! thus 00100 < 00078.0 is true !!!!! crazy language", "+\t\t//there is no x or X nor b or B in the number", "+\t\t//potential octal", "-\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\tconsumeDigits(10);", "-\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\tconsumeDigits(10);", "-\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "+\t\t\t\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "+\t\t\t\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t\t\t\t// wrongly place '_'", "+\t\t\t\t\t\t\tconsumeDigits(10);", "+\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t\t\t\t}", "-\t\t\t\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t\t\t\t}", "+\t\t\t\t\tconsumeDigits(10);", "-\twhile (getNextCharAsDigit()){/*empty*/}", "+\tconsumeDigits(10);", "-\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\tconsumeDigits(10, true);", "-\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "+\t\t\t\t|| (this.currentCharacter == '+')) { // consume next character", "-\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "+\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\tif (!ScannerHelper.isDigit(this.currentCharacter))", "+\t\tif (!ScannerHelper.isDigit(this.currentCharacter)) {", "+\t\t\tif (this.currentCharacter == '_') {", "+\t\t\t\t// wrongly place '_'", "+\t\t\t\tconsumeDigits(10);", "+\t\t\t\tthrow new InvalidInputException(INVALID_UNDERSCORE);", "+\t\t\t}", "-\t\twhile (getNextCharAsDigit()){/*empty*/}", "+\t\t}", "+\t\t// current character is a digit so we expect no digit first (the next character could be an underscore)", "+\t\tconsumeDigits(10);"]}], "num": 10228}
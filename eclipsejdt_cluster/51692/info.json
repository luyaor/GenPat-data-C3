{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29bcb4e9b6eea2792de0958e5d00d4c6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe47829de39a5fc73234a9b3b27a42b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void testElementPatternSingleTypeArgument05() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleTypeParameter05() throws CoreException", "diff": ["-\t// Search reference to a generic method returning a param type with param type parameters (=full)", "-\tpublic void testElementPatternSingleTypeArgument05() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearch15/src/g4/m/def/GS.java\").getType(\"GS\");", "-\t\tIMethod method = type.getMethod(\"full\", new String[] { \"QU;\", \"QGS<QT;>;\" });", "-\t\tassertTrue(\"Method \"+method.getSignature()+\" does not exist!\", method.exists());", "-\t\tIJavaSearchScope scope = getJavaSearchCUScope(\"JavaSearch15\", \"g4/m/ref\", \"R1.java\");", "+\tpublic void testMethodReferencesElementPatternSingleTypeParameter05() throws CoreException {", "+\t\tIType type = getCompilationUnit(\"JavaSearch15/src/g5/m/def/Single.java\").getType(\"Single\");", "+\t\t// search reference to a generic method returning a param type with param type parameters (=complete)", "+\t\tIMethod method = type.getMethod(\"complete\", new String[] { \"QU;\", \"QSingle<QT;>;\" });", "+\t\tIJavaSearchScope scope = getJavaSearchScope15();", "-\t\t\t\"???\",", "-\t\t\tresultCollector);", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [complete(new Object(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [complete(new Exception(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [complete(new RuntimeException(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [complete(new String(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [complete(new Throwable(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] ERASURE_MATCH\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37858441a6fd00b4d6e60c33a28f702", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void testElementPatternSingleTypeArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleTypeParameter04() throws CoreException", "diff": ["-\t// Search reference to a method with parameterized type arguments", "-\tpublic void testElementPatternSingleTypeArgument04() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearch15/src/g4/m/def/GS.java\").getType(\"GS\");", "-\t\tIMethod method = type.getMethod(\"paramTypesArgs\", new String[] { \"QGS<QT;>;\" });", "-\t\tassertTrue(\"Method \"+method.getSignature()+\" does not exist!\", method.exists());", "-\t\tIJavaSearchScope scope = getJavaSearchCUScope(\"JavaSearch15\", \"g4/m/ref\", \"R1.java\");", "+\tpublic void testMethodReferencesElementPatternSingleTypeParameter04() throws CoreException {", "+\t\tIType type = getCompilationUnit(\"JavaSearch15/src/g5/m/def/Single.java\").getType(\"Single\");", "+\t\t// search reference to a method with parameterized type arguments", "+\t\tIMethod method = type.getMethod(\"paramTypesArgs\", new String[] { \"QSingle<QT;>;\" });", "+\t\tIJavaSearchScope scope = getJavaSearchScope15();", "-\t\t\t\"???\",", "-\t\t\tresultCollector);", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testUnbound() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testExtends() [paramTypesArgs(gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [paramTypesArgs(gs)] ERASURE_MATCH\"", "+\t\t);"]}], "num": 51692}
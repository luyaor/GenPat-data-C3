{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71d454425a5338ca219be6bc8fbc2eee", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3f95b578929bfc562ee022e08bdf40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected boolean matchIndexEntry()", "signatureAfterChange": " protected boolean matchIndexEntry()", "diff": ["-", "-\t/* check type name matches */", "-\t\tswitch(matchMode){", "+\t\tswitch(matchMode) {", "-\t\t\t\tif (!CharOperation.equals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn CharOperation.equals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive);", "-\t\t\t\tif (!CharOperation.prefixEquals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn CharOperation.prefixEquals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive);", "-\t\t\t\tif (!CharOperation.match(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "+\t\t\t\treturn CharOperation.match(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive);", "-\t\tswitch(matchMode){", "+\t\tswitch(matchMode) {", "-\t\t\t\tif (!CharOperation.equals(simpleName, decodedSimpleName, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn CharOperation.equals(simpleName, decodedSimpleName, isCaseSensitive);", "-\t\t\t\tif (!CharOperation.prefixEquals(simpleName, decodedSimpleName, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn CharOperation.prefixEquals(simpleName, decodedSimpleName, isCaseSensitive);", "-\t\t\t\tif (!CharOperation.match(simpleName, decodedSimpleName, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "+\t\t\t\treturn CharOperation.match(simpleName, decodedSimpleName, isCaseSensitive);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3e3ae9692193626ee0717e49aab47ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "24eb072a7e8fa246f853df0748e7c66069f4ff20", "commitAfterChange": "cd140389e1d0cdca9f232f9b33d1b09e90034b22", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind)", "signatureAfterChange": "  \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind, boolean firstIsTypeAnnotation)", "diff": ["-\tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind) {", "+\tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind, boolean firstIsTypeAnnotation) {", "-\t\t\tboolean foundNonAnnotModifiers = false;", "+\t\t\tboolean treatNextAsTypeAnnotation = firstIsTypeAnnotation;", "-\t\t\t\t\t\tfoundNonAnnotModifiers = true;", "+\t\t\t\t\t\ttreatNextAsTypeAnnotation = true;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_type) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_type;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_field) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_field;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_method) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_method;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_package) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_package;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_parameter) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_parameter;", "-\t\t\t\t\t\t\t\t\tif (this.formatter.preferences.insert_new_line_after_annotation_on_local_variable) {", "-\t\t\t\t\t\t\t\t\t\tshouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tshouldAddNewLine = treatNextAsTypeAnnotation", "+\t\t\t\t\t\t\t\t\t\t\t? this.formatter.preferences.insert_new_line_after_type_annotation", "+\t\t\t\t\t\t\t\t\t\t\t: this.formatter.preferences.insert_new_line_after_annotation_on_local_variable;"]}], "num": 63561}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "769098fdac7bc881d05ccd8f666410d5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc040e3a46f66e8924de6c2a7e64198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BasicCompilationUnit.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public char[] getContents()", "signatureAfterChange": "\r public char[] getContents()", "diff": ["-\tBufferedReader reader = null;\r", "-\t\tFile file = new File(new String(fileName));\r", "-\t\treader = new BufferedReader(new FileReader(file));\r", "-\t\tint length;\r", "-\t\tchar[] contents = new char[length = (int) file.length()];\r", "-\t\tint len = 0;\r", "-\t\tint readSize = 0;\r", "-\t\twhile ((readSize != -1) && (len != length)) {\r", "-\t\t\t// See PR 1FMS89U\r", "-\t\t\t// We record first the read size. In this case len is the actual read size.\r", "-\t\t\tlen += readSize;\r", "-\t\t\treadSize = reader.read(contents, len, length - len);\r", "-\t\t}\r", "-\t\treader.close();\r", "-\t\t// See PR 1FMS89U\r", "-\t\t// Now we need to resize in case the default encoding used more than one byte for each\r", "-\t\t// character\r", "-\t\tif (len != length)\r", "-\t\t\tSystem.arraycopy(contents, 0, (contents = new char[len]), 0, len);\t\t\r", "-\t\treturn contents;\r", "-\t} catch (FileNotFoundException e) {\r", "+\t\treturn Util.getFileCharContent(new File(new String(fileName)));\r", "-\t\tif (reader != null) {\r", "-\t\t\ttry {\r", "-\t\t\t\treader.close();\r", "-\t\t\t} catch(IOException ioe) {\r", "-\t\t\t}\r", "-\t\t}\r", "-\t};\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b1bb664398b94a71415f3c19966ec6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public char[] getContents()", "signatureAfterChange": "\r public char[] getContents()", "diff": ["-\tBufferedReader reader = null;\r", "-\t\tFile file = new File(new String(fileName));\r", "-\t\treader = new BufferedReader(new FileReader(file));\r", "-\t\tint length;\r", "-\t\tchar[] contents = new char[length = (int) file.length()];\r", "-\t\tint len = 0;\r", "-\t\tint readSize = 0;\r", "-\t\twhile ((readSize != -1) && (len != length)) {\r", "-\t\t\t// See PR 1FMS89U\r", "-\t\t\t// We record first the read size. In this case len is the actual read size.\r", "-\t\t\tlen += readSize;\r", "-\t\t\treadSize = reader.read(contents, len, length - len);\r", "-\t\t}\r", "-\t\treader.close();\r", "-\t\t// See PR 1FMS89U\r", "-\t\t// Now we need to resize in case the default encoding used more than one byte for each\r", "-\t\t// character\r", "-\t\tif (len != length)\r", "-\t\t\tSystem.arraycopy(contents, 0, (contents = new char[len]), 0, len);\t\t\r", "-\t\treturn contents;\r", "-\t} catch (FileNotFoundException e) {\r", "+\t\treturn Util.getFileCharContent(new File(new String(fileName)));\r", "-\t\tif (reader != null) {\r", "-\t\t\ttry {\r", "-\t\t\t\treader.close();\r", "-\t\t\t} catch(IOException ioe) {\r", "-\t\t\t}\r", "-\t\t}\r", "-\t};\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e5cfc6d37c04ed017743a2be425eb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateImpl.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tprotected char[] getElementContentCharArray(SourceEntry entry)", "signatureAfterChange": "\r \tprotected char[] getElementContentCharArray(SourceEntry entry)", "diff": ["-\t\tBufferedReader reader = null;\r", "+\t\tInputStream stream = null;\r", "-\t\t\treader= new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)));\r", "-\t\t\tint length= bytes.length;\r", "-\t\t\tchar[] contents= new char[length];\r", "-\t\t\tint len= 0;\r", "-\t\t\tint readSize= 0;\r", "-\t\t\twhile ((readSize != -1) && (len != length)) {\r", "-\t\t\t\t// See PR 1FMS89U\r", "-\t\t\t\t// We record first the read size. In this case len is the actual read size.\r", "-\t\t\t\tlen += readSize;\r", "-\t\t\t\treadSize= reader.read(contents, len, length - len);\r", "-\t\t\t}\r", "-\t\t\treader.close();\r", "-\t\t\t// See PR 1FMS89U\r", "-\t\t\t// Now we need to resize in case the default encoding used more than one byte for each\r", "-\t\t\t// character\r", "-\t\t\tif (len != length)\r", "-\t\t\t\tSystem.arraycopy(contents, 0, (contents= new char[len]), 0, len);\r", "-\t\t\treturn contents;\r", "+\t\t\tstream = new ByteArrayInputStream(bytes);\r", "+\t\t\treturn org.eclipse.jdt.internal.compiler.util.Util.getInputStreamAsCharArray(stream, bytes.length);\r", "-\t\t\tif (reader != null) {\r", "+\t\t\treturn new char[0];\r", "+\t\t} finally {\r", "+\t\t\tif (stream != null) {\r", "-\t\t\t\t\treader.close();\r", "+\t\t\t\t\tstream.close();\r", "-\t\t\treturn new char[0];\r"]}], "num": 46323}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3292dc6ecddac9456aebb977bfbd986d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d834a8235b1b16d74a33997809d8f2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "0d0ece63676205621683728295e330e5d3ff8080", "commitAfterChange": "4548a7d90e8e4c11b66df276814b1cfc602d40e1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "diff": ["-\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getFileExtension())) {", "+\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getName())) {", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryArchive\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\tif (checkSourceAttachment ", "-\t\t\t\t\t\t\t&& sourceAttachment != null ", "-\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "-\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "-\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t\t    File file = (File) target;", "+\t\t\t\t\t    if (!file.isFile()) {", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalExternalFolder\", path.toOSString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t    } else if (!org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(file.getName())) {", "+\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryArchive\", path.toOSString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t    } else if (checkSourceAttachment ", "+\t\t\t\t\t\t\t\t&& sourceAttachment != null ", "+\t\t\t\t\t\t\t\t&& !sourceAttachment.isEmpty()", "+\t\t\t\t\t\t\t\t&& JavaModel.getTarget(workspaceRoot, sourceAttachment, true) == null){", "+\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "+\t\t\t\t\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c50592ea90e91d355a33ef9b6ee8b81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject javaProject, IClasspathEntry entry, boolean checkSourceAttachment)", "diff": ["-\t\t\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "-\t\t\t\t\t\t\tString description = null;", "-\t\t\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "-\t\t\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundContainerPath\", description)); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND, javaProject, path);", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(", "-\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,", "-\t\t\t\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidContainer\", description)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY, javaProject, path);", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, javaProject, path);", "+\t\t\t\tif (entry.getExclusionPatterns() != null ", "+\t\t\t\t\t\t&& entry.getExclusionPatterns().length > 0", "+\t\t\t\t\t\t&& JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, path);", "+\t\t\t\t}", "+\t\t\t\tif (entry.getOutputLocation() != null && JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, path);", "+\t\t\t\t}"]}], "num": 17308}
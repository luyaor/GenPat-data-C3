{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8552e1a3b547c403e9044b9aa99c522a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca0c7783c0cddbea556f59b1c24e6d59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "signatureAfterChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "diff": ["-\t\tString fullSourcePath = this.sourceLocation + qualifiedSourceFileName;", "-\t\tString fileEncoding = this.encoding;", "-\t\ttry {", "-\t\t\tfileEncoding = file.getCharset();", "-\t\t}", "-\t\tcatch (CoreException ce) {", "-\t\t\t// let use default encoding", "-\t\t}", "-\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, fileEncoding), null /* no access restriction */);", "+\t\treturn new NameEnvironmentAnswer(new ResourceCompilationUnit(file), null /* no access restriction */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad7f51dced600af7f4016ad9970727e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "ec3a4c33f32cf58050110cfdf8e4a7a59380d854", "commitAfterChange": "de600e80bc6b398dc98185397349cc8cf2c9ff79", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public synchronized IIndex getIndex(IPath path, boolean mustCreate)", "signatureAfterChange": "\r public synchronized IIndex getIndex(IPath path, boolean mustCreate)", "diff": ["-\t\t\t// Compute canonical path\r", "-\t\t\tIPath canonicalPath = JavaProject.canonicalizedPath(path);\r", "-\t\t\tindex = (IIndex) indexes.get(canonicalPath);\r", "+\t\t\t// Path is already canonical per construction\r", "+\t\t\tindex = (IIndex) indexes.get(path);\r", "-\t\t\t\t// New index: add same index for given path and canonical path\r", "-\t\t\t\tString indexPath = computeIndexName(canonicalPath.toOSString());\r", "-\t\t\t\tindex = IndexFactory.newIndex(indexPath, \"Index for \" + canonicalPath.toOSString()); //$NON-NLS-1$\r", "-\t\t\t\tindexes.put(canonicalPath, index);\r", "+\t\t\t\tString indexPath = computeIndexName(path.toOSString());\r", "+\t\t\t\tindex = IndexFactory.newIndex(indexPath, \"Index for \" + path.toOSString()); //$NON-NLS-1$\r", "-\t\t\t} else {\r", "-\t\t\t\t// Index existed for canonical path, add it for given path\r", "-\t\t\t\tindexes.put(path, index);\r"]}], "num": 968}
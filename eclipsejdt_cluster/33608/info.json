{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "701f1fe36f3f826bdfb450d08f2c22fc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ee0da0ce47901afbdcd7986d8ce5f23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isDescription();", "-\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isParamTag();", "-\t\tboolean headerLine = (buffer.indexOf(Util.LINE_SEPARATOR) < 0) && block.isHeaderLine() && this.lastNumberOfNewLines == 0;", "-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isInDescription();", "+\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isInParamTag();", "+\t\tboolean headerLine = block.isHeaderLine() && this.lastNumberOfNewLines == 0;", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\t\tboolean hasTokens = false;", "-\t\t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\tpreviousToken = token;", "-\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\t\tcontinue;", "+\t\t\t\tswitch (token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\thasTokens = true;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tcase TerminalTokens.TokenNameStringLiteral:", "+\t\t\t\t\t\tif (this.scanner.currentPosition > this.scanner.eofPosition) {", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, textEnd);", "+\t\t\t\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\t\t\t\ttoken = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCharacterLiteral:", "+\t\t\t\t\t\tif (this.scanner.currentPosition > this.scanner.eofPosition) {", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, textEnd);", "+\t\t\t\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\t\t\t\ttoken = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t    \t\t\t\tthis.line++;", "-\t\t\t\t\tif (lastColumn == this.column) this.lastNumberOfNewLines++;", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t\t    \tthis.column = 1;", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t    \tthis.column = headerLine ? firstColumn-1 : firstColumn;", "-\t\t\t    \tif (indentationBuffer != null) {", "-\t\t\t    \t\tbuffer.append(indentationBuffer);", "-\t\t\t    \t}", "+\t\t\t\t\tboolean alreadyHasNewLine = !hasTokens && tokensBuffer.length() > 0 && firstText && !isHtmlTag && this.lastNumberOfNewLines > 0;", "+\t\t\t\t\tif (!alreadyHasNewLine) {", "+\t\t\t\t\t\tif (lastColumn == this.column) {", "+\t\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\t}", "+\t\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t\t    \tthis.column = 1;", "+\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t    \tthis.column = headerLine ? firstColumn-1 : firstColumn;", "+\t\t\t\t    \tif (indentationBuffer != null) {", "+\t\t\t\t    \t\tbuffer.append(indentationBuffer);", "+\t\t\t\t    \t}", "+\t\t\t\t\t}", "+\t\t\t\t\thasTokens = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a00d65bb83d1dcb86d0801e09c4d6e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "ab9430a3c2886efbbcdfa22a396b4380d0e945dc", "commitAfterChange": "15af5c9febf3e53f2418ebc52d74d4a523f18cbf", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["+\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "+\t\t\t\t\tif (previousToken == -1 || previousToken == SKIP_FIRST_WHITESPACE_TOKEN) {", "+\t\t\t\t\t\tchar[] identifier = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tint startPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\tint restartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tif (CharOperation.equals(identifier, Parser.FALL_THROUGH_TAG, 0, 5/*length of string \"$FALL\"*/) && this.scanner.currentCharacter == '-') {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tthis.scanner.getNextToken(); //  consume the '-'", "+\t\t\t\t\t\t\t\ttoken = this.scanner.getNextToken(); // consume the \"THROUGH\"", "+\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\t\t\t\t\tidentifier = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\t\t\t\tif (CharOperation.endsWith(Parser.FALL_THROUGH_TAG, identifier)) {", "+\t\t\t\t\t\t\t\t\t\t// the comment starts with a fall through", "+\t\t\t\t\t\t\t\t\t\tif (previousToken == SKIP_FIRST_WHITESPACE_TOKEN) {", "+\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(spaceStartPosition, startPosition-1, \" \"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tthis.scanner.startPosition = startPosition;", "+\t\t\t\t\t\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (InvalidInputException iie) {", "+\t\t\t\t\t\t\t\t// skip", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// this was not a valid fall-through tag, hence continue to process the comment normally", "+\t\t\t\t\t\tthis.scanner.startPosition = startPosition;", "+\t\t\t    \t\tthis.scanner.currentPosition = restartPosition;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}], "num": 33608}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d476841c4da7ee94de85a89da0c0ec4f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05a0e8852633270da7860d511688121e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "a7c3cda7c961d5a5839fc88cdcdca05f749f0591", "commitAfterChange": "45f26d79341dbd73cc50656614a5963b62874264", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void test022()", "signatureAfterChange": "  \tpublic void test022()", "diff": ["+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import static p.A.F;\\n\" + ", "+\t\t\t\t\"import static p.B.F;\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tint i = F;\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"p/A.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"public class A { public static int F = 1; }\\n\",", "+\t\t\t\t\"p/B.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"public class B extends A {}\\n\",", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t\t// no collision between 2 fields that are the same", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ee0a52c78a02bf1ad27088827dbe53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "da5be92848053087506e3795d2b7a39a9d351430", "commitAfterChange": "c96ea754cbc1843e6373572c9a41527df8e971a2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void _test016()", "signatureAfterChange": "  \tpublic void _test016()", "diff": ["-\t// cannot have 2 methods with compatible return types like Object & String so how is this legal?", "-\tpublic void _test016() { // 77228", "+\tpublic void _test016() { // 73971 and 77228", "+\t\t\t\t\"class X {\\n\" + ", "+\t\t\t\t\"\tstatic <E extends A> void m(E e) { System.out.print(\\\"A=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tstatic <E extends B> void m(E e) { System.out.print(\\\"B=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tm(new A());\\n\" + ", "+\t\t\t\t\"\t\tm(new B());\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\"", "+\t\t\t},", "+\t\t\t\"A=AB=B\"", "+\t\t);", "+\t\tthis.runConformTest(\t// cannot have 2 methods with compatible return types like Object & String so how is this legal?", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a7e7913f9c48fbf33c8a7da1011e247", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "27fcbc8377d5279cf55f4f3363243a669638c60f", "commitAfterChange": "72dd2259c6b0bf873e52961aeda8ec4762bdb50b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic void test016()", "signatureAfterChange": "  \tpublic void test016()", "diff": ["+\t\t\t\t\"\t<E extends A> void m(E e) { System.out.print(\\\"A=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\t<E extends B> void m(E e) { System.out.print(\\\"B=\\\"+e.getClass()); }\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tnew X().m(new A());\\n\" +", "+\t\t\t\t\"\t\tnew X().m(new B());\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\"", "+\t\t\t},", "+\t\t\t\"A=class AB=class B\"", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21d7e4625c8b480f2d691c31c8c53db1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "0e160bd57ca4572e4cc317f77eef59eff0c912a6", "commitAfterChange": "1b0238cbdda2702f17c4f0b30e4c8493818f8888", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void test002()", "signatureAfterChange": " \tpublic void test002()", "diff": ["+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tstatic interface I1<E1> { void method(E1 o); }\\n\" +", "+\t\t\t\t\"\tstatic interface I2<E2> { void method(E2 o); }\\n\" +", "+\t\t\t\t\"\tstatic interface I3<E3, E4> extends I1<E3>, I2<E4> {}\\n\" +", "+\t\t\t\t\"\tstatic class Class1 implements I3<String, String> {\\n\" +", "+\t\t\t\t\"\t\tpublic void method(String o) { System.out.println(o); }\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\t\"\t\tI3<String, String> i = new Class1();\\n\" +", "+\t\t\t\t\"\t\ti.method(\\\"works\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"works\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8810ef3cb949e69d99dbafb62bbee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0cad9a75d8029433899afbdf88cbb39e8dd0618a", "commitAfterChange": "af1194b54eafec10f8134c763fe3f4b7174111fb", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tpublic void test243()", "signatureAfterChange": "\t\t \tpublic void test243()", "diff": ["-\t// TODO (kent) simple covariance cases", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"    public X foo() {\\n\" +", "+\t\t\t\t\"        System.out.println(\\\"Did NOT add bridge method\\\");\\n\" +", "+\t\t\t\t\"        return this;\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) throws Exception {\\n\" +", "+\t\t\t\t\"        X x = new A();\\n\" +", "+\t\t\t\t\"        x.foo();\\n\" +", "+\t\t\t\t\"        System.out.print(\\\" + \\\");\\n\" +", "+\t\t\t\t\"        I i = new A();\\n\" +", "+\t\t\t\t\"        i.foo();\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"interface I {\\n\" +", "+\t\t\t\t\"    public I foo();\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A extends X implements I {\\n\" +", "+\t\t\t\t\"    public A foo() {\\n\" +", "+\t\t\t\t\"        System.out.print(\\\"Added bridge method\\\");\\n\" +", "+\t\t\t\t\"        return this;\\n\" +", "+\t\t\t\t\"    }\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"Added bridge method + Added bridge method\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a11d62917d18ad24d94e73eb5c8da974", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6d4fe8b897d9f85de3c7e4f3c65c2b0dfb35f1ed", "commitAfterChange": "e99876c3df14b077c8fdb45729d7e80e1c7f1686", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic void test073()", "signatureAfterChange": " \tpublic void test073()", "diff": ["-// TODO (kent) incorrectly reported as ambiguous", "-//\t\tthis.runConformTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"NumericArray3.java\",", "-//\t\t\t\t\"class Array<T> {\\n\" + ", "-//\t\t\t\t\"\tpublic <U extends Number> void add(U u) {}\\n\" + ", "-//\t\t\t\t\"}\\n\" + ", "-//\t\t\t\t\"public class NumericArray3<T extends Number> extends Array<T> {\\n\" +", "-//\t\t\t\t\"\tpublic static void main(String[] s) { new NumericArray3<Integer>().add(1); }\\n\" +", "-//\t\t\t\t\"\t@Override public void add(Number n) { System.out.println(true); }\\n\" +", "-//\t\t\t\t\"}\"", "-//\t\t\t},", "-//\t\t\t\"true\"", "-//\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"NumericArray3.java\",", "+\t\t\t\t\"class Array<T> {\\n\" + ", "+\t\t\t\t\"\tpublic <U extends Number> void add(U u) {}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"public class NumericArray3<T extends Number> extends Array<T> {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) { new NumericArray3<Integer>().add(1); }\\n\" +", "+\t\t\t\t\"\t@Override public void add(Number n) { System.out.println(true); }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"true\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cde1a3fca480c111ba0fe0872b32e129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "8022992d2babd233cd628feec0fce3d9f7562016", "commitAfterChange": "6bea0f6636d15fbdebc7403f71192f16cc7a0c9c", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80736", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80736 & https://bugs.eclipse.org/bugs/show_bug.cgi?id=113273", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"interface I { Integer foo(); }\\n\" +", "+\t\t\t\t\"interface J { Integer foo(); }\\n\" +", "+\t\t\t\t\"public class X<T extends I&J> implements I {\\n\" +", "+\t\t\t\t\"\tpublic Integer foo() { return null; }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10b07357d7c569c3d9a06119986b7d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "faa65f83d90942d64954fec96c251415d137ab59", "commitAfterChange": "3f67299b64db09fc6e8cd617299c8c6bd6970d2c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"p/X.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"import static p.A.m;\\n\" + ", "+\t\t\t\t\"import static p.B.m;\\n\" + ", "+\t\t\t\t\"public class X { void test() { m(); } }\\n\" + ", "+\t\t\t\t\"class B extends A {}\\n\",", "+\t\t\t\t\"p/A.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"public class A { public static int m() { return 0; } }\\n\"", "+\t\t\t},", "+\t\t\t\"\"", "+\t\t);"]}], "num": 69510}
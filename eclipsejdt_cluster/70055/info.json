{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81a6657015ff6e9ea191fc74a1a95ef5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acfd55ef715270e17e5b330b920ce048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic MethodBinding findMethodInSuperInterfaces( \t\tReferenceBinding currentType, \t\tchar[] selector, \t\tObjectVector found, \t\tMethodBinding matchingMethod)", "signatureAfterChange": "  \tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found)", "diff": ["-\tpublic MethodBinding findMethodInSuperInterfaces(", "-\t\tReferenceBinding currentType,", "-\t\tchar[] selector,", "-\t\tObjectVector found,", "-\t\tMethodBinding matchingMethod) {", "-", "+\tprotected void findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found) {", "-\t\t\t\t\t\tint currentLength = currentMethods.length;", "-\t\t\t\t\t\tif (currentLength == 1 && matchingMethod == null && found.size == 0) {", "-\t\t\t\t\t\t\tmatchingMethod = currentMethods[0];", "-\t\t\t\t\t\t} else if (currentLength > 0) {", "-\t\t\t\t\t\t\tif (matchingMethod != null) {", "-\t\t\t\t\t\t\t\tfound.add(matchingMethod);", "-\t\t\t\t\t\t\t\tmatchingMethod = null;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (currentMethods.length > 0)", "-\t\t\t\t\t\t}", "-\t\treturn matchingMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b53e922a22514162033104fc7f6cb56e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "commitAfterChange": "a8944173670c6319cce2438add6b3e87f478a46c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, PackageBinding packageBinding, int tokenIndex)", "signatureAfterChange": "  \tprotected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, int tokenIndex)", "diff": ["-\tprotected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, PackageBinding packageBinding, int tokenIndex) {", "+\tprotected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, int tokenIndex) {", "-\t\t\t}", "-\t\t\t// For the case: @Marker p.X.StaticNestedType, where 'p' is a package and 'X' is a class", "-\t\t\tif (packageBinding != null && packageBinding.compoundName.length == (tokenIndex - 1)) {", "-\t\t\t\tqualifierAnnot = this.annotations[0];", "-\t\t\t\tif (qualifierAnnot != null) {", "-\t\t\t\t\tscope.problemReporter().illegalTypeAnnotationsInStaticMemberAccess(qualifierAnnot[0],", "-\t\t\t\t\t\t\tqualifierAnnot[qualifierAnnot.length - 1]);", "-\t\t\t\t}"]}], "num": 70055}
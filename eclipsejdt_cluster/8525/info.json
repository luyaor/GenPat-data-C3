{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d76814ce598141fa8d9c650614bcbd64", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "868a157ceae12b7cac3bf323984f133f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \t\t \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, boolean considerNewLineAfterComment)", "signatureAfterChange": "  \tpublic void printNextToken(int[] expectedTokenTypes)", "diff": ["-\t\t", "-\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, boolean considerNewLineAfterComment){", "-\t\tprintComment();", "-\t\ttry {", "-\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\tchar[] currentTokenSource = this.scanner.getRawTokenSource();", "-\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t}", "-\t\t\tthis.print(currentTokenSource, considerSpaceIfAny);", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d937bf9486d2b57f41faff5957b5ac6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void consumeNextToken()", "signatureAfterChange": " \t \tprivate void initFormatterCommentParser()", "diff": ["-\tpublic void consumeNextToken() {", "-\t\tprintComment();", "-\t\ttry {", "-\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}", "+\t", "+\tprivate void initFormatterCommentParser() {", "+\t\tif (this.formatterCommentParser == null) {", "+\t\t\tthis.formatterCommentParser = new FormatterCommentParser(null);", "+\t\t}", "+\t\tthis.formatterCommentParser.scanner.setSource(this.scanner.source);", "+\t\tthis.formatterCommentParser.source = this.scanner.source;", "+\t\tthis.formatterCommentParser.scanner.lineEnds = this.lineEnds;", "+\t\tthis.formatterCommentParser.scanner.linePtr = this.maxLines;"]}], "num": 8525}
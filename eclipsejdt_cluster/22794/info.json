{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d063bbd40a747e602392918e4c516af7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b2cc46f11d0a581f940952d724e49f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "3c02a6af2c4b681d96ee9d070d231fb04b85b5fd", "commitAfterChange": "78cdf23ec3b25cdd688a05f0ebd856906ff8208f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\t\t// TODO (kent) tag method in verifier if it overrides a method which can cause an anonymous error", "-\t\t\tif (match.hasSubstitutedParameters()) return null; // cannot be picked up as an exact match", "+\t\t\t// cannot be picked up as an exact match if its a possible anonymous case", "+\t\t\tif (match.hasSubstitutedParameters() && this.arguments != null && this.arguments.length > 1) return null;", "-", "-\t\tif (foundNothing) {", "+\t", "+\t\tif (foundNothing && (this.arguments == null || this.arguments.length <= 1)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04e782d599d20751a78dcd0f8da867b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "0d26cebfc5ac438f5812d87a88435e81d289bbea", "commitAfterChange": "51bd97b9a16ddeaff77cec180dcadc8f8924a66a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\t\t\t\tMethodBinding method = methods[imethod];\t\t\t", "+\t\t\t\t\tMethodBinding method = methods[imethod];", "-\t\t\t// cannot be picked up as an exact match if its a possible anonymous case", "-\t\t\tif (match.hasSubstitutedParameters() && this.arguments != null && this.arguments.length > 1) return null;", "+\t\t\t// cannot be picked up as an exact match if its a possible anonymous case, such as:", "+\t\t\t// class A<T extends Number> { public void id(T t) {} }", "+\t\t\t// class B<TT> extends A<Integer> { public <ZZ> void id(Integer i) {} }", "+\t\t\tif (match.hasSubstitutedParameters()) return null;"]}], "num": 22794}
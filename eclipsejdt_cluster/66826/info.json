{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85d80993d4be65f47d337670a50a4948", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab939b5da10e0d01d161edc3e99e52d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "a1fa0960e8bf8c2d86b0b4556cf5470457cb514c", "commitAfterChange": "0ea38f06cd1227fc139bddac2eec897cb8fbed35", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void assertBindingCreated(final String expectedKey) throws JavaModelException", "signatureAfterChange": " \tprivate void assertBindingCreated(String[] pathAndSources, final String expectedKey) throws JavaModelException", "diff": ["-\t */", "-\tprivate void assertBindingCreated(final String expectedKey) throws JavaModelException {", "-\t\tclass Requestor extends TestASTRequestor {", "-\t\t\tString createdBindingKey;", "-\t\t\tpublic void acceptAST(CompilationUnit cu, ICompilationUnit source) {", "-\t\t\t\tsuper.acceptAST(cu, source);", "-\t\t\t\tIBinding[] bindings = createBindings(new String[] {expectedKey});", "-\t\t\t\tif (bindings != null && bindings.length > 0 && bindings[0] != null)", "-\t\t\t\t\tthis.createdBindingKey = bindings[0].getKey();", "-\t\t\t}", "-\t\t};", "-\t\tRequestor requestor = new Requestor();", "-\t\t\tworkingCopies = createWorkingCopies(new String[] {", "-\t\t\t\t\"/P/Test.java\",", "-\t\t\t\t\"public class Test {\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t});", "-\t\t\tresolveASTs(workingCopies, new String[] {}, requestor);", "-\t\t", "-\t\tif (!expectedKey.equals(requestor.createdBindingKey))", "-\t\t\tSystem.out.println(Util.displayString(expectedKey, 3));", "-\t\tassertEquals(\"Unexpected created binding\", expectedKey, requestor.createdBindingKey);", "+\t */", "+\tprivate void assertBindingCreated(String[] pathAndSources, final String expectedKey) throws JavaModelException {", "+\t\tICompilationUnit[] workingCopies = null;", "+\t\ttry {", "+\t\t\tworkingCopies = createWorkingCopies(pathAndSources);", "+\t\t\tclass Requestor extends TestASTRequestor {", "+\t\t\t\tString createdBindingKey;", "+\t\t\t\tpublic void acceptAST(CompilationUnit cu, ICompilationUnit source) {", "+\t\t\t\t\tsuper.acceptAST(cu, source);", "+\t\t\t\t\tIBinding[] bindings = createBindings(new String[] {expectedKey});", "+\t\t\t\t\tif (bindings != null && bindings.length > 0 && bindings[0] != null)", "+\t\t\t\t\t\tthis.createdBindingKey = bindings[0].getKey();", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tRequestor requestor = new Requestor();", "+\t\t\tICompilationUnit[] dummyWorkingCopies = null;", "+\t\t\ttry {", "+\t\t\t\tdummyWorkingCopies = createWorkingCopies(new String[] {", "+\t\t\t\t\t\"/P/Test.java\",", "+\t\t\t\t\t\"public class Test {\\n\" +", "+\t\t\t\t\t\"}\"", "+\t\t\t\t});", "+\t\t\t\tresolveASTs(dummyWorkingCopies, new String[] {}, requestor);", "+\t\t\t} finally {", "+\t\t\t\tdiscardWorkingCopies(dummyWorkingCopies);", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (!expectedKey.equals(requestor.createdBindingKey))", "+\t\t\t\tSystem.out.println(Util.displayString(requestor.createdBindingKey, 3));", "+\t\t\tassertEquals(\"Unexpected created binding\", expectedKey, requestor.createdBindingKey);", "+\t\t} finally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489e48fd7197b9a499e0f6913f0d5483", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "a5c56b9d9a1a6a7a2412b9e4fe79595e9a454729", "commitAfterChange": "808f8a4c125739a8b2d2237ba90c04dc1390f0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys)", "signatureAfterChange": " \tprotected void beginToCompile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] sourceUnits, String[] bindingKeys)", "diff": ["-\t\t\tBindingKey bindingKey = new BindingKey(bindingKeys[i], this, this.lookupEnvironment);", "-\t\t\tCompilationUnitDeclaration parsedUnit = bindingKey.getCompilationUnitDeclaration();", "+\t\t\tBindingKeyResolver resolver = new BindingKeyResolver(bindingKeys[i], this, this.lookupEnvironment);", "+\t\t\tresolver.parse(true/*pause after fully qualified name*/);", "+\t\t\tCompilationUnitDeclaration parsedUnit = resolver.getCompilationUnitDeclaration();", "-\t\t\t\t\tthis.requestedKeys.put(fileName, bindingKey);", "+\t\t\t\t\tthis.requestedKeys.put(fileName, resolver);", "-\t\t\t\t\t((ArrayList) existing).add(bindingKey);", "+\t\t\t\t\t((ArrayList) existing).add(resolver);", "-\t\t\t\t\tlist.add(bindingKey);", "+\t\t\t\t\tlist.add(resolver);", "-\t\t\t\tswitch (bindingKey.scanner.token) {", "-\t\t\t\t\tcase BindingKey.Scanner.PACKAGE:", "-\t\t\t\t\t\t// package binding key", "-\t\t\t\t\t\tchar[] pkgName = CharOperation.concatWith(bindingKey.compoundName(), '.');", "-\t\t\t\t\t\tthis.requestedKeys.put(pkgName, bindingKey);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase BindingKey.Scanner.TYPE:", "-\t\t\t\t\t\t// base type binding", "-\t\t\t\t\t\tchar[] key = bindingKey.scanner.source;", "-\t\t\t\t\t\tthis.requestedKeys.put(key, bindingKey);", "-\t\t\t\t\t\tbreak;", "+\t\t\t\tif (resolver.isPackage()) {", "+\t\t\t\t\t// package binding key", "+\t\t\t\t\tchar[] pkgName = CharOperation.concatWith(resolver.compoundName(), '.');", "+\t\t\t\t\tthis.requestedKeys.put(pkgName, resolver);", "+\t\t\t\t} else {", "+\t\t\t\t\t// base type binding", "+\t\t\t\t\tchar[] key = resolver.getKey().toCharArray();", "+\t\t\t\t\tthis.requestedKeys.put(key, resolver);"]}], "num": 66826}
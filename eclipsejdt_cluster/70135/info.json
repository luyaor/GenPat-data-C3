{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28710a3b415d76d1cfc7394743240261", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a8ecf16090cc545b43ee2ec4af2a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(IfStatement node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(SuperFieldAccess node)", "diff": ["+", "+\t@Override", "+\tpublic boolean visit(SuperFieldAccess node) {", "+\t\thandleFieldAccess(node);", "+\t\treturn true;", "+\t}", "-\t\t\tif (this.tm.get(thenIndex).getLineBreaksBefore() == 0)", "-\t\t\tif (this.tm.get(elseIndex).getLineBreaksBefore() == 0)", "-\t\t}", "-\t\tif (!this.wrapIndexes.isEmpty()) {", "-\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "-\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(node, -1);", "-\t\t\thandleWrap(this.options.alignment_for_compact_if, node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7489bfd22418957e06d526f5d3fa9575", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tprivate void handleArguments(List<? extends ASTNode> arguments, int wrappingOption)", "signatureAfterChange": "  \tprivate void handleArguments(List<? extends ASTNode> arguments, int wrappingOption)", "diff": ["-\t\tfor (ASTNode argument : arguments)", "-\t\t\tthis.wrapIndexes.add(this.tm.firstIndexIn(argument, -1));", "+\t\tthis.wrapPenalties.add(1 / PREFERRED);", "+\t\tprepareElementsList(arguments, TokenNameCOMMA, TokenNameLPAREN);", "+\t\thandleWrap(wrappingOption);", "+\t}", "-\t\t\tthis.wrapParentIndex = this.tm.findIndex(firstToken.originalStart - 1, TokenNameLPAREN, false);", "-\t\t\tif (!arguments.isEmpty() && this.wrapGroupEnd < 0)", "-\t\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(arguments.get(arguments.size() - 1), -1);", "-\t\t\thandleWrap(wrappingOption, 1 / PREFERRED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1d83aedd85037b2de3ca557a71862c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(UnionType node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(UnionType node)", "diff": ["-\t\tif (this.options.wrap_before_or_operator_multicatch && !types.isEmpty()) {", "+\t\tif (types.isEmpty())", "+\t\t\treturn true;", "+\t\tif (this.options.wrap_before_or_operator_multicatch) {", "+\t\t\t\t\tthis.secondaryWrapIndexes.add(this.tm.firstIndexIn(type, -1));", "-\t\t\thandleArguments(types, this.options.alignment_for_union_type_in_multicatch);", "+\t\t\tprepareElementsList(types, TokenNameOR, TokenNameLPAREN);", "+\t\t\thandleWrap(this.options.alignment_for_union_type_in_multicatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1cb4160f289ac5e2745dcbaadda9e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(VariableDeclarationFragment node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ThisExpression node)", "diff": ["+", "+\t@Override", "+\tpublic boolean visit(ThisExpression node) {", "+\t\thandleFieldAccess(node);", "+\t\treturn true;", "+\t}", "-\t\tif (node.getInitializer() != null) {", "-\t\t\tthis.wrapIndexes.add(this.tm.firstIndexIn(node.getInitializer(), -1));", "-\t\t\tthis.wrapParentIndex = this.tm.firstIndexBefore(node.getInitializer(), TokenNameEQUAL);", "-\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(node.getInitializer(), -1);", "-\t\t\thandleWrap(this.options.alignment_for_assignment);", "-\t\t}"]}], "num": 70135}
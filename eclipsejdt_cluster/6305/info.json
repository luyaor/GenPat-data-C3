{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02505ad1c055a013dd52f15633156f65", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5d11e3f935b3e9515c0918c8502bee0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "886cf3de0eb69ecaefd44e4aa2651f211a02a7ca", "commitAfterChange": "a00759241e8a26520793bcbd7b3993410cddea80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NULL:", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NON_NULL:", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NULL:", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NON_NULL:", "+\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff390c35c95ee7a1e138babcf8fdba2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "886cf3de0eb69ecaefd44e4aa2651f211a02a7ca", "commitAfterChange": "a00759241e8a26520793bcbd7b3993410cddea80", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\tswitch(this.nullCheckTypes[i] & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NULL:", "+\t\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NON_NULL:", "+\t\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\tswitch(this.nullCheckTypes[i] & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NULL:", "+\t\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase FlowContext.IN_COMPARISON_NON_NULL:", "+\t\t\t\t\t\t\t\tthis.nullReferences[i] = null;", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariablePotentialNullReference(local, expression);", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;"]}], "num": 6305}
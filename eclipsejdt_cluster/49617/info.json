{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74ff0446a17c229a1229ff63c18a35f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "148d638a3150837c33a6666884c61269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": "\r \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["- */ \r", "-public void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "-\r", "-\tif ((bits & IsReachableMASK) == 0) {\r", "-\t\treturn;\r", "-\tint pc = codeStream.position;\r", "-\texception.generateCode(currentScope, codeStream, true);\r", "-\tcodeStream.athrow();\r", "-\tcodeStream.recordPositionsFrom(pc, this);\r", "-\t\r", "-}\r", "+\t */\r", "+\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream) {\r", "+\r", "+\t\tif ((bits & IsReachableMASK) == 0)\r", "+\t\t\treturn;\r", "+\t\tint pc = codeStream.position;\r", "+\t\texception.generateCode(currentScope, codeStream, true);\r", "+\t\tcodeStream.athrow();\r", "+\t\tcodeStream.recordPositionsFrom(pc, this);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86407218dfff47df1fdac8f88c7200f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "26bd8cd093799e096b816aa2a2b54f06087b05ff", "commitAfterChange": "f2d2df0fb5504922fbc1cf85d25df5b20854758d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r public final boolean needClassInitMethod()", "signatureAfterChange": "\r public final boolean needClassInitMethod()", "diff": ["+ */\r", "-\t//the real test is next code but the test on NotAConstant is\r", "-\t//not valid UNTIL the TC has runned :-( .....\r", "-\t//More, the binding hasn't been done.....:-(....\r", "-\r", "-\t//Thus the idea is therefore to generate a <clint> when some static\r", "-\t//fields exist. If it has no statement, it will not be generated\r", "-\r", "-\t/*--------------------------------------------------\r", "-\tif ( fields == null ) return false;\r", "-\tfor( int i = fields.length ; --i>= 0;){\r", "-\tFieldDeclaration field = fields[i];\r", "-\tif (field.binding.isStatic())\r", "-\t{if ( (field.binding.isFinal()) && (field.initialization == null) ) return true ;\r", "-\tif ( !field.isField()) return true ; //initializer are not-isField()\r", "-\tif ( (field.initialization != null) && (field.binding.constant == NotAConstant) ) return true ;}}\r", "-\t\r", "-\treturn false ;}\r", "-\t----------------------------------------------------*/\r", "-\tif ((this.bits & AddAssertionMASK) != 0) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (fields == null)\r", "-\t\treturn false;\r", "+\t// always need a <clinit> when assertions are present\r", "+\tif ((this.bits & AddAssertionMASK) != 0) return true;\r", "+\tif (fields == null) return false;\r"]}], "num": 49617}
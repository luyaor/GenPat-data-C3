{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82a528df6a36a1e96599cf637e73999a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "241b85b7af4f7cbd327aa028630d1019", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "7315a9946428ac17ed2f3c53c5f292f76322b904", "commitAfterChange": "62f8132aa6e66bc79d2cfcc69b7efa69d325d62b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\t\tif (block.isInlined()) \t{", "-\t\t\t\tthis.column++; // Add extra character for inline tag", "-\t\t\t}", "-\t                    buffer.append(this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition-this.scanner.startPosition);", "+\t                    if (token == TerminalTokens.TokenNameRBRACE) {", "+\t\t                    buffer.append(this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition-this.scanner.startPosition);", "+\t\t\t\t\t    \tthis.column += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t                    }", "-//\t\tif (block.isHeaderLine()) maxColumn++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60538aaca678c48846df1747ea3b6b70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bcd9b87ed997ca91c95e87fd5639a0cef180234", "commitAfterChange": "451dfca83862105681163e8101832560ac0259eb", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text)", "signatureAfterChange": "  \tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text)", "diff": ["-\t                return textLength;", "+   \t\t\t\t\t// maybe an unterminated string or comment", "+\t    \t\t\ttextLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd217267a2cc2ebaf8d725a6c9c0219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bcd9b87ed997ca91c95e87fd5639a0cef180234", "commitAfterChange": "451dfca83862105681163e8101832560ac0259eb", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \t\t\t\tint token = this.scanner.getNextToken();", "-\t    \t\t\t\tswitch (token) {", "-\t    \t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "-\t    \t\t\t\t\t\t\treturn newLines;", "-\t    \t\t\t\t\t\t}", "-\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\tbreak;", "-\t    \t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t    \t\t\t\t\t\tif (newLine) {", "-\t    \t\t\t\t\t\t\tnewLine = false;", "-\t    \t\t\t\t\t\t\tcontinue;", "-\t    \t\t\t\t\t\t}", "-\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\tbreak;", "-\t    \t\t\t\t\tdefault:", "-\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\t\t\t\tbreak;", "+\t    \t\t\t\ttry {", "+\t\t    \t\t\t\tint token = this.scanner.getNextToken();", "+\t\t    \t\t\t\tswitch (token) {", "+\t\t    \t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "+\t\t    \t\t\t\t\t\t\treturn newLines;", "+\t\t    \t\t\t\t\t\t}", "+\t\t    \t\t\t\t\t\tlength = 1;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "+\t\t    \t\t\t\t\t\tif (newLine) {", "+\t\t    \t\t\t\t\t\t\tnewLine = false;", "+\t\t    \t\t\t\t\t\t\tcontinue;", "+\t\t    \t\t\t\t\t\t}", "+\t\t    \t\t\t\t\t\tlength = 1;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t\tdefault:", "+\t\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\t\t\t\tbreak;", "+\t\t    \t\t\t\t}", "+\t    \t\t\t\t}", "+\t    \t\t\t\tcatch (InvalidInputException iie) {", "+\t    \t\t\t\t\t// maybe an unterminated string or comment", "+\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;"]}], "num": 43952}
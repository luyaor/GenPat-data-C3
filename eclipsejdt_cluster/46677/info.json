{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54597098e4a6d2420ddc66d456db5946", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12d7e911277b23ea67fd408e4728b027", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "09e6a0d689d92bccdede36cccd43932276d7e4d3", "commitAfterChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void test042()", "signatureAfterChange": " public void test042()", "diff": ["-\t\t\t\"\t        ^\\n\" + ", "-\t\t\t\"F cannot be resolved to a type\\n\" + ", "+\t\t\t\"\t    throw x;\\n\" + ", "+\t\t\t\"\t};\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Illegal lambda expression: Method m of type G2 is generic \\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Incompatible type specified for lambda expression\\'s parameter x\\n\" + ", "+\t\t\t\"\t    throw x;\\n\" + ", "+\t\t\t\"\t};\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Illegal lambda expression: Method m of type G2 is generic \\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4063332d37137b5ff5839faa7efbc34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " public void testBug286601f()", "signatureAfterChange": " public void testBug286601_massive_02()", "diff": ["-public void testBug286601f() {", "+public void testBug286601_massive_02() {", "-\t\t\"public class Test\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"    \\n\" +", "-\t\t\"    private AntModel getAntModel(final File buildFile) {\\n\" +", "-\t\t\"        AntModel model= new AntModel(XMLCore.getDefault(), doc, null, new LocationProvider(null) {\\n\" +", "-\t\t\"            /* (non-Javadoc)\\n\" +", "-\t\t\"             * @see org.eclipse.ant.internal.ui.editor.outline.ILocationProvider#getLocation()\\n\" +", "-\t\t\"             */\\n\" +", "-\t\t\"            public IPath getLocation() {\\n\" +", "-\t\t\"                return new Path(buildFile.getAbsolutePath());\\n\" +", "-\t\t\"            }\\n\" +", "-\t\t\"        });\\n\" +", "-\t\t\"        model.reconcile(null);\\n\" +", "-\t\t\"        return model;\\n\" +", "-\t\t\"    }\\n\" +", "+\t\t\"package massive;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X02\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"    \\n\" + ", "+\t\t\"    private AntModel getAntModel(final File buildFile) {\\n\" + ", "+\t\t\"        AntModel model= new AntModel(XMLCore.getDefault(), doc, null, new LocationProvider(null) {\\n\" + ", "+\t\t\"            /* (non-Javadoc)\\n\" + ", "+\t\t\"             * @see org.eclipse.ant.internal.ui.editor.outline.ILocationProvider#getLocation()\\n\" + ", "+\t\t\"             */\\n\" + ", "+\t\t\"            public IPath getLocation() {\\n\" + ", "+\t\t\"                return new Path(buildFile.getAbsolutePath());\\n\" + ", "+\t\t\"            }\\n\" + ", "+\t\t\"        });\\n\" + ", "+\t\t\"        model.reconcile(null);\\n\" + ", "+\t\t\"        return model;\\n\" + ", "+\t\t\"    }\\n\" + ", "-\t\t\"public class Test\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\tprivate AntModel getAntModel(final File buildFile)\\n\" +", "-\t\t\"\t{\\n\" +", "-\t\t\"\t\tAntModel model = new AntModel(XMLCore.getDefault(), doc, null,\\n\" +", "-\t\t\"\t\t\t\tnew LocationProvider(null)\\n\" +", "-\t\t\"\t\t\t\t{\\n\" +", "-\t\t\"\t\t\t\t\t/*\\n\" +", "-\t\t\"\t\t\t\t\t * (non-Javadoc)\\n\" +", "-\t\t\"\t\t\t\t\t * \\n\" +", "-\t\t\"\t\t\t\t\t * @see\\n\" +", "-\t\t\"\t\t\t\t\t * org.eclipse.ant.internal.ui.editor.outline.ILocationProvider\\n\" +", "-\t\t\"\t\t\t\t\t * #getLocation()\\n\" +", "-\t\t\"\t\t\t\t\t */\\n\" +", "-\t\t\"\t\t\t\t\tpublic IPath getLocation()\\n\" +", "-\t\t\"\t\t\t\t\t{\\n\" +", "-\t\t\"\t\t\t\t\t\treturn new Path(buildFile.getAbsolutePath());\\n\" +", "-\t\t\"\t\t\t\t\t}\\n\" +", "-\t\t\"\t\t\t\t});\\n\" +", "-\t\t\"\t\tmodel.reconcile(null);\\n\" +", "-\t\t\"\t\treturn model;\\n\" +", "-\t\t\"\t}\\n\" +", "+\t\t\"package massive;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X02\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\tprivate AntModel getAntModel(final File buildFile)\\n\" + ", "+\t\t\"\t{\\n\" + ", "+\t\t\"\t\tAntModel model = new AntModel(XMLCore.getDefault(), doc, null,\\n\" + ", "+\t\t\"\t\t\t\tnew LocationProvider(null)\\n\" + ", "+\t\t\"\t\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\t\t/*\\n\" + ", "+\t\t\"\t\t\t\t\t * (non-Javadoc)\\n\" + ", "+\t\t\"\t\t\t\t\t * \\n\" + ", "+\t\t\"\t\t\t\t\t * @see\\n\" + ", "+\t\t\"\t\t\t\t\t * org.eclipse.ant.internal.ui.editor.outline.ILocationProvider\\n\" + ", "+\t\t\"\t\t\t\t\t * #getLocation()\\n\" + ", "+\t\t\"\t\t\t\t\t */\\n\" + ", "+\t\t\"\t\t\t\t\tpublic IPath getLocation()\\n\" + ", "+\t\t\"\t\t\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\t\t\treturn new Path(buildFile.getAbsolutePath());\\n\" + ", "+\t\t\"\t\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\t});\\n\" + ", "+\t\t\"\t\tmodel.reconcile(null);\\n\" + ", "+\t\t\"\t\treturn model;\\n\" + ", "+\t\t\"\t}\\n\" + "]}], "num": 46677}
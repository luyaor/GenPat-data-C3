{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "812d74562a879fe8e9037adc042207da", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ce5cc70dc09187a7480be3cf4a351e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "  public UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "signatureAfterChange": "  public UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "diff": ["-\t\tif (coverageTestFlag && coverageTestId == 35) {", "-\t\t\tthrow new AssertionFailedException(\"COVERAGE 35\"); //$NON-NLS-1$", "+\t\tif (coverageTestFlag && coverageTestId == 28) {", "+\t\t\tthrow new AssertionFailedException(\"COVERAGE 28\"); //$NON-NLS-1$", "-\t\t// DEAD_END + unreachable other -> other", "-\t\tif (coverageTestFlag && coverageTestId == 36) {", "-\t\t\tthrow new AssertionFailedException(\"COVERAGE 36\"); //$NON-NLS-1$", "+\t\tif (coverageTestFlag && coverageTestId == 29) {", "+\t\t\tthrow new AssertionFailedException(\"COVERAGE 29\"); //$NON-NLS-1$", "-\tboolean otherHasNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0,", "-\t\tthisHasNulls = false;", "-\tlong a1, a2, na2, a3, na3, a4, na4, b1, nb1, b2, nb2, b3, nb3, b4, nb4;", "-\tif (otherHasNulls) {", "-\t\tthis.nullAssignmentStatusBit1 =", "-\t\t\t(a1 = this.nullAssignmentStatusBit1) & ", "-\t\t\t(b1 = otherInits.nullAssignmentStatusBit1) & (", "-\t\t\t\t(nb4 = ~(b4 = otherInits.nullAssignmentValueBit2)) & ", "-\t\t\t\t((b2 = otherInits.nullAssignmentStatusBit2) & ", "-\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) & ", "-\t\t\t\t\t\t(na3 = ~(a3 = this.nullAssignmentValueBit1)) & ", "-\t\t\t\t\t\t((a2 = this.nullAssignmentStatusBit2) & ", "-\t\t\t\t\t\t\t(na4 = ~(a4 = this.nullAssignmentValueBit2)) | a4) |", "-\t\t\t\t\t\t(na2 = ~a2) & a3 & na4 & (nb2 = ~b2) & b3 ) |", "-\t\t\t\tb4 & (na3 & nb3 & (na4 & a2 | a4) |", "-\t\t\t\t\t\tna2 & a4 & nb2));", "-\t\tthis.nullAssignmentStatusBit2 =", "-\t\t\ta2 & b2 & ~(a1 ^ b1) & (na3 & nb3 | na4 & nb4) |", "-\t\t\ta1 & b1 & (a2 ^ b2) & na3 & nb3 |", "-\t\t\t(a1 & na2 & (nb1 = ~b1) & b2 | ~a1 & a2 & b1 & nb2) & na4 & nb4;", "-\t\tthis.nullAssignmentValueBit1 =", "-\t\t\tb1 & nb2 & nb4 |", "-\t\t\t~a1 & (a3 |", "-\t\t\t\t\ta2 & na3 & (b1 | nb2)) |", "-\t\t\t(a1 | na2) & nb1 & b2 & nb3 |", "-\t\t\tnb1 & b3 |", "-\t\t\ta1 & na2 & (na4 |", "-\t\t\t\t\t\tb1 & nb2 & (a3 | b3));", "-\t\tthis.nullAssignmentValueBit2 =", "-\t\t\ta4 | b4;", "-\t\t", "-\t\t// WORK recode if tests succeed", "-\t\tthis.nullAssignmentValueBit1 &= ", "-\t\t\t~(a1 & na2 & na3 & a4 & nb1 & b2 & nb3 & nb4", "-\t\t\t\t\t| ~a1 & a2 & na3 & na4 & b1 & nb2 & nb3 & b4);", "-\t\t", "-\t\tif (coverageTestFlag && coverageTestId == 37) {", "-\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t}", "+\tboolean", "+\t\tthisHasNulls = (this.tagBits & NULL_FLAG_MASK) != 0,", "+\t\totherHasNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0,", "+\t\tthisHadNulls = thisHasNulls;", "+\tlong ", "+\t\ta1, a2, a3, a4,  ", "+\t\tna1, na2, na3, na4, ", "+\t\tnb1, nb2, nb3, nb4,", "+\t\tb1, b2, b3, b4;", "+\tif (thisHadNulls) {", "+    \tif (otherHasNulls) {", "+    \t\tthis.nullBit1 = (a2 = this.nullBit2) & (a3 = this.nullBit3) ", "+    \t\t\t\t\t\t\t& (a4 = this.nullBit4) & (b1 = otherInits.nullBit1) ", "+    \t\t\t\t\t\t\t& (nb2 = ~(b2 = otherInits.nullBit2))", "+                  \t\t\t| (a1 = this.nullBit1) & (b1 & (a3 & a4 & (b3 = otherInits.nullBit3) ", "+                  \t\t\t\t\t\t\t\t\t\t\t\t\t& (b4 = otherInits.nullBit4)", "+                  \t\t\t\t\t\t\t\t\t\t\t\t| (na2 = ~a2) & nb2 ", "+                  \t\t\t\t\t\t\t\t\t\t\t\t\t& ((nb4 = ~b4) | (na4 = ~a4) ", "+                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t| (na3 = ~a3) & (nb3 = ~b3))", "+                  \t\t\t\t\t\t\t\t\t\t\t\t| a2 & b2 & ((na4 | na3) & (nb4\t| nb3)))", "+                  \t\t\t\t\t\t\t\t\t\t\t| na2 & b2 & b3 & b4);", "+    \t\tthis.nullBit2 = b2 & (nb3 | (nb1 = ~b1) | a3 & (a4 | (na1 = ~a1)) & nb4)", "+        \t\t\t| a2 & (b2 | na4 & b3 & (b4 | nb1) | na3 | na1);", "+    \t\tthis.nullBit3 = b3 & (nb2 & b4 | nb1 | a3 & (na4 & nb4 | a4 & b4))", "+        \t\t\t| a3 & (na2 & a4 | na1)", "+        \t\t\t| (a2 | na1) & b1 & nb2 & nb4", "+        \t\t\t| a1 & na2 & na4 & (b2 | nb1);", "+    \t\tthis.nullBit4 = na3 & (nb1 & nb3 & b4", "+              \t\t\t| b1 & (nb2 & nb3 | a4 & b2 & nb4)", "+              \t\t\t| na1 & a4 & (nb3 | b1 & b2))", "+        \t\t\t| a3 & a4 & (b3 & b4 | b1 & nb2)", "+        \t\t\t| na2 & (nb1 & b4 | b1 & nb3 | na1 & a4) & nb2", "+        \t\t\t| a1 & (na3 & (nb3 & b4", "+                        \t\t\t| b1 & b2 & b3 & nb4", "+                        \t\t\t| na2 & (nb3 | nb2))", "+                \t\t\t| na2 & b3 & b4", "+                \t\t\t| a2 & (nb1 & b4 | a3 & na4 & b1) & nb3);", "+    \t\tif (coverageTestFlag && coverageTestId == 30) {", "+    \t\t  \tthis.nullBit4 = ~0;", "+    \t\t}", "+    \t} else { // other has no null info ", "+    \t\ta1 = this.nullBit1;", "+      \t\tthis.nullBit1 = 0;", "+      \t\tthis.nullBit2 = (a2 = this.nullBit2) & (na3 = ~(a3 = this.nullBit3) | (na1 = ~a1));", "+      \t\tthis.nullBit3 = a3 & ((na2 = ~a2) & (a4 = this.nullBit4) | na1) | a1 & na2 & ~a4;", "+      \t\tthis.nullBit4 = (na3 | na2) & na1 & a4\t| a1 & na3 & na2;", "+    \t\tif (coverageTestFlag && coverageTestId == 31) {", "+    \t\t  \tthis.nullBit4 = ~0;", "+    \t\t}", "+    \t}", "+\t} else if (otherHasNulls) { // only other had nulls", "+  \t\tthis.nullBit1 = 0;", "+  \t\tthis.nullBit2 = (b2 = otherInits.nullBit2) & (nb3 = ~(b3 = otherInits.nullBit3) | (nb1 = ~(b1 = otherInits.nullBit1)));", "+  \t\tthis.nullBit3 = b3 & ((nb2 = ~b2) & (b4 = otherInits.nullBit4) | nb1) | b1 & nb2 & ~b4;", "+  \t\tthis.nullBit4 = (nb3 | nb2) & nb1 & b4\t| b1 & nb3 & nb2;", "+  \t\tif (coverageTestFlag && coverageTestId == 32) {", "+  \t\t  \tthis.nullBit4 = ~0;", "+  \t\t}", "+    \tthisHasNulls =", "+    \t\t// redundant with the three following ones", "+    \t\tthis.nullBit2 != 0 ||", "+    \t\tthis.nullBit3 != 0 ||", "+    \t\tthis.nullBit4 != 0;", "-\telse {", "-\t\t// tune potentials", "-\t\tthis.nullAssignmentValueBit1 =", "-\t\t\t~(~this.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\t~this.nullAssignmentValueBit1) &", "-\t\t\t~(this.nullAssignmentStatusBit1 & ", "-\t\t\t\t\t(this.nullAssignmentStatusBit2 | this.nullAssignmentValueBit2));", "-\t\t// reset assignment and protected", "-\t\tthis.nullAssignmentStatusBit1 = ", "-\t\tthis.nullAssignmentStatusBit2 = 0;", "-\t\tif (coverageTestFlag && coverageTestId == 38) {", "-\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t}", "-\t}", "-\tthisHasNulls = this.nullAssignmentStatusBit1 != 0 || ", "-\t\tthis.nullAssignmentStatusBit2 != 0 ||", "-\t\tthis.nullAssignmentValueBit1 != 0 ||", "-\t\tthis.nullAssignmentValueBit2 != 0;", "+\t\tint i;", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 39) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 39\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 33) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 33\"); //$NON-NLS-1$", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 40) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 40\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 34) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 34\"); //$NON-NLS-1$", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 41) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 41\"); //$NON-NLS-1$", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 35) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 35\"); //$NON-NLS-1$", "-\t\t\tif (coverageTestFlag && coverageTestId == 42) {", "-\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 42\"); //$NON-NLS-1$", "+\t\t\tif (coverageTestFlag && coverageTestId == 36) {", "+\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 36\"); //$NON-NLS-1$", "-\t\tint i;", "-\t\tif (otherHasNulls) {", "-\t\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\t\tthis.extra[0][i] &= ", "-\t\t\t\t\totherInits.extra[0][i];", "-\t\t\t\tthis.extra[1][i] |= ", "-\t\t\t\t\totherInits.extra[1][i];", "-\t\t\t\tthis.extra[2][i] =", "-\t\t\t\t\t(a1 = this.extra[2][i]) & ", "-\t\t\t\t\t(b1 = otherInits.extra[2][i]) & (", "-\t\t\t\t\t\t(nb4 = ~(b4 = otherInits.extra[5][i])) & ", "-\t\t\t\t\t\t((b2 = otherInits.extra[3][i]) & ", "-\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) & ", "-\t\t\t\t\t\t\t\t(na3 = ~(a3 = this.extra[4][i])) & ", "-\t\t\t\t\t\t\t\t((a2 = this.extra[3][i]) & ", "-\t\t\t\t\t\t\t\t\t(na4 = ~(a4 = this.extra[5][i])) | a4) |", "-\t\t\t\t\t\t\t\t(na2 = ~a2) & a3 & na4 & (nb2 = ~b2) & b3 ) |", "-\t\t\t\t\t\tb4 & (na3 & nb3 & (na4 & a2 | a4) |", "-\t\t\t\t\t\t\t\tna2 & a4 & nb2));", "-\t\t\t\tthis.extra[3][i] =", "-\t\t\t\t\ta2 & b2 & ~(a1 ^ b1) & (na3 & nb3 | na4 & nb4) |", "-\t\t\t\t\ta1 & b1 & (a2 ^ b2) & na3 & nb3 |", "-\t\t\t\t\t(a1 & na2 & (nb1 = ~b1) & b2 | ~a1 & a2 & b1 & nb2) & na4 & nb4;", "-\t\t\t\tthis.extra[4][i] =", "-\t\t\t\t\tb1 & nb2 & nb4 |", "-\t\t\t\t\t~a1 & (a3 |", "-\t\t\t\t\t\t\ta2 & na3 & (b1 | nb2)) |", "-\t\t\t\t\t(a1 | na2) & nb1 & b2 & nb3 |", "-\t\t\t\t\tnb1 & b3 |", "-\t\t\t\t\ta1 & na2 & (na4 |", "-\t\t\t\t\t\t\t\tb1 & nb2 & (a3 | b3));", "-\t\t\t\tthis.extra[5][i] =", "-\t\t\t\t\ta4 | b4;", "-", "-\t\t\t\t// WORK recode if tests succeed", "-\t\t\t\tthis.extra[4][i] &= ", "-\t\t\t\t\t~(a1 & na2 & na3 & a4 & nb1 & b2 & nb3 & nb4", "-\t\t\t\t\t\t\t| ~a1 & a2 & na3 & na4 & b1 & nb2 & nb3 & b4);", "-\t\t", "-\t\t\t\tthisHasNulls = thisHasNulls ||", "-\t\t\t\t\tthis.extra[5][i] != 0 ||", "-\t\t\t\t\tthis.extra[2][i] != 0 ||", "-\t\t\t\t\tthis.extra[3][i] != 0 ||", "-\t\t\t\t\tthis.extra[4][i] != 0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 43) {", "-\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t}", "-\t\t\t}", "+        // MACRO :'b,'es/nullBit\\(.\\)/extra[\\1 + 1][i]/g", "+\t\t// manage definite assignment", "+\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t  \t\tthis.extra[0][i] &= otherInits.extra[0][i];", "+\t  \t\tthis.extra[1][i] |= otherInits.extra[1][i];", "-\t\telse {", "-\t\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\t\tthis.extra[0][i] &= ", "-\t\t\t\t\totherInits.extra[0][i];", "-\t\t\t\tthis.extra[1][i] |= ", "-\t\t\t\t\totherInits.extra[1][i];", "-\t\t\t\tthis.extra[4][i] =", "-\t\t\t\t\t~(~this.extra[2][i] &", "-\t\t\t\t\t\t\t~this.extra[3][i] &", "-\t\t\t\t\t\t\t~this.extra[4][i]) &", "-\t\t\t\t\t~(this.extra[2][i] & ", "-\t\t\t\t\t\t\t(this.extra[3][i] | ", "-\t\t\t\t\t\t\tthis.extra[5][i]));", "-\t\t\t\tthis.extra[2][i] = ", "-\t\t\t\tthis.extra[3][i] = 0;", "-\t\t\t\tthisHasNulls = thisHasNulls ||", "-\t\t\t\t\tthis.extra[4][i] != 0 ||", "-\t\t\t\t\tthis.extra[5][i] != 0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 44) {", "-\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t}", "+\t\tfor (; i < copyLimit; i++) {", "+\t\t  \tthis.extra[1][i] = otherInits.extra[1][i];", "+\t\t}", "+\t\tfor (; i < resetLimit; i++) {", "+\t\t  \tthis.extra[0][i] = 0;", "+\t\t}", "+\t\t// refine null bits requirements", "+\t\tif (!otherHasNulls) {", "+\t\t  if (resetLimit < mergeLimit) {", "+\t\t\tresetLimit = mergeLimit;", "+\t\t  }", "+\t\t  copyLimit = 0; // no need to carry inexisting nulls", "+\t\t  mergeLimit = 0;", "+\t\t}", "+\t\tif (!thisHadNulls) {", "+\t\t  resetLimit = 0; // no need to reset anything", "+\t\t}", "+\t\t// compose nulls", "+\t\tfor (i = 0; i < mergeLimit; i++) {", "+    \t\tthis.extra[1 + 1][i] = (a2 = this.extra[2 + 1][i]) & (a3 = this.extra[3 + 1][i]) ", "+    \t\t\t\t\t\t\t& (a4 = this.extra[4 + 1][i]) & (b1 = otherInits.extra[1 + 1][i]) ", "+    \t\t\t\t\t\t\t& (nb2 = ~(b2 = otherInits.extra[2 + 1][i]))", "+                  \t\t\t| (a1 = this.extra[1 + 1][i]) & (b1 & (a3 & a4 & (b3 = otherInits.extra[3 + 1][i]) ", "+                  \t\t\t\t\t\t\t\t\t\t\t\t\t& (b4 = otherInits.extra[4 + 1][i])", "+                  \t\t\t\t\t\t\t\t\t\t\t\t| (na2 = ~a2) & nb2 ", "+                  \t\t\t\t\t\t\t\t\t\t\t\t\t& ((nb4 = ~b4) | (na4 = ~a4) ", "+                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t| (na3 = ~a3) & (nb3 = ~b3))", "+                  \t\t\t\t\t\t\t\t\t\t\t\t| a2 & b2 & ((na4 | na3) & (nb4\t| nb3)))", "+                  \t\t\t\t\t\t\t\t\t\t\t| na2 & b2 & b3 & b4);", "+    \t\tthis.extra[2 + 1][i] = b2 & (nb3 | (nb1 = ~b1) | a3 & (a4 | (na1 = ~a1)) & nb4)", "+        \t\t\t| a2 & (b2 | na4 & b3 & (b4 | nb1) | na3 | na1);", "+    \t\tthis.extra[3 + 1][i] = b3 & (nb2 & b4 | nb1 | a3 & (na4 & nb4 | a4 & b4))", "+        \t\t\t| a3 & (na2 & a4 | na1)", "+        \t\t\t| (a2 | na1) & b1 & nb2 & nb4", "+        \t\t\t| a1 & na2 & na4 & (b2 | nb1);", "+    \t\tthis.extra[4 + 1][i] = na3 & (nb1 & nb3 & b4", "+              \t\t\t| b1 & (nb2 & nb3 | a4 & b2 & nb4)", "+              \t\t\t| na1 & a4 & (nb3 | b1 & b2))", "+        \t\t\t| a3 & a4 & (b3 & b4 | b1 & nb2)", "+        \t\t\t| na2 & (nb1 & b4 | b1 & nb3 | na1 & a4) & nb2", "+        \t\t\t| a1 & (na3 & (nb3 & b4", "+                        \t\t\t| b1 & b2 & b3 & nb4", "+                        \t\t\t| na2 & (nb3 | nb2))", "+                \t\t\t| na2 & b3 & b4", "+                \t\t\t| a2 & (nb1 & b4 | a3 & na4 & b1) & nb3);", "+\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\tthis.extra[3][i] != 0 ||", "+\t\t\t\tthis.extra[4][i] != 0 ||", "+\t\t\t\tthis.extra[5][i] != 0 ;", "+\t\t\tif (coverageTestFlag && coverageTestId == 37) {", "+\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\tthis.extra[1][i] = otherInits.extra[1][i];", "-\t\t\tthis.extra[4][i] =", "-\t\t\t\t~(~otherInits.extra[2][i] &", "-\t\t\t\t\t~otherInits.extra[3][i] &", "-\t\t\t\t\t~otherInits.extra[4][i]) &", "-\t\t\t\t~(otherInits.extra[2][i] & ", "-\t\t\t\t\t(otherInits.extra[3][i] |", "-\t\t\t\t\totherInits.extra[5][i]));", "-\t\t\tthis.extra[5][i] = otherInits.extra[5][i];", "+    \t\tthis.extra[1 + 1][i] = 0;", "+    \t\tthis.extra[2 + 1][i] = (b2 = otherInits.extra[2 + 1][i]) & (nb3 = ~(b3 = otherInits.extra[3 + 1][i]) | (nb1 = ~(b1 = otherInits.extra[1 + 1][i])));", "+    \t\tthis.extra[3 + 1][i] = b3 & ((nb2 = ~b2) & (b4 = otherInits.extra[4 + 1][i]) | nb1) | b1 & nb2 & ~b4;", "+    \t\tthis.extra[4 + 1][i] = (nb3 | nb2) & nb1 & b4\t| b1 & nb3 & nb2;", "+\t\t\t\tthis.extra[3][i] != 0 ||", "-\t\t\tif (coverageTestFlag && coverageTestId == 45) {", "+\t\t\tif (coverageTestFlag && coverageTestId == 38) {", "-\t\t\tthis.extra[4][i] =", "-\t\t\t\t~(~this.extra[2][i] &", "-\t\t\t\t\t\t~this.extra[3][i] &", "-\t\t\t\t\t\t~this.extra[4][i]) &", "-\t\t\t\t~(this.extra[2][i] & ", "-\t\t\t\t\t\t(this.extra[3][i] | ", "-\t\t\t\t\t\tthis.extra[5][i]));", "-\t\t\tthis.extra[0][i] = ", "-\t\t\tthis.extra[2][i] = ", "-\t\t\tthis.extra[3][i] = 0;", "+    \t\ta1 = this.extra[1 + 1][i];", "+      \t\tthis.extra[1 + 1][i] = 0;", "+      \t\tthis.extra[2 + 1][i] = (a2 = this.extra[2 + 1][i]) & (na3 = ~(a3 = this.extra[3 + 1][i]) | (na1 = ~a1));", "+      \t\tthis.extra[3 + 1][i] = a3 & ((na2 = ~a2) & (a4 = this.extra[4 + 1][i]) | na1) | a1 & na2 & ~a4;", "+      \t\tthis.extra[4 + 1][i] = (na3 | na2) & na1 & a4\t| a1 & na3 & na2;", "+\t\t\t\tthis.extra[3][i] != 0 ||", "-\t\t\tif (coverageTestFlag && coverageTestId == 46) {", "+\t\t\tif (coverageTestFlag && coverageTestId == 39) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc36df7b0d35f8208275adaeed8a1d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public UnconditionalFlowInfo addPotentialNullInfoFrom( \t\tUnconditionalFlowInfo otherInits)", "signatureAfterChange": " public UnconditionalFlowInfo addPotentialNullInfoFrom( \t\tUnconditionalFlowInfo otherInits)", "diff": ["-\tboolean thisHasNulls = (this.tagBits & NULL_FLAG_MASK) != 0;", "-\tif (thisHasNulls) {", "-\t\tlong a1, a2, na2, a3, na3, a4, na4, b1, nb1, b2, nb2, b3, nb3, b4, nb4;", "-\t\tthis.nullAssignmentStatusBit1 =", "-\t\t\t((a1 = this.nullAssignmentStatusBit1) &", "-\t\t\t\t\t(na4 = ~(a4 = this.nullAssignmentValueBit2)) &\t", "-\t\t\t\t\t((na3 = ~(a3 = this.nullAssignmentValueBit1)) | ", "-\t\t\t\t\t\t\t(a2 = this.nullAssignmentStatusBit2)) | ", "-\t\t\t\t\t\t\ta2 & na3 &\ta4) & ", "-\t\t\t\t\t(nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) &", "-\t\t\t\t\t((b2 = otherInits.nullAssignmentStatusBit2) | ", "-\t\t\t\t\t(nb4 = ~(b4 = otherInits.nullAssignmentValueBit2))) |", "-\t\t\ta1 & (na2 = ~a2) & ", "-\t\t\t\t(a4 & ((nb1 = ~(b1 = otherInits.nullAssignmentStatusBit1)) & ", "-\t\t\t\t\t\tnb3 | b1 &", "-\t\t\t\t\t\t(b4 | b2)) |", "-\t\t\t\tna4 & (nb1 & (((nb2 = ~b2) & nb4 | b2) & nb3 | b3 & nb4) | ", "-\t\t\t\t\t\tb1 & nb4 & (nb2 | nb3)));", "-\t\tthis.nullAssignmentStatusBit2 =", "-\t\t\ta2 & (~a1 & na4 & nb4 |", "-\t\t\t\t\ta1 & na3 & nb3 & (nb1 & (nb2 & nb4 | b2) |", "-\t\t\t\t\t\t\t\t\t\tb1 & (nb4 |b2 & b4)));", "-\t\tthis.nullAssignmentValueBit1 =", "-\t\t\ta3 |", "-\t\t\tb1 & nb2 & nb4 |", "-\t\t\tnb1 & b3 |", "-\t\t\ta1 & na2 & (b1 & b3 | nb1 & b4);", "-//\t\t\tb1 & (~b2 & ~b4 | a1 & ~a2 & b3) |", "-//\t\t\t~b1 & (b3 | a1 & ~a2 & b4); -- same op nb", "-\t\tthis.nullAssignmentValueBit2 =", "-\t\t\ta4 & (na2 | a2 & na3) |", "-\t\t\tb4 & (nb2 | b2 & nb3);", "-\t\tif (coverageTestFlag && coverageTestId == 15) {", "-\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\tboolean thisHadNulls = (this.tagBits & NULL_FLAG_MASK) != 0,", "+\t\tthisHasNulls = false;", "+\tlong a1, a2, a3, a4,  ", "+\t\tna1, na2, na3, na4, ", "+\t\tb1, b2, b3, b4,", "+\t\tnb1, nb2, nb3, nb4;", "+\tif (thisHadNulls) {", "+\t\tthis.nullBit1  = (a1 = this.nullBit1) ", "+\t\t\t\t\t\t\t\t& ((a3 = this.nullBit3) & (a4 = this.nullBit4) ", "+\t\t\t\t\t\t\t\t\t& ((nb2 = ~(b2 = otherInits.nullBit2)) ", "+\t\t\t\t\t\t\t\t\t\t& (nb4 = ~(b4 = otherInits.nullBit4)) ", "+\t\t\t\t\t\t\t\t\t\t\t| (b1 = otherInits.nullBit1) & (b3 = otherInits.nullBit3))", "+                \t\t\t| (na2 = ~(a2 = this.nullBit2)) ", "+                \t\t\t\t& (b1 & b3 | ((na4 = ~a4) | (na3 = ~a3)) & nb2)", "+                \t\t\t| a2 & ((na4 | na3) & ((nb3 = ~b3) & nb4 | b1 & b2)));", "+\t\tthis.nullBit2 = b2 & (nb3 | (nb1 = ~b1))", "+    \t\t\t| a2 & (nb3 & nb4 | b2 | na3 | (na1 = ~a1));", "+\t\tthis.nullBit3 = b3 & (nb1 & b2", "+            \t\t| a2 & (nb2\t| a3)", "+            \t\t| na1 & nb2", "+            \t\t| a1 & na2 & na4 & b1)", "+    \t\t\t| a3 & (nb2 & nb4 | na2 & a4 | na1)", "+    \t\t\t| a1 & na2 & na4 & b2;", "+\t\tthis.nullBit4 = na3 & (nb1 & nb3 & b4", "+    \t\t\t\t| a4 & (nb3 | b1 & b2))", "+    \t\t\t| nb2 & (na3 & b1 & nb3\t| na2 & (nb1 & b4 | b1 & nb3 | a4))", "+    \t\t\t| a3 & (a4 & (nb2 | b1 & b3)", "+            \t\t\t| a1 & a2 & (nb1 & b4 | na4 & (b2 | b1) & nb3));", "+\t\tif (coverageTestFlag && coverageTestId == 9) {", "+\t\t  this.nullBit4 = ~0;", "-\t\t// extra storage management", "-\t\tif (otherInits.extra != null) {", "-\t\t\tint mergeLimit = 0, copyLimit = 0;", "-\t\t\tint otherLength = otherInits.extra[0].length;", "-\t\t\tif (this.extra == null) {", "-\t\t\t\tthis.extra = new long[extraLength][];", "-\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "-\t\t\t\t\tthis.extra[j] = new long[otherLength];", "-\t\t\t\t}", "-\t\t\t\tcopyLimit = otherLength;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 16) {", "-\t\t\t\t\tthis.extra[2][0] = ~0; thisHasNulls = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tmergeLimit = otherLength;", "-\t\t\t\tif (mergeLimit > this.extra[0].length) {", "-\t\t\t\t\tcopyLimit = mergeLimit;", "-\t\t\t\t\tmergeLimit = this.extra[0].length;", "-\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "-\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0,", "-\t\t\t\t\t\t\t\tthis.extra[j] = new long[otherLength], 0,", "-\t\t\t\t\t\t\t\tmergeLimit);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint i;", "-\t\t\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\t\t\tthis.extra[2][i] =", "-\t\t\t\t\t\t((a1 = this.extra[2][i]) &", "-\t\t\t\t\t\t\t\t(na4 = ~(a4 = this.extra[5][i])) &\t", "-\t\t\t\t\t\t\t\t((na3 = ~(a3 = this.extra[4][i])) | ", "-\t\t\t\t\t\t\t\t\t\t(a2 = this.extra[3][i])) | ", "-\t\t\t\t\t\t\t\t\t\ta2 & na3 &\ta4) & ", "-\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) &", "-\t\t\t\t\t\t\t\t((b2 = otherInits.extra[3][i]) | ", "-\t\t\t\t\t\t\t\t(nb4 = ~(b4 = otherInits.extra[5][i]))) |", "-\t\t\t\t\t\ta1 & (na2 = ~a2) & ", "-\t\t\t\t\t\t\t(a4 & ((nb1 = ~(b1 = otherInits.extra[2][i])) & ", "-\t\t\t\t\t\t\t\t\tnb3 | b1 &", "-\t\t\t\t\t\t\t\t\t(b4 | b2)) |", "-\t\t\t\t\t\t\tna4 & (nb1 & (((nb2 = ~b2) & nb4 | b2) & nb3 | b3 & nb4) | ", "-\t\t\t\t\t\t\t\t\tb1 & nb4 & (nb2 | nb3)));", "-\t\t\t\t\tthis.extra[3][i] =", "-\t\t\t\t\t\ta2 & (~a1 & na4 & nb4 |", "-\t\t\t\t\t\t\t\ta1 & na3 & nb3 & (nb1 & (nb2 & nb4 | b2) |", "-\t\t\t\t\t\t\t\t\t\t\t\t\tb1 & (nb4 |b2 & b4)));", "-\t\t\t\t\tthis.extra[4][i] =", "-\t\t\t\t\t\ta3 |", "-\t\t\t\t\t\tb1 & nb2 & nb4 |", "-\t\t\t\t\t\tnb1 & b3 |", "-\t\t\t\t\t\ta1 & na2 & (b1 & b3 | nb1 & b4);", "-\t\t\t\t\tthis.extra[5][i] =", "-\t\t\t\t\t\ta4 & (na2 | a2 & na3) |", "-\t\t\t\t\t\tb4 & (nb2 | b2 & nb3);", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 17) {", "-\t\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tfor (; i < copyLimit; i++) {", "-\t\t\t\t\tif (otherInits.extra[4][i] != 0 ||", "-\t\t\t\t\t\totherInits.extra[5][i] != 0) {", "-\t\t\t\t\t\tthis.tagBits |= NULL_FLAG_MASK; ", "-\t\t\t\t\t\tthis.extra[4][i] = ", "-\t\t\t\t\t\t\totherInits.extra[4][i] &", "-\t\t\t\t\t\t\t~(otherInits.extra[2][i] &", "-\t\t\t\t\t\t\t  ~otherInits.extra[3][i] &", "-\t\t\t\t\t\t\t  otherInits.extra[5][i]);", "-\t\t\t\t\t\tthis.extra[5][i] = ", "-\t\t\t\t\t\t\totherInits.extra[5][i];", "-\t\t\t\t\t\tif (coverageTestFlag && coverageTestId == 18) {", "-\t\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif ((this.nullBit2 | this.nullBit3 | this.nullBit4) != 0) { //  bit1 is redundant", "+\t\t  \tthisHasNulls = true;", "+\t\t}", "+\t} else {", "+  \t\tthis.nullBit1 = 0;", "+  \t\tthis.nullBit2 = (b2 = otherInits.nullBit2) ", "+  \t\t\t\t\t\t\t& ((nb3 = ~(b3 = otherInits.nullBit3)) | ", "+  \t\t\t\t\t\t\t\t(nb1 = ~(b1 = otherInits.nullBit1)));", "+  \t\tthis.nullBit3 = b3 & (nb1 | (nb2 = ~b2));", "+  \t\tthis.nullBit4 = ~b1 & ~b3 & (b4 = otherInits.nullBit4) | ~b2 & (b1 & ~b3 | ~b1 & b4);", "+\t\tif (coverageTestFlag && coverageTestId == 10) {", "+\t\t  this.nullBit4 = ~0;", "+\t\t}", "+\t\tif ((this.nullBit2 | this.nullBit3 | this.nullBit4) != 0) { //  bit1 is redundant", "+\t\t  \tthisHasNulls = true;", "-\telse {", "-\t\tif (otherInits.nullAssignmentValueBit1 != 0 ||", "-\t\t\totherInits.nullAssignmentValueBit2 != 0) {", "-\t\t\t// add potential values", "-\t\t\tthis.nullAssignmentValueBit1 = ", "-\t\t\t\totherInits.nullAssignmentValueBit1 & ", "-\t\t\t\t\t~(otherInits.nullAssignmentStatusBit1 &", "-\t\t\t\t\t  ~otherInits.nullAssignmentStatusBit2 &", "-\t\t\t\t\t  otherInits.nullAssignmentValueBit2); // exclude assigned unknown", "-\t\t\tthis.nullAssignmentValueBit2 = ", "-\t\t\t\totherInits.nullAssignmentValueBit2;", "-\t\t\tthisHasNulls = ", "-\t\t\t\tthis.nullAssignmentValueBit1 != 0 ||", "-\t\t\t\tthis.nullAssignmentValueBit2 != 0;", "-\t\t\tif (coverageTestFlag && coverageTestId == 10) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t// extra storage management", "+\tif (otherInits.extra != null) {", "+\t\tint mergeLimit = 0, copyLimit = otherInits.extra[0].length;", "+\t\tif (this.extra == null) {", "+\t\t\tthis.extra = new long[extraLength][];", "+\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\tthis.extra[j] = new long[copyLimit];", "+\t\t\t}", "+\t\t\tif (coverageTestFlag && coverageTestId == 11) {", "+\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 11\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmergeLimit = copyLimit;", "+\t\t\tif (mergeLimit > this.extra[0].length) {", "+\t\t\t\tmergeLimit = this.extra[0].length;", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tSystem.arraycopy(this.extra[j], 0,", "+\t\t\t\t\t\t\tthis.extra[j] = new long[copyLimit], 0,", "+\t\t\t\t\t\t\tmergeLimit);", "+\t\t\t\t}", "+\t\t\t\tif (! thisHadNulls) {", "+    \t\t\t\tmergeLimit = 0; ", "+    \t\t\t\t// will do with a copy -- caveat: only valid because definite assignment bits copied above", "+        \t\t\tif (coverageTestFlag && coverageTestId == 12) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 12\"); //$NON-NLS-1$", "+        \t\t\t}", "+\t\t\t\t}", "-\t\t// extra storage management", "-\t\tif (otherInits.extra != null) {", "-\t\t\tint mergeLimit = 0, copyLimit = 0;", "-\t\t\tint otherLength = otherInits.extra[0].length;", "-\t\t\tif (this.extra == null) {", "-\t\t\t\tcopyLimit = otherLength; ", "-\t\t\t\t\t// cannot happen when called from addPotentialInitializationsFrom", "-\t\t\t\tthis.extra = new long[extraLength][];", "-\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "-\t\t\t\t\tthis.extra[j] = new long[otherLength];", "-\t\t\t\t}", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 11) {", "-\t\t\t\t\tthis.extra[5][0] = ~0; this.tagBits |= NULL_FLAG_MASK;", "-\t\t\t\t}", "+\t\t// PREMATURE skip operations for fields", "+\t\tint i;", "+\t\tfor (i = 0 ; i < mergeLimit ; i++) {", "+    \t\tthis.extra[1 + 1][i]  = (a1 = this.extra[1 + 1][i]) ", "+    \t\t\t\t\t\t\t\t& ((a3 = this.extra[3 + 1][i]) & (a4 = this.extra[4 + 1][i]) ", "+    \t\t\t\t\t\t\t\t\t& ((nb2 = ~(b2 = otherInits.extra[2 + 1][i])) ", "+    \t\t\t\t\t\t\t\t\t\t& (nb4 = ~(b4 = otherInits.extra[4 + 1][i])) ", "+    \t\t\t\t\t\t\t\t\t\t\t| (b1 = otherInits.extra[1 + 1][i]) & (b3 = otherInits.extra[3 + 1][i]))", "+                    \t\t\t| (na2 = ~(a2 = this.extra[2 + 1][i])) ", "+                    \t\t\t\t& (b1 & b3 | ((na4 = ~a4) | (na3 = ~a3)) & nb2)", "+                    \t\t\t| a2 & ((na4 | na3) & ((nb3 = ~b3) & nb4 | b1 & b2)));", "+    \t\tthis.extra[2 + 1][i] = b2 & (nb3 | (nb1 = ~b1))", "+        \t\t\t| a2 & (nb3 & nb4 | b2 | na3 | (na1 = ~a1));", "+    \t\tthis.extra[3 + 1][i] = b3 & (nb1 & b2", "+                \t\t| a2 & (nb2\t| a3)", "+                \t\t| na1 & nb2", "+                \t\t| a1 & na2 & na4 & b1)", "+        \t\t\t| a3 & (nb2 & nb4 | na2 & a4 | na1)", "+        \t\t\t| a1 & na2 & na4 & b2;", "+    \t\tthis.extra[4 + 1][i] = na3 & (nb1 & nb3 & b4", "+        \t\t\t\t| a4 & (nb3 | b1 & b2))", "+        \t\t\t| nb2 & (na3 & b1 & nb3\t| na2 & (nb1 & b4 | b1 & nb3 | a4))", "+        \t\t\t| a3 & (a4 & (nb2 | b1 & b3)", "+                \t\t\t| a1 & a2 & (nb1 & b4 | na4 & (b2 | b1) & nb3));", "+    \t\tif ((this.extra[2 + 1][i] | this.extra[3 + 1][i] | this.extra[4 + 1][i]) != 0) { //  bit1 is redundant", "+    \t\t  \tthisHasNulls = true;", "+    \t\t}", "+\t\t\tif (coverageTestFlag && coverageTestId == 13) {", "+\t\t\t  this.nullBit4 = ~0;", "-\t\t\telse {", "-\t\t\t\tmergeLimit = otherLength;", "-\t\t\t\tif (mergeLimit > this.extra[0].length) {", "-\t\t\t\t\tcopyLimit = mergeLimit;", "-\t\t\t\t\tmergeLimit = this.extra[0].length;", "-\t\t\t\t\tSystem.arraycopy(this.extra[0], 0,", "-\t\t\t\t\t\t\tthis.extra[0] = new long[otherLength], 0,", "-\t\t\t\t\t\t\tmergeLimit);", "-\t\t\t\t\tSystem.arraycopy(this.extra[1], 0,", "-\t\t\t\t\t\t\tthis.extra[1] = new long[otherLength], 0,", "-\t\t\t\t\t\t\tmergeLimit);", "-\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "-\t\t\t\t\t\tthis.extra[j] = new long[otherLength];", "-\t\t\t\t\t}", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 12) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 12\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tint i;", "-\t\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\t\tif (otherInits.extra[4][i] != 0 ||", "-\t\t\t\t\totherInits.extra[5][i] != 0) {", "-\t\t\t\t\tthis.extra[4][i] |= ", "-\t\t\t\t\t\totherInits.extra[4][i] &", "-\t\t\t\t\t\t~(otherInits.extra[2][i] &", "-\t\t\t\t\t\t  ~otherInits.extra[3][i] &", "-\t\t\t\t\t\t  otherInits.extra[5][i]);", "-\t\t\t\t\tthis.extra[5][i] |= ", "-\t\t\t\t\t\totherInits.extra[5][i];", "-\t\t\t\t\tthisHasNulls = thisHasNulls ||", "-\t\t\t\t\t\tthis.extra[4][i] != 0 ||", "-\t\t\t\t\t\tthis.extra[5][i] != 0;", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 13) {", "-\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfor (; i < copyLimit; i++) {", "-\t\t\t\tif (otherInits.extra[4][i] != 0 ||", "-\t\t\t\t\totherInits.extra[5][i] != 0) {", "-\t\t\t\t\tthis.extra[4][i] = ", "-\t\t\t\t\t\totherInits.extra[4][i] &", "-\t\t\t\t\t\t~(otherInits.extra[2][i] &", "-\t\t\t\t\t\t  ~otherInits.extra[3][i] &", "-\t\t\t\t\t\t  otherInits.extra[5][i]);", "-\t\t\t\t\tthis.extra[5][i] = ", "-\t\t\t\t\t\totherInits.extra[5][i];", "-\t\t\t\t\tthisHasNulls = thisHasNulls ||", "-\t\t\t\t\t\tthis.extra[4][i] != 0 ||", "-\t\t\t\t\t\tthis.extra[5][i] != 0;", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 14) {", "-\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t}", "+\t\tfor (; i < copyLimit; i++) {", "+    \t\tthis.extra[1 + 1][i] = 0;", "+    \t\tthis.extra[2 + 1][i] = (b2 = otherInits.extra[2 + 1][i]) ", "+    \t\t\t\t\t\t\t& ((nb3 = ~(b3 = otherInits.extra[3 + 1][i])) | ", "+    \t\t\t\t\t\t\t\t(nb1 = ~(b1 = otherInits.extra[1 + 1][i])));", "+    \t\tthis.extra[3 + 1][i] = b3 & (nb1 | (nb2 = ~b2));", "+    \t\tthis.extra[4 + 1][i] = ~b1 & ~b3 & (b4 = otherInits.extra[4 + 1][i]) | ~b2 & (b1 & ~b3 | ~b1 & b4);", "+    \t\tif ((this.extra[2 + 1][i] | this.extra[3 + 1][i] | this.extra[4 + 1][i]) != 0) { //  bit1 is redundant", "+    \t\t  \tthisHasNulls = true;", "+    \t\t}", "+\t\t\tif (coverageTestFlag && coverageTestId == 14) {", "+\t\t\t  this.extra[5][i] = ~0;"]}], "num": 40897}
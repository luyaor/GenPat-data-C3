{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "626279694c1f042ae7016182f6dcf463", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d0733130948671a65c341c4cdcaeef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static void handleResourceAssignment(BlockScope scope, FlowInfo upstreamInfo, FlowInfo flowInfo, ASTNode location, Expression rhs, LocalVariableBinding local)", "signatureAfterChange": " \tpublic static void handleResourceAssignment(BlockScope scope, FlowInfo upstreamInfo, FlowInfo flowInfo, ASTNode location, Expression rhs, LocalVariableBinding local)", "diff": ["+\t\trhsAnalyis:", "-\t\t\t\t\t// null shouldn't occur but let's play safe", "+\t\t\t\t\t// null shouldn't occur but let's play safe:", "-\t\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t//\t\ta.: let fresh LHS share it ", "+\t\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t//\t\ta.: let fresh LHS share it", "+\t\t\t\t\tif (rhsTrackVar.currentAssignment == location) {", "+\t\t\t\t\t\t// pre-set tracker from lhs - passed from outside?", "+\t\t\t\t\t\t// now it's a fresh resource", "+\t\t\t\t\t\trhsTrackVar.globalClosingState &= ~(SHARED_WITH_OUTSIDE|OWNED_BY_OUTSIDE);", "+\t\t\t\t\t}", "-\t\t\t\t\tif (rhsTrackVar == disconnectedTracker && rhs instanceof AllocationExpression)", "-\t\t\t\t\t\treturn; \t\t\t\t\t\t\t\t\t// \t\tb.: self wrapper: res = new Wrap(res); -> done!", "-\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t\t//\t\tc.: conflicting LHS and RHS, proceed with recordErrorLocation below", "+\t\t\t\t\tif (rhs instanceof AllocationExpression) {", "+\t\t\t\t\t\tif (rhsTrackVar == disconnectedTracker)", "+\t\t\t\t\t\t\treturn;\t\t\t\t\t\t\t\t\t// \t\tb.: self wrapper: res = new Wrap(res); -> done!", "+\t\t\t\t\t\tif (local.closeTracker == rhsTrackVar ", "+\t\t\t\t\t\t\t\t&& ((rhsTrackVar.globalClosingState & OWNED_BY_OUTSIDE) != 0)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\tc.: assigning a fresh resource (pre-connected alloc) ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\t\t\tto a local previously holding an alien resource -> start over", "+\t\t\t\t\t\t\tlocal.closeTracker = new FakedTrackingVariable(local, location);", "+\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNull(local.closeTracker.binding);", "+\t\t\t\t\t\t\t// still check disconnectedTracker below", "+\t\t\t\t\t\t\tbreak rhsAnalyis;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tlocal.closeTracker = rhsTrackVar;\t\t\t\t//\t\td.: conflicting LHS and RHS, proceed with recordErrorLocation below"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7277ffb77d798fd2fbbb5b79f2933e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/Util.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate static void computeDietRange0(TypeDeclaration[] types)", "signatureAfterChange": " \t \tprivate static void computeDietRange0(TypeDeclaration[] types)", "diff": ["-\t\t\t\t\tif(!method.isDefaultConstructor()", "-\t\t\t\t\t\t&& !method.isClinit()", "-\t\t\t\t\t\t&& (method.modifiers & CompilerModifiers.AccSemicolonBody) == 0) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint flags = method.sourceEnd + 1 == method.bodyStart ? LBRACE_MISSING : NO_FLAG;", "-\t\t\t\t\t\taddInterval(method.bodyStart, method.bodyEnd, flags);", "+\t\t\t\t\tif(containsIgnoredBody(method)) {", "+\t\t\t\t\t\tif(containsErrorInSignature(method)) {", "+\t\t\t\t\t\t\tmethod.errorInSignature = true;", "+\t\t\t\t\t\t\taddInterval(method.declarationSourceStart, method.declarationSourceEnd, IGNORE);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint flags = method.sourceEnd + 1 == method.bodyStart ? LBRACE_MISSING : NO_FLAG;", "+\t\t\t\t\t\t\taddInterval(method.bodyStart, method.bodyEnd, flags);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\taddInterval(initializer.bodyStart, initializer.bodyEnd);", "+\t\t\t\t\t\tif(initializer.declarationSourceEnd == initializer.bodyEnd){", "+\t\t\t\t\t\t\tinitializer.errorInSignature = true;", "+\t\t\t\t\t\t\taddInterval(initializer.declarationSourceStart, initializer.declarationSourceEnd, IGNORE);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\taddInterval(initializer.bodyStart, initializer.bodyEnd);", "+\t\t\t\t\t\t}"]}], "num": 56244}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "992f0ef2773de2a28cf955025c7cd17f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d568ccbf4d3e761771baaef00d5c16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam01() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedSingleArgument01() throws CoreException", "diff": ["-\t// Search reference with nested parameterized types", "-\tpublic void testStringPatternNestedParam01() throws CoreException {", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g3.t\", true /* add all subpackages */);", "+\t// String pattern with nested single type argument", "+\tpublic void testStringNestedSingleArgument01() throws CoreException {", "+\t\tIJavaSearchScope scope = getJavaSearchCUScope(\"JavaSearch15\", \"g3/t/ref\", \"R1.java\");", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GS<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GS<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [GS<? extends java.lang.Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [GS<? super java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GS<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GS<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [GS<? extends java.lang.Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [GS<? super java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<? super RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<? extends Throwable>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<? super RuntimeException>] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R1.java [GS] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GS<GM<?, ?, ?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GS<GM<GM<?, ?, ?>,GM<?, ?, ?>,GM<?, ?, ?>>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_obj [GS<GM<Object, Exception, RuntimeException>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<GS<?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<GS<GS<?>>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<GS<?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GS<Object>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GS<? extends Throwable>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GS<? super RuntimeException>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GS<g3.t.def.GM<?, ?, ?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GS<g3.t.def.GM<g3.t.def.GM<?, ?, ?>, g3.t.def.GM<?, ?, ?>, g3.t.def.GM<?, ?, ?>>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_obj [GS<g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<g3.t.def.GS<?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<g3.t.def.GS<g3.t.def.GS<?>>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<g3.t.def.GS<?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GS<?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [GS<java.lang.Object>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [GS<? extends java.lang.Throwable>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [GS<? super java.lang.RuntimeException>] COMPATIBLE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd49ad21e1c3db37394b2ad7ca5b167c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 747, "methodNumberAfterChange": 748, "signatureBeforeChange": " public void _test742()", "signatureAfterChange": " public void test742()", "diff": ["-public void _test742() {", "+public void test742() {", "-\t\t\t\"\t/**Subclasses are parameterized by their own type*/\\n\" + ", "-\t\t\t\"\tprivate static abstract class SelfType<T extends SelfType<T>>{\\n\" + ", "-\t\t\t\"\t\tpublic abstract T getThis();\\n\" + ", "+\t\t\t\"\tstatic abstract class SelfType<T extends SelfType<T>>{\\n\" + ", "-\t\t\t\"\t/**Supertype inherits directly from the parameterized SelfType*/\\n\" + ", "-\t\t\t\"\tprivate static class SuperType extends SelfType<SuperType>{\\n\" + ", "-\t\t\t\"\t\t@Override\\n\" + ", "-\t\t\t\"\t\tpublic SuperType getThis(){\\n\" + ", "-\t\t\t\"\t\t\treturn this;\\n\" + ", "-\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\tstatic class SuperType extends SelfType<SuperType>{\\n\" + ", "-\t\t\t\"\t/**Subtype inherits indirectly from the parameterized SelfType*/\\n\" + ", "-\t\t\t\"\tprivate static class SubType extends SuperType{}\\n\" + ", "+\t\t\t\"\tstatic class SubType extends SuperType{}\\n\" + ", "-\t\t\t\"\t/**Creates a list containing a single SelfType*/\\n\" + ", "-\t\t\t\"\tpublic static <T extends SelfType<T>> List<T> makeSingletonList(T t){\\n\" + ", "+\t\t\t\"\tstatic <T extends SelfType<T>> List<T> makeSingletonList(T t){\\n\" + ", "-\t\t\t\"\t/**\\n\" + ", "-\t\t\t\"\t * Creates a list containing a single SelfType, allowing the list\\'s\\n\" + ", "-\t\t\t\"\t * element-type to be a supertype of the type of its single element\\n\" + ", "-\t\t\t\"\t */\\n\" + ", "-\t\t\t\"\tpublic static <T extends SelfType<T>,S extends T> List<T> makeSingletonList2(S s){\\n\" + ", "-\t\t\t\"\t\treturn Collections.singletonList((T)s);\\n\" + ", "+\t\t\t\"\tstatic <T extends SelfType<T>,S extends T> List<T> makeSingletonList2(S s){\\n\" + ", "+\t\t\t\"\t\treturn Collections.singletonList((T)s); // #0\\n\" + ", "-\t\t\t\"\t\t/*making lists of super types works fine ...*/\\n\" + ", "-\t\t\t\"\t\tmakeSingletonList(new SuperType());\\n\" + ", "-\t\t\t\"\t\tList<SuperType> lsup = makeSingletonList(new SuperType());\\n\" + ", "-\t\t\t\" \\n\" + ", "-\t\t\t\"\t\t/*but we can\\'t make a list of sub types; seems weird ...*/\\n\" + ", "-\t\t\t\"\t\tList<SubType> lsub = makeSingletonList(new SubType()); //ERROR\\n\" + ", "-\t\t\t\"\t\t\\n\" + ", "-\t\t\t\"\t\t/*can\\'t even call it w/o assigning the return value:*/\\n\" + ", "-\t\t\t\"\t\tmakeSingletonList(new SubType()); //ERROR\\n\" + ", "-\t\t\t\" \\n\" + ", "-\t\t\t\" \\n\" + ", "-\t\t\t\"\t\t/*so instead, we should be able to make lists of super type containing sub type elements*/\\n\" + ", "-\t\t\t\"\t\tmakeSingletonList2(new SubType()); //ERROR\\n\" + ", "-\t\t\t\"\t\t/*even if we assign the return value:*/\\n\" + ", "-\t\t\t\"\t\tlsup = makeSingletonList2(new SubType()); // ERROR (eclipse is okay with this though)\\n\" + ", "-\t\t\t\"\t\t/*this still doesn\\'t work either:*/\\n\" + ", "-\t\t\t\"\t\tlsub = makeSingletonList2(new SubType()); // ERROR\\n\" + ", "-\t\t\t\" \\n\" + ", "-\t\t\t\"\t\t/*we can make lists of super type this way though*/\\n\" + ", "-\t\t\t\"\t\tmakeSingletonList2(new SuperType()); // (eclipse doesn\\'t like this though)\\n\" + ", "-\t\t\t\"\t\t/*also ok if we assign the return value*/\\n\" + ", "-\t\t\t\"\t\tlsup = makeSingletonList2(new SuperType());\\n\" + ", "+\t\t\t\"\t\tmakeSingletonList(new SuperType()); // #1 - OK\\n\" + ", "+\t\t\t\"\t\tList<SuperType> lsup = makeSingletonList(new SuperType()); // #2 - OK\\n\" + ", "+\t\t\t\"\t\tList<SubType> lsub = makeSingletonList(new SubType()); // #3 - ERROR\\n\" + ", "+\t\t\t\"\t\tmakeSingletonList(new SubType()); // #4 - ERROR\\n\" + ", "+\t\t\t\" \t\tmakeSingletonList2(new SubType()); // #5 - ERROR\\n\" + ", "+\t\t\t\"\t\tlsup = makeSingletonList2(new SubType()); // #6 - OK\\n\" + ", "+\t\t\t\"\t\tlsub = makeSingletonList2(new SubType()); // #7 - ERROR\\n\" + ", "+\t\t\t\"\t\tmakeSingletonList2(new SuperType()); // #8 - OK\\n\" + ", "+\t\t\t\"\t\tlsup = makeSingletonList2(new SuperType()); // #9 - OK\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 40)\\n\" + ", "-\t\t\"\tList<SubType> lsub = makeSingletonList(new SubType()); //ERROR\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\"\tList<SubType> lsub = makeSingletonList(new SubType()); // #3 - ERROR\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 43)\\n\" + ", "-\t\t\"\tmakeSingletonList(new SubType()); //ERROR\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 25)\\n\" + ", "+\t\t\"\tmakeSingletonList(new SubType()); // #4 - ERROR\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 47)\\n\" + ", "-\t\t\"\tmakeSingletonList2(new SubType()); //ERROR\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 26)\\n\" + ", "+\t\t\"\tmakeSingletonList2(new SubType()); // #5 - ERROR\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 51)\\n\" + ", "-\t\t\"\tlsub = makeSingletonList2(new SubType()); // ERROR\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\"\tlsub = makeSingletonList2(new SubType()); // #7 - ERROR\\n\" + "]}], "num": 26289}
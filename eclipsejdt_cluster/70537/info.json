{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bead5e149be1ae57bdad0856e9b4d80f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84c18a45530c9ab15385f8e19f5d46f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "78062f651ed5392b1800a53eac72f4f25be7d9fe", "commitAfterChange": "371ce796d5527a77d64a03e162a0b71c0f24383c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \r void faultInTypesForFieldsAndMethods()", "signatureAfterChange": "\r \r void faultInTypesForFieldsAndMethods()", "diff": ["+void faultInTypesForFieldsAndMethods() {\r", "+\tif (!isPrototype()) throw new IllegalStateException();\r", "-\r", "-void faultInTypesForFieldsAndMethods() {\r", "-\tif (!isPrototype()) throw new IllegalStateException();\r", "-\tcheckAnnotationsInType();\r", "-\tinternalFaultInTypeForFieldsAndMethods();\r", "-}\r", "+\t\t((SourceTypeBinding) this.memberTypes[i]).faultInTypesForFieldsAndMethods();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c22b255eb807be72a6aaffba485034e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "dead6a3867ba962f651fba3cb95e7139a59158e3", "commitAfterChange": "2c262bb049c7c4afe17af25384f399520f404e78", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t\t// only collect for method type parameters", "+\t\tif (!(this.declaringElement instanceof MethodBinding)) return;", "-\t        int length = variableSubstitutes.length;", "-\t        for (int i = 0; i < length; i++) {", "-\t        \tTypeBinding substitute = variableSubstitutes[i];", "-\t            if (substitute == otherType) return; // already there", "-\t            if (substitute == null) {", "-\t                variableSubstitutes[i] = otherType;", "-\t                return;", "-\t            }", "-\t        }", "-\t        // no free spot found, need to grow", "-\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "-\t        variableSubstitutes[length] = otherType;", "-\t        substitutes.put(this, variableSubstitutes);", "+\t\t    insertLoop: {", "+\t\t        int length = variableSubstitutes.length;", "+\t\t        for (int i = 0; i < length; i++) {", "+\t\t        \tTypeBinding substitute = variableSubstitutes[i];", "+\t\t            if (substitute == otherType) return; // already there", "+\t\t            if (substitute == null) {", "+\t\t                variableSubstitutes[i] = otherType;", "+\t\t                break insertLoop;", "+\t\t            }", "+\t\t        }", "+\t\t        // no free spot found, need to grow", "+\t\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "+\t\t        variableSubstitutes[length] = otherType;", "+\t\t        substitutes.put(this, variableSubstitutes);", "+\t\t    }", "+\t    // recurse in variable bounds (82187)", "+\t    if (this.superclass != null && this.firstBound == this.superclass) {", "+\t    \tthis.superclass.collectSubstitutes(otherType, substitutes);", "+\t    }", "+\t   \tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+\t   \t\tthis.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "+\t   \t}"]}], "num": 70537}
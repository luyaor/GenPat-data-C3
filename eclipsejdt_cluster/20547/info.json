{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d73783e934fca6a5b57661af26d40ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb1e4c043b50ba2c8f649c673ddc1bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "94e87775403a1be90933921189758fda2ba4fb6c", "commitAfterChange": "bd01e05f0477a2d168d72337205595e4fa08ba90", "methodNumberBeforeChange": 881, "methodNumberAfterChange": 881, "signatureBeforeChange": " public void _test875()", "signatureAfterChange": " public void test875()", "diff": ["-public void _test875() {", "+public void test875() {", "-\t\t\"should be: 1-type mismatch 2-unchecked cast\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" + ", "+\t\t\"\t                                                                          ^^^^^^^^^^^^\\n\" + ", "+\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tprivate static final Map<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>> uiMap = new HashMap<Class<? extends DatabaseObject>, Class<? extends ObjectFormUI>>();\\n\" + ", "+\t\t\"\t                                                                                                                                                              ^^^^^^^^^^^^\\n\" + ", "+\t\t\"X.ObjectFormUI is a raw type. References to generic type X.ObjectFormUI<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\treturn null != null \\n\" + ", "+\t\t\"\t\t\t? uiMap.get(persistentClass)\\n\" + ", "+\t\t\"\t\t\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<capture-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\"\t: (Class<? extends ObjectFormUI<T>>) uiMap.get(persistentClass);\\n\" + ", "+\t\t\"\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The cast from Class<capture-of ? extends X.ObjectFormUI> to Class<? extends X.ObjectFormUI<T>> is actually checking against the erased type Class\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "344b6dcaf53ef3118289c7fab072d8b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c672e57e25ef5a7b26a09eab1198b6c71f25d601", "commitAfterChange": "9af1fa71ee48bf381240165a09c63c0129b5bd9e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test012b()", "signatureAfterChange": " public void test012b()", "diff": ["+        \"      syncOverride         missing synchronized in synchr. method override\\n\" + ", "+        \"      syntheticAccess      synthetic access for innerclass\\n\" + ", "+        \"      tasks(<tags separated by |>) tasks identified by tags inside comments\\n\" + ", "+        \"      typeHiding         + type parameter hiding another type\\n\" + ", "+        \"      unchecked          + unchecked type operation\\n\" + ", "+        \"      unnecessaryElse      unnecessary else clause\\n\" + ", "+        \"      unqualifiedField     unqualified reference to field\\n\" + ", "+        \"      unused               macro for unusedAllocation, unusedArgument,\\n\" + ", "+        \"                               unusedImport, unusedLabel, unusedLocal,\\n\" + ", "+        \"                               unusedPrivate, unusedThrown, and unusedTypeArgs\\n\" + ", "+        \"      unusedAllocation     allocating an object that is not used\\n\" + ", "+        \"      unusedArgument       unread method parameter\\n\" + ", "+        \"      unusedImport       + unused import declaration\\n\" + ", "+        \"      unusedLabel        + unused label\\n\" + ", "+        \"      unusedLocal        + unread local variable\\n\" + ", "+        \"      unusedPrivate      + unused private member declaration\\n\" + ", "+        \"      unusedThrown         unused declared thrown exception\\n\" + ", "+        \"      unusedTypeArgs     + unused type arguments for method\\n\" + ", "+        \"      uselessTypeCheck     unnecessary cast/instanceof operation\\n\" + ", "+        \"      varargsCast        + varargs argument need explicit cast\\n\" + ", "+        \"      warningToken       + unsupported or unnecessary @SuppressWarnings\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb71829ed7706bd4b25fec068d38e48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "94e87775403a1be90933921189758fda2ba4fb6c", "commitAfterChange": "bd01e05f0477a2d168d72337205595e4fa08ba90", "methodNumberBeforeChange": 649, "methodNumberAfterChange": 649, "signatureBeforeChange": "\t\t\t \tpublic void _test645()", "signatureAfterChange": "\t\t\t \tpublic void test645()", "diff": ["-\tpublic void _test645() {", "+\tpublic void test645() {", "-\t\t\t\"should complain about bound check failure on #getAnnotation(XClass<String>)\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tXClass xc = new XClass();\\n\" + ", "+\t\t\t\"\t^^^^^^\\n\" + ", "+\t\t\t\"XClass is a raw type. References to generic type XClass<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tXClass xc = new XClass();\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"XClass is a raw type. References to generic type XClass<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tString str = xc.getConstructor().getAnnotation(arg);\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method getAnnotation(XClass) belongs to the raw type XConstructor. References to generic type XConstructor<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tString str = xc.getConstructor().getAnnotation(arg);\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Annotation to String\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 20547}
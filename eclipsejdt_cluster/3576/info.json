{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54253e0d979901cc538113d21d98ecbe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69f227e3ec58c97bf1688f1b6b69151c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c29ff6f3ca53453d86d6a9de68da632d3d253455", "commitAfterChange": "c11e4d3823cd197ba20b5c4c8ef1ddf1ca70b418", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": " protected void consumeInsideCastExpressionLL1WithBounds()", "signatureAfterChange": " protected void consumeInsideCastExpressionLL1WithBounds()", "diff": ["+\tint additionalBoundsLength = this.genericsLengthStack[this.genericsLengthPtr--];", "+\tTypeReference[] bounds = new TypeReference[additionalBoundsLength + 1];", "+\tthis.genericsPtr -= additionalBoundsLength;", "+\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, bounds, 1, additionalBoundsLength);", "+", "+\tpushOnGenericsLengthStack(0); // handle type arguments", "+\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "+\tbounds[0] = getTypeReference(0);", "+ ", "+\tfor (int i = 0; i <= additionalBoundsLength; i++) {", "+\t\tpushOnExpressionStack(bounds[i]);", "+\t\tif (i > 0)", "+\t\t\tthis.expressionLengthStack[--this.expressionLengthPtr]++;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff17cc8b895b08e331c87843f4f213b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c29ff6f3ca53453d86d6a9de68da632d3d253455", "commitAfterChange": "c11e4d3823cd197ba20b5c4c8ef1ddf1ca70b418", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " protected void consumeCastExpressionLL1WithBounds()", "signatureAfterChange": " protected void consumeCastExpressionLL1WithBounds()", "diff": ["-\t", "-\tint additionalBoundsLength = this.genericsLengthStack[this.genericsLengthPtr--];", "-\tTypeReference[] bounds = new TypeReference[additionalBoundsLength + 1];", "-\tthis.genericsPtr -= additionalBoundsLength;", "-\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, bounds, 1, additionalBoundsLength);", "-", "-\tpushOnGenericsLengthStack(0); // handle type arguments", "-\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "-\tbounds[0] = getTypeReference(0);", "- ", "+\tint length;", "+\texp = this.expressionStack[this.expressionPtr--];", "+\tthis.expressionLengthPtr --;", "+\tTypeReference[] bounds = new TypeReference[length = this.expressionLengthStack[this.expressionLengthPtr]];", "+\tSystem.arraycopy(this.expressionStack, this.expressionPtr -= (length - 1), bounds, 0, length);", "-\t\t\texp=this.expressionStack[this.expressionPtr] ,", "+\t\t\texp,", "+\tthis.expressionLengthStack[this.expressionLengthPtr] = 1;"]}], "num": 3576}
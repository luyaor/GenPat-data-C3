{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77cf1d4866cac74661d00ded2d9c1233", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82f61a72f2829405b079c87e136bae95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "commitAfterChange": "a53e05883d2e536e6d912a85c946fd372aae0f56", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  public JavaSearchMatch newFieldReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint sourceStart,   \t\tint sourceEnd, \t\tReference reference)", "signatureAfterChange": "  public JavaSearchMatch newFieldReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint sourceStart,   \t\tint sourceEnd, \t\tASTNode reference)", "diff": ["-\t\tReference reference) {", "+\t\tASTNode reference) {", "+\tboolean insideDocComment = reference instanceof JavadocFieldReference || reference instanceof JavadocSingleNameReference;", "-\treturn new FieldReferenceMatch(enclosingElement, accuracy, sourceStart, sourceEnd, isReadAccess, isWriteAccess, participant, resource);", "+\treturn new FieldReferenceMatch(enclosingElement, accuracy, sourceStart, sourceEnd, isReadAccess, isWriteAccess, insideDocComment, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb73ff5bad6c671fd134a7b51757f717", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "8e16662f0ac598c8bd5851163f51568635e8acf6", "commitAfterChange": "7623f33d78c73547935e2e7601bcf7662d1f5c36", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(SwitchStatement node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(SwitchStatement node)", "diff": ["-\t\t\t\tnonBreakStatementEnd = (statement instanceof BreakStatement || statement instanceof ReturnStatement)", "-\t\t\t\t\t\t? -1 : this.tm.lastIndexIn(statement, -1);", "+\t\t\t\tboolean isBreaking = statement instanceof BreakStatement || statement instanceof ReturnStatement", "+\t\t\t\t\t\t|| statement instanceof ContinueStatement || statement instanceof Block;", "+\t\t\t\tnonBreakStatementEnd = isBreaking ? -1 : this.tm.lastIndexIn(statement, -1);"]}], "num": 67410}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d788001ed82f53def1956dc0c738ce31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82220768eced655f62957dd9ce58b420", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "d5cfbf43310ee4287ca95e41bcf01793920b4037", "commitAfterChange": "19036ed763985597632dc62fba09c6522d0864ac", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean referredByContainer)", "signatureAfterChange": " \t \tprivate static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, IClasspathContainer entryContainer, boolean checkSourceAttachment, boolean referredByContainer)", "diff": ["+\t", "+\tprivate static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, IClasspathContainer entryContainer, boolean checkSourceAttachment, boolean referredByContainer){", "-\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(project, containerEntry, checkSourceAttachment, true/*referred by container*/);", "+\t\t\t\t\t\t\t\tIJavaModelStatus containerEntryStatus = validateClasspathEntry(project, containerEntry, container, checkSourceAttachment, true/*referred by container*/);", "-\t\t\t\t\tIJavaModelStatus status = validateClasspathEntry(project, entry, checkSourceAttachment, false/*not referred by container*/);", "+\t\t\t\t\tIJavaModelStatus status = validateClasspathEntry(project, entry, null, checkSourceAttachment, false/*not referred by container*/);", "-\t\t\t\tIJavaModelStatus status = validateLibraryEntry(path, project, checkSourceAttachment ? entry.getSourceAttachmentPath() : null, entryPathMsg);", "+\t\t\t\tString containerInfo = null;", "+\t\t\t\tif (entryContainer != null) {", "+\t\t\t\t\tif (entryContainer instanceof UserLibraryClasspathContainer) {", "+\t\t\t\t\t\tcontainerInfo = Messages.bind(Messages.classpath_userLibraryInfo, new String[] {entryContainer.getDescription()});", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcontainerInfo = Messages.bind(Messages.classpath_containerInfo, new String[] {entryContainer.getDescription()});", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tIJavaModelStatus status = validateLibraryEntry(path, project, containerInfo, checkSourceAttachment ? entry.getSourceAttachmentPath() : null, entryPathMsg);", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL, project, path, CompilerOptions.versionFromJdkLevel(prereqProjectTargetJDK));", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INCOMPATIBLE_JDK_LEVEL,", "+\t\t\t\t\t\t\t\t\t\tproject, path, ", "+\t\t\t\t\t\t\t\t\t\tMessages.bind(Messages.classpath_incompatibleLibraryJDKLevel,", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tproject.getElementName(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompilerOptions.versionFromJdkLevel(projectTargetJDK), ", "+\t\t\t\t\t\t\t\t\t\t\t\t\tpath.makeRelative().toString(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompilerOptions.versionFromJdkLevel(prereqProjectTargetJDK)}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa4ff1a5ec1382db56b3303cc1a1ba5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "677c4b39a30069207f57550aec27ea9d04477c82", "commitAfterChange": "a8939af811304c63be0e7f585bcaea4e93cb581f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprivate void addNewEntry(final int InsideClasspath, final int InsideSourcepath, ArrayList bootclasspaths, ArrayList classpaths,ArrayList sourcepathClasspaths, String currentClasspathName, ArrayList currentRuleSpecs, int mode, String customEncoding)", "signatureAfterChange": "  \tprivate void addNewEntry(final int InsideClasspath, final int InsideSourcepath, ArrayList bootclasspaths, ArrayList classpaths,ArrayList sourcepathClasspaths, String currentClasspathName, ArrayList currentRuleSpecs, int mode, String customEncoding)", "diff": ["-\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules);", "+\t\t\tString templates[] = new String[AccessRuleSet.MESSAGE_TEMPLATES_LENGTH];", "+\t\t\ttemplates[0] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.type\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "+\t\t\ttemplates[1] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.constructor\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "+\t\t\ttemplates[2] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.method\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\ttemplates[3] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.field\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules, templates);"]}], "num": 24370}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "339344d3418284beb1733314ab641b7d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eace3e7199f044a2e779ab91a9c470a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b85e68b4448fd6d8525b5e65084449dd71c2c8ad", "commitAfterChange": "32dc5a86b3e47d436ba6e0bc77a486828202222d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\tif (typeSignature == null) {", "+\t\tSignatureWrapper wrapper = null;", "+\t\tif (typeSignature != null) {", "+\t\t\t// ClassSignature = ParameterPart(optional) super_TypeSignature interface_signature", "+\t\t\twrapper = new SignatureWrapper(typeSignature);", "+\t\t\tif (wrapper.signature[wrapper.start] == '<') {", "+\t\t\t\t// ParameterPart = '<' ParameterSignature(s) '>'", "+\t\t\t\twrapper.start++; // skip '<'", "+\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames);", "+\t\t\t\twrapper.start++; // skip '>'", "+\t\t\t\tthis.tagBits |=  TagBits.HasUnresolvedTypeVariables;", "+\t\t\t\tthis.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "+\t\t\t}", "+\t\t}", "+\t\tTypeVariableBinding[] typeVars = Binding.NO_TYPE_VARIABLES;", "+\t\tchar[] methodDescriptor = binaryType.getEnclosingMethod();", "+\t\tif (methodDescriptor != null) {", "+\t\t\tMethodBinding enclosingMethod = findMethod(methodDescriptor, missingTypeNames);", "+\t\t\tif (enclosingMethod != null) {", "+\t\t\t\ttypeVars = enclosingMethod.typeVariables;", "+\t\t\t\tthis.typeVariables = addMethodTypeVariables(typeVars);\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\tif (typeSignature == null)  {", "-\t\t\t// ClassSignature = ParameterPart(optional) super_TypeSignature interface_signature", "-\t\t\tSignatureWrapper wrapper = new SignatureWrapper(typeSignature);", "-\t\t\tif (wrapper.signature[wrapper.start] == '<') {", "-\t\t\t\t// ParameterPart = '<' ParameterSignature(s) '>'", "-\t\t\t\twrapper.start++; // skip '<'", "-\t\t\t\tthis.typeVariables = createTypeVariables(wrapper, true, missingTypeNames);", "-\t\t\t\twrapper.start++; // skip '>'", "-\t\t\t\tthis.tagBits |=  TagBits.HasUnresolvedTypeVariables;", "-\t\t\t\tthis.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\t}", "-\t\t\tTypeVariableBinding[] typeVars = Binding.NO_TYPE_VARIABLES;", "-\t\t\tchar[] methodDescriptor = binaryType.getEnclosingMethod();", "-\t\t\tif (methodDescriptor != null) {", "-\t\t\t\tMethodBinding enclosingMethod = findMethod(methodDescriptor, missingTypeNames);", "-\t\t\t\tif (enclosingMethod != null) {", "-\t\t\t\t\ttypeVars = enclosingMethod.typeVariables;", "-\t\t\t\t}", "-\t\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86cb36b3b918fe39913966d804f4615", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate int parameterCompatibilityLevel18(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods, InvocationSite site)", "signatureAfterChange": "  \tprivate int parameterCompatibilityLevel18(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods, InvocationSite site)", "diff": ["-\t\t\t\tif (infCtx != null)", "-\t\t\t\t\treturn COMPATIBLE; // inference is responsible, no need to recheck", "+\t\t\t\tif (infCtx != null) {", "+\t\t\t\t\t// inference is responsible, no need to recheck", "+\t\t\t\t\tif (infCtx.isVarArgs())", "+\t\t\t\t\t\treturn VARARGS_COMPATIBLE;", "+\t\t\t\t\treturn COMPATIBLE;", "+\t\t\t\t}", "-\t\t\t\t\t\t\tif (innerBinding instanceof ParameterizedGenericMethodBinding) { // FIXME: does this happen?", "-\t\t\t\t\t\t\t\tInferenceContext18 infCtx18 = innerPoly.getInferenceContext((ParameterizedGenericMethodBinding) innerBinding);", "-\t\t\t\t\t\t\t\tif (infCtx18 != null) {", "+\t\t\t\t\t\t\tif (innerBinding instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\t\t\t\t\tParameterizedGenericMethodBinding innerParameterized = (ParameterizedGenericMethodBinding) innerBinding;", "+\t\t\t\t\t\t\t\tInferenceContext18 infCtx18 = innerPoly.getInferenceContext(innerParameterized);", "+\t\t\t\t\t\t\t\tif (infCtx18 != null && !infCtx18.hasFinished) {", "-\t\t\t\t\t\t\t\t\tMethodBinding solution = infCtx18.getInvocationTypeInferenceSolution(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinnerPoly.binding().original(), innerPoly, targetType);", "-\t\t\t\t\t\t\t\t\tif (solution != null) {", "+\t\t\t\t\t\t\t\t\tinvocArg.setExpectedType(targetType);", "+\t\t\t\t\t\t\t\t\tMethodBinding solution = infCtx18.inferInvocationType(innerPoly, innerParameterized);", "+\t\t\t\t\t\t\t\t\tif (solution != null && solution.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\t\tinnerPoly.updateBindings(solution);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tMethodBinding problemMethod = infCtx18.getReturnProblemMethodIfNeeded(targetType, innerPoly.binding());", "-\t\t\t\t\t\t\t\t\t\tif (problemMethod != null && problemMethod.isValidBinding())", "-\t\t\t\t\t\t\t\t\t\t\treturn COMPATIBLE;", "-\t\t\t\t\t\t\t\t\t\treturn NOT_COMPATIBLE;", "+\t\t\t\t\t\t\t\t\treturn NOT_COMPATIBLE;"]}], "num": 5132}
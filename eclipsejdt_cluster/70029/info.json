{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d08d3cb68bd2bdd2963df33b5fb7eb6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bf4be1bb22c7ed28cab6fec2007e10f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "diff": ["-\tif (severity == Ignore)", "+\tif (severity == ProblemSeverities.Ignore)", "-\t\tif ((severity & Error) != 0) { // non reportable error is fatal", "+\t\tif ((severity & ProblemSeverities.Error) != 0) { // non reportable error is fatal", "-\t\t\tproblemEndPosition, ", "+\t\t\tproblemEndPosition,", "-\tswitch (severity & Error) {", "-\t\tcase Error :", "+\tswitch (severity & ProblemSeverities.Error) {", "+\t\tcase ProblemSeverities.Error :", "-\t\t\treferenceContext.tagAsHavingErrors();", "-", "-\t\t\t// should abort ?", "-\t\t\tint abortLevel;", "-\t\t\tif ((abortLevel = ", "-\t\t\t\t(this.policy.stopOnFirstError() ? AbortCompilation : severity & Abort)) != 0) {", "-", "-\t\t\t\treferenceContext.abort(abortLevel, problem);", "+\t\t\tif ((severity & ProblemSeverities.Optional) == 0 || options.treatOptionalErrorAsFatal) {", "+\t\t\t\treferenceContext.tagAsHavingErrors();", "+\t\t\t\t// should abort ?", "+\t\t\t\tint abortLevel;", "+\t\t\t\tif ((abortLevel = \tthis.policy.stopOnFirstError() ? ProblemSeverities.AbortCompilation : severity & ProblemSeverities.Abort) != 0) {", "+\t\t\t\t\treferenceContext.abort(abortLevel, problem);", "+\t\t\t\t}", "-\t\tcase Warning :", "+\t\tcase ProblemSeverities.Warning :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91000b914288c54d67b63aa2a6e32e1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "29fd5c339634157c3a46bf2c80db8e6f9d9b60e5", "commitAfterChange": "d3bee7a6e680032a04efee0140f4fd7a408a0f76", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["+\t\t\tint severity = computeSeverity(IProblem.JavadocGenericConstructorTypeArgumentMismatch);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "-\t\t\tif (shownConstructor.typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\tboolean noTypeVariables = shownConstructor.typeVariables == Binding.NO_TYPE_VARIABLES;", "+\t\t\tseverity = computeSeverity(noTypeVariables ? IProblem.JavadocNonGenericConstructor : IProblem.JavadocIncorrectArityForParameterizedConstructor);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\tif (noTypeVariables) {", "+\t\t\t\t\tseverity,", "-\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedConstructor  ,", "+\t\t\t\t\tIProblem.JavadocIncorrectArityForParameterizedConstructor,", "+\t\t\t\t\tseverity,", "+\t\t\tseverity = computeSeverity(IProblem.JavadocParameterizedConstructorArgumentTypeMismatch);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "+\t\t\tseverity = computeSeverity(IProblem.JavadocTypeArgumentsForRawGenericConstructor);", "+\t\t\tif (severity == ProblemSeverities.Ignore) return;", "+\t\t\t\tseverity,", "+\tint severity = computeSeverity(id);", "+\tif (severity == ProblemSeverities.Ignore) return;", "+\t\tseverity,"]}], "num": 70029}
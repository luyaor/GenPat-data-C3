{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "103ee6c3e70019a60dc534ee2994b9a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49fe3bb9bd8a04c45f12e7ec983cec1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 2, "signatureBeforeChange": " boolean isReturnTypeSubstituable(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["+boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo) {", "+\tif (one.returnType == substituteTwo.returnType) return true;", "+\t// methods from classes are always before methods from interfaces", "+\tif (one.declaringClass.isClass() || one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "+\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "+", "+\tif (substituteTwo.declaringClass.implementsInterface(one.declaringClass, true))", "+\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "+", "+\t// unrelated interfaces... one must be a subtype of the other", "+\treturn one.returnType.isCompatibleWith(substituteTwo.returnType)", "+\t\t|| substituteTwo.returnType.isCompatibleWith(one.returnType);", "+}", "-boolean isReturnTypeSubstituable(MethodBinding one, MethodBinding two) {", "-\tif (one.returnType == two.returnType) return true;", "-", "-\treturn isTypeSubstituable(one.returnType.erasure(), two.returnType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc619777322a858364fd0df9a564f7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeAttribute.java", "commitBeforeChange": "b1ab6b38529c7af56aca18b28a5c75b3ae110a9d", "commitAfterChange": "69ebb002290d01fbdea2fb4a8ac49ef1b7a14ba9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void traverse(IBytecodeVisitor visitor) throws ClassFormatException", "signatureAfterChange": " \tpublic void traverse(IBytecodeVisitor visitor) throws ClassFormatException", "diff": ["+\t\t\t\tcase IOpcodeMnemonics.INVOKEDYNAMIC :", "+\t\t\t\t\tindex = u2At(this.classFileBytes, 1, pc);", "+\t\t\t\t\tconstantPoolEntry = this.constantPool.decodeEntry(index);", "+\t\t\t\t\tif (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_NameAndType) {", "+\t\t\t\t\t\tthrow new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);", "+\t\t\t\t\t}", "+\t\t\t\t\tvisitor._invokedynamic(", "+\t\t\t\t\t\t\tpc - this.codeOffset,", "+\t\t\t\t\t\t\tindex,", "+\t\t\t\t\t\t\tthis.constantPool.decodeEntry(constantPoolEntry.getNameAndTypeInfoNameIndex()),", "+\t\t\t\t\t\t\tthis.constantPool.decodeEntry(constantPoolEntry.getNameAndTypeInfoDescriptorIndex()));", "+\t\t\t\t\tpc += 5;", "+\t\t\t\t\tbreak;"]}], "num": 47109}
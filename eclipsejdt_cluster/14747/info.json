{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51758e7a1e4c924d2736456c6d8ba2f9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdd36eafe30519e99af02098ed43d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "commitAfterChange": "a460dab1d90a50493c5778c6266a2505ebe8bca6", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, boolean newIsCleaning, IClasspathEntry[] otherClasspathWithOutput) \t\tthrows JavaModelException", "diff": ["-\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput)", "+\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, boolean newIsCleaning, IClasspathEntry[] otherClasspathWithOutput)", "-\t\t\t\tif (otherClasspathWithOutput[length - 1].getContentKind()", "-\t\t\t\t\t== ClasspathEntry.K_OUTPUT", "-\t\t\t\t\t&& otherClasspathWithOutput[length - 1].getPath().equals(newOutputLocation))", "+\t\t\t\tIClasspathEntry output = otherClasspathWithOutput[length - 1];", "+\t\t\t\tif (output.getContentKind() == ClasspathEntry.K_OUTPUT", "+\t\t\t\t\t\t&& output.getPath().equals(newOutputLocation)", "+\t\t\t\t\t\t&& output.isCleaningOutputLocation() == newIsCleaning)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d82c20628cedb6745d24b5f54d3c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] otherClasspathWithOutput)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput)\r \t\tthrows JavaModelException", "diff": ["-\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] otherClasspathWithOutput)\r", "+\tpublic boolean isClasspathEqualsTo(IClasspathEntry[] newClasspath, IPath newOutputLocation, IClasspathEntry[] otherClasspathWithOutput)\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\t\tif (length == classpath.length + 1) {\r", "+\t\t\tif (length == newClasspath.length + 1) {\r", "-\t\t\t\t\tif (!otherClasspathWithOutput[i].equals(classpath[i]))\r", "+\t\t\t\t\tif (!otherClasspathWithOutput[i].equals(newClasspath[i]))\r", "-\t\t\t\t\t&& otherClasspathWithOutput[length - 1].getPath().equals(getOutputLocation()))\r", "+\t\t\t\t\t&& otherClasspathWithOutput[length - 1].getPath().equals(newOutputLocation))\r"]}], "num": 14747}
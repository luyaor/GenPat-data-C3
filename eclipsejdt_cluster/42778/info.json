{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adfeb3d0fc0c32d22a11b8fa805e8ecf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54cf1c371ed1944edb1282d23cd535bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "d469b28de67962080fcf567963cfa5517cd349da", "commitAfterChange": "20f9fdf8e5fe334d703ee621f62802a5f3f84198", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tprivate int generateRuntimeAnnotationsForParameters(Argument[] arguments)", "signatureAfterChange": " \t \tprivate int generateRuntimeAnnotationsForParameters(Argument[] arguments)", "diff": ["+\t\t\t\t\tlong annotationMask = annotation.resolvedType != null ? annotation.resolvedType.getAnnotationTagBits() & TagBits.AnnotationTargetMASK : 0;", "+\t\t\t\t\tif (annotationMask != 0 && (annotationMask & TagBits.AnnotationForParameter) == 0) continue;", "+\t\t\t\t\t\t\tlong annotationMask = annotation.resolvedType != null ? annotation.resolvedType.getAnnotationTagBits() & TagBits.AnnotationTargetMASK : 0;", "+\t\t\t\t\t\t\tif (annotationMask != 0 && (annotationMask & TagBits.AnnotationForParameter) == 0) continue;", "+\t\t\t\t\t\t\tlong annotationMask = annotation.resolvedType != null ? annotation.resolvedType.getAnnotationTagBits() & TagBits.AnnotationTargetMASK : 0;", "+\t\t\t\t\t\t\tif (annotationMask != 0 && (annotationMask & TagBits.AnnotationForParameter) == 0) continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f0f9ad8db06958bfbc56e93824109b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "d469b28de67962080fcf567963cfa5517cd349da", "commitAfterChange": "20f9fdf8e5fe334d703ee621f62802a5f3f84198", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final boolean includeTypeUseAnnotations)", "signatureAfterChange": " \tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final long targetMask)", "diff": ["-\tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final boolean includeTypeUseAnnotations) {", "+\tprivate int generateRuntimeAnnotations(final Annotation[] annotations, final long targetMask) {", "-\t\t\tif (annotation.isRuntimeInvisible() || (includeTypeUseAnnotations && annotation.isRuntimeTypeInvisible())) {", "+\t\t\tlong annotationMask = annotation.resolvedType != null ? annotation.resolvedType.getAnnotationTagBits() & TagBits.AnnotationTargetMASK : 0;", "+\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) continue;", "+\t\t\tif (annotation.isRuntimeInvisible() || annotation.isRuntimeTypeInvisible()) {", "-\t\t\t} else if (annotation.isRuntimeVisible() || (includeTypeUseAnnotations && annotation.isRuntimeTypeVisible())) {", "+\t\t\t} else if (annotation.isRuntimeVisible() || annotation.isRuntimeTypeVisible()) {", "-\t\t\t\tif (annotation.isRuntimeInvisible() || ", "-\t\t\t\t\t\t// No need to explicitly check it is type_use and not type_parameter, ", "-\t\t\t\t\t\t// that will already have been checked", "-\t\t\t\t\t\t(includeTypeUseAnnotations && annotation.isRuntimeTypeInvisible())) {", "+\t\t\t\tlong annotationMask = annotation.resolvedType != null ? annotation.resolvedType.getAnnotationTagBits() & TagBits.AnnotationTargetMASK : 0;", "+\t\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) continue;", "+\t\t\t\tif (annotation.isRuntimeInvisible() || annotation.isRuntimeTypeInvisible()) {", "-\t\t\t\tif (annotation.isRuntimeVisible() || ", "-\t\t\t\t\t// No need to explicitly check it is type_use and not type_parameter, ", "-\t\t\t\t\t// that will already have been checked", "-\t\t\t\t\t(includeTypeUseAnnotations && annotation.isRuntimeTypeVisible())) {", "+\t\t\t\tlong annotationMask = annotation.resolvedType != null ? annotation.resolvedType.getAnnotationTagBits() & TagBits.AnnotationTargetMASK : 0;", "+\t\t\t\tif (annotationMask != 0 && (annotationMask & targetMask) == 0) continue;", "+\t\t\t\tif (annotation.isRuntimeVisible() || annotation.isRuntimeTypeVisible()) {"]}], "num": 42778}
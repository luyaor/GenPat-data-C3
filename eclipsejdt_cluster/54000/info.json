{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1709475bc41ddfb48e84a10b3eada13f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8f6f3616a4fb14422be1eec1a63f81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "717a44c6b6c761be0c48243cde9dff6857a6db32", "commitAfterChange": "df9941361641a347d1ba4ee80fe7f9c7468ba17a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "\r \r \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\tif (!hasBeenResolved && binding != null && binding.isValidBinding()) {\r", "-\t\t\thasBeenResolved = true;\r", "-\t\t\tif (isTypeUseDeprecated(binding.type, initializationScope))\r", "-\t\t\t\tinitializationScope.problemReporter().deprecatedType(binding.type, type);\r", "+\t\tif (!this.hasBeenResolved && binding != null && this.binding.isValidBinding()) {\r", "+\r", "+\t\t\tthis.hasBeenResolved = true;\r", "+\r", "+\t\t\tif (isTypeUseDeprecated(this.binding.type, initializationScope))\r", "+\t\t\t\tinitializationScope.problemReporter().deprecatedType(this.binding.type, this.type);\r", "-\t\t\tif (initialization == null) {\r", "-\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "+\t\t\tif (this.initialization == null) {\r", "+\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r", "-\t\t\t\t// break dead-lock cycles by forcing constant to NotAConstant\r", "-\t\t\t\t\tinitializationScope.fieldDeclarationIndex = binding.id;\r", "-\t\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "-\t\t\t\t\tTypeBinding tb = binding.type;\r", "-\t\t\t\t\tTypeBinding initTb;\r", "+\t\t\t\t\tinitializationScope.fieldDeclarationIndex = this.binding.id;\r", "+\r", "+\t\t\t\t\t// break dead-lock cycles by forcing constant to NotAConstant\r", "+\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tTypeBinding typeBinding = this.binding.type;\r", "+\t\t\t\t\tTypeBinding initializationTypeBinding;\r", "+\t\t\t\t\t\r", "-\t\t\t\t\t\tif ((initTb = initialization.resolveTypeExpecting(initializationScope, tb))\r", "-\t\t\t\t\t\t\t!= null) {\r", "-\t\t\t\t\t\t\t((ArrayInitializer) initialization).binding = (ArrayBinding) initTb;\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "+\r", "+\t\t\t\t\t\tif ((initializationTypeBinding = this.initialization.resolveTypeExpecting(initializationScope, typeBinding)) \t!= null) {\r", "+\t\t\t\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationTypeBinding;\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "-\t\t\t\t\t} else if (\r", "-\t\t\t\t\t\t(initTb = initialization.resolveType(initializationScope)) != null) {\r", "-\t\t\t\t\t\tif (initialization.isConstantValueOfTypeAssignableToType(initTb, tb)\r", "-\t\t\t\t\t\t\t|| (tb.isBaseType() && BaseTypeBinding.isWidening(tb.id, initTb.id)))\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "-\t\t\t\t\t\telse if (initializationScope.areTypesCompatible(initTb, tb))\r", "-\t\t\t\t\t\t\tinitialization.implicitWidening(tb, initTb);\r", "-\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initTb, tb, this);\r", "-\t\t\t\t\t\tif (binding.isFinal()) // cast from constant actual type to variable type\r", "-\t\t\t\t\t\t\tbinding.constant =\r", "-\t\t\t\t\t\t\t\tinitialization.constant.castTo(\r", "-\t\t\t\t\t\t\t\t\t(binding.type.id << 4) + initialization.constant.typeID());\r", "+\t\t\t\t\t} else if ((initializationTypeBinding = initialization.resolveType(initializationScope)) != null) {\r", "+\r", "+\t\t\t\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationTypeBinding, typeBinding)\r", "+\t\t\t\t\t\t\t|| (typeBinding.isBaseType() && BaseTypeBinding.isWidening(typeBinding.id, initializationTypeBinding.id))) {\r", "+\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "+\r", "+\t\t\t\t\t\t}\telse if (initializationScope.areTypesCompatible(initializationTypeBinding, typeBinding)) {\r", "+\t\t\t\t\t\t\tthis.initialization.implicitWidening(typeBinding, initializationTypeBinding);\r", "+\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationTypeBinding, typeBinding, this);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (this.binding.isFinal()){ // cast from constant actual type to variable type\r", "+\t\t\t\t\t\t\tthis.binding.constant =\r", "+\t\t\t\t\t\t\t\tthis.initialization.constant.castTo(\r", "+\t\t\t\t\t\t\t\t\t(this.binding.type.id << 4) + this.initialization.constant.typeID());\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbinding.constant = NotAConstant;\r", "+\t\t\t\t\t\tthis.binding.constant = NotAConstant;\r", "-\t\t\t\t\tif (binding.constant == null)\r", "-\t\t\t\t\t\tbinding.constant = Constant.NotAConstant;\r", "+\t\t\t\t\tif (this.binding.constant == null)\r", "+\t\t\t\t\t\tthis.binding.constant = Constant.NotAConstant;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea989e420bf950cb83f1b3f475475ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tconstant = NotAConstant;", "-\tthis.resolvedType = type.resolveType(scope); // will check for null after args are resolved", "+\tthis.constant = NotAConstant;", "+\tthis.resolvedType = this.type.resolveType(scope); // will check for null after args are resolved", "-\tif (arguments != null) {", "+\tif (this.arguments != null) {", "-\t\tint length = arguments.length;", "+\t\tint length = this.arguments.length;", "-\t\t\tif ((argumentTypes[i] = arguments[i].resolveType(scope)) == null) {", "+\t\t\tif ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null) {", "-\t\tscope.problemReporter().cannotInstantiate(type, this.resolvedType);", "+\t\tscope.problemReporter().cannotInstantiate(this.type, this.resolvedType);", "-\tif (!(binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {", "-\t\tif (binding instanceof ProblemMethodBinding", "-\t\t\t&& ((ProblemMethodBinding) binding).problemId() == NotVisible) {", "+\tif (!(this.binding = scope.getConstructor(allocatedType, argumentTypes, this)).isValidBinding()) {", "+\t\tif (this.binding instanceof ProblemMethodBinding", "+\t\t\t&& ((ProblemMethodBinding) this.binding).problemId() == NotVisible) {", "-\t\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\t\tif (delegateThis == null) {", "-\t\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\t\tif (this.delegateThis == null) {", "+\t\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)delegateThis.type, argumentTypes, this);", "+\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)this.delegateThis.type, argumentTypes, this);", "-\t\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t\t\tbinding = privateBinding;", "+\t\t\t\tthis.binding = privateBinding;", "-\t\t\tif (binding.declaringClass == null) {", "-\t\t\t\tbinding.declaringClass = allocatedType;", "+\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\tthis.binding.declaringClass = allocatedType;", "-\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\tif (arguments != null) {", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "+\tif (this.arguments != null) {", "+\t\tfor (int i = 0; i < this.arguments.length; i++) {", "+\t\t\tthis.arguments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33eeb215908db84f42c32b1ab21d7054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\tif (binding.canBeSeenBy(receiverType, this, currentScope)) {", "+\tif (this.binding.canBeSeenBy(this.receiverType, this, currentScope)) {", "-\t\tboolean isStatic = binding.isStatic();", "+\t\tboolean isStatic = this.binding.isStatic();", "-\t\tif (!isStatic && ((bits & DepthMASK) != 0)) {", "+\t\tif (!isStatic && ((this.bits & DepthMASK) != 0)) {", "-\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "+\t\tif (this.arguments != null) {", "+\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "-\t\t\tcodeStream.invokestatic(binding);", "+\t\t\tcodeStream.invokestatic(this.binding);", "-\t\t\tif (receiver.isSuper()) {", "-\t\t\t\tcodeStream.invokespecial(binding);", "+\t\t\tif (this.receiver.isSuper()) {", "+\t\t\t\tcodeStream.invokespecial(this.binding);", "-\t\t\t\tif (binding.declaringClass.isInterface()) {", "-\t\t\t\t\tcodeStream.invokeinterface(binding);", "+\t\t\t\tif (this.binding.declaringClass.isInterface()) {", "+\t\t\t\t\tcodeStream.invokeinterface(this.binding);", "-\t\t\t\t\tcodeStream.invokevirtual(binding);", "+\t\t\t\t\tcodeStream.invokevirtual(this.binding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, this.binding);", "-\t\tboolean isStatic = binding.isStatic();", "+\t\tboolean isStatic = this.binding.isStatic();", "-\t\tif (!isStatic && ((bits & DepthMASK) != 0)) {", "+\t\tif (!isStatic && ((this.bits & DepthMASK) != 0)) {", "-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\tif (arguments != null) {", "-\t\t\tint argsLength = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint argsLength = this.arguments.length;", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\tTypeBinding parameterBinding = binding.parameters[i];", "+\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "+\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);", "-\t\tif (binding.returnType.isBaseType()) {", "-\t\t\tint typeID = binding.returnType.id;", "+\t\tif (this.binding.returnType.isBaseType()) {", "+\t\t\tint typeID = this.binding.returnType.id;", "-\t\t\tcodeStream.checkcast(binding.returnType);", "+\t\t\tcodeStream.checkcast(this.binding.returnType);", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\tswitch (binding.returnType.id) {", "+\t\tswitch (this.binding.returnType.id) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38648cae5d37087960c11ca729b5e1c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 235, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\tboolean isDietParse = diet;", "+\tboolean isDietParse = this.diet;", "-\thasError = false;", "+\tthis.hasError = false;", "-\thasReportedError = false;", "+\tthis.hasReportedError = false;", "-\tstateStackTop = -1;", "-\tcurrentToken = getFirstToken();", "+\tthis.stateStackTop = -1;", "+\tthis.currentToken = getFirstToken();", "-\t\t\tstack[++stateStackTop] = act;", "+\t\t\tthis.stack[++this.stateStackTop] = act;", "-\t\t\tint oldStackLength = stack.length;", "-\t\t\tint oldStack[] = stack;", "-\t\t\tstack = new int[oldStackLength + StackIncrement];", "-\t\t\tSystem.arraycopy(oldStack, 0, stack, 0, oldStackLength);", "-\t\t\tstack[stateStackTop] = act;", "+\t\t\tint oldStackLength = this.stack.length;", "+\t\t\tint oldStack[] = this.stack;", "+\t\t\tthis.stack = new int[oldStackLength + StackIncrement];", "+\t\t\tSystem.arraycopy(oldStack, 0, this.stack, 0, oldStackLength);", "+\t\t\tthis.stack[this.stateStackTop] = act;", "-\t\tact = tAction(act, currentToken);", "+\t\tact = tAction(act, this.currentToken);", "-\t\tif (act == ERROR_ACTION || restartRecovery) {", "-\t\t\tint errorPos = scanner.currentPosition;", "-\t\t\tif (!hasReportedError){", "-\t\t\t\thasError = true;", "+\t\tif (act == ERROR_ACTION || this.restartRecovery) {", "+\t\t\tint errorPos = this.scanner.currentPosition;", "+\t\t\tif (!this.hasReportedError){", "+\t\t\t\tthis.hasError = true;", "-\t\t\t\tif (act == ERROR_ACTION) lastErrorEndPosition = errorPos;", "+\t\t\t\tif (act == ERROR_ACTION) this.lastErrorEndPosition = errorPos;", "-\t\t\t\t\tstateStackTop = -1;", "-\t\t\t\t\tcurrentToken = getFirstToken();", "+\t\t\t\t\tthis.stateStackTop = -1;", "+\t\t\t\t\tthis.currentToken = getFirstToken();", "-\t\t\t\tstateStackTop--;", "+\t\t\t\tthis.stateStackTop--;", "-\t\t\t\t\tconsumeToken(currentToken);", "-\t\t\t\t\tif (currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\t\tconsumeToken(this.currentToken);", "+\t\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\t\t\tcurrentToken = scanner.getNextToken();", "+\t\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\t\t\tif (!hasReportedError){", "+\t\t\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\t\t\thasReportedError = true;", "+\t\t\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t\t\tlastCheckPoint = scanner.currentPosition;", "-\t\t\t\t\t\trestartRecovery = true;", "+\t\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\t\t\t\tthis.restartRecovery = true;", "-\t\t\t\t\t\tconsumeToken(currentToken);", "-\t\t\t\t\t\tif (currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\t\t\tconsumeToken(this.currentToken);", "+\t\t\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\t\t\t\tcurrentToken = scanner.getNextToken();", "+\t\t\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\t\t\t\tif (!hasReportedError){", "+\t\t\t\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\t\t\t\thasReportedError = true;", "+\t\t\t\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t\t\t\tlastCheckPoint = scanner.currentPosition;", "-\t\t\t\t\t\t\trestartRecovery = true;", "+\t\t\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\t\t\t\t\tthis.restartRecovery = true;", "-\t\t\tstateStackTop -= (rhs[act] - 1);", "-\t\t\tact = ntAction(stack[stateStackTop], lhs[act]);", "+\t\t\tthis.stateStackTop -= (rhs[act] - 1);", "+\t\t\tact = ntAction(this.stack[this.stateStackTop], lhs[act]);", "-\tif(reportSyntaxErrorIsRequired && hasError) {", "+\tif(this.reportSyntaxErrorIsRequired && this.hasError) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a9c72288201c0db8fd3f74f7f02731e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " public void initialize()", "signatureAfterChange": " public void initialize()", "diff": ["-\tastPtr = -1;", "-\tastLengthPtr = -1;", "-\texpressionPtr = -1;", "-\texpressionLengthPtr = -1;", "-\tidentifierPtr = -1;\t", "-\tidentifierLengthPtr\t= -1;", "-\tintPtr = -1;", "-\tnestedMethod[nestedType = 0] = 0; // need to reset for further reuse", "-\tvariablesCounter[nestedType] = 0;", "-\tdimensions = 0 ;", "-\trealBlockPtr = -1;", "-\tcompilationUnit = null;", "-\treferenceContext = null;", "-\tendStatementPosition = 0;", "+\tthis.astPtr = -1;", "+\tthis.astLengthPtr = -1;", "+\tthis.expressionPtr = -1;", "+\tthis.expressionLengthPtr = -1;", "+\tthis.identifierPtr = -1;\t", "+\tthis.identifierLengthPtr\t= -1;", "+\tthis.intPtr = -1;", "+\tthis.nestedMethod[this.nestedType = 0] = 0; // need to reset for further reuse", "+\tthis.variablesCounter[this.nestedType] = 0;", "+\tthis.dimensions = 0 ;", "+\tthis.realBlockPtr = -1;", "+\tthis.compilationUnit = null;", "+\tthis.referenceContext = null;", "+\tthis.endStatementPosition = 0;", "-\tint astLength = astStack.length;", "-\tif (noAstNodes.length < astLength){", "-\t\tnoAstNodes = new ASTNode[astLength];", "+\tint astLength = this.astStack.length;", "+\tif (this.noAstNodes.length < astLength){", "+\t\tthis.noAstNodes = new ASTNode[astLength];", "-\tSystem.arraycopy(noAstNodes, 0, astStack, 0, astLength);", "+\tSystem.arraycopy(this.noAstNodes, 0, this.astStack, 0, astLength);", "-\tint expressionLength = expressionStack.length;", "-\tif (noExpressions.length < expressionLength){", "-\t\tnoExpressions = new Expression[expressionLength];", "+\tint expressionLength = this.expressionStack.length;", "+\tif (this.noExpressions.length < expressionLength){", "+\t\tthis.noExpressions = new Expression[expressionLength];", "-\tSystem.arraycopy(noExpressions, 0, expressionStack, 0, expressionLength);", "+\tSystem.arraycopy(this.noExpressions, 0, this.expressionStack, 0, expressionLength);", "-\tscanner.commentPtr = -1;", "-\tscanner.foundTaskCount = 0;", "-\tscanner.eofPosition = Integer.MAX_VALUE;", "-\tscanner.wasNonExternalizedStringLiteral = false;", "-\tscanner.nonNLSStrings = null;", "-\tscanner.currentLine = null;\t", "+\tthis.scanner.commentPtr = -1;", "+\tthis.scanner.foundTaskCount = 0;", "+\tthis.scanner.eofPosition = Integer.MAX_VALUE;", "+\tthis.scanner.wasNonExternalizedStringLiteral = false;", "+\tthis.scanner.nonNLSStrings = null;", "+\tthis.scanner.currentLine = null;\t", "-\tlastCheckPoint = -1;", "-\tcurrentElement = null;", "-\trestartRecovery = false;", "-\thasReportedError = false;", "-\trecoveredStaticInitializerStart = 0;", "-\tlastIgnoredToken = -1;", "-\tlastErrorEndPosition = -1;", "-\tlistLength = 0;", "+\tthis.lastCheckPoint = -1;", "+\tthis.currentElement = null;", "+\tthis.restartRecovery = false;", "+\tthis.hasReportedError = false;", "+\tthis.recoveredStaticInitializerStart = 0;", "+\tthis.lastIgnoredToken = -1;", "+\tthis.lastErrorEndPosition = -1;", "+\tthis.listLength = 0;", "-\trBraceStart = 0;", "-\trBraceEnd = 0;", "-\trBraceSuccessorStart = 0;", "+\tthis.rBraceStart = 0;", "+\tthis.rBraceEnd = 0;", "+\tthis.rBraceSuccessorStart = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69689928c5a4b99c70536bd78537aa31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["-\tlastCheckPoint = 0;", "+\tthis.lastCheckPoint = 0;", "-\tif (referenceContext instanceof CompilationUnitDeclaration){", "-\t\telement = new RecoveredUnit(compilationUnit, 0, this);", "+\tif (this.referenceContext instanceof CompilationUnitDeclaration){", "+\t\telement = new RecoveredUnit(this.compilationUnit, 0, this);", "-\t\t\tcompilationUnit.currentPackage = null;", "-\t\t\tcompilationUnit.imports = null;", "-\t\t\tcompilationUnit.types = null;", "-\t\t\tcurrentToken = 0;", "-\t\t\tlistLength = 0;", "-\t\t\tendPosition = 0;", "-\t\t\tendStatementPosition = 0;", "+\t\t\tthis.compilationUnit.currentPackage = null;", "+\t\t\tthis.compilationUnit.imports = null;", "+\t\t\tthis.compilationUnit.types = null;", "+\t\t\tthis.currentToken = 0;", "+\t\t\tthis.listLength = 0;", "+\t\t\tthis.endPosition = 0;", "+\t\t\tthis.endStatementPosition = 0;", "-\t\tif (compilationUnit.currentPackage != null){", "-\t\t\tlastCheckPoint = compilationUnit.currentPackage.declarationSourceEnd+1;", "+\t\tif (this.compilationUnit.currentPackage != null){", "+\t\t\tthis.lastCheckPoint = this.compilationUnit.currentPackage.declarationSourceEnd+1;", "-\t\tif (compilationUnit.imports != null){", "-\t\t\tlastCheckPoint = compilationUnit.imports[compilationUnit.imports.length -1].declarationSourceEnd+1;\t\t", "+\t\tif (this.compilationUnit.imports != null){", "+\t\t\tthis.lastCheckPoint = this.compilationUnit.imports[this.compilationUnit.imports.length -1].declarationSourceEnd+1;\t\t", "-\t\tif (referenceContext instanceof AbstractMethodDeclaration){", "-\t\t\telement = new RecoveredMethod((AbstractMethodDeclaration) referenceContext, null, 0, this);", "-\t\t\tlastCheckPoint = ((AbstractMethodDeclaration) referenceContext).bodyStart;", "+\t\tif (this.referenceContext instanceof AbstractMethodDeclaration){", "+\t\t\telement = new RecoveredMethod((AbstractMethodDeclaration) this.referenceContext, null, 0, this);", "+\t\t\tthis.lastCheckPoint = ((AbstractMethodDeclaration) this.referenceContext).bodyStart;", "-\t\t\tif (referenceContext instanceof TypeDeclaration){", "-\t\t\t\tTypeDeclaration type = (TypeDeclaration) referenceContext;", "+\t\t\tif (this.referenceContext instanceof TypeDeclaration){", "+\t\t\t\tTypeDeclaration type = (TypeDeclaration) this.referenceContext;", "-\t\t\t\t\t\t&& field.declarationSourceStart <= scanner.initialPosition", "-\t\t\t\t\t\t&& scanner.initialPosition <= field.declarationSourceEnd", "-\t\t\t\t\t\t&& scanner.eofPosition <= field.declarationSourceEnd+1){", "+\t\t\t\t\t\t&& field.declarationSourceStart <= this.scanner.initialPosition", "+\t\t\t\t\t\t&& this.scanner.initialPosition <= field.declarationSourceEnd", "+\t\t\t\t\t\t&& this.scanner.eofPosition <= field.declarationSourceEnd+1){", "-\t\t\t\t\t\tlastCheckPoint = field.declarationSourceStart;\t\t\t\t\t", "+\t\t\t\t\t\tthis.lastCheckPoint = field.declarationSourceStart;\t\t\t\t\t", "-\tfor(int i = 0; i <= astPtr; i++){", "-\t\tASTNode node = astStack[i];", "+\tfor(int i = 0; i <= this.astPtr; i++){", "+\t\tASTNode node = this.astStack[i];", "-\t\t\t\tlastCheckPoint = method.bodyStart;", "+\t\t\t\tthis.lastCheckPoint = method.bodyStart;", "-\t\t\t\tlastCheckPoint = method.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = method.declarationSourceEnd + 1;", "-\t\t\t\tlastCheckPoint = initializer.sourceStart;\t\t\t\t", "+\t\t\t\tthis.lastCheckPoint = initializer.sourceStart;\t\t\t\t", "-\t\t\t\tlastCheckPoint = initializer.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = initializer.declarationSourceEnd + 1;", "-\t\t\t\t\tlastCheckPoint = field.sourceEnd + 1;", "+\t\t\t\t\tthis.lastCheckPoint = field.sourceEnd + 1;", "-\t\t\t\t\tlastCheckPoint = field.initialization.sourceEnd + 1;", "+\t\t\t\t\tthis.lastCheckPoint = field.initialization.sourceEnd + 1;", "-\t\t\t\tlastCheckPoint = field.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = field.declarationSourceEnd + 1;", "-\t\t\t\tlastCheckPoint = type.bodyStart;", "+\t\t\t\tthis.lastCheckPoint = type.bodyStart;", "-\t\t\t\tlastCheckPoint = type.declarationSourceEnd + 1;", "+\t\t\t\tthis.lastCheckPoint = type.declarationSourceEnd + 1;", "-\t\t\tlastCheckPoint = importRef.declarationSourceEnd + 1;", "+\t\t\tthis.lastCheckPoint = importRef.declarationSourceEnd + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b60cb827a86a150c87caed13c1574f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = Constant.NotAConstant;", "+\t\tthis.constant = Constant.NotAConstant;", "-\t\tif (enclosingInstance != null) {", "-\t\t\tif (enclosingInstance instanceof CastExpression) {", "-\t\t\t\tenclosingInstance.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\tif (this.enclosingInstance != null) {", "+\t\t\tif (this.enclosingInstance instanceof CastExpression) {", "+\t\t\t\tthis.enclosingInstance.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\tif ((enclosingInstanceType = enclosingInstance.resolveType(scope)) == null){", "+\t\t\tif ((enclosingInstanceType = this.enclosingInstance.resolveType(scope)) == null){", "-\t\t\t\t\tenclosingInstance);", "+\t\t\t\t\tthis.enclosingInstance);", "-\t\t\t} else if (type instanceof QualifiedTypeReference) {", "-\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)type);", "+\t\t\t} else if (this.type instanceof QualifiedTypeReference) {", "+\t\t\t\tscope.problemReporter().illegalUsageOfQualifiedTypeReference((QualifiedTypeReference)this.type);", "-\t\t\t\treceiverType = ((SingleTypeReference) type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "+\t\t\t\treceiverType = ((SingleTypeReference) this.type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingInstanceType);", "-\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "+\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, this.enclosingInstance, enclosingInstanceType, receiverType);", "-\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(this.type, receiverType);", "-\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\tif (arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\t\t\targument.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\t\tif (isMethodUseDeprecated(binding, scope, true)) {", "+\t\t\t\tif (isMethodUseDeprecated(this.binding, scope, true)) {", "-\t\t\t\tcheckInvocationArguments(scope, null, allocationType, binding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "-\t\t\t\tenclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "+\t\t\t\tthis.enclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "-\t\t} else if (type != null && receiverType.isEnum()) { // tolerate enum constant body", "-\t\t\tscope.problemReporter().cannotInstantiate(type, receiverType);", "+\t\t} else if (this.type != null && receiverType.isEnum()) { // tolerate enum constant body", "+\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\tif (this.superTypeBinding.erasure().id == T_JavaLangEnum) {", "+\t\tif (this.superTypeBinding.erasure().id == TypeIds.T_JavaLangEnum) {", "-\t\t\tscope.problemReporter().superTypeCannotUseWildcard(anonymousType.binding, this.type, receiverType);", "+\t\t\tscope.problemReporter().superTypeCannotUseWildcard(this.anonymousType.binding, this.type, receiverType);", "-\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\tif (enclosingInstance != null) {", "+\t\tif (this.enclosingInstance != null) {", "-\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(enclosingInstance, (ReferenceBinding)receiverType);", "-\t\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, (ReferenceBinding)receiverType);", "+\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, targetEnclosing, enclosingInstance);", "-\t\t\t\treturn this.resolvedType = anonymousType.binding;", "+\t\t\t\tscope.problemReporter().typeMismatchError(enclosingInstanceType, targetEnclosing, this.enclosingInstance);", "+\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "-\t\t\tenclosingInstance.computeConversion(scope, targetEnclosing, enclosingInstanceType);", "+\t\t\tthis.enclosingInstance.computeConversion(scope, targetEnclosing, enclosingInstanceType);", "-\t\tbinding = anonymousType.createDefaultConstructorWithBinding(inheritedBinding);", "-\t\treturn this.resolvedType = anonymousType.binding; // 1.2 change", "+\t\tthis.binding = this.anonymousType.createDefaultConstructorWithBinding(inheritedBinding);", "+\t\treturn this.resolvedType = this.anonymousType.binding; // 1.2 change"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac978ec5b21c132a564be1a560a57c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\tif (binding == null) {", "-\t\t\tignoreFurtherInvestigation = true;", "+\t\tif (this.binding == null) {", "+\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\tif (binding.superclass != null) // watch out for Object ! (and other roots)\t", "-\t\t\t\tif (isTypeUseDeprecated(binding.superclass, scope))", "-\t\t\t\t\tscope.problemReporter().deprecatedType(binding.superclass, superclass);", "-\t\t\tif (superInterfaces != null)", "-\t\t\t\tfor (int i = superInterfaces.length; --i >= 0;)", "-\t\t\t\t\tif (superInterfaces[i].resolvedType != null)", "-\t\t\t\t\t\tif (isTypeUseDeprecated(superInterfaces[i].resolvedType, scope))", "-\t\t\t\t\t\t\tscope.problemReporter().deprecatedType(", "-\t\t\t\t\t\t\t\tsuperInterfaces[i].resolvedType,", "-\t\t\t\t\t\t\t\tsuperInterfaces[i]);", "-\t\t\tmaxFieldCount = 0;", "+\t\t\tif (this.binding.superclass != null) // watch out for Object ! (and other roots)\t", "+\t\t\t\tif (isTypeUseDeprecated(this.binding.superclass, this.scope))", "+\t\t\t\t\tthis.scope.problemReporter().deprecatedType(this.binding.superclass, this.superclass);", "+\t\t\tif (this.superInterfaces != null)", "+\t\t\t\tfor (int i = this.superInterfaces.length; --i >= 0;)", "+\t\t\t\t\tif (this.superInterfaces[i].resolvedType != null)", "+\t\t\t\t\t\tif (isTypeUseDeprecated(this.superInterfaces[i].resolvedType, this.scope))", "+\t\t\t\t\t\t\tthis.scope.problemReporter().deprecatedType(", "+\t\t\t\t\t\t\t\tthis.superInterfaces[i].resolvedType,", "+\t\t\t\t\t\t\t\tthis.superInterfaces[i]);", "+\t\t\tthis.maxFieldCount = 0;", "-\t\t\tif (fields != null) {", "-\t\t\t\tfor (int i = 0, count = fields.length; i < count; i++) {", "-\t\t\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tif (this.fields != null) {", "+\t\t\t\tfor (int i = 0, count = this.fields.length; i < count; i++) {", "+\t\t\t\t\tFieldDeclaration field = this.fields[i];", "-\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? staticInitializerScope : initializerScope);", "-\t\t\t\t\t\t\tignoreFurtherInvestigation = true;", "+\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "+\t\t\t\t\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\t\t\t\tmaxFieldCount++;", "+\t\t\t\t\t\tthis.maxFieldCount++;", "-\t\t\t\t\tfield.resolve(field.isStatic() ? staticInitializerScope : initializerScope);", "+\t\t\t\t\tfield.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "-\t\t\tif (memberTypes != null) {", "-\t\t\t\tfor (int i = 0, count = memberTypes.length; i < count; i++) {", "-\t\t\t\t\tmemberTypes[i].resolve(scope);", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tfor (int i = 0, count = this.memberTypes.length; i < count; i++) {", "+\t\t\t\t\tthis.memberTypes[i].resolve(this.scope);", "-\t\t\tint methodsLength = this.methods == null ? 0 : methods.length;", "+\t\t\tint methodsLength = this.methods == null ? 0 : this.methods.length;", "-\t\t\t\tscope.problemReporter().tooManyMethods(this);", "+\t\t\t\tthis.scope.problemReporter().tooManyMethods(this);", "-\t\t\tif (methods != null) {", "-\t\t\t\tfor (int i = 0, count = methods.length; i < count; i++) {", "-\t\t\t\t\tmethods[i].resolve(scope);", "+\t\t\tif (this.methods != null) {", "+\t\t\t\tfor (int i = 0, count = this.methods.length; i < count; i++) {", "+\t\t\t\t\tthis.methods[i].resolve(this.scope);", "-\t\t\t} else if ((this.binding != null) && this.binding.isPublic()) {", "-\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd);", "+\t\t\t} else if (this.binding != null && !this.binding.isLocalType()) {", "+\t\t\t\tthis.scope.problemReporter().javadocMissing(this.sourceStart, this.sourceEnd, this.binding.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05ca0895db8a3119f87590e0521a52d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["-\t\tif (unitScope != null) {", "+\t\tif (this.unitScope != null) {", "-\t\t\tSourceTypeBinding[] types = unitScope.topLevelTypes;", "+\t\t\tSourceTypeBinding[] types = this.unitScope.topLevelTypes;", "-\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\trequestor.acceptClass(", "+\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\tstartPosition - offset, ", "-\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\tthis.startPosition - this.offset, ", "+\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\trequestor.acceptInterface(", "+\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\t\tstartPosition - offset,", "-\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\tthis.startPosition - this.offset,", "+\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\tif(expectedTypesPtr > -1) {", "-\t\t\t\tnext : for (int i = 0; i <= expectedTypesPtr; i++) {", "-\t\t\t\t\tif(expectedTypes[i] instanceof ReferenceBinding) {", "-\t\t\t\t\t\tReferenceBinding refBinding = (ReferenceBinding)expectedTypes[i];", "-\t\t\t\t\t\tboolean inSameUnit = unitScope.isDefinedInSameUnit(refBinding);", "+\t\t\tif(this.expectedTypesPtr > -1) {", "+\t\t\t\tnext : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\tif(this.expectedTypes[i] instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding refBinding = (ReferenceBinding)this.expectedTypes[i];", "+\t\t\t\t\t\tboolean inSameUnit = this.unitScope.isDefinedInSameUnit(refBinding);", "-\t\t\t\t\t\t\tif (!insideQualifiedReference && !refBinding.isMemberType()) {", "+\t\t\t\t\t\t\tif (!this.insideQualifiedReference && !refBinding.isMemberType()) {", "-\t\t\t\t\t\t\t\t\t\tif (unitScope != null && unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "+\t\t\t\t\t\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\t\t\t\trequestor.acceptClass(", "+\t\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\t\t\t\t\tstartPosition - offset, ", "-\t\t\t\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\t\t\t\tthis.startPosition - this.offset, ", "+\t\t\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\t\t\t\t\t\tnoProposal = false;", "-\t\t\t\t\t\t\t\trequestor.acceptInterface(", "+\t\t\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\t\t\t\t\tstartPosition - offset, ", "-\t\t\t\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\t\t\t\tthis.startPosition - this.offset, ", "+\t\t\t\t\t\t\t\t\tthis.endPosition - this.offset,", "-\t\t\tnameEnvironment.findTypes(token, this);", "-\t\t\tnameEnvironment.findPackages(token, this);", "+\t\t\tthis.nameEnvironment.findTypes(token, this);", "+\t\t\tthis.nameEnvironment.findPackages(token, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da0f5690a35ca1f44dedbd40e62a076c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "commitAfterChange": "2be607e43fb0ccfc2d73541ff7ce26a9dc4cc358", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-        if (bootclasspath != null && bootclasspath.size() != 0) {", "+        if (this.bootclasspath != null && this.bootclasspath.size() != 0) {", "-\t\t\tcmd.createArgument().setPath(bootclasspath);        \t", "+\t\t\tcmd.createArgument().setPath(this.bootclasspath);        \t", "-            includeJavaRuntime = true;", "+            this.includeJavaRuntime = true;", "-        Path classpath = new Path(project);", "+        Path classpath = new Path(this.project);", "-        addExtdirs(extdirs, classpath);", "+        addExtdirs(this.extdirs, classpath);", "-\t\t\t\tcompileSourcePath = (Path) getSourcepathMethod.invoke(attributes, null);", "+\t\t\t\tcompileSourcePath = (Path) getSourcepathMethod.invoke(this.attributes, null);", "-            sourcepath = src;", "+            sourcepath = this.src;", "-        if (memoryInitialSize != null) {", "-            if (!attributes.isForkedJavac()) {", "-                attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+        if (this.memoryInitialSize != null) {", "+            if (!this.attributes.isForkedJavac()) {", "+                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-                                              + \"ms\" + memoryInitialSize); //$NON-NLS-1$", "+                                              + \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "-        if (memoryMaximumSize != null) {", "-            if (!attributes.isForkedJavac()) {", "-                attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+        if (this.memoryMaximumSize != null) {", "+            if (!this.attributes.isForkedJavac()) {", "+                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-                                              + \"mx\" + memoryMaximumSize); //$NON-NLS-1$", "+                                              + \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "-        if (debug) {", "+        if (this.debug) {", "-\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(attributes, null);", "+\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(this.attributes, null);", "-\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(attributes, null);", "+\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(this.attributes, null);", "-\t\t\tif (attributes.getNowarn()) {", "-\t\t\t\tif (deprecation) {", "+\t\t\tif (this.attributes.getNowarn()) {", "+\t\t\t\tif (this.deprecation) {", "-\t\t\t} else if (deprecation) {", "+\t\t\t} else if (this.deprecation) {", "-\t\t\tif (attributes.getNowarn()) {", "-\t\t\t\tif (deprecation) {", "+\t\t\tif (this.attributes.getNowarn()) {", "+\t\t\t\tif (this.deprecation) {", "-\t\t\t\tif (deprecation) {", "+\t\t\t\tif (this.deprecation) {", "-\t\tif (destDir != null) {", "+\t\tif (this.destDir != null) {", "-\t\t\tcmd.createArgument().setFile(destDir.getAbsoluteFile());", "+\t\t\tcmd.createArgument().setFile(this.destDir.getAbsoluteFile());", "-\t\tif (target != null) {", "+\t\tif (this.target != null) {", "-\t\t\tcmd.createArgument().setValue(target);", "+\t\t\tcmd.createArgument().setValue(this.target);", "-\t\tif (verbose) {", "+\t\tif (this.verbose) {", "-\t\t\tlogFileName = destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "-\t\t\tcmd.createArgument().setValue(logFileName);", "+\t\t\tthis.logFileName = this.destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "+\t\t\tcmd.createArgument().setValue(this.logFileName);", "-\t\tif (!attributes.getFailonerror()) {", "+\t\tif (!this.attributes.getFailonerror()) {", "-\t\tString source = attributes.getSource();", "+\t\tString source = this.attributes.getSource();", "-\t\t\tif (target != null && target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "+\t\t\tif (this.target != null && this.target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "-        if (encoding != null) {", "+        if (this.encoding != null) {", "-            cmd.createArgument().setValue(encoding);", "+            cmd.createArgument().setValue(this.encoding);"]}], "num": 54000}
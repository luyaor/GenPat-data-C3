{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ec619519bac47e3d97189e2d96a6549", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "098327d8f6538f04d342316d3097d3a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedResourceChangeListener.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "signatureAfterChange": " \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "diff": ["+\t\tprivate final Set<IProject> _removedProjects = new HashSet<IProject>();", "-\t\t\tIProject project = r.getProject();\t\t", "+\t\t\tIProject project = r.getProject();", "-\t\t\t\tIJavaProject jp = JavaCore.create(project);", "-\t\t\t\tGeneratedFileManager gfm = AptPlugin.getAptProject(jp).getGeneratedFileManager();", "+\t\t\t\tfinal IJavaProject javaProj = JavaCore.create(project);", "+\t\t\t\tfinal GeneratedFileManager gfm = AptPlugin.getAptProject(javaProj).getGeneratedFileManager();", "-\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tIFolder f = (IFolder) r;", "+\t\t\t\t\tIFolder f = (IFolder) r;\t\t\t\t\t", "+\t\t\t\t\t\t// all deletion occurs before any add (adding the generated source directory)", "+\t\t\t\t\t\tif( !_removedProjects.contains(project) ){", "+\t\t\t\t\t\t\t_addGenFolderTo.add(project);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// if the project is already closed or in the process of being", "+\t\t\t\t\t\t// deleted, will ignore this deletion since we cannot correct ", "+\t\t\t\t\t\t// the classpath anyways.", "+\t\t\t\telse if( r instanceof IProject ){\t", "+\t\t\t\t\t_removedProjects.add((IProject)r);", "+\t\t\t\t}", "+\t\t\telse if( r instanceof IProject ){", "+\t\t\t\tfinal IProject proj = (IProject)delta.getResource();\t\t", "+\t\t\t\tif( canUpdate(proj) ){", "+\t\t\t\t\t_addGenFolderTo.add(proj);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\telse", "+\t\t\t\t\t_removedProjects.add(proj);", "+\t\t\t}", "+", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12021c2504e4f388983c1ea5ef2d7626", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "57e4d4c87d35c6ae3978a396ec1884b0ad8efb22", "commitAfterChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "signatureAfterChange": " private boolean isProvablyDistinctTypeArgument(TypeBinding otherArgument, final ParameterizedTypeBinding paramType, final int rank)", "diff": ["-\t\t\t\tCaptureBinding capture = (CaptureBinding) variable;", "-\t\t\t\tswitch (capture.wildcard.boundKind) {", "-\t\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\t\tupperBound1 = capture.wildcard.bound;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\t\tlowerBound1 = capture.wildcard.bound;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\t\treturn false;", "+\t\t\t\tif (variable instanceof CaptureBinding18) {", "+\t\t\t\t\tCaptureBinding18 cb18 = (CaptureBinding18)variable;", "+\t\t\t\t\tupperBound1 = cb18.firstBound;", "+\t\t\t\t\tlowerBound1 = cb18.lowerBound;", "+\t\t\t\t} else {", "+\t\t\t\t\tCaptureBinding capture = (CaptureBinding) variable;", "+\t\t\t\t\tswitch (capture.wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\t\tupperBound1 = capture.wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\t\tlowerBound1 = capture.wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "-\t\t\t\tCaptureBinding otherCapture = (CaptureBinding) otherVariable;", "-\t\t\t\tswitch (otherCapture.wildcard.boundKind) {", "-\t\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\t\tupperBound2 = otherCapture.wildcard.bound;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\t\tlowerBound2 = otherCapture.wildcard.bound;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\t\treturn false;", "+\t\t\t\tif (otherVariable instanceof CaptureBinding18) {", "+\t\t\t\t\tCaptureBinding18 cb18 = (CaptureBinding18)otherVariable;", "+\t\t\t\t\tupperBound2 = cb18.firstBound;", "+\t\t\t\t\tlowerBound2 = cb18.lowerBound;", "+\t\t\t\t} else {", "+\t\t\t\t\tCaptureBinding otherCapture = (CaptureBinding) otherVariable;", "+\t\t\t\t\tswitch (otherCapture.wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\t\tupperBound2 = otherCapture.wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\t\tlowerBound2 = otherCapture.wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e6f2dd1b822cd11f217d09c05e3e5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "37faa38cc90a0ce8882c0b12a17cbeba1ded03bb", "commitAfterChange": "98c65d225c84d420cbb3aaf248ada78383a719f7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tsynchronized ASTNode findDeclaringNode(IBinding binding)", "signatureAfterChange": " \tsynchronized ASTNode findDeclaringNode(IBinding binding)", "diff": ["+\t\tif (binding instanceof IMethodBinding) {", "+\t\t\tIMethodBinding methodBinding = (IMethodBinding) binding;", "+\t\t\treturn (ASTNode) this.bindingsToAstNodes.get(methodBinding.getMethodDeclaration());", "+\t\t} else if (binding instanceof ITypeBinding) {", "+\t\t\tITypeBinding typeBinding = (ITypeBinding) binding;", "+\t\t\treturn (ASTNode) this.bindingsToAstNodes.get(typeBinding.getTypeDeclaration());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c475fc9bf036f1d93a49ab425bd0ea0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "530988a731872b445321868ef3627a37fb897b2a", "commitAfterChange": "56e6ea207731f6d3851d3f932b5a1a8aae6b42f7", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "signatureAfterChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "diff": ["+\t\t} else if (astNode instanceof CompletionOnSingleTypeReference) {", "+\t\t\tCompletionOnSingleTypeReference completionOnSingleTypeReference = (CompletionOnSingleTypeReference) astNode;", "+\t\t\tif (completionOnSingleTypeReference.isConstructorType) {", "+\t\t\t\t\t\tcontext.setTokenLocation(CompletionContext.TL_CONSTRUCTOR_START);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\tCompletionOnQualifiedTypeReference completionOnQualifiedTypeReference = (CompletionOnQualifiedTypeReference) astNode;", "+\t\t\tif (completionOnQualifiedTypeReference.isConstructorType){", "+\t\t\t\t\t\tcontext.setTokenLocation(CompletionContext.TL_CONSTRUCTOR_START);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb812c9f34714b291db63805064e6b8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "19d165e647c4c3cdf16627c1161435f046ff5fb5", "commitAfterChange": "cfc5eb85d262e7fc676968dac1dbb5e48659f078", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "signatureAfterChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "diff": ["+\t\t} else if (astNode instanceof CompletionOnSingleTypeReference) {", "+\t\t\tCompletionOnSingleTypeReference completionOnSingleTypeReference = (CompletionOnSingleTypeReference) astNode;", "+\t\t\tif (completionOnSingleTypeReference.isConstructorType) {", "+\t\t\t\t\t\tcontext.setTokenLocation(CompletionContext.TL_CONSTRUCTOR_START);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\tCompletionOnQualifiedTypeReference completionOnQualifiedTypeReference = (CompletionOnQualifiedTypeReference) astNode;", "+\t\t\tif (completionOnQualifiedTypeReference.isConstructorType){", "+\t\t\t\t\t\tcontext.setTokenLocation(CompletionContext.TL_CONSTRUCTOR_START);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fee7625f1a63fac8aca65ffe6a069d97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "03aab1ff69aae2de16de283aaf6df2cafa77af82", "commitAfterChange": "0c0e9f808d4509f3cefc470c2105f7ba1290fdb7", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "signatureAfterChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "diff": ["+\t\t\t} else if (referenceContext instanceof LambdaExpression) {", "+\t\t\t\tLambdaExpression expression = (LambdaExpression)referenceContext;", "+\t\t\t\tif (expression.body().sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\tastNode.sourceEnd <= expression.body().sourceEnd) {", "+\t\t\t\t\t// completion is inside a method body", "+\t\t\t\t\tif (astNodeParent == null &&", "+\t\t\t\t\t\t\tastNode instanceof CompletionOnSingleNameReference &&", "+\t\t\t\t\t\t\t!((CompletionOnSingleNameReference)astNode).isPrecededByModifiers) {", "+\t\t\t\t\t\tcontext.setTokenLocation(CompletionContext.TL_STATEMENT_START);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 49846}
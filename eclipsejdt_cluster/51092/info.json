{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a4ad145437c0f3a8290fc0af3822ada", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a4b42533be9cce66055275d656b7481", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t// project reference updated - may throw an exception if unable to write .project file", "-\t\tupdateProjectReferencesIfNecessary();", "-", "-\t\t// classpath file updated - may throw an exception if unable to write .classpath file", "-\t\tsaveClasspathIfNecessary();", "-\t\t", "-\t\t// perform classpath and output location updates, if exception occurs in classpath update,", "-\t\t// make sure the output location is updated before surfacing the exception (in case the output", "-\t\t// location update also throws an exception, give priority to the classpath update one).", "-\t\tJavaModelException originalException = null;", "-", "-\t\ttry {", "-\t\t\tif (this.newRawPath == DO_NOT_UPDATE_PROJECT_REFS) this.newRawPath = project.getRawClasspath();", "-\t\t\tif (this.newRawPath != DO_NOT_SET_ENTRIES){", "-\t\t\t\tupdateClasspath();", "-\t\t\t\tproject.updatePackageFragmentRoots();", "-\t\t\t\tJavaModelManager.getJavaModelManager().getDeltaProcessor().addForRefresh(project);", "-\t\t\t}", "-", "-\t\t} catch(JavaModelException e){", "-\t\t\toriginalException = e;", "-\t\t\tthrow e;", "-", "-\t\t} finally { // if traversed by an exception we still need to update the output location when necessary", "-", "-\t\t\ttry {", "-\t\t\t\tif (this.newOutputLocation != DO_NOT_SET_OUTPUT) updateOutputLocation();", "-", "-\t\t\t} catch(JavaModelException e){", "-\t\t\t\tif (originalException != null) throw originalException; ", "-\t\t\t\tthrow e;", "-\t\t\t} finally {", "-\t\t\t\t// ensures the project is getting rebuilt if only variable is modified", "-\t\t\t\tif (!this.identicalRoots && this.canChangeResources) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.project.getProject().touch(this.progressMonitor);", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\t\t\tUtil.verbose(\"CPContainer INIT - FAILED to touch project: \"+ this.project.getElementName(), System.err); //$NON-NLS-1$", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\tdone();", "-\t}", "+\t\tif (isCanceled()) ", "+\t\ttry {", "+\t\t\t// set raw classpath and null out resolved info", "+\t\t\tthis.project.getPerProjectInfo().setClasspath(this.newRawClasspath, this.newOutputLocation, JavaModelStatus.VERIFIED_OK/*format is ok*/, null, null, null);", "+\t\t\t// if needed, generate delta, update project ref, create markers, ...", "+\t\t\tclasspathChanged(this.project);", "+\t\t\t// write .classpath file", "+\t\t\tif (this.canChangeResources && this.project.saveClasspath(this.newRawClasspath, this.newOutputLocation))", "+\t\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE);", "+\t\t} finally {\t\t", "+\t\t\tdone();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e614df288918bed933989a7e8bb364eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "0ec72d2d01e922936e8894589d46ed7fef008881", "commitAfterChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r \tprotected void executeOperation() throws JavaModelException", "diff": ["+\t\t// project reference updated - may throw an exception if unable to write .project file\r", "+\t\tupdateProjectReferencesIfNecessary();\r", "+\r", "+\t\t// classpath file updated - may throw an exception if unable to write .classpath file\r", "-\t\tif (this.newRawPath != ReuseClasspath){\r", "-\t\t\tupdateClasspath();\r", "-\t\t}\r", "-\t\tif (this.newOutputLocation != ReuseOutputLocation){\r", "-\t\t\tupdateOutputLocation();\r", "+\t\t// perform classpath and output location updates, if exception occurs in classpath update,\r", "+\t\t// make sure the output location is updated before surfacing the exception (in case the output\r", "+\t\t// location update also throws an exception, give priority to the classpath update one).\r", "+\t\tJavaModelException originalException = null;\r", "+\r", "+\t\ttry {\r", "+\t\t\tif (this.newRawPath != ReuseClasspath) updateClasspath();\r", "+\r", "+\t\t} catch(JavaModelException e){\r", "+\t\t\toriginalException = e;\r", "+\t\t\tthrow e;\r", "+\r", "+\t\t} finally { // if traversed by an exception we still need to update the output location when necessary\r", "+\r", "+\t\t\ttry {\r", "+\t\t\t\tif (this.newOutputLocation != ReuseOutputLocation) updateOutputLocation();\r", "+\r", "+\t\t\t} catch(JavaModelException e){\r", "+\t\t\t\tif (originalException != null) throw originalException; \r", "+\t\t\t\tthrow e;\r", "+\t\t\t}\r"]}], "num": 51092}
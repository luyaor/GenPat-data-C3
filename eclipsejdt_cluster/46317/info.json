{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8993a8f69e30c89eb221c08c94d33432", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a10178770e49a170ee8eec82d749a80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 185, "signatureBeforeChange": " public void invokestatic(MethodBinding methodBinding)", "signatureAfterChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "diff": ["+", "+public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass) {", "+\tif (declaringClass == null) declaringClass = methodBinding.declaringClass;", "+    if (declaringClass.isNestedType()) {", "+        this.classFile.recordInnerClasses(declaringClass);", "+    }", "+    // compute receiverAndArgsSize", "+    int receiverAndArgsSize;", "+    switch(opcode) {", "+    \tcase Opcodes.OPC_invokestatic :", "+    \t\treceiverAndArgsSize = 0; // no receiver", "+    \t\tbreak;", "+    \tcase Opcodes.OPC_invokeinterface :", "+    \tcase Opcodes.OPC_invokevirtual :", "+    \t\treceiverAndArgsSize = 1; // receiver", "+    \t\tbreak;", "+    \tcase Opcodes.OPC_invokespecial :", "+    \t\treceiverAndArgsSize = 1; // receiver", "+    \t\tif (methodBinding.isConstructor()) {", "+    \t\t\tif (declaringClass.isNestedType()) {", "+        \t\t\tReferenceBinding nestedType = (ReferenceBinding) declaringClass;", "+    \t\t\t\t// enclosing instances", "+    \t\t\t\tTypeBinding[] syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes();", "+    \t\t\t\tif (syntheticArgumentTypes != null) {", "+    \t\t\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "+    \t\t\t\t\t\tswitch (syntheticArgumentTypes[i].id)  {", "+    \t\t\t\t\t\t\tcase TypeIds.T_double :", "+    \t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t    \t\t\t\t\t\t\treceiverAndArgsSize += 2;", "+\t\t\t\t\t\t\t\t\tbreak;", "+    \t\t\t\t\t\t\tdefault: ", "+\t    \t\t\t\t\t\t\treceiverAndArgsSize++;", "+    \t\t\t\t\t\t\t\tbreak;", "+    \t\t\t\t\t\t}", "+    \t\t\t\t\t}", "+    \t\t\t\t}", "+    \t\t\t\t// outer local variables", "+    \t\t\t\tSyntheticArgumentBinding[] syntheticArguments = nestedType.syntheticOuterLocalVariables();", "+    \t\t\t\tif (syntheticArguments != null) {", "+    \t\t\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "+    \t\t\t\t\t\tswitch (syntheticArguments[i].id)  {", "+    \t\t\t\t\t\t\tcase TypeIds.T_double :", "+    \t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t    \t\t\t\t\t\t\treceiverAndArgsSize += 2;", "+\t\t\t\t\t\t\t\t\tbreak;", "+    \t\t\t\t\t\t\tdefault: ", "+\t    \t\t\t\t\t\t\treceiverAndArgsSize++;", "+    \t\t\t\t\t\t\t\tbreak;", "+    \t\t\t\t\t\t}    \t\t\t\t\t\t", "+    \t\t\t\t\t}", "+    \t\t\t\t}", "+    \t\t\t}", "+    \t\t\tif (declaringClass.isEnum()) {", "+    \t\t\t\t// adding String (name) and int (ordinal)", "+    \t\t\t\treceiverAndArgsSize += 2;", "+    \t\t\t}", "+    \t\t}    \t\t", "+    \t\tbreak;", "+    \tdefault :", "+    \t\treturn; // should not occur", "+    \t\t", "+    }", "+\tfor (int i = methodBinding.parameters.length - 1; i >= 0; i--) {", "+\t\tswitch (methodBinding.parameters[i].id) {", "+\t\t\tcase TypeIds.T_double :", "+\t\t\tcase TypeIds.T_long :", "+\t\t\t\treceiverAndArgsSize += 2;", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\treceiverAndArgsSize ++;", "+\t\t\t\tbreak;", "+\t\t}", "+\t// compute return type size", "+\tint returnTypeSize;", "+\tswitch (methodBinding.returnType.id) {", "+\t\tcase TypeIds.T_double :", "+\t\tcase TypeIds.T_long :", "+\t\t\treturnTypeSize = 2;", "+\t\t\tbreak;", "+\t\tcase TypeIds.T_void :", "+\t\t\treturnTypeSize = 0;", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\treturnTypeSize = 1;", "+\t\t\tbreak;", "+\t}", "+\tinvoke(", "+\t\t\topcode, ", "+\t\t\treceiverAndArgsSize, ", "+\t\t\treturnTypeSize, ", "+\t\t\tdeclaringClass.constantPoolName(), ", "+\t\t\tmethodBinding.selector, ", "+\t\t\tmethodBinding.signature(this.classFile));", "+}", "-}", "-public void invokestatic(MethodBinding methodBinding) {", "-\tif (DEBUG) System.out.println(this.position + \"\\t\\tinvokestatic:\"+methodBinding); //$NON-NLS-1$", "-\t// initialized to 0 to take into account that there is no this for", "-\t// a static method", "-\tthis.countLabels = 0;", "-\tint argCount = 0;", "-\tint id;", "-\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tthis.position++;", "-\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_invokestatic;", "-\twriteUnsignedShort(", "-\t\tthis.constantPool.literalIndexForMethod(", "-\t\t\tmethodBinding.constantPoolDeclaringClass(),", "-\t\t\tmethodBinding.selector,", "-\t\t\tmethodBinding.signature(this.classFile),", "-\t\t\tfalse));", "-\tfor (int i = methodBinding.parameters.length - 1; i >= 0; i--)", "-\t\tif (((id = methodBinding.parameters[i].id) == TypeIds.T_double) || (id == TypeIds.T_long))", "-\t\t\targCount += 2;", "-\t\telse", "-\t\t\targCount += 1;", "-\tif (((id = methodBinding.returnType.id) == TypeIds.T_double) || (id == TypeIds.T_long))", "-\t\tthis.stackDepth += (2 - argCount);", "-\telse", "-\t\tif (id == TypeIds.T_void)", "-\t\t\tthis.stackDepth -= argCount;", "-\t\telse", "-\t\t\tthis.stackDepth += (1 - argCount);", "-\tif (this.stackDepth > this.stackMax)", "-\t\tthis.stackMax = this.stackDepth;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5551131861a7112b533e4eb9aac318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "fdf8a7c625823b4365f60e2b73aad682cd437b32", "commitAfterChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private static SearchPattern createConstructorPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createConstructorPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\tStringTokenizer tokenizer = new StringTokenizer(patternString, \" .(,)\", true); //$NON-NLS-1$\r", "+\tScanner scanner = new Scanner(false, true); // tokenize white spaces\r", "+\tscanner.setSourceBuffer(patternString.toCharArray());\r", "-\tString lastToken = null;\r", "-\twhile (tokenizer.hasMoreTokens()){\r", "-\t\tString token = tokenizer.nextToken();\r", "+\tint token;\r", "+\ttry {\r", "+\t\ttoken = scanner.getNextToken();\r", "+\t} catch (InvalidInputException e) {\r", "+\t\treturn null;\r", "+\t}\r", "+\twhile (token != TerminalSymbols.TokenNameEOF){\r", "-\t\t\t\tif (token.equals(\".\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (declaringQualification == null){\r", "-\t\t\t\t\t\tif (typeName == null) return null;\r", "-\t\t\t\t\t\tdeclaringQualification = typeName;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdeclaringQualification += token + typeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttypeName = null;\r", "-\t\t\t\t} else if (token.equals(\"(\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tparameterTypes = new String[5];\r", "-\t\t\t\t\tparameterCount = 0;\r", "-\t\t\t\t\tmode = InsideParameter;\r", "-\t\t\t\t} else if (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (!(\" \".equals(lastToken) || \".\".equals(lastToken))){ //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\t\tif (declaringQualification == null){\r", "+\t\t\t\t\t\t\tif (typeName == null) return null;\r", "+\t\t\t\t\t\t\tdeclaringQualification = typeName;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t\tdeclaringQualification += tokenSource + typeName;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\ttypeName = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else { // name\r", "-\t\t\t\t\tif (typeName != null) return null;\r", "-\t\t\t\t\ttypeName = token;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLPAREN:\r", "+\t\t\t\t\t\tparameterTypes = new String[5];\r", "+\t\t\t\t\t\tparameterCount = 0;\r", "+\t\t\t\t\t\tmode = InsideParameter;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\t\tif (typeName == null) {\r", "+\t\t\t\t\t\t\ttypeName = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\ttypeName += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\t\t\tif (token.equals(\" \")){ //$NON-NLS-1$\r", "-\t\t\t\t} else if (token.equals(\",\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "-\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "-\t\t\t\t\tparameterType = null;\r", "-\t\t\t\t} else if (token.equals (\")\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tfoundClosingParenthesis = true;\r", "-\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\tswitch (token) {\r", "+\t\t\t\t\tcase Scanner.TokenNameWHITESPACE:\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameCOMMA:\r", "+\t\t\t\t\t\tif (parameterType == null) return null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tif (parameterType == null){\r", "-\t\t\t\t\t\tparameterType = token;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (!(\".\".equals(lastToken) || \".\".equals(token) || \"[]\".equals(token))) return null; //$NON-NLS-3$ //$NON-NLS-2$ //$NON-NLS-1$\r", "-\t\t\t\t\t\tparameterType += token;\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t\tparameterType = null;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRPAREN:\r", "+\t\t\t\t\t\tfoundClosingParenthesis = true;\r", "+\t\t\t\t\t\tif (parameterType != null){\r", "+\t\t\t\t\t\t\tif (parameterTypes.length == parameterCount){\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parameterTypes, 0, parameterTypes = new String[parameterCount*2], 0, parameterCount);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tparameterTypes[parameterCount++] = parameterType;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameDOT:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameIdentifier:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameMULTIPLY:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameLBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameRBRACKET:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameboolean:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamebyte:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamechar:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamedouble:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamefloat:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameint:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamelong:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNameshort:\r", "+\t\t\t\t\tcase TerminalSymbols.TokenNamevoid:\r", "+\t\t\t\t\t\tif (parameterType == null){\r", "+\t\t\t\t\t\t\tparameterType = new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tparameterType += new String(scanner.getCurrentTokenSource());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\treturn null;\r", "-\t\tlastToken = token;\r", "+\t\ttry {\r", "+\t\t\ttoken = scanner.getNextToken();\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}], "num": 46317}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46ecea2b6a00f3e678ad2b97b20f4eb0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b496abb0a875a4ce2b646b66c653cb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "5e638dcfd50f97ae4a246aa10e1ffa5f37ef04f9", "commitAfterChange": "675816f7a8ef4ba81811a9f27342deb1d6ee9d87", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic MethodBinding[] methods()", "signatureAfterChange": " \tpublic MethodBinding[] methods()", "diff": ["-\t\tif ((modifiers & AccUnresolved) == 0)", "-\t\t\treturn this.methods;", "-", "-\t\ttry {", "-\t\t    MethodBinding[] originalMethods = this.type.methods();", "-\t\t    int length = originalMethods.length;", "-\t\t    MethodBinding[] parameterizedMethods = new MethodBinding[length];", "-\t\t    for (int i = 0; i < length; i++)", "-\t\t    \t// substitute all methods, so as to get updated declaring class at least", "-\t            parameterizedMethods[i] = createParameterizedMethod(originalMethods[i]);", "-\t\t    this.methods = parameterizedMethods;", "-\t\t} finally {", "-\t\t\t// if the original methods cannot be retrieved (ex. AbortCompilation), then assume we do not have any methods", "-\t\t    if (this.methods == null) ", "-\t\t        this.methods = NoMethods;", "-", "-\t\t\tmodifiers &= ~AccUnresolved;", "-\t\t}\t\t", "+\t\tif ((tagBits & AreMethodsComplete) == 0) {", "+\t\t\ttry {", "+\t\t\t    MethodBinding[] originalMethods = this.type.methods();", "+\t\t\t    int length = originalMethods.length;", "+\t\t\t    MethodBinding[] parameterizedMethods = new MethodBinding[length];", "+\t\t\t    for (int i = 0; i < length; i++)", "+\t\t\t    \t// substitute all methods, so as to get updated declaring class at least", "+\t\t            parameterizedMethods[i] = createParameterizedMethod(originalMethods[i]);", "+\t\t\t    this.methods = parameterizedMethods;", "+\t\t\t} finally {", "+\t\t\t\t// if the original methods cannot be retrieved (ex. AbortCompilation), then assume we do not have any methods", "+\t\t\t    if (this.methods == null) ", "+\t\t\t        this.methods = NoMethods;", "+\t", "+\t\t\t\ttagBits |=  AreMethodsComplete;", "+\t\t\t}\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed015e9aba6706374a812e380c3d7b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "5e638dcfd50f97ae4a246aa10e1ffa5f37ef04f9", "commitAfterChange": "675816f7a8ef4ba81811a9f27342deb1d6ee9d87", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public MethodBinding[] methods()", "signatureAfterChange": "  public MethodBinding[] methods()", "diff": ["-\tif ((modifiers & AccUnresolved) == 0)", "-\t\treturn methods;", "-", "-\tfor (int i = methods.length; --i >= 0;)", "-\t\tresolveTypesFor(methods[i]);", "-\tmodifiers &= ~AccUnresolved;", "+\tif ((tagBits & AreMethodsComplete) == 0) {", "+\t\tfor (int i = methods.length; --i >= 0;)", "+\t\t\tresolveTypesFor(methods[i]);", "+\t\ttagBits |= AreMethodsComplete;", "+\t}"]}], "num": 43147}
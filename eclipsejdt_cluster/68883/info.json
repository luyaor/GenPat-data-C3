{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "235ed9fee0b8e0ef80e725ea47a48522", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2c7d05fcad0e39f6b8963f5a24954d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "999bcda04cb6d6af2ffd5ec4d0e38a056d1cb17e", "commitAfterChange": "e85c64b61dd0fccd3fba59ad01cfd55ac35b4723", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": " \tpublic org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(CompilationUnit workingCopy, IProblemRequestor problemRequestor) throws JavaModelException", "diff": ["-\t\t\t\tHashMap problemMap = this.problems == null ? new HashMap() : this.problems;", "-\t\t\t\tif (this.forceProblemDetection && this.problems == null) ", "-\t\t\t\t\tthis.problems = problemMap;", "+\t\t\t\tHashMap problemMap;", "+\t\t\t\tif (this.problems == null) {", "+\t\t\t\t\tproblemMap = new HashMap();", "+\t\t\t\t\tif (this.forceProblemDetection)", "+\t\t\t\t\t\tthis.problems = problemMap;", "+\t\t\t\t} else", "+\t\t\t\t\tproblemMap = this.problems;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38112abf97cf2b48206de17db0b1e02e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "commitAfterChange": "735916eb06179bed43e056d6ccfc575e428a25bb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic int getExtendedLength(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedLength(ASTNode node)", "diff": ["-\t\tint end = node.getStartPosition() + node.getLength() - 1;", "+\t\t/* TODO (frederic) - Clients can be expected to make use of this", "+\t\t * new facility a lot. The performance of the implementation would", "+\t\t * be significantly improved by reworking this code so that it", "+\t\t * does not create garbage Comment[].", "+\t\t */", "-\t\tif (trailingComments != null) {", "+\t\tint lastPosition; // exclusive", "+\t\tif (trailingComments == null) {", "+\t\t\tlastPosition = node.getStartPosition() + node.getLength();", "+\t\t} else {", "-\t\t\tend = lastComment.getStartPosition() + lastComment.getLength() - 1;", "+\t\t\tlastPosition = lastComment.getStartPosition() + lastComment.getLength();", "-\t\treturn end - getExtendedStartPosition(node) + 1;", "+\t\treturn lastPosition - getExtendedStartPosition(node);"]}], "num": 68883}
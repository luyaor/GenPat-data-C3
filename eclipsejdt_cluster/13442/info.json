{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89bfad4e17bd7986ac486e1cf3e72b04", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c198bbd4fb242132b72474e53e9f51b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "a5f6d4638626e6b63445e0dcc2d7df23ecb18614", "commitAfterChange": "7f7a05ae0877375c4e6f1763bbaeecff5ba0d990", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void destroy()", "signatureAfterChange": "\r public void destroy()", "diff": ["-\t\tif (manager.sharedWorkingCopies.remove(originalElement) != null) {\r", "-\t\t\tif (SHARED_WC_VERBOSE) {\r", "-\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + this.toDebugString());//$NON-NLS-1$\r", "-\t\t\t}\r", "-\r", "-\t\t\t// report removed java delta\r", "-\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());\r", "-\t\t\tdelta.removed(this);\r", "-\t\t\tmanager.fire(delta, JavaModelManager.DEFAULT_CHANGE_EVENT);\r", "-\t\t}\r", "+\t\t// In order to be shared, working copies have to denote the same compilation unit \r", "+\t\t// AND use the same buffer factory.\r", "+\t\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.\r", "+\t\tMap sharedWorkingCopies = manager.sharedWorkingCopies;\r", "+\t\t\r", "+\t\tMap perFactoryWorkingCopies = \r", "+\t\t\tthis.bufferFactory == null \r", "+\t\t\t\t?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY)  \r", "+\t\t\t\t: (Map) sharedWorkingCopies.get(this.bufferFactory);\r", "+\t\tif (perFactoryWorkingCopies != null){\r", "+\t\t\tif (perFactoryWorkingCopies.remove(originalElement) != null) {\r", "+\t\t\t\tif (SHARED_WC_VERBOSE) {\r", "+\t\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + this.toDebugString());//$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\r", "+\t\t\t\t// report removed java delta\r", "+\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());\r", "+\t\t\t\tdelta.removed(this);\r", "+\t\t\t\tmanager.fire(delta, JavaModelManager.DEFAULT_CHANGE_EVENT);\r", "+\t\t\t}\r", "+\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81857e36026ae883d843bd25e365965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "a5f6d4638626e6b63445e0dcc2d7df23ecb18614", "commitAfterChange": "7f7a05ae0877375c4e6f1763bbaeecff5ba0d990", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IJavaElement findSharedWorkingCopy()", "signatureAfterChange": "\r public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["-public IJavaElement findSharedWorkingCopy() {\r", "-\treturn (IJavaElement)JavaModelManager.getJavaModelManager().sharedWorkingCopies.get(this);\r", "+public IJavaElement findSharedWorkingCopy(IBufferFactory factory) {\r", "+\r", "+\t// In order to be shared, working copies have to denote the same compilation unit \r", "+\t// AND use the same buffer factory.\r", "+\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.\r", "+\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;\r", "+\t\r", "+\tMap perFactoryWorkingCopies = \r", "+\t\tfactory == null \r", "+\t\t\t?(Map) sharedWorkingCopies.get(CompilationUnit.DEFAULT_FACTORY) \r", "+\t\t\t: (Map) sharedWorkingCopies.get(factory);\r", "+\tif (perFactoryWorkingCopies == null) return null;\r", "+\treturn (WorkingCopy)perFactoryWorkingCopies.get(this);\r"]}], "num": 13442}
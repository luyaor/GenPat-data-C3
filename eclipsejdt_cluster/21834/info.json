{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ac1595dc999c7d8df68d0df79c72514", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52eac76cdbdbd22062888bf6c71d28cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "diff": ["-\tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank) {", "+\tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack) {", "-\t\t\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound,wildV.bound});", "+\t\t\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound,wildV.bound}, lubStack);", "-\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, null, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "+\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "-\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,wildV.bound});", "+\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,wildV.bound}, lubStack);", "-\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "+\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "-\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound, v});", "+\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound, v}, lubStack);", "-\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER); // TODO (philippe) need to capture entire bounds\t\t", "+\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER); // TODO (philippe) need to capture entire bounds\t\t", "-\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,v});", "+\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,v}, lubStack);", "-\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);", "+\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "725141256e0d14a478066dc5b9ef9835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": " public void add(IJavaElement element, IJavaProject project) throws JavaModelException", "diff": ["+ */", "+public void add(IJavaElement element, IJavaProject project) throws JavaModelException {", "+\tint includeMask = SOURCES | APPLICATION_LIBRARIES | SYSTEM_LIBRARIES;", "-\t\t\tint includeMask = SOURCES | APPLICATION_LIBRARIES | SYSTEM_LIBRARIES;", "-\t\t\tthis.add((JavaProject)element, includeMask, new HashSet(2));", "+\t\t\tif (project == null)", "+\t\t\t\tadd((JavaProject)element, null, includeMask, new HashSet(2), null);", "+\t\t\telse", "+\t\t\t\tadd((JavaProject)project, element.getPath(), includeMask, new HashSet(2), null);", "-\t\t\tthis.add(root.getPath(), true);", "+\t\t\tif (project == null)", "+\t\t\t\tadd(root.getPath(), true, null);", "+\t\t\telse", "+\t\t\t\tadd((JavaProject)project, root.getPath(), includeMask, new HashSet(2), null);", "-\t\t\t\tthis.add(root.getPath().append(new Path(relativePath)), false);", "+\t\t\t\tIPath path = root.getPath().append(new Path(relativePath));", "+\t\t\t\tif (project == null)", "+\t\t\t\t\tadd(path, false, null);", "+\t\t\t\telse", "+\t\t\t\t\tadd((JavaProject)project, path, includeMask, new HashSet(2), null);", "-\t\t\t\t\tthis.add(resource.getFullPath(), false);", "+\t\t\t\t\tif (project == null)", "+\t\t\t\t\t\tadd(resource.getFullPath(), false, null);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tadd((JavaProject)project, resource.getFullPath(), includeMask, new HashSet(2), null);", "-\t\t\tthis.add(this.fullPath(element), true);", "+\t\t\tthis.add(this.fullPath(element), true, null);"]}], "num": 21834}
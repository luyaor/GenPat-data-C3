{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "492a185fa1c392e115662b0bf6ba09de", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9549665a46e05cc9b726b38d7806b3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "bf0f8f3fb3a1e65d3991ad74a22283bff3364383", "commitAfterChange": "001f75f4d8692ca1d05f0c725e4b022afb3b95dd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-", "+\tchar[] src = this.source;", "+\t", "-\tif (this.foundTaskCount > 0 && this.foundTaskPositions[this.foundTaskCount-1][0] >= commentStart) {", "+\tif (this.foundTaskCount > 0", "+\t\t&& this.foundTaskPositions[this.foundTaskCount - 1][0] >= commentStart) {", "-\tnextChar: for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "-", "+\tchar previous = '/';", "+\tnextChar : for (", "+\t\tint i = commentStart + 1; i < commentEnd && i < this.eofPosition; i++) {", "+\t\tif (Character.isLetterOrDigit(previous)) {", "+\t\t\tprevious = src[i];", "+\t\t\tcontinue nextChar;", "+\t\t}", "-\t\t", "+\t\tprevious = src[i];", "-\t\tnextTag: for (int itag = 0; itag < this.taskTags.length; itag++){", "+\t\tnextTag : for (int itag = 0; itag < this.taskTags.length; itag++) {", "-\t\t\tpriority = ", "-\t\t\t\tthis.taskPriorities != null && itag < this.taskPriorities.length ?", "-\t\t\t\tthis.taskPriorities[itag] :", "-\t\t\t\tnull;", "+\t\t\tpriority = this.taskPriorities != null && itag < this.taskPriorities.length", "+\t\t\t\t\t\t? this.taskPriorities[itag]", "+\t\t\t\t\t\t: null;", "-\t\t\tfor (int t = 0; t < tagLength; t++){", "-\t\t\t\tif (this.source[i+t] != tag[t]) continue nextTag;", "+\t\t\tfor (int t = 0; t < tagLength; t++) {", "+\t\t\t\tif (src[i + t] != tag[t])", "+\t\t\t\t\tcontinue nextTag;", "-", "-\t\t\tif (this.foundTaskTags == null){", "+\t\t\t// ensure tag is followed by whitespace, line separator or asterisk if tag did finish with a letter", "+\t\t\tif (i+tagLength < commentEnd && Character.isLetterOrDigit(src[i+tagLength-1])) {", "+\t\t\t\tif (Character.isLetterOrDigit(src[i + tagLength]))", "+\t\t\t\t\tcontinue nextTag;", "+\t\t\t}", "+\t\t\tif (this.foundTaskTags == null) {", "-\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[]{ i, i+tagLength-1 };", "+\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[] { i, i + tagLength - 1 };", "-\t\t\t", "-\t\t\ti += tagLength-1; // will be incremented when looping", "+\t\t\ti += tagLength - 1; // will be incremented when looping", "+\t\t\tprevious = src[i];", "+\t\t\tbreak nextTag;", "-\t", "-\t\tint max_value = i + 1 < this.foundTaskCount ? this.foundTaskPositions[i + 1][0] - 1 : commentEnd-1; // at most beginning of next task", "-\t\tif (max_value < msgStart) max_value = msgStart; // would only occur if tag is before EOF.", "+\t\tint max_value = i + 1 < this.foundTaskCount", "+\t\t\t\t? this.foundTaskPositions[i + 1][0] - 1", "+\t\t\t\t: commentEnd - 1;", "+\t\t// at most beginning of next task", "+\t\tif (max_value < msgStart) {", "+\t\t\tmax_value = msgStart; // would only occur if tag is before EOF.", "+\t\t}", "-\t\t", "-\t\tfor (int j = msgStart; j < max_value; j++){", "-\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "-\t\t\t\tend = j-1;", "+\t\tfor (int j = msgStart; j < max_value; j++) {", "+\t\t\tif ((c = src[j]) == '\\n' || c == '\\r') {", "+\t\t\t\tend = j - 1;", "-\t\t", "-\t\tif (end == -1){", "-\t\t\tfor (int j = max_value; j > msgStart; j--){", "-\t\t\t\tif ((c = this.source[j]) == '*') {", "-\t\t\t\t\tend = j-1;", "+\t\tif (end == -1) {", "+\t\t\tfor (int j = max_value; j > msgStart; j--) {", "+\t\t\t\tif ((c = src[j]) == '*') {", "+\t\t\t\t\tend = j - 1;", "-\t\t\tif (end == -1) end = max_value;", "+\t\t\tif (end == -1)", "+\t\t\t\tend = max_value;", "-", "-\t\tif (msgStart == end) continue; // empty", "-\t\t\t\t", "+\t\tif (msgStart == end)", "+\t\t\tcontinue; // empty", "-\t\twhile (CharOperation.isWhitespace(source[end]) && msgStart <= end) end--;", "-\t\twhile (CharOperation.isWhitespace(source[msgStart]) && msgStart <= end) msgStart++;", "-", "+\t\twhile (CharOperation.isWhitespace(src[end]) && msgStart <= end)", "+\t\t\tend--;", "+\t\twhile (CharOperation.isWhitespace(src[msgStart]) && msgStart <= end)", "+\t\t\tmsgStart++;", "-\t\t", "-\t\tfinal int messageLength = end-msgStart+1;", "+\t\tfinal int messageLength = end - msgStart + 1;", "-", "-\t\tSystem.arraycopy(source, msgStart, message, 0, messageLength);", "+\t\tSystem.arraycopy(src, msgStart, message, 0, messageLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6cf194ee2c0054fef40ee8dd86dfb39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "bf0f8f3fb3a1e65d3991ad74a22283bff3364383", "commitAfterChange": "001f75f4d8692ca1d05f0c725e4b022afb3b95dd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd)", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd)", "diff": ["-", "+\tchar[] src = this.source;", "+\t", "-\tif (this.foundTaskCount > 0 && this.foundTaskPositions[this.foundTaskCount-1][0] >= commentStart) {", "+\tif (this.foundTaskCount > 0", "+\t\t&& this.foundTaskPositions[this.foundTaskCount - 1][0] >= commentStart) {", "-\tnextChar: for (int i = commentStart; i < commentEnd && i < this.eofPosition; i++) {", "-", "+\tchar previous = '/';", "+\tnextChar : for (", "+\t\tint i = commentStart + 1; i < commentEnd && i < this.eofPosition; i++) {", "+\t\tif (Character.isLetterOrDigit(previous)) {", "+\t\t\tprevious = src[i];", "+\t\t\tcontinue nextChar;", "+\t\t}", "-\t\t", "+\t\tprevious = src[i];", "-\t\tnextTag: for (int itag = 0; itag < this.taskTags.length; itag++){", "+\t\tnextTag : for (int itag = 0; itag < this.taskTags.length; itag++) {", "-\t\t\tpriority = ", "-\t\t\t\tthis.taskPriorities != null && itag < this.taskPriorities.length ?", "-\t\t\t\tthis.taskPriorities[itag] :", "-\t\t\t\tnull;", "+\t\t\tpriority = this.taskPriorities != null && itag < this.taskPriorities.length", "+\t\t\t\t\t\t? this.taskPriorities[itag]", "+\t\t\t\t\t\t: null;", "-\t\t\tfor (int t = 0; t < tagLength; t++){", "-\t\t\t\tif (this.source[i+t] != tag[t]) continue nextTag;", "+\t\t\tfor (int t = 0; t < tagLength; t++) {", "+\t\t\t\tif (src[i + t] != tag[t])", "+\t\t\t\t\tcontinue nextTag;", "-", "-\t\t\tif (this.foundTaskTags == null){", "+\t\t\t// ensure tag is followed by whitespace, line separator or asterisk if tag did finish with a letter", "+\t\t\tif (i+tagLength < commentEnd && Character.isLetterOrDigit(src[i+tagLength-1])) {", "+\t\t\t\tif (Character.isLetterOrDigit(src[i + tagLength]))", "+\t\t\t\t\tcontinue nextTag;", "+\t\t\t}", "+\t\t\tif (this.foundTaskTags == null) {", "-\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount*2][], 0, this.foundTaskCount);", "-\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount*2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskTags, 0, this.foundTaskTags = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskMessages, 0, this.foundTaskMessages = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskPriorities, 0, this.foundTaskPriorities = new char[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "+\t\t\t\tSystem.arraycopy(this.foundTaskPositions, 0, this.foundTaskPositions = new int[this.foundTaskCount * 2][], 0, this.foundTaskCount);", "-\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[]{ i, i+tagLength-1 };", "+\t\t\tthis.foundTaskPositions[this.foundTaskCount] = new int[] { i, i + tagLength - 1 };", "-\t\t\t", "-\t\t\ti += tagLength-1; // will be incremented when looping", "+\t\t\ti += tagLength - 1; // will be incremented when looping", "+\t\t\tprevious = src[i];", "+\t\t\tbreak nextTag;", "-\t", "-\t\tint max_value = i + 1 < this.foundTaskCount ? this.foundTaskPositions[i + 1][0] - 1 : commentEnd-1; // at most beginning of next task", "-\t\tif (max_value < msgStart) max_value = msgStart; // would only occur if tag is before EOF.", "+\t\tint max_value = i + 1 < this.foundTaskCount", "+\t\t\t\t? this.foundTaskPositions[i + 1][0] - 1", "+\t\t\t\t: commentEnd - 1;", "+\t\t// at most beginning of next task", "+\t\tif (max_value < msgStart) {", "+\t\t\tmax_value = msgStart; // would only occur if tag is before EOF.", "+\t\t}", "-\t\t", "-\t\tfor (int j = msgStart; j < max_value; j++){", "-\t\t\tif ((c = this.source[j]) == '\\n' || c == '\\r'){", "-\t\t\t\tend = j-1;", "+\t\tfor (int j = msgStart; j < max_value; j++) {", "+\t\t\tif ((c = src[j]) == '\\n' || c == '\\r') {", "+\t\t\t\tend = j - 1;", "-\t\t", "-\t\tif (end == -1){", "-\t\t\tfor (int j = max_value; j > msgStart; j--){", "-\t\t\t\tif ((c = this.source[j]) == '*') {", "-\t\t\t\t\tend = j-1;", "+\t\tif (end == -1) {", "+\t\t\tfor (int j = max_value; j > msgStart; j--) {", "+\t\t\t\tif ((c = src[j]) == '*') {", "+\t\t\t\t\tend = j - 1;", "-\t\t\tif (end == -1) end = max_value;", "+\t\t\tif (end == -1)", "+\t\t\t\tend = max_value;", "-", "-\t\tif (msgStart == end) continue; // empty", "-\t\t\t\t", "+\t\tif (msgStart == end)", "+\t\t\tcontinue; // empty", "-\t\twhile (CharOperation.isWhitespace(source[end]) && msgStart <= end) end--;", "-\t\twhile (CharOperation.isWhitespace(source[msgStart]) && msgStart <= end) msgStart++;", "-", "+\t\twhile (CharOperation.isWhitespace(src[end]) && msgStart <= end)", "+\t\t\tend--;", "+\t\twhile (CharOperation.isWhitespace(src[msgStart]) && msgStart <= end)", "+\t\t\tmsgStart++;", "-\t\t", "-\t\tfinal int messageLength = end-msgStart+1;", "+\t\tfinal int messageLength = end - msgStart + 1;", "-", "-\t\tSystem.arraycopy(source, msgStart, message, 0, messageLength);", "+\t\tSystem.arraycopy(src, msgStart, message, 0, messageLength);"]}], "num": 24186}
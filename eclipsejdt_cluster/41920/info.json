{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a64e56ab825cc7541dffb75f686a61a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d62b899aa4c8c6f86cea810fad81f39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "cdbba3fe3494f2d010469af9060ef95e48842233", "commitAfterChange": "35725fdbc820b5d03438d3e4a4d3db79142d2182", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r void recordReferences(TypeBinding[] types)", "signatureAfterChange": "\r void recordTypeReferences(TypeBinding[] types)", "diff": ["-void recordReferences(TypeBinding[] types) {\r", "-\tif (qualifiedReferences == null) return; // we're not recording dependencies\r", "-\tif (types == null || types.length == 0) return;\r", "-\r", "-// Do not think we need to record supertypes of method arguments & thrown exceptions\r", "-// If a field/method is retrieved from such a type then a separate call does the job\r", "-//\tfor (int i = 0, max = types.length; i < max; i++)\r", "-//\t\trecordTypeReference(types[i]);\r", "-\r", "-\tfor (int i = 0, max = types.length; i < max; i++) {\r", "-\t\tTypeBinding type = types[i];\r", "-\t\tif (type.isArrayType())\r", "-\t\t\ttype = ((ArrayBinding) type).leafComponentType;\r", "-\t\tif (!type.isBaseType())\r", "-\t\t\trecordReference(((ReferenceBinding) type).compoundName);\r", "-\t}\r", "-}\r", "+void recordTypeReferences(TypeBinding[] types) {\r", "+\tif (qualifiedReferences == null) return; // not recording dependencies\r", "+\tif (types == null || types.length == 0) return;\r", "+\r", "+\tfor (int i = 0, max = types.length; i < max; i++) {\r", "+\t\t// No need to record supertypes of method arguments & thrown exceptions, just the compoundName\r", "+\t\t// If a field/method is retrieved from such a type then a separate call does the job\r", "+\t\tTypeBinding type = types[i];\r", "+\t\tif (type.isArrayType())\r", "+\t\t\ttype = ((ArrayBinding) type).leafComponentType;\r", "+\t\tif (!type.isBaseType()) {\r", "+\t\t\tReferenceBinding actualType = (ReferenceBinding) type;\r", "+\t\t\tif (!actualType.isLocalType())\r", "+\t\t\t\trecordQualifiedReference(actualType.isMemberType()\r", "+\t\t\t\t\t? CharOperation.splitOn('.', actualType.readableName())\r", "+\t\t\t\t\t: actualType.compoundName);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92830ab5b8bd8416fe4833dcfab4f3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "4aa9bc6aa2cb666fb0721f9b95f7c7e969829a0c", "commitAfterChange": "39745a85705361f7e5b8ca890f80a07d85799adc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r void recordTypeReference(TypeBinding type)", "signatureAfterChange": "\r void recordTypeReference(TypeBinding type)", "diff": ["-\t\tReferenceBinding actualtype = (ReferenceBinding) type;\r", "-\t\trecordReference(actualtype.compoundName);\r", "-\t\tif (actualtype.enclosingType() != null)\r", "-\t\t\trecordTypeReference(actualtype.enclosingType());\r", "-\t\tif (actualtype.superclass() != null)\r", "-\t\t\trecordTypeReference(actualtype.superclass());\r", "-\t\tReferenceBinding[] interfaces = actualtype.superInterfaces();\r", "+\t\tReferenceBinding actualType = (ReferenceBinding) type;\r", "+\t\trecordReference(actualType.isNestedType()\r", "+\t\t\t? CharOperation.splitOn('.', actualType.readableName())\r", "+\t\t\t: actualType.compoundName);\r", "+\t\tif (actualType.enclosingType() != null)\r", "+\t\t\trecordTypeReference(actualType.enclosingType());\r", "+\t\tif (actualType.superclass() != null)\r", "+\t\t\trecordTypeReference(actualType.superclass());\r", "+\t\tReferenceBinding[] interfaces = actualType.superInterfaces();\r"]}], "num": 41920}
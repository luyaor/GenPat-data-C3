{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1c3d8e269bfd40d9e550594170017a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c22422db13b9b8bc3029117eb4ef9e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t\t\t\t\t\tpublic void handleException(Throwable exception)", "signatureAfterChange": "  \tpublic void notifyListeners(IJavaElementDelta deltaToNotify, int eventType, IElementChangedListener[] listeners, int[] listenerMask, int listenerCount)", "diff": ["+", "+\tpublic void notifyListeners(IJavaElementDelta deltaToNotify, int eventType, IElementChangedListener[] listeners, int[] listenerMask, int listenerCount) {", "+\t\tfinal ElementChangedEvent extraEvent = new ElementChangedEvent(deltaToNotify, eventType);", "+\t\tfor (int i= 0; i < listenerCount; i++) {", "+\t\t\tif ((listenerMask[i] & eventType) != 0){", "+\t\t\t\tfinal IElementChangedListener listener = listeners[i];", "+\t\t\t\tif (DeltaProcessor.VERBOSE) {", "+\t\t\t\t\tSystem.out.println(\"Listener #\" + (i+1) + \"=\" + listener.toString());//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t// wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief", "+\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$", "+\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\tlistener.elementChanged(extraEvent);", "-\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Java element change notification\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1384e636be259269dace0ab945c0c19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "ed928ec2813761092753aa6a4742b90cbcc4f27d", "commitAfterChange": "e06a7df4ed09416d5b89c022acf08bb2cb167af8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void fireChange()", "signatureAfterChange": " protected void fireChange()", "diff": ["-\tif (this.changeListeners == null) {", "+\tArrayList listeners = this.changeListeners;", "+\tif (listeners == null) {", "-\tArrayList listeners= (ArrayList)this.changeListeners.clone();", "+\t// clone so that a listener cannot have a side-effect on this list when being notified", "+\tlisteners = (ArrayList)listeners.clone();", "-\t\t// ensure the listener is still a listener", "-\t\tif (this.changeListeners != null  && this.changeListeners.indexOf(listener) >= 0) {", "-\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Type hierarchy change notification\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\tlistener.typeHierarchyChanged(TypeHierarchy.this);", "-\t\t\t\t}", "-\t\t\t});", "-\t\t}", "+\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\tUtil.log(exception, \"Exception occurred in listener of Type hierarchy change notification\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tpublic void run() throws Exception {", "+\t\t\t\tlistener.typeHierarchyChanged(TypeHierarchy.this);", "+\t\t\t}", "+\t\t});"]}], "num": 57924}
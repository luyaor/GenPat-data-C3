{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28fdda8882ed06261fee1dad2d642faf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d8dbd5e4d40e6e5f1c99b6e8ecc670e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "4a42ce44b4dbdac7dfa261ef1a39fce0de95d7be", "commitAfterChange": "51fbd8e4f6294604d20aa6227743a8c8abfdc166", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount)", "signatureAfterChange": "\r \r protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount)", "diff": ["-\t\t\t\t\tIPath packagePath = location.removeFirstSegments(segmentCount).makeRelative();\r", "-\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "-\t\t\t\t\t\tSystem.out.println(\"Add dependents of added/removed package \" + packagePath); //$NON-NLS-1$\r", "-\t\t\t\t\taddDependentsOf(packagePath, false);\r", "-\t\t\t\t\treturn;\r", "+\t\t\t\t\tIPath packagePath = location.removeFirstSegments(segmentCount).makeRelative().setDevice(null);\r", "+\t\t\t\t\tString packageName = packagePath.toString();\r", "+\t\t\t\t\tif (binaryDelta.getKind() == IResourceDelta.ADDED) {\r", "+\t\t\t\t\t\t// see if any known source file is from the same package... classpath already includes new package\r", "+\t\t\t\t\t\tif (!newState.isKnownPackage(packageName)) {\r", "+\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of added package \" + packageName); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\taddDependentsOf(packagePath, false);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\tSystem.out.println(\"Skipped dependents of added package \" + packageName); //$NON-NLS-1$\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// see if the package still exists on the classpath\r", "+\t\t\t\t\t\tif (!nameEnvironment.isPackage(packageName)) {\r", "+\t\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\t\tSystem.out.println(\"Add dependents of removed package \" + packageName); //$NON-NLS-1$\r", "+\t\t\t\t\t\t\taddDependentsOf(packagePath, false);\r", "+\t\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\t\t\t\t\tSystem.out.println(\"Skipped dependents of removed package \" + packageName); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t// fall thru & traverse the sub-packages and .class files\r", "-\t\t\t\tIPath typePath = location.removeFirstSegments(segmentCount).removeFileExtension().makeRelative();\r", "+\t\t\t\tIPath typePath = location.removeFirstSegments(segmentCount).removeFileExtension().makeRelative().setDevice(null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae59eb24e0e7be2bdecaa6bd364dac0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "38b7a9cf48e2b7b43c2a92fc5bd92474a255d139", "commitAfterChange": "119fb61720952839453ade6e48fab76b7b943cab", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r \t\r \tprivate void computeBuilderRoots(boolean exportedOnly, IResourceDelta delta, Vector visitedProjects, Vector accumulatedRoots)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \t\t\t\r \tprivate void computeExpandedClasspath(\r \t\tboolean restrainToExportedEntries, \r \t\tboolean ignoreUnresolvedVariable,\r \t\tboolean generateMarkerOnError,\r \t\tVector visitedProjects, \r \t\tVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\r", "-\tprivate void computeBuilderRoots(boolean exportedOnly, IResourceDelta delta, Vector visitedProjects, Vector accumulatedRoots)\r", "-\t\t// avoid project cycles\r", "-\t\tif (visitedProjects.contains(this)){\r", "-\t\t\treturn;\r", "-\t\t}\r", "-\t\tvisitedProjects.add(this);\r", "-\r", "-\t\tclasspath = getResolvedClasspath(true);\r", "-\t\t\tif (!exportedOnly || entry.isExported()){\r", "-\t\t\t\tcomputeBuilderRoots(entry, delta, visitedProjects, accumulatedRoots);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+\t\t\t\r", "+\tprivate void computeExpandedClasspath(\r", "+\t\tboolean restrainToExportedEntries, \r", "+\t\tboolean ignoreUnresolvedVariable,\r", "+\t\tboolean generateMarkerOnError,\r", "+\t\tVector visitedProjects, \r", "+\t\tVector accumulatedEntries) throws JavaModelException {\r", "+\t\t\r", "+\t\tif (visitedProjects.contains(this)) return; // break cycles if any\r", "+\t\tvisitedProjects.add(this);\r", "+\t\t\r", "+\t\tIClasspathEntry[] immediateClasspath = getResolvedClasspath(ignoreUnresolvedVariable, false);\r", "+\t\tfor (int i = 0, length = immediateClasspath.length; i < length; i++){\r", "+\t\t\tIClasspathEntry entry = immediateClasspath[i];\r", "+\r", "+\t\t\tif (!restrainToExportedEntries || entry.isExported()){\r", "+\t\t\t\taccumulatedEntries.add(entry);\r", "+\t\t\t\tif (entry.getEntryKind() == ClasspathEntry.CPE_PROJECT) {\r", "+\t\t\t\t\t\tIProject projRsc = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "+\t\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t\r", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);\r", "+\t\t\t\t\t\t\t// recurse in project to get all its indirect exports (only consider exported entries from there on)\r", "+\t\t\t\t\t\t\tproject.computeExpandedClasspath(\r", "+\t\t\t\t\t\t\t\ttrue, \r", "+\t\t\t\t\t\t\t\tignoreUnresolvedVariable, \r", "+\t\t\t\t\t\t\t\tgenerateMarkerOnError,\r", "+\t\t\t\t\t\t\t\tvisitedProjects, \r", "+\t\t\t\t\t\t\t\taccumulatedEntries);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df2f78c7390a4ec808ffa8efdf109c5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "15e3a9fc2ecd5761f01e0bac254435a2b7c9efda", "commitAfterChange": "7d045aff59e674d12c8b86d331be1a0001ff1185", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 613, "signatureBeforeChange": " public void testBug286379c() throws CoreException", "signatureAfterChange": " public void testBug286379c() throws CoreException", "diff": ["-", "+\t// print statement to debug random failures of this test", "+\tSystem.out.println(\"Forbidden reference at the start of the test is \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t", "+\t\t// print statement to debug random failures of this test", "+\t\tSystem.out.println(\"Forbidden reference before first exit \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tsimulateRestart();\t\t", "+\t\tsimulateRestart();", "+\t\t// print statement to debug random failures of this test", "+\t\tSystem.out.println(\"Forbidden reference after first restart \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\t// print statement to debug random failures of this test", "+\t\tSystem.out.println(\"Forbidden reference before second exit \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tsimulateRestart();\t\t", "+\t\tsimulateRestart();\t", "+\t\t// print statement to debug random failures of this test", "+\t\tSystem.out.println(\"Forbidden reference after second restart \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));"]}], "num": 30137}
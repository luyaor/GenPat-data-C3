{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "697d7ee031138b5014103b8cd35e04ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "058c749d7302673c28ff22aa0bd42305", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "6e12966168689a16f8f3f5f1535c0d20b5fe1e08", "commitAfterChange": "0d572e21d0471752d40a14d0e46feeba076c749a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["-\t\t\t\t\tthis.currentElement.add(new CompletionOnMethodTypeParameter(new TypeParameter[]{typeParameter},this.compilationUnit.compilationResult()), 0);", "+\t\t\t\t\tCompletionNodeDetector detector =  new CompletionNodeDetector(this.assistNode, typeParameter);", "+\t\t\t\t\tif(detector.containsCompletionNode()) {", "+\t\t\t\t\t\tthis.currentElement.add(new CompletionOnMethodTypeParameter(new TypeParameter[]{typeParameter},this.compilationUnit.compilationResult()), 0);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07053e004cd0cb0f410efbadcb168577", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t\tthis.numberOfIndentations = this.indentationLevel % this.indentationSize;", "+\t\tthis.numberOfIndentations = this.indentationLevel / this.indentationSize;", "-\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\tthis.line++;", "+\t\tthis.lastNumberOfNewLines = 0;", "+\t\t\tthis.line++;", "+\t\t\t\t\tthis.line++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08cfb631ab9dea84a714d5252d0755b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f0f1d42036089cdc450ad38e200db5fad2a1d087", "commitAfterChange": "5ecdad70bb6e2e1bbd5c5ec539acc885a5698c4e", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " protected void consumeEnterAnonymousClassBody(boolean qualified)", "signatureAfterChange": " protected void consumeEnterAnonymousClassBody(boolean qualified)", "diff": ["+\tanonymousType.bits |= (typeReference.bits & ASTNode.HasTypeAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3a972597261e6b0ef0894e84bde153", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "56484abf3afec06a3b2fe9a53e3d4859e1a90d5d", "commitAfterChange": "c98606727e89fdf50e483c7870bb4651b90d6014", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "diff": ["-\t\tthree.addBound(bound);", "-\t\t// check if this makes the inference variable instantiated:", "-\t\tTypeBinding typeBinding = bound.right;", "-\t\tif (bound.relation == ReductionResult.SAME && typeBinding.isProperType(true))", "-\t\t\tthree.setInstantiation(typeBinding, variable, environment);", "-\t\tif (bound.right instanceof InferenceVariable) {", "-\t\t\t// for a dependency between two IVs make a note about the inverse bound.", "-\t\t\t// this should be needed to determine IV dependencies independent of direction.", "-\t\t\t// TODO: so far no test could be identified which actually needs it ...", "-\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right.prototype();", "-\t\t\tthree = this.boundsPerVariable.get(rightIV);", "-\t\t\tif (three == null)", "-\t\t\t\tthis.boundsPerVariable.put(rightIV, (three = new ThreeSets()));", "-\t\t\tif (three.inverseBounds == null)", "-\t\t\t\tthree.inverseBounds = new HashMap<InferenceVariable,TypeBound>();", "-\t\t\tthree.inverseBounds.put(rightIV, bound);", "+\t\tif (three.addBound(bound)) {", "+\t\t\tthis.isIncorporated = false;", "+\t\t\tbound.id = this.id++;", "+\t\t\t// check if this makes the inference variable instantiated:", "+\t\t\tTypeBinding typeBinding = bound.right;", "+\t\t\tif (bound.relation == ReductionResult.SAME && typeBinding.isProperType(true))", "+\t\t\t\tthree.setInstantiation(typeBinding, variable, environment);", "+\t\t\tif (bound.right instanceof InferenceVariable) {", "+\t\t\t\t// for a dependency between two IVs make a note about the inverse bound.", "+\t\t\t\t// this should be needed to determine IV dependencies independent of direction.", "+\t\t\t\t// TODO: so far no test could be identified which actually needs it ...", "+\t\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right.prototype();", "+\t\t\t\tthree = this.boundsPerVariable.get(rightIV);", "+\t\t\t\tif (three == null)", "+\t\t\t\t\tthis.boundsPerVariable.put(rightIV, (three = new ThreeSets()));", "+\t\t\t\tif (three.inverseBounds == null)", "+\t\t\t\t\tthree.inverseBounds = new HashMap<InferenceVariable,TypeBound>();", "+\t\t\t\tthree.inverseBounds.put(rightIV, bound);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "108b75d9a8ce9c8a30c1bc038da85c1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "commitAfterChange": "97bcb03d37eed0306db083d524a85172bf11c638", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\tactionInfo = actionInfo.mergedWith(loopingContext.initsOnContinue.unconditionalInits());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17f88b7da8b27bfaddb78d2785aa73da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Problem.java", "commitBeforeChange": "765aefb641ece984e8e3a8e814e66c7ff75e2a4d", "commitAfterChange": "87bc3aca5276736813fdee6191f13f0834fba9c7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Problem(IMarker marker)", "signatureAfterChange": " \t \tpublic Problem(IMarker marker)", "diff": ["+\t\tthis.generatedBy = marker.getAttribute(IMarker.GENERATED_BY, \"missing\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bfca10f5a7786ebd89a96a1ef052178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "commitAfterChange": "eba08540864c5a072bab6eda44e20e08ad2dd7a0", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void resolveReceiver()", "signatureAfterChange": "  \tpublic void resolveReceiver()", "diff": ["+\t\t\tthis.receiver = null;", "+\t\t\t\tthis.receiver = null;", "-\t\t}", "-", "-\t\tif (enclosingReceiver != resolvedReceiverType) {", "-\t\t\tthis.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);", "+", "+\t\tif (enclosingReceiver != resolvedReceiverType) {", "+\t\t\tthis.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);", "+\t\t\tthis.receiver = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "200fcc61d348b10c10c865070a9b1bb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PossibleMatch.java", "commitBeforeChange": "3f9a272754f4dbcde614fed0b8e02a6b49fdf380", "commitAfterChange": "07ee10ab5650bcb39d86bc9b77c1572a63409b02", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void cleanUp()", "signatureAfterChange": " public void cleanUp()", "diff": ["+\tthis.parsedUnit.cleanUp();", "+\tthis.parsedUnit = null;", "+\tthis.nodeSet = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2189e423ed32617dc76d57405f161262", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MemberDeclarationVisitor.java", "commitBeforeChange": "d3b637377447f913b7000084f8fd9e55ccfded7f", "commitAfterChange": "cb427a264844cc5a28a0c6c1272631ddfca57b2a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public MemberDeclarationVisitor(IJavaElement element, ASTNode[] nodes, MatchingNodeSet set, MatchLocator locator, boolean typeInHierarchy)", "signatureAfterChange": "  public MemberDeclarationVisitor(IJavaElement element, ASTNode[] nodes, MatchingNodeSet set, MatchLocator locator, boolean typeInHierarchy)", "diff": ["+\tthis.occurrencesCounts = new HashtableOfIntValues();", "+\tthis.inTypeOccurrencesCounts = this.locator.inTypeOccurrencesCounts;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a0ba31b48a07f73ab219c46e6a6e07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void createTag()", "signatureAfterChange": " protected void createTag()", "diff": ["-\tFormatJavadocBlock block = new FormatJavadocBlock(this.tagSourceStart, this.tagSourceEnd, lineStart, this.tagValue);", "+\t\tFormatJavadocBlock block = new FormatJavadocBlock(this.inlineTagStart, this.tagSourceEnd, lineStart, this.tagValue);", "+\t\tFormatJavadocBlock block = new FormatJavadocBlock(this.tagSourceStart, this.tagSourceEnd, lineStart, this.tagValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3351db70674043f3ebe781665b9e7647", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "02cc1617576471754d22a4f416fa1c9e6213c359", "commitAfterChange": "eadaeb8797deee6ed5a07dc72e07c5daa8ca2814", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected IJavaElement getHandleFromMementoForSourceMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException", "signatureAfterChange": " protected IJavaElement getHandleFromMementoForSourceMembers(String memento, IPackageFragmentRoot root, int rootEnd, int end) throws JavaModelException", "diff": ["-\t\t//import declaration", "-\t\treturn cu.getImport(memento.substring(end + 1));", "+\t\tif (memento.length() == end + 1) {", "+\t\t\t// import container", "+\t\t\treturn cu.getImportContainer();", "+\t\t} else {", "+\t\t\t//import declaration with container", "+\t\t\treturn cu.getImport(memento.substring(end + 1));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f43b860d8dfc147e630b86da9fb278", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void setAST(AST ast)", "signatureAfterChange": " \t \tpublic void setAST(AST ast)", "diff": ["+\t\tthis.docParser = new DocCommentParser(this.ast, this.scanner, this.insideComments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d43ec5b3f931ee81bd0c1837df2bd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "08c130b51e222d1dc818f74430195d7cc0d9ba9c", "commitAfterChange": "f44833f9e9c6c61508713666b8c272384401715c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "signatureAfterChange": "  \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["-\t\t\t\ttypeDeclaration = BinaryTypeConverter.buildTypeDeclaration(type, compilationUnit, compilationResult, null/*no need to remember type names*/);", "+\t\t\t\ttypeDeclaration = new BinaryTypeConverter(this.parser.problemReporter(), compilationResult, null/*no need to remember type names*/).buildTypeDeclaration(type, compilationUnit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dd3d7b27df049c603803895eaceb675", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "35171539b48ed9848c6e1b744996c55db720d290", "commitAfterChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\t\t\t\tif (fieldBinding.isValidBinding()) {", "+\t\t\t\t\t\t\t// When the binding is not on a field (e.g. local variable), we need to create a problem field binding to report the correct problem", "+\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=254825", "+\t\t\t\t\t\t\tfieldBinding = new ProblemFieldBinding(refBinding, fieldBinding.readableName(), ProblemReasons.NotFound);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "421ee2942b8bc7ff97a701db5bc866b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "f7a4fed5e12ddd792bfd11e8778f8c9b3112f624", "commitAfterChange": "e10de2c4a1110dda4676cb780e20b994bb7f5186", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["+\t\tif (this.isTypeVariable()) {", "+\t\t\treturn new String(this.binding.sourceName());\t\t\t", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4282b4dd8620c964493a31fe9422f11a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Problem.java", "commitBeforeChange": "be31a53c2323c83d56652e268a602a87f32eef5d", "commitAfterChange": "fe340d4e08886c2e5ab7c8b78c5aa34503b63a80", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic Problem(IMarker marker)", "signatureAfterChange": " \t \tpublic Problem(IMarker marker)", "diff": ["+\t\tthis.severity = marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43441671fab659c287ca52dfcc71884c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 27, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["+\tthis.lastErrorEndPositionBeforeRecovery = this.scanner.currentPosition;", "+\t\t\tthis.listTypeParameterLength = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "440d3783839b496926e68d4e391df86d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "4cd7b0042adaa5239f354bb5b89cc98c811b7e1c", "commitAfterChange": "e6a94071ba1347cd79bc7467e3bac32c94398042", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void reset(SourceTypeBinding typeBinding)", "signatureAfterChange": "  \tpublic void reset(SourceTypeBinding typeBinding)", "diff": ["+\t\tthis.isNestedType = typeBinding.isNestedType();", "+\t\tthis.missingTypes = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "487ebb7d6e2444c2cb9e9f5c9c77364b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "fdf03d60902e3229917ca4b7516b7fe343477290", "commitAfterChange": "8ec497729d4b15de5b849a168af98dc3eaa1048e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public IJavaModelStatus verify()", "signatureAfterChange": "\r public IJavaModelStatus verify()", "diff": ["+\tif (resource.isReadOnly()){\r", "+\t\treturn new JavaModelStatus(IJavaModelStatusConstants.READ_ONLY, original);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d79da5771f6049929e42b8dea5750ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "a6cbb492a9d90a25c92be484193ad866e0dc3430", "commitAfterChange": "395aa092f45c255166ead63af90ae87970c7f686", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\t\t\tif (this.textStart == -1) this.textStart = previousPosition;", "+\t\t\t\tif (this.textStart == -1) this.textStart = this.inlineTagStarted ? this.inlineTagStart : previousPosition;", "+\t\t\t\tthis.inlineTagStarted = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd120a4c3d88a936784112af1aaece3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\tthis.preIncrementsInitStateIndex =", "+\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(incrementInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62eba08c871f22354fdaf426451fb235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "e6e3682dbb91d2ddab7a0492b5ea218909cc0c5f", "commitAfterChange": "226e096303a4f2b9405125a65404515db7d8906c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \tpublic AddJarFileToIndex(\r \t\tIPath path,\r \t\tIndexManager manager,\r \t\tString projectName)", "signatureAfterChange": "\r \r \tpublic AddJarFileToIndex(\r \t\tIPath path,\r \t\tIndexManager manager,\r \t\tString projectName)", "diff": ["+\t\t\r", "+\t\tthis.timeStamp = new File(path.toOSString()).lastModified();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1176f6a867c263111daff3fa7c8d18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java", "commitBeforeChange": "a1fa0960e8bf8c2d86b0b4556cf5470457cb514c", "commitAfterChange": "0ea38f06cd1227fc139bddac2eec897cb8fbed35", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["+\t\tif (false) return new String(this.binding.computeUniqueKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf3a564012144eccdaffecd14312295", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t}", "+\t\t// enable enum support ?", "+\t\tif (this.binding.isEnum()) {", "+\t\t\tthis.enumValuesSyntheticfield = this.binding.addSyntheticFieldForEnumValues();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e1a1d2ed2601edc1c6d77fcd4a01eb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchParticipant.java", "commitBeforeChange": "a7e5a0377318e8990de8386bc8acc55a12a0ce18", "commitAfterChange": "a1910a47d306dad5de948446c853650577052be0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic final void scheduleDocumentIndexing(SearchDocument document, IPath indexLocation)", "signatureAfterChange": " \tpublic final void scheduleDocumentIndexing(SearchDocument document, IPath indexLocation)", "diff": ["+\t\tif (!indexLocation.equals(this.lastIndexLocation)) {", "+\t\t\tmanager.updateParticipant(indexLocation, containerPath);", "+\t\t\tthis.lastIndexLocation = indexLocation;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f87e3ae039d4143b449734cdce3eccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b3701536935466883c9fa1956cebd6398cfdae5f", "commitAfterChange": "6d234eae546e156ebe54139bdf2d35de0522d3ff", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public ReferenceBinding enclosingType()", "signatureAfterChange": "  public ReferenceBinding enclosingType()", "diff": ["-\tthis.enclosingType = resolveType(this.enclosingType, this.environment, false); // no raw conversion for now", "+\tthis.enclosingType = resolveUnresolvedType(this.enclosingType, this.environment, false); // no raw conversion for now", "+", "+\t// finish resolving the type", "+\tthis.enclosingType = resolveType(this.enclosingType, this.environment, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b4cf7f2285381292cdecb0a97174e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ExceptionAttribute.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tExceptionAttribute(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException", "signatureAfterChange": " \t \tExceptionAttribute(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException", "diff": ["-\t\tthis.exceptionNames = new char[exceptionLength][];", "-\t\tthis.exceptionIndexes = new int[exceptionLength];", "+\t\tthis.exceptionNames = NO_EXCEPTION_NAMES;", "+\t\tthis.exceptionIndexes = NO_EXCEPTION_INDEXES;", "+\t\tif (exceptionLength != 0) {", "+\t\t\tthis.exceptionNames = new char[exceptionLength][];", "+\t\t\tthis.exceptionIndexes = new int[exceptionLength];", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92f4517162947983c0550703b8fad107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc", "commitAfterChange": "bde9840f9573d77080a23dfde60bdb51dc549649", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " protected IStatus validateCompilationUnit()", "signatureAfterChange": " protected IStatus validateCompilationUnit(IResource resource)", "diff": ["-protected IStatus validateCompilationUnit() {", "+protected IStatus validateCompilationUnit(IResource resource) {", "-\tIResource resource = getResource();", "+\t\tif (!resource.isAccessible())", "+\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9343256a5c0ae2452eec11b66365c184", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/MemoryIndex.java", "commitBeforeChange": "b47bafb9e7d77843b8155ceeae86e8c635a464b8", "commitAfterChange": "08156cfc79f23b49be764df235698ffd6b9cb69d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void addIndexEntry(char[] category, char[] key, String documentName)", "signatureAfterChange": " void addIndexEntry(char[] category, char[] key, String documentName)", "diff": ["-\t// assumed a document was removed before its reindexed", "-\tHashtableOfObject referenceTable = (HashtableOfObject) this.docsToReferences.get(documentName);", "-\tif (referenceTable == null)", "-\t\tthis.docsToReferences.put(documentName, referenceTable = new HashtableOfObject(3));", "+\tHashtableOfObject referenceTable;", "+\tif (documentName.equals(this.lastDocumentName))", "+\t\treferenceTable = this.lastReferenceTable;", "+\telse {", "+\t\t// assumed a document was removed before its reindexed", "+\t\treferenceTable = (HashtableOfObject) this.docsToReferences.get(documentName);", "+\t\tif (referenceTable == null)", "+\t\t\tthis.docsToReferences.put(documentName, referenceTable = new HashtableOfObject(3));", "+\t\tthis.lastDocumentName = documentName;", "+\t\tthis.lastReferenceTable = referenceTable;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9883e4c012ba084875b0ede27f74cad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "35a336ae4dee8fe75706ce1a1ce1cfa86d2ad222", "commitAfterChange": "4e63b50ba3ef9bcdccdff9a2ea673562f37143e4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["+\t\t\t\t\t} else {", "+\t\t\t\t\t\tinferenceContext.inferenceKind = inferenceContext.getInferenceKind(previousMethod, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd36b5139ea6c769bdc84fd150fb9c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "6e2621b16cebac618a0b920fb0898b360d0eb4c5", "commitAfterChange": "080a42c1d10403c7486b8cde9973df6dc09a8d9d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["+\t\tthis.numberOfIndentations = 0;", "+\t\tthis.useTabsOnlyForLeadingIndents = formatter.preferences.use_tabs_only_for_leading_indentations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a25e588e6b174188a2e7c092932c3ade", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "93b9a714e06865506483806f65cbe1e5a927344c", "commitAfterChange": "3af157fbd00b58fecb02a576cde9c4829d0022e5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void consumeParameterizedMethod()", "signatureAfterChange": "  \tpublic void consumeParameterizedMethod()", "diff": ["-\t\tif (arguments.length != this.methodBinding.typeVariables().length) return;", "-\t \tthis.methodBinding = new ParameterizedGenericMethodBinding(this.methodBinding, arguments, this.environment);", "+\t\tif (arguments.length != this.methodBinding.typeVariables().length)", "+\t\t\tthis.methodBinding = new ParameterizedGenericMethodBinding(this.methodBinding, (RawTypeBinding) null, this.environment);", "+\t\telse", "+\t \t\tthis.methodBinding = new ParameterizedGenericMethodBinding(this.methodBinding, arguments, this.environment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff58fe4c71b702f596a27ec685b0ddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "24134b187b46ea16212a45107324227f46ba3e4a", "commitAfterChange": "496121d0ad975842fb45544aac592b8195531ce7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      \tScribe(CodeFormatterVisitor formatter, long sourceLevel, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": " \t \tScribe(CodeFormatterVisitor formatter, long sourceLevel, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-    ", "+\t", "+\t\tthis.formatBlockComment = formatter.preferences.comment_format_block_comment;", "+\t\tthis.formatJavadocComment = formatter.preferences.comment_format_javadoc_comment;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24063e9bd81e734fdcbf502ade92ac9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "0de5167791884524f72d9d44c10f0e243af65d00", "commitAfterChange": "07ab76f69fbeeb2f2fd54cdf3d01ee69344b9ae0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["+\t\tif (JavaCore.getPlugin() == null) {", "+\t\t\treturn null;", "+\t\t}", "+\t\tif (!defaultBindingResolver.fromJavaProject) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d3e8e975b5f0be37cd5739387e3338", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "06bdd90ec7e06ca246dfe4e05efc41d151db72d4", "commitAfterChange": "2b9df464fe844bb540314d6f9bc7e8d8d047b8ca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r protected void cleanUp()", "signatureAfterChange": "\r \r protected void cleanUp()", "diff": ["+\tthis.outputFolder = null;\r", "+\tthis.sourceFolders = null;\r", "+\tthis.notifier = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef140ee1facb6d88864b221cbb6dcce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "b3701536935466883c9fa1956cebd6398cfdae5f", "commitAfterChange": "6d234eae546e156ebe54139bdf2d35de0522d3ff", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "  public ReferenceBinding superclass()", "signatureAfterChange": "  public ReferenceBinding superclass()", "diff": ["-\tthis.superclass = resolveType(this.superclass, this.environment, true);", "+\tthis.superclass = resolveUnresolvedType(this.superclass, this.environment, true);", "+", "+\t// finish resolving the type", "+\tthis.superclass = resolveType(this.superclass, this.environment, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6274278dacfa2b91eaedad923d92859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java", "commitBeforeChange": "16486324218fad60934c025811e59187619168a1", "commitAfterChange": "6b27e4ec47f5e8fc929980b6a223bd25dd98d95d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic CodeSnippetCompiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tCompilerOptions compilerOptions, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tEvaluationContext evaluationContext, \t\tint codeSnippetStart, \t\tint codeSnippetEnd)", "signatureAfterChange": " \tpublic CodeSnippetCompiler(     \t\tINameEnvironment environment,     \t\tIErrorHandlingPolicy policy,     \t\tCompilerOptions compilerOptions,     \t\tICompilerRequestor requestor,     \t\tIProblemFactory problemFactory,     \t\tEvaluationContext evaluationContext,     \t\tint codeSnippetStart,     \t\tint codeSnippetEnd)", "diff": ["-\t\tINameEnvironment environment,", "-\t\tIErrorHandlingPolicy policy,", "-\t\tCompilerOptions compilerOptions,", "-\t\tICompilerRequestor requestor,", "-\t\tIProblemFactory problemFactory,", "-\t\tEvaluationContext evaluationContext,", "-\t\tint codeSnippetStart,", "-\t\tint codeSnippetEnd) {", "+    \t\tINameEnvironment environment,", "+    \t\tIErrorHandlingPolicy policy,", "+    \t\tCompilerOptions compilerOptions,", "+    \t\tICompilerRequestor requestor,", "+    \t\tIProblemFactory problemFactory,", "+    \t\tEvaluationContext evaluationContext,", "+    \t\tint codeSnippetStart,", "+    \t\tint codeSnippetEnd) {", "+\t\tthis.codeSnippetStart = codeSnippetStart;", "+\t\tthis.codeSnippetEnd = codeSnippetEnd;", "+\t\tthis.evaluationContext = evaluationContext;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9787c8cbaa5ecae37bfbb223fa9daaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t// do nothing", "+\t\tif (!flowInfo.isReachable()) return;", "+", "+\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "+\t\tthis.codegenBinding = this.binding.original();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e7abef5511c210acc3928cd6cea46b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Problem.java", "commitBeforeChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "commitAfterChange": "b9f6281b56af6781d8bb8cc727077eb3dccaebba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Problem(IMarker marker, boolean storeRange)", "signatureAfterChange": " \t \tpublic Problem(IMarker marker)", "diff": ["-\t", "-\tpublic Problem(IMarker marker, boolean storeRange){", "+\tpublic Problem(IMarker marker){", "-\t\tif (storeRange) {", "-\t\t\tthis.start = marker.getAttribute(IMarker.CHAR_START, -1);", "-\t\t\tthis.end = marker.getAttribute(IMarker.CHAR_END, -1);", "-\t\t}", "+\t\tthis.start = marker.getAttribute(IMarker.CHAR_START, -1);", "+\t\tthis.end = marker.getAttribute(IMarker.CHAR_END, -1);", "+\t\tthis.categoryId = marker.getAttribute(IJavaModelMarker.CATEGORY_ID, -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ab54f8d83c0a63a686c5993ae8407a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "c79bfbeb67e4687c48de7885eb121ce1ea14c01f", "commitAfterChange": "ff61aa704b87289ea0c126beac8453107bd32bdf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d800ea33b3f44d3a13df7df08e679326", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = true;", "+\t\t\t\tthis.shapeAnalysisComplete = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db96c89c3e345f32898722fefdb61c50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c2912b3343d5d7bd21605fce7bad3b1e54e88d72", "commitAfterChange": "00000b60f562c2a527973770ffa6c4e4b7e3b76a", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " \t \tprivate void completionOnQualifiedNameReference(ASTNode astNode, ASTNode enclosingNode, Binding qualifiedBinding, \t\t\tScope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate void completionOnQualifiedNameReference(ASTNode astNode, ASTNode enclosingNode, Binding qualifiedBinding, \t\t\tScope scope, boolean insideTypeAnnotation)", "diff": ["+\t\tthis.assistNodeIsInsideCase = assistNodeIsInsideCase(astNode, this.parser.assistNodeParent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce400d102c2073deeef3ef7e0a1da47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        this.freeParameters = descriptorParameters;", "+        \t\tthis.freeParameters = parameters;", "+        \t// TODO: simplify by using this.freeParameters?", "+        this.freeParameters = null; // not used after method lookup"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "def72013fc59b3499c4be105823e3dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "fad70fad160a461bc630e1188b3b9271b0e498b3", "commitAfterChange": "f3b3b039a9cb780d64af50b4e3f7d1794251c97d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testPerfSearchAllTypeNamesAndReconcile() throws CoreException", "signatureAfterChange": " public void _testPerfSearchAllTypeNamesAndReconcile() throws CoreException", "diff": ["-public void testPerfSearchAllTypeNamesAndReconcile() throws CoreException {", "+public void _testPerfSearchAllTypeNamesAndReconcile() throws CoreException {", "+\tthis.scope = SearchEngine.createJavaSearchScope(new IJavaElement[] { JDT_CORE_PROJECT });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e20d843a00275717c08deb810227fe40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["+\t\t\tthis.bits |= (typeArgument.bits & ASTNode.HasTypeAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a8249d7c0a13702d0a375b623652b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/MemoryIndex.java", "commitBeforeChange": "b47bafb9e7d77843b8155ceeae86e8c635a464b8", "commitAfterChange": "08156cfc79f23b49be764df235698ffd6b9cb69d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void remove(String documentName)", "signatureAfterChange": " void remove(String documentName)", "diff": ["+\tif (documentName.equals(this.lastDocumentName)) {", "+\t\tthis.lastDocumentName = null;", "+\t\tthis.lastReferenceTable = null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4b0540339c3dc228d4bc25369ce5d50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "59d0523f07daac63f46fba5f692e81ca7475b921", "commitAfterChange": "fc631eac8247f4cba02ab7d6313a8c4a9fd9bc07", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic String getEmptyLines(int linesNumber)", "signatureAfterChange": "  \tpublic String getEmptyLines(int linesNumber)", "diff": ["+\t\t\t\t\tthis.column = 1;", "+\t\t\t\t\tthis.column = 1;", "+\t\t\t\t\tthis.column = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68d894b9ef8e0cd926ce9c39a6119f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 91, "signatureBeforeChange": " protected void consumeClassHeaderExtends()", "signatureAfterChange": " protected void consumeClassHeaderExtends()", "diff": ["+\ttypeDecl.bits |= (superClass.bits & ASTNode.HasTypeAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e784d79021660a52f1938845c38377c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "4facfcdf4a36f611ae455f345faa2a13f779251b", "commitAfterChange": "9b4626a240c7fe9f3a95f4bc274592915f73c7ef", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void enterMethod(MethodInfo methodInfo)", "signatureAfterChange": " public void enterMethod(MethodInfo methodInfo)", "diff": ["+\tinfo.defaultAnnotationValue = methodInfo.isAnnotation ? CharOperation.NO_CHAR : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ee9d497a6509b5644275cbdbba079b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "13917151fd6e90489d7ba2ed9db47ea52955dbf3", "commitAfterChange": "6700b422a8787d37548be5985e1cd2622693b52e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic SearchableEnvironment(IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic SearchableEnvironment(IJavaProject project) throws JavaModelException", "diff": ["+\r", "+\t\t// Create search scope with visible entry on the project's classpath\r", "+\t\tthis.searchScope = SearchEngine.createJavaSearchScope(this.project.getAllPackageFragmentRoots());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19c25782080c55c1325054a51c6cd0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "05924b2c1a07ba8486df2aefea7b66275c39b6ac", "commitAfterChange": "2e8a793e6520c6e6e15de28a5b1851796222737d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \t@Override \tpublic PackageElement getPackageElement(CharSequence name)", "signatureAfterChange": "  \t@Override \tpublic PackageElement getPackageElement(CharSequence name)", "diff": ["+\t\tif (name.length() == 0) {", "+\t\t\treturn new PackageElementImpl(le.defaultPackage);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c8aff0540bfbbf8da1a95d00ddeb28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "commitAfterChange": "fa21cd6aeaa1a869dfb2e04b84f1503263072dbf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tthis.preConditionInitStateIndex = currentScope.methodScope().recordInitializationStates(actionInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc92694e668e1ad1e5a2e3b7e808faa3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic void reset(int[] positionsToMapValue)", "signatureAfterChange": "  \tpublic void reset(int[] positionsToMapValue)", "diff": ["+\t\t} else {", "+\t\t\tthis.positionsToMap = null;", "+\t\t\tthis.positionsIndex = 0;", "+\t\t\tthis.mappedPositions = null;"]}], "num": 48491}
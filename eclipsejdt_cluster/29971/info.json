{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b18fc3bf4b4cc82f3dcf5bbdbe31dd2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0347162f84a9c0fda289f898d00338f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "4f3f39945f1ee27fc0ddd600cc6447ef1dfcd7a8", "commitAfterChange": "4e652bbe11383e976d60d20e3975e9453afa72ca", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r public void testDefault07_bin()", "signatureAfterChange": "\r public void testDefault07_bin()", "diff": ["-\t\t\"----------\\n\" +  // FIXME: this should not be a warning, a case of unrecognized boxing\r", "+\t\t\"----------\\n\" +\r", "+\t\t\"----------\\n\" + \r", "+\t\t\"2. ERROR in Y.java (at line 5)\\n\" + \r", "+\t\t\"\t@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\\n\" + \r", "+\t\t\"\t                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + \r", "+\t\t\"Null type mismatch (type annotations): required \\'List<? extends @NonNull Number>\\' but this expression has type \\'ArrayList<@Nullable Integer>\\', corresponding supertype is \\'List<@Nullable Integer>\\'\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc9ad466bd1bdf3246d1c30b79bfc06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testNullTypeInference2f()", "signatureAfterChange": " \tpublic void testNullTypeInference2f()", "diff": ["-\t\t\t\"1. WARNING in PolyNull.java (at line 9)\\n\" + ", "+\t\t\t\"1. ERROR in PolyNull.java (at line 7)\\n\" + ", "+\t\t\t\"\t<X> X extract(Func<@Nullable X> f, @Nullable X s) { return f.a(s); }\\n\" + ", "+\t\t\t\"\t                                                           ^^^^^^\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'X\\' but this expression has type \\'@Nullable X\\', where 'X' is a free type variable\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in PolyNull.java (at line 9)\\n\" + ", "-\t\t\t\"2. ERROR in PolyNull.java (at line 9)\\n\" + ", "+\t\t\t\"3. ERROR in PolyNull.java (at line 9)\\n\" + "]}], "num": 29971}
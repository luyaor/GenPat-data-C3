{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87e26a551ff4ce6d9add26b53ff75c8d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fd2f6645994326b49ad2308a0cb6fef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void generateBoxingConversion(int unboxedTypeID)", "signatureAfterChange": " public void generateBoxingConversion(int unboxedTypeID)", "diff": ["+}", "+public void generateBoxingConversion(int unboxedTypeID) {", "+    switch (unboxedTypeID) {", "+        case TypeIds.T_byte :", "+            if (this.targetLevel >= ClassFileConstants.JDK1_5) {", "+    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Byte.valueOf(byte)\"); //$NON-NLS-1$", "+               // invokestatic: Byte.valueOf(byte)", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangByteConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.byteByteSignature);", "+            } else {", "+               // new Byte( byte )", "+    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Byte(byte)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangByteConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.ByteConstrSignature);", "+            }       ", "+            break;", "+        case TypeIds.T_short :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Short.valueOf(short)", "+    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Short.valueOf(short)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangShortConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.shortShortSignature);", "+            } else {", "+                // new Short(short)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Short(short)\"); //$NON-NLS-1$", "+            \tnewWrapperFor(unboxedTypeID);                ", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangShortConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.ShortConstrSignature);     ", "+            }", "+            break;", "+        case TypeIds.T_char :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Character.valueOf(char)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Character.valueOf(char)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangCharacterConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.charCharacterSignature);", "+            } else {", "+                // new Char( char )", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Character(char)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangCharacterConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.CharConstrSignature);", "+            }       ", "+            break;", "+        case TypeIds.T_int :             ", "+            if (this.targetLevel >= ClassFileConstants.JDK1_5) {", "+                // invokestatic: Integer.valueOf(int)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Integer.valueOf(int)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangIntegerConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.IntIntegerSignature);", "+            } else {", "+                // new Integer(int)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Integer(int)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangIntegerConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.IntConstrSignature);", "+            }", "+            break;", "+        case TypeIds.T_long :", "+            if (this.targetLevel >= ClassFileConstants.JDK1_5) { ", "+                // invokestatic: Long.valueOf(long)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Long.valueOf(long)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    2, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangLongConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.longLongSignature);", "+            } else {", "+                // new Long( long )", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Long(long)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x2();", "+                dup_x2();", "+                pop();", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    2, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangLongConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.LongConstrSignature);", "+            }                   ", "+            break;", "+        case TypeIds.T_float :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Float.valueOf(float)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Float.valueOf(float)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangFloatConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.floatFloatSignature);", "+            } else {", "+                // new Float(float)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Float(float)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangFloatConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.FloatConstrSignature);", "+            }       ", "+            break;", "+        case TypeIds.T_double :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) { ", "+                // invokestatic: Double.valueOf(double)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Double.valueOf(double)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    2, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangDoubleConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.doubleDoubleSignature);", "+            } else {", "+                // new Double( double )", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Double(double)\"); //$NON-NLS-1$", "+            \tnewWrapperFor(unboxedTypeID);                ", "+                dup_x2();", "+                dup_x2();", "+                pop();", "+                ", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    2, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangDoubleConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.DoubleConstrSignature);", "+            }       ", "+            ", "+            break;  ", "+        case TypeIds.T_boolean :", "+            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "+                // invokestatic: Boolean.valueOf(boolean)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Boolean.valueOf(boolean)\"); //$NON-NLS-1$", "+                this.invoke(", "+                    Opcodes.OPC_invokestatic,", "+                    1, // argCount", "+                    1, // return type size", "+                    ConstantPool.JavaLangBooleanConstantPoolName,", "+                    ConstantPool.ValueOf,", "+                    ConstantPool.booleanBooleanSignature);", "+            } else {", "+                // new Boolean(boolean)", "+            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Boolean(boolean)\"); //$NON-NLS-1$", "+                newWrapperFor(unboxedTypeID);", "+                dup_x1();", "+                swap();             ", "+                this.invoke(", "+                    Opcodes.OPC_invokespecial,", "+                    1, // argCount", "+                    0, // return type size", "+                    ConstantPool.JavaLangBooleanConstantPoolName,", "+                    ConstantPool.Init,", "+                    ConstantPool.BooleanConstrSignature);", "+            }", "+    }", "-public void generateBoxingConversion(int unboxedTypeID) {", "-    switch (unboxedTypeID) {", "-        case T_byte :", "-            if (this.targetLevel >= ClassFileConstants.JDK1_5) {", "-    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Byte.valueOf(byte)\"); //$NON-NLS-1$", "-               // invokestatic: Byte.valueOf(byte)", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    1, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangByteConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.byteByteSignature);", "-            } else {", "-               // new Byte( byte )", "-    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Byte(byte)\"); //$NON-NLS-1$", "-                newWrapperFor(unboxedTypeID);", "-                dup_x1();", "-                swap();", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    1, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangByteConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.ByteConstrSignature);", "-            }       ", "-            break;", "-        case T_short :", "-            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "-                // invokestatic: Short.valueOf(short)", "-    \t\t\tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Short.valueOf(short)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    1, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangShortConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.shortShortSignature);", "-            } else {", "-                // new Short(short)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Short(short)\"); //$NON-NLS-1$", "-            \tnewWrapperFor(unboxedTypeID);                ", "-                dup_x1();", "-                swap();             ", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    1, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangShortConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.ShortConstrSignature);     ", "-            }", "-            break;", "-        case T_char :", "-            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "-                // invokestatic: Character.valueOf(char)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Character.valueOf(char)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    1, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangCharacterConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.charCharacterSignature);", "-            } else {", "-                // new Char( char )", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Character(char)\"); //$NON-NLS-1$", "-                newWrapperFor(unboxedTypeID);", "-                dup_x1();", "-                swap();", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    1, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangCharacterConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.CharConstrSignature);", "-            }       ", "-            break;", "-        case T_int :             ", "-            if (this.targetLevel >= ClassFileConstants.JDK1_5) {", "-                // invokestatic: Integer.valueOf(int)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Integer.valueOf(int)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    1, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangIntegerConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.IntIntegerSignature);", "-            } else {", "-                // new Integer(int)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Integer(int)\"); //$NON-NLS-1$", "-                newWrapperFor(unboxedTypeID);", "-                dup_x1();", "-                swap();             ", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    1, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangIntegerConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.IntConstrSignature);", "-            }", "-            break;", "-        case T_long :", "-            if (this.targetLevel >= ClassFileConstants.JDK1_5) { ", "-                // invokestatic: Long.valueOf(long)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Long.valueOf(long)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    2, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangLongConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.longLongSignature);", "-            } else {", "-                // new Long( long )", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Long(long)\"); //$NON-NLS-1$", "-                newWrapperFor(unboxedTypeID);", "-                dup_x2();", "-                dup_x2();", "-                pop();", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    2, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangLongConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.LongConstrSignature);", "-            }                   ", "-            break;", "-        case T_float :", "-            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "-                // invokestatic: Float.valueOf(float)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Float.valueOf(float)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    1, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangFloatConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.floatFloatSignature);", "-            } else {", "-                // new Float(float)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Float(float)\"); //$NON-NLS-1$", "-                newWrapperFor(unboxedTypeID);", "-                dup_x1();", "-                swap();             ", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    1, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangFloatConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.FloatConstrSignature);", "-            }       ", "-            break;", "-        case T_double :", "-            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) { ", "-                // invokestatic: Double.valueOf(double)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Double.valueOf(double)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    2, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangDoubleConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.doubleDoubleSignature);", "-            } else {", "-                // new Double( double )", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Double(double)\"); //$NON-NLS-1$", "-            \tnewWrapperFor(unboxedTypeID);                ", "-                dup_x2();", "-                dup_x2();", "-                pop();", "-                ", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    2, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangDoubleConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.DoubleConstrSignature);", "-            }       ", "-            ", "-            break;  ", "-        case T_boolean :", "-            if ( this.targetLevel >= ClassFileConstants.JDK1_5 ) {", "-                // invokestatic: Boolean.valueOf(boolean)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokestatic java.lang.Boolean.valueOf(boolean)\"); //$NON-NLS-1$", "-                this.invoke(", "-                    OPC_invokestatic,", "-                    1, // argCount", "-                    1, // return type size", "-                    ConstantPool.JavaLangBooleanConstantPoolName,", "-                    ConstantPool.ValueOf,", "-                    ConstantPool.booleanBooleanSignature);", "-            } else {", "-                // new Boolean(boolean)", "-            \tif (DEBUG) System.out.println(position + \"\\t\\tinvokespecial java.lang.Boolean(boolean)\"); //$NON-NLS-1$", "-                newWrapperFor(unboxedTypeID);", "-                dup_x1();", "-                swap();             ", "-                this.invoke(", "-                    OPC_invokespecial,", "-                    1, // argCount", "-                    0, // return type size", "-                    ConstantPool.JavaLangBooleanConstantPoolName,", "-                    ConstantPool.Init,", "-                    ConstantPool.BooleanConstrSignature);", "-            }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63213a99c0caf100f5c360600e83cd58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f32db68c729263506f55f86cbc0d190382ce9b72", "commitAfterChange": "3eb060c9534fa433113cc21253ee7307d78379c2", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r public int computeSeverity(int problemId)", "signatureAfterChange": "\r public int computeSeverity(int problemId)", "diff": ["-\t\t\tif ((errorThreshold & UnreachableCode) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.UnreachableCode) != 0){\r", "-\t\t\tif ((warningThreshold & UnreachableCode) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.UnreachableCode) != 0){\r", "-\t\t\tif ((errorThreshold & MaskedCatchBlock) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.MaskedCatchBlock) != 0){\r", "-\t\t\tif ((warningThreshold & MaskedCatchBlock) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.MaskedCatchBlock) != 0){\r", "-\t\t\tif ((errorThreshold & ImportProblem) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.ImportProblem) != 0){\r", "-\t\t\tif ((warningThreshold & ImportProblem) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.ImportProblem) != 0){\r", "-\t\t\tif ((errorThreshold & MethodWithConstructorName) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.MethodWithConstructorName) != 0){\r", "-\t\t\tif ((warningThreshold & MethodWithConstructorName) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.MethodWithConstructorName) != 0){\r", "-\t\t\tif ((errorThreshold & OverriddenPackageDefaultMethod) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.OverriddenPackageDefaultMethod) != 0){\r", "-\t\t\tif ((warningThreshold & OverriddenPackageDefaultMethod) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.OverriddenPackageDefaultMethod) != 0){\r", "-\t\t\tif ((errorThreshold & UsingDeprecatedAPI) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.UsingDeprecatedAPI) != 0){\r", "-\t\t\tif ((warningThreshold & UsingDeprecatedAPI) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.UsingDeprecatedAPI) != 0){\r", "-\t\t\tif ((errorThreshold & UnusedLocalVariable) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.UnusedLocalVariable) != 0){\r", "-\t\t\tif ((warningThreshold & UnusedLocalVariable) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.UnusedLocalVariable) != 0){\r", "-\t\t\tif ((errorThreshold & UnusedArgument) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.UnusedArgument) != 0){\r", "-\t\t\tif ((warningThreshold & UnusedArgument) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.UnusedArgument) != 0){\r", "-\t\t\tif ((errorThreshold & TemporaryWarning) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.NoImplicitStringConversion) != 0){\r", "-\t\t\tif ((warningThreshold & TemporaryWarning) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.NoImplicitStringConversion) != 0){\r", "-\t\t\tif ((errorThreshold & AccessEmulation) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.AccessEmulation) != 0){\r", "-\t\t\tif ((warningThreshold & AccessEmulation) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.AccessEmulation) != 0){\r", "-\t\t\tif ((errorThreshold & NonExternalizedString) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.NonExternalizedString) != 0){\r", "-\t\t\tif ((warningThreshold & NonExternalizedString) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.NonExternalizedString) != 0){\r", "-\t\t\tif ((errorThreshold & AssertUsedAsAnIdentifier) != 0){\r", "+\t\t\tif ((errorThreshold & CompilerOptions.AssertUsedAsAnIdentifier) != 0){\r", "-\t\t\tif ((warningThreshold & AssertUsedAsAnIdentifier) != 0){\r", "+\t\t\tif ((warningThreshold & CompilerOptions.AssertUsedAsAnIdentifier) != 0){\r"]}], "num": 15445}
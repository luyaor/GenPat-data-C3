{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b019bff9d645ed1416eedb11de0c3c61", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3286f255a3958377f0d1c2a898654c5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "commitAfterChange": "c4ce580cb0d1d41b788a7611bd30d4cf0eba4f86", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void unsafeWildcardAssignment(TypeBinding variableType, TypeBinding expressionType, ASTNode location)", "signatureAfterChange": " public void wildcardAssignment(TypeBinding variableType, TypeBinding expressionType, ASTNode location)", "diff": ["-}", "-public void unsafeWildcardAssignment(TypeBinding variableType, TypeBinding expressionType, ASTNode location) {", "-\tthis.handle(", "-\t\tIProblem.WildcardFieldAssignment,", "-\t\tnew String[] { ", "-\t\t        new String(expressionType.readableName()), new String(variableType.readableName()) },", "-\t\tnew String[] { ", "-\t\t        new String(expressionType.shortReadableName()), new String(variableType.shortReadableName()) },", "-\t\tlocation.sourceStart,", "-\t\tlocation.sourceEnd);    ", "+}", "+public void wildcardAssignment(TypeBinding variableType, TypeBinding expressionType, ASTNode location) {", "+\tthis.handle(", "+\t\tIProblem.WildcardFieldAssignment,", "+\t\tnew String[] { ", "+\t\t        new String(expressionType.readableName()), new String(variableType.readableName()) },", "+\t\tnew String[] { ", "+\t\t        new String(expressionType.shortReadableName()), new String(variableType.shortReadableName()) },", "+\t\tlocation.sourceStart,", "+\t\tlocation.sourceEnd);    ", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cdd3c3717d5823c2c250e5ee7451a83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5830f34f316eb59740b3f5242c08f1b46d8edf90", "commitAfterChange": "d9d1b97f49560324c7b848690f93b474a074ee07", "methodNumberBeforeChange": 328, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void unnecessaryCastForArgument(CastExpression castExpression, TypeBinding parameterType)", "signatureAfterChange": " public void enumSwitchCannotTargetField(Reference reference, FieldBinding field)", "diff": ["+public void enumSwitchCannotTargetField(Reference reference, FieldBinding field) {", "+\tthis.handle(", "+\t\t\tIProblem.EnumSwitchCannotTargetField,", "+\t\t\tnew String[]{ String.valueOf(field.declaringClass.readableName()), String.valueOf(field.name) },", "+\t\t\tnew String[]{ String.valueOf(field.declaringClass.shortReadableName()), String.valueOf(field.name) },", "+\t\t\treference.sourceStart,", "+\t\t\treference.sourceEnd);\t", "+}", "-}", "-public void unnecessaryCastForArgument(CastExpression castExpression, TypeBinding parameterType) {", "-\tTypeBinding castedExpressionType = castExpression.expression.resolvedType;", "-\tthis.handle(", "-\t\tIProblem.UnnecessaryArgumentCast,", "-\t\tnew String[]{ new String(castedExpressionType.readableName()), new String(castExpression.resolvedType.readableName()), new String(parameterType.readableName())},", "-\t\tnew String[]{ new String(castedExpressionType.shortReadableName()), new String(castExpression.resolvedType.shortReadableName()), new String(parameterType.shortReadableName())},"]}], "num": 7451}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fbb5a6da1a1affce2c5d472bee0c383", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f559a17d901ccea1d77dec881a6af0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testMethod1() throws JavaModelException", "signatureAfterChange": " \tpublic void testMethod1() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testMethod1() throws JavaModelException {", "-\t\tASTNode node = buildAST(", "-\t\t\t\"public class X<K, V> {\\n\" +", "-\t\t\t\"  /*start*/void foo(int i, Object o, java.lang.String s, Class[] c, X<K, V> x) {\\n\" +", "-\t\t\t\"  }/*end*/\\n\" +", "-\t\t\t\"}\"", "-\t\t);", "-\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "-\t\tassertNotNull(\"No binding\", binding);", "-\t\tIJavaElement element = binding.getJavaElement();", "-\t\tassertElementEquals(", "-\t\t\t\"Unexpected Java element\",", "-\t\t\t\"foo(int, Object, java.lang.String, Class[], X<K,V>) [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\telement", "-\t\t);", "-\t\tassertTrue(\"Element should exist\", element.exists());", "-\t}", "+\tpublic void testMethod1() throws JavaModelException {", "+\t\tASTNode node = buildAST(", "+\t\t\t\"public class X<K, V> {\\n\" +", "+\t\t\t\"  /*start*/void foo(int i, Object o, java.lang.String s, Class[] c, X<K, V> x) {\\n\" +", "+\t\t\t\"  }/*end*/\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tIJavaElement element = binding.getJavaElement();", "+\t\tassertElementEquals(", "+\t\t\t\"Unexpected Java element\",", "+\t\t\t\"foo(int, Object, java.lang.String, Class[], X<K,V>) [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]\",", "+\t\t\telement", "+\t\t);", "+\t\tassertTrue(\"Element should exist\", element.exists());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d1d4b1438957adf9274b706c8ad27e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java", "commitBeforeChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "commitAfterChange": "de2cee4ff7b76fb31a04f1c1b724977d8ef8d10e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testMethod2() throws JavaModelException", "signatureAfterChange": " \tpublic void testMethod2() throws JavaModelException", "diff": ["-\t */", "-\tpublic void testMethod2() throws JavaModelException {", "-\t\tASTNode node = buildAST(", "-\t\t\t\"public class X<K, V> {\\n\" +", "-\t\t\t\"  /*start*/void foo() {\\n\" +", "-\t\t\t\"  }/*end*/\\n\" +", "-\t\t\t\"}\"", "-\t\t);", "-\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "-\t\tassertNotNull(\"No binding\", binding);", "-\t\tIJavaElement element = binding.getJavaElement();", "-\t\tassertElementEquals(", "-\t\t\t\"Unexpected Java element\",", "-\t\t\t\"foo() [in X [in [Working copy] X.java [in <default> [in <project root> [in P]]]]]\",", "-\t\t\telement", "-\t\t);", "-\t\tassertTrue(\"Element should exist\", element.exists());", "-\t}", "+\t */", "+\tpublic void testMethod2() throws JavaModelException {", "+\t\tASTNode node = buildAST(", "+\t\t\t\"public class X<K, V> {\\n\" +", "+\t\t\t\"  /*start*/void foo() {\\n\" +", "+\t\t\t\"  }/*end*/\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tIBinding binding = ((MethodDeclaration) node).resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tIJavaElement element = binding.getJavaElement();", "+\t\tassertElementEquals(", "+\t\t\t\"Unexpected Java element\",", "+\t\t\t\"foo() [in X [in [Working copy] X.java [in <default> [in src [in P]]]]]\",", "+\t\t\telement", "+\t\t);", "+\t\tassertTrue(\"Element should exist\", element.exists());", "+\t}"]}], "num": 38593}
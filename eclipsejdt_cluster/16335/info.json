{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a7e957990a9e773710034948255e95e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db00468debd0012e4ce9be638e0303b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/PackageInfoTest.java", "commitBeforeChange": "234e6fc68a4dbdeda6e1afdc966808ff0b4f2216", "commitAfterChange": "7462ca5aabdc673d41eeee493b5aab83cbe328d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001() throws JavaModelException", "signatureAfterChange": " public void test001() throws JavaModelException", "diff": ["-    IPath projectPath = env.addProject(\"Project\", \"1.5\"); //$NON-NLS-1$", "-    env.addExternalJars(projectPath, Util.getJavaClassLibs());", "-    fullBuild(projectPath);", "+\tIPath projectPath = env.addProject(\"Project\", \"1.5\"); //$NON-NLS-1$", "+\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "+\tfullBuild(projectPath);", "-    // remove old package fragment root so that names don't collide", "-    env.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "+\t// remove old package fragment root so that names don't collide", "+\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "-    IPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "-    env.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "+\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "+\tenv.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "-    env.addClass(root, \"pack\", \"Annot\", //$NON-NLS-1$ //$NON-NLS-2$", "-        \"package pack;\\n\"+ //$NON-NLS-1$", "-        \"public @interface Annot {}\" //$NON-NLS-1$", "-    );", "+\tenv.addClass(root, \"pack\", \"Annot\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"package pack;\\n\" + //$NON-NLS-1$", "+\t\t\"public @interface Annot {}\" //$NON-NLS-1$", "+\t);", "-    incrementalBuild(projectPath);", "+\tincrementalBuild(projectPath);", "-    IPath packageInfoPath = env.addFile(root, \"pack/package-info.java\", //$NON-NLS-1$ //$NON-NLS-2$", "-        \"@Annot package p1\" //$NON-NLS-1$", "-    );", "+\tIPath packageInfoPath = env.addFile(root, \"pack/package-info.java\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"@Annot package p1\" //$NON-NLS-1$", "+\t);", "-    incrementalBuild(projectPath);", "-    expectingOnlyProblemsFor(packageInfoPath);", "-    final Problem[] problems = env.getProblems();", "+\tincrementalBuild(projectPath);", "+\texpectingOnlyProblemsFor(packageInfoPath);", "+\tfinal Problem[] problems = env.getProblems();", "-    assertNotNull(problems);", "-    final StringWriter stringWriter = new StringWriter();", "-    final PrintWriter writer = new PrintWriter(stringWriter);", "-    final int problemsLength = problems.length;", "-    if (problemsLength == 1) {", "-        writer.print(problems[0].getMessage());", "-    } else {", "-        for (int i = 0; i < problemsLength - 1; i++) {", "-            writer.println(problems[i].getMessage());", "-        }", "-        writer.print(problems[problemsLength - 1].getMessage());", "-    }", "-    writer.close();", "-    final String expectedOutput =", "-        \"Syntax error on token \\\"p1\\\", ; expected after this token\\n\" +", "-    \t\"The declared package \\\"p1\\\" does not match the expected package \\\"pack\\\"\";", "-    assertSourceEquals(\"Different messages\", expectedOutput, stringWriter.toString());", "+\tassertNotNull(problems);", "+\tfinal StringWriter stringWriter = new StringWriter();", "+\tfinal PrintWriter writer = new PrintWriter(stringWriter);", "+\tfinal int problemsLength = problems.length;", "+\tif (problemsLength == 1) {", "+\t\twriter.print(problems[0].getMessage());", "+\t} else {", "+\t\tfor (int i = 0; i < problemsLength - 1; i++)", "+\t\t\twriter.println(problems[i].getMessage());", "+\t\twriter.print(problems[problemsLength - 1].getMessage());", "+\t}", "+\twriter.close();", "+\tfinal String expectedOutput =", "+\t\t\"Syntax error on token \\\"p1\\\", ; expected after this token\\n\" +", "+\t\t\"The declared package \\\"p1\\\" does not match the expected package \\\"pack\\\"\";", "+\tassertSourceEquals(\"Different messages\", expectedOutput, stringWriter.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eddcc6ef3725102dba382746ff18ea15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "signatureAfterChange": "  public void testMissingLibrary2() throws JavaModelException", "diff": ["-\tpublic void testMissingLibrary2() throws JavaModelException {", "-\t\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "-\t\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "-\t\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "-\t\tIPath bin = env.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "-\t\tIPath classTest1 = env.addClass(root, \"p1\", \"Test1\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class Test1 {}\" //$NON-NLS-1$", "-\t\t);", "-\t\tIPath classTest2 = env.addClass(root, \"p2\", \"Test2\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p2;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class Test2 {}\" //$NON-NLS-1$", "-\t\t);", "-\t\tIPath classTest3 = env.addClass(root, \"p2\", \"Test3\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p2;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class Test3 {}\" //$NON-NLS-1$", "-\t\t);", "-\t\tfullBuild();", "-\t\texpectingSpecificProblemFor(", "-\t\t\tprojectPath,", "-\t\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project\", projectPath, -1, -1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t", "-\t\tProblem[] prob1 = env.getProblemsFor(classTest1);", "-\t\tProblem[] prob2 = env.getProblemsFor(classTest2);", "-\t\tProblem[] prob3 = env.getProblemsFor(classTest3);", "-\t\tassertEquals(\"too many problems\", prob1.length + prob2.length + prob3.length, 1); //$NON-NLS-1$", "-\t\tif(prob1.length == 1) {", "-\t\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest1, -1, -1, -1, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t} else if (prob2.length == 1) {", "-\t\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest2, -1, -1, -1, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t} else {", "-\t\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest3, 0, 1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t}", "-\t\t//----------------------------", "-\t\t//           Step 2", "-\t\t//----------------------------\t", "-\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "-\t\tincrementalBuild();", "-\t\texpectingNoProblems();", "-\t\texpectingPresenceOf(new IPath[]{", "-\t\t\tbin.append(\"p1\").append(\"Test1.class\"), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tbin.append(\"p2\").append(\"Test2.class\"), //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tbin.append(\"p2\").append(\"Test3.class\") //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "+", "+public void testMissingLibrary2() throws JavaModelException {", "+\tIPath projectPath = env.addProject(\"Project\"); //$NON-NLS-1$", "+\tenv.removePackageFragmentRoot(projectPath, \"\"); //$NON-NLS-1$", "+\tIPath root = env.addPackageFragmentRoot(projectPath, \"src\"); //$NON-NLS-1$", "+\tIPath bin = env.setOutputFolder(projectPath, \"bin\"); //$NON-NLS-1$", "+\tIPath classTest1 = env.addClass(root, \"p1\", \"Test1\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "+\t\t\"public class Test1 {}\" //$NON-NLS-1$", "+\t);", "+\tIPath classTest2 = env.addClass(root, \"p2\", \"Test2\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"package p2;\\n\"+ //$NON-NLS-1$", "+\t\t\"public class Test2 {}\" //$NON-NLS-1$", "+\t);", "+\tIPath classTest3 = env.addClass(root, \"p2\", \"Test3\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\"package p2;\\n\"+ //$NON-NLS-1$", "+\t\t\"public class Test3 {}\" //$NON-NLS-1$", "+\t);", "+", "+\tfullBuild();", "+\texpectingSpecificProblemFor(", "+\t\tprojectPath,", "+\t\tnew Problem(\"\", \"The project was not built since its build path is incomplete. Cannot find the class file for java.lang.Object. Fix the build path then try building this project\", projectPath, -1, -1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\tProblem[] prob1 = env.getProblemsFor(classTest1);", "+\tProblem[] prob2 = env.getProblemsFor(classTest2);", "+\tProblem[] prob3 = env.getProblemsFor(classTest3);", "+\tassertEquals(\"too many problems\", prob1.length + prob2.length + prob3.length, 1); //$NON-NLS-1$", "+\tif(prob1.length == 1) {", "+\t\texpectingSpecificProblemFor(classTest1, new Problem(\"p1\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest1, -1, -1, -1, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t} else if (prob2.length == 1) {", "+\t\texpectingSpecificProblemFor(classTest2, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest2, -1, -1, -1, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t} else {", "+\t\texpectingSpecificProblemFor(classTest3, new Problem(\"p2\", \"The type java.lang.Object cannot be resolved. It is indirectly referenced from required .class files\", classTest3, 0, 1, CategorizedProblem.CAT_BUILDPATH, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t}", "+", "+\t//----------------------------", "+\t//           Step 2", "+\t//----------------------------\t", "+\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());", "+", "+\tincrementalBuild();", "+\texpectingNoProblems();", "+\texpectingPresenceOf(new IPath[]{", "+\t\tbin.append(\"p1\").append(\"Test1.class\"), //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbin.append(\"p2\").append(\"Test2.class\"), //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tbin.append(\"p2\").append(\"Test3.class\") //$NON-NLS-1$ //$NON-NLS-2$", "+\t});", "+\tenv.removeProject(projectPath);", "+}"]}], "num": 16335}
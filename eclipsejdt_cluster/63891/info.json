{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "390385fe0d947ff669fc54053d406722", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b35ec73387de39407e316286fc638ee1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "b7b27ff488733ad97566caef0cb2bdd99a3b7b63", "commitAfterChange": "d2bf5e6bc7d5c8ce5696375ed384baae09128c52", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-\tfinal NLSLine line = this.currentLine;", "-\t\tif (line.size() == 0) return; // nothing to do", "-\t\tthis.nonNLSStrings.addAll(line.elements);", "+\t\tthis.nonNLSStrings.addAll(this.currentLine.elements);", "-\t\tif (linePtr >= 0) {", "+\t\tif (this.linePtr >= 0) {", "-\t\tchar[] s = getCurrentTokenSource();", "-\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true);", "+\t\tfinal NLSLine line = this.currentLine;", "+\t\tchar[] s = null;", "+\t\tint sourceEnd = this.currentPosition;", "+\t\tint sourceStart = this.startPosition;", "+\t\tint sourceDelta = 0;", "+\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t// 0 is used as a fast test flag so the real first char is in position 1", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.withoutUnicodeBuffer, ", "+\t\t\t\t1, ", "+\t\t\t\ts = new char[this.withoutUnicodePtr], ", "+\t\t\t\t0, ", "+\t\t\t\tthis.withoutUnicodePtr);", "+\t\t\tsourceEnd = this.withoutUnicodePtr;", "+\t\t\tsourceStart = 1;", "+\t\t\tsourceDelta = this.getCurrentTokenStartPosition();", "+\t\t} else {", "+\t\t\ts = this.source;", "+\t\t}", "+\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "+\t\tfinal int lineSize = line.size();", "-\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start);", "+\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "-\t\t\t\t\tint i = 0;", "-\t\t\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "-\t\t\t\t\t}", "-\t\t\t\t\tif (line != null && line.exists(i)) {", "-\t\t\t\t\t\tif (line.get(i) == null) {", "-\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);", "-\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "-\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "-\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "+\t\t\t\t\t\tfinal int i = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "+\t\t\t\t\t\tif (i >= 0 && i < lineSize) {", "+\t\t\t\t\t\t\tif (line.get(i) == null) {", "+\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tline.set(i, null);", "+\t\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + sourceDelta , end + sourceDelta, NLSTag.USED);", "+\t\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "+\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "+\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t} else {", "+\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\tif (line.size() != 0) {", "+\t\tif (line.remainingElementsSize != 0) {", "-\t\t\t\tStringLiteral literal = (StringLiteral) iterator.next();", "+\t\t\t\tfinal StringLiteral literal = (StringLiteral) iterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74ab8d4e1201c2c1db3f4de0b48f037", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "b7b27ff488733ad97566caef0cb2bdd99a3b7b63", "commitAfterChange": "d2bf5e6bc7d5c8ce5696375ed384baae09128c52", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-\tfinal NLSLine line = this.currentLine;", "-\t\tif (line.size() == 0) return; // nothing to do", "-\t\tthis.nonNLSStrings.addAll(line.elements);", "+\t\tthis.nonNLSStrings.addAll(this.currentLine.elements);", "-\t\tchar[] s = getCurrentTokenSource();", "-\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true);", "+\t\tint position = 0;", "+\t\tif (this.linePtr >= 0) {", "+\t\t\tposition = this.lineEnds[this.linePtr] + 1; ", "+\t\t}", "+\t\twhile (Character.isWhitespace(this.source[position])) {", "+\t\t\tposition++;", "+\t\t}", "+\t\tif (getCurrentTokenStartPosition() == position) {", "+\t\t\t// the whole line is commented out", "+\t\t\treturn;", "+\t\t}", "+\t\tfinal NLSLine line = this.currentLine;", "+\t\tchar[] s = null;", "+\t\tint sourceEnd = this.currentPosition;", "+\t\tint sourceStart = this.startPosition;", "+\t\tint sourceDelta = 0;", "+\t\tif (this.withoutUnicodePtr != 0) {", "+\t\t\t// 0 is used as a fast test flag so the real first char is in position 1", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.withoutUnicodeBuffer, ", "+\t\t\t\t1, ", "+\t\t\t\ts = new char[this.withoutUnicodePtr], ", "+\t\t\t\t0, ", "+\t\t\t\tthis.withoutUnicodePtr);", "+\t\t\tsourceEnd = this.withoutUnicodePtr;", "+\t\t\tsourceStart = 1;", "+\t\t\tsourceDelta = this.getCurrentTokenStartPosition();", "+\t\t} else {", "+\t\t\ts = this.source;", "+\t\t}", "+\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true, sourceStart, sourceEnd);", "+\t\tfinal int lineSize = line.size();", "-\t\t\tif (this.unnecessaryNONNLSTags == null) this.unnecessaryNONNLSTags = new HashSet();", "+\t\t\tif (this.unnecessaryNLSTags == null) this.unnecessaryNLSTags = new HashSet();", "-\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start);", "+\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start, sourceEnd);", "-\t\t\t\t\tint i = 0;", "-\t\t\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "-\t\t\t\t\t}", "-\t\t\t\t\tif (line != null && line.exists(i)) {", "-\t\t\t\t\t\tline.set(i, null);", "-\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);", "-\t\t\t\t\t\tif (!this.unnecessaryNONNLSTags.add(tag)) {", "-\t\t\t\t\t\t\tthis.unnecessaryNONNLSTags.remove(tag);", "-\t\t\t\t\t\t\tthis.unnecessaryNONNLSTags.add(tag);", "+\t\t\t\t\t\tfinal int i = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "+\t\t\t\t\t\tif (i >= 0 && i < lineSize) {", "+\t\t\t\t\t\t\tif (line.get(i) == null) {", "+\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tline.set(i, null);", "+\t\t\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + sourceDelta , end + sourceDelta, NLSTag.USED);", "+\t\t\t\t\t\t\t\tif (!this.unnecessaryNLSTags.add(tag)) {", "+\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.remove(tag);", "+\t\t\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(tag);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + sourceDelta, end + sourceDelta));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.unnecessaryNONNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "+\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\tthis.unnecessaryNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "-\t\tif (line.size() != 0) {", "+\t\tif (line.remainingElementsSize != 0) {", "-\t\t\t\tStringLiteral literal = (StringLiteral) iterator.next();", "+\t\t\t\tfinal StringLiteral literal = (StringLiteral) iterator.next();"]}], "num": 63891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ed7156495e77408caf2892bf285cefc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f5a7440a780bdeaefb09053c559150", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (CharOperation.equals(scope.enclosingSourceType().sourceName, selector)) {", "-\t\t\tscope.problemReporter().methodWithConstructorName(this);", "+\t\tif (CharOperation.equals(this.scope.enclosingSourceType().sourceName, selector)) {", "+\t\t\tthis.scope.problemReporter().methodWithConstructorName(this);", "+\t\t}", "+\t\t", "+\t\tif (this.typeParameters != null) {", "+\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "+\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t\t}", "-\t\tif (this.binding != null) {", "+\t\tcheckOverride: {", "+\t\t\tif (this.binding == null) break checkOverride;", "+\t\t\tif (this.scope.compilerOptions().sourceLevel < JDK1_5) break checkOverride;", "-\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 ", "-\t\t\t\t\t&& (bindingModifiers & AccOverriding) == 0) {", "-\t\t\t\t// claims to override, and doesn't actually do so", "-\t\t\t\tscope.problemReporter().methodMustOverride(this);", "-\t\t\t} else\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "-\t\t\t\t\t\t&& (this.binding.declaringClass.modifiers & AccInterface) == 0", "-\t\t\t\t\t\t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding", "-\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= JDK1_5) {", "+\t\t\tboolean hasOverrideAnnotation = (this.binding.tagBits & TagBits.AnnotationOverride) != 0;", "+\t\t\tboolean isInterfaceMethod = this.binding.declaringClass.isInterface();", "+\t\t\tif (hasOverrideAnnotation) {", "+\t\t\t\tif ((bindingModifiers & AccOverriding) == 0 || isInterfaceMethod)", "+\t\t\t\t\t// claims to override, and doesn't actually do so", "+\t\t\t\t\tthis.scope.problemReporter().methodMustOverride(this);\t\t\t\t\t", "+\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding) {", "-\t\t\t\tscope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotation(this);", "-\t\tswitch (scope.referenceType().kind()) {", "+\t\tswitch (this.scope.referenceType().kind()) {", "-\t\t\t\t\t\t\tscope.problemReporter().methodNeedBody(this);", "+\t\t\t\t\t\t\tthis.scope.problemReporter().methodNeedBody(this);", "-\t\t\t\t\t\tscope.problemReporter().methodNeedingNoBody(this);", "+\t\t\t\t\t\tthis.scope.problemReporter().methodNeedingNoBody(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ea947086e7cc46b4f5bb032f300f91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "afcefcc52a6e235f9ed640317727929d84135cf0", "commitAfterChange": "5ce294a787e58643d5e8115fe2ddfea119e53aa2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void resolveStatements()", "signatureAfterChange": " public void resolveStatements()", "diff": ["-\t */", "-\tpublic void resolveStatements() {", "-\t\tif (!CharOperation.equals(this.scope.enclosingSourceType().sourceName, selector)){", "-\t\t\tthis.scope.problemReporter().missingReturnType(this);", "-\t\t}", "-\t\tif (this.typeParameters != null) {", "-\t\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "-\t\t\t\tthis.typeParameters[i].resolve(this.scope);", "-\t\t\t}", "-\t\t", "-\t\t// if null ==> an error has occurs at parsing time ....", "-\t\tif (this.constructorCall != null) {", "-\t\t\t// e.g. using super() in java.lang.Object", "-\t\t\tif (this.binding != null", "-\t\t\t\t&& this.binding.declaringClass.id == T_JavaLangObject", "-\t\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "-\t\t\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "-\t\t\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.constructorCall = null;", "-\t\t\t} else {", "-\t\t\t\tthis.constructorCall.resolve(this.scope);", "-\t\t\t}", "-\t\t}", "-\t\tif ((this.modifiers & ExtraCompilerModifiers.AccSemicolonBody) != 0) {", "-\t\t\tthis.scope.problemReporter().methodNeedBody(this);\t\t", "-\t\t}", "-\t\tsuper.resolveStatements();", "-\t}", "+ */", "+public void resolveStatements() {", "+\tif (!CharOperation.equals(this.scope.enclosingSourceType().sourceName, this.selector)){", "+\t\tthis.scope.problemReporter().missingReturnType(this);", "+\t}", "+", "+\tif (this.typeParameters != null) {", "+\t\tfor (int i = 0, length = this.typeParameters.length; i < length; i++) {", "+\t\t\tthis.typeParameters[i].resolve(this.scope);", "+\t\t}", "+\t}", "+\t", "+\t// if null ==> an error has occurs at parsing time ....", "+\tif (this.constructorCall != null) {", "+\t\t// e.g. using super() in java.lang.Object", "+\t\tif (this.binding != null", "+\t\t\t&& this.binding.declaringClass.id == TypeIds.T_JavaLangObject", "+\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "+\t\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "+\t\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "+\t\t\t\t}", "+\t\t\t\tthis.constructorCall = null;", "+\t\t} else {", "+\t\t\tthis.constructorCall.resolve(this.scope);", "+\t\t}", "+\t}", "+\tif ((this.modifiers & ExtraCompilerModifiers.AccSemicolonBody) != 0) {", "+\t\tthis.scope.problemReporter().methodNeedBody(this);\t\t", "+\t}", "+\tsuper.resolveStatements();", "+}"]}], "num": 46314}
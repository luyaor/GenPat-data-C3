{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "737b0b2da4947d8eeea84b78176ef317", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a92c15f37aab1e0d034ab67610f7c207", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e0c7ca1486f055788a44dc24293c246757983c36", "commitAfterChange": "fffe8da84c964b60e288768d8e57c80a69c56c45", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void acceptTypes(Scope scope)", "signatureAfterChange": " \t \tprivate void acceptTypes(Scope scope)", "diff": ["-\t\t\t\tchar[] completionName;", "+\t\t\t\tchar[] completionName = this.insideQualifiedReference ? simpleTypeName : fullyQualifiedName;", "-\t\t\t\t\t\tcompletionName = CharOperation.concat(fullyQualifiedName, new char[] { '.' });", "+\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { '.' });", "-\t\t\t\t\t\tcompletionName = CharOperation.concat(fullyQualifiedName, new char[] { ';' });", "+\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\t\t\tcompletionName = CharOperation.concat(fullyQualifiedName, new char[] { ';' });", "+\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\t\tif(insideQualifiedReference) {", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t\t\t} else {", "-\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, simpleTypeName);", "-\t\t\t\t}", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, simpleTypeName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eafdd43332b00735d299dcea001902ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5103cbbe93dc06e237ba05a89fd826d834ad4e54", "commitAfterChange": "36f7c1e916ce794f19c8c7bfc5e63afd70aa3df0", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tpublic void printTrailingComment()", "signatureAfterChange": "  \tpublic void printTrailingComment(int numberOfNewLinesToInsert)", "diff": ["+\tpublic void printTrailingComment(int numberOfNewLinesToInsert) {", "+\t\ttry {", "+\t\t\t// if we have a space between two tokens we ensure it will be dumped in the formatted string", "+\t\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\tboolean hasWhitespaces = false;", "+\t\t\tboolean hasLineComment = false;", "+\t\t\twhile ((this.currentToken = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(this.currentToken) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE :", "+\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\tchar[] whiteSpaces = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tfor (int i = 0, max = whiteSpaces.length; i < max; i++) {", "+\t\t\t\t\t\t\tswitch(whiteSpaces[i]) {", "+\t\t\t\t\t\t\t\tcase '\\r' :", "+\t\t\t\t\t\t\t\t\tif ((i + 1) < max) {", "+\t\t\t\t\t\t\t\t\t\tif (whiteSpaces[i + 1] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase '\\n' :", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (hasLineComment) {", "+\t\t\t\t\t\t\tif (count >= 1) {", "+\t\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\t\t\tthis.preserveEmptyLines(numberOfNewLinesToInsert, currentTokenStartPosition);", "+\t\t\t\t\t\t\t\taddDeleteEdit(currentTokenStartPosition, this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.currentPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (count > 1) {", "+\t\t\t\t\t\t\tthis.printEmptyLines(numberOfNewLinesToInsert, this.scanner.getCurrentTokenStartPosition());", "+\t\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\thasWhitespaces = true;", "+\t\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;\t\t\t\t\t\t", "+\t\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tif (hasWhitespaces) {", "+\t\t\t\t\t\t\tspace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasLineComment = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\t\tif (hasWhitespaces) {", "+\t\t\t\t\t\t\tspace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\t// step back one token", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);", "+\t\t}", "+\t}"]}], "num": 21027}
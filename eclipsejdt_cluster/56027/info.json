{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c99af4c76e916297ad781943e077d84", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad765ce51fefe9cf0d9d457c741113d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic boolean deleteGeneratedFile(IFile generatedFile, IFile parentFile, IProgressMonitor progressMonitor ) \t\tthrows CoreException", "signatureAfterChange": " \tprivate void deletePhysicalFile(IFile file)", "diff": ["-\t */", "-\tpublic boolean deleteGeneratedFile(IFile generatedFile, IFile parentFile, IProgressMonitor progressMonitor )", "-\t\tthrows CoreException", "-\t{", "-\t\tremoveFromFileMaps( generatedFile, parentFile );", "-\t\t", "-\t\tboolean delete = false;", "-", "-\t\tsynchronized ( this )", "-\t\t{", "-\t\t\tSet<IFile> parents = _generatedFile2ParentFiles.get( generatedFile );", "-\t\t", "-\t\t\t// this can be empty, but it shouldn't be null here unless parentFile was never a parent of generatedFile", "-\t\t\tif ( parents == null ) throw new RuntimeException(\"unexpected null value for parents set for file \" + generatedFile); //$NON-NLS-1$", "-\t\t", "-\t\t\tif (parents == null || parents.size() == 0) ", "-\t\t\t\tdelete = true;", "-\t\t}", "-\t\t", "-\t\tif ( delete ){", "-\t\t\tfinal IFolder genFolder = _gsfm.getFolder();", "-\t\t\tassert genFolder != null : \"Generated folder == null\"; //$NON-NLS-1$", "-\t\t\tIContainer parent = generatedFile.getParent();", "-\t\t\ttry {", "-\t\t\t\tgeneratedFile.delete(true, true, progressMonitor);", "-\t\t\t}", "-\t\t\tcatch (CoreException ce) {", "-\t\t\t\t// File was locked or read-only", "-\t\t\t\tAptPlugin.logWarning(ce, \"Failed to delete file: \" + generatedFile); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\t// not deleting the generated source folder and only ", "-\t\t\t// delete generated folders containing the generated file.", "-\t\t\twhile( !genFolder.equals(parent) && parent != null && parent.isDerived() ){\t\t\t\t", "-\t\t\t\tfinal IResource[] members = parent.members();", "-\t\t\t\tIContainer grandParent = parent.getParent();", "-\t\t\t\t// last one turns the light off.", "-\t\t\t\tif( members == null || members.length == 0 )", "-\t\t\t\t\tparent.delete(true, progressMonitor);", "-\t\t\t\telse", "-\t\t\t\t\tbreak;", "-\t\t\t\tparent = grandParent;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\treturn delete;", "-\t}", "+\t */", "+\tprivate void deletePhysicalFile(IFile file)", "+\t{", "+\t\tfinal IFolder genFolder = _gsfm.getFolder();", "+\t\tassert genFolder != null : \"Generated folder == null\"; //$NON-NLS-1$", "+\t\tIContainer parent = file.getParent(); // parent in the folder sense,", "+\t\t// not the typegen sense", "+\t\ttry {", "+\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\"delete physical file: \" + file); //$NON-NLS-1$", "+\t\t\tfile.delete(true, true, /* progressMonitor */null);", "+\t\t} catch (CoreException e) {", "+\t\t\t// File was locked or read-only", "+\t\t\tAptPlugin.logWarning(e, \"Unable to delete generated file: \" + file); //$NON-NLS-1$", "+\t\t}", "+\t\t// Delete the parent folders", "+\t\twhile (!genFolder.equals(parent) && parent != null && parent.isDerived()) {", "+\t\t\tIResource[] members = null;", "+\t\t\ttry {", "+\t\t\t\tmembers = parent.members();", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tAptPlugin.logWarning(e, \"Unable to read contents of generated file folder \" + parent); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tIContainer grandParent = parent.getParent();", "+\t\t\t// last one turns the light off.", "+\t\t\tif (members == null || members.length == 0)", "+\t\t\t\ttry {", "+\t\t\t\t\tparent.delete(true, /* progressMonitor */null);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tAptPlugin.logWarning(e, \"Unable to delete generated file folder \" + parent); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\telse", "+\t\t\t\tbreak;", "+\t\t\tparent = grandParent;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b71eaf2c0091a01b15f91f74d94cdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate static void addFileWithMissingTypeError( \t\t\tfinal IFile file,  \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv, \t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "diff": ["-\t", "-\tprivate static void addFileWithMissingTypeError(", "-\t\t\tfinal IFile file, ", "-\t\t\tfinal List<IFile> filesWithMissingType,", "-\t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType,", "-\t\t\tfinal ProcessorEnvImpl processorEnv)", "-\t{", "-\t\tif( processorEnv.getPhase() != Phase.BUILD )", "-\t\t\treturn;", "-\t\tfinal CompilationUnit domUnit = processorEnv.getAstCompilationUnit(file);", "-\t\tassert domUnit != null : \"cannot locate compilation unit for \" + file.getName(); //$NON-NLS-1$", "-\t\tfinal IProblem[] problems = domUnit.getProblems();", "-\t\tif(problems == null)", "-\t\t\treturn;", "-\t\tfor( IProblem problem : problems ){", "-\t\t\tif( problem.getID() == IProblem.UndefinedType ){\t\t\t\t\t\t", "-\t\t\t\tfilesWithMissingType.add(file);", "-\t\t\t\tfinal ICompilationUnit unit = processorEnv.getICompilationUnitForFile(file);", "-\t\t\t\tassert unit != null : \"cannot locate ICompilationUnit for file \" + file.getName(); //$NON-NLS-1$", "-\t\t\t\tunitsForFilesWithMissingType.add(unit);", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(unit.getElementName() + \" has missing type \" + problem.getMessage() ); //$NON-NLS-1$", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}\t", "-\t}", "+\tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv,", "+\t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "+\t\tfinal ICompilationParticipantResult[] cpResults = processorEnv.getFilesWithAnnotation();", "+\t\tfinal GeneratedFileManager gfm = _aptProject.getGeneratedFileManager();", "+\t\tfor (ICompilationParticipantResult curResult : cpResults ) {\t\t\t", "+\t\t\tprocessorEnv.beginFileProcessing(curResult);", "+\t\t\tdispatchToFileBasedProcessor(processorEnv);", "+\t\t\tfinal IFile curFile = curResult.getFile();", "+\t\t\treportResult(", "+\t\t\t\t\tcurResult,", "+\t\t\t\t\tlastGeneratedFiles.get(curFile),", "+\t\t\t\t\tprocessorEnv.getAllGeneratedFiles(),", "+\t\t\t\t\tprocessorEnv.getModifiedGeneratedFiles(),", "+\t\t\t\t\tprocessorEnv.getProblems(),", "+\t\t\t\t\tprocessorEnv.getTypeDependencies(),", "+\t\t\t\t\tgfm,", "+\t\t\t\t\tprocessorEnv);", "+\t\t\tprocessorEnv.completedFileProcessing();", "+\t\t}"]}], "num": 56027}
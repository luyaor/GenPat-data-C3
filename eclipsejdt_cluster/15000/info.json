{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7520dd2f66a37552ac530246883c3550", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02451d63874266d7d5cf0a4b51150f8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testValidPackageName()", "signatureAfterChange": " \tpublic void testValidPackageName()", "diff": ["-\t\tassertTrue(\"unicode package name not handled\", JavaConventions.validatePackageName(pkgName).isOK());", "+\t\tassertTrue(\"unicode package name not handled\", JavaConventions.validatePackageName(pkgName, sourceLevel, complianceLevel).isOK());", "-\t\tassertTrue(\"package name not recognized as invalid1\", !JavaConventions.validatePackageName(\"\").isOK());", "-\t\tassertTrue(\"package name not recognized as valid1\", JavaConventions.validatePackageName(\"java . lang\").isOK());", "-\t\tassertTrue(\"package name not recognized as invalid2\", !JavaConventions.validatePackageName(\"   java . lang\").isOK());", "-\t\tassertTrue(\"package name not recognized as invalid3\", !JavaConventions.validatePackageName(\"java . lang  \").isOK());", "-\t\tassertTrue(\"package name not recognized as invalid4\", !JavaConventions.validatePackageName(null).isOK());", "-\t\tassertTrue(\"package name not recognized as unconventional1\", JavaConventions.validatePackageName(\"Java.lang\").getSeverity() == IStatus.WARNING);", "-\t\tassertTrue(\"package name not recognized as valid2\", JavaConventions.validatePackageName(\"java.Lang\").isOK());", "-\t\tassertTrue(\"package name not recognized as invalid5\", JavaConventions.validatePackageName(\"Test.sample&plugin\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"package name not recognized as unconventional2\", JavaConventions.validatePackageName(\"Test.sample\").getSeverity() == IStatus.WARNING);", "+\t\tassertTrue(\"package name not recognized as invalid1\", !JavaConventions.validatePackageName(\"\", sourceLevel, complianceLevel).isOK());", "+\t\tassertTrue(\"package name not recognized as valid1\", JavaConventions.validatePackageName(\"java . lang\", sourceLevel, complianceLevel).isOK());", "+\t\tassertTrue(\"package name not recognized as invalid2\", !JavaConventions.validatePackageName(\"   java . lang\", sourceLevel, complianceLevel).isOK());", "+\t\tassertTrue(\"package name not recognized as invalid3\", !JavaConventions.validatePackageName(\"java . lang  \", sourceLevel, complianceLevel).isOK());", "+\t\tassertTrue(\"package name not recognized as invalid4\", !JavaConventions.validatePackageName(null, sourceLevel, complianceLevel).isOK());", "+\t\tassertTrue(\"package name not recognized as unconventional1\", JavaConventions.validatePackageName(\"Java.lang\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "+\t\tassertTrue(\"package name not recognized as valid2\", JavaConventions.validatePackageName(\"java.Lang\", sourceLevel, complianceLevel).isOK());", "+\t\tassertTrue(\"package name not recognized as invalid5\", JavaConventions.validatePackageName(\"Test.sample&plugin\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"package name not recognized as unconventional2\", JavaConventions.validatePackageName(\"Test.sample\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11fa646dc839693c616a201a79b2dc72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testValidTypeName()", "signatureAfterChange": " \tpublic void testValidTypeName()", "diff": ["-\t\tassertTrue(\"type name should not contain slashes (1)\", JavaConventions.validateJavaTypeName(\"Object\\\\\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (2)\", JavaConventions.validateJavaTypeName(\"Object/\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (3)\", JavaConventions.validateJavaTypeName(\"\\\\Object\").getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"type name should not contain slashes (4)\", JavaConventions.validateJavaTypeName(\"java\\\\lang\\\\Object\").getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (1)\", JavaConventions.validateJavaTypeName(\"Object\\\\\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (2)\", JavaConventions.validateJavaTypeName(\"Object/\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (3)\", JavaConventions.validateJavaTypeName(\"\\\\Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"type name should not contain slashes (4)\", JavaConventions.validateJavaTypeName(\"java\\\\lang\\\\Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);", "-\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"alowercasetypename\").getSeverity() == IStatus.WARNING);", "+\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"alowercasetypename\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "-\t\tassertTrue(\"unicode type name not handled\", JavaConventions.validateJavaTypeName(\"P\\\\u0065a\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java  .  lang\\t.Object\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"simple qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java.lang.Object\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"simple type names not handled\", JavaConventions.validateJavaTypeName(\"Object\").getSeverity() == IStatus.OK);", "-\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"Object$SubType\").getSeverity() == IStatus.WARNING);", "-\t\tassertTrue(\"invalid type name not recognized\", JavaConventions.validateJavaTypeName(\"==?==\").getSeverity() == IStatus.ERROR);", "+\t\tassertTrue(\"unicode type name not handled\", JavaConventions.validateJavaTypeName(\"P\\\\u0065a\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java  .  lang\\t.Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"simple qualified type names not handled\", JavaConventions.validateJavaTypeName(\"java.lang.Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"simple type names not handled\", JavaConventions.validateJavaTypeName(\"Object\", sourceLevel, complianceLevel).getSeverity() == IStatus.OK);", "+\t\tassertTrue(\"discouraged type names not handled\", JavaConventions.validateJavaTypeName(\"Object$SubType\", sourceLevel, complianceLevel).getSeverity() == IStatus.WARNING);", "+\t\tassertTrue(\"invalid type name not recognized\", JavaConventions.validateJavaTypeName(\"==?==\", sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR);"]}], "num": 15000}
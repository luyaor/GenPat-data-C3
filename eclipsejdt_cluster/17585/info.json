{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2edb27759ae113bcaa8fedce73a5bf60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac2772f74e743dfea55ddc0c54b8e1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "23e8716719900ce4b242cb2e611d552c0a8892a4", "commitAfterChange": "fd7de82f6da7ed292619b2fd7babad1ecc33c07d", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": " public void invokespecial(MethodBinding methodBinding)", "signatureAfterChange": " public void invokespecial(MethodBinding methodBinding)", "diff": ["-\tif (methodBinding.isConstructor() && methodBinding.declaringClass.isNestedType()) {", "-\t\t// enclosing instances", "-\t\tTypeBinding[] syntheticArgumentTypes = methodBinding.declaringClass.syntheticEnclosingInstanceTypes();", "-\t\tif (syntheticArgumentTypes != null) {", "-\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "-\t\t\t\tif (((id = syntheticArgumentTypes[i].id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "-\t\t\t\t\targCount += 2;", "-\t\t\t\t} else {", "-\t\t\t\t\targCount++;", "+\tif (methodBinding.isConstructor()) {", "+\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "+\t\tif (declaringClass.isNestedType()) {", "+\t\t\t// enclosing instances", "+\t\t\tTypeBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "+\t\t\tif (syntheticArgumentTypes != null) {", "+\t\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "+\t\t\t\t\tif (((id = syntheticArgumentTypes[i].id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "+\t\t\t\t\t\targCount += 2;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\targCount++;", "+\t\t\t\t\t}", "-\t\t}", "-\t\t// outer local variables", "-\t\tSyntheticArgumentBinding[] syntheticArguments = methodBinding.declaringClass.syntheticOuterLocalVariables();", "-\t\tif (syntheticArguments != null) {", "-\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "-\t\t\t\tif (((id = syntheticArguments[i].type.id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "-\t\t\t\t\targCount += 2;", "-\t\t\t\t} else {", "-\t\t\t\t\targCount++;", "+\t\t\t// outer local variables", "+\t\t\tSyntheticArgumentBinding[] syntheticArguments = declaringClass.syntheticOuterLocalVariables();", "+\t\t\tif (syntheticArguments != null) {", "+\t\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "+\t\t\t\t\tif (((id = syntheticArguments[i].type.id) == TypeIds.T_double) || (id == TypeIds.T_long)) {", "+\t\t\t\t\t\targCount += 2;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\targCount++;", "+\t\t\t\t\t}", "+\t\t} else if (declaringClass.isEnum()) {", "+\t\t\t// adding String and int", "+\t\t\targCount += 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f730a6b82c012334ce65bdfe818ddd50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/NestedTypeBinding.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope)", "signatureAfterChange": "\r \r public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope, boolean onlyExactMatch)", "diff": ["-\r", "-public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope) {\r", "-\tif (enclosingInstances == null) return null;\t\t// is null if no enclosing instances are known\r", "-\r", "-\t// exact match\r", "-\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "-\t\tif (enclosingInstances[i].type == targetEnclosingType)\r", "-\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "-\t\t\t\treturn enclosingInstances[i];\r", "-\r", "-\t// type compatibility : to handle cases such as\r", "-\t// class T { class M{}}\r", "-\t// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r", "-\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "-\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "-\t\t\tif (targetEnclosingType.isSuperclassOf((ReferenceBinding) enclosingInstances[i].type))\r", "-\t\t\t\treturn enclosingInstances[i];\r", "-\treturn null;\r", "-}\r", "+\r", "+public SyntheticArgumentBinding getSyntheticArgument(ReferenceBinding targetEnclosingType, BlockScope scope, boolean onlyExactMatch) {\r", "+\tif (enclosingInstances == null) return null;\t\t// is null if no enclosing instances are known\r", "+\r", "+\t// exact match\r", "+\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "+\t\tif (enclosingInstances[i].type == targetEnclosingType)\r", "+\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "+\t\t\t\treturn enclosingInstances[i];\r", "+\r", "+\t// type compatibility : to handle cases such as\r", "+\t// class T { class M{}}\r", "+\t// class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r", "+\tif (!onlyExactMatch){\r", "+\t\tfor (int i = enclosingInstances.length; --i >= 0;)\r", "+\t\t\tif (enclosingInstances[i].actualOuterLocalVariable == null)\r", "+\t\t\t\tif (targetEnclosingType.isSuperclassOf((ReferenceBinding) enclosingInstances[i].type))\r", "+\t\t\t\t\treturn enclosingInstances[i];\r", "+\t}\r", "+\treturn null;\r", "+}\r"]}], "num": 17585}
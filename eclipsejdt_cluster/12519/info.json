{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d632b78fb0542c8b3ad077e078f11f4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "300598ac2ad14dbc27479b37ca9bcebb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "     void addMarker(final IResource resource, Map<String, Object> markerAttrs)", "signatureAfterChange": "     void addProblem(IFile resource,         \t\t        int start,      \t\t\t\tint end,                     APTProblem.Severity severity,                      String msg,                      int line)", "diff": ["-\t */", "-    void addMarker(final IResource resource, Map<String, Object> markerAttrs)", "+     */", "+    void addProblem(IFile resource, ", "+       \t\t        int start, ", "+    \t\t\t\tint end,", "+                    APTProblem.Severity severity, ", "+                    String msg, ", "+                    int line)", "-\t\t_markerInfos.add( new MarkerInfo(resource, markerAttrs) );", "+    \t// not going to post any markers to resource outside of the one we are currently ", "+    \t// processing during reconcile phase.", "+    \tif( _phase == Phase.RECONCILE && resource != null && !resource.equals(_file) )", "+    \t\treturn;", "+    \tif(resource == null)", "+    \t\tresource = _file;", "+    \tfinal APTProblem newProblem = ", "+        \tnew APTProblem(getUniqueProblemId(), msg, severity, resource, start, end, line);", "+    \tList<IProblem> problems = _allProblems.get(resource);", "+    \tif( problems == null ){", "+    \t\tproblems = new ArrayList<IProblem>(4);", "+    \t\t_allProblems.put(resource, problems);    \t\t", "+    \t}", "+    \tproblems.add(newProblem);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76596cbb27f754e7bcfb90d14e2321a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/MessagerImpl.java", "commitBeforeChange": "03e205d7db02078dce9accf78d78c9d9a6ce6117", "commitAfterChange": "7ff51a474972e200f8003fdc2186f43ef4e82e14", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void print(int severity, String msg)", "signatureAfterChange": "          private void print(SourcePosition pos,     \t\t\t\t   int severity,     \t\t\t\t   String msg)", "diff": ["+    ", "+    private void print(SourcePosition pos,", "+    \t\t\t\t   int severity,", "+    \t\t\t\t   String msg)", "+    {    \t", "+    \tfinal java.io.File file = pos.file();", "+    \tIResource resource = null;", "+    \tif( file != null ){    \t\t", "+    \t\tfinal String projAbsPath = _env.getProject().getLocation().toOSString();", "+    \t\tfinal String fileAbsPath = file.getAbsolutePath();", "+    \t\tfinal String fileRelPath = fileAbsPath.substring(projAbsPath.length());    \t\t\t", "+    \t\tresource = _env.getProject().getFile(fileRelPath);", "+    \t\tif( !resource.exists() )", "+    \t\t\tresource = null;", "+    \t}", "+    \telse", "+    \t\tresource = null;", "+    \t ", "+    \tfinal IResource currentResource = _env.getFile();", "+    \tint offset = 0;    \t", "+    \tif( currentResource.equals(resource) ){", "+    \t\tfinal CompilationUnit unit = _env.getAstCompilationUnit();", "+    \t\t//TODO: waiting on new API Bugzilla #97766", "+    \t\t//offset = unit.getPosition(pos.line(), pos.column() );", "+    \t\toffset = 0;", "+    \t}    \t", "+", "+    \taddMarker(resource, offset, -1, severity, msg, pos.line());", "+    }"]}], "num": 12519}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "432613a11ab87ca03adcc3c266b6c8b9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dd896427814604df5ffab940c53d67d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected)", "signatureAfterChange": " \tprotected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected)", "diff": ["+\t */", "+\tprotected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tfor (int i = 0; i <= requestor.resultIndex; i++) {", "+\t\t\tEvaluationResult result = requestor.results[i];", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t\tassertTrue(\"Has problem\", result.hasProblems());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\tassertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\tif (equals(expected, problems[0])) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Expected problem not found\", false);", "- */", "-protected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tfor (int i = 0; i <= requestor.resultIndex; i++) {", "-\t\tEvaluationResult result = requestor.results[i];", "-\t\tif (equals(expected, problems[0])) {", "-\t\t\treturn;", "-\tassertTrue(\"Expected problem not found\", false);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850b481697cee6718ff934f29faf99a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName)", "signatureAfterChange": " \tprotected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName)", "diff": ["- */", "-protected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tif (displayString == null) {", "-\t\tassertTrue(\"Missing value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "-\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "-\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "-\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());", "-\t}", "-}", "+\t */", "+\tprotected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName) {", "+\t\tRequestor requestor = new Requestor();", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tif (displayString == null) {", "+\t\t\tassertTrue(\"Missing value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "+\t\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());"]}], "num": 48119}
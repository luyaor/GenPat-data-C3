{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ca3c3d325d90f111ba65b0856a1e17a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cb8ab11c832501cadb6c3ace41a8974", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparisonTest.java", "commitBeforeChange": "fa16fc80b475f974c3040ef90f01075968f51405", "commitAfterChange": "9528b13b60b5267a27dfdeac3b8ea9a804476535", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected void cleanupDirectory(File directory) throws TargetException", "signatureAfterChange": " \tprotected void cleanupDirectory(File directory)", "diff": ["-\tprotected void cleanupDirectory(File directory) throws TargetException {", "+\tprotected void cleanupDirectory(File directory) {", "-\t\t\t\tif (!file.delete()) {", "-\t\t\t\t\tthrow new TargetException(\"Could not delete file \" + file.getPath());", "-\t\t\t\t}", "+\t\t\t\tif (!file.delete())", "+\t\t\t\t\tSystem.out.println(\"Could not delete file \" + file.getPath());", "-\t\tif (!directory.delete()) {", "-\t\t\tthrow new TargetException(\"Could not delete directory \" + directory.getPath());", "-\t\t}", "+\t\tif (!directory.delete())", "+\t\t\tSystem.out.println(\"Could not delete directory \" + directory.getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81f3bfd3ab195d7fa7cacc21f4664fa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "commitAfterChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void compileAndDeploy(String source, String className)", "signatureAfterChange": " \t \tpublic void compileAndDeploy(String compliance, String source, String className)", "diff": ["-\tpublic void compileAndDeploy(String source, String className) {", "+\tpublic void compileAndDeploy(String compliance, String source, String className) {", "-\t\tbuffer", "+\t\tif (JavaCore.VERSION_1_5.equals(compliance)) {", "+\t\t\tbuffer", "-\t\t\t.append(\"\\\" -1.4 -source 1.3 -target 1.2 -preserveAllLocals -nowarn -g -classpath \\\"\")", "+\t\t\t.append(\"\\\" -1.5 -preserveAllLocals -nowarn -g -classpath \\\"\")", "+\t\t} else {", "+\t\t\tbuffer", "+\t\t\t\t.append(\"\\\"\")", "+\t\t\t\t.append(fileName)", "+\t\t\t\t.append(\"\\\" -d \\\"\")", "+\t\t\t\t.append(EVAL_DIRECTORY)", "+\t\t\t\t.append(\"\\\" -1.4 -source 1.3 -target 1.2 -preserveAllLocals -nowarn -g -classpath \\\"\")", "+\t\t\t\t.append(Util.getJavaClassLibsAsString())", "+\t\t\t\t.append(SOURCE_DIRECTORY)", "+\t\t\t\t.append(\"\\\"\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac7141ce4c73d78b1a1f8a971c871c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void compileAndDeploy(String compliance, String source, String className)", "signatureAfterChange": " \t \tpublic void compileAndDeploy(String compliance, String source, String directoryName, String className)", "diff": ["-\tpublic void compileAndDeploy(String compliance, String source, String className) {", "+\tpublic void compileAndDeploy(String compliance, String source, String directoryName, String className) {", "-\t\tString fileName = SOURCE_DIRECTORY + File.separator + className + \".java\";", "+\t\tif (directoryName != null && directoryName.length() != 0) {", "+\t\t\tdirectory = new File(SOURCE_DIRECTORY, directoryName);", "+\t\t\tif (!directory.exists()) {", "+\t\t\t\tif (!directory.mkdirs()) {", "+\t\t\t\t\tSystem.out.println(\"Could not create \" + directory);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tString fileName = directory.getAbsolutePath() + File.separator + className + \".java\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea3ab08f72a72651a1d5d1dce55b3140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void checkClassFile(String compliance, String className, String source, String expectedOutput)", "signatureAfterChange": " \tprivate void checkClassFile(String compliance, String directoryName, String className, String source, String expectedOutput, int mode)", "diff": ["-", "-\tprivate void checkClassFile(String compliance, String className, String source, String expectedOutput) {", "-\t\tcompileAndDeploy(compliance, source, className);", "+\tprivate void checkClassFile(String compliance, String directoryName, String className, String source, String expectedOutput, int mode) {", "+\t\tcompileAndDeploy(compliance, source, directoryName, className);", "-\t\t\tFile f = new File(EVAL_DIRECTORY + File.separator + className + \".class\");", "+\t\t\tFile directory = new File(EVAL_DIRECTORY, directoryName);", "+\t\t\tif (!directory.exists()) {", "+\t\t\t\tassertTrue(\".class file not generated properly in \" + directory, false);", "+\t\t\t}", "+\t\t\tFile f = new File(directory, className + \".class\");", "-\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.SYSTEM);", "+\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);"]}], "num": 3414}
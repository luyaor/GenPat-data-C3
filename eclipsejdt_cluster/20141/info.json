{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cad5dddb856d6ace26012898abe5c149", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a688c71d8e81983416a9e97b6ffcdd78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "d0f6b932bd2521f678bde4cdb96cb1190442e2f1", "commitAfterChange": "84bbf5d10f91b2c7f38d4b1250126f235793a08e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \t \tprivate int rewriteOptionalTypeParameters(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword, boolean adjustOnNext)", "signatureAfterChange": " \t \tprivate int rewriteOptionalTypeParameters(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword, boolean adjustOnNext, boolean needsSpaceOnRemoveAll)", "diff": ["-\tprivate int rewriteOptionalTypeParameters(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword, boolean adjustOnNext) {", "+\tprivate int rewriteOptionalTypeParameters(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword, boolean adjustOnNext, boolean needsSpaceOnRemoveAll) {", "-\t\t\t\t\tpos= getScanner().getTokenStartOffset(ITerminalSymbols.TokenNameLESS, pos);", "+\t\t\t\t\tint posBeforeOpenBracket= getScanner().getTokenStartOffset(ITerminalSymbols.TokenNameLESS, pos);", "+\t\t\t\t\tif (posBeforeOpenBracket != pos) {", "+\t\t\t\t\t\tneedsSpaceOnRemoveAll= false;", "+\t\t\t\t\t}", "+\t\t\t\t\tpos= posBeforeOpenBracket;", "-\t\t\t\t\tdoTextRemove(pos, endPos - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\tString replacement= needsSpaceOnRemoveAll ? String.valueOf(' ') : new String();", "+\t\t\t\t\tdoTextReplace(pos, endPos - pos, replacement, getEditGroup(children[children.length - 1]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4bac9d89fb033ccdfd0ef8590c46a35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void createFields(IBinaryField[] iFields)", "signatureAfterChange": " private void createFields(IBinaryField[] iFields, boolean checkGenericSignatures)", "diff": ["-private void createFields(IBinaryField[] iFields) {", "+private void createFields(IBinaryField[] iFields, boolean checkGenericSignatures) {", "+\t\t\t\tchar[] fieldSignature = checkGenericSignatures ? field.getGenericSignature() : null;", "+\t\t\t\tTypeBinding type = fieldSignature == null", "+\t\t\t\t\t? environment.getTypeFromSignature(field.getTypeName(), 0, -1, false, this)", "+\t\t\t\t\t: environment.getTypeFromTypeSignature(new SignatureWrapper(fieldSignature), NoTypeVariables, this);", "-\t\t\t\t\t\tenvironment.getTypeFromSignature(field.getTypeName(), 0, -1),", "+\t\t\t\t\t\ttype,"]}], "num": 20141}
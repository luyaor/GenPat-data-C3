{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5c73f7867f2eb50cea23894203472f4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a63963dbf33f41496c2f05d553bdcd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "5af30c3917bf512b1381c83cf2b214b4e93e8c9e", "commitAfterChange": "40810d6d8748f2beada6fc3922fddf79c52aa3fb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(FieldDeclaration fieldDecl, boolean resolve)", "diff": ["+ */\r", "+private int matchLevel(FieldDeclaration fieldDecl, boolean resolve) {\r", "+\t// nedd to be a write only access\t\r", "+\tif (!this.writeAccess || this.readAccess) return IMPOSSIBLE_MATCH;\r", "+\t\r", "+\t// need have an initialization\r", "+\tif (fieldDecl.initialization == null) return IMPOSSIBLE_MATCH;", "+\t\r", "+\t// field name\r", "+\tif (!this.matchesName(this.name, fieldDecl.name))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\tif (resolve) {\r", "+\t\t// receiver type and field type\r", "+\t\treturn this.matchLevel(fieldDecl.binding);\r", "+\t} else {\r", "+\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c165c7d69be349361b3e96a75842b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private boolean matches(FieldReference fieldRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(FieldReference fieldRef, boolean resolve)", "diff": ["- */\r", "-private boolean matches(FieldReference fieldRef, boolean resolve) {\t\r", "-\t// field name\r", "-\tif (!this.matchesName(this.name, fieldRef.token))\r", "-\t\treturn false;\r", "-\r", "-\tif (resolve) {\r", "-\t\t// receiver type and field type\r", "-\t\tFieldBinding binding = fieldRef.binding;\r", "-\t\tif (binding != null && !this.matches(fieldRef.receiverType, fieldRef.isSuperAccess(), binding))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(FieldReference fieldRef, boolean resolve) {\t\r", "+\t// field name\r", "+\tif (!this.matchesName(this.name, fieldRef.token))\r", "+\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\tif (resolve) {\r", "+\t\t// receiver type and field type\r", "+\t\treturn this.matchLevel(fieldRef.receiverType, fieldRef.isSuperAccess(), fieldRef.binding);\r", "+\t} else {\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}], "num": 12618}
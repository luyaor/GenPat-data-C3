{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ce44c8e1f9bec96618be6169f73558d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ce46de064997f1e591a1102b2c37b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\tif (methodBinding != null)", "-\t\tif (canBeSeenByForCodeSnippet(methodBinding, receiverType, invocationSite, this))", "+\tif (methodBinding != null) {", "+\t\tif (canBeSeenByForCodeSnippet(methodBinding, receiverType, invocationSite, this)) {", "-", "+\t\t}", "+\t}", "-\tif (methods == NoMethods)", "+\tif (methods == NoMethods) {", "-", "+\t}", "-\t\tif (canBeSeenByForCodeSnippet(method, receiverType, invocationSite, this))", "+\t\tif (canBeSeenByForCodeSnippet(method, receiverType, invocationSite, this)) {", "+\t\t}", "-\tif (visibleIndex == 1)", "+\tif (visibleIndex == 1) {", "-\tif (visibleIndex == 0)", "+\t}", "+\tif (visibleIndex == 0) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4208f3685257f92282fc485eefa4b56e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedAllocationExpression qualifiedAllocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedAllocationExpression qualifiedAllocationExpression, \t\tBlockScope scope)", "diff": ["-\t\tif (numberOfParens > 0) manageOpeningParenthesizedExpression(qualifiedAllocationExpression, numberOfParens);", "-\t\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(qualifiedAllocationExpression, numberOfParens);", "+\t\t}", "-\t\t\t\t\tif (this.preferences.insert_space_within_message_send) this.scribe.space();", "+\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "-\t\t\t\t\t\tif (i > 0) this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_allocation_expression);", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_allocation_expression);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_allocation_expression) this.scribe.space();", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_allocation_expression) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "-\t\tif (anonymousType != null) anonymousType.traverse(this, scope);", "-\t\t", "-\t\tif (numberOfParens > 0) manageClosingParenthesizedExpression(qualifiedAllocationExpression, numberOfParens);", "+\t\tif (anonymousType != null) {", "+\t\t\tanonymousType.traverse(this, scope);", "+\t\t}", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(qualifiedAllocationExpression, numberOfParens);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb05de33c69cf76b6dac03c659ae0e87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/NewCodeFormatter.java", "commitBeforeChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "commitAfterChange": "10f61af06f4d12e71dbad86581b20a4a2b3267b7", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "diff": ["-\t\tif (numberOfParens > 0) manageOpeningParenthesizedExpression(allocationExpression, numberOfParens);", "-\t\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(allocationExpression, numberOfParens);", "+\t\t}", "-\t\t\t\t\tif (this.preferences.insert_space_within_message_send) this.scribe.space();", "+\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "-\t\t\t\t\t\tif (i > 0) this.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_allocation_expression);", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(ITerminalSymbols.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_allocation_expression);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_allocation_expression) this.scribe.space();", "+\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_allocation_expression) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "-\t\tif (numberOfParens > 0) manageClosingParenthesizedExpression(allocationExpression, numberOfParens);", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(allocationExpression, numberOfParens);", "+\t\t}"]}], "num": 1764}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31255d82f25bf3a353d1c863ba4d95ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2def12eb740e77f04e94bfdb7d40570b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "0c8d3633f61f58e086a6550fc6a80c1ca119e1ce", "commitAfterChange": "b38764da707cc96f96750b2abc87c30eb0ae9f0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void buildStructure(OpenableElementInfo info, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "   protected void buildStructure(OpenableElementInfo info, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t// add the info for this at the end, to ensure that a getInfo cannot reply null in case the LRU cache needs", "+\t// to be flushed. Might lead to performance issues.", "+\t// see PR 1G2K5S7: ITPJCORE:ALL - NPE when accessing source for a binary type", "+\tJavaModelManager.getJavaModelManager().putInfo(this, info);\t", "+", "-\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor);", "+\t\tCompilationUnitProblemFinder.process(this, problemRequestor, monitor); // TODO: is the JavaModel lock taken here ? Can run client code", "-\t", "-\t// add the info for this at the end, to ensure that a getInfo cannot reply null in case the LRU cache needs", "-\t// to be flushed. Might lead to performance issues.", "-\t// see PR 1G2K5S7: ITPJCORE:ALL - NPE when accessing source for a binary type", "-\tJavaModelManager.getJavaModelManager().putInfo(this, info);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95f07d5f3226ed783ac43732a45c4c4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void buildStructure(OpenableElementInfo info, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " protected void buildStructure(OpenableElementInfo info, HashMap newElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["-protected void buildStructure(OpenableElementInfo info, IProgressMonitor monitor) throws JavaModelException {", "+protected void buildStructure(OpenableElementInfo info, HashMap newElements, IProgressMonitor monitor) throws JavaModelException {", "-\t// remove existing (old) infos", "-\tremoveInfo();", "-\tHashMap newElements = new HashMap(11);", "-\tinfo.setIsStructureKnown(generateInfos(info, monitor, newElements, getResource()));", "+\tnewElements.put(this, info);", "+\t", "+\tboolean isStructureKnown = generateInfos(info, monitor, newElements, getResource());", "+\tinfo.setIsStructureKnown(isStructureKnown);", "+\t", "-\tfor (Iterator iter = newElements.keySet().iterator(); iter.hasNext();) {", "-\t\tIJavaElement key = (IJavaElement) iter.next();", "-\t\tObject value = newElements.get(key);", "-\t\tJavaModelManager.getJavaModelManager().putInfo(key, value);", "-\t}", "-\t\t", "-\t// add the info for this at the end, to ensure that a getInfo cannot reply null in case the LRU cache needs", "-\t// to be flushed. Might lead to performance issues.", "-\t// see PR 1G2K5S7: ITPJCORE:ALL - NPE when accessing source for a binary type", "-\tJavaModelManager.getJavaModelManager().putInfo(this, info);\t"]}], "num": 30016}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0e3f7e33b3d5ed7bd8fdf5eb0000d23", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "849afb84932929ed34eedcf8397322e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, Since a 1.4 project can have a 1.5", "-\t   type as a super type and the 1.5 type could be generic, we must internalize usages of type", "-\t   variables properly in order to be able to apply substitutions and thus be able to detect", "-\t   overriding in the presence of generics. Seeing the erased form is not good enough.", "-\t */", "-\tchar[] methodSignature = method.getGenericSignature(); // always use generic signature, even in 1.4", "+\tchar[] methodSignature = use15specifics ? method.getGenericSignature() : null;", "-\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature, use15specifics);", "+\t\tSignatureWrapper wrapper = new SignatureWrapper(methodSignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c48cbf418d9a3137547261aa191a5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "eb4ff23c38228c4d00e0da694ac7e98ede6240d8", "commitAfterChange": "85fdee7dd19538da3ffbc3959a79cffbaddd43f9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\tint[] overriddenInheritedMethods = findOverriddenInheritedMethods(methods, length);", "+\tint[] overriddenInheritedMethods = length > 1 ? findOverriddenInheritedMethods(methods, length) : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5f21325aaab652ce191bee3f436fa26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "eb4ff23c38228c4d00e0da694ac7e98ede6240d8", "commitAfterChange": "85fdee7dd19538da3ffbc3959a79cffbaddd43f9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\tint[] overriddenInheritedMethods = findOverriddenInheritedMethods(methods, length);", "+\tint[] overriddenInheritedMethods = length > 1 ? findOverriddenInheritedMethods(methods, length) : null;"]}], "num": 29314}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4c6f1f4ec7a1b3fac8c019670725950", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f411cce6f711d8cd726c1e4a9c1f67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "21b9966e83f4a7c5b6c8226af6289eb2a9299481", "commitAfterChange": "06017bc2fd77b1d8947ab05959b01b8c4760db94", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t String javaVMName = System.getProperty(\"java.vm.name\");//$NON-NLS-1$", "-\t\t\t if (javaVMName != null && javaVMName.equalsIgnoreCase(\"J9\")) {//$NON-NLS-1$", "-\t\t\t \t/*", "-\t\t\t \t * Handle J9 VM settings: Retrieve jclMax by default", "-\t\t\t \t */", "-\t\t\t \t String javaHome = System.getProperty(\"java.home\");//$NON-NLS-1$", "-\t\t\t \t if (javaHome != null) {", "-\t\t\t \t \tFile javaHomeFile = new File(javaHome);", "-\t\t\t \t \tif (javaHomeFile.exists()) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tjavaHomeFile = new File(javaHomeFile.getCanonicalPath());", "-\t\t\t\t\t\t\tFile defaultLibrary = new File(javaHomeFile, \"lib\" + File.separator + \"jclMax\" +  File.separator + \"classes.zip\"); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t\t\t\t\tFile locales = new File(javaHomeFile, \"lib\" + File.separator + \"jclMax\" +  File.separator + \"locale.zip\"); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t\t\t\t\tFile charconv = new File(javaHomeFile, \"lib\" +  File.separator + \"charconv.zip\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\t\t/* we don't need to check if defaultLibrary exists. This is done later when the user", "-\t\t\t\t\t\t\t * classpath and the bootclasspath are merged. ", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tbootclasspaths = new String[] {", "-\t\t\t\t\t\t\t\tdefaultLibrary.getAbsolutePath(),", "-\t\t\t\t\t\t\t\tlocales.getAbsolutePath(),", "-\t\t\t\t\t\t\t\tcharconv.getAbsolutePath()};", "-\t\t\t\t\t\t\tbootclasspathCount = 3;", "-\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\t// cannot retrieve libraries", "-\t\t\t\t\t\t}", "-\t\t\t \t \t}", "-\t\t\t \t }", "-\t\t\t } else {", "-\t\t\t \t/*", "-\t\t\t \t * Handle >= JDK 1.2.2 settings: retrieve rt.jar", "-\t\t\t \t */", "-\t\t\t \t String javaHome = System.getProperty(\"java.home\");//$NON-NLS-1$", "-\t\t\t \t if (javaHome != null) {", "-\t\t\t \t \tFile javaHomeFile = new File(javaHome);", "-\t\t\t \t \tif (javaHomeFile.exists()) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tjavaHomeFile = new File(javaHomeFile.getCanonicalPath());", "-\t\t\t\t\t\t\t// add all jars in the lib subdirectory", "-\t\t\t\t\t\t\tFile[] systemLibrariesJars = getFilesFrom(new File(javaHomeFile, \"lib\"), SUFFIX_STRING_jar);//$NON-NLS-1$", "-\t\t\t\t\t\t\tint length = systemLibrariesJars.length;", "+", "+\t\t \t/*", "+\t\t \t * Handle >= JDK 1.2.2 settings: retrieve rt.jar", "+\t\t \t */", "+\t\t \t String javaHome = System.getProperty(\"java.home\");//$NON-NLS-1$", "+\t\t \t if (javaHome != null) {", "+\t\t \t \tFile javaHomeFile = new File(javaHome);", "+\t\t \t \tif (javaHomeFile.exists()) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tjavaHomeFile = new File(javaHomeFile.getCanonicalPath());", "+\t\t\t\t\t\t// add all jars in the lib subdirectory", "+\t\t\t\t\t\tFile[] directoriesToCheck = new File[] { new File(javaHomeFile, \"lib\"), new File(javaHomeFile, \"lib/ext\")};//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "+\t\t\t\t\t\tif (systemLibrariesJars != null) {", "+\t\t\t\t\t\t\tint length = getLength(systemLibrariesJars);", "-\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t/* we don't need to check if this file exists. This is done later when the user", "-\t\t\t\t\t\t\t\t * classpath and the bootclasspath are merged. ", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tbootclasspaths[bootclasspathCount++] = systemLibrariesJars[i].getAbsolutePath();", "-\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\t// cannot retrieve libraries", "+\t\t\t\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "+\t\t\t\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "+\t\t\t\t\t\t\t\tif (current != null) {", "+\t\t\t\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "+\t\t\t\t\t\t\t\t\t\tbootclasspaths[bootclasspathCount++] = current[j].getAbsolutePath();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t \t \t}", "-\t\t\t \t }", "-\t\t\t }", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// cannot retrieve libraries", "+\t\t\t\t\t}", "+\t\t \t \t}", "+\t\t \t }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "667e3096e0964ef3f8e3d2c5e838c18a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits)", "signatureAfterChange": "\r \r public void resolve(IGenericType[] suppliedTypes, ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\r", "-\t\t// build type bindings\r", "+\t\tint count = -1;\r", "+\t\t\t\tsuppliedTypes[i] = null; // no longer needed pass this point\r", "+\t\t\t\tsuppliedTypes[i] = null; // no longer needed pass this point\t\t\t\t\r", "-\t\t\t\tunits[i] = SourceTypeConverter.buildCompilationUnit(new ISourceType[]{topLevelType}, false, true, lookupEnvironment.problemReporter, result);\r", "-\t\t\t\tif (units[i] != null) {\r", "+\t\t\t\tunits[++count] = SourceTypeConverter.buildCompilationUnit(topLevelType, false, true, lookupEnvironment.problemReporter, result);\r", "+\r", "+\t\t\t\tif (units[count] == null) {\r", "+\t\t\t\t\tcount--;\r", "+\t\t\t\t} else {\r", "-\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(units[i]);\r", "+\t\t\t\t\t\tlookupEnvironment.buildTypeBindings(units[count]);\r", "+\t\t\t\t\t\trememberWithMemberTypes(topLevelType, units[count].types[0].binding);\r", "+\t\t\tsourceUnits[i] = null; // no longer needed pass this point\r", "-\t\t\tCompilerOptions options = new CompilerOptions(Compiler.getDefaultOptions(Locale.getDefault()));\r", "-\t\t\tParser parser = new Parser(lookupEnvironment.problemReporter, false, options.getAssertMode());\r", "+\t\t\tParser parser = new Parser(lookupEnvironment.problemReporter);\r", "-\t\t\t\tunits[suppliedLength+i] = parsedUnit;\r", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\t// complete type bindings (ie. connect super types) and remember them\r", "-\t\tfor (int i = 0; i < suppliedLength; i++) {\r", "-\t\t\tif (!suppliedTypes[i].isBinaryType()) { // note that binary types have already been remembered above\r", "-\t\t\t\tCompilationUnitDeclaration parsedUnit = units[i];\r", "-\t\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\t\t// must start with the top level type\r", "-\t\t\t\t\tISourceType topLevelType = (ISourceType) suppliedTypes[i];\r", "-\t\t\t\t\tsuppliedTypes[i] = null; // no longer needed pass this point\t\t\t\t\r", "-\t\t\t\t\twhile (topLevelType.getEnclosingType() != null)\r", "-\t\t\t\t\t\ttopLevelType = topLevelType.getEnclosingType();\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, false);\r", "-\t\t\t\t\t\trememberWithMemberTypes(topLevelType, parsedUnit.types[0].binding);\r", "-\t\t\t\t\t} catch (AbortCompilation e) {\r", "-\t\t\t\t\t\t// classpath problem for this type: ignore\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tfor (int i = 0; i < sourceLength; i++) {\r", "-\t\t\tCompilationUnitDeclaration parsedUnit = units[suppliedLength+i];\r", "-\t\t\tif (parsedUnit != null) {\r", "-\t\t\t\tlookupEnvironment.completeTypeBindings(parsedUnit, false);\r", "+\t\t\t\tunits[++count] = parsedUnit;\r", "+\t\t\t\tlookupEnvironment.buildTypeBindings(units[count]);\r", "-\t\t\t\tICompilationUnit sourceUnit = sourceUnits[i];\r", "-\t\t\t\tsourceUnits[i] = null; // no longer needed pass this point\r", "+\t\tfor (int i = 0; i <= count; i++)\r", "+\t\t\tlookupEnvironment.completeTypeBindings(units[i], false);\r"]}], "num": 33457}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b63710d0492dd754f7b43da6d7bd2d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e86b5d4518b7f2dd7bc7113ba62964f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void test061()", "signatureAfterChange": " \tpublic void test061()", "diff": ["-\t\t\t\"1. WARNING in Try.java (at line 10)\\n\" + ", "+\t\t\t\"1. WARNING in Try.java (at line 9)\\n\" + ", "+\t\t\t\"\tEx ex2 = ex;\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: Ex is a raw type. References to generic type Ex<C> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Try.java (at line 10)\\n\" + ", "-\t\t\t\"2. WARNING in Try.java (at line 11)\\n\" + ", "+\t\t\t\"3. WARNING in Try.java (at line 11)\\n\" + ", "-\t\t\t\"3. WARNING in Try.java (at line 12)\\n\" + ", "+\t\t\t\"4. WARNING in Try.java (at line 12)\\n\" + ", "-\t\t\t\"4. WARNING in Try.java (at line 13)\\n\" + ", "+\t\t\t\"5. WARNING in Try.java (at line 13)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4ee4b4cad10a0c809527a0f20725f85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void test401610c()", "signatureAfterChange": " public void test401610c()", "diff": ["-\t\t\t\t\"\t\tnew X().foo((s)->{});\\n\" +", "+\t\t\t\t\"\t\tnew X().foo((s)->{});\\n\" +    // error not reported here, since analyzeCode does not get to run.", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\t\"  return \\\"\\\";\\n\" + ", "+\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tnew X().foo(()->{ return \\\"\\\";});\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"\tnew X().foo(()-> 10);\\n\" + ", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> 10)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\t\"\tnew X().foo((s)->{});\\n\" + ", "-\t\t\t\t\"\t            ^^^^^^^\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\t\"\t            ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + "]}], "num": 33494}
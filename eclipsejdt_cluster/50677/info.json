{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9dad60666800faa856f542a873c7c4cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d6e1b9539e7c5cffdf743be476a5e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "diff": ["-\t}", "-\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired) {", "-\t", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tif (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t\t\t\t\tmanageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);", "-\t\t\t\t}", "-\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "-\t\t\t\t// check if accessing enum static field in initializer", "-\t\t\t\tif (declaringClass.isEnum()) {", "-\t\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "-\t\t\t\t\tSourceTypeBinding sourceType = currentScope.enclosingSourceType();", "-\t\t\t\t\tif (fieldBinding.isStatic()", "-\t\t\t\t\t\t\t&& this.constant == Constant.NotAConstant", "-\t\t\t\t\t\t\t&& !methodScope.isStatic", "-\t\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "-\t\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "-\t\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\t// check if reading a final blank field", "-\t\t\t\tif (fieldBinding.isBlankFinal() && currentScope.needBlankFinalFieldInitializationCheck(fieldBinding)) {", "-\t\t\t\tif (!flowInfo.isDefinitelyAssigned(localBinding = (LocalVariableBinding) binding)) {", "-\t\t\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "-\t\tif (valueRequired) {", "-\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "-\t\t}", "-\t\treturn flowInfo;", "+", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired) {", "+\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\tcase Binding.FIELD : // reading a field", "+\t\t\tif (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\tmanageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);", "+\t\t\t}", "+\t\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t// check if accessing enum static field in initializer", "+\t\t\tif (declaringClass.isEnum()) {", "+\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "+\t\t\t\tSourceTypeBinding sourceType = currentScope.enclosingSourceType();", "+\t\t\t\tif (fieldBinding.isStatic()", "+\t\t\t\t\t\t&& this.constant == Constant.NotAConstant", "+\t\t\t\t\t\t&& !methodScope.isStatic", "+\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "+\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "+\t\t\t}\t\t\t\t", "+\t\t\t// check if reading a final blank field", "+\t\t\tif (fieldBinding.isBlankFinal() && currentScope.needBlankFinalFieldInitializationCheck(fieldBinding)) {", "+\t\t\t\tif (!flowInfo.isDefinitelyAssigned(fieldBinding)) {", "+\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.LOCAL : // reading a local variable", "+\t\t\tLocalVariableBinding localBinding;", "+\t\t\tif (!flowInfo.isDefinitelyAssigned(localBinding = (LocalVariableBinding) this.binding)) {", "+\t\t\t\tcurrentScope.problemReporter().uninitializedLocalVariable(localBinding, this);", "+\t\t\t}", "+\t\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "+\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t} else if (localBinding.useFlag == LocalVariableBinding.UNUSED) {", "+\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.FAKE_USED;", "+\t\t\t}", "+\t}", "+\tif (valueRequired) {", "+\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "+\t}", "+\treturn flowInfo;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae46d5019ae3571eba942f940495ab43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void checkNPE(BlockScope scope, FlowContext flowContext,  \t\tFlowInfo flowInfo, boolean checkString)", "signatureAfterChange": "  public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "diff": ["-public void checkNPE(BlockScope scope, FlowContext flowContext, ", "-\t\tFlowInfo flowInfo, boolean checkString) {", "+", "+public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "-\tif ((bits & RestrictiveFlagMASK) == Binding.LOCAL) {", "+\tif ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL) {", "-\t\t\t(checkString || local.type.id != T_JavaLangString)) {", "-\t\t\tif ((this.bits & IsNonNull) == 0) {", "+\t\t\t(checkString || local.type.id != TypeIds.T_JavaLangString)) {", "+\t\t\tif ((this.bits & ASTNode.IsNonNull) == 0) {"]}], "num": 50677}
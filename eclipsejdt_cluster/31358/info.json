{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c61689b73ebb2af7cdc8663c763a4140", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c3464fe47a586cbcfd7a377aaab5e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 105, "signatureBeforeChange": "  \tprivate void rewriteAnnotationsOnDimension(ArrayType replacingType, int index, int pos)", "signatureAfterChange": "  \tprivate void rewriteAnnotationsOnDimension(ArrayType oldArrayType, ArrayType replacingType, int index, int pos, boolean typeReplaced, TextEditGroup editGroup) throws CoreException", "diff": ["-\tprivate void rewriteAnnotationsOnDimension(ArrayType replacingType, int index, int pos) {", "-\t\tDimension dim = (Dimension) replacingType.dimensions().get(index);", "-\t\trewriteTypeAnnotations(dim, Dimension.ANNOTATIONS_PROPERTY, pos);", "+\tprivate void rewriteAnnotationsOnDimension(ArrayType oldArrayType, ArrayType replacingType, int index, int pos, boolean typeReplaced, TextEditGroup editGroup) throws CoreException {", "+\t\tif (typeReplaced) {", "+\t\t\tList dimensions = oldArrayType.dimensions();", "+\t\t\tDimension oldDim = index < dimensions.size() ? (Dimension) dimensions.get(index) : null;", "+\t\t\tif (oldDim != null) {", "+\t\t\t\tList oldAnnotations = oldDim.annotations();", "+\t\t\t\tint size = oldAnnotations.size();", "+\t\t\t\tif (size > 0) {", "+\t\t\t\t\tASTNode prev = getPreviousNode(oldDim);", "+\t\t\t\t\tAnnotation annotation = (Annotation) oldAnnotations.get(0);", "+\t\t\t\t\tint start = prev != null ? prev.getStartPosition() + prev.getLength() : annotation.getStartPosition();", "+\t\t\t\t\tannotation = (Annotation) oldAnnotations.get(size - 1);", "+\t\t\t\t\tint end = annotation.getStartPosition() + annotation.getLength();", "+\t\t\t\t\tend = getScanner().getTokenEndOffset(TerminalTokens.TokenNameLBRACKET, end) - 1;", "+\t\t\t\t\tdoTextRemove(start, end - start, editGroup);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tinsertAnnotationsOnDimension(replacingType, index, pos, editGroup, true);", "+\t\t} else {", "+\t\t\tDimension dim = (Dimension) replacingType.dimensions().get(index);", "+\t\t\trewriteNodeList(dim, Dimension.ANNOTATIONS_PROPERTY, pos, String.valueOf(' '), String.valueOf(' '), String.valueOf(' '));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece6d5f242fa23d203bf40f8dd26cc00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 97, "signatureBeforeChange": "  \tpublic boolean visit(Dimension node)", "signatureAfterChange": " \t \tpublic boolean visit(Dimension node)", "diff": ["+\t", "-\t\trewriteNodeList(node, Dimension.ANNOTATIONS_PROPERTY, node.getStartPosition(), Util.EMPTY_STRING, \" \"); //$NON-NLS-1$", "+\t\t", "+\t\tboolean keywordSpace = true;", "+\t\tASTNode parent = node.getParent();", "+\t\tif (parent.getNodeType() == ASTNode.ARRAY_TYPE) {", "+\t\t\tList oldAnnotations = (List) getOriginalValue(node, Dimension.ANNOTATIONS_PROPERTY);", "+\t\t\tList newAnnotations = (List) getNewValue(node, Dimension.ANNOTATIONS_PROPERTY);", "+\t\t\tint oldAnnotationSize = oldAnnotations.size();", "+\t\t\tint newAnnotationSize = newAnnotations.size();", "+\t\t\tif (oldAnnotationSize > 0 && newAnnotationSize == 0) { /* removed all annotations */", "+\t\t\t\tint delStart = getPreviousTokenEndOffset(node, TerminalTokens.TokenNameAT);", "+\t\t\t\tint delEnd = ((ASTNode) oldAnnotations.get(0)).getStartPosition();", "+\t\t\t\tif (delStart >= 0 && delEnd > delStart) {", "+\t\t\t\t\tdoTextRemove(delStart, delEnd - delStart, null); /* remove spaces before the annotation */", "+\t\t\t\t}", "+", "+\t\t\t\tASTNode currNode = (ASTNode) oldAnnotations.get(oldAnnotationSize - 1);", "+\t\t\t\tdelStart = currNode.getStartPosition() + currNode.getLength();", "+\t\t\t\ttry {", "+\t\t\t\t\tdelEnd = getScanner().getNextStartOffset(delStart, false);", "+\t\t\t\t\tdoTextRemove(delStart, delEnd - delStart, null); /* remove spaces after the annotation */", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}", "+\t\t\t} else if (oldAnnotationSize == 0 && newAnnotationSize > 0) { /* inserting first annotation */", "+\t\t\t\tif (ScannerHelper.isWhitespace(this.content[node.getStartPosition() - 1])) {", "+\t\t\t\t\tkeywordSpace = false; /* space exists already */", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\trewriteNodeList(node, Dimension.ANNOTATIONS_PROPERTY, node.getStartPosition(), keywordSpace ? String.valueOf(' ') : Util.EMPTY_STRING, String.valueOf(' '), String.valueOf(' '));"]}], "num": 31358}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b76d9bf64357bafd9c18720d488c5a57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e02287fc16f6411a3b012d3d480638a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 656, "methodNumberAfterChange": 656, "signatureBeforeChange": "\t\t \tpublic void test654()", "signatureAfterChange": "\t\t \tpublic void test654()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tfor (Map.Entry e : myMap.entrySet())\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method entrySet() belongs to the raw type Map. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getKey() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                                                         ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getValue() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tSet<Map.Entry> set = myMap.entrySet();\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method entrySet() belongs to the raw type Map. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getKey() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                                                         ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getValue() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c204c6ed9a9bab6e577a26f9c2e587c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 148, "signatureBeforeChange": " public void test151()", "signatureAfterChange": " public void test151()", "diff": ["-\t\t\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\tprivate static class B2F extends X { }\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.B2F is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tprivate static class F2B extends X { }\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.F2B is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\t\"\tprivate static class B2F extends Key {\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.Key.B2F is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. WARNING in X.java (at line 14)\\n\" +", "-\t\t\t\t\"\tprivate static B2F create() { return new B2F(); }\\n\" +", "-\t\t\t\t\"\t                   ^^^^^^^^\\n\" +", "-\t\t\t\t\"The method create() from the type X.Key.B2F is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 15)\\n\" +", "-\t\t\t\t\"6. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\t\"\tprivate static class F2B extends Key {\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.Key.F2B is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"7. WARNING in X.java (at line 19)\\n\" +", "-\t\t\t\t\"\tprivate static F2B create() { return new F2B(); }\\n\" +", "-\t\t\t\t\"\t                   ^^^^^^^^\\n\" +", "-\t\t\t\t\"The method create() from the type X.Key.F2B is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"8. ERROR in X.java (at line 20)\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 20)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e302f4e17a060f2c689fb46cd3c0cd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test049()", "signatureAfterChange": " public void test049()", "diff": ["+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment", "+public void test049() {", "+\t// This test checks that the simple cases are OK", "+\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"interface I {\\n\" + ", "+\t\t\t\t\t\"\tvoid doit();\\n\" + ", "+\t\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"    int var = 2;\\n\" + ", "+\t\t\t\t\t\"    I x2 = () -> {\\n\" + ", "+\t\t\t\t\t\"      System.out.println(args); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "+\t\t\t\t\t\"    };\\n\" + ", "+\t\t\t\t\t\"    var=2;\\n\" + ", "+\t\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\t\"}\" ,", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tSystem.out.println(args); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "+\t\t\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\t\t\"Missing code implementation in the compiler\\n\" +  // expected since emulation path computation is not in place.", "+\t\t\t\t\"----------\\n\");", "+}", "-public void test049() {", "-\t\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\t\"    try {\\n\" + ", "-\t\t\t\t\t\"      new java.io.File(\\\"dweep\\\").getCanonicalPath();\\n\" + ", "-\t\t\t\t\t\"    } catch (java.io.IOException ioe) {\\n\" + ", "-\t\t\t\t\t\"      I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(ioe.getMessage()); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "-\t\t\t\t\t\"      };\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"    java.util.List<String> list = new java.util.ArrayList<>();\\n\" + ", "-\t\t\t\t\t\"    for (String s : list) {\\n\" + ", "-\t\t\t\t\t\"      I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(s); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "-\t\t\t\t\t\"      };\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"    for (String s2 : list) {\\n\" + ", "-\t\t\t\t\t\"      s2 = \\\"Nice!\\\";\\n\" + ", "-\t\t\t\t\t\"      I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(s2); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\t\"      };\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\t\"\\n\" +", "-\t\t\t\t\t\"  void foo() {\\n\" + ", "-\t\t\t\t\t\"    try {\\n\" + ", "-\t\t\t\t\t\"      \\n\" + ", "-\t\t\t\t\t\"  } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {\\n\" + ", "-\t\t\t\t\t\"    I i = () -> {\\n\" + ", "-\t\t\t\t\t\"      System.out.println(e);\\n\" + ", "-\t\t\t\t\t\"     };\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\t\"       System.out.println(var);\\n\" + ", "-\t\t\t\t},", "-\t\t\t\t\"1. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(s2); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\"\t                   ^^\\n\" + ", "-\t\t\t\t\"The variable s2 must be must be final or effectively final if used in an inner class\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d45516d669b98ecca038f7acbd2be8c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 974, "methodNumberAfterChange": 977, "signatureBeforeChange": " public void test0968()", "signatureAfterChange": " public void test0968()", "diff": ["-\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method addAll(Collection<? extends E>) of type ArrayList<T0> has the same erasure as addAll(Collection<? extends E>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method retainAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as retainAll(Collection<?>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method toArray(T[]) of type ArrayList<T0> has the same erasure as toArray(T[]) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method add(E) of type ArrayList<T0> has the same erasure as add(E) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method containsAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as containsAll(Collection<?>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method removeAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as removeAll(Collection<?>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"9. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de69af8b77050facb67b7b4455bbc4c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "72398fb1bfc9de8f8d1c235c08849e28d61cb9f4", "commitAfterChange": "a52f17f8883dd812875c341ff752527a9011d961", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void test401939b()", "signatureAfterChange": " public void test401939b()", "diff": ["-\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { while (TRUE) throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { while (NIJAM) throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (TRUE) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"6. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 19)\\n\" + ", "-\t\t\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (true) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"8. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (false) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"9. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 22)\\n\" + "]}], "num": 41595}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "093425d6ec064e3e3d9344b90bba7f80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58406c95a25c9ded1abe58e7041f31f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "diff": ["-\tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r", "+\tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r", "-\t\tUtil.sort(filePaths); // sort by projects\r", "+\t\t\t\r", "+\t\t// sort file paths projects\r", "+\t\tUtil.sort(filePaths); \r", "+\t\t\r", "+\t\t// initialize handle factory (used as a cache of handles so as to optimize space)\r", "+\t\t\r", "+\t\t// initialize locator with working copies\r", "+\t\tthis.workingCopies = workingCopies;\r", "+\t\tHashSet wcPaths = new HashSet(); // a set of Strings\r", "+\t\tif (workingCopies != null) {\r", "+\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {\r", "+\t\t\t\tIWorkingCopy workingCopy = workingCopies[i];\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIResource res = workingCopy.getOriginalElement().getUnderlyingResource();\r", "+\t\t\t\t\twcPaths.add(res.getFullPath().toString());\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t// continue with next working copy\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\t// initialize pattern for polymorphic search (ie. method reference pattern)\r", "-\r", "+\t\t\r", "-\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "+\t\tthis.initializeMatchingOpenables(workingCopies);\r", "+\t\t\t\r", "+\t\t\t// skip paths that are hidden by a working copy\r", "+\t\t\tif (wcPaths.contains(pathString)) continue;\r", "+\t\t\t\r", "-\t\t\t\t\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "+\t\t\t\t\t\tthis.initializeMatchingOpenables(workingCopies);\r", "-\t\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "+\t\t\tthis.initializeMatchingOpenables(workingCopies);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59620a848bd061637f3e7a28417b7f25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7fe004f7b5f0bcd4b089b0ee8582afd2bc4b79cd", "commitAfterChange": "530c48877da8402a05b3f0b84990331c9acd9df4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \tprivate void locateMatches() throws JavaModelException", "signatureAfterChange": "\r \tprivate void locateMatches(JavaProject previousJavaProject) throws JavaModelException", "diff": ["-\tprivate void locateMatches() throws JavaModelException {\r", "+\tprivate void locateMatches(JavaProject previousJavaProject) throws JavaModelException {\r", "+\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(previousJavaProject.getPackageFragmentRoots());\r", "+\t\r", "+\t\t// binding creation\r", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) { \r", "+\t\t\topenables[i].buildTypeBindings();\r", "+\t\t}\r", "+\r", "-\t\t// potential match resolution\r", "-\t\tfor (this.potentialMatchesIndex = 0;\r", "-\t\t\tthis.potentialMatchesIndex < this.potentialMatchesLength;\r", "-\t\t\tthis.potentialMatchesIndex++) {\r", "-\t\t\t\t\r", "+\t\t// matching openable resolution\r", "+\t\tfor (int i = 0, length = openables.length; i < length; i++) { \r", "-\t\t\t\tPotentialMatch potentialMatch =\r", "-\t\t\t\t\tthis.potentialMatches[this.potentialMatchesIndex];\r", "-\t\t\t\tpotentialMatch.shouldResolve = shouldResolve;\r", "-\t\t\t\tpotentialMatch.locateMatches();\r", "-\t\t\t\tpotentialMatch.reset();\r", "+\t\t\t\tthis.currentMatchingOpenable = openables[i];\r", "+\t\t\t\t\r", "+\t\t\t\t// skip type has it is hidden so not visible\r", "+\t\t\t\tif (this.currentMatchingOpenable.hasAlreadyDefinedType()) {\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\tthis.currentMatchingOpenable.shouldResolve = shouldResolve;\r", "+\t\t\t\tthis.currentMatchingOpenable.locateMatches();\r", "+\t\t\t\tthis.currentMatchingOpenable.reset();\r", "-\t\t\t\t// continue and try next potential match\r", "+\t\t\t\t// continue and try next matching openable\r", "+\t\tthis.currentMatchingOpenable = null;\r"]}], "num": 65906}
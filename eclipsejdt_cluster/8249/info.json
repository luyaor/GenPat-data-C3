{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3608afc17fc057c4535939437a5591e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bbed7e6630f5639e71ed8f65942dacc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a7e924b1651a1b9026ccc6590ce8e03365836a1b", "commitAfterChange": "d3da1d109c57a90a2bd8342736abf401463d58e5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  public String extractDestinationPathFromSourceFile(CompilationResult result)", "signatureAfterChange": "  public String extractDestinationPathFromSourceFile(CompilationResult result)", "diff": ["-\t\tif (lastIndex == -1) {", "-\t\t\treturn System.getProperty(\"user.dir\"); //$NON-NLS-1$", "+\t\tif (lastIndex != -1) {", "+\t\t\tfinal String outputPathName = new String(fileName, 0, lastIndex);", "+\t\t\tfinal File output = new File(outputPathName);", "+\t\t\tif (output.exists() && output.isDirectory()) {", "+\t\t\t\treturn outputPathName;", "+\t\t\t}", "-\t\treturn new String(fileName, 0, lastIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cf7a0b4f97c0e2c7bd6d253cec3c4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerInvocationTests.java", "commitBeforeChange": "121da1ed9487cd06624131be60f7fed861a83829", "commitAfterChange": "65bcf10af454142ab48b1720e5cae843f9f8de26", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test019_sourcepath_without_destination() throws IOException", "signatureAfterChange": " public void test019_sourcepath_without_destination() throws IOException", "diff": ["+\tString sourceDirectoryName = OUTPUT_DIR + \"/src2\";", "+\tFile sourceFolder = new File(sourceDirectoryName);", "+\tif (!sourceFolder.exists()) {", "+\t\tif (!sourceFolder.mkdirs()) {", "+\t\t\t// source folder could not be built", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\t\tJAVAC_COMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */);", "+\t\tCOMPILER.getStandardFileManager(null /* diagnosticListener */, null /* locale */, null /* charset */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f30ea99661f56b9cd1ed04f9f0a47c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "3a6f0f2ed431de8835587b4393f3f014cf7bdf2f", "commitAfterChange": "c2e8194cafe2ba21b2686e52bd9fc76ac7866ed8", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath() throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath() throws JavaModelException", "diff": ["-\t\tif (perProjectInfo.resolvedClasspath == null)", "+\t\tIClasspathEntry[] resolvedClasspath = perProjectInfo.resolvedClasspath;", "+\t\tif (resolvedClasspath == null) {", "-\t\treturn perProjectInfo.resolvedClasspath;", "+\t\t\tresolvedClasspath = perProjectInfo.resolvedClasspath;", "+\t\t\tif (resolvedClasspath == null) {", "+\t\t\t\t// another thread reset the resolved classpath, use a temporary PerProjectInfo", "+\t\t\t\tPerProjectInfo temporaryInfo = new PerProjectInfo(getProject());", "+\t\t\t\tresolveClasspath(temporaryInfo);", "+\t\t\t\tresolvedClasspath = temporaryInfo.resolvedClasspath;", "+\t\t\t}", "+\t\t}", "+\t\treturn resolvedClasspath;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3b35a8bf424495ca6ae62c1ab5f61c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "31ed34e0a037856b8e3e3c1c78d05a0a783d81f2", "commitAfterChange": "837346ba964bb0d4b1f43b6b3500ddc7ecfbb966", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void checkIndexConsistency()", "signatureAfterChange": " public void checkIndexConsistency()", "diff": ["+\tif (isRunningLock == null) {", "+\t\tFile fileLock = new File(getJavaPluginWorkingLocation().toFile(), IsRunning);", "+\t\tif (!fileLock.exists()) return; // can skip it since the IndexManager was in a safe state", "+\t\tisRunningLock = fileLock;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a913e18d2a9502c8bf57997d5f36637d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "3a6f0f2ed431de8835587b4393f3f014cf7bdf2f", "commitAfterChange": "c2e8194cafe2ba21b2686e52bd9fc76ac7866ed8", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) throws JavaModelException", "diff": ["+\t\t\tif (resolvedClasspath == null) {", "+\t\t\t\t// another thread reset the resolved classpath, use a temporary PerProjectInfo", "+\t\t\t\tPerProjectInfo temporaryInfo = new PerProjectInfo(getProject());", "+\t\t\t\tresolveClasspath(temporaryInfo);", "+\t\t\t\tresolvedClasspath = temporaryInfo.resolvedClasspath;", "+\t\t\t\tunresolvedEntryStatus = temporaryInfo.unresolvedEntryStatus;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c613b0aa53a6dc2de5ab69da002515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "3a6f0f2ed431de8835587b4393f3f014cf7bdf2f", "commitAfterChange": "c2e8194cafe2ba21b2686e52bd9fc76ac7866ed8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic int generateDelta(JavaElementDelta delta)", "signatureAfterChange": " \tpublic int generateDelta(JavaElementDelta delta)", "diff": ["+\t\t\tif (newResolvedClasspath == null) {", "+\t\t\t\t// another thread reset the resolved classpath, use a temporary PerProjectInfo", "+\t\t\t\tPerProjectInfo temporaryInfo = new PerProjectInfo(this.project.getProject());", "+\t\t\t\tthis.project.resolveClasspath(temporaryInfo);", "+\t\t\t\tnewRawClasspath = temporaryInfo.rawClasspath;", "+\t\t\t\tnewResolvedClasspath = temporaryInfo.resolvedClasspath;", "+\t\t\t\tnewOutputLocation = temporaryInfo.outputLocation;\t\t\t\t", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebec5ec5bff745de13c824ffa5724189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/LexStream.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic Token token(int index)", "signatureAfterChange": " \t \tpublic Token token(int index)", "diff": ["+\t\tif(index < 0) {", "+\t\t\tToken eofToken = new Token();", "+\t\t\teofToken.kind = TokenNameEOF;", "+\t\t\teofToken.name = CharOperation.NO_CHAR;", "+\t\t\treturn eofToken;", "+\t\t}", "-\t\t} else if(this.tokenCacheIndex - length > index) {", "+\t\t} else if(this.tokenCacheIndex - length >= index) {"]}], "num": 8249}
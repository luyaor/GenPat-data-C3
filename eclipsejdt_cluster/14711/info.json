{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67a9b60ce95bfb52ef0420543b2bdd52", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c33c870498576d5c213df30b8fe832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType)", "signatureAfterChange": " \tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType, boolean compact)", "diff": ["-\tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType) {", "-\t\tboolean isConstructor = CharOperation.equals(methodName, INIT);", "+\tpublic static String toString(char[] declaringClass, char[] methodName, char[] methodSignature, boolean includeReturnType, boolean compact) {", "+\t\tfinal boolean isConstructor = CharOperation.equals(methodName, INIT);", "-\t\tif (!isConstructor) {", "-\t\t\t// return type", "-\t\t\tif (includeReturnType) {", "-\t\t\t\tchar[] rts = Signature.getReturnType(methodSignature);", "-\t\t\t\tappendTypeSignature(rts, 0 , buffer);", "-\t\t\t\tbuffer.append(' ');", "+\t\t// decode declaring class name", "+\t\t// it can be either an array signature or a type signature", "+\t\tif (declaringClass.length > 0) {", "+\t\t\tchar[] declaringClassSignature = null;", "+\t\t\tif (declaringClass[0] == Signature.C_ARRAY) {", "+\t\t\t\tCharOperation.replace(declaringClass, '/', '.');", "+\t\t\t\tdeclaringClassSignature = Signature.toCharArray(declaringClass);", "+\t\t\t} else {", "+\t\t\t\tCharOperation.replace(declaringClass, '/', '.');", "+\t\t\t\tdeclaringClassSignature = declaringClass;", "+\t\t\t}", "+\t\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('.', declaringClassSignature);", "+\t\t\tif (compact && lastIndexOfSlash != -1) {", "+\t\t\t\tbuffer.append(declaringClassSignature, lastIndexOfSlash + 1, declaringClassSignature.length - lastIndexOfSlash - 1);", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(declaringClassSignature);", "-\t\t", "+", "-\t\tint lastIndexOfSlash = CharOperation.lastIndexOf('/', declaringClass);", "-\t\tif (lastIndexOfSlash != -1) {", "-\t\t\tbuffer.append(declaringClass, lastIndexOfSlash + 1, declaringClass.length - lastIndexOfSlash - 1);", "-\t\t} else {", "-\t\t\tbuffer.append(declaringClass);", "-\t\t}", "-\t", "-\t\t\tif (i == max - 1) {", "-\t\t\t\tappendTypeSignature(pts[i], 0 , buffer);", "-\t\t\t} else {", "-\t\t\t\tappendTypeSignature(pts[i], 0 , buffer);", "-\t\t\t}", "+\t\t\tappendTypeSignature(pts[i], 0 , buffer, compact);", "+\t\t", "+\t\tif (!isConstructor) {", "+\t\t\tbuffer.append(\" : \"); //$NON-NLS-1$", "+\t\t\t// return type", "+\t\t\tif (includeReturnType) {", "+\t\t\t\tchar[] rts = Signature.getReturnType(methodSignature);", "+\t\t\t\tappendTypeSignature(rts, 0 , buffer, compact);", "+\t\t\t\tbuffer.append(' ');", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea10152475df7cb55439557db3e0a36b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprotected int compare(CompletionProposal proposal1, CompletionProposal proposal2)", "signatureAfterChange": " \t \tprotected int compare(CompletionProposal proposal1, CompletionProposal proposal2)", "diff": ["-\t\tif(relDif != 0) {", "-\t\t\treturn relDif;", "-\t\t} else {", "-\t\t\tString name1 = getElementName(proposal1);", "-\t\t\tString name2 = getElementName(proposal2);", "-\t\t\tint nameDif = name1.compareTo(name2);", "-\t\t\tif(nameDif != 0) {", "-\t\t\t\treturn nameDif;", "-\t\t\t} else {", "-\t\t\t\tint kindDif = proposal1.getKind() - proposal2.getKind();", "-\t\t\t\tif(kindDif != 0) {", "-\t\t\t\t\treturn kindDif;", "-\t\t\t\t} else {", "-\t\t\t\t\tString completion1 = new String(proposal1.getCompletion());", "-\t\t\t\t\tString completion2 = new String(proposal2.getCompletion());", "-\t\t\t\t\treturn completion1.compareTo(completion2);", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif(relDif != 0) return relDif;", "+\t\tString name1 = getElementName(proposal1);", "+\t\tString name2 = getElementName(proposal2);", "+\t\tint nameDif = name1.compareTo(name2);", "+\t\tif(nameDif != 0) return nameDif;", "+\t\tint kindDif = proposal1.getKind() - proposal2.getKind();", "+\t\tif(kindDif != 0) return kindDif;", "+\t\tString completion1 = new String(proposal1.getCompletion());", "+\t\tString completion2 = new String(proposal2.getCompletion());", "+\t\tint completionDif = completion1.compareTo(completion2);", "+\t\tif(completionDif != 0) return completionDif;", "+\t\tchar[] temp = proposal1.getSignature();", "+\t\tString signature1 = temp == null ? null: new String(temp);", "+\t\ttemp = proposal2.getSignature();", "+\t\tString signature2 = temp == null ? null: new String(temp);", "+\t\tint signatureDif = 0;", "+\t\tif(signature1 != null && signature2 != null) {", "+\t\t\tsignatureDif = signature1.compareTo(signature2);", "+\t\tif(signatureDif != 0) return signatureDif;", "+\t\ttemp = proposal1.getDeclarationSignature();", "+\t\tString declarationSignature1 = temp == null ? null: new String(temp);", "+\t\ttemp = proposal2.getDeclarationSignature();", "+\t\tString declarationSignature2 = temp == null ? null: new String(temp);", "+\t\tint declarationSignatureDif = 0;", "+\t\tif(declarationSignature1 != null && declarationSignature2 != null) {", "+\t\t\tdeclarationSignatureDif = declarationSignature1.compareTo(declarationSignature2);", "+\t\t}", "+\t\tif(declarationSignatureDif != 0) return declarationSignatureDif;", "+\t\treturn 0;"]}], "num": 14711}
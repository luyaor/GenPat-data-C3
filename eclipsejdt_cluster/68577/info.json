{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71b721a1514d2b3e38e159290c929c54", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ee628b1d82d9fff144bbe901fa18cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void testCoreException() throws CoreException", "signatureAfterChange": " public void testCoreException() throws CoreException", "diff": ["-\tIJavaSearchResultCollector resultCollector = new IJavaSearchResultCollector() {", "-\t\tpublic void accept(IResource resource, int start, int end, IJavaElement enclosingElement, int accuracy) throws CoreException {", "+\tSearchRequestor resultCollector = new SearchRequestor() {", "+\t\tpublic boolean acceptSearchMatch(SearchMatch match) throws CoreException {", "-\t\tpublic void aboutToStart() {}", "-\t\tpublic void done() {}", "-\t\tpublic IProgressMonitor getProgressMonitor() {", "-\t\t\treturn null;", "-\t\t}", "+\t\tpublic void beginReporting() {}", "+\t\tpublic void endReporting() {}", "+\t\tpublic void enterParticipant(SearchParticipant participant) {}", "+\t\tpublic void exitParticipant(SearchParticipant participant) {}", "-\t\tnew SearchEngine().search(", "-\t\t\tgetWorkspace(), ", "+\t\tsearch(", "-\t} catch (JavaModelException e) {", "-\t\tThrowable wrappedException = e.getException();", "-\t\tassertTrue(\"Unexpected wrapped exception\", wrappedException instanceof CoreException);", "-\t\tassertEquals(\"Unexpected CoreException has been thrown\", \"test\", ((CoreException)wrappedException).getStatus().getMessage());", "+\t} catch (CoreException e) {", "+\t\tassertEquals(\"Unexpected CoreException has been thrown\", \"test\", e.getStatus().getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45f07f8fafe8e5976701927f7a2955c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression)", "signatureAfterChange": "  \tpublic MarkerAnnotation convert(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation annotation)", "diff": ["-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression) {", "-\t\tInfixExpression infixExpression = this.ast.newInfixExpression();", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(infixExpression, expression);", "+\tpublic MarkerAnnotation convert(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation annotation) {", "+\t\tMarkerAnnotation markerAnnotation = this.ast.newMarkerAnnotation();", "+\t\tsetTypeNameForAnnotation(annotation, markerAnnotation);", "+\t\tint start = annotation.sourceStart;", "+\t\tint end = annotation.declarationSourceEnd;", "+\t\tmarkerAnnotation.setSourceRange(start, end - start + 1);", "+\t\treturn markerAnnotation;", "+\t}", "-\t\tExpression leftExpression = convert(expression.left);", "-\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\tinfixExpression.setRightOperand(convert(expression.right));", "-\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\tint startPosition = leftExpression.getStartPosition();", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "-\t"]}], "num": 68577}
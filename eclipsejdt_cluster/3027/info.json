{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbc3eb7161c4bd9b3dfd5079bee015c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7b5e346520c2701024a145b9f643f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tswitch (checkType) {", "+\t// if reference is being recorded inside an assert, we will not raise redundant null check warnings", "+\tcheckType |= (this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING);", "+\tint checkTypeWithoutHideNullWarning = checkType & ~FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK;", "+\tswitch (checkTypeWithoutHideNullWarning) {", "-\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "+\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5db46c7e1ebe8d99c11925245e9e085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "diff": ["-\t\tObject target = JavaModel.getTarget(getProject().getWorkspace().getRoot(), path, false);", "-\t\tif (target == null) {", "-\t\t\tif (path.segmentCount() > 0) {", "-\t\t\t\tString ext = path.getFileExtension();", "-\t\t\t\tif (ext == null) {", "-\t\t\t\t\treturn getPackageFragmentRoot(getProject().getFolder(path));", "-\t\t\t\t} else {", "-\t\t\t\t\t// resource jar", "-\t\t\t\t\treturn getPackageFragmentRoot(getProject().getFile(path));", "-\t\t\t\t}", "-\t\t\t} else {", "+\t\tif (!path.isAbsolute()) {", "+\t\t\tpath = getPath().append(path);", "+\t\t}", "+\t\tint segmentCount = path.segmentCount();", "+\t\tswitch (segmentCount) {", "+\t\t\tcase 0:", "+\t\t\t\treturn null;", "+\t\t\tcase 1:", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (target instanceof IResource) {", "-\t\t\t\treturn this.getPackageFragmentRoot((IResource)target);", "-\t\t\t} else {", "-\t\t\t\tString ext = path.getFileExtension();", "-\t\t\t\tif (((java.io.File)target).isFile()", "-\t\t\t\t\t&& (\"jar\".equalsIgnoreCase(ext)  //$NON-NLS-1$", "-\t\t\t\t\t\t|| \"zip\".equalsIgnoreCase(ext))) { //$NON-NLS-1$", "-\t\t\t\t\t// external jar", "-\t\t\t\t\treturn getPackageFragmentRoot0(path.toOSString());", "+\t\t\tdefault:", "+\t\t\t\tif (Util.isArchiveFileName(path.lastSegment())) {", "+\t\t\t\t\treturn getPackageFragmentRoot0(path);", "-\t\t\t\t\t// unknown path", "-\t\t\t\t\treturn null;", "+\t\t\t\t\treturn getPackageFragmentRoot(getProject().getWorkspace().getRoot().getFolder(path));", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc64e93808a1319d4b248ee4280fabc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void initializeScanner(char[] compilationUnitSource)", "signatureAfterChange": "  \tprivate void initializeScanner(long sourceLevel, DefaultCodeFormatterOptions preferences)", "diff": ["-\t */", "-\tpublic void initializeScanner(char[] compilationUnitSource) {", "-\t\tthis.scanner.setSource(compilationUnitSource);", "-\t\tthis.scannerEndPosition = compilationUnitSource.length;", "-\t\tthis.scanner.resetTo(0, this.scannerEndPosition - 1);", "-\t\tthis.edits = new OptimizedReplaceEdit[INITIAL_SIZE];", "-\t\tthis.maxLines = this.lineEnds == null ? -1 : this.lineEnds.length - 1;", "-\t\tthis.scanner.lineEnds = this.lineEnds;", "-\t\tthis.scanner.linePtr = this.maxLines;", "-\t\tinitFormatterCommentParser();", "+\tprivate void initializeScanner(long sourceLevel, DefaultCodeFormatterOptions preferences) {", "+\t\tthis.disablingTag = preferences.disabling_tag;", "+\t\tthis.enablingTag = preferences.enabling_tag;", "+\t\tchar[][] taskTags;", "+\t\tif (this.disablingTag == null && this.enablingTag == null) {", "+\t\t\ttaskTags = null;", "+\t\t} else {", "+\t\t\ttaskTags = new char[][] { this.disablingTag, this.enablingTag };", "+\t\t}", "+\t\tthis.scanner = new Scanner(true, true, false/*nls*/, sourceLevel/*sourceLevel*/, taskTags, null/*taskPriorities*/, true/*taskCaseSensitive*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff966c2dc6f99dfb4b32738996ecdf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "eb6a62cd301dd92365462b5f4580a54624129ed5", "commitAfterChange": "f363db69d77a20757ac0ea9e878cf9c696cd79df", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\tdisableAll(ProblemSeverities.Warning);", "-\t\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\t\tdisableAll(ProblemSeverities.Warning);", "-\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "+\t\t\t\t\tboolean isEnabling;", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\t\t\tdisableAll(ProblemSeverities.Warning);", "-\t\t\t\t\t\t\tallowPlusOrMinus = false;", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfPlusOption\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = false;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfMinusOption\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "+\t\t\t\t\tboolean isEnabling;", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tdisableErrors();", "+\t\t\t\t\t\t\tdisableAll(ProblemSeverities.Error);", "-\t\t\t\t\t\t\tallowPlusOrMinus = false;", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfPlusOption\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = false;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidUsageOfMinusOption\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\ttoken = token.substring(1);"]}], "num": 3027}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c22405177f26ef920ee8e46ebdfd324b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32ab2d05c0ca820b725972ad32062ff6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "dbe199a0a35ed3939846015f97b0348b23531353", "commitAfterChange": "f86c66887c5e1ed3962b4b871db70881ac5621a6", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testBug83127g()", "signatureAfterChange": " \tpublic void testBug83127g()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 5.0\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341d7cf6cd8b79a3256ff47016ab539b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void testTypeRefGenericMethod_AllGenericFlags() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericMethod_AllGenericFlags() throws CoreException", "diff": ["-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\tvoid foo(A<\ufffd|String|\ufffd> a) {@46] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<\ufffd|String|\ufffd>foo();@64] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<\ufffd|A|\ufffd<? extends Exception>>foo();@83] EXACT_MATCH\\n\" +", "-\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<A<? extends \ufffd|Exception|\ufffd>>foo();@95] EXACT_MATCH\"", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\tvoid foo(A<!|String|!> a) {@46] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<!|String|!>foo();@64] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<!|A|!<? extends Exception>>foo();@83] EXACT_MATCH\\n\" +", "+\t\t\"src/test/Test.java void test.Test.foo(A<String>) [\t\ta.<A<? extends !|Exception|!>>foo();@95] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75416671556d8669297c89859183469a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"     8  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\t\"    12  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: I\\n\";", "+\t\t\t\"        [pc: 0, pc: 16] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\t\"        [pc: 3, pc: 16] local: i index: 1 type: int\\n\";"]}], "num": 63538}
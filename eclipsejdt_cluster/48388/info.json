{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79b7f47b94b5bd3a5eecd415b1885b14", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3459aeb2162013c48a27290d74633a29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f947d5592358b89c12d575b3786b2a35e36a4031", "commitAfterChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tboolean warnOptionInUse = false;", "-\t\tboolean noWarnOptionInUse = false;", "-\t\t\t\tif (pathCount > 0)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateClasspath\", currentArg)); //$NON-NLS-1$", "-\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\tif (pathCount == 0) {", "+\t\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\t}", "-\t\t\t\twarnOptionInUse = true;", "-\t\t\t\tif (noWarnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\t\t\t\t", "-\t\t\t\t\t\t\t//$NON-NLS-1$", "-\t\t\t\tnoWarnOptionInUse = true;", "-\t\t\t\tnoWarn = true;", "-\t\t\t\tif (warnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$", "+\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\twarnOptionInUse = true;", "-\t\t\t\tif (noWarnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$", "-\t\t\t\t\tnoWarn = true;", "+\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (didSpecifyCompliance && options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\tif (noWarn) {", "-\t\t\t// filter options which are related to the assist component", "-\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1763198b5150de8cc4d0a44960f5c21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["- * String\t\toutput location", "-\tout.writeUTF(outputLocationString);", "- * Class path locations[]", "+ * ClasspathMultiDirectory[]", "- * ", "- * NOTE: Cannot have portable build states while classpath directories are full filesystem paths", "-\tout.writeInt(length = classpathLocations.length);", "-\tfor (int i = 0; i < length; ++i) {", "-\t\tClasspathLocation c = classpathLocations[i];", "+\tout.writeInt(length = sourceLocations.length);", "+\tfor (int i = 0; i < length; i++) {", "+\t\tClasspathMultiDirectory md = sourceLocations[i];", "+\t\tout.writeUTF(md.sourceFolder.getProjectRelativePath().toString());", "+\t\tout.writeUTF(md.binaryFolder.getProjectRelativePath().toString());", "+\t\twriteNames(md.exclusionPatterns, out);", "+\t\tout.writeBoolean(md.hasIndependentOutputFolder);", "+\t}", "+", "+/*", "+ * ClasspathLocation[]", "+ * int\t\t\t\tid", "+ * String\t\tpath(s)", "+*/", "+\tout.writeInt(length = binaryLocations.length);", "+\tnext : for (int i = 0; i < length; i++) {", "+\t\tClasspathLocation c = binaryLocations[i];", "-\t\t\tClasspathMultiDirectory md = (ClasspathMultiDirectory) c;", "-\t\t\tout.writeUTF(md.sourcePath);", "-\t\t\tout.writeUTF(md.binaryPath);", "+\t\t\tfor (int j = 0, m = sourceLocations.length; j < m; j++) {", "+\t\t\t\tif (sourceLocations[j] == c) {", "+\t\t\t\t\tout.writeInt(j);", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tout.writeUTF(((ClasspathDirectory) c).binaryPath);", "-\t\t} else if (c instanceof ClasspathJar) {", "-\t\t\tout.writeByte(3);", "-\t\t\tout.writeUTF(((ClasspathJar) c).zipFilename);", "+\t\t\tClasspathDirectory cd = (ClasspathDirectory) c;", "+\t\t\tout.writeUTF(cd.binaryFolder.getProjectRelativePath().toString());", "+\t\t\tout.writeBoolean(cd.isOutputFolder);", "+\t\t} else {", "+\t\t\tClasspathJar jar = (ClasspathJar) c;", "+\t\t\tif (jar.zipFilename.equals(jar.relativePathname)) {", "+\t\t\t\tout.writeByte(3);", "+\t\t\t\tout.writeUTF(jar.relativePathname);", "+\t\t\t} else {", "+\t\t\t\tout.writeByte(4);", "+\t\t\t\tout.writeUTF(jar.zipFilename);", "+\t\t\t}", "- * String[]\t\tInterned locations", "+ * String[]\t\tInterned type locators", "-\tArrayList internedLocations = new ArrayList(length);", "+\tArrayList internedTypeLocators = new ArrayList(length);", "-\t\t\t\tinternedLocations.add(key);", "+\t\t\t\tinternedTypeLocators.add(key);", "- * Type locations table", "+ * Type locators table", "- * int\t\t\t\tinterned location id", "+ * int\t\t\t\tinterned locator id", "-\tout.writeInt(length = typeLocations.elementSize);", "+\tout.writeInt(length = typeLocators.elementSize);", "-\t\tkeyTable = typeLocations.keyTable;", "-\t\tvalueTable = typeLocations.valueTable;", "+\t\tkeyTable = typeLocators.keyTable;", "+\t\tvalueTable = typeLocators.valueTable;", "-\t\t\t\tout.writeInt(internedLocations.indexOf((String) valueTable[i]));", "+\t\t\t\tout.writeInt(internedTypeLocators.indexOf((String) valueTable[i]));", "-\t\t\tSystem.out.println(\"typeLocations table is inconsistent\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"typeLocators table is inconsistent\"); //$NON-NLS-1$", "-\t\t\tfor (int j = 0, qLength = qNames.length; j < qLength; j++) {", "+\t\t\tfor (int j = 0, m = qNames.length; j < m; j++) {", "-\t\t\t\t\tfor (int k = 0, sLength = qName.length; k < sLength; k++) {", "+\t\t\t\t\tfor (int k = 0, n = qName.length; k < n; k++) {", "-\t\t\tfor (int j = 0, sLength = sNames.length; j < sLength; j++) {", "+\t\t\tfor (int j = 0, m = sNames.length; j < m; j++) {", "- * int\t\t\tinterned location id", "+ * int\t\t\tinterned locator id", "-\t\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));", "+\t\t\t\tout.writeInt(internedTypeLocators.indexOf((String) keyTable[i]));"]}], "num": 48388}
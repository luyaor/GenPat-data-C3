{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e117feae4704a434e6433e6d5603035e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c379e37d2a6741040393d919015aae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "bf3327534492f80b8d79e6948262e6cef5664121", "commitAfterChange": "ebdb898d09acf8b4e1c34a1c88424811730e87b9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void checkImplicitNullAnnotations(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod, boolean complain, Scope scope)", "signatureAfterChange": " \tpublic void checkImplicitNullAnnotations(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod, boolean complain, Scope scope)", "diff": ["-\t\t\t\t\t\tif (currentMethod.parameterNonNullness == null)", "-\t\t\t\t\t\t\tcurrentMethod.parameterNonNullness = new Boolean[paramLen];", "-\t\t\t\t\t\tcurrentMethod.parameterNonNullness[i] = info.inheritedNonNullness;", "+\t\t\t\t\t\tArgument currentArg = srcMethod == null ? null : srcMethod.arguments[i];", "+\t\t\t\t\t\trecordArgNonNullness(currentMethod, paramLen, i, currentArg, info.inheritedNonNullness);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4505863e3020e199fbbac483ec64a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "699f7fbae3c0c490fd8a048eefa69e38ba0aed7a", "commitAfterChange": "132fd2e863d712144f01b19d7de00f006508d11a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void checkImplicitNullAnnotations(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod, boolean complain, Scope scope)", "signatureAfterChange": " \tpublic void checkImplicitNullAnnotations(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod, boolean complain, Scope scope)", "diff": ["-\t\t\t\t\t\tif (currentMethod.parameterNonNullness == null)", "-\t\t\t\t\t\t\tcurrentMethod.parameterNonNullness = new Boolean[paramLen];", "-\t\t\t\t\t\tcurrentMethod.parameterNonNullness[i] = info.inheritedNonNullness;", "+\t\t\t\t\t\tArgument currentArg = srcMethod == null ? null : srcMethod.arguments[i];", "+\t\t\t\t\t\trecordArgNonNullness(currentMethod, paramLen, i, currentArg, info.inheritedNonNullness);"]}], "num": 47067}
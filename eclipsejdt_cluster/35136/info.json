{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08fa88ad34341d8c55ce2942c23e70a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f33f24368d5da8556942f8fe09b87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\t\tif (valueAttribute.value instanceof FalseLiteral) {", "-\t\t\t\t\t\t// parameter 'false' means: this annotation cancels any defaults", "-\t\t\t\t\t\ttagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} else if (valueAttribute.compilerElementPair != null) {", "+\t\t\t\t\tif (valueAttribute.compilerElementPair != null)", "-\t\t\t\t\t}", "-\t\t\t\t} else if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) { // fetch default value  - TODO: cache it?", "+\t\t\t\t} else { // fetch default value  - TODO: cache it?", "-\t\t\t\t\tif (methods != null && methods.length == 1) {", "-\t\t\t\t\t\tObject defaultValue = methods[0].getDefaultValue();", "-\t\t\t\t\t\tif (defaultValue instanceof Object[])", "-\t\t\t\t\t\t\tvalue = defaultValue;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (methods != null && methods.length == 1)", "+\t\t\t\t\t\tvalue = methods[0].getDefaultValue();", "+\t\t\t\t\telse", "+\t\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault; // custom unconfigurable NNBD", "-\t\t\t\tif (value != null) {", "-\t\t\t\t\ttagBits |= nullTagBitsFromAnnotationValue(value);", "-\t\t\t\t} else {", "-\t\t\t\t\t// neither explicit value, nor default value from DefaultLocation (1.8)", "-\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tif (value instanceof BooleanConstant) {", "+\t\t\t\t\t// boolean value is used for declaration annotations, signal using the annotation tag bit:", "+\t\t\t\t\ttagBits |= ((BooleanConstant)value).booleanValue() ? TagBits.AnnotationNonNullByDefault : TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\t} else if (value != null) {", "+\t\t\t\t\t// non-boolean value signals type annotations, evaluate from DefaultLocation[] to bitvector a la Binding#NullnessDefaultMASK:", "+\t\t\t\t\ttagBits |= nullLocationBitsFromAnnotationValue(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51e9a12c98b70c77170a749f8f065081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " protected void consumeStatementWhile()", "signatureAfterChange": " protected void consumeStatementWhile()", "diff": ["-\tStatement statement = (Statement) astStack[astPtr];", "-\tif (statement instanceof Block) {", "+\tif (astLengthStack[astLengthPtr] == 0) { // silent empty statement", "+\t\tastLengthStack[astLengthPtr] = 1;", "+\t\tastStack[++astPtr] = ", "+\t\t\tnew WhileStatement(", "+\t\t\t\texpressionStack[expressionPtr--], ", "+\t\t\t\tnull,", "+\t\t\t\tintStack[intPtr--], ", "+\t\t\t\tendPosition); ", "+\t} else {", "+\t\tStatement statement = (Statement) astStack[astPtr];", "-\t} else {", "-\t\tif (statement instanceof EmptyStatement", "-\t\t\t&& problemReporter.options.complianceLevel <= CompilerOptions.JDK1_3) {", "-\t\t\tastStack[astPtr] = ", "-\t\t\t\tnew WhileStatement(", "-\t\t\t\t\texpressionStack[expressionPtr--], ", "-\t\t\t\t\tnull, ", "-\t\t\t\t\tintStack[intPtr--], ", "-\t\t\t\t\tendPosition); ", "-\t\t} else {", "-\t\t\tastStack[astPtr] = ", "-\t\t\t\tnew WhileStatement(", "-\t\t\t\t\texpressionStack[expressionPtr--], ", "-\t\t\t\t\tstatement, ", "-\t\t\t\t\tintStack[intPtr--], ", "-\t\t\t\t\tendPosition); ", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f757ee0300136e657030cddeae93e80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "702e8c000f2670613f66a2fdca7428fa36da58d0", "commitAfterChange": "b3432509fb264a4e815030b82eeb1b66a7f45eaa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\tMethodBinding existingMethod = existingMethods[i];", "-\t\t\t\t\t\t\tif (method.returnType == existingMethod.returnType", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethod)) {", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif (method.isAbstract() // (31398,30805) report non-visible default abstract, if no implementation is available", "-\t\t\t\t\t\t\t\t\t\t\t\t&&  (method.isDefault() && method.declaringClass.fPackage != existingMethod.declaringClass.fPackage)) {", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType) {", "+\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "+\t\t\t\t\t\t\t\t\t\tcheckDefaultAbstractMethod(method);", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\tif (nonVisibleDefaultMethods != null) {", "-\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++) {", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "-\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "-\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) {", "+\t\t\t\t\tif (nonVisibleDefaultMethods != null)", "+\t\t\t\t\t\tfor (int i = 0; i < nonVisibleCount; i++)", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!(method.isDefault() && (method.declaringClass.fPackage != type.fPackage))) { // ignore methods which have default visibility and are NOT defined in another package", "-\t\t\t\t\t\tif (existingMethods == null) {", "+", "+\t\t\t\t\tif (!(method.isDefault() && method.declaringClass.fPackage != type.fPackage)) { // ignore methods which have default visibility and are NOT defined in another package", "+\t\t\t\t\t\tif (existingMethods == null)", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\telse", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (nonVisibleDefaultMethods == null) {", "+\t\t\t\t\t\tif (nonVisibleDefaultMethods == null)", "-\t\t\t\t\t\t} else if (nonVisibleCount == nonVisibleDefaultMethods.length) {", "+\t\t\t\t\t\telse if (nonVisibleCount == nonVisibleDefaultMethods.length)", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) { // non visible abstract methods cannot be overridden so the type must be defined abstract", "+\t\t\t\t\t\tif (method.isAbstract() && !this.type.isAbstract()) // non visible abstract methods cannot be overridden so the type must be defined abstract", "-\t\t\t\t\t\t}", "+", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "-\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "+\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "+\t\t\t\t\t\t\t\t\t}"]}], "num": 35136}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b9a412f9f9999042bc24480efe6c90e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61acc3c531d51bf789bbd6cef1bfd185", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  public SearchMatch newFieldReferenceMatch( \t\tIJavaElement enclosingElement, \t\tBinding enclosingBinding, \t\tint accuracy, \t\tint offset,   \t\tint length, \t\tASTNode reference)", "signatureAfterChange": "  public FieldReferenceMatch newFieldReferenceMatch( \t\tIJavaElement enclosingElement, \t\tIJavaElement localElement, \t\tBinding enclosingBinding, \t\tint accuracy,   \t\tint offset, \t\tint length, ASTNode reference)", "diff": ["-public SearchMatch newFieldReferenceMatch(", "+public FieldReferenceMatch newFieldReferenceMatch(", "+\t\tIJavaElement localElement,", "-\t\tint accuracy,", "-\t\tint offset,  ", "-\t\tint length,", "-\t\tASTNode reference) {", "+\t\tint accuracy,  ", "+\t\tint offset,", "+\t\tint length, ASTNode reference) {", "-\tif (enclosingBinding != null)", "+\tif (enclosingBinding != null) {", "-\treturn new FieldReferenceMatch(enclosingElement, accuracy, offset, length, isReadAccess, isWriteAccess, insideDocComment, participant, resource);", "+\t}", "+\tFieldReferenceMatch match = new FieldReferenceMatch(enclosingElement, accuracy, offset, length, isReadAccess, isWriteAccess, insideDocComment, participant, resource);", "+\tmatch.localElement(localElement);", "+\treturn match;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86deba2219642de8cc49205de8e605c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7a8b7fd1ce23a51c71adbc13895e1e7353a4cf1", "commitAfterChange": "60d259d5b1e0ff710248aa3b7ae16581d3024e86", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "signatureAfterChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, TypeBinding targetType, boolean argumentTypesElided)", "diff": ["-\t\t\t\tif (!argumentTypesElided)", "-\t\t\t\t\treturn new InferenceContext18(blockScope).inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "-\t\t\t\telse", "+\t\t\t\tif (!argumentTypesElided) {", "+\t\t\t\t\tInferenceContext18 freshInferenceContext = new InferenceContext18(blockScope);", "+\t\t\t\t\tReferenceBinding inferredType = freshInferenceContext.inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "+\t\t\t\t\tfreshInferenceContext.cleanUp();", "+\t\t\t\t\treturn inferredType;", "+\t\t\t\t} else {", "+\t\t\t\t}"]}], "num": 14395}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0204c5d5d63147f816b1467a79a6cc3a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18326f99c3aa3015654cc2eda6de571f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c6d42959c3928ea39552c68b8365ccff903e4852", "commitAfterChange": "4e15303074ce3ddf445b20016964bb1b3c8763d9", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 187, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding, \t\tScope scope)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding, \t\tScope scope)", "diff": ["+\t\t\t    if (this.assistNodeIsInterfaceExcludingAnnotation && sourceType.isAnnotationType()) continue;", "+\t\t\t} else if (this.assistNodeIsInterfaceExcludingAnnotation) {", "+\t\t\t\tsearchFor = IJavaSearchConstants.INTERFACE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a80368de15a3acc863bfbc360b1f999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c6d42959c3928ea39552c68b8365ccff903e4852", "commitAfterChange": "4e15303074ce3ddf445b20016964bb1b3c8763d9", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 186, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "diff": ["+\t\t\t\tif (this.assistNodeIsInterfaceExcludingAnnotation && sourceType.isAnnotationType()) continue next;", "+\t\t\t\t} else if (this.assistNodeIsInterfaceExcludingAnnotation) {", "+\t\t\t\t\tsearchFor = IJavaSearchConstants.INTERFACE;"]}], "num": 14650}
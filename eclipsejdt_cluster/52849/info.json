{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64634c3cebc727357c8da07e646931e9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3027a6005afe42b9301c6f489d94f8e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "bf0bb24ad2aa11936f786fa3a21e4724052c7919", "commitAfterChange": "3f4c816813820db669d197557cb718b17b2bf721", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["-", "-\t\t\t// Verify that line end does not start with an open parenthese (which could be a constructor reference wrongly written...)", "-\t\t\t// See bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=47215", "-\t\t\tchar ch = peekChar();", "-\t\t\tif (ch == '(') {", "-\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocMissingHashCharacter(typeRefStartPosition, this.lineEnd, String.valueOf(this.source, typeRefStartPosition, this.lineEnd-typeRefStartPosition+1));", "-\t\t\t\treturn false;", "+\t\t\t", "+\t\t\tint currentIndex = this.index; // store current index", "+\t\t\tchar ch = readChar();", "+\t\t\tswitch (ch) {", "+\t\t\t\t// Verify that line end does not start with an open parenthese (which could be a constructor reference wrongly written...)", "+\t\t\t\t// See bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=47215\t", "+\t\t\t\tcase '(' :", "+\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocMissingHashCharacter(typeRefStartPosition, this.lineEnd, String.valueOf(this.source, typeRefStartPosition, this.lineEnd-typeRefStartPosition+1));", "+\t\t\t\t\treturn false;", "+\t\t\t\t// Search for the :// URL pattern", "+\t\t\t\t// See bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=168849", "+\t\t\t\tcase ':' :", "+\t\t\t\t\tch = readChar();\t\t\t\t\t", "+\t\t\t\t\tif (ch == '/' && ch == readChar()) {", "+\t\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(typeRefStartPosition, this.lineEnd);", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-", "+\t\t\t// revert to last stored index", "+\t\t\tthis.index = currentIndex;", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863b68a4c20fbcf4bc84e450db280da8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "c40952dd3377ae996ee676dcac3fcb724d57d010", "commitAfterChange": "1283becde4269d4bd1b131ede84504f893ae6981", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "signatureAfterChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "diff": ["+\t\t\t\tif (typeReference instanceof JavadocQualifiedTypeReference && !scope.isDefinedInSameUnit(resolvedType)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=222188", "+\t\t\t\t\t// partially qualified references from a different CU should be warned", "+\t\t\t\t\tchar[][] typeRefName = ((JavadocQualifiedTypeReference) typeReference).getTypeName();", "+\t\t\t\t\tint skipLength = 0;", "+\t\t\t\t\tif (topLevelScope.getCurrentPackage() == resolvedType.getPackage()", "+\t\t\t\t\t\t\t&& typeRefName.length < computedCompoundName.length) {", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=221539: references can be partially qualified", "+\t\t\t\t\t\t// in same package and hence if the package name is not given, ignore package name check", "+\t\t\t\t\t\tskipLength = resolvedType.fPackage.compoundName.length;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean valid = true;", "+\t\t\t\t\tif (typeRefName.length == computedCompoundName.length - skipLength) {", "+\t\t\t\t\t\tcheckQualification: for (int i = 0; i < typeRefName.length; i++) {", "+\t\t\t\t\t\t\tif (!CharOperation.equals(typeRefName[i], computedCompoundName[i + skipLength])) {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tbreak checkQualification;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t}", "+\t\t\t\t\t// report invalid reference", "+\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\tif (scopeModifiers == -1) scopeModifiers = scope.getDeclarationModifiers();", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeReference.sourceStart, typeReference.sourceEnd, scopeModifiers);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 52849}
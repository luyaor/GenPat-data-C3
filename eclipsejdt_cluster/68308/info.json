{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5dce47780e82b7bb9920eaef3b7aa3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6c6ab8e449c9c6f9db05886b06459e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tprivate void updateClasspath() throws JavaModelException", "signatureAfterChange": "\r \r \tprivate void updateClasspath() throws JavaModelException", "diff": ["-\t}\r", "-\tprivate void updateClasspath() throws JavaModelException {\r", "-\r", "-\t\tJavaProject project = ((JavaProject) getElementsToProcess()[0]);\r", "-\r", "-\t\tbeginTask(Util.bind(\"classpath.settingProgress\", project.getElementName()), 2); //$NON-NLS-1$\r", "-\r", "-\t\tString[] oldRequired = project.getRequiredProjectNames();\r", "-\t\t\r", "-\t\tproject.setRawClasspath0(this.newRawPath);\r", "-\r", "-\t\t// resolve new path (asking for marker creation if problems)\r", "-\t\tIClasspathEntry[] newResolvedPath = \r", "-\t\t\tproject.getResolvedClasspath(true,  this.canChangeResource);// also update cp markers\r", "-\r", "-\t\tif (this.oldResolvedPath != null) {\r", "-\t\t\tgenerateClasspathChangeDeltas(\r", "-\t\t\t\tthis.oldResolvedPath,\r", "-\t\t\t\tnewResolvedPath,\r", "-\t\t\t\tproject.getJavaModelManager(),\r", "-\t\t\t\tproject);\r", "-\t\t} else {\r", "-\t\t\tthis.hasModifiedResource = project.saveClasspath(this.forceSave);\r", "-\t\t\tupdateAffectedProjects(project.getProject().getFullPath());\r", "-\t\t}\r", "-\t\t\r", "-\t\tif (this.mayChangeProjectDependencies){\r", "-\t\t\tupdateProjectReferences(oldRequired, project.getRequiredProjectNames());\r", "-\t\t\tupdateCycleMarkers(newResolvedPath);\r", "-\t\t}\r", "-\t}\r", "+\tprivate void updateClasspath() throws JavaModelException {\r", "+\r", "+\t\tJavaProject project = ((JavaProject) getElementsToProcess()[0]);\r", "+\r", "+\t\tbeginTask(Util.bind(\"classpath.settingProgress\", project.getElementName()), 2); //$NON-NLS-1$\r", "+\r", "+\t\tString[] oldRequired = project.getRequiredProjectNames();\r", "+\t\t\r", "+\t\tproject.setRawClasspath0(this.newRawPath);\r", "+\r", "+\t\t// resolve new path (asking for marker creation if problems)\r", "+\t\tIClasspathEntry[] newResolvedPath = \r", "+\t\t\tproject.getResolvedClasspath(true,  this.canChangeResource);// also update cp markers\r", "+\r", "+\t\tif (this.oldResolvedPath != null) {\r", "+\t\t\tgenerateClasspathChangeDeltas(\r", "+\t\t\t\tthis.oldResolvedPath,\r", "+\t\t\t\tnewResolvedPath,\r", "+\t\t\t\tproject.getJavaModelManager(),\r", "+\t\t\t\tproject);\r", "+\t\t} else {\r", "+\t\t\tupdateAffectedProjects(project.getProject().getFullPath());\r", "+\t\tif (this.mayChangeProjectDependencies){\r", "+\t\t\tupdateProjectReferences(oldRequired, project.getRequiredProjectNames());\r", "+\t\t\tupdateCycleMarkers(newResolvedPath);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914dd511e86db24c3b43c6b626291ce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["+ */\r", "+protected void executeOperation() throws JavaModelException {\r", "+\tbeginTask(Util.bind(\"workingCopy.commit\"/*nonNLS*/), 2);\r", "+\tICompilationUnit copy = getCompilationUnit();\r", "+\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();\r", "-\t */\r", "-\tprotected void executeOperation() throws JavaModelException {\r", "-\t\tbeginTask(\"Committing working copy...\", 2);\r", "-\t\tICompilationUnit copy = getCompilationUnit();\r", "-\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();\r", "+\t\r", "+\t// creates the delta builder (this remembers the content of the cu)\t\r", "+\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);\r", "-\t\t// creates the delta builder (this remembers the content of the cu)\t\r", "-\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);\r", "+\t// save the cu\r", "+\toriginal.getBuffer().setContents(copy.getBuffer().getCharacters());\r", "+\toriginal.save(fMonitor, fForce);\r", "-\t\t// save the cu\r", "-\t\toriginal.getBuffer().setContents(copy.getBuffer().getCharacters());\r", "-\t\toriginal.save(fMonitor, fForce);\r", "+\t// make sure working copy is in sync\r", "+\tcopy.restore();\r", "+\tworked(1);\r", "-\t\t// make sure working copy is in sync\r", "-\t\tcopy.restore();\r", "-\t\tworked(1);\r", "+\t// build the deltas\r", "+\tdeltaBuilder.buildDeltas();\r", "-\t\t// build the deltas\r", "-\t\tdeltaBuilder.buildDeltas();\r", "-\r", "-\t\t// add the deltas to the list of deltas created during this operation\r", "-\t\tif (deltaBuilder.delta != null) {\r", "-\t\t\taddDelta(deltaBuilder.delta);\r", "-\t\t}\r", "-\t\tworked(1);\r", "-\r", "-\t\tdone();\r", "-\t\t//\tcheckPackageDeclaration(original);\r", "+\t// add the deltas to the list of deltas created during this operation\r", "+\tif (deltaBuilder.delta != null) {\r", "+\t\taddDelta(deltaBuilder.delta);\r", "+\tworked(1);\r", "+\t\r", "+\tdone();\r", "+//\tcheckPackageDeclaration(original);\r", "+}\r"]}], "num": 68308}
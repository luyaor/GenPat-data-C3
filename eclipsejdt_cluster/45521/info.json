{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "308ce085fb313d5000b04ef1936f9116", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b64adcfad6019129e8be9da97b9f59b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "309be04a155363e9f398875d6734d13ff5334b6c", "commitAfterChange": "6b58c2063066f4462a27490669b336c2263fae86", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tchar[][] tokens = null;", "-\tchar[][] nameTokens = qNameRef.tokens;", "-\tint lastIndex = nameTokens.length-1;", "+\tint lastIndex = qNameRef.tokens.length - 1;", "-\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t", "-\t\t\tlastIndex -= otherBindingsCount + 1;", "+\t\t\tlastIndex -= qNameRef.otherBindings == null ? 1 : qNameRef.otherBindings.length + 1;", "-\t\t\tif (binding instanceof ProblemBinding) {", "-\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;", "-\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far", "-\t\t\t\tchar[] partialQualifiedName = pbBinding.name;", "-\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token", "-\t\t\t} else {", "-\t\t\t\ttypeBinding = (TypeBinding)binding;", "-\t\t\t}", "+\t\t\tif (binding instanceof TypeBinding)", "+\t\t\t\ttypeBinding = (TypeBinding) binding;", "-\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :\t\t\t\t\t\t", "-\t\t\tif (binding instanceof ProblemBinding) {", "-\t\t\t\tProblemBinding pbBinding = (ProblemBinding) binding;", "-\t\t\t\ttypeBinding = pbBinding.searchType; // second chance with recorded type so far", "-\t\t\t\tchar[] partialQualifiedName = pbBinding.name;", "-\t\t\t\tlastIndex = CharOperation.occurencesOf('.', partialQualifiedName) - 1; // index of last bound token is one before the pb token", "+\t\tcase BindingIds.TYPE | BindingIds.VARIABLE :", "+\t\t\tif (binding instanceof ProblemReferenceBinding) {", "+\t\t\t\ttypeBinding = (TypeBinding) binding;", "+\t\t\t} else if (binding instanceof ProblemFieldBinding) {", "+\t\t\t\ttypeBinding = qNameRef.actualReceiverType;", "+\t\t\t\tlastIndex -= qNameRef.otherBindings == null ? 1 : qNameRef.otherBindings.length + 1;", "+\t\t\t} else if (binding instanceof ProblemBinding) {", "+\t\t\t\ttypeBinding = ((ProblemBinding) binding).searchType;", "-\t\t\tbreak;", "+\t\t\tbreak;\t\t\t\t\t", "+\t}", "+\tif (typeBinding instanceof ProblemReferenceBinding) {", "+\t\tProblemReferenceBinding pbBinding = (ProblemReferenceBinding) typeBinding;", "+\t\ttypeBinding = pbBinding.original;", "+\t\tlastIndex = pbBinding.compoundName.length - 1;", "-\twhile (typeBinding != null && lastIndex >= 0) {", "-\t\tif (matchesName(this.pattern.simpleName, nameTokens[lastIndex--])) {", "-\t\t\tint level = resolveLevelForType(this.pattern.simpleName, this.pattern.qualification, typeBinding);", "-\t\t\tif (level != IMPOSSIBLE_MATCH) {", "-\t\t\t\ttokens = new char[lastIndex+2][];", "-\t\t\t\tSystem.arraycopy(nameTokens, 0, tokens, 0, lastIndex+2);", "-\t\t\t\tbreak;", "+\tif (typeBinding instanceof ReferenceBinding) {", "+\t\tReferenceBinding refBinding = (ReferenceBinding) typeBinding; ", "+\t\twhile (refBinding != null && lastIndex >= 0) {", "+\t\t\tif (resolveLevelForType(this.pattern.simpleName, this.pattern.qualification, refBinding) == ACCURATE_MATCH) {", "+\t\t\t\tlong[] positions = qNameRef.sourcePositions;", "+\t\t\t\tlocator.report(positions[this.pattern.qualification == null ? lastIndex : 0], positions[lastIndex], element, accuracy);", "+\t\t\t\treturn;", "-\t\t}", "-\t\ttypeBinding = typeBinding instanceof ReferenceBinding", "-\t\t\t? ((ReferenceBinding)typeBinding).enclosingType()", "-\t\t\t: null;", "-\t} ", "-\tif (tokens == null) {", "-\t\ttokens = binding == null || binding instanceof ProblemBinding", "-\t\t\t? new char[][] {this.pattern.simpleName}", "-\t\t\t: qNameRef.tokens;", "-\t\tif (!this.isCaseSensitive) {", "-\t\t\tint length = tokens.length;", "-\t\t\tchar[][] lowerCaseTokens = new char[length][];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tchar[] token = tokens[i];", "-\t\t\t\tlowerCaseTokens[i] = CharOperation.toLowerCase(token);", "-\t\t\t}", "-\t\t\ttokens = lowerCaseTokens;", "+\t\t\tlastIndex--;", "+\t\t\trefBinding = refBinding.enclosingType();", "-\tlocator.reportAccurateReference(qNameRef.sourceStart, qNameRef.sourceEnd, tokens, element, accuracy);", "+\tlocator.reportAccurateReference(qNameRef.sourceStart, qNameRef.sourceEnd, this.pattern.simpleName, element, accuracy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b16c42f3dee4feab102d02de27a270d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblem.java", "commitBeforeChange": "4a6eb2ecd33d38b3f3281597fbba9f0cea7c7e34", "commitAfterChange": "c6aa7c78ad91d7c63b86703b496c7004cbcd4ca3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic String errorReportSource(char[] unitSource)", "signatureAfterChange": " \tpublic String errorReportSource(char[] unitSource)", "diff": ["-\t//TODO should use StringBuffer.append(char[], int, int) instead of creating subarrays", "+\t\tStringBuffer errorBuffer = new StringBuffer(\" \"); //$NON-NLS-1$", "+\t\terrorBuffer.append(Util.bind(\"problem.atLine\", String.valueOf(line))); //$NON-NLS-1$", "+\t\terrorBuffer.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\t", "+\t\tchar c;", "-\t\t//compute the how-much-char we are displaying around the inaccurate token", "-\t\tint begin = startPosition >= unitSource.length ? unitSource.length - 1 : startPosition;", "-\t\tint relativeStart = 0;", "-\t\tint end = endPosition >= unitSource.length ? unitSource.length - 1 : endPosition;", "-\t\tint relativeEnd = 0;", "-\t\tlabel : for (relativeStart = 0;; relativeStart++) {", "-\t\t\tif (begin == 0)", "-\t\t\t\tbreak label;", "-\t\t\tif ((unitSource[begin - 1] == '\\n') || (unitSource[begin - 1] == '\\r'))", "-\t\t\t\tbreak label;", "-\t\t\tbegin--;", "+\t\t// expand to line limits", "+\t\tint length = unitSource.length, begin, end;", "+\t\tfor (begin = startPosition >= length ? length - 1 : startPosition; begin > 0; begin--) {", "+\t\t\tif ((c = unitSource[begin - 1]) == '\\n' || c == '\\r') break;", "-\t\tlabel : for (relativeEnd = 0;; relativeEnd++) {", "-\t\t\tif ((end + 1) >= unitSource.length)", "-\t\t\t\tbreak label;", "-\t\t\tif ((unitSource[end + 1] == '\\r') || (unitSource[end + 1] == '\\n')) {", "-\t\t\t\tbreak label;", "-\t\t\t}", "-\t\t\tend++;", "+\t\tfor (end = endPosition >= length ? length - 1 : endPosition ; end+1 < length; end++) {", "+\t\t\tif ((c = unitSource[end + 1]) == '\\r' || c == '\\n') break;", "-\t\t//extract the message form the source", "-\t\tchar[] extract = new char[end - begin + 1];", "-\t\tSystem.arraycopy(unitSource, begin, extract, 0, extract.length);", "-\t\tchar c;", "-\t\t//remove all SPACE and TAB that begin the error message...", "-\t\tint trimLeftIndex = 0;", "-\t\twhile (((c = extract[trimLeftIndex++]) == TAB) || (c == SPACE));", "-\t\tSystem.arraycopy(", "-\t\t\textract,", "-\t\t\ttrimLeftIndex - 1,", "-\t\t\textract = new char[extract.length - trimLeftIndex + 1],", "-\t\t\t0,", "-\t\t\textract.length);", "-\t\trelativeStart -= trimLeftIndex;", "-\t\t//buffer spaces and tabs in order to reach the error position", "-\t\tint pos = 0;", "-\t\tchar[] underneath = new char[extract.length]; // can't be bigger", "-\t\tfor (int i = 0; i <= relativeStart; i++) {", "-\t\t\tif (extract[i] == TAB) {", "-\t\t\t\tunderneath[pos++] = TAB;", "-\t\t\t} else {", "-\t\t\t\tunderneath[pos++] = SPACE;", "-\t\t\t}", "+\t\t", "+\t\t// trim left and right spaces/tabs", "+\t\twhile ((c = unitSource[begin]) == ' ' || c == '\\t') begin++;", "+\t\t//while ((c = unitSource[end]) == ' ' || c == '\\t') end--; TODO (philippe) should also trim right, but all tests are to be updated", "+\t\t", "+\t\t// copy source", "+\t\terrorBuffer.append(unitSource, begin, end-begin+1);", "+\t\terrorBuffer.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\t", "+\t\t// compute underline", "+\t\tfor (int i = begin; i <startPosition; i++) {", "+\t\t\terrorBuffer.append((unitSource[i] == TAB) ? TAB : SPACE);", "-\t\t//mark the error position", "-\t\tfor (int i = startPosition;", "-\t\t\ti <= (endPosition >= unitSource.length ? unitSource.length - 1 : endPosition);", "-\t\t\ti++)", "-\t\t\tunderneath[pos++] = MARK;", "-\t\t//resize underneathto remove 'null' chars", "-\t\tSystem.arraycopy(underneath, 0, underneath = new char[pos], 0, pos);", "-", "-\t\treturn \" \" + Util.bind(\"problem.atLine\", String.valueOf(line)) \t//$NON-NLS-2$ //$NON-NLS-1$", "-\t\t\t+ \"\\n\\t\" + new String(extract) + \"\\n\\t\" + new String(underneath); //$NON-NLS-2$ //$NON-NLS-1$", "+\t\tfor (int i = startPosition; i <= (endPosition >= length ? length - 1 : endPosition); i++) {", "+\t\t\terrorBuffer.append(MARK);", "+\t\t}", "+\t\treturn errorBuffer.toString();"]}], "num": 45521}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3694301375140edd26ed3df07fe8755", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "674d29130a9d070c49f3c5a60138f046", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected int matchLevelForDeclarations(ConstructorDeclaration constructor)", "signatureAfterChange": " protected int matchLevelForDeclarations(ConstructorDeclaration constructor)", "diff": ["+\t\t/* Remove as we need to resolve to be really sure that method matches or not...", "+\t\t*/", "+\t}", "+", "+\t// Verify type arguments (do not reject if pattern has no argument as it can be an erasure match)", "+\tif (this.pattern.hasConstructorArguments()) {", "+\t\tif (constructor.typeParameters == null || constructor.typeParameters.length != this.pattern.constructorArguments.length) return IMPOSSIBLE_MATCH;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bbeddc0a76f4bb83de31a91113a1243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["+\t// Verify method name", "+\t", "+\t// Verify parameters types count", "+\t\t/* Remove as we need to resolve to be really sure that method matches or not...", "+\t\t*/", "+\t", "+\t// Verify return type", "+\t// Verify type arguments (do not reject if pattern has no argument as it can be an erasure match)", "+\tif (this.pattern.hasMethodArguments()) {", "+\t\tif (node.typeParameters == null || node.typeParameters.length != this.pattern.methodArguments.length) return IMPOSSIBLE_MATCH;", "+\t}", "+", "+\t// Method declaration may match pattern"]}], "num": 54503}
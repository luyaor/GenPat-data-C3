{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e5a31082a6dde4aca6e699d2cb28884", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a25c840b2df08cdb249c5ce4b13033a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "66f0e8b8112bb13bbbf568db765302c9834a0001", "commitAfterChange": "8173bc34d19a76799af83a37be998ec65b3a1874", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   \tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": "  \tprivate String disassemble(IVerificationTypeInfo[] infos, String lineSeparator, int tabNumber, int mode)", "diff": ["-", "-\tprivate void disassemble(IStackMapTableAttribute attribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "-\t\tint numberOfEntries = attribute.getNumberOfEntries();", "-\t\tbuffer.append(Messages.bind(Messages.disassembler_stackmaptableattributeheader, Integer.toString(numberOfEntries)));", "-\t\tif (numberOfEntries != 0) {", "-\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\tfinal IStackMapFrame[] stackMapFrames = attribute.getStackMapFrame();", "-\t\t\tfor (int i = 0; i < numberOfEntries; i++) {", "-\t\t\t\tdisassemble(stackMapFrames[i], buffer, lineSeparator, tabNumber + 2, mode);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6a8fad9e5fb533c280ee2a4bee6738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "f8c62e1959300f5da932cbd33d28a46243b4258b", "commitAfterChange": "29291a00d45f7fc23b6ab4487b131f3aacb400b1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t\tint compareParams( \t\t\tMethodDeclaration method1, \t\t\tMethodDeclaration method2)", "signatureAfterChange": "  \t\tprivate String buildSignature(BodyDeclaration node)", "diff": ["-\t", "-\t\tint compareParams(", "-\t\t\tMethodDeclaration method1,", "-\t\t\tMethodDeclaration method2) {", "-\t\t\tint compare;", "-\t\t\tfinal List parameters1 = method1.parameters();", "-\t\t\tfinal List parameters2 = method2.parameters();", "-\t\t\tint length1 = parameters1.size();", "-\t\t\tint length2 = parameters2.size();", "-\t\t\tint len= Math.min(length1, length2);", "-\t\t\tfor (int i = 0; i < len; i++) {", "-\t\t\t\tcompare = this.collator.compare(((SingleVariableDeclaration) parameters1.get(i)).getName().getIdentifier(), ((SingleVariableDeclaration) parameters2.get(i)).getName().getIdentifier());", "-\t\t\treturn length1 - length2;", "+", "+\t\tprivate String buildSignature(BodyDeclaration node) {", "+\t\t\tswitch(node.getNodeType()) {", "+\t\t\t\tcase ASTNode.METHOD_DECLARATION :", "+\t\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tbuffer.append(methodDeclaration.getName().getIdentifier());", "+\t\t\t\t\tfinal List parameters = methodDeclaration.parameters();", "+\t\t\t\t\tint length1 = parameters.size();", "+\t\t\t\t\tfor (int i = 0; i < length1; i++) {", "+\t\t\t\t\t\tbuffer.append(((SingleVariableDeclaration) parameters.get(i)).getName().getIdentifier());", "+\t\t\t\t\t}", "+\t\t\t\t\treturn buffer.toString();", "+\t\t\t\tcase ASTNode.FIELD_DECLARATION :", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\t\t\treturn ((VariableDeclarationFragment) fieldDeclaration.fragments().get(0)).getName().getIdentifier();", "+\t\t\t\tcase ASTNode.INITIALIZER :", "+\t\t\t\t\treturn ((Integer) node.getProperty(CompilationUnitSorter.SOURCE_START)).toString();", "+\t\t\t\tcase ASTNode.TYPE_DECLARATION :", "+\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\t\t\t\treturn typeDeclaration.getName().getIdentifier();", "+\t\t\t}", "+\t\t\treturn null;"]}], "num": 32012}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6acf6f22e2ebd93b4475dc64c035f29", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cc379c75111532428a3eb607b4bff49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "52240c8c084174e989da74e2b0e001785a3d9137", "commitAfterChange": "1206e6563001eef34666a530fac76e67dc6ba9a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void cleanUp()", "signatureAfterChange": " \tpublic void cleanUp()", "diff": ["+\t\tif (this.types != null) {", "+\t\t\tfor (int i = 0, max = this.types.length; i < max; i++) {", "+\t\t\t\tcleanUp(this.types[i]);", "+\t\t\t}", "+\t\t\tif (this.allLocalTypes != null) {", "+\t\t\t\tfor (int i = 0, max = this.allLocalTypes.length; i < max; i++) {", "+\t\t\t\t\tallLocalTypes[i].scope = null; // local members are already in the list", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t ((SourceTypeBinding) classFile.referenceBinding).scope = null;", "+\t\t\t((SourceTypeBinding) classFile.referenceBinding).scope = null; // TODO: should no longer be necessary", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908ec882f9930473df59c194f6bd729e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "29911619e9eb038f230f09e2190cd9ca1e9cfd72", "commitAfterChange": "f342df887ac2bde5a33a69c02311bfd7246a7e43", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testFindType() throws CoreException", "signatureAfterChange": " public void testFindType() throws CoreException", "diff": ["-\t// get 20 projects", "-\tint max = 20;", "-\tIJavaProject[] projects = new IJavaProject[max];", "-\tfor (int i = 0; i < max; i++) {", "-\t\tprojects[i] = createJavaProject(\"FindType\" + i);", "-\t}", "-\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\tAbstractJavaModelTests.waitForAutoBuild();", "+\tIJavaProject[] existingProjects = model.getJavaProjects();", "-\t\t// warm up", "-\t\tint warmup = WARMUP_COUNT / 10;", "-\t\tfor (int i = 0; i < warmup; i++) {", "-\t\t\tmodel.close();", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "-\t\t\t}", "-\t\t}", "-\t\t\t", "-\t\t// measure performance", "-\t\tfor (int i = 0; i < MEASURES_COUNT; i++) {", "-\t\t\tmodel.close();", "-\t\t\trunGc();", "-\t\t\tstartMeasuring();", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "-\t\t\t}", "-\t\t\tstopMeasuring();", "+\t\t// close existing projects", "+\t\tfor (int i = 0, length = existingProjects.length; i < length; i++) {", "+\t\t\texistingProjects[i].getProject().close(null);", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t} finally {", "+\t\t// get 20 projects", "+\t\tint max = 20;", "+\t\tIJavaProject[] projects = new IJavaProject[max];", "-\t\t\tprojects[i].getProject().delete(false, null);", "+\t\t\tprojects[i] = createJavaProject(\"FindType\" + i);", "+\t\t}", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\tAbstractJavaModelTests.waitForAutoBuild();", "+\t\t", "+\t\ttry {", "+\t\t\t// warm up", "+\t\t\tint warmup = WARMUP_COUNT / 10;", "+\t\t\tfor (int i = 0; i < warmup; i++) {", "+\t\t\t\tmodel.close();", "+\t\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\t", "+\t\t\t// measure performance", "+\t\t\tfor (int i = 0; i < MEASURES_COUNT; i++) {", "+\t\t\t\tmodel.close();", "+\t\t\t\trunGc();", "+\t\t\t\tstartMeasuring();", "+\t\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "+\t\t\t\t}", "+\t\t\t\tstopMeasuring();", "+\t\t\t}", "+\t\t", "+\t\t\tcommitMeasurements();", "+\t\t\tassertPerformance();", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < max; i++) {", "+\t\t\t\tprojects[i].getProject().delete(false, null);", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\t// reopen existing projects", "+\t\tfor (int i = 0, length = existingProjects.length; i < length; i++) {", "+\t\t\texistingProjects[i].getProject().open(null);"]}], "num": 43262}
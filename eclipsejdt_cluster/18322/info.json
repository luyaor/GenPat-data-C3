{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89d33da6bb5df1a3f6fb58b8ee769993", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76203819a5c846d49ff677b680a3356a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "3aeda49982d529a7b3b4520a8ddfc77c62e6f6ba", "commitAfterChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tMemberValuePair valueAttribute = null; // remember the first 'value' pair", "+\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(memberName, TypeConstants.VALUE)) {", "+\t\t\t\t\t\tvalueAttribute = valuePair;", "+\t\t\t\t\t}", "+\t\t// recognize standard annotations ?", "+\t\tlong tagBits = detectStandardAnnotation(scope, annotationType, valueAttribute);", "+\t\tif (this.recipient != null) {", "+\t\t\tif (tagBits != 0) {", "+\t\t\t\t// tag bits onto recipient", "+\t\t\t\tswitch (this.recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\t// TODO (philippe) need support for package annotations", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t((ReferenceBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\t((MethodBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\t((FieldBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\t((LocalVariableBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\t// check (meta)target compatibility", "+\t\t\tcheckTargetCompatibility: {", "+\t\t\t\tlong metaTagBits = annotationType.tagBits;", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t", "+\t\t\t\tswitch (recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForAnnotationType) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForType) != 0) ", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForConstructor) != 0)", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t\tscope.problemReporter().incompatibleTargetForAnnotation(this);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86405a827adbca3f73b24cdb38808c11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "2d75cef028da9a8fe8c9804711f5a598b2019a3c", "commitAfterChange": "e5a5a828b036dbe2b7c3417e8b56969576e779d4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "signatureAfterChange": "\r \tprotected Openable createElement(IResource resource, int elementType, IJavaProject project)", "diff": ["-\t\t/* TEMPORARY DISABLED\r", "+\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\t\t\t\t\troot = (IPackageFragmentRoot)this.currentElement;\r", "+\t\t\t\t\t\t\tIPath rootPath = root.getPath();\r", "+\t\t\t\t\t\t\tIPath pkgPath = path.removeLastSegments(1);\r", "+\t\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath.removeFirstSegments(rootPath.segmentCount()));\r", "+\t\t\t\t\t\t\tif (pkgName != null) {\r", "+\t\t\t\t\t\t\t\tpkgFragment = root.getPackageFragment(pkgName);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t// create compilation unit handle \r", "-\t\t\t\t\t\tString fileName = path.lastSegment();\r", "-\t\t\t\t\t\tif (!Util.isValidCompilationUnitName(fileName)) return null;\r", "-\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t// find the element that encloses the resource\r", "-\t\t\t\t\tthis.popUntilPrefixOf(path);\r", "-\t\t\t\t\tif (this.currentElement == null) break;\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// find the package\r", "-\t\t\t\t\tpkgFragment = null;\r", "-\t\t\t\t\tswitch (this.currentElement.getElementType()) {\r", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "-\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement;\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:\r", "-\t\t\t\t\t\tcase IJavaElement.CLASS_FILE:\r", "-\t\t\t\t\t\t\tpkgFragment = (IPackageFragment)this.currentElement.getParent();\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (pkgFragment != null) {\r", "-\t\t\t\t\t\t// create class file handle\r", "-\t\t\t\t\t\tString fileName = path.lastSegment();\r", "-\t\t\t\t\t\tif (!Util.isValidClassFileName(fileName)) return null;\r", "-\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);\r", "+\t\t\t\t\t\tif (elementType == IJavaElement.COMPILATION_UNIT) {\r", "+\t\t\t\t\t\t\t// create compilation unit handle \r", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();\r", "+\t\t\t\t\t\t\tif (!Util.isValidCompilationUnitName(fileName)) return null;\r", "+\t\t\t\t\t\t\telement = pkgFragment.getCompilationUnit(fileName);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// create class file handle\r", "+\t\t\t\t\t\t\tString fileName = path.lastSegment();\r", "+\t\t\t\t\t\t\tif (!Util.isValidClassFileName(fileName)) return null;\r", "+\t\t\t\t\t\t\telement = pkgFragment.getClassFile(fileName);\r", "+\t\t\t\t\t\t}\r", "-\t\t*/\r"]}], "num": 18322}
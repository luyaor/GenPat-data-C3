{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb259e61dec00514dd7843f310827993", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598c33890243d37862d3fffae56653e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\tfinal int INSIDE_CLASSPATH_bracket = 2;", "-\tfinal int INSIDE_BOOTCLASSPATH_bracket = 10;", "-\tfinal int INSIDE_SOURCE_PATH_bracket = 14;", "-\tfinal int DEFAULT_SIZE_CLASSPATH = 4;", "-\tString classpathArg = null;", "-\t\t\t\t\t\tMain.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "-\t\t\t\tMain.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$", "+\t\t\t\tthis.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$", "-\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "-\t\t\t\t\t\tMain.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidTaskTag\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.invalidTaskTag\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.invalidWarning\", token)); //$NON-NLS-1$", "-\t\t\t\t\t\t\tMain.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.source\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.source\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t\tMain.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$", "-\t\t\t\tchar[] currentArgChars = currentArg.toCharArray();", "-\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\tswitch (currentArgChars[i]) {", "-\t\t\t\t\t\tcase '[':", "-\t\t\t\t\t\t\tif (mode == INSIDE_CLASSPATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = INSIDE_CLASSPATH_bracket;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase ']':", "-\t\t\t\t\t\t\tif (mode != INSIDE_CLASSPATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (mode == DEFAULT) {", "-\t\t\t\t\tclasspaths.add(currentArg);", "-\t\t\t\t} else {", "-\t\t\t\t\tclasspathArg = currentArg;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_CLASSPATH_bracket:", "-\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "-\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\tswitch (currentArgChars[i]) {", "-\t\t\t\t\t\tcase '[':", "-\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\tMain.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$ ", "-\t\t\t\t\t\tcase ']':", "-\t\t\t\t\t\t\tif (mode != INSIDE_CLASSPATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (mode == DEFAULT) {", "-\t\t\t\t\tclasspaths.add(classpathArg + \" \" + currentArg); //$NON-NLS-1$", "-\t\t\t\t}", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, classpaths);", "-\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "-\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\tswitch (currentArgChars[i]) {", "-\t\t\t\t\t\tcase '[':", "-\t\t\t\t\t\t\tif (mode == INSIDE_BOOTCLASSPATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_bracket;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase ']':", "-\t\t\t\t\t\t\tif (mode != INSIDE_BOOTCLASSPATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (mode == DEFAULT) {", "-\t\t\t\t\tbootclasspaths.add(currentArg);", "-\t\t\t\t} else {", "-\t\t\t\t\tclasspathArg = currentArg;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_BOOTCLASSPATH_bracket:", "-\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "-\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\tswitch (currentArgChars[i]) {", "-\t\t\t\t\t\tcase '[':", "-\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\tMain.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$ ", "-\t\t\t\t\t\tcase ']':", "-\t\t\t\t\t\t\tif (mode != INSIDE_BOOTCLASSPATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (mode == DEFAULT) {", "-\t\t\t\t\tbootclasspaths.add(classpathArg + \" \" + currentArg); //$NON-NLS-1$", "-\t\t\t\t}", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, bootclasspaths);", "-\t\t\t\tsourcepathClasspathArg = currentArg;", "-\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "-\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\tswitch (currentArgChars[i]) {", "-\t\t\t\t\t\tcase '[':", "-\t\t\t\t\t\t\tif (mode == INSIDE_SOURCE_PATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = INSIDE_SOURCE_PATH_bracket;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase ']':", "-\t\t\t\t\t\t\tif (mode != INSIDE_SOURCE_PATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE_PATH_bracket:", "-\t\t\t\tsourcepathClasspathArg += \" \" + currentArg; //$NON-NLS-1$", "-\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "-\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "-\t\t\t\t\t\ti++) {", "-\t\t\t\t\tswitch (currentArgChars[i]) {", "-\t\t\t\t\t\tcase '[':", "-\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\tMain.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$ ", "-\t\t\t\t\t\tcase ']':", "-\t\t\t\t\t\t\tif (mode != INSIDE_SOURCE_PATH_bracket) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tString[] sourcePaths = new String[1];", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, sourcePaths);", "+\t\t\t\tsourcepathClasspathArg = sourcePaths[0];", "-\t\t\t\t\t\tMain.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$ ", "-\t\t\t\t\t\tMain.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$ ", "-\t\t\t\t\t\tMain.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\tthis.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$ ", "-\t\t\t\tMain.bind(\"configure.directoryNotExist\", currentSourceDirectory)); //$NON-NLS-1$", "+\t\t\t\tthis.bind(\"configure.directoryNotExist\", currentSourceDirectory)); //$NON-NLS-1$", "-\t\tFileFinder finder = new FileFinder();", "-\t\ttry {", "-\t\t\tfinder.find(dir, SuffixConstants.SUFFIX_STRING_JAVA, this.verbose);", "-\t\t} catch (Exception e) {", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\", currentSourceDirectory)); //$NON-NLS-1$", "-\t\t}", "+\t\tString[] result = FileFinder.find(dir, SuffixConstants.SUFFIX_STRING_JAVA);", "-\t\t\tString results[] = finder.resultFiles;", "-\t\t\tint length = results.length;", "+\t\t\tint length = result.length;", "-\t\t\tSystem.arraycopy(results, 0, this.filenames, filesCount, length);", "+\t\t\tSystem.arraycopy(result, 0, this.filenames, filesCount, length);", "-\t\t\tthis.filenames = finder.resultFiles;", "+\t\t\tthis.filenames = result;", "-", "-\tif (this.log != null) {", "-\t\tthis.logger.setLog(this.log);", "-\t} else {", "-\t\tthis.showProgress = false;", "-\t}", "-\tthis.logger.logVersion(printVersionRequired);", "-\t// process bootclasspath, classpath and sourcepaths", "- \tfinal File javaHome = getJavaHome();", "- \tfinal int bootclasspathsSize = bootclasspaths.size();", "-\tif (bootclasspathsSize != 0) {", "-\t\tString[] paths = new String[bootclasspathsSize];", "-\t\tbootclasspaths.toArray(paths);", "-\t\tbootclasspaths.clear();", "-\t\tfor (int i = 0; i < bootclasspathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, ", "-\t\t\t\tpaths[i], customEncoding, false, true);", "-\t\t}", "+\tif (this.log != null) {", "+\t\tthis.logger.setLog(this.log);", "-\t\t/* no bootclasspath specified", "-\t\t * we can try to retrieve the default librairies of the VM used to run", "-\t\t * the batch compiler", "-\t\t */", "-\t\t String javaversion = System.getProperty(\"java.version\");//$NON-NLS-1$", "-\t\t if (javaversion != null && javaversion.equalsIgnoreCase(\"1.1.8\")) { //$NON-NLS-1$", "-\t\t\tthis.logger.logWrongJDK();", "-\t\t\tthis.proceed = false;", "-\t\t\treturn;", "-\t\t }", "+\t\tthis.showProgress = false;", "+\t}", "+\tthis.logger.logVersion(printVersionRequired);", "-\t \t/*", "-\t \t * Handle >= JDK 1.2.2 settings: retrieve rt.jar", "-\t \t */", "-\t \t if (javaHome != null) {", "-\t\t\tFile[] directoriesToCheck = null;", "-\t\t\tif (System.getProperty(\"os.name\").startsWith(\"Mac\")) {//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\tdirectoriesToCheck = new File[] {", "-\t\t\t\t\tnew File(javaHome, \"../Classes\"), //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t} else {", "-\t\t\t\tdirectoriesToCheck = new File[] { ", "-\t\t\t\t\tnew File(javaHome, \"lib\") //$NON-NLS-1$", "-\t\t\t\t};", "-\t\t\t}", "-\t\t\tFile[][] systemLibrariesJars = getLibrariesFiles(directoriesToCheck);", "-\t\t\tif (systemLibrariesJars != null) {", "-\t\t\t\tfor (int i = 0, max = systemLibrariesJars.length; i < max; i++) {", "-\t\t\t\t\tFile[] current = systemLibrariesJars[i];", "-\t\t\t\t\tif (current != null) {", "-\t\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, false, null, null); ", "-\t\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\t\tbootclasspaths.add(classpath);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "- \t\t}", "+\tvalidateOptions(didSpecifyCompliance);", "+\t", "+\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "+\tthis.logger.logOptions(this.options);", "+\tif (this.repetitions == 0) {", "+\t\tthis.repetitions = 1;", "-\tfinal int classpathsSize = classpaths.size();", "-\tif (classpaths.size() != 0) {", "-\t\tString[] paths = new String[classpathsSize];", "-\t\tclasspaths.toArray(paths);", "-\t\tclasspaths.clear();", "-\t\tfor (int i = 0; i < classpathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], ", "-\t\t\t\t\tcustomEncoding, false, true);", "-\t\t}\t\t\t", "-\t} else {", "-\t\t// no user classpath specified.", "-\t\tString classProp = System.getProperty(\"java.class.path\"); //$NON-NLS-1$", "-\t\tif ((classProp == null) || (classProp.length() == 0)) {", "-\t\t\tthis.logger.logNoClasspath();", "-\t\t\tclasspaths.add(FileSystem.getClasspath(System.getProperty(\"user.dir\"), customEncoding, null));//$NON-NLS-1$", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);", "-\t\t\tString token;", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\ttoken = tokenizer.nextToken();", "-\t\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t\t.getClasspath(token, customEncoding, null);", "-\t\t\t\tif (currentClasspath != null) {", "-\t\t\t\t\tclasspaths.add(currentClasspath);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.logger.logIncorrectClasspath(token);", "-\t\t\t\t\t// should not happen - we go on anyway", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (sourcepathClasspathArg != null) {", "-\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths, ", "-\t\t\tsourcepathClasspathArg, customEncoding, true, false);", "+\tif (this.repetitions >= 3 && this.timing) {", "+\t\tthis.times = new long[this.repetitions];", "+\t\tthis.timesCounter = 0;", "-\t/*", "-\t * Feed endorsedDirClasspath according to:", "-\t * - -extdirs first if present;", "-\t * - else java.ext.dirs if defined;", "-\t * - else default extensions directory for the platform.", "-\t */", "-\tif (extdirsClasspaths == null) {", "-\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\tString extdirsStr = System.getProperty(\"java.ext.dirs\"); //$NON-NLS-1$", "-\t\tif (extdirsStr == null) {", "-\t\t\tif (javaHome != null) {", "-\t\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(extdirsStr, File.pathSeparator);", "-\t\t\twhile (tokenizer.hasMoreTokens()) ", "-\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t * Feed extdirsClasspath with the entries found into the directories listed by", "-\t * extdirsNames.", "-\t */", "-\tif (extdirsClasspaths.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[extdirsClasspaths.size()];", "-\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "-\t\t\tdirectoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));", "-\t\textdirsClasspaths.clear();", "-\t\tFile[][] extdirsJars = getLibrariesFiles(directoriesToCheck);", "-\t\tif (extdirsJars != null) {", "-\t\t\tfor (int i = 0, max = extdirsJars.length; i < max; i++) {", "-\t\t\t\tFile[] current = extdirsJars[i];", "-\t\t\t\tif (current != null) {", "-\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, null); ", "-\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\textdirsClasspaths.add(classpath);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "-\t\t\t\t\tthis.logger.logIncorrectExtDirsEntry(directoriesToCheck[i].getAbsolutePath());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-", "-\t/*", "-\t * Feed endorsedDirClasspath according to:", "-\t * - -endorseddirs first if present;", "-\t * - else java.endorsed.dirs if defined;", "-\t * - else default extensions directory for the platform. (/lib/endorsed)", "-\t */", "-\tif (endorsedDirClasspaths == null) {", "-\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\tString endorsedDirsStr = System.getProperty(\"java.endorsed.dirs\"); //$NON-NLS-1$", "-\t\tif (endorsedDirsStr == null) {", "-\t\t\tif (javaHome != null) {", "-\t\t\t\tendorsedDirClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(endorsedDirsStr, File.pathSeparator);", "-\t\t\twhile (tokenizer.hasMoreTokens()) ", "-\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t * Feed extdirsClasspath with the entries found into the directories listed by", "-\t * extdirsNames.", "-\t */", "-\tif (endorsedDirClasspaths.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[endorsedDirClasspaths.size()];", "-\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "-\t\t\tdirectoriesToCheck[i] = new File((String) endorsedDirClasspaths.get(i));", "-\t\tendorsedDirClasspaths.clear();", "-\t\tFile[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);", "-\t\tif (endorsedDirsJars != null) {", "-\t\t\tfor (int i = 0, max = endorsedDirsJars.length; i < max; i++) {", "-\t\t\t\tFile[] current = endorsedDirsJars[i];", "-\t\t\t\tif (current != null) {", "-\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "-\t\t\t\t\t\tFileSystem.Classpath classpath = ", "-\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, null); ", "-\t\t\t\t\t\tif (classpath != null) {", "-\t\t\t\t\t\t\tendorsedDirClasspaths.add(classpath);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "-\t\t\t\t\tthis.logger.logIncorrectEndorsedDirsEntry(directoriesToCheck[i].getAbsolutePath());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\t/* ", "-\t * Concatenate classpath entries", "-\t * We put the bootclasspath at the beginning of the classpath", "-\t * entries, followed by the extension libraries, followed by", "-\t * the sourcepath followed by the classpath.  All classpath", "-\t * entries are searched for both sources and binaries except", "-\t * the sourcepath entries which are searched for sources only.", "-\t */", "-\tbootclasspaths.addAll(endorsedDirClasspaths);", "-\tbootclasspaths.addAll(extdirsClasspaths);", "-\tbootclasspaths.addAll(sourcepathClasspaths);", "-\tbootclasspaths.addAll(classpaths);", "-\tclasspaths = bootclasspaths;", "-\tthis.checkedClasspaths = new FileSystem.Classpath[classpaths.size()];", "-\tclasspaths.toArray(this.checkedClasspaths);", "-", "-\tif (didSpecifyCompliance) {", "-\t\tObject version = this.options.get(CompilerOptions.OPTION_Compliance);", "-\t\tif (CompilerOptions.VERSION_1_3.equals(version)) {", "-\t\t\tif (!this.didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t} else if (CompilerOptions.VERSION_1_4.equals(version)) {", "-\t\t\tif (!this.didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t} else if (CompilerOptions.VERSION_1_5.equals(version)) {", "-\t\t\tif (!this.didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t} else if (CompilerOptions.VERSION_1_6.equals(version)) {", "-\t\t\tif (!this.didSpecifySource) this.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-\t\t}", "-\t}", "-\tif (this.didSpecifySource) {", "-\t\tObject version = this.options.get(CompilerOptions.OPTION_Source);", "-\t\t// default is source 1.3 target 1.2 and compliance 1.4", "-\t\tif (CompilerOptions.VERSION_1_4.equals(version)) {", "-\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t} else if (CompilerOptions.VERSION_1_5.equals(version)) {", "-\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t} else if (CompilerOptions.VERSION_1_6.equals(version)) {", "-\t\t\tif (!didSpecifyCompliance) this.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\t\tif (!this.didSpecifyTarget) this.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-\t\t}", "-\t}", "-", "-\tfinal Object sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "-\tfinal Object compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "-\tif (sourceVersion.equals(CompilerOptions.VERSION_1_6)", "-\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_6) {", "-\t\t// compliance must be 1.6 if source is 1.6", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_5)", "-\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_5) {", "-\t\t// compliance must be 1.5 if source is 1.5", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t} else if (sourceVersion.equals(CompilerOptions.VERSION_1_4)", "-\t\t\t&& CompilerOptions.versionToJdkLevel(compliance) < ClassFileConstants.JDK1_4) {", "-\t\t// compliance must be 1.4 if source is 1.4", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-\t}", "-", "-\t// check and set compliance/source/target compatibilities", "-\tif (this.didSpecifyTarget) {", "-\t\tfinal Object targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform); ", "-\t\t// tolerate jsr14 target", "-\t\tif (CompilerOptions.VERSION_JSR14.equals(targetVersion)) {", "-\t\t\t// expecting source >= 1.5", "-\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) < ClassFileConstants.JDK1_5) {", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForGenericSource\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// target must be 1.6 if source is 1.6", "-\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_6", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_6){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\t// target must be 1.5 if source is 1.5", "-\t\t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_5", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_5){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\t\t}", "-\t   \t\t // target must be 1.4 if source is 1.4", "-\t   \t\tif (CompilerOptions.versionToJdkLevel(sourceVersion) >= ClassFileConstants.JDK1_4", "-\t\t\t\t\t&& CompilerOptions.versionToJdkLevel(targetVersion) < ClassFileConstants.JDK1_4){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-\t   \t\t}", "-\t\t\t// target cannot be greater than compliance level", "-\t\t\tif (CompilerOptions.versionToJdkLevel(compliance) < CompilerOptions.versionToJdkLevel(targetVersion)){ ", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String) targetVersion)); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t}", "-\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "-\tthis.logger.logOptions(this.options);", "-\tthis.logger.logClasspath(this.checkedClasspaths);", "-\tif (this.repetitions == 0) {", "-\t\tthis.repetitions = 1;", "-\t}", "-\tif (this.repetitions >= 3 && this.timing) {", "-\t\tthis.times = new long[this.repetitions];", "-\t\tthis.timesCounter = 0;", "-\t}", "+\tsetPaths(bootclasspaths,", "+\t\t\tsourcepathClasspathArg,", "+\t\t\tsourcepathClasspaths,", "+\t\t\tclasspaths,", "+\t\t\textdirsClasspaths,", "+\t\t\tendorsedDirClasspaths,", "+\t\t\tcustomEncoding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6895333bb8c4824ab8f728e492eaf45e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "cc5fe89552e12cea30c0b2705ed12fc24d7ac372", "commitAfterChange": "a6852deba9835d659d9fed0a8ae9a329bd9657fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test002_problem_categories()", "signatureAfterChange": " public void test002_problem_categories()", "diff": ["+// see also discussion in https://bugs.eclipse.org/bugs/show_bug.cgi?id=208383", "-\t\tMap excludedProblems = new HashMap();", "-\t\t// categories", "-\t\texcludedProblems.put(\"ObjectHasNoSuperclass\", null);", "-\t\texcludedProblems.put(\"UndefinedType\", null);", "-\t\texcludedProblems.put(\"NotVisibleType\", null);", "-\t\texcludedProblems.put(\"AmbiguousType\", null);", "-\t\texcludedProblems.put(\"UsingDeprecatedType\", null);", "-\t\texcludedProblems.put(\"InternalTypeNameProvided\", null);", "-\t\texcludedProblems.put(\"UnusedPrivateType\", null);", "-\t\texcludedProblems.put(\"IncompatibleTypesInEqualityOperator\", null);", "-\t\texcludedProblems.put(\"IncompatibleTypesInConditionalOperator\", null);", "-\t\texcludedProblems.put(\"TypeMismatch\", null);", "-\t\texcludedProblems.put(\"IndirectAccessToStaticType\", null);", "-\t\texcludedProblems.put(\"MissingEnclosingInstanceForConstructorCall\", null);", "-\t\texcludedProblems.put(\"MissingEnclosingInstance\", null);", "-\t\texcludedProblems.put(\"IncorrectEnclosingInstanceReference\", null);", "-\t\texcludedProblems.put(\"IllegalEnclosingInstanceSpecification\", null);", "-\t\texcludedProblems.put(\"CannotDefineStaticInitializerInLocalType\", null);", "-\t\texcludedProblems.put(\"OuterLocalMustBeFinal\", null);", "-\t\texcludedProblems.put(\"CannotDefineInterfaceInLocalType\", null);", "-\t\texcludedProblems.put(\"IllegalPrimitiveOrArrayTypeForEnclosingInstance\", null);", "-\t\texcludedProblems.put(\"EnclosingInstanceInConstructorCall\", null);", "-\t\texcludedProblems.put(\"AnonymousClassCannotExtendFinalClass\", null);", "-\t\texcludedProblems.put(\"CannotDefineAnnotationInLocalType\", null);", "-\t\texcludedProblems.put(\"CannotDefineEnumInLocalType\", null);", "-\t\texcludedProblems.put(\"NonStaticContextForEnumMemberType\", null);", "-\t\texcludedProblems.put(\"UndefinedName\", null);", "-\t\texcludedProblems.put(\"UninitializedLocalVariable\", null);", "-\t\texcludedProblems.put(\"VariableTypeCannotBeVoid\", null);", "-\t\texcludedProblems.put(\"VariableTypeCannotBeVoidArray\", null);", "-\t\texcludedProblems.put(\"CannotAllocateVoidArray\", null);", "-\t\texcludedProblems.put(\"RedefinedLocal\", null);", "-\t\texcludedProblems.put(\"RedefinedArgument\", null);", "-\t\texcludedProblems.put(\"DuplicateFinalLocalInitialization\", null);", "-\t\texcludedProblems.put(\"NonBlankFinalLocalAssignment\", null);", "-\t\texcludedProblems.put(\"ParameterAssignment\", null);", "-\t\texcludedProblems.put(\"FinalOuterLocalAssignment\", null);", "-\t\texcludedProblems.put(\"LocalVariableIsNeverUsed\", null);", "-\t\texcludedProblems.put(\"ArgumentIsNeverUsed\", null);", "-\t\texcludedProblems.put(\"BytecodeExceeds64KLimit\", null);", "-\t\texcludedProblems.put(\"BytecodeExceeds64KLimitForClinit\", null);", "-\t\texcludedProblems.put(\"TooManyArgumentSlots\", null);", "-\t\texcludedProblems.put(\"TooManyLocalVariableSlots\", null);", "-\t\texcludedProblems.put(\"TooManySyntheticArgumentSlots\", null);", "-\t\texcludedProblems.put(\"TooManyArrayDimensions\", null);", "-\t\texcludedProblems.put(\"BytecodeExceeds64KLimitForConstructor\", null);", "-\t\texcludedProblems.put(\"UndefinedField\", null);", "-\t\texcludedProblems.put(\"NotVisibleField\", null);", "-\t\texcludedProblems.put(\"AmbiguousField\", null);", "-\t\texcludedProblems.put(\"UsingDeprecatedField\", null);", "-\t\texcludedProblems.put(\"NonStaticFieldFromStaticInvocation\", null);", "-\t\texcludedProblems.put(\"ReferenceToForwardField\", null);", "-\t\texcludedProblems.put(\"NonStaticAccessToStaticField\", null);", "-\t\texcludedProblems.put(\"UnusedPrivateField\", null);", "-\t\texcludedProblems.put(\"IndirectAccessToStaticField\", null);", "-\t\texcludedProblems.put(\"UnqualifiedFieldAccess\", null);", "-\t\texcludedProblems.put(\"FinalFieldAssignment\", null);", "-\t\texcludedProblems.put(\"UninitializedBlankFinalField\", null);", "-\t\texcludedProblems.put(\"DuplicateBlankFinalFieldInitialization\", null);", "-\t\texcludedProblems.put(\"LocalVariableHidingLocalVariable\", null);", "-\t\texcludedProblems.put(\"LocalVariableHidingField\", null);", "-\t\texcludedProblems.put(\"FieldHidingLocalVariable\", null);", "-\t\texcludedProblems.put(\"FieldHidingField\", null);", "-\t\texcludedProblems.put(\"ArgumentHidingLocalVariable\", null);", "-\t\texcludedProblems.put(\"ArgumentHidingField\", null);", "-\t\texcludedProblems.put(\"MissingSerialVersion\", null);", "-\t\texcludedProblems.put(\"UndefinedMethod\", null);", "-\t\texcludedProblems.put(\"NotVisibleMethod\", null);", "-\t\texcludedProblems.put(\"AmbiguousMethod\", null);", "-\t\texcludedProblems.put(\"UsingDeprecatedMethod\", null);", "-\t\texcludedProblems.put(\"DirectInvocationOfAbstractMethod\", null);", "-\t\texcludedProblems.put(\"VoidMethodReturnsValue\", null);", "-\t\texcludedProblems.put(\"MethodReturnsVoid\", null);", "-\t\texcludedProblems.put(\"MethodRequiresBody\", null);", "-\t\texcludedProblems.put(\"ShouldReturnValue\", null);", "-\t\texcludedProblems.put(\"MethodButWithConstructorName\", null);", "-\t\texcludedProblems.put(\"MissingReturnType\", null);", "-\t\texcludedProblems.put(\"BodyForNativeMethod\", null);", "-\t\texcludedProblems.put(\"BodyForAbstractMethod\", null);", "-\t\texcludedProblems.put(\"NoMessageSendOnBaseType\", null);", "-\t\texcludedProblems.put(\"ParameterMismatch\", null);", "-\t\texcludedProblems.put(\"NoMessageSendOnArrayType\", null);", "-\t\texcludedProblems.put(\"NonStaticAccessToStaticMethod\", null);", "-\t\texcludedProblems.put(\"UnusedPrivateMethod\", null);", "-\t\texcludedProblems.put(\"IndirectAccessToStaticMethod\", null);", "-\t\texcludedProblems.put(\"UndefinedConstructor\", null);", "-\t\texcludedProblems.put(\"NotVisibleConstructor\", null);", "-\t\texcludedProblems.put(\"AmbiguousConstructor\", null);", "-\t\texcludedProblems.put(\"UsingDeprecatedConstructor\", null);", "-\t\texcludedProblems.put(\"UnusedPrivateConstructor\", null);", "-\t\texcludedProblems.put(\"InstanceFieldDuringConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"InstanceMethodDuringConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"RecursiveConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"ThisSuperDuringConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"InvalidExplicitConstructorCall\", null);", "-\t\texcludedProblems.put(\"UndefinedConstructorInDefaultConstructor\", null);", "-\t\texcludedProblems.put(\"NotVisibleConstructorInDefaultConstructor\", null);", "-\t\texcludedProblems.put(\"AmbiguousConstructorInDefaultConstructor\", null);", "-\t\texcludedProblems.put(\"UndefinedConstructorInImplicitConstructorCall\", null);", "-\t\texcludedProblems.put(\"NotVisibleConstructorInImplicitConstructorCall\", null);", "-\t\texcludedProblems.put(\"AmbiguousConstructorInImplicitConstructorCall\", null);", "-\t\texcludedProblems.put(\"UnhandledExceptionInDefaultConstructor\", null);", "-\t\texcludedProblems.put(\"UnhandledExceptionInImplicitConstructorCall\", null);", "-\t\texcludedProblems.put(\"ArrayReferenceRequired\", null);", "-\t\texcludedProblems.put(\"NoImplicitStringConversionForCharArrayExpression\", null);", "-\t\texcludedProblems.put(\"StringConstantIsExceedingUtf8Limit\", null);", "-\t\texcludedProblems.put(\"NonConstantExpression\", null);", "-\t\texcludedProblems.put(\"NumericValueOutOfRange\", null);", "-\t\texcludedProblems.put(\"IllegalCast\", null);", "-\t\texcludedProblems.put(\"InvalidClassInstantiation\", null);", "-\t\texcludedProblems.put(\"CannotDefineDimensionExpressionsWithInit\", null);", "-\t\texcludedProblems.put(\"MustDefineEitherDimensionExpressionsOrInitializer\", null);", "-\t\texcludedProblems.put(\"InvalidOperator\", null);", "-\t\texcludedProblems.put(\"CodeCannotBeReached\", null);", "-\t\texcludedProblems.put(\"CannotReturnInInitializer\", null);", "-\t\texcludedProblems.put(\"InitializerMustCompleteNormally\", null);", "-\t\texcludedProblems.put(\"InvalidVoidExpression\", null);", "-\t\texcludedProblems.put(\"MaskedCatch\", null);", "-\t\texcludedProblems.put(\"DuplicateDefaultCase\", null);", "-\t\texcludedProblems.put(\"UnreachableCatch\", null);", "-\t\texcludedProblems.put(\"UnhandledException\", null);", "-\t\texcludedProblems.put(\"IncorrectSwitchType\", null);", "-\t\texcludedProblems.put(\"DuplicateCase\", null);", "-\t\texcludedProblems.put(\"DuplicateLabel\", null);", "-\t\texcludedProblems.put(\"InvalidBreak\", null);", "-\t\texcludedProblems.put(\"InvalidContinue\", null);", "-\t\texcludedProblems.put(\"UndefinedLabel\", null);", "-\t\texcludedProblems.put(\"InvalidTypeToSynchronized\", null);", "-\t\texcludedProblems.put(\"InvalidNullToSynchronized\", null);", "-\t\texcludedProblems.put(\"CannotThrowNull\", null);", "-\t\texcludedProblems.put(\"AssignmentHasNoEffect\", null);", "-\t\texcludedProblems.put(\"PossibleAccidentalBooleanAssignment\", null);", "-\t\texcludedProblems.put(\"SuperfluousSemicolon\", null);", "-\t\texcludedProblems.put(\"UnnecessaryCast\", null);", "-\t\texcludedProblems.put(\"UnnecessaryArgumentCast\", null);", "-\t\texcludedProblems.put(\"UnnecessaryInstanceof\", null);", "-\t\texcludedProblems.put(\"FinallyMustCompleteNormally\", null);", "-\t\texcludedProblems.put(\"UnusedMethodDeclaredThrownException\", null);", "-\t\texcludedProblems.put(\"UnusedConstructorDeclaredThrownException\", null);", "-\t\texcludedProblems.put(\"InvalidCatchBlockSequence\", null);", "-\t\texcludedProblems.put(\"EmptyControlFlowStatement\", null);", "-\t\texcludedProblems.put(\"UnnecessaryElse\", null);", "-\t\texcludedProblems.put(\"NeedToEmulateFieldReadAccess\", null);", "-\t\texcludedProblems.put(\"NeedToEmulateFieldWriteAccess\", null);", "-\t\texcludedProblems.put(\"NeedToEmulateMethodAccess\", null);", "-\t\texcludedProblems.put(\"NeedToEmulateConstructorAccess\", null);", "-\t\texcludedProblems.put(\"FallthroughCase\", null);", "-\t\texcludedProblems.put(\"InheritedMethodHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"InheritedFieldHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"InheritedTypeHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"IllegalUsageOfQualifiedTypeReference\", null);", "-\t\texcludedProblems.put(\"UnusedLabel\", null);", "-\t\texcludedProblems.put(\"ThisInStaticContext\", null);", "-\t\texcludedProblems.put(\"StaticMethodRequested\", null);", "-\t\texcludedProblems.put(\"IllegalDimension\", null);", "-\t\texcludedProblems.put(\"InvalidTypeExpression\", null);", "-\t\texcludedProblems.put(\"ParsingError\", null);", "-\t\texcludedProblems.put(\"ParsingErrorNoSuggestion\", null);", "-\t\texcludedProblems.put(\"InvalidUnaryExpression\", null);", "-\t\texcludedProblems.put(\"InterfaceCannotHaveConstructors\", null);", "-\t\texcludedProblems.put(\"ArrayConstantsOnlyInArrayInitializers\", null);", "-\t\texcludedProblems.put(\"ParsingErrorOnKeyword\", null);", "-\t\texcludedProblems.put(\"ParsingErrorOnKeywordNoSuggestion\", null);", "-\t\texcludedProblems.put(\"UnmatchedBracket\", null);", "-\t\texcludedProblems.put(\"NoFieldOnBaseType\", null);", "-\t\texcludedProblems.put(\"InvalidExpressionAsStatement\", null);", "-\t\texcludedProblems.put(\"ExpressionShouldBeAVariable\", null);", "-\t\texcludedProblems.put(\"MissingSemiColon\", null);", "-\t\texcludedProblems.put(\"InvalidParenthesizedExpression\", null);", "-\t\texcludedProblems.put(\"ParsingErrorInsertTokenBefore\", null);", "-\t\texcludedProblems.put(\"ParsingErrorInsertTokenAfter\", null);", "-\t\texcludedProblems.put(\"ParsingErrorDeleteToken\", null);", "-\t\texcludedProblems.put(\"ParsingErrorDeleteTokens\", null);", "-\t\texcludedProblems.put(\"ParsingErrorMergeTokens\", null);", "-\t\texcludedProblems.put(\"ParsingErrorInvalidToken\", null);", "-\t\texcludedProblems.put(\"ParsingErrorMisplacedConstruct\", null);", "-\t\texcludedProblems.put(\"ParsingErrorReplaceTokens\", null);", "-\t\texcludedProblems.put(\"ParsingErrorNoSuggestionForTokens\", null);", "-\t\texcludedProblems.put(\"ParsingErrorUnexpectedEOF\", null);", "-\t\texcludedProblems.put(\"ParsingErrorInsertToComplete\", null);", "-\t\texcludedProblems.put(\"ParsingErrorInsertToCompleteScope\", null);", "-\t\texcludedProblems.put(\"ParsingErrorInsertToCompletePhrase\", null);", "-\t\texcludedProblems.put(\"EndOfSource\", null);", "-\t\texcludedProblems.put(\"InvalidHexa\", null);", "-\t\texcludedProblems.put(\"InvalidOctal\", null);", "-\t\texcludedProblems.put(\"InvalidCharacterConstant\", null);", "-\t\texcludedProblems.put(\"InvalidEscape\", null);", "-\t\texcludedProblems.put(\"InvalidInput\", null);", "-\t\texcludedProblems.put(\"InvalidUnicodeEscape\", null);", "-\t\texcludedProblems.put(\"InvalidFloat\", null);", "-\t\texcludedProblems.put(\"NullSourceString\", null);", "-\t\texcludedProblems.put(\"UnterminatedString\", null);", "-\t\texcludedProblems.put(\"UnterminatedComment\", null);", "-\t\texcludedProblems.put(\"NonExternalizedStringLiteral\", null);", "-\t\texcludedProblems.put(\"InvalidDigit\", null);", "-\t\texcludedProblems.put(\"InvalidLowSurrogate\", null);", "-\t\texcludedProblems.put(\"InvalidHighSurrogate\", null);", "-\t\texcludedProblems.put(\"UnnecessaryNLSTag\", null);", "-\t\texcludedProblems.put(\"DiscouragedReference\", null);", "-\t\texcludedProblems.put(\"InterfaceCannotHaveInitializers\", null);", "-\t\texcludedProblems.put(\"DuplicateModifierForType\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForClass\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForInterface\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForMemberClass\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForMemberInterface\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForLocalClass\", null);", "-\t\texcludedProblems.put(\"ForbiddenReference\", null);", "-\t\texcludedProblems.put(\"IllegalModifierCombinationFinalAbstractForClass\", null);", "-\t\texcludedProblems.put(\"IllegalVisibilityModifierForInterfaceMemberType\", null);", "-\t\texcludedProblems.put(\"IllegalVisibilityModifierCombinationForMemberType\", null);", "-\t\texcludedProblems.put(\"IllegalStaticModifierForMemberType\", null);", "-\t\texcludedProblems.put(\"SuperclassMustBeAClass\", null);", "-\t\texcludedProblems.put(\"ClassExtendFinalClass\", null);", "-\t\texcludedProblems.put(\"DuplicateSuperInterface\", null);", "-\t\texcludedProblems.put(\"SuperInterfaceMustBeAnInterface\", null);", "-\t\texcludedProblems.put(\"HierarchyCircularitySelfReference\", null);", "-\t\texcludedProblems.put(\"HierarchyCircularity\", null);", "-\t\texcludedProblems.put(\"HidingEnclosingType\", null);", "-\t\texcludedProblems.put(\"DuplicateNestedType\", null);", "-\t\texcludedProblems.put(\"CannotThrowType\", null);", "-\t\texcludedProblems.put(\"PackageCollidesWithType\", null);", "-\t\texcludedProblems.put(\"TypeCollidesWithPackage\", null);", "-\t\texcludedProblems.put(\"DuplicateTypes\", null);", "-\t\texcludedProblems.put(\"IsClassPathCorrect\", null);", "-\t\texcludedProblems.put(\"PublicClassMustMatchFileName\", null);", "-\t\texcludedProblems.put(\"MustSpecifyPackage\", null);", "-\t\texcludedProblems.put(\"HierarchyHasProblems\", null);", "-\t\texcludedProblems.put(\"PackageIsNotExpectedPackage\", null);", "-\t\texcludedProblems.put(\"ObjectCannotHaveSuperTypes\", null);", "-\t\texcludedProblems.put(\"ObjectMustBeClass\", null);", "-\t\texcludedProblems.put(\"SuperclassNotFound\", null);", "-\t\texcludedProblems.put(\"SuperclassNotVisible\", null);", "-\t\texcludedProblems.put(\"SuperclassAmbiguous\", null);", "-\t\texcludedProblems.put(\"SuperclassInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"SuperclassInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"InterfaceNotFound\", null);", "-\t\texcludedProblems.put(\"InterfaceNotVisible\", null);", "-\t\texcludedProblems.put(\"InterfaceAmbiguous\", null);", "-\t\texcludedProblems.put(\"InterfaceInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"InterfaceInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"DuplicateField\", null);", "-\t\texcludedProblems.put(\"DuplicateModifierForField\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForField\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForInterfaceField\", null);", "-\t\texcludedProblems.put(\"IllegalVisibilityModifierCombinationForField\", null);", "-\t\texcludedProblems.put(\"IllegalModifierCombinationFinalVolatileForField\", null);", "-\t\texcludedProblems.put(\"UnexpectedStaticModifierForField\", null);", "-\t\texcludedProblems.put(\"FieldTypeNotFound\", null);", "-\t\texcludedProblems.put(\"FieldTypeNotVisible\", null);", "-\t\texcludedProblems.put(\"FieldTypeAmbiguous\", null);", "-\t\texcludedProblems.put(\"FieldTypeInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"FieldTypeInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"DuplicateMethod\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForArgument\", null);", "-\t\texcludedProblems.put(\"DuplicateModifierForMethod\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForMethod\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForInterfaceMethod\", null);", "-\t\texcludedProblems.put(\"IllegalVisibilityModifierCombinationForMethod\", null);", "-\t\texcludedProblems.put(\"UnexpectedStaticModifierForMethod\", null);", "-\t\texcludedProblems.put(\"IllegalAbstractModifierCombinationForMethod\", null);", "-\t\texcludedProblems.put(\"AbstractMethodInAbstractClass\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeCannotBeVoid\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeCannotBeVoidArray\", null);", "-\t\texcludedProblems.put(\"ReturnTypeCannotBeVoidArray\", null);", "-\t\texcludedProblems.put(\"NativeMethodsCannotBeStrictfp\", null);", "-\t\texcludedProblems.put(\"DuplicateModifierForArgument\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeNotFound\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeNotVisible\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeAmbiguous\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"ArgumentTypeInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"ExceptionTypeNotFound\", null);", "-\t\texcludedProblems.put(\"ExceptionTypeNotVisible\", null);", "-\t\texcludedProblems.put(\"ExceptionTypeAmbiguous\", null);", "-\t\texcludedProblems.put(\"ExceptionTypeInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"ExceptionTypeInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"ReturnTypeNotFound\", null);", "-\t\texcludedProblems.put(\"ReturnTypeNotVisible\", null);", "-\t\texcludedProblems.put(\"ReturnTypeAmbiguous\", null);", "-\t\texcludedProblems.put(\"ReturnTypeInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"ReturnTypeInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"ConflictingImport\", null);", "-\t\texcludedProblems.put(\"DuplicateImport\", null);", "-\t\texcludedProblems.put(\"CannotImportPackage\", null);", "-\t\texcludedProblems.put(\"UnusedImport\", null);", "-\t\texcludedProblems.put(\"ImportNotFound\", null);", "-\t\texcludedProblems.put(\"ImportNotVisible\", null);", "-\t\texcludedProblems.put(\"ImportAmbiguous\", null);", "-\t\texcludedProblems.put(\"ImportInternalNameProvided\", null);", "-\t\texcludedProblems.put(\"ImportInheritedNameHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"InvalidTypeForStaticImport\", null);", "-\t\texcludedProblems.put(\"DuplicateModifierForVariable\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForVariable\", null);", "-\t\texcludedProblems.put(\"LocalVariableCannotBeNull\", null);", "-\t\texcludedProblems.put(\"LocalVariableCanOnlyBeNull\", null);", "-\t\texcludedProblems.put(\"LocalVariableMayBeNull\", null);", "-\t\texcludedProblems.put(\"AbstractMethodMustBeImplemented\", null);", "-\t\texcludedProblems.put(\"FinalMethodCannotBeOverridden\", null);", "-\t\texcludedProblems.put(\"IncompatibleExceptionInThrowsClause\", null);", "-\t\texcludedProblems.put(\"IncompatibleExceptionInInheritedMethodThrowsClause\", null);", "-\t\texcludedProblems.put(\"IncompatibleReturnType\", null);", "-\t\texcludedProblems.put(\"InheritedMethodReducesVisibility\", null);", "-\t\texcludedProblems.put(\"CannotOverrideAStaticMethodWithAnInstanceMethod\", null);", "-\t\texcludedProblems.put(\"CannotHideAnInstanceMethodWithAStaticMethod\", null);", "-\t\texcludedProblems.put(\"StaticInheritedMethodConflicts\", null);", "-\t\texcludedProblems.put(\"MethodReducesVisibility\", null);", "-\t\texcludedProblems.put(\"OverridingNonVisibleMethod\", null);", "-\t\texcludedProblems.put(\"AbstractMethodCannotBeOverridden\", null);", "-\t\texcludedProblems.put(\"OverridingDeprecatedMethod\", null);", "-\t\texcludedProblems.put(\"IncompatibleReturnTypeForNonInheritedInterfaceMethod\", null);", "-\t\texcludedProblems.put(\"IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod\", null);", "-\t\texcludedProblems.put(\"IllegalVararg\", null);", "-\t\texcludedProblems.put(\"CodeSnippetMissingClass\", null);", "-\t\texcludedProblems.put(\"CodeSnippetMissingMethod\", null);", "-\t\texcludedProblems.put(\"CannotUseSuperInCodeSnippet\", null);", "-\t\texcludedProblems.put(\"TooManyConstantsInConstantPool\", null);", "-\t\texcludedProblems.put(\"TooManyBytesForStringConstant\", null);", "-\t\texcludedProblems.put(\"TooManyFields\", null);", "-\t\texcludedProblems.put(\"TooManyMethods\", null);", "-\t\texcludedProblems.put(\"UseAssertAsAnIdentifier\", null);", "-\t\texcludedProblems.put(\"UseEnumAsAnIdentifier\", null);", "-\t\texcludedProblems.put(\"EnumConstantsCannotBeSurroundedByParenthesis\", null);", "-\t\texcludedProblems.put(\"Task\", null);", "-\t\texcludedProblems.put(\"UndocumentedEmptyBlock\", null);", "-\t\texcludedProblems.put(\"JavadocMissingIdentifier\", null);", "-\t\texcludedProblems.put(\"JavadocNonStaticTypeFromStaticInvocation\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidParamTagTypeParameter\", null);", "-\t\texcludedProblems.put(\"JavadocUnexpectedTag\", null);", "-\t\texcludedProblems.put(\"JavadocMissingParamTag\", null);", "-\t\texcludedProblems.put(\"JavadocMissingParamName\", null);", "-\t\texcludedProblems.put(\"JavadocDuplicateParamName\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidParamName\", null);", "-\t\texcludedProblems.put(\"JavadocMissingReturnTag\", null);", "-\t\texcludedProblems.put(\"JavadocDuplicateReturnTag\", null);", "-\t\texcludedProblems.put(\"JavadocMissingThrowsTag\", null);", "-\t\texcludedProblems.put(\"JavadocMissingThrowsClassName\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidThrowsClass\", null);", "-\t\texcludedProblems.put(\"JavadocDuplicateThrowsClassName\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidThrowsClassName\", null);", "-\t\texcludedProblems.put(\"JavadocMissingSeeReference\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidSeeReference\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidSeeHref\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidSeeArgs\", null);", "-\t\texcludedProblems.put(\"JavadocMissing\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidTag\", null);", "-\t\texcludedProblems.put(\"JavadocUndefinedField\", null);", "-\t\texcludedProblems.put(\"JavadocNotVisibleField\", null);", "-\t\texcludedProblems.put(\"JavadocAmbiguousField\", null);", "-\t\texcludedProblems.put(\"JavadocUsingDeprecatedField\", null);", "-\t\texcludedProblems.put(\"JavadocUndefinedConstructor\", null);", "-\t\texcludedProblems.put(\"JavadocNotVisibleConstructor\", null);", "-\t\texcludedProblems.put(\"JavadocAmbiguousConstructor\", null);", "-\t\texcludedProblems.put(\"JavadocUsingDeprecatedConstructor\", null);", "-\t\texcludedProblems.put(\"JavadocUndefinedMethod\", null);", "-\t\texcludedProblems.put(\"JavadocNotVisibleMethod\", null);", "-\t\texcludedProblems.put(\"JavadocAmbiguousMethod\", null);", "-\t\texcludedProblems.put(\"JavadocUsingDeprecatedMethod\", null);", "-\t\texcludedProblems.put(\"JavadocNoMessageSendOnBaseType\", null);", "-\t\texcludedProblems.put(\"JavadocParameterMismatch\", null);", "-\t\texcludedProblems.put(\"JavadocNoMessageSendOnArrayType\", null);", "-\t\texcludedProblems.put(\"JavadocUndefinedType\", null);", "-\t\texcludedProblems.put(\"JavadocNotVisibleType\", null);", "-\t\texcludedProblems.put(\"JavadocAmbiguousType\", null);", "-\t\texcludedProblems.put(\"JavadocUsingDeprecatedType\", null);", "-\t\texcludedProblems.put(\"JavadocInternalTypeNameProvided\", null);", "-\t\texcludedProblems.put(\"JavadocInheritedMethodHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"JavadocInheritedFieldHidesEnclosingName\", null);", "-\t\texcludedProblems.put(\"JavadocInheritedNameHidesEnclosingTypeName\", null);", "-\t\texcludedProblems.put(\"JavadocAmbiguousMethodReference\", null);", "-\t\texcludedProblems.put(\"JavadocUnterminatedInlineTag\", null);", "-\t\texcludedProblems.put(\"JavadocMalformedSeeReference\", null);", "-\t\texcludedProblems.put(\"JavadocMessagePrefix\", null);", "-\t\texcludedProblems.put(\"JavadocMissingHashCharacter\", null);", "-\t\texcludedProblems.put(\"JavadocEmptyReturnTag\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidValueReference\", null);", "-\t\texcludedProblems.put(\"JavadocUnexpectedText\", null);", "-\t\texcludedProblems.put(\"JavadocInvalidParamTagName\", null);", "-\t\texcludedProblems.put(\"DuplicateTypeVariable\", null);", "-\t\texcludedProblems.put(\"IllegalTypeVariableSuperReference\", null);", "-\t\texcludedProblems.put(\"NonStaticTypeFromStaticInvocation\", null);", "-\t\texcludedProblems.put(\"ObjectCannotBeGeneric\", null);", "-\t\texcludedProblems.put(\"NonGenericType\", null);", "-\t\texcludedProblems.put(\"IncorrectArityForParameterizedType\", null);", "-\t\texcludedProblems.put(\"TypeArgumentMismatch\", null);", "-\t\texcludedProblems.put(\"DuplicateMethodErasure\", null);", "-\t\texcludedProblems.put(\"ReferenceToForwardTypeVariable\", null);", "-\t\texcludedProblems.put(\"BoundMustBeAnInterface\", null);", "-\t\texcludedProblems.put(\"UnsafeRawConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"UnsafeRawMethodInvocation\", null);", "-\t\texcludedProblems.put(\"UnsafeTypeConversion\", null);", "-\t\texcludedProblems.put(\"InvalidTypeVariableExceptionType\", null);", "-\t\texcludedProblems.put(\"InvalidParameterizedExceptionType\", null);", "-\t\texcludedProblems.put(\"IllegalGenericArray\", null);", "-\t\texcludedProblems.put(\"UnsafeRawFieldAssignment\", null);", "-\t\texcludedProblems.put(\"FinalBoundForTypeVariable\", null);", "-\t\texcludedProblems.put(\"UndefinedTypeVariable\", null);", "-\t\texcludedProblems.put(\"SuperInterfacesCollide\", null);", "-\t\texcludedProblems.put(\"WildcardConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"WildcardMethodInvocation\", null);", "-\t\texcludedProblems.put(\"WildcardFieldAssignment\", null);", "-\t\texcludedProblems.put(\"GenericMethodTypeArgumentMismatch\", null);", "-\t\texcludedProblems.put(\"GenericConstructorTypeArgumentMismatch\", null);", "-\t\texcludedProblems.put(\"UnsafeGenericCast\", null);", "-\t\texcludedProblems.put(\"IllegalInstanceofParameterizedType\", null);", "-\t\texcludedProblems.put(\"IllegalInstanceofTypeParameter\", null);", "-\t\texcludedProblems.put(\"NonGenericMethod\", null);", "-\t\texcludedProblems.put(\"IncorrectArityForParameterizedMethod\", null);", "-\t\texcludedProblems.put(\"ParameterizedMethodArgumentTypeMismatch\", null);", "-\t\texcludedProblems.put(\"NonGenericConstructor\", null);", "-\t\texcludedProblems.put(\"IncorrectArityForParameterizedConstructor\", null);", "-\t\texcludedProblems.put(\"ParameterizedConstructorArgumentTypeMismatch\", null);", "-\t\texcludedProblems.put(\"TypeArgumentsForRawGenericMethod\", null);", "-\t\texcludedProblems.put(\"TypeArgumentsForRawGenericConstructor\", null);", "-\t\texcludedProblems.put(\"SuperTypeUsingWildcard\", null);", "-\t\texcludedProblems.put(\"GenericTypeCannotExtendThrowable\", null);", "-\t\texcludedProblems.put(\"IllegalClassLiteralForTypeVariable\", null);", "-\t\texcludedProblems.put(\"UnsafeReturnTypeOverride\", null);", "-\t\texcludedProblems.put(\"MethodNameClash\", null);", "-\t\texcludedProblems.put(\"RawMemberTypeCannotBeParameterized\", null);", "-\t\texcludedProblems.put(\"MissingArgumentsForParameterizedMemberType\", null);", "-\t\texcludedProblems.put(\"StaticMemberOfParameterizedType\", null);", "-\t\texcludedProblems.put(\"BoundHasConflictingArguments\", null);", "-\t\texcludedProblems.put(\"DuplicateParameterizedMethods\", null);", "-\t\texcludedProblems.put(\"IllegalQualifiedParameterizedTypeAllocation\", null);", "-\t\texcludedProblems.put(\"DuplicateBounds\", null);", "-\t\texcludedProblems.put(\"BoundCannotBeArray\", null);", "-\t\texcludedProblems.put(\"UnsafeRawGenericConstructorInvocation\", null);", "-\t\texcludedProblems.put(\"UnsafeRawGenericMethodInvocation\", null);", "-\t\texcludedProblems.put(\"TypeParameterHidingType\", null);", "-\t\texcludedProblems.put(\"RawTypeReference\", null);", "-\t\texcludedProblems.put(\"NoAdditionalBoundAfterTypeVariable\", null);", "-\t\texcludedProblems.put(\"IncompatibleTypesInForeach\", null);", "-\t\texcludedProblems.put(\"InvalidTypeForCollection\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfTypeParameters\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfStaticImports\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfForeachStatements\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfTypeArguments\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfEnumDeclarations\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfVarargs\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfAnnotations\", null);", "-\t\texcludedProblems.put(\"InvalidUsageOfAnnotationDeclarations\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForAnnotationMethod\", null);", "-\t\texcludedProblems.put(\"IllegalExtendedDimensions\", null);", "-\t\texcludedProblems.put(\"InvalidFileNameForPackageAnnotations\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForAnnotationType\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForAnnotationMemberType\", null);", "-\t\texcludedProblems.put(\"InvalidAnnotationMemberType\", null);", "-\t\texcludedProblems.put(\"AnnotationCircularitySelfReference\", null);", "-\t\texcludedProblems.put(\"AnnotationCircularity\", null);", "-\t\texcludedProblems.put(\"DuplicateAnnotation\", null);", "-\t\texcludedProblems.put(\"MissingValueForAnnotationMember\", null);", "-\t\texcludedProblems.put(\"DuplicateAnnotationMember\", null);", "-\t\texcludedProblems.put(\"UndefinedAnnotationMember\", null);", "-\t\texcludedProblems.put(\"AnnotationValueMustBeClassLiteral\", null);", "-\t\texcludedProblems.put(\"AnnotationValueMustBeConstant\", null);", "-\t\texcludedProblems.put(\"AnnotationFieldNeedConstantInitialization\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForAnnotationField\", null);", "-\t\texcludedProblems.put(\"AnnotationCannotOverrideMethod\", null);", "-\t\texcludedProblems.put(\"AnnotationMembersCannotHaveParameters\", null);", "-\t\texcludedProblems.put(\"AnnotationMembersCannotHaveTypeParameters\", null);", "-\t\texcludedProblems.put(\"AnnotationTypeDeclarationCannotHaveSuperclass\", null);", "-\t\texcludedProblems.put(\"AnnotationTypeDeclarationCannotHaveSuperinterfaces\", null);", "-\t\texcludedProblems.put(\"DuplicateTargetInTargetAnnotation\", null);", "-\t\texcludedProblems.put(\"DisallowedTargetForAnnotation\", null);", "-\t\texcludedProblems.put(\"MethodMustOverride\", null);", "-\t\texcludedProblems.put(\"AnnotationTypeDeclarationCannotHaveConstructor\", null);", "-\t\texcludedProblems.put(\"AnnotationValueMustBeAnnotation\", null);", "-\t\texcludedProblems.put(\"AnnotationTypeUsedAsSuperInterface\", null);", "-\t\texcludedProblems.put(\"MissingOverrideAnnotation\", null);", "-\t\texcludedProblems.put(\"FieldMissingDeprecatedAnnotation\", null);", "-\t\texcludedProblems.put(\"MethodMissingDeprecatedAnnotation\", null);", "-\t\texcludedProblems.put(\"TypeMissingDeprecatedAnnotation\", null);", "-\t\texcludedProblems.put(\"UnhandledWarningToken\", null);", "-\t\texcludedProblems.put(\"AnnotationValueMustBeArrayInitializer\", null);", "-\t\texcludedProblems.put(\"CorruptedSignature\", null);", "-\t\texcludedProblems.put(\"BoxingConversion\", null);", "-\t\texcludedProblems.put(\"UnboxingConversion\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForEnum\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForEnumConstant\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForLocalEnum\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForMemberEnum\", null);", "-\t\texcludedProblems.put(\"CannotDeclareEnumSpecialMethod\", null);", "-\t\texcludedProblems.put(\"IllegalQualifiedEnumConstantLabel\", null);", "-\t\texcludedProblems.put(\"CannotExtendEnum\", null);", "-\t\texcludedProblems.put(\"CannotInvokeSuperConstructorInEnum\", null);", "-\t\texcludedProblems.put(\"EnumAbstractMethodMustBeImplemented\", null);", "-\t\texcludedProblems.put(\"EnumSwitchCannotTargetField\", null);", "-\t\texcludedProblems.put(\"IllegalModifierForEnumConstructor\", null);", "-\t\texcludedProblems.put(\"MissingEnumConstantCase\", null);", "-\t\texcludedProblems.put(\"EnumStaticFieldInInInitializerContext\", null);", "-\t\texcludedProblems.put(\"IllegalExtendedDimensionsForVarArgs\", null);", "-\t\texcludedProblems.put(\"MethodVarargsArgumentNeedCast\", null);", "-\t\texcludedProblems.put(\"ConstructorVarargsArgumentNeedCast\", null);", "-\t\texcludedProblems.put(\"VarargsConflict\", null);", "-\t\texcludedProblems.put(\"JavadocGenericMethodTypeArgumentMismatch\", null);", "-\t\texcludedProblems.put(\"JavadocNonGenericMethod\", null);", "-\t\texcludedProblems.put(\"JavadocIncorrectArityForParameterizedMethod\", null);", "-\t\texcludedProblems.put(\"JavadocParameterizedMethodArgumentTypeMismatch\", null);", "-\t\texcludedProblems.put(\"JavadocTypeArgumentsForRawGenericMethod\", null);", "-\t\texcludedProblems.put(\"JavadocGenericConstructorTypeArgumentMismatch\", null);", "-\t\texcludedProblems.put(\"JavadocNonGenericConstructor\", null);", "-\t\texcludedProblems.put(\"JavadocIncorrectArityForParameterizedConstructor\", null);", "-\t\texcludedProblems.put(\"JavadocParameterizedConstructorArgumentTypeMismatch\", null);", "-\t\texcludedProblems.put(\"JavadocTypeArgumentsForRawGenericConstructor\", null);", "-\t\texcludedProblems.put(\"ExternalProblemNotFixable\", null);", "-\t\texcludedProblems.put(\"ExternalProblemFixable\", null);", "-\t\t// TODO (maxime) there are obviously too many exclusions here... ", "-\t\t", "-\t\t\tint pureProblemId;", "-\t\t\t\tif ((pureProblemId = field.getInt(iProblemClass) & IProblem.IgnoreCategoriesMask) != 0", "-\t\t\t\t\t\t&& pureProblemId != IProblem.IgnoreCategoriesMask", "-\t\t\t\t\t\t&& ProblemReporter.getProblemCategory(ProblemSeverities.Error, pureProblemId)", "-\t\t\t\t\t\t\t== CategorizedProblem.CAT_UNSPECIFIED", "-\t\t\t\t\t\t&& !excludedProblems.containsKey(field.getName())) {", "+\t\t\t\tint problemId = field.getInt(iProblemClass), maskedProblemId = problemId & IProblem.IgnoreCategoriesMask;", "+\t\t\t\tif (maskedProblemId != 0 && maskedProblemId != IProblem.IgnoreCategoriesMask", "+\t\t\t\t\t\t&& ProblemReporter.getProblemCategory(ProblemSeverities.Error, problemId)", "+\t\t\t\t\t\t\t== CategorizedProblem.CAT_UNSPECIFIED) {", "-//\t\t\t\t\tSystem.out.println(\"excludedProblems.put(\\\"\" + field.getName() + \"\\\", null);\");"]}], "num": 60328}
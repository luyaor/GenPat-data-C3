{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6676e8e91af1b4392e7ef301564a15dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68dbff820858e3f432c198b0500ac5d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void consumeInsideCastExpressionLL1()", "signatureAfterChange": " protected void consumeInsideCastExpressionLL1()", "diff": ["-\tsuper.consumeInsideCastExpressionLL1();", "+\tif (!this.record) {", "+\t\tsuper.consumeInsideCastExpressionLL1();", "+\t} else {", "+\t\tboolean temp = this.skipRecord;", "+\t\ttry {", "+\t\t\tthis.skipRecord = true;", "+\t\t\tsuper.consumeInsideCastExpressionLL1();", "+\t\t\tif (this.record) {", "+\t\t\t\tExpression typeReference = this.expressionStack[this.expressionPtr];", "+\t\t\t\tif (!isAlreadyPotentialName(typeReference.sourceStart)) {", "+\t\t\t\t\tthis.addPotentialName(null, typeReference.sourceStart, typeReference.sourceEnd);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.skipRecord = temp;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b1c9127f88735113d8a4689aa457b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "66e12741e7e071e8d74aa6092f53c9f69e2104d4", "commitAfterChange": "e615c0d4b0a6a70779d285838aac0be87bb57945", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\tIContainer outputFolder = root.getFolder(", "-\t\t\t\t\tentry.getOutputLocation() != null ? entry.getOutputLocation() : javaProject.getOutputLocation());", "+\t\t\t\tIPath outputLocation = entry.getOutputLocation() != null ", "+\t\t\t\t\t? entry.getOutputLocation() ", "+\t\t\t\t\t: javaProject.getOutputLocation();", "+\t\t\t\tIContainer outputFolder;", "+\t\t\t\tif (javaProject.getProject().getFullPath().equals(outputLocation)){", "+\t\t\t\t\toutputFolder = javaProject.getProject();", "+\t\t\t\t} else {", "+\t\t\t\t\toutputFolder = root.getFolder(outputLocation);", "+\t\t\t\t}", "-\t\t\t\t\t\tIContainer binaryFolder = root.getFolder(", "-\t\t\t\t\t\t\te.getOutputLocation() != null ? e.getOutputLocation() : prereqJavaProject.getOutputLocation());", "+\t\t\t\t\t\tIPath prereqOutputLocation = e.getOutputLocation() != null ", "+\t\t\t\t\t\t\t? e.getOutputLocation() ", "+\t\t\t\t\t\t\t: prereqJavaProject.getOutputLocation();", "+\t\t\t\t\t\tIContainer binaryFolder;", "+\t\t\t\t\t\tif (prereqJavaProject.getProject().getFullPath().equals(prereqOutputLocation)){", "+\t\t\t\t\t\t\tbinaryFolder = prereqJavaProject.getProject();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbinaryFolder = root.getFolder(prereqOutputLocation);", "+\t\t\t\t\t\t}"]}], "num": 70386}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4e1b8650308c4cf7a4c5962427dd5da", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712b173c1e54e93eca5384a78db77624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/InternalSearchPattern.java", "commitBeforeChange": "d7573375da034a8df526c16250d3442a649a1b32", "commitAfterChange": "6133d9195a7868877f17c34f487b8a2dc67fa75b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tvoid acceptMatch(String relativePath, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "signatureAfterChange": " \t \tvoid acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "diff": ["-\tvoid acceptMatch(String relativePath, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "+\tvoid acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "-\t\t\t\tString documentPath = documentPath(containerPath, relativePath);", "-\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant, access)) ", "+\t\t\t\tStringBuffer documentPath = new StringBuffer(containerPath.length() + 1 + relativePath.length());", "+\t\t\t\tdocumentPath.append(containerPath);", "+\t\t\t\tdocumentPath.append(separator);", "+\t\t\t\tdocumentPath.append(relativePath);", "+\t\t\t\tif (!requestor.acceptIndexMatch(documentPath.toString(), pattern, participant, access)) ", "-\t\t\tString documentPath = documentPath(containerPath, relativePath);", "+\t\t\tStringBuffer buffer = new StringBuffer(containerPath.length() + 1 + relativePath.length());", "+\t\t\tbuffer.append(containerPath);", "+\t\t\tbuffer.append(separator);", "+\t\t\tbuffer.append(relativePath);", "+\t\t\tString documentPath = buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af6e2c6c752721d92d0888fc018e61cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfObject.java", "commitBeforeChange": "67703159b6e692911d4366f9193bf075599a0db1", "commitAfterChange": "aa303bcbd7e35255f6574fb5694621b8bb0e71bd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \t\r \tpublic Object clone()", "signatureAfterChange": "\r \r \tpublic Object clone() throws CloneNotSupportedException", "diff": ["+\tpublic Object clone() throws CloneNotSupportedException {\r", "+\t\tHashtableOfObject result = (HashtableOfObject) super.clone();\r", "+\t\tresult.elementSize = this.elementSize;\r", "+\t\tresult.threshold = this.threshold;\r", "+\r", "+\t\tint length = this.keyTable.length;\r", "+\t\tresult.keyTable = new char[length][];\r", "+\t\tSystem.arraycopy(this.keyTable, 0, result.keyTable, 0, length);\r", "+\r", "+\t\tlength = this.valueTable.length;\r", "+\t\tresult.valueTable = new Object[length];\r", "+\t\tSystem.arraycopy(this.valueTable, 0, result.valueTable, 0, length);\r", "+\t\treturn result;\r", "-\t\r", "-\tpublic Object clone(){\r", "-\t\treturn new HashtableOfObject(\r", "-\t\t\tthis.elementSize,\r", "-\t\t\t(char[][])this.keyTable.clone(),\r", "-\t\t\t(Object[])this.valueTable.clone(),\r", "-\t\t\tthis.threshold);\r", "-\t}\r"]}], "num": 2938}
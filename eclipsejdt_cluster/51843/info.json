{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63c5a1e50ad5b5cfe3e284148dfd1f3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0949cdd27dbd8a54d304fb692991fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean matchIndexEntry()", "signatureAfterChange": " protected boolean matchIndexEntry()", "diff": ["-\tswitch(matchMode){", "+\tswitch(matchMode) {", "-\t\t\tif (!CharOperation.equals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive)){", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tbreak;", "+\t\t\treturn CharOperation.equals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive);", "-\t\t\tif (!CharOperation.prefixEquals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive)){", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tbreak;", "+\t\t\treturn CharOperation.prefixEquals(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive);", "-\t\t\tif (!CharOperation.match(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive)){", "-\t\t\t\treturn false;", "-\t\t\t}", "+\t\t\treturn CharOperation.match(this.segments[this.currentSegment], this.decodedSegment, isCaseSensitive);", "-\treturn true;", "+\treturn false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6f809a24130eb01f8089f762f3702aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/QualifiedTypeDeclarationPattern.java", "commitBeforeChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "commitAfterChange": "3ba8416c88ea2caabb450ac956476cf3b7bed2e6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "signatureAfterChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-", "-\t// fully qualified name", "-\tchar[] typeName = (char[])type.getName().clone();", "+\tchar[] typeName = (char[]) type.getName().clone();", "-\tif (!this.matchesType(this.simpleName, this.qualification, typeName)) {", "-\t\treturn false;", "-\t}", "+\tif (!matchesType(this.simpleName, this.qualification, typeName)) return false;", "-\t// class or interface", "-\t\t\tif (type.isInterface())", "-\t\t\t\treturn false;", "-\t\t\tbreak;", "+\t\t\treturn !type.isInterface();", "-\t\t\tif (!type.isInterface())", "-\t\t\t\treturn false;", "-\t\t\tbreak;", "+\t\t\treturn type.isInterface();", "+\t\tcase TYPE_SUFFIX: // nothing", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c1a5c908aa6a0d2cf5a75f781dc910", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "4290d9d156b3fffdf4fa47faed755763dff62df4", "commitAfterChange": "ec3d2b8d7bc5e4b4b2d91a6a1cfd252341798462", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType) {", "-\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i])) {", "-\t\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "-\t\t\t\t\t\t\t\t\t\tcheckDefaultAbstractMethod(method);", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "+\t\t\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(method);", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "-\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "+\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\tbreak foundMatch;"]}], "num": 51843}
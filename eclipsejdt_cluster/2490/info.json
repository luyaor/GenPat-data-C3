{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87eeb5546e1650444f39382232daea3a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2372dc00cef812eb1fe2d8f01d28f520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6b6471423b89c70a33d53654f3143292c15724dc", "commitAfterChange": "dbb5484f1c0506305bb2de3acc0db3501ec7c329", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " public void testReference() throws IOException, Exception", "signatureAfterChange": " public void testReference() throws IOException, Exception", "diff": ["-\tif (this.testIndex == 0) {", "-\t\tFile versionFile = new Path(OUTPUT_DIR.getPath()).append(\"version.txt\").toFile();", "-\t\tOUTPUT_DIR.mkdirs();", "-\t\tUtil.writeToFile(JDT_CORE_VERSION, versionFile.getAbsolutePath());", "-\t}", "+//\tif (this.testIndex == 0) {", "+//\t\tFile versionFile = new Path(OUTPUT_DIR.getPath()).append(\"version.txt\").toFile();", "+//\t\tOUTPUT_DIR.mkdirs();", "+//\t\tUtil.writeToFile(JDT_CORE_VERSION, versionFile.getAbsolutePath());", "+//\t}", "-\t\t\tString inputPath = this.file.getPath().substring(INPUT_DIR.getPath().length()+1);", "+\t\t\tString inputPath = this.file.getPath().substring(this.inputDir.getPath().length()+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d8f9d2b606f1718468db55d93dcbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "8ee98e6a6bea64a8753c8da0062862e8729bd32e", "commitAfterChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic boolean isVariableArity()", "signatureAfterChange": "  \tpublic boolean isVariableArity()", "diff": ["-\tpublic boolean isVariableArity() {", "-\t\t\treturn v.isVariableArity();", "+\t */ ", "+\tpublic boolean isVariableArity() {", "+\t\treturn isVarargs();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863bd9bcc67d289e46f06918c4ed3938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "dbb21f9a082cc8b4fc9a756e4b7778384b3f408c", "commitAfterChange": "bbd2ac48b173a123c7419ce013244d878b152c22", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t public static Test suite()", "signatureAfterChange": " \t public static Test suite()", "diff": ["-\t\tFile testDir = ModelTestsUtil.getWorkspaceRoot().getLocation().toFile();", "-\t\tif (DIR != null) {", "-\t\t\tFile dir = new File(DIR);", "-\t\t\tif (dir.exists()) testDir = dir;", "-\t\t}", "-\t\tSystem.out.print(\"Get all Java files located in \"+testDir+\"...\");", "-\t\tFile[] allFiles = ModelTestsUtil.getAllFiles(testDir, filter);", "+\t\tSystem.out.print(\"Get all Java files located in \"+INPUT_DIR+\"...\");", "+\t\tFile[] allFiles = ModelTestsUtil.getAllFiles(INPUT_DIR, filter);", "-//\t\tASSERT_EQUALS_STRINGS = length < 15000; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917e9062f5bbbbc894b74d76b4495637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tprotected void assertStringsEqual(String message, String expected, String[] strings)", "signatureAfterChange": " \tprotected void assertStringsEqual(String message, String expected, String[] strings)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tfor (int i = 0; i < strings.length; i++){", "-\t\t\tbuffer.append(strings[i]);", "-\t\t\tbuffer.append(\"\\n\");", "+\t\tString actual = toString(strings, true/*add extra new lines*/);", "+\t\tif (!expected.equals(actual)) {", "+\t\t\tSystem.out.println(displayString(actual, 3) + this.endChar);", "-\t\tString actual = buffer.toString();", "+\t\tassertEquals(message, expected, actual);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cede025bb841fa926ac278bd5fb8f02b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "b6853ef8bd2b453c33734f1b2bce782deb4bd05c", "commitAfterChange": "245ac5a64fa1b2c3e6c4d54ba7019a89566be0e5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected void assertExtraDimensionsEqual(String message, List dimensions, String expected)", "signatureAfterChange": "  \tprotected void assertExtraDimensionsEqual(String message, List dimensions, String expected)", "diff": ["-\t\t\tIterator annotations = dim.annotations().iterator();", "-\t\t\twhile (annotations.hasNext()) {", "-\t\t\t\tbuffer.append('@');", "-\t\t\t\tbuffer.append(((Annotation) annotations.next()).getTypeName().getFullyQualifiedName());", "-\t\t\t\tbuffer.append(' ');", "-\t\t\t}", "+\t\t\tbuffer.append(convertAnnotationsList(dim.annotations()));"]}], "num": 2490}
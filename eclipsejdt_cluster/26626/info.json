{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5864a8b797c01829ded4ed21b8a06210", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28fd0df0c76331ef8c2bb8d32c8ef76b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope classScope)", "signatureAfterChange": " public void traverse(ASTVisitor visitor, ClassScope classScope)", "diff": ["+ */", "+public void traverse(ASTVisitor visitor, ClassScope classScope) {", "+\tif (this.ignoreFurtherInvestigation)", "+\t\treturn;", "+\ttry {", "+\t\tif (visitor.visit(this, classScope)) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.superclass != null)", "+\t\t\t\tthis.superclass.traverse(visitor, this.scope);", "+\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.typeParameters != null) {", "+\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t}\t\t\t\t", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.memberTypes[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.fields != null) {", "+\t\t\t\tint length = this.fields.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tFieldDeclaration field;", "+\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "+\t\t\t\t\t\tfield.traverse(visitor, this.staticInitializerScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfield.traverse(visitor, this.initializerScope);", "+\t\t\tif (this.methods != null) {", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.methods[i].traverse(visitor, this.scope);", "+\t\tvisitor.endVisit(this, classScope);", "+\t} catch (AbortType e) {", "+\t\t// silent abort", "+}\t", "-\t */", "-\tpublic void traverse(ASTVisitor visitor, ClassScope classScope) {", "-\t\tif (ignoreFurtherInvestigation)", "-\t\t\treturn;", "-\t\ttry {", "-\t\t\tif (visitor.visit(this, classScope)) {", "-\t\t\t\tif (this.annotations != null) {", "-\t\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.superclass != null)", "-\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "-\t\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\t\tint length = this.superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.typeParameters != null) {", "-\t\t\t\t\tint length = this.typeParameters.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tif (this.memberTypes != null) {", "-\t\t\t\t\tint length = this.memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.fields != null) {", "-\t\t\t\t\tint length = this.fields.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tFieldDeclaration field;", "-\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\t\t\t\tfield.traverse(visitor, staticInitializerScope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfield.traverse(visitor, initializerScope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (this.methods != null) {", "-\t\t\t\t\tint length = this.methods.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tvisitor.endVisit(this, classScope);", "-\t\t} catch (AbortType e) {", "-\t\t\t// silent abort", "-\t\t}", "-\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d3d559ab2eaaa4bb54cf1979f012c5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void traverse( \t\tASTVisitor visitor, \t\tCompilationUnitScope unitScope)", "signatureAfterChange": " public void traverse(ASTVisitor visitor, CompilationUnitScope unitScope)", "diff": ["+ */", "+public void traverse(ASTVisitor visitor, CompilationUnitScope unitScope) {", "+", "+\tif (this.ignoreFurtherInvestigation)", "+\t\treturn;", "+\ttry {", "+\t\tif (visitor.visit(this, unitScope)) {", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.superclass != null)", "+\t\t\t\tthis.superclass.traverse(visitor, this.scope);", "+\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t\tif (this.typeParameters != null) {", "+\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.typeParameters[i].traverse(visitor, this.scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.memberTypes[i].traverse(visitor, this.scope);", "+\t\t\t\tint length = this.fields.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tFieldDeclaration field;", "+\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "+\t\t\t\t\t\tfield.traverse(visitor, this.staticInitializerScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfield.traverse(visitor, this.initializerScope);", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\tthis.methods[i].traverse(visitor, this.scope);", "+\t\t\t}", "+\t\t}", "+\t\tvisitor.endVisit(this, unitScope);", "+\t} catch (AbortType e) {", "+\t\t// silent abort", "+\t}", "+}", "-\t */", "-\tpublic void traverse(", "-\t\tASTVisitor visitor,", "-\t\tCompilationUnitScope unitScope) {", "-", "-\t\tif (ignoreFurtherInvestigation)", "-\t\t\treturn;", "-\t\ttry {", "-\t\t\tif (visitor.visit(this, unitScope)) {", "-\t\t\t\tif (this.annotations != null) {", "-\t\t\t\t\tint annotationsLength = this.annotations.length;", "-\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "-\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (this.superclass != null)", "-\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "-\t\t\t\tif (this.superInterfaces != null) {", "-\t\t\t\t\tint length = this.superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.typeParameters != null) {", "-\t\t\t\t\tint length = this.typeParameters.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tif (this.memberTypes != null) {", "-\t\t\t\t\tint length = this.memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "-\t\t\t\t}", "-\t\t\t\tif (this.fields != null) {", "-\t\t\t\t\tint length = this.fields.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tFieldDeclaration field;", "-\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\t\t\t\tfield.traverse(visitor, staticInitializerScope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfield.traverse(visitor, initializerScope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (this.methods != null) {", "-\t\t\t\t\tint length = this.methods.length;", "-\t\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);", "-\t\t\tvisitor.endVisit(this, unitScope);", "-\t\t} catch (AbortType e) {", "-\t\t\t// silent abort", "-\t\t}", "-\t}"]}], "num": 26626}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11b276e2f9827d10a19351fb11b6f767", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5e4253919cb8dbd521d2be06529c61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "18214de46fa9202fa142bc8c10e22754e8ddc00c", "commitAfterChange": "a19e5612a97c00c41d991b7d28c08961f0357225", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic void leavePolyInvocation(InvocationRecord record)", "signatureAfterChange": "  \tpublic void leavePolyInvocation(InvocationRecord record)", "diff": ["-\t\tint l1 = this.inferenceVariables.length;", "-\t\tint l2 = record.inferenceVariables.length;", "-\t\t// move to back, add previous to front:", "-\t\tSystem.arraycopy(this.inferenceVariables, 0, this.inferenceVariables=new InferenceVariable[l1+l2], l2, l1);", "-\t\tSystem.arraycopy(record.inferenceVariables, 0, this.inferenceVariables, 0, l2);", "+\t\tif (this.inferenceVariables == null) { // no new ones, assume we aborted prematurely", "+\t\t\tthis.inferenceVariables = record.inferenceVariables;", "+\t\t} else {", "+\t\t\tint l1 = this.inferenceVariables.length;", "+\t\t\tint l2 = record.inferenceVariables.length;", "+\t\t\t// move to back, add previous to front:", "+\t\t\tSystem.arraycopy(this.inferenceVariables, 0, this.inferenceVariables=new InferenceVariable[l1+l2], l2, l1);", "+\t\t\tSystem.arraycopy(record.inferenceVariables, 0, this.inferenceVariables, 0, l2);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1488963b5dc8773c5bbb7b3d1c823d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "00ece886ae76136ff484b3f9e45b5285979a4dc3", "commitAfterChange": "8d8694248d86f9da6cd848ecd9eac0f0df6b9357", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static IClasspathEntry newLibraryEntry( \t\tIPath path, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tboolean isExported)", "signatureAfterChange": " \tpublic static IClasspathEntry newLibraryEntry( \t\tIPath path, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tboolean isExported)", "diff": ["-\t\tif (sourceAttachmentPath != null && !sourceAttachmentPath.isAbsolute()) {", "-\t\t\t// TODO: (philippe) should use assertion instead once clients are behaving", "-\t\t\t//Assert.isTrue(false, \"Source attachment path for IClasspathEntry must be absolute\"); //$NON-NLS-1$", "-\t\t\tUtil.log(new IllegalArgumentException(), \"Source attachment path should be absolute: \\\"\" + sourceAttachmentPath.toOSString()+\"\\\"\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\tsourceAttachmentPath = sourceAttachmentPath.makeAbsolute();", "+\t\tif (sourceAttachmentPath != null) {", "+\t\t\tif (sourceAttachmentPath.isEmpty()) {", "+\t\t\t\tsourceAttachmentPath = null; // treat empty path as none", "+\t\t\t} else if (!sourceAttachmentPath.isAbsolute()) {", "+\t\t\t\t// TODO: (philippe) should use assertion instead once clients are behaving", "+\t\t\t\t//Assert.isTrue(false, \"Source attachment path for IClasspathEntry must be absolute\"); //$NON-NLS-1$", "+\t\t\t\tUtil.log(new IllegalArgumentException(), \"Source attachment path should be absolute: \\\"\" + sourceAttachmentPath.toOSString()+\"\\\"\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\tsourceAttachmentPath = sourceAttachmentPath.makeAbsolute();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5438bb56ef1c0b36870ac6703890c958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "48aa990cddf66187fee96ecef74653a821fe4039", "commitAfterChange": "2acd248eb60573a009a5b58c86beac17419631cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tDefaultCodeFormatter codeFormatter()", "signatureAfterChange": "  \tDefaultCodeFormatter codeFormatter()", "diff": ["+\t\tif (this.formatterOptions == null) {", "+\t\t\tthis.formatterOptions = JAVA_PROJECT.getOptions(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598bad404c84d1d7c08a25bc20a01ba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void setLineSeparatorAndIdentationLevel(DefaultCodeFormatterOptions preferences)", "signatureAfterChange": "  \tpublic void setLineSeparatorAndIdentationLevel(DefaultCodeFormatterOptions preferences)", "diff": ["-\t\tthis.indentationLevel = preferences.initial_indentation_level * this.indentationSize;", "+\t\tif (this.useTab) {", "+\t\t\tthis.indentationLevel = preferences.initial_indentation_level;", "+\t\t} else {", "+\t\t\tthis.indentationLevel = preferences.initial_indentation_level * this.tabSize;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae79be52e0a31e6dca5280062180fbc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "b6b8c5d56c52da04a602fb9a065023d943b4e7a7", "commitAfterChange": "f8cf1cf93993a2a964d587ccb545506c0c4fdc0b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\t\tannotations[i] = annotation.getCompilerAnnotation();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b887d9e9d8e1ab656862db92aa4547d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void setProject(IJavaProject project)", "signatureAfterChange": " \tpublic void setProject(IJavaProject project)", "diff": ["+\t\tif (project != null) {", "+\t\t\tthis.compilerOptions = project.getOptions(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d9cf7f39f6f08de2582180520ebd3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "38437076b7a492cbe65acea37c6da2899990885f", "commitAfterChange": "a85dd3772bf40e01ede4717af426d44844307345", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tif (scope.kind == Scope.CLASS_SCOPE) {", "+\t\tif (this.type == null) {", "+\t\t\tthis.resolvedType = scope.enclosingSourceType();", "+\t\t} else if (scope.kind == Scope.CLASS_SCOPE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4ed4d16084ff205764730649bdec9fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "a6058a3a6ffb64f6b6041d6178bab879afbd0b14", "commitAfterChange": "e2dd5ee821f887ad13e39f8b44d89f9abfea148f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " protected void consumeExitVariableWithInitialization()", "signatureAfterChange": " protected void consumeExitVariableWithInitialization()", "diff": ["-\tif (triggerRecoveryUponLambdaClosure(variable, false) && !isInsideMethod()) {", "-\t\tpopElement(K_FIELD_INITIALIZER_DELIMITER);", "+\tif (triggerRecoveryUponLambdaClosure(variable, false)) {", "+\t\tif (this.currentElement != null) {", "+\t\t\tthis.restartRecovery = true;", "+\t\t}", "+\t\tif (!isInsideMethod())", "+\t\t\tpopElement(K_FIELD_INITIALIZER_DELIMITER);"]}], "num": 60769}
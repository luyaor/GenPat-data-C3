{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e133ab1faa5bb0877bed0a84bc52ef7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e091e90254152404d167255dea4ea29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "92487fadb9d5e301fedeefe04857620a4c7906cd", "commitAfterChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": "  \t\tvoid save() throws IOException, JavaModelException", "signatureAfterChange": "  \t\tvoid save(ISaveContext context) throws IOException, JavaModelException", "diff": ["-\t\tvoid save() throws IOException, JavaModelException {", "-\t\t\tsaveProjects(JavaModelManager.this.getJavaModel().getJavaProjects());", "-\t\t\t", "-\t\t\t// remove variables that should not be saved", "-\t\t\tHashMap varsToSave = null;", "-\t\t\tIterator iterator = JavaModelManager.this.variables.entrySet().iterator();", "-\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "-\t\t\t\tString varName = (String) entry.getKey();", "-\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null // don't save classpath variables from the default preferences as there is no delta if they are removed", "-\t\t\t\t\t|| CP_ENTRY_IGNORE_PATH.equals(entry.getValue())) {", "-\t\t\t\t\t", "-\t\t\t\t\tif (varsToSave == null)", "-\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "-\t\t\t\t\tvarsToSave.remove(varName);", "-\t\t\t\t}", "-\t\t\t\t\t", "+\t\tvoid save(ISaveContext context) throws IOException, JavaModelException {", "+\t\t\tIProject project = context.getProject();", "+\t\t\tif (project == null) { // save all projects if none specified (snapshot or full save)", "+\t\t\t\tsaveProjects(JavaModelManager.this.getJavaModel().getJavaProjects());", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tsaveProjects(new IJavaProject[] {JavaCore.create(project)});", "-\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);", "+\t\t\tswitch (context.getKind()) {", "+\t\t\t\tcase ISaveContext.FULL_SAVE :", "+\t\t\t\t\t// TODO (eric) - investigate after 3.3 if variables should be saved for a SNAPSHOT", "+\t\t\t\tcase ISaveContext.SNAPSHOT :", "+\t\t\t\t\t// remove variables that should not be saved", "+\t\t\t\t\tHashMap varsToSave = null;", "+\t\t\t\t\tIterator iterator = JavaModelManager.this.variables.entrySet().iterator();", "+\t\t\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "+\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "+\t\t\t\t\t\tString varName = (String) entry.getKey();", "+\t\t\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null // don't save classpath variables from the default preferences as there is no delta if they are removed", "+\t\t\t\t\t\t\t\t|| CP_ENTRY_IGNORE_PATH.equals(entry.getValue())) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (varsToSave == null)", "+\t\t\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "+\t\t\t\t\t\t\tvarsToSave.remove(varName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\t// do nothing", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e277576498d7488465cff9c9c521a9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e7620c4baeaf7edb12a437138cc41572b2c254c4", "commitAfterChange": "b1e3d60e355d081cd7eb3bded0d6e53fd9fb2ceb", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": "  \t\tvoid save(ISaveContext context) throws IOException, JavaModelException", "signatureAfterChange": "  \t\tvoid save(ISaveContext context) throws IOException, JavaModelException", "diff": ["-\t\t\tIProject project = context.getProject();", "-\t\t\tif (project == null) { // save all projects if none specified (snapshot or full save)", "-\t\t\t\tsaveProjects(getJavaModel().getJavaProjects());", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tsaveProjects(new IJavaProject[] {JavaCore.create(project)});", "-\t\t\t}", "+\t\t\tsaveProjects(getJavaModel().getJavaProjects());", "+\t\t\t// remove variables that should not be saved", "+\t\t\tHashMap varsToSave = null;", "+\t\t\tIterator iterator = JavaModelManager.this.variables.entrySet().iterator();", "+\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "+\t\t\t\tString varName = (String) entry.getKey();", "+\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null // don't save classpath variables from the default preferences as there is no delta if they are removed", "+\t\t\t\t\t\t|| CP_ENTRY_IGNORE_PATH.equals(entry.getValue())) {", "-\t\t\tswitch (context.getKind()) {", "-\t\t\t\tcase ISaveContext.FULL_SAVE :", "-\t\t\t\t\t// TODO (eric) - investigate after 3.3 if variables should be saved for a SNAPSHOT", "-\t\t\t\tcase ISaveContext.SNAPSHOT :", "-\t\t\t\t\t// remove variables that should not be saved", "-\t\t\t\t\tHashMap varsToSave = null;", "-\t\t\t\t\tIterator iterator = JavaModelManager.this.variables.entrySet().iterator();", "-\t\t\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "-\t\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "-\t\t\t\t\t\tString varName = (String) entry.getKey();", "-\t\t\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null // don't save classpath variables from the default preferences as there is no delta if they are removed", "-\t\t\t\t\t\t\t\t|| CP_ENTRY_IGNORE_PATH.equals(entry.getValue())) {", "-", "-\t\t\t\t\t\t\tif (varsToSave == null)", "-\t\t\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "-\t\t\t\t\t\t\tvarsToSave.remove(varName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\t// do nothing", "+\t\t\t\t\tif (varsToSave == null)", "+\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "+\t\t\t\t\tvarsToSave.remove(varName);", "+\t\t\t\t}", "+\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);"]}], "num": 59540}
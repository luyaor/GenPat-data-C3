{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f9bb9ab4871b9819463af9e9cc5372b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "387d1180df5da16b809cedea407a55e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7eeebb70e2ff491ab9bcb9989009c102bc6dce17", "commitAfterChange": "922a8f2234ba62b5ea80c3fa8e1983d8481a3bfb", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tprivate boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath, HashSet visited, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": " \t \tprivate boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath, HashSet visited, IWorkspaceRoot workspaceRoot)", "diff": ["-\t\t\t\t\tString projectName = entry.getPath().lastSegment();", "-\t\t\t\t\tif (!visited.add(projectName)) return true;", "-\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create(workspaceRoot.getProject(projectName));", "-\t\t\t\t\tif (project.hasClasspathCycle(null, visited, workspaceRoot)) return true;", "-\t\t\t\t\tvisited.remove(projectName);", "+\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\tIResource member = workspaceRoot.findMember(entryPath);", "+\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "+\t\t\t\t\t\tString projectName = entryPath.lastSegment();", "+\t\t\t\t\t\tif (!visited.add(projectName)) return true;", "+\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)member);", "+\t\t\t\t\t\tif (project.hasClasspathCycle(null, visited, workspaceRoot)) return true;", "+\t\t\t\t\t\tvisited.remove(projectName);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2e9eff2fabd5039c5c54320573b7a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "7eeebb70e2ff491ab9bcb9989009c102bc6dce17", "commitAfterChange": "922a8f2234ba62b5ea80c3fa8e1983d8481a3bfb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\t\t\t\tIProject projRsc = (IProject) workspaceRoot.findMember(entry.getPath());", "-\t\t\t\t\tif (projRsc != null && projRsc.isOpen()) {\t\t\t\t", "-\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);", "-\t\t\t\t\t\tproject.computeExpandedClasspath(", "-\t\t\t\t\t\t\tinitialProject, ", "-\t\t\t\t\t\t\tignoreUnresolvedVariable, ", "-\t\t\t\t\t\t\tgenerateMarkerOnError,", "-\t\t\t\t\t\t\tvisitedProjects, ", "-\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\tIResource member = workspaceRoot.findMember(entry.getPath()); ", "+\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){ // double check if bound to project (23977)", "+\t\t\t\t\t\tIProject projRsc = (IProject) member;", "+\t\t\t\t\t\tif (projRsc.isOpen()) {\t\t\t\t", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) JavaCore.create(projRsc);", "+\t\t\t\t\t\t\tproject.computeExpandedClasspath(", "+\t\t\t\t\t\t\t\tinitialProject, ", "+\t\t\t\t\t\t\t\tignoreUnresolvedVariable, ", "+\t\t\t\t\t\t\t\tgenerateMarkerOnError,", "+\t\t\t\t\t\t\t\tvisitedProjects, ", "+\t\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec38c2ea60e9dddc6744dee70557d475", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5527337a36439b5f7161d1700f05a2afcdb55c60", "commitAfterChange": "9309fad26eb4113a283f2c853c44a62715f49d70", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static void validateCycles(Map preferredClasspaths) throws JavaModelException", "signatureAfterChange": " \tpublic static void validateCycles(Map preferredClasspaths) throws JavaModelException", "diff": ["-\t\tHashSet cycleParticipants = new HashSet();", "+\t\tLinkedHashSet cycleParticipants = new LinkedHashSet();", "+\t\t\t\t\t\tIJavaProject[] projectsInCycle;", "+\t\t\t\t\t\tString cycleString = \"\";\t //$NON-NLS-1$", "+\t\t\t\t\t\tif (cycleParticipants.isEmpty()) {", "+\t\t\t\t\t\t\tprojectsInCycle = null;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tprojectsInCycle = new IJavaProject[cycleParticipants.size()];", "+\t\t\t\t\t\t\tIterator it = cycleParticipants.iterator();", "+\t\t\t\t\t\t\tint k = 0;", "+\t\t\t\t\t\t\twhile (it.hasNext()) {", "+\t\t\t\t\t\t\t\t//projectsInCycle[i++] = (IPath) it.next();", "+\t\t\t\t\t\t\t\tIResource member = workspaceRoot.findMember((IPath) it.next());", "+\t\t\t\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "+\t\t\t\t\t\t\t\t\tprojectsInCycle[k] = JavaCore.create((IProject)member);", "+\t\t\t\t\t\t\t\t\tif (projectsInCycle[k] != null) {", "+\t\t\t\t\t\t\t\t\t\tif (k != 0) cycleString += \", \"; //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\tcycleString += projectsInCycle[k++].getElementName();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.CLASSPATH_CYCLE, project));", "+\t\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.CLASSPATH_CYCLE, project, cycleString));"]}], "num": 63274}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d71bfe4e7aea00ebe1fbd98bc4fad8e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462999a5f23904c40c206384aa3731b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "diff": ["-\t\t\tnewDiskIndex.streamBuffer = new byte[BUFFER_WRITE_SIZE];", "-\t\t\tnewDiskIndex.bufferIndex = 0;", "-\t\t\tnewDiskIndex.streamEnd = 0;", "-\t\t\tif (newDiskIndex.bufferIndex > 0) {", "-\t\t\t\tstream.write(newDiskIndex.streamBuffer, 0, newDiskIndex.bufferIndex);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f9a36a51c71261c982a00bb502c033f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bbfd43e75c85d178e78e2e1f2cdd86b56e672481", "commitAfterChange": "b7270c3ed9751063a7847ef78467ed5c4c4a29fb", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r \tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen, List<Type> typeArguments)", "signatureAfterChange": "\r \r \tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen)", "diff": ["-\tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen, List<Type> typeArguments) {\r", "+\tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen) {\r", "-\t\t}\r", "-\r", "-\t\tif (!typeArguments.isEmpty()) {\r", "-\t\t\thandleTokenAfter(typeArguments.get(typeArguments.size() - 1), TokenNameGREATER, false,\r", "-\t\t\t\t\tthis.options.insert_space_after_closing_angle_bracket_in_type_arguments);\r", "-\t\t\thandleCommas(typeArguments,\r", "-\t\t\t\t\tthis.options.insert_space_before_comma_in_parameterized_type_reference,\r", "-\t\t\t\t\tthis.options.insert_space_after_comma_in_parameterized_type_reference);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a2a7af2ddf5def70d206ae80757d8df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "38df8da524fe9a4447ec44507ebad1f9ece75a2f", "commitAfterChange": "908069783b3c679a7fb6f9224220f18c85e23565", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tif (currentArg.equals(\"-classpath\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-classpath\") || currentArg.equals(\"-cp\")) { //$NON-NLS-1$\r", "-\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "-\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "-\t\tif (!file.exists())\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r", "+\t\tif (!file.exists()) // signal missing classpath entry file\r", "+\t\t\tout.println(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r"]}], "num": 7669}
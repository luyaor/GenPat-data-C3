{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92bddd4d14a4cfc239be7cc3e8e999c3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c922c577c26cf367e9a709269a62ad6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void acceptResult(CompilationResult result)", "signatureAfterChange": "  public void acceptResult(CompilationResult result)", "diff": ["-\t// only need to find resource for the sourceLocation when problems need to be reported against it", "-\tString sourceLocation = new String(result.getFileName()); // the full filesystem path \"d:/xyz/eclipse/src1/Test/p1/p2/A.java\"", "-\tif (!workQueue.isCompiled(sourceLocation)) {", "+\tSourceFile compilationUnit = (SourceFile) result.getCompilationUnit(); // go directly back to the sourceFile", "+\tif (!workQueue.isCompiled(compilationUnit)) {", "-\t\t\tworkQueue.finished(sourceLocation);", "-\t\t\tupdateProblemsFor(sourceLocation, result); // record compilation problems before potentially adding duplicate errors", "+\t\t\tworkQueue.finished(compilationUnit);", "+\t\t\tupdateProblemsFor(compilationUnit, result); // record compilation problems before potentially adding duplicate errors", "-\t\t\tICompilationUnit compilationUnit = result.getCompilationUnit();", "+\t\t\tString typeLocator = compilationUnit.typeLocator();", "-\t\t\t\t\tif (newState.isDuplicateLocation(qualifiedTypeName, sourceLocation))", "+\t\t\t\t\tif (newState.isDuplicateLocator(qualifiedTypeName, typeLocator))", "-\t\t\t\t\tif (newState.isDuplicateLocation(qualifiedTypeName, sourceLocation)) {", "+\t\t\t\t\tif (newState.isDuplicateLocator(qualifiedTypeName, typeLocator)) {", "-\t\t\t\t\t\tcreateErrorFor(resourceForLocation(sourceLocation), Util.bind(\"build.duplicateClassFile\", new String(typeName))); //$NON-NLS-1$", "+\t\t\t\t\t\tcreateErrorFor(compilationUnit.resource, Util.bind(\"build.duplicateClassFile\", new String(typeName))); //$NON-NLS-1$", "-\t\t\t\t\tnewState.recordLocationForType(qualifiedTypeName, sourceLocation);", "+\t\t\t\t\tnewState.recordLocatorForType(qualifiedTypeName, typeLocator);", "-\t\t\t\tdefinedTypeNames.add(writeClassFile(classFile, !isNestedType));", "+\t\t\t\tdefinedTypeNames.add(writeClassFile(classFile, compilationUnit.sourceLocation.binaryFolder, !isNestedType));", "-\t\t\tfinishedWith(sourceLocation, result, compilationUnit.getMainTypeName(), definedTypeNames, duplicateTypeNames);", "+\t\t\tfinishedWith(typeLocator, result, compilationUnit.getMainTypeName(), definedTypeNames, duplicateTypeNames);", "-\t\t\tcreateErrorFor(resourceForLocation(sourceLocation), Util.bind(\"build.inconsistentClassFile\")); //$NON-NLS-1$", "+\t\t\tcreateErrorFor(compilationUnit.resource, Util.bind(\"build.inconsistentClassFile\")); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "651bf8e1c57144a22e21ad7004013073", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r public void acceptResult(CompilationResult result)", "signatureAfterChange": "\r \r public void acceptResult(CompilationResult result)", "diff": ["-\tString location = new String(result.getFileName()); // the full filesystem path 'd:/xyz/eclipse/Test/p1/p2/A.java'\r", "-\tif (!workQueue.isCompiled(location)) {\r", "+\t// only need to find resource for the sourceLocation when problems need to be reported against it\r", "+\tString sourceLocation = new String(result.getFileName()); // the full filesystem path \"d:/xyz/eclipse/src1/Test/p1/p2/A.java\"\r", "+\tif (!workQueue.isCompiled(sourceLocation)) {\r", "-\t\t\tworkQueue.finished(location);\r", "-\t\r", "+\t\t\tworkQueue.finished(sourceLocation);\r", "+\t\t\tupdateProblemsFor(sourceLocation, result); // record compilation problems before potentially adding duplicate errors\r", "+\r", "-\t\t\tArrayList otherTypeNames = new ArrayList(length);\r", "-\t\t\tchar[] mainTypeName = compilationUnit.getMainTypeName(); // may not match any produced class file\r", "+\t\t\tArrayList duplicateTypeNames = null;\r", "+\t\t\tArrayList definedTypeNames = new ArrayList(length);\r", "-\t\t\t\tif (CharOperation.equals(mainTypeName, typeName)) {\r", "-\t\t\t\t\twriteClassFile(classFile, false);\r", "+\t\t\t\tboolean isNestedType = CharOperation.contains('$', typeName);\r", "+\r", "+\t\t\t\t// Look for a possible collision, if one exists, report an error but do not write the class file\r", "+\t\t\t\tif (isNestedType) {\r", "+\t\t\t\t\tString qualifiedTypeName = new String(classFile.outerMostEnclosingClassFile().fileName());\r", "+\t\t\t\t\tif (newState.isDuplicateLocation(qualifiedTypeName, sourceLocation))\r", "+\t\t\t\t\t\tcontinue;\r", "-\t\t\t\t\tboolean isSecondaryType = !CharOperation.contains('$', typeName);\r", "-\t\t\t\t\totherTypeNames.add(writeClassFile(classFile, isSecondaryType));\r", "+\t\t\t\t\tString qualifiedTypeName = new String(classFile.fileName()); // the qualified type name \"p1/p2/A\"\r", "+\t\t\t\t\tif (newState.isDuplicateLocation(qualifiedTypeName, sourceLocation)) {\r", "+\t\t\t\t\t\tif (duplicateTypeNames == null)\r", "+\t\t\t\t\t\t\tduplicateTypeNames = new ArrayList();\r", "+\t\t\t\t\t\tduplicateTypeNames.add(compoundName);\r", "+\t\t\t\t\t\tcreateErrorFor(resourceForLocation(sourceLocation), Util.bind(\"build.duplicateClassFile\", new String(typeName)));\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tnewState.locationForType(qualifiedTypeName, sourceLocation);\r", "+\t\t\t\tdefinedTypeNames.add(writeClassFile(classFile, !isNestedType));\r", "-\t\t\tupdateProblemsFor(result);\r", "-\t\t\tif (otherTypeNames.isEmpty()) {\r", "-\t\t\t\tfinishedWith(location, result, new char[0][]);\r", "-\t\t\t} else {\r", "-\t\t\t\tchar[][] additionalTypeNames = new char[otherTypeNames.size()][];\r", "-\t\t\t\totherTypeNames.toArray(additionalTypeNames);\r", "-\t\t\t\tfinishedWith(location, result, additionalTypeNames);\r", "-\t\t\t}\r", "+\r", "+\t\t\tfinishedWith(sourceLocation, result, compilationUnit.getMainTypeName(), definedTypeNames, duplicateTypeNames);\r", "-\t\t\ttry {\r", "-\t\t\t\t// add another problem to the compilation unit that its class file is inconsistent\r", "-\t\t\t\tIResource resource = javaBuilder.workspaceRoot.getFileForLocation(new Path(location));\r", "-\t\t\t\tIMarker marker = resource.createMarker(ProblemMarkerTag);\r", "-\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, Util.bind(\"build.inconsistentClassFile\"));\r", "-\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_ERROR);\r", "-\t\t\t} catch (CoreException ignore) {\r", "-\t\t\t\tthrow internalException(e);\r", "-\t\t\t}\r", "+\t\t\tcreateErrorFor(resourceForLocation(sourceLocation), Util.bind(\"build.inconsistentClassFile\"));\r"]}], "num": 29609}
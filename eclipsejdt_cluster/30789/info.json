{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed663dbaf0563ae335ef972d6b4e02b9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18a0b6d8938aaecd6ef956fbd9e130d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "6616b103b53af13bafcc8a32713ca6371865f9c4", "commitAfterChange": "fcd90e4a2f5e40578ea3ad28461a3e5ea180ab4e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private boolean hasClasspathChanged()", "signatureAfterChange": "  private boolean hasClasspathChanged()", "diff": ["-\t\t\tSystem.out.println(\"New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"JavaBuilder: New location: \" + newSourceLocations[n] + \"\\n!= old location: \" + oldSourceLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Added non-empty source folder\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Added non-empty source folder\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"Removed non-empty source folder\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Removed non-empty source folder\"); //$NON-NLS-1$", "-\t\t\tSystem.out.println(\"New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tSystem.out.println(\"JavaBuilder: New location: \" + newBinaryLocations[n] + \"\\n!= old location: \" + oldBinaryLocations[o]); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Number of binary folders/jar files has changed:\"); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"JavaBuilder: Number of binary folders/jar files has changed:\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6955c9a51c1503a54da6fa005d3503", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \t \tpublic void test052()", "signatureAfterChange": " \t \tpublic void test052()", "diff": ["-\t\t\t\"     2  istore_0\\n\" + ", "-\t\t\t\"     3  iload_0\\n\" + ", "+\t\t\t\"     2  istore_0 [i]\\n\" + ", "+\t\t\t\"     3  iload_0 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #26 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_0\\n\" + ", "-\t\t\t\"    13  invokevirtual #32 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [26]\\n\" + ", "+\t\t\t\"    12  iload_0 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee11188f8db94861e2723dee6220fb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "413506076b5eca1e8bff0fe05f1ae6ca89cdfda0", "commitAfterChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "methodNumberBeforeChange": 561, "methodNumberAfterChange": 561, "signatureBeforeChange": " public void testBug209996_c5() throws CoreException", "signatureAfterChange": " public void testBug209996_c5() throws CoreException", "diff": ["-\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "-\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\",", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doA(Ref).ref [    void doA(\ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doB(List<Ref>).ref [    void doB(List<\ufffd|Ref|\ufffd> ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void doC(@Tag(\ufffd|Ref|\ufffd.class) Ref ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java void comment5.Ref.doC(Ref).ref [    void doC(@Tag(Ref.class) \ufffd|Ref|\ufffd ref) {}]\\n\" +", "+\t\t\"src/comment5/Ref.java @Tag(value=Ref.class) [    void dontD(@Tag(\ufffd|Ref|\ufffd.class) Object ref) {}]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a385139707ef11a68052f842beb5590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testMethodReferencesStringPatternSingleParamArguments02() throws CoreException", "diff": ["-\t\tsearch(\"complete % <? extends Exception>\", METHOD, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"<? extends Exception> complete \", METHOD, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [complete(new Exception(), gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [<Exception>complete(new Exception(), gs)] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [<RuntimeException>complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\"", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testSuper() [<RuntimeException>complete(new RuntimeException(), gs)] EQUIVALENT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35430e927129db622183908ea5f5c16e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "26d507f9337456ca82e52ed896177b679ad9ed51", "commitAfterChange": "6954f6f09ec0fa4357c31e7abaa82f5c7cd86dbc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate boolean examineGetAllAnnotations()", "signatureAfterChange": " \tprivate boolean examineGetAllAnnotations()", "diff": ["-\t\t\treportError(\"getAllAnnotationMirrors(_elementH) returned null\");", "+\t\t\treportError(\"examineGetAllAnnotations: getAllAnnotationMirrors(_elementH) returned null\");", "-\t\t\t\t\treportError(\"unexpected value for annotation AnnoY\");", "+\t\t\t\t\treportError(\"examineGetAllAnnotations: unexpected value for annotation AnnoY\");", "-\t\t\t\t\t\treportError(\"unexpected value for annotation AnnoX\");", "+\t\t\t\t\t\treportError(\"examineGetAllAnnotations: unexpected value for annotation AnnoX\");", "-\t\t\t\t\treportError(\"getAllAnnotationMirrors(_elementH) returned a mirror with no value()\");", "+\t\t\t\t\treportError(\"examineGetAllAnnotations: getAllAnnotationMirrors(_elementH) returned a mirror with no value()\");", "-\t\t\treportError(\"getAllAnnotationMirrors() found wrong number of annotations on H\");", "+\t\t\treportError(\"examineGetAllAnnotations: getAllAnnotationMirrors() found wrong number of annotations on H\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53ba11ad24514c0e83757fa23188b1ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "070c89861c117098b82b25282c7c2d65a320aff5", "commitAfterChange": "b990e8e256f352022e2abad7a2d2f30c0852cd13", "methodNumberBeforeChange": 937, "methodNumberAfterChange": 937, "signatureBeforeChange": " public void test0927()", "signatureAfterChange": " public void test0927()", "diff": ["-\t\t\"Type mismatch: cannot convert from List<List<capture-of ? extends Object>> to List<? extends List<Object>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<List<capture#2-of ? extends Object>> to List<? extends List<Object>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<List<capture-of ? extends Object>> to List<List<Object>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<List<capture#3-of ? extends Object>> to List<List<Object>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<List<capture-of ?>> to List<List<Object>>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<List<capture#4-of ?>> to List<List<Object>>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Object> to List<Object>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#5-of ? extends Object> to List<Object>\\n\" + ", "-\t\t\"Type mismatch: cannot convert from List<capture-of ? extends Object> to List<Object>\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#6-of ? extends Object> to List<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d76a66f121a2b712eac3ce7cddef55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void test024()", "signatureAfterChange": " \tpublic void test024()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     7  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    10  iload_1\\n\" + ", "-\t\t\t\"    11  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     7  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    10  iload_1 [i]\\n\" + ", "+\t\t\t\"    11  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de64699d01a94b27b4b28524bb7a2044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "commitAfterChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \tpublic void test0383913b()", "signatureAfterChange": "\r \tpublic void test0383913b()", "diff": ["-\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\\n\" +\r", "+\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\\n\" +\r", "-\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K, V> this, float f) {}\\n\" +\r", "+\t\t\t\t\t\t\"            InnerMost(Outer.Inner<K, V> this, float f, int i) {}\\n\" +\r", "-\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\\n\" + \r", "+\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\\n\" + \r", "-\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\\n\" + \r", "+\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\\n\" + \r", "-\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K, V> this, float f) {}\\n\" + \r", "+\t\t\t\t\t\t\"\tInnerMost(Outer.Inner<K, V> this, float f, int i) {}\\n\" + \r"]}], "num": 30789}
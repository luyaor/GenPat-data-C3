{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee91aa42e2c8137afc3a3fa4f1daf122", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc103bbc8198a9a009900f1daea3e05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test011a()", "signatureAfterChange": " \tpublic void test011a()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in Combined.java (at line 2)\\n\" + ", "+\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in Combined.java (at line 3)\\n\" + ", "+\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Combined.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Combined.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "+\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Combined.java (at line 2)\\n\" + ", "-\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "-\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method pickOne(T) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Combined.java (at line 3)\\n\" + ", "-\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method pickOne(Comparable<T>) has the same erasure pickOne(Comparable<T>) as another method in type Combined<A,B>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f35b1469964f5862888d22c30a049e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "285d9f55145724991833663a691553a09e2c72de", "commitAfterChange": "b36a137cc1f0fb3b34ff097a37fce4ecbf12fde7", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": " \tpublic void test0189()", "signatureAfterChange": " \tpublic void test0189()", "diff": ["+\t\tString expectedOutput = this.complianceLevel < ClassFileConstants.JDK1_7", "+\t\t\t? \t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tSystem.out.println(new X().<String>foo());\\n\" + ", "+\t\t\t\t\"\t                                   ^^^\\n\" + ", "+\t\t\t\t\"The method foo() of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t: \t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tSystem.out.println(new X().<String>foo());\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\t\"The method println(boolean) in the type PrintStream is not applicable for the arguments (void)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tSystem.out.println(new X().<String>foo());\\n\" + ", "+\t\t\t\t\"\t                            ^^^^^^\\n\" + ", "+\t\t\t\t\"Unused type arguments for the non generic method foo() of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\";", "+\t\t", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tSystem.out.println(new X().<String>foo());\\n\" + ", "-\t\t\t\"\t                                   ^^^\\n\" + ", "-\t\t\t\"The method foo() of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\texpectedOutput);"]}], "num": 59168}
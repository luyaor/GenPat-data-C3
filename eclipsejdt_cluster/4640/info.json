{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a367aaf91182a520122921946de710dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "213df239892bfdbcf9be095b98ae0492", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": "  \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["-\t\t} else {", "-\t\t\tif (JavaCore.getClasspathVariable(\"CONVERTER_JCL_LIB\") == null) {", "-\t\t\t\tsetupExternalJCL(\"converterJclMin\");", "+\t\t} else if (\"1.7\".equals(compliance)) {", "+\t\t\tif (JavaCore.getClasspathVariable(\"CONVERTER_JCL17_LIB\") == null) {", "+\t\t\t\tsetupExternalJCL(\"converterJclMin1.7\");", "-\t\t\t\t\tnew String[] {\"CONVERTER_JCL_LIB\", \"CONVERTER_JCL_SRC\", \"CONVERTER_JCL_SRCROOT\"},", "-\t\t\t\t\tnew IPath[] {getConverterJCLPath(), getConverterJCLSourcePath(), getConverterJCLRootSourcePath()},", "+\t\t\t\t\tnew String[] {\"CONVERTER_JCL17_LIB\", \"CONVERTER_JCL17_SRC\", \"CONVERTER_JCL17_SRCROOT\"},", "+\t\t\t\t\tnew IPath[] {getConverterJCLPath(\"1.7\"), getConverterJCLSourcePath(\"1.7\"), getConverterJCLRootSourcePath()},", "+\t\t} else if (JavaCore.getClasspathVariable(\"CONVERTER_JCL_LIB\") == null) {", "+\t\t\tsetupExternalJCL(\"converterJclMin\");", "+\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\tnew String[] {\"CONVERTER_JCL_LIB\", \"CONVERTER_JCL_SRC\", \"CONVERTER_JCL_SRCROOT\"},", "+\t\t\t\tnew IPath[] {getConverterJCLPath(), getConverterJCLSourcePath(), getConverterJCLRootSourcePath()},", "+\t\t\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2445bf7d5a03d280f48abd9d23c237aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModelTestsUtil.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  static public void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": "  static public void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["-\tif (\"1.5\".equals(compliance)) {", "+\tif (\"1.7\".equals(compliance)) {", "+\t\tif (JavaCore.getClasspathVariable(\"JCL17_LIB\") == null) {", "+\t\t\tsetupExternalJCL(\"jclMin1.7\");", "+\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\tnew String[] {\"JCL17_LIB\", \"JCL17_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\tnew IPath[] {getExternalJCLPath(compliance), getExternalJCLSourcePath(compliance), getExternalJCLRootSourcePath()},", "+\t\t\t\tnull);", "+\t\t}", "+\t} else if (\"1.5\".equals(compliance)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba1ae2601b58816b8f21dcc3122eb11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "53b05c23cf839b3cc88e44aaf71a3bc8827a1b42", "commitAfterChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": "  \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["+\t\t} else if (\"1.8\".equals(compliance)) {", "+\t\t\tif (JavaCore.getClasspathVariable(\"CONVERTER_JCL18_LIB\") == null) {", "+\t\t\t\tsetupExternalJCL(\"converterJclMin1.8\");", "+\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\tnew String[] {\"CONVERTER_JCL18_LIB\", \"CONVERTER_JCL18_SRC\", \"CONVERTER_JCL18_SRCROOT\"},", "+\t\t\t\t\tnew IPath[] {getConverterJCLPath(\"1.8\"), getConverterJCLSourcePath(\"1.8\"), getConverterJCLRootSourcePath()},", "+\t\t\t\t\tnull);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40df6eb8a806f20a0b9e8bfc330817c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModelTestsUtil.java", "commitBeforeChange": "53b05c23cf839b3cc88e44aaf71a3bc8827a1b42", "commitAfterChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  static public void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": "  static public void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["-\tif (\"1.7\".equals(compliance)) {", "+\tif (\"1.8\".equals(compliance)) {", "+\t\tif (JavaCore.getClasspathVariable(\"JCL18_LIB\") == null) {", "+\t\t\tsetupExternalJCL(\"jclMin1.8\");", "+\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\tnew String[] {\"JCL18_LIB\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\tnew IPath[] {getExternalJCLPath(compliance), getExternalJCLSourcePath(compliance), getExternalJCLRootSourcePath()},", "+\t\t\t\tnull);", "+\t\t}", "+\t} else if (\"1.7\".equals(compliance)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d150e03a7d521696050a5d97738ae5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["-\t\tif (\"1.5\".equals(compliance)) {", "+\t\tif (\"1.5\".equals(compliance) || \"1.6\".equals(compliance)) {", "-\t\t\t\t\tnew IPath[] {getExternalJCLPath(compliance), getExternalJCLSourcePath(compliance), getExternalJCLRootSourcePath()},", "+\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.5\"), getExternalJCLSourcePath(\"1.5\"), getExternalJCLRootSourcePath()},", "-\t\t} else {", "+\t\t} else if (\"1.7\".equals(compliance)) {", "+\t\t\tif (JavaCore.getClasspathVariable(\"JCL17_LIB\") == null) {", "+\t\t\t\tsetupExternalJCL(\"jclMin1.7\");", "+\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\tnew String[] {\"JCL17_LIB\", \"JCL17_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.7\"), getExternalJCLSourcePath(\"1.7\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\tnull);", "+\t\t\t}", "+\t\t}else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74669709e50aa85c702a27c24b073d26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "commitAfterChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": " \tpublic void setUpJCLClasspathVariables(String compliance, boolean useFullJCL) throws JavaModelException, IOException", "diff": ["+\t}", "+\tpublic void setUpJCLClasspathVariables(String compliance, boolean useFullJCL) throws JavaModelException, IOException {", "-\t\t\tif (JavaCore.getClasspathVariable(\"JCL18_LIB\") == null) {", "-\t\t\t\tsetupExternalJCL(\"jclMin1.8\");", "-\t\t\t\tJavaCore.setClasspathVariables(", "-\t\t\t\t\tnew String[] {\"JCL18_LIB\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "-\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.8\"), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "-\t\t\t\t\tnull);", "-\t\t\t}\t", "+\t\t\tif (useFullJCL) {", "+\t\t\t\tif (JavaCore.getClasspathVariable(\"JCL18_FULL\") == null) {", "+\t\t\t\t\tsetupExternalJCL(\"jclMin1.8\"); // Create the whole mininmal 1.8 set, though we will need only the source zip", "+\t\t\t\t\tsetupExternalJCL(\"jclFull1.8\");", "+\t\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\t\tnew String[] {\"JCL18_FULL\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\t\tnew IPath[] {new Path(getExternalJCLPathString(\"1.8\", true)), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\t\tnull);", "+\t\t\t\t} ", "+\t\t\t} else if (JavaCore.getClasspathVariable(\"JCL18_LIB\") == null) {", "+\t\t\t\t\t\tsetupExternalJCL(\"jclMin1.8\");", "+\t\t\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\t\t\tnew String[] {\"JCL18_LIB\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.8\"), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\t\t\tnull);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9302f23cfd7ea2353a37dac7d4815aad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "53b05c23cf839b3cc88e44aaf71a3bc8827a1b42", "commitAfterChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "signatureAfterChange": " \tpublic void setUpJCLClasspathVariables(String compliance) throws JavaModelException, IOException", "diff": ["-\t\t}else {", "+\t\t} else if (\"1.8\".equals(compliance)) {", "+\t\t\tif (JavaCore.getClasspathVariable(\"JCL18_LIB\") == null) {", "+\t\t\t\tsetupExternalJCL(\"jclMin1.8\");", "+\t\t\t\tJavaCore.setClasspathVariables(", "+\t\t\t\t\tnew String[] {\"JCL18_LIB\", \"JCL18_SRC\", \"JCL_SRCROOT\"},", "+\t\t\t\t\tnew IPath[] {getExternalJCLPath(\"1.8\"), getExternalJCLSourcePath(\"1.8\"), getExternalJCLRootSourcePath()},", "+\t\t\t\t\tnull);", "+\t\t\t}\t", "+\t\t} else {"]}], "num": 4640}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc8b01fad019d83495241fcd227cfe91", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49f7bf90ad253f0091762272acb7d211", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type)", "signatureAfterChange": " protected IJavaElement createHandle(FieldDeclaration fieldDeclaration, TypeDeclaration typeDeclaration, IJavaElement parent)", "diff": ["+protected IJavaElement createHandle(FieldDeclaration fieldDeclaration, TypeDeclaration typeDeclaration, IJavaElement parent) {", "+\tif (!(parent instanceof IType)) return parent;", "+", "+\tif (fieldDeclaration.isField())", "+\t\treturn ((IType) parent).getField(new String(fieldDeclaration.name));", "+", "+\t// find occurence count of the given initializer in its type declaration", "+\tint occurrenceCount = 0;", "+\tFieldDeclaration[] fields = typeDeclaration.fields;", "+\tfor (int i = 0, length = fields.length; i < length; i++) {", "+\t\tif (!fields[i].isField()) {", "+\t\t\toccurrenceCount++;", "+\t\t\tif (fields[i].equals(fieldDeclaration)) break;", "+\t\t}", "+\t}", "+\treturn ((IType) parent).getInitializer(occurrenceCount);", "- */", "-protected IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type) {", "-\tif (type == null) return null;", "-", "-\t// find occurence count of the given initializer in its type declaration", "-\tint occurrenceCount = 0;", "-\tFieldDeclaration[] fields = typeDecl.fields;", "-\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\tFieldDeclaration field = fields[i];", "-\t\tif (!field.isField()) {", "-\t\t\toccurrenceCount++;", "-\t\t\tif (field.equals(initializer)) break;", "-\t\t}", "-\t}", "-\treturn type.getInitializer(occurrenceCount);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad92f7470374e1ff199e80b5120ba893", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic IInitializer createInitializerHandle( \t\tTypeDeclaration typeDecl, \t\tFieldDeclaration initializer, \t\tIType type)", "signatureAfterChange": " public IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type)", "diff": ["-\t */", "-\tpublic IInitializer createInitializerHandle(", "-\t\tTypeDeclaration typeDecl,", "-\t\tFieldDeclaration initializer,", "-\t\tIType type) {", "-\t\tif (type == null) return null;", "-\t\t// find occurence count of the given initializer in its type declaration", "-\t\tint occurrenceCount = 0;", "-\t\tFieldDeclaration[] fields = typeDecl.fields;", "-\t\tfor (int i = 0, length = fields.length; i < length; i++) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\tif (!field.isField()) {", "-\t\t\t\toccurrenceCount++;", "-\t\t\t\tif (field.equals(initializer)) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\treturn type.getInitializer(occurrenceCount);", "+ */", "+public IInitializer createInitializerHandle(TypeDeclaration typeDecl, FieldDeclaration initializer, IType type) {", "+\tif (type == null) return null;", "+", "+\t// find occurence count of the given initializer in its type declaration", "+\tint occurrenceCount = 0;", "+\tFieldDeclaration[] fields = typeDecl.fields;", "+\tfor (int i = 0, length = fields.length; i < length; i++) {", "+\t\tFieldDeclaration field = fields[i];", "+\t\tif (!field.isField()) {", "+\t\t\toccurrenceCount++;", "+\t\t\tif (field.equals(initializer)) break;", "+\t\t}", "+\t}", "+\treturn type.getInitializer(occurrenceCount);", "+}"]}], "num": 42841}
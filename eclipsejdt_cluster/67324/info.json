{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "def7e0fc145c620c40f9d82aa06d85f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b68dd791547728f5c8cb76076e2db945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate static SearchPattern createFieldPattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createFieldPattern(String patternString, int limitTo, int matchRule)", "diff": ["-\t\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\tString tokenSource = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\tfieldName = new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\tfieldName = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\tfieldName += new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\tfieldName += scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\ttype = new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\ttype = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\ttype += new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\ttype += scanner.getCurrentTokenString();", "+\t\t// Create field pattern", "+\t\tboolean findDeclarations = false;", "+\t\tboolean readAccess = false;", "+\t\tboolean writeAccess = false;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfieldNameChars,", "-\t\t\t\t\tdeclaringTypeQualification,", "-\t\t\t\t\tdeclaringTypeSimpleName,", "-\t\t\t\t\ttypeQualification,", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\tfindDeclarations = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue, // write access", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\treadAccess = true;", "+\t\t\t\twriteAccess = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\treadAccess = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue, // write access only", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\twriteAccess = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\ttrue,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue, // write access", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\tfindDeclarations = true;", "+\t\t\t\treadAccess = true;", "+\t\t\t\twriteAccess = true;", "+\t\t\t\tbreak;", "-\t\treturn null;", "+\t\treturn new FieldPattern(", "+\t\t\t\tfindDeclarations,", "+\t\t\t\treadAccess,", "+\t\t\t\twriteAccess,", "+\t\t\t\tfieldNameChars,", "+\t\t\t\tdeclaringTypeQualification,", "+\t\t\t\tdeclaringTypeSimpleName,", "+\t\t\t\ttypeQualification,", "+\t\t\t\ttypeSimpleName,", "+\t\t\t\tmatchRule);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db77cb166436312511f39040fc472234", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "ff4953718f4a4fa66bb0922d1821b22a0e2fdd84", "commitAfterChange": "b48f366c7cd622655a48ea734bdcd0016d20ec8b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo, int matchRule)", "diff": ["+\t\t\t\tboolean findVarDeclarations = false;", "+\t\t\t\tboolean findVarReadAccess = false;", "+\t\t\t\tboolean findVarWriteAccess = false;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew LocalVariablePattern(", "-\t\t\t\t\t\t\t\ttrue, // declarations", "-\t\t\t\t\t\t\t\tfalse, // no read access", "-\t\t\t\t\t\t\t\tfalse, // no write access", "-\t\t\t\t\t\t\t\tlocalVar,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindVarDeclarations = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew LocalVariablePattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // read access", "-\t\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\t\tlocalVar,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindVarReadAccess = true;", "+\t\t\t\t\t\tfindVarWriteAccess = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew LocalVariablePattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tlocalVar,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindVarReadAccess = true;", "-\t\t\t\t\t\tsearchPattern = ", "-\t\t\t\t\t\t\tnew LocalVariablePattern(", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\ttrue, // write access only", "-\t\t\t\t\t\t\t\tlocalVar,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindVarWriteAccess = true;", "-\t\t\t\t\t\tsearchPattern =", "-\t\t\t\t\t\t\tnew LocalVariablePattern(", "-\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\ttrue, // read access", "-\t\t\t\t\t\t\t\ttrue, // write access", "-\t\t\t\t\t\t\t\tlocalVar,", "-\t\t\t\t\t\t\t\tmatchRule);", "+\t\t\t\t\t\tfindVarDeclarations = true;", "+\t\t\t\t\t\tfindVarReadAccess = true;", "+\t\t\t\t\t\tfindVarWriteAccess = true;", "+\t\t\t\tsearchPattern = ", "+\t\t\t\t\tnew LocalVariablePattern(", "+\t\t\t\t\t\tfindVarDeclarations,", "+\t\t\t\t\t\tfindVarReadAccess,", "+\t\t\t\t\t\tfindVarWriteAccess,", "+\t\t\t\t\t\tlocalVar,", "+\t\t\t\t\t\tmatchRule);", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.TYPE_PARAMETER:", "+\t\t\t\tITypeParameter typeParam = (ITypeParameter) element;", "+\t\t\t\tboolean findParamDeclarations = true;", "+\t\t\t\tboolean findParamReferences = true;", "+\t\t\t\tswitch (limitTo) {", "+\t\t\t\t\tcase IJavaSearchConstants.DECLARATIONS :", "+\t\t\t\t\t\tfindParamReferences = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IJavaSearchConstants.REFERENCES :", "+\t\t\t\t\t\tfindParamDeclarations = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tsearchPattern = ", "+\t\t\t\t\tnew TypeParameterPattern(", "+\t\t\t\t\t\tfindParamDeclarations,", "+\t\t\t\t\t\tfindParamReferences,", "+\t\t\t\t\t\ttypeParam,", "+\t\t\t\t\t\tmatchRule);"]}], "num": 67324}
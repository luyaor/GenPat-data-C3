{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb1e168b5378a241d6f57058099a0046", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009bc3519260598725eafe6bb4a34523", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprivate void findTypeParameters(char[] token, Scope scope)", "signatureAfterChange": " \tprivate void findTypeParameters(char[] token, Scope scope)", "diff": ["-\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t//proposal.setDeclarationSignature(null);", "-\t\t\t\t\t\tproposal.setSignature(getSignature(typeParameter.binding));", "-\t\t\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t\t\tproposal.setTypeName(typeParameter.name);", "-\t\t\t\t\t\tproposal.setCompletion(typeParameter.name);", "-\t\t\t\t\t\tproposal.setFlags(typeParameter.modifiers);", "-\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcreateTypeParameterProposal(typeParameter, relevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7b8479e14857f0ef8e00183b1a3bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "76d395ddd90431ef7cb4486078cb51e978a5ad63", "commitAfterChange": "e6a17a8fa461eb3f06e289d5024883e9ab8df861", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " \tpublic void test0208() throws JavaModelException", "signatureAfterChange": " \tpublic void test0208() throws JavaModelException", "diff": ["-\t\t\t\"@Override(x= 1)\\n\" +", "+\t\t\t\"/*start*/@Override(x= 1)/*end*/\\n\" +", "-\t\tASTNode node = buildAST(", "+\t\tNormalAnnotation normalAnnotation = (NormalAnnotation) buildAST(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue,", "-\t\tassertNotNull(\"No node\", node);", "-\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\tString problems =", "-\t\t\t\"The annotation @Override is disallowed for this location\\n\" +", "-\t\t\t\"The attribute x is undefined for the annotation type Override\";", "-\t\tassertProblemsSize(compilationUnit, 2, problems);", "-\t\tnode = getASTNode(compilationUnit, 0);", "-\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\tList modifiers = typeDeclaration.modifiers();", "-\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "-\t\tassertTrue(\"Wrong type\", modifiers.get(0) instanceof NormalAnnotation);", "-\t\tNormalAnnotation normalAnnotation = (NormalAnnotation) modifiers.get(0);", "-\t\tassertEquals(\"Wrong size\", 1, pairs.length);", "-\t\tassertNotNull(\"Should not be null\", pairs[0].getValue());", "+\t\tassertEquals(\"Wrong size\", 0, pairs.length);", "+\t\tList values = normalAnnotation.values();", "+\t\tassertEquals(\"Wrong size\", 1, values.size());", "+\t\tMemberValuePair pair = (MemberValuePair) values.get(0);", "+\t\tassertNotNull(\"no value\", pair.getValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f48734005510bcb0b46f230250c090f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType)", "signatureAfterChange": " public TypeBinding findSuperTypeOriginatingFrom(TypeBinding otherType)", "diff": ["-public TypeBinding findSuperTypeWithSameErasure(TypeBinding otherType) {", "+public TypeBinding findSuperTypeOriginatingFrom(TypeBinding otherType) {", "-\tint kind;", "-\tswitch(kind = kind()) {", "+\tswitch(kind()) {", "-\t\t\tTypeBinding leafSuperType = arrayType.leafComponentType.findSuperTypeWithSameErasure(otherType.leafComponentType());", "+\t\t\tTypeBinding leafSuperType = arrayType.leafComponentType.findSuperTypeOriginatingFrom(otherType.leafComponentType());", "-\t\t    \t\tTypeBinding match = captureBound.findSuperTypeWithSameErasure(otherType);", "+\t\t    \t\tTypeBinding match = captureBound.findSuperTypeOriginatingFrom(otherType);", "+\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\tswitch(otherType.kind()) {", "-\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\tcase Binding.ARRAY_TYPE : ", "-\t\t\t\t\totherType = otherType.erasure();", "-\t\t\t}", "+\t\t\totherType = otherType.original();", "-\t\t\tswitch(kind) {", "-\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\tcase Binding.ARRAY_TYPE : ", "-\t\t\t\t\tif (erasure() == otherType)", "-\t\t\t\t\t\treturn this;", "-\t\t\t}", "-\t\t    ", "+\t\t    if (original() == otherType)", "+\t\t    \treturn this;", "-\t\t\t\t\tswitch(currentType.kind()) {", "-\t\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\t\t\tcase Binding.ARRAY_TYPE : ", "-\t\t\t\t\t\t\tif (currentType.erasure() == otherType)", "-\t\t\t\t\t\t\t\treturn currentType;", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\tif (currentType.original() == otherType)", "+\t\t\t\t\t\treturn currentType;", "-\t\t\t\tswitch(currentType.kind()) {", "-\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\t\tcase Binding.ARRAY_TYPE : ", "-\t\t\t\t\t\tif (currentType.erasure() == otherType)", "-\t\t\t\t\t\t\treturn currentType;", "-\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tif (currentType.original() == otherType)", "+\t\t\t\t\treturn currentType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9237b5605bc7d059e67d78ab87068ece", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "signatureAfterChange": " \t \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "diff": ["-\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\t\t\t\t\tproposal.setDeclarationSignature(localType.qualifiedPackageName());", "-\t\t\t\t\t\t\t\t\tproposal.setSignature(getSignature(localType));", "-\t\t\t\t\t\t\t\t\tproposal.setPackageName(localType.qualifiedPackageName());", "-\t\t\t\t\t\t\t\t\tproposal.setTypeName(localType.sourceName);", "-\t\t\t\t\t\t\t\t\tproposal.setCompletion(localType.sourceName);", "-\t\t\t\t\t\t\t\t\tproposal.setFlags(localType.modifiers);", "-\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcreateTypeProposal(localType, localType.sourceName, IAccessRule.K_ACCESSIBLE, localType.sourceName, relevance);"]}], "num": 16303}
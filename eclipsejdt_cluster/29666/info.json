{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5fe28557c2f095748a09cad49a1c959", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3631246fc9dfe1a09929abf2912e01f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic TextEdit format( \t\t\tint kind, \t\t\tString source, \t\t\tint offset, \t\t\tint length, \t\t\tint indentationLevel, \t\t\tString lineSeparator)", "signatureAfterChange": " \tpublic TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator)", "diff": ["-\tpublic TextEdit format(", "-\t\t\tint kind,", "-\t\t\tString source,", "-\t\t\tint offset,", "-\t\t\tint length,", "-\t\t\tint indentationLevel,", "-\t\t\tString lineSeparator) {", "-", "+\tpublic TextEdit format(int kind, String source, int offset, int length, int indentationLevel, String lineSeparator) {", "-\t\tswitch(kind) {", "+", "+\t\tswitch(kind & K_MASK) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "+\t\t\t\t// use the integrated comment formatter to format comment", "+\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT) {", "+\t                return formatJavadoc(source, indentationLevel, lineSeparator, new IRegion[] {new Region(offset, length)});", "+\t\t\t\t} else if (FORCE_NEW_JAVADOC_FORMAT) {", "+\t\t\t\t\t// Skip the javadoc formatting using this constant", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\t// In all other cases, use the old way to format javadoc comments", "+\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "+\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "+\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "+\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02323a8ee28c0346c4515947322d498", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic TextEdit format(int kind, String source, IRegion[] regions, int indentationLevel, String lineSeparator)", "signatureAfterChange": " \tpublic TextEdit format(int kind, String source, IRegion[] regions, int indentationLevel, String lineSeparator)", "diff": ["-\t\tswitch(kind) {", "+\t\tswitch(kind & K_MASK) {", "-\t\t\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions);", "+\t\t\t\tboolean formatJavadoc =  (kind & F_INCLUDE_COMMENTS) != 0 || FORCE_NEW_JAVADOC_FORMAT;", "+\t\t\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, formatJavadoc);", "-\t\t\t\treturn probeFormatting(source, indentationLevel, lineSeparator, regions);", "+\t\t\t\tformatJavadoc =  (kind & F_INCLUDE_COMMENTS) != 0 || FORCE_NEW_JAVADOC_FORMAT;", "+\t\t\t\treturn probeFormatting(source, indentationLevel, lineSeparator, regions, formatJavadoc);", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "+\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT) {", "+\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t} else if (FORCE_NEW_JAVADOC_FORMAT) {", "+\t\t\t\t\t// Skip the javadoc formatting using this constant", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\t// In all other cases, use the old way to format javadoc comments", "+\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "+\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "+\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "+\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "+\t\t\t\t}"]}], "num": 29666}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ed8e607f62f367f67a4d7b52b728724", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77015194c12254fb7e256edfdb25310d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "78098de24c545f715ba2d1751d0ca9e6c5c70cdd", "commitAfterChange": "b455d99806c18178f9d152ed826cde0ff5c786f3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " private IJavaElement createMethodHandle(IType type, String methodName, String[] parameterTypeSignatures)", "signatureAfterChange": " private IJavaElement createMethodHandle(IType type, String methodName, String[] parameterTypeSignatures)", "diff": ["-\tIJavaElement handle = type.getMethod(methodName, parameterTypeSignatures);", "-\tInteger occurenceCount = (Integer) this.allHandlesOccurences.get(handle);", "-\tif (occurenceCount == null) {", "-\t\toccurenceCount = new Integer(1);", "-\t} else {", "-\t\t// there are duplicate for this method, find right one", "-\t\tint count = occurenceCount.intValue();", "-\t\ttry {", "-\t\t\tIMethod[] methods = type.getMethods();", "-\t\t\tint length = methods.length;", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (methods[i].equals(handle)) {", "-\t\t\t\t\thandle = methods[i+count];", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// ignore", "+\tIMethod methodHandle = type.getMethod(methodName, parameterTypeSignatures);", "+\tif (methodHandle instanceof SourceMethod) {", "+\t\twhile (this.methodHandles.contains(methodHandle)) {", "+\t\t\t((SourceMethod) methodHandle).occurrenceCount++;", "-\t\toccurenceCount = new Integer(count+1);", "-\tthis.allHandlesOccurences.put(handle, occurenceCount);", "-\treturn handle;", "+\tthis.methodHandles.add(methodHandle);", "+\treturn methodHandle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f9b5cd1ef5d4cbb8dbf3baf2ac5d38b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeSignatureTest.java", "commitBeforeChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "commitAfterChange": "c0452100f2ed18d65cf0dd0efb6f9fc0ffa98156", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\tassertNotNull(mainMethod);", "+\t\tif (mainMethod == null) {", "+\t\t\tassertNotNull(mainMethod);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(xsEntry);", "+\t\tif (xsEntry == null) {", "+\t\t\tassertNotNull(xsEntry);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(constructorMethod);", "+\t\tif (constructorMethod == null) {", "+\t\t\tassertNotNull(constructorMethod);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(thisEntry);", "+\t\tif (thisEntry == null) {", "+\t\t\tassertNotNull(thisEntry);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(tEntry);", "+\t\tif (tEntry == null) {", "+\t\t\tassertNotNull(tEntry);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(mainMethod);", "+\t\tif (mainMethod == null) {", "+\t\t\tassertNotNull(mainMethod);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(xsEntry);", "+\t\tif (xsEntry == null) {", "+\t\t\tassertNotNull(xsEntry);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(constructorMethod);", "+\t\tif (constructorMethod == null) {", "+\t\t\tassertNotNull(constructorMethod);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(thisEntry);", "+\t\tif (thisEntry == null) {", "+\t\t\tassertNotNull(thisEntry);", "+\t\t\treturn;", "+\t\t}", "-\t\tassertNotNull(tEntry);", "+\t\tif (tEntry == null) {", "+\t\t\tassertNotNull(tEntry);", "+\t\t\treturn;", "+\t\t}"]}], "num": 29190}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ab73f0059c0f12ab19ebe641ea80a12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "130929366c0fdb4308751483ab13e63a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 333, "signatureBeforeChange": "\t \t \tpublic void testVariableDeclarationExpression()", "signatureAfterChange": " \t\t \tpublic void testVariableDeclarationExpression()", "diff": ["-\t", "+\t\t", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t}", "-\t\tint legal = Modifier.FINAL;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.FINAL;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}", "-\t\t// check that property cannot be set to illegal value", "-\t\ttry {", "-\t\t\tx.setModifiers(Modifier.PUBLIC);", "-\t\t\tassertTrue(false);", "-\t\t} catch (RuntimeException e) {", "-\t\t\t// pass", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.modifiers(), new Property(\"Modifiers\", true, ExtendedModifier.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tModifier result = targetAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tTypeDeclaration pd = targetAst.newTypeDeclaration();", "+\t\t\t\t\t\tpd.modifiers().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = x.getAST().newSingleMemberAnnotation();", "+\t\t\t\t\ts1.setValue(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tSingleMemberAnnotation s1 = (SingleMemberAnnotation) x.getParent();", "+\t\t\t\t\ts1.setValue(x.getAST().newNullLiteral());", "+\t\t\t\t}", "+\t\t\t});", "+", "+\t\t\t// check that getModifiers() tracks changes to modifiers()", "+\t\t\tx.modifiers().clear();", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\tModifier[] allMods = allModifiers();", "+\t\t\t// one at a time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == allMods[i].getKeyword().toFlagValue());", "+\t\t\t\tx.modifiers().remove(allMods[i]);", "+\t\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t\t}", "+\t\t\t// all at same time", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tx.modifiers().add(allMods[i]);", "+\t\t\t}", "+\t\t\tint flags  = x.getModifiers();", "+\t\t\tfor (int i = 0 ; i < allMods.length; i++) {", "+\t\t\t\tassertTrue((flags & allMods[i].getKeyword().toFlagValue()) != 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c744a0c28996a33dbac4054549799f3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "commitAfterChange": "99aa173e65435610dfe4b542988d65ff8c2f55f2", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int INSIDE_ENDORSED_DIRS = 12;", "-\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\textdirsNames = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\tsourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH),", "-\t\tclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList extdirsClasspaths = null;", "+\tArrayList endorsedDirClasspath = null;", "-\t\t\t\t\tif (extdirsNames.size() > 0) {", "+\t\t\t\t\tif (extdirsClasspaths != null) {", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtdirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-endorseddirs\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (endorsedDirClasspath != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tMain.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_ENDORSED_DIRS;", "-\t\t\t\t", "-\t\t\t\tif (currentArg.equals(\"-sourcepath\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (sourcepathClasspaths.size() > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateSourcepath\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_SOURCE_PATH;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-extdirs\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (extdirsNames.size() > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tMain.bind(\"configure.duplicateExtdirs\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_EXT_DIRS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "+\t\t\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\t\t\textdirsNames.add(tokenizer.nextToken());", "-\t\t\t\tif (extdirsNames.size() == 0) // empty entry", "-\t\t\t\t\textdirsNames.add(\"\"); //$NON-NLS-1$", "+\t\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_ENDORSED_DIRS :", "+\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\tendorsedDirClasspath = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t\t\twhile (tokenizer.hasMoreTokens())", "+\t\t\t\t\tendorsedDirClasspath.add(tokenizer.nextToken());", "-\t * Feed extdirsNames according to:", "+\t * Feed endorsedDirClasspath according to:", "-\tif (extdirsNames.size() == 0) {", "+\tif (extdirsClasspaths == null) {", "+\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\textdirsNames.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "+\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/ext\"); //$NON-NLS-1$", "-\t\t\t\textdirsNames.add(tokenizer.nextToken());", "+\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\tif (extdirsNames.size() != 0) {", "-\t\tFile[] directoriesToCheck = new File[extdirsNames.size()];", "+\tif (extdirsClasspaths.size() != 0) {", "+\t\tFile[] directoriesToCheck = new File[extdirsClasspaths.size()];", "-\t\t\tdirectoriesToCheck[i] = new File((String) extdirsNames.get(i));", "+\t\t\tdirectoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));", "+\t\textdirsClasspaths.clear();", "+\t/*", "+\t * Feed endorsedDirClasspath according to:", "+\t * - -endorseddirs first if present;", "+\t * - else java.endorsed.dirs if defined;", "+\t * - else default extensions directory for the platform. (/lib/endorsed)", "+\t */", "+\tif (endorsedDirClasspath == null) {", "+\t\tendorsedDirClasspath = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\tString endorsedDirsStr = System.getProperty(\"java.endorsed.dirs\"); //$NON-NLS-1$", "+\t\tif (endorsedDirsStr == null) {", "+\t\t\textdirsClasspaths.add(javaHome.getAbsolutePath() + \"/lib/endorsed\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(endorsedDirsStr, File.pathSeparator);", "+\t\t\twhile (tokenizer.hasMoreTokens()) ", "+\t\t\t\tendorsedDirClasspath.add(tokenizer.nextToken());", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t * Feed extdirsClasspath with the entries found into the directories listed by", "+\t * extdirsNames.", "+\t */", "+\tif (endorsedDirClasspath.size() != 0) {", "+\t\tFile[] directoriesToCheck = new File[endorsedDirClasspath.size()];", "+\t\tfor (int i = 0; i < directoriesToCheck.length; i++) ", "+\t\t\tdirectoriesToCheck[i] = new File((String) endorsedDirClasspath.get(i));", "+\t\tendorsedDirClasspath.clear();", "+\t\tFile[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);", "+\t\tif (endorsedDirsJars != null) {", "+\t\t\tfor (int i = 0, max = endorsedDirsJars.length; i < max; i++) {", "+\t\t\t\tFile[] current = endorsedDirsJars[i];", "+\t\t\t\tif (current != null) {", "+\t\t\t\t\tfor (int j = 0, max2 = current.length; j < max2; j++) {", "+\t\t\t\t\t\tFileSystem.Classpath classpath = ", "+\t\t\t\t\t\t\tFileSystem.getClasspath(", "+\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "+\t\t\t\t\t\t\t\t\tnull, null); ", "+\t\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\t\tendorsedDirClasspath.add(classpath);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (directoriesToCheck[i].isFile()) {", "+\t\t\t\t\tthis.logger.logIncorrectEndorsedDirsEntry(directoriesToCheck[i].getAbsolutePath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tbootclasspaths.addAll(endorsedDirClasspath);", "+"]}], "num": 2569}
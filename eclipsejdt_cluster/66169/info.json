{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dd75efbb3626b4f35173fefdc18e458", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8197234fd5437ad9b9d2c190d0ba53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": "     public void test115()", "signatureAfterChange": "     public void test115()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"M cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "-\t\t\t\"\t                            ^^^\\n\" + ", "-\t\t\t\"The method baz() is undefined for the type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "-\t\t\t\"\t                                  ^\\n\" + ", "-\t\t\t\"s cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\t@Annot(foo = T.class, bar = s)\\n\" + ", "-\t\t\t\"\t             ^^^^^^^\\n\" + ", "-\t\t\t\"Illegal class literal for the type parameter T\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\t<T> T foo(T t, String s) {\\n\" + ", "-\t\t\t\"\t                      ^\\n\" + ", "-\t\t\t\"The parameter s is hiding a field from type X\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+    \t\t\"\tClass foo();\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "+    \t\t\"\t             ^\\n\" + ", "+    \t\t\"M cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "+    \t\t\"\t                            ^^^\\n\" + ", "+    \t\t\"The method baz() is undefined for the type X\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+    \t\t\"\t@Annot(foo = M.class, bar = baz()+s)\\n\" + ", "+    \t\t\"\t                                  ^\\n\" + ", "+    \t\t\"s cannot be resolved\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. ERROR in X.java (at line 11)\\n\" + ", "+    \t\t\"\t@Annot(foo = T.class, bar = s)\\n\" + ", "+    \t\t\"\t             ^^^^^^^\\n\" + ", "+    \t\t\"Illegal class literal for the type parameter T\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+    \t\t\"\t<T> T foo(T t, String s) {\\n\" + ", "+    \t\t\"\t                      ^\\n\" + ", "+    \t\t\"The parameter s is hiding a field from type X\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ca0f08bc0036cb75e3378783653f12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "afd9d4680c771ea3305bd1c2231ace193ccd313f", "commitAfterChange": "b403420c651fc8995a4c44cff2ecebab69cc0fa2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public void test024() throws JavaModelException", "signatureAfterChange": "  public void test024() throws JavaModelException", "diff": ["+\t\t\"/**\\n\" + ", "+\t\t\" * Completion after: @see BasicTestTextIns\\n\" + ", "+\t\t\" */\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\t/**\\n\" + ", "-\t\t\"\t * Completion after: java.la\\n\" + ", "-\t\t\"\t */\\n\" + ", "-\t\t\"\tpublic void foo() throws InterruptedException {\\n\" + ", "-\t\t\"\t}\\n\" + ", "+\t\t\"\tpublic void foo() {}\\n\" + ", "-\tcompleteInJavadoc(\"/Completion/src/javadoc/text/BasicTestTextIns.java\", source, true, \"java.la\");", "+\tcompleteInJavadoc(\"/Completion/src/javadoc/text/BasicTestTextIns.java\", source, true, \"BasicTestTextIns\");", "-\t\t\"java.lang[PACKAGE_REF]{java.lang, java.lang, null, null, null, \"+this.positions+\"20}\"", "+\t\t\"BasicTestTextIns[JAVADOC_TYPE_REF]{{@link BasicTestTextIns }, javadoc.text, Ljavadoc.text.BasicTestTextIns;, null, null, \"+this.positions+R_DICENUNRIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[TYPE_REF]{BasicTestTextIns, javadoc.text, Ljavadoc.text.BasicTestTextIns;, null, null, \"+this.positions+R_DICENUNR+\"}\""]}], "num": 66169}
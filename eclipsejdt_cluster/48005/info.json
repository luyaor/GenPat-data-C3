{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9ed190a546be377c35256897b39fa0e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea3d91e300f9eebde5317f8279e9cdd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "ea07bf5f313abc361de8bf9f86f0f213eade86cf", "commitAfterChange": "26bbc0f1d79a90c550f0bbb95cc6eeae2aa4e3bf", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tif (affectedProjects.length == 1) {", "+\t\t\tIClasspathContainer container = respectiveContainers[0];", "+\t\t\tif (container != null) {", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tIJavaProject project = affectedProjects[0];", "+\t\t\t\tIClasspathContainer existingCointainer = manager.containerGet(project, containerPath);", "+\t\t\t\tif (existingCointainer == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) {", "+\t\t\t\t\tmanager.containerBeingInitializedPut(project, containerPath, container);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf95577445459e70bce620d457826c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d3d6e8a120fcc21d2141655c16c3f72a3fe7aa82", "commitAfterChange": "a914eaa80cfee2f1a5138d665998598bc293ae8e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["+\t\t\tif (infCtx == null && variableArity && parameters.length == arguments.length) { // re-check", "+\t\t\t\tTypeBinding lastParam = parameters[parameters.length-1];", "+\t\t\t\tExpression lastArg = arguments[arguments.length-1];", "+\t\t\t\tif (lastArg.isCompatibleWith(lastParam, null)) {", "+\t\t\t\t\tvariableArity = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\t\t\t\t\tif (!improvedBinding.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tinnerContext.reportInvalidInvocation(innerInvocation, improvedBinding);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t// TODO need to report invalidMethod if !improvedBinding.isValidBinding() ?"]}], "num": 48005}
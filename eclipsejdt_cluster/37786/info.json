{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fd884a0511d273abbabf1ced9bf20d9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a6711da79d952de90a9b938c3622b64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4e854a19e9e9ebd789e2214910ea2619bcb51ddb", "commitAfterChange": "31be6e8d42cb659b279825ea1e93bdb14b71a1ce", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tboolean hierarchyContainsAbstractClasses = false;\r", "-\t\t\tif (currentType.isAbstract()) hierarchyContainsAbstractClasses = true;\r", "-\t\t\tif (matchingMethod == null && hierarchyContainsAbstractClasses){\r", "+\t\t\tif (matchingMethod == null){\r", "-\t\t\tif (hierarchyContainsAbstractClasses){\r", "-\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\t\t}\r", "+\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "+\r", "-\t\t\tif (hierarchyContainsAbstractClasses){\r", "-\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\t\t}\r", "+\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\t\t\tif (interfaceMethod != null) return interfaceMethod;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d65900dae62aa732dc03e23f32ebbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c6eaf8522a1a36af9ad6ac5cdc9ead859016f6c5", "commitAfterChange": "4e854a19e9e9ebd789e2214910ea2619bcb51ddb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tpublic MethodBinding findDefaultAbstractMethod(\r \t\tReferenceBinding receiverType, \r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite,\r \t\tReferenceBinding classHierarchyStart,\r \t\tMethodBinding matchingMethod,\r \t\tObjectVector found)", "signatureAfterChange": "\r \tpublic MethodBinding findDefaultAbstractMethod(\r \t\tReferenceBinding receiverType, \r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite,\r \t\tReferenceBinding classHierarchyStart,\r \t\tMethodBinding matchingMethod,\r \t\tObjectVector found)", "diff": ["-\t\t\t\r", "-\t\t\tReferenceBinding currentType = classHierarchyStart;\r", "-\t\t\tfound.removeAll();\r", "-\t\t\twhile (currentType != null){\r", "-\t\t\t\tif (currentType.isAbstract()) matchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);\r", "-\t\t\t\tcurrentType = currentType.superclass();\r", "-\t\t\t}\r", "+\r", "+\t\tint startFoundSize = found.size;\r", "+\t\t\r", "+\t\tReferenceBinding currentType = classHierarchyStart;\r", "+\t\twhile (currentType != null){\r", "+\t\t\tif (currentType.isAbstract()) matchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t}\r", "-\t\tif (foundSize == 0) {\r", "-\t\t\tif (matchingMethod != null) compilationUnitScope().recordTypeReferences(matchingMethod.thrownExceptions);\r", "-\t\t\treturn matchingMethod; // may be null - have not checked arg types or visibility\r", "+\t\tif (foundSize == startFoundSize) {\r", "+\t\t\tif (matchingMethod != null) return matchingMethod;\r", "+\t\t\treturn null; \r", "-\t\tMethodBinding[] candidates = new MethodBinding[foundSize];\r", "+\t\tMethodBinding[] candidates = new MethodBinding[foundSize-startFoundSize];\r", "-\t\tfor (int i = 0; i < foundSize; i++) {\r", "+\t\tfor (int i = startFoundSize; i < foundSize; i++) {\r"]}], "num": 37786}
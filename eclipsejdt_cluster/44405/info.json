{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a311231f754457627f0fc7d709fa5f24", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1451467d66ac9e953d37bad9e0781594", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic void resetSecondaryTypesCache(String path)", "signatureAfterChange": " \tpublic void secondaryTypeAdding(String path, char[] key)", "diff": ["-\t */", "-\tpublic void resetSecondaryTypesCache(String path) {", "-\t\tif (VERBOSE) {", "-\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.resetSecondaryTypePaths(\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(path);", "-\t\t\tbuffer.append(')');", "-\t\t\tUtil.verbose(buffer.toString());", "-\t\t}", "-\t\tIWorkspaceRoot wRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tIResource resource = wRoot.findMember(path);", "-\t\tif (resource != null) {", "-\t\t\tPerProjectInfo projectInfo = getPerProjectInfo(resource.getProject(), false);", "-\t\t\tif (projectInfo != null) {", "-\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\tUtil.verbose(\"-> reset cache for project: \"+resource.getProject().getName()); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tif (projectInfo.secondaryTypes != null) {", "-\t\t\t\t\tObject dirty = projectInfo.secondaryTypes.get(DIRTY_CACHE);", "-\t\t\t\t\tif (dirty == null) {", "-\t\t\t\t\t\tprojectInfo.secondaryTypes.put(DIRTY_CACHE, resource);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tHashSet resources = (dirty instanceof HashSet) ? (HashSet) dirty : new HashSet(3);", "-\t\t\t\t\t\tresources.add(resource);", "-\t\t\t\t\t\tprojectInfo.secondaryTypes.put(DIRTY_CACHE, resource);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tpublic void secondaryTypeAdding(String path, char[] key) {", "+\t\tif (VERBOSE) {", "+\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.addSecondaryType(\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(path);", "+\t\t\tbuffer.append(',');", "+\t\t\tbuffer.append('[');", "+\t\t\tbuffer.append(new String(key));", "+\t\t\tbuffer.append(']');", "+\t\t\tbuffer.append(')');", "+\t\t\tUtil.verbose(buffer.toString());", "+\t\t}", "+\t\tIWorkspaceRoot wRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\tIResource resource = wRoot.findMember(path);", "+\t\tif (resource != null) {", "+\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(path) && resource.getType() == IResource.FILE) {", "+\t\t\t\tIProject project = resource.getProject();", "+\t\t\t\ttry {", "+\t\t\t\t\tPerProjectInfo projectInfo = getPerProjectInfoCheckExistence(project);", "+\t\t\t\t\t// Get or create map to cache secondary types while indexing (can be not synchronized as indexing insure a non-concurrent usage)", "+\t\t\t\t\tHashMap indexedSecondaryTypes = null;", "+\t\t\t\t\tif (projectInfo.secondaryTypes == null) {", "+\t\t\t\t\t\tprojectInfo.secondaryTypes = new Hashtable(3);", "+\t\t\t\t\t\tindexedSecondaryTypes = new HashMap(3);", "+\t\t\t\t\t\tprojectInfo.secondaryTypes.put(INDEXED_SECONDARY_TYPES, indexedSecondaryTypes);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tindexedSecondaryTypes = (HashMap) projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);", "+\t\t\t\t\t\tif (indexedSecondaryTypes == null) {", "+\t\t\t\t\t\t\tindexedSecondaryTypes = new HashMap(3);", "+\t\t\t\t\t\t\tprojectInfo.secondaryTypes.put(INDEXED_SECONDARY_TYPES, indexedSecondaryTypes);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// Store the secondary type in temporary cache (these are just handles => no problem to create it now...)", "+\t\t\t\t\tHashMap allTypes = (HashMap) indexedSecondaryTypes.get(resource);", "+\t\t\t\t\tif (allTypes == null) {", "+\t\t\t\t\t\tallTypes = new HashMap(3);", "+\t\t\t\t\t\tindexedSecondaryTypes.put(resource, allTypes);", "+\t\t\t\t\t}", "+\t\t\t\t\tICompilationUnit unit = JavaModelManager.createCompilationUnitFrom((IFile)resource, null);", "+\t\t\t\t\tif (unit != null) {", "+\t\t\t\t\t\tchar[][] names = CharOperation.splitOn('/', key);", "+\t\t\t\t\t\tString typeName = new String(names[0]);", "+\t\t\t\t\t\tString packName = new String(names[1]);", "+\t\t\t\t\t\tHashMap packageTypes = (HashMap) allTypes.get(packName);", "+\t\t\t\t\t\tif (packageTypes == null) {", "+\t\t\t\t\t\t\tpackageTypes = new HashMap(3);", "+\t\t\t\t\t\t\tallTypes.put(packName, packageTypes);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpackageTypes.put(typeName, unit.getType(typeName));", "+\t\t\t\t\t}", "+\t\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\t\tUtil.verbose(\"\t- indexing cache:\"); //$NON-NLS-1$", "+\t\t\t\t\t\tIterator keys = indexedSecondaryTypes.keySet().iterator();", "+\t\t\t\t\t\twhile (keys.hasNext()) {", "+\t\t\t\t\t\t\tIFile file = (IFile) keys.next();", "+\t\t\t\t\t\t\tUtil.verbose(\"\t\t+ \"+file.getFullPath()+':'+indexedSecondaryTypes.get(file) ); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcatch (JavaModelException jme) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8623183dd9b347a52193c77dbf717a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void removeFromSecondaryTypesCache(IFile file)", "signatureAfterChange": " \tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache)", "diff": ["-\t */", "-\tpublic void removeFromSecondaryTypesCache(IFile file) {", "-\t\tif (VERBOSE) {", "-\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.removeSecondaryTypePaths(\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(file.getName());", "-\t\t\tbuffer.append(')');", "-\t\t\tUtil.verbose(buffer.toString());", "-\t\t}", "-\t\tif (file != null) {", "-\t\t\tPerProjectInfo projectInfo = getPerProjectInfo(file.getProject(), false);", "-\t\t\tif (projectInfo != null && projectInfo.secondaryTypes != null) {", "-\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\tUtil.verbose(\"-> remove file from cache of project: \"+file.getProject().getName()); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tIterator packages = projectInfo.secondaryTypes.keySet().iterator();", "-\t\t\t\twhile (packages.hasNext()) {", "-\t\t\t\t\tString packName = (String) packages.next();", "-\t\t\t\t\tObject object = projectInfo.secondaryTypes.get(packName);", "-\t\t\t\t\tif (object instanceof HashMap) {", "-\t\t\t\t\t\tHashMap types = (HashMap) object;", "-\t\t\t\t\t\tIterator names = types.keySet().iterator();", "-\t\t\t\t\t\twhile (names.hasNext()) {", "-\t\t\t\t\t\t\tString typeName = (String) names.next();", "-\t\t\t\t\t\t\tIType type = (IType) types.get(typeName);", "-\t\t\t\t\t\t\tif (file.equals(type.getResource())) {", "-\t\t\t\t\t\t\t\ttypes.remove(typeName);", "-\t\t\t\t\t\t\t\tif (types.size() == 0) {", "-\t\t\t\t\t\t\t\t\tprojectInfo.secondaryTypes.remove(packName);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tpublic void secondaryTypesRemoving(IFile file, boolean cleanIndexCache) {", "+\t\tif (VERBOSE) {", "+\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.removeFromSecondaryTypesCache(\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(file.getName());", "+\t\t\tbuffer.append(')');", "+\t\t\tUtil.verbose(buffer.toString());", "+\t\t}", "+\t\tif (file != null) {", "+\t\t\tPerProjectInfo projectInfo = getPerProjectInfo(file.getProject(), false);", "+\t\t\tif (projectInfo != null && projectInfo.secondaryTypes != null) {", "+\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\tUtil.verbose(\"-> remove file from cache of project: \"+file.getProject().getName()); //$NON-NLS-1$", "+\t\t\t\t}", "+", "+\t\t\t\t// Clean current cache", "+\t\t\t\tsecondaryTypesRemoving(projectInfo.secondaryTypes, file);", "+\t\t\t\t", "+\t\t\t\t// Clean indexing cache if necessary", "+\t\t\t\tif (!cleanIndexCache) return;", "+\t\t\t\tHashMap indexingCache = (HashMap) projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);", "+\t\t\t\tif (indexingCache != null) {", "+\t\t\t\t\tSet keys = indexingCache.keySet();", "+\t\t\t\t\tint filesSize = keys.size(), filesCount = 0;", "+\t\t\t\t\tIFile[] removed = null;", "+\t\t\t\t\tIterator cachedFiles = keys.iterator();", "+\t\t\t\t\twhile (cachedFiles.hasNext()) {", "+\t\t\t\t\t\tIFile cachedFile = (IFile) cachedFiles.next();", "+\t\t\t\t\t\tif (file.equals(cachedFile)) {", "+\t\t\t\t\t\t\tif (removed == null) removed = new IFile[filesSize];", "+\t\t\t\t\t\t\tfilesSize--;", "+\t\t\t\t\t\t\tremoved[filesCount++] = cachedFile;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i=0; i<filesCount; i++) {", "+\t\t\t\t\t\tindexingCache.remove(removed[i]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 44405}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "796907fa8e87f3158ad92e89b8359840", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74596ded191f069160b551834721dbf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["+", "-\t\tif (selector == null)", "+", "+\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "+\t\tif (selector == null && notInJavadoc) {", "+\t\t}", "-\t\tif (receiverType.isInterface()) {", "-\t\t\tif(isCompletingDeclaration) {", "-\t\t\t\tfindIntefacesMethods(", "-\t\t\t\t\tselector,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed);", "-\t\t\t} else {", "-\t\t\t\tfindIntefacesMethods(", "-\t\t\t\t\tselector,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tnew ReferenceBinding[]{currentType},", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed);", "-\t\t\t}", "-\t\t\t", "-\t\t\tcurrentType = scope.getJavaLangObject();", "-\t\t} else {", "-\t\t\tif(isCompletingDeclaration){", "-\t\t\t\tfindIntefacesMethods(", "-\t\t\t\t\tselector,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\treceiverType,", "-\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmethodsFound,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed);", "+\t\tif (notInJavadoc) {", "+\t\t\tif (receiverType.isInterface()) {", "+\t\t\t\tif (isCompletingDeclaration) {", "+\t\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\t\tselector,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tcurrentType.superInterfaces(),", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\tisCompletingDeclaration,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t} else {", "+\t\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\t\tselector,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tnew ReferenceBinding[]{currentType},", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\tisCompletingDeclaration,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t}", "-\t\t\t\tcurrentType = receiverType.superclass();", "+\t\t\t\tcurrentType = scope.getJavaLangObject();", "+\t\t\t} else {", "+\t\t\t\tif (isCompletingDeclaration){", "+\t\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\t\tselector,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tcurrentType.superInterfaces(),", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmethodsFound,", "+\t\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\t\texactMatch,", "+\t\t\t\t\t\tisCompletingDeclaration,", "+\t\t\t\t\t\tinvocationSite,", "+\t\t\t\t\t\tinvocationScope,", "+\t\t\t\t\t\timplicitCall,", "+\t\t\t\t\t\tsuperCall,", "+\t\t\t\t\t\tcanBePrefixed);", "+\t\t\t\t\t", "+\t\t\t\t\tcurrentType = receiverType.superclass();", "+\t\t\t\t}", "-\t\t\tif(methods != null) {", "-\t\t\t\tif(isCompletingDeclaration){", "+\t\t\tif (methods != null) {", "+\t\t\t\tif (isCompletingDeclaration){", "-\t\t\tif(hasPotentialDefaultAbstractMethods && currentType.isAbstract()){", "-\t\t\t\tfindIntefacesMethods(", "+\t\t\tif (notInJavadoc && hasPotentialDefaultAbstractMethods && currentType.isAbstract()){", "+\t\t\t\tfindInterfacesMethods(", "-\t\t\tcurrentType = currentType.superclass();", "+\t\t\tcurrentType = notInJavadoc ? currentType.superclass() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af80606bdf34e84a9bbaeed70290ad99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78de2d4526f0918c678396086988a58ed90f5f38", "commitAfterChange": "d07b82d1d553a69664c0b667422af329ce329135", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tObjectVector found = null;\r", "+\t\tObjectVector found = new ObjectVector();\r", "+\t\tboolean relyOnDefaultAbstractMethods = environment().options.targetJDK < CompilerOptions.JDK1_2;\r", "-\t\t\t\tfound = new ObjectVector();\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = -1;\r", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tcurrentMethods = currentType.getMethods(selector);\r", "-\t\t\t\t\t\t\tif ((currentLength = currentMethods.length) == 1\r", "-\t\t\t\t\t\t\t\t&& matchingMethod == null\r", "-\t\t\t\t\t\t\t\t&& found == null) {\r", "-\t\t\t\t\t\t\t\tmatchingMethod = currentMethods[0];\r", "-\t\t\t\t\t\t\t} else if (currentLength > 0) {\r", "-\t\t\t\t\t\t\t\tif (found == null) {\r", "-\t\t\t\t\t\t\t\t\tfound = new ObjectVector();\r", "-\t\t\t\t\t\t\t\t\tif (matchingMethod != null)\r", "-\t\t\t\t\t\t\t\t\t\tfound.add(matchingMethod);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\t\t\t\t\tfound.add(currentMethods[f]);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\tmatchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);\r", "-\t\t\t//currentType = \r", "-\t\t\t//\t(matchingMethod == null && found == null) ? getJavaLangObject() : null;\r", "-\t\t\tif (currentLength == 1 && matchingMethod == null && found == null) {\r", "+\t\t\tif (currentLength == 1 && matchingMethod == null && found.size == 0) {\r", "-\t\t\t\tif (found == null) {\r", "-\t\t\t\t\tfound = new ObjectVector();\r", "+\t\t\t\tif (found.size == 0) {\r", "+\t\t\tif (!relyOnDefaultAbstractMethods && currentType.isAbstract()) {\r", "+\t\t\t\tmatchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);\r", "+\t\t\t}\r", "-\t\tif (found == null)\r", "+\t\tint foundSize = found.size;\r", "+\t\tif (foundSize == 0)\r", "-\t\tint foundSize = found.size;\r"]}], "num": 57253}
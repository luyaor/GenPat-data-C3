{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e24edeb17692cd708153d6d91059c1c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1984f26f8dbe21299c0943f0ea27d1de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tthis.receiverType = receiver.resolveType(scope);", "+\tthis.receiverType = this.receiver.resolveType(scope);", "+\t\tif (this.receiver.resolvedType instanceof ProblemReferenceBinding) {", "+\t\t\t// problem already got signaled on receiver, do not report secondary problem", "+\t\t\treturn null;", "+\t\t}", "-\tif (fieldType != null && ((this.bits & IsStrictlyAssigned) == 0)) {", "-\t\tfieldType = fieldType.capture(scope, this.sourceEnd);\t// perform capture conversion if read access", "+\tif (fieldType != null) {", "+\t\tif ((this.bits & IsStrictlyAssigned) == 0) {", "+\t\t\tfieldType = fieldType.capture(scope, this.sourceEnd);\t// perform capture conversion if read access", "+\t\t}", "+\t\tthis.resolvedType = fieldType;", "+\t\tif ((fieldType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\tscope.problemReporter().invalidType(this, fieldType);", "+\t\t\treturn null;", "+\t\t}\t", "-\treturn this.resolvedType = fieldType;", "+\treturn fieldType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac7a2662954220e59e9ff439e4af97e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\tif ((this.bits & IsStrictlyAssignedMASK) == 0) {", "-\t\t\t\t\t\t\t\tconstant = variable.constant();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tconstant = NotAConstant;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.resolvedType = variable.type;", "+\t\t\t\t\t\t\tTypeBinding fieldType = variable.type;", "+\t\t\t\t\t\t\tif ((this.bits & IsStrictlyAssignedMASK) == 0) {", "+\t\t\t\t\t\t\t\tconstant = variable.constant();", "+\t\t\t\t\t\t\t\tif (fieldType != null) ", "+\t\t\t\t\t\t\t\t\tfieldType = fieldType.capture(); // perform capture conversion if read access", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tconstant = NotAConstant;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn this.resolvedType = fieldType;", "-\t\t\t\t\t\treturn this.resolvedType = checkFieldAccess(scope);", "+\t\t\t\t\t\t// perform capture conversion if read access", "+\t\t\t\t\t\tTypeBinding fieldType = checkFieldAccess(scope);", "+\t\t\t\t\t\treturn this.resolvedType = ", "+\t\t\t\t\t\t\t(((this.bits & IsStrictlyAssignedMASK) == 0) ", "+\t\t\t\t\t\t\t\t? fieldType.capture()", "+\t\t\t\t\t\t\t\t: fieldType);"]}], "num": 58942}
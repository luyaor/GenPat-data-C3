{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f9f3175e6c349be3c58a9743c133d73", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c289d064cea0853b4f5e4022106880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java", "commitBeforeChange": "2eab698c606e3b17217602bbc99837242c743a5a", "commitAfterChange": "6d141275326cf4caf65ec5dca68b565e2e9b1360", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tBinaryExpression cursor;", "-\tif ((cursor = this.referencesTable[0]).resolvedType.id !=", "-\t\t\tTypeIds.T_JavaLangString) {", "-\t\tcursor.left.checkNPE(currentScope, flowContext, flowInfo);", "-\t}", "-\tflowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "-\tfor (int i = 0, end = this.arity; i < end; i ++) {", "-\t\tif ((cursor = this.referencesTable[i]).resolvedType.id !=", "+\ttry {", "+\t\tBinaryExpression cursor;", "+\t\tif ((cursor = this.referencesTable[0]).resolvedType.id !=", "-\t\t\tcursor.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\tcursor.left.checkNPE(currentScope, flowContext, flowInfo);", "-\t\tflowInfo = cursor.right.", "-\t\t\tanalyseCode(currentScope, flowContext, flowInfo).", "-\t\t\t\tunconditionalInits();", "+\t\tflowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tfor (int i = 0, end = this.arity; i < end; i ++) {", "+\t\t\tif ((cursor = this.referencesTable[i]).resolvedType.id !=", "+\t\t\t\t\tTypeIds.T_JavaLangString) {", "+\t\t\t\tcursor.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\t}", "+\t\t\tflowInfo = cursor.right.", "+\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).", "+\t\t\t\t\tunconditionalInits();", "+\t\t}", "+\t\tif (this.resolvedType.id != TypeIds.T_JavaLangString) {", "+\t\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t}", "+\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t} finally {", "+\t\t// account for exception possibly thrown by arithmetics", "+\t\tflowContext.recordAbruptExit();", "-\tif (this.resolvedType.id != TypeIds.T_JavaLangString) {", "-\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "-\t}", "-\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fb8a882899e67377ee5eb96a41c4b00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tBinaryExpression cursor;", "-\tif ((cursor = this.referencesTable[0]).resolvedType.id !=", "-\t\t\tTypeIds.T_JavaLangString) {", "-\t\tcursor.left.checkNPE(currentScope, flowContext, flowInfo);", "-\t}", "-\tflowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "-\tfor (int i = 0, end = this.arity; i < end; i ++) {", "-\t\tif ((cursor = this.referencesTable[i]).resolvedType.id !=", "+\ttry {", "+\t\tBinaryExpression cursor;", "+\t\tif ((cursor = this.referencesTable[0]).resolvedType.id !=", "-\t\t\tcursor.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\tcursor.left.checkNPE(currentScope, flowContext, flowInfo);", "-\t\tflowInfo = cursor.right.", "-\t\t\tanalyseCode(currentScope, flowContext, flowInfo).", "-\t\t\t\tunconditionalInits();", "+\t\tflowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tfor (int i = 0, end = this.arity; i < end; i ++) {", "+\t\t\tif ((cursor = this.referencesTable[i]).resolvedType.id !=", "+\t\t\t\t\tTypeIds.T_JavaLangString) {", "+\t\t\t\tcursor.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\t}", "+\t\t\tflowInfo = cursor.right.", "+\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).", "+\t\t\t\t\tunconditionalInits();", "+\t\t}", "+\t\tif (this.resolvedType.id != TypeIds.T_JavaLangString) {", "+\t\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t}", "+\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t} finally {", "+\t\t// account for exception possibly thrown by arithmetics", "+\t\tflowContext.recordAbruptExit();", "-\tif (this.resolvedType.id != TypeIds.T_JavaLangString) {", "-\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "-\t}", "-\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();"]}], "num": 31653}
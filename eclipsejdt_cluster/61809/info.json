{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7885b2efd45b80f3ae2f6faf0009824", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cebf81bfc2f0a64afa2a368dcea047d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "252534b1e3dad1831e3abff323be8258609f736d", "commitAfterChange": "e2f59df4da4b0717730e8b0f95dd08cfbb696924", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, \t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, \t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "diff": ["-\t\tint compatibilityLevel;", "-\t\tif ((compatibilityLevel = parameterCompatibilityLevel18(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {", "-\t\t\tif (compatibilityLevel == VARARGS_COMPATIBLE) {", "-\t\t\t\tTypeBinding varargsElementType = method.parameters[method.parameters.length - 1].leafComponentType();", "-\t\t\t\tif (varargsElementType instanceof ReferenceBinding) {", "-\t\t\t\t\tif (!((ReferenceBinding) varargsElementType).canBeSeenBy(this)) {", "-\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.VarargsElementTypeNotVisible);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif ((parameterCompatibilityLevel18(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a09398af27c656c8a05c3ff4187b3290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "3091564ff71d95ca83672941f8a4ec3464344683", "commitAfterChange": "ac6c2726bc9770d7575dff83ad9611f141165280", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "diff": ["+\t\t} else if (binding instanceof MethodBinding) {", "+\t\t\tMethodBinding methodBinding = (MethodBinding) binding;", "+\t\t\tif (!methodBinding.isStatic()) return;", "+\t\t\trefBinding = methodBinding.declaringClass;", "+\t\t// resolve and report", "+\t\tint level = resolveLevel(refBinding);", "+\t\tif (level >= INACCURATE_MATCH) {", "+\t\t\tmatchReportImportRef(", "+\t\t\t\timportRef, ", "+\t\t\t\tbinding, ", "+\t\t\t\tlocator.createImportHandle(importRef), ", "+\t\t\t\tlevel == ACCURATE_MATCH", "+\t\t\t\t\t? SearchMatch.A_ACCURATE", "+\t\t\t\t\t: SearchMatch.A_INACCURATE,", "+\t\t\t\tlocator);", "+\t\t}", "+\t\treturn;"]}], "num": 61809}
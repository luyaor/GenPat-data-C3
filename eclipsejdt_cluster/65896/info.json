{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "660cb5c1e31d73183719cba1befcdd62", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09c6b4c6e9d4c42b4c726dd00b27a2fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "diff": ["-\t\tString entryPathMsg = pathStartsWithProject ? path.removeFirstSegments(1).toString() : path.makeRelative().toString();", "+\t\tString entryPathMsg = pathStartsWithProject ? path.removeFirstSegments(1).makeRelative().toString() : path.toString();", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalVariablePath\", path.makeRelative().toString(), projectName));\t\t\t\t\t //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalVariablePath\", entryPathMsg, projectName));\t\t\t\t\t //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.makeRelative().toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.makeRelative().toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.toString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.makeRelative().toString(), projectName})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn  new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundSourceAttachment\", new String [] {sourceAttachment.toString(), path.toOSString(), projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundLibrary\", path.makeRelative().toString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t\tboolean isExternal = path.getDevice() != null || !workspaceRoot.getProject(path.segment(0)).exists();", "+\t\t\t\t\t\tif (isExternal) {", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundLibrary\", path.toOSString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundLibrary\", entryPathMsg, projectName)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryPath\", path.makeRelative().toString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalLibraryPath\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.makeRelative().segment(0).toString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.segment(0), projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.closedProject\", path.segment(0).toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.closedProject\", path.segment(0))); //$NON-NLS-1$", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.segment(0).toString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.unboundProject\", path.segment(0), projectName)); //$NON-NLS-1$", "-\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalProjectPath\", path.segment(0).toString(), projectName)); //$NON-NLS-1$", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.illegalProjectPath\", path.segment(0), projectName)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ec2fd63e54f2874539d86f63a08c10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "148d909d5d1bb379a215402c9ae6d0c2993ad9d1", "commitAfterChange": "918eef64ca6418a800e340287b8f92eb641467b8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic boolean visit(IfStatement ifStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(IfStatement ifStatement, BlockScope scope)", "diff": ["-\t\t\t\t\tif (elseStatement == null || this.preferences.insert_new_line_in_control_statements) {", "-\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tif (elseStatement != null && this.preferences.insert_new_line_in_control_statements) {", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\tif (elseStatement != null) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "-\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\tif (elseStatement != null) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "-\t\t\tthis.scribe.printTrailingComment();", "+\t\t\tif (this.preferences.insert_new_line_in_control_statements) {", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\tthis.scribe.printNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad91f09a0fdf1a1264ae2246e39b298b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tgenerateReadSequence(currentScope, codeStream);", "-\tif (this.lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\tif (this.lastFieldBinding.isStatic()){", "-\t\t\tcodeStream.getstatic(this.lastFieldBinding);", "+    FieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\tif (lastFieldBinding.isStatic()){", "+\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\tcodeStream.getfield(this.lastFieldBinding);", "+\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\tif (this.lastFieldBinding.isStatic()) {", "-\t\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.lastFieldBinding.type.id);", "+\t\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "-\t\tfieldStore(codeStream, this.lastFieldBinding, null, false);", "+\t\tfieldStore(codeStream, lastFieldBinding, null, false);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(this.lastFieldBinding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.lastFieldBinding);", "-\t\tif ((this.lastFieldBinding.type == LongBinding) || (this.lastFieldBinding.type == DoubleBinding)) {", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "+\t\tif ((lastFieldBinding.type == LongBinding) || (lastFieldBinding.type == DoubleBinding)) {", "-\t\t\tif (this.lastFieldBinding.isStatic()) {", "+\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\tif (this.lastFieldBinding.isStatic()) {", "+\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.lastFieldBinding.type.id);", "+\t\tcodeStream.sendOperator(postIncrement.operator, lastFieldBinding.type.id);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(this.lastFieldBinding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(lastFieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba0089ffef7c6dbd75d5f645bc16f1b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "c1214b6b7704c3bec1f1750c6983e09a52efaa01", "commitAfterChange": "a5f15775fe7fcb24ae5a0930116a996c10a2359a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\tif (parameter.isTypeVariable()) {", "-\t\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "-\t\t\t\t\t} else if (parameter.isArray() && parameter.getElementType().isTypeVariable()) {", "-\t\t\t\t\t\tint dimensions = parameter.getDimensions();", "-\t\t\t\t\t\tbuffer.append(parameter.getElementType().getQualifiedName());", "-\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "-\t\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer.append(parameter.getKey());", "-\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t}", "+\t\t\t\t\taddParameterKey(buffer, parameter);", "+\t\t\t\t\tbuffer.append(',');", "-\t\t\tthis.key = String.valueOf(buffer);", "+\t\t\tITypeBinding[] types = getTypeParameters();", "+\t\t\tif (types.length > 0) {", "+\t\t\t\tbuffer.append('<');", "+\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\t\tITypeBinding typeParameter = types[i];", "+\t\t\t\t\taddParameterKey(buffer, typeParameter);", "+\t\t\t\t\tITypeBinding[] bounds = ((TypeBinding) typeParameter).getTypeBounds();", "+\t\t\t\t\tfor (int j = 0, length = bounds.length; j < length; j++) {", "+\t\t\t\t\t\tITypeBinding bound = bounds[j];", "+\t\t\t\t\t\tbuffer.append(':');", "+\t\t\t\t\t\taddParameterKey(buffer, bound);", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t}", "+\t\t\t\tbuffer.append('>');", "+\t\t\t}", "+\t\t\tthis.key = buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33cd9b1fb441b18473ffb4c8488e886", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 111, "signatureBeforeChange": " \t \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems, Map unknownElements)", "signatureAfterChange": " \tprivate IClasspathEntry[] readFileEntries(Map unkwownElements)", "diff": ["-\t", "-\tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems, Map unknownElements) {", "-", "-\t\ttry {", "-\t\t\tString xmlClasspath = getSharedProperty(CLASSPATH_FILENAME);", "-\t\t\tif (xmlClasspath == null) {", "-\t\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\t\t}", "-\t\t\t\treturn null;", "-\t\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems, unknownElements);", "-\t\t} catch(CoreException e) {", "-\t\t\t// file does not exist (or not accessible)", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$", "-\t\treturn null;", "+\t */", "+\tprivate IClasspathEntry[] readFileEntries(Map unkwownElements) {", "+\t\ttry {", "+\t\t\treturn readFileEntriesWithException(unkwownElements);", "+\t\t} catch (CoreException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t} catch (AssertionFailedException e) {", "+\t\t\tUtil.log(e, \"Exception while reading \" + getPath().append(JavaProject.CLASSPATH_FILENAME)); //$NON-NLS-1$", "+\t\t\treturn JavaProject.INVALID_CLASSPATH;", "+\t\t}"]}], "num": 65896}
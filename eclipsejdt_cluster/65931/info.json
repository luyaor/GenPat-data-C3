{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "837b54ca0fe1fbe1adae34e56ba99c20", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05acae26066d8ca1ea980b0791394d5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "commitAfterChange": "0bbfe267fb7eaaa77628088e8cdbd841ddb40de5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": " \tpublic static Test suite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\treturn suite(evaluationTestClass, suiteName, 3);", "-\t}", "+\t\t// Init suite with class name", "+\t\tList tests = new ArrayList();", "+\t\tConstructor constructor = null;", "+\t\t\t// Get class constructor", "+\t\t\tconstructor = evaluationTestClass.getConstructor(paramTypes);", "+\t\t}", "+\t\tcatch (Exception e) {", "+\t\t\t// cannot get constructor, skip suite", "+\t\t\treturn suite;", "+\t\t}", "+", "+\t\t// Get all tests from \"test%\" methods", "+\t\tMethod[] methods = evaluationTestClass.getMethods();", "+\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "+\t\t\ttry {", "+\t\t\t\tif (methods[m].getModifiers() == 1 /* public */ &&", "+\t\t\t\t\tmethods[m].getName().startsWith(\"test\")) { //$NON-NLS-1$", "+\t\t\t\t\tString methName = methods[m].getName();", "+\t\t\t\t\tObject[] params = {methName};", "+\t\t\t\t\t// tests names subset", "+\t\t\t\t\tif (testsNames != null) {", "+\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "+\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(4))) {", "+\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// look for test number", "+\t\t\t\t\tif (methName.length()>4 && Character.isDigit(methName.charAt(4))) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t// get test number", "+\t\t\t\t\t\t\tint n = 4;", "+\t\t\t\t\t\t\twhile (methName.charAt(n) == '0') n++;", "+\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(n));", "+\t\t\t\t\t\t\t// tests numbers subset", "+\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "+\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// tests range subset", "+\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "+\t\t\t\t\t// no subset, add all tests", "+\t\t\t\t\tif (testsNames==null && testsNumbers==null &&testsRange==null) {", "+\t\t\tcatch (Exception e) {", "+\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11393db92769e9a61974151d1361fe47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "955478e6d2220d787f88d27b5ca186d67f088e58", "commitAfterChange": "997a25bfb062d5e13ab988c44d8a015d4710ad9a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String suiteName)", "diff": ["-\t\t\t\t\tif (testsPrefix == null && testsNames == null && testsNumbers == null && testsRange == null) {", "+\t\t\t\t\tif (TESTS_PREFIX == null && TESTS_NAMES == null && TESTS_NUMBERS == null && TESTS_SEARCH == null) {", "-\t\t\t\t\tif (testsPrefix == null || methName.startsWith(testsPrefix)) {", "-\t\t\t\t\t\tint numStart = testsPrefix==null ? 4 /* test */ : testsPrefix.length();", "+\t\t\t\t\tif (TESTS_PREFIX == null || methName.startsWith(TESTS_PREFIX)) {", "+\t\t\t\t\t\tint numStart = TESTS_PREFIX==null ? 4 /* test */ : TESTS_PREFIX.length();", "-\t\t\t\t\t\tif (testsNames != null) {", "-\t\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "-\t\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(numStart))) {", "+\t\t\t\t\t\tif (TESTS_NAMES != null) {", "+\t\t\t\t\t\t\tfor (int i = 0, imax= TESTS_NAMES.length; i<imax; i++) {", "+\t\t\t\t\t\t\t\tif (TESTS_NAMES[i].equals(methName) || TESTS_NAMES[i].equals(methName.substring(numStart))) {", "-\t\t\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < TESTS_NUMBERS.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (TESTS_NUMBERS[i] == num) {", "-\t\t\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\tif (TESTS_SEARCH != null && TESTS_SEARCH.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\t\t\tif ((TESTS_SEARCH[0]==-1 || num>=TESTS_SEARCH[0]) && (TESTS_SEARCH[1]==-1 || num<=TESTS_SEARCH[1])) {", "-\t\t\t\t\t\tif (testsNames==null && testsNumbers==null && testsRange==null) {", "+\t\t\t\t\t\tif (TESTS_NAMES==null && TESTS_NUMBERS==null && TESTS_SEARCH==null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1155b66e3d0dbb98b52c87ee09103c37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "f46971551de7cadf79c08b3a267e0e31fff38966", "commitAfterChange": "95b456d990042a302b0a4bdab064cc46834f65be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "signatureAfterChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["-\tSet testNames = new HashSet();", "+\tList testNames = new ArrayList();", "+\tList onlyNames = new ArrayList();", "+", "+\t// Build test names list", "+\tfinal int methodPrefixLength = METHOD_PREFIX.length();", "-\t\ttry {", "-\t\t\tint modifiers = methods[m].getModifiers();", "-\t\t\tif (Flags.isPublic(modifiers) && !Flags.isStatic(modifiers) &&", "-\t\t\t\tmethods[m].getName().startsWith(\"test\")) {", "-\t\t\t\tString methName = methods[m].getName();", "-\t\t\t\tObject[] params = {methName};", "+\t\tint modifiers = methods[m].getModifiers();", "+\t\tif (Flags.isPublic(modifiers) && !Flags.isStatic(modifiers)) {", "+\t\t\tString methName = methods[m].getName();", "+\t\t\tif (ONLY_SUFFIX != null && methName.endsWith(ONLY_SUFFIX)) {", "+\t\t\t\tif (!onlyNames.contains(methName)) {", "+\t\t\t\t\tonlyNames.add(methName);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (methName.startsWith(METHOD_PREFIX)) {", "-\t\t\t\t\tif (testNames.add(methName))", "-\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\tif (!testNames.contains(methName)) {", "+\t\t\t\t\t\ttestNames.add(methName);", "+\t\t\t\t\t}", "-\t\t\t\t\tint numStart = TESTS_PREFIX==null ? 4 /* test */ : TESTS_PREFIX.length();", "+\t\t\t\t\tint numStart = TESTS_PREFIX==null ? methodPrefixLength : TESTS_PREFIX.length();", "-//\t\t\t\t\t\t\tif (TESTS_NAMES[i].equals(methName) || TESTS_NAMES[i].equals(methName.substring(numStart))) {", "-\t\t\t\t\t\t\t\tif (testNames.add(methName))", "-\t\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tif (!testNames.contains(methName)) {", "+\t\t\t\t\t\t\t\t\ttestNames.add(methName);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\tif (testNames.add(methName))", "-\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\tif (!testNames.contains(methName)) {", "+\t\t\t\t\t\t\ttestNames.add(methName);", "+\t\t\t\t\t\t}", "+\t}", "+", "+\t// Add corresponding tests", "+\tList names = onlyNames.size() > 0 ? onlyNames : testNames;", "+\tIterator iterator = names.iterator();", "+\twhile (iterator.hasNext()) {", "+\t\tString testName = (String) iterator.next();", "+\t\ttry {", "+\t\t\ttests.add(constructor.newInstance(new Object[] { testName } ));", "+\t\t}", "-\t\t\tSystem.out.println(\"Method \"+methods[m]+\" removed from suite due to exception: \"+e.getMessage());", "+\t\t\tSystem.err.println(\"Method \"+testName+\" removed from suite due to exception: \"+e.getMessage());"]}], "num": 65931}
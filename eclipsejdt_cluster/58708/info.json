{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bc89279602f1e9c3ab7d0f0032d6e36", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39dac77403180c47d6ede50528403b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "924bb53fdc2b8abef6daacf4b8eb0fd3e9ce7fd5", "commitAfterChange": "a6002c5b8e946e1be020c41b3eb8e042f8637f31", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": " public String getAttachedJavadoc(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException", "signatureAfterChange": " public String getAttachedJavadoc(IProgressMonitor monitor, String defaultEncoding) throws JavaModelException", "diff": ["+\treturn extractJavadoc(declaringType, contents);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeca630a4def86f354a3d372717a19ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "0abc087f459f97c1cd1bf94e70ce2fce01e94d86", "commitAfterChange": "69d9dc418b17dbc4faaf6413a8492947423155e4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\tif (isLocal()) {", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t", "-\t\t\t\t// declaring method or type", "-\t\t\t\tSourceTypeBinding sourceBinding = (SourceTypeBinding) this.binding; // per construction, a local type can only be defined in source", "-\t\t\t\tClassScope scope = sourceBinding.scope;", "-\t\t\t\tClassScope classScope = scope.enclosingClassScope();", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceContext = classScope.referenceContext;", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding internalBinding = referenceContext.binding;", "-\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(internalBinding);", "-\t\t\t\tif (typeBinding != null) {", "-\t\t\t\t\tbuffer.append(typeBinding.getKey());", "-\t\t\t\t}", "-\t\t\t\tbuffer.append('$');", "-\t\t\t\tCompilationUnitScope compilationUnitScope = scope.compilationUnitScope();", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = compilationUnitScope.referenceContext;", "-\t\t\t\tLocalTypeBinding[] localTypeBindings = compilationUnitDeclaration.localTypes;", "-\t\t\t\tfor (int i = 0, max = compilationUnitDeclaration.localTypeCount; i < max; i++) {", "-\t\t\t\t\tif (localTypeBindings[i] == sourceBinding) {", "-\t\t\t\t\t\tbuffer.append(i+1);", "-\t\t\t\t\t\tif (!isAnonymous()) {", "-\t\t\t\t\t\t\tbuffer.append('$');", "-\t\t\t\t\t\t\tbuffer.append(sourceBinding.sourceName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tthis.key = buffer.toString();", "-\t\t\t} else {", "-\t\t\t\tif (this.binding.isTypeVariable()) {", "-\t\t\t\t\treturn getTypeVariableKey(true/*include declaring element*/);", "-\t\t\t\t} else if (this.binding.isWildcard()) {", "-\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) binding;", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding bound = wildcardBinding.bound;", "-\t\t\t\t\tif (bound != null) {", "-\t\t\t\t\t\treturn this.resolver.getTypeBinding(bound).getKey();", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new String(wildcardBinding.genericTypeSignature());", "-\t\t\t\t} else if (this.isClass()", "-\t\t\t\t\t\t|| this.isInterface()", "-\t\t\t\t\t\t|| this.isEnum()", "-\t\t\t\t\t\t|| this.isAnnotation()) {", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\tchar[] qualifiedSourceName = this.binding.qualifiedSourceName();", "-\t\t\t\t\tif (qualifiedSourceName != null) {", "-\t\t\t\t\t\tCharOperation.replace(qualifiedSourceName, '.', '$');", "-\t\t\t\t\t\tbuffer", "-\t\t\t\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t\t\t\t.append('/')", "-\t\t\t\t\t\t\t.append(qualifiedSourceName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer", "-\t\t\t\t\t\t\t.append(getPackage().getName())", "-\t\t\t\t\t\t\t.append('/')", "-\t\t\t\t\t\t\t.append(getName());", "-\t\t\t\t\t}", "-\t\t\t\t\tITypeBinding[] typeArgs = this.getTypeArguments();", "-\t\t\t\t\tfinal int typeArgsLength = typeArgs.length;", "-\t\t\t\t\tif (typeArgsLength != 0) {", "-\t\t\t\t\t\tbuffer.append('<');", "-\t\t\t\t\t\tfor (int i = 0; i < typeArgsLength; i++) {", "-\t\t\t\t\t\t\tbuffer.append(typeArgs[i].getKey());", "-\t\t\t\t\t\t\tif (i != typeArgsLength - 1) {", "-\t\t\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbuffer.append('>');", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t} else if (this.binding.isArrayType()) {", "-\t\t\t\t\tif (this.getElementType() != null) {", "-\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(this.getElementType().getKey());", "-\t\t\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "-\t\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "-\t\t\t\t\t\t\tbuffer.append('[').append(']');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.key = String.valueOf(buffer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// this is a primitive type", "-\t\t\t\t\tthis.key = getName();", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tappendKey(buffer);", "+\t\t\tthis.key = buffer.toString();"]}], "num": 58708}
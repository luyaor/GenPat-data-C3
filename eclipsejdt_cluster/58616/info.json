{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d7ce1fe47cf64e770ef317e74dd8870", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761da38c45f325132b5aad70c4990fcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "7daed772befc71241cd5718015cdd1d8faa642ca", "commitAfterChange": "bf0f3c0ee6c28cc3716705a3315c5622fc576ce2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "signatureAfterChange": " public void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "diff": ["-\t\tMatchLocator matchLocator = new MatchLocator((SearchPattern)searchPattern, detailLevel, resultCollector, scope);", "+\t\tMatchLocator matchLocator = ", "+\t\t\tnew MatchLocator(", "+\t\t\t\t(SearchPattern)searchPattern, ", "+\t\t\t\tdetailLevel, ", "+\t\t\t\tresultCollector, ", "+\t\t\t\tscope,", "+\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 95)", "+\t\t);", "-\t\t\tthis.workingCopies,", "-\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 95)", "+\t\t\tthis.workingCopies"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "994cf59fa26f9ea2702526295a5899ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "55fc1d09be22c3edd63ee3458e199979c3f77613", "commitAfterChange": "84e7ccc666453bf6300ee2ec41ee2751e7c7737b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal int packageMatchRule,  \t\tfinal char[] typeName, \t\tfinal int typeMatchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\tprogressMonitor.beginTask(Messages.engine_searching, 100); ", "+\t\t\t\tprogressMonitor.beginTask(Messages.engine_searching, 1000); ", "-\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 100));\t", "+\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 1000-copiesLength));\t", "+\t\t\t\t\tif (progressMonitor != null) {", "+\t\t\t\t\t\tif (progressMonitor.isCanceled()) throw new OperationCanceledException();", "+\t\t\t\t\t\tprogressMonitor.worked(1);", "+\t\t\t\t\t}"]}], "num": 58616}
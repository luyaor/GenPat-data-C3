{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63de4ab1eaa508c68eaf206f6106e58d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c9fbcd0f5adbaaf0d1136cfe5ab65f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "4f9f984270d6000da0e2dc0951db1b132b66a978", "commitAfterChange": "200095c0d9c6d112bfd96e39c5d0f4e03ab56754", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public int getModifiers()", "signatureAfterChange": " public int getModifiers()", "diff": ["+\tint modifiers;", "-\t\treturn this.innerInfo.getModifiers() | (this.accessFlags & ClassFileConstants.AccDeprecated);", "+\t\tmodifiers = this.innerInfo.getModifiers()", "+\t\t\t| (this.accessFlags & ClassFileConstants.AccDeprecated)", "+\t\t\t| (this.accessFlags & ClassFileConstants.AccSynthetic);", "+\t} else {", "+\t\tmodifiers = this.accessFlags;", "-\treturn this.accessFlags;", "+\treturn modifiers;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b25b277c3686570bb87a8a500715dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "510bca02ec1705cb49e8296894c2f20084ae432d", "commitAfterChange": "4b7339d0380d230f31bd3019b0bc7395f10d2215", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t\tString normalized(String originalValue)", "signatureAfterChange": "  \t\tString normalized(String originalValue)", "diff": ["+\t\t\tString result;", "-\t\t\t\treturn super.normalized(originalValue);", "-\t\t\tfinal int START = 0, KEEPING = 1, KEEPING_R = 2, SKIPING = 3, SKIPING_R = 4, END = 5, ERROR = 6;", "-\t\t\tint state = START, currentLineIndex = 0, currentCharIndex = 0, sourceLength;", "-\t\t\tchar currentChar = '\\0';", "-\t\t\tif (first <= 0)", "-\t\t\t\tstate = SKIPING;", "-\t\t\telse", "-\t\t\t\tstate = KEEPING;", "-\t\t\tStringBuffer normalizedValueBuffer = new StringBuffer(), source = new StringBuffer(", "-\t\t\t\t\toriginalValue);", "-\t\t\tsourceLength = source.length();", "-\t\t\twhile (state != END && state != ERROR) {", "-\t\t\t\tif (currentCharIndex < sourceLength) {", "-\t\t\t\t\tcurrentChar = source.charAt(currentCharIndex++);", "-\t\t\t\t\tswitch (currentChar) {", "-\t\t\t\t\tcase '\\r':", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tstate = KEEPING_R;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING:", "-\t\t\t\t\t\t\tstate = SKIPING_R;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '\\n':", "-\t\t\t\t\t\tcurrentLineIndex++;", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING_R:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tif (currentLineIndex == first) {", "-\t\t\t\t\t\t\t\tstate = SKIPING;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING_R:", "-\t\t\t\t\t\t\t// in effect, we tolerate too big first and number", "-\t\t\t\t\t\t\t// values", "-\t\t\t\t\t\t\tif (currentLineIndex >= first + number) {", "-\t\t\t\t\t\t\t\tif (currentCharIndex < sourceLength)", "-\t\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(source", "-\t\t\t\t\t\t\t\t\t\t\t.substring(currentCharIndex));", "-\t\t\t\t\t\t\t\tstate = END;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tswitch (state) {", "-\t\t\t\t\t\tcase KEEPING:", "-\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SKIPING:", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tstate = ERROR;", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t}", "-\t\t\t\t} ", "-\t\t\t\telse if (currentChar == '\\n')", "-\t\t\t\t\tstate = END;", "+\t\t\t\tresult = super.normalized(originalValue);", "+\t\t\telse {", "+\t\t\t\tfinal int START = 0, KEEPING = 1, KEEPING_R = 2, SKIPING = 3, SKIPING_R = 4, END = 5, ERROR = 6;", "+\t\t\t\tint state = START, currentLineIndex = 0, currentCharIndex = 0, sourceLength;", "+\t\t\t\tchar currentChar = '\\0';", "+\t\t\t\tif (first <= 0)", "+\t\t\t\t\tstate = SKIPING;", "-\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\tstate = KEEPING;", "+\t\t\t\tStringBuffer normalizedValueBuffer = new StringBuffer(), source = new StringBuffer(", "+\t\t\t\t\t\toriginalValue);", "+\t\t\t\tsourceLength = source.length();", "+\t\t\t\twhile (state != END && state != ERROR) {", "+\t\t\t\t\tif (currentCharIndex < sourceLength) {", "+\t\t\t\t\t\tcurrentChar = source.charAt(currentCharIndex++);", "+\t\t\t\t\t\tswitch (currentChar) {", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tstate = KEEPING_R;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING:", "+\t\t\t\t\t\t\t\tstate = SKIPING_R;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\t\tcurrentLineIndex++;", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING: // tolerate Linux line delimiters", "+\t\t\t\t\t\t\tcase KEEPING_R:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tif (currentLineIndex == first) {", "+\t\t\t\t\t\t\t\t\tstate = SKIPING;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING: // tolerate Linux line delimiters", "+\t\t\t\t\t\t\tcase SKIPING_R:", "+\t\t\t\t\t\t\t\t// in effect, we tolerate too big first and number", "+\t\t\t\t\t\t\t\t// values", "+\t\t\t\t\t\t\t\tif (currentLineIndex >= first + number) {", "+\t\t\t\t\t\t\t\t\tif (currentCharIndex < sourceLength)", "+\t\t\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(source", "+\t\t\t\t\t\t\t\t\t\t\t\t.substring(currentCharIndex));", "+\t\t\t\t\t\t\t\t\tstate = END;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tswitch (state) {", "+\t\t\t\t\t\t\tcase KEEPING:", "+\t\t\t\t\t\t\t\tnormalizedValueBuffer.append(currentChar);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SKIPING:", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t\t\t\t}", "+\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} ", "+\t\t\t\t\telse if (currentChar == '\\n')", "+\t\t\t\t\t\tstate = END;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tstate = ERROR;", "+\t\t\t\t}", "+\t\t\t\tif (state == ERROR)", "+\t\t\t\t\tnormalizedValueBuffer", "+\t\t\t\t\t\t\t.append(\"UNEXPECTED ERROR in LinesRangeNormalizer\");", "+\t\t\t\tresult = super.normalized(normalizedValueBuffer.toString());", "-\t\t\tif (state == ERROR)", "-\t\t\t\tnormalizedValueBuffer", "-\t\t\t\t\t\t.append(\"UNEXPECTED ERROR in LinesRangeNormalizer\");", "-\t\t\treturn super.normalized(normalizedValueBuffer.toString());", "+\t\t\treturn result;"]}], "num": 46494}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "273f43f55a772b5f92ccddeb09378582", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "195fe6548b3a2ff4958fbe22c6cb636b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "582314aebaa81c30307377892044ded507af1f74", "commitAfterChange": "c0ecc47cac9e40a73cc3ed5a5be93bbace7cb891", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t \tprivate void parseFullyQualifiedName()", "signatureAfterChange": " \t \tprivate void parseFullyQualifiedName()", "diff": ["-\t \t\tcase Scanner.WILDCARD:", "-\t\t\t \tchar[] source = this.scanner.getTokenSource();", "-\t\t\t \tif (source.length == 0) {", "-\t\t\t \t\tmalformedKey();", "-\t\t\t \t\treturn;", "-\t\t\t \t}", "-\t\t\t \tint kind = -1;", "-\t\t\t \tswitch (source[0]) {", "-\t\t\t\t \tcase '*':", "-\t\t\t\t \t\tkind = Wildcard.UNBOUND;", "-\t\t\t\t \t\tbreak;", "-\t\t\t\t \tcase '+':", "-\t\t\t\t \t\tkind = Wildcard.EXTENDS;", "-\t\t\t\t \t\tbreak;", "-\t\t\t\t \tcase '-':", "-\t\t\t\t \t\tkind = Wildcard.SUPER;", "-\t\t\t\t \t\tbreak;", "-\t\t\t \t}", "-\t\t\t \tif (kind == -1) {", "-\t\t\t \t\tmalformedKey();", "-\t\t\t \t\treturn;", "-\t\t\t \t}", "-\t\t\t \tif (kind != Wildcard.UNBOUND)", "-\t\t\t \t\tparseWildcardBound();", "-\t\t\t \tconsumeWildCard(kind);", "-\t\t\t \tthis.hasTypeName = false;", "-\t \t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d68263341e2b3ac6ecbabdb508edc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "ae43a440915bd6d7962491f9c0ab4d02295e6d83", "commitAfterChange": "9bf79c7ef87f9bb276696a699c24ee7886d82109", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateReturnBytecode(CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateReturnBytecode(CodeStream codeStream)", "diff": ["-\t\tif (expression == null) {", "-\t\t\tcodeStream.return_();", "-\t\t} else {", "-\t\t\tfinal int implicitConversion = expression.implicitConversion;", "-\t\t\tif ((implicitConversion & BOXING) != 0) {", "-\t\t\t\tcodeStream.areturn();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tint runtimeType = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4;", "-\t\t\tswitch (runtimeType) {", "-\t\t\t\tcase T_boolean :", "-\t\t\t\tcase T_int :", "-\t\t\t\t\tcodeStream.ireturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_float :", "-\t\t\t\t\tcodeStream.freturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_long :", "-\t\t\t\t\tcodeStream.lreturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcodeStream.dreturn();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tcodeStream.areturn();", "-\t\t\t}", "-\t\t}", "+\t\tcodeStream.generateReturnBytecode(this.expression);"]}], "num": 35354}
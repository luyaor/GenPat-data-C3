{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "630dd978a5620da8b37691ffefc1b861", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334e49acbfc2f48daffe41668e6a1bf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0751ac39c00c09c85644cc895a72b784f1c58a10", "commitAfterChange": "9b2482af5a0c03be9db45cc864fbf9313fd6c832", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "signatureAfterChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "diff": ["-\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\tSystem.out.println(\"JAVA MODEL - Canonicalizing \" + externalPath.toString()); //$NON-NLS-1$\r", "-\t\t}\r", "+//\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\tSystem.out.println(\"JAVA MODEL - Canonicalizing \" + externalPath.toString()); //$NON-NLS-1$\r", "+//\t\t}\r", "-\t\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (file system is case sensitive)\"); //$NON-NLS-1$\r", "-\t\t\t}\r", "+//\t\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (file system is case sensitive)\"); //$NON-NLS-1$\r", "+//\t\t\t}\r", "-\t\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (member of workspace)\"); //$NON-NLS-1$\r", "-\t\t\t}\r", "+//\t\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (member of workspace)\"); //$NON-NLS-1$\r", "+//\t\t\t}\r", "-\t\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (IOException)\"); //$NON-NLS-1$\r", "-\t\t\t}\r", "+//\t\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (IOException)\"); //$NON-NLS-1$\r", "+//\t\t\t}\r", "-\t\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is empty)\"); //$NON-NLS-1$\r", "-\t\t\t}\r", "+//\t\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is empty)\"); //$NON-NLS-1$\r", "+//\t\t\t}\r", "-\t\t\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is \" + canonicalPath.toString() + \")\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\t}\r", "+//\t\t\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is \" + canonicalPath.toString() + \")\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "+//\t\t\t\t}\r", "-\t\tif (JavaModelManager.VERBOSE) {\r", "-\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is \" + result.toString()); //$NON-NLS-1$\r", "-\t\t}\r", "+//\t\tif (JavaModelManager.VERBOSE) {\r", "+//\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is \" + result.toString()); //$NON-NLS-1$\r", "+//\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87980024749bc19bfb00569699bfac4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DiscardWorkingCopyOperation.java", "commitBeforeChange": "5b7577970cc1147a47fff02a981297149bac38c1", "commitAfterChange": "747a63a0a2a9b4e7029fd103555c522985364757", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tworkingCopy.close();", "-\t\tworkingCopy.closeBuffer();", "-\t\t", "-\t\t// if original element is not on classpath flush it from the cache ", "-\t\tIJavaElement originalElement = workingCopy.getOriginalElement();", "-\t\tif (!workingCopy.getParent().exists()) {", "-\t\t\t((CompilationUnit)originalElement).close();", "-\t\t}", "-\t\t", "-\t\t// remove working copy info from the JavaModelCache", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tmanager.removeInfoAndChildren(workingCopy);", "-", "-\t\t// remove working copy from the shared working copy cache if needed", "-\t\t", "-\t\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t\t// AND use the same buffer factory.", "-\t\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\t\tMap sharedWorkingCopies = manager.sharedWorkingCopies;", "-\t\t", "-\t\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(workingCopy.owner);", "-\t\tif (perFactoryWorkingCopies != null){", "-\t\t\tif (perFactoryWorkingCopies.remove(originalElement) != null", "-\t\t\t\t\t&& CompilationUnit.SHARED_WC_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + workingCopy.toStringWithAncestors());//$NON-NLS-1$", "-\t\t\t}", "-\t\t}"]}], "num": 49230}
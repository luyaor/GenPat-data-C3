{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "068be19f748596b3876528f9b70fc6f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9288ae0831ad1686dec241705c2c265f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Constant resolveCase( \t\tBlockScope scope, \t\tTypeBinding switchType, \t\tSwitchStatement switchStatement)", "signatureAfterChange": " \tpublic Constant resolveCase( \t\tBlockScope scope, \t\tTypeBinding switchExpressionType, \t\tSwitchStatement switchStatement)", "diff": ["+\t */", "-\t\tTypeBinding switchType,", "+\t\tTypeBinding switchExpressionType,", "-\t\t\treturn null;", "+\t\t\treturn NotAConstant;", "-\t\tif (caseType == null || switchType == null) return null;", "-\t\tif (constantExpression.isConstantValueOfTypeAssignableToType(caseType, switchType))", "-\t\t\treturn constantExpression.constant;", "-\t\tif (caseType.isCompatibleWith(switchType))", "-\t\t\treturn constantExpression.constant;", "-\t\tscope.problemReporter().typeMismatchError(caseType, switchType, constantExpression);", "-\t\treturn null;", "+\t\tif (caseType == null || switchExpressionType == null) return NotAConstant;", "+\t\tif (constantExpression.isConstantValueOfTypeAssignableToType(caseType, switchExpressionType)", "+\t\t\t\t|| caseType.isCompatibleWith(switchExpressionType)) {", "+\t\t\tif (caseType.isEnum()) {", "+\t\t\t\tthis.isEnumConstant = true;", "+\t\t\t\tif (constantExpression instanceof NameReference", "+\t\t\t\t\t\t&& (constantExpression.bits & RestrictiveFlagMASK) == Binding.FIELD) {", "+\t\t\t\t\treturn Constant.fromValue(((NameReference)constantExpression).fieldBinding().id); // ordinal value", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\treturn constantExpression.constant;", "+\t\t\t}", "+\t\t}", "+\t\tscope.problemReporter().typeMismatchError(caseType, switchExpressionType, constantExpression);", "+\t\treturn NotAConstant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80e7ceee11ea445c50a3c986ecca642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes)", "signatureAfterChange": " private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse.jdt.core.ICompilationUnit cu, boolean includeLocalTypes)", "diff": ["-\tif (includeLocalTypes && parsedUnit.localTypes != null) {", "-\t\tHandleFactory factory = new HandleFactory();", "-\t\tHashSet existingElements = new HashSet(parsedUnit.localTypeCount);", "-\t\tHashMap knownScopes = new HashMap(parsedUnit.localTypeCount);", "+\tif (!includeLocalTypes || (parsedUnit.localTypes == null && parsedUnit.functionalExpressions == null))", "+\t\treturn;", "+\t", "+\tHandleFactory factory = new HandleFactory();", "+\tHashSet existingElements = new HashSet(parsedUnit.localTypeCount + parsedUnit.functionalExpressionsCount);", "+\tHashMap knownScopes = new HashMap(parsedUnit.localTypeCount + parsedUnit.functionalExpressionsCount);", "+\t", "+\tif (parsedUnit.localTypes != null) {", "+\t\t}", "+\t}", "+\tif (parsedUnit.functionalExpressions != null) {", "+\t\tfor (int i = 0; i < parsedUnit.functionalExpressionsCount; i++) {", "+\t\t\tif (parsedUnit.functionalExpressions[i] instanceof LambdaExpression) {", "+\t\t\t\tfinal LambdaExpression expression = (LambdaExpression) parsedUnit.functionalExpressions[i];", "+\t\t\t\tIType typeHandle = (IType)factory.createLambdaTypeElement(expression, cu, existingElements, knownScopes);", "+\t\t\t\tremember(typeHandle, expression.getTypeBinding());", "+\t\t\t}"]}], "num": 46055}
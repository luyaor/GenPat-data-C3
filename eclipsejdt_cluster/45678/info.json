{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f3cd5aa783a61db370f70baa55980db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00aba1f7b38c5354a2abac7860f0ef55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "f8c62e1959300f5da932cbd33d28a46243b4258b", "commitAfterChange": "29291a00d45f7fc23b6ab4487b131f3aacb400b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tpublic int compare(Object o1, Object o2)", "signatureAfterChange": " \t\tpublic int compare(Object o1, Object o2)", "diff": ["-\t\t\tswitch(node1.getNodeType()) {", "-\t\t\t\tcase ASTNode.METHOD_DECLARATION :", "-\t\t\t\t\tMethodDeclaration method1 = (MethodDeclaration) node1;", "-\t\t\t\t\tMethodDeclaration method2 = (MethodDeclaration) node2;", "-\t\t\t\t\t", "-\t\t\t\t\tif (method1.isConstructor()) {", "-\t\t\t\t\t\treturn compareParams(method1, method2);", "-\t\t\t\t\t}", "-\t\t\t\t\tint compare = this.collator.compare(method1.getName().getIdentifier(), method2.getName().getIdentifier());", "-\t\t\t\t\tif (compare != 0) {", "-\t\t\t\t\t\treturn compare;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn compareParams(method1, method2);", "-\t\t\t\tcase ASTNode.FIELD_DECLARATION :", "-\t\t\t\t\tFieldDeclaration fieldDeclaration1 = (FieldDeclaration) node1;", "-\t\t\t\t\tFieldDeclaration fieldDeclaration2 = (FieldDeclaration) node2;", "-\t\t\t\t\tVariableDeclarationFragment fragment1 = (VariableDeclarationFragment) fieldDeclaration1.fragments().get(0);", "-\t\t\t\t\tVariableDeclarationFragment fragment2 = (VariableDeclarationFragment) fieldDeclaration2.fragments().get(0);", "-\t\t\t\t\treturn this.collator.compare(fragment1.getName().getIdentifier(), fragment2.getName().getIdentifier());", "-\t\t\t\tcase ASTNode.INITIALIZER :", "-\t\t\t\t\treturn ((Integer) node1.getProperty(CompilationUnitSorter.SOURCE_START)).intValue() - ((Integer) node2.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();", "-\t\t\t\tcase ASTNode.TYPE_DECLARATION :", "-\t\t\t\t\tTypeDeclaration typeDeclaration1 = (TypeDeclaration) node1;", "-\t\t\t\t\tTypeDeclaration typeDeclaration2 = (TypeDeclaration) node2;", "-\t\t\t\t\treturn this.collator.compare(typeDeclaration1.getName().getIdentifier(), typeDeclaration2.getName().getIdentifier());", "-\t\t\t}", "-\t\t\treturn 0;", "-\t\t}", "+\t\t\tString node1Signature = buildSignature(node1);", "+\t\t\tString node2Signature = buildSignature(node2);", "+\t\t\tif (node1Signature == null || node2Signature == null) {", "+\t\t\t\treturn 0;", "+\t\t\t} else if (node1Signature.length() != 0 && node2Signature.length() != 0) {", "+\t\t\t\tint compare = this.collator.compare(node1Signature, node2Signature);", "+\t\t\tint sourceStart1 = ((Integer) node1.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();", "+\t\t\tint sourceStart2 = ((Integer) node2.getProperty(CompilationUnitSorter.SOURCE_START)).intValue();", "+\t\t\treturn sourceStart1 - sourceStart2;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05fe7bbeb1d7ec8736439436f21e1e90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeConverter.java", "commitBeforeChange": "57f58e2a83bf12a567b63842cf84a5fc12572160", "commitAfterChange": "9674e3cb2b45f11c40bb76a8bdb3c8663d35e93e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static TypeDeclaration buildTypeDeclaration(IType type, CompilationUnitDeclaration compilationUnit, CompilationResult compilationResult, ProblemReporter problemReporter)", "signatureAfterChange": " \tpublic static TypeDeclaration buildTypeDeclaration(IType type, CompilationUnitDeclaration compilationUnit, CompilationResult compilationResult, ProblemReporter problemReporter)  throws JavaModelException", "diff": ["-\tpublic static TypeDeclaration buildTypeDeclaration(IType type, CompilationUnitDeclaration compilationUnit, CompilationResult compilationResult, ProblemReporter problemReporter)  {", "-\t\ttry {", "-\t\t\tchar[] packageName = type.getPackageFragment().getElementName().toCharArray();", "-\t\t\t", "-\t\t\tif (packageName != null && packageName.length > 0) { ", "-\t\t\t\tcompilationUnit.currentPackage = new ImportReference(CharOperation.splitOn('.', packageName), new long[]{0}, false);", "-\t\t\t}", "+\tpublic static TypeDeclaration buildTypeDeclaration(IType type, CompilationUnitDeclaration compilationUnit, CompilationResult compilationResult, ProblemReporter problemReporter)  throws JavaModelException {", "+\t\tchar[] packageName = type.getPackageFragment().getElementName().toCharArray();", "-\t\t\t/* convert type */", "-\t\t\tTypeDeclaration typeDeclaration = convert(type, null, null, compilationResult);", "-\t\t\t", "-\t\t\tIType alreadyComputedMember = type;", "-\t\t\tIType parent = type.getDeclaringType();", "-\t\t\tTypeDeclaration previousDeclaration = typeDeclaration;", "-\t\t\twhile(parent != null) {", "-\t\t\t\tTypeDeclaration declaration = convert(parent, alreadyComputedMember, (MemberTypeDeclaration)previousDeclaration, compilationResult);", "-\t\t\t\t", "-\t\t\t\talreadyComputedMember = parent;", "-\t\t\t\tpreviousDeclaration = declaration;", "-\t\t\t\tparent = parent.getDeclaringType();", "-\t\t\t}", "-\t\t\t", "-\t\t\tcompilationUnit.types = new TypeDeclaration[]{previousDeclaration};", "-", "-\t\t\treturn typeDeclaration;", "-\t\t} catch(JavaModelException e) {", "-\t\t\treturn null;", "+\t\tif (packageName != null && packageName.length > 0) { ", "+\t\t\tcompilationUnit.currentPackage = new ImportReference(CharOperation.splitOn('.', packageName), new long[]{0}, false);", "+\t", "+\t\t/* convert type */", "+\t\tTypeDeclaration typeDeclaration = convert(type, null, null, compilationResult);", "+\t\t", "+\t\tIType alreadyComputedMember = type;", "+\t\tIType parent = type.getDeclaringType();", "+\t\tTypeDeclaration previousDeclaration = typeDeclaration;", "+\t\twhile(parent != null) {", "+\t\t\tTypeDeclaration declaration = convert(parent, alreadyComputedMember, (MemberTypeDeclaration)previousDeclaration, compilationResult);", "+\t\t\t", "+\t\t\talreadyComputedMember = parent;", "+\t\t\tpreviousDeclaration = declaration;", "+\t\t\tparent = parent.getDeclaringType();", "+\t\t}", "+\t\t", "+\t\tcompilationUnit.types = new TypeDeclaration[]{previousDeclaration};", "+", "+\t\treturn typeDeclaration;"]}], "num": 45678}
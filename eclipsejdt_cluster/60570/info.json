{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6396266e2f2ac6611f6e996d2b7ea89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5905ec24d501cba9721bf32964f28470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "fabf6bf3cec26424988d597b756c5fec9a4b330d", "commitAfterChange": "c9e120593d0735d48adb3fd437a574562eeeeaab", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "signatureAfterChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "diff": ["-\t\t\t\tif (destFile.exists()) {", "-\t\t\t\t\tif (this.force) {", "-\t\t\t\t\t\t// we can remove it", "-\t\t\t\t\t\tdeleteResource(destFile, IResource.KEEP_HISTORY);", "-\t\t\t\t\t\tdestCU.close(); // ensure the in-memory buffer for the dest CU is closed", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// abort", "-\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.NAME_COLLISION, ", "-\t\t\t\t\t\t\tMessages.bind(Messages.status_nameCollision, destFile.getFullPath().toString()))); ", "+\t\t\t\tif (!destCU.isWorkingCopy()) {", "+\t\t\t\t\tif (destFile.exists()) {", "+\t\t\t\t\t\tif (this.force) {", "+\t\t\t\t\t\t\t// we can remove it", "+\t\t\t\t\t\t\tdeleteResource(destFile, IResource.KEEP_HISTORY);", "+\t\t\t\t\t\t\tdestCU.close(); // ensure the in-memory buffer for the dest CU is closed", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// abort", "+\t\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(", "+\t\t\t\t\t\t\t\tIJavaModelStatusConstants.NAME_COLLISION, ", "+\t\t\t\t\t\t\t\tMessages.bind(Messages.status_nameCollision, destFile.getFullPath().toString()))); ", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint flags = this.force ? IResource.FORCE : IResource.NONE;", "-\t\t\t\tif (this.isMove()) {", "-\t\t\t\t\tflags |= IResource.KEEP_HISTORY;", "-\t\t\t\t\tsourceResource.move(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\tint flags = this.force ? IResource.FORCE : IResource.NONE;", "+\t\t\t\t\tif (this.isMove()) {", "+\t\t\t\t\t\tflags |= IResource.KEEP_HISTORY;", "+\t\t\t\t\t\tsourceResource.move(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (rewrite != null) flags |= IResource.KEEP_HISTORY;", "+\t\t\t\t\t\tsourceResource.copy(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "-\t\t\t\t\tif (rewrite != null) flags |= IResource.KEEP_HISTORY;", "-\t\t\t\t\tsourceResource.copy(destFile.getFullPath(), flags, getSubProgressMonitor(1));", "+\t\t\t\t\tdestCU.getBuffer().setContents(source.getBuffer().getContents());", "-\t\t\t\tthis.setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a20c37c3e696d3ac113df5b2fdedb99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bbfd43e75c85d178e78e2e1f2cdd86b56e672481", "commitAfterChange": "b7270c3ed9751063a7847ef78467ed5c4c4a29fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r \t@Override\r \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": "\r \r \t@Override\r \tpublic boolean visit(TypeDeclaration node)", "diff": ["+\t\tif (!node.isInterface() && !node.superInterfaceTypes().isEmpty()) {\r", "+\t\t\t// fix for: class A<E> extends ArrayList<String>implements Callable<String>\r", "+\t\t\thandleToken(node.getName(), TokenNameimplements, true, false);\r", "+\t\t}\r", "+\r"]}], "num": 60570}
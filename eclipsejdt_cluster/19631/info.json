{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e56d6f07222b6fd48c4db32691cf86df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a8f0c1053adfb2f871d0742a114e816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void run(IProgressMonitor monitor)", "signatureAfterChange": " \t \tpublic void run(IProgressMonitor monitor)", "diff": ["-\tpublic void run(IProgressMonitor monitor) ", "-\t{", "-\t\tassert( _file == null || _compilationUnit == null ) : \"Either _file should be null or _compilationUnit should be null.\"; //$NON-NLS-1$\t", "+\t", "+\tpublic void run(IProgressMonitor monitor) ", "+\t{\t", "-\t\tif ( _factories == null || _factories.size() == 0 || ", "-\t\t\t\t( _compilationUnit != null && ! ScannerUtil.hasAnnotationInstance( _compilationUnit ) ) ||", "-\t\t\t\t( _file!= null && !  ScannerUtil.hasAnnotationInstance( _file ) ) )", "+\t\tif ( !shouldProcess() )", "+", "+\t\t\tSet<IFile> allDeletedFiles = new HashSet<IFile>();", "+\t\t\tif( !_isFullBuild ){", "+\t\t\t\tfor( int i=0, len = _originalFiles.length; i<len; i++ ){", "+\t\t\t\t\tIFile f = _originalFiles[i];", "+\t\t\t\t\tfinal Set<IFile> deletedFiles = ", "+\t\t\t\t\t\tcleanupAllGeneratedFilesForParent( f, _compilationUnit );", "+\t\t\t\t\tif( deletedFiles != null )", "+\t\t\t\t\t\tallDeletedFiles.addAll(deletedFiles);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t", "-\t\t\tIFile f;", "-\t\t\tif ( _file != null )", "-\t\t\t\tf = _file;", "-\t\t\telse", "-\t\t\t\tf = (IFile)_compilationUnit.getResource();", "-\t\t\t", "-\t\t\tSet<IFile> deletedFiles = cleanupAllGeneratedFilesForParent( f, _compilationUnit );", "-\t\t\t", "-\t\t\tif ( deletedFiles.size() == 0 )", "+\t\t\tif ( allDeletedFiles.size() == 0 )", "-\t\t\t\t\t\t\t\t\t\t deletedFiles, ", "-\t\t\t\t\t\t\t\t\t\t Collections.<String>emptySet(),", "+\t\t\t\t\t\t\t\t\t\t allDeletedFiles, ", "+\t\t\t\t\t\t\t\t\t\t Collections.<IFile, Set<String>>emptyMap(),", "-\t\t\t\t\t.newProcessorEnvironmentForBuild( _file, _javaProject);", "+\t\t\t\t\t.newProcessorEnvironmentForBuild( _filesToProcess, _javaProject);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4c99c02da013677e5f4543794c66807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "b68a77e60f9eebb5b8896e6265155db659717756", "commitAfterChange": "1cfd035d2d4f0239dc613b241b4b08c4c2f54dc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["-\tArrayList visited = new ArrayList(sourceLocations.length);", "-\tnext : for (int i = 0, l = sourceLocations.length; i < l; i++) {", "-\t\tnotifier.subTask(Util.bind(\"build.cleaningOutput\")); //$NON-NLS-1$", "-\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "-\t\tif (sourceLocation.hasIndependentOutputFolder) {", "-\t\t\tIContainer outputFolder = sourceLocation.binaryFolder;", "-\t\t\tif (!visited.contains(outputFolder)) {", "-\t\t\t\tvisited.add(outputFolder);", "-\t\t\t\tif (deleteAll) {", "+\tif (deleteAll) {", "+\t\tArrayList visited = new ArrayList(sourceLocations.length);", "+\t\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\t\tnotifier.subTask(Util.bind(\"build.cleaningOutput\")); //$NON-NLS-1$", "+\t\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "+\t\t\tif (sourceLocation.hasIndependentOutputFolder) {", "+\t\t\t\tIContainer outputFolder = sourceLocation.binaryFolder;", "+\t\t\t\tif (!visited.contains(outputFolder)) {", "+\t\t\t\t\tvisited.add(outputFolder);", "-\t\t\t\t} else {", "-\t\t\t\t\toutputFolder.accept(", "-\t\t\t\t\t\tnew IResourceVisitor() {", "-\t\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "-\t\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "+\t\t\t} else {", "+\t\t\t\tboolean isOutputFolder = sourceLocation.sourceFolder.equals(sourceLocation.binaryFolder);", "+\t\t\t\tfinal char[][] exclusionPatterns =", "+\t\t\t\t\tisOutputFolder", "+\t\t\t\t\t\t? sourceLocation.exclusionPatterns", "+\t\t\t\t\t\t: null; // ignore exclusionPatterns if output folder == another source folder... not this one", "+\t\t\t\tsourceLocation.binaryFolder.accept(", "+\t\t\t\t\tnew IResourceVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "+\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "-\t\t} else {", "-\t\t\tboolean isOutputFolder = sourceLocation.sourceFolder.equals(sourceLocation.binaryFolder);", "-\t\t\tfinal char[][] exclusionPatterns =", "-\t\t\t\tisOutputFolder", "-\t\t\t\t\t? sourceLocation.exclusionPatterns", "-\t\t\t\t\t: null; // ignore exclusionPatterns if output folder == another source folder... not this one", "-\t\t\tsourceLocation.binaryFolder.accept(", "-\t\t\t\tnew IResourceVisitor() {", "-\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "-\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t);", "-\t\t\tif (!isOutputFolder)", "-\t\t\t\tcopyPackages(sourceLocation);", "+\t\t\t\t);", "+\t\t\t\tif (!isOutputFolder)", "+\t\t\t\t\tcopyPackages(sourceLocation);", "+\t\t\t}", "+\t\t\tnotifier.checkCancel();", "-\t\tnotifier.checkCancel();", "+\t} else {", "+\t\tfor (int i = 0, l = sourceLocations.length; i < l; i++) {", "+\t\t\tClasspathMultiDirectory sourceLocation = sourceLocations[i];", "+\t\t\tif (sourceLocation.hasIndependentOutputFolder)", "+\t\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "+\t\t\telse if (!sourceLocation.sourceFolder.equals(sourceLocation.binaryFolder))", "+\t\t\t\tcopyPackages(sourceLocation); // output folder is different from source folder", "+\t\t\tnotifier.checkCancel();", "+\t\t}"]}], "num": 19631}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb08122417b653e7df397b44af3d9bfd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c5d99f7103032cd3a6f65b6caf80cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected boolean encloses(IResource element)", "signatureAfterChange": " \tprivate IPath[] computeProjectsAndJars(IType type) throws JavaModelException", "diff": ["+\t * This is a super set of the project and jar paths once the hierarchy is computed.\r\t */", "+\tprivate IPath[] computeProjectsAndJars(IType type) throws JavaModelException {", "+\t\tHashSet set = new HashSet();", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)type.getPackageFragment().getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\t// add the root", "+\t\t\tset.add(root.getPath());", "+\t\t\t// add all projects that reference this archive and their dependents", "+\t\t\tIPath rootPath = root.getPath();", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects = model.getJavaProjects();", "+\t\t\tHashSet visited = new HashSet();", "+\t\t\tfor (int i = 0; i < projects.length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "+\t\t\t\tfor (int j = 0; j < classpath.length; j++) {", "+\t\t\t\t\tif (rootPath.equals(classpath[j].getPath())) {", "+\t\t\t\t\t\t// add the project and its jar pkg fragment roots", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = project.getPackageFragmentRoots();", "+\t\t\t\t\t\tset.add(project.getPath());", "+\t\t\t\t\t\tfor (int k = 0; k < roots.length; k++) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot pkgFragmentRoot = roots[k];", "+\t\t\t\t\t\t\tif (pkgFragmentRoot.isArchive()) {", "+\t\t\t\t\t\t\t\tset.add(pkgFragmentRoot.getPath());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// add the dependent projects", "+\t\t\t\t\t\tthis.computeDependents(project, set, visited);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// add all the project's pkg fragment roots", "+\t\t\tIJavaProject project = (IJavaProject)root.getParent();", "+\t\t\tIPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();", "+\t\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\t\tIPackageFragmentRoot pkgFragmentRoot = roots[i];", "+\t\t\t\tif (pkgFragmentRoot.isArchive()) {", "+\t\t\t\t\tset.add(pkgFragmentRoot.getPath());", "+\t\t\t\t} else {", "+\t\t\t\t\tset.add(pkgFragmentRoot.getParent().getPath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// add the dependent projects", "+\t\t\tthis.computeDependents(project, set, new HashSet());", "+\t\t}", "+\t\tIPath[] result = new IPath[set.size()];", "+\t\tset.toArray(result);", "+\t\treturn result;", "+\t}", "-\t */", "-\tprotected boolean encloses(IResource element) {", "-\t\tIPath elementPath = element.getFullPath();", "-\t\tfor (int i = 0; i < elementCount; i++) {", "-\t\t\tif (this.elements[i].getFullPath().isPrefixOf(elementPath)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846a554b7dd5ae70f3e8e92e19cd9870", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "5266b947a41bc87e33ca243d2f06d621c5b35d8c", "commitAfterChange": "5b0c62f0c85cc7c393266b52408d3bd3c14d0ef5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate IPath[] computeProjectsAndJars(IType type) throws JavaModelException", "signatureAfterChange": " \tprivate IPath[] computeProjectsAndJars(IType type) throws JavaModelException", "diff": ["-\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath();", "-\t\t\t\tfor (int j = 0; j < classpath.length; j++) {", "-\t\t\t\t\tif (rootPath.equals(classpath[j].getPath())) {", "-\t\t\t\t\t\t// add the project and its binary pkg fragment roots", "-\t\t\t\t\t\tIPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();", "-\t\t\t\t\t\tset.add(project.getPath());", "-\t\t\t\t\t\tfor (int k = 0; k < roots.length; k++) {", "-\t\t\t\t\t\t\tIPackageFragmentRoot pkgFragmentRoot = roots[k];", "-\t\t\t\t\t\t\tif (pkgFragmentRoot.getKind() == IPackageFragmentRoot.K_BINARY) {", "-\t\t\t\t\t\t\t\tset.add(pkgFragmentRoot.getPath());", "-\t\t\t\t\t\t\t}", "+\t\t\t\tIClasspathEntry entry = project.getClasspathEntryFor(rootPath);", "+\t\t\t\tif (entry != null) {", "+\t\t\t\t\t// add the project and its binary pkg fragment roots", "+\t\t\t\t\tIPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();", "+\t\t\t\t\tset.add(project.getPath());", "+\t\t\t\t\tfor (int k = 0; k < roots.length; k++) {", "+\t\t\t\t\t\tIPackageFragmentRoot pkgFragmentRoot = roots[k];", "+\t\t\t\t\t\tif (pkgFragmentRoot.getKind() == IPackageFragmentRoot.K_BINARY) {", "+\t\t\t\t\t\t\tset.add(pkgFragmentRoot.getPath());", "-\t\t\t\t\t\t// add the dependent projects", "-\t\t\t\t\t\tthis.computeDependents(project, set, visited);", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// add the dependent projects", "+\t\t\t\t\tthis.computeDependents(project, set, visited);"]}], "num": 14553}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df6741a183bde53e0d6d30afbed313d3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84b2028ca089959b0a1a9787897401e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "signatureAfterChange": "  public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "diff": ["-\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ReceiverTypeNotVisible);", "+\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ProblemReasons.ReceiverTypeNotVisible);", "-\t\treturn new ProblemFieldBinding(currentType, fieldName, ReceiverTypeNotVisible);", "+\t\treturn new ProblemFieldBinding(currentType, fieldName, ProblemReasons.ReceiverTypeNotVisible);", "-\t\t\treturn new ProblemFieldBinding(field /* closest match*/, field.declaringClass, fieldName, NotVisible);", "+\t\t\treturn new ProblemFieldBinding(field /* closest match*/, field.declaringClass, fieldName, ProblemReasons.NotVisible);", "-\t\t\t\t\treturn new ProblemFieldBinding(visibleField.declaringClass, fieldName, Ambiguous);", "+\t\t\t\t\treturn new ProblemFieldBinding(visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);", "-\t\t\t\tif ((anInterface.tagBits & InterfaceVisited) == 0) { // if interface as not already been visited", "-\t\t\t\t\tanInterface.tagBits |= InterfaceVisited;", "+\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited", "+\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;", "-\t\t\t\t\t\t\tambiguous = new ProblemFieldBinding(visibleField.declaringClass, fieldName, Ambiguous);", "+\t\t\t\t\t\t\tambiguous = new ProblemFieldBinding(visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);", "-\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;", "+\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;", "-\t\treturn new ProblemFieldBinding(currentType, fieldName, NotVisible);", "+\t\treturn new ProblemFieldBinding(currentType, fieldName, ProblemReasons.NotVisible);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917fc97662a4f98953436af67d0c83d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ReceiverTypeNotVisible);", "+\t\t\t\t\treturn new ProblemFieldBinding((ReferenceBinding)leafType, fieldName, ProblemReasons.ReceiverTypeNotVisible);", "-\t\t\treturn new ProblemFieldBinding(currentType, fieldName, ReceiverTypeNotVisible);", "+\t\t\treturn new ProblemFieldBinding(currentType, fieldName, ProblemReasons.ReceiverTypeNotVisible);", "-\t\t\treturn new ProblemFieldBinding(field /* closest match*/, field.declaringClass, fieldName, NotVisible);", "+\t\t\treturn new ProblemFieldBinding(field /* closest match*/, field.declaringClass, fieldName, ProblemReasons.NotVisible);", "-\t\t\t\t\t\treturn new ProblemFieldBinding(visibleField /* closest match*/, visibleField.declaringClass, fieldName, Ambiguous);", "+\t\t\t\t\t\treturn new ProblemFieldBinding(visibleField /* closest match*/, visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);", "-\t\t\t\t\tif ((anInterface.tagBits & InterfaceVisited) == 0) {", "+\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {", "-\t\t\t\t\t\tanInterface.tagBits |= InterfaceVisited;", "+\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;", "-\t\t\t\t\t\t\t\tambiguous = new ProblemFieldBinding(visibleField /* closest match*/, visibleField.declaringClass, fieldName, Ambiguous);", "+\t\t\t\t\t\t\t\tambiguous = new ProblemFieldBinding(visibleField /* closest match*/, visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);", "-\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;", "-\t\t\treturn new ProblemFieldBinding(notVisibleField, currentType, fieldName, NotVisible);", "+\t\t\treturn new ProblemFieldBinding(notVisibleField, currentType, fieldName, ProblemReasons.NotVisible);"]}], "num": 50491}
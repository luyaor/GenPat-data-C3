{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d90b3e0fa0a87eb2b7989e363eb2004", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4acd1365acbf20fa573e088d63a9ac60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " protected CompilationUnitDeclaration endParse(int act)", "signatureAfterChange": " protected CompilationUnitDeclaration endParse(int act)", "diff": ["-\tif (currentElement != null){", "-\t\tcurrentElement.topElement().updateParseTree();", "+\tif (this.currentElement != null){", "+\t\tthis.currentElement.topElement().updateParseTree();", "-\t\t\tSystem.out.println(compilationUnit);\t\t", "+\t\t\tSystem.out.println(this.compilationUnit);\t\t", "-\t\tif (diet & VERBOSE_RECOVERY){", "+\t\tif (this.diet & VERBOSE_RECOVERY){", "-\t\t\tSystem.out.println(compilationUnit);\t\t", "+\t\t\tSystem.out.println(this.compilationUnit);\t\t", "-\tif (scanner.recordLineSeparator) {", "-\t\tcompilationUnit.compilationResult.lineSeparatorPositions = scanner.getLineEnds();", "+\tif (this.scanner.recordLineSeparator) {", "+\t\tthis.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();", "-\tfor (int i = 0; i < scanner.foundTaskCount; i++){", "+\tfor (int i = 0; i < this.scanner.foundTaskCount; i++){", "-\t\t\tnew String(scanner.foundTaskTags[i]), ", "-\t\t\tnew String(scanner.foundTaskMessages[i]),", "-\t\t\tscanner.foundTaskPriorities[i] == null ? null : new String(scanner.foundTaskPriorities[i]), ", "-\t\t\tscanner.foundTaskPositions[i][0], ", "-\t\t\tscanner.foundTaskPositions[i][1]);", "+\t\t\tnew String(this.scanner.foundTaskTags[i]), ", "+\t\t\tnew String(this.scanner.foundTaskMessages[i]),", "+\t\t\tthis.scanner.foundTaskPriorities[i] == null ? null : new String(this.scanner.foundTaskPriorities[i]), ", "+\t\t\tthis.scanner.foundTaskPositions[i][0], ", "+\t\t\tthis.scanner.foundTaskPositions[i][1]);", "-\treturn compilationUnit;", "+\treturn this.compilationUnit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6188035ec995ab9fcccb5bf957c6312a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["+\t\t\t", "-\t\tif (constant != Constant.NotAConstant) {", "+\t\tif (this.constant != Constant.NotAConstant) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\t\t\tswitch (expression.implicitConversion >> 4) /* runtime type */ {", "+\t\t\t\tswitch (this.expression.implicitConversion >> 4) /* runtime type */ {", "-\t\t\t\t\t\texpression.generateOptimizedBoolean(", "+\t\t\t\t\t\tthis.expression.generateOptimizedBoolean(", "-\t\t\t\tswitch (expression.implicitConversion >> 4 /* runtime */", "+\t\t\t\tswitch (this.expression.implicitConversion >> 4 /* runtime */", "-\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (constant != NotAConstant) {", "+\t\t\t\tif (this.constant != NotAConstant) {", "-\t\t\t\t\t\tswitch (expression.implicitConversion >> 4 /* runtime */", "-\t\t\t\t\t\t\t) {", "+\t\t\t\t\t\tswitch (this.expression.implicitConversion >> 4){ /* runtime */", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.intValue() * -1);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.intValue() * -1);", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.floatValue() * -1.0f);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.floatValue() * -1.0f);", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.longValue() * -1L);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.longValue() * -1L);", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.doubleValue() * -1.0);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.doubleValue() * -1.0);", "-\t\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tswitch (expression.implicitConversion >> 4 /* runtime type */", "-\t\t\t\t\t\t\t) {", "+\t\t\t\t\t\tswitch (expression.implicitConversion >> 4){ /* runtime type */", "-\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "920f2d43e54a11af1bc032698bc90c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "signatureAfterChange": " public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding)", "diff": ["-\t// anonymous type constructor creation", "-\tpublic MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding) {", "-", "-\t\t//Add to method'set, the default constuctor that just recall the", "-\t\t//super constructor with the same arguments", "-\t\tString baseName = \"$anonymous\"; //$NON-NLS-1$", "-\t\tTypeBinding[] argumentTypes = inheritedConstructorBinding.parameters;", "-\t\tint argumentsLength = argumentTypes.length;", "-\t\t//the constructor", "-\t\tConstructorDeclaration cd = new ConstructorDeclaration(this.compilationResult);", "-\t\tcd.selector = new char[] { 'x' }; //no maining", "-\t\tcd.sourceStart = sourceStart;", "-\t\tcd.sourceEnd = sourceEnd;", "-\t\tint newModifiers = modifiers & ExtraCompilerModifiers.AccVisibilityMASK;", "-\t\tif (inheritedConstructorBinding.isVarargs()) {", "-\t\t\tnewModifiers |= ClassFileConstants.AccVarargs;", "-\t\t}", "-\t\tcd.modifiers = newModifiers;", "-\t\tcd.isDefaultConstructor = true;", "-", "-\t\tif (argumentsLength > 0) {", "-\t\t\tArgument[] arguments = (cd.arguments = new Argument[argumentsLength]);", "-\t\t\tfor (int i = argumentsLength; --i >= 0;) {", "-\t\t\t\targuments[i] = new Argument((baseName + i).toCharArray(), 0L, null /*type ref*/, ClassFileConstants.AccDefault);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//the super call inside the constructor", "-\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "-\t\tcd.constructorCall.sourceStart = sourceStart;", "-\t\tcd.constructorCall.sourceEnd = sourceEnd;", "-", "-\t\tif (argumentsLength > 0) {", "-\t\t\tExpression[] args;", "-\t\t\targs = cd.constructorCall.arguments = new Expression[argumentsLength];", "-\t\t\tfor (int i = argumentsLength; --i >= 0;) {", "-\t\t\t\targs[i] = new SingleNameReference((baseName + i).toCharArray(), 0L);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//adding the constructor in the methods list", "-\t\tif (methods == null) {", "-\t\t\tmethods = new AbstractMethodDeclaration[] { cd };", "-\t\t\t\tmethods,", "-\t\t\t\tnewMethods = new AbstractMethodDeclaration[methods.length + 1],", "-\t\t\t\tmethods.length);", "-\t\t\tnewMethods[0] = cd;", "-\t\t\tmethods = newMethods;", "-\t\t//============BINDING UPDATE==========================", "-\t\tcd.binding = new MethodBinding(", "-\t\t\t\tcd.modifiers, //methodDeclaration", "-\t\t\t\targumentsLength == 0 ? Binding.NO_PARAMETERS : argumentTypes, //arguments bindings", "-\t\t\t\tinheritedConstructorBinding.thrownExceptions, //exceptions", "-\t\t\t\tbinding); //declaringClass", "-\t\t\t\t", "-\t\tcd.scope = new MethodScope(scope, cd, true);", "-\t\tcd.bindArguments();", "-\t\tcd.constructorCall.resolve(cd.scope);", "+// anonymous type constructor creation", "+public MethodBinding createDefaultConstructorWithBinding(MethodBinding inheritedConstructorBinding) {", "+\t//Add to method'set, the default constuctor that just recall the", "+\t//super constructor with the same arguments", "+\tString baseName = \"$anonymous\"; //$NON-NLS-1$", "+\tTypeBinding[] argumentTypes = inheritedConstructorBinding.parameters;", "+\tint argumentsLength = argumentTypes.length;", "+\t//the constructor", "+\tConstructorDeclaration cd = new ConstructorDeclaration(this.compilationResult);", "+\tcd.selector = new char[] { 'x' }; //no maining", "+\tcd.sourceStart = this.sourceStart;", "+\tcd.sourceEnd = this.sourceEnd;", "+\tint newModifiers = this.modifiers & ExtraCompilerModifiers.AccVisibilityMASK;", "+\tif (inheritedConstructorBinding.isVarargs()) {", "+\t\tnewModifiers |= ClassFileConstants.AccVarargs;", "+\t}", "+\tcd.modifiers = newModifiers;", "+\tcd.isDefaultConstructor = true;", "-\t\tif (binding.methods == null) {", "-\t\t\tbinding.methods = new MethodBinding[] { cd.binding };", "-\t\t} else {", "-\t\t\tMethodBinding[] newMethods;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tbinding.methods,", "-\t\t\t\t0,", "-\t\t\t\tnewMethods = new MethodBinding[binding.methods.length + 1],", "-\t\t\t\t1,", "-\t\t\t\tbinding.methods.length);", "-\t\t\tnewMethods[0] = cd.binding;", "-\t\t\tbinding.methods = newMethods;", "+\tif (argumentsLength > 0) {", "+\t\tArgument[] arguments = (cd.arguments = new Argument[argumentsLength]);", "+\t\tfor (int i = argumentsLength; --i >= 0;) {", "+\t\t\targuments[i] = new Argument((baseName + i).toCharArray(), 0L, null /*type ref*/, ClassFileConstants.AccDefault);", "-\t\t//===================================================", "+\t}", "+\t//the super call inside the constructor", "+\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\tcd.constructorCall.sourceStart = this.sourceStart;", "+\tcd.constructorCall.sourceEnd = this.sourceEnd;", "-\t\treturn cd.binding;", "+\tif (argumentsLength > 0) {", "+\t\tExpression[] args;", "+\t\targs = cd.constructorCall.arguments = new Expression[argumentsLength];", "+\t\tfor (int i = argumentsLength; --i >= 0;) {", "+\t\t\targs[i] = new SingleNameReference((baseName + i).toCharArray(), 0L);", "+\t\t}", "+\t//adding the constructor in the methods list", "+\tif (this.methods == null) {", "+\t\tthis.methods = new AbstractMethodDeclaration[] { cd };", "+\t} else {", "+\t\tAbstractMethodDeclaration[] newMethods;", "+\t\tSystem.arraycopy(", "+\t\t\tthis.methods,", "+\t\t\t0,", "+\t\t\tnewMethods = new AbstractMethodDeclaration[this.methods.length + 1],", "+\t\t\t1,", "+\t\t\tthis.methods.length);", "+\t\tnewMethods[0] = cd;", "+\t\tthis.methods = newMethods;", "+\t}", "+\t//============BINDING UPDATE==========================", "+\tcd.binding = new MethodBinding(", "+\t\t\tcd.modifiers, //methodDeclaration", "+\t\t\targumentsLength == 0 ? Binding.NO_PARAMETERS : argumentTypes, //arguments bindings", "+\t\t\tinheritedConstructorBinding.thrownExceptions, //exceptions", "+\t\t\tthis.binding); //declaringClass", "+\t\t\t", "+\tcd.scope = new MethodScope(this.scope, cd, true);", "+\tcd.bindArguments();", "+\tcd.constructorCall.resolve(cd.scope);", "+", "+\tif (this.binding.methods == null) {", "+\t\tthis.binding.methods = new MethodBinding[] { cd.binding };", "+\t} else {", "+\t\tMethodBinding[] newMethods;", "+\t\tSystem.arraycopy(", "+\t\t\tthis.binding.methods,", "+\t\t\t0,", "+\t\t\tnewMethods = new MethodBinding[this.binding.methods.length + 1],", "+\t\t\t1,", "+\t\t\tthis.binding.methods.length);", "+\t\tnewMethods[0] = cd.binding;", "+\t\tthis.binding.methods = newMethods;", "+\t}", "+\t//===================================================", "+", "+\treturn cd.binding;", "+}"]}], "num": 29567}
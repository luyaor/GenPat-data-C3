{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ba52c572bd8ddef3f4e13a4b3128592", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a92db53f109de756e731fcce03de0f21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "062668d56ec736d8048bddfbb9f460f0f1d04b11", "commitAfterChange": "3716c54055d7a4beea6cb3963f6df24a75c62bb6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(\r \t\tString[] filePaths, \r \t\tIWorkspace workspace,\r \t\tIWorkingCopy[] workingCopies, \r \t\tIProgressMonitor progressMonitor)\r \t\tthrows JavaModelException", "diff": ["-\tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r", "+\tpublic void locateMatches(\r", "+\t\tString[] filePaths, \r", "+\t\tIWorkspace workspace,\r", "+\t\tIWorkingCopy[] workingCopies, \r", "+\t\tIProgressMonitor progressMonitor)\r", "+\t\tint length = filePaths.length;\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.beginTask(\"\", length * 3); // 1 for file path, 1 for binding creation, 1 for resolution //$NON-NLS-1$\r", "+\t\t}\r", "+\r", "-\t\tthis.pattern.initializePolymorphicSearch(this, this.collector.getProgressMonitor());\r", "+\t\tthis.pattern.initializePolymorphicSearch(this, progressMonitor);\r", "-\t\tint length = filePaths.length;\r", "-\t\tdouble increment = 100.0 / length;\r", "-\t\tdouble totalWork = 0;\r", "-\t\tint lastProgress = 0;\r", "-\t\t\tIProgressMonitor monitor = this.collector.getProgressMonitor();\r", "-\t\t\tif (monitor != null && monitor.isCanceled()) {\r", "+\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) {\r", "-\t\t\t\t\t\t\tthis.locateMatches(previousJavaProject);\r", "+\t\t\t\t\t\t\tthis.locateMatches(previousJavaProject, progressMonitor);\r", "-\t\t\tif (monitor != null) {\r", "-\t\t\t\ttotalWork = totalWork + increment;\r", "-\t\t\t\tint worked = (int) totalWork - lastProgress;\r", "-\t\t\t\tmonitor.worked(worked);\r", "-\t\t\t\tlastProgress = (int) totalWork;\r", "+\t\t\tif (progressMonitor != null) {\r", "+\t\t\t\tprogressMonitor.worked(1);\r", "-\r", "+\t\t\r", "-\t\t\t\tthis.locateMatches(previousJavaProject);\r", "+\t\t\t\tthis.locateMatches(previousJavaProject, progressMonitor);\r", "+\t\t\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.done();\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad35ffe97bd76d0dd6402c4aa20fef61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tsynchronized IBinding resolveName(Name name)", "signatureAfterChange": " \tsynchronized IBinding resolveName(Name name)", "diff": ["-\t\t\tint qualifiedNameLength = tokens.length;", "-\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based", "-\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;", "-\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {", "+\t\t\tif (index < indexOfFirstFieldBinding) {", "-\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(tokens, 0, index));", "-\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(tokens, 0, index));", "-\t\t\t} else if (indexInQualifiedName == indexOfFirstFieldBinding) {", "+\t\t\t} else if (index == indexOfFirstFieldBinding) {", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (binding instanceof ProblemFieldBinding) {", "-\t\t\t\t\t\t\t\tProblemFieldBinding problemFieldBinding = (ProblemFieldBinding) binding;", "-\t\t\t\t\t\t\t\tswitch(problemFieldBinding.problemId()) {", "-\t\t\t\t\t\t\t\t\tcase ProblemReasons.NotVisible : ", "-\t\t\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "-\t\t\t\t\t\t\t\t\t\tReferenceBinding declaringClass = problemFieldBinding.declaringClass;", "-\t\t\t\t\t\t\t\t\t\tif (declaringClass != null) {", "-\t\t\t\t\t\t\t\t\t\t\tFieldBinding exactBinding = declaringClass.getField(tokens[tokens.length - 1], true /*resolve*/);", "-\t\t\t\t\t\t\t\t\t\t\tif (exactBinding != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\tIVariableBinding variableBinding = (IVariableBinding) this.bindingTables.compilerBindingsToASTBindings.get(exactBinding);", "-\t\t\t\t\t\t\t\t\t\t\t\tif (variableBinding != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\treturn variableBinding;", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tvariableBinding = new VariableBinding(this, exactBinding);", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(exactBinding, variableBinding);", "+\t\t\t\t\t\t} else  if (binding instanceof ProblemFieldBinding) {", "+\t\t\t\t\t\t\tProblemFieldBinding problemFieldBinding = (ProblemFieldBinding) binding;", "+\t\t\t\t\t\t\tswitch(problemFieldBinding.problemId()) {", "+\t\t\t\t\t\t\t\tcase ProblemReasons.NotVisible : ", "+\t\t\t\t\t\t\t\tcase ProblemReasons.NonStaticReferenceInStaticContext :", "+\t\t\t\t\t\t\t\t\tReferenceBinding declaringClass = problemFieldBinding.declaringClass;", "+\t\t\t\t\t\t\t\t\tif (declaringClass != null) {", "+\t\t\t\t\t\t\t\t\t\tFieldBinding exactBinding = declaringClass.getField(tokens[tokens.length - 1], true /*resolve*/);", "+\t\t\t\t\t\t\t\t\t\tif (exactBinding != null) {", "+\t\t\t\t\t\t\t\t\t\t\tIVariableBinding variableBinding = (IVariableBinding) this.bindingTables.compilerBindingsToASTBindings.get(exactBinding);", "+\t\t\t\t\t\t\t\t\t\t\tif (variableBinding != null) {", "+\t\t\t\t\t\t\t\t\t\t\tvariableBinding = new VariableBinding(this, exactBinding);", "+\t\t\t\t\t\t\t\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(exactBinding, variableBinding);", "+\t\t\t\t\t\t\t\t\t\t\treturn variableBinding;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\tif (qualifiedNameReference.otherBindings == null || (otherBindingLength - index - 1) < 0) {", "+\t\t\t\tif (qualifiedNameReference.otherBindings == null || (index - 2) < 0) {", "-\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t", "+\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[index - 2]);\t\t\t\t", "-\t\t\tif (index == 0) {", "+\t\t\tif (index == qualifiedTypeReference.tokens.length) {", "-\t\t\t\tint qualifiedTypeLength = qualifiedTypeReference.tokens.length;", "-\t\t\t\tint indexInQualifiedName = qualifiedTypeLength - index; // one-based", "-\t\t\t\tif (indexInQualifiedName >= 0) {", "+\t\t\t\tif (index >= 0) {", "-\t\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, index));", "-\t\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, index));", "-\t\t\tint indexInImportReference = importReferenceLength - index; // one-based", "-\t\t\tif (indexInImportReference >= 0) {", "+\t\t\tif (index >= 0) {", "-\t\t\t\tif (importReferenceLength == indexInImportReference) {", "+\t\t\t\tif (importReferenceLength == index) {", "-\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), importReference.onDemand, importReference.isStatic());", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, index), importReference.onDemand, importReference.isStatic());", "-\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, indexInImportReference), true, importReference.isStatic());", "+\t\t\t\t\t\tbinding = this.scope.getImport(CharOperation.subarray(importReference.tokens, 0, index), true, importReference.isStatic());"]}], "num": 7429}
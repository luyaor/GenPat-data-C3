{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41ddfbb416527029bb5499329caf9bf5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577e4dbda4be31db28c482a9efa5db45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "0aed651787bbf037293557b7c88429b8514a95c0", "commitAfterChange": "1719c13f5400eb5914bb79f89f0e1d4c54e3cd14", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 166, "signatureBeforeChange": " public void testTypeReference10() throws CoreException", "signatureAfterChange": " public void testTypeReference10() throws CoreException", "diff": ["-\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "+//\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\tresultCollector);", "+\t\tthis.resultCollector);", "-\t\tresultCollector);", "+\t\tthis.resultCollector);", "-\t\tresultCollector);", "+\t\tthis.resultCollector);", "-\t\tresultCollector);", "+\t\tthis.resultCollector);", "-\t\tresultCollector);", "+\t\tthis.resultCollector);", "-\t\tresultCollector);", "+\t\tthis.resultCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c5e7ba39c573f7696c38dad25f11cd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbfe38833dc2f212d237eed66fda878b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\tif ((operationTypeID = implicitConversion >> 4) == T_String || operationTypeID == T_Object) {", "+\tif ((operationTypeID = this.implicitConversion >> 4) == T_String || operationTypeID == T_Object) {", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);\t\t\t", "+\t\t\tcodeStream.generateConstant(expression.constant, this.implicitConversion);\t\t\t", "-\tswitch (bits & RestrictiveFlagMASK) {", "+\tswitch (this.bits & RestrictiveFlagMASK) {"]}], "num": 71155}
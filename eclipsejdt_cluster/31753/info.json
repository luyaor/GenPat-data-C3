{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbb43bbbd741737e64b212a1ea0f1483", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbbf7f1f8747bd4f198c43d97a2410f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9b8497af1cbd77526a4fa45b99ed631f29570c0f", "commitAfterChange": "e2827e126b55e7ef1923fa3efec0a2ea0aba2477", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate Object[][] getRegisteredParticipants()", "diff": ["-\t\tprivate CompilationParticipant[] getRegisteredParticipants() {", "+\t\tprivate Object[][] getRegisteredParticipants() {", "-\t\t\tfinal HashMap modifyingEnv = new HashMap();", "-\t\t\tfinal HashMap creatingProblems = new HashMap();", "-\t\t\tfinal HashMap others = new HashMap();", "+\t\t\tfinal ArrayList modifyingEnv = new ArrayList();", "+\t\t\tfinal ArrayList creatingProblems = new ArrayList();", "+\t\t\tfinal ArrayList others = new ArrayList();", "-\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "-\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "-\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "-\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "+\t\t\t\t\t// add config element in the group it belongs to", "+\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tmodifyingEnv.add(configElement);", "+\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tcreatingProblems.add(configElement);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tothers.add(configElement);", "-\t\t\tCompilationParticipant[] result = new CompilationParticipant[size];", "+\t\t\t", "+\t\t\t// sort config elements in each group", "+\t\t\tIConfigurationElement[] configElements = new IConfigurationElement[size];", "-\t\t\tindex = sortParticipants(modifyingEnv, result, index);", "-\t\t\tindex = sortParticipants(creatingProblems, result, index);", "-\t\t\tindex = sortParticipants(others, result, index);", "+\t\t\tindex = sortParticipants(modifyingEnv, configElements, index);", "+\t\t\tindex = sortParticipants(creatingProblems, configElements, index);", "+\t\t\tindex = sortParticipants(others, configElements, index);", "+\t\t\t", "+\t\t\t// create result table", "+\t\t\tObject[][] result = new Object[MAX_SOURCE_LEVEL][];", "+\t\t\tint length = configElements.length;", "+\t\t\tfor (int i = 0; i < MAX_SOURCE_LEVEL; i++) {", "+\t\t\t\tresult[i] = new Object[length];", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tString sourceLevel = configElements[i].getAttribute(\"requiredSourceLevel\"); //$NON-NLS-1$", "+\t\t\t\tint sourceLevelIndex = indexForSourceLevel(sourceLevel);", "+\t\t\t\tfor (int j = sourceLevelIndex; j < MAX_SOURCE_LEVEL; j++) {", "+\t\t\t\t\tresult[j][i] = configElements[i];", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a14f721e8356308e5c41f726b2b795fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "438cd79e8f80d544a06b9ea7f1f6d0cd36c3d8a3", "commitAfterChange": "0ab93ae847c558bd1db4754c68366cce5240cdc2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "diff": ["+\t\t\t// for all extensions of this point...", "-\t\t\t\t// for all extensions of this point...", "-\t\t\t\tfor(int j = 0; j < extensions.length; j++) {", "-\t\t\t\t\tIConfigurationElement[] configElements = extensions[j].getConfigurationElements();", "-\t\t\t\t\t// for all config elements named \"compilationParticipant\"", "-\t\t\t\t\tfor(int k = 0; k < configElements.length; k++) {", "-\t\t\t\t\t\tfinal IConfigurationElement configElement = configElements[k];", "-\t\t\t\t\t\tString elementName =configElement.getName();", "-\t\t\t\t\t\tif (!(\"compilationParticipant\".equals(elementName))) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "-\t\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "-\t\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "-\t\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t});", "+\t\t\t\tIConfigurationElement[] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\t// for all config elements named \"compilationParticipant\"", "+\t\t\t\tfor(int j = 0; j < configElements.length; j++) {", "+\t\t\t\t\tfinal IConfigurationElement configElement = configElements[j];", "+\t\t\t\t\tString elementName =configElement.getName();", "+\t\t\t\t\tif (!(\"compilationParticipant\".equals(elementName))) { //$NON-NLS-1$", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "+\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "+\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpublic void run() throws Exception {", "+\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "+\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "+\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "+\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "+\t\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});"]}], "num": 31753}
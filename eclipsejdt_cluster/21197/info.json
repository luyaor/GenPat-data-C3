{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afd61b54d851c03ee8a67ebc0aec3df7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a0713ea6bbc9cdce9e0da539ecea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "4da5a9a150c1a47a773a4fd9e96abe9171b5562d", "commitAfterChange": "33b8e652534880a44865eb30d6ce68dd0b1d0126", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t", "-\t\t\tString unqualifiedName= name;", "-\t\t\tint index= name.lastIndexOf('$');", "-\t\t\tif (index != -1) {", "-\t\t\t\t//the type name of the inner type", "-\t\t\t\tunqualifiedName= Util.localTypeName(name, index, name.length());", "-\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "-\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "-\t\t\t}", "-\t\t\tString matchName= partialMatch ? name.toLowerCase() : name;", "-\t\t\tfor (int i= 0; i < length; i++) {", "-\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\treturn;", "-\t\t\t\tIClassFile classFile= classFiles[i];", "-\t\t\t\tString elementName = classFile.getElementName();", "-\t\t\t\tif (partialMatch) elementName = elementName.toLowerCase();", "-\t", "-\t\t\t\t/**", "-\t\t\t\t * Must use startWith because matchName will never have the ", "-\t\t\t\t * extension \".class\" and the elementName always will.", "-\t\t\t\t */", "-\t\t\t\tif (elementName.startsWith(matchName)) {", "-\t\t\t\t\tIType type= null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\ttype= classFile.getType();", "-\t\t\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\t\t\tcontinue; // the classFile is not present", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!partialMatch || (type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "-\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, partialMatch) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\tif (!partialMatch) {", "+\t\t\t\t// exact match", "+\t\t\t\tfor (int i= 0; i < length; i++) {", "+\t\t\t\t\tif (requestor.isCanceled()) return;", "+\t\t\t\t\tClassFile classFile= (ClassFile) classFiles[i];", "+\t\t\t\t\tif (name.equals(classFile.name)) { // ClassFile#name contains the name of the .class file without the .class extension", "+\t\t\t\t\t\tIType type = classFile.getType();", "+\t\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "+\t\t\t\t\t\t\tbreak;  // since an exact match was requested, no other matching type can exist", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tString unqualifiedName = name;", "+\t\t\t\tint index = name.lastIndexOf('$');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\t//the type name of the inner type", "+\t\t\t\t\tunqualifiedName = Util.localTypeName(name, index, name.length());", "+\t\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "+\t\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "+\t\t\t\t}", "+\t\t\t\tString matchName = name.toLowerCase();", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tIClassFile classFile= classFiles[i];", "+\t\t\t\t\tString elementName = classFile.getElementName();", "+\t\t\t\t\telementName = elementName.toLowerCase();", "+\t\t", "+\t\t\t\t\t/**", "+\t\t\t\t\t * Must use startWith because matchName will never have the ", "+\t\t\t\t\t * extension \".class\" and the elementName always will.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (elementName.startsWith(matchName)) {", "+\t\t\t\t\t\tIType type= null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ttype = classFile.getType();", "+\t\t\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\t\t\tcontinue; // the classFile is not present", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif ((type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "+\t\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, true/*partial match*/) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a27fe6441f1b2e95f831fd779c80b56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "447c4a3138b0e8356dbfa24777955b13411dcda3", "commitAfterChange": "97f850634c52d79fc9e9ec223b5adcbcdf586443", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\tIClassFile[] classFiles= null;", "+\t\tlong start = -1;", "+\t\tif (VERBOSE)", "+\t\t\tstart = System.currentTimeMillis();", "-\t\t\tclassFiles= pkg.getClassFiles();", "-\t\t} catch (JavaModelException npe) {", "-\t\t\treturn; // the package is not present", "-\t\t}", "-\t\tint length= classFiles.length;", "-", "-\t\tString unqualifiedName= name;", "-\t\tint index= name.lastIndexOf('$');", "-\t\tif (index != -1) {", "-\t\t\t//the type name of the inner type", "-\t\t\tunqualifiedName= Util.localTypeName(name, index, name.length());", "-\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "-\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "-\t\t}", "-\t\tString matchName= partialMatch ? name.toLowerCase() : name;", "-\t\tfor (int i= 0; i < length; i++) {", "-\t\t\tif (requestor.isCanceled())", "-\t\t\t\treturn;", "-\t\t\tIClassFile classFile= classFiles[i];", "-\t\t\tString elementName = classFile.getElementName();", "-\t\t\tif (partialMatch) elementName = elementName.toLowerCase();", "-", "-\t\t\t/**", "-\t\t\t * Must use startWith because matchName will never have the ", "-\t\t\t * extension \".class\" and the elementName always will.", "-\t\t\t */", "-\t\t\tif (elementName.startsWith(matchName)) {", "-\t\t\t\tIType type= null;", "-\t\t\t\ttry {", "-\t\t\t\t\ttype= classFile.getType();", "-\t\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\t\tcontinue; // the classFile is not present", "-\t\t\t\t}", "-\t\t\t\tif (!partialMatch || (type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "-\t\t\t\t\tif (nameMatches(unqualifiedName, type, partialMatch) && acceptType(type, acceptFlags, false/*not a source type*/))", "-\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\tIClassFile[] classFiles= null;", "+\t\t\ttry {", "+\t\t\t\tclassFiles= pkg.getClassFiles();", "+\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\treturn; // the package is not present", "+\t\t\t}", "+\t\t\tint length= classFiles.length;", "+\t", "+\t\t\tString unqualifiedName= name;", "+\t\t\tint index= name.lastIndexOf('$');", "+\t\t\tif (index != -1) {", "+\t\t\t\t//the type name of the inner type", "+\t\t\t\tunqualifiedName= Util.localTypeName(name, index, name.length());", "+\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "+\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "+\t\t\t}", "+\t\t\tString matchName= partialMatch ? name.toLowerCase() : name;", "+\t\t\tfor (int i= 0; i < length; i++) {", "+\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\treturn;", "+\t\t\t\tIClassFile classFile= classFiles[i];", "+\t\t\t\tString elementName = classFile.getElementName();", "+\t\t\t\tif (partialMatch) elementName = elementName.toLowerCase();", "+\t", "+\t\t\t\t/**", "+\t\t\t\t * Must use startWith because matchName will never have the ", "+\t\t\t\t * extension \".class\" and the elementName always will.", "+\t\t\t\t */", "+\t\t\t\tif (elementName.startsWith(matchName)) {", "+\t\t\t\t\tIType type= null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\ttype= classFile.getType();", "+\t\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\t\tcontinue; // the classFile is not present", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!partialMatch || (type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "+\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, partialMatch) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\t\t\t}", "+\t\t} finally {", "+\t\t\tif (VERBOSE)", "+\t\t\t\tthis.timeSpentInSeekTypesInBinaryPackage += System.currentTimeMillis()-start;"]}], "num": 21197}
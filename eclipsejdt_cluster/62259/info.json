{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cc7af3cbc59c3feb801f94fb906e1c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "527223ba8a2f6cc21b749fb0a4e72c43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "acbefd89869bc2e1636c797e9888a047f0db1e79", "commitAfterChange": "ca6a0d4f3bf98311c20a941f6f61f98507e3122c", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public boolean forcedToBeRaw(ReferenceContext referenceContext)", "signatureAfterChange": " public boolean forcedToBeRaw(ReferenceContext referenceContext)", "diff": ["+\t\t} else if (receiverBinding instanceof FieldBinding) {", "+\t\t\tFieldBinding field = (FieldBinding) receiverBinding;", "+\t\t\tif (field.type.isRawType()) {", "+\t\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\tAbstractMethodDeclaration methodDecl = (AbstractMethodDeclaration) referenceContext;", "+\t\t\t\t\tif (field.declaringClass != methodDecl.binding.declaringClass) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\t\tTypeDeclaration type = (TypeDeclaration) referenceContext;", "+\t\t\t\t\tif (field.declaringClass != type.binding) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\tif (!CharOperation.equals(((FieldReference) this).binding.declaringClass.getFileName(),", "+\t\tFieldBinding field = ((FieldReference) this).binding;", "+\t\tif (!CharOperation.equals(field.declaringClass.getFileName(),", "+\t\tif (field.type.isRawType()) {", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\tAbstractMethodDeclaration methodDecl = (AbstractMethodDeclaration) referenceContext;", "+\t\t\t\tif (field.declaringClass != methodDecl.binding.declaringClass) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\tTypeDeclaration type = (TypeDeclaration) referenceContext;", "+\t\t\t\tif (field.declaringClass != type.binding) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63c9d581066a9dd8f2b0088c0b1fa15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate int computePriority(CategorizedProblem problem)", "signatureAfterChange": "  private int computePriority(CategorizedProblem problem)", "diff": ["-\tprivate int computePriority(CategorizedProblem problem){", "+", "+private int computePriority(CategorizedProblem problem){", "+\tfinal int P_STATIC = 10000;", "+\tfinal int P_OUTSIDE_METHOD = 40000;", "+\tfinal int P_FIRST_ERROR = 20000;", "+\tfinal int P_ERROR = 100000;", "-\t\tfinal int P_STATIC = 10000;", "-\t\tfinal int P_OUTSIDE_METHOD = 40000;", "-\t\tfinal int P_FIRST_ERROR = 20000;", "-\t\tfinal int P_ERROR = 100000;", "-\t\t", "-\t\tint priority = 10000 - problem.getSourceLineNumber(); // early problems first", "-\t\tif (priority < 0) priority = 0;", "-\t\tif (problem.isError()){", "-\t\t\tpriority += P_ERROR;", "-\t\t}", "-\t\tReferenceContext context = problemsMap == null ? null : (ReferenceContext) problemsMap.get(problem);", "-\t\tif (context != null){", "-\t\t\tif (context instanceof AbstractMethodDeclaration){", "-\t\t\t\tAbstractMethodDeclaration method = (AbstractMethodDeclaration) context;", "-\t\t\t\tif (method.isStatic()) {", "-\t\t\t\t\tpriority += P_STATIC;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tpriority += P_OUTSIDE_METHOD;", "+\tint priority = 10000 - problem.getSourceLineNumber(); // early problems first", "+\tif (priority < 0) priority = 0;", "+\tif (problem.isError()){", "+\t\tpriority += P_ERROR;", "+\t}", "+\tReferenceContext context = this.problemsMap == null ? null : (ReferenceContext) this.problemsMap.get(problem);", "+\tif (context != null){", "+\t\tif (context instanceof AbstractMethodDeclaration){", "+\t\t\tAbstractMethodDeclaration method = (AbstractMethodDeclaration) context;", "+\t\t\tif (method.isStatic()) {", "+\t\t\t\tpriority += P_STATIC;", "-\t\t\tif (firstErrors.contains(problem)){ // if context is null, firstErrors is null too", "-\t\t\t  priority += P_FIRST_ERROR;", "-\t\t    }", "-\t\treturn priority;", "+\t\tif (this.firstErrors.contains(problem)){ // if context is null, firstErrors is null too", "+\t\t  priority += P_FIRST_ERROR;", "+\t    }", "+\t} else {", "+\t\tpriority += P_OUTSIDE_METHOD;", "+\treturn priority;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdbad7e292597b5b9180a7a0d5775e1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public boolean forcedToBeRaw(ReferenceContext referenceContext)", "signatureAfterChange": " public boolean forcedToBeRaw(ReferenceContext referenceContext)", "diff": ["-\t\t\t\t\tif (field.declaringClass != methodDecl.binding.declaringClass) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\tif (TypeBinding.notEquals(field.declaringClass, methodDecl.binding.declaringClass)) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "-\t\t\t\t\tif (field.declaringClass != type.binding) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\t\tif (TypeBinding.notEquals(field.declaringClass, type.binding)) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "-\t\t\t\tif (field.declaringClass != methodDecl.binding.declaringClass) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\tif (TypeBinding.notEquals(field.declaringClass, methodDecl.binding.declaringClass)) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "-\t\t\t\tif (field.declaringClass != type.binding) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962", "+\t\t\t\tif (TypeBinding.notEquals(field.declaringClass, type.binding)) { // inherited raw field, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=337962"]}], "num": 62259}
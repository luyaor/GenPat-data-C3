{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "154b4bf10c175e7000602a862f2ad9db", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d582a9035d36a4cbf92f0081926b5793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 122, "signatureBeforeChange": " protected void consumeToken(int token)", "signatureAfterChange": " protected void consumeToken(int token)", "diff": ["-\t\t\t\t\tswitch(previous) {", "-\t\t\t\t\t\tcase TokenNameRPAREN :", "-\t\t\t\t\t\t\tswitch(previousKind) {", "-\t\t\t\t\t\t\t\tcase K_BETWEEN_IF_AND_RIGHT_PAREN :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, IF);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase K_BETWEEN_CATCH_AND_RIGHT_PAREN :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, CATCH);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase K_BETWEEN_WHILE_AND_RIGHT_PAREN :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, WHILE);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase K_BETWEEN_SWITCH_AND_RIGHT_PAREN :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, SWITCH);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase K_BETWEEN_FOR_AND_RIGHT_PAREN :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, FOR);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, SYNCHRONIZED);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TokenNametry :", "-\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, TRY);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TokenNamedo:", "-\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, DO);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tif (kind == K_CONTROL_STATEMENT_DELIMITER) {", "+\t\t\t\t\t\tint info = topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER);", "+\t\t\t\t\t\tpopElement(K_CONTROL_STATEMENT_DELIMITER);", "+\t\t\t\t\t\tif (info == IF) {", "+\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, IF, this.expressionStack[this.expressionPtr]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, info);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch(previous) {", "+\t\t\t\t\t\t\tcase TokenNameRPAREN :", "+\t\t\t\t\t\t\t\tswitch(previousKind) {", "+\t\t\t\t\t\t\t\t\tcase K_BETWEEN_CATCH_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, CATCH);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase K_BETWEEN_SWITCH_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, SWITCH);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, SYNCHRONIZED);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase TokenNametry :", "+\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, TRY);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase TokenNamedo:", "+\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, DO);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpushOnElementStack(K_CONTROL_STATEMENT_DELIMITER, IF, this.expressionStack[this.expressionPtr]);", "+\t\t\t\t\t\t\tpushOnElementStack(K_CONTROL_STATEMENT_DELIMITER, WHILE);", "+\t\t\t\t\t\t\tpushOnElementStack(K_CONTROL_STATEMENT_DELIMITER, FOR);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameelse:", "+\t\t\t\tif (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_CONTROL_STATEMENT_DELIMITER) {", "+\t\t\t\t\tpopElement(K_CONTROL_STATEMENT_DELIMITER);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb6b3245523cbab87f962447cbe1fccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "69b02d68015b1f30ee38d1576a843274517957c7", "commitAfterChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected void consumeToken(int token)", "signatureAfterChange": " protected void consumeToken(int token)", "diff": ["+\t}", "+\tif(canBeExplicitConstructor == NEXTTOKEN) {", "+\t\tcanBeExplicitConstructor = YES;", "+\t} else {", "+\t\tcanBeExplicitConstructor = NO;", "-\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "+\t\t\t\t\tswitch(previous) {", "+\t\t\t\t\t\tcase TokenNameRPAREN :", "+\t\t\t\t\t\t\tswitch(previousKind) {", "+\t\t\t\t\t\t\t\tcase K_BETWEEN_IF_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, IF);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase K_BETWEEN_CATCH_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, CATCH);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase K_BETWEEN_WHILE_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, WHILE);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase K_BETWEEN_SWITCH_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, SWITCH);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase K_BETWEEN_FOR_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, FOR);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, SYNCHRONIZED);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TokenNametry :", "+\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, TRY);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TokenNamedo:", "+\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER, DO);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "-\t\t\t\tpopElement(K_BETWEEN_CATCH_AND_RIGHT_PAREN);", "+\t\t\t\tswitch(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "+\t\t\t\t\tcase K_BETWEEN_CATCH_AND_RIGHT_PAREN :", "+\t\t\t\t\t\tpopElement(K_BETWEEN_CATCH_AND_RIGHT_PAREN);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_IF_AND_RIGHT_PAREN :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_BETWEEN_IF_AND_RIGHT_PAREN);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_WHILE_AND_RIGHT_PAREN :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_BETWEEN_WHILE_AND_RIGHT_PAREN);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_FOR_AND_RIGHT_PAREN :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_BETWEEN_FOR_AND_RIGHT_PAREN);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_SWITCH_AND_RIGHT_PAREN :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_BETWEEN_SWITCH_AND_RIGHT_PAREN);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_INSIDE_THROW_STATEMENT", "-\t\t\t\t\t&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "-\t\t\t\t\tpopElement(K_INSIDE_THROW_STATEMENT);", "-\t\t\t\t} else if (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_INSIDE_RETURN_STATEMENT", "-\t\t\t\t\t&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth){", "-\t\t\t\t\tpopElement(K_INSIDE_RETURN_STATEMENT);", "+\t\t\t\tswitch(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "+\t\t\t\t\tcase K_INSIDE_THROW_STATEMENT :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_THROW_STATEMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_INSIDE_RETURN_STATEMENT :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_RETURN_STATEMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_INSIDE_ASSERT_STATEMENT :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_ASSERT_STATEMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t", "+\t\t\tcase TokenNameif:", "+\t\t\t\tpushOnElementStack(K_BETWEEN_IF_AND_RIGHT_PAREN, bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNamewhile:", "+\t\t\t\tpushOnElementStack(K_BETWEEN_WHILE_AND_RIGHT_PAREN, bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNamefor:", "+\t\t\t\tpushOnElementStack(K_BETWEEN_FOR_AND_RIGHT_PAREN, bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameswitch:", "+\t\t\t\tpushOnElementStack(K_BETWEEN_SWITCH_AND_RIGHT_PAREN, bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNamesynchronized:", "+\t\t\t\tpushOnElementStack(K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN, bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameassert:", "+\t\t\t\tpushOnElementStack(K_INSIDE_ASSERT_STATEMENT, this.bracketDepth);", "+\t\t\t\tbreak;"]}], "num": 6565}
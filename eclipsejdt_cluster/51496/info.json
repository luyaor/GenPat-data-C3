{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13a09dff371c508a4516f684378c2c03", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034e0538e8783f3ffef4e9754f66f9f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "f2468e3abae9ed1db235796d801e7dc64df652f1", "commitAfterChange": "b701269cf27e9d3bbdf6292c372ecccae76d0d54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["-\t\t\t\tclassScope.enclosingSourceType(),", "+\t\t\t\t\tclassScope.enclosingSourceType(),", "-\t\tint enumCount = 0;", "-\t\tif (declaringType.fields != null) {", "-\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "-\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "-\t\t\t\tif (fieldDecl.isStatic()) {", "-\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "-\t\t\t\t}", "-\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\tenumCount++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "-\t\tif (enumCount > 0) {", "-\t\t\tif (declaringType.fields != null) {", "-\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "-\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "-\t\t\t\tcodeStream.anewarray(declaringType.binding);", "-\t\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "-\t\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "-\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "-\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "-\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "-\t\t\t\t\t\tcodeStream.aastore();", "+\t\tfinal FieldDeclaration[] fieldDeclarations = declaringType.fields;", "+\t\tif (declaringType.getKind() == IGenericType.ENUM) {", "+\t\t\tint enumCount = 0;", "+\t\t\tint notEnumConstants = 0;", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tenumCount++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnotEnumConstants++;", "+\t\t\t\t\t\t}", "-\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t}", "+\t\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "+\t\t\tif (enumCount > 0) {", "+\t\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "+\t\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "+\t\t\t\t\tcodeStream.anewarray(declaringType.binding);", "+\t\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "+\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "+\t\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "+\t\t\t\t\t\t\tcodeStream.aastore();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (notEnumConstants != 0) {", "+\t\t\t\t// if fields that are not enum constants need to be generated (static initializer/static field)", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic() && fieldDecl.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d67847b4bc693dae88518d8d9d1f3d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "55f209d341e5b4a7686ec5f19b7f1d49ca53b06d", "commitAfterChange": "500b16b904cdef65e8101789f80e15e9737f379a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream); ", "-\t\t\tif (valueRequired) {", "-\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\t\tcodeStream.arraylength();", "-\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\t\t\tif (lastFieldBinding != null) {", "+\t\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\t\t\tif (lastFieldBinding.isConstantValue()) {", "+\t\t\t\t\tif (!isStatic){", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant(), implicitConversion);", "+\t\t\t\t\t}", "-\t\t\t\t\tif (lastFieldBinding.isConstantValue()) {", "-\t\t\t\t\t\tif (!lastFieldBinding.isStatic()){", "-\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\tif (valueRequired  || currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tSyntheticMethodBinding accessor =", "+\t\t\t\t\t\t\t\tsyntheticReadAccessors == null", "+\t\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "+\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\t\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\t\tswitch (lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!isStatic){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t// inline the last field constant", "-\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant(), implicitConversion);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tSyntheticMethodBinding accessor =", "-\t\t\t\t\t\t\tsyntheticReadAccessors == null", "-\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "-\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tif (lastFieldBinding != null && !lastFieldBinding.isStatic()){", "-\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t}", "-\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d68ebdee5166036744ac56bb4471d80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "55f209d341e5b4a7686ec5f19b7f1d49ca53b06d", "commitAfterChange": "500b16b904cdef65e8101789f80e15e9737f379a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tboolean complyTo14 = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\t\t\tif (needValue && !lastFieldBinding.isStatic()) {", "+\t\t\t\tif ((needValue || complyTo14) && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\tif (needValue) {", "-\t\t\t\t\t\tMethodBinding accessor =", "-\t\t\t\t\t\t\tsyntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "-\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\tif (lastFieldBinding.isConstantValue()) {", "-\t\t\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant(), 0);", "-\t\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\t\tif (lastFieldBinding.isConstantValue()) {", "+\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant(), 0);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (needValue || complyTo14) {", "+\t\t\t\t\t\t\tMethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "+\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t}"]}], "num": 51496}
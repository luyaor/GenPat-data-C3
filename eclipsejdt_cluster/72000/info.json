{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f96bd974c58b55e7bb753dc6a47e70b7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5ceda599ab593adabfba6589649eaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": " \tpublic void test058a()", "signatureAfterChange": " \tpublic void test058a()", "diff": ["-\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo2(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"Erasure of method foo2(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo2(T) is the same as another method in type X<A>\\n\" +", "-\t\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo2(A) is the same as another method in type X<A>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbc4fd885468fa0f9c809957e2744be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C5\\n\" +", "-\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Y>) is the same as another method in type X.C6\\n\" +", "-\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"Erasure of method foo(A<Z>) is the same as another method in type X.C6\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31c219971bf1cce9d2a7d8787189e297", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "232201d6380e7830296a82a7b3422a333db36b2e", "commitAfterChange": "378f419edc5509790bbfa3083244109f6abafbe2", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " public void test135()", "signatureAfterChange": " public void test135()", "diff": ["-\t\t\"\t^^^^\\n\" +", "+\t\t\"\t  ^^\\n\" +", "-\t\t\"\t^^^^^^^^\\n\" +", "+\t\t\"\t     ^^^\\n\" +", "-\t\t\"\t                ^^^^\\n\" +", "+\t\t\"\t                  ^^\\n\" +", "-\t\t\"\t                ^^^^^^^^\\n\" +", "+\t\t\"\t                     ^^^\\n\" +", "-\t\t\"\t^^^^\\n\" +", "+\t\t\"\t  ^^\\n\" +", "-\t\t\"\t^^^^^^^^\\n\" +", "+\t\t\"\t     ^^^\\n\" +", "-\t\t\"\t                   ^^^^\\n\" +", "+\t\t\"\t                     ^^\\n\" +", "-\t\t\"\t                   ^^^^^^^^\\n\" +", "+\t\t\"\t                        ^^^\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73ba241fcae96973d76f8351cbe4801b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java", "commitBeforeChange": "61a3328acf71aecf2ed394549a809b489d124796", "commitAfterChange": "93064d94293a0408d3fca5808908fb56902798a3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testBug457007()", "signatureAfterChange": " public void testBug457007()", "diff": ["-\t\t\"public class Test  {\\n\" +", "-\t\t\t\"void method() {\\n\" +", "-\t\t\t\"  class Bar {}\\n\" +", "-\t\t\t\"  java.util.function.Function<String, Bar> f = str -> new Bar();\\n\" +", "-\t\t\t\"}\\n\" +", "-\t\t\t\"public static void main(String[] args) {\\n\" +", "-\t\t\t\"  System.out.println(\\\"done\\\");\\n\" +", "-\t\t\t\"}\\n\" +", "+\t\t\"public class Test {\\n\" +", "+\t\t\"\tvoid method() {\\n\" +", "+\t\t\"  \t\tclass Bar {}\\n\" +", "+\t\t\"  \t\tjava.util.function.Function<String, Bar> f = str -> new Bar();\\n\" +", "+\t\t\"\t}\\n\" +", "+\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\"\t\tSystem.out.println(\\\"done\\\");\\n\" +", "+\t\t\"\t}\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76aa206994900f06a2fa1a78ad0d5e63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "3de46f74e60c4a3809d64f36594b156b755e8151", "commitAfterChange": "a278a6d0aa65f732809dc346bd96a708d28563bd", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void testBug103304f()", "signatureAfterChange": " \tpublic void testBug103304f()", "diff": ["-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"Javadoc: Invalid qualification for member type constructor\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d2a52683ef9e835f966142671ba361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test025()", "signatureAfterChange": "  \tpublic void test025()", "diff": ["-\t\t\t\t\"\tInteger test() { return 1; }\\n\" + ", "+\t\t\t\t\"\t@Override Integer test() { return 1; }\\n\" + ", "-\t\t\t\"\tInteger test() { return 1; }\\n\" + ", "-\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"\t@Override Integer test() { return 1; }\\n\" + ", "+\t\t\t\"\t          ^^^^^^^\\n\" + ", "-\t\t\t\t\"\tInteger[] test() { return new Integer[] {2}; }\\n\" + ", "+\t\t\t\t\"\t@Override Integer[] test() { return new Integer[] {2}; }\\n\" + ", "-\t\t\t\"\tInteger[] test() { return new Integer[] {2}; }\\n\" + ", "-\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"\t@Override Integer[] test() { return new Integer[] {2}; }\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^\\n\" + ", "-\t\t\t\t\"\t<T> T test(T t) { return t; }\\n\" + ", "+\t\t\t\t\"\t@Override <T> T test(T t) { return t; }\\n\" + ", "-\t\t\t\t\"\t<U> Integer test(U u) { return 1; }\\n\" + ", "+\t\t\t\t\"\t@Override <U> Integer test(U u) { return 1; }\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af500268708124126ef5ce8a71715bf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 217, "signatureBeforeChange": " \tpublic void test215()", "signatureAfterChange": " \tpublic void test215()", "diff": ["-\t\t\t\"     0  aload_0\\n\" + ", "+\t\t\t\"     0  aload_0 [args]\\n\" + ", "-\t\t\t\"     5  astore_1\\n\" + ", "+\t\t\t\"     5  astore_1 [i]\\n\" + ", "-\t\t\t\"    10  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    13  aload_1\\n\" + ", "-\t\t\t\"    14  invokevirtual #27 <Method java/io/PrintStream.println(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\t\"    17  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    20  ldc #29 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\t\"    22  invokevirtual #32 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\t\"    10  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    13  aload_1 [i]\\n\" + ", "+\t\t\t\"    14  invokevirtual java/io/PrintStream.println(Ljava/lang/Object;)V [27]\\n\" + ", "+\t\t\t\"    17  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    20  ldc <String \\\"SUCCESS\\\"> [29]\\n\" + ", "+\t\t\t\"    22  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [32]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56543d993f61f3327c6d92a773364ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [g1.t.s.def.NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [g1.t.s.def.NonGeneric.GenericMember<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [g1.t.s.def.NonGeneric.GenericMember<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [g1.t.s.def.NonGeneric.GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7ffe2e5d3f255cc845f98b9d43c4145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void testTypeRefGenericsTest10_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest10_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test10/Test.java test10.Test.y1 [\tY<\ufffd|Y|\ufffd<? extends Exception>> y1;@39] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.y2 [\tY<\ufffd|X|\ufffd<? extends Object, ? super String, ? extends Exception>> y2;@70] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<\ufffd|Y|\ufffd<? super Object>, Y<? extends String>, Y<? super Exception>> x1;@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, \ufffd|Y|\ufffd<? extends String>, Y<? super Exception>> x1;@154] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends String>, \ufffd|Y|\ufffd<? super Exception>> x1;@175] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<\ufffd|X|\ufffd<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@204] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, \ufffd|X|\ufffd<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@261] EXACT_MATCH\\n\" +", "-\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, \ufffd|X|\ufffd<? extends Exception, ? super Exception, ? extends Exception>> x2;@312] EXACT_MATCH\"", "+\t\t\"src/test10/Test.java test10.Test.y1 [\tY<!|Y|!<? extends Exception>> y1;@39] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.y2 [\tY<!|X|!<? extends Object, ? super String, ? extends Exception>> y2;@70] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<!|Y|!<? super Object>, Y<? extends String>, Y<? super Exception>> x1;@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, !|Y|!<? extends String>, Y<? super Exception>> x1;@154] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x1 [\tX<Y<? super Object>, Y<? extends String>, !|Y|!<? super Exception>> x1;@175] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<!|X|!<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@204] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, !|X|!<? super String, ? super String, ? super String>, X<? extends Exception, ? super Exception, ? extends Exception>> x2;@261] EXACT_MATCH\\n\" +", "+\t\t\"src/test10/Test.java test10.Test.x2 [\tX<X<? extends Object, ? extends Object, ? extends Object>, X<? super String, ? super String, ? super String>, !|X|!<? extends Exception, ? super Exception, ? extends Exception>> x2;@312] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca99f7feb73da47016dbcaaa0999b855", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 406, "methodNumberAfterChange": 406, "signatureBeforeChange": " public void testBug317719g() throws Exception", "signatureAfterChange": " public void testBug317719g() throws Exception", "diff": ["-\t\t\t\"Method doIt(Collection<int[]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt(Collection<int[][]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt2(Collection<int[]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt2(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\"Method doIt2(Collection<int[][]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\"Erasure of method doIt2(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt(Collection<int[]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt(Collection<int[][]>) has the same erasure doIt(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt2(Collection<int[]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt2(Collection<int[]>) is the same as another method in type X<Z>\\n\" +", "-\t\t\t\t\"Method doIt2(Collection<int[][]>) has the same erasure doIt2(Collection<E>) as another method in type X<Z>\\n\" + ", "+\t\t\t\t\"Erasure of method doIt2(Collection<int[][]>) is the same as another method in type X<Z>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea1ebd09f170c0225bafb546df926a55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void testBug286668c_40w() throws JavaModelException", "signatureAfterChange": " public void testBug286668c_40w() throws JavaModelException", "diff": ["-\t\t\"\t\tbuilder.append(\\\"abc\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\\\"def\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"ghi\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"jkl\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"mno\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"pqr\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"stu\\\").append(\\n\" +", "-\t\t\"\t\t\t\t\t\t\\\"vwx\\\")\\n\" +", "-\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" +", "+\t\t\"\t\tbuilder.append(\\\"abc\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"def\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"ghi\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"jkl\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"mno\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"pqr\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"stu\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"vwx\\\")\\n\" + ", "+\t\t\"\t\t\t\t.append(\\\"yz\\\");\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed89bf69ccc27e49edd348e5aff867b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>.MemberGeneric<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>.MemberGeneric<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>.MemberGeneric<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>.MemberGeneric<? extends Throwable>] EQUIVALENT_MATCH\","]}], "num": 72000}
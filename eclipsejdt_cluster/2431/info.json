{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "572a4287960059cd0b0ed42e71154105", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f149ad557d43dc4fe5cbea50e1e662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "2cd08e31ebe03f16766f3751a8572a8d9fcd2d34", "commitAfterChange": "0e2d9a71d6773265a96182a660f0578d3bf2fa9b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": "\r public String[] getParameterNames() throws JavaModelException", "diff": ["-\r", "-\t\t\tchar[] source = mapper.findSource(type);\r", "-\t\t\tif (source != null){\r", "-\t\t\t\tmapper.mapSource(type, source);\r", "-\t\t\t\tISourceRange sourceRange = getSourceRange();\r", "-\t\t\t\tif (source != null & sourceRange != null && sourceRange != SourceMapper.fgUnknownRange) {\r", "-\t\t\t\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "-\t\t\t\t\tDecodeParametersNames decoder = new DecodeParametersNames();\r", "-\t\t\t\t\tSourceElementParser parser = new SourceElementParser(decoder, factory, new CompilerOptions(JavaCore.getOptions()));\r", "-\t\t\t\t\tint start = sourceRange.getOffset();\r", "-\t\t\t\t\tint end = start + sourceRange.getLength();\r", "-\t\t\t\t\tparser.parseTypeMemberDeclarations(source, start, end);\r", "-\t\t\t\t\tfParameterNames = decoder.getParametersNames();\r", "+\t\t\tchar[][] parameterNames = mapper.getMethodParameterNames(this);\r", "+\t\t\t\r", "+\t\t\t// map source and try to find parameter names\r", "+\t\t\tif(parameterNames == null) {\r", "+\t\t\t\tchar[] source = mapper.findSource(type);\r", "+\t\t\t\tif (source != null){\r", "+\t\t\t\t\tmapper.mapSource(type, source);\r", "+\t\t\t\t}\r", "+\t\t\t\tparameterNames = mapper.getMethodParameterNames(this);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t// if parameter names exist, convert parameter names to String array\r", "+\t\t\tif(parameterNames != null) {\r", "+\t\t\t\tfParameterNames = new String[parameterNames.length];\r", "+\t\t\t\tfor (int i = 0; i < parameterNames.length; i++) {\r", "+\t\t\t\t\tfParameterNames[i] = new String(parameterNames[i]);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe457c125d6da3556c6b4ebe654b247f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "c7e96d986053614747f035da8c0e25c52c212a4c", "commitAfterChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": "\r public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "-\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "-\t\tfParameterNames = new String[paramCount];\r", "-\t\tfor (int i = 0; i < paramCount; i++) {\r", "-\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\tISourceRange sourceRange = getSourceRange();\r", "+\t\tif (sourceRange != null && sourceRange != SourceMapper.fgUnknownRange) {\r", "+\t\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "+\t\t\tDecodeParametersNames decoder = new DecodeParametersNames();\r", "+\t\t\tSourceElementParser parser = new SourceElementParser(decoder, factory);\r", "+\t\t\tint start = sourceRange.getOffset();\r", "+\t\t\tint end = start + sourceRange.getLength();\r", "+\t\t\tparser.parseTypeMemberDeclarations(getSourceMapper().findSource((IType) getParent()), start, end);\r", "+\t\t\tfParameterNames = decoder.getParametersNames();\r", "+\t\t\tif (fParameterNames == null) {\r", "+\t\t\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "+\t\t\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "+\t\t\t\tfParameterNames = new String[paramCount];\r", "+\t\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "+\t\t\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "+\t\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "+\t\t\tfParameterNames = new String[paramCount];\r", "+\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "+\t\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\t\t}\r"]}], "num": 2431}
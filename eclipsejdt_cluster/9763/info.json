{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "841ecd9b76068efffb9625d5a1c33f37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2558d43311b0b7ba76d9139b373ffbd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "cf8658c9364eba69da99d0cd3f2810816b79f850", "commitAfterChange": "2d8c25e0e9e9ed7348d0636c5c7a1bbc627b899a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\tpublic IBuffer createBuffer(ICompilationUnit workingCopy)", "signatureAfterChange": " \tpublic void testSearch1() throws CoreException", "diff": ["-\t\tpublic IBuffer createBuffer(ICompilationUnit workingCopy) {", "-\t\t\treturn new TestBuffer(workingCopy);", "-\t\t}", "+\t */", "+\tpublic void testSearch1() throws CoreException {", "+\t\tICompilationUnit workingCopy = null;", "+\t\ttry {", "+\t\t\tICompilationUnit cu = getCompilationUnit(\"P/Y.java\");", "+\t\t\tTestWorkingCopyOwner owner = new TestWorkingCopyOwner();", "+\t\t\tworkingCopy = cu.getWorkingCopy(owner, null, null);", "+\t\t\tworkingCopy.getBuffer().setContents(", "+\t\t\t\t\"public class Y {\\n\" +", "+\t\t\t\t\"  X field;\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t);", "+\t\t\tworkingCopy.makeConsistent(null);", "+", "+\t\t\tJavaSearchTests.JavaSearchResultCollector resultCollector = new JavaSearchTests.JavaSearchResultCollector();", "+\t\t\tnew SearchEngine(owner).search(", "+\t\t\t\tgetWorkspace(), ", "+\t\t\t\t\"X\", ", "+\t\t\t\tIJavaSearchConstants.TYPE,", "+\t\t\t\tIJavaSearchConstants.REFERENCES, ", "+\t\t\t\tSearchEngine.createWorkspaceScope(), ", "+\t\t\t\tresultCollector);", "+\t\t\tassertEquals(", "+\t\t\t\t\"Y.java Y.field [X]\",", "+\t\t\t\tresultCollector.toString());", "+\t\t} finally {", "+\t\t\tif (workingCopy != null) {", "+\t\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "610bdff5df02e974ca1f7359f83b8944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java", "commitBeforeChange": "00338c3111852fab8d49e70bb59dac99d5218c19", "commitAfterChange": "449d3bb7916ac91de9bd094f08fc5a39f23e654f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void testCommit2() throws CoreException", "signatureAfterChange": " public void testCommit2() throws CoreException", "diff": ["-\t\tthis.createJavaProject(\"SimpleProject\", new String[] {\"src\"}, \"bin\");", "+\t\tthis.createJavaProject(\"JavaProject\", new String[] {\"src\"}, \"bin\");", "+\t\tthis.createFolder(\"/JavaProject/src/native.1\");", "+\t\tString source = ", "+\t\t\t\"class X {}\";", "+\t\tIFile file = this.createFile(\"/JavaProject/src/native.1/X.java\", source);", "+\t\tICompilationUnit cu = JavaCore.createCompilationUnitFrom(file);", "+\t\tcopy = (ICompilationUnit) cu.getWorkingCopy();", "+\t\t", "+\t\tIBuffer workingCopyBuffer = copy.getBuffer();", "+\t\tassertTrue(\"Working copy buffer should not be null\", workingCopyBuffer != null);", "+\t\tString newContents = ", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public void foo() {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\";", "+\t\t\t", "+\t\tworkingCopyBuffer.setContents(newContents);", "+\t\tcopy.reconcile(true, null);", "+\t\tcopy.commit(true, null);", "+\t\t", "+\t\tIFile originalFile = (IFile)cu.getResource();", "+\t\tassertSourceEquals(", "+\t\t\t\"Unexpected contents\", ", "+\t\t\tnewContents, ", "+\t\t\tnew String(Util.getResourceContentsAsCharArray(originalFile)));", "+\t} catch(JavaModelException e) {", "+\t\te.printStackTrace();\t\t", "+\t\tassertTrue(\"No exception should have occurred: \"+ e.getMessage(), false);", "+\t} finally {", "+\t\tif (copy != null) copy.destroy();", "+\t\tthis.deleteProject(\"Project\");", "+\t}", "+}"]}], "num": 9763}
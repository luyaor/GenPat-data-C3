{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "825ee8eed78db49d48c2e9b67ed0d6fd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ab5754b27fed51d84be934e7cd7b15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["-\tif (binding.isPrivate() && (currentScope.enclosingSourceType() != binding.declaringClass)) {\r", "-\t\tsyntheticWriteAccessor = binding.getSyntheticWriteAccess();\r", "+\tif (binding.isPrivate()) {\r", "+\t\tif (currentScope.enclosingSourceType() != binding.declaringClass) {\r", "+\t\t\tsyntheticWriteAccessor = ((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, false);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);\r", "+\t\t}\r", "+\t\t\r", "+\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super\r", "+\r", "+\t\t// qualified super need emulation always\r", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);\r", "+\t\tsyntheticWriteAccessor = destinationType.addSyntheticMethod(binding, false);\r", "+\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);\r", "+\r", "+\t} else if (binding.isProtected()) {\r", "+\r", "+\t\tSourceTypeBinding enclosingSourceType;\r", "+\t\tif (((bits & DepthMASK) != 0) \r", "+\t\t\t\t&& binding.declaringClass.getPackage() \r", "+\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()){\r", "+\r", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\r", "+\t\t\tsyntheticWriteAccessor = currentCompatibleType.addSyntheticMethod(binding, false);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(binding, this);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "608060c6b48b6f1b071df5991ec47a44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding)", "signatureAfterChange": "\r \tpublic void manageSyntheticWriteAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding)", "diff": ["- */\r", "-public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding) {\r", "-\tif (fieldBinding.isPrivate() && fieldBinding.declaringClass != currentScope.enclosingSourceType()) {\r", "-\t\tsyntheticWriteAccessor = fieldBinding.getSyntheticWriteAccess();\r", "-\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(fieldBinding, this);\r", "-\t}\r", "-}\r", "+\t */\r", "+\tpublic void manageSyntheticWriteAccessIfNecessary(\r", "+\t\tBlockScope currentScope,\r", "+\t\tFieldBinding fieldBinding) {\r", "+\r", "+\t\tif (fieldBinding.isPrivate()) {\r", "+\t\t\tif (fieldBinding.declaringClass != currentScope.enclosingSourceType()) {\r", "+\t\t\t\tsyntheticWriteAccessor = ((SourceTypeBinding) fieldBinding.declaringClass)\r", "+\t\t\t\t\t\t\t\t\t\t\t.addSyntheticMethod(fieldBinding, false);\r", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(fieldBinding, this);\r", "+\t\t\t}\r", "+\t\t} else if (fieldBinding.isProtected()){\r", "+\t\t\tint depth = fieldBinding == binding ? (bits & DepthMASK) >> DepthSHIFT : otherDepths[otherDepths.length-1];\r", "+\t\t\tif (depth > 0 && (fieldBinding.declaringClass.getPackage()\r", "+\t\t\t\t\t\t\t\t!= currentScope.enclosingSourceType().getPackage())) {\r", "+\t\t\t\tsyntheticWriteAccessor = ((SourceTypeBinding) currentScope.enclosingSourceType().enclosingTypeAt(depth))\r", "+\t\t\t\t\t\t\t\t\t\t\t.addSyntheticMethod(fieldBinding, false);\r", "+\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldWriteAccess(fieldBinding, this);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}], "num": 34277}
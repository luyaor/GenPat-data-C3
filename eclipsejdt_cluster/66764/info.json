{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bba6803717a3f4234e519f1c0b8faa59", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836d6b471dffdf7966db6ba08d9ce9e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "471b30fcd9175fdd69611c88984722b9e0b5e4ee", "commitAfterChange": "1a356ccfb3b5b00256393a405276ebc654766b8b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void assertSourceEquals(String message, String expected, String actual)", "signatureAfterChange": " protected void assertSourceEquals(String message, String expected, String actual)", "diff": ["-\tif (ASSERT_EQUALS_STRINGS) {", "-\t\ttry {", "+\ttry {", "+\t\tif (ASSERT_EQUALS_STRINGS) {", "+\t\t} else {", "+\t\t\tassertTrue(message, actual.equals(expected));", "-\t\tcatch (ComparisonFailure cf) {", "-\t\t\tif (IGNORE_WHITESPACES) {", "-\t\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "-\t\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "-\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": Different spaces than old formatter for \"+this.file.getName());", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "-\t\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "-\t\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "-\t\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "-\t\t\t\t\tthis.spaceFailures++;", "-\t\t\t\t\tSystem.out.println(\"n\ufffd\"+this.spaceFailures+\": Different line leading spaces than old formatter for \"+this.file.getName());", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "+\t}", "+\tcatch (ComparisonFailure cf) {", "+\t\tif (IGNORE_WHITESPACES) {", "+\t\t\tString trimmedExpected = ModelTestsUtil.removeWhiteSpace(expected);", "+\t\t\tString trimmedActual= ModelTestsUtil.removeWhiteSpace(actual);", "+\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\tthis.whitespacesFailures.add(this.path);", "+\t\t\t\treturn;", "-\t\t\tthis.failures++;", "-\t\t\tASSERT_EQUALS_STRINGS = this.failures < MAX_FAILURES;", "-\t\t\tthrow cf;", "+\t\t} else if (IGNORE_LINES_LEADING_WHITESPACES) {", "+\t\t\tString trimmedExpected = ModelTestsUtil.trimLinesLeadingWhitespaces(expected);", "+\t\t\tString trimmedActual= ModelTestsUtil.trimLinesLeadingWhitespaces(actual);", "+\t\t\tif (trimmedExpected.equals(trimmedActual)) {", "+\t\t\t\tthis.leadingWhitespacesFailures.add(this.path);", "+\t\t\t\treturn;", "+\t\t\t}", "-\t} else {", "-\t\tassertTrue(message, actual.equals(expected));", "+\t\tthis.failures++;", "+\t\tASSERT_EQUALS_STRINGS = this.failures < MAX_FAILURES;", "+\t\tthrow cf;", "+\t}", "+\tcatch (AssertionFailedError afe) {", "+\t\tthis.failures++;", "+\t\tthrow afe;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab756417e240da640173f77d1944405", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": " public void goto_(BranchLabel label)", "signatureAfterChange": " public void goto_(BranchLabel label)", "diff": ["-\tif (DEBUG) System.out.println(this.position + \"\\t\\tgoto:\"+label); //$NON-NLS-1$", "-\tif (DEBUG && chained) {", "-\t\tif (DEBUG) {", "-\t\t\tif (this.lastAbruptCompletion == this.position) {", "-\t\t\t\tSystem.out.println(\"\\t\\t\\t\\t<branch chaining - goto eliminated : \"+this.position+\",\"+label+\">\");//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t} else {", "-\t\t\t\tSystem.out.println(\"\\t\\t\\t\\t<branch chaining - goto issued : \"+this.position+\",\"+label+\">\");//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 66764}
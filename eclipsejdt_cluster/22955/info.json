{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b6491ef54fefc9ff81d4aa85d7bb06c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c369932e458c585018ca3c52545313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "19a809bd1e2b2fc92385fe5f8ca9f89249ad244c", "commitAfterChange": "bcb46990486d868577608d099b51c359510600ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["+\t\tlong start = -1;", "+\t\t\tstart = System.currentTimeMillis();", "-\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\tif (!existing.equals(root))", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "-\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "-\t\t\t\t\t\troots[rootLength] = root;", "-\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\tboolean containsRoot = false;", "+\t\t\t\t\t\tfor (int j = 0; j < rootLength; j++) {", "+\t\t\t\t\t\t\tif (roots[j].equals(root)) {", "+\t\t\t\t\t\t\t\tcontainsRoot = true;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (containsRoot) {", "+\t\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\t}", "+        if (VERBOSE) {", "+            System.out.println(Thread.currentThread() + \" -> spent: \" + (start - System.currentTimeMillis()) + \"ms\");  //$NON-NLS-1$ //$NON-NLS-2$", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ece70b568c84cffe0aa5d04d15eba3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "d644fbac5b6fa9c32824a6e9c1731fdea560370f", "commitAfterChange": "a2ea211548ddb7d816d913062440866fd92fd6cc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic int generateDelta(JavaElementDelta delta, boolean addClasspathChange)", "signatureAfterChange": " \tpublic int generateDelta(JavaElementDelta delta, boolean addClasspathChange)", "diff": ["-\t\t\t\tPackageFragmentRoot[] pkgFragmentRoots = null;", "+\t\t\t\tIPackageFragmentRoot[] pkgFragmentRoots = null;", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=335986", "+\t\t\t\t\t\t// When a package fragment's corresponding resource is removed from the project, ", "+\t\t\t\t\t\t// IJavaProject#computePackageFragmentRoots() doesn't include that entry. Hence ", "+\t\t\t\t\t\t// the cache become necessary in such cases. Add the cache to the accumulatedRoots ", "+\t\t\t\t\t\t// only when it's not already present.", "+\t\t\t\t\t\tRootInfo rootInfo = (RootInfo) state.oldRoots.get(this.oldResolvedClasspath[i].getPath());", "+\t\t\t\t\t\tif (rootInfo != null && rootInfo.cache != null) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot oldRoot = rootInfo.cache;", "+\t\t\t\t\t\t\tboolean found = false;", "+\t\t\t\t\t\t\tfor (int j = 0; j < accumulatedRoots.size(); j++) {", "+\t\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) accumulatedRoots.elementAt(j);", "+\t\t\t\t\t\t\t\tif (!root.getPath().equals(oldRoot.getPath())) {", "+\t\t\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!found)", "+\t\t\t\t\t\t\t\taccumulatedRoots.add(oldRoot);", "+\t\t\t\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c274365fefc719fcb1e64b0b0d6d94a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "c13b5c8fdc5b98528c9ff5d2f4f3b65852c12b48", "commitAfterChange": "08ce0253d3f5d5ff59d7d3b857a3b4f1f87c7e61", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["+\t\tlong time = 0;", "+\t\tif (VERBOSE) {", "+\t\t\ttime = System.currentTimeMillis();", "+\t\t}", "+\t\tIPackageFragment pkgFrag = type.getPackageFragment();", "-\t\t\tIPackageFragment pkgFrag = type.getPackageFragment();", "-\t\t\t\tString pkg = type.getPackageFragment().getElementName().replace('.', '/');", "+\t\t\t\tString pkg = pkgFrag.getElementName().replace('.', '/');", "+\t\t", "+\t\tif (!areRootPathsComputed) {", "+\t\t\tcomputeAllRootPaths(type);", "+\t\t}", "+\t\t", "-\t\t\tif (source == null) {", "-\t\t\t\t// Try to recompute it and add the new root path to the rootPaths collection", "-\t\t\t\tString newRootPath = computeRootPath(name);", "-\t\t\t\tif (newRootPath != null) {", "-\t\t\t\t\tif (this.rootPaths == null) {", "-\t\t\t\t\t\tthis.rootPaths = new HashSet();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.rootPaths.add(newRootPath);", "-\t\t\t\t\tthis.rootPath = newRootPath;", "-\t\t\t\t\tsource = getSourceForRootPath(newRootPath, name);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t}", "+\t\tif (VERBOSE) {", "+\t\t\tSystem.out.println(\"spent \" + (System.currentTimeMillis() - time) + \"ms for \" + type.getElementName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df07bbdda1d644afd57fb0f6e510749a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bb49ae1f5759ef970a2a314fd9778e459f4c097c", "commitAfterChange": "31d45554331a458304a632ad1dfc3ad3337a9ef2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["-\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) packageFragments.get(pkgName);", "-\t\t\t\tif (roots == null) {", "-\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {root});", "+\t\t\t\tObject existing = this.packageFragments.get(pkgName);", "+\t\t\t\tif (existing == null) {", "+\t\t\t\t\tthis.packageFragments.put(pkgName, root);", "-\t\t\t\t\tint rootLength = roots.length;", "-\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "-\t\t\t\t\troots[rootLength] = root;", "-\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\tif (existing instanceof PackageFragmentRoot) {", "+\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) existing;", "+\t\t\t\t\t\tint rootLength = roots.length;", "+\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62f39915f3d536d2815e5cd28f58e3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bb49ae1f5759ef970a2a314fd9778e459f4c097c", "commitAfterChange": "31d45554331a458304a632ad1dfc3ad3337a9ef2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic ICompilationUnit findCompilationUnit(String qualifiedTypeName)", "signatureAfterChange": " \tpublic ICompilationUnit findCompilationUnit(String qualifiedTypeName)", "diff": ["-\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(pkgName);", "-\t\tif (roots != null) {", "-\t\t\tfor (int i= 0; i < roots.length; i++) {", "-\t\t\t\tPackageFragmentRoot root= (PackageFragmentRoot) roots[i];", "-\t\t\t\tif (!root.isArchive()) {", "-\t\t\t\t\tIPackageFragment pkg = root.getPackageFragment(pkgName);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tICompilationUnit[] cus = pkg.getCompilationUnits();", "-\t\t\t\t\t\tfor (int j = 0, length = cus.length; j < length; j++) {", "-\t\t\t\t\t\t\tICompilationUnit cu = cus[j];", "-\t\t\t\t\t\t\tif (Util.equalsIgnoreJavaLikeExtension(cu.getElementName(), cuName))", "-\t\t\t\t\t\t\t\treturn cu;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t// pkg does not exist", "-\t\t\t\t\t\t// -> try next package", "-\t\t\t\t\t}", "+\t\tObject value = this.packageFragments.get(pkgName);", "+\t\tif (value != null) {", "+\t\t\tif (value instanceof PackageFragmentRoot) {", "+\t\t\t\treturn findCompilationUnit(pkgName, cuName, (PackageFragmentRoot) value);", "+\t\t\t} else {", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) value;", "+\t\t\t\tfor (int i= 0; i < roots.length; i++) {", "+\t\t\t\t\tPackageFragmentRoot root= (PackageFragmentRoot) roots[i];", "+\t\t\t\t\tICompilationUnit cu = findCompilationUnit(pkgName, cuName, root);", "+\t\t\t\t\tif (cu != null)", "+\t\t\t\t\t\treturn cu;"]}], "num": 22955}
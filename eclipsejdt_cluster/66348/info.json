{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f4d8ed97348ee86045a62a78f4f21c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed0f1540aeba53795dc7f800959b7f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "be479df5b4bb2001cc125bb2cd5431e316d0b787", "commitAfterChange": "e5d2b54b64c5be9c6975192bdd4dd72df228563d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "signatureAfterChange": " \tprivate String processElement(ICompilationUnit unit, char[] source)", "diff": ["+\t\tdomUnit.accept(new ASTVisitor() {", "+\t\t\tpublic boolean visit(org.eclipse.jdt.core.dom.CompilationUnit compilationUnit) {", "+\t\t\t\tList types = compilationUnit.types();", "+\t\t\t\tfor (Iterator iter = types.iterator(); iter.hasNext();) {", "+\t\t\t\t\tAbstractTypeDeclaration typeDeclaration = (AbstractTypeDeclaration) iter.next();", "+\t\t\t\t\ttypeDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(typeDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration) {", "+\t\t\t\tList bodyDeclarations = annotationTypeDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tpublic boolean visit(AnonymousClassDeclaration anonymousClassDeclaration) {", "+\t\t\t\tList bodyDeclarations = anonymousClassDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration) {", "+\t\t\t\tList bodyDeclarations = typeDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tpublic boolean visit(EnumDeclaration enumDeclaration) {", "+\t\t\t\tList bodyDeclarations = enumDeclaration.bodyDeclarations();", "+\t\t\t\tfor (Iterator iter = bodyDeclarations.iterator(); iter.hasNext();) {", "+\t\t\t\t\tBodyDeclaration bodyDeclaration = (BodyDeclaration) iter.next();", "+\t\t\t\t\tbodyDeclaration.setProperty(CompilationUnitSorter.RELATIVE_ORDER, new Integer(bodyDeclaration.getStartPosition()));", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}\t\t\t", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c38da6a828e7392f4148255a68f8fa33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "7ca9f198dab5ae249453376b5f6d99317f797266", "commitAfterChange": "90457871ba3051d340feae7220f15bab37c7d551", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\ttryInfo = this.resources[i].analyseCode(currentScope, handlingContext, tryInfo);", "+\t\t\tfinal LocalDeclaration resource = this.resources[i];", "+\t\t\ttryInfo = resource.analyseCode(currentScope, handlingContext, tryInfo);", "-\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tLocalVariableBinding resourceBinding = resource.binding;", "-\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\tif(closeMethod == null) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t\t\t// extending from multiple interfaces.\t\t\t\t\t", "+\t\t\t\t\tInvocationSite site = new InvocationSite() {", "+\t\t\t\t\t\tpublic TypeBinding[] genericTypeArguments() { return null;}", "+\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "+\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+\t\t\t\t\t\tpublic void setDepth(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic void setFieldIndex(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic int sourceEnd() {return resource.sourceEnd(); }", "+\t\t\t\t\t\tpublic int sourceStart() {return resource.sourceStart(); }", "+\t\t\t\t\t\tpublic TypeBinding expectedType() { return null; }", "+\t\t\t\t\t};", "+\t\t\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t\t\t}", "+\t\t\t\tif (closeMethod != null && closeMethod.isValidBinding() && closeMethod.returnType.id == TypeIds.T_void) {", "-\t\t\ttryInfo = this.resources[i].analyseCode(currentScope, handlingContext, tryInfo);", "+\t\t\tfinal LocalDeclaration resource = this.resources[i];", "+\t\t\ttryInfo = resource.analyseCode(currentScope, handlingContext, tryInfo);", "-\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tLocalVariableBinding resourceBinding = resource.binding;", "-\t\t\t\tif (closeMethod != null && closeMethod.returnType.id == TypeIds.T_void) {", "+\t\t\t\tif(closeMethod == null) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=380112", "+\t\t\t\t\t// closeMethod could be null if the binding is from an interface", "+\t\t\t\t\t// extending from multiple interfaces.", "+\t\t\t\t\tInvocationSite site = new InvocationSite() {", "+\t\t\t\t\t\tpublic TypeBinding[] genericTypeArguments() { return null;}", "+\t\t\t\t\t\tpublic boolean isSuperAccess() {return false;}", "+\t\t\t\t\t\tpublic boolean isTypeAccess() {return false;}", "+\t\t\t\t\t\tpublic void setActualReceiverType(ReferenceBinding receiverType) {/* empty */}", "+\t\t\t\t\t\tpublic void setDepth(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic void setFieldIndex(int depth) {/* empty */ }", "+\t\t\t\t\t\tpublic int sourceEnd() {return resource.sourceEnd(); }", "+\t\t\t\t\t\tpublic int sourceStart() {return resource.sourceStart(); }", "+\t\t\t\t\t\tpublic TypeBinding expectedType() { return null; }", "+\t\t\t\t\t};", "+\t\t\t\t\tcloseMethod = this.scope.compilationUnitScope().findMethod(binding, ConstantPool.Close, new TypeBinding[0], site, false);", "+\t\t\t\t}", "+\t\t\t\tif (closeMethod != null && closeMethod.isValidBinding() && closeMethod.returnType.id == TypeIds.T_void) {"]}], "num": 66348}
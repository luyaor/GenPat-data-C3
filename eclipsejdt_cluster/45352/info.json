{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58d33b39890a8fb2974023a71c4d5a95", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6640be6b683f96f0c4e3e6ff713dc5cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java", "commitBeforeChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "commitAfterChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testModifiers1()", "signatureAfterChange": " \tpublic void testModifiers1a()", "diff": ["-// Inject an unrelated compile error to prevent class file verification. TODO revert", "-// (even lambda-enabled JRE doesn't accept now-legal modifier combinations)", "-//\t\trunConformTest(", "+\t// default methods with various modifiers, negative cases", "+\tpublic void testModifiers1a() {", "-\t\t\t\"}\\n\" +", "-\t\t\t\"public class Wrong{}\\n\"}, // TODO remove me", "-\t\t// TODO remove me:", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in I.java (at line 10)\\n\" +", "-\t\t\"\tpublic class Wrong{}\\n\" +", "-\t\t\"\t             ^^^^^\\n\" +", "-\t\t\"The public type Wrong must be defined in its own file\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\t\"}\\n\"}, ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in I.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic default synchronized void foo2() { System.exit(0); }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\"Illegal modifier for the interface method foo2; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 7)\\n\" + ", "+\t\t\t\"\tpublic default strictfp synchronized void foo4() {}\\n\" + ", "+\t\t\t\"\t                                          ^^^^^^\\n\" + ", "+\t\t\t\"Illegal modifier for the interface method foo4; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in I.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic default strictfp synchronized @Annot void foo5() {}\\n\" + ", "+\t\t\t\"\t                                                 ^^^^^^\\n\" + ", "+\t\t\t\"Illegal modifier for the interface method foo5; only public, abstract and strictfp are permitted\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f14bda65ff9584035d2f736c1718ab66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void test048()", "signatureAfterChange": " \tpublic void test048()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tnew X<X>(this) {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tX x = t;\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + "]}], "num": 45352}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d33823632c257d492b859f0acd7ed8c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0700da0be53438996eff8752b02dd004", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "ed216bad8ac7db85d4e5d7fd2492a6cf18c498b9", "commitAfterChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "signatureAfterChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["-\tint classpathSize = classpathNames.length;", "+\tfinal int classpathSize = classpathNames.length;", "-\tint problemsOccured = 0;", "+\tint counter = 0;", "-\t\tthis.classpaths[i] = getClasspath(classpathNames[i], encoding,", "+\t\tClasspath classpath = getClasspath(classpathNames[i], encoding,", "-\t\tif (this.classpaths[i] == null)", "-\t\t\tproblemsOccured++;", "+\t\ttry {", "+\t\t\tclasspath.initialize();", "+\t\t\tthis.classpaths[counter++] = classpath;", "+\t\t} catch (IOException e) {", "+\t\t\t// ignore", "+\t\t}", "-\tif (problemsOccured > 0) {", "-\t\tClasspath[] newPaths = new Classpath[classpathSize - problemsOccured];", "-\t\tfor (int i = 0, current = 0; i < classpathSize; i++)", "-\t\t\tif (this.classpaths[i] != null) {", "-\t\t\t\tnewPaths[current] = this.classpaths[i];", "-\t\t\t}", "-\t\tclasspathSize = newPaths.length;", "-\t\tthis.classpaths = newPaths;", "+\tif (counter != classpathSize) {", "+\t\tSystem.arraycopy(this.classpaths, 0, (this.classpaths = new Classpath[counter]), 0, counter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c88f9b628d9e67303e1821b161cdd7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "d1974547d7c9577873b59a9bbfd6fce3981cc7e4", "commitAfterChange": "bfa884088575c34bc003e982d7319407d3dca882", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["+\t\t\t\r", "+\t\t\t\r", "-\t\t\t\t// force detach source on jar package fragment roots (source will be lazily computed when needed)\r", "-\t\t\t\t// and remove the .java files from the index (.class files belong to binary folders which can be shared, \r", "-\t\t\t\t// so leave the index) \r", "-\t\t\t\tfor (int j = 0, length = pkgFragmentRoots.length; j < length; j++) {\r", "-\t\t\t\t\tIPackageFragmentRoot root = pkgFragmentRoots[j];\r", "-\t\t\t\t\tif (root instanceof JarPackageFragmentRoot) {\r", "-\t\t\t\t\t\t((JarPackageFragmentRoot) root).setSourceAttachmentProperty(null);// loose info - will be recomputed\r", "-\t\t\t\t\t} else if (indexManager != null && changeKind == IClasspathEntry.CPE_SOURCE) {\r", "-\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, oldResolvedPath[i].getPath());\r", "-\t\t\t\t\t}\r", "+\t\t\t\t// Remove the .java files from the index.\r", "+\t\t\t\t// Note that .class files belong to binary folders which can be shared, \r", "+\t\t\t\t// so leave the index for .class files.\r", "+\t\t\t\tif (indexManager != null && changeKind == IClasspathEntry.CPE_SOURCE) {\r", "+\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, oldResolvedPath[i].getPath());\r", "+\t\t\t\t\t\taddClasspathDeltas(\r", "+\t\t\t\t\t\t\tproject.getPackageFragmentRoots(oldResolvedPath[i]),\r", "+\t\t\t\t\t\t\tIJavaElementDelta.F_CLASSPATH_REORDER,\r", "+\t\t\t\t\t\t\tdelta);\r", "+\t\t\t\t\t\tint changeKind = oldResolvedPath[i].getEntryKind();\r", "+\t\t\t\t\t\thasChangedContentForDependents |= (changeKind == IClasspathEntry.CPE_SOURCE);\r", "+\t\t\r", "+\t\t\t\t\t\thasDelta = true;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\t\t// check source attachment\r", "+\t\t\t\tint sourceAttachmentFlags = \r", "+\t\t\t\t\tthis.getSourceAttachmentDeltaFlag(\r", "+\t\t\t\t\t\toldResolvedPath[i].getSourceAttachmentPath(),\r", "+\t\t\t\t\t\tnewResolvedPath[index].getSourceAttachmentPath());\r", "+\t\t\t\tint sourceAttachmentRootFlags = \r", "+\t\t\t\t\tthis.getSourceAttachmentDeltaFlag(\r", "+\t\t\t\t\t\toldResolvedPath[i].getSourceAttachmentRootPath(),\r", "+\t\t\t\t\t\tnewResolvedPath[index].getSourceAttachmentRootPath());\r", "+\t\t\t\tint flags = sourceAttachmentFlags | sourceAttachmentRootFlags;\r", "+\t\t\t\tif (flags != 0) {\r", "-\t\t\t\t\t\tIJavaElementDelta.F_CLASSPATH_REORDER,\r", "+\t\t\t\t\t\tflags | IJavaElementDelta.F_REMOVED_FROM_CLASSPATH, // TEMPORARY: Need to signal a F_REMOVED_FROM_CLASSPATH so that UI updates correctly\r", "-\t\t\t\t\tint changeKind = oldResolvedPath[i].getEntryKind();\r", "-\t\t\t\t\thasChangedContentForDependents |= (changeKind == IClasspathEntry.CPE_SOURCE);\r", "-\t\r", "-\t\t\t} else {\r", "-\t\t\t\thasChangedContentForDependents |= (newResolvedPath[i].isExported() != oldResolvedPath[index].isExported());\r", "-\t\t\t\tif (!oldResolvedPathLongest && index != i) { //reordering of the classpath\r", "-\t\t\t\t\taddClasspathDeltas(\r", "-\t\t\t\t\t\tproject.getPackageFragmentRoots(newResolvedPath[i]),\r", "-\t\t\t\t\t\tIJavaElementDelta.F_CLASSPATH_REORDER,\r", "-\t\t\t\t\t\tdelta);\r", "-\t\t\t\t\tint changeKind = newResolvedPath[i].getEntryKind();\r", "-\t\t\t\t\thasChangedContentForDependents |= changeKind == IClasspathEntry.CPE_SOURCE;\r", "-\t\t\t\t\thasDelta = true;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\t} // classpath reordering has already been generated in previous loop\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e34adbc030b616b01abb47c4f41ee1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2f12a5295b6777dd565c4f2976cdf05dda8b968b", "commitAfterChange": "161af7fbcd3da7eae08b0772a6e9520634a306f1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["+\t\t\tSimpleSet interfacesSeen = new SimpleSet(lastPosition * 2);", "-\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {", "+\t\t\t\t\tif (!interfacesSeen.includes(anInterface)) {", "-\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;", "+\t\t\t\t\t\tinterfacesSeen.add(anInterface);", "-\t\t\t}", "-", "-\t\t\t// bit reinitialization", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f35610b67b0d71aa8659e55805b07038", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "2f12a5295b6777dd565c4f2976cdf05dda8b968b", "commitAfterChange": "161af7fbcd3da7eae08b0772a6e9520634a306f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "signatureAfterChange": "  public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "diff": ["+\t\torg.eclipse.jdt.internal.core.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.core.util.SimpleSet(lastPosition * 2);", "-\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited", "-\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;", "+\t\t\t\tif (!interfacesSeen.includes(anInterface)) {", "+\t\t\t\t\t// if interface as not already been visited", "+\t\t\t\t\tinterfacesSeen.add(anInterface);", "-\t\t}", "-", "-\t\t// bit reinitialization", "-\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;"]}], "num": 68272}
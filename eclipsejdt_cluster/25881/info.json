{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb978ab813ce0da0af1cbff8c803b64b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fee5b5daaffc5beffc80e7a36c0e5fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "f63db2314417880fb03b69a3a2d9f245018f9762", "commitAfterChange": "ed05e516511eea449e523a1d3b6827ca6c8a5f46", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tprivate void outputCurrentToken(int token)", "signatureAfterChange": "\r \tprivate void outputCurrentToken(int token)", "diff": ["+\t\t\t\tendOfLine = false;\r", "+\t\t\t\tcurrentCommentOffset = getCurrentCommentOffset();\r", "+\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\tboolean pendingCarriageReturn = false;\r", "-\t\t\t\t\t\tcase '\\n' :\r", "+\t\t\t\t\t\t\tpendingCarriageReturn = true;\r", "-\t\t\t\t\t\t\tcurrentLineBuffer.append(currentCharacter);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase '\\n' :\r", "+\t\t\t\t\t\t\tupdateMappedPositions(i);\r", "+\t\t\t\t\t\t\tif (pendingCarriageReturn) {\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 2);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tpendingCarriageReturn = false;\r", "+\t\t\t\t\t\t\tcurrentLineBuffer.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\t\t\tendOfLine = true;\r", "-\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset)\r", "+\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset) {\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tincreaseGlobalDelta(-1);\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset)\r", "+\t\t\t\t\t\t\t\tif (beginningOfLineSpaces > currentCommentOffset) {\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tincreaseGlobalDelta(-1);\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "-\t\t\t\t\t\t\tcurrentLineBuffer.append(currentCharacter);\r", "-\t\t\t\t\t\t\tendOfLine = false;\r", "+\t\t\t\t\t\t\tif (pendingCarriageReturn) {\r", "+\t\t\t\t\t\t\t\tpendingCarriageReturn = false;\r", "+\t\t\t\t\t\t\t\tupdateMappedPositions(i);\r", "+\t\t\t\t\t\t\t\tincreaseGlobalDelta(options.lineSeparatorSequence.length - 1);\r", "+\t\t\t\t\t\t\t\tcurrentLineBuffer.append(options.lineSeparatorSequence);\r", "+\t\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\t\t\t\t\tendOfLine = false;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tbeginningOfLineSpaces = 0;\r", "+\t\t\t\t\t\t\t\tcurrentLineBuffer.append(currentCharacter);\r", "+\t\t\t\t\t\t\t\tendOfLine = false;\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\tmultipleLineCommentCounter++;\r", "+\t\t\t\tupdateMappedPositions(startPosition);\r", "-\t\tupdateMappedPositions(startPosition);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6188035ec995ab9fcccb5bf957c6312a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["+\t\t\t", "-\t\tif (constant != Constant.NotAConstant) {", "+\t\tif (this.constant != Constant.NotAConstant) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "+\t\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-\t\t\t\tswitch (expression.implicitConversion >> 4) /* runtime type */ {", "+\t\t\t\tswitch (this.expression.implicitConversion >> 4) /* runtime type */ {", "-\t\t\t\t\t\texpression.generateOptimizedBoolean(", "+\t\t\t\t\t\tthis.expression.generateOptimizedBoolean(", "-\t\t\t\tswitch (expression.implicitConversion >> 4 /* runtime */", "+\t\t\t\tswitch (this.expression.implicitConversion >> 4 /* runtime */", "-\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\tif (constant != NotAConstant) {", "+\t\t\t\tif (this.constant != NotAConstant) {", "-\t\t\t\t\t\tswitch (expression.implicitConversion >> 4 /* runtime */", "-\t\t\t\t\t\t\t) {", "+\t\t\t\t\t\tswitch (this.expression.implicitConversion >> 4){ /* runtime */", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.intValue() * -1);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.intValue() * -1);", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.floatValue() * -1.0f);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.floatValue() * -1.0f);", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.longValue() * -1L);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.longValue() * -1L);", "-\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(constant.doubleValue() * -1.0);", "+\t\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.constant.doubleValue() * -1.0);", "-\t\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t\tswitch (expression.implicitConversion >> 4 /* runtime type */", "-\t\t\t\t\t\t\t) {", "+\t\t\t\t\t\tswitch (expression.implicitConversion >> 4){ /* runtime type */", "-\t\t\t\texpression.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\t\tthis.expression.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);"]}], "num": 25881}
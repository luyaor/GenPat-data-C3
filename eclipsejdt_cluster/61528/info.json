{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9125c6f487b3511b1d7a1c20403051be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42d1c40cf283b6b8a75fc9b411000321", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "5a3a5f398a8971568181868be2d5d76728016763", "commitAfterChange": "44cc03459f9020b4da0ebdb14fa0624b7d8dfc4d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " private IGenericType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IGenericType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\tsuperInterfaceNames = ((ISourceType)type).getInterfaceNames();", "+\t\tISourceType sourceType = (ISourceType)type;", "+\t\tif (sourceType.getName().length == 0) { // if anonymous type", "+\t\t\tif (typeBinding.superInterfaces() != null && typeBinding.superInterfaces().length > 0) {", "+\t\t\t\tsuperInterfaceNames = new char[][] {sourceType.getSuperclassName()};", "+\t\t\t} else {", "+\t\t\t\tsuperInterfaceNames = sourceType.getInterfaceNames();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsuperInterfaceNames = sourceType.getInterfaceNames();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b7215f6fde9cf1eadd872f38767574", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " private IGenericType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IGenericType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\tsuperInterfaceNames = ((HierarchyType)type).superInterfaceNames;", "+\t\tHierarchyType hierarchyType = (HierarchyType)type;", "+\t\tif (hierarchyType.name.length == 0) { // if anonymous type", "+\t\t\tif (typeBinding.superInterfaces() != null && typeBinding.superInterfaces().length > 0) {", "+\t\t\t\tsuperInterfaceNames = new char[][] {hierarchyType.superclassName};", "+\t\t\t} else {", "+\t\t\t\tsuperInterfaceNames = hierarchyType.superInterfaceNames;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsuperInterfaceNames = hierarchyType.superInterfaceNames;", "+\t\t}"]}], "num": 61528}
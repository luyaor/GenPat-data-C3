{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b30f8a1ef5a7f502a1dcfda2dc2ad0f0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab27bbd648fd7c4290e174e5bce74a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testBinary08()", "signatureAfterChange": " \tpublic void testBinary08()", "diff": ["+\t\trunNegativeTestWithLibs(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"p/X1.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public abstract class X1 {\\n\" +", "+\t\t\t\t\t\"    public class Inner {}\\n\" +", "+\t\t\t\t\t\"    public Object []@NonNull[] arrays(Object @NonNull[][] oa1) { return null; }\\n\" +", "+\t\t\t\t\t\"    public void nesting(@NonNull Inner i1, X1.@Nullable Inner i2) { }\\n\" +", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" +", "+\t\t\t\t\t\"    public void wildcard2(List<? super @NonNull X1> l) { }\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\tcustomOptions,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in p\\\\X1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" + ", "+\t\t\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\t\t\"This nullness annotation conflicts with a \\'@Nullable\\' annotation which is effective on the same type parameter \\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t// fix the error:", "-\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { }\\n\" + // contradiction", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends X1> l) { }\\n\" +", "-// FIXME(stephan): add desired error messages:", "+", "-//\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][];\\n\" + // unsafe", "-\t\t\t\t\t\"\t\tx.arrays(a)[0] = null;\\n\" + // illegal", "-\t\t\t\t\t\"\t\tx.nesting(null, null);\\n\" + // 1st null is illegal", "-//\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" +", "+\t\t\t\t\t\"\t\tx.arrays(a)[0] = null; // illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.nesting(null, null); // 1st null is illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" +", "-//\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "-//\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + ", "-//\t\t\t\t\"\t   ^^^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\t\t\"Incompatible type argument ...\\n\" + ", "-//\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in Y1.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][];\\n\" + ", "+\t\t\t\t\"1. WARNING in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" + ", "-\t\t\t\t\"2. ERROR in Y1.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tx.arrays(a)[0] = null;\\n\" + ", "+\t\t\t\t\"2. ERROR in Y1.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tx.arrays(a)[0] = null; // illegal\\n\" + ", "-\t\t\t\t\"3. ERROR in Y1.java (at line 7)\\n\" + ", "-\t\t\t\t\"\tx.nesting(null, null);\\n\" + ", "+\t\t\t\t\"3. ERROR in Y1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.nesting(null, null); // 1st null is illegal\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in Y1.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in Y1.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faad9143a5a9c9e24d516b3f310512f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \t \tpublic void testBug416174()", "signatureAfterChange": " \tpublic void testBug416174()", "diff": ["+\t// incompatible null constraints on parameters ", "-\t\t// FIXME(stephan): should report null spec violation", "-\t\trunConformTestWithLibs(", "+\t\tMap options = getCompilerOptions();", "+\t\toptions.put(JavaCore.COMPILER_PB_NONNULL_PARAMETER_ANNOTATION_DROPPED, JavaCore.IGNORE);", "+\t\trunNegativeTestWithLibs(", "-\t\t\t\t\"import org.eclipse.jdt.annotation.NonNull;\\n\" + ", "+\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" + ", "-\t\t\t\t\"\tvoid  foo(List<X> lx) {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tvoid  foo1(List<X> lx) {}\\n\" +", "+\t\t\t\t\"\tvoid  foo2(List<@NonNull X> lx) {}\\n\" +", "+\t\t\t\t\"\tvoid  foo3(List<@Nullable X> lx) {}\\n\" +", "+\t\t\t\t\"\tvoid  foo4(@NonNull List<@Nullable X> lx) {}\\n\" +", "-\t\t\t\t\"\tvoid  foo(List<@NonNull X> xy) {\\n\" + ", "+\t\t\t\t\"\t@Override void foo1(List<@NonNull X> xy) {}\\n\" + ", "+\t\t\t\t\"\t@Override void foo2(List<X> lx) {}\\n\" +", "+\t\t\t\t\"\t@Override void foo3(List<X> lx) {}\\n\" +", "+\t\t\t\t\"\t@Override void foo4(List<@Nullable X> lx) {}\\n\" + // omitting annotation at toplevel can be tolerated (via option)", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\toptions,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Z extends X {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The method foo1(List<@NonNull X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Z extends X {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The method foo2(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Z extends X {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The method foo3(List<X>) from Z cannot implement the corresponding method from X due to incompatible nullness constraints\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}", "-\t\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tvoid  foo(List<@NonNull X> xy) {\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method foo(List<X>) of type Z should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}], "num": 67709}
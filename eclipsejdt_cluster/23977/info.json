{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d438b7e727b210ec9cb8634a4557808", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19dfbaeea2831bc2c0e04e8c174707a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "4cc3b3c8225c2020600633c7be970d7e34073e34", "commitAfterChange": "7cb9cff7124cd35c8395f8f6a4cfbe99f826f5dd", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected Object parseQualifiedName(boolean reset) throws InvalidInputException", "signatureAfterChange": " \tprotected Object parseQualifiedName(boolean reset) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (((iToken % 2) > 0)) { // identifiers must be odd tokens", "+\t\t\t\t\tif (((iToken & 1) != 0)) { // identifiers must be odd tokens", "-\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be even tokens", "+\t\t\t\t\tif ((iToken & 1) == 0) { // dots must be even tokens", "-\t\t\t\t\tif ((iToken % 2) == 0) { // cannot leave on a dot", "+\t\t\t\t\tif ((iToken & 1) == 0) { // cannot leave on a dot"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45fee79a2778a88bd9ec46cfa312aa76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tprotected Comment createComment(int[] positions)", "signatureAfterChange": "  \tprotected Comment createComment(int[] positions)", "diff": ["-\t\t\tif (positions[0]>0) { // Block comment have positive start position", "+\t\t\tif (positions[0] == 0) { // we cannot know without testing chars again", "+\t\t\t\tif (this.docParser.scanner.source[1] == '/') {", "+\t\t\t\t\tcomment = new LineComment(this.ast);", "+\t\t\t\t} else {", "+\t\t\t\t\tcomment = new BlockComment(this.ast);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (positions[0]>0) { // Block comment have positive start position"]}], "num": 23977}
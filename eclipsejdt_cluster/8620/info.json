{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c48cb12bfc549ffdc9abf73a4bb611cf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5633eddf45ccd401eac469c6784416b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "22a14f1a594f2965f31b80e65fb54172ab0fd512", "commitAfterChange": "5d4f893fa59b3511c935dd72cb6bf3884d345168", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getTypeParameters(char[] methodOrTypeSignature) throws IllegalArgumentException", "diff": ["-\t\t\tif (i < 0 || i >= length) throw new IllegalArgumentException();", "+\t\t\tif (i < 0 || i >= length) ", "+\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\t\tcontinue nextBound; // empty bound", "+\t\t\t\t\t\t// no class bound", "+\t\t\t\t\t\tbreak; ", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\ti = Util.scanTypeSignature(methodOrTypeSignature, i);", "-\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\tcase C_RESOLVED:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanClassTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not a class type signature -> it is a new type parameter", "+\t\t\t\t\t\t}", "+\t\t\t\t\tcase C_ARRAY:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanArrayTypeSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not an array type signature -> it is a new type parameter", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase C_TYPE_VARIABLE:", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ti = Util.scanTypeVariableSignature(methodOrTypeSignature, i);", "+\t\t\t\t\t\t\ti++; // position at start of next param if any", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t// not a type variable signature -> it is a new type parameter", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// default: another type parameter is starting"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "593a9cf16744b9c8266661fad62f8b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic static int scanTypeBoundSignature(char[] string, int start)", "signatureAfterChange": " \tpublic static int scanTypeBoundSignature(char[] string, int start)", "diff": ["-\t\tif (c == Signature.C_STAR) { //$NON-NLS-1$", "-\t\t\treturn start;", "-\t\t}", "-\t", "-\t\t// need a minimum 4 chars \"+Lx;\"", "-\t\tif (start >= string.length - 3) { ", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\t// must start in \"+/-\"", "-\t\tif (c != Signature.C_SUPER && c != Signature.C_EXTENDS) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tc = string[start + 1];", "+\t\t\tcase Signature.C_STAR :", "+\t\t\t\treturn start;", "-\t\t\t\treturn scanTypeBoundSignature(string, start + 1);", "+\t\t\t\t// need a minimum 4 chars \"+Lx;\"", "+\t\t\t\tif (start >= string.length - 3) {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\t// must start in \"+/-\"", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t", "+\t\t}", "+\t\tc = string[++start];", "+\t\tswitch (c) {", "+\t\t\tcase Signature.C_CAPTURE :", "+\t\t\t\treturn scanCaptureTypeSignature(string, start);", "+\t\t\tcase Signature.C_SUPER :", "+\t\t\tcase Signature.C_EXTENDS :", "+\t\t\t\treturn scanTypeBoundSignature(string, start);", "-\t\t\t\treturn scanClassTypeSignature(string, start + 1);", "+\t\t\t\treturn scanClassTypeSignature(string, start);", "-\t\t\t\treturn scanTypeVariableSignature(string, start + 1);", "+\t\t\t\treturn scanTypeVariableSignature(string, start);", "-\t\t\t\treturn scanArrayTypeSignature(string, start + 1);", "+\t\t\t\treturn scanArrayTypeSignature(string, start);"]}], "num": 8620}
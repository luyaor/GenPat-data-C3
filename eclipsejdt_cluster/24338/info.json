{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56d7c12f6b4d4db26353b0ccd21bce9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50932d06aad6848f167527870c8b49b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testTypeDeclarationBug73696() throws CoreException", "signatureAfterChange": " \tpublic void testBug73696() throws CoreException", "diff": ["+\t */", "+\tpublic void testBug73696() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[2];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73696/C.java\",", "+\t\t\t\t\"package b73696;\\n\" + ", "+\t\t\t\t\"public class C implements  I {\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73696/I.java\",", "+\t\t\t\t\"package b73696;\\n\" + ", "+\t\t\t\t\"public interface I {}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {workingCopies[0].getParent()});", "+\t\t\t", "+\t\t\t// Interface declaration", "+\t\t\tTypeDeclarationPattern pattern = new TypeDeclarationPattern(", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\tIIndexConstants.INTERFACE_SUFFIX,", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH", "+\t\t\t);", "+\t\t\tnew SearchEngine().search(", "+\t\t\t\tpattern,", "+\t\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "+\t\t\t\tscope,", "+\t\t\t\tresultCollector,", "+\t\t\t\tnull);", "+\t\t\t// Class declaration", "+\t\t\tpattern = new TypeDeclarationPattern(", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\tIIndexConstants.CLASS_SUFFIX,", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH", "+\t\t\t);", "+\t\t\tnew SearchEngine().search(", "+\t\t\t\tpattern,", "+\t\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "+\t\t\t\tscope,", "+\t\t\t\tresultCollector,", "+\t\t\t\tnull);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73696/I.java b73696.I [I] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73696/C.java b73696.C [C] EXACT_MATCH\",", "+\t\t\t\tthis.resultCollector);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t */", "-\tpublic void testTypeDeclarationBug73696() throws CoreException {", "-\t\tIPackageFragment pkg = this.getPackageFragment(\"JavaSearchBugs\", \"src\", \"b73696\");", "-\t\tIJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {pkg});", "-\t//\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\t", "-\t\t// Interface declaration", "-\t\tTypeDeclarationPattern pattern = new TypeDeclarationPattern(", "-\t\t\tnull,", "-\t\t\tnull,", "-\t\t\tnull,", "-\t\t\tIIndexConstants.INTERFACE_SUFFIX,", "-\t\t\tSearchPattern.R_PATTERN_MATCH", "-\t\t);", "-\t\tnew SearchEngine().search(", "-\t\t\tpattern,", "-\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "-\t\t\tscope,", "-\t\t\tresultCollector,", "-\t\t\tnull);", "-\t\t// Class declaration", "-\t\tpattern = new TypeDeclarationPattern(", "-\t\t\tnull,", "-\t\t\tnull,", "-\t\t\tnull,", "-\t\t\tIIndexConstants.CLASS_SUFFIX,", "-\t\t\tSearchPattern.R_PATTERN_MATCH", "-\t\t);", "-\t\tnew SearchEngine().search(", "-\t\t\tpattern,", "-\t\t\tnew SearchParticipant[] {SearchEngine.getDefaultSearchParticipant()},", "-\t\t\tscope,", "-\t\t\tresultCollector,", "-\t\t\tnull);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b73696/I.java b73696.I [I] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73696/C.java b73696.C [C] EXACT_MATCH\",", "-\t\t\tthis.resultCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58f24a778e9b2d01bee1ffbc8101df54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testTypeReferenceBug79860() throws CoreException", "signatureAfterChange": " \tpublic void testBug79860() throws CoreException", "diff": ["+\t */", "+\tpublic void testBug79860() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[2];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b79860/X.java\",", "+\t\t\t\t\"package b79860;\\n\" + ", "+\t\t\t\t\"public class X<T extends A> { }\\n\" + ", "+\t\t\t\t\"class A { }\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b79860/Y.java\",", "+\t\t\t\t\"package b79860;\\n\" + ", "+\t\t\t\t\"public class Y<T extends B&I1&I2&I3> { }\\n\" + ", "+\t\t\t\t\"class B { }\\n\" + ", "+\t\t\t\t\"interface I1 {}\\n\" + ", "+\t\t\t\t\"interface I2 {}\\n\" + ", "+\t\t\t\t\"interface I3 {}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b79860\", false), ", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b79860/X.java b79860.X [A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t */", "-\tpublic void testTypeReferenceBug79860() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b79860/X.java\").getType(\"A\");", "-\t\tsearch(type, REFERENCES, getJavaSearchScopeBugs(\"b79860\", false), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b79860/X.java b79860.X [A] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b07ab023b1eead3b9da2d023102b4cad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testTypeReferenceBug73336c() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336c() throws CoreException", "diff": ["+\t// Verify that no NPE was raised on following case (which produces compiler error)", "+\tpublic void testBug73336c() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/A.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class A {}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/B.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/C.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class C implements X<A, A>.Interface<A>  {\\n\" + ", "+\t\t\t\t\"\tvoid bar() {}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336c/X.java\",", "+\t\t\t\t\"package b73336c;\\n\" + ", "+\t\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\t\"\tinterface Interface<V> {\\n\" + ", "+\t\t\t\t\"\t\tvoid bar();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b73336c\", false), ", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t// Verify that no NPE was raised on following case (which produces compiler error)", "-\tpublic void testTypeReferenceBug73336c() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b73336c/A.java\").getType(\"A\");", "-\t\t", "-\t\tsearch(type,", "-\t\t\tREFERENCES,", "-\t\t\tgetJavaSearchScopeBugs(\"b73336c\", false), ", "-\t\t\tresultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/B.java b73336c.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b73336c/C.java b73336c.C [A] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}], "num": 24338}
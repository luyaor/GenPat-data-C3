{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "980743313da9b45afc03f9ba13cce72b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a6f0ced36248616cc6a79d89eb2aba5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c59be425cf25326239f4ea61082e801292bcf9ab", "commitAfterChange": "d6fb9802bac486c7e71b20d321f123bc000bd933", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public static String createTypeSignature(String typeName, boolean isResolved)", "signatureAfterChange": "\r public static String createTypeSignature(String typeName, boolean isResolved)", "diff": ["+\treturn createTypeSignature(typeName.toCharArray(), isResolved);\r", "+}\r", "-\t\tScanner scanner = new Scanner();\r", "-\t\tscanner.setSource(typeName.toCharArray());\r", "-\t\tint token = scanner.getNextToken();\r", "-\t\tStringBuffer sig = new StringBuffer();\r", "-\t\tint arrayCount = 0;\r", "-\t\tboolean primitive = true;\r", "-\t\tswitch (token) {\r", "-\t\t\tcase ITerminalSymbols.TokenNameIdentifier :\r", "-\t\t\t\tsig.append(scanner.getCurrentIdentifierSource());\r", "-\t\t\t\tprimitive = false;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNameboolean :\r", "-\t\t\t\tsig.append(Signature.SIG_BOOLEAN);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamebyte :\r", "-\t\t\t\tsig.append(Signature.SIG_BYTE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamechar :\r", "-\t\t\t\tsig.append(Signature.SIG_CHAR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamedouble :\r", "-\t\t\t\tsig.append(Signature.SIG_DOUBLE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamefloat :\r", "-\t\t\t\tsig.append(Signature.SIG_FLOAT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNameint :\r", "-\t\t\t\tsig.append(Signature.SIG_INT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamelong :\r", "-\t\t\t\tsig.append(Signature.SIG_LONG);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNameshort :\r", "-\t\t\t\tsig.append(Signature.SIG_SHORT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamevoid :\r", "-\t\t\t\tsig.append(Signature.SIG_VOID);\r", "-\t\t\t\tbreak;\r", "-\t\t\tdefault :\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\ttoken = scanner.getNextToken();\r", "-\t\twhile (!primitive && token == ITerminalSymbols.TokenNameDOT) {\r", "-\t\t\tsig.append(scanner.getCurrentIdentifierSource());\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\tif (token == ITerminalSymbols.TokenNameIdentifier) {\r", "-\t\t\t\tsig.append(scanner.getCurrentIdentifierSource());\r", "-\t\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\twhile (token == ITerminalSymbols.TokenNameLBRACKET) {\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\tif (token != ITerminalSymbols.TokenNameRBRACKET)\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\t\tarrayCount++;\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t}\r", "-\t\tif (token != ITerminalSymbols.TokenNameEOF)\r", "-\t\t\tthrow new IllegalArgumentException();\r", "-\t\tif (!primitive) {\r", "-\t\t\tsig.insert(0, isResolved ? C_RESOLVED : C_UNRESOLVED);\r", "-\t\t}\r", "-\t\tif (arrayCount == 0) {\r", "-\t\t\tif (primitive)\r", "-\t\t\t\treturn sig.toString();\r", "-\t\t} else {\r", "-\t\t\tchar[] brackets = new char[arrayCount];\r", "-\t\t\twhile (arrayCount-- != 0) {\r", "-\t\t\t\tbrackets[arrayCount] = C_ARRAY;\r", "-\t\t\t}\r", "-\t\t\tsig.insert(0, brackets);\r", "-\t\t}\r", "-\t\tif (!primitive) {\r", "-\t\t\tsig.append(C_NAME_END);\r", "-\t\t}\r", "-\t\treturn sig.toString();\r", "-\t} catch (InvalidInputException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b3f5c145b170dcbc7d6089c35ebb5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java", "commitBeforeChange": "e9740a5d5d266d4ab1f1481408252eab08091df9", "commitAfterChange": "c0b7ec7ac86ca976e8dafca35f37afdb3d3303ce", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test061()", "signatureAfterChange": " \tpublic void test061()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383062", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=387146", "+\t\tIScanner scanner = ToolFactory.createScanner(", "+\t\t\t\ttrue,", "+\t\t\t\ttrue,", "+\t\t\t\ttrue,", "+\t\t\t\tJavaCore.VERSION_1_4,", "+\t\t\t\tJavaCore.VERSION_1_4);", "+\t\tfinal char[] source = \"case 1:\\nsynchronized (someLock){}\\n//$FALL-THROUGH$\\ncase 2:\".toCharArray();", "+\t\tscanner.setSource(source);", "+\t\tscanner.resetTo(0, source.length - 1);", "+\t\ttry {", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNamecase, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameIntegerLiteral, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameCOLON, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNamesynchronized, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameLPAREN, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameIdentifier, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameRPAREN, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameLBRACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameRBRACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameCOMMENT_LINE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNamecase, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameWHITESPACE, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameIntegerLiteral, scanner.getNextToken());", "+\t\t\tassertEquals(\"Wrong token\", ITerminalSymbols.TokenNameCOLON, scanner.getNextToken());", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tassertTrue(\"Should not fail with InvalidInputException\", false);", "+\t\t}", "+\t}"]}], "num": 62656}
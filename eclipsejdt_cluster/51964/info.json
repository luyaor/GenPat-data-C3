{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4858c29f2559e26d9a877b7ab24e1088", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198701e1df0468499f6cb1d8df158433", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a8ae4c61c3fd8e7af5944aa40683b300c7cbf9e8", "commitAfterChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "diff": ["-\t\t\tSet c = new HashSet();", "+\t\t\tSet<ConstraintFormula> c = new HashSet<ConstraintFormula>();", "-\t\t\t\tSet bottomSet = findBottomSet(c, allOutputVariables(c));", "+\t\t\t\tSet<ConstraintFormula> bottomSet = findBottomSet(c, allOutputVariables(c));", "-\t\t\t\tSet allInputs = new HashSet();", "-\t\t\t\tIterator bottomIt = bottomSet.iterator();", "+\t\t\t\tSet<InferenceVariable> allInputs = new HashSet<InferenceVariable>();", "+\t\t\t\tIterator<ConstraintFormula> bottomIt = bottomSet.iterator();", "-\t\t\t\t\tallInputs.addAll(((ConstraintFormula)bottomIt.next()).inputVariables(this));", "+\t\t\t\t\tallInputs.addAll(bottomIt.next().inputVariables(this));", "-\t\t\t\tInferenceVariable[] variablesArray = (InferenceVariable[]) allInputs.toArray(new InferenceVariable[allInputs.size()]);", "+\t\t\t\tInferenceVariable[] variablesArray = allInputs.toArray(new InferenceVariable[allInputs.size()]);", "-\t\t\t\t\tConstraintFormula constraint = ((ConstraintFormula)bottomIt.next());", "+\t\t\t\t\tConstraintFormula constraint = bottomIt.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604083e41edbe4e3c92105e7851dc374", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "fde095e0f0a4d97a0e65a7c6307c3d16195d07f7", "commitAfterChange": "9ea1cdb7f6499dc7c1092eeaa0da392a32816565", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": " private IType[] getImplementingClasses0(IType interfce)", "signatureAfterChange": " private IType[] getImplementingClasses0(IType interfce)", "diff": ["-\tIterator iter = this.typeToSuperInterfaces.entrySet().iterator();", "-\tArrayList iMenters = new ArrayList();", "+\tIterator<Map.Entry<IType,IType[]>> iter = this.typeToSuperInterfaces.entrySet().iterator();", "+\tArrayList<IType> iMenters = new ArrayList<>();", "-\t\tMap.Entry entry = (Map.Entry) iter.next();", "-\t\tIType type = (IType) entry.getKey();", "+\t\tMap.Entry<IType, IType[]> entry = iter.next();", "+\t\tIType type = entry.getKey();", "-\t\tIType[] types = (IType[]) entry.getValue();", "+\t\tIType[] types = entry.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75fbbfebcc8db5fdef39087b996e2954", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "fde095e0f0a4d97a0e65a7c6307c3d16195d07f7", "commitAfterChange": "9ea1cdb7f6499dc7c1092eeaa0da392a32816565", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 35, "signatureBeforeChange": " private IType[] getExtendingInterfaces0(IType extendedInterface)", "signatureAfterChange": " private IType[] getExtendingInterfaces0(IType extendedInterface)", "diff": ["-\tIterator iter = this.typeToSuperInterfaces.entrySet().iterator();", "-\tArrayList interfaceList = new ArrayList();", "+\tIterator<Entry<IType, IType[]>> iter = this.typeToSuperInterfaces.entrySet().iterator();", "+\tArrayList<IType> interfaceList = new ArrayList<>();", "-\t\tMap.Entry entry = (Map.Entry) iter.next();", "-\t\tIType type = (IType) entry.getKey();", "+\t\tMap.Entry<IType, IType[]> entry = iter.next();", "+\t\tIType type = entry.getKey();", "-\t\tIType[] superInterfaces = (IType[]) entry.getValue();", "+\t\tIType[] superInterfaces = entry.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96efadc723cb37e393e48db246c22177", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a8ae4c61c3fd8e7af5944aa40683b300c7cbf9e8", "commitAfterChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tprivate Set findBottomSet(Set constraints, Set allOutputVariables)", "signatureAfterChange": "  \tprivate Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables)", "diff": ["-\tprivate Set findBottomSet(Set constraints, Set allOutputVariables) {", "+\tprivate Set<ConstraintFormula> findBottomSet(Set<ConstraintFormula> constraints, Set<InferenceVariable> allOutputVariables) {", "-\t\tSet result = new HashSet();", "-\t\tIterator it = constraints.iterator();", "+\t\tSet<ConstraintFormula> result = new HashSet<ConstraintFormula>();", "+\t\tIterator<ConstraintFormula> it = constraints.iterator();", "-\t\t\tConstraintFormula constraint = (ConstraintFormula)it.next();", "-\t\t\tIterator inputIt = constraint.inputVariables(this).iterator();", "-\t\t\tIterator outputIt = allOutputVariables.iterator();", "+\t\t\tConstraintFormula constraint = it.next();", "+\t\t\tIterator<InferenceVariable> inputIt = constraint.inputVariables(this).iterator();", "+\t\t\tIterator<InferenceVariable> outputIt = allOutputVariables.iterator();", "-\t\t\t\tInferenceVariable in = (InferenceVariable) inputIt.next();", "+\t\t\t\tInferenceVariable in = inputIt.next();", "-\t\t\t\t\tif (this.currentBounds.dependsOnResolutionOf(in, (InferenceVariable) outputIt.next()))", "+\t\t\t\t\tif (this.currentBounds.dependsOnResolutionOf(in, outputIt.next()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3ec995716e2cb8f194ede64f161818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f06de4b999ef266d99070d6e6ee7f897f16a1d0e", "commitAfterChange": "bace4d1637b4b8203b7da0c7b1d56fa02fc3ade5", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tpublic void setOptions(Map newOptions)", "signatureAfterChange": " \tpublic void setOptions(Map<String, String> newOptions)", "diff": ["-\tpublic void setOptions(Map newOptions) {", "+\tpublic void setOptions(Map<String, String> newOptions) {", "-\t\t\t\tIterator entries = newOptions.entrySet().iterator();", "+\t\t\t\tIterator<Map.Entry<String, String>> entries = newOptions.entrySet().iterator();", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries.next();", "-\t\t\t\t\tString key = (String) entry.getKey();", "-\t\t\t\t\tString value = (String) entry.getValue();", "+\t\t\t\t\tMap.Entry<String, String> entry = entries.next();", "+\t\t\t\t\tString key = entry.getKey();", "+\t\t\t\t\tString value = entry.getValue();"]}], "num": 51964}
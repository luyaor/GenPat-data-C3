{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41c557f757facdf2faad2dcf2e69355f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5481106f6f3abe5e7bcbda9873273220", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocFlattener.java", "commitBeforeChange": "4c909758dccf4ee3c4897b3d8d65f492795c9578", "commitAfterChange": "e56e767173dc5b5ba970e3e7ca9256e9541ebffc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public boolean visit(ArrayType node)", "signatureAfterChange": " public boolean visit(ArrayType node)", "diff": ["-\t\tfor (int i = 0;  i < node.getDimensions(); ++i) {", "-\t\t\t((Dimension) node.dimensions().get(i)).accept(this);", "+\t\tint noOfDimensions = node.getDimensions();", "+\t\tList dimensions = node.dimensions();", "+\t\tfor (int i = 0;  i < noOfDimensions; ++i) {", "+\t\t\t((Dimension) dimensions.get(i)).accept(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8be74d23075f9782e35f8384ca38246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public boolean initializeFromLookupEnvironment(LookupEnvironment env)", "signatureAfterChange": "\r public boolean initializeFromLookupEnvironment(LookupEnvironment env)", "diff": ["- */\r", "-public boolean initializeFromLookupEnvironment(LookupEnvironment env) {\r", "-\treturn \r", "-\t\tthis.leftPattern.initializeFromLookupEnvironment(env)\r", "-\t\t|| this.rightPattern.initializeFromLookupEnvironment(env);\r", "-}\r", "+ */\r", "+public boolean initializeFromLookupEnvironment(LookupEnvironment env) {\r", "+\r", "+\t// need to perform both operand initialization due to side-effects.\r", "+\tboolean leftInit = this.leftPattern.initializeFromLookupEnvironment(env);\r", "+\tboolean rightInit = this.rightPattern.initializeFromLookupEnvironment(env);\r", "+\treturn leftInit || rightInit;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2204cc72fd754af497f484d9d534bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t\t\tif (reader.isNestedType()) {", "+\t\t\tboolean isNestedType = reader.isNestedType();", "+\t\t\tif (isNestedType) {", "+\t\t\t\t\tboolean isConstructor = method.isConstructor();", "-\t\t\t\t\tchar[][] parameterTypes = decodeParameterTypes(descriptor);", "+\t\t\t\t\tchar[][] parameterTypes = decodeParameterTypes(descriptor, isConstructor && isNestedType);", "-\t\t\t\t\tif (method.isConstructor()) {", "+\t\t\t\t\tif (isConstructor) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc3c8781345e53a0824d973cd8b58e1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public boolean encloses(String resourcePathString)", "signatureAfterChange": " public boolean encloses(String resourcePathString)", "diff": ["-\t\treturn indexOf(resourcePathString.substring(separatorIndex+1), resourcePathString.substring(0, separatorIndex)) >= 0;", "+\t\t// internal or external jar (case 3, 4, or 5)", "+\t\tString jarPath = resourcePathString.substring(0, separatorIndex);", "+\t\tString relativePath = resourcePathString.substring(separatorIndex+1);", "+\t\treturn indexOf(jarPath, relativePath) >= 0;", "-\treturn indexOf(resourcePathString, null) >= 0;", "+\t// resource in workspace (case 1 or 2)", "+\treturn indexOf(resourcePathString) >= 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50038c27829ae26179adc8b4171e54b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "bb9caf310cba60ea26e86d0cc9ab1b54feb67156", "commitAfterChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\", methodRef.getName().resolveBinding());", "-\t\t\t\t\t\tverifyNameBindings(methodRef.getQualifier());", "+\t\t\t\t\t\tIBinding methNameBinding = methodRef.getName().resolveBinding();", "+\t\t\t\t\t\tName methodQualifier = methodRef.getQualifier();", "+\t\t\t\t\t\t// TODO (frederic) Replace the two following lines by commented block when bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=62650 will be fixed", "+\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\tverifyNameBindings(methodQualifier);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\tif (methodQualifier == null) {", "+\t\t\t\t\t\t\tif (methNameBinding == null) {", "+\t\t\t\t\t\t\t\tchar firstChar = methodRef.getName().getIdentifier().charAt(0);", "+\t\t\t\t\t\t\t\tif (Character.isUpperCase(firstChar)) {", "+\t\t\t\t\t\t\t\t\t// assume that selector starting with uppercase is for constructor => signal that binding is null", "+\t\t\t\t\t\t\t\t\tSystem.out.println(this.prefix+\"Binding for selector of  '\"+methodRef+\"' is null.\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (methNameBinding.getName().equals(methodRef.getName().getIdentifier())) { // binding is not null only for constructor", "+\t\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodRef.getName()+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tSimpleName methodSimpleType = null;", "+\t\t\t\t\t\t\tif (methodQualifier.isQualifiedName()) {", "+\t\t\t\t\t\t\t\tmethodSimpleType = ((QualifiedName)methodQualifier).getName();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmethodSimpleType = (SimpleName) methodQualifier;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (methodSimpleType.getIdentifier().equals(methodRef.getName().getIdentifier())) { // binding is not null only for constructor", "+\t\t\t\t\t\t\t\tassumeNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tassumeNull(this.prefix+\"\"+methodRef.getName()+\" binding should be null!\", methNameBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tverifyNameBindings(methodRef.getQualifier());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t*/"]}], "num": 50266}
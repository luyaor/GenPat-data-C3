{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8ac4bea3f906a279bfa057bb5326a91", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c93b7a4e897e0072c7ce65d34567ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7365eb3c9bc3c4e2bcff5eac5d972246c40d599d", "commitAfterChange": "dd4e66116fa81ff4f74deaa928460684d87fc74d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tprivate void useNullHints(long nullHints, TypeBinding[] boundTypes, LookupEnvironment environment)", "signatureAfterChange": " \t\tprivate void useNullHints(long nullHints, TypeBinding[] boundTypes, LookupEnvironment environment)", "diff": ["-\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(nullHints);", "-\t\t\tif (annot != null) {", "-\t\t\t\t// only get here if exactly one of @NonNull or @Nullable was hinted; now apply this hint:", "+\t\t\tif (nullHints == TagBits.AnnotationNullMASK) {", "+\t\t\t\t// on contradiction remove null type annotations", "-\t\t\t\t\tboundTypes[i] = environment.createAnnotatedType(boundTypes[i], annot);", "+\t\t\t\t\tboundTypes[i] = boundTypes[i].unannotated();", "+\t\t\t} else {", "+\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(nullHints);", "+\t\t\t\tif (annot != null) {", "+\t\t\t\t\t// only get here if exactly one of @NonNull or @Nullable was hinted; now apply this hint:", "+\t\t\t\t\tfor (int i = 0; i < boundTypes.length; i++)", "+\t\t\t\t\t\tboundTypes[i] = environment.createAnnotatedType(boundTypes[i], annot);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb1f1e5e2c3f7e6bfe8e53f2a4a2e16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "bc58ceae1b3691095e4db8bfcb9f2192eeaf077d", "commitAfterChange": "df9c3a401cd78995716c690f400af3a4d95f0187", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment)", "signatureAfterChange": " \t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment)", "diff": ["+\t\t}", "-\t\t\t\t// TODO check for existing instantiation and compare null annotations", "+\t\t\t\tif (this.instantiation != null) {", "+\t\t\t\t\t// sanity check:", "+\t\t\t\t\tif (!TypeBinding.equalsEquals(this.instantiation, type)) {", "+\t\t\t\t\t\tthis.instantiation = null;", "+\t\t\t\t\t\treturn; // incorporation should find the conflict and fail the inference", "+\t\t\t\t\t}", "+\t\t\t\t\tlong oldBits = this.instantiation.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (oldBits != 0) {", "+\t\t\t\t\t\tlong newBits = type.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\tif (newBits == oldBits || newBits == 0)", "+\t\t\t\t\t\t\treturn; // no update", "+\t\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "+\t\t\t\t\t\tif (annot != null)", "+\t\t\t\t\t\t\ttype = environment.createAnnotatedType(this.instantiation, annot);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd3a40d38be0b908b9d7a8f27327d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "5499d7ab628f0d031c84d349d565b52915f502cb", "commitAfterChange": "48aaa503eb58e270f9afd7df4a85cb65e562a44f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tLookupEnvironment environment = scope.environment();", "+\t\t\tif (environment.usesNullTypeAnnotations() ", "+\t\t\t\t\t&& this.annotationsOnDimensions == null // don't annotate if explicit annotations are given on dimensions ...", "+\t\t\t\t\t&& ((referenceType.tagBits & TagBits.AnnotationNullMASK) == 0)  // ... or leaf type", "+\t\t\t\t\t&& this.expectedType != null) // need this to determine our action", "+\t\t\t{", "+\t\t\t\tExpression lastDim = this.dimensions[this.dimensions.length-1];", "+\t\t\t\tif (lastDim instanceof IntLiteral && ((IntLiteral) lastDim).value == 0) {", "+\t\t\t\t\tlong tagBit = this.expectedType.leafComponentType().tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t// let new X[0] be seen as \"@NonNull X[]\", or \"@Nullable X[]\" just as expected", "+\t\t\t\t\tAnnotationBinding[] nullAnnotations = environment.nullAnnotationsFromTagBits(tagBit);", "+\t\t\t\t\tif (nullAnnotations != null)", "+\t\t\t\t\t\treferenceType = environment.createAnnotatedType(referenceType, nullAnnotations);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 49943}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13be0eb883c72640fa234463c71a04e6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11375d7895aeaf3da00a7f2d9a0ee0b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["+\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\tproblemReporter().duplicateModifierForMethod(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().duplicateModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\tif ((methodBinding.declaringClass.modifiers & AccInterface) != 0) {", "+\t\tif ((declaringClass.modifiers & AccInterface) != 0) {", "-\t\t\t\tif ((methodBinding.declaringClass.modifiers & AccAnnotation) != 0) {", "+\t\t\t\tif ((declaringClass.modifiers & AccAnnotation) != 0)", "-\t\t\t\t} else {", "+\t\t\t\telse", "-\t\t\t\t}", "-\t\tint unexpectedModifiers =", "-\t\t\t~(", "-\t\t\t\tAccPublic", "-\t\t\t\t\t| AccPrivate", "-\t\t\t\t\t| AccProtected", "-\t\t\t\t\t| AccAbstract", "-\t\t\t\t\t| AccStatic", "-\t\t\t\t\t| AccFinal", "-\t\t\t\t\t| AccSynchronized", "-\t\t\t\t\t| AccNative", "-\t\t\t\t\t| AccStrictfp);", "+\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected", "+\t\t\t| AccAbstract | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp);", "-\t\t\tproblemReporter().illegalVisibilityModifierCombinationForMethod(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\t// need to keep the less restrictive", "+\t\t\t// need to keep the less restrictive so disable Protected/Private as necessary", "+\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "+\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tint incompatibleWithAbstract =", "-\t\t\t\tAccPrivate | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp;", "+\t\t\tint incompatibleWithAbstract = AccPrivate | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp;", "-\t\t\t\tproblemReporter().illegalAbstractModifierCombinationForMethod(", "-\t\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\t\tproblemReporter().illegalAbstractModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\t\tproblemReporter().abstractMethodInAbstractClass(", "-\t\t\t\t\t(SourceTypeBinding) methodBinding.declaringClass,", "-\t\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\t\tproblemReporter().abstractMethodInAbstractClass((SourceTypeBinding) declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\tproblemReporter().nativeMethodsCannotBeStrictfp(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().nativeMethodsCannotBeStrictfp(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\tif (((realModifiers & AccStatic) != 0)", "-\t\t\t&& methodBinding.declaringClass.isNestedType()", "-\t\t\t&& !methodBinding.declaringClass.isStatic())", "-\t\t\tproblemReporter().unexpectedStaticModifierForMethod(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\tif (((realModifiers & AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())", "+\t\t\tproblemReporter().unexpectedStaticModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ceb6e0fe570d67ba5dff3728a14ed75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\tif (enclosingType.isInterface())", "+\t\t\tif ((enclosingType.modifiers & AccInterface) != 0)", "-\t\t\tif (sourceType.isAnonymousType()) ", "+\t\t\tif (sourceType.isAnonymousType()) {", "+\t\t\t    // set AccEnum flag for anonymous body of enum constants", "+\t\t\t    if (referenceContext.allocation.type == null) {", "+\t\t\t    \tmodifiers |= AccEnum;", "+\t\t\t    }", "+\t\t\t}", "-\t\tif ((realModifiers & AccInterface) != 0) {", "+\t\tif ((realModifiers & AccInterface) != 0) { // interface and annotation type", "-\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccInterface | AccStrictfp);", "-\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "-\t\t\t\t\tproblemReporter().illegalModifierForMemberInterface(sourceType);", "+\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccInterface | AccStrictfp | AccAnnotation);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0) {", "+\t\t\t\t\tif ((realModifiers & AccAnnotation) != 0) {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForMemberAnnotationType(sourceType);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForMemberInterface(sourceType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccInterface | AccStrictfp);", "-\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "-\t\t\t\t\tproblemReporter().illegalModifierForInterface(sourceType);", "+\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccInterface | AccStrictfp | AccAnnotation);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0) {", "+\t\t\t\t\tif ((realModifiers & AccAnnotation) != 0) {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForAnnotationType(sourceType);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemReporter().illegalModifierForInterface(sourceType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t} else if ((realModifiers & AccEnum) != 0) {", "+\t\t\t// detect abnormal cases for enums", "+\t\t\tif (isMemberType) { // includes member types defined inside local types", "+\t\t\t\tint unexpectedModifiers =", "+\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "+\t\t\t\t\tproblemReporter().illegalModifierForMemberEnum(sourceType);", "+\t\t\t} else if (sourceType.isLocalType()) {", "+\t\t\t\tint unexpectedModifiers = ~(AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "+\t\t\t\t\tproblemReporter().illegalModifierForLocalEnum(sourceType);", "+\t\t\t} else {", "+\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tif ((realModifiers & unexpectedModifiers) != 0)", "+\t\t\t\t\tproblemReporter().illegalModifierForEnum(sourceType);", "+\t\t\t}", "+", "+\t\t\t// check that Final and Abstract are not set together", "+\t\t\tif ((realModifiers & (AccFinal | AccAbstract)) == (AccFinal | AccAbstract))", "+\t\t\t\tproblemReporter().illegalModifierCombinationFinalAbstractForClass(sourceType);", "-\t\t\t// detect abnormal cases for types", "+\t\t\t// detect abnormal cases for classes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b727057d6428500323097e9158c1f0e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["-\t\tif ((modifiers & AccAlternateModifierProblem) != 0)", "+\t\tif ((modifiers & ExtraCompilerModifiers.AccAlternateModifierProblem) != 0)", "-\t\tint realModifiers = modifiers & AccJustFlag;", "+\t\tint realModifiers = modifiers & ExtraCompilerModifiers.AccJustFlag;", "-\t\t\tif ((realModifiers & ~(AccPublic | AccAbstract)) != 0) {", "-\t\t\t\tif ((declaringClass.modifiers & AccAnnotation) != 0)", "+\t\t\tif ((realModifiers & ~(ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract)) != 0) {", "+\t\t\t\tif ((declaringClass.modifiers & ClassFileConstants.AccAnnotation) != 0)", "-\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected", "-\t\t\t| AccAbstract | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp);", "+\t\tint unexpectedModifiers = ~(ClassFileConstants.AccPublic | ClassFileConstants.AccPrivate | ClassFileConstants.AccProtected", "+\t\t\t| ClassFileConstants.AccAbstract | ClassFileConstants.AccStatic | ClassFileConstants.AccFinal | ClassFileConstants.AccSynchronized | ClassFileConstants.AccNative | ClassFileConstants.AccStrictfp);", "-\t\t\tmodifiers &= ~AccJustFlag | ~unexpectedModifiers;", "+\t\t\tmodifiers &= ~ExtraCompilerModifiers.AccJustFlag | ~unexpectedModifiers;", "-\t\tint accessorBits = realModifiers & (AccPublic | AccProtected | AccPrivate);", "+\t\tint accessorBits = realModifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate);", "-\t\t\tif ((accessorBits & AccPublic) != 0) {", "-\t\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\t\tmodifiers &= ~AccProtected;", "-\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "-\t\t\t\tmodifiers &= ~AccPrivate;", "+\t\t\tif ((accessorBits & ClassFileConstants.AccPublic) != 0) {", "+\t\t\t\tif ((accessorBits & ClassFileConstants.AccProtected) != 0)", "+\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccProtected;", "+\t\t\t\tif ((accessorBits & ClassFileConstants.AccPrivate) != 0)", "+\t\t\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;", "+\t\t\t} else if ((accessorBits & ClassFileConstants.AccProtected) != 0 && (accessorBits & ClassFileConstants.AccPrivate) != 0) {", "+\t\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;", "-\t\tif ((modifiers & AccAbstract) != 0) {", "-\t\t\tint incompatibleWithAbstract = AccPrivate | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp;", "+\t\tif ((modifiers & ClassFileConstants.AccAbstract) != 0) {", "+\t\t\tint incompatibleWithAbstract = ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic | ClassFileConstants.AccFinal | ClassFileConstants.AccSynchronized | ClassFileConstants.AccNative | ClassFileConstants.AccStrictfp;", "-\t\tif ((modifiers & AccNative) != 0 && (modifiers & AccStrictfp) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccNative) != 0 && (modifiers & ClassFileConstants.AccStrictfp) != 0)", "-\t\tif (((realModifiers & AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())", "+\t\tif (((realModifiers & ClassFileConstants.AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())"]}], "num": 14790}
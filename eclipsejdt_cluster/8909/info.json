{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fa410459841e1e837e17543bceda309", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a0713ea6bbc9cdce9e0da539ecea0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "4da5a9a150c1a47a773a4fd9e96abe9171b5562d", "commitAfterChange": "33b8e652534880a44865eb30d6ce68dd0b1d0126", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t", "-\t\t\tString unqualifiedName= name;", "-\t\t\tint index= name.lastIndexOf('$');", "-\t\t\tif (index != -1) {", "-\t\t\t\t//the type name of the inner type", "-\t\t\t\tunqualifiedName= Util.localTypeName(name, index, name.length());", "-\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "-\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "-\t\t\t}", "-\t\t\tString matchName= partialMatch ? name.toLowerCase() : name;", "-\t\t\tfor (int i= 0; i < length; i++) {", "-\t\t\t\tif (requestor.isCanceled())", "-\t\t\t\t\treturn;", "-\t\t\t\tIClassFile classFile= classFiles[i];", "-\t\t\t\tString elementName = classFile.getElementName();", "-\t\t\t\tif (partialMatch) elementName = elementName.toLowerCase();", "-\t", "-\t\t\t\t/**", "-\t\t\t\t * Must use startWith because matchName will never have the ", "-\t\t\t\t * extension \".class\" and the elementName always will.", "-\t\t\t\t */", "-\t\t\t\tif (elementName.startsWith(matchName)) {", "-\t\t\t\t\tIType type= null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\ttype= classFile.getType();", "-\t\t\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\t\t\tcontinue; // the classFile is not present", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!partialMatch || (type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "-\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, partialMatch) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\tif (!partialMatch) {", "+\t\t\t\t// exact match", "+\t\t\t\tfor (int i= 0; i < length; i++) {", "+\t\t\t\t\tif (requestor.isCanceled()) return;", "+\t\t\t\t\tClassFile classFile= (ClassFile) classFiles[i];", "+\t\t\t\t\tif (name.equals(classFile.name)) { // ClassFile#name contains the name of the .class file without the .class extension", "+\t\t\t\t\t\tIType type = classFile.getType();", "+\t\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "+\t\t\t\t\t\t\tbreak;  // since an exact match was requested, no other matching type can exist", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tString unqualifiedName = name;", "+\t\t\t\tint index = name.lastIndexOf('$');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\t//the type name of the inner type", "+\t\t\t\t\tunqualifiedName = Util.localTypeName(name, index, name.length());", "+\t\t\t\t\t// unqualifiedName is empty if the name ends with a '$' sign.", "+\t\t\t\t\t// See http://dev.eclipse.org/bugs/show_bug.cgi?id=14642", "+\t\t\t\t}", "+\t\t\t\tString matchName = name.toLowerCase();", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tIClassFile classFile= classFiles[i];", "+\t\t\t\t\tString elementName = classFile.getElementName();", "+\t\t\t\t\telementName = elementName.toLowerCase();", "+\t\t", "+\t\t\t\t\t/**", "+\t\t\t\t\t * Must use startWith because matchName will never have the ", "+\t\t\t\t\t * extension \".class\" and the elementName always will.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (elementName.startsWith(matchName)) {", "+\t\t\t\t\t\tIType type= null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\ttype = classFile.getType();", "+\t\t\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\t\t\tcontinue; // the classFile is not present", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif ((type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "+\t\t\t\t\t\t\tif (nameMatches(unqualifiedName, type, true/*partial match*/) && acceptType(type, acceptFlags, false/*not a source type*/))", "+\t\t\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcdb5000db6eec526dee4e8ce3a4bbae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "commitAfterChange": "81fe472327b51c234112233c89df88e95ab01675", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static boolean conflictsWithOutputLocation(IPath folderPath, JavaProject project)", "signatureAfterChange": " \tpublic static boolean conflictsWithOutputLocation(IPath folderPath, JavaProject project)", "diff": ["-\t\t\t\t// only allow nesting in outputlocation if there is a corresponding source folder", "-\t\t\t\treturn project.getClasspathEntryFor(outputLocation) == null;", "+\t\t\t\t// only allow nesting in project's output if there is a corresponding source folder", "+\t\t\t\t// or if the project's output is not used (i.e. all source folders have a custom output)", "+\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "+\t\t\t\tboolean isOutputUsed = false;", "+\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "+\t\t\t\t\t\tif (entry.getPath().equals(outputLocation)) {", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (entry.getOutputLocation() == null) {", "+\t\t\t\t\t\t\tisOutputUsed = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn isOutputUsed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f743ce6d7b19f6ffe7cdde7aeaa0681c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "5dde5c5122b6fd8476cd65e0c9985a4c2fa7aaf1", "commitAfterChange": "8cc940e0f7737c5f198b9632e86ecfcd6479e105", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(\r \t\tIResourceDelta delta, \r \t\tint elementType, \r \t\tIJavaProject currentProject,\r \t\tIPath currentOutput,\r \t\tboolean currentProjIsOutput)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(\r \t\tIResourceDelta delta, \r \t\tint elementType, \r \t\tIJavaProject currentProject,\r \t\tIPath currentOutput,\r \t\tint outputTraverseMode)", "diff": ["-\t\tboolean currentProjIsOutput) {\r", "+\t\tint outputTraverseMode) {\r", "-\t\t\t\t\tcurrentProjIsOutput = proj.getProject().getFullPath().equals(currentOutput);\r", "+\t\t\t\t\tif (proj.getProject().getFullPath().equals(currentOutput)){ // case of proj==bin==src\r", "+\t\t\t\t\t\toutputTraverseMode = SOURCE;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// check case of src==bin\r", "+\t\t\t\t\t\tIClasspathEntry[] classpath = proj.getResolvedClasspath(true);\r", "+\t\t\t\t\t\tfor (int i = 0, length = classpath.length; i < length; i++) {\r", "+\t\t\t\t\t\t\tIClasspathEntry entry = classpath[i];\r", "+\t\t\t\t\t\t\tif (entry.getPath().equals(currentOutput)) {\r", "+\t\t\t\t\t\t\t\toutputTraverseMode = (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) ? SOURCE : BINARY;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\tif (currentProjIsOutput) {\r", "-\t\t\t\t\t// case of proj=src\r", "-\t\t\t\t\tif (childType == IJavaElement.CLASS_FILE) {\r", "+\t\t\t\tif (currentOutput != null && currentOutput.isPrefixOf(childPath)) {\r", "+\t\t\t\t\tif (outputTraverseMode != IGNORE) {\r", "+\t\t\t\t\t\t// case of bin=src\r", "+\t\t\t\t\t\tif (outputTraverseMode == SOURCE && childType == IJavaElement.CLASS_FILE) {\r", "+\t\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// case of .class file under project and no source folder\r", "+\t\t\t\t\t\t// proj=bin\r", "+\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT \r", "+\t\t\t\t\t\t\t&& childRes instanceof IFile \r", "+\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {\r", "+\t\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "-\t\t\t\t\t// case of .class file under project and no source folder\r", "-\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT \r", "-\t\t\t\t\t\t&& childRes instanceof IFile \r", "-\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {\r", "-\t\t\t\t\t\tcontinue;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (currentOutput != null && currentOutput.isPrefixOf(childPath)) {\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, currentProjIsOutput)) {\r", "+\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {\r", "-\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, false);\r", "+\t\t\t\t\tthis.traverseDelta(child, IJavaElement.PACKAGE_FRAGMENT_ROOT, projectOfRoot, null, IGNORE); // binary output of projectOfRoot cannot be this root\r"]}], "num": 8909}
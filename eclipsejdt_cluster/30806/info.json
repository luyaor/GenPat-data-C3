{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90f3328e7574d9d7edecdde99faa13c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d00f55e95b990fce27f1ddb064e5c4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "commitAfterChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)", "-\t\t\t\tthis.innersNeedUpdate = true;", "+\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE) {", "+\t\t\t\tif (this.innerInferenceHelper == null)", "+\t\t\t\t\tthis.innerInferenceHelper = new InnerInferenceHelper();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a50615cc13945426507eed42cf1be627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "commitAfterChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression())", "-\t\t\t\t\tthis.innersNeedUpdate = true;", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression()) {", "+\t\t\t\t\tif (this.innerInferenceHelper == null)", "+\t\t\t\t\t\tthis.innerInferenceHelper = new InnerInferenceHelper();", "+\t\t\t\t}"]}], "num": 30806}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e13282d584d2377093bc72fb01909a4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44dd968d3a5a21c46a495c61eff78fb8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/IntersectingPattern.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-\t\t\tSearchPattern pattern = ((InternalSearchPattern) this).currentPattern();", "-\t\t\tEntryResult[] entries = ((InternalSearchPattern)pattern).queryIn(index);", "+\t\t\tSearchPattern pattern = currentPattern();", "+\t\t\tEntryResult[] entries = pattern.queryIn(index);", "-\t\t\t((InternalSearchPattern) this).acceptMatch((String) names[i], containerPath, separator, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result", "+\t\t\tacceptMatch((String) names[i], containerPath, separator, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68c1d87c7fbc242b33ac9ee51b6e5d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "e89b745226951dc285ae9b6ac2205ec85db7ac96", "commitAfterChange": "407471f4aeb452770b61f384c43696430b8ea5b0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic Object[] getEmulationPath( \t\t\tReferenceBinding targetEnclosingType,  \t\t\tboolean onlyExactMatch, \t\t\tboolean ignoreEnclosingArgInConstructorCall)", "signatureAfterChange": " \tpublic Object[] getEmulationPath( \t\t\tReferenceBinding targetEnclosingType,  \t\t\tboolean onlyExactMatch, \t\t\tboolean ignoreEnclosingArgInConstructorCall)", "diff": ["-\t\t\tpath[0] = ((NestedTypeBinding) sourceType).getSyntheticArgument((SourceTypeBinding) currentType, onlyExactMatch);", "+\t\t\tpath[0] = ((NestedTypeBinding) sourceType).getSyntheticArgument(currentType, onlyExactMatch);", "-\t\t\tpath[0] = sourceType.getSyntheticField((SourceTypeBinding) currentType, onlyExactMatch);", "+\t\t\tpath[0] = sourceType.getSyntheticField(currentType, onlyExactMatch);", "-\t\t\t\tsyntheticField = ((NestedTypeBinding) currentType).getSyntheticField((SourceTypeBinding) currentEnclosingType, onlyExactMatch);", "+\t\t\t\tsyntheticField = ((NestedTypeBinding) currentType).getSyntheticField(currentEnclosingType, onlyExactMatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1b637796252b16e5655498c0b39938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public AndPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "signatureAfterChange": "  public AndPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "diff": ["-\t((InternalSearchPattern) this).mustResolve = ((InternalSearchPattern) leftPattern).mustResolve || ((InternalSearchPattern) rightPattern).mustResolve;", "+\tthis.mustResolve = leftPattern.mustResolve || rightPattern.mustResolve;"]}], "num": 11649}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32de75282549abfc277110ab79a63b70", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f4eb068d7a13c921ce41e1eee2c579", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  ArrayBinding createArrayType(int dimensionCount, LookupEnvironment lookupEnvironment)", "signatureAfterChange": "  ArrayBinding createArrayType(int dimensionCount, LookupEnvironment lookupEnvironment)", "diff": ["-\tif (localArrayBindings == null) {", "-\t\tlocalArrayBindings = new ArrayBinding[] {new ArrayBinding(this, dimensionCount, lookupEnvironment)};", "-\t\treturn localArrayBindings[0];", "+\tif (this.localArrayBindings == null) {", "+\t\tthis.localArrayBindings = new ArrayBinding[] {new ArrayBinding(this, dimensionCount, lookupEnvironment)};", "+\t\treturn this.localArrayBindings[0];", "-", "-\tint length = localArrayBindings.length;", "+\tint length = this.localArrayBindings.length;", "-\t\tif (localArrayBindings[i].dimensions == dimensionCount)", "-\t\t\treturn localArrayBindings[i];", "+\t\tif (this.localArrayBindings[i].dimensions == dimensionCount)", "+\t\t\treturn this.localArrayBindings[i];", "-\tSystem.arraycopy(localArrayBindings, 0, localArrayBindings = new ArrayBinding[length + 1], 0, length); ", "-\treturn localArrayBindings[length] = new ArrayBinding(this, dimensionCount, lookupEnvironment);", "+\tSystem.arraycopy(this.localArrayBindings, 0, this.localArrayBindings = new ArrayBinding[length + 1], 0, length); ", "+\treturn this.localArrayBindings[length] = new ArrayBinding(this, dimensionCount, lookupEnvironment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35aac5efddc518d79585481dd9b23e11", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " public ProblemReporter problemReporter()", "signatureAfterChange": " public ProblemReporter problemReporter()", "diff": ["-\tif (scanner.recordLineSeparator) {", "-\t\tcompilationUnit.compilationResult.lineSeparatorPositions = scanner.getLineEnds();", "+\tif (this.scanner.recordLineSeparator) {", "+\t\tthis.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();", "-\tproblemReporter.referenceContext = referenceContext;", "-\treturn problemReporter;", "+\tthis.problemReporter.referenceContext = this.referenceContext;", "+\treturn this.problemReporter;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae9653e806b9915d8824425003f2510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "   \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-", "-\t\ttype.print(0, output); ", "-\t\tfor (int i = 0; i < dimensions.length; i++) {", "-\t\t\tif (dimensions[i] == null)", "+\t\tthis.type.print(0, output); ", "+\t\tfor (int i = 0; i < this.dimensions.length; i++) {", "+\t\t\tif (this.dimensions[i] == null)", "-\t\t\t\tdimensions[i].printExpression(0, output);", "+\t\t\t\tthis.dimensions[i].printExpression(0, output);", "-\t\tif (initializer != null) initializer.printExpression(0, output);", "+\t\tif (this.initializer != null) this.initializer.printExpression(0, output);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a454928218d87eb5b999862ec4d2f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["-\t\ttryBlock.printStatement(indent + 1, output);", "+\t\tthis.tryBlock.printStatement(indent + 1, output);", "-\t\tif (catchBlocks != null)", "-\t\t\tfor (int i = 0; i < catchBlocks.length; i++) {", "+\t\tif (this.catchBlocks != null)", "+\t\t\tfor (int i = 0; i < this.catchBlocks.length; i++) {", "-\t\t\t\t\tcatchArguments[i].print(0, output).append(\") \"); //$NON-NLS-1$", "-\t\t\t\t\tcatchBlocks[i].printStatement(indent + 1, output);", "+\t\t\t\t\tthis.catchArguments[i].print(0, output).append(\") \"); //$NON-NLS-1$", "+\t\t\t\t\tthis.catchBlocks[i].printStatement(indent + 1, output);", "-\t\tif (finallyBlock != null) {", "+\t\tif (this.finallyBlock != null) {", "-\t\t\tfinallyBlock.printStatement(indent + 1, output);", "+\t\t\tthis.finallyBlock.printStatement(indent + 1, output);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5fe53cdc45c5a14ecd518a88c6e7a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-", "+\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "-\t\t\tif (qualification != null) {", "+\t\t\tif (this.qualification != null) {", "-\t\t\t\t\tqualification", "+\t\t\t\t\tthis.qualification", "-\t\t\tif (arguments != null) {", "-\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\tif (this.arguments != null) {", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "-\t\t\t\t\t\targuments[i]", "+\t\t\t\t\t\tthis.arguments[i]", "-\t\t\tif ((thrownExceptions = binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {", "+\t\t\tif ((thrownExceptions = this.binding.thrownExceptions) != Binding.NO_EXCEPTIONS) {", "-\t\t\t\t\t(accessMode == ImplicitSuper)", "+\t\t\t\t\t(this.accessMode == ExplicitConstructorCall.ImplicitSuper)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b0f43f60290cbee1a419563c0a9aa83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": " private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\tfor (int i = 0, length = knownFileNames.length; i < length; i++)", "-\t\tif (qualifiedTypeName.equals(knownFileNames[i]))", "+\tfor (int i = 0, length = this.knownFileNames.length; i < length; i++)", "+\t\tif (qualifiedTypeName.equals(this.knownFileNames[i]))", "-\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {", "-\t\t\tNameEnvironmentAnswer answer = classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);", "+\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++) {", "+\t\t\tNameEnvironmentAnswer answer = this.classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);", "-\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {", "-\t\t\tClasspath p = classpaths[i];", "+\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++) {", "+\t\t\tClasspath p = this.classpaths[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9caab1c8fab299375a99ae2f9cb65e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": " \t \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["-\t\t\tif (enclosingInstance != null)", "-\t\t\t\tenclosingInstance.traverse(visitor, scope);", "+\t\t\tif (this.enclosingInstance != null)", "+\t\t\t\tthis.enclosingInstance.traverse(visitor, scope);", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentsLength = arguments.length;", "+\t\t\tif (this.arguments != null) {", "+\t\t\t\tint argumentsLength = this.arguments.length;", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "+\t\t\t\t\tthis.arguments[i].traverse(visitor, scope);", "-\t\t\tif (anonymousType != null)", "-\t\t\t\tanonymousType.traverse(visitor, scope);", "+\t\t\tif (this.anonymousType != null)", "+\t\t\t\tthis.anonymousType.traverse(visitor, scope);"]}], "num": 67891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46733f00916d839bb9b3d1c40331da61", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc49d6a7684b78c291ed6bd3dedbe7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  protected void acceptPath(IIndexSearchRequestor requestor, String path)", "signatureAfterChange": " public char[] encodeIndexKey()", "diff": ["-", "-protected void acceptPath(IIndexSearchRequestor requestor, String path) {", "-\trequestor.acceptFieldDeclaration(path, null); // just remember the path", "+public char[] encodeIndexKey() {", "+\t// local variables are not indexed", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919d9deea3aef191931281c50d3bf438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void computeSuperTypeNames()", "signatureAfterChange": " protected char[][][] computeSuperTypeNames(IType focusType)", "diff": ["-\t */", "-\tprivate void computeSuperTypeNames() {", "-\t\tif (this.allSuperTypeNames != null) ", "-\t\t\treturn; // all super types have already been computed", "-\t\t", "-\t\tIType focusType = getFocusType();", "-\t\tif (focusType == null) return;", "-", "-\t\tString fullyQualifiedName = focusType.getFullyQualifiedName();", "-\t\tint lastDot = fullyQualifiedName.lastIndexOf('.');", "-\t\tchar[] qualification = lastDot == -1 ? CharOperation.NO_CHAR : fullyQualifiedName.substring(0, lastDot).toCharArray();", "-\t\tchar[] simpleName = focusType.getElementName().toCharArray();", "-", "-\t\tSuperTypeNamesCollector superTypeNamesCollector = ", "-\t\t\tnew SuperTypeNamesCollector(", "-\t\t\t\tthis.pattern, ", "-\t\t\t\tsimpleName,", "-\t\t\t\tqualification,", "-\t\t\t\tnew MatchLocator(this.pattern, this.detailLevel, this.collector, this.scope, this.progressMonitor), // clone MatchLocator so that it has no side effect", "-\t\t\t\tfocusType, ", "-\t\t\t\tthis.progressMonitor);", "-\t\ttry {", "-\t\t\tthis.allSuperTypeNames = superTypeNamesCollector.collect();", "-\t\t} catch (JavaModelException e) {", "-\t\t}", "-\t}", "+ */", "+protected char[][][] computeSuperTypeNames(IType focusType) {", "+\tString fullyQualifiedName = focusType.getFullyQualifiedName();", "+\tint lastDot = fullyQualifiedName.lastIndexOf('.');", "+\tchar[] qualification = lastDot == -1 ? CharOperation.NO_CHAR : fullyQualifiedName.substring(0, lastDot).toCharArray();", "+\tchar[] simpleName = focusType.getElementName().toCharArray();", "+", "+\tSuperTypeNamesCollector superTypeNamesCollector = ", "+\t\tnew SuperTypeNamesCollector(", "+\t\t\tthis.pattern, ", "+\t\t\tsimpleName,", "+\t\t\tqualification,", "+\t\t\tnew MatchLocator(this.pattern, this.detailLevel, this.collector, this.scope, this.progressMonitor), // clone MatchLocator so that it has no side effect", "+\t\t\tfocusType, ", "+\t\t\tthis.progressMonitor);", "+\ttry {", "+\t\tthis.allSuperTypeNames = superTypeNamesCollector.collect();", "+\t} catch (JavaModelException e) {", "+\t}", "+\treturn this.allSuperTypeNames;", "+}"]}], "num": 27646}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6902c147d72e365b5e797d4ffbc36db5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc40fb822ceae66ae27cf154178d3dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ExternalAnnotationProvider.java", "commitBeforeChange": "d08e87c35b21123010227cf2729df51d820e4d50", "commitAfterChange": "48a2d2499344bebca223a2f8c964ed5900cd0012", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ExternalAnnotationProvider(File annotationSource) throws IOException", "signatureAfterChange": " \t \tpublic ExternalAnnotationProvider(File annotationSource) throws IOException", "diff": ["+\t\tif (!annotationSource.exists()) throw new FileNotFoundException(annotationSource.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485d30c73c7055266645d587dc0dd15d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "ae980cab0e47f9f9109f15f27f7ea765847cf9bc", "commitAfterChange": "4d657d16dcce8d103534cfb60b4be82696664aa1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public IClassFile getClassFile(String name)", "signatureAfterChange": " public IClassFile getClassFile(String name)", "diff": ["+\tif (!Util.isClassFileName(name)) {", "+\t\tthrow new IllegalArgumentException(Util.bind(\"element.invalidClassFileName\")); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682ed777cba0da3473e115bc88eae4e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+ */", "+protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+", "+\t// check whether this pkg can be opened", "+\tif (!underlyingResource.isAccessible()) throw newNotPresentException();", "+", "+\tint kind = getKind();", "+\tString extType;", "+\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "+\t\textType = EXTENSION_java;", "+\t} else {", "+\t\textType = EXTENSION_class;", "+\t}", "+", "+\tArrayList vChildren = new ArrayList();", "+\ttry {", "+\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "+\t\tIResource[] members = ((IContainer) underlyingResource).members();", "+\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\t\tIResource child = members[i];", "+\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "+\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "+\t\t\t\tif (extension != null) {", "+\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "+\t\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultCompilationUnitOwner.PRIMARY);", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} catch (CoreException e) {", "+\t\tthrow new JavaModelException(e);", "+\t}", "+\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "+\tvChildren.toArray(children);", "+\tinfo.setChildren(children);", "+\treturn true;", "- */", "-protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "-", "-\tint kind = getKind();", "-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-", "-\tArrayList vChildren = new ArrayList();", "-\ttry {", "-\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "-\t\tIResource[] members = ((IContainer) underlyingResource).members();", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "-\tvChildren.toArray(children);", "-\tinfo.setChildren(children);", "-\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d11629a774fad780d89d117523065d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "67127a808052a241e0c834cd424c5e4ca5356ab0", "commitAfterChange": "af5004291294454f752436ff36b766d6f414a565", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r \tprivate void configure(String[] argv) throws InvalidInputException", "diff": ["- */\r", "-private void configure(String[] argv) throws InvalidInputException {\r", "-\tif ((argv == null) || (argv.length == 0))\r", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$\r", "-\tfinal int InsideClasspath = 1;\r", "-\tfinal int InsideDestinationPath = 2;\r", "-\tfinal int TargetSetting = 4;\r", "-\tfinal int InsideLog = 8;\r", "-\tfinal int InsideRepetition = 16;\r", "-\tfinal int InsideSource = 32;\r", "-\tfinal int InsideDefaultEncoding = 64;\r", "-\tfinal int Default = 0;\r", "-\tint DEFAULT_SIZE_CLASSPATH = 4;\r", "-\tboolean warnOptionInUsed = false;\r", "-\tboolean noWarnOptionInUsed = false;\r", "-\tint pathCount = 0;\r", "-\tint index = -1, filesCount = 0, argCount = argv.length;\r", "-\tint mode = Default;\r", "-\trepetitions = 0;\r", "-\tboolean versionIDRequired = false;\r", "-\tboolean printUsageRequired = false;\r", "-\r", "-\tboolean didSpecifyCompliance = false;\r", "-\tboolean didSpecifySourceLevel = false;\r", "-\tboolean didSpecifyDefaultEncoding = false;\r", "-\r", "-\tString customEncoding = null;\r", "-\tString currentArg = \"\"; //$NON-NLS-1$\r", "-\t\t\r", "-\twhile (++index < argCount) {\r", "-\r", "-\t\tif (customEncoding != null){\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$\r", "-\t\t}\r", "-\r", "-\t\tcurrentArg = argv[index].trim();\r", "-\r", "-\t\tcustomEncoding = null;\r", "-\t\tif (currentArg.endsWith(\"]\")){ //$NON-NLS-1$ // look for encoding specification\r", "-\t\t\tint encodingStart = currentArg.indexOf('[') + 1;\r", "-\t\t\tint encodingEnd = currentArg.length() - 1;\r", "-\t\t\tif (encodingStart >= 1){\r", "-\t\t\t\tif (encodingStart < encodingEnd){\r", "-\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);\r", "-\t\t\t\t\ttry {// ensure encoding is supported\r", "-\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);\r", "-\t\t\t\t\t} catch(UnsupportedEncodingException e){\r", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$\r", "-\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);\r", "-\t\tif (currentArg.endsWith(\".java\")) { //$NON-NLS-1$\r", "-\t\t\tif (filenames == null) {\r", "-\t\t\t\tfilenames = new String[argCount - index];\r", "-\t\t\t\tencodings = new String[argCount - index];\r", "-\t\t\t} else if (filesCount == filenames.length) {\r", "-\t\t\t\tint length = filenames.length;\r", "-\t\t\t\tSystem.arraycopy(filenames, 0, (filenames = new String[length + argCount - index]), 0, length);\r", "-\t\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + argCount - index]), 0, length);\r", "+\t */\r", "+\tprivate void configure(String[] argv) throws InvalidInputException {\r", "+\t\t\r", "+\t\tif ((argv == null) || (argv.length == 0))\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$\r", "+\t\tfinal int InsideClasspath = 1;\r", "+\t\tfinal int InsideDestinationPath = 2;\r", "+\t\tfinal int TargetSetting = 4;\r", "+\t\tfinal int InsideLog = 8;\r", "+\t\tfinal int InsideRepetition = 16;\r", "+\t\tfinal int InsideSource = 32;\r", "+\t\tfinal int InsideDefaultEncoding = 64;\r", "+\t\tfinal int Default = 0;\r", "+\t\tint DEFAULT_SIZE_CLASSPATH = 4;\r", "+\t\tboolean warnOptionInUse = false;\r", "+\t\tboolean noWarnOptionInUse = false;\r", "+\t\tint pathCount = 0;\r", "+\t\tint index = -1, filesCount = 0, argCount = argv.length;\r", "+\t\tint mode = Default;\r", "+\t\trepetitions = 0;\r", "+\t\tboolean versionIDRequired = false;\r", "+\t\tboolean printUsageRequired = false;\r", "+\r", "+\t\tboolean didSpecifyCompliance = false;\r", "+\t\tboolean didSpecifySourceLevel = false;\r", "+\t\tboolean didSpecifyDefaultEncoding = false;\r", "+\r", "+\t\tString customEncoding = null;\r", "+\t\tString currentArg = \"\"; //$NON-NLS-1$\r", "+\r", "+\t\twhile (++index < argCount) {\r", "+\r", "+\t\t\tif (customEncoding != null) {\r", "+\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\tMain.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$\r", "-\t\t\tfilenames[filesCount] = currentArg;\r", "-\t\t\tencodings[filesCount++] = customEncoding;\r", "+\r", "+\t\t\tcurrentArg = argv[index].trim();\r", "+\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$\r", "-\t\t\tif (log != null)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateLog\",currentArg)); //$NON-NLS-1$\r", "-\t\t\tmode = InsideLog;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$\r", "-\t\t\tif (repetitions > 0)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateRepeat\",currentArg)); //$NON-NLS-1$\r", "-\t\t\tmode = InsideRepetition;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$\r", "-\t\t\tmode = InsideSource;\r", "-\t\t\tdidSpecifySourceLevel = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$\r", "-\t\t\tmode = InsideDefaultEncoding;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$\r", "-\t\t\tif (didSpecifyCompliance) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateCompliance\",currentArg)); //$NON-NLS-1$\r", "+\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$ \r", "+\t\t\t\t// look for encoding specification\r", "+\t\t\t\tint encodingStart = currentArg.indexOf('[') + 1;\r", "+\t\t\t\tint encodingEnd = currentArg.length() - 1;\r", "+\t\t\t\tif (encodingStart >= 1) {\r", "+\t\t\t\t\tif (encodingStart < encodingEnd) {\r", "+\t\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);\r", "+\t\t\t\t\t\ttry { // ensure encoding is supported\r", "+\t\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);\r", "+\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {\r", "+\t\t\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\t\t\tMain.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);\r", "+\t\t\t\t}\r", "-\t\t\tdidSpecifyCompliance = true;\r", "-\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "-\t\t\tif (!didSpecifySourceLevel){\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$\r", "-\t\t\tif (didSpecifyCompliance) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateCompliance\",currentArg)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tdidSpecifyCompliance = true;\r", "-\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);\r", "-\t\t\tif (!didSpecifySourceLevel){\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$\r", "-\t\t\tif (destinationPath != null)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateOutputPath\",currentArg)); //$NON-NLS-1$\r", "-\t\t\tmode = InsideDestinationPath;\r", "-\t\t\tgeneratePackagesStructure = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-classpath\") || currentArg.equals(\"-cp\")) { //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\tif (pathCount > 0)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateClasspath\",currentArg)); //$NON-NLS-1$\r", "-\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];\r", "-\t\t\tmode = InsideClasspath;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tshowProgress = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tproceedOnError = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\ttimer = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-version\") || currentArg.equals(\"-v\")) { //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\tversionIDRequired = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (\"-deprecation\".equals(currentArg)) { //$NON-NLS-1$\r", "-\t\t\tnoWarn = false;\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-help\")) { //$NON-NLS-1$\r", "-\t\t\tprintUsageRequired = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\t\t\r", "-\t\tif (currentArg.equals(\"-noImportError\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.WARNING);\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tsystemExitWhenFinished = false;\r", "-\t\t\tcontinue;\r", "-\t\t}\t\t\r", "-\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tverbose = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tproduceRefInfo = true;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tString debugOption = currentArg;\r", "-\t\t\tint length = currentArg.length();\r", "-\t\t\tif (length == 2) {\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "+\r", "+\t\t\tif (currentArg.endsWith(\".java\")) { //$NON-NLS-1$\r", "+\t\t\t\tif (filenames == null) {\r", "+\t\t\t\t\tfilenames = new String[argCount - index];\r", "+\t\t\t\t\tencodings = new String[argCount - index];\r", "+\t\t\t\t} else if (filesCount == filenames.length) {\r", "+\t\t\t\t\tint length = filenames.length;\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tfilenames,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t(filenames = new String[length + argCount - index]),\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlength);\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tencodings,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t(encodings = new String[length + argCount - index]),\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlength);\r", "+\t\t\t\t}\r", "+\t\t\t\tfilenames[filesCount] = currentArg;\r", "+\t\t\t\tencodings[filesCount++] = customEncoding;\r", "+\t\t\t\tcustomEncoding = null;\r", "+\t\t\t\tmode = Default;\r", "-\t\t\tif (length > 3) {\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "-\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\")) //$NON-NLS-1$\r", "+\t\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$\r", "+\t\t\t\tif (log != null)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tmode = InsideLog;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$\r", "+\t\t\t\tif (repetitions > 0)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tmode = InsideRepetition;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = InsideSource;\r", "+\t\t\t\tdidSpecifySourceLevel = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = InsideDefaultEncoding;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\tif (didSpecifyCompliance) {\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg));\r", "+\t\t\t\t\t//$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tdidSpecifyCompliance = true;\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\tif (!didSpecifySourceLevel) {\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\t}\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\tif (didSpecifyCompliance) {\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tdidSpecifyCompliance = true;\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);\r", "+\t\t\t\tif (!didSpecifySourceLevel) {\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "+\t\t\t\t}\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$\r", "+\t\t\t\tif (destinationPath != null)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateOutputPath\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tmode = InsideDestinationPath;\r", "+\t\t\t\tgeneratePackagesStructure = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-classpath\")\r", "+\t\t\t\t|| currentArg.equals(\"-cp\")) { //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\t\tif (pathCount > 0)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateClasspath\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];\r", "+\t\t\t\tmode = InsideClasspath;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tshowProgress = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tproceedOnError = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\ttimer = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-version\")\r", "+\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\t\tversionIDRequired = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (\"-deprecation\".equals(currentArg)) { //$NON-NLS-1$\r", "+\t\t\t\twarnOptionInUse = true;\r", "+\t\t\t\tif (noWarnOptionInUse)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\t\t\t\t\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-help\")) { //$NON-NLS-1$\r", "+\t\t\t\tprintUsageRequired = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-noImportError\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidImport,\r", "+\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tsystemExitWhenFinished = false;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tverbose = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tproduceRefInfo = true;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tString debugOption = currentArg;\r", "+\t\t\t\tint length = currentArg.length();\r", "+\t\t\t\tif (length == 2) {\r", "+\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,\r", "+\t\t\t\t\t\tCompilerOptions.GENERATE);\r", "+\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,\r", "+\t\t\t\t\t\tCompilerOptions.GENERATE);\r", "+\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,\r", "+\t\t\t\t\t\tCompilerOptions.GENERATE);\r", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tif (length > 3) {\r", "+\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,\r", "+\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,\r", "+\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,\r", "+\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\")) //$NON-NLS-1$\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\tStringTokenizer tokenizer =\r", "+\t\t\t\t\t\tnew StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\t\t\t\tString token = tokenizer.nextToken();\r", "+\t\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,\r", "+\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);\r", "+\t\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,\r", "+\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);\r", "+\t\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,\r", "+\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\t\t\tMain.bind(\"configure.invalidDebugOption\", debugOption));\r", "+\t\t\t\t\t\t\t//$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\t}\r", "+\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\tMain.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$\r", "+\t\t\t\tnoWarnOptionInUse = true;\r", "+\t\t\t\tnoWarn = true;\r", "+\t\t\t\tif (warnOptionInUse)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$\r", "+\t\t\t\twarnOptionInUse = true;\r", "+\t\t\t\tif (noWarnOptionInUse)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tString warningOption = currentArg;\r", "+\t\t\t\tint length = currentArg.length();\r", "+\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) { //$NON-NLS-1$\r", "+\t\t\t\t\tnoWarn = true;\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (length < 6)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$\r", "+\t\t\t\tStringTokenizer tokenizer =\r", "+\t\t\t\t\tnew StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\tint tokenCounter = 0;\r", "+\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,\r", "+\t\t\t\t\tCompilerOptions.IGNORE);\r", "+\r", "-\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\t\ttokenCounter++;\r", "+\t\t\t\t\tif (token.equals(\"constructorName\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"deprecation\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"unusedLocals\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"unusedArguments\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"syntheticAccess\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"nls\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "+\t\t\t\t\t} else if (token.equals(\"assertIdentifier\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\toptions.put(\r", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,\r", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);\r", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\",debugOption)); //$NON-NLS-1$\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\", token)); //$NON-NLS-1$\r", "+\t\t\t\tif (tokenCounter == 0)\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\",debugOption)); //$NON-NLS-1$\r", "-\t\t}\r", "-\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$\r", "-\t\t\tnoWarnOptionInUsed = true;\r", "-\t\t\tnoWarn = true;\r", "-\t\t\tif (warnOptionInUsed)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "-\t\t\tmode = Default;\t\t\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$\r", "-\t\t\twarnOptionInUsed = true;\r", "-\t\t\tif (noWarnOptionInUsed)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tString warningOption = currentArg;\r", "-\t\t\tint length = currentArg.length();\r", "-\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) { //$NON-NLS-1$\r", "-\t\t\t\tnoWarn = true;\r", "+\t\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$\r", "+\t\t\t\tmode = TargetSetting;\r", "-\t\t\tif (length < 6)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningConfiguration\",warningOption)); //$NON-NLS-1$\r", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"); //$NON-NLS-1$\r", "-\t\t\tint tokenCounter = 0;\r", "-\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);\r", "-\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);\r", "-\r", "-\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\tString token = tokenizer.nextToken();\r", "-\t\t\t\ttokenCounter++;\r", "-\t\t\t\tif (token.equals(\"constructorName\")) { //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) { //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) { //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"deprecation\")) { //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"unusedLocals\")) { //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"unusedArguments\")) { //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"syntheticAccess\")){ //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"nls\")){ //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.WARNING);\r", "-\t\t\t\t} else if (token.equals(\"assertIdentifier\")){ //$NON-NLS-1$\r", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.WARNING);\r", "+\t\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(\r", "+\t\t\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal,\r", "+\t\t\t\t\tCompilerOptions.PRESERVE);\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (mode == TargetSetting) {\r", "+\t\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "+\t\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);\r", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\",token)); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "-\t\t\tif (tokenCounter == 0)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningOption\",currentArg)); //$NON-NLS-1$\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$\r", "-\t\t\tmode = TargetSetting;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$\r", "-\t\t\toptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == TargetSetting) {\r", "-\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "-\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\",currentArg)); //$NON-NLS-1$\r", "+\t\t\tif (mode == InsideLog) {\r", "+\t\t\t\tlog = currentArg;\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideLog){\r", "-\t\t\tlog = currentArg;\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideRepetition){\r", "+\t\t\tif (mode == InsideRepetition) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\trepetitions = Integer.parseInt(currentArg);\r", "+\t\t\t\t\tif (repetitions <= 0) {\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} catch (NumberFormatException e) {\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (mode == InsideSource) {\r", "+\t\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.source\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (mode == InsideDefaultEncoding) {\r", "+\t\t\t\tif (didSpecifyDefaultEncoding) {\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\ttry { // ensure encoding is supported\r", "+\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);\r", "+\t\t\t\t} catch (UnsupportedEncodingException e) {\r", "+\t\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\t\tMain.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t}\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Encoding, currentArg);\r", "+\t\t\t\tdidSpecifyDefaultEncoding = true;\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (mode == InsideDestinationPath) {\r", "+\t\t\t\tdestinationPath = currentArg;\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\tif (mode == InsideClasspath) {\r", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);\r", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "+\t\t\t\t\tint length;\r", "+\t\t\t\t\tif ((length = classpaths.length) <= pathCount) {\r", "+\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\tclasspaths,\r", "+\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t(classpaths = new String[length * 2]),\r", "+\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\tlength);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tclasspaths[pathCount++] = tokenizer.nextToken();\r", "+\t\t\t\t}\r", "+\t\t\t\tmode = Default;\r", "+\t\t\t\tcontinue;\r", "+\t\t\t}\r", "+\t\t\t//default is input directory\r", "+\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);\r", "+\t\t\tif (currentArg.endsWith(File.separator))\r", "+\t\t\t\tcurrentArg =\r", "+\t\t\t\t\tcurrentArg.substring(0, currentArg.length() - File.separator.length());\r", "+\t\t\tFile dir = new File(currentArg);\r", "+\t\t\tif (!dir.isDirectory())\r", "+\t\t\t\tthrow new InvalidInputException(\r", "+\t\t\t\t\tMain.bind(\"configure.directoryNotExist\", currentArg)); //$NON-NLS-1$\r", "+\t\t\tFileFinder finder = new FileFinder();\r", "-\t\t\t\trepetitions = Integer.parseInt(currentArg);\r", "-\t\t\t\tif (repetitions <= 0){\r", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\",currentArg)); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "-\t\t\t} catch(NumberFormatException e){\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tfinder.find(dir, \".JAVA\", verbose); //$NON-NLS-1$\r", "+\t\t\t} catch (Exception e) {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\", currentArg)); //$NON-NLS-1$\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideSource){\r", "-\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "+\t\t\tif (filenames != null) {\r", "+\t\t\t\t// some source files were specified explicitly\r", "+\t\t\t\tString results[] = finder.resultFiles;\r", "+\t\t\t\tint length = results.length;\r", "+\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\tfilenames,\r", "+\t\t\t\t\t0,\r", "+\t\t\t\t\t(filenames = new String[length + filesCount]),\r", "+\t\t\t\t\t0,\r", "+\t\t\t\t\tfilesCount);\r", "+\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\tencodings,\r", "+\t\t\t\t\t0,\r", "+\t\t\t\t\t(encodings = new String[length + filesCount]),\r", "+\t\t\t\t\t0,\r", "+\t\t\t\t\tfilesCount);\r", "+\t\t\t\tSystem.arraycopy(results, 0, filenames, filesCount, length);\r", "+\t\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\t\tencodings[filesCount + i] = customEncoding;\r", "+\t\t\t\t}\r", "+\t\t\t\tfilesCount += length;\r", "+\t\t\t\tcustomEncoding = null;\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.source\",currentArg)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideDefaultEncoding){\r", "-\t\t\tif (didSpecifyDefaultEncoding){\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateDefaultEncoding\",currentArg)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\ttry { // ensure encoding is supported\r", "-\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);\r", "-\t\t\t} catch(UnsupportedEncodingException e){\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\toptions.put(CompilerOptions.OPTION_Encoding, currentArg);\r", "-\t\t\tdidSpecifyDefaultEncoding = true;\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideDestinationPath) {\r", "-\t\t\tdestinationPath = currentArg;\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideClasspath) {\r", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg, File.pathSeparator);\r", "-\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\tint length;\r", "-\t\t\t\tif ((length = classpaths.length) <= pathCount) {\r", "-\t\t\t\t\tSystem.arraycopy(classpaths, 0, (classpaths = new String[length * 2]), 0, length);\r", "+\t\t\t\tfilenames = finder.resultFiles;\r", "+\t\t\t\tfilesCount = filenames.length;\r", "+\t\t\t\tencodings = new String[filesCount];\r", "+\t\t\t\tfor (int i = 0; i < filesCount; i++) {\r", "+\t\t\t\t\tencodings[i] = customEncoding;\r", "+\t\t\t\tcustomEncoding = null;\r", "+\t\t\t}\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\r", "+\t\tif (noWarn) {\r", "+\t\t\t// filter options which are related to the assist component\r", "+\t\t\tObject[] entries = options.entrySet().toArray();\r", "+\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {\r", "+\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];\r", "+\t\t\t\tif (!(entry.getKey() instanceof String))\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\tif (!(entry.getValue() instanceof String))\r", "+\t\t\t\t\tcontinue;\r", "+\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {\r", "+\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t/*\r", "+\t\t * Standalone options\r", "+\t\t */\r", "+\t\tif (versionIDRequired) {\r", "+\t\t\tout.println(Main.bind(\"configure.version\", Main.bind(\"compiler.version\"))); //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\tout.println();\r", "+\t\t\tproceed = false;\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\r", "+\t\tif (printUsageRequired) {\r", "+\t\t\tprintUsage();\r", "+\t\t\tproceed = false;\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\r", "+\t\tif (filesCount != 0)\r", "+\t\t\tSystem.arraycopy(\r", "+\t\t\t\tfilenames,\r", "+\t\t\t\t0,\r", "+\t\t\t\t(filenames = new String[filesCount]),\r", "+\t\t\t\t0,\r", "+\t\t\t\tfilesCount);\r", "+\t\tif (pathCount == 0) {\r", "+\t\t\tString classProp = System.getProperty(\"DEFAULT_CLASSPATH\"); //$NON-NLS-1$\r", "+\t\t\tif ((classProp == null) || (classProp.length() == 0)) {\r", "+\t\t\t\tout.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$\r", "+\t\t\t\tclassProp = \".\"; //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);\r", "+\t\t\tclasspaths = new String[tokenizer.countTokens()];\r", "+\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t//default is input directory\r", "-\t\tcurrentArg = currentArg.replace('/', File.separatorChar);\r", "-\t\tif (currentArg.endsWith(File.separator))\r", "-\t\t\tcurrentArg = currentArg.substring(0, currentArg.length() - File.separator.length());\r", "-\t\tFile dir = new File(currentArg);\r", "-\t\tif (!dir.isDirectory())\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.directoryNotExist\",currentArg)); //$NON-NLS-1$\r", "-\t\tFileFinder finder = new FileFinder();\r", "-\t\ttry{\r", "-\t\t\tfinder.find(dir, \".JAVA\", verbose); //$NON-NLS-1$\r", "-\t\t} catch(Exception e){\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\",currentArg));\t\t //$NON-NLS-1$\r", "-\t\t}\r", "-\t\tif (filenames != null) {\r", "-\t\t\t// some source files were specified explicitly\r", "-\t\t\tString results[] = finder.resultFiles;\r", "-\t\t\tint length = results.length;\r", "-\t\t\tSystem.arraycopy(filenames, 0, (filenames = new String[length + filesCount]), 0, filesCount);\r", "-\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + filesCount]), 0, filesCount);\r", "-\t\t\tSystem.arraycopy(results, 0, filenames, filesCount, length);\r", "-\t\t\tfor (int i = 0; i < length; i++){\r", "-\t\t\t\tencodings[filesCount+i] = customEncoding;\r", "-\t\t\t}\r", "-\t\t\tfilesCount += length;\r", "-\t\t\tcustomEncoding = null;\r", "-\t\t} else {\r", "-\t\t\tfilenames = finder.resultFiles;\r", "-\t\t\tfilesCount = filenames.length;\r", "-\t\t\tencodings = new String[filesCount];\r", "-\t\t\tfor (int i = 0; i < filesCount; i++){\r", "-\t\t\t\tencodings[i] = customEncoding;\r", "-\t\t\t}\r", "-\t\t\tcustomEncoding = null;\r", "-\t\t}\r", "-\t\tmode = Default;\r", "-\t\tcontinue;\r", "-\t}\r", "-\tif(noWarn){\r", "-\t\t// filter options which are related to the assist component\r", "-\t\tObject[] entries = options.entrySet().toArray();\r", "-\t\tfor (int i = 0, max = entries.length; i < max; i++){\r", "-\t\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "-\t\t\tif (!(entry.getKey() instanceof String)) continue;\r", "-\t\t\tif (!(entry.getValue() instanceof String)) continue;\r", "-\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)){\r", "-\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);\r", "+\t\tif (classpaths == null)\r", "+\t\t\tclasspaths = new String[0];\r", "+\t\tSystem.arraycopy(\r", "+\t\t\tclasspaths,\r", "+\t\t\t0,\r", "+\t\t\t(classpaths = new String[pathCount]),\r", "+\t\t\t0,\r", "+\t\t\tpathCount);\r", "+\t\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "+\t\t\tFile file = new File(classpaths[i]);\r", "+\t\t\tif (!file.exists()) // signal missing classpath entry file\r", "+\t\t\t\tout.println(Main.bind(\"configure.incorrectClasspath\", classpaths[i])); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\tif (destinationPath == null) {\r", "+\t\t\tgeneratePackagesStructure = false;\r", "+\t\t} else if (\"none\".equals(destinationPath)) { //$NON-NLS-1$\r", "+\t\t\tdestinationPath = null;\r", "+\t\t}\r", "+\r", "+\t\tif (filenames == null)\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$\r", "+\r", "+\t\tif (log != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tout = new PrintWriter(new FileOutputStream(log, false));\r", "+\t\t\t} catch (IOException e) {\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tshowProgress = false;\r", "+\t\t}\r", "+\r", "+\t\tif (repetitions == 0) {\r", "+\t\t\trepetitions = 1;\r", "+\t\t}\r", "+\t}\r", "-\t * Standalone options\r", "-\tif (versionIDRequired) {\r", "-\t\tout.println(Main.bind(\"configure.version\",Main.bind(\"compiler.version\"))); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\tout.println();\r", "-\t\tproceed = false;\r", "-\t\treturn;\r", "-\t}\r", "-\t\t\r", "-\tif (printUsageRequired) {\r", "-\t\tprintUsage();\r", "-\t\tproceed = false;\r", "-\t\treturn;\r", "-\t}\t\r", "-\t\r", "-\tif (filesCount != 0)\r", "-\t\tSystem.arraycopy(filenames, 0, (filenames = new String[filesCount]), 0, filesCount);\r", "-\tif (pathCount == 0) {\r", "-\t\tString classProp = System.getProperty(\"DEFAULT_CLASSPATH\"); //$NON-NLS-1$\r", "-\t\tif ((classProp == null) || (classProp.length() == 0)) {\r", "-\t\t\tout.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$\r", "-\t\t\tclassProp = \".\"; //$NON-NLS-1$\r", "-\t\t}\r", "-\t\tStringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);\r", "-\t\tclasspaths = new String[tokenizer.countTokens()];\r", "-\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\tclasspaths[pathCount++] = tokenizer.nextToken();\r", "-\t\t}\r", "-\t}\r", "-\tif (classpaths == null)\r", "-\t\tclasspaths = new String[0];\r", "-\tSystem.arraycopy(classpaths, 0, (classpaths = new String[pathCount]), 0, pathCount);\r", "-\tfor (int i = 0, max = classpaths.length; i < max; i++) {\r", "-\t\tFile file = new File(classpaths[i]);\r", "-\t\tif (!file.exists()) // signal missing classpath entry file\r", "-\t\t\tout.println(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r", "-\t}\r", "-\tif (destinationPath == null) {\r", "-\t\tgeneratePackagesStructure = false;\r", "-\t} else if (\"none\".equals(destinationPath)) { //$NON-NLS-1$\r", "-\t\tdestinationPath = null;\r", "-\t}\r", "-\t\t\r", "-\tif (filenames == null)\r", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$\r", "-\r", "-\tif (log != null){\r", "-\t\ttry {\r", "-\t\t\tout = new PrintWriter(new FileOutputStream(log, false));\r", "-\t\t} catch(IOException e){\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$\r", "-\t\t}\r", "-\t} else {\r", "-\t\tshowProgress = false;\r", "-\t}\r", "-\r", "-\tif (repetitions == 0) {\r", "-\t\trepetitions = 1;\r", "-\t}\r", "-}\r"]}], "num": 38752}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ccf1d643c8e4ef73e2bb45a9a87bc03", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebe71ef6d5ce3f1778796d52e214eab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public int matchLevel(Binding binding)", "signatureAfterChange": " public int matchLevel(Binding binding)", "diff": ["+ */", "+public int matchLevel(Binding binding) {", "+\tif (binding == null) return INACCURATE_MATCH;", "+\tif (!(binding instanceof ReferenceBinding)) return IMPOSSIBLE_MATCH;", "+", "+\tReferenceBinding type = (ReferenceBinding) binding;", "+\tint level = IMPOSSIBLE_MATCH;", "+\tif (!this.checkOnlySuperinterfaces) {", "+\t\tlevel = matchLevelForType(this.superSimpleName, this.superQualification, type.superclass());", "+\t\tif (level == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t}", "+", "+\tReferenceBinding[] superInterfaces = type.superInterfaces();", "+\tfor (int i = 0, max = superInterfaces.length; i < max; i++) {", "+\t\tint newLevel = matchLevelForType(this.superSimpleName, this.superQualification, superInterfaces[i]);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;", "+}", "- */", "-public int matchLevel(Binding binding) {", "-\tif (binding == null) return INACCURATE_MATCH;", "-\tif (!(binding instanceof ReferenceBinding)) return IMPOSSIBLE_MATCH;", "-", "-\t// super class", "-\tReferenceBinding type = (ReferenceBinding) binding;", "-\tint level = this.matchLevelForType(this.superSimpleName, this.superQualification, type.superclass());", "-\tswitch (level) {", "-\t\tcase IMPOSSIBLE_MATCH:", "-\t\t\tbreak; // try to find match in super interfaces", "-\t\tcase ACCURATE_MATCH:", "-\t\t\treturn ACCURATE_MATCH;", "-\t\tdefault: // ie. INACCURATE_MATCH", "-\t\t\tbreak; // try to find accurate match in super interfaces", "-\t}", "-", "-\t// super interfaces", "-\tReferenceBinding[] superInterfaces = type.superInterfaces();", "-\tfor (int i = 0, max = superInterfaces.length; i < max; i++){", "-\t\tint newLevel = this.matchLevelForType(this.superSimpleName, this.superQualification, superInterfaces[i]);", "-\t\tswitch (newLevel) {", "-\t\t\tcase IMPOSSIBLE_MATCH:", "-\t\t\t\tbreak;", "-\t\t\tcase ACCURATE_MATCH:", "-\t\t\t\treturn ACCURATE_MATCH;", "-\t\t\tdefault: // ie. INACCURATE_MATCH", "-\t\t\t\tlevel = newLevel;", "-\t\t\t\tbreak;", "-\t\t}", "-\t}", "-\treturn level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a4c7fba3ed1a46ab051aca24b933bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "b63ee5a669593061b975bc2def28757d777c16ca", "commitAfterChange": "09bf35df2168c2ab3f5a24971ca9aae42bfc8d5b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate void pushSeeRef(Statement statement)", "signatureAfterChange": " \tprivate void pushSeeRef(Statement statement)", "diff": ["+\t */", "-\t\t// TODO (frederic) To be changed when mixed tags declaration will be accepted", "-\t\tswitch (this.astLengthPtr) {", "-\t\t\tcase -1 :", "-\t\t\t\t// no @param previously declared, nor @throw/@exception", "-\t\t\t\tpushOnAstStack(null, true); // push 0 for parameters size", "-\t\t\tcase 0 :", "-\t\t\t\t// no @throw/@exception previously declared", "-\t\t\t\tpushOnAstStack(null, true); // push 0 for thrownExceptions size", "-\t\t\tcase 1 :", "-\t\t\t\t// push first reference", "-\t\t\t\tpushOnAstStack(statement, true);", "-\t\t\t\tbreak;", "-\t\t\tcase 2 :", "-\t\t\t\t// push other reference", "-\t\t\t\tpushOnAstStack(statement, false);", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tthis.sourceParser.problemReporter().annotationUnexpectedTag(statement.sourceStart, statement.sourceEnd);", "+\t\tif (this.astLengthPtr == -1) { // First push", "+\t\t\tpushOnAstStack(null, true);", "+\t\t\tpushOnAstStack(null, true);", "+\t\t\tpushOnAstStack(statement, true);", "+\t\t} else {", "+\t\t\tswitch (this.astLengthPtr % ORDERED_TAGS_NUMBER) {", "+\t\t\t\tcase PARAM_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @param tag => push empty @throws tag and new @see tag", "+\t\t\t\t\tpushOnAstStack(null, true);", "+\t\t\t\t\tpushOnAstStack(statement, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase THROWS_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @throws tag => push new @see tag", "+\t\t\t\t\tpushOnAstStack(statement, true);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SEE_TAG_EXPECTED_ORDER :", "+\t\t\t\t\t// previous push was a @see tag => push another @see tag", "+\t\t\t\t\tpushOnAstStack(statement, false);", "+\t\t\t\t\tbreak;", "+\t\t\t}"]}], "num": 45671}
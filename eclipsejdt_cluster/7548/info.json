{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24f33fec06b0e877fde16089e30e574b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d31608e2e5d9c2457952ab8f8ec23a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocArgumentExpression.java", "commitBeforeChange": "a0a4fc04d251f660d926a9aa75cac417e8668b19", "commitAfterChange": "6c179d1611035fa643a61ef0b82b25ce29580a3a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "-\t\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\t\treturn null; // already reported error", "-\t\t\t}", "-\t\t}", "-\t\telse {", "-\t\t\tif (this.argument != null) {", "-\t\t\t\tTypeReference typeRef = this.argument.type;", "-\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\tthis.resolvedType = typeRef.getTypeBinding(scope);", "-\t\t\t\t\ttypeRef.resolvedType = this.resolvedType;", "-\t\t\t\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\t\t\t\tscope.problemReporter().javadocInvalidType(typeRef, this.resolvedType, scope.getDeclarationModifiers());", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (isTypeUseDeprecated(this.resolvedType, scope)) {", "-\t\t\t\t\t\tscope.problemReporter().javadocDeprecatedType(this.resolvedType, typeRef, scope.getDeclarationModifiers());", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\t// check raw type", "-\t\t\t\t\tif (this.resolvedType.isArrayType()) {", "-\t\t\t\t\t    TypeBinding leafComponentType = this.resolvedType.leafComponentType();", "-\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t\t\t\t        this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), this.resolvedType.dimensions());", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else if (this.resolvedType.isGenericType()) {", "-\t\t\t\t        this.resolvedType = scope.environment().createRawType((ReferenceBinding)this.resolvedType, null); // raw type", "-\t\t\t\t\t}\t\t", "-\t\t\t\t\treturn this.resolvedType;", "+\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "+\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "+", "+\t\tif (this.argument != null) {", "+\t\t\tTypeReference typeRef = this.argument.type;", "+\t\t\tif (typeRef != null) {", "+\t\t\t\tthis.resolvedType = typeRef.getTypeBinding(scope);", "+\t\t\t\ttypeRef.resolvedType = this.resolvedType;", "+\t\t\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t\t\t\tscope.problemReporter().javadocInvalidType(typeRef, this.resolvedType, scope.getDeclarationModifiers());", "+\t\t\t\t\treturn null;", "+\t\t\t\tif (isTypeUseDeprecated(this.resolvedType, scope)) {", "+\t\t\t\t\tscope.problemReporter().javadocDeprecatedType(this.resolvedType, typeRef, scope.getDeclarationModifiers());", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\treturn this.resolvedType = scope.convertToRawType(this.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37217fe46e81e1e3fd667fc5dcda170", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "c4fa4d272fd0c5fb7e1db44c8cef0ea47f3df504", "commitAfterChange": "ead0ac8b76ebb49296393f52adae3ef70f089242", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  \tReferenceBinding resolve()", "signatureAfterChange": "  \tReferenceBinding resolve()", "diff": ["-\t\t\t// arity check", "-\t\t\tTypeVariableBinding[] refTypeVariables = resolvedType.typeVariables();", "-\t\t\tif (refTypeVariables == Binding.NO_TYPE_VARIABLES) { // check generic", "-\t\t\t\t// Below 1.5, we should have already complained about the use of type parameters.", "-\t\t\t\tboolean isCompliant15 = this.environment.globalOptions.originalSourceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\t\tif (isCompliant15 && (resolvedType.tagBits & TagBits.HasMissingType) == 0) {", "-\t\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "-\t\t\t\t}", "-\t\t\t\treturn this;", "-\t\t\t} else if (argLength != refTypeVariables.length) { // check arity", "-\t\t\t\tthis.environment.problemReporter.incorrectArityForParameterizedType(null, resolvedType, this.arguments);", "-\t\t\t\treturn this; // cannot reach here as AbortCompilation is thrown", "-\t\t\t}", "+\t\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=186565, Removed generic check", "+\t\t\t   and arity check since we are dealing with binary types here and the fact that", "+\t\t\t   the compiler produced class files for these types at all is proof positive that", "+\t\t\t   the generic check and the arity check passed in the build environment that produced", "+\t\t\t   these class files. Otherwise we don't handle mixed 1.5 and 1.4 projects correctly.", "+\t\t\t   Just as with bounds check below, incremental build will propagate the change and", "+\t\t\t   detect problems in source.", "+\t\t\t */", "+\t\t\t", "+//\t\t\t// arity check", "+//\t\t\tTypeVariableBinding[] refTypeVariables = resolvedType.typeVariables();", "+//\t\t\tif (refTypeVariables == Binding.NO_TYPE_VARIABLES) { // check generic", "+//\t\t\t\t// Below 1.5, we should have already complained about the use of type parameters.", "+//\t\t\t\tboolean isCompliant15 = this.environment.globalOptions.originalSourceLevel >= ClassFileConstants.JDK1_5;", "+//\t\t\t\tif (isCompliant15 && (resolvedType.tagBits & TagBits.HasMissingType) == 0) {", "+//\t\t\t\t\tthis.environment.problemReporter.nonGenericTypeCannotBeParameterized(0, null, resolvedType, this.arguments);", "+//\t\t\t\t}", "+//\t\t\t\treturn this;", "+//\t\t\t} else if (argLength != refTypeVariables.length) { // check arity", "+//\t\t\t\tthis.environment.problemReporter.incorrectArityForParameterizedType(null, resolvedType, this.arguments);", "+//\t\t\t\treturn this; // cannot reach here as AbortCompilation is thrown", "+//\t\t\t}"]}], "num": 7548}
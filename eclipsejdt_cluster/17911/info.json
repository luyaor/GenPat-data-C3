{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "200c4b88c7b53bc313253602bafeabcb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98577f125b6d7873e6863dff72f1a5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "commitAfterChange": "8f838ccefdcacadaac662cb88a80fdb1a3657843", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "diff": ["-\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict) {", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode) {", "-\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict));", "+\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE));", "-\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict && nullStatus == -1);", "+\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1);", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, strict);", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, mode);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, strict);", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, mode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd7f023219248845936197d4a6ff2fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict)", "diff": ["+\t// additional parameter strict: if true we do not tolerate incompatibly missing annotations on type parameters (for overriding analysis)", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict) {", "-\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus));", "+\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict));", "-\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "+\t\t\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict && nullStatus == -1);", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1);", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1, strict);", "-\t\t\t\t\t\tNullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus);", "+\t\t\t\t\t\tNullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus, strict);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1);", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1, strict);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de5ea5f8edeec18d98c18d70ec626d36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "57bd7f827fb4e26e2f4fcfb421451c18e4a1d09f", "commitAfterChange": "6eea20ade3a92e767b892a10ecaadeddc013ba12", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict)", "diff": ["-\t// additional parameter strict: if true we do not tolerate incompatibly missing annotations on type parameters (for overriding analysis)", "-\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus, boolean strict) {", "+\t */", "+\tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, boolean strict) {", "-\t\tif (areSameTypes(requiredType, providedType)) // for type variable identity (and as shortcut for others)", "+\t\tif (areSameTypes(requiredType, providedType, providedSubstitute)) // for type variable identity (and as shortcut for others)", "+\t\t\t\t\tTypeBinding[] providedSubstitutes = (providedSubstitute instanceof ParameterizedTypeBinding) ? ((ParameterizedTypeBinding)providedSubstitute).arguments : null;", "-\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], -1, strict);", "+\t\t\t\t\t\t\tTypeBinding providedArgSubstitute = providedSubstitutes != null ? providedSubstitutes[i] : null;", "+\t\t\t\t\t\t\tNullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, -1, strict);", "-\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, -1, strict);", "+\t\t\t\t\tTypeBinding providedEnclSubstitute = providedSubstitute != null ? providedSubstitute.enclosingType() : null;", "+\t\t\t\t\tNullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, -1, strict);"]}], "num": 17911}
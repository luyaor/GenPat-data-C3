{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4edb23644f6ab52e809c60233341a7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18c4a284116a8e289139681d4cbd00f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void test017()", "signatureAfterChange": "  \tpublic void test017()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"class X<T> {}\\n\" + ", "+\t\t\t\t\"class Y { void test(X<Number> a) {} }\\n\" + ", "+\t\t\t\t\"class Z extends Y { void test(X<? extends Number> a) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass Z extends Y { void test(X<? extends Number> a) {} }\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test(X<? extends Number>) of type Z has the same erasure as test(X<Number>) of type Y but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: test(X<? extends java.lang.Number>) in Z and test(X<java.lang.Number>) in Y have the same erasure, yet neither overrides the other", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85494d1acae900b1501f2ffc31aee98c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "8eebb11e46f28beaadc740a4b76f1cf698acf7a1", "commitAfterChange": "77d7a71c34d1f984564aceab6a75ee9e680a55a5", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void test051()", "signatureAfterChange": " \tpublic void test051()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<String> a) {}\\n\" + ", "+\t\t\t\t\"\tvoid foo(A<Integer> a) {}\\n\" +", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class A<T> {}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tvoid foo(A<String> a) {}\\r\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(A<String>) in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tvoid foo(A<Integer> a) {}\\r\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo(A<Integer>) in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: foo(A<java.lang.String>) and foo(A<java.lang.Integer>) have the same erasure", "+\t\t);"]}], "num": 3168}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07aa3047ba6bb7cde294d04da63ab8ca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "271747adb127ba48b938e11242c214cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void test004() throws CoreException", "signatureAfterChange": " \tpublic void test004() throws CoreException", "diff": ["-\t */", "-\tpublic void test004() throws CoreException {", "-\t\tICompilationUnit[][] workingCopyBatches = new ICompilationUnit[3][];", "-\t\ttry {", "-\t\t\tMarkerInfo[] firstMarkerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"/*start*/public class X extends Y {\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tworkingCopyBatches[0] = createWorkingCopies(firstMarkerInfos);", "-\t\t\tworkingCopyBatches[1] = createWorkingCopies(new String[] {});", "-\t\t\tMarkerInfo[] lastMarkerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/P/p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Z {\\n\" +", "-\t\t\t\t\"  Object foo() {\\n\" +", "-\t\t\t\t\"    return new /*start*/X/*end*/();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tworkingCopyBatches[2] = createWorkingCopies(lastMarkerInfos);", "-\t\t\t", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor(workingCopyBatches);", "-\t\t\tresolveASTs(requestor);", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Z {\\n\" + ", "-\t\t\t\t\"  Object foo(){\\n\" + ", "-\t\t\t\t\"    return new X();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t\t", "-\t\t\t// compare the bindings coming from the first AST and the last AST", "-\t\t\tTypeDeclaration typeX = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(0), firstMarkerInfos[0]);", "-\t\t\tType newX = (Type) findNode((CompilationUnit) requestor.asts.get(2), lastMarkerInfos[0]);", "-\t\t\tIBinding typeXBinding = typeX.resolveBinding();", "-\t\t\tIBinding newXBinding = newX.resolveBinding();", "-\t\t\tassertTrue(\"Declaration of X and new X() should have the same binding\", typeXBinding == newXBinding);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopyBatches);", "-\t\t}", "-\t}", "+\tpublic void test004() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = null;", "+\t\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "+\t\t\t\t\"/*start*/package p1;/*end*/\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\tassertRequestedBindingFound(markerInfos, \"p1\");", "+\t\t} finally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "323932a6c963ad3b50431e0bc22afbf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "b7872d5f1e96b5357df6dd8bf0aac5fc8ccf3c6d", "commitAfterChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test004() throws CoreException", "signatureAfterChange": " \tpublic void test004() throws CoreException", "diff": ["+\t */", "+\tpublic void test004() throws CoreException {", "+\t\tICompilationUnit[][] workingCopyBatches = new ICompilationUnit[3][];", "+\t\ttry {", "+\t\t\tMarkerInfo[] firstMarkerInfos = createMarkerInfos(new String[] {", "+\t\t\t\t\"/P/p1/X.java\",", "+\t\t\t\t\"package p1;\\n\" +", "+\t\t\t\t\"/*start*/public class X extends Y {\\n\" +", "+\t\t\t\t\"}/*end*/\",", "+\t\t\t\t\"/P/p1/Y.java\",", "+\t\t\t\t\"package p1;\\n\" +", "+\t\t\t\t\"public class Y {\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t});", "+\t\t\tworkingCopyBatches[0] = createWorkingCopies(firstMarkerInfos);", "+\t\t\tworkingCopyBatches[1] = createWorkingCopies(new String[] {});", "+\t\t\tMarkerInfo[] lastMarkerInfos = createMarkerInfos(new String[] {", "+\t\t\t\t\"/P/p1/Z.java\",", "+\t\t\t\t\"package p1;\\n\" +", "+\t\t\t\t\"public class Z {\\n\" +", "+\t\t\t\t\"  Object foo() {\\n\" +", "+\t\t\t\t\"    return new /*start*/X/*end*/();\\n\" +", "+\t\t\t\t\"  }\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t});", "+\t\t\tworkingCopyBatches[2] = createWorkingCopies(lastMarkerInfos);", "+\t\t\t", "+\t\t\tTestASTRequestor requestor = new TestASTRequestor(workingCopyBatches);", "+\t\t\tresolveASTs(requestor);", "+\t\t\tassertASTNodesEqual(", "+\t\t\t\t\"package p1;\\n\" + ", "+\t\t\t\t\"public class X extends Y {\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"package p1;\\n\" + ", "+\t\t\t\t\"public class Y {\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"package p1;\\n\" + ", "+\t\t\t\t\"public class Z {\\n\" + ", "+\t\t\t\t\"  Object foo(){\\n\" + ", "+\t\t\t\t\"    return new X();\\n\" + ", "+\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"\\n\",", "+\t\t\t\trequestor.asts", "+\t\t\t);", "+\t\t\t", "+\t\t\t// compare the bindings coming from the first AST and the last AST", "+\t\t\tTypeDeclaration typeX = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(0), firstMarkerInfos[0]);", "+\t\t\tType newX = (Type) findNode((CompilationUnit) requestor.asts.get(2), lastMarkerInfos[0]);", "+\t\t\tIBinding typeXBinding = typeX.resolveBinding();", "+\t\t\tIBinding newXBinding = newX.resolveBinding();", "+\t\t\tassertTrue(\"Declaration of X and new X() should have the same binding\", typeXBinding == newXBinding);", "+\t\t} finally {", "+\t\t\tdiscardWorkingCopies(workingCopyBatches);", "+\t\t}", "+\t}", "-\tpublic void test004() throws CoreException {", "-\t\tICompilationUnit[] workingCopies = null;", "-\t\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/*start*/package p1;/*end*/\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\tassertBindingFound(markerInfos, \"p1\");", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopies);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a266c6d1b9eea780c9d0cc6cfabab105", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "commitAfterChange": "b7872d5f1e96b5357df6dd8bf0aac5fc8ccf3c6d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void test004() throws CoreException", "signatureAfterChange": " \tpublic void test004() throws CoreException", "diff": ["-\t */", "-\tpublic void test004() throws CoreException {", "-\t\tICompilationUnit[][] workingCopyBatches = new ICompilationUnit[3][];", "-\t\ttry {", "-\t\t\tMarkerInfo[] firstMarkerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"/*start*/public class X extends Y {\\n\" +", "-\t\t\t\t\"}/*end*/\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tworkingCopyBatches[0] = createWorkingCopies(firstMarkerInfos);", "-\t\t\tworkingCopyBatches[1] = createWorkingCopies(new String[] {});", "-\t\t\tMarkerInfo[] lastMarkerInfos = createMarkerInfos(new String[] {", "-\t\t\t\t\"/P/p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Z {\\n\" +", "-\t\t\t\t\"  Object foo() {\\n\" +", "-\t\t\t\t\"    return new /*start*/X/*end*/();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tworkingCopyBatches[2] = createWorkingCopies(lastMarkerInfos);", "-\t\t\t", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor(workingCopyBatches);", "-\t\t\tresolveASTs(requestor);", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Z {\\n\" + ", "-\t\t\t\t\"  Object foo(){\\n\" + ", "-\t\t\t\t\"    return new X();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t\t", "-\t\t\t// compare the bindings coming from the first AST and the last AST", "-\t\t\tTypeDeclaration typeX = (TypeDeclaration) findNode((CompilationUnit) requestor.asts.get(0), firstMarkerInfos[0]);", "-\t\t\tType newX = (Type) findNode((CompilationUnit) requestor.asts.get(2), lastMarkerInfos[0]);", "-\t\t\tIBinding typeXBinding = typeX.resolveBinding();", "-\t\t\tIBinding newXBinding = newX.resolveBinding();", "-\t\t\tassertTrue(\"Declaration of X and new X() should have the same binding\", typeXBinding == newXBinding);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopyBatches);", "-\t\t}", "-\t}", "+\tpublic void test004() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = null;", "+\t\t\tMarkerInfo[] markerInfos = createMarkerInfos(new String[] {", "+\t\t\t\t\"/*start*/package p1;/*end*/\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\tassertBindingFound(markerInfos, \"p1\");", "+\t\t} finally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}"]}], "num": 30109}
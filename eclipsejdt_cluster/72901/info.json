{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "486cd47a425513012183551cd6b6b2f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a9f911bfe0a7850e13e5136a9acbbba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "6665973e9a36116a8cb24b7143317e47a83a98f0", "commitAfterChange": "305123b230bcfd1f733969b7cd2c687b75857ff0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "signatureAfterChange": " \tprivate void checkNullComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse)", "diff": ["+\t\tint rightStatus = this.right.nullStatus(flowInfo);", "+\t\tint leftStatus = this.left.nullStatus(flowInfo);", "+\t\t// check if either method is annotated @NonNull and compared to null:", "+\t\tif (leftStatus == FlowInfo.NON_NULL && rightStatus == FlowInfo.NULL) {", "+\t\t\tif (this.left instanceof MessageSend) { ", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.left).binding, this.left);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t} else if (leftStatus == FlowInfo.NULL && rightStatus == FlowInfo.NON_NULL) {", "+\t\t\tif (this.right instanceof MessageSend) {", "+\t\t\t\tscope.problemReporter().messageSendRedundantCheckOnNonNull(((MessageSend) this.right).binding, this.right);", "+\t\t\t}", "+\t\t\t// TODO: handle all kinds of expressions (cf. also https://bugs.eclipse.org/364326)", "+\t\t}", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, this.right.nullStatus(flowInfo), this.left);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, rightStatus, this.left);", "-\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, this.left.nullStatus(flowInfo), this.right);", "+\t\t\tcheckVariableComparison(scope, flowContext, flowInfo, initsWhenTrue, initsWhenFalse, local, leftStatus, this.right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "816bfa0a723e0396cc0ad7457d9331c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "commitAfterChange": "8b3dd5b0f6f317bedbda94f1dc54e156c48d6322", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tchar pc = peekChar();", "+\t\t\t\t\tif (!Character.isWhitespace(pc) && (!this.inlineTagStarted || pc != '}')) {", "+\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, this.lineEnd);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\tchar pc = peekChar();", "+\t\t\t\tif (!Character.isWhitespace(pc) && (!this.inlineTagStarted || pc != '}')) {", "+\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, this.lineEnd);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}"]}], "num": 72901}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16d88e78241d7d237d0ccd7aec903d65", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc637005f7258a4fcd9864b1f933306", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\tif (this.delegateThis != null) {", "-\t\tif (this.binding.declaringClass != this.delegateThis.type", "-\t\t\t&& this.binding.declaringClass != null", "-\t\t\t&& !this.binding.isConstantValue()", "-\t\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 ", "-\t\t\t\t\t&& !this.binding.isStatic()", "-\t\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields (if there was any)", "-\t\t\t\t|| !this.codegenBinding.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());", "+\tTypeBinding someReceiverType = this.delegateThis != null ? this.delegateThis.type : this.receiverType;", "+\tif (this.binding.declaringClass != someReceiverType", "+\t\t\t&& !someReceiverType.isArrayType()", "+\t\t\t&& this.binding.declaringClass != null // array.length", "+\t\t\t&& !this.binding.isConstantValue()) {", "+\t", "+\t\tCompilerOptions options = currentScope.environment().options;", "+\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "+\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "+\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "+", "+\t\t\tthis.codegenBinding =", "+\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "+\t\t\t\t\tthis.codegenBinding,", "+\t\t\t\t\t(ReferenceBinding) someReceiverType.erasure());", "-\t} else if (this.binding.declaringClass != this.receiverType", "-\t\t&& !this.receiverType.isArrayType()", "-\t\t&& this.binding.declaringClass != null // array.length", "-\t\t&& !this.binding.isConstantValue()", "-\t\t&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) //no change for Object fields (in case there was)", "-\t\t\t|| !this.codegenBinding.declaringClass.canBeSeenBy(currentScope))){", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding) this.receiverType.erasure());", "-\t}", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e4411f6968edfaa40c2376e5fb5756", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void add(String path, boolean withSubFolders, AccessRuleSet access)", "signatureAfterChange": " private void add(String path, String containerPath, boolean withSubFolders, AccessRuleSet access)", "diff": ["-private void add(String path, boolean withSubFolders, AccessRuleSet access) {", "-\tif (this.paths.length == this.pathsCount) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.paths,", "-\t\t\t0,", "-\t\t\tthis.paths = new String[this.pathsCount * 2],", "-\t\t\t0,", "-\t\t\tthis.pathsCount);", "-\t\tSystem.arraycopy(", "-\t\t\tthis.pathWithSubFolders,", "-\t\t\t0,", "-\t\t\tthis.pathWithSubFolders = new boolean[this.pathsCount * 2],", "-\t\t\t0,", "-\t\t\tthis.pathsCount);", "-\t\tif (this.pathRestrictions != null)", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.pathRestrictions,", "-\t\t\t\t0,", "-\t\t\t\tthis.pathRestrictions = new AccessRuleSet[this.pathsCount * 2],", "-\t\t\t\t0,", "-\t\t\t\tthis.pathsCount);", "-\t\telse if (access != null)", "-\t\t\tthis.pathRestrictions = new AccessRuleSet[this.pathsCount * 2];", "+private void add(String path, String containerPath, boolean withSubFolders, AccessRuleSet access) {", "+\tint index = (containerPath.hashCode() & 0x7FFFFFFF) % this.paths.length;", "+\tString currentPath, currentContainerPath;", "+\twhile ((currentPath = this.paths[index]) != null && (currentContainerPath = this.containerPaths[index]) != null) {", "+\t\tif (currentPath.equals(path) && currentContainerPath.equals(containerPath))", "+\t\t\treturn;", "+\t\tindex = (index + 1) % this.paths.length;", "-\tthis.paths[this.pathsCount] = path;", "-\tthis.pathWithSubFolders[this.pathsCount] = withSubFolders; ", "+\tthis.paths[index] = path;", "+\tthis.containerPaths[index] = containerPath;", "+\tthis.pathWithSubFolders[index] = withSubFolders;", "-\t\tthis.pathRestrictions[this.pathsCount] = access;", "-\tthis.pathsCount++;", "+\t\tthis.pathRestrictions[index] = access;", "+\telse if (access != null) {", "+\t\tthis.pathRestrictions = new AccessRuleSet[this.paths.length];", "+\t\tthis.pathRestrictions[index] = access;", "+\t}", "+", "+\t// assumes the threshold is never equal to the size of the table", "+\tif (++this.pathsCount > this.threshold)", "+\t\trehash();", "+\t\t"]}], "num": 71696}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29c7a43302b540c63de44125d784c06e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b99b7f8266b03c57cdffe048a9b89e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "ebc568fad377cf85a79bc0aeeea9122e5115f057", "commitAfterChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected static IProblemFactory getProblemFactory( \t\tfinal char[] fileName,  \t\tfinal IProblemRequestor problemRequestor, \t\tfinal IProgressMonitor monitor)", "signatureAfterChange": "  \t \tprivate static void reportProblems(CompilationUnitDeclaration unit, IProblemRequestor problemRequestor, IProgressMonitor monitor)", "diff": ["-\tprotected static IProblemFactory getProblemFactory(", "-\t\tfinal char[] fileName, ", "-\t\tfinal IProblemRequestor problemRequestor,", "-\t\tfinal IProgressMonitor monitor) {", "-", "-\t\treturn new DefaultProblemFactory(Locale.getDefault()) {", "-\t\t\tpublic IProblem createProblem(", "-\t\t\t\tchar[] originatingFileName,", "-\t\t\t\tint problemId,", "-\t\t\t\tString[] problemArguments,", "-\t\t\t\tString[] messageArguments,", "-\t\t\t\tint severity,", "-\t\t\t\tint startPosition,", "-\t\t\t\tint endPosition,", "-\t\t\t\tint lineNumber) {", "-", "-\t\t\t\tif (monitor != null && monitor.isCanceled()){", "-\t\t\t\t\tthrow new AbortCompilation(true, null); // silent abort", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tIProblem problem =", "-\t\t\t\t\tsuper.createProblem(", "-\t\t\t\t\t\toriginatingFileName,", "-\t\t\t\t\t\tproblemId,", "-\t\t\t\t\t\tproblemArguments,", "-\t\t\t\t\t\tmessageArguments,", "-\t\t\t\t\t\tseverity,", "-\t\t\t\t\t\tstartPosition,", "-\t\t\t\t\t\tendPosition,", "-\t\t\t\t\t\tlineNumber);", "-\t\t\t\t// only report local problems", "-\t\t\t\tif (CharOperation.equals(originatingFileName, fileName)){", "-\t\t\t\t\tif (JavaModelManager.VERBOSE){", "-\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \"+problem.getMessage());//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "-\t\t\t\t}", "-\t\t\t\tif (monitor != null && monitor.isCanceled()){", "-\t\t\t\t\tthrow new AbortCompilation(true, null); // silent abort", "-\t\t\t\t}", "-", "-\t\t\t\treturn problem;", "-\t\t\t}", "-\t\t};", "-\t}", "+\t", "+\tprivate static void reportProblems(CompilationUnitDeclaration unit, IProblemRequestor problemRequestor, IProgressMonitor monitor) {", "+\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\tIProblem[] problems = unitResult.getAllProblems();", "+\t\tfor (int i = 0, problemLength = problems == null ? 0 : problems.length; i < problemLength; i++) {", "+\t\t\tif (JavaModelManager.VERBOSE){", "+\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \"+problems[i].getMessage());//$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (monitor != null && monitor.isCanceled()) break;", "+\t\t\tproblemRequestor.acceptProblem(problems[i]);\t\t\t\t", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72bf097156273eb7c41d46c8bd588a1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void compile(String[] filenames, String[] initialTypeNames)", "signatureAfterChange": " protected void compile(SourceFile[] units)", "diff": ["-protected void compile(String[] filenames, String[] initialTypeNames) {", "-\tString encoding = javaBuilder.javaProject.getOption(JavaCore.CORE_ENCODING, true);", "-\tint toDo = filenames.length;", "+protected void compile(SourceFile[] units) {", "+\tint toDo = units.length;", "-\t\tSourceFile[] toCompile = new SourceFile[toDo];", "-\t\tfor (int i = 0; i < toDo; i++) {", "-\t\t\tString filename = filenames[i];", "-\t\t\tif (JavaBuilder.DEBUG)", "-\t\t\t\tSystem.out.println(\"About to compile \" + filename); //$NON-NLS-1$", "-\t\t\ttoCompile[i] = new SourceFile(filename, initialTypeNames[i], encoding);", "-\t\t}", "-\t\tcompile(toCompile, initialTypeNames, null);", "+\t\tif (JavaBuilder.DEBUG)", "+\t\t\tfor (int i = 0; i < toDo; i++)", "+\t\t\t\tSystem.out.println(\"About to compile \" + units[i].typeLocator()); //$NON-NLS-1$", "+\t\tcompile(units, null);", "-\t\t\tString[] initialNamesInLoop = new String[doNow];", "-\t\t\t\tString filename = filenames[i];", "-\t\t\t\tif (compilingFirstGroup || workQueue.isWaiting(filename)) {", "+\t\t\t\tSourceFile unit = units[i++];", "+\t\t\t\tif (compilingFirstGroup || workQueue.isWaiting(unit)) {", "-\t\t\t\t\t\tSystem.out.println(\"About to compile \" + filename);//$NON-NLS-1$", "-\t\t\t\t\tString initialTypeName = initialTypeNames[i];", "-\t\t\t\t\tinitialNamesInLoop[index] = initialTypeName;", "-\t\t\t\t\ttoCompile[index++] = new SourceFile(filename, initialTypeName, encoding);", "+\t\t\t\t\t\tSystem.out.println(\"About to compile \" + unit.typeLocator()); //$NON-NLS-1$", "+\t\t\t\t\ttoCompile[index++] = unit;", "-\t\t\t\ti++;", "-\t\t\tif (index < doNow) {", "+\t\t\tif (index < doNow)", "-\t\t\t\tSystem.arraycopy(initialNamesInLoop, 0, initialNamesInLoop = new String[index], 0, index);", "-\t\t\t}", "-\t\t\tString[] additionalFilenames = new String[toDo - i];", "-\t\t\tSystem.arraycopy(filenames, i, additionalFilenames, 0, additionalFilenames.length);", "+\t\t\tSourceFile[] additionalUnits = new SourceFile[toDo - i];", "+\t\t\tSystem.arraycopy(units, i, additionalUnits, 0, additionalUnits.length);", "-\t\t\tcompile(toCompile, initialNamesInLoop, additionalFilenames);", "+\t\t\tcompile(toCompile, additionalUnits);"]}], "num": 55291}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d897f74fa8fbc51869e0841fe7efeb5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6715ce0012e4311545fccfc6d6c41e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "0bb8dba3efca9a5500b67c37770710de86a06c2e", "commitAfterChange": "6726a5eb1723cea7dfdb4d1905ca215391f75d8e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t}", "+\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.expression);", "+\t\tif (trackingVariable != null) {", "+\t\t\tif (currentScope.methodScope() != trackingVariable.methodScope)", "+\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\t\t\t// don't report issues concerning this local, since by returning", "+\t\t\t// the method passes the responsibility to the caller:", "+\t\t\tcurrentScope.removeTrackingVar(trackingVariable);", "+\tcurrentScope.checkUnclosedCloseables(flowInfo, null/*ignore exception exits from flowContext*/, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7078d83bff908b1ab3f2fbdf760becd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "054ef716f5c2a57e4e4c8e790ba134b6404d4f2a", "commitAfterChange": "1bf30b93f1c2f17c02d0cecfa43e877f00d01800", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t}", "+\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.expression);", "+\t\tif (trackingVariable != null) {", "+\t\t\tif (currentScope.methodScope() != trackingVariable.methodScope)", "+\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\t\t\t// don't report issues concerning this local, since by returning", "+\t\t\t// the method passes the responsibility to the caller:", "+\t\t\tcurrentScope.removeTrackingVar(trackingVariable);", "+\tcurrentScope.checkUnclosedCloseables(flowInfo, null/*ignore exception exits from flowContext*/, this);"]}], "num": 31117}
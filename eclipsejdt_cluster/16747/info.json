{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6206244767f336fad2418a52b96c2a4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0630c80f440ec0e91707d46f55ed604", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "736a3352edee05c04aa96eb4323328cfa8fdbdd5", "commitAfterChange": "9c251eade23f2143003635a87c2f3f96ae52d898", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length;i++) {", "-\t\t\t\t\t\tif (arguments[i].isWildcard() && arguments[i].isProperType(true)) {", "-\t\t\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) arguments[i];", "-\t\t\t\t\t\t\tSourceTypeBinding contextType = inferenceContext.scope.enclosingSourceType();", "-\t\t\t\t\t\t\tint position = invocationSite.sourceEnd();", "-\t\t\t\t\t\t\tCompilationUnitScope compilationUnitScope = inferenceContext.scope.compilationUnitScope();", "-\t\t\t\t\t\t\tASTNode cud = compilationUnitScope.referenceContext;", "-\t\t\t\t\t\t\tfinal int captureID = compilationUnitScope.nextCaptureID();", "-\t\t\t\t\t\t\tCaptureBinding capture = inferenceContext.environment.createCapturedWildcard(wildcard, contextType, position, cud, captureID);", "+\t\t\t\t\tparameterizedType = parameterizedType.capture(inferenceContext.scope, invocationSite.sourceEnd());", "+\t\t\t\t\targuments = parameterizedType.arguments;", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\t\t\t\tif (arguments[i].isCapture() && arguments[i].isProperType(true)) {", "+\t\t\t\t\t\t\tCaptureBinding capture = (CaptureBinding) arguments[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f56877bb6d598cd5dfb12cec3bd32383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "e8e4696c6b4df6d1a8d3d92e6556bb62baf2641a", "commitAfterChange": "4d3c57a6d316c63afbedae8dcbdb1593f599b949", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public String getJdkLevel()", "signatureAfterChange": " public String getJdkLevel()", "diff": ["-\t\t\t\t} else if (hasChildren()) { // TODO: (olivier) should not populate the model, but rather walk the filesystem/resources directly", "-\t\t\t\t\tIJavaElement[] javaElements = getChildren();", "-\t\t\t\t\tfor (int i = 0, max = javaElements.length; i < max; i++) {", "-\t\t\t\t\t\tIPackageFragment fragment = (IPackageFragment) javaElements[i];", "-\t\t\t\t\t\tif (fragment.hasChildren()) {", "-\t\t\t\t\t\t\tIClassFile classFile = fragment.getClassFiles()[0];", "-\t\t\t\t\t\t\tIFile file = (IFile) classFile.getUnderlyingResource();", "-\t\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(file);", "-\t\t\t\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tIResource resource = getResource();", "+\t\t\t\t\tIFile classFile = null;", "+\t\t\t\t\tif (resource.getType() == IResource.FOLDER) {", "+\t\t\t\t\t\tclassFile = searchClassFile((IFolder) resource);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (classFile != null) {", "+\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(classFile);", "+\t\t\t\t\t\tIPath location = classFile.getLocation();", "+\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());"]}], "num": 16747}
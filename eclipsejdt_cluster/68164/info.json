{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2063b9fadc42f0d002f25a4a487cadd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e065d5a3faef659b24d76964a56a61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "c80004d70ebe07235571e96c3ea452dbc7ba5394", "commitAfterChange": "70dd884582455dcf661aaade70c8faff4213db3a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tif (match == castType) {", "+ \t\tif (match == castType) {", "+\t\t\tif (match == null && castType.isBoundParameterizedType()) { // cast between unrelated types", "+\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\treturn true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d283222c09564cdcc68ff900ca44987f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "ccba397e4e9d73802c009a4349e321c86584df94", "commitAfterChange": "cec508cecafb7942c9eac67dcd1f12c464401c60", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r public boolean isPackage(char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r \r public boolean isPackage(char[][] compoundName, char[] packageName)", "diff": ["-\tfor (int i = 0, length = classpathLocations.length; i < length; i++)\r", "-\t\tif (classpathLocations[i].isPackage(qualifiedPackageName))\r", "+\tif (sourceLocations != null && sourceLocations[0].isPackage(qualifiedPackageName)) // looks in common output folder\r", "+\t\treturn true;\r", "+\tfor (int i = 0, length = binaryLocations.length; i < length; i++)\r", "+\t\tif (binaryLocations[i].isPackage(qualifiedPackageName))\r"]}], "num": 68164}
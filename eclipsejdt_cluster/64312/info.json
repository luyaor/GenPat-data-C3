{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "150c4299f97e164536cecd4eb2262168", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06913d32fd1bd4aa970399130614604b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8c41a552c98522f907517ef76590c1165afbc25d", "commitAfterChange": "ea85eda7fc7c200244e30957006ea59d3760120d", "methodNumberBeforeChange": 1059, "methodNumberAfterChange": 1059, "signatureBeforeChange": " public void test1032()", "signatureAfterChange": " public void test1032()", "diff": ["-// **", "-\tthis.runConformTest(", "-\t\tnew String[] {", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "-\t\t\"\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.JavacHasABug.JavacBugFixed_7 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b50ae25d80005977bd7f8550c3f53e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8c41a552c98522f907517ef76590c1165afbc25d", "commitAfterChange": "ea85eda7fc7c200244e30957006ea59d3760120d", "methodNumberBeforeChange": 1043, "methodNumberAfterChange": 1043, "signatureBeforeChange": " public void test1018a()", "signatureAfterChange": " public void test1018a()", "diff": ["-// **", "-\tthis.runConformTest(", "-\t\tnew String[] {", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "-\t\t\"SUCCESS\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"SUCCESS\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.JavacHasABug.JavacBugFixed_7 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a4d6630227dff4825270c73ba53c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8c41a552c98522f907517ef76590c1165afbc25d", "commitAfterChange": "ea85eda7fc7c200244e30957006ea59d3760120d", "methodNumberBeforeChange": 1028, "methodNumberAfterChange": 1028, "signatureBeforeChange": " public void test1005()", "signatureAfterChange": " public void test1005()", "diff": ["-// **", "-\tthis.runConformTest(", "-\t\tnew String[] {", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "-\t\t\"\");", "+\t// compiler results", "+\tnull /* do not check compiler log */,", "+\t// runtime results", "+\t\"\" /* expected output string */,", "+\t\"\" /* expected error string */,", "+\t// javac options", "+\tJavacTestOptions.JavacHasABug.JavacBugFixed_7 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "901a464a768214d19d62e2124dbd8928", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b7160e8085cf8063f1f3db4ac577c79071d5d7b0", "commitAfterChange": "5570f0e247bd18a17332042e143b22a635cf26df", "methodNumberBeforeChange": 833, "methodNumberAfterChange": 833, "signatureBeforeChange": " public void test0813()", "signatureAfterChange": " public void test0813()", "diff": ["-// **", "-\tthis.runConformTest(", "-\t\tnew String[] {", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "-\t\t\"\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.JavacHasABug.JavacBugFixed_7 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c278ef77df4b72810f2ce48064a15c4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5570f0e247bd18a17332042e143b22a635cf26df", "commitAfterChange": "3bdad1c2bee46cfc01e1c4253b1e77d41c06aec6", "methodNumberBeforeChange": 948, "methodNumberAfterChange": 948, "signatureBeforeChange": " public void test0925()", "signatureAfterChange": " public void test0925()", "diff": ["-// **", "-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\"X.java\",", "-\t\t\"import java.util.*;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"public class X<A, B> {\\n\" + ", "-\t\t\"\tprivate List<A> toAdd;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic X(List<A> toAdd) {\\n\" + ", "-\t\t\"\t\tthis.toAdd = toAdd;\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tprivate List<A> getRelated(B b) {\\n\" + ", "-\t\t\"\t\t// some application logic\\n\" + ", "-\t\t\"\t\t// for demo\\n\" + ", "-\t\t\"\t\treturn toAdd;\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\t@SuppressWarnings(\\\"unchecked\\\")\\n\" + ", "-\t\t\"\tpublic <L extends List<? super A>, LF extends Factory<L>> L addOrCreate4(\\n\" + ", "-\t\t\"\t\t\tB b, L l, LF lf) {\\n\" + ", "-\t\t\"\t\tif (l == null) {\\n\" + ", "-\t\t\"\t\t\tl = lf.create();\\n\" + ", "-\t\t\"\t\t}\\n\" + ", "-\t\t\"\t\t((List<? super A>) l).addAll(getRelated(b)); \\n\" + ", "-\t\t\"\t\tl.addAll(getRelated(b));\\n\" + ", "-\t\t\"\t\treturn l;\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic static class ListFactory<T> implements Factory<List<T>> {\\n\" + ", "-\t\t\"\t\tpublic List<T> create() {\\n\" + ", "-\t\t\"\t\t\treturn new ArrayList<T>();\\n\" + ", "-\t\t\"\t\t}\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic static interface Factory<T> {\\n\" + ", "-\t\t\"\t\tpublic T create();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic static void main(String... args) {\\n\" + ", "-\t\t\"\t\tListFactory<Number> lf = new ListFactory<Number>();\\n\" + ", "-\t\t\"\t\tList<Long> longs = new ArrayList<Long>();\\n\" + ", "-\t\t\"\t\tlongs.add(new Long(1));\\n\" + ", "-\t\t\"\t\tX<Long, Number> test = new X<Long, Number>(longs);\\n\" + ", "-\t\t\"\t\tList<Number> ret4 = null;\\n\" + ", "-\t\t\"\t\tret4 = test.addOrCreate4(1, ret4, lf);\\n\" + ", "-\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\"", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\",", "+\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X<A, B> {\\n\" + ", "+\t\t\t\"\tprivate List<A> toAdd;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic X(List<A> toAdd) {\\n\" + ", "+\t\t\t\"\t\tthis.toAdd = toAdd;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate List<A> getRelated(B b) {\\n\" + ", "+\t\t\t\"\t\t// some application logic\\n\" + ", "+\t\t\t\"\t\t// for demo\\n\" + ", "+\t\t\t\"\t\treturn toAdd;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\t@SuppressWarnings(\\\"unchecked\\\")\\n\" + ", "+\t\t\t\"\tpublic <L extends List<? super A>, LF extends Factory<L>> L addOrCreate4(\\n\" + ", "+\t\t\t\"\t\t\tB b, L l, LF lf) {\\n\" + ", "+\t\t\t\"\t\tif (l == null) {\\n\" + ", "+\t\t\t\"\t\t\tl = lf.create();\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t\t((List<? super A>) l).addAll(getRelated(b)); \\n\" + ", "+\t\t\t\"\t\tl.addAll(getRelated(b));\\n\" + ", "+\t\t\t\"\t\treturn l;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static class ListFactory<T> implements Factory<List<T>> {\\n\" + ", "+\t\t\t\"\t\tpublic List<T> create() {\\n\" + ", "+\t\t\t\"\t\t\treturn new ArrayList<T>();\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static interface Factory<T> {\\n\" + ", "+\t\t\t\"\t\tpublic T create();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static void main(String... args) {\\n\" + ", "+\t\t\t\"\t\tListFactory<Number> lf = new ListFactory<Number>();\\n\" + ", "+\t\t\t\"\t\tList<Long> longs = new ArrayList<Long>();\\n\" + ", "+\t\t\t\"\t\tlongs.add(new Long(1));\\n\" + ", "+\t\t\t\"\t\tX<Long, Number> test = new X<Long, Number>(longs);\\n\" + ", "+\t\t\t\"\t\tList<Number> ret4 = null;\\n\" + ", "+\t\t\t\"\t\tret4 = test.addOrCreate4(1, ret4, lf);\\n\" + ", "+\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "-\t\t\"SUCCESS\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"SUCCESS\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.JavacHasABug.JavacBugFixed_7 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f515a30e327ded5399ba7609e6945449", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a9aaf4f1804bcfe30f1412a21b3d924fe517af6b", "commitAfterChange": "ef6edb688893cd6d22d31cfac59fd0a029f9056b", "methodNumberBeforeChange": 948, "methodNumberAfterChange": 948, "signatureBeforeChange": " public void test0925()", "signatureAfterChange": " public void test0925()", "diff": ["-// **", "-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\"X.java\",", "-\t\t\"import java.util.*;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"public class X<A, B> {\\n\" + ", "-\t\t\"\tprivate List<A> toAdd;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic X(List<A> toAdd) {\\n\" + ", "-\t\t\"\t\tthis.toAdd = toAdd;\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tprivate List<A> getRelated(B b) {\\n\" + ", "-\t\t\"\t\t// some application logic\\n\" + ", "-\t\t\"\t\t// for demo\\n\" + ", "-\t\t\"\t\treturn toAdd;\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\t@SuppressWarnings(\\\"unchecked\\\")\\n\" + ", "-\t\t\"\tpublic <L extends List<? super A>, LF extends Factory<L>> L addOrCreate4(\\n\" + ", "-\t\t\"\t\t\tB b, L l, LF lf) {\\n\" + ", "-\t\t\"\t\tif (l == null) {\\n\" + ", "-\t\t\"\t\t\tl = lf.create();\\n\" + ", "-\t\t\"\t\t}\\n\" + ", "-\t\t\"\t\t((List<? super A>) l).addAll(getRelated(b)); \\n\" + ", "-\t\t\"\t\tl.addAll(getRelated(b));\\n\" + ", "-\t\t\"\t\treturn l;\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic static class ListFactory<T> implements Factory<List<T>> {\\n\" + ", "-\t\t\"\t\tpublic List<T> create() {\\n\" + ", "-\t\t\"\t\t\treturn new ArrayList<T>();\\n\" + ", "-\t\t\"\t\t}\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic static interface Factory<T> {\\n\" + ", "-\t\t\"\t\tpublic T create();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"\tpublic static void main(String... args) {\\n\" + ", "-\t\t\"\t\tListFactory<Number> lf = new ListFactory<Number>();\\n\" + ", "-\t\t\"\t\tList<Long> longs = new ArrayList<Long>();\\n\" + ", "-\t\t\"\t\tlongs.add(new Long(1));\\n\" + ", "-\t\t\"\t\tX<Long, Number> test = new X<Long, Number>(longs);\\n\" + ", "-\t\t\"\t\tList<Number> ret4 = null;\\n\" + ", "-\t\t\"\t\tret4 = test.addOrCreate4(1, ret4, lf);\\n\" + ", "-\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\"", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\",", "+\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X<A, B> {\\n\" + ", "+\t\t\t\"\tprivate List<A> toAdd;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic X(List<A> toAdd) {\\n\" + ", "+\t\t\t\"\t\tthis.toAdd = toAdd;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tprivate List<A> getRelated(B b) {\\n\" + ", "+\t\t\t\"\t\t// some application logic\\n\" + ", "+\t\t\t\"\t\t// for demo\\n\" + ", "+\t\t\t\"\t\treturn toAdd;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\t@SuppressWarnings(\\\"unchecked\\\")\\n\" + ", "+\t\t\t\"\tpublic <L extends List<? super A>, LF extends Factory<L>> L addOrCreate4(\\n\" + ", "+\t\t\t\"\t\t\tB b, L l, LF lf) {\\n\" + ", "+\t\t\t\"\t\tif (l == null) {\\n\" + ", "+\t\t\t\"\t\t\tl = lf.create();\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t\t((List<? super A>) l).addAll(getRelated(b)); \\n\" + ", "+\t\t\t\"\t\tl.addAll(getRelated(b));\\n\" + ", "+\t\t\t\"\t\treturn l;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static class ListFactory<T> implements Factory<List<T>> {\\n\" + ", "+\t\t\t\"\t\tpublic List<T> create() {\\n\" + ", "+\t\t\t\"\t\t\treturn new ArrayList<T>();\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static interface Factory<T> {\\n\" + ", "+\t\t\t\"\t\tpublic T create();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"\tpublic static void main(String... args) {\\n\" + ", "+\t\t\t\"\t\tListFactory<Number> lf = new ListFactory<Number>();\\n\" + ", "+\t\t\t\"\t\tList<Long> longs = new ArrayList<Long>();\\n\" + ", "+\t\t\t\"\t\tlongs.add(new Long(1));\\n\" + ", "+\t\t\t\"\t\tX<Long, Number> test = new X<Long, Number>(longs);\\n\" + ", "+\t\t\t\"\t\tList<Number> ret4 = null;\\n\" + ", "+\t\t\t\"\t\tret4 = test.addOrCreate4(1, ret4, lf);\\n\" + ", "+\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "-\t\t\"SUCCESS\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"SUCCESS\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.JavacHasABug.JavacBugFixed_7 /* javac test options */);"]}], "num": 64312}
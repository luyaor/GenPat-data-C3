{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd7acbd0d0f714d374584022efc31103", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06e4795c9b1754c7edd7d9c025b0581b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["+\t\t\t\t\t\tbreak returnType;", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (useTypeAnnotations) {", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, 0, true).isAnyMismatch()) {", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);", "+\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\tif (useTypeAnnotations) {", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], 0, true).isAnyMismatch()) {", "+\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ac68e3f0cc9485da07e71fffd1a68a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\tthis.problemReporter(currentMethod).staticAndInstanceConflict(currentMethod, inheritedMethod);", "+\t\t\tproblemReporter(currentMethod).staticAndInstanceConflict(currentMethod, inheritedMethod);", "-\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+\t\t\tproblemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-\t\t\t\tthis.checkExceptions(currentMethod, inheritedMethod);", "+\t\t\t\tcheckExceptions(currentMethod, inheritedMethod);", "-\t\t\t\tthis.problemReporter(currentMethod).finalMethodCannotBeOverridden(currentMethod, inheritedMethod);", "-\t\t\tif (!this.isAsVisible(currentMethod, inheritedMethod))", "-\t\t\t\tthis.problemReporter(currentMethod).visibilityConflict(currentMethod, inheritedMethod);", "+\t\t\t\tproblemReporter(currentMethod).finalMethodCannotBeOverridden(currentMethod, inheritedMethod);", "+\t\t\tif (!isAsVisible(currentMethod, inheritedMethod))", "+\t\t\t\tproblemReporter(currentMethod).visibilityConflict(currentMethod, inheritedMethod);", "-\t\t\t\t\tthis.problemReporter(currentMethod).overridesDeprecatedMethod(currentMethod, inheritedMethod);", "+\t\t\t\t\tproblemReporter(currentMethod).overridesDeprecatedMethod(currentMethod, inheritedMethod);", "+\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee76d04d63eff41c2d336ca7fa2b1241", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "+\t\t\t\t\t\tif (srcMethod != null)", "+\t\t\t\t\t\t\tscope.problemReporter().illegalReturnRedefinition(srcMethod, inheritedMethod, null);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, useTypeAnnotations);", "+\t\t\t\t\tTypeBinding inheritedParameter = inheritedMethod.parameters[i];", "-\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], substituteParameter, 0, CheckMode.OVERRIDE).isAnyMismatch()) {", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedParameter, substituteParameter, 0, CheckMode.OVERRIDE).isAnyMismatch()) {", "+\t\t\t\t\t\tif (currentArgument != null)", "+\t\t\t\t\t\t\tscope.problemReporter().illegalParameterRedefinition(currentArgument, inheritedMethod.declaringClass, inheritedParameter);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod, false);"]}], "num": 33445}
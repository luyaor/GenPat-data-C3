{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a798e5fb57d734f8ef270471ef9871b8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8058cd07670d449ef63704d04e8cf548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t", "-\t\t\t\tcheckCastTypesCompatibility(scope, this.resolvedType, expressionType, this.expression);", "+\t\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, this.resolvedType, expressionType, this.expression);", "-\t\t\t\tif ((this.bits & UnnecessaryCastMask) != 0) {", "-\t\t\t\t\tif ((this.bits & IgnoreNeedForCastCheckMASK) == 0) {", "+\t\t\t\tif (isLegal) {", "+\t\t\t\t\tif ((this.bits & UnsafeCastMask) != 0) { // unsafe cast", "+\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "+\t\t\t\t\t} else if ((this.bits & (UnnecessaryCastMASK|IgnoreNeedForCastCheckMASK)) == UnnecessaryCastMASK) { // unnecessary cast ", "+\t\t\t\t} else { // illegal cast", "+\t\t\t\t\tscope.problemReporter().typeCastError(this,  this.resolvedType, expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90989399fbe2a83e846cadcae4c4603b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+", "+", "-\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "-\t\t\tif (this.resolvedType != null && castedExpressionType != null) {", "-\t\t\t\tareTypesCastCompatible(scope, this.resolvedType, castedExpressionType);", "+\t\t\tTypeBinding expressionType = expression.resolveType(scope);", "+\t\t\tif (this.resolvedType != null && expressionType != null) {", "+\t\t\t\tboolean necessary = checkCastTypesCompatibility(scope, this.resolvedType, expressionType);", "+\t\t\t\tif (!necessary) {", "+\t\t\t\t\tthis.bits |= UnnecessaryCastMask;", "+\t\t\t\t\tif ((this.bits & IgnoreNeedForCastCheckMASK) == 0) {", "+\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "-\t\t\tif (castedExpressionType == null) return null;", "+\t\t\tTypeBinding expressionType = expression.resolveType(scope);", "+\t\t\tif (expressionType == null) return null;"]}], "num": 11916}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "538e8ba1b4d367f116238d752fea9c00", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1a0664be72b02213f4bf78e894505b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (!foundValue &&", "-\t\t\t\t\t(method.modifiers & ClassFileConstants.AccAnnotationDefault) == 0 &&", "-\t\t\t\t\t(this.bits & IsRecovered) == 0) {", "+\t\t\tif (!foundValue", "+\t\t\t\t\t&& (method.modifiers & ClassFileConstants.AccAnnotationDefault) == 0", "+\t\t\t\t\t&& (this.bits & IsRecovered) == 0", "+\t\t\t\t\t&& annotationType.isValidBinding()) {", "-\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);", "+\t\t\t\tif (annotationType.isValidBinding()) {", "+\t\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);", "+\t\t\t\t}", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\tif (!annotationType.isValidBinding()) {", "+\t\t\t\t\t// no need to check annotation usage if missing", "+\t\t\t\t}", "+", "+\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) {", "+\t\t\t\t\t// does not specify any target restriction - all locations are possible including type annotations", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t}", "+\t\t\t\t\tcase Binding.TYPE_USE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType|TagBits.AnnotationForType)) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType)) != 0)", "-\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) this.recipient;", "+\t\t\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on method return type", "+\t\t\t\t\t\t\tif (methodBinding.returnType != null && methodBinding.returnType.id == T_void) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().illegalUsageOfTypeAnnotations(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on field type", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\t} else \tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t\t// jsr 308 - annotation on method parameter type", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on local type", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeParameter) != 0) {", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76203819a5c846d49ff677b680a3356a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "3aeda49982d529a7b3b4520a8ddfc77c62e6f6ba", "commitAfterChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tMemberValuePair valueAttribute = null; // remember the first 'value' pair", "+\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(memberName, TypeConstants.VALUE)) {", "+\t\t\t\t\t\tvalueAttribute = valuePair;", "+\t\t\t\t\t}", "+\t\t// recognize standard annotations ?", "+\t\tlong tagBits = detectStandardAnnotation(scope, annotationType, valueAttribute);", "+\t\tif (this.recipient != null) {", "+\t\t\tif (tagBits != 0) {", "+\t\t\t\t// tag bits onto recipient", "+\t\t\t\tswitch (this.recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\t// TODO (philippe) need support for package annotations", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t((ReferenceBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\t((MethodBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\t((FieldBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\t((LocalVariableBinding)this.recipient).tagBits |= tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t\t// check (meta)target compatibility", "+\t\t\tcheckTargetCompatibility: {", "+\t\t\t\tlong metaTagBits = annotationType.tagBits;", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t", "+\t\t\t\tswitch (recipient.kind()) {", "+\t\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForPackage) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE :", "+\t\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\t\tif (((ReferenceBinding)this.recipient).isAnnotationType()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForAnnotationType) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForType) != 0) ", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForConstructor) != 0)", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t\tscope.problemReporter().incompatibleTargetForAnnotation(this);", "+\t\t\t}", "+\t\t}"]}], "num": 30372}
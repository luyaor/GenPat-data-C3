{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "027a855d9b0b78d6b59014099eb3b999", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b48cc5ca9453b04366ecaff33cdbae0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 284, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-\t\t\tcheckAndSetModifiers(AccAbstract);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccAbstract);", "-\t\t\tcheckAndSetModifiers(AccStrictfp);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccStrictfp);", "-\t\t\tcheckAndSetModifiers(AccFinal);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccFinal);", "-\t\t\tcheckAndSetModifiers(AccNative);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccNative);", "-\t\t\tcheckAndSetModifiers(AccPrivate);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccPrivate);", "-\t\t\tcheckAndSetModifiers(AccProtected);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccProtected);", "-\t\t\tcheckAndSetModifiers(AccPublic);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccPublic);", "-\t\t\tcheckAndSetModifiers(AccTransient);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccTransient);", "-\t\t\tcheckAndSetModifiers(AccVolatile);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccVolatile);", "-\t\t\tcheckAndSetModifiers(AccStatic);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccStatic);", "-\t\t\tcheckAndSetModifiers(AccSynchronized);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccSynchronized);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03092ce460795dc19542665c19137d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\t\tif (actualType == NullBinding) return;", "+\t\tif (actualType == TypeBinding.NULL) return;", "-\t\t\tcase CONSTRAINT_EQUAL :", "-\t\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\tcase TypeConstants.CONSTRAINT_EQUAL :", "+\t\t\tcase TypeConstants.CONSTRAINT_EXTENDS :", "-\t\t\tcase CONSTRAINT_SUPER :", "+\t\t\tcase TypeConstants.CONSTRAINT_SUPER :", "-        \t\tif (constraint == CONSTRAINT_EQUAL) {", "-        \t\t\tsubstitutes.put(VoidBinding, NoTypes); // marker for impossible inference", "+        \t\tif (constraint == TypeConstants.CONSTRAINT_EQUAL) {", "+        \t\t\tsubstitutes.put(TypeBinding.VOID, Binding.NO_TYPES); // marker for impossible inference", "-    \t\t\t\tif (constraint == CONSTRAINT_SUPER) { // JLS 15.12.7, p.459", "+    \t\t\t\tif (constraint == TypeConstants.CONSTRAINT_SUPER) { // JLS 15.12.7, p.459", "-\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_EXTENDS);", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "-            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, CONSTRAINT_EQUAL);", "+            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, TypeConstants.CONSTRAINT_EQUAL);"]}], "num": 37457}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66172747d9562aaa67e6df00a961bb26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e2c193a11b3d3f6918da3d3d7fab91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ab65f9958c4ed5b3b45ee13b8e88b17d2c86ad3d", "commitAfterChange": "6fb362f5d4ff00934fbc56c75799ebc442d91e1a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic synchronized void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\tpublic synchronized void initializeRoots() {", "+\tpublic void initializeRoots() {", "+\t\t", "-\t\tthis.oldRoots = this.roots == null ? new Hashtable() : this.roots;", "-\t\tthis.oldOtherRoots = this.otherRoots == null ? new Hashtable() : this.otherRoots;", "+\t\tHashMap newOldRoots;", "+\t\tHashMap newOldOtherRoots;", "+\t\tsynchronized(this) {", "+\t\t\tnewOldRoots = this.roots == null ? new HashMap() : this.roots;", "+\t\t\tnewOldOtherRoots = this.otherRoots == null ? new HashMap() : this.otherRoots;", "+\t\t\t// recompute root infos only if necessary", "+\t\t\tif (!this.rootsAreStale) {", "+\t\t\t\tthis.oldRoots = newOldRoots;", "+\t\t\t\tthis.oldOtherRoots = newOldOtherRoots;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "-\t\t// recompute root infos only if necessary", "-\t\tif (!this.rootsAreStale) return;", "+\t\tHashMap newRoots = new HashMap();", "+\t\tHashMap newOtherRoots = new HashMap();", "+\t\tHashMap newSourceAttachments = new HashMap();", "-\t\tthis.roots = new Hashtable();", "-\t\tthis.otherRoots = new Hashtable();", "-\t\tthis.sourceAttachments = new Hashtable();", "-\t\t", "-\t\t\t\tif (this.roots.get(path) == null) {", "-\t\t\t\t\tthis.roots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "+\t\t\t\tif (newRoots.get(path) == null) {", "+\t\t\t\t\tnewRoots.put(path, new DeltaProcessor.RootInfo(project, path, ((ClasspathEntry)entry).fullExclusionPatternChars()));", "-\t\t\t\t\tArrayList rootList = (ArrayList)this.otherRoots.get(path);", "+\t\t\t\t\tArrayList rootList = (ArrayList)newOtherRoots.get(path);", "-\t\t\t\t\t\tthis.otherRoots.put(path, rootList);", "+\t\t\t\t\t\tnewOtherRoots.put(path, rootList);", "-\t\t\t\t\tthis.sourceAttachments.put(sourceAttachmentPath, path);", "+\t\t\t\t\tnewSourceAttachments.put(sourceAttachmentPath, path);", "-\t\tthis.rootsAreStale = false;", "+\t\tsynchronized(this) {", "+\t\t\tif (this.rootsAreStale) { // double check again", "+\t\t\t\tthis.oldRoots = newOldRoots;", "+\t\t\t\tthis.oldOtherRoots = newOldOtherRoots;\t\t\t", "+\t\t\t\tif (newRoots != null) {", "+\t\t\t\t\tthis.roots = newRoots;", "+\t\t\t\t\tthis.otherRoots = newOtherRoots;", "+\t\t\t\t\tthis.sourceAttachments = newSourceAttachments;", "+\t\t\t\t\tthis.rootsAreStale = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bc29b1e8fb8133b95b4e7d4030d5642", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tif (!isConsistent()) { // TODO: (jerome) this code isn't synchronized with regular opening of a working copy (should use getElementInfo)", "-\t\tsuper.makeConsistent(monitor);", "-\t\tif (monitor != null && monitor.isCanceled()) return;", "-\t\tif (this.problemRequestor != null && this.problemRequestor.isActive()){", "-\t\t\tthis.problemRequestor.beginReporting();", "-\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, monitor); ", "-\t\t\tthis.problemRequestor.endReporting();", "-\t\t}\t\t", "+\tthis.computeProblems = this.problemRequestor != null && this.problemRequestor.isActive();", "+", "+\tWorkingCopyElementInfo info = null;", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tsynchronized(manager){", "+\t\tif (isConsistent()) return;", "+", "+\t\t// create a new info and make it the current info", "+\t\tinfo = (WorkingCopyElementInfo)createElementInfo();", "+\t\tbuildStructure(info, monitor);", "+\t", "+\t// report problems outside the JavaModelManager lock", "+\tif (monitor != null && monitor.isCanceled()) return;", "+\treportProblemsIfNeeded(info);"]}], "num": 10844}
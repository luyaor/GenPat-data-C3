{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1af9098ca6348be5be3e9f3f97510a1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e6cfca45061acbc57ab97993d7c4392", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeMemberOperation.java", "commitBeforeChange": "0bd771375c18b7c83a5adef74657e35cf2c86ff3", "commitAfterChange": "5882e29154dfffe57fe4183f714dc74947e8e98d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, ICompilationUnit cu) throws JavaModelException", "diff": ["-\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_CONTENTS));", "+\t\t\t\tcreatedNodeSource = generateSyntaxIncorrectAST();", "+\t\t\t\tif (this.createdNode == null)", "+\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_CONTENTS));", "+\t\t\t} else {", "+\t\t\t\tList bodyDeclarations = typeDeclaration.bodyDeclarations();", "+\t\t\t\tif (bodyDeclarations.size() == 0) {", "+\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_CONTENTS));", "+\t\t\t\t}", "+\t\t\t\tthis.createdNode = (ASTNode) bodyDeclarations.iterator().next();", "+\t\t\t\tcreatedNodeSource = this.source;", "-\t\t\tList bodyDeclarations = typeDeclaration.bodyDeclarations();", "-\t\t\tif (bodyDeclarations.size() == 0) {", "-\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_CONTENTS));", "-\t\t\t}", "-\t\t\tthis.createdNode = (ASTNode) bodyDeclarations.iterator().next();", "-\t\t\tcreatedNodeSource = this.source;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f943acdcde9c1fa263726eb43cee1b70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "254a144fb8ad02730db7fb5ae51a3f1d563a3301", "commitAfterChange": "e54faf9b6863584db506773e5f99391f62c41c79", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void attachSource(IPath zipPath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void attachSource(IPath zipPath, IPath rootPath, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\tif ((zipPath.isAbsolute() && workspace.getRoot().findMember(zipPath) != null) || !zipPath.isAbsolute()) {", "-\t\t\t\t\t// internal to the workbench", "-\t\t\t\t\t// a resource", "-\t\t\t\t\tIResource zipFile= workspace.getRoot().findMember(zipPath);", "-\t\t\t\t\tif (zipFile == null) {", "-\t\t\t\t\t\tif (monitor != null) {", "-\t\t\t\t\t\t\tmonitor.done();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, zipPath));", "+\t\t\t\t// check if zip path is valid", "+\t\t\t\tObject target = JavaModel.getTarget(workspace.getRoot(), zipPath, false);", "+\t\t\t\tif (!(target instanceof IFile || target instanceof File)) {", "+\t\t\t\t\tif (monitor != null) {", "+\t\t\t\t\t\tmonitor.done();", "-\t\t\t\t\tif (!(zipFile.getType() == IResource.FILE)) {", "-\t\t\t\t\t\tif (monitor != null) {", "-\t\t\t\t\t\t\tmonitor.done();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, zipPath));", "-\t\t\t\t\t}", "+\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, zipPath));"]}], "num": 30580}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbfe270b1b863cae129ca54214855312", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9760809754f9b7aefc25b560a2367545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "3091564ff71d95ca83672941f8a4ec3464344683", "commitAfterChange": "ac6c2726bc9770d7575dff83ad9611f141165280", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\tReferenceBinding typeBinding = null;", "+\tboolean lastButOne = false;", "-\t\tReferenceBinding typeBinding = (ReferenceBinding) binding;", "+\t\ttypeBinding = (ReferenceBinding) binding;", "+\t} else if (binding instanceof FieldBinding) { // may happen for static import", "+\t\ttypeBinding = ((FieldBinding)binding).declaringClass;", "+\t\tlastButOne = importRef.isStatic() && !importRef.onDemand;", "+\t} else if (binding instanceof MethodBinding) { // may happen for static import", "+\t\ttypeBinding = ((MethodBinding)binding).declaringClass;", "+\t\tlastButOne = importRef.isStatic() && !importRef.onDemand;", "+\t}", "+\tif (typeBinding != null) {", "-\t\tif (importRef.isStatic() && !importRef.onDemand && !typeBinding.isMemberType()) {", "-\t\t\t// for field static import, do not use last token", "+\t\tif (lastButOne) {", "+\t\t\t// for field or method static import, use last but one token"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ec58a0963f5a88dbcfa8055db89e25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static FakedTrackingVariable getCloseTrackingVariable(Expression expression)", "signatureAfterChange": " \tpublic static FakedTrackingVariable getCloseTrackingVariable(Expression expression)", "diff": ["+\t\twhile (true) {", "+\t\t\tif (expression instanceof CastExpression)", "+\t\t\t\texpression = ((CastExpression) expression).expression;", "+\t\t\telse if (expression instanceof Assignment)", "+\t\t\t\texpression = ((Assignment) expression).expression;", "+\t\t\telse", "+\t\t\t\tbreak;", "+\t\t}", "-\t\t\t\tif (local.isParameter() || !isAutoCloseable(expression.resolvedType))", "+\t\t\t\tif (!isAnyCloseable(expression.resolvedType))", "-\t\t\t\treturn local.closeTracker = new FakedTrackingVariable(local, location);", "+\t\t\t\tlocal.closeTracker = new FakedTrackingVariable(local, location);", "+\t\t\t\tif (local.isParameter()) {", "+\t\t\t\t\tlocal.closeTracker.globalClosingState |= OWNED_BY_OUTSIDE;", "+\t\t\t\t\t// status of this tracker is now UNKNOWN", "+\t\t\t\t}", "+\t\t\t\treturn local.closeTracker;", "-\t\t}", "+\t\t} else if (expression instanceof AllocationExpression) {", "+\t\t\t// return any preliminary tracking variable from analyseCloseableAllocation ", "+\t\t\treturn ((AllocationExpression) expression).closeTracker;", "+\t\t}\t\t"]}], "num": 27952}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c19e99d8889dfec0902e5a89ff51020", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187eb5906e1620050b00b0821fcd7d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "1b79e24e174cbe645091d191260c98e48405b675", "commitAfterChange": "3d0cee6e94784a6b3bd48a07f7ded01c1ecae704", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "diff": ["-\t\tint count= this.packageFragmentRoots.length;", "-\t\tString matchName= partialMatch ? name.toLowerCase() : name;", "-\t\tString[] splittedName = partialMatch ? null : Util.splitOn('.', matchName, 0, matchName.length());", "-\t\tfor (int i= 0; i < count; i++) {", "-\t\t\tif (requestor.isCanceled())", "-\t\t\t\treturn;", "-\t\t\tIPackageFragmentRoot root= this.packageFragmentRoots[i];", "-\t\t\tIJavaElement[] list= null;", "-\t\t\ttry {", "-\t\t\t\tlist= root.getChildren();", "-\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\tcontinue; // this root package fragment is not present", "-\t\t\t}", "-\t\t\tint elementCount= list.length;", "-\t\t\tfor (int j= 0; j < elementCount; j++) {", "+\t\tif (partialMatch) {", "+\t\t\tint count= this.packageFragmentRoots.length;", "+\t\t\tString matchName= name.toLowerCase();", "+\t\t\tfor (int i= 0; i < count; i++) {", "-\t\t\t\tIPackageFragment packageFragment= (IPackageFragment) list[j];", "-\t\t\t\tif (partialMatch) {", "+\t\t\t\tIPackageFragmentRoot root= this.packageFragmentRoots[i];", "+\t\t\t\tIJavaElement[] list= null;", "+\t\t\t\ttry {", "+\t\t\t\t\tlist= root.getChildren();", "+\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\tcontinue; // this root package fragment is not present", "+\t\t\t\t}", "+\t\t\t\tint elementCount= list.length;", "+\t\t\t\tfor (int j= 0; j < elementCount; j++) {", "+\t\t\t\t\tif (requestor.isCanceled())", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tIPackageFragment packageFragment= (IPackageFragment) list[j];", "-\t\t\t\t} else {", "-\t\t\t\t\tif (Util.equalArraysOrNull(((PackageFragment)packageFragment).names, splittedName))", "-\t\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tString[] splittedName = Util.splitOn('.', name, 0, name.length());", "+\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) this.packageFragments.get(splittedName);", "+\t\t\tif (roots != null) {", "+\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "+\t\t\t\t\trequestor.acceptPackageFragment(root.getPackageFragment(splittedName));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b882766b41fcd367d81eca77908383", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "7fcda725e57776ddb850f6e0923a37be77d4220a", "commitAfterChange": "a6e6bfb150ee78b02c696c163d3f66a811019e6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tHashtableOfArrayToObject getAllPackageFragments(JavaProject project)", "signatureAfterChange": " \t \tHashtableOfArrayToObject getAllPackageFragments(JavaProject project)", "diff": ["-\t\t\tIPackageFragment[] frags = this.getPackageFragmentsInRoots(roots, project);", "-\t\t\tfor (int i= 0; i < frags.length; i++) {", "-\t\t\t\tPackageFragment fragment= (PackageFragment) frags[i];", "-\t\t\t\tString[] pkgName = fragment.names;", "-\t\t\t\tIPackageFragment[] entry= (IPackageFragment[]) cache.get(pkgName);", "-\t\t\t\tif (entry == null) {", "-\t\t\t\t\tentry= new IPackageFragment[1];", "-\t\t\t\t\tentry[0]= fragment;", "-\t\t\t\t\tcache.put(pkgName, entry);", "-\t\t\t\t} else {", "-\t\t\t\t\tIPackageFragment[] copy= new IPackageFragment[entry.length + 1];", "-\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "-\t\t\t\t\tcopy[entry.length]= fragment;", "-\t\t\t\t\tcache.put(pkgName, copy);", "+\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\t\tIJavaElement[] frags = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tfrags = root.getChildren();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// root doesn't exist: ignore", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tfor (int j = 0, length2 = frags.length; j < length2; j++) {", "+\t\t\t\t\tPackageFragment fragment= (PackageFragment) frags[j];", "+\t\t\t\t\tString[] pkgName = fragment.names;", "+\t\t\t\t\tIPackageFragmentRoot[] entry= (IPackageFragmentRoot[]) cache.get(pkgName);", "+\t\t\t\t\tif (entry == null) {", "+\t\t\t\t\t\tentry= new IPackageFragmentRoot[] {root};", "+\t\t\t\t\t\tcache.put(pkgName, entry);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tIPackageFragmentRoot[] copy= new IPackageFragmentRoot[entry.length + 1];", "+\t\t\t\t\t\tSystem.arraycopy(entry, 0, copy, 0, entry.length);", "+\t\t\t\t\t\tcopy[entry.length]= root;", "+\t\t\t\t\t\tcache.put(pkgName, copy);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d35a90eab31262b7f0f2026bb58c646b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void buildTypeBindings()", "signatureAfterChange": "\r public void buildTypeBindings()", "diff": ["-\tif (openable instanceof CompilationUnit) {\r", "-\t\tthis.buildTypeBindings(this.getSource());\r", "-\t} else if (openable instanceof org.eclipse.jdt.internal.core.ClassFile) {\r", "-\t\tchar[] source = this.locator.findSource((org.eclipse.jdt.internal.core.ClassFile)openable); \r", "-\t\tif (source != null) {\r", "-\t\t\tthis.buildTypeBindings(source);\r", "+\tchar[] source = this.getSource();\r", "+\tif (source == null) return;\r", "+\tthis.buildTypeBindings(source);\r", "-\t\t\t// try to use the main type's class file as the openable\r", "-\t\t\tTypeDeclaration[] types = this.parsedUnit.types;\r", "-\t\t\tif (types != null && types.length > 0) {\r", "-\t\t\t\tString simpleTypeName = new String(types[0].name);\r", "-\t\t\t\tIPackageFragment parent = (IPackageFragment)openable.getParent();\r", "-\t\t\t\torg.eclipse.jdt.core.IClassFile mainTypeClassFile = \r", "-\t\t\t\t\tparent.getClassFile(simpleTypeName + \".class\"); //$NON-NLS-1$\r", "-\t\t\t\tif (mainTypeClassFile.exists()) {\r", "-\t\t\t\t\tthis.openable = (Openable)mainTypeClassFile;\r", "-\t\t\t\t} \r", "-\t\t\t}\r", "+\tif (this.openable instanceof org.eclipse.jdt.internal.core.ClassFile) {\r", "+\t\t// try to use the main type's class file as the openable\r", "+\t\tTypeDeclaration[] types = this.parsedUnit.types;\r", "+\t\tif (types != null) {\r", "+\t\t\tString classFileName = openable.getElementName();\r", "+\t\t\tfor (int i = 0, length = types.length; i < length; i++) {\r", "+\t\t\t\tTypeDeclaration typeDeclaration = types[i];\r", "+\t\t\t\tString simpleTypeName = new String(typeDeclaration.name);\r", "+\t\t\t\tif (classFileName.startsWith(simpleTypeName)) {\r", "+\t\t\t\t\tIPackageFragment parent = (IPackageFragment)openable.getParent();\r", "+\t\t\t\t\tthis.openable = (Openable)parent.getClassFile(simpleTypeName + \".class\"); //$NON-NLS-1$\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t} \r"]}], "num": 9413}
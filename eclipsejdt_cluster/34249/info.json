{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd3170a8bb3b3fad851f8e2f7398a482", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd81997c1ea2677e97ed772c114eb45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "566dfe9d75afc609e513171bfa949df8ee32e8da", "commitAfterChange": "14bf482e9ce4e28aba53c29fe3155a9c59b88f63", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\tTypeBinding checkTb = type.resolveType(scope);", "-\t\tif (expressionTb == null || checkTb == null)", "+\t\tTypeBinding expressionType = expression.resolveType(scope);", "+\t\tTypeBinding checkType = type.resolveType(scope);", "+\t\tif (expressionType == null || checkType == null)", "-\t\tif (!areTypesCastCompatible(scope, checkTb, expressionTb)) {", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionTb, checkTb);", "+\t\tif (!areTypesCastCompatible(scope, checkType, expressionType)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c78a8bb0544054f16e68e508f5acb79d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding checkType = type.resolveType(scope);", "-\t\tif (expressionType == null || checkType == null)", "+\t\tTypeBinding checkedType = type.resolveType(scope);", "+\t\tif (expressionType == null || checkedType == null)", "-\t\tboolean necessary = checkCastTypesCompatibility(scope, checkType, expressionType);", "-\t\tif (!necessary) {", "-\t\t\tscope.problemReporter().unnecessaryInstanceof(this, checkType);", "+\t\tif (checkedType.isTypeVariable() || checkedType.isParameterizedType() || checkedType.isGenericType()) {", "+\t\t\tscope.problemReporter().illegalInstanceOfGenericType(checkedType, this);", "+\t\t} else {", "+\t\t\tboolean necessary = checkCastTypesCompatibility(scope, checkedType, expressionType);", "+\t\t\tif (!necessary) {", "+\t\t\t\tscope.problemReporter().unnecessaryInstanceof(this, checkedType);", "+\t\t\t}"]}], "num": 34249}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbac52bf972477cf166c7c6a24775067", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c82a9232d1aa33975e290a878632342", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa717ce56e721f6ed4fc92594ba56da9f08c982e", "commitAfterChange": "5e93996c6b4562ee73fa5730afbd832d1574cd08", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void printEmptyLines(int linesNumber)", "signatureAfterChange": " \tpublic void printEmptyLines(int linesNumber)", "diff": ["+\t\tthis.printEmptyLines(linesNumber, this.scanner.getCurrentTokenEndPosition() + 1);", "+\t}", "-\t\taddInsertEdit(this.scanner.getCurrentTokenEndPosition() + 1, buffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6578a5d6206ec7387fdfbe076c14664", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "1e679d1a20634ff7b631ac043f1b9d1b716bcd23", "commitAfterChange": "b8eb7657f5ec170ca0c9bc64448d616c6f682244", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void printEmptyLines(int linesNumber, int insertPosition)", "signatureAfterChange": "  \tprivate void printEmptyLines(int linesNumber, int insertPosition)", "diff": ["-\t\tif (this.nlsTagCounter > 0) {", "-\t\t\treturn;", "-\t\t}", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tif (lastNumberOfNewLines == 0) {", "-\t\t\tlinesNumber++; // add an extra line breaks", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t}", "-\t\t\tlastNumberOfNewLines += linesNumber;", "-\t\t\tline += linesNumber;", "-\t\t\tcolumn = 1;", "-\t\t\tneedSpace = false;", "-\t\t\tthis.pendingSpace = false;", "-\t\t} else if (lastNumberOfNewLines == 1) {", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t}", "-\t\t\tlastNumberOfNewLines += linesNumber;", "-\t\t\tline += linesNumber;", "-\t\t\tcolumn = 1;", "-\t\t\tneedSpace = false;", "-\t\t\tthis.pendingSpace = false;", "-\t\t} else {", "-\t\t\tif ((lastNumberOfNewLines - 1) >= linesNumber) {", "-\t\t\t\t// there is no need to add new lines", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tfinal int realNewLineNumber = linesNumber - lastNumberOfNewLines + 1;", "-\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "-\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t}", "-\t\t\tlastNumberOfNewLines += realNewLineNumber;", "-\t\t\tline += realNewLineNumber;", "-\t\t\tcolumn = 1;", "-\t\t\tneedSpace = false;", "-\t\t\tthis.pendingSpace = false;", "-\t\t}", "-\t\taddInsertEdit(insertPosition, buffer.toString());", "+        final String buffer = getEmptyLines(linesNumber);", "+        if (EMPTY_STRING == buffer) return;", "+        ", "+\t\taddInsertEdit(insertPosition, buffer);"]}], "num": 25126}
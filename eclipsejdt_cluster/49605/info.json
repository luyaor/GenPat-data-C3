{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0713ea849e064e0d3054dde6e510ff45", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46550b20be1cc6759773d88e07cd3bc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "d57d057b9e029964391a7d18231884c456809f0a", "commitAfterChange": "a5db2eb78d347817bbf37d865afb84de837fdf1b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, int includeMask)", "signatureAfterChange": " \tpublic static IJavaSearchScope createJavaSearchScope(IJavaElement[] elements, int includeMask)", "diff": ["+\t\tHashSet projectsToBeAdded = new HashSet(2);", "+\t\tfor (int i = 0, length = elements.length; i < length; i++) {", "+\t\t\tIJavaElement element = elements[i];", "+\t\t\tif (element instanceof JavaProject) {", "+\t\t\t\tprojectsToBeAdded.add(element);", "+\t\t\t}", "+\t\t}", "-\t\tHashSet visitedProjects = new HashSet(2);", "-\t\t\t\t\tif (element instanceof JavaProject) {", "-\t\t\t\t\t\tscope.add((JavaProject)element, includeMask, visitedProjects);", "+\t\t\t\t\tif (projectsToBeAdded.remove(element)) {", "+\t\t\t\t\t\tscope.add((JavaProject)element, includeMask, projectsToBeAdded);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e00ef57f86417edf0c4d3faeea36cec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "60c16d45c70ad72312ec99383bac69ddc6273a43", "commitAfterChange": "b2ca94a1f182b0e09ba23ec187b81de7ae95848a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t\tprotected void sortDeltas(IJavaElementDelta[] elementDeltas)", "signatureAfterChange": " \t\tprotected void sortDeltas(IJavaElementDelta[] elementDeltas)", "diff": ["+\t\t\tfor (int i = 0, max = elementDeltas.length; i < max; i++) {", "+\t\t\t\tIJavaElementDelta delta = elementDeltas[i];", "+\t\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tif (children != null) {", "+\t\t\t\t\tsortDeltas(children);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea52ed6365cbc5ef11fd84eb80ead8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "458dca4c2b9da6278d150eba84339274fccc6057", "commitAfterChange": "01d995488d5e309c6b243da146c63894a6df881d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public TypeDeclaration getTypeDeclaration(String name)", "signatureAfterChange": "     public TypeDeclaration getTypeDeclaration(String name)", "diff": ["-    \t//First check cache", "-    \tTypeDeclaration result = _typeCache.get(name);", "-    \tif (result != null) return result;", "-", "+    \t//First check cache", "+    \tTypeDeclaration result = _typeCache.get(name);", "+    \tif (result != null) return result;", "+", "-\t\tif( _astRoot != null )", "-\t\t\ttypeBinding = _astRoot.getAST().resolveWellKnownType(name);", "-\t\tString typeKey = BindingKey.createTypeBindingKey(name);", "-\t\tif(typeBinding == null){", "-\t\t\t// then look into the current compilation units\t\t\t", "-\t\t\tASTNode node = null;", "-\t\t\tif( _astRoot != null )", "-\t\t\t\tnode = _astRoot.findDeclaringNode(typeKey);", "-\t\t\t\t\t\t", "-\t\t\tif( node != null ){", "-\t\t\t\tfinal int nodeType = node.getNodeType();", "-\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "-\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "-\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "-\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\tCompilationUnit[] asts = getAsts();", "+\t\t", "+\t\tif( asts != null && asts.length > 0) {", "+\t\t\ttypeBinding = asts[0].getAST().resolveWellKnownType(name);", "+", "+\t\t\tif(typeBinding == null){", "+\t\t\t\t// then look into the current compilation units\t\t\t", "+\t\t\t\tASTNode node = null;", "+\t\t\t\tString typeKey = BindingKey.createTypeBindingKey(name);", "+\t\t\t\tfor (int i=0, len=asts.length;i<len;i++) {", "+\t\t\t\t\tnode = asts[i].findDeclaringNode(typeKey);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\tif( node != null ){", "+\t\t\t\t\t\tfinal int nodeType = node.getNodeType();", "+\t\t\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "+\t\t\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "+\t\t\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "+\t\t\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b6be614c6e638c2848a1ba27879730", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public ASTNode getASTNodeForBinding(final IBinding binding)", "signatureAfterChange": " \tprotected CompilationUnit searchLocallyForBinding(final IBinding binding)", "diff": ["-     */", "-    public ASTNode getASTNodeForBinding(final IBinding binding)", "-    {", "-\t\tfinal CompilationUnit astUnit = getCompilationUnitForBinding(binding);", "-\t\tif( astUnit == null ) return null;", "-\t\treturn astUnit.findDeclaringNode(binding.getKey());", "-    }", "+\t */", "+\tprotected CompilationUnit searchLocallyForBinding(final IBinding binding)", "+\t{", "+\t\tif( !_batchMode )", "+\t\t\treturn super.searchLocallyForBinding(binding);", "+\t\t", "+\t\tfor( int i=0, len=_astUnits.length; i<len; i++ ){", "+\t\t\tASTNode node = _astUnits[i].findDeclaringNode(binding);", "+\t\t\tif( node != null)", "+\t\t\t\treturn _astUnits[i];", "+\t\t}", "+\t\treturn null;", "+\t}"]}], "num": 49605}
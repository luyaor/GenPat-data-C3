{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6c066b7d78fe0f16c8896078b62bde8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02aa670ecee470b1576ec04fbb2788e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "aa840c8bcdfb26adabb4ef3914d3bd09d15784c4", "commitAfterChange": "c1f9cc390c170609267b76bee97dfba81631d517", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void resolveStatements()", "signatureAfterChange": " public void resolveStatements()", "diff": ["-\tif (!CharOperation.equals(this.scope.enclosingSourceType().sourceName, this.selector)){", "+\tSourceTypeBinding sourceType = this.scope.enclosingSourceType();", "+\tif (!CharOperation.equals(sourceType.sourceName, this.selector)){", "-", "-\t", "+\tif (this.binding != null && !this.binding.isPrivate()) {", "+\t\tsourceType.tagBits |= TagBits.HasNonPrivateConstructor;", "+\t}", "-\t\t// e.g. using super() in java.lang.Object", "-\t\tif (this.binding != null", "-\t\t\t&& this.binding.declaringClass.id == TypeIds.T_JavaLangObject", "-\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "-\t\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "-\t\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\t\t}", "-\t\t\t\tthis.constructorCall = null;", "+\t\tif (sourceType.id == TypeIds.T_JavaLangObject", "+\t\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "+\t\t\t// cannot use super() in java.lang.Object", "+\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "+\t\t\t\tthis.scope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "+\t\t\t}", "+\t\t\tthis.constructorCall = null;", "-\t\t}", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285c3ad5bdb8d298c22dd326f64cff91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void resolveStatements(ClassScope upperScope)", "signatureAfterChange": " \tpublic void resolveStatements(ClassScope upperScope)", "diff": ["-/*", "-\t\t// checking for recursive constructor call (protection)", "-\t\tif (!ignoreFurtherInvestigation && constructorCall == null){", "-\t\t\tconstructorCall = new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);", "-\t\t\tconstructorCall.sourceStart = sourceStart;", "-\t\t\tconstructorCall.sourceEnd = sourceEnd;", "-\t\t}", "-*/", "+", "-\t\tif (constructorCall != null) {", "+\t\tif (this.constructorCall != null) {", "-\t\t\tif (binding != null", "-\t\t\t\t&& binding.declaringClass.id == T_Object", "-\t\t\t\t&& constructorCall.accessMode != ExplicitConstructorCall.This) {", "-\t\t\t\t\tif (constructorCall.accessMode == ExplicitConstructorCall.Super) {", "-\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(constructorCall);", "+\t\t\tif (this.binding != null", "+\t\t\t\t&& this.binding.declaringClass.id == T_Object", "+\t\t\t\t&& this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "+\t\t\t\t\tif (this.constructorCall.accessMode == ExplicitConstructorCall.Super) {", "+\t\t\t\t\t\tscope.problemReporter().cannotUseSuperInJavaLangObject(this.constructorCall);", "-\t\t\t\t\tconstructorCall = null;", "+\t\t\t\t\tthis.constructorCall = null;", "-\t\t\t\tconstructorCall.resolve(scope);", "+\t\t\t\tthis.constructorCall.resolve(this.scope);", "-", "-\t\t// indirect reference: increment target constructor reference count", "-\t\tif (constructorCall != null){", "-\t\t\tif (constructorCall.binding != null", "-\t\t\t\t&& !constructorCall.isSuperAccess()", "-\t\t\t\t&& constructorCall.binding.isValidBinding()) {", "-\t\t\t\t((ConstructorDeclaration)", "-\t\t\t\t\t\t(upperScope.referenceContext.declarationOf(constructorCall.binding))).referenceCount++;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eccec410c0bc6bbf47a1e300c65c7fee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "afcefcc52a6e235f9ed640317727929d84135cf0", "commitAfterChange": "5ce294a787e58643d5e8115fe2ddfea119e53aa2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean isRecursive(ArrayList visited)", "signatureAfterChange": " public boolean isRecursive(ArrayList visited)", "diff": ["-\t */", "-\tpublic boolean isRecursive(ArrayList visited) {", "-", "-\t\tif (this.binding == null", "-\t\t\t\t|| this.constructorCall == null", "-\t\t\t\t|| this.constructorCall.binding == null", "-\t\t\t\t|| this.constructorCall.isSuperAccess()", "-\t\t\t\t|| !this.constructorCall.binding.isValidBinding()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tConstructorDeclaration targetConstructor = ", "-\t\t\t((ConstructorDeclaration)this.scope.referenceType().declarationOf(constructorCall.binding.original()));", "-\t\tif (this == targetConstructor) return true; // direct case", "-", "-\t\tif (visited == null) { // lazy allocation", "-\t\t\tvisited = new ArrayList(1);", "-\t\t\tint index = visited.indexOf(this);", "-\t\t\tif (index >= 0) return index == 0; // only blame if directly part of the cycle", "-\t\tvisited.add(this);", "-", "-\t\treturn targetConstructor.isRecursive(visited);", "+ */", "+public boolean isRecursive(ArrayList visited) {", "+\tif (this.binding == null", "+\t\t\t|| this.constructorCall == null", "+\t\t\t|| this.constructorCall.binding == null", "+\t\t\t|| this.constructorCall.isSuperAccess()", "+\t\t\t|| !this.constructorCall.binding.isValidBinding()) {", "+\t\treturn false;", "+\t}", "+\t", "+\tConstructorDeclaration targetConstructor = ", "+\t\t((ConstructorDeclaration)this.scope.referenceType().declarationOf(this.constructorCall.binding.original()));", "+\tif (this == targetConstructor) return true; // direct case", "+", "+\tif (visited == null) { // lazy allocation", "+\t\tvisited = new ArrayList(1);", "+\t} else {", "+\t\tint index = visited.indexOf(this);", "+\t\tif (index >= 0) return index == 0; // only blame if directly part of the cycle", "+\t}", "+\tvisited.add(this);", "+", "+\treturn targetConstructor.isRecursive(visited);", "+}"]}], "num": 38510}
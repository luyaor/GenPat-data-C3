{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae95b74780b1cf5ed03c2dce86bcf8aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b3389af515ce9c93d64ffab54009c67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "commitAfterChange": "0768a01c46bf55c1ad1aefdbfa14c12019b43872", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\tpublic MarkerInfo(String path, String source)", "signatureAfterChange": " \t\tpublic MarkerInfo(String path, String source)", "diff": ["-\t\t\tthis(path, source, -1);", "-\t\t}", "+", "+\t\t\tint markerIndex = 1;", "+\t\t\twhile (source.indexOf(\"/*start\" + markerIndex + \"*/\") != -1) {", "+\t\t\t\tmarkerIndex++;", "+\t\t\t}", "+\t\t\tint astNumber = source.indexOf(\"/*start*/\") != -1 ? markerIndex : markerIndex-1;", "+\t\t\tthis.astStarts = new int[astNumber];", "+\t\t\tthis.astEnds = new int[astNumber];", "+\t\t\t", "+\t\t\tfor (int i = 1; i < markerIndex; i++)", "+\t\t\t\tsetStartAndEnd(i);\t\t", "+\t\t\tif (astNumber == markerIndex)", "+\t\t\t\tsetStartAndEnd(-1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815f517d3783b808770762e3b4b973c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "53380a5830867128cd28d10f3919067730bbfb82", "commitAfterChange": "c0f393752b7d4523a5fc372912c7b4e192e52da7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic ASTNode getNodeStartingAt(int start)", "signatureAfterChange": " \tpublic ASTNode getNodeStartingAt(int start)", "diff": ["+\t\tint length = 0;", "-\t\t\tfor (int i=0; i<this.paramReferences.length; i++) {", "+\t\t\tlength = this.paramReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\tfor (int i=0; i<this.invalidParameters.length; i++) {", "+\t\t\tlength = this.invalidParameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (param.sourceStart==start) {", "+\t\t\t\t\treturn param;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// type parameters array", "+\t\tif (this.paramTypeParameters != null) {", "+\t\t\tlength = this.paramTypeParameters.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];", "-\t\t\tfor (int i=0; i<this.exceptionReferences.length; i++) {", "+\t\t\tlength = this.exceptionReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\tfor (int i=0; i<this.seeReferences.length; i++) {", "+\t\t\tlength = this.seeReferences.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\tfor (int j=0; j<allocationExpr.arguments.length; j++) {", "+\t\t\t\t\t\t\tfor (int j=0, l=allocationExpr.arguments.length; j<l; j++) {", "-\t\t\t\t\t\t\tfor (int j=0; j<messageSend.arguments.length; j++) {", "+\t\t\t\t\t\t\tfor (int j=0, l=messageSend.arguments.length; j<l; j++) {"]}], "num": 71454}
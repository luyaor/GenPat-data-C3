{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e48554d695e35159200516a57a976d13", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f16ff90a2723019c57b4f0196ed5922", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException", "signatureAfterChange": " private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException", "diff": ["-\t\tint start = (streamBuffer[this.bufferIndex++]&0xFF);", "-\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "-\t\t\tthis.bufferIndex = 0;", "-\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "-\t\t}", "-\t\tint end = (streamBuffer[this.bufferIndex++]&0xFF);", "-\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "-\t\t\tthis.bufferIndex = 0;", "-\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "-\t\t}", "+\t\tif (stream != null && this.bufferIndex + 2 >= this.bufferEnd)", "+\t\t\treadStreamBuffer(stream);", "+\t\tint start = streamBuffer[this.bufferIndex++] & 0xFF;", "+\t\tint end = streamBuffer[this.bufferIndex++] & 0xFF;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd0ed509f2b9a6857ad1e8fb080b7127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private void readChunk(String[] docNames, DataInputStream stream, int index, int size) throws IOException", "signatureAfterChange": " private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException", "diff": ["-private void readChunk(String[] docNames, DataInputStream stream, int index, int size) throws IOException {", "-\tString current = stream.readUTF();", "+private void readChunk(String[] docNames, FileInputStream stream, int index, int size) throws IOException {", "+\tString current = new String(readStreamChars(stream));", "-\t\tint start = stream.readUnsignedByte(); // number of identical characters at the beginning", "-\t\tint end = stream.readUnsignedByte(); // number of identical characters at the end", "-\t\tString next = stream.readUTF();", "+\t\tint start = (streamBuffer[this.bufferIndex++]&0xFF);", "+\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tint readSize = this.streamEnd - this.streamPos;", "+\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "+\t\t}", "+\t\tint end = (streamBuffer[this.bufferIndex++]&0xFF);", "+\t\tif (stream != null && this.bufferIndex == BUFFER_READ_SIZE) {", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tint readSize = this.streamEnd - this.streamPos;", "+\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < BUFFER_READ_SIZE ? readSize : BUFFER_READ_SIZE);", "+\t\t}", "+\t\tString next  = new String(readStreamChars(stream));"]}], "num": 22352}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce3fec6eca6c9a38f58bd81ca8772c95", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744ab14a6577a377bbf1b9070b0fa882", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void runAPTInFileBasedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType)", "signatureAfterChange": " \t \tprivate void dispatchToFileBasedProcessor( \t\t\tfinal CompilationProcessorEnv processorEnv)", "diff": ["-\tprivate void runAPTInFileBasedMode(", "-\t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories,", "-\t\t\tfinal ProcessorEnvImpl processorEnv,", "-\t\t\tfinal List<IFile> filesWithMissingType,", "-\t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType)", "-\t\tfinal IFile[] files = processorEnv.getFiles();", "-\t\tfor (IFile curFile : files ) {", "-\t\t\tprocessorEnv.setFileProcessing(curFile);", "-\t\t\tMap<String, AnnotationTypeDeclaration> annotationDecls = processorEnv.getAnnotationTypesInFile();", "-\t\t\tfor( Map.Entry<AnnotationProcessorFactory, FactoryPath.Attributes> entry : factories.entrySet() ){", "-\t\t\t\tif( entry.getValue().runInBatchMode() ) continue;", "-\t\t\t\tAnnotationProcessorFactory factory = entry.getKey();", "-\t\t\t\tSet<AnnotationTypeDeclaration> factoryDecls = getFactorySupportedAnnotations(factory, annotationDecls);", "-\t\t\t\tif( factoryDecls != null ){", "-\t\t\t\t\tif(factoryDecls.size() == 0 ){", "-\t\t\t\t\t\tfactoryDecls = new HashSet(annotationDecls.values());", "-\t\t\t\t\t\tannotationDecls.clear();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (factoryDecls != null && factoryDecls.size() > 0) {", "-\t\t\t\t\tfinal AnnotationProcessor processor = factory", "-\t\t\t\t\t\t\t.getProcessorFor(factoryDecls, processorEnv);", "-\t\t\t\t\tif (processor != null)", "-\t\t\t\t\t{", "-\t\t\t\t\t\tif ( AptPlugin.DEBUG ) {", "-\t\t\t\t\t\t\ttrace( \"runAPT: invoking file-based processor \" + processor.getClass().getName() + \" on \" + curFile, //$NON-NLS-1$ //$NON-NLS-2$ ", "-\t\t\t\t\t\t\t\t\tprocessorEnv); ", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tprocessor.process();\t\t\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t", "-\t\t\t\tif (annotationDecls.isEmpty())", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\taddFileWithMissingTypeError(curFile, filesWithMissingType, unitsForFilesWithMissingType, processorEnv);", "-\t\t\t", "-\t\t\tif( ! annotationDecls.isEmpty() )", "-\t\t\t\t; // TODO: (theodora) log unclaimed annotations.", "-\t\t}\t", "+\tprivate void dispatchToFileBasedProcessor(", "+\t\t\tfinal CompilationProcessorEnv processorEnv){", "+\t\t", "+\t\tMap<String, AnnotationTypeDeclaration> annotationDecls = processorEnv.getAnnotationTypes();", "+\t\tfor( Map.Entry<AnnotationProcessorFactory, FactoryPath.Attributes> entry : _factories.entrySet() ){", "+\t\t\tif( entry.getValue().runInBatchMode() ) continue;", "+\t\t\tAnnotationProcessorFactory factory = entry.getKey();", "+\t\t\tSet<AnnotationTypeDeclaration> factoryDecls = getFactorySupportedAnnotations(factory, annotationDecls);", "+\t\t\tif( factoryDecls != null ){", "+\t\t\t\tif(factoryDecls.size() == 0 ){", "+\t\t\t\t\tfactoryDecls = new HashSet(annotationDecls.values());", "+\t\t\t\t\tannotationDecls.clear();", "+\t\t\tif (factoryDecls != null && factoryDecls.size() > 0) {", "+\t\t\t\tfinal AnnotationProcessor processor = factory", "+\t\t\t\t\t\t.getProcessorFor(factoryDecls, processorEnv);", "+\t\t\t\tif (processor != null)", "+\t\t\t\t{", "+\t\t\t\t\tif ( AptPlugin.DEBUG ) {", "+\t\t\t\t\t\ttrace( \"runAPT: invoking file-based processor \" + processor.getClass().getName() + \" on \" + processorEnv.getFile(), //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\t\t\t\t\t\tprocessorEnv); ", "+\t\t\t\t\t}", "+\t\t\t\t\tprocessor.process();\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\tif (annotationDecls.isEmpty())", "+\t\t\t\tbreak;", "+\t\tif( ! annotationDecls.isEmpty() )", "+\t\t\t; // TODO: (theodora) log unclaimed annotations.", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2cf62a9fb978bdf6f61f053025aee15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int round)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal Set<AnnotationProcessorFactory> currentRoundDispatchedBatchFactories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int internalRound)", "diff": ["+\t\t\tfinal Set<AnnotationProcessorFactory> currentRoundDispatchedBatchFactories,", "-\t\t\tfinal int round)", "+\t\t\tfinal int internalRound)", "-\t\tif (annotationDecls.isEmpty())", "+\t\tif (annotationDecls.isEmpty() && _dispatchedBatchFactories.isEmpty() )", "+\t\tif( AptPlugin.DEBUG )", "+\t\t\ttrace( \"annotations found \" + annotationDecls.keySet(), processorEnv); //$NON-NLS-1$", "+", "-\t\t// within one round APT dispatch.", "-\t\tif( !batchFactory2Annos.isEmpty() && round == 0){", "+\t\t// within one round APT dispatch.\t\t", "+\t\tif( internalRound == 0 ){", "+\t\t\tif( !batchFactory2Annos.isEmpty()){", "+\t\t\t\tprocessorEnv.setBatchProcessing();", "+\t\t\t\t// Once we figure out which factory claims what annotation,", "+\t\t\t\t// the order of the factory doesn't matter.", "+\t\t\t\t// But in order to make things consists between runs, will ", "+\t\t\t\t// dispatch base on factory order.", "+\t\t\t\tfor(AnnotationProcessorFactory factory : factories.keySet() ){\t\t\t", "+\t\t\t\t\tfinal Set<AnnotationTypeDeclaration> annotationTypes = batchFactory2Annos.get(factory);", "+\t\t\t\t\tif( annotationTypes == null ) continue;", "+\t\t\t\t\tfinal AnnotationProcessor processor = ", "+\t\t\t\t\t\tfactory.getProcessorFor(annotationTypes, processorEnv);", "+\t\t\t\t\tif( processor != null ){", "+\t\t\t\t\t\tif ( AptPlugin.DEBUG ) ", "+\t\t\t\t\t\t\ttrace( \"runAPT: invoking batch processor \" + processor.getClass().getName(), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tprocessorEnv);", "+\t\t\t\t\t\tcurrentRoundDispatchedBatchFactories.add(factory);", "+\t\t\t\t\t\tprocessor.process();", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "-\t\t\t// Once we figure out which factory claims what annotation,", "-\t\t\t// the order of the factory doesn't matter.", "-\t\t\t// But in order to make things consists between runs, will ", "-\t\t\t// dispatch base on factory order.", "-\t\t\tfor(AnnotationProcessorFactory factory : factories.keySet() ){\t\t\t", "-\t\t\t\tfinal Set<AnnotationTypeDeclaration> annotationTypes = batchFactory2Annos.get(factory);", "-\t\t\t\tif( annotationTypes == null ) continue;", "+\t\t\tfor( AnnotationProcessorFactory prevRoundFactory : _dispatchedBatchFactories ){", "+\t\t\t\tif(currentRoundDispatchedBatchFactories.contains(prevRoundFactory))", "+\t\t\t\t\tcontinue;", "-\t\t\t\t\tfactory.getProcessorFor(annotationTypes, processorEnv);", "+\t\t\t\t\tprevRoundFactory.getProcessorFor(Collections.<AnnotationTypeDeclaration>emptySet(), processorEnv);", "-\t\t\t\t\t\t\t\tprocessorEnv); ", "-                    processorEnv.setLatestProcessor(processor);", "+\t\t\t\t\t\t\t\tprocessorEnv);", "-\t\t                    processorEnv.setLatestProcessor(processor);"]}], "num": 29467}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "004a74c8687f928aea570b1e1fe6a77b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d2889ffd0268bd41b1bf9d7ed2af28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "f31a7c66253713190ad63c70e0b59cb14da073ee", "commitAfterChange": "e4977e607a5ee7e535e9a2e59b1fcde5e9d4c9b3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": "\r public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\tchar[] source = getSourceMapper().findSource(type);\r", "-\t\tif (source != null){\r", "-\t\t\tgetSourceMapper().mapSource(type, source);\r", "-\t\t}\r", "-\t\tISourceRange sourceRange = getSourceRange();\r", "-\t\tif (sourceRange != null && sourceRange != SourceMapper.fgUnknownRange) {\r", "-\t\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "-\t\t\tDecodeParametersNames decoder = new DecodeParametersNames();\r", "-\t\t\tSourceElementParser parser = new SourceElementParser(decoder, factory);\r", "-\t\t\tint start = sourceRange.getOffset();\r", "-\t\t\tint end = start + sourceRange.getLength();\r", "-\t\t\tparser.parseTypeMemberDeclarations(source, start, end);\r", "-\t\t\tfParameterNames = decoder.getParametersNames();\r", "-\t\t\tif (fParameterNames == null) {\r", "-\t\t\t\tIBinaryMethod info = (IBinaryMethod) getRawInfo();\r", "-\t\t\t\tint paramCount = Signature.getParameterCount(new String(info.getMethodDescriptor()));\r", "-\t\t\t\tfParameterNames = new String[paramCount];\r", "-\t\t\t\tfor (int i = 0; i < paramCount; i++) {\r", "-\t\t\t\t\tfParameterNames[i] = \"arg\" + i; //$NON-NLS-1$\r", "+\t\tSourceMapper mapper = getSourceMapper();\r", "+\t\tif (mapper != null) {\r", "+\t\t\tchar[] source = mapper.findSource(type);\r", "+\t\t\tif (source != null){\r", "+\t\t\t\tmapper.mapSource(type, source);\r", "+\t\t\t\tISourceRange sourceRange = getSourceRange();\r", "+\t\t\t\tif (source != null & sourceRange != null && sourceRange != SourceMapper.fgUnknownRange) {\r", "+\t\t\t\t\tIProblemFactory factory = new DefaultProblemFactory();\r", "+\t\t\t\t\tDecodeParametersNames decoder = new DecodeParametersNames();\r", "+\t\t\t\t\tSourceElementParser parser = new SourceElementParser(decoder, factory);\r", "+\t\t\t\t\tint start = sourceRange.getOffset();\r", "+\t\t\t\t\tint end = start + sourceRange.getLength();\r", "+\t\t\t\t\tparser.parseTypeMemberDeclarations(source, start, end);\r", "+\t\t\t\t\tfParameterNames = decoder.getParametersNames();\r", "-\t\t} else {\r", "+\t\t}\r", "+\t\t// if still no parameter names, produce fake ones\r", "+\t\tif (fParameterNames == null) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e623f2d947d57cc257a2118b92243cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "887e85023301ae4623fbf853a36078cfd9120d7a", "commitAfterChange": "b9bd51906a715700072cf746ced64d441415e678", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testMakeReferences() throws IOException, Exception", "signatureAfterChange": " public void testReference() throws IOException, Exception", "diff": ["-public void testMakeReferences() throws IOException, Exception {", "+public void testReference() throws IOException, Exception {", "-\tFile versionFile = new Path(OUTPUT_DIR.getPath()).append(\"version.txt\").toFile();", "-\tOUTPUT_DIR.mkdirs();", "-\tUtil.writeToFile(JDT_CORE_VERSION, versionFile.getAbsolutePath());", "+\tif (this.testIndex == 0) {", "+\t\tFile versionFile = new Path(OUTPUT_DIR.getPath()).append(\"version.txt\").toFile();", "+\t\tOUTPUT_DIR.mkdirs();", "+\t\tUtil.writeToFile(JDT_CORE_VERSION, versionFile.getAbsolutePath());", "+\t}", "-\t// Format each file of the input dir and write the result to the output directory", "-\tassertNotNull(\"We should have got input files from \"+INPUT_DIR, this.inputFiles);", "-\tDefaultCodeFormatter codeFormatter = codeFormatter();", "-\tint length = this.inputFiles.length;", "-\tfor (int i=0; i<length; i++) {", "+\t// Get the source from file", "+\tString source = new String(org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(this.file, null));", "+\ttry {", "+\t\t// Format the source", "+\t\tTextEdit edit = codeFormatter().format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "-\t\t// Get the source from file", "-\t\tString source = new String(org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(this.inputFiles[i], null));", "-", "-\t\ttry {", "-\t\t\t// Format the source", "-\t\t\tTextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "-", "-\t\t\t// Write the result", "-\t\t\tif (edit != null) {", "-\t\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "-\t\t\t\tString inputPath = this.inputFiles[i].getPath().substring(INPUT_DIR.getPath().length()+1);", "-\t\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "-\t\t\t\twrittenFile.getParentFile().mkdirs();", "-\t\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "-\t\t\t}", "+\t\t// Write the result", "+\t\tif (edit != null) {", "+\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "+\t\t\tString inputPath = this.file.getPath().substring(INPUT_DIR.getPath().length()+1);", "+\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "+\t\t\twrittenFile.getParentFile().mkdirs();", "+\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "-\t\tcatch (Exception ex) {", "-\t\t\t// skip silently", "-\t\t}", "+\t}", "+\tcatch (Exception ex) {", "+\t\t// skip silently"]}], "num": 1691}
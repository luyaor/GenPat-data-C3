{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8d3e17320891bb68da6ea62ef16eaef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ebf24b406857c31d657a22f6679ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\tboolean missingElementsHaveProblems) {", "+\t\tboolean missingElementsHaveProblems,", "+\t\tchar[] castedReceiver,", "+\t\tint receiverStart,", "+\t\tint receiverEnd) {", "+\t\t\t\t\t", "+\t\t\t\t\tif (castedReceiver != null) {", "+\t\t\t\t\t\tcompletion = CharOperation.concat(castedReceiver, completion);", "+\t\t\t\t\t}", "-\t\t\t// Standard proposal", "-\t\t\tif(!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(method));", "-\t\t\t\tMethodBinding original = method.original();", "-\t\t\t\tif(original != method) {", "-\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "-\t\t\t\t}", "-\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "-\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "-\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "-\t\t\t\tproposal.setName(method.selector);", "-\t\t\t\tif (missingElements != null) {", "-\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "-\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "-\t\t\t\t\t\tsubProposals[i] =", "-\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "-\t\t\t\t\t\t\t\t\tmissingElements[i],", "-\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "-\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "-\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t", "+\t\t\tif (castedReceiver == null) {", "+\t\t\t\t// Standard proposal", "+\t\t\t\tif(!this.isIgnored(CompletionProposal.METHOD_REF, missingElements != null) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "-\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t}\t", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(method.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t", "+\t\t\t\t// Javadoc proposal", "+\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "+\t\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_METHOD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t}", "+\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "+\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// Javadoc proposal", "-\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "-\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_METHOD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(method));", "-\t\t\t\tMethodBinding original = method.original();", "-\t\t\t\tif(original != method) {", "-\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "-\t\t\t\t}", "-\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "-\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "-\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "-\t\t\t\tproposal.setName(method.selector);", "-\t\t\t\tproposal.setCompletion(javadocCompletion);", "-\t\t\t\tproposal.setFlags(method.modifiers);", "-\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "-\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "-\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t} else {", "+\t\t\t\tif(!this.isIgnored(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, missingElements != null)) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(method.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(method));", "+\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\tif(original != method) {", "+\t\t\t\t\t\tproposal.setOriginalSignature(getSignature(original));", "+\t\t\t\t\t}", "+\t\t\t\t\tproposal.setReceiverSignature(getSignature(receiverType));", "+\t\t\t\t\tproposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setParameterPackageNames(parameterPackageNames);", "+\t\t\t\t\tproposal.setParameterTypeNames(parameterTypeNames);", "+\t\t\t\t\tproposal.setPackageName(method.returnType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(method.returnType.qualifiedSourceName());", "+\t\t\t\t\tproposal.setName(method.selector);", "+\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t}", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(method.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setReceiverRange(receiverStart - this.offset, receiverEnd - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tif(parameterNames != null) proposal.setParameterNames(parameterNames);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3853705333876cab2f93de47ce83e73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\tboolean missingElementsHaveProblems) {", "+\t\tboolean missingElementsHaveProblems,", "+\t\tchar[] castedReceiver,", "+\t\tint receiverStart,", "+\t\tint receiverEnd) {", "+\t\t\t", "+\t\t\t", "+\t\t\tif (castedReceiver != null) {", "+\t\t\t\tcompletion = CharOperation.concat(castedReceiver, completion);", "+\t\t\t}", "-\t\t\t// Standard proposal", "-\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, missingElements != null) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(field.type));", "-\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "-\t\t\t\tproposal.setName(field.name);", "-\t\t\t\tif (missingElements != null) {", "-\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "-\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "-\t\t\t\t\t\tsubProposals[i] =", "-\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "-\t\t\t\t\t\t\t\t\tmissingElements[i],", "-\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "-\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "-\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\tif (castedReceiver == null) {", "+\t\t\t\t// Standard proposal", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, missingElements != null) && (this.assistNodeInJavadoc & CompletionOnJavadoc.ONLY_INLINE_TAG) == 0) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "-\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "-\t\t\t\t}", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(field.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// Javadoc completions", "-\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_FIELD_REF)) {", "-\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(field.type));", "-\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "-\t\t\t\tproposal.setName(field.name);", "-\t\t\t\tproposal.setCompletion(javadocCompletion);", "-\t\t\t\tproposal.setFlags(field.modifiers);", "-\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "-\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t}", "-\t\t\t\t// Javadoc value completion for static fields", "-\t\t\t\tif (field.isStatic() && !this.requestor.isIgnored(CompletionProposal.JAVADOC_VALUE_REF)) {", "-\t\t\t\t\tjavadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_VALUE);", "-\t\t\t\t\tCompletionProposal valueProposal = this.createProposal(CompletionProposal.JAVADOC_VALUE_REF, this.actualCompletionPosition);", "-\t\t\t\t\tvalueProposal.setDeclarationSignature(getSignature(field.declaringClass));", "-\t\t\t\t\tvalueProposal.setSignature(getSignature(field.type));", "-\t\t\t\t\tvalueProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "-\t\t\t\t\tvalueProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "-\t\t\t\t\tvalueProposal.setPackageName(field.type.qualifiedPackageName());", "-\t\t\t\t\tvalueProposal.setTypeName(field.type.qualifiedSourceName()); ", "-\t\t\t\t\tvalueProposal.setName(field.name);", "-\t\t\t\t\tvalueProposal.setCompletion(javadocCompletion);", "-\t\t\t\t\tvalueProposal.setFlags(field.modifiers);", "-\t\t\t\t\tvalueProposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tvalueProposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\t\tvalueProposal.setRelevance(relevance+R_VALUE_TAG);", "-\t\t\t\t\tthis.requestor.accept(valueProposal);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\tthis.printDebug(valueProposal);", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t", "+\t\t\t\t// Javadoc completions", "+\t\t\t\tif ((this.assistNodeInJavadoc & CompletionOnJavadoc.TEXT) != 0 && !this.requestor.isIgnored(CompletionProposal.JAVADOC_FIELD_REF)) {", "+\t\t\t\t\tchar[] javadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_LINK);", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.JAVADOC_FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(javadocCompletion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tint start = (this.assistNodeInJavadoc & CompletionOnJavadoc.REPLACE_TAG) != 0 ? this.javadocTagPosition : this.startPosition;", "+\t\t\t\t\tproposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance+R_INLINE_TAG);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t\t// Javadoc value completion for static fields", "+\t\t\t\t\tif (field.isStatic() && !this.requestor.isIgnored(CompletionProposal.JAVADOC_VALUE_REF)) {", "+\t\t\t\t\t\tjavadocCompletion = inlineTagCompletion(completion, JavadocTagConstants.TAG_VALUE);", "+\t\t\t\t\t\tCompletionProposal valueProposal = this.createProposal(CompletionProposal.JAVADOC_VALUE_REF, this.actualCompletionPosition);", "+\t\t\t\t\t\tvalueProposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\t\tvalueProposal.setSignature(getSignature(field.type));", "+\t\t\t\t\t\tvalueProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\t\tvalueProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\t\tvalueProposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\t\tvalueProposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\t\tvalueProposal.setName(field.name);", "+\t\t\t\t\t\tvalueProposal.setCompletion(javadocCompletion);", "+\t\t\t\t\t\tvalueProposal.setFlags(field.modifiers);", "+\t\t\t\t\t\tvalueProposal.setReplaceRange(start - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\tvalueProposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\tvalueProposal.setRelevance(relevance+R_VALUE_TAG);", "+\t\t\t\t\t\tthis.requestor.accept(valueProposal);", "+\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\tthis.printDebug(valueProposal);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif(!this.isIgnored(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, missingElements != null)) {", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setReceiverSignature(getSignature(receiverType));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tif (missingElements != null) {", "+\t\t\t\t\t\tCompletionProposal[] subProposals = new CompletionProposal[missingElements.length];", "+\t\t\t\t\t\tfor (int i = 0; i < missingElements.length; i++) {", "+\t\t\t\t\t\t\tsubProposals[i] =", "+\t\t\t\t\t\t\t\tcreateRequiredTypeProposal(", "+\t\t\t\t\t\t\t\t\t\tmissingElements[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsStarts[i],", "+\t\t\t\t\t\t\t\t\t\tmissingElementsEnds[i],", "+\t\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposal.setRequiredProposals(subProposals);", "+\t\t\t\t\t}", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setReceiverRange(receiverStart - this.offset, receiverEnd - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);"]}], "num": 56415}
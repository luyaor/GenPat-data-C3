{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e819914c975892f6254627074232626a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36666a476f357a75fc4f7c7f5744a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "a8929512097322e0441180b7a9eb3a250103fedb", "commitAfterChange": "428ee6cfc0b4c010dfca4624b6097930db0e92ad", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \tpublic static void writeToDisk(\r \t\tString outputPath,\r \t\tString relativeFileName,\r \t\tbyte[] contents)\r \t\tthrows IOException", "signatureAfterChange": "\r \tpublic static void writeToDisk(\r \t\tboolean generatePackagesStructure,\r \t\tString outputPath,\r \t\tString relativeFileName,\r \t\tbyte[] contents)\r \t\tthrows IOException", "diff": ["+\t\tboolean generatePackagesStructure,\r", "-\t\tBufferedOutputStream output = new BufferedOutputStream(\r", "-\t\t\tnew FileOutputStream(\r", "-\t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));\r", "+\t\tBufferedOutputStream output = null;\r", "+\t\tif (generatePackagesStructure) {\r", "+\t\t\toutput = new BufferedOutputStream(\r", "+\t\t\t\tnew FileOutputStream(\r", "+\t\t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));\r", "+\t\t} else {\r", "+\t\t\tString fileName = null;\r", "+\t\t\tchar fileSeparatorChar = File.separatorChar;\r", "+\t\t\tString fileSeparator = File.separator;\r", "+\t\t\t// First we ensure that the outputPath exists\r", "+\t\t\toutputPath = outputPath.replace('/', fileSeparatorChar);\r", "+\t\t\t// To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name\r", "+\t\t\tint indexOfPackageSeparator = relativeFileName.lastIndexOf(fileSeparatorChar);\r", "+\t\t\tif (indexOfPackageSeparator == -1) {\r", "+\t\t\t\tif (outputPath.endsWith(fileSeparator)) {\r", "+\t\t\t\t\tfileName = outputPath + relativeFileName;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tint length = relativeFileName.length();\r", "+\t\t\t\tif (outputPath.endsWith(fileSeparator)) {\r", "+\t\t\t\t\tfileName = outputPath + relativeFileName.substring(indexOfPackageSeparator + 1, length);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName.substring(indexOfPackageSeparator + 1, length);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\toutput = new BufferedOutputStream(\r", "+\t\t\t\tnew FileOutputStream(\r", "+\t\t\t\t\t\tnew File(fileName)));\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7a0299b9588882dadd706e1a765531b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "535178e6ff3c7be5f5cdc90d8a470557840e3a3e", "commitAfterChange": "cdbb23d25684170107e611f9ad2770f482d2dd3b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void writeToDisk( \t\tboolean generatePackagesStructure, \t\tString outputPath, \t\tString relativeFileName, \t\tClassFile classFile) \t\tthrows IOException", "signatureAfterChange": " \tpublic static void writeToDisk( \t\tboolean generatePackagesStructure, \t\tString outputPath, \t\tString relativeFileName, \t\tClassFile classFile) throws IOException", "diff": ["-\t\tClassFile classFile)", "-\t\tthrows IOException {", "+\t\tClassFile classFile) throws IOException {", "-\t\tif (generatePackagesStructure) {", "-\t\t\toutput = new BufferedOutputStream(", "-\t\t\t\tnew FileOutputStream(", "-\t\t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));", "-\t\t} else {", "-\t\t\tString fileName = null;", "-\t\t\tchar fileSeparatorChar = File.separatorChar;", "-\t\t\tString fileSeparator = File.separator;", "-\t\t\t// First we ensure that the outputPath exists", "-\t\t\toutputPath = outputPath.replace('/', fileSeparatorChar);", "-\t\t\t// To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name", "-\t\t\tint indexOfPackageSeparator = relativeFileName.lastIndexOf(fileSeparatorChar);", "-\t\t\tif (indexOfPackageSeparator == -1) {", "-\t\t\t\tif (outputPath.endsWith(fileSeparator)) {", "-\t\t\t\t\tfileName = outputPath + relativeFileName;", "-\t\t\t\t} else {", "-\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tint length = relativeFileName.length();", "-\t\t\t\tif (outputPath.endsWith(fileSeparator)) {", "-\t\t\t\t\tfileName = outputPath + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "-\t\t\t\t} else {", "-\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\toutput = new BufferedOutputStream(", "-\t\t\t\tnew FileOutputStream(", "-\t\t\t\t\t\tnew File(fileName)));", "-\t\t}", "+    \tif (generatePackagesStructure) {", "+    \t\toutput = new BufferedOutputStream(", "+    \t\t\tnew FileOutputStream(", "+    \t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));", "+    \t} else {", "+    \t\tString fileName = null;", "+    \t\tchar fileSeparatorChar = File.separatorChar;", "+    \t\tString fileSeparator = File.separator;", "+    \t\t// First we ensure that the outputPath exists", "+    \t\toutputPath = outputPath.replace('/', fileSeparatorChar);", "+    \t\t// To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name", "+    \t\tint indexOfPackageSeparator = relativeFileName.lastIndexOf(fileSeparatorChar);", "+    \t\tif (indexOfPackageSeparator == -1) {", "+    \t\t\tif (outputPath.endsWith(fileSeparator)) {", "+    \t\t\t\tfileName = outputPath + relativeFileName;", "+    \t\t\t} else {", "+    \t\t\t\tfileName = outputPath + fileSeparator + relativeFileName;", "+    \t\t\t}", "+    \t\t} else {", "+    \t\t\tint length = relativeFileName.length();", "+    \t\t\tif (outputPath.endsWith(fileSeparator)) {", "+    \t\t\t\tfileName = outputPath + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "+    \t\t\t} else {", "+    \t\t\t\tfileName = outputPath + fileSeparator + relativeFileName.substring(indexOfPackageSeparator + 1, length);", "+    \t\t\t}", "+    \t\t}", "+    \t\toutput = new BufferedOutputStream(", "+    \t\t\tnew FileOutputStream(", "+    \t\t\t\t\tnew File(fileName)));", "+    \t}", "+\t\t\t// if no IOException occured, output cannot be null", "-\t\t} finally {", "+\t\t} catch(IOException e) {", "+\t\t\tthrow e;", "+\t\t} finally {"]}], "num": 1079}
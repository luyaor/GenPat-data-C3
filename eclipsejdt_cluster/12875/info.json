{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca99b6deaa1d7a1b6ad1e5ea3d527790", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6910e68e11b13e7d75b26fec4fe33f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean computeChildren(OpenableElementInfo info, IResource resource) throws JavaModelException", "signatureAfterChange": " protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["- */", "-protected boolean computeChildren(OpenableElementInfo info, IResource resource) throws JavaModelException {", "-\tArrayList vChildren = new ArrayList();", "-\tint kind = getKind();", "-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-\ttry {", "-\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "-\t\tIResource[] members = ((IContainer) resource).members();", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "-\tvChildren.toArray(children);", "-\tinfo.setChildren(children);", "-\treturn true;", "+", "+\tint kind = getKind();", "+\tString extType;", "+\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "+\t\textType = EXTENSION_java;", "+\t} else {", "+\t\textType = EXTENSION_class;", "+\t}", "+", "+\tArrayList vChildren = new ArrayList();", "+\ttry {", "+\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "+\t\tIResource[] members = ((IContainer) underlyingResource).members();", "+\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\t\tIResource child = members[i];", "+\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "+\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "+\t\t\t\tif (extension != null) {", "+\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "+\t\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} catch (CoreException e) {", "+\t\tthrow new JavaModelException(e);", "+\t}", "+\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "+\tvChildren.toArray(children);", "+\tinfo.setChildren(children);", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682ed777cba0da3473e115bc88eae4e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["+ */", "+protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+", "+\t// check whether this pkg can be opened", "+\tif (!underlyingResource.isAccessible()) throw newNotPresentException();", "+", "+\tint kind = getKind();", "+\tString extType;", "+\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "+\t\textType = EXTENSION_java;", "+\t} else {", "+\t\textType = EXTENSION_class;", "+\t}", "+", "+\tArrayList vChildren = new ArrayList();", "+\ttry {", "+\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "+\t\tIResource[] members = ((IContainer) underlyingResource).members();", "+\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\t\tIResource child = members[i];", "+\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "+\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "+\t\t\t\tif (extension != null) {", "+\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "+\t\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultCompilationUnitOwner.PRIMARY);", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "+\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} catch (CoreException e) {", "+\t\tthrow new JavaModelException(e);", "+\t}", "+\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "+\tvChildren.toArray(children);", "+\tinfo.setChildren(children);", "+\treturn true;", "- */", "-protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "-", "-\tint kind = getKind();", "-\tString extType;", "-\tif (kind == IPackageFragmentRoot.K_SOURCE) {", "-\t\textType = EXTENSION_java;", "-\t} else {", "-\t\textType = EXTENSION_class;", "-\t}", "-", "-\tArrayList vChildren = new ArrayList();", "-\ttry {", "-\t\tchar[][] exclusionPatterns = ((PackageFragmentRoot)getPackageFragmentRoot()).fullExclusionPatternChars();", "-\t\tIResource[] members = ((IContainer) underlyingResource).members();", "-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, exclusionPatterns)) {", "-\t\t\t\tString extension = child.getProjectRelativePath().getFileExtension();", "-\t\t\t\tif (extension != null) {", "-\t\t\t\t\tif (extension.equalsIgnoreCase(extType)) {", "-\t\t\t\t\t\tIJavaElement childElement;", "-\t\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getCompilationUnit(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t} else if (Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);", "-\t}", "-\tIJavaElement[] children = new IJavaElement[vChildren.size()];", "-\tvChildren.toArray(children);", "-\tinfo.setChildren(children);", "-\treturn true;"]}], "num": 12875}
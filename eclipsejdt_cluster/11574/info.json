{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdf7e80968d91f6d252d14845cebba11", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdddb0125da8f7510fbc423cf3ba486", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testFactoryPathEncodingAndDecoding() throws Exception", "signatureAfterChange": " \t \tpublic void testFactoryPathEncodingAndDecoding() throws Exception", "diff": ["-\t\tMap<FactoryContainer, Boolean> factories = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tFactoryContainer jarFactory = FactoryPath.newExtJarFactoryContainer(new File(\"C:/test.jar\")); //$NON-NLS-1$", "-\t\tFactoryContainer pluginFactory = FactoryPath.getPluginFactoryContainer(\"org.eclipse.jdt.apt.tests\"); //$NON-NLS-1$", "-\t\tfactories.put(jarFactory, true);", "-\t\tfactories.put(pluginFactory, false);", "+\t\tMap<FactoryContainer, FactoryPath.Attributes> factories = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\t\tFactoryContainer jarFactory1 = FactoryPathUtil.newExtJarFactoryContainer(new File(\"C:/test1.jar\")); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes jarFPA1 = new FactoryPath.Attributes(true, false);", "+\t\tFactoryContainer jarFactory2 = FactoryPathUtil.newExtJarFactoryContainer(new File(\"C:/test2.jar\")); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes jarFPA2 = new FactoryPath.Attributes(true, true);", "+\t\tFactoryContainer pluginFactory = FactoryPathUtil.getPluginFactoryContainer(\"org.eclipse.jdt.apt.tests\"); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes pluginFPA = new FactoryPath.Attributes(false, false);", "+\t\tfactories.put(jarFactory1, jarFPA1);", "+\t\tfactories.put(jarFactory2, jarFPA2);", "+\t\tfactories.put(pluginFactory, pluginFPA);", "-\t\tassertEquals(2, factories.size());", "+\t\tassertEquals(3, factories.size());", "-\t\tfor (Map.Entry<FactoryContainer, Boolean> entry : factories.entrySet()) {", "+\t\tfor (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : factories.entrySet()) {", "-\t\t\tif (index == 0) {", "-\t\t\t\t// jar", "+\t\t\tswitch (index) {", "+\t\t\tcase 0:", "+\t\t\t\t// jar1", "-\t\t\t\tassertEquals(Boolean.TRUE, entry.getValue());", "-\t\t\t}", "-\t\t\telse {", "+\t\t\t\tassertTrue(entry.getValue().isEnabled());", "+\t\t\t\tassertFalse(entry.getValue().runInBatchMode());", "+\t\t\t\tbreak;", "+\t\t\tcase 1:", "+\t\t\t\t// jar2", "+\t\t\t\tassertEquals(FactoryType.EXTJAR, container.getType());", "+\t\t\t\tassertTrue(entry.getValue().isEnabled());", "+\t\t\t\tassertTrue(entry.getValue().runInBatchMode());", "+\t\t\t\tbreak;", "+\t\t\tcase 2:", "-\t\t\t\tassertEquals(Boolean.FALSE, entry.getValue());", "+\t\t\t\tassertFalse(entry.getValue().isEnabled());", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tfail(\"FactoryPath had an unexpected number of entries: \" + (index + 1));", "-\t\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b081e59b4483d9bef035c0c34fb543e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate static void updatePluginContainers( \t\t\tMap<FactoryContainer, Boolean> containers, boolean disableNewPlugins)", "signatureAfterChange": " \tprivate static void updatePluginContainers( \t\t\tMap<FactoryContainer, FactoryPath.Attributes> path, boolean disableNewPlugins)", "diff": ["-\t\t\tMap<FactoryContainer, Boolean> containers, boolean disableNewPlugins) {", "-\t\tMap<FactoryContainer, Boolean> pluginContainers = getAllPluginFactoryContainers();", "+\t\t\tMap<FactoryContainer, FactoryPath.Attributes> path, boolean disableNewPlugins) {", "-\t\t// Remove any plugin factories whose plugins we did not find", "-\t\tfor (Iterator<FactoryContainer> containerIter = containers.keySet().iterator(); containerIter.hasNext(); ) {", "-\t\t\tFactoryContainer container = containerIter.next();", "-\t\t\tif (container.getType() == FactoryType.PLUGIN && !pluginContainers.containsKey(container)) {", "-\t\t\t\tcontainerIter.remove();", "+\t\t// Get the alphabetically-ordered list of all plugins we found at startup.", "+\t\tMap<FactoryContainer, FactoryPath.Attributes> pluginContainers = getAllPluginFactoryContainers();", "+\t\t", "+\t\t// Remove from the path any plugins which we did not find at startup", "+\t\tfor (Iterator<FactoryContainer> i = path.keySet().iterator(); i.hasNext(); ) {", "+\t\t\tFactoryContainer fc = i.next();", "+\t\t\tif (fc.getType() == FactoryContainer.FactoryType.PLUGIN && !pluginContainers.containsKey(fc)) {", "+\t\t\t\ti.remove();", "-\t\t// Add any plugins which are new since the config was last saved", "-\t\tfor (Map.Entry<FactoryContainer, Boolean> entry : pluginContainers.entrySet()) {", "-\t\t\tif (!containers.containsKey(entry.getKey())) {", "-\t\t\t\tcontainers.put(entry.getKey(), disableNewPlugins ? Boolean.FALSE : entry.getValue());", "+\t\t// Add to the end any plugins which are not in the path (i.e., which", "+\t\t// have been discovered since the config was last saved)", "+\t\tfor (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : pluginContainers.entrySet()) {", "+\t\t\tif (!path.containsKey(entry.getKey())) {", "+\t\t\t\tFactoryPath.Attributes newAttr;", "+\t\t\t\tFactoryPath.Attributes oldAttr = entry.getValue();", "+\t\t\t\tif (disableNewPlugins) {", "+\t\t\t\t\tnewAttr = new FactoryPath.Attributes(false, oldAttr.runInBatchMode());", "+\t\t\t\t} else {", "+\t\t\t\t\tnewAttr = oldAttr;", "+\t\t\t\t}", "+\t\t\t\tpath.put(entry.getKey(), newAttr);"]}], "num": 11574}
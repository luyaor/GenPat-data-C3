{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c84dabb8887082c057e043233f31445", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c071de6edd933380cf1335d0f6adc661", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "948661c4cb198af70b598b9954e5159cb73d7234", "commitAfterChange": "b1348e3d0230a581c7eb25acd6ec072853b12bb0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint[] accuracies,\r \t\tboolean accuracyStartsOnFirstToken)\r \t\tthrows CoreException", "diff": ["+\t */\r", "+\tpublic void reportAccurateReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] qualifiedName,\r", "+\t\tIJavaElement element,\r", "+\t\tint[] accuracies,\r", "+\t\tboolean accuracyStartsOnFirstToken)\r", "+\t\tint accuracyIndex = 0;\r", "+\t\t\t\tboolean equals = false;\r", "-\t\t\t\t\t&& !CharOperation.equals(currentTokenSource, qualifiedName[i++])) {\r", "+\t\t\t\t\t&& !(equals = this.pattern.matchesName(qualifiedName[i++], currentTokenSource))) {\r", "-\t\t\t\tif (CharOperation.equals(currentTokenSource, qualifiedName[i - 1])\r", "-\t\t\t\t\t&& (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {\r", "-\t\t}\r", "-\t\twhile (token != TerminalSymbols.TokenNameEOF && i < tokenNumber);\r", "+\t\t\tif (i == tokenNumber) {\r", "+\t\t\t\tif (accuracies[accuracyIndex] != -1) {\r", "+\t\t\t\t\t// accept reference\r", "+\t\t\t\t\tif (refSourceStart != -1) {\r", "+\t\t\t\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracies[accuracyIndex]);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tthis.report(sourceStart, sourceEnd, element, accuracies[accuracyIndex]);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ti = 0;\r", "+\t\t\t\t\trefSourceStart = -1;\r", "+\t\t\t\t\tpreviousValid = -1;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (accuracyStartsOnFirstToken) {\r", "+\t\t\t\taccuracyIndex++;\r", "+\t\t\t}\r", "+\t\t} while (token != TerminalSymbols.TokenNameEOF && accuracyIndex < accuracies.length);\r", "-\t\t// accept reference\r", "-\t\tif (refSourceStart != -1) {\r", "-\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);\r", "-\t\t} else {\r", "-\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);\r", "-\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9b20e0b1dfc03ac282bc72ef1bdfa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\t\tboolean hasTokens = false;", "+\t\t\tboolean textOnNewLine = needIndentation;", "+\t    \t\tint tokensBufferLength = tokensBuffer.length();", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\t\t\thasTokens = true;", "+\t\t\t\t\t\tif (tokensBufferLength > 0) {", "+\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttextOnNewLine = false;", "-\t    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+\t    \t\tint lastColumn = this.column + tokensBufferLength + tokenLength;", "-\t    \t\t\t\tthis.lastNumberOfNewLines++; // in case we leave just after", "+\t    \t\t\t\tthis.lastNumberOfNewLines++; // the javadoc will become multi lines", "-\t\t\t\tif (lastColumn > maxColumn) {", "+\t\t\t\tif (lastColumn > maxColumn && token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@')) {", "-\t\t\t\t\tboolean alreadyHasNewLine = !hasTokens && tokensBuffer.length() > 0 && firstText && !isHtmlTag && this.lastNumberOfNewLines > 0;", "-\t\t\t\t\tif (!alreadyHasNewLine) {", "-\t\t\t\t\t\tif (lastColumn == this.column) {", "+\t\t\t\t\tif (!isHtmlTag && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "+\t\t\t\t\t\t// there won't be enough room even if we break the line before the buffered tokens", "+\t\t\t\t\t\t// So add the buffered tokens now", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\ttokensBufferLength = 0;", "+\t\t\t\t\t\ttextOnNewLine = false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!textOnNewLine) {", "+\t\t\t\t\t\tif (headerLine && lastColumn == this.column) {", "-\t\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t\t    \tif (tokensBufferLength > 0) {", "+\t\t\t\t\t\ttokensBufferLength = 0;", "-\t\t\t\t\thasTokens = true;", "+\t\t\t\t\ttextOnNewLine = false;"]}], "num": 62323}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18fe7281891d1c5b6d9b8c31255980f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08d40cc445a0de3befa4ac3b3921f53d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "9efbe5554ac761a85464c2e1f07f87b5f5dd57eb", "commitAfterChange": "5af59e31692f51bf5a400460066038f2e641aee5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\t// if generic type X<T> is referred to as parameterized X<T>, then answer itself", "-\t\tcheckGeneric: {", "-\t\t    for (int i = 0; i < argLength; i++)", "-\t\t\t\tif (typeVariables[i] != argTypes[i])", "-\t\t\t\t    break checkGeneric;", "-\t\t\treturn currentType;", "-\t\t}", "-\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, enclosingType);", "-\t\t// check argument type compatibility", "-\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "-\t\t\tfor (int i = 0; i < argLength; i++)", "-\t\t\t    if (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "-\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "-\t\tthis.resolvedType = parameterizedType;", "-\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "-\t\t\treportDeprecatedType(scope);", "+\t\t// if generic type X<T> is referred to as parameterized X<T>, then answer itself", "+\t\tboolean allEqual = true;", "+\t    for (int i = 0; allEqual && i < argLength; i++)", "+\t\t\tallEqual = typeVariables[i] == argTypes[i];", "+\t    if (!allEqual) {", "+\t    \tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, enclosingType);", "+\t\t\t// check argument type compatibility", "+\t\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution", "+\t\t\t\tfor (int i = 0; i < argLength; i++)", "+\t\t\t\t    if (!typeVariables[i].boundCheck(parameterizedType, argTypes[i]))", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[i], typeVariables[i], currentType, this.typeArguments[i]);", "+\t", "+\t\t\tthis.resolvedType = parameterizedType;", "+\t\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "+\t\t\t\treportDeprecatedType(scope);", "+\t\t}", "-\t\t\tthis.resolvedType = scope.createArrayType(parameterizedType, dimensions);", "+\t\t\tthis.resolvedType = scope.createArrayType(this.resolvedType, dimensions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf8642ddb9b16d56c51b67307580c471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \t \tprivate void generateTypeAnnotation(AnnotationContext annotationContext, int currentOffset)", "signatureAfterChange": " \t \tprivate void generateTypeAnnotation(AnnotationContext annotationContext, int currentOffset)", "diff": ["-\t\tif (annotationContext.wildcard != null) {", "-\t\t\tgenerateWildcardTypeAnnotation(annotationContext, currentOffset);", "+\t\tAnnotation annotation = annotationContext.annotation.getPersistibleAnnotation();", "+\t\tif (annotation == null || annotation.resolvedType == null)", "-\t\t}", "-\t\t", "-\t\t// common part between type annotation and annotation", "-\t\tgenerateAnnotation(annotationContext.annotation, currentOffset);", "+\t\tgenerateAnnotation(annotation, currentOffset);"]}], "num": 31417}
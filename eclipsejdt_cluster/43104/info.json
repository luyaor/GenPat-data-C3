{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa044397506c0620e268c87821bb87f9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e65c62f0e1517d87e6dd35ec91005ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAnnotationProcessorManager.java", "commitBeforeChange": "600d3eda20c6510ad5218c514ac30249f7b449a9", "commitAfterChange": "f3c706bfa8df1589d5835736528d83fcc35878b8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic ProcessorInfo discoverNextProcessor()", "signatureAfterChange": "  \t@Override \tpublic ProcessorInfo discoverNextProcessor()", "diff": ["+\t\t\t\tif (_printProcessorDiscovery && null != _out) {", "+\t\t\t\t\t_out.println(\"API specified processor: \" + pi); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\t\tif (_printProcessorDiscovery && null != _out) {", "+\t\t\t\t\t\t_out.println(\"Command line specified processor: \" + pi); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\tif (_printProcessorDiscovery && null != _out) {", "+\t\t\t\t\tStringBuilder sb = new StringBuilder();", "+\t\t\t\t\tsb.append(\"Discovered processor service \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(pi);", "+\t\t\t\t\tsb.append(\"\\n  supporting \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(pi.getSupportedAnnotationTypesAsString());", "+\t\t\t\t\tsb.append(\"\\n  in \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(getProcessorLocation(p));", "+\t\t\t\t\t_out.println(sb.toString());", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dad9b5ddfff634d6550d26058ff2887", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundDispatcher.java", "commitBeforeChange": "600d3eda20c6510ad5218c514ac30249f7b449a9", "commitAfterChange": "f3c706bfa8df1589d5835736528d83fcc35878b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void handleProcessor(ProcessorInfo pi)", "signatureAfterChange": " \tprivate void handleProcessor(ProcessorInfo pi)", "diff": ["-\t\t\t\tif (pi._processor.process(annotationsToProcess, _roundEnv)) {", "+\t\t\t\tboolean claimed = pi._processor.process(annotationsToProcess, _roundEnv);", "+\t\t\t\tif (null != _traceProcessorInfo && !_roundEnv.processingOver()) {", "+\t\t\t\t\tStringBuilder sb = new StringBuilder();", "+\t\t\t\t\tsb.append(\"Processor \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(pi._processor.getClass().getName());", "+\t\t\t\t\tsb.append(\" matches [\"); //$NON-NLS-1$", "+\t\t\t\t\tIterator<TypeElement> i = annotationsToProcess.iterator();", "+\t\t\t\t\tboolean hasNext = i.hasNext();", "+\t\t\t\t\twhile (hasNext) {", "+\t\t\t\t\t\tsb.append(i.next());", "+\t\t\t\t\t\thasNext = i.hasNext();", "+\t\t\t\t\t\tif (hasNext) {", "+\t\t\t\t\t\t\tsb.append(' ');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tsb.append(\"] and returns \"); //$NON-NLS-1$", "+\t\t\t\t\tsb.append(claimed);", "+\t\t\t\t\t_traceProcessorInfo.println(sb.toString());", "+\t\t\t\t}", "+\t\t\t\tif (claimed) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a413f1aa6b5edb163cf212720a6aab70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundDispatcher.java", "commitBeforeChange": "600d3eda20c6510ad5218c514ac30249f7b449a9", "commitAfterChange": "f3c706bfa8df1589d5835736528d83fcc35878b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void round()", "signatureAfterChange": " \tpublic void round()", "diff": ["+\t\tif (null != _traceRounds) {", "+\t\t\tStringBuilder sbElements = new StringBuilder();", "+\t\t\tsbElements.append(\"\\tinput files: {\"); //$NON-NLS-1$", "+\t\t\tIterator<? extends Element> iElements = _roundEnv.getRootElements().iterator();", "+\t\t\tboolean hasNext = iElements.hasNext();", "+\t\t\twhile (hasNext) {", "+\t\t\t\tsbElements.append(iElements.next());", "+\t\t\t\thasNext = iElements.hasNext();", "+\t\t\t\tif (hasNext) {", "+\t\t\t\t\tsbElements.append(',');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tsbElements.append('}');", "+\t\t\t_traceRounds.println(sbElements.toString());", "+\t\t\t", "+\t\t\tStringBuilder sbAnnots = new StringBuilder();", "+\t\t\tsbAnnots.append(\"\\tannotations: [\"); //$NON-NLS-1$", "+\t\t\tIterator<TypeElement> iAnnots = _unclaimedAnnotations.iterator();", "+\t\t\thasNext = iAnnots.hasNext();", "+\t\t\twhile (hasNext) {", "+\t\t\t\tsbAnnots.append(iAnnots.next());", "+\t\t\t\thasNext = iAnnots.hasNext();", "+\t\t\t\tif (hasNext) {", "+\t\t\t\t\tsbAnnots.append(',');", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tsbAnnots.append(']');", "+\t\t\t_traceRounds.println(sbAnnots.toString());", "+\t\t\t", "+\t\t\t_traceRounds.println(\"\\tlast round: \" + _roundEnv.processingOver()); //$NON-NLS-1$", "+\t\t}", "+\t\t"]}], "num": 43104}
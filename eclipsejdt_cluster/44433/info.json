{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb581181e612e2960f01aa8ac4fbc52a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b564f5c4d5098ac8234c06eceba67852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "7086675b9016b36eb3327ff794af3728a774a189", "commitAfterChange": "08be90368f9af9d6750464056e901efd458851a8", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tbuffer.append(this.focusType == null ? \"<NONE>\" : ((JavaElement)this.focusType).toStringWithAncestors(false/*don't show key*/)); //$NON-NLS-1$", "-\tbuffer.append(\"\\n\"); //$NON-NLS-1$", "+\tif (this.focusType == null) {", "+\t\tbuffer.append(\"<NONE>\\n\"); //$NON-NLS-1$", "+\t} else {", "+\t\ttoString(buffer, this.focusType, 0);", "+\t}", "-\t\t\ttoString(buffer, this.focusType, 1, true);", "+\t\t\ttoString(buffer, this.focusType, 0, true);", "-\t\t\ttoString(buffer, this.focusType, 1, false);", "+\t\t\ttoString(buffer, this.focusType, 0, false);", "-\t\t\tbuffer.append(\"Sub types of root classes:\\n\"); //$NON-NLS-1$", "-\t\t\tIJavaElement[] roots = Util.sortCopy(getRootClasses());", "-\t\t\tfor (int i= 0; i < roots.length; i++) {", "-\t\t\t\ttoString(buffer, (IType) roots[i], 1, false);", "+\t\t\tif (this.rootClasses.size > 0) {", "+\t\t\t\tIJavaElement[] roots = Util.sortCopy(getRootClasses());", "+\t\t\t\tbuffer.append(\"Super types of root classes:\\n\"); //$NON-NLS-1$", "+\t\t\t\tint length = roots.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIJavaElement root = roots[i];", "+\t\t\t\t\ttoString(buffer, root, 1);", "+\t\t\t\t\ttoString(buffer, root, 1, true);", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(\"Sub types of root classes:\\n\"); //$NON-NLS-1$", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIJavaElement root = roots[i];", "+\t\t\t\t\ttoString(buffer, root, 1);", "+\t\t\t\t\ttoString(buffer, root, 1, false);", "+\t\t\t\t}", "+\t\t\t} else if (this.rootClasses.size == 0) {", "+\t\t\t\t// see http://bugs.eclipse.org/bugs/show_bug.cgi?id=24691", "+\t\t\t\tbuffer.append(\"No root classes\"); //$NON-NLS-1$", "-\t\t}", "-\t\tif (this.rootClasses.size > 1) {", "-\t\t\tbuffer.append(\"Root classes:\\n\"); //$NON-NLS-1$", "-\t\t\tIJavaElement[] roots = Util.sortCopy(getRootClasses());", "-\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "-\t\t\t\ttoString(buffer, (IType) roots[i], 1, false);", "-\t\t\t}", "-\t\t} else if (this.rootClasses.size == 0) {", "-\t\t\t// see http://bugs.eclipse.org/bugs/show_bug.cgi?id=24691", "-\t\t\tbuffer.append(\"No root classes\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e24c383b052d863b42a49225e19c0562", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic String individualToString()", "signatureAfterChange": "  public String individualToString()", "diff": ["-\tpublic String individualToString() {", "-\t\t", "-\t\tStringBuffer buffer = new StringBuffer(\"Exception flow context\"); //$NON-NLS-1$", "-\t\tint length = handledExceptions.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tint cacheIndex = i / BitCacheSize;", "-\t\t\tint bitMask = 1 << (i % BitCacheSize);", "-\t\t\tbuffer.append('[').append(handledExceptions[i].readableName());", "-\t\t\tif ((isReached[cacheIndex] & bitMask) != 0) {", "-\t\t\t\tif ((isNeeded[cacheIndex] & bitMask) == 0) {", "-\t\t\t\t\tbuffer.append(\"-masked\"); //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(\"-reached\"); //$NON-NLS-1$", "-\t\t\t\t}", "+public String individualToString() {", "+\tStringBuffer buffer = new StringBuffer(\"Exception flow context\"); //$NON-NLS-1$", "+\tint length = this.handledExceptions.length;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tint cacheIndex = i / ExceptionHandlingFlowContext.BitCacheSize;", "+\t\tint bitMask = 1 << (i % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tbuffer.append('[').append(this.handledExceptions[i].readableName());", "+\t\tif ((this.isReached[cacheIndex] & bitMask) != 0) {", "+\t\t\tif ((this.isNeeded[cacheIndex] & bitMask) == 0) {", "+\t\t\t\tbuffer.append(\"-masked\"); //$NON-NLS-1$", "-\t\t\t\tbuffer.append(\"-not reached\"); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(\"-reached\"); //$NON-NLS-1$", "-\t\t\tbuffer.append('-').append(initsOnExceptions[i].toString()).append(']');", "+\t\t} else {", "+\t\t\tbuffer.append(\"-not reached\"); //$NON-NLS-1$", "-\t\tbuffer.append(\"[initsOnReturn -\").append(initsOnReturn.toString()).append(']'); //$NON-NLS-1$", "-\t\treturn buffer.toString();", "+\t\tbuffer.append('-').append(this.initsOnExceptions[i].toString()).append(']');", "+\tbuffer.append(\"[initsOnReturn -\").append(this.initsOnReturn.toString()).append(']'); //$NON-NLS-1$", "+\treturn buffer.toString();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb4eb539554ef1d1d00852643561d3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic String toString()", "signatureAfterChange": "  public String toString()", "diff": ["-\t", "-\tpublic String toString(){", "-", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tif (this.fileName != null){", "-\t\t\tbuffer.append(\"Filename : \").append(this.fileName).append('\\n'); //$NON-NLS-1$", "-\t\t}", "-\t\tif (this.compiledTypes != null){", "-\t\t\tbuffer.append(\"COMPILED type(s)\t\\n\");  //$NON-NLS-1$", "-\t\t\tIterator keys = this.compiledTypes.keySet().iterator();", "-\t\t\twhile (keys.hasNext()) {", "-\t\t\t\tchar[] typeName = (char[]) keys.next();", "-\t\t\t\tbuffer.append(\"\\t - \").append(typeName).append('\\n');   //$NON-NLS-1$", "-\t\t\t\t", "-\t\t\tbuffer.append(\"No COMPILED type\\n\");  //$NON-NLS-1$", "-\t\t}", "-\t\tif (problems != null){", "-\t\t\tbuffer.append(this.problemCount).append(\" PROBLEM(s) detected \\n\"); //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < this.problemCount; i++){", "-\t\t\t\tbuffer.append(\"\\t - \").append(this.problems[i]).append('\\n'); //$NON-NLS-1$", "-\t\t} else {", "-\t\t\tbuffer.append(\"No PROBLEM\\n\"); //$NON-NLS-1$", "-\t\t} ", "-\t\treturn buffer.toString();", "+", "+public String toString(){", "+\tStringBuffer buffer = new StringBuffer();", "+\tif (this.fileName != null){", "+\t\tbuffer.append(\"Filename : \").append(this.fileName).append('\\n'); //$NON-NLS-1$", "+\t}", "+\tif (this.compiledTypes != null){", "+\t\tbuffer.append(\"COMPILED type(s)\t\\n\");  //$NON-NLS-1$", "+\t\tIterator keys = this.compiledTypes.keySet().iterator();", "+\t\twhile (keys.hasNext()) {", "+\t\t\tchar[] typeName = (char[]) keys.next();", "+\t\t\tbuffer.append(\"\\t - \").append(typeName).append('\\n');   //$NON-NLS-1$", "+\t\t\t", "+\t\t}", "+\t} else {", "+\t\tbuffer.append(\"No COMPILED type\\n\");  //$NON-NLS-1$", "+\t}", "+\tif (this.problems != null){", "+\t\tbuffer.append(this.problemCount).append(\" PROBLEM(s) detected \\n\"); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < this.problemCount; i++){", "+\t\t\tbuffer.append(\"\\t - \").append(this.problems[i]).append('\\n'); //$NON-NLS-1$", "+\t\t}", "+\t} else {", "+\t\tbuffer.append(\"No PROBLEM\\n\"); //$NON-NLS-1$", "+\t} ", "+\treturn buffer.toString();", "+}"]}], "num": 44433}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec1313a5469a0c0521b9f13abb416e65", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4986359b7779511ec92b2f45b4c23544", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "eead3352ceb339c6e7d1c285e537cdff0d79d4a6", "commitAfterChange": "939b7ac964d1a6475bfe424174f01e41241efab3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) { //an eof will them be generated", "-\t\t\t\t\t\t\t\tif (tokenizeComments) {", "-\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "+\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t\t\t\t\t\tif (strictCommentMode) {", "+\t\t\t\t\t\t\t\t\t// a line comment needs to be followed by a line break to be valid", "+\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_COMMENT);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\trecordComment(false);", "+\t\t\t\t\t\t\t\t\tif (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition-1);", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // reset one character behind", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e7e6ee418b888c1a463a4725e50708", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "eead3352ceb339c6e7d1c285e537cdff0d79d4a6", "commitAfterChange": "939b7ac964d1a6475bfe424174f01e41241efab3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t * a line comment needs to be followed by a line break to be valid\r\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_COMMENT);", "+\t\t\t\t\t\t\t\tif (strictCommentMode) {", "+\t\t\t\t\t\t\t\t\t// a line comment needs to be followed by a line break to be valid", "+\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_COMMENT);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\trecordComment(false);", "+\t\t\t\t\t\t\t\t\tif (this.taskTags != null) checkTaskTag(this.startPosition, this.currentPosition-1);", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {", "+\t\t\t\t\t\t\t\t\t\tthis.currentPosition--; // reset one character behind", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}"]}], "num": 57555}
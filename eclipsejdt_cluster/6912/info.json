{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6082c58597c2b9d7f3e0a22f0c067947", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "036246b11583f3898db98180f14677b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean ensureGeneratedSourceFolder()", "signatureAfterChange": " \tpublic void enabledPreferenceChanged()", "diff": ["-\tprivate boolean ensureGeneratedSourceFolder(){", "-\t\t", "-\t\tboolean reset = false;", "-\t\tIFolder curSrcFolder = null;", "-\t", "-\t\t// Determine current state of affairs, with respect to", "-\t\t// folder, folder name, and classpath.", "-\t\tsynchronized( this )", "-\t\t{", "-\t\t\tif( _generatedSourceFolder != null ){", "-\t\t\t\tfinal IPath srcFolderPath = _generatedSourceFolder.getProjectRelativePath();", "-\t\t\t\t", "-\t\t\t\tif( !_generatedSourceFolderName.equals( srcFolderPath.toString()) ){", "-\t\t\t\t\t// Folder name has been changed!  Save the current folder so we can clear it out later.", "-\t\t\t\t\treset = true;", "-\t\t\t\t\tcurSrcFolder = _generatedSourceFolder;", "-\t\t\t\t\t_generatedSourceFolder = null;", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\t// Folder name and folder are in sync.  Check that folder is on classpath.", "-\t\t\t\t\t", "-\t\t\t\t\t// If the folder doesn't exist on disk, there is no point examining the classpath.", "-\t\t\t\t\ttry{", "-\t\t\t\t\t\t_generatedSourceFolder.refreshLocal( IResource.DEPTH_INFINITE, null );", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch(CoreException ce){", "-\t\t\t\t\t\tAptPlugin.log(ce, \"Failure during refreshLocal on \" + srcFolderPath); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!_generatedSourceFolder.exists()) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIJavaProject jp = _aptProject.getJavaProject();", "-\t\t\t\t\t\tIClasspathEntry[] cp = jp.getRawClasspath();", "-\t\t\t\t\t\tIPath path = _generatedSourceFolder.getFullPath();", "-\t\t\t\t\t\tif (ClasspathUtil.isProjectClassPathUpToDate(jp, cp, path, null)) {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\t\t\tAptPlugin.log(jme, \"Failure examining the classpath\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tIFolder srcFolder = null;", "-\t\ttry{", "-\t\t\tif( reset ){", "-\t\t\t\t// Folder name was out of sync with folder.  Delete the old folder and classpath entry.", "-\t\t\t\tClasspathUtil.removeFromProjectClasspath(_aptProject.getJavaProject(), curSrcFolder, null );", "-\t\t\t\tif ( curSrcFolder.exists() ){", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"deleting gen src dir \" + curSrcFolder.getName() ); //$NON-NLS-1$", "-\t\t\t\t\tcurSrcFolder.delete( true, false, null );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tsrcFolder = getFolder();", "-\t\t\t\t", "-\t\t\t//", "-\t\t\t// make sure __generated_src dir is on the cp if not already", "-\t\t\t//", "-\t\t\tClasspathUtil.updateProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );", "-\t\t\t", "-\t\t\tif(AptPlugin.DEBUG)", "-\t\t\t\tAptPlugin.trace(\"Added directory \" + srcFolder.getName() + \" and updated classpath\" ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tcatch(CoreException e){\t\t\t\t\t\t", "-\t\t\tAptPlugin.log(e, \"Failed to create generated source directory\"); //$NON-NLS-1$", "-\t\t\treturn false;", "+\t */", "+\tpublic void enabledPreferenceChanged()", "+\t{", "+\t\tfinal boolean enable = AptConfig.isEnabled(_aptProject.getJavaProject());", "+\t\t// Short-circuit if nothing changed.", "+\t\tif (enable == (_generatedSourceFolder != null)) {", "+\t\t\tif( AptPlugin.DEBUG ) {", "+\t\t\t\tAptPlugin.trace(\"enabledChanged() doing nothing; state is already \" + enable); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t// no change in state", "+\t\t\treturn;", "-\t\tsynchronized ( this )", "-\t\t{", "-\t\t\t_generatedSourceFolder = srcFolder;", "-\t\t\treturn true;", "+\t\tif ( AptPlugin.DEBUG ) {", "+\t\t\tAptPlugin.trace(\"enabledChanged() changing state to \" + enable +  //$NON-NLS-1$", "+\t\t\t\t\t\" for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "+\t\t}", "+\t\tif( enable ) {", "+\t\t\tconfigure();", "+\t\t} ", "+\t\telse {", "+\t\t\tremoveFolder();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad765ce51fefe9cf0d9d457c741113d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic boolean deleteGeneratedFile(IFile generatedFile, IFile parentFile, IProgressMonitor progressMonitor ) \t\tthrows CoreException", "signatureAfterChange": " \tprivate void deletePhysicalFile(IFile file)", "diff": ["-\t */", "-\tpublic boolean deleteGeneratedFile(IFile generatedFile, IFile parentFile, IProgressMonitor progressMonitor )", "-\t\tthrows CoreException", "-\t{", "-\t\tremoveFromFileMaps( generatedFile, parentFile );", "-\t\t", "-\t\tboolean delete = false;", "-", "-\t\tsynchronized ( this )", "-\t\t{", "-\t\t\tSet<IFile> parents = _generatedFile2ParentFiles.get( generatedFile );", "-\t\t", "-\t\t\t// this can be empty, but it shouldn't be null here unless parentFile was never a parent of generatedFile", "-\t\t\tif ( parents == null ) throw new RuntimeException(\"unexpected null value for parents set for file \" + generatedFile); //$NON-NLS-1$", "-\t\t", "-\t\t\tif (parents == null || parents.size() == 0) ", "-\t\t\t\tdelete = true;", "-\t\t}", "-\t\t", "-\t\tif ( delete ){", "-\t\t\tfinal IFolder genFolder = _gsfm.getFolder();", "-\t\t\tassert genFolder != null : \"Generated folder == null\"; //$NON-NLS-1$", "-\t\t\tIContainer parent = generatedFile.getParent();", "-\t\t\ttry {", "-\t\t\t\tgeneratedFile.delete(true, true, progressMonitor);", "-\t\t\t}", "-\t\t\tcatch (CoreException ce) {", "-\t\t\t\t// File was locked or read-only", "-\t\t\t\tAptPlugin.logWarning(ce, \"Failed to delete file: \" + generatedFile); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\t// not deleting the generated source folder and only ", "-\t\t\t// delete generated folders containing the generated file.", "-\t\t\twhile( !genFolder.equals(parent) && parent != null && parent.isDerived() ){\t\t\t\t", "-\t\t\t\tfinal IResource[] members = parent.members();", "-\t\t\t\tIContainer grandParent = parent.getParent();", "-\t\t\t\t// last one turns the light off.", "-\t\t\t\tif( members == null || members.length == 0 )", "-\t\t\t\t\tparent.delete(true, progressMonitor);", "-\t\t\t\telse", "-\t\t\t\t\tbreak;", "-\t\t\t\tparent = grandParent;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\treturn delete;", "-\t}", "+\t */", "+\tprivate void deletePhysicalFile(IFile file)", "+\t{", "+\t\tfinal IFolder genFolder = _gsfm.getFolder();", "+\t\tassert genFolder != null : \"Generated folder == null\"; //$NON-NLS-1$", "+\t\tIContainer parent = file.getParent(); // parent in the folder sense,", "+\t\t// not the typegen sense", "+\t\ttry {", "+\t\t\tif (AptPlugin.DEBUG_GFM) AptPlugin.trace( ", "+\t\t\t\t\t\"delete physical file: \" + file); //$NON-NLS-1$", "+\t\t\tfile.delete(true, true, /* progressMonitor */null);", "+\t\t} catch (CoreException e) {", "+\t\t\t// File was locked or read-only", "+\t\t\tAptPlugin.logWarning(e, \"Unable to delete generated file: \" + file); //$NON-NLS-1$", "+\t\t}", "+\t\t// Delete the parent folders", "+\t\twhile (!genFolder.equals(parent) && parent != null && parent.isDerived()) {", "+\t\t\tIResource[] members = null;", "+\t\t\ttry {", "+\t\t\t\tmembers = parent.members();", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tAptPlugin.logWarning(e, \"Unable to read contents of generated file folder \" + parent); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tIContainer grandParent = parent.getParent();", "+\t\t\t// last one turns the light off.", "+\t\t\tif (members == null || members.length == 0)", "+\t\t\t\ttry {", "+\t\t\t\t\tparent.delete(true, /* progressMonitor */null);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tAptPlugin.logWarning(e, \"Unable to delete generated file folder \" + parent); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\telse", "+\t\t\t\tbreak;", "+\t\t\tparent = grandParent;", "+\t\t}", "+\t}"]}], "num": 6912}
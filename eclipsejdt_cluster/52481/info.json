{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffe72f2af95f384ab9afcddeb886d818", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3944bbf25c4ffcb01b37d2e8b3bcbb61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "89326fe08eb871063f0f302034a5879455c90920", "commitAfterChange": "ac71706ae23042b90eea428f26829c71f167221e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void generateCode(ClassFile classFile)", "signatureAfterChange": " \t \tpublic void generateCode(ClassFile classFile)", "diff": ["-\t\tthis.body.generateCode(this.scope, codeStream);", "-\t\tif ((this.bits & ASTNode.NeedFreeReturn) != 0) {", "-\t\t\tcodeStream.return_();", "+\t\tif (this.body instanceof Block) {", "+\t\t\tthis.body.generateCode(this.scope, codeStream);", "+\t\t\tif ((this.bits & ASTNode.NeedFreeReturn) != 0) {", "+\t\t\t\tcodeStream.return_();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tExpression expression = (Expression) this.body;", "+\t\t\texpression.generateCode(this.scope, codeStream, true);", "+\t\t\tif (this.binding.returnType == TypeBinding.VOID) {", "+\t\t\t\tcodeStream.return_();", "+\t\t\t} else {", "+\t\t\t\tcodeStream.generateReturnBytecode(expression);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c95a482a85172e87c631f6a7119c0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "signatureAfterChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "diff": ["-\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\t// accept constructor reference for enum constant", "+\t\t\tif (fieldDeclaration.initialization instanceof AllocationExpression) {", "+\t\t\t\tAllocationExpression alloc = (AllocationExpression) fieldDeclaration.initialization;", "+\t\t\t\trequestor.acceptConstructorReference(", "+\t\t\t\t\tdeclaringType.name,", "+\t\t\t\t\talloc.arguments == null ? 0 : alloc.arguments.length, ", "+\t\t\t\t\talloc.sourceStart);", "+\t\t\t}", "+\t\t\t// fall through next case", "+\t\tcase AbstractVariableDeclaration.FIELD:"]}], "num": 52481}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cff376e68f60169e6705e577e2c648c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9321ab803bae23015ee55981b4d70b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "4d4c077960caad3dac6f1440a1eec3349b581bc3", "commitAfterChange": "84e94fe061dc975da80dda85572c99f5b95d09f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IIndex[] getIndexes()", "diff": ["-\tif (this.indexes == null) {", "-\t\treturn this.computeIndexes(); // if some indexes aren't ready, the index list won't be cached into 'indexes' slot", "+\tif (this.indexKeys == null) {", "+\t\tthis.initializeIndexKeys(); ", "-\treturn this.indexes;", "+\t// acquire the in-memory indexes on the fly", "+\tint length = this.indexKeys.length;", "+\tIIndex[] indexes = new IIndex[length];", "+\tfor (int i = 0; i < length; i++){", "+\t\t// may trigger some index recreation work", "+\t\tindexes[i] = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t}", "+\treturn indexes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab96a531d73688307b777c36ceb8ae50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "3a19c4699a578a289ea14413d2edc9ce5a1cc854", "commitAfterChange": "d3213172d29e4c1010f79436308b94172cea83cc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     @Override     public boolean isSubsignature(ExecutableType m1, ExecutableType m2)", "signatureAfterChange": "     @Override     public boolean isSubsignature(ExecutableType m1, ExecutableType m2)", "diff": ["-        // TODO Auto-generated method stub", "-        throw new UnsupportedOperationException(\"NYI: TypesImpl.isSubsignature(...)\"); //$NON-NLS-1$", "-    }", "+\t\tMethodBinding methodBinding1 = (MethodBinding) ((ExecutableTypeImpl) m1)._binding;", "+\t\tMethodBinding methodBinding2 = (MethodBinding) ((ExecutableTypeImpl) m2)._binding;", "+\t\tif (!CharOperation.equals(methodBinding1.selector, methodBinding2.selector))", "+\t\t\treturn false;", "+\t\treturn methodBinding1.areParameterErasuresEqual(methodBinding2) && methodBinding1.areTypeVariableErasuresEqual(methodBinding2);", "+\t}"]}], "num": 40186}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7e38574e441eb74e54dccc4681316a8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d7f32f39b9d7552f673f64b48e5b3bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c0735951a055fba3f0be3b86f55a77d744b6fbe2", "commitAfterChange": "68f72525a8dac445249ab2b31cd220cf1a851f87", "methodNumberBeforeChange": 397, "methodNumberAfterChange": 396, "signatureBeforeChange": " public void testBug160324a() throws CoreException", "signatureAfterChange": " public void testBug160324a() throws CoreException", "diff": ["+\tboolean debug = false;", "-\t\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\t\tassertTrue(\"Problem with equals method for match \"+match, match.equals(match.getType()));", "-\t\t\tassertEquals(\"Problem with hashCode method for match \"+match, match.getType().hashCode(), match.hashCode());", "-\t\t\tsuper.acceptTypeNameMatch(match);", "-\t\t}", "-\tassertEquals(\"We should not find any type\", \"\", collector.toString());", "-\tassertEquals(\"We should not find any type\", \"\", requestor.toString());", "+\tif (debug) System.out.println(\"TypeNameRequestor results: \\n\"+requestor);", "+\t// Should have same types with these 2 searches", "+\tassertTrue(\"We should get some types!\", collector.size() > 0);", "+\tassertEquals(\"Found types sounds not to be correct\", requestor.toString(), collector.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7bfa01cf12a1e1795f608df68a9080b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c0735951a055fba3f0be3b86f55a77d744b6fbe2", "commitAfterChange": "68f72525a8dac445249ab2b31cd220cf1a851f87", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 404, "signatureBeforeChange": " \t\tpublic void acceptTypeNameMatch(TypeNameMatch match)", "signatureAfterChange": " public void testBug161028() throws CoreException", "diff": ["-\t\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\t\tassertTrue(\"Problem with equals method for match \"+match, match.equals(match.getType()));", "-\t\t\tassertEquals(\"Problem with hashCode method for match \"+match, match.getType().hashCode(), match.hashCode());", "-\t\t\tsuper.acceptTypeNameMatch(match);", "-\t\t}", "+ */", "+public void testBug161028() throws CoreException {", "+\tTypeNameMatch match1 = SearchEngine.createTypeNameMatch(null, 0);", "+\tassertEquals(\"Should be equals!\", match1, match1);", "+\tassertEquals(\"Wrong toString value!\", \"org.eclipse.jdt.internal.core.search.JavaSearchTypeNameMatch@0\", match1.toString());", "+\tTypeNameMatch match2 = SearchEngine.createTypeNameMatch(null, 0);", "+\tassertFalse(\"Should NOT be identical!\", match1 == match2);", "+\tassertTrue(\"Should be equals!\", match1.equals(match2));", "+\tassertTrue(\"Should be equals!\", match2.equals(match1));", "+\tassertEquals(\"Wrong toString value!\", match1, match2);", "+\tassertEquals(\"Should have same hashCode!\", match1.hashCode(), match2.hashCode());", "+}"]}], "num": 64886}
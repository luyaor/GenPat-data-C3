{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "661e9141f22d71ecc2cf8de8ce896032", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82b32c2f769882bc00e0fdf6c924c1c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "e74a7e922535396e598f77f6ca74363a6e6d0498", "commitAfterChange": "5132501fe32bc39d29df0ef5b05cc4e551a24910", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "signatureAfterChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "diff": ["-\t\t\t} else {", "-\t\t\t\tif (!(parameters[i] instanceof TypeVariableBinding) || this.invocationArguments[i].isPertinentToApplicability(((TypeVariableBinding)parameters[i]), method))", "-\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "-\t\t\t\t// else we know it is potentially compatible, no need to assert.", "-\t\t\t}", "+\t\t\t} else if (!isTypeVariableOfCandidate(parameters[i], method)) {", "+\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t} // else we know it is potentially compatible, no need to assert.", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!(varArgsType instanceof TypeVariableBinding) || this.invocationArguments[i].isPertinentToApplicability(((TypeVariableBinding)varArgsType), method))", "-\t\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "-\t\t\t\t\t// else we know it is potentially compatible, no need to assert.", "-\t\t\t\t}", "+\t\t\t\t} else if (!isTypeVariableOfCandidate(varArgsType, method)) {", "+\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t} // else we know it is potentially compatible, no need to assert."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37fdbfdd4620b64b7346da253c616dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "dca0c800b618e06354348679c785dbf10c5f5a8f", "commitAfterChange": "cab98b2b8859caae533ee4cfbe628b2265262135", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "diff": ["-\t\t\t\t\tif (!arguments[i].isPertinentToApplicability(fsi, method)) {", "-\t\t\t\t\t\tc.add(new ConstraintExpressionFormula(arguments[i], substF, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT));", "+\t\t\t\t\tExpression argument = arguments[i];", "+\t\t\t\t\tif (!argument.isPertinentToApplicability(fsi, method)) {", "+\t\t\t\t\t\tc.add(new ConstraintExpressionFormula(argument, substF, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT));", "-\t\t\t\t\tc.add(new ConstraintExceptionFormula(arguments[i], substF));", "+\t\t\t\t\taddExceptionConstraint(c, argument, substF);"]}], "num": 33746}
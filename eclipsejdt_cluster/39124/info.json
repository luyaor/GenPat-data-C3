{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0db6652784f8564ac82e8b0bdd58be8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2077c54b974ab0fa1a98ea943a9744", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public int resolveLevel(Binding binding)", "signatureAfterChange": " public int resolveLevel(Binding binding)", "diff": ["-\t\tif (((InternalSearchPattern) this.pattern).focus instanceof IPackageFragment && binding instanceof ReferenceBinding) {", "+\t\tif (this.pattern.focus instanceof IPackageFragment && binding instanceof ReferenceBinding) {", "-\t\t\tif (!isDeclaringPackageFragment((IPackageFragment)((InternalSearchPattern) this.pattern).focus, (ReferenceBinding)binding))", "+\t\t\tif (!isDeclaringPackageFragment((IPackageFragment) this.pattern.focus, (ReferenceBinding)binding))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d15ef239dad876563ddf3135b8cc4a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "a8ae4c61c3fd8e7af5944aa40683b300c7cbf9e8", "commitAfterChange": "06d5ad0c6e4971f283c2f47bfc7f9df941ae34e8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBound[] flatten()", "signatureAfterChange": " \tpublic TypeBound[] flatten()", "diff": ["-\t\tIterator outerIt = this.boundsPerVariable.values().iterator();", "+\t\tIterator<ThreeSets> outerIt = this.boundsPerVariable.values().iterator();", "-\t\t\tsize += ((ThreeSets)outerIt.next()).size();", "+\t\t\tsize += outerIt.next().size();", "-\t\t\tidx = ((ThreeSets)outerIt.next()).flattenInto(collected, idx);", "+\t\t\tidx = outerIt.next().flattenInto(collected, idx);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d7b8445f99f4c9b7c69bc6ef9bea693", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(lastFieldBinding);", "+\t\tcodeStream.generateEmulationForField(lastFieldBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(lastFieldBinding);\t", "+\t\tcodeStream.generateEmulatedWriteAccessForField(lastFieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9020c2d37702f450fa976234c3aa63d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-\t\treturn nodeSet.addMatch(node, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\t\treturn nodeSet.addMatch(node, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9278333379aa2e4787c21717498fd1b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulationForField(fieldBinding);", "-\t\t\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(fieldBinding);", "+\t\t\t\tcodeStream.generateEmulatedWriteAccessForField(fieldBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b70b5fedcda290fca75d184f290979c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\tboolean resolve = ((InternalSearchPattern)this.pattern).mustResolve;", "+\tboolean resolve = this.pattern.mustResolve;", "-\t\t\t\t\tif (!((InternalSearchPattern)this.pattern).mustResolve) {", "+\t\t\t\t\tif (!this.pattern.mustResolve) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baac99b09223ed1772155f398b46e3b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulationForField(this.codegenBinding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulatedWriteAccessForField(this.codegenBinding);", "+\t\tcodeStream.generateEmulatedWriteAccessForField(this.codegenBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5459b68a4da7bc600359125e883eee6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferenceLocator.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-\t\treturn nodeSet.addMatch(node, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t\treturn nodeSet.addMatch(node, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a22a290632ea64ee6fe9cdca24d00d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "7d7e44bec5cc73af8a58c1959acd433a7f2c6ded", "commitAfterChange": "c9e042ca313baf5eded9aef49e3870dc5764fbfc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public PackageReferencePattern(char[] pkgName, int matchRule)", "signatureAfterChange": "  public PackageReferencePattern(char[] pkgName, int matchRule)", "diff": ["-\t\t((InternalSearchPattern)this).mustResolve = false;", "+\t\tthis.mustResolve = false;", "-\t\t((InternalSearchPattern)this).mustResolve = true;", "+\t\tthis.mustResolve = true;"]}], "num": 39124}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c4a827bf5f572c5a8c15637f346b29c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93bc344ca26d8aa885663ef514e19898", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "fb501c24a3207cb0f14cd1498d97d7099d6695b8", "commitAfterChange": "fb4f10bbc7b8e80ed14ebf725505f0096ec6e137", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r \tpublic MethodBinding findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found, MethodBinding matchingMethod)", "signatureAfterChange": "\r \r \tpublic MethodBinding findMethodInSuperInterfaces(\r \t\tReferenceBinding currentType,\r \t\tchar[] selector,\r \t\tObjectVector found,\r \t\tMethodBinding matchingMethod)", "diff": ["-\tpublic MethodBinding findMethodInSuperInterfaces(ReferenceBinding currentType, char[] selector, ObjectVector found, MethodBinding matchingMethod){\r", "-\t\t\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = -1;\r", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\tpublic MethodBinding findMethodInSuperInterfaces(\r", "+\t\tReferenceBinding currentType,\r", "+\t\tchar[] selector,\r", "+\t\tObjectVector found,\r", "+\t\tMethodBinding matchingMethod) {\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= InterfaceVisited;\r", "+\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\tint lastPosition = -1;\r", "+\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t0,\r", "+\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t0,\r", "+\t\t\t\t\tlastPosition);\r", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\tMethodBinding[] currentMethods = currentType.getMethods(selector);\r", "-\t\t\t\t\t\t\tint currentLength;\r", "-\t\t\t\t\t\t\tif ((currentLength = currentMethods.length) == 1\r", "-\t\t\t\t\t\t\t\t&& matchingMethod == null\r", "-\t\t\t\t\t\t\t\t&& found.size == 0) {\r", "-\t\t\t\t\t\t\t\tmatchingMethod = currentMethods[0];\r", "-\t\t\t\t\t\t\t} else if (currentLength > 0) {\r", "-\t\t\t\t\t\t\t\tif (found.size == 0) {\r", "-\t\t\t\t\t\t\t\t\tif (matchingMethod != null)\r", "-\t\t\t\t\t\t\t\t\t\tfound.add(matchingMethod);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\t\t\t\t\tfound.add(currentMethods[f]);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tcurrentType = interfaces[j];\r", "+\t\t\t\t\tif ((currentType.tagBits & InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\tcurrentType.tagBits |= InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tMethodBinding[] currentMethods = currentType.getMethods(selector);\r", "+\t\t\t\t\t\tint currentLength = currentMethods.length;\r", "+\t\t\t\t\t\tif (currentLength == 1 && matchingMethod == null && found.size == 0) {\r", "+\t\t\t\t\t\t\tmatchingMethod = currentMethods[0];\r", "+\t\t\t\t\t\t} else if (currentLength > 0) {\r", "+\t\t\t\t\t\t\tif (found.size == 0 && matchingMethod != null)\r", "+\t\t\t\t\t\t\t\tfound.add(matchingMethod);\r", "+\t\t\t\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "+\t\t\t\t\t\t\t\tfound.add(currentMethods[f]);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\treturn matchingMethod;\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn matchingMethod;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaa0c078a7fb05a1eeb84daf9d861a24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 161, "signatureBeforeChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-", "-\tprivate void findMethods(", "-\t\tTypeBinding[] typeArgTypes,", "-\t\tTypeBinding[] argTypes,", "-\t\tboolean onlyStaticMethods,", "-\t\tboolean exactMatch,", "-\t\tboolean isCompletingDeclaration,", "-\t\tInvocationSite invocationSite,", "-\t\tScope invocationScope,", "-\t\tboolean implicitCall,", "-\t\tboolean superCall,", "-\t\tboolean canBePrefixed,", "-\t\tboolean missingElementsHaveProblems,", "-\t\tchar[] castedReceiver,", "-\t\tint receiverStart,", "-\t\tint receiverEnd) {", "-\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "-\t\tif (selector == null && notInJavadoc) {", "-\t\tif(isCompletingDeclaration) {", "-\t\t\tMethodBinding[] methods = receiverType.availableMethods();", "-\t\t\tif (methods != null){", "-\t\t\t\tfor (int i = 0; i < methods.length; i++) {", "-\t\t\t\t\tif(!methods[i].isDefaultAbstract()) {", "-\t\t\t\t\t\tmethodsFound.add(methods[i]);", "-\t\t\t\t\t}", "-\t\tif (notInJavadoc) {", "-\t\t\tif (receiverType.isInterface()) {", "-\t\t\t\tif (isCompletingDeclaration) {", "-\t\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-\t\t\t\t} else {", "-\t\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tnew ReferenceBinding[]{currentType},", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-\t\t\t\t}", "-", "-\t\t\t\tcurrentType = scope.getJavaLangObject();", "-\t\t\t} else {", "-\t\t\t\tif (isCompletingDeclaration){", "-\t\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tcurrentType.superInterfaces(),", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-", "-\t\t\t\t\tcurrentType = receiverType.superclass();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\tif (isCompletingDeclaration){", "-\t\t\t\t\tfindLocalMethodDeclarations(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\tmethods,", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\treceiverType);", "-\t\t\t\t} else{", "-\t\t\t\t\tfindLocalMethods(", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\tmethods,", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\tmethodsFound,", "-\t\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\t\texactMatch,", "-\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\tinvocationScope,", "-\t\t\t\t\t\timplicitCall,", "-\t\t\t\t\t\tsuperCall,", "-\t\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\t\tmissingElements,", "-\t\t\t\t\t\tmissingElementsStarts,", "-\t\t\t\t\t\tmissingElementsEnds,", "-\t\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\t\treceiverStart,", "-\t\t\t\t\t\treceiverEnd);", "-\t\t\t\t}", "-\t\t\t\tif (superInterfaces != null && currentType.isIntersectionType()) {", "-\t\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "-\t\t\t\t\t\tsuperInterfaces[i] = (ReferenceBinding)superInterfaces[i].capture(invocationScope, invocationSite.sourceEnd());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tfindInterfacesMethods(", "-\t\t\t\t\ttypeArgTypes,", "-\t\t\t\t\targTypes,", "-\t\t\t\t\tonlyStaticMethods,", "-\t\t\t\t\texactMatch,", "-\t\t\t\t\tisCompletingDeclaration,", "-\t\t\t\t\tinvocationSite,", "-\t\t\t\t\tinvocationScope,", "-\t\t\t\t\timplicitCall,", "-\t\t\t\t\tsuperCall,", "-\t\t\t\t\tcanBePrefixed,", "-\t\t\t\t\tmissingElementsHaveProblems,", "-\t\t\t\t\tcastedReceiver,", "-\t\t\t\t\treceiverStart,", "-\t\t\t\t\treceiverEnd);", "+\tprivate void findMethods(", "+\t\tchar[] selector,", "+\t\tTypeBinding[] typeArgTypes,", "+\t\tTypeBinding[] argTypes,", "+\t\tReferenceBinding receiverType,", "+\t\tScope scope,", "+\t\tObjectVector methodsFound,", "+\t\tboolean onlyStaticMethods,", "+\t\tboolean exactMatch,", "+\t\tInvocationSite invocationSite,", "+\t\tScope invocationScope,", "+\t\tboolean implicitCall,", "+\t\tboolean superCall,", "+\t\tboolean canBePrefixed,", "+\t\tBinding[] missingElements,", "+\t\tint[] missingElementsStarts,", "+\t\tint[] missingElementsEnds,", "+\t\tboolean missingElementsHaveProblems,", "+\t\tchar[] castedReceiver,", "+\t\tint receiverStart,", "+\t\tint receiverEnd) {", "+", "+\t\tboolean notInJavadoc = this.assistNodeInJavadoc == 0;", "+\t\tif (selector == null && notInJavadoc) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tReferenceBinding currentType = receiverType;", "+\t\tif (notInJavadoc) {", "+\t\t\tif (receiverType.isInterface()) {", "+\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\tselector,", "+\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tnew ReferenceBinding[]{currentType},", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmethodsFound,", "+\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\texactMatch,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tinvocationScope,", "+\t\t\t\t\timplicitCall,", "+\t\t\t\t\tsuperCall,", "+\t\t\t\t\tcanBePrefixed,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\treceiverStart,", "+\t\t\t\t\treceiverEnd);", "+", "+\t\t\t\tcurrentType = scope.getJavaLangObject();", "+\t\t\t}", "+\t\t}", "+\t\tboolean hasPotentialDefaultAbstractMethods = true;", "+\t\twhile (currentType != null) {", "+", "+\t\t\tMethodBinding[] methods = currentType.availableMethods();", "+\t\t\tif (methods != null) {", "+\t\t\t\tfindLocalMethods(", "+\t\t\t\t\tselector,", "+\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\tmethods,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmethodsFound,", "+\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\texactMatch,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tinvocationScope,", "+\t\t\t\t\timplicitCall,", "+\t\t\t\t\tsuperCall,", "+\t\t\t\t\tcanBePrefixed,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\treceiverStart,", "+\t\t\t\t\treceiverEnd);", "+\t\t\t}", "+", "+\t\t\tif (hasPotentialDefaultAbstractMethods &&", "+\t\t\t\t\t(currentType.isAbstract() ||", "+\t\t\t\t\t\t\tcurrentType.isTypeVariable() ||", "+\t\t\t\t\t\t\tcurrentType.isIntersectionType() ||", "+\t\t\t\t\t\t\tcurrentType.isEnum())){", "+", "+\t\t\t\tReferenceBinding[] superInterfaces = currentType.superInterfaces();", "+\t\t\t\tif (superInterfaces != null && currentType.isIntersectionType()) {", "+\t\t\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\t\t\tsuperInterfaces[i] = (ReferenceBinding)superInterfaces[i].capture(invocationScope, invocationSite.sourceEnd());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tfindInterfacesMethods(", "+\t\t\t\t\tselector,", "+\t\t\t\t\ttypeArgTypes,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tsuperInterfaces,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmethodsFound,", "+\t\t\t\t\tonlyStaticMethods,", "+\t\t\t\t\texactMatch,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tinvocationScope,", "+\t\t\t\t\timplicitCall,", "+\t\t\t\t\tsuperCall,", "+\t\t\t\t\tcanBePrefixed,", "+\t\t\t\t\tmissingElements,", "+\t\t\t\t\tmissingElementsStarts,", "+\t\t\t\t\tmissingElementsEnds,", "+\t\t\t\t\tmissingElementsHaveProblems,", "+\t\t\t\t\tcastedReceiver,", "+\t\t\t\t\treceiverStart,", "+\t\t\t\t\treceiverEnd);", "+\t\t\t} else {", "+\t\t\t\thasPotentialDefaultAbstractMethods = false;", "+\t\t\t}", "+\t\t\tcurrentType = currentType.superclass();", "+\t\t}", "+\t}"]}], "num": 69682}
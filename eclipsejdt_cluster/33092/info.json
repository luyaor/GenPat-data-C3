{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a44b9c2488b25dbe06c06ae1b249d8a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d2bb54dca54a2144e28e6a37b0bf3c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8cec64edfc4c068818ffd71a8dbc7e8b83389a67", "commitAfterChange": "a988dc73f53d4add2180387d81f149877a8b4c63", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\t\tTypeBinding[] superTypes;", "+\t\tTypeBinding[] erasedSuperTypes;", "-\t\t\tsuperTypes = new TypeBinding[] { // inject well-known array supertypes", "+\t\t\terasedSuperTypes = new TypeBinding[] { // inject well-known array supertypes", "-\t\t\ttypesToVisit.add(firstErasure);", "+\t\t\ttypesToVisit.add(firstType);", "-\t\t\t\t\t\ttypesToVisit.add(itsInterfaceErasure);", "+\t\t\t\t\t\ttypesToVisit.add(itsInterface);", "-\t\t\t\t\t\ttypesToVisit.add(itsSuperclassErasure);", "+\t\t\t\t\t\ttypesToVisit.add(itsSuperclass);", "-\t\t\tsuperTypes = new TypeBinding[superLength];", "-\t\t\ttypesToVisit.toArray(superTypes);", "+\t\t\terasedSuperTypes = new TypeBinding[superLength];", "+\t\t\tint rank = 0;", "+\t\t\tfor (Iterator iter = typesToVisit.iterator(); iter.hasNext();) {", "+\t\t\t\terasedSuperTypes[rank++] = ((TypeBinding)iter.next()).erasure();", "+\t\t\t}", "-\t\t\t\t\tTypeBinding superType = superTypes[j];", "-\t\t\t\t\tif (superType == null || superType == otherType) continue nextSuperType;", "-\t\t\t\t\tswitch (superType.id) {", "+\t\t\t\t\tTypeBinding erasedSuperType = erasedSuperTypes[j];", "+\t\t\t\t\tif (erasedSuperType == null || erasedSuperType == otherType) continue nextSuperType;", "+\t\t\t\t\tswitch (erasedSuperType.id) {", "-\t\t\t\t\tsuperTypes[j] = null;", "+\t\t\t\t\terasedSuperTypes[j] = null;", "-\t\t\t\tTypeBinding superType = superTypes[j];", "-\t\t\t\tif (superType == null) continue nextSuperType;", "+\t\t\t\tTypeBinding erasedSuperType = erasedSuperTypes[j];", "+\t\t\t\tif (erasedSuperType == null) continue nextSuperType;", "-\t\t\t\tif (superType == otherType || superType.id == T_JavaLangObject && otherType.isInterface()) {", "-\t\t\t\t\tmatch = superType;", "+\t\t\t\tif (erasedSuperType == otherType || erasedSuperType.id == T_JavaLangObject && otherType.isInterface()) {", "+\t\t\t\t\tmatch = erasedSuperType;", "-\t\t\t\t\tif (superType.isArrayType()) {", "+\t\t\t\t\tif (erasedSuperType.isArrayType()) {", "-\t\t\t\t\t\tmatch = otherRefType.findSuperTypeWithSameErasure(superType);", "+\t\t\t\t\t\tmatch = otherRefType.findSuperTypeWithSameErasure(erasedSuperType);", "-\t\t\t\t\t\tsuperTypes[j] = null;", "+\t\t\t\t\t\terasedSuperTypes[j] = null;", "-\t\t\t\tSet someInvocations = (Set) allInvocations.get(superType);", "+\t\t\t\tSet someInvocations = (Set) allInvocations.get(erasedSuperType);", "-\t\t\t\tallInvocations.put(superType, someInvocations);", "+\t\t\t\tallInvocations.put(erasedSuperType, someInvocations);", "-\t\t\t\tReferenceBinding superType = (ReferenceBinding)superTypes[i];", "-\t\t\t\tif (superType == null) continue nextType;", "+\t\t\t\tReferenceBinding erasedSuperType = (ReferenceBinding)erasedSuperTypes[i];", "+\t\t\t\tif (erasedSuperType == null) continue nextType;", "-\t\t\t\t\tReferenceBinding otherType = (ReferenceBinding)superTypes[j];", "+\t\t\t\t\tReferenceBinding otherType = (ReferenceBinding)erasedSuperTypes[j];", "-\t\t\t\t\tif (otherType.id == T_JavaLangObject && superType.isInterface()) continue nextOtherType;", "-\t\t\t\t\tif (superType.findSuperTypeWithSameErasure(otherType) != null) {", "-\t\t\t\t\t\tsuperTypes[j] = null; // discard non minimal supertype", "+\t\t\t\t\tif (otherType.id == T_JavaLangObject && erasedSuperType.isInterface()) continue nextOtherType;", "+\t\t\t\t\tif (erasedSuperType.findSuperTypeWithSameErasure(otherType) != null) {", "+\t\t\t\t\t\terasedSuperTypes[j] = null; // discard non minimal supertype", "-\t\treturn superTypes;", "+\t\treturn erasedSuperTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc8f4e45bed9363b663dc877c722d2f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprivate TypeBinding minimalErasedCandidate(TypeBinding[] types, List invocations)", "signatureAfterChange": " \tprivate TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\tprivate TypeBinding minimalErasedCandidate(TypeBinding[] types, List invocations) {", "-\t\tMap allInvocations = new HashMap(2);", "+\tprivate TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations) {", "-\t\t\tcase 0: return VoidBinding;", "-\t\t\tcase 1: return types[indexOfFirst];", "+\t\t\tcase 0: return NoTypes;", "+\t\t\tcase 1: return types;", "-\t\t\tsuperTypes = new TypeBinding[] {", "+\t\t\tsuperTypes = new TypeBinding[] { // inject well-known array supertypes", "-\t\t\t\tArrayList someInvocations = new ArrayList(1);", "+\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\tTypeBinding itsSuperclass = currentType.superclass();", "+\t\t\t\t// inject super interfaces prior to superclass", "-\t\t\t\t\t\t\tArrayList someInvocations = new ArrayList(1);", "+\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\tTypeBinding itsSuperclass = currentType.superclass();", "-\t\t\t\t\t\t\tArrayList someInvocations = new ArrayList(1);", "+\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t", "+\t\t// intersecting first type supertypes with other types' ones, nullifying non matching supertypes", "-\t\t\tif (otherType == null)", "-\t\t\t\tcontinue nextOtherType;", "-\t\t\telse if (otherType.isArrayType()) {", "+\t\t\tif (otherType == null) continue nextOtherType;", "+\t\t\tif (otherType.isArrayType()) {", "-\t\t\t\tif (otherRefType.erasure().isCompatibleWith(superType)) {", "-\t\t\t\t\tTypeBinding match = otherRefType.findSuperTypeErasingTo((ReferenceBinding)superType);", "-\t\t\t\t\t\tif (match != null && match.erasure() != match) { // match can be null: interface.findSuperTypeErasingTo(Object)", "-\t\t\t\t\t\t\tArrayList someInvocations = (ArrayList) allInvocations.get(superType);", "-\t\t\t\t\t\t\tif (someInvocations == null) someInvocations = new ArrayList(1);", "-\t\t\t\t\t\t\tsomeInvocations.add(match);", "-\t\t\t\t\t\t\tallInvocations.put(superType, someInvocations);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\tbreak nextSuperType;", "+\t\t\t\tTypeBinding match;", "+\t\t\t\tif (superType == otherType || superType.id == T_JavaLangObject && otherType.isInterface()) {", "+\t\t\t\t\tmatch = superType;", "-\t\t\t\t\tsuperTypes[j] = null;", "-\t\t\t\t\tif (--remaining == 0) return null;", "+\t\t\t\t\tif (superType.isArrayType()) {", "+\t\t\t\t\t\tmatch = null;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tmatch = otherRefType.findSuperTypeErasingTo((ReferenceBinding)superType);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (match == null) { // incompatible super type", "+\t\t\t\t\t\tsuperTypes[j] = null;", "+\t\t\t\t\t\tif (--remaining == 0) return null;", "+\t\t\t\t\t\tcontinue nextSuperType;", "+\t\t\t\t\t}", "+\t\t\t\t// record invocation", "+\t\t\t\tSet someInvocations = (Set) allInvocations.get(superType);", "+\t\t\t\tif (someInvocations == null) someInvocations = new HashSet(1);", "+\t\t\t\tsomeInvocations.add(match);", "+\t\t\t\tallInvocations.put(superType, someInvocations);", "-\t\t// per construction, first non-null supertype is most specific common supertype", "-\t\tfor (int i = 0; i < superLength; i++) {", "-\t\t\tTypeBinding superType = superTypes[i];", "-\t\t\tif (superType != null) {", "-\t\t\t\tList matchingInvocations = (List)allInvocations.get(superType);", "-\t\t\t\tif (matchingInvocations != null) invocations.addAll(matchingInvocations);", "-\t\t\t\treturn superType;", "+\t\t// eliminate non minimal super types", "+\t\tif (remaining > 1) {", "+\t\t\tnextType: for (int i = 0; i < superLength; i++) {", "+\t\t\t\tReferenceBinding superType = (ReferenceBinding)superTypes[i];", "+\t\t\t\tif (superType == null) continue nextType;", "+\t\t\t\tnextOtherType: for (int j = 0; j < superLength; j++) {", "+\t\t\t\t\tif (i == j) continue nextOtherType;", "+\t\t\t\t\tReferenceBinding otherType = (ReferenceBinding)superTypes[j];", "+\t\t\t\t\tif (otherType == null) continue nextOtherType;", "+\t\t\t\t\tif (otherType.id == T_JavaLangObject && superType.isInterface()) continue nextOtherType;", "+\t\t\t\t\tif (superType.findSuperTypeErasingTo(otherType) != null) {", "+\t\t\t\t\t\tsuperTypes[j] = null; // discard non minimal supertype", "+\t\t\t\t\t\tremaining--;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\treturn null;", "+\t\treturn superTypes;"]}], "num": 33092}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b99759cfc805627de95584187952501d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b04a07f4873a1486b23a27d9ed35b60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "signatureAfterChange": "\r private void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "diff": ["-\t\tchar[] className = null;\r", "-\t\t\t\taddMethodReference(name, extractArgCount(type));\r", "+\t\t\t\tif (CharOperation.equals(INIT, name)) {\r", "+\t\t\t\t\t// add a constructor reference\r", "+\t\t\t\t\tchar[] className = replace('/', '.', extractClassName(constantPoolOffsets, reader, i)); // so that it looks like java.lang.String\r", "+\t\t\t\t\taddConstructorReference(className, extractArgCount(type));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// add a method reference\r", "+\t\t\t\t\taddMethodReference(name, extractArgCount(type));\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "176ef84ac2ceb9775a4724153d680bef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "240396375bcd308bc801defacd8d000d9826bf17", "commitAfterChange": "d24d28f1cf95d80c381c825283113e7b36dcb836", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \t \tprivate void completionOnQualifiedAllocationExpression(ASTNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void completionOnQualifiedAllocationExpression(ASTNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "-\t\t\t\t&& ref.isClass()", "-\t\t\t\t&& !ref.isAbstract()) {", "-\t\t\t\tfindConstructors(", "+\t\t", "+\t\tif (ref.problemId() == ProblemReasons.NotFound) {", "+\t\t\tfindConstructorsFromMissingType(", "+\t\t\t\t\tallocExpression.type,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tallocExpression);", "+\t\t} else {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "+\t\t\t\t\t&& ref.isClass()", "+\t\t\t\t\t&& !ref.isAbstract()) {", "+\t\t\t\t\tfindConstructors(", "+\t\t\t\t\t\tref,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tallocExpression,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tfalse);", "+\t\t\t}", "+\t\t\t", "+\t\t\tcheckCancel();", "+\t\t\t", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "+\t\t\t\t\t&& !ref.isFinal()", "+\t\t\t\t\t&& !ref.isEnum()){", "+\t\t\t\tfindAnonymousType(", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnull,", "-\t\t}", "-\t\t", "-\t\tcheckCancel();", "-\t\t", "-\t\tif (!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "-\t\t\t\t&& !ref.isFinal()", "-\t\t\t\t&& !ref.isEnum()){", "-\t\t\tfindAnonymousType(", "-\t\t\t\tref,", "-\t\t\t\targTypes,", "-\t\t\t\tscope,", "-\t\t\t\tallocExpression);", "+\t\t\t}"]}], "num": 27334}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55defa6cab0bdf5184514499c5ddbe88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12003f48973cb4b5f533a371910472a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseFileManager.java", "commitBeforeChange": "a2b09aa610a3d771f5cadfa415e41471a8dceb2a", "commitAfterChange": "141297666c73100df7bfb4f1cef4375520a94935", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate void collectAllMatchingFiles(File file, String normalizedPackageName, Set<Kind> kinds, boolean recurse, ArrayList<JavaFileObject> collector)", "signatureAfterChange": " \t \tprivate void collectAllMatchingFiles(File file, String normalizedPackageName, Set<Kind> kinds, boolean recurse, ArrayList<JavaFileObject> collector)", "diff": ["-   \t\t\tFile[] files = currentFile.listFiles();", "-   \t\t\tif (files != null) {", "-   \t\t\t\t// this was a directory", "-   \t\t\t\tfor (File f : files) {", "-   \t\t\t\t\tif (f.isDirectory() && recurse) {", "-   \t\t\t\t\t\tcollectAllMatchingFiles(file, normalizedPackageName + '/' + f.getName(), kinds, recurse, collector);", "-   \t\t\t\t\t} else {", "-   \t\t\t\t\t\tfinal Kind kind = getKind(f);", "-   \t\t\t\t\t\tif (kinds.contains(kind)) {", "-   \t\t\t\t\t\t\tcollector.add(new EclipseFileObject(normalizedPackageName + currentFile.getName(), currentFile.toURI(), kind, this.charset));", "-   \t\t\t\t\t\t}", "-   \t\t\t\t\t}", "-   \t\t\t\t}", "-   \t\t\t}", "-\t\t\t// currentFile is not a directory", "-\t\t\t// check if it matches the criteria", "-\t\t\tfinal Kind kind = getKind(file);", "-\t\t\tif (kinds.contains(kind)) {", "-\t\t\t\tcollector.add(new EclipseFileObject(normalizedPackageName + currentFile.getName(), currentFile.toURI(), kind, this.charset));", "+\t\t\tFile[] files = currentFile.listFiles();", "+\t\t\tif (files != null) {", "+\t\t\t\t// this was a directory", "+\t\t\t\tfor (File f : files) {", "+\t\t\t\t\tif (f.isDirectory() && recurse) {", "+\t\t\t\t\t\tcollectAllMatchingFiles(file, normalizedPackageName + '/' + f.getName(), kinds, recurse, collector);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfinal Kind kind = getKind(f);", "+\t\t\t\t\t\tif (kinds.contains(kind)) {", "+\t\t\t\t\t\t\tcollector.add(new EclipseFileObject(normalizedPackageName + f.getName(), f.toURI(), kind, this.charset));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t   \t\t\t\t\t\tfinal Kind kind = getKind(getExtension(typeName));", "-\t\t   \t\t\t\t\t\tif (kinds.contains(kind)) {", "-\t\t   \t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(packageName + typeName, this.charset));", "-\t\t   \t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tfinal Kind kind = getKind(getExtension(typeName));", "+\t\t\t\t\t\t\t\tif (kinds.contains(kind)) {", "+\t\t\t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(packageName + typeName, this.charset));", "+\t\t\t\t\t\t\t\t}", "-   \t\t\t\t\t\tfinal Kind kind = getKind(typeName);", "-   \t\t\t\t\t\tif (kinds.contains(kind)) {", "-   \t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(normalizedPackageName + typeName, this.charset));", "-   \t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal Kind kind = getKind(typeName);", "+\t\t\t\t\t\tif (kinds.contains(kind)) {", "+\t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(normalizedPackageName + typeName, this.charset));", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd6c3a17bb115d97ba797a8852409216", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/util/EclipseFileManager.java", "commitBeforeChange": "141297666c73100df7bfb4f1cef4375520a94935", "commitAfterChange": "99d9827a13a83fa6bbad43196ec624282b8c65f9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate void collectAllMatchingFiles(File file, String normalizedPackageName, Set<Kind> kinds, boolean recurse, ArrayList<JavaFileObject> collector)", "signatureAfterChange": " \t \tprivate void collectAllMatchingFiles(File file, String normalizedPackageName, Set<Kind> kinds, boolean recurse, ArrayList<JavaFileObject> collector)", "diff": ["-   \t\t\tFile[] files = currentFile.listFiles();", "-   \t\t\tif (files != null) {", "-   \t\t\t\t// this was a directory", "-   \t\t\t\tfor (File f : files) {", "-   \t\t\t\t\tif (f.isDirectory() && recurse) {", "-   \t\t\t\t\t\tcollectAllMatchingFiles(file, normalizedPackageName + '/' + f.getName(), kinds, recurse, collector);", "-   \t\t\t\t\t} else {", "-   \t\t\t\t\t\tfinal Kind kind = getKind(f);", "-   \t\t\t\t\t\tif (kinds.contains(kind)) {", "-   \t\t\t\t\t\t\tcollector.add(new EclipseFileObject(normalizedPackageName + currentFile.getName(), currentFile.toURI(), kind, this.charset));", "-   \t\t\t\t\t\t}", "-   \t\t\t\t\t}", "-   \t\t\t\t}", "-   \t\t\t}", "-\t\t\t// currentFile is not a directory", "-\t\t\t// check if it matches the criteria", "-\t\t\tfinal Kind kind = getKind(file);", "-\t\t\tif (kinds.contains(kind)) {", "-\t\t\t\tcollector.add(new EclipseFileObject(normalizedPackageName + currentFile.getName(), currentFile.toURI(), kind, this.charset));", "+\t\t\tFile[] files = currentFile.listFiles();", "+\t\t\tif (files != null) {", "+\t\t\t\t// this was a directory", "+\t\t\t\tfor (File f : files) {", "+\t\t\t\t\tif (f.isDirectory() && recurse) {", "+\t\t\t\t\t\tcollectAllMatchingFiles(file, normalizedPackageName + '/' + f.getName(), kinds, recurse, collector);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfinal Kind kind = getKind(f);", "+\t\t\t\t\t\tif (kinds.contains(kind)) {", "+\t\t\t\t\t\t\tcollector.add(new EclipseFileObject(normalizedPackageName + f.getName(), f.toURI(), kind, this.charset));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t   \t\t\t\t\t\tfinal Kind kind = getKind(getExtension(typeName));", "-\t\t   \t\t\t\t\t\tif (kinds.contains(kind)) {", "-\t\t   \t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(packageName + typeName, this.charset));", "-\t\t   \t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tfinal Kind kind = getKind(getExtension(typeName));", "+\t\t\t\t\t\t\t\tif (kinds.contains(kind)) {", "+\t\t\t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(packageName + typeName, this.charset));", "+\t\t\t\t\t\t\t\t}", "-   \t\t\t\t\t\tfinal Kind kind = getKind(typeName);", "-   \t\t\t\t\t\tif (kinds.contains(kind)) {", "-   \t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(normalizedPackageName + typeName, this.charset));", "-   \t\t\t\t\t\t}", "+\t\t\t\t\t\tfinal Kind kind = getKind(typeName);", "+\t\t\t\t\t\tif (kinds.contains(kind)) {", "+\t\t\t\t\t\t\tcollector.add(archive.getArchiveFileObject(normalizedPackageName + typeName, this.charset));", "+\t\t\t\t\t\t}"]}], "num": 48882}
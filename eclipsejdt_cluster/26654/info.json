{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1673af9f3f67487240888e06d923d7e7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29b9a0cf54977d3a7480d9232844b758", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems)", "signatureAfterChange": "  \tpublic static boolean areClasspathsEqual( \t\t\tIClasspathEntry[] firstClasspath, IClasspathEntry[] secondClasspath,  \t\t\tIPath firstOutputLocation, IPath secondOutputLocation)", "diff": ["+", "+\tpublic static boolean areClasspathsEqual(", "+\t\t\tIClasspathEntry[] firstClasspath, IClasspathEntry[] secondClasspath, ", "+\t\t\tIPath firstOutputLocation, IPath secondOutputLocation) {", "+\t\tint length = firstClasspath.length;", "+\t\tif (length != secondClasspath.length) return false;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (!firstClasspath[i].equals(secondClasspath[i]))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\tif (firstOutputLocation == null)", "+\t\t\treturn secondOutputLocation == null;", "+\t\treturn firstOutputLocation.equals(secondOutputLocation);", "+\t}", "-\tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems) {", "-\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems, null/*not interested in unknown elements*/);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f7860949c97e2bf056fcefc347422f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c7494793aa1ed6a2f75240b5a076591b5a3e9bf6", "commitAfterChange": "54e21838d5d72a577ad5b83bd2ddcc9c60b93259", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic boolean saveClasspath(IClasspathEntry[] newClasspath, IPath newOutputLocation) throws JavaModelException", "diff": ["-\t\ttry {", "-\t\t\t// attempt to prove the classpath has not changed", "-\t\t\tString fileClasspathString = getSharedProperty(CLASSPATH_FILENAME);", "-\t\t\tif (fileClasspathString != null) {", "-\t\t\t\tIClasspathEntry[] fileEntries = readPaths(fileClasspathString);", "-\t\t\t\tif (isClasspathEqualsTo(newClasspath, newOutputLocation, fileEntries)) {", "-\t\t\t\t\t// no need to save it, it is the same", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t} catch (RuntimeException e) {", "-\t\t} catch (CoreException e) {", "+\t\tIClasspathEntry[] fileEntries = readClasspathFile(false /*don't create markers*/, false/*don't log problems*/);", "+\t\tif (fileEntries != null && isClasspathEqualsTo(newClasspath, newOutputLocation, fileEntries)) {", "+\t\t\t// no need to save it, it is the same", "+\t\t\treturn false;"]}], "num": 26654}
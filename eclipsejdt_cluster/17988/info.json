{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bed728e966d50fb1cd6026e92f8817d4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c5cad2f8aca88f5f2ff9e8dedc21841", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static String addProcessorOption(IJavaProject jproj, String key, String val)", "signatureAfterChange": "     public static void addProcessorOption(IJavaProject jproj, String key, String val)", "diff": ["-    public static String addProcessorOption(IJavaProject jproj, String key, String val) {", "+    public static void addProcessorOption(IJavaProject jproj, String key, String val) {", "-    \t\treturn null;", "+    \t\tthrow new IllegalArgumentException();", "-    \tString old;", "-    \tIEclipsePreferences node;", "-    \tsynchronized (AptConfig.class) {", "-\t    \tMap<String, String> options = getRawProcessorOptions(jproj);", "-\t    \told = options.get(key);", "-\t    \toptions.put(key, val);", "-\t    \tString serializedOptions = serializeProcessorOptions(options);", "-\t\t\tIScopeContext context = (null != jproj) ? ", "-\t\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "-\t\t\tnode = context.getNode(AptPlugin.PLUGIN_ID);", "-\t\t\tnode.put(AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);", "-    \t}", "-    \t// Do the flush outside of the synchronized block to avoid deadlock:", "-    \t// flush causes a file write, which will block if the workspace is locked.", "-    \tflushPreference(AptPreferenceConstants.APT_PROCESSOROPTIONS, node);", "-    \treturn old;", "+\t\tIScopeContext context = (null != jproj) ? ", "+\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "+\t\tIEclipsePreferences node = context.getNode(AptPlugin.PLUGIN_ID + \"/\" +  //$NON-NLS-1$", "+\t\t\t\tAptPreferenceConstants.APT_PROCESSOROPTIONS);", "+\t\tString nonNullVal = val == null ? AptPreferenceConstants.APT_NULLVALUE : val;", "+\t\tnode.put(key, nonNullVal);", "+\t\ttry {", "+\t\t\tnode.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tAptPlugin.log(e, \"Unable to save annotation processor option\" + key); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a106a226a32c77862b566738cd9ad88e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static String removeProcessorOption(IJavaProject jproj, String key)", "signatureAfterChange": "     public static void removeProcessorOption(IJavaProject jproj, String key)", "diff": ["-    public static String removeProcessorOption(IJavaProject jproj, String key) {", "-    \tString old;", "-    \tIEclipsePreferences node;", "-    \tsynchronized (AptConfig.class) {", "-\t    \tMap<String, String> options = getRawProcessorOptions(jproj);", "-\t    \told = options.get(key);", "-\t    \toptions.remove(key);", "-\t    \tString serializedOptions = serializeProcessorOptions(options);", "-\t\t\tIScopeContext context = (null != jproj) ? ", "-\t\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "-\t\t\tnode = context.getNode(AptPlugin.PLUGIN_ID);", "-\t\t\tnode.put(AptPreferenceConstants.APT_PROCESSOROPTIONS, serializedOptions);", "+    public static void removeProcessorOption(IJavaProject jproj, String key) {", "+    \tif (key == null || key.length() < 1) {", "+    \t\tthrow new IllegalArgumentException();", "-    \t// Do the flush outside of the synchronized block to avoid deadlock:", "-    \t// flush causes a file write, which will block if the workspace is locked.", "-    \tflushPreference(AptPreferenceConstants.APT_PROCESSOROPTIONS, node);", "-    \treturn old;", "+    \tIScopeContext context = (null != jproj) ? ", "+\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "+\t\tIEclipsePreferences node = context.getNode(AptPlugin.PLUGIN_ID + \"/\" +  //$NON-NLS-1$", "+\t\t\t\tAptPreferenceConstants.APT_PROCESSOROPTIONS);", "+\t\tnode.remove(key);", "+\t\ttry {", "+\t\t\tnode.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tAptPlugin.log(e, \"Unable to save annotation processor option\" + key); //$NON-NLS-1$", "+\t\t}"]}], "num": 17988}
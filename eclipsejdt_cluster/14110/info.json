{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44e9a1e656849598c937aa4e29c0615a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e9c212982fb2a1bfb628d55b9e2bc51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\tReferenceBinding allocatedType;", "+\t\tReferenceBinding allocatedTypeErasure = (ReferenceBinding) binding.declaringClass.erasure();", "-\t\tif ((allocatedType = binding.declaringClass).isNestedType()", "+\t\tif (allocatedTypeErasure.isNestedType()", "-\t\t\tif (allocatedType.isLocalType()) {", "-\t\t\t\t((LocalTypeBinding) allocatedType).addInnerEmulationDependent(currentScope, false);", "+\t\t\tif (allocatedTypeErasure.isLocalType()) {", "+\t\t\t\t((LocalTypeBinding) allocatedTypeErasure).addInnerEmulationDependent(currentScope, false);", "-\t\t\t\tcurrentScope.propagateInnerEmulation(allocatedType, false);", "+\t\t\t\tcurrentScope.propagateInnerEmulation(allocatedTypeErasure, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8469e70284beb8ad1b96fe972fa7b4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\tReferenceBinding allocatedType;", "+\t\tReferenceBinding allocatedTypeErasure = (ReferenceBinding) binding.declaringClass.erasure();", "-\t\tif ((allocatedType = binding.declaringClass).isNestedType()", "+\t\tif (allocatedTypeErasure.isNestedType()", "-\t\t\tif (allocatedType.isLocalType()) {", "-\t\t\t\t((LocalTypeBinding) allocatedType).addInnerEmulationDependent(currentScope, enclosingInstance != null);", "+\t\t\tif (allocatedTypeErasure.isLocalType()) {", "+\t\t\t\t((LocalTypeBinding) allocatedTypeErasure).addInnerEmulationDependent(currentScope, enclosingInstance != null);", "-\t\t\t\tcurrentScope.propagateInnerEmulation(allocatedType, enclosingInstance != null);", "+\t\t\t\tcurrentScope.propagateInnerEmulation(allocatedTypeErasure, enclosingInstance != null);"]}], "num": 14110}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8012fd6681e309d795b9a0bab65a6822", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963d9c1e1a678bc1ac63110b22c2e466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "f36c718beb8bf08713390b2fd835e572041478ae", "commitAfterChange": "de0ec0255833f27449d5f59da580e82b41fe6f0d", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": "  protected final boolean atLambdaParameterList()", "signatureAfterChange": "  protected final boolean maybeAtLambdaOrCast()", "diff": ["-", "-protected final boolean atLambdaParameterList() { // Did the '(' we saw just now herald a lambda parameter list ?", "+protected final boolean maybeAtLambdaOrCast() { // Could the '(' we saw just now herald a lambda parameter list or a cast expression ? (the possible locations for both are identical.)", "-\t\tcase TokenNameEQUAL : ", "-\t\tcase TokenNamereturn:", "-\t\tcase TokenNameLPAREN:", "-\t\tcase TokenNameRPAREN:", "-\t\tcase TokenNameCOMMA:", "-\t\tcase TokenNameARROW:", "-\t\tcase TokenNameQUESTION:", "-\t\tcase TokenNameCOLON:", "-\t\tcase TokenNameLBRACE:", "-\t\tcase TokenNameNotAToken: // Not kosher, don't touch.", "-\t\t\tbreak;", "+\t\tcase TokenNameIdentifier:", "+\t\tcase TokenNamecatch:", "+\t\tcase TokenNamethis:", "+\t\tcase TokenNamesuper:", "+\t\tcase TokenNameif:", "+\t\tcase TokenNameswitch:", "+\t\tcase TokenNamewhile:", "+\t\tcase TokenNamefor:", "+\t\tcase TokenNamesynchronized:", "+\t\tcase TokenNametry:", "+\t\t\treturn false; // not a viable prefix for cast or lambda.", "-\t\t\treturn false; // Not a viable prefix for lambda.", "-", "+\t\t\treturn this.activeParser.atConflictScenario(TokenNameLPAREN);", "-\treturn this.activeParser.atConflictScenario(TokenNameLPAREN) && getVanguardParser().parse(TokenNameARROW);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9cae945d3d7a87e953bff661118d071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "35bd4e1ac4b1e11c036461a7309d887d1527f75a", "commitAfterChange": "c62a418f35a40981606d85e97ecee9f9596fa8d0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areReturnTypesCompatible(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "diff": ["-boolean areReturnTypesCompatible(MethodBinding one, MethodBinding substituteTwo) {", "-\tif (one.returnType == substituteTwo.returnType) return true;", "+}", "+boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two) {", "-\t\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "+\t\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\tif (substituteTwo.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "+\tif (two.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\tif (one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\tif (substituteTwo.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "+\tif (one.declaringClass.implementsInterface(two.declaringClass, true))", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "+\tif (two.declaringClass.implementsInterface(one.declaringClass, true))", "+\t\treturn two.returnType.isCompatibleWith(one.returnType);", "-\treturn one.returnType.isCompatibleWith(substituteTwo.returnType)", "-\t\t|| substituteTwo.returnType.isCompatibleWith(one.returnType);", "-}", "+\treturn one.returnType.isCompatibleWith(two.returnType)", "+\t\t|| two.returnType.isCompatibleWith(one.returnType);"]}], "num": 8896}
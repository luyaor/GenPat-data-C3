{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9849597c6facef98b08a1122ea040696", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de16584441b017fb5d085f496a688f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void resolve(BlockScope upperScope)", "signatureAfterChange": "  public void resolve(BlockScope upperScope)", "diff": ["-\tBlockScope tryScope = new BlockScope(this.scope);", "+    BlockScope resourceManagementScope = null; // Single scope to hold all resources and additional secret variables.", "+\tint resourceCount = this.resources.length;", "+\tif (resourceCount > 0) {", "+\t\tresourceManagementScope = new BlockScope(this.scope);", "+\t\tthis.primaryExceptionVariable =", "+\t\t\tnew LocalVariableBinding(TryStatement.SECRET_PRIMARY_EXCEPTION_VARIABLE_NAME, this.scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "+\t\tresourceManagementScope.addLocalVariable(this.primaryExceptionVariable);", "+\t\tthis.primaryExceptionVariable.setConstant(Constant.NotAConstant); // not inlinable", "+\t\tthis.caughtThrowableVariable =", "+\t\t\tnew LocalVariableBinding(TryStatement.SECRET_CAUGHT_THROWABLE_VARIABLE_NAME, this.scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "+\t\tresourceManagementScope.addLocalVariable(this.caughtThrowableVariable);", "+\t\tthis.caughtThrowableVariable.setConstant(Constant.NotAConstant); // not inlinable", "+\t}", "+\tfor (int i = 0; i < resourceCount; i++) {", "+\t\tthis.resources[i].resolve(resourceManagementScope);", "+\t\tLocalVariableBinding localVariableBinding = this.resources[i].binding;", "+\t\tif (localVariableBinding != null && localVariableBinding.isValidBinding()) {", "+\t\t\tlocalVariableBinding.modifiers |= ClassFileConstants.AccFinal;", "+\t\t\tlocalVariableBinding.tagBits |= TagBits.IsResource;", "+\t\t\tTypeBinding resourceType = localVariableBinding.type;", "+\t\t\tif (resourceType instanceof ReferenceBinding) {", "+\t\t\t\tif (resourceType.findSuperTypeOriginatingFrom(TypeIds.T_JavaLangAutoCloseable, false /*AutoCloseable is not a class*/) == null && resourceType.isValidBinding()) {", "+\t\t\t\t\tupperScope.problemReporter().resourceHasToImplementAutoCloseable(resourceType, this.resources[i].type);", "+\t\t\t\t\tlocalVariableBinding.type = new ProblemReferenceBinding(CharOperation.splitOn('.', resourceType.shortReadableName()), null, ProblemReasons.InvalidTypeForAutoManagedResource);", "+\t\t\t\t}", "+\t\t\t} else if (resourceType != null) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=349862, avoid secondary error in problematic null case", "+\t\t\t\tupperScope.problemReporter().resourceHasToImplementAutoCloseable(resourceType, this.resources[i].type);", "+\t\t\t\tlocalVariableBinding.type = new ProblemReferenceBinding(CharOperation.splitOn('.', resourceType.shortReadableName()), null, ProblemReasons.InvalidTypeForAutoManagedResource);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tBlockScope tryScope = new BlockScope(resourceManagementScope != null ? resourceManagementScope : this.scope);", "-\t\t\tfinallyScope.shiftScopes = new BlockScope[this.catchArguments == null ? 1 : this.catchArguments.length+1];", "+\t\t\tint shiftScopesLength = this.catchArguments == null ? 1 : this.catchArguments.length + 1;", "+\t\t\tfinallyScope.shiftScopes = new BlockScope[shiftScopesLength];", "+\t\tboolean containsUnionTypes = false;", "-\t\t\tif ((argumentTypes[i] = this.catchArguments[i].resolveForCatch(catchScope)) == null) {", "+\t\t\tArgument catchArgument = this.catchArguments[i];", "+\t\t\tcontainsUnionTypes |= (catchArgument.type.bits & ASTNode.IsUnionType) != 0;", "+\t\t\tif ((argumentTypes[i] = catchArgument.resolveForCatch(catchScope)) == null) {", "-\t\tthis.caughtExceptionTypes = new ReferenceBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.caughtExceptionTypes[i] = (ReferenceBinding) argumentTypes[i];", "-\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\tif (this.caughtExceptionTypes[i].isCompatibleWith(argumentTypes[j])) {", "-\t\t\t\t\tthis.scope.problemReporter().wrongSequenceOfExceptionTypesError(this, this.caughtExceptionTypes[i], i, argumentTypes[j]);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tverifyDuplicationAndOrder(length, argumentTypes, containsUnionTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb39dc24a34ad0bd1dc904b623adcdb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "1b80cae94595518122618b458eed60915f76d171", "commitAfterChange": "92d6141bb346285ff13c588faa5a059cb9f83b3d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\tBlockScope tryScope = new BlockScope(scope);", "+\t\tBlockScope tryScope = new BlockScope(this.scope);", "-\t\tif (finallyBlock != null) {", "-\t\t\tif (finallyBlock.isEmptyBlock()) {", "-\t\t\t\tif ((finallyBlock.bits & UndocumentedEmptyBlock) != 0) {", "-\t\t\t\t\tscope.problemReporter().undocumentedEmptyBlock(finallyBlock.sourceStart, finallyBlock.sourceEnd);", "+\t\tif (this.finallyBlock != null) {", "+\t\t\tif (this.finallyBlock.isEmptyBlock()) {", "+\t\t\t\tif ((this.finallyBlock.bits & ASTNode.UndocumentedEmptyBlock) != 0) {", "+\t\t\t\t\tthis.scope.problemReporter().undocumentedEmptyBlock(this.finallyBlock.sourceStart, this.finallyBlock.sourceEnd);", "-\t\t\t\tfinallyScope = new BlockScope(scope, false); // don't add it yet to parent scope", "+\t\t\t\tfinallyScope = new BlockScope(this.scope, false); // don't add it yet to parent scope", "-\t\t\t\tMethodScope methodScope = scope.methodScope();", "+\t\t\t\tMethodScope methodScope = this.scope.methodScope();", "-\t\t\t\t\t\tnew LocalVariableBinding(SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);", "-\t\t\t\t\tfinallyScope.addLocalVariable(returnAddressVariable);", "+\t\t\t\t\t\tnew LocalVariableBinding(TryStatement.SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);", "+\t\t\t\t\tfinallyScope.addLocalVariable(this.returnAddressVariable);", "-\t\t\t\t\tnew LocalVariableBinding(SecretAnyHandlerName, scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "+\t\t\t\t\tnew LocalVariableBinding(TryStatement.SecretAnyHandlerName, this.scope.getJavaLangThrowable(), ClassFileConstants.AccDefault, false);", "-\t\t\t\t\t\tif (methodReturnType.id != T_void) {", "+\t\t\t\t\t\tif (methodReturnType.id != TypeIds.T_void) {", "-\t\t\t\t\t\t\t\t\tSecretLocalDeclarationName,", "+\t\t\t\t\t\t\t\t\tTryStatement.SecretLocalDeclarationName,", "-\t\t\t\tfinallyBlock.resolveUsing(finallyScope);", "+\t\t\t\tthis.finallyBlock.resolveUsing(finallyScope);", "-\t\t\t\tfinallyScope.shiftScopes = new BlockScope[catchArguments == null ? 1 : catchArguments.length+1];", "+\t\t\t\tfinallyScope.shiftScopes = new BlockScope[this.catchArguments == null ? 1 : this.catchArguments.length+1];", "-\t\t\t\tBlockScope catchScope = new BlockScope(scope);", "+\t\t\t\tBlockScope catchScope = new BlockScope(this.scope);", "-\t\t\t\tif ((argumentTypes[i] = catchArguments[i].resolveForCatch(catchScope)) == null) {", "+\t\t\t\tif ((argumentTypes[i] = this.catchArguments[i].resolveForCatch(catchScope)) == null) {", "-\t\t\t\tcatchBlocks[i].resolveUsing(catchScope);", "+\t\t\t\tthis.catchBlocks[i].resolveUsing(catchScope);", "-\t\t\t\tcaughtExceptionTypes[i] = (ReferenceBinding) argumentTypes[i];", "+\t\t\t\tthis.caughtExceptionTypes[i] = (ReferenceBinding) argumentTypes[i];", "-\t\t\t\t\tif (caughtExceptionTypes[i].isCompatibleWith(argumentTypes[j])) {", "-\t\t\t\t\t\tscope.problemReporter().wrongSequenceOfExceptionTypesError(this, caughtExceptionTypes[i], i, argumentTypes[j]);", "+\t\t\t\t\tif (this.caughtExceptionTypes[i].isCompatibleWith(argumentTypes[j])) {", "+\t\t\t\t\t\tthis.scope.problemReporter().wrongSequenceOfExceptionTypesError(this, this.caughtExceptionTypes[i], i, argumentTypes[j]);", "-\t\t\tcaughtExceptionTypes = new ReferenceBinding[0];", "+\t\t\tthis.caughtExceptionTypes = new ReferenceBinding[0];"]}], "num": 58851}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cf37c3fcf4f00211efb4d7b97aded1c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d1caa5130182a013b7b16a983cbf30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void reportReference( \t\tAstNode reference, \t\tTypeDeclaration typeDeclaration, \t\tFieldDeclaration fieldDeclaration, \t\tIJavaElement parent, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " public void reportReference( \tAstNode reference, \tTypeDeclaration typeDeclaration, \tFieldDeclaration fieldDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "diff": ["-\t */", "-\tpublic void reportReference(", "-\t\tAstNode reference,", "-\t\tTypeDeclaration typeDeclaration,", "-\t\tFieldDeclaration fieldDeclaration,", "-\t\tIJavaElement parent,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-", "-\t\tIJavaElement enclosingElement;", "-\t\tif (fieldDeclaration.isField()) {", "-\t\t\tif (parent instanceof IType) {", "-\t\t\t\t// create defining field handle", "-\t\t\t\tenclosingElement = this.createFieldHandle(fieldDeclaration, (IType)parent);", "-\t\t\t\tif (enclosingElement == null) return;", "-\t\t\t} else {", "-\t\t\t\tenclosingElement = parent;", "-\t\t\t}", "-", "-\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "-\t\t} else { // initializer", "-\t\t\tif (parent instanceof IType) {", "-\t\t\t\t// create defining initializer", "-\t\t\t\tenclosingElement =", "-\t\t\t\t\tthis.createInitializerHandle(", "-\t\t\t\t\t\ttypeDeclaration,", "-\t\t\t\t\t\tfieldDeclaration,", "-\t\t\t\t\t\t(IType)parent);", "-\t\t\t\tif (enclosingElement == null) return;", "-\t\t\t\tenclosingElement = parent;", "-\t\t\t// accept reference", "-\t\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "+ */", "+public void reportReference(", "+\tAstNode reference,", "+\tTypeDeclaration typeDeclaration,", "+\tFieldDeclaration fieldDeclaration,", "+\tIJavaElement parent,", "+\tint accuracy)", "+\tthrows CoreException {", "+", "+\tIJavaElement enclosingElement;", "+\tif (parent instanceof IType) {", "+\t\tenclosingElement = fieldDeclaration.isField()", "+\t\t\t? (IJavaElement) createFieldHandle(fieldDeclaration, (IType) parent)", "+\t\t\t: (IJavaElement) createInitializerHandle(typeDeclaration, fieldDeclaration, (IType) parent);", "+\t\tif (enclosingElement == null) return;", "+\t} else {", "+\t\tenclosingElement = parent;", "+\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2bf3535d16193256e568e44fe23f36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void reportReference( \t\tAstNode reference, \t\tAbstractMethodDeclaration methodDeclaration, \t\tIJavaElement parent, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " public void reportReference( \tAstNode reference, \tAbstractMethodDeclaration methodDeclaration, \tIJavaElement parent, \tint accuracy) \tthrows CoreException", "diff": ["-\t */", "-\tpublic void reportReference(", "-\t\tAstNode reference,", "-\t\tAbstractMethodDeclaration methodDeclaration,", "-\t\tIJavaElement parent,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-", "-\t\tIJavaElement enclosingElement;", "-\t\tif (parent instanceof IType) {", "-\t\t\t// create defining method handle", "-\t\t\tenclosingElement = this.createMethodHandle(methodDeclaration, (IType)parent);", "-\t\t\tif (enclosingElement == null) return; // case of a match found in a type other than the current class file", "-\t\t} else {", "-\t\t\tenclosingElement = parent;", "-", "-\t\t// accept reference", "-\t\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "-\t}", "+ */", "+public void reportReference(", "+\tAstNode reference,", "+\tAbstractMethodDeclaration methodDeclaration,", "+\tIJavaElement parent,", "+\tint accuracy)", "+\tthrows CoreException {", "+", "+\tIJavaElement enclosingElement;", "+\tif (parent instanceof IType) {", "+\t\tenclosingElement = createMethodHandle(methodDeclaration, (IType) parent);", "+\t\tif (enclosingElement == null) return; // case of a match found in a type other than the current class file", "+\t} else {", "+\t\tenclosingElement = parent;", "+\tthis.pattern.matchReportReference(reference, enclosingElement, accuracy, this);", "+}"]}], "num": 6143}
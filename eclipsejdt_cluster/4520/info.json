{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a5a1172da93f962a9803ab92e7cc675", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7e9dd50336cf0e700b412e259b6baf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "43a40c622936c8decaf7de7fb324b17bbd4f826e", "commitAfterChange": "68afd518b158dfb817d2e4398a2eec5681c58d58", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void createClasspathArgument(Commandline cmd, Path classpath)", "signatureAfterChange": " \tprivate void createClasspathArgument(Commandline cmd, Path classpath)", "diff": ["-\t\tfor (int i = 0; i < pathElements.length; i++) {", "+\t\tfor (int i = 0, max = pathElements.length; i < max; i++) {", "-\t\t\tresult.append(pathElements[i]);", "+\t\t\tString pathElement = pathElements[i];", "+\t\t\tresult.append(pathElement);", "-\t\t\t\tif (pathElements[i].endsWith(rules[j])) {", "+\t\t\t\tString rule = rules[j];", "+\t\t\t\tif (pathElement.endsWith(rule)) {", "+\t\t\t\t// if the path doesn't match, it could be due to a trailing file separatorChar in the rule", "+\t\t\t\tif (rule.endsWith(File.separator)) {", "+\t\t\t\t\t// rule ends with the File.separator, but pathElement might not", "+\t\t\t\t\t// otherwise it would match on the first endsWith", "+\t\t\t\t\tint ruleLength = rule.length();", "+\t\t\t\t\tif (pathElement.regionMatches(false, pathElement.length() - ruleLength + 1, rule, 0, ruleLength - 1)) {", "+\t\t\t\t\t\tresult.append(rules[j + 1]);", "+\t\t\t\t\t\tnextRule = j + 2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (pathElement.endsWith(File.separator)) {", "+\t\t\t\t\t// rule doesn't end with the File.separator, but pathElement might", "+\t\t\t\t\tint ruleLength = rule.length();", "+\t\t\t\t\tif (pathElement.regionMatches(false, pathElement.length() - ruleLength - 1, rule, 0, ruleLength)) {", "+\t\t\t\t\t\tresult.append(rules[j + 1]);", "+\t\t\t\t\t\tnextRule = j + 2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36666a476f357a75fc4f7c7f5744a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "a8929512097322e0441180b7a9eb3a250103fedb", "commitAfterChange": "428ee6cfc0b4c010dfca4624b6097930db0e92ad", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \tpublic static void writeToDisk(\r \t\tString outputPath,\r \t\tString relativeFileName,\r \t\tbyte[] contents)\r \t\tthrows IOException", "signatureAfterChange": "\r \tpublic static void writeToDisk(\r \t\tboolean generatePackagesStructure,\r \t\tString outputPath,\r \t\tString relativeFileName,\r \t\tbyte[] contents)\r \t\tthrows IOException", "diff": ["+\t\tboolean generatePackagesStructure,\r", "-\t\tBufferedOutputStream output = new BufferedOutputStream(\r", "-\t\t\tnew FileOutputStream(\r", "-\t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));\r", "+\t\tBufferedOutputStream output = null;\r", "+\t\tif (generatePackagesStructure) {\r", "+\t\t\toutput = new BufferedOutputStream(\r", "+\t\t\t\tnew FileOutputStream(\r", "+\t\t\t\t\t\tnew File(buildAllDirectoriesInto(outputPath, relativeFileName))));\r", "+\t\t} else {\r", "+\t\t\tString fileName = null;\r", "+\t\t\tchar fileSeparatorChar = File.separatorChar;\r", "+\t\t\tString fileSeparator = File.separator;\r", "+\t\t\t// First we ensure that the outputPath exists\r", "+\t\t\toutputPath = outputPath.replace('/', fileSeparatorChar);\r", "+\t\t\t// To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name\r", "+\t\t\tint indexOfPackageSeparator = relativeFileName.lastIndexOf(fileSeparatorChar);\r", "+\t\t\tif (indexOfPackageSeparator == -1) {\r", "+\t\t\t\tif (outputPath.endsWith(fileSeparator)) {\r", "+\t\t\t\t\tfileName = outputPath + relativeFileName;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tint length = relativeFileName.length();\r", "+\t\t\t\tif (outputPath.endsWith(fileSeparator)) {\r", "+\t\t\t\t\tfileName = outputPath + relativeFileName.substring(indexOfPackageSeparator + 1, length);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tfileName = outputPath + fileSeparator + relativeFileName.substring(indexOfPackageSeparator + 1, length);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\toutput = new BufferedOutputStream(\r", "+\t\t\t\tnew FileOutputStream(\r", "+\t\t\t\t\t\tnew File(fileName)));\r", "+\t\t}\r"]}], "num": 4520}
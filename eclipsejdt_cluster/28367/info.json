{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c79374daf02c8bee2f1eda5ce00b946", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817e4b7c7307d871763ec7656c943766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test006() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test006() throws JavaModelException, CoreException, UnsupportedEncodingException", "diff": ["-\t// TODO (frederic) put back assertions when failure on linux platform will be fixed", "-\tpublic void test006() throws JavaModelException, CoreException {", "+\tpublic void test006() throws JavaModelException, CoreException, UnsupportedEncodingException {", "-\t\tSystem.out.println(\"Encoding tests006:\");", "-\t\tSystem.out.println(\"  - file encoding: \"+this.utf8File.getCharset());", "-\t\tSystem.out.println(\"  - project encoding: \"+this.encodingProject.getDefaultCharset());", "-\t\tSystem.out.println(\"  - workspace encoding: \"+getWorkspaceRoot().getDefaultCharset());", "-\t\tif (encodedContents.equals(source)) {", "-\t\t\tSystem.out.println(\"  => SUCCESS: sources are identical\");", "-\t\t} else {", "-//\t\t\tSystem.out.println(\"  => FAIL: Encoded UTF-8 source should have been decoded the same way!\");", "-\t\t}", "-//\t\tassertTrue(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents.equals(source));", "+\t\tassertEquals(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents, source);", "-\t\tbyte[] sourceBytes = source.getBytes();", "+\t\tbyte[] sourceBytes = source.getBytes(systemEncoding);", "-\t\tif (encodedBytes.length == sourceBytes.length) {", "-\t\t\tSystem.out.println(\"  => SUCCESS: bytes arrays have same size\");", "-\t\t} else {", "-//\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded string\");", "-\t\t}", "-//\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "-\t\tfor (int i = 0, max = sourceBytes.length; i < max; i++) {", "-\t\t\tif (sourceBytes[i] != encodedBytes[i]) {", "-//\t\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded character at \" + i);", "-\t\t\t\tbreak;", "+\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "+\t\t// Do not compare arrays contents if system encoding is ASCII (meaningful bytes are destroyed during convertion...)", "+\t\tif (!\"ASCII\".equals(systemEncoding)) {", "+\t\t\tfor (int i = 0, max = sourceBytes.length; i < max; i++) {", "+\t\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);", "-//\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94094df5400d7237818dbd870dc0a852", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "65a63579ebc9b37573db7995b64988407cf25ede", "commitAfterChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test010() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test010() throws JavaModelException, CoreException", "diff": ["-\t// TODO (frederic) put back assertions when failure on linux platform will be fixed", "+\t\t", "+\t\t// Set encoding (be sure to have a different than system one)", "+\t\tString encoding = \"ASCII\".equals(systemEncoding) ? \"Cp1252\" : \"ASCII\";", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, \"ASCII\"));", "-//\t\tassertFalse(\"Workspace encoding: \"+getWorkspaceRoot().getDefaultCharset()+\" should be different than ASCII!\", \"ASCII\".equals(getWorkspaceRoot().getDefaultCharset()));", "-//\t\tassertFalse(\"Sources should not be the same as they were decoded with different encoding!\", encodedContents.equals(source));", "-\t\tSystem.out.println(\"Encoding tests010:\");", "-\t\tSystem.out.println(\"  - file encoding: \"+this.utf8File.getCharset());", "-\t\tSystem.out.println(\"  - project encoding: \"+this.encodingProject.getDefaultCharset());", "-\t\tSystem.out.println(\"  - workspace encoding: \"+getWorkspaceRoot().getDefaultCharset());", "-\t\tif (encodedContents.equals(source)) {", "-//\t\t\tSystem.out.println(\"  => FAIL: Sources should not be the same as they were decoded with different encoding!\");", "-\t\t} else {", "-\t\t\tSystem.out.println(\"  => SUCCESS: sources are different\");", "-\t\t}", "+\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, encoding));", "+\t\tassertFalse(\"Sources should not be the same as they were decoded with different encoding!\", encodedContents.equals(source));"]}], "num": 28367}
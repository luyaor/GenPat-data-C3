{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21f9a1fc080bebeb618e08cd5cc0e712", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0c09acba26213f26e92a1d9e6bb497", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "bfcd45867d04fefcde8c411b2c4f613fed962f2b", "commitAfterChange": "8360857ac96415dcd60ac94fbc284e7801424ade", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<IFile, Set<IFile>> lastGeneratedFiles, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<IFile, Set<IFile>> lastGeneratedFiles, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\t; // TODO: (theodora) log unclaimed annotations.", "+\t\t\t; // TODO: (theodora) log unclaimed annotations? ", "-\t\t\t// This is a documented APT behavior that we have to observe. ", "-\t\t\t// TODO: where do we put the results in the case?", "+\t\t\t// This is a documented APT behavior that we have to observe.", "-\t\t\t// Currently, we are putting everything in the first file with annotations.", "-\t\t\t// TODO: is this the correct thing to do? ", "-\t\t\t// what about the case where there are no files with annotations? ", "-\t\t\t// where to put the result? ", "-\t\t\tif( cpResults.length >  0 ){", "+\t\t\t// Currently, we are putting everything in the first file annotations.", "+\t\t\t// TODO: Is this correct?", "+\t\t\t// Why is it ok (today):", "+\t\t\t// 1) Problems are reported as IMarkers and not IProblem thru the ", "+\t\t\t// ICompilationParticipantResult API. ", "+\t\t\t// 2) jdt is currently not doing anything about the parent->generated file relation", "+\t\t\t//    so it doesn't matter which ICompilationParticipantResult we attach the ", "+\t\t\t//    creation/modification/deletion of generated files. -theodora", "+\t\t\tICompilationParticipantResult firstResult = null; ", "+\t\t\tif( cpResults.length > 0 )", "+\t\t\t\tfirstResult = cpResults[0];", "+\t\t\telse{", "+\t\t\t\tfinal ICompilationParticipantResult[] others = processorEnv.getFilesWithoutAnnotation();", "+\t\t\t\tif(others != null && others.length > 0 )", "+\t\t\t\t\tfirstResult = others[0];", "+\t\t\t}", "+\t\t\t", "+\t\t\t// If there are no files to be built, apt will not be involved.", "+\t\t\tassert firstResult != null : \"don't know where to report results\"; //$NON-NLS-1$", "+\t\t\tif(firstResult != null ){", "-\t\t\t\t\t\tcpResults[0],  // just put it all in ", "+\t\t\t\t\t\tfirstResult,  // just put it all in ", "-\t\t\t\tprocessorEnv.completedBatchProcessing();", "+\t\t\tprocessorEnv.completedBatchProcessing();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33a568e2800e6b36b0a91fffe03e0a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "55fc1d09be22c3edd63ee3458e199979c3f77613", "commitAfterChange": "84e7ccc666453bf6300ee2ec41ee2751e7c7737b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["+\tint progressLength = docsLength;", "+\tIJavaProject[] javaModelProjects = null;", "+\tif (this.searchPackageDeclaration) {", "+\t\tjavaModelProjects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tprogressLength += javaModelProjects.length;", "+\t}", "-\tint n = docsLength<1000 ? Math.min(Math.max(docsLength/200+1, 2),4) : 5 *(docsLength/1000);", "-\tthis.progressStep = docsLength < n ? 1 : docsLength / n; // step should not be 0", "+\tint n = progressLength<1000 ? Math.min(Math.max(progressLength/200+1, 2),4) : 5 *(progressLength/1000);", "+\tthis.progressStep = progressLength < n ? 1 : progressLength / n; // step should not be 0", "+\t\tSearchParticipant searchParticipant = null;", "+\t\t\tif (searchParticipant == null) {", "+\t\t\t\tsearchParticipant = searchDocument.getParticipant();", "+\t\t\t}", "-\t\t} ", "+\t\t}", "+", "+\t\tif (this.searchPackageDeclaration) {", "+\t\t\tlocatePackageDeclarations(searchParticipant, javaModelProjects);", "+\t\t}"]}], "num": 40838}
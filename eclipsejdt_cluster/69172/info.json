{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6f5c6178801138abaf3558cc3ccc51b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3341fe89ac96bdb3eae94187c074d6ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "4cbefd5ca0037578e5d1e6e4d5e9cc1d66230e61", "commitAfterChange": "799096aac19459ee2d435fdb0d7670c9935daead", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(ParameterizedTypeBinding capturedParameterizedType)", "diff": ["+\t\t// no substitution for wildcard bound (only formal bounds from type variables are to be substituted: 104082)", "-\t\tTypeBinding substitutedWildcardBound = originalWildcardBound == null ? null : Scope.substitute(capturedParameterizedType, originalWildcardBound);", "-\t\tif (substitutedWildcardBound == this) substitutedWildcardBound = originalWildcardBound;", "+//\t\tTypeBinding substitutedWildcardBound = originalWildcardBound == null ? null : Scope.substitute(capturedParameterizedType, originalWildcardBound);", "+//\t\tif (substitutedWildcardBound == this) substitutedWildcardBound = originalWildcardBound;", "-\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) substitutedWildcardBound };", "+\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) originalWildcardBound };", "-\t\t\t\t\t\tsubstitutedVariableInterfaces[0] =  (ReferenceBinding) substitutedWildcardBound;", "+\t\t\t\t\t\tsubstitutedVariableInterfaces[0] =  (ReferenceBinding) originalWildcardBound;", "-\t\t\t\t\tthis.superclass = wildcard.bound.isArrayType() ? substitutedVariableSuperclass : (ReferenceBinding)substitutedWildcardBound;", "+\t\t\t\t\tthis.superclass = wildcard.bound.isArrayType() ? substitutedVariableSuperclass : (ReferenceBinding)originalWildcardBound;", "-\t\t\t\tthis.firstBound =  substitutedWildcardBound;", "-\t\t\t\tif ((substitutedWildcardBound.tagBits & HasTypeVariable) == 0)", "+\t\t\t\tthis.firstBound =  originalWildcardBound;", "+\t\t\t\tif ((originalWildcardBound.tagBits & HasTypeVariable) == 0)", "-\t\t\t\tif (wildcardVariable.firstBound == substitutedVariableSuperclass || substitutedWildcardBound == substitutedVariableSuperclass) {", "+\t\t\t\tif (wildcardVariable.firstBound == substitutedVariableSuperclass || originalWildcardBound == substitutedVariableSuperclass) {", "-\t\t\t\tthis.lowerBound = substitutedWildcardBound;", "-\t\t\t\tif ((substitutedWildcardBound.tagBits & HasTypeVariable) == 0)", "+\t\t\t\tthis.lowerBound = originalWildcardBound;", "+\t\t\t\tif ((originalWildcardBound.tagBits & HasTypeVariable) == 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3bbcfa33fb1c9244afc500e43e4336e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "8ad7ea4a3e807d9d57eeeda9a3a7bd6598dfbdb1", "commitAfterChange": "b7a41e13e2a80300225883c3cc5ff3990406ce0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "diff": ["+\t\tif (wildcardVariable == null) {", "+\t\t\t// error resilience when capturing Zork<?>", "+\t\t\t// no substitution for wildcard bound (only formal bounds from type variables are to be substituted: 104082)", "+\t\t\tTypeBinding originalWildcardBound = wildcard.bound;\t\t\t", "+\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t// still need to capture bound supertype as well so as not to expose wildcards to the outside (111208)", "+\t\t\t\t\tTypeBinding capturedWildcardBound = originalWildcardBound.capture(scope, this.position);", "+\t\t\t\t\tif (originalWildcardBound.isInterface()) {", "+\t\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "+\t\t\t\t\t\tthis.superInterfaces = new ReferenceBinding[] { (ReferenceBinding) capturedWildcardBound };", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// the wildcard bound should be a subtype of variable superclass", "+\t\t\t\t\t\t// it may occur that the bound is less specific, then consider glb (202404)", "+\t\t\t\t\t\tif (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {", "+\t\t\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.superclass = (ReferenceBinding) capturedWildcardBound;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.firstBound =  capturedWildcardBound;", "+\t\t\t\t\tif ((capturedWildcardBound.tagBits & TagBits.HasTypeVariable) == 0)", "+\t\t\t\t\t\tthis.tagBits &= ~TagBits.HasTypeVariable;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "+\t\t\t\t\tthis.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\t\t\tthis.tagBits &= ~TagBits.HasTypeVariable;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER :", "+\t\t\t\t\tthis.superclass = scope.getJavaLangObject();", "+\t\t\t\t\tthis.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\t\t\tthis.lowerBound = wildcard.bound;", "+\t\t\t\t\tif ((originalWildcardBound.tagBits & TagBits.HasTypeVariable) == 0)", "+\t\t\t\t\t\tthis.tagBits &= ~TagBits.HasTypeVariable;\t\t\t\t\t", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "-\t\t\t\tif (wildcard.bound.isInterface()) {", "+\t\t\t\tif (originalWildcardBound.isInterface()) {"]}], "num": 69172}
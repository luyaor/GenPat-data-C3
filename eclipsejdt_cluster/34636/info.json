{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80f0c8a614c1fc284de537c9c27ecae1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3185a2b488fa37e5520f8833de294361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "6e68e9cf1522a12f0e985131be99c9578a7def47", "commitAfterChange": "97fd5cbd4b6c9f4969ee36268bca7114f34c711d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t!expressionType.isPrimitiveOrBoxedPrimitiveType() && checkCastTypesCompatibility(scope, scope.boxing(castType), expressionType, expression)) {", "+\t\t\t\t!expressionType.isBoxedPrimitiveType() && checkCastTypesCompatibility(scope, scope.boxing(castType), expressionType, expression)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea8d58d233e092372ccd63f13bf00ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\treturn checkCastTypesCompatibility(scope, ((ArrayBinding) castType).elementsType(), exprElementType, expression);\t\t\t\t\t\t", "+\t\t\t\t\t\treturn checkCastTypesCompatibility(scope, castElementType, exprElementType, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7746e75deb9e74d68f50714328c86d87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "394f9dd17363cb38ab41ca621f834f2ad413fdce", "commitAfterChange": "2b23d6b4deb8c097d394f2fa06fcc5a5e664d549", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static void checkNeedForCastCast(BlockScope scope, CastExpression enclosingCast)", "signatureAfterChange": " public static void checkNeedForCastCast(BlockScope scope, CastExpression enclosingCast)", "diff": ["-\tif (!alternateCast.checkCastTypesCompatibility(scope, enclosingCast.resolvedType, nestedCast.expression.resolvedType, nestedCast.expression)) {", "-\t\treturn;", "-\t}", "+\tif (!alternateCast.checkCastTypesCompatibility(scope, enclosingCast.resolvedType, nestedCast.expression.resolvedType, null /* no expr to avoid side-effects*/)) return;"]}], "num": 34636}
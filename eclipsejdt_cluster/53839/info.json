{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2e446b4d25572f94a870cc39c726e71", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9facb73b759ec947886bd6acf093730a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreAnnotationCompletionContext(MemberValuePair memberValuePair)", "signatureAfterChange": " private void buildMoreAnnotationCompletionContext(MemberValuePair memberValuePair)", "diff": ["-\tMemberValuePair[] memberValuePairs = null;", "-\tint length;", "-\tif (astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > nodesToRemove) {", "-\t\tif (this.astStack[this.astPtr] instanceof MemberValuePair) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack, ", "-\t\t\t\t(this.astPtr -= length) + 1, ", "-\t\t\t\tmemberValuePairs = new MemberValuePair[length - nodesToRemove], ", "-\t\t\t\t0, ", "-\t\t\t\tlength - nodesToRemove); ", "+\tNormalAnnotation annotation;", "+\tif (memberValuePair instanceof CompletionOnMemberValueName) { ", "+\t\tMemberValuePair[] memberValuePairs = null;", "+\t\tint length;", "+\t\tif (astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > nodesToRemove) {", "+\t\t\tif (this.astStack[this.astPtr] instanceof MemberValuePair) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack, ", "+\t\t\t\t\t(this.astPtr -= length) + 1, ", "+\t\t\t\t\tmemberValuePairs = new MemberValuePair[length - nodesToRemove], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength - nodesToRemove); ", "+\t\t\t}", "+\t\tannotation =", "+\t\t\tnew CompletionOnAnnotationMemberValuePair(", "+\t\t\t\t\ttypeReference,", "+\t\t\t\t\tthis.intStack[this.intPtr--],", "+\t\t\t\t\tmemberValuePairs,", "+\t\t\t\t\tmemberValuePair);", "+\t\t", "+\t\tthis.assistNode = memberValuePair;", "+\t\tthis.assistNodeParent = annotation;", "+\t\t", "+\t\tif (memberValuePair.sourceEnd >= this.lastCheckPoint) {", "+\t\t\tthis.lastCheckPoint = memberValuePair.sourceEnd + 1;", "+\t\t}", "+\t} else {", "+\t\tMemberValuePair[] memberValuePairs = null;", "+\t\tint length = 0;", "+\t\tif (astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > nodesToRemove) {", "+\t\t\tif (this.astStack[this.astPtr] instanceof MemberValuePair) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack, ", "+\t\t\t\t\t(this.astPtr -= length) + 1, ", "+\t\t\t\t\tmemberValuePairs = new MemberValuePair[length - nodesToRemove + 1], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength - nodesToRemove); ", "+\t\t\t}", "+\t\t\tif(memberValuePairs != null) {", "+\t\t\t\tmemberValuePairs[length - nodesToRemove] = memberValuePair;", "+\t\t\t} else {", "+\t\t\t\tmemberValuePairs = new MemberValuePair[]{memberValuePair};", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmemberValuePairs = new MemberValuePair[]{memberValuePair};", "+\t\t}", "+\t\t", "+\t\tannotation =", "+\t\t\tnew NormalAnnotation(", "+\t\t\t\t\ttypeReference,", "+\t\t\t\t\tthis.intStack[this.intPtr--]);", "+\t\tannotation.memberValuePairs = memberValuePairs;", "+\t\t\t\t\t", "-\t", "-\tCompletionOnAnnotationMemberValuePair annotation =", "-\t\tnew CompletionOnAnnotationMemberValuePair(typeReference, this.intStack[this.intPtr--], memberValuePairs, memberValuePair);", "-\t", "-\tthis.assistNode = memberValuePair;", "-\tthis.assistNodeParent = annotation;", "-\tif (memberValuePair.sourceEnd >= this.lastCheckPoint) {", "-\t\tthis.lastCheckPoint = memberValuePair.sourceEnd + 1;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1789c1f272b001ec87237e552c2e4bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "650b0ff91a25195076fe8172a54a4aa40ce6af7c", "commitAfterChange": "77dc1b979b190c8f4c20c92eb16637634d3bb63b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tMemberValuePair[] valuePairs = memberValuePairs();", "+\t\tMemberValuePair[] originalValuePairs = memberValuePairs();", "-\t\tMemberValuePair[] usedValuePairs;", "-\t\tint pairsLength = valuePairs.length;", "-\t\tSystem.arraycopy(valuePairs, 0, usedValuePairs = new MemberValuePair[pairsLength], 0, pairsLength);", "+\t\tMemberValuePair[] pairs;", "+\t\tint pairsLength = originalValuePairs.length;", "+\t\tSystem.arraycopy(originalValuePairs, 0, pairs = new MemberValuePair[pairsLength], 0, pairsLength);", "-\t\t\t\tMemberValuePair valuePair = usedValuePairs[j];", "-\t\t\t\tif (valuePair == null) continue nextPair;", "-\t\t\t\tchar[] memberName = valuePair.name;", "-\t\t\t\tif (CharOperation.equals(memberName, selector)) {", "-\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(memberName, TypeConstants.VALUE)) {", "-\t\t\t\t\t\tvalueAttribute = valuePair;", "+\t\t\t\tMemberValuePair pair = pairs[j];", "+\t\t\t\tif (pair == null) continue nextPair;", "+\t\t\t\tchar[] name = pair.name;", "+\t\t\t\tif (CharOperation.equals(name, selector)) {", "+\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(name, TypeConstants.VALUE)) {", "+\t\t\t\t\t\tvalueAttribute = pair;", "-\t\t\t\t\tvaluePair.binding = method;", "-\t\t\t\t\tusedValuePairs[j] = null; // consumed", "+\t\t\t\t\tpair.binding = method;", "+\t\t\t\t\tpair.resolveTypeExpecting(scope, method.returnType);", "+\t\t\t\t\tpairs[j] = null; // consumed", "+\t\t\t\t\t", "+\t\t\t\t\t// check duplicates", "-\t\t\t\t\t\tif (CharOperation.equals(usedValuePairs[k].name, selector)) {", "+\t\t\t\t\t\tMemberValuePair otherPair = pairs[k];", "+\t\t\t\t\t\tif (otherPair == null) continue;", "+\t\t\t\t\t\tif (CharOperation.equals(otherPair.name, selector)) {", "-\t\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, usedValuePairs[k]);", "-\t\t\t\t\t\t\tusedValuePairs[k].binding = method;", "-\t\t\t\t\t\t\tusedValuePairs[k] = null;", "+\t\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, otherPair);", "+\t\t\t\t\t\t\totherPair.binding = method;", "+\t\t\t\t\t\t\totherPair.resolveTypeExpecting(scope, method.returnType);", "+\t\t\t\t\t\t\tpairs[k] = null;", "-\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, valuePair);", "+\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, pair);", "-\t\t\t\t\tvaluePair.resolveTypeExpecting(scope, method.returnType);", "-\t\t\t\tscope.problemReporter().missingValueForAnnotationMember(this, method.selector);", "+\t\t\t\tscope.problemReporter().missingValueForAnnotationMember(this, selector);", "-\t\t\tif (usedValuePairs[i] != null) {", "-\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, usedValuePairs[i]);", "+\t\t\tif (pairs[i] != null) {", "+\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);"]}], "num": 53839}
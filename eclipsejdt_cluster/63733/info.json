{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a5b630faabf67486c81e5d7fbcb443a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86ff600bca8ec6d8aca45ee0568f3fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void invokeStringConcatenationAppendForType(int typeID)", "signatureAfterChange": " public void invokeStringConcatenationAppendForType(int typeID)", "diff": ["-\tcountLabels = 0;", "-\tint usedTypeID;", "-\tif (typeID == T_null) {", "-\t\tusedTypeID = T_String;", "-\t} else {", "-\t\tusedTypeID = typeID;", "+\tint argCount = 1;", "+\tint returnType = 1;", "+\tchar[] declarinClass = null;", "+\tchar[] selector = QualifiedNamesConstants.Append;", "+\tchar[] signature = null;", "+\tswitch (typeID) {", "+\t\tcase T_int :", "+\t\tcase T_byte :", "+\t\tcase T_short :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendIntSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendIntSignature;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase T_long :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendLongSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendLongSignature;", "+\t\t\t}", "+\t\t\targCount = 2;", "+\t\t\tbreak;", "+\t\tcase T_float :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendFloatSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendFloatSignature;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase T_double :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendDoubleSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendDoubleSignature;", "+\t\t\t}", "+\t\t\targCount = 2;", "+\t\t\tbreak;", "+\t\tcase T_char :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendCharSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendCharSignature;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase T_boolean :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendBooleanSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendBooleanSignature;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase T_Object :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendObjectSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendObjectSignature;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase T_String :", "+\t\tcase T_null :", "+\t\t\tif (this.targetLevel >= JDK1_5) {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBuilderAppendStringSignature;", "+\t\t\t} else {", "+\t\t\t\tdeclarinClass = QualifiedNamesConstants.JavaLangStringBufferConstantPoolName;", "+\t\t\t\tsignature = QualifiedNamesConstants.StringBufferAppendStringSignature;", "+\t\t\t}", "+\t\t\tbreak;", "-\t// invokevirtual", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tposition++;", "-\tbCodeStream[classFileOffset++] = OPC_invokevirtual;", "-\tif (this.targetLevel >= JDK1_5) {", "-\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangStringBuilderAppend(typeID));", "-\t} else {", "-\t\twriteUnsignedShort(constantPool.literalIndexForJavaLangStringBufferAppend(typeID));", "-\t}", "-\tif ((usedTypeID == T_long) || (usedTypeID == T_double)) {", "-\t\tstackDepth -= 2;", "-\t} else {", "-\t\tstackDepth--;", "-\t}", "+\tthis.invoke(", "+\t\t\tOPC_invokevirtual,", "+\t\t\targCount, // argCount", "+\t\t\treturnType, // return type size", "+\t\t\tdeclarinClass,", "+\t\t\tselector,", "+\t\t\tsignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd38e4197032d3286fbffce723a0931a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 467, "methodNumberAfterChange": 272, "signatureBeforeChange": " public void messageSendRedundantCheckOnNonNull(MethodBinding method, ASTNode location)", "signatureAfterChange": " public boolean expressionNonNullComparison(Expression expr, boolean checkForNull)", "diff": ["+ */", "+public boolean expressionNonNullComparison(Expression expr, boolean checkForNull) {", "+\tint problemId;", "+\tBinding binding;", "+\tString[] arguments;", "+\tint start, end;", "+", "+\tExpression location = expr;", "+\t// unwrap uninteresting nodes:", "+\twhile (true) {", "+\t\tif (expr instanceof Assignment)", "+\t\t\treturn false; // don't report against the assignment, but the variable", "+\t\telse if (expr instanceof CastExpression)", "+\t\t\texpr = ((CastExpression) expr).expression;", "+\t\telse", "+\t\t\tbreak;", "+\t}", "+\t// check all those kinds of expressions that can possible answer NON_NULL from nullStatus():", "+\tif (expr instanceof MessageSend) {", "+\t\tproblemId = checkForNull ", "+\t\t\t\t? IProblem.NonNullMessageSendComparisonYieldsFalse", "+\t\t\t\t: IProblem.RedundantNullCheckOnNonNullMessageSend;", "+\t\tMethodBinding method = ((MessageSend)expr).binding;", "+\t\tbinding = method;", "+\t\targuments = new String[] { new String(method.shortReadableName()) };", "+\t\tstart = location.sourceStart;", "+\t\tend = location.sourceEnd;", "+\t} else if (expr instanceof Reference && !(expr instanceof ThisReference) && !(expr instanceof ArrayReference)) {", "+\t\tFieldBinding field = ((Reference)expr).lastFieldBinding();", "+\t\tif (field == null) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (field.isNonNull()) {", "+\t\t\tproblemId = checkForNull", "+\t\t\t\t\t? IProblem.NonNullSpecdFieldComparisonYieldsFalse", "+\t\t\t\t\t: IProblem.RedundantNullCheckOnNonNullSpecdField;", "+\t\t\tchar[][] nonNullName = this.options.nonNullAnnotationName;", "+\t\t\targuments = new String[] { new String(field.name), ", "+\t\t\t\t\t\t\t\t\t   new String(nonNullName[nonNullName.length-1]) };", "+\t\t} else {", "+\t\t\tproblemId = checkForNull", "+\t\t\t\t\t? IProblem.NonNullFieldComparisonYieldsFalse", "+\t\t\t\t\t: IProblem.RedundantNullCheckOnNonNullField;", "+\t\t\targuments = new String[] { new String(field.name) };", "+\t\t}", "+\t\tbinding = field;", "+\t\tstart = nodeSourceStart(binding, location);", "+\t\tend = nodeSourceEnd(binding, location);", "+\t} else if (expr instanceof AllocationExpression ", "+\t\t\t|| expr instanceof ArrayAllocationExpression ", "+\t\t\t|| expr instanceof ArrayInitializer", "+\t\t\t|| expr instanceof ClassLiteralAccess", "+\t\t\t|| expr instanceof ThisReference) {", "+\t\tproblemId = checkForNull ", "+\t\t\t\t? IProblem.NonNullExpressionComparisonYieldsFalse", "+\t\t\t\t: IProblem.RedundantNullCheckOnNonNullExpression;", "+\t\tstart = location.sourceStart;", "+\t\tend = location.sourceEnd;", "+\t\targuments = NoArgument;", "+\t} else if (expr instanceof Literal) {", "+\t\tif (expr instanceof NullLiteral) {", "+\t\t\tneedImplementation(location); // reported as nonnull??", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (expr.resolvedType != null && expr.resolvedType.isBaseType()) {", "+\t\t\t// false alarm, auto(un)boxing is involved", "+\t\t\treturn false;", "+\t\t}", "+\t\tproblemId = checkForNull ", "+\t\t\t\t? IProblem.NonNullExpressionComparisonYieldsFalse", "+\t\t\t\t: IProblem.RedundantNullCheckOnNonNullExpression;", "+\t\tstart = location.sourceStart;", "+\t\tend = location.sourceEnd;", "+\t\targuments = NoArgument;", "+\t} else if (expr instanceof ConditionalExpression) {", "+\t\tneedImplementation(location); // TODO", "+\t\treturn false;", "+\t} else {", "+\t\tneedImplementation(expr);", "+\t\treturn false;", "+\t}", "+\tthis.handle(problemId, arguments, arguments, start, end);", "+\treturn true;", "+}", "-}", "-public void messageSendRedundantCheckOnNonNull(MethodBinding method, ASTNode location) {", "-\tString[] arguments = new String[] {new String(method.readableName())  };", "-\tthis.handle(", "-\t\tIProblem.RedundantNullCheckOnNonNullMessageSend,"]}], "num": 63733}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e49716ed02cd269c6179676a58327bb7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b9fb397612a3f639fb808e0a8ea3203", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void format()", "signatureAfterChange": " \tprivate void format()", "diff": ["-\t\t\t\tif (token == Scanner.TokenNameEOF)", "+\t\t\t\tif (token == TerminalTokens.TokenNameEOF)", "-\t\t\t\tif (clearNonBlockIndents && (token != Scanner.TokenNameWHITESPACE)) {", "+\t\t\t\tif (clearNonBlockIndents && (token != TerminalTokens.TokenNameWHITESPACE)) {", "-\t\t\t\tif (token == Scanner.TokenNamethrows) {", "+\t\t\t\tif (token == TerminalTokens.TokenNamethrows) {", "-\t\t\t\tif ((token == Scanner.TokenNameclass || token == Scanner.TokenNameinterface) && previousToken != Scanner.TokenNameDOT) {", "+\t\t\t\tif ((token == TerminalTokens.TokenNameclass || token == TerminalTokens.TokenNameinterface) && previousToken != TerminalTokens.TokenNameDOT) {", "-\t\t\t\tif (pendingNewlineAfterParen && token != Scanner.TokenNameWHITESPACE) {", "+\t\t\t\tif (pendingNewlineAfterParen && token != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t&& token != Scanner.TokenNameWHITESPACE) {", "+\t\t\t\t\t&& token != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\tpreviousToken == Scanner.TokenNameCOMMENT_BLOCK && token == TokenNameLBRACE;", "+\t\t\t\t\t\tpreviousToken == TerminalTokens.TokenNameCOMMENT_BLOCK && token == TokenNameLBRACE;", "-\t\t\t\t\t\t\tif (!((previousToken == Scanner.TokenNameCOMMENT_BLOCK", "-\t\t\t\t\t\t\t\t|| previousToken == Scanner.TokenNameCOMMENT_JAVADOC)", "+\t\t\t\t\t\t\tif (!((previousToken == TerminalTokens.TokenNameCOMMENT_BLOCK", "+\t\t\t\t\t\t\t\t|| previousToken == TerminalTokens.TokenNameCOMMENT_JAVADOC)", "-\t\t\t\t\t\tif (previousToken == Scanner.TokenNameCOMMENT_LINE && inAssignment) {", "+\t\t\t\t\t\tif (previousToken == TerminalTokens.TokenNameCOMMENT_LINE && inAssignment) {", "-\t\t\t\t\tcase Scanner.TokenNameCOMMENT_LINE :", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "-\t\t\t\t\tcase Scanner.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\tcase Scanner.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\tcase Scanner.TokenNameWHITESPACE :", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE :", "-\t\t\t\tif (token != Scanner.TokenNameWHITESPACE) {", "+\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\t&& previousToken != Scanner.TokenNameCOMMENT_LINE) {", "+\t\t\t\t\t\t&& previousToken != TerminalTokens.TokenNameCOMMENT_LINE) {", "-\t\t\t\t\tif (token == Scanner.TokenNameCOMMENT_LINE && openParenthesisCount > 1) {", "+\t\t\t\t\tif (token == TerminalTokens.TokenNameCOMMENT_LINE && openParenthesisCount > 1) {", "-\t\t\t\tif (token != Scanner.TokenNameWHITESPACE) {", "+\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\tif (token != Scanner.TokenNameCOMMENT_BLOCK", "-\t\t\t\t\t\t&& token != Scanner.TokenNameCOMMENT_LINE", "-\t\t\t\t\t\t&& token != Scanner.TokenNameCOMMENT_JAVADOC) {", "+\t\t\t\t\tif (token != TerminalTokens.TokenNameCOMMENT_BLOCK", "+\t\t\t\t\t\t&& token != TerminalTokens.TokenNameCOMMENT_LINE", "+\t\t\t\t\t\t&& token != TerminalTokens.TokenNameCOMMENT_JAVADOC) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634525ed5706c65281c8519d1212271c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "829b5d6c0fd9442407ed5d0be6ed8177d80d3792", "commitAfterChange": "2996adbc84ee533860ed3db3015812d956d4e3af", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tprivate void format()", "signatureAfterChange": "\r \tprivate void format()", "diff": ["-\t\t\t\t\tcase TokenNamesynchronized :\r", "-\t\t\t\t\t\tindentationLevel += pushControlStatement(token);\r", "-\t\t\t\t\t\tbreak;\r", "-\r", "-\t\t\t\t\t\t// Put a space between the previous and current token if the\r", "-\t\t\t\t\t\t// previous token was not a keyword, open paren, logical\r", "-\t\t\t\t\t\t// compliment (eg: !), semi-colon, open brace, close brace,\r", "-\t\t\t\t\t\t// super, or this.\r", "-\t\t\t\t\t\tif (previousCompilableToken != TokenNameLBRACKET\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameIdentifier\r", "-\t\t\t\t\t\t\t&& previousToken != 0\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameNOT\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameLPAREN\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameTWIDDLE\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameSEMICOLON\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameLBRACE\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameRBRACE\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNamesuper\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNamethis) {\r", "-\t\t\t\t\t\t\tspace();\r", "+\t\t\t\t\t\tif (previousToken == TokenNamesynchronized) {\r", "+\t\t\t\t\t\t\tindentationLevel += pushControlStatement(previousToken);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// Put a space between the previous and current token if the\r", "+\t\t\t\t\t\t\t// previous token was not a keyword, open paren, logical\r", "+\t\t\t\t\t\t\t// compliment (eg: !), semi-colon, open brace, close brace,\r", "+\t\t\t\t\t\t\t// super, or this.\r", "+\t\t\t\t\t\t\tif (previousCompilableToken != TokenNameLBRACKET\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameIdentifier\r", "+\t\t\t\t\t\t\t\t&& previousToken != 0\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameNOT\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameLPAREN\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameTWIDDLE\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameSEMICOLON\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameLBRACE\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameRBRACE\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNamesuper\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNamethis) {\r", "+\t\t\t\t\t\t\t\tspace();\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t// If in a for/if/while statement, increase the parenthesis count\r", "+\t\t\t\t\t\t\t// for the current openParenthesisCount\r", "+\t\t\t\t\t\t\t// else increase the count for stand alone parenthesis.\r", "+\t\t\t\t\t\t\tif (openParenthesisCount > 0)\r", "+\t\t\t\t\t\t\t\topenParenthesis[openParenthesisCount - 1]++;\r", "+\t\t\t\t\t\t\telse\r", "+\t\t\t\t\t\t\t\topenParenthesis[0]++;\r", "+\t\r", "+\t\t\t\t\t\t\tpendingSpace = false;\r", "-\t\t\t\t\t\t// If in a for/if/while statement, increase the parenthesis count\r", "-\t\t\t\t\t\t// for the current openParenthesisCount\r", "-\t\t\t\t\t\t// else increase the count for stand alone parenthesis.\r", "-\t\t\t\t\t\tif (openParenthesisCount > 0)\r", "-\t\t\t\t\t\t\topenParenthesis[openParenthesisCount - 1]++;\r", "-\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\topenParenthesis[0]++;\r", "-\r", "-\t\t\t\t\t\tpendingSpace = false;\r"]}], "num": 34211}
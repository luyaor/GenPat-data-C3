{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f120781d750537c9acfb8c02f407b4cd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6969ad557a81f303e03f2f4ce18dc1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "784f86ce6732cf119976248cf85d648b31a1b3eb", "commitAfterChange": "04ca8b8834b8d337f24654f163a38f7df436213a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "signatureAfterChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "diff": ["-\t\t\tthis.restartRecovery = true;", "+\t\tthis.restartRecovery = true;", "-\t\t\tASTNode assistNodeParent = this.assistNodeParent();", "-\t\t\tASTNode enclosingNode = this.enclosingNode();", "-\t\t\tif (assistNodeParent != null || enclosingNode != null) {", "-\t\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) (this.currentElement instanceof RecoveredBlock ? this.currentElement : ", "-\t\t\t\t\t(this.currentElement.parent instanceof RecoveredBlock) ? this.currentElement.parent : null);", "-\t\t\t\tif (recoveredBlock != null) {", "-\t\t\t\t\tRecoveredStatement recoveredStatement = recoveredBlock.statementCount > 0 ? recoveredBlock.statements[recoveredBlock.statementCount - 1] : null;", "-\t\t\t\t\tASTNode parseTree = recoveredStatement != null ? recoveredStatement.updatedStatement(0, new HashSet()) : null;", "-\t\t\t\t\tif (parseTree != null) {", "-\t\t\t\t\t\tif (parseTree == assistNodeParent || parseTree == enclosingNode) {", "-\t\t\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "-\t\t\t\t\t\t\tthis.currentElement = recoveredBlock;", "-\t\t\t\t\t\t} else if (recoveredStatement instanceof RecoveredLocalVariable && statement instanceof Expression) {", "-\t\t\t\t\t\t\tRecoveredLocalVariable local = (RecoveredLocalVariable) recoveredStatement;", "-\t\t\t\t\t\t\tif (local.localDeclaration.initialization == assistNodeParent || local.localDeclaration.initialization == enclosingNode) {", "+\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) (this.currentElement instanceof RecoveredBlock ? this.currentElement : ", "+\t\t\t\t(this.currentElement.parent instanceof RecoveredBlock) ? this.currentElement.parent : null);", "+\t\t\tif (recoveredBlock != null) {", "+\t\t\t\tRecoveredStatement recoveredStatement = recoveredBlock.statementCount > 0 ? recoveredBlock.statements[recoveredBlock.statementCount - 1] : null;", "+\t\t\t\tASTNode parseTree = recoveredStatement != null ? recoveredStatement.updatedStatement(0, new HashSet()) : null;", "+\t\t\t\tif (parseTree != null) {", "+\t\t\t\t\tif ((parseTree.sourceStart == 0 || parseTree.sourceEnd == 0) || (parseTree.sourceStart >= statementStart && parseTree.sourceEnd <= statementEnd)) {", "+\t\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t\t\t\t\t\tthis.currentElement = recoveredBlock;", "+\t\t\t\t\t} else if (recoveredStatement instanceof RecoveredLocalVariable && statement instanceof Expression) {", "+\t\t\t\t\t\tRecoveredLocalVariable local = (RecoveredLocalVariable) recoveredStatement;", "+\t\t\t\t\t\tif (local.localDeclaration != null && local.localDeclaration.initialization != null) {", "+\t\t\t\t\t\t\tif ((local.localDeclaration.initialization.sourceStart == 0 || local.localDeclaration.initialization.sourceEnd == 0) || ", "+\t\t\t\t\t\t\t        (local.localDeclaration.initialization.sourceStart >= statementStart && local.localDeclaration.initialization.sourceEnd <= statementEnd) ){", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eafb4fbae34f6673792491e010bb5de6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "960355229c2ea09e53eb1c6516e1cb899329bdcc", "commitAfterChange": "90446deb5ff00e2c453829fc18ea8a59d5a8861c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "signatureAfterChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "diff": ["-\t", "+", "-\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) (this.currentElement instanceof RecoveredBlock ? this.currentElement : ", "-\t\t\t\t(this.currentElement.parent instanceof RecoveredBlock) ? this.currentElement.parent : ", "-\t\t\t\t\tthis.currentElement instanceof RecoveredMethod ? ((RecoveredMethod) this.currentElement).methodBody : null);", "-\t\t\tif (recoveredBlock != null) {", "-\t\t\t\tRecoveredStatement recoveredStatement = recoveredBlock.statementCount > 0 ? recoveredBlock.statements[recoveredBlock.statementCount - 1] : null;", "-\t\t\t\tASTNode parseTree = recoveredStatement != null ? recoveredStatement.updatedStatement(0, new HashSet()) : null;", "-\t\t\t\tif (parseTree != null) {", "-\t\t\t\t\tif ((parseTree.sourceStart == 0 || parseTree.sourceEnd == 0) || (parseTree.sourceStart >= statementStart && parseTree.sourceEnd <= statementEnd)) {", "-\t\t\t\t\t\trecoveredBlock.statements[recoveredBlock.statementCount - 1] = new RecoveredStatement(statement, recoveredBlock, 0);", "-\t\t\t\t\t\tstatement = null;", "-\t\t\t\t\t} else if (recoveredStatement instanceof RecoveredLocalVariable && statement instanceof Expression) {", "-\t\t\t\t\t\tRecoveredLocalVariable local = (RecoveredLocalVariable) recoveredStatement;", "-\t\t\t\t\t\tif (local.localDeclaration != null && local.localDeclaration.initialization != null) {", "-\t\t\t\t\t\t\tif ((local.localDeclaration.initialization.sourceStart == 0 || local.localDeclaration.initialization.sourceEnd == 0) || ", "-\t\t\t\t\t\t\t        (local.localDeclaration.initialization.sourceStart >= statementStart && local.localDeclaration.initialization.sourceEnd <= statementEnd) ){", "-\t\t\t\t\t\t\t\tlocal.localDeclaration.initialization = (Expression) statement;", "-\t\t\t\t\t\t\t\tlocal.localDeclaration.declarationSourceEnd = statement.sourceEnd;", "-\t\t\t\t\t\t\t\tlocal.localDeclaration.declarationEnd = statement.sourceEnd;", "-\t\t\t\t\t\t\t\tstatement = null;", "+\t\t\t/*", "+\t\t\t * All the above comments will not work if the assist node is buried deeper. This happens when there the ", "+\t\t\t * lambda was part of a complex statement, such as it was one of the arguments to a method invocation. In which case,", "+\t\t\t * we start from the topmost recovery element and look for assist nodes. If the operation is successful, the method", "+\t\t\t * replaceAssistStatement() returns null. Else, it returns the original statement, thus falling back to replacing the", "+\t\t\t * last statement in the current recovered element.", "+\t\t\t */", "+\t\t\tstatement = replaceAssistStatement(this.currentElement.topElement(),", "+\t\t\t\t\tthis.assistNodeParent(), statementStart, statementEnd, statement);", "+\t\t\t", "+\t\t\tif (statement != null) {", "+\t\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) (this.currentElement instanceof RecoveredBlock ? this.currentElement : ", "+\t\t\t\t\t(this.currentElement.parent instanceof RecoveredBlock) ? this.currentElement.parent : ", "+\t\t\t\t\t\tthis.currentElement instanceof RecoveredMethod ? ((RecoveredMethod) this.currentElement).methodBody : null);", "+\t\t\t\tif (recoveredBlock != null) {", "+\t\t\t\t\tRecoveredStatement recoveredStatement = recoveredBlock.statementCount > 0 ? recoveredBlock.statements[recoveredBlock.statementCount - 1] : null;", "+\t\t\t\t\tASTNode parseTree = recoveredStatement != null ? recoveredStatement.updatedStatement(0, new HashSet()) : null;", "+\t\t\t\t\tif (parseTree != null) {", "+\t\t\t\t\t\tif ((parseTree.sourceStart == 0 || parseTree.sourceEnd == 0) || (parseTree.sourceStart >= statementStart && parseTree.sourceEnd <= statementEnd)) {", "+\t\t\t\t\t\t\trecoveredBlock.statements[recoveredBlock.statementCount - 1] = new RecoveredStatement(statement, recoveredBlock, 0);", "+\t\t\t\t\t\t\tstatement = null;", "+\t\t\t\t\t\t} else if (recoveredStatement instanceof RecoveredLocalVariable && statement instanceof Expression) {", "+\t\t\t\t\t\t\tRecoveredLocalVariable local = (RecoveredLocalVariable) recoveredStatement;", "+\t\t\t\t\t\t\tif (local.localDeclaration != null && local.localDeclaration.initialization != null) {", "+\t\t\t\t\t\t\t\tif ((local.localDeclaration.initialization.sourceStart == 0 || local.localDeclaration.initialization.sourceEnd == 0) || ", "+\t\t\t\t\t\t\t\t        (local.localDeclaration.initialization.sourceStart >= statementStart && local.localDeclaration.initialization.sourceEnd <= statementEnd) ){", "+\t\t\t\t\t\t\t\t\tlocal.localDeclaration.initialization = (Expression) statement;", "+\t\t\t\t\t\t\t\t\tlocal.localDeclaration.declarationSourceEnd = statement.sourceEnd;", "+\t\t\t\t\t\t\t\t\tlocal.localDeclaration.declarationEnd = statement.sourceEnd;", "+\t\t\t\t\t\t\t\t\tstatement = null;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t"]}], "num": 13456}
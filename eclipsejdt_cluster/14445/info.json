{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc35962df41b660585800742f8653b6b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "496743c41d2e4a5cf77e918bf4151264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic ArrayBinding getArrayType(TypeBinding leafComponentType, int dimensions, AnnotationBinding [] annotations)", "signatureAfterChange": " \tpublic ArrayBinding getArrayType(TypeBinding leafType, int dimensions, AnnotationBinding [] annotations)", "diff": ["+\t*/", "+\tpublic ArrayBinding getArrayType(TypeBinding leafType, int dimensions, AnnotationBinding [] annotations) {", "+\t\t", "+\t\tArrayBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(leafType);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) break;", "+\t\t\tif (!derivedType.isArrayType() || derivedType.dimensions() != dimensions || derivedType.leafComponentType() != leafType)", "+\t\t\t\tcontinue;", "+\t\t\tif (Util.effectivelyEqual(derivedType.getTypeAnnotations(), annotations)) ", "+\t\t\t\treturn (ArrayBinding) derivedType;", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = (ArrayBinding) derivedType;", "+\t\t}", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = super.getArrayType(leafType, dimensions);", "+\t\t", "+\t\tif (!haveTypeAnnotations(leafType, annotations))", "+\t\t\treturn nakedType;", "+", "+\t\tArrayBinding arrayType = new ArrayBinding(leafType, dimensions, this.environment);", "+\t\tarrayType.id = nakedType.id;", "+\t\tarrayType.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\treturn (ArrayBinding) cacheDerivedType(leafType, nakedType, arrayType);", "+\t}", "-\t*/", "-\tpublic ArrayBinding getArrayType(TypeBinding leafComponentType, int dimensions, AnnotationBinding [] annotations) {", "-\t\t", "-\t\tif (!haveTypeAnnotations(leafComponentType, annotations))", "-\t\t\treturn this.unannotatedTypeSystem.getArrayType(leafComponentType, dimensions);", "-\t\t", "-\t\t//  Leaf component type can be an annotated type.", "-\t\tTypeBinding keyType = getUnannotatedType(leafComponentType);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);  // unannotated key promotes better instance sharing.", "-\t\tint index = 0;", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++) {", "-\t\t\t\tTypeBinding cachedType = cachedInfo[index];", "-\t\t\t\tif (cachedType == null) break;", "-\t\t\t\tif (cachedType.leafComponentType() != leafComponentType) continue;", "-\t\t\t\tif (cachedType.isArrayType() && cachedType.dimensions() == dimensions && Util.effectivelyEqual(cachedType.getTypeAnnotations(), annotations)) ", "-\t\t\t\t\treturn (ArrayBinding) cachedType;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "-\t\t}", "-\t\t", "-\t\tint length = cachedInfo.length;", "-\t\tif (index == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);", "-\t\t}", "-\t\t// Add the newcomer, ensuring its identity is the same as the naked version of it.", "-\t\tArrayBinding unannotatedArrayType = this.unannotatedTypeSystem.getArrayType(leafComponentType, dimensions);", "-\t\tTypeBinding arrayBinding = new ArrayBinding(leafComponentType, dimensions, this.environment);", "-\t\tarrayBinding.id = unannotatedArrayType.id;", "-\t\tarrayBinding.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn (ArrayBinding) (cachedInfo[index] = arrayBinding);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c82debc78997568800b129aea8f78c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding [] annotations)", "signatureAfterChange": " \t \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding [] annotations)", "diff": ["-", "-\t\t", "-\t\tif (!haveTypeAnnotations(genericType, bound, otherBounds, annotations))", "-\t\t\treturn this.unannotatedTypeSystem.getWildcard(genericType, rank, bound, otherBounds, boundKind);", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);  // promotes better instance sharing.", "-\t\tint index = 0;", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++) {", "-\t\t\t\tTypeBinding cachedType = cachedInfo[index];", "-\t\t\t\tif (cachedType == null) ", "-\t\t\t\t\tbreak;", "-\t\t\t\tif (!cachedType.isWildcard())", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (cachedType.rank() != rank || cachedType.boundKind() != boundKind || cachedType.bound() != bound)", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (Util.effectivelyEqual(cachedType.additionalBounds(), otherBounds) && Util.effectivelyEqual(cachedType.getTypeAnnotations(), annotations))", "-\t\t\t\t\treturn (WildcardBinding) cachedType;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "+\t\tWildcardBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(genericType);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) ", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isWildcard() || derivedType.actualType() != genericType || derivedType.rank() != rank)", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.boundKind() != boundKind || derivedType.bound() != bound || !Util.effectivelyEqual(derivedType.additionalBounds(), otherBounds))", "+\t\t\t\tcontinue;", "+\t\t\tif (Util.effectivelyEqual(derivedType.getTypeAnnotations(), annotations))", "+\t\t\t\treturn (WildcardBinding) derivedType;", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = (WildcardBinding) derivedType;", "-", "-\t\tint length = cachedInfo.length;", "-\t\tif (index == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);", "-\t\t}", "-\t\t// Add the new comer, retaining the same type binding id as the naked type.", "-\t\tTypeBinding unannotatedWildcard = this.unannotatedTypeSystem.getWildcard(genericType, rank, bound, otherBounds, boundKind);", "-\t\tTypeBinding wildcard = new WildcardBinding(genericType, rank, bound, otherBounds, boundKind, this.environment);", "-\t\twildcard.id = unannotatedWildcard.id;", "-\t\twildcard.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn (WildcardBinding) (cachedInfo[index] = wildcard);", "+\t\t", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = super.getWildcard(genericType, rank, bound, otherBounds, boundKind);", "+\t\t", "+\t\tif (!haveTypeAnnotations(genericType, bound, otherBounds, annotations))", "+\t\t\treturn nakedType;", "+\t\t", "+\t\tWildcardBinding wildcard = new WildcardBinding(genericType, rank, bound, otherBounds, boundKind, this.environment);", "+\t\twildcard.id = nakedType.id;", "+\t\twildcard.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\treturn (WildcardBinding) cacheDerivedType(genericType, nakedType, wildcard);"]}], "num": 14445}
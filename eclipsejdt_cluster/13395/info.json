{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad3cce5b6075a047fa5720a3cc43e892", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "223b4e74f0d4912a0406ac8b9d95dc5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["+\t\tTypeBinding constantPoolDeclaringClass = getConstantPoolDeclaringClass(currentScope);", "-\t\t\tcodeStream.invokestatic(this.codegenBinding);", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t} else if( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t\tif (this.receiver.isSuper()) {", "-\t\t\t\tcodeStream.invokespecial(this.codegenBinding);", "+\t\t\tif (constantPoolDeclaringClass.isInterface()) { // interface or annotation type", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tif (this.codegenBinding.declaringClass.isInterface()) {", "-\t\t\t\t\tcodeStream.invokeinterface(this.codegenBinding);", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.invokevirtual(this.codegenBinding);", "-\t\t\t\t}", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, this.codegenBinding, constantPoolDeclaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d62e5cf7430a1c4333c8aa66ae41a16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\t\t\tif (oneParam == one.original().parameters[i]", "-\t\t\t\t\t\t\t\t&&  twoParam.leafComponentType().erasure() != two.original().parameters[i].leafComponentType().erasure()) {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "+\t\t\t\t\t\tif ((originalOneParam.isTypeVariable() ? ((TypeVariableBinding) originalOneParam).upperBound()", "+\t\t\t\t\t\t\t\t: originalOneParam).isRawType())", "+\t\t\t\t\t\t\tif (twoParam.leafComponentType().erasure() != two.original().parameters[i]", "+\t\t\t\t\t\t\t\t\t.leafComponentType().erasure())", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "-\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(two.declaringClass.isRawType() ? twoParam : two.original().parameters[i]))", "-\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "+\t\t\t\t\t\t\tif (oneParam.leafComponentType().erasure() != twoParam.leafComponentType().erasure())", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is", "+\t\t\t\t\t\t\t\t\t\t\t// Object[]", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or", "+\t\t\t\t// (Integer, int...)", "-\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "-\t\t\t\t\treturn true;", "+\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8208cac177a45f977f282ac798c63a0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+", "+\t\tTypeBinding constantPoolDeclaringClass = getConstantPoolDeclaringClass(currentScope);", "-\t\t\tcodeStream.invokestatic(this.codegenBinding);", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t} else if( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t\tif( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "-\t\t\t\tcodeStream.invokespecial(this.codegenBinding);", "+\t\t\tif (constantPoolDeclaringClass.isInterface()) { // interface or annotation type", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tif (this.codegenBinding.declaringClass.isInterface()) { // interface or annotation type", "-\t\t\t\t\tcodeStream.invokeinterface(this.codegenBinding);", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.invokevirtual(this.codegenBinding);", "-\t\t\t\t}", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, this.codegenBinding, constantPoolDeclaringClass);", "-\t\tcodeStream.invokestatic(this.syntheticAccessor);", "+\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, this.syntheticAccessor, null /* default declaringClass */);"]}], "num": 13395}
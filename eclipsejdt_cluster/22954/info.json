{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "453830cc3b7438937761c933f088b6b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4fb036fa801dfb902477742459109d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9e42020b961c199c00c46fb54f1e75c9e16ed830", "commitAfterChange": "833eb0a12a6e4b4e0d08456326c8e8fc35a701ed", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\tif (binding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "+\t\t\tif (binding != null) {", "-\t\t\t\tif ((mask & Binding.TYPE) != 0) {", "-\t\t\t\t\tif (foundType != null && foundType.problemId() != NotVisible && binding.problemId() != Ambiguous)", "-\t\t\t\t\t\treturn foundType; // problem type from above supercedes NotFound type but not Ambiguous import case", "-\t\t\t\t\tif (binding instanceof ReferenceBinding)", "-\t\t\t\t\t\treturn binding; // cached type found in previous walk below", "-\t\t\t\t}", "+\t\t\t\tif ((mask & Binding.TYPE) != 0 && binding instanceof ReferenceBinding)", "+\t\t\t\t\treturn binding; // cached type found in previous walk below", "-\t\t\t\t\t\t\t\tif (foundInImport) {", "+\t\t\t\t\t\t\t\tif (foundInImport)", "-\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, Ambiguous);", "-\t\t\t\t\t\t\t\t\tif (typeOrPackageCache != null)", "-\t\t\t\t\t\t\t\t\t\ttypeOrPackageCache.put(name, temp);", "-\t\t\t\t\t\t\t\t\treturn temp;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "-\t\tif (foundType == null) {", "-\t\t\tfoundType = new ProblemReferenceBinding(name, NotFound);", "-\t\t\tif (typeOrPackageCache != null && (mask & Binding.PACKAGE) != 0) // only put NotFound type in cache if you know its not a package", "-\t\t\t\ttypeOrPackageCache.put(name, foundType);", "-\t\t}", "-\t\treturn foundType;", "+\t\tif (foundType != null) return foundType; // problem type from above", "+\t\treturn new ProblemReferenceBinding(name, NotFound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98aa77429fdd538424d1ac90c0125a41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t|| environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\t\t\t\t\t|| compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t\t\tif (binding != null) {", "+\t\t\tif (binding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "-\t\t\t\tif ((mask & Binding.TYPE) != 0 && binding instanceof ReferenceBinding)", "-\t\t\t\t\treturn binding; // cached type found in previous walk below", "+\t\t\t\tif ((mask & Binding.TYPE) != 0) {", "+\t\t\t\t\tif (foundType != null && foundType.problemId() != NotVisible && binding.problemId() != Ambiguous)", "+\t\t\t\t\t\treturn foundType; // problem type from above supercedes NotFound type but not Ambiguous import case", "+\t\t\t\t\tif (binding instanceof ReferenceBinding)", "+\t\t\t\t\t\treturn binding; // cached type found in previous walk below", "+\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\tif (foundInImport) {", "-\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\t\t\t\t\t\ttypeOrPackageCache.put(name, temp);", "+\t\t\t\t\t\t\t\t\treturn temp;", "+\t\t\t\t\t\t\t\t}", "-\t\tif (foundType != null) return foundType; // problem type from above", "-\t\treturn new ProblemReferenceBinding(name, NotFound);", "+\t\tif (foundType == null) {", "+\t\t\tfoundType = new ProblemReferenceBinding(name, NotFound);", "+\t\t\tif (typeOrPackageCache != null && (mask & Binding.PACKAGE) != 0) // only put NotFound type in cache if you know its not a package", "+\t\t\t\ttypeOrPackageCache.put(name, foundType);", "+\t\t}", "+\t\treturn foundType;"]}], "num": 22954}
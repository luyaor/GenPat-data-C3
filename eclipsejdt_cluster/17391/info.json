{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e665c7c3c7b829511013f68e2bbd508b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27db0fa2cb042f19bd04dc0bfba675f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public char[][] getMatchCategories()", "diff": ["-}", "-public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\t// in the new story this will be a single call with a mask", "-\tif (this.findReferences) {", "-\t\tthis.currentTag = CONSTRUCTOR_REF;", "-\t\tsuper.findIndexMatches(input, requestor, progressMonitor, scope);", "-\t}", "-\tif (this.findDeclarations) {", "-\t\tthis.currentTag = CONSTRUCTOR_DECL;", "-\t\tsuper.findIndexMatches(input, requestor, progressMonitor, scope);", "-\t}", "+}", "+public char[][] getMatchCategories() {", "+\tif (this.findReferences)", "+\t\tif (this.findDeclarations) ", "+\t\t\treturn new char[][] {CONSTRUCTOR_REF, CONSTRUCTOR_DECL};", "+\t\telse", "+\t\t\treturn new char[][] {CONSTRUCTOR_REF};", "+\telse", "+\t\tif (this.findDeclarations)", "+\t\t\treturn new char[][] {CONSTRUCTOR_DECL};", "+\t\telse", "+\t\t\treturn CharOperation.NO_CHAR_CHAR;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5478305221aece524632f9f6625cc6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public char[][] getMatchCategories()", "diff": ["-}", "-public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\t// in the new story this will be a single call with a mask", "-\tif (this.findReferences) {", "-\t\tthis.currentTag = METHOD_REF;", "-\t\tsuper.findIndexMatches(input, requestor, progressMonitor, scope);", "-\t}", "-\tif (this.findDeclarations) {", "-\t\tthis.currentTag = METHOD_DECL;", "-\t\tsuper.findIndexMatches(input, requestor, progressMonitor, scope);", "-\t}", "+}", "+public char[][] getMatchCategories() {", "+\tif (this.findReferences)", "+\t\tif (this.findDeclarations) ", "+\t\t\treturn new char[][] {METHOD_REF, METHOD_DECL};", "+\t\telse", "+\t\t\treturn new char[][] {METHOD_REF};", "+\telse", "+\t\tif (this.findDeclarations)", "+\t\t\treturn new char[][] {METHOD_DECL};", "+\t\telse", "+\t\t\treturn CharOperation.NO_CHAR_CHAR;"]}], "num": 17391}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75370112f24d8c6274cce590ab3f19a8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83e9cc8255e70f5bf4adf9ea8363ec8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "36edbdf676305fe490b7bac52d1ae73f9d08cdc4", "commitAfterChange": "fa78e4ce6e57928678189feff94d4c736b9ff2c4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-            formalArgument.collectSubstitutes(scope, actualArguments[i], substitutes, formalArgument.isWildcard() ? constraint : CONSTRAINT_EQUAL);", "+        \tTypeBinding actualArgument = actualArguments[i];", "+        \tif (formalArgument.isWildcard()) {", "+                formalArgument.collectSubstitutes(scope, actualArgument, substitutes, constraint);", "+                continue;", "+        \t} else if (actualArgument.isWildcard()){", "+    \t\t\tWildcardBinding actualWildcardArgument = (WildcardBinding) actualArgument;", "+    \t\t\tif (actualWildcardArgument.otherBounds == null) {", "+    \t\t\t\tif (constraint == CONSTRAINT_SUPER) { // JLS 15.12.7, p.459", "+\t\t\t\t\t\tswitch(actualWildcardArgument.boundKind) {", "+\t\t    \t\t\t\tcase Wildcard.EXTENDS :", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t    \t\t\t\t\tcontinue;", "+\t\t    \t\t\t\tcase Wildcard.SUPER :", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_EXTENDS);", "+\t\t    \t\t\t\t\tcontinue;", "+\t\t    \t\t\t\tdefault :", "+\t\t    \t\t\t\t\tcontinue; // cannot infer anything further from unbound wildcard", "+\t\t    \t\t\t}", "+    \t\t\t\t} else {", "+    \t\t\t\t\tcontinue; // cannot infer anything further from wildcard", "+    \t\t\t\t}", "+    \t\t\t}", "+        \t}", "+        \t// by default, use EQUAL constraint", "+            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, CONSTRAINT_EQUAL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03092ce460795dc19542665c19137d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\t\tif (actualType == NullBinding) return;", "+\t\tif (actualType == TypeBinding.NULL) return;", "-\t\t\tcase CONSTRAINT_EQUAL :", "-\t\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\tcase TypeConstants.CONSTRAINT_EQUAL :", "+\t\t\tcase TypeConstants.CONSTRAINT_EXTENDS :", "-\t\t\tcase CONSTRAINT_SUPER :", "+\t\t\tcase TypeConstants.CONSTRAINT_SUPER :", "-        \t\tif (constraint == CONSTRAINT_EQUAL) {", "-        \t\t\tsubstitutes.put(VoidBinding, NoTypes); // marker for impossible inference", "+        \t\tif (constraint == TypeConstants.CONSTRAINT_EQUAL) {", "+        \t\t\tsubstitutes.put(TypeBinding.VOID, Binding.NO_TYPES); // marker for impossible inference", "-    \t\t\t\tif (constraint == CONSTRAINT_SUPER) { // JLS 15.12.7, p.459", "+    \t\t\t\tif (constraint == TypeConstants.CONSTRAINT_SUPER) { // JLS 15.12.7, p.459", "-\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, CONSTRAINT_EXTENDS);", "+\t\t    \t\t\t\t\tformalArgument.collectSubstitutes(scope, actualWildcardArgument.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "-            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, CONSTRAINT_EQUAL);", "+            formalArgument.collectSubstitutes(scope, actualArgument, substitutes, TypeConstants.CONSTRAINT_EQUAL);"]}], "num": 1907}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cdc6e93315638582cf3e1138342f848", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0332e89e55267d7d3ba5472eae6a6035", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeMemberOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": " private IDOMNode deprecatedGenerateElementDOM() throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["+}", "+protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException {", "+\tif (this.createdNode == null) {", "+\t\tthis.source = removeIndentAndNewLines(this.source, document, cu);", "+\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\tparser.setSource(this.source.toCharArray());", "+\t\tparser.setProject(getCompilationUnit().getJavaProject());", "+\t\tparser.setKind(ASTParser.K_CLASS_BODY_DECLARATIONS);", "+\t\tASTNode node = parser.createAST(this.progressMonitor);", "+\t\tString createdNodeSource;", "+\t\tif (node.getNodeType() != ASTNode.TYPE_DECLARATION) {", "+\t\t\tcreatedNodeSource = generateSyntaxIncorrectAST();", "+\t\t\tif (this.createdNode == null)", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_CONTENTS));", "+\t\t} else {", "+\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\t\tthis.createdNode = (ASTNode) typeDeclaration.bodyDeclarations().iterator().next();", "+\t\t\tcreatedNodeSource = this.source;", "+\t\t}", "+\t\tif (this.alteredName != null) {", "+\t\t\tSimpleName newName = this.createdNode.getAST().newSimpleName(this.alteredName);", "+\t\t\tSimpleName oldName = rename(this.createdNode, newName);", "+\t\t\tint nameStart = oldName.getStartPosition();", "+\t\t\tint nameEnd = nameStart + oldName.getLength();", "+\t\t\tStringBuffer newSource = new StringBuffer();", "+\t\t\tif (this.source.equals(createdNodeSource)) {", "+\t\t\t\tnewSource.append(createdNodeSource.substring(0, nameStart));", "+\t\t\t\tnewSource.append(this.alteredName);", "+\t\t\t\tnewSource.append(createdNodeSource.substring(nameEnd));", "+\t\t\t} else {", "+\t\t\t\t// syntacticaly incorrect source", "+\t\t\t\tint createdNodeStart = this.createdNode.getStartPosition();", "+\t\t\t\tint createdNodeEnd = createdNodeStart + this.createdNode.getLength();", "+\t\t\t\tnewSource.append(createdNodeSource.substring(createdNodeStart, nameStart));", "+\t\t\t\tnewSource.append(this.alteredName);", "+\t\t\t\tnewSource.append(createdNodeSource.substring(nameEnd, createdNodeEnd));", "+\t\t\t\t", "+\t\t\t}", "+\t\t\tthis.source = newSource.toString();", "+\t\t}", "+\t}", "+\tif (rewriter == null) return this.createdNode;", "+\t// return a string place holder (instead of the created node) so has to not lose comments and formatting", "+\treturn rewriter.createStringPlaceholder(this.source, this.createdNode.getNodeType());", "+}", "-// TODO - JDOM - remove once model ported off of JDOM", "-private IDOMNode deprecatedGenerateElementDOM() throws JavaModelException {", "-\treturn generateElementDOM();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9e8e0c49ed86d8dae18a8eb163636f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["-\t\tIType declaringType = (IType) getDeclaringClass().getJavaElement();", "-\t\tif (declaringType == null) return null;", "-\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (node != null && declaringType.getParent().getElementType() != IJavaElement.CLASS_FILE) {", "-\t\t\tif (node instanceof MethodDeclaration) {", "-\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "-\t\t\t\tArrayList parameterSignatures = new ArrayList();", "-\t\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "-\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\t\t\tType type = parameter.getType();", "-\t\t\t\t\tString typeSig = Util.getSignature(type);", "-\t\t\t\t\tint arrayDim = parameter.getExtraDimensions();", "-\t\t\t\t\tif (parameter.getAST().apiLevel() >= AST.JLS3 && parameter.isVarargs()) {", "-\t\t\t\t\t\tarrayDim++;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (arrayDim > 0) {", "-\t\t\t\t\t\ttypeSig = Signature.createArraySignature(typeSig, arrayDim);", "-\t\t\t\t\t}", "-\t\t\t\t\tparameterSignatures.add(typeSig);", "-\t\t\t\t}", "-\t\t\t\tint parameterCount = parameterSignatures.size();", "-\t\t\t\tString[] parameters = new String[parameterCount];", "-\t\t\t\tparameterSignatures.toArray(parameters);", "-\t\t\t\treturn (JavaElement) declaringType.getMethod(getName(), parameters);", "-\t\t\t} else {", "-\t\t\t\t// annotation type member declaration", "-\t\t\t\tAnnotationTypeMemberDeclaration typeMemberDeclaration = (AnnotationTypeMemberDeclaration) node;", "-\t\t\t\treturn (JavaElement) declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), CharOperation.NO_STRINGS); // annotation type members don't have parameters", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// case of method not in the created AST, or a binary method", "-\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding original = this.binding.original();", "-\t\t\tString selector = original.isConstructor() ? declaringType.getElementName() : new String(original.selector);", "-\t\t\tboolean isBinary = declaringType.isBinary();", "-\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "-\t\t\tboolean isInnerBinaryTypeConstructor = isBinary && original.isConstructor() && enclosingType != null;", "-\t\t\tTypeBinding[] parameters = original.parameters;", "-\t\t\tint length = parameters == null ? 0 : parameters.length;", "-\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "-\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "-\t\t\tif (isInnerBinaryTypeConstructor)", "-\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t\tparameterSignatures[declaringIndex + i] = new String(parameters[i].genericTypeSignature()).replace('/', '.');", "-\t\t\t}", "-\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "-\t\t\tif (isBinary)", "-\t\t\t\treturn (JavaElement) result;", "-\t\t\tIMethod[] methods = null;", "-\t\t\ttry {", "-\t\t\t\tmethods = declaringType.getMethods();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// declaring type doesn't exist", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "-\t\t\tif (candidates == null || candidates.length == 0)", "-\t\t\t\treturn null;", "-\t\t\treturn (JavaElement) candidates[0];", "-\t\t}", "+\t\t", "+\t\tDefaultBindingResolver defaultBindingResolver = (DefaultBindingResolver) this.resolver;", "+\t\treturn Util.getUnresolvedJavaElement(", "+\t\t\t\tthis.binding,", "+\t\t\t\tdefaultBindingResolver.workingCopyOwner,", "+\t\t\t\tdefaultBindingResolver.getBindingsToNodesMap());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a18f0aeaeb4cb43a955cdfee638a290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "dbc287e113cd966cc1e20293dfedea17687913c2", "commitAfterChange": "e66f77d0e07fce47c76186011fd33869f4e9edd9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t */", "-\t\tMethodDeclaration method = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (method == null) return null;", "-\t\tArrayList parameterSignatures = new ArrayList();", "-\t\tIterator iterator = method.parameters().iterator();", "-\t\twhile (iterator.hasNext()) {", "-\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\tType type = parameter.getType();", "-\t\t\tparameterSignatures.add(getSignature(type));", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "+\t\tif (methodDeclaration != null) {", "+\t\t\tArrayList parameterSignatures = new ArrayList();", "+\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "+\t\t\t\tType type = parameter.getType();", "+\t\t\t\tparameterSignatures.add(getSignature(type));", "+\t\t\t}", "+\t\t\tint parameterCount = parameterSignatures.size();", "+\t\t\tString[] parameters = new String[parameterCount];", "+\t\t\tparameterSignatures.toArray(parameters);", "+\t\t\treturn declaringType.getMethod(getName(), parameters);", "+\t\t} else {", "+\t\t\t// case of method not in the created AST", "+\t\t\tString selector = getName();", "+\t\t\tchar[] methodSignature = this.binding.genericSignature();", "+\t\t\tif (methodSignature == null)", "+\t\t\t\tmethodSignature = this.binding.signature();", "+\t\t\tmethodSignature = CharOperation.replaceOnCopy(methodSignature, '/', '.');", "+\t\t\tchar[][] parameterSignatures = Signature.getParameterTypes(methodSignature);", "+\t\t\tString[] parameters = CharOperation.toStrings(parameterSignatures);", "+\t\t\tIMethod result = declaringType.getMethod(selector, parameters);", "+\t\t\tif (declaringType.isBinary())", "+\t\t\t\treturn result;", "+\t\t\tIMethod[] methods = null;", "+\t\t\ttry {", "+\t\t\t\tmethods = declaringType.getMethods();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// declaring type doesn't exist", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "+\t\t\tif (candidates == null || candidates.length == 0)", "+\t\t\t\treturn null;", "+\t\t\treturn candidates[0];", "-\t\tint parameterCount = parameterSignatures.size();", "-\t\tString[] parameters = new String[parameterCount];", "-\t\tparameterSignatures.toArray(parameters);", "-\t\treturn declaringType.getMethod(getName(), parameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa22ed7497a626b82a86e1b9b1db83f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationSetup.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void setUp()", "signatureAfterChange": "  \tprotected void setUp()", "diff": ["-}", "-protected void setUp() {", "-\t// Launch VM in evaluation mode", "-\tint evalPort = Util.getFreePort();", "-\ttry {", "-\t\tLocalVMLauncher launcher = LocalVMLauncher.getLauncher();", "-\t\tlauncher.setVMPath(this.jrePath);", "-\t\tlauncher.setEvalPort(evalPort);", "-\t\tlauncher.setEvalTargetPath(this.evalDirectory);", "-\t\tthis.launchedVM = launcher.launch();", "-\t} catch (TargetException e) {", "-\t\tthrow new Error(e.getMessage());", "-\t// Thread that read the stout of the VM so that the VM doesn't block", "-\ttry {", "-\t\tstartReader(\"VM's stdout reader\", this.launchedVM.getInputStream(), System.out);", "-\t} catch (TargetException e) {", "-\t}", "-", "-\t// Thread that read the sterr of the VM so that the VM doesn't block", "-\ttry {", "-\t\tstartReader(\"VM's sterr reader\",this.launchedVM.getErrorStream(), System.err);", "-\t} catch (TargetException e) {", "-\t}", "-", "-\t// Create context", "-\tthis.context = new EvaluationContext();", "-", "-\t// Create target", "-\tthis.target = new TargetInterface();", "-\tthis.target.connect(\"localhost\", evalPort, 10000);", "-", "-\t// Create name environment", "-\tINameEnvironment env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "-", "-\t// Init wrapped suite", "-\tinitTest(fTest, this.context, this.target, this.launchedVM, env);", "-}", "+\tprotected void setUp() {", "+\t\tif (this.context == null) { // non null if called from subclass", "+\t\t\t// Launch VM in evaluation mode", "+\t\t\tint evalPort = Util.getFreePort();", "+\t\t\t\tLocalVMLauncher launcher = LocalVMLauncher.getLauncher();", "+\t\t\t\tlauncher.setVMPath(JRE_PATH);", "+\t\t\t\tlauncher.setEvalPort(evalPort);", "+\t\t\t\tlauncher.setEvalTargetPath(EVAL_DIRECTORY);", "+\t\t\t\tthis.launchedVM = launcher.launch();", "+", "+\t\t\t// Thread that read the stout of the VM so that the VM doesn't block", "+\t\t\ttry {", "+\t\t\t\tstartReader(\"VM's stdout reader\", this.launchedVM.getInputStream(), System.out);", "+\t\t\t} catch (TargetException e) {", "+\t\t\t}", "+", "+\t\t\t// Thread that read the sterr of the VM so that the VM doesn't block", "+\t\t\ttry {", "+\t\t\t\tstartReader(\"VM's sterr reader\", this.launchedVM.getErrorStream(), System.err);", "+\t\t\t} catch (TargetException e) {", "+\t\t\t}", "+", "+\t\t\t// Create context", "+\t\t\tthis.context = new EvaluationContext();", "+", "+\t\t\t// Create target", "+\t\t\tthis.target = new TargetInterface();", "+\t\t\tthis.target.connect(\"localhost\", evalPort, 10000);", "+", "+\t\t\t// Create name environment", "+\t\t\tthis.env = new FileSystem(Util.getJavaClassLibs(), new String[0], null);", "+\t\t}", "+\t\tsuper.setUp();", "+\t}"]}], "num": 4132}
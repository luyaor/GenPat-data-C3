{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "962c8c204a5dbb76d2805f88cd041359", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a54c3b87131c22881fef75941fdbbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 146, "signatureBeforeChange": " protected Annotation[][] getMergedAnnotationsOnDimensions(int dims, Annotation[][] annotationsOnDimensions, \t\tint extendedDims, Annotation[][] annotationsOnExtendedDimensions)", "signatureAfterChange": " protected Annotation[][] getMergedAnnotationsOnDimensions(int dims, Annotation[][] annotationsOnDimensions, \t\tint extendedDims, Annotation[][] annotationsOnExtendedDimensions)", "diff": ["-\tfor (int i = 0; i < dims; i++) {", "-\t\tif (annotationsOnDimensions != null) {", "+\t", "+\tif (annotationsOnDimensions != null) {", "+\t\tfor (int i = 0; i < dims; i++) {", "-\t\t} else {", "-\t\t\tmergedAnnotations[i] = null;", "-\t\t}", "+\t\t} ", "-\tfor (int i = dims, j = 0; i < dims + extendedDims; i++, j++) {", "-\t\tif (annotationsOnExtendedDimensions != null) {", "+\tif (annotationsOnExtendedDimensions != null) {", "+\t\tfor (int i = dims, j = 0; i < dims + extendedDims; i++, j++) {", "-\t\t} else {", "-\t\t\tmergedAnnotations[i] = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99c201721970425a9eef88ef4b05567c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "diff": ["-\t\t\tif (this.annotationsOnDimensions != null) {", "-\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "-\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\tAnnotation [][] annotationsOnDimensions = getAnnotationsOnDimensions(true);", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = annotationsOnDimensions[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b147a01c81f6f6c74633b92160822dff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic AnnotationCollector( \t\t\tTypeReference typeReference, \t\t\tint targetType, \t\t\tint info, \t\t\tList annotationContexts, \t\t\tAnnotation[][] annotationsOnDimensions)", "signatureAfterChange": " \tpublic AnnotationCollector( \t\t\tTypeReference typeReference, \t\t\tint targetType, \t\t\tint info, \t\t\tList annotationContexts, \t\t\tAnnotation[][] annotationsOnDimensions, \t\t\tint dimensions)", "diff": ["-\t\t\tAnnotation[][] annotationsOnDimensions) {", "+\t\t\tAnnotation[][] annotationsOnDimensions,", "+\t\t\tint dimensions) {", "+\t\t// Array references like 'new String[]' manifest as an ArrayAllocationExpression", "+\t\t// with a 'type' of String.  When the type is not carrying the dimensions count", "+\t\t// it is passed in via the dimensions parameter.  It is not possible to use", "+\t\t// annotationsOnDimensions as it will be null if there are no annotations on any", "+\t\t// of the dimensions.", "+\t\tthis.dimensions = dimensions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf8642ddb9b16d56c51b67307580c471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \t \tprivate void generateTypeAnnotation(AnnotationContext annotationContext, int currentOffset)", "signatureAfterChange": " \t \tprivate void generateTypeAnnotation(AnnotationContext annotationContext, int currentOffset)", "diff": ["-\t\tif (annotationContext.wildcard != null) {", "-\t\t\tgenerateWildcardTypeAnnotation(annotationContext, currentOffset);", "+\t\tAnnotation annotation = annotationContext.annotation.getPersistibleAnnotation();", "+\t\tif (annotation == null || annotation.resolvedType == null)", "-\t\t}", "-\t\t", "-\t\t// common part between type annotation and annotation", "-\t\tgenerateAnnotation(annotationContext.annotation, currentOffset);", "+\t\tgenerateAnnotation(annotation, currentOffset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ea37c91aa6b3534b15cab7ac002716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, ClassScope scope)", "diff": ["-\t\t\tif (this.annotationsOnDimensions != null) {", "-\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "-\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\tAnnotation [][] annotationsOnDimensions = getAnnotationsOnDimensions(true);", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = annotationsOnDimensions[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d343ecc0152c78f74ea1f6f21ddd955d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["-\t\t\tif (this.annotationsOnDimensions != null) {", "-\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "-\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\tAnnotation [][] annotationsOnDimensions = getAnnotationsOnDimensions(true);", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = annotationsOnDimensions[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f723374768ce7b3ddb25a51b6d5e08e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["-\t\t\tif (this.annotationsOnDimensions != null) {", "-\t\t\t\tfor (int i = 0, max = this.annotationsOnDimensions.length; i < max; i++) {", "-\t\t\t\t\tAnnotation[] annotations2 = this.annotationsOnDimensions[i];", "+\t\t\tAnnotation [][] annotationsOnDimensions = getAnnotationsOnDimensions(true);", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tfor (int i = 0, max = annotationsOnDimensions.length; i < max; i++) {", "+\t\t\t\t\tAnnotation[] annotations2 = annotationsOnDimensions[i];"]}], "num": 18348}
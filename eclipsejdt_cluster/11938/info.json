{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2be5a6c9c7aa6425362b79f1ac35cf8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b92e38ee1be8b58a9b671e02a77e77d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/AbstractMethodTests.java", "commitBeforeChange": "928d90c3d930147ffd37781c56673795a6f31eb3", "commitAfterChange": "c7679cd484cc416e79c8e4fd2e1a89f930508174", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test002() throws JavaModelException", "signatureAfterChange": " \tpublic void test002() throws JavaModelException", "diff": ["-\t\texpectingOnlySpecificProblemFor(classX, new Problem(\"X.foo(I__X)\", \"I__X cannot be resolved to a type\", classX, 84, 88, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemFor(classY, new Problem(\"Y\", \"The type Y must implement the inherited abstract method X.foo(IX)\", classY, 38, 39, CategorizedProblem.CAT_MEMBER)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingOnlySpecificProblemFor(classX, new Problem(\"X.foo(I__X)\", \"I__X cannot be resolved to a type\", classX, 84, 88, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingOnlySpecificProblemFor(classY, new Problem(\"Y\", \"The type Y must implement the inherited abstract method X.foo(IX)\", classY, 38, 39, CategorizedProblem.CAT_MEMBER, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd7ef4e75f3be56067bff024909bdab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/DependencyTests.java", "commitBeforeChange": "928d90c3d930147ffd37781c56673795a6f31eb3", "commitAfterChange": "c7679cd484cc416e79c8e4fd2e1a89f930508174", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testTypeDeleting() throws JavaModelException", "signatureAfterChange": " \tpublic void testTypeDeleting() throws JavaModelException", "diff": ["-\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"p1.A cannot be resolved to a type\", bPath, 35, 39, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(cPath, new Problem(\"C\", \"The hierarchy of the type C is inconsistent\", cPath, 25, 26, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"p1.A cannot be resolved to a type\", bPath, 35, 39, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(cPath, new Problem(\"C\", \"The hierarchy of the type C is inconsistent\", cPath, 25, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf8df1459747ee60fea53db0b3d8b51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/AbstractMethodTests.java", "commitBeforeChange": "928d90c3d930147ffd37781c56673795a6f31eb3", "commitAfterChange": "c7679cd484cc416e79c8e4fd2e1a89f930508174", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void test001() throws JavaModelException", "signatureAfterChange": " \tpublic void test001() throws JavaModelException", "diff": ["-\t\texpectingOnlySpecificProblemFor(classX, new Problem(\"X.foo(I__X)\", \"I__X cannot be resolved to a type\", classX, 84, 88, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemFor(classY, new Problem(\"Y\", \"The type Y must implement the inherited abstract method IX.foo(IX)\", classY, 38, 39, CategorizedProblem.CAT_MEMBER)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingOnlySpecificProblemFor(classX, new Problem(\"X.foo(I__X)\", \"I__X cannot be resolved to a type\", classX, 84, 88, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingOnlySpecificProblemFor(classY, new Problem(\"Y\", \"The type Y must implement the inherited abstract method IX.foo(IX)\", classY, 38, 39, CategorizedProblem.CAT_MEMBER, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 11938}
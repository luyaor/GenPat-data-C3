{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f233cd2beba33d732abf81434080d9d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13bf1aaaa34510472afb3aef08f98086", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "e87bfc3f4fb5c5cbc92139a33aa1f70cbb179bd0", "commitAfterChange": "fea48c1ab8bc004e73a7488c630798836bc78025", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.action == null", "-\t\t\t\t|| this.action.isEmptyBlock()", "-\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0)) {", "+\t\tfinal boolean hasEmptyAction = this.action == null", "+\t\t\t|| this.action.isEmptyBlock()", "+\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0);", "+", "+\t\tif (hasEmptyAction", "+\t\t\t\t&& this.elementVariable.binding.resolvedPosition == -1", "+\t\t\t\t&& this.kind == ARRAY) {", "+\t\t\tcollection.generateCode(scope, codeStream, false);", "+", "-\t\t", "-\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "+\t\tswitch(this.kind) {", "+\t\t\tcase ARRAY :", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tif (this.elementVariable.binding.type.id != T_JavaLangObject) {", "-\t\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\t\t\tcodeStream.checkcast(this.collectionElementType);", "-\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.checkcast(this.elementVariable.binding.type);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// if unused variable, some side effects still need to be performed (86487)", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\t// still advance in iterator to prevent infinite loop", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase RAW_ITERABLE :", "+\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\tif (this.elementVariable.binding.type.id != T_JavaLangObject) {", "+\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\t\tcodeStream.checkcast(this.collectionElementType);", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.checkcast(this.elementVariable.binding.type);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\tthis.action.generateCode(scope, codeStream);", "+", "+\t\tif (!hasEmptyAction) {", "+\t\t\tthis.action.generateCode(scope, codeStream);", "+\t\t}", "+\t\t\t\t\tif (hasEmptyAction && this.elementVariable.binding.resolvedPosition == -1) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36424865d12c309d713174f90833fcd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "46f57536ed8e2bfbe5a9484e153647c7c5b9cb5d", "commitAfterChange": "846faf5699bcd826a09451dfb06e7bb91fe5a472", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprivate static String getLineSeparator(char[] text, char[] buffer)", "signatureAfterChange": " \tpublic static String getLineSeparator(String text, IJavaProject project)", "diff": ["+\t */", "+\tpublic static String getLineSeparator(String text, IJavaProject project) {", "+\t\tString lineSeparator = null;", "+\t\t", "+\t\t// line delimiter in given text", "+\t\tif (text != null) {", "+\t\t\tlineSeparator = findLineSeparator(text.toCharArray());", "+\t\t\tif (lineSeparator != null)", "+\t\t\t\treturn lineSeparator;", "+\t\t}", "+\t\t", "+\t\t// line delimiter in project preference", "+\t\tIScopeContext[] scopeContext;", "+\t\tif (project != null) {", "+\t\t\tscopeContext= new IScopeContext[] { new ProjectScope(project.getProject()) };", "+\t\t\tlineSeparator= Platform.getPreferencesService().getString(Platform.PI_RUNTIME, Platform.PREF_LINE_SEPARATOR, null, scopeContext);", "+\t\t\tif (lineSeparator != null)", "+\t\t\t\treturn lineSeparator;", "+\t\t}", "+\t\t", "+\t\t// line delimiter in workspace preference", "+\t\tscopeContext= new IScopeContext[] { new InstanceScope() };", "+\t\tlineSeparator = Platform.getPreferencesService().getString(Platform.PI_RUNTIME, Platform.PREF_LINE_SEPARATOR, null, scopeContext);", "+\t\tif (lineSeparator != null)", "+\t\t\treturn lineSeparator;", "+\t\t", "+\t\t// system line delimiter", "+\t\treturn org.eclipse.jdt.internal.compiler.util.Util.LINE_SEPARATOR;", "+\t}", "-\t\t\t\treturn org.eclipse.jdt.internal.compiler.util.Util.LINE_SEPARATOR;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4553418e09ff6660c538b5860559a072", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["-\t\t\tif (blockStarts[j] > nodeStart){", "-\t\t\t\tblockIndex = j; // shift the index to the new block", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (blockStarts[j] != lastStart){ // avoid multiple block if at same position", "+\t\t\tif (blockStarts[j] >= 0) {", "+\t\t\t\tif (blockStarts[j] > nodeStart){", "+\t\t\t\t\tblockIndex = j; // shift the index to the new block", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (blockStarts[j] != lastStart){ // avoid multiple block if at same position", "+\t\t\t\t\tblock = new Block(0);", "+\t\t\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "+\t\t\t\t\telement = element.add(block, 1);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (-blockStarts[j] > nodeStart){", "+\t\t\t\t\tblockIndex = j; // shift the index to the new block", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "+\t\t\t\tblock.sourceStart = lastStart = -blockStarts[j];", "-\t\tif ((blockStarts[j] < pos) && (blockStarts[j] != lastStart)){ // avoid multiple block if at same position", "-\t\t\tblock = new Block(0);", "-\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "-\t\t\telement = element.add(block, 1);", "+\t\tif (blockStarts[j] >= 0) {", "+\t\t\tif ((blockStarts[j] < pos) && (blockStarts[j] != lastStart)){ // avoid multiple block if at same position", "+\t\t\t\tblock = new Block(0);", "+\t\t\t\tblock.sourceStart = lastStart = blockStarts[j];", "+\t\t\t\telement = element.add(block, 1);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif ((blockStarts[j] < pos)){ // avoid multiple block if at same position", "+\t\t\t\tblock = new Block(0);", "+\t\t\t\tblock.sourceStart = lastStart = -blockStarts[j];", "+\t\t\t\telement = element.add(block, 1);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d057a17813aa664709fd11f45c9a124", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "cc628ea5c515ac89ded681df40bf6e83ff17d6c0", "commitAfterChange": "2a24da854cab81b3e14f5a439f9a6b762b3ebc0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private ProcessorEnvImpl( IFile file, IJavaProject javaProj, Phase phase )", "signatureAfterChange": "      \tprivate ProcessorEnvImpl(ICompilationUnit compilationUnit, IFile file, IJavaProject javaProj, Phase phase)", "diff": ["-", "-    private ProcessorEnvImpl( IFile file, IJavaProject javaProj, Phase phase )", "+    ", "+\tprivate ProcessorEnvImpl(ICompilationUnit compilationUnit, IFile file, IJavaProject javaProj, Phase phase)", "-        assert phase == Phase.BUILD : \"Unexpected phase value.  Use Phase.BUILD instead of \" + phase;", "+\t\t// if we are in reconcile, file will be null & compilationUnit will be valid", "+\t\t// if we are in build, file will not be null & compilationUnit will be null", "+        assert ( phase == Phase.RECONCILE && compilationUnit != null && file == null ) || ( phase == Phase.BUILD && compilationUnit == null && file != null ) : \"Unexpected phase value.  Use Phase.RECONCILE instead of \" + phase;", "-    \t_compilationUnit = null;", "-", "-\t\tchar[] source = null;", "-", "-\t\ttry", "-\t\t{", "-\t\t\tsource = getFileContents( file );", "-\t\t}", "-\t\tcatch( Exception e )", "-\t\t{", "-\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\te.printStackTrace();", "-\t\t}", "-", "-\t\t_source = source;", "-\t\tassert _source != null : \"missing source\";", "-", "-\t\tString unitName = file.getProjectRelativePath().toString();", "-\t\tASTNode node = createDietAST( unitName, javaProj, null, _source );", "-\t\t_astCompilationUnit = (org.eclipse.jdt.core.dom.CompilationUnit) node;", "-        _file = file;", "+        ", "+        String unitName = null;", "+\t\tif ( compilationUnit != null )", "+\t\t{", "+\t\t\tunitName = compilationUnit.getResource().getProjectRelativePath().toString();", "+\t        _compilationUnit = compilationUnit;", "+\t\t\t_file = (IFile)compilationUnit.getResource();", "+\t\t\t_source = null;", "+\t\t}", "+\t\telse", "+\t\t{", "+\t\t\tunitName = file.getProjectRelativePath().toString();\t", "+\t\t\t_compilationUnit = null;", "+\t\t\t_file = file;", "+\t\t\tchar[] source = null;", "+\t\t\ttry", "+\t\t\t{", "+\t\t\t\tsource = getFileContents( file );", "+\t\t\t}", "+\t\t\tcatch( Exception e )", "+\t\t\t{", "+\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t\t_source = source;", "+\t\t\tassert _source != null : \"missing source\";", "+\t\t}", "+", "+\t\tassert ( _source == null && _compilationUnit != null ) || ( _source != null && _compilationUnit == null ) : \"Unexpected values for _compilationUnit and _source!\";", "+\t\tASTNode node = createDietAST( unitName, javaProj, _compilationUnit, _source );", "+\t\t_astCompilationUnit = (org.eclipse.jdt.core.dom.CompilationUnit) node;", "+", "-\t\t_modelCompUnit2astCompUnit = new HashMap<ICompilationUnit, CompilationUnit>();", "+        _modelCompUnit2astCompUnit = new HashMap<ICompilationUnit, CompilationUnit>();", "-        _allProblems = new HashMap<IFile, List<IProblem>>(4);        ", "+\t\t_allProblems = new HashMap<IFile, List<IProblem>>(4);        "]}], "num": 43872}
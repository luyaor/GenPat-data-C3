{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fa366aa53952608a82f3c1c662db170", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0760ba81e6f9e508e5ebee72585268a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "9ef16bbd886b16521464fbe002994d5fbaed976f", "commitAfterChange": "b27f301e84866741a3cab27f0e35cc886c5fd2e8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "diff": ["+\t\tMap<FactoryContainer, Boolean> containers = null;", "-\t\t\tMap<FactoryContainer, Boolean> projectContainers = null;", "-\t\t\tif (_projectsWithFactoryPathLoaded.contains(jproj)) {", "-\t\t\t\tprojectContainers = _containerMaps.get(jproj);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// Load project-level containers", "-\t\t\t\ttry {", "-\t\t\t\t\tprojectContainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\t\t\t}", "-\t\t\t\tcatch (CoreException ce) {", "-\t\t\t\t\tce.printStackTrace();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException ioe) {", "-\t\t\t\t\tioe.printStackTrace();", "-\t\t\t\t}", "-\t\t\t\t_projectsWithFactoryPathLoaded.add(jproj);", "-\t\t\t\t_containerMaps.put(jproj, projectContainers);", "-\t\t\t}", "-\t\t\tif (projectContainers != null) {", "-\t\t\t\treturn projectContainers;", "-\t\t\t}", "-\t\t}", "-\t\t// Workspace", "-\t\tif (!_workspaceFactoryPathLoaded) {", "-\t\t\t// Load the workspace", "-\t\t\t\t_workspaceFactories = FactoryPathUtil.readFactoryPathFile(null);", "-\t\t\t\tif (_workspaceFactories == null) {", "-\t\t\t\t\t// TODO: Need to get the default set of factories -- plugins only", "-\t\t\t\t}", "+\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\treturn new LinkedHashMap(_workspaceFactories);", "+\t\t// Workspace if no project data was found", "+\t\tif (containers == null) {", "+\t\t\ttry {", "+\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(null);", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tce.printStackTrace();", "+\t\t\t}", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tioe.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\t// if no project and no workspace data was found, we'll get the defaults", "+\t\tif (containers == null) {", "+\t\t\tcontainers = new LinkedHashMap<FactoryContainer, Boolean>();", "+\t\t}", "+\t\thandlePluginContainers(containers);", "+\t\treturn new LinkedHashMap(containers);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d089d328f53e82810c7d685708e9d8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "d506bd33e9d161ce75f11b19448c2ad2110b1903", "commitAfterChange": "87dd132b690b39c22112692b2510e01020cf3c19", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate Map<FactoryContainer, Boolean> readFactoryPathFile(IJavaProject jproj)  \t\tthrows IOException, CoreException", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "diff": ["+\t */", "+\tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj) {", "+\t\tif (jproj != null) {", "+\t\t\tMap<FactoryContainer, Boolean> projectContainers = null;", "+\t\t\tif (_projectsWithFactoryPathLoaded.contains(jproj)) {", "+\t\t\t\tprojectContainers = _containerMaps.get(jproj);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t// Load project-level containers", "+\t\t\t\ttry {", "+\t\t\t\t\tprojectContainers = FactoryPathUtil.readFactoryPathFile(jproj);", "+\t\t\t\t}", "+\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\tce.printStackTrace();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t\tioe.printStackTrace();", "+\t\t\t\t}", "+\t\t\t\t_projectsWithFactoryPathLoaded.add(jproj);", "+\t\t\t\t_containerMaps.put(jproj, projectContainers);", "+\t\t\t}", "+\t\t\tif (projectContainers != null) {", "+\t\t\t\treturn projectContainers;", "+\t\t\t}", "+\t\t}", "+\t\t// Workspace", "+\t\tif (!_workspaceFactoryPathLoaded) {", "+\t\t\t// Load the workspace", "+\t\t\ttry {", "+\t\t\t\t_workspaceFactories = FactoryPathUtil.readFactoryPathFile(null);", "+\t\t\t\tif (_workspaceFactories == null) {", "+\t\t\t\t\t// TODO: Need to get the default set of factories -- plugins only", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tce.printStackTrace();", "+\t\t\t}", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tioe.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn new LinkedHashMap(_workspaceFactories);", "+\t}", "-\t */", "-\tprivate Map<FactoryContainer, Boolean> readFactoryPathFile(IJavaProject jproj) ", "-\t\tthrows IOException, CoreException", "-\t{", "-\t\tIProject proj = jproj.getProject();", "-\t\tIFile file = proj.getFile(FACTORYPATH_FILE);", "-\t\tif (!file.exists()) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tString data = FileSystemUtil.getContentsOfFile(file);", "-\t\t", "-\t\treturn FactoryPathUtil.decodeFactoryPath(data);", "-\t}"]}], "num": 14476}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "922b371bc37279530cb97dd1aa08520d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eab571dacbb031391d1b64780f7d965", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4b34ac952495406305286be091754126c6d25593", "commitAfterChange": "a3337f44ed6348a5f4f65ab1b2584cb8125066c6", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tprivate String getPreserveEmptyLines(int count)", "signatureAfterChange": " \tprivate String getPreserveEmptyLines(int count)", "diff": ["-\t\t\t\t\tboolean canUseAlignmentIndentation = (nextToken != TerminalTokens.TokenNameLBRACE || !this.currentAlignment.name.equals(\"localDeclarationAssignmentAlignment\")); //$NON-NLS-1$", "+\t\t\t\t\tboolean canUseAlignmentIndentation = (nextToken != TerminalTokens.TokenNameLBRACE || this.currentAlignment.kind != Alignment.LOCAL_DECLARATION_ASSIGNMENT);", "-\t\t\t\t\t\t\t\t\tthis.currentAlignment.name.equals(\"array_initializer\") || //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tthis.currentAlignment.name.equals(\"binaryExpressionAlignment\")) && //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tthis.currentAlignment.kind == Alignment.ARRAY_INITIALIZER ||", "+\t\t\t\t\t\t\t\t\tthis.currentAlignment.kind == Alignment.BINARY_EXPRESSION) &&"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6921fce5bbe26c3b8782be66992d9fd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "a744e65ca211ca7be2dd3830d1bd4009b273df27", "commitAfterChange": "c95e24ef2e4bfa2139fbca3e3b2078e40695cacf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void format(FieldDeclaration fieldDeclaration, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "signatureAfterChange": "  \tprivate void format(FieldDeclaration fieldDeclaration, boolean isChunkStart, boolean isFirstClassBodyDeclaration)", "diff": ["-\t\t\t\t\t\t\tinitialization.accept(this);", "+\t\t\t\t\t\t\tAlignment2 assignmentAlignment = this.scribe.createAlignment(\"fieldDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.scribe.enterAlignment(assignmentAlignment);", "+\t\t\t\t\t\t\tboolean ok2 = false;", "+\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tthis.scribe.alignFragment(assignmentAlignment, 0);", "+\t\t\t\t\t\t\t\t\tinitialization.accept(this);", "+\t\t\t\t\t\t\t\t\tok2 = true;", "+\t\t\t\t\t\t\t\t} catch(AlignmentException e){", "+\t\t\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} while (!ok2);\t\t", "+\t\t\t\t\t\t\tthis.scribe.exitAlignment(assignmentAlignment, true);\t\t\t", "-\t\t\t\tAlignment2 assignmentAlignment = this.scribe.createAlignment(\"fieldDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, Alignment.R_OUTERMOST, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$", "+\t\t\t\tAlignment2 assignmentAlignment = this.scribe.createAlignment(\"fieldDeclarationAssignmentAlignment\", this.preferences.alignment_for_assignment, 1, this.scribe.scanner.currentPosition); //$NON-NLS-1$"]}], "num": 30906}
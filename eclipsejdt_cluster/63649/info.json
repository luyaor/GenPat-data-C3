{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbf18568f1fb45a4074d236b70fe3bcf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaf8798cc7b1c03bca603c81ca3024c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "5e4c4920e35b65d6490ac6b84345fb929f0e48cf", "commitAfterChange": "2b086e10a4c2ab219f8cec9c4ed89af8f499c40a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic char charValue()", "signatureAfterChange": "  \tpublic char charValue()", "diff": ["-\t\t\t\t\t\t}", "-\t\t\t\t\t\tnextChar = (char) scanner.getNextChar();", "-\t\t\t\t\t\tif (nextChar == -1) {", "-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (nextChar != '\\'') {", "-\t\t\t\t\t\t\tif (!Character.isDigit(nextChar)) {", "+\t\t\t\t\t\t\tnextChar = (char) scanner.getNextChar();", "+\t\t\t\t\t\t\tif (nextChar == -1) {", "-\t\t\t\t\t\t\tnumber = (number * 8) + Character.getNumericValue(nextChar);", "+\t\t\t\t\t\t\tif (nextChar != '\\'') {", "+\t\t\t\t\t\t\t\tif (!Character.isDigit(nextChar)) {", "+\t\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");//$NON-NLS-1$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnumber = (number * 8) + Character.getNumericValue(nextChar);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tvalue = (char) number;", "+\t\t\t\t\t\treturn (char) number;\t\t\t", "-\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc74c6fff42a1536b8d7496788f1b0a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java", "commitBeforeChange": "44da6dbdddc84933c9778a1c775b25e500ccfc9b", "commitAfterChange": "c68d705c412170c5bfbef661e69c45f2613fe9ed", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \r \tpublic String getLiteralValue()", "signatureAfterChange": " \r \tpublic String getLiteralValue()", "diff": ["+\t\t\t\t\t\tcase 'u' :\r", "+\t\t\t\t\t\t\t//handle the case of unicode.\r", "+\t\t\t\t\t\t\tint currentPosition = i + 1;\r", "+\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c4 < 0){\r", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tb.append((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4));\r", "+\t\t\t\t\t\t\t\ti = currentPosition - 1;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r"]}], "num": 63649}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "286b7b82acadf88cf99c72ee65dbedb7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8106d45be984c1d3018b0249512ee90f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocImplicitTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope) {", "+\tprotected TypeBinding internalResolveType(Scope scope) {", "-\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "-\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-", "-\t\tthis.resolvedType = scope.enclosingReceiverType();", "-\t\tif (this.resolvedType == null)", "+\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\t\treturn this.resolvedType;", "+\t\t\t} else {", "+\t\t\t\tswitch (this.resolvedType.problemId()) {", "+\t\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "+\t\t\t\t\t\treturn type;\t\t\t", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t}", "+\t\tboolean hasError;", "+\t\tTypeBinding type = this.resolvedType = getTypeBinding(scope);", "+\t\tif (type == null) {", "-\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t} else if ((hasError = !type.isValidBinding())== true) {", "+\t\t\tswitch (type.problemId()) {", "+\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\ttype = type.closestMatch();", "+\t\t\t\t\tif (type == null) return null;", "+\t\t\t\t\tbreak;\t\t\t\t\t", "+\t\t\t\tdefault :", "+\t\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\tif (type.isArrayType() && ((ArrayBinding) type).leafComponentType == TypeBinding.VOID) {", "+\t\t\tscope.problemReporter().cannotAllocateVoidArray(this);", "-\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "-\t\t\treportDeprecatedType(this.resolvedType, scope);", "-\t\t", "+\t\tif (isTypeUseDeprecated(type, scope)) {", "+\t\t\treportDeprecatedType(type, scope);", "+\t\t}", "-\t\tif (this.resolvedType.isGenericType() || this.resolvedType.isParameterizedType()) {", "-\t\t\treturn this.resolvedType = scope.environment().convertToRawType(this.resolvedType, true /*force the conversion of enclosing types*/);", "+\t\tif (type.isGenericType() || type.isParameterizedType()) {", "+\t\t\ttype = scope.environment().convertToRawType(type, true /*force the conversion of enclosing types*/);", "-\t\treturn this.resolvedType;", "+\t\t", "+\t\tif (hasError) {", "+\t\t\t// do not store the computed type, keep the problem type instead", "+\t\t\treturn type;", "+\t\t}", "+\t\treturn this.resolvedType = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b766a1b01a2b2a913fadd659e61b56d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocSingleTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding internalResolveType(Scope scope)", "diff": ["-\tTypeBinding internalResolveType(Scope scope) {", "+\tprotected TypeBinding internalResolveType(Scope scope) {", "-\t\tif (this.resolvedType != null)// is a shared type reference which was already resolved", "-\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-", "+\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\t\treturn this.resolvedType;", "+\t\t\t} else {", "+\t\t\t\tswitch (this.resolvedType.problemId()) {", "+\t\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName :\t\t\t\t\t\t", "+\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "+\t\t\t\t\t\treturn type;\t\t\t", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t}\t\t\t", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\tReferenceBinding closestMatch = ((ProblemReferenceBinding)this.resolvedType).closestMatch();", "+\t\t\t\t\tTypeBinding closestMatch = this.resolvedType.closestMatch();", "-\t\t", "-\t\t\treturn this.resolvedType = scope.environment().convertToRawType(this.resolvedType, true /*force the conversion of enclosing types*/);", "+\t\t\tthis.resolvedType = scope.environment().convertToRawType(this.resolvedType, true /*force the conversion of enclosing types*/);"]}], "num": 11239}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2de00d5c53b4b3b1e7014071d1886887", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1696bb5be96811828cdc77ac4424b53e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeMethodReference.java", "commitBeforeChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "commitAfterChange": "f9b5a54e0afa9af686e707bcc0c484de0728c860", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic Type getType()", "signatureAfterChange": " \tpublic Type getType()", "diff": ["+\t\tif (this.type == null) {", "+\t\t\t// lazy init must be thread-safe for readers", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.type == null) {", "+\t\t\t\t\tpreLazyInit();", "+\t\t\t\t\tthis.type = new SimpleType(this.ast);", "+\t\t\t\t\tpostLazyInit(this.type, TYPE_PROPERTY);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3581583f352df9d24ba20bf2ce6226f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies,  \t\tIProgressMonitor progressMonitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies,  \t\tIProgressMonitor progressMonitor) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\t\t// create parser for this project", "-\t\t\t\t\t\tthis.createParser(javaProject);", "+\t\t\t\t\t\t// initialization for this project", "+\t\t\t\t\t\tif (length == 1) {", "+\t\t\t\t\t\t\t// if only one potential match, a file name environment costs too much,", "+\t\t\t\t\t\t\t// so use the existing searchable  environment wich will populate the java model", "+\t\t\t\t\t\t\t// only for this potential match and its required types.", "+\t\t\t\t\t\t\tif (this.nameEnvironment != null) { // cleanup", "+\t\t\t\t\t\t\t\tthis.nameEnvironment.cleanup();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.nameEnvironment = javaProject.getSearchableNameEnvironment();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.initializeNameEnvironment(javaProject);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.initialize(javaProject);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b4e95d446c924cf740eea3bf6359b8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExpressionMethodReference.java", "commitBeforeChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "commitAfterChange": "f9b5a54e0afa9af686e707bcc0c484de0728c860", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic Expression getExpression()", "signatureAfterChange": " \tpublic Expression getExpression()", "diff": ["+\t\tif (this.expression == null) {", "+\t\t\t// lazy init must be thread-safe for readers", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.expression == null) {", "+\t\t\t\t\tpreLazyInit();", "+\t\t\t\t\tthis.expression = new SimpleName(this.ast);", "+\t\t\t\t\tpostLazyInit(this.expression, EXPRESSION_PROPERTY);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7fa2c8346b6503bdc954e90182a123f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic abstract SimpleName getName();", "signatureAfterChange": " \tpublic SimpleName getName()", "diff": ["-\tpublic abstract SimpleName getName();", "+\tpublic SimpleName getName() {", "+\t\tif (this.variableName == null) {", "+\t\t\t// lazy init must be thread-safe for readers", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.variableName == null) {", "+\t\t\t\t\tpreLazyInit();", "+\t\t\t\t\tthis.variableName = new SimpleName(this.ast);", "+\t\t\t\t\tpostLazyInit(this.variableName, internalNameProperty());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn this.variableName;", "+\t}"]}], "num": 70389}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab730c50572a93605797473d70f78c1e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "123de8234d634b0e637d41d7b8d41146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tList<Token> prepareFormattedCode(String source, int kind)", "signatureAfterChange": "  \tprivate IRegion getCoveredRegion(IRegion[] regions)", "diff": ["-", "-\tList<Token> prepareFormattedCode(String source, int kind) {", "-\t\tif (!init(source))", "-\t\t\treturn null;", "-", "-\t\tthis.astRoot = parseSourceCode(kind);", "-\t\tif (this.astRoot == null)", "-\t\t\treturn null;", "-", "-\t\tif (kind != CodeFormatter.K_UNKNOWN)", "-\t\t\tfindHeader();", "-", "-\t\tprepareSpaces();", "-\t\tprepareLineBreaks();", "-\t\tprepareComments();", "-\t\tprepareWraps();", "-", "-\t\tthis.tokenManager.applyFormatOff();", "-", "-\t\treturn this.tokens;", "-\t}", "+", "+\tprivate IRegion getCoveredRegion(IRegion[] regions) {", "+\t\tint length = regions.length;", "+\t\tif (length == 1) {", "+\t\t\treturn regions[0];", "+\t\t}", "+", "+\t\tint offset = regions[0].getOffset();", "+\t\tIRegion lastRegion = regions[length - 1];", "+", "+\t\treturn new Region(offset, lastRegion.getOffset() + lastRegion.getLength() - offset);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba2b784b421cd418f4b4455cdafadef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tpublic boolean hasRangeCopySources(ASTNode parent, StructuralPropertyDescriptor property)", "signatureAfterChange": " \t \tprivate void revertListWithRanges(RewriteEvent[] childEvents, Set placeholders, List revertedChildren)", "diff": ["-\t", "-\tpublic boolean hasRangeCopySources(ASTNode parent, StructuralPropertyDescriptor property) {", "-\t\tif (this.rangeCopySources == null) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tfor (int i= 0; i < this.rangeCopySources.size(); i++) {", "-\t\t\tCopySourceInfo curr= (CopySourceInfo) this.rangeCopySources.get(i);", "-\t\t\tif (curr.parent == parent && curr.childProperty == property) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t", "+\tprivate void revertListWithRanges(RewriteEvent[] childEvents, Set placeholders, List revertedChildren) {", "+\t\tfor (int i= 0; i < childEvents.length; i++) {", "+\t\t\tRewriteEvent event= childEvents[i];", "+\t\t\tASTNode node= (ASTNode) event.getOriginalValue();", "+\t\t\tif (placeholders.contains(node)) {", "+\t\t\t\tRewriteEvent[] placeholderChildren= getListEvent(node, Block.STATEMENTS_PROPERTY, false).getChildren();", "+\t\t\t\trevertListWithRanges(placeholderChildren, placeholders, revertedChildren);", "+\t\t\t} else {", "+\t\t\t\trevertedChildren.add(event);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 40794}
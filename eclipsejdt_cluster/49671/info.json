{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b541ae702118591678d58fabbddd0d48", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a4fd2f916d56cdbba6d6b6d71507360", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1133c6410b96942988ad1d041f5655442b099448", "commitAfterChange": "07e87f4c2f12f879ec7ed457ed90a4c633cae710", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=316456", "+\t\tboolean insideTypeAnnotations = this instanceof MethodScope && ((MethodScope) this).insideTypeAnnotation;", "-\t\t\tif (invocationSite == null", "+\t\t\tif (invocationSite == null || insideTypeAnnotations"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a71f074867aeda3f08cafbb900bb34ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "2acd248eb60573a009a5b58c86beac17419631cd", "commitAfterChange": "a9713b4720f2b6e87a0d15709a3fbdb374d451f1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " boolean isSubstituteParameterSubsignature(MethodBinding method, MethodBinding substituteMethod)", "signatureAfterChange": " boolean isSubstituteParameterSubsignature(MethodBinding method, MethodBinding substituteMethod)", "diff": ["+", "+\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=279836", "+\t\tif (method.declaringClass.isRawType() && substituteMethod.declaringClass.isRawType())", "+\t\t\tif (method.hasSubstitutedParameters() && substituteMethod.hasSubstitutedParameters())", "+\t\t\t\treturn areMethodsCompatible(method, substituteMethod);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c49d3fe37944d6beed344ee5fb1ebac9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "8c8cd78ee7d91af397b355193b993289ef7f4454", "commitAfterChange": "dab69163a24dbd341ec146b21a1806a7799bbbc6", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private SourceMethodElementInfo createMethodInfo(MethodInfo methodInfo, SourceMethod handle)", "signatureAfterChange": " private SourceMethodElementInfo createMethodInfo(MethodInfo methodInfo, SourceMethod handle)", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=334783", "+\t// Process the parameter annotations from the arguments", "+\tif (methodInfo.node != null && methodInfo.node.arguments != null) {", "+\t\tinfo.arguments = acceptMethodParameters(methodInfo.node.arguments, handle, methodInfo);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d489fed04f3fe58bd89c5eaaa0ea226f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t} else if (receiverType.isRawType() && method.hasSubstitutedParameters()) {", "-\t\t    scope.problemReporter().unsafeRawInvocation((ASTNode)invocationSite, receiverType, method);", "+\t\t} else if (!receiverType.isUnboundWildcard() && method.declaringClass.isRawType() && method.hasSubstitutedParameters()) {", "+\t\t    scope.problemReporter().unsafeRawInvocation((ASTNode)invocationSite, method);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef09cf83e7ff37fba9921c669c6725d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t} else if (!receiverType.isUnboundWildcard() && method.declaringClass.isRawType() && method.hasSubstitutedParameters()) {", "+\t\t} else if (!method.isStatic() && !receiverType.isUnboundWildcard() && method.declaringClass.isRawType() && method.hasSubstitutedParameters()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc446429a3328954f5a3ea236f67e50e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "34b0c733cf1add870513cda078de5b3780de1701", "commitAfterChange": "2aca7755ada443ed3cdced7d77f812416f0a5df2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=270446, When the AST built is an abridged version", "+\t\t// we don't have all tree nodes we would otherwise expect. (see ASTParser.setFocalPosition)", "+\t\tif (this.constructorCall == null)", "+\t\t\tbreak checkUnused; "]}], "num": 49671}
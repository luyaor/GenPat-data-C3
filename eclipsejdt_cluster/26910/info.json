{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "526adbb2cce05cec83da6a5591b94c68", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1318aeb73868278214d49f87f71f96cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "578c21c1e18bf1107cbfd2c0d5f2f8d0a328f266", "commitAfterChange": "762bd2409925136301ba78a2088db7bdf120f80d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \tMap<String, String> options = new HashMap<String, String>();", "-    \t\treturn options;", "+    \t\treturn new HashMap<String, String>();", "-    \tString[] parsedOptions = allOptions.split(\" \");", "-    \tfor (String keyAndVal : parsedOptions) {", "-    \t\tif (!keyAndVal.startsWith(\"-A\")) {", "-    \t\t\tcontinue;", "-    \t\t}", "-    \t\tString[] parsedKeyAndVal = keyAndVal.split(\"=\", 2);", "-    \t\tif (parsedKeyAndVal.length > 0) {", "-    \t\t\tString key = parsedKeyAndVal[0].substring(2);", "-    \t\t\tif (key.length() < 1) {", "-    \t\t\t\tcontinue;", "-    \t\t\t}", "-    \t\t\tif (parsedKeyAndVal.length == 1) {", "-    \t\t\t\toptions.put(key, null);", "+    \telse {", "+    \t\tOptionsParser op = new OptionsParser(allOptions);", "+    \t\treturn op.parse();", "+    \t}", "+    }", "-    \t\t\t\toptions.put(key, parsedKeyAndVal[1]);", "-    \treturn options;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcb118f5d401baf1a4899f1c05dce639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "7e41439f7b91a880bb131d143b9faf947232eb35", "commitAfterChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\t// Verify that we get the root elements we expect", "-\t\tSet<String> expectedRootElementNames = new HashSet<String>(ROOT_ELEMENT_NAMES.length);", "-\t\tfor (String name : ROOT_ELEMENT_NAMES) {", "-\t\t\texpectedRootElementNames.add(name);", "-\t\t}", "-\t\tSet<? extends Element> actualRootElements = roundEnv.getRootElements();", "-\t\tif (null == actualRootElements) {", "-\t\t\treportError(\"getRootElements() returned null\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tfor (Element e : actualRootElements) {", "-\t\t\tString name = e.getSimpleName().toString();", "-\t\t\tif (!expectedRootElementNames.remove(name)) {", "-\t\t\t\treportError(\"Missing root element \" + name);", "-\t\t\t}", "-\t\t}", "-\t\tif (!expectedRootElementNames.isEmpty()) {", "-\t\t\treportError(\"Found extra root elements including \" + expectedRootElementNames.iterator().next());", "+\t\tif (!collectElements()) {", "-\t\tif (!collectElements()) {", "+\t\tif (!examineRoundEnv(roundEnv)) {"]}], "num": 26910}
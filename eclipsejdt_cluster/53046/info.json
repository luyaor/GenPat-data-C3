{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ffd83f7b4eb51b9b329be41c2eb21c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07d3bce0b437c9aab76877788ead95a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " public void testCompletionAbstractMethodRelevance2() throws JavaModelException", "signatureAfterChange": " public void testCompletionAbstractMethodRelevance2() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionAbstractMethodRelevance2.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"eq\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\"element:equals    completion:public boolean equals(Object obj)    relevance:\"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\trequestor.getResults());", "+\tICompilationUnit superClass = null;", "+\ttry {", "+\t\tsuperClass = getWorkingCopy(", "+\t            \"/Completion/src/CompletionSuperInterface.java\",", "+\t            \"public interface CompletionSuperInterface{\\n\"+", "+\t            \"\tpublic int eqFoo(int a,Object b);\\n\"+", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionAbstractMethodRelevance2.java\",", "+\t            \"public class CompletionAbstractMethodRelevance2 implements CompletionSuperInterface {\\n\"+", "+\t            \"\teq\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"eq\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionAbstractMethodRelevance2;, ()V, eq, null, \"+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+\"}\\n\" +", "+\t\t\t\"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+\"}\",", "+\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(superClass != null) {", "+\t\t\tsuperClass.discardWorkingCopy();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553896d77c9aeaf70c770968000ae9aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3022496b74f0bbeccd974aa8b5d23fb3438cc799", "commitAfterChange": "0841b38e29c9b9a090c0d849b31ae1e8b6484d97", "methodNumberBeforeChange": 557, "methodNumberAfterChange": 557, "signatureBeforeChange": " public void testCompletionStaticMethodDeclaration1() throws JavaModelException", "signatureAfterChange": " public void testCompletionStaticMethodDeclaration1() throws JavaModelException", "diff": ["-\tCompletionTestsRequestor requestor = new CompletionTestsRequestor();", "-\tICompilationUnit cu= getCompilationUnit(\"Completion\", \"src\", \"\", \"CompletionStaticMethodDeclaration1.java\");", "-", "-\tString str = cu.getSource();", "-\tString completeBehind = \"foo\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tcu.codeComplete(cursorLocation, requestor);", "-", "-\tassertEquals(", "-\t\t\t\"element:foo    completion:public static void foo()    relevance:\" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + \"\\n\" +", "-\t\t\t\"element:foo0    completion:public void foo0()    relevance:\" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),", "-\t\t\trequestor.getResults());", "+\tICompilationUnit aType = null;", "+\ttry {", "+\t\taType = getWorkingCopy(", "+\t            \"/Completion/src/TypeWithAMethodAndAStaticMethod .java\",", "+\t            \"public class TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tpublic static void foo(){}\\n\"+", "+\t            \"\tpublic void foo0(){}\\n\"+", "+\t            \"}\");", "+\t\t", "+\t\tthis.wc = getWorkingCopy(", "+\t            \"/Completion/src/CompletionStaticMethodDeclaration1.java\",", "+\t            \"public class CompletionStaticMethodDeclaration1 extends TypeWithAMethodAndAStaticMethod {\\n\"+", "+\t            \"\tfoo\\n\"+", "+\t            \"}\");", "+\t    ", "+\t    ", "+\t    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t    String str = this.wc.getSource();", "+\t    String completeBehind = \"foo\";", "+\t    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t    this.wc.codeComplete(cursorLocation, requestor, this.owner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"foo[POTENTIAL_METHOD_DECLARATION]{foo, LCompletionStaticMethodDeclaration1;, ()V, foo, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"foo0[METHOD_DECLARATION]{public void foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_METHOD_OVERIDE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tif(aType != null) {", "+\t\t\taType.discardWorkingCopy();", "+\t\t}", "+\t}"]}], "num": 53046}
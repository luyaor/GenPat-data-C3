{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4c362a16daded842d35ba71555989d2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a69e3d71cd7ae41180b81fd70c4ff12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 48, "signatureBeforeChange": "  protected void initInMethodAndInFieldInitializationStack(RecoveredElement currentElement)", "signatureAfterChange": " protected int lastIndexOfElement(int kind)", "diff": ["-", "-protected void initInMethodAndInFieldInitializationStack(RecoveredElement currentElement) {", "-", "-\tint length = currentElement.depth() + 1;", "-\tint ptr = length;", "-\tboolean[] methodStack = new boolean[length];", "-\tboolean[] fieldInitializationStack = new boolean[length];", "-\tboolean inMethod = false;", "-\tboolean inFieldInitializer = false;", "-\t", "-\tRecoveredElement element = currentElement;", "-\twhile(element != null){", "-\t\tif(element instanceof RecoveredMethod ||", "-\t\t\telement instanceof RecoveredInitializer) {", "-\t\t\tif(element.parent == null) {", "-\t\t\t\tmethodStack[--ptr] = true;", "-\t\t\t\tfieldInitializationStack[ptr] = false;", "-\t\t\t}", "-\t\t\tinMethod = true;", "-\t\t} else if(element instanceof RecoveredField){", "-\t\t\tinFieldInitializer = element.sourceEnd() == 0;", "-\t\t} else if(element instanceof RecoveredType){", "-\t\t\tmethodStack[--ptr] = inMethod;", "-\t\t\tfieldInitializationStack[ptr] = inFieldInitializer;", "-\t", "-\t\t\tinMethod = false;", "-\t\t\tinFieldInitializer = false;", "-\t\t} else if(element instanceof RecoveredUnit) {", "-\t\t\tmethodStack[--ptr] = false;", "-\t\t\tfieldInitializationStack[ptr] = false;", "-\t\t}", "-\t\telement = element.parent;", "-\t}", "-\t", "-\tinMethodPtr = length - ptr - 1;", "-\tinFieldInitializationPtr = inMethodPtr;", "-\tSystem.arraycopy(methodStack, ptr, inMethodStack, 0, inMethodPtr + 1);", "-\tSystem.arraycopy(fieldInitializationStack, ptr, inFieldInitializationStack, 0, inFieldInitializationPtr + 1);", "-\t", "-}", "+}", "+protected int lastIndexOfElement(int kind) {", "+\tint i = elementPtr;", "+\twhile(i > -1) {", "+\t\tif(elementKindStack[i] == kind) return i;", "+\t\ti--;\t", "+\t}", "+\treturn -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745b4a596ec59f5ed005e18829a84f61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "commitAfterChange": "458d6ecb95c70f1df88b46b781028646894448a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "signatureAfterChange": "  private LinkedHashSet<ClasspathLocation> computeClasspathLocations(JavaProject javaProject)", "diff": ["-private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {", "+", "+private LinkedHashSet<ClasspathLocation> computeClasspathLocations(JavaProject javaProject) {", "-\t\t// project doesn't exist", "-\t\tthis.locations = new ClasspathLocation[0];", "-\t\treturn;", "+\t\treturn null;// project doesn't exist", "+\tLinkedHashSet<ClasspathLocation> locations = new LinkedHashSet<ClasspathLocation>();", "-\tClasspathLocation[] cpLocations = new ClasspathLocation[length];", "-\tint index = 0;", "-\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "-\t\tIPath path = root.getPath();", "-\t\ttry {", "-\t\t\tif (root.isArchive()) {", "-\t\t\t\tZipFile zipFile = manager.getZipFile(path);", "-\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t} else {", "-\t\t\t\tObject target = JavaModel.getTarget(path, true);", "-\t\t\t\tif (target == null) {", "-\t\t\t\t\t// target doesn't exist any longer", "-\t\t\t\t\t// just resize cpLocations", "-\t\t\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "-\t\t\t\t} else if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\t\tcpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, root.fullExclusionPatternChars(), root.fullInclusionPatternChars());", "-\t\t\t\t} else {", "-\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (CoreException e1) {", "-\t\t\t// problem opening zip file or getting root kind", "-\t\t\t// consider root corrupt and ignore", "-\t\t\t// just resize cpLocations", "-\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "-\t\t}", "+\t\tClasspathLocation cp = mapToClassPathLocation(manager, (PackageFragmentRoot) roots[i]);", "+\t\tif (cp != null) locations.add(cp);", "-\tthis.locations = cpLocations;", "+\treturn locations;", "+}"]}], "num": 43709}
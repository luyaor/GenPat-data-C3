{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a67cb086a783a67deb97ef277284a1cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a658349e3a2ed114fee693c844df515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "0243628c08ab4b4900a7554ddbc8a451c6a47550", "commitAfterChange": "047584befb8673c45fb37a5eec1f22e3adb791d0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["+\t\t\t\t\tTypeVariableBinding[] typeVariables = methodBinding.original().typeVariables;", "+\t\t\t\t\tlength = typeVariables == null ? 0 : typeVariables.length;", "+\t\t\t\t\tchar[][] typeParameterNames = new char[length][];", "+\t\t\t\t\tchar[][][] typeParameterBoundNames = new char[length][][];", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tTypeVariableBinding typeVariable = typeVariables[i];", "+\t\t\t\t\t\ttypeParameterNames[i] = typeVariable.sourceName;", "+\t\t\t\t\t\tif (typeVariable.firstBound == null) {", "+\t\t\t\t\t\t\ttypeParameterBoundNames[i] = new char[0][];", "+\t\t\t\t\t\t} else if (typeVariable.firstBound == typeVariable.superclass) {", "+\t\t\t\t\t\t\tint boundCount = 1 + (typeVariable.superInterfaces == null ? 0 : typeVariable.superInterfaces.length);", "+\t\t\t\t\t\t\ttypeParameterBoundNames[i] = new char[boundCount][];", "+\t\t\t\t\t\t\ttypeParameterBoundNames[i][0] = typeVariable.superclass.sourceName;", "+\t\t\t\t\t\t\tfor (int j = 1; j < boundCount; j++) {", "+\t\t\t\t\t\t\t\ttypeParameterBoundNames[i][j] = typeVariables[i].superInterfaces[j - 1].sourceName;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint boundCount = typeVariable.superInterfaces == null ? 0 : typeVariable.superInterfaces.length;", "+\t\t\t\t\t\t\ttypeParameterBoundNames[i] = new char[boundCount][];", "+\t\t\t\t\t\t\tfor (int j = 0; j < boundCount; j++) {", "+\t\t\t\t\t\t\t\ttypeParameterBoundNames[i][j] = typeVariables[i].superInterfaces[j].sourceName;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t\t\ttypeParameterNames,", "+\t\t\t\t\t\t\ttypeParameterBoundNames,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee592fb0e722f8e23cbba183376db3f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["+ * char[][]\tInterned root names", "+\tSimpleLookupTable internedRootNames = new SimpleLookupTable(3);", "+\t\t\tchar[][] rNames = collection.rootReferences;", "+\t\t\tfor (int j = 0, m = rNames.length; j < m; j++) {", "+\t\t\t\tchar[] rName = rNames[j];", "+\t\t\t\tif (!internedRootNames.containsKey(rName)) // remember the names have been interned", "+\t\t\t\t\tinternedRootNames.put(rName, new Integer(internedRootNames.elementSize));", "+\t\t\t}", "-\tchar[][] internedArray = new char[internedSimpleNames.elementSize][];", "+\tchar[][] internedArray = new char[internedRootNames.elementSize][];", "+\tObject[] rootNames = internedRootNames.keyTable;", "+\tObject[] positions = internedRootNames.valueTable;", "+\tfor (int i = positions.length; --i >= 0; ) {", "+\t\tif (positions[i] != null) {", "+\t\t\tint index = ((Integer) positions[i]).intValue();", "+\t\t\tinternedArray[index] = (char[]) rootNames[i];", "+\t\t}", "+\t}", "+\twriteNames(internedArray, out);", "+\t// now write the interned simple names", "+\tinternedArray = new char[internedSimpleNames.elementSize][];", "-\tObject[] positions = internedSimpleNames.valueTable;", "+\tpositions = internedSimpleNames.valueTable;", "+\t\t\t\tchar[][] rNames = collection.rootReferences;", "+\t\t\t\tint rLength = rNames.length;", "+\t\t\t\tout.writeInt(rLength);", "+\t\t\t\tfor (int j = 0; j < rLength; j++) {", "+\t\t\t\t\tindex = (Integer) internedRootNames.get(rNames[j]);", "+\t\t\t\t\tout.writeInt(index.intValue());", "+\t\t\t\t}"]}], "num": 49359}
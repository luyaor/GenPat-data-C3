{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "109f5e6fb2eda514e1a85e3e8f1769a8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eccab4de80d18e6711dccd86bd7f1ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "639f95fb93a85f023afe828b77bfc8cd4dbf811c", "commitAfterChange": "8a3cbdf1db434ade029724481c4ce0338046043a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": " private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName, boolean asBinaryOnly)", "diff": ["-private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName){", "+private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName, boolean asBinaryOnly){", "-\t\t\tNameEnvironmentAnswer answer = this.classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);", "+\t\t\tNameEnvironmentAnswer answer = this.classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName, asBinaryOnly);", "-\t\t\t\t? p.findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName)", "-\t\t\t\t: p.findClass(typeName, qp2, qb2);", "+\t\t\t\t? p.findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName, asBinaryOnly)", "+\t\t\t\t: p.findClass(typeName, qp2, qb2, asBinaryOnly);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "101c82a8f2c927ffcf0044b3c6787c67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "71ca7b096c04e123348cb13b19efbd2de402f9f2", "commitAfterChange": "6872e25fe154a5852fcd3ac0c49b686e5e81ec7b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public boolean isPackage(char[][] compoundName, char[] packageName)", "signatureAfterChange": "\r public boolean isPackage(char[][] compoundName, char[] packageName)", "diff": ["-\tif (compoundName == null)\r", "-\t\tcompoundName = new char[0][];\r", "-\r", "-\tfor (int i = 0, length = classpaths.length; i < length; i++)\r", "-\t\tif (classpaths[i].isPackage(compoundName, packageName))\r", "-\t\t\treturn true;\r", "+\tString qualifiedPackageName = new String(CharOperation.concatWith(compoundName, packageName, '/'));\r", "+\tString qp2 = File.separatorChar == '/' ? qualifiedPackageName : qualifiedPackageName.replace('/', File.separatorChar);\r", "+\tif (qualifiedPackageName == qp2) {\r", "+\t\tfor (int i = 0, length = classpaths.length; i < length; i++)\r", "+\t\t\tif (classpaths[i].isPackage(qualifiedPackageName))\r", "+\t\t\t\treturn true;\r", "+\t} else {\r", "+\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {\r", "+\t\t\tClasspath p = classpaths[i];\r", "+\t\t\tif ((p instanceof ClasspathJar) ? p.isPackage(qualifiedPackageName) : p.isPackage(qp2))\r", "+\t\t\t\treturn true;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf6e1fcdad8a4d498004681f6c6c08f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public char[] genericSignature()", "signatureAfterChange": " public char[] genericSignature()", "diff": ["-\t    for (int i = 0, length = this.typeVariables.length; i < length; i++) {", "+\t    for (int i = 0, length = this.typeVariables.length; i < length; i++)", "-\t    }", "-\t\t    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-\t\t        if (this.superInterfaces[i].isParameterizedType()) break noSignature;", "-\t\t    }        ", "+\t\t    for (int i = 0, length = this.superInterfaces.length; i < length; i++)", "+\t\t        if (this.superInterfaces[i].isParameterizedType())", "+\t\t\t\t\tbreak noSignature;", "-\tif (this.superclass != null) {", "+\tif (this.superclass != null)", "-\t} else {", "-\t\t// interface scenario only (as Object cannot be generic) - 65953", "+\telse // interface scenario only (as Object cannot be generic) - 65953", "-\t}", "-    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+    for (int i = 0, length = this.superInterfaces.length; i < length; i++)", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c85a93ceb1b247965f2071d68031cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "7691e377e6a3f67a1337716bc77c2ad7f6446dc7", "commitAfterChange": "ba9391e4c434f83f729da7aa6be3c7a6812bfd1a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["-\t\t// only collect for method type parameters", "-\t\tif (!(this.declaringElement instanceof MethodBinding)) return;", "+            // recurse in variable bounds (82187)", "+            if (this.superclass != null && this.firstBound == this.superclass) {", "+                this.superclass.collectSubstitutes(otherType, substitutes);", "+            }", "+            for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+                this.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "+            }", "-\t    // recurse in variable bounds (82187)", "-\t    if (this.superclass != null && this.firstBound == this.superclass) {", "-\t    \tthis.superclass.collectSubstitutes(otherType, substitutes);", "-\t    }", "-\t   \tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-\t   \t\tthis.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "-\t   \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b0f43f60290cbee1a419563c0a9aa83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": " private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\tfor (int i = 0, length = knownFileNames.length; i < length; i++)", "-\t\tif (qualifiedTypeName.equals(knownFileNames[i]))", "+\tfor (int i = 0, length = this.knownFileNames.length; i < length; i++)", "+\t\tif (qualifiedTypeName.equals(this.knownFileNames[i]))", "-\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {", "-\t\t\tNameEnvironmentAnswer answer = classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);", "+\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++) {", "+\t\t\tNameEnvironmentAnswer answer = this.classpaths[i].findClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);", "-\t\tfor (int i = 0, length = classpaths.length; i < length; i++) {", "-\t\t\tClasspath p = classpaths[i];", "+\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++) {", "+\t\t\tClasspath p = this.classpaths[i];"]}], "num": 55399}
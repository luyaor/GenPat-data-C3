{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "382f40164fa827d028a49902a7c41fe1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4497f3f0919fbac6666bdae8785651e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3631cf47f01fc0da1be7732f6c067adbe5bd4214", "commitAfterChange": "bcf1522935dfbdb0bc359777ceee5d7211666ccc", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 227, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-", "+\tboolean isDietParse = diet;", "+\tint oldFirstToken = getFirstToken();", "+\thasError = false;", "+\t", "-\t\t\t\tthis.reportSyntaxError(ERROR_ACTION, currentToken, stateStackTop);", "-\t\t\t\thasReportedError = true;", "+\t\t\t\tif(!fineErrorDiagnose) {", "+\t\t\t\t\tif(reportSyntaxErrorIsRequired) {", "+\t\t\t\t\t\tthis.reportSyntaxError(ERROR_ACTION, currentToken, stateStackTop);", "+\t\t\t\t\t}", "+\t\t\t\t\thasReportedError = true;", "+\t\t\t\t}", "+\t\t\t\thasError = true;", "-\t\t\t\tact = START_STATE;", "-\t\t\t\tstateStackTop = -1;", "-\t\t\t\tcurrentToken = getFirstToken();", "-\t\t\t\tcontinue ProcessTerminals;", "-\t\t\t} else {", "-\t\t\t\tact = ERROR_ACTION;", "-\t\t\t}\tbreak ProcessTerminals;", "-\t\t}", "-\t\tif (act <= NUM_RULES)", "-\t\t\tstateStackTop--;", "-\t\telse", "-\t\t\tif (act > ERROR_ACTION) { /* shift-reduce */", "-\t\t\t\tconsumeToken(currentToken);", "-\t\t\t\tif (currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\ttry{", "-\t\t\t\t\tcurrentToken = scanner.getNextToken();", "-\t\t\t\t} catch(InvalidInputException e){", "-\t\t\t\t\tif (!hasReportedError){", "-\t\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "-\t\t\t\t\t\thasReportedError = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tlastCheckPoint = scanner.currentPosition;", "-\t\t\t\t\trestartRecovery = true;", "-\t\t\t\t}\t\t\t\t\t", "-\t\t\t\tact -= ERROR_ACTION;", "-\t\t\t} else", "-\t\t\t\tif (act < ACCEPT_ACTION) { /* shift */", "+\t\t\t\t\tact = START_STATE;", "+\t\t\t\t\tstateStackTop = -1;", "+\t\t\t\t\tcurrentToken = getFirstToken();", "+\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\t} else {", "+\t\t\t\t\tact = ERROR_ACTION;", "+\t\t\t\t}\tbreak ProcessTerminals;", "+\t\t\t}", "+\t\t\tif (act <= NUM_RULES)", "+\t\t\t\tstateStackTop--;", "+\t\t\telse", "+\t\t\t\tif (act > ERROR_ACTION) { /* shift-reduce */", "-\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\t\tact -= ERROR_ACTION;", "-\t\t\t\t\tbreak ProcessTerminals;", "-", "+\t\t\t\t\tif (act < ACCEPT_ACTION) { /* shift */", "+\t\t\t\t\t\tconsumeToken(currentToken);", "+\t\t\t\t\t\tif (currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\t\t\ttry{", "+\t\t\t\t\t\t\tcurrentToken = scanner.getNextToken();", "+\t\t\t\t\t\t} catch(InvalidInputException e){", "+\t\t\t\t\t\t\tif (!hasReportedError){", "+\t\t\t\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "+\t\t\t\t\t\t\t\thasReportedError = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tlastCheckPoint = scanner.currentPosition;", "+\t\t\t\t\t\t\trestartRecovery = true;", "+\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t\t\t} else", "+\t\t\t\t\t\tbreak ProcessTerminals;", "+\t\t\t", "+\t", "+\tif(reportSyntaxErrorIsRequired && fineErrorDiagnose && hasError) {", "+\t\treportSyntaxErrors(isDietParse, oldFirstToken);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b10ba616129ff7d523d854043d86b55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3394ae20f255987c4e9aa44a93390ba57a3d677f", "commitAfterChange": "1068fd603e3f894423f0007ce5b2e26be2543d4d", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 235, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\t\t\t\t\tact = START_STATE;", "-\t\t\t\t\tthis.stateStackTop = -1;", "-\t\t\t\t\tthis.currentToken = getFirstToken();", "-\t\t\t\t\tcontinue ProcessTerminals;", "-\t\t\t\t} else {", "-\t\t\t\t\tact = ERROR_ACTION;", "-\t\t\t\t}\tbreak ProcessTerminals;", "+\t\t\t\tact = START_STATE;", "+\t\t\t\tthis.stateStackTop = -1;", "+\t\t\t\tthis.currentToken = getFirstToken();", "+\t\t\t\tcontinue ProcessTerminals;", "-\t\t\tif (act <= NUM_RULES)", "-\t\t\t\tthis.stateStackTop--;", "-\t\t\telse", "-\t\t\t\tif (act > ERROR_ACTION) { /* shift-reduce */", "-\t\t\t\t\tconsumeToken(this.currentToken);", "-\t\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\t\ttry{", "-\t\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\t\t} catch(InvalidInputException e){", "-\t\t\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "-\t\t\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "-\t\t\t\t\t\tthis.restartRecovery = true;", "-\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\tact -= ERROR_ACTION;", "-\t\t\t\t} else", "-\t\t\t\t\tif (act < ACCEPT_ACTION) { /* shift */", "-\t\t\t\t\t\tconsumeToken(this.currentToken);", "-\t\t\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\t\t\ttry{", "-\t\t\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\t\t\t} catch(InvalidInputException e){", "-\t\t\t\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "-\t\t\t\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "-\t\t\t\t\t\t\tthis.restartRecovery = true;", "-\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t\tcontinue ProcessTerminals;", "-\t\t\t\t\t} else", "-\t\t\t\t\t\tbreak ProcessTerminals;", "+\t\t\tact = ERROR_ACTION;", "+\t\t\tbreak ProcessTerminals;", "+\t\t}", "+\t\tif (act <= NUM_RULES) {", "+\t\t\tthis.stateStackTop--;", "+\t\t} else if (act > ERROR_ACTION) { /* shift-reduce */", "+\t\t\tconsumeToken(this.currentToken);", "+\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "+\t\t\ttry {", "+\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\t} catch(InvalidInputException e){", "+\t\t\t\tif (!this.hasReportedError){", "+\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "+\t\t\t\t\tthis.hasReportedError = true;", "+\t\t\t\t}", "+\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\t\tthis.restartRecovery = true;", "+\t\t\t}\t\t\t\t\t", "+\t\t\tact -= ERROR_ACTION;", "+\t\t\t", "+\t\t} else {", "+\t\t    if (act < ACCEPT_ACTION) { /* shift */", "+\t\t\t\tconsumeToken(this.currentToken);", "+\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\ttry{", "+\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\t\t} catch(InvalidInputException e){", "+\t\t\t\t\tif (!this.hasReportedError){", "+\t\t\t\t\t\tthis.problemReporter().scannerError(this, e.getMessage());", "+\t\t\t\t\t\tthis.hasReportedError = true;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\t\t\tthis.restartRecovery = true;", "+\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tcontinue ProcessTerminals;", "+\t\t\t}", "+\t\t\tbreak ProcessTerminals;", "+\t\t}", "-\tif(this.reportSyntaxErrorIsRequired && this.hasError) {", "+\tif (this.reportSyntaxErrorIsRequired && this.hasError) {"]}], "num": 31334}
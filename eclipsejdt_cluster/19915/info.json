{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a71ed3eac3d289be1540058255ffdc9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05cb7e3b357d14a39520f00c2b0aad80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  protected void runConformTest(String[] testFiles, String expectedSuccessOutputString, String[] classLib, boolean shouldFlushOutputDirectory, String[] vmArguments, Map customOptions)", "signatureAfterChange": "  \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions)", "diff": ["-", "-protected void runConformTest(String[] testFiles, String expectedSuccessOutputString, String[] classLib, boolean shouldFlushOutputDirectory, String[] vmArguments, Map customOptions) {", "-", "-\tif (shouldFlushOutputDirectory) Util.flushDirectoryContent(new File(OUTPUT_DIR));", "-\t", "-\tIProblemFactory problemFactory = getProblemFactory();", "-\tRequestor requestor = new Requestor(problemFactory, OUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, false);", "-\t", "-\tMap options = getCompilerOptions();", "-\tif (customOptions != null){", "-\t\toptions.putAll(customOptions);", "-\tCompiler batchCompiler =", "-\t\tnew Compiler(", "-\t\t\tgetNameEnvironment(new String[] {}, classLib),", "-\t\t\tgetErrorHandlingPolicy(),", "-\t\t\toptions,", "-\t\t\trequestor,", "-\t\t\tproblemFactory);", "-\tbatchCompiler.compile(compilationUnits(testFiles)); // compile all files together", "-\tif (!requestor.hasErrors) {", "-\t\tString sourceFile = testFiles[0];", "-\t\t", "-\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\tif (vmArguments != null) {", "-\t\t\tif (this.verifier != null) {", "-\t\t\t\tthis.verifier.shutDown();", "-\t\t\t}", "-\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\tthis.createdVerifier = true;", "-\t\t}\t\t", "-\t\tboolean passed = this.verifier.verifyClassFiles(sourceFile, className, expectedSuccessOutputString, this.classpaths, null, vmArguments);", "-\t\tif (!passed) {", "-\t\t\tSystem.out.println(this.getClass().getName() + '#' + this.getName());", "-\t\t \tfor (int i = 0; i < testFiles.length; i+=2) {", "-\t\t \t\tSystem.out.print(testFiles[i]);", "-\t\t \t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t \t\tSystem.out.println(testFiles[i+1]);", "-\t\t \t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t \t}", "+\tprotected void runConformTest(", "+\t\tString[] testFiles, ", "+\t\tString expectedSuccessOutputString, ", "+\t\tString[] classLib,", "+\t\tboolean shouldFlushOutputDirectory, ", "+\t\tString[] vmArguments, ", "+\t\tMap customOptions) {", "+", "+\t\tif (shouldFlushOutputDirectory)", "+\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "+", "+\t\tIProblemFactory problemFactory = getProblemFactory();", "+\t\tRequestor requestor = ", "+\t\t\tnew Requestor(", "+\t\t\t\tproblemFactory, ", "+\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "+\t\t\t\tfalse);", "+", "+\t\tMap options = getCompilerOptions();", "+\t\tif (customOptions != null) {", "+\t\t\toptions.putAll(customOptions);", "-\t\tassertTrue(", "-\t\t\tthis.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\tpassed", "-\t\t);", "-\t\tif (vmArguments != null) {", "-\t\t\tif (this.verifier != null) {", "-\t\t\t\tthis.verifier.shutDown();", "+\t\tCompiler batchCompiler = ", "+\t\t\tnew Compiler(", "+\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "+\t\t\t\tgetErrorHandlingPolicy(), ", "+\t\t\t\toptions,", "+\t\t\t\trequestor, ", "+\t\t\t\tproblemFactory);", "+\t\tbatchCompiler.compile(compilationUnits(testFiles)); // compile all files together", "+\t\tif (!requestor.hasErrors) {", "+\t\t\tString sourceFile = testFiles[0];", "+", "+\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "+\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "+", "+\t\t\tif (vmArguments != null) {", "+\t\t\t\tif (this.verifier != null) {", "+\t\t\t\t\tthis.verifier.shutDown();", "+\t\t\t\t}", "+\t\t\t\tthis.verifier = new TestVerifier(false);", "+\t\t\t\tthis.createdVerifier = true;", "-\t\t\tthis.verifier = new TestVerifier(false);", "+\t\t\tboolean passed = ", "+\t\t\t\tthis.verifier.verifyClassFiles(", "+\t\t\t\t\tsourceFile, ", "+\t\t\t\t\tclassName, ", "+\t\t\t\t\texpectedSuccessOutputString,", "+\t\t\t\t\tthis.classpaths, ", "+\t\t\t\t\tnull, ", "+\t\t\t\t\tvmArguments);", "+\t\t\tif (!passed) {", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "+\t\t\t\t\tpassed);", "+\t\t\tif (vmArguments != null) {", "+\t\t\t\tif (this.verifier != null) {", "+\t\t\t\t\tthis.verifier.shutDown();", "+\t\t\t\t}", "+\t\t\t\tthis.verifier = new TestVerifier(false);", "+\t\t\t\tthis.createdVerifier = true;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\tSystem.out.println(Util.displayString(requestor.problemLog, 2));", "+\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "+\t\t}", "+\t}", "-\t\t}\t\t", "-\t} else {", "-\t\tSystem.out.println(this.getClass().getName() + '#' + this.getName());", "-\t \tSystem.out.println(Util.displayString(requestor.problemLog, 2));", "-\t \tfor (int i = 0; i < testFiles.length; i+=2) {", "-\t \t\tSystem.out.print(testFiles[i]);", "-\t \t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t \t\tSystem.out.println(testFiles[i+1]);", "-\t \t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t \t}", "-\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8797354c2ec5a4896990048910563001", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "commitAfterChange": "c0452100f2ed18d65cf0dd0efb6f9fc0ffa98156", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor)", "signatureAfterChange": " \t \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "diff": ["-", "-\t\tif (shouldFlushOutputDirectory)", "-\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\tRequestor requestor = ", "-\t\t\tnew Requestor(", "-\t\t\t\tproblemFactory, ", "-\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\tfalse,", "-\t\t\t\tclientRequestor,", "-\t\t\t\tfalse, /* show category */", "-\t\t\t\tfalse /* show warning token*/);", "-", "-\t\tMap options = getCompilerOptions();", "-\t\tif (customOptions != null) {", "-\t\t\toptions.putAll(customOptions);", "-\t\t}", "-\t\tCompiler batchCompiler = ", "-\t\t\tnew Compiler(", "-\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\toptions,", "-\t\t\t\trequestor, ", "-\t\t\t\tproblemFactory,", "-\t\t\t\tfalse);", "-\t\tbatchCompiler.options.produceReferenceInfo = true;", "+\t", "+\tprotected void runConformTest(", "+\t\tString[] testFiles, ", "+\t\tString expectedSuccessOutputString, ", "+\t\tString[] classLib,", "+\t\tboolean shouldFlushOutputDirectory, ", "+\t\tString[] vmArguments, ", "+\t\tMap customOptions,", "+\t\tICompilerRequestor clientRequestor,", "+\t\tboolean skipJavac) {", "+\t\t// Non-javac part", "-\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t} catch(RuntimeException e) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\tif (shouldFlushOutputDirectory)", "+\t\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "+\t", "+\t\t\tIProblemFactory problemFactory = getProblemFactory();", "+\t\t\tRequestor requestor = ", "+\t\t\t\tnew Requestor(", "+\t\t\t\t\tproblemFactory, ", "+\t\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tclientRequestor,", "+\t\t\t\t\tfalse, /* show category */", "+\t\t\t\t\tfalse /* show warning token*/);", "+\t", "+\t\t\tMap options = getCompilerOptions();", "+\t\t\tif (customOptions != null) {", "+\t\t\t\toptions.putAll(customOptions);", "-\t\t\tthrow e;", "-\t\t}", "-\t\tif (!requestor.hasErrors) {", "-\t\t\tString sourceFile = testFiles[0];", "-", "-\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-", "-\t\t\tif (vmArguments != null) {", "-\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\tthis.verifier.shutDown();", "-\t\t\t\t}", "-\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\tthis.createdVerifier = true;", "-\t\t\t}", "-\t\t\tboolean passed = ", "-\t\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\t\tsourceFile, ", "-\t\t\t\t\tclassName, ", "-\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\tnull, ", "-\t\t\t\t\tvmArguments);", "-\t\t\tif (!passed) {", "+\t\t\tCompiler batchCompiler = ", "+\t\t\t\tnew Compiler(", "+\t\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "+\t\t\t\t\tgetErrorHandlingPolicy(), ", "+\t\t\t\t\toptions,", "+\t\t\t\t\trequestor, ", "+\t\t\t\t\tproblemFactory,", "+\t\t\t\t\tfalse);", "+\t\t\tbatchCompiler.options.produceReferenceInfo = true;", "+\t\t\ttry {", "+\t\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "+\t\t\t} catch(RuntimeException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow e;", "-\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\tpassed);", "-\t\t\tif (vmArguments != null) {", "-\t\t\t\tif (this.verifier != null) {", "-\t\t\t\t\tthis.verifier.shutDown();", "+\t\t\tif (!requestor.hasErrors) {", "+\t\t\t\tString sourceFile = testFiles[0];", "+\t", "+\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "+\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "+\t\t\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "+\t", "+\t\t\t\tif (vmArguments != null) {", "+\t\t\t\t\tif (this.verifier != null) {", "+\t\t\t\t\t\tthis.verifier.shutDown();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.verifier = new TestVerifier(false);", "+\t\t\t\t\tthis.createdVerifier = true;", "-\t\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\t\tthis.createdVerifier = true;", "+\t\t\t\tboolean passed = ", "+\t\t\t\t\tthis.verifier.verifyClassFiles(", "+\t\t\t\t\t\tsourceFile, ", "+\t\t\t\t\t\tclassName, ", "+\t\t\t\t\t\texpectedSuccessOutputString,", "+\t\t\t\t\t\tthis.classpaths, ", "+\t\t\t\t\t\tnull, ", "+\t\t\t\t\t\tvmArguments);", "+\t\t\t\tif (!passed) {", "+\t\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "+\t\t\t\t\t\tpassed);", "+\t\t\t\tif (vmArguments != null) {", "+\t\t\t\t\tif (this.verifier != null) {", "+\t\t\t\t\t\tthis.verifier.shutDown();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.verifier = new TestVerifier(false);", "+\t\t\t\t\tthis.createdVerifier = true;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\tSystem.out.println(Util.displayString(requestor.problemLog, INDENT, SHIFT));", "+\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "+\t\t\t\t\tSystem.out.print(testFiles[i]);", "+\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "+\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "-\t\t} else {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\tSystem.out.println(Util.displayString(requestor.problemLog, INDENT, SHIFT));", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "+\t\t// javac part", "+\t\t} catch (AssertionFailedError e) {", "+\t\t\tthrow e;", "+\t\t} finally {", "+\t\t\tif (RUN_JAVAC && !skipJavac)", "+\t\t\t\trunJavac(testFiles, null, expectedSuccessOutputString, shouldFlushOutputDirectory);", "+\t\t\t  // PREMATURE for now, skipping javac implies skipping the compile", "+\t\t\t  //                and execution steps; yet, only cases for which the", "+\t\t\t  //                execution step was a problem have been discovered so", "+\t\t\t  //                far; may consider skipping the execution step only"]}], "num": 19915}
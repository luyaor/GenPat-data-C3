{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "960e72e7d25137d70cb70c5c6185e9df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e663427e176b8237e6c44bac7f67dbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "861ebcbde18ecf5f2eab236d93fe45f31cadcf84", "commitAfterChange": "b47cc00cd240f33564696b6b281a60af3acb0b53", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate void printBlockComment(boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(boolean isJavadoc)", "diff": ["+\t\tint commentColumn = this.column;", "+\t\tint currentIndentationLevel = this.indentationLevel;", "+\t\tif ((commentColumn-1) > this.indentationLevel) {", "+\t\t\tthis.indentationLevel = commentColumn-1;", "+\t\t}", "-\t\twhile (nextCharacterStart <= currentTokenEndPosition && (currentCharacter = this.scanner.getNextChar()) != -1) {", "-\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-", "-\t\t\tswitch(currentCharacter) {", "-\t\t\t\tcase '\\r' :", "-\t\t\t\t\tstart = previousStart;", "-\t\t\t\t\tisNewLine = true;", "-\t\t\t\t\tif (this.scanner.getNextChar('\\n')) {", "-\t\t\t\t\t\tcurrentCharacter = '\\n';", "+\t\ttry {", "+\t\t\twhile (nextCharacterStart <= currentTokenEndPosition && (currentCharacter = this.scanner.getNextChar()) != -1) {", "+\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t", "+\t\t\t\tswitch(currentCharacter) {", "+\t\t\t\t\tcase '\\r' :", "+\t\t\t\t\t\tstart = previousStart;", "+\t\t\t\t\t\tisNewLine = true;", "+\t\t\t\t\t\tif (this.scanner.getNextChar('\\n')) {", "+\t\t\t\t\t\t\tcurrentCharacter = '\\n';", "+\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\\n' :", "+\t\t\t\t\t\tstart = previousStart;", "+\t\t\t\t\t\tisNewLine = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '\\n' :", "-\t\t\t\t\tstart = previousStart;", "-\t\t\t\t\tisNewLine = true;", "-\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\tif (isNewLine) {", "-\t\t\t\t\t\tthis.column = 1;", "-\t\t\t\t\t\tthis.line++;", "-\t\t\t\t\t\tisNewLine = false;", "-", "-\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\tif (onFirstColumn) {", "-\t\t\t\t\t\t\t// simply insert indentation if necessary", "-\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\tif (indentComment) {", "-\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif (isNewLine) {", "+\t\t\t\t\t\t\tthis.column = 1;", "+\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\t\tisNewLine = false;", "+\t", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tif (onFirstColumn) {", "+\t\t\t\t\t\t\t\t// simply insert indentation if necessary", "+\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (currentCharacter != '\\r' && currentCharacter != '\\n') {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\t\tloop: while(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\t\tif (count >= currentCommentOffset) {", "+\t\t\t\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tswitch(currentCharacter) {", "+\t\t\t\t\t\t\t\t\t\t\tcase '\\t' :", "+\t\t\t\t\t\t\t\t\t\t\t\tcount += this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\t\t\t\tcount ++;", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (currentCharacter != '\\r' && currentCharacter != '\\n') {", "-\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\t\t\t\tint previousStartTemp = previousStart;", "+\t\t\t\t\t\t\t\t\tint nextCharacterStartTemp = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (currentCharacter == '*') {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tpreviousStart = previousStartTemp;", "+\t\t\t\t\t\t\t\t\t\tnextCharacterStart = nextCharacterStartTemp;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = nextCharacterStart;", "+\t\t\t\t\t\t\taddReplaceEdit(start, previousStart - 1, String.valueOf(buffer));", "-\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\t\tloop: while(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\t\t\tif (count >= currentCommentOffset) {", "-\t\t\t\t\t\t\t\t\t\tbreak loop;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "-\t\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t\t\tswitch(currentCharacter) {", "-\t\t\t\t\t\t\t\t\t\tcase '\\t' :", "-\t\t\t\t\t\t\t\t\t\t\tcount += this.tabLength;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\t\t\tcount ++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "-\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "-\t\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\tif (indentComment) {", "-\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (formatComment) {", "-\t\t\t\t\t\t\t\tint previousStartTemp = previousStart;", "-\t\t\t\t\t\t\t\tint nextCharacterStartTemp = nextCharacterStart;", "-\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "-\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "-\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (currentCharacter == '*') {", "-\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tpreviousStart = previousStartTemp;", "-\t\t\t\t\t\t\t\t\tnextCharacterStart = nextCharacterStartTemp;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.scanner.currentPosition = nextCharacterStart;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.column += (nextCharacterStart - previousStart);", "-\t\t\t\t\t\taddReplaceEdit(start, previousStart - 1, String.valueOf(buffer));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.column += (nextCharacterStart - previousStart);", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\tthis.scanner.currentPosition = nextCharacterStart;", "-\t\t\tpreviousStart = nextCharacterStart;", "-\t\t\tthis.scanner.currentPosition = nextCharacterStart;", "+\t\t} finally {", "+\t\t\tthis.indentationLevel = currentIndentationLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f119430c6b4297f0b900d56e9cfef8e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "24134b187b46ea16212a45107324227f46ba3e4a", "commitAfterChange": "496121d0ad975842fb45544aac592b8195531ce7", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "diff": ["-\t\tprintIndentationIfNecessary();", "+\t\tint previousStart = currentTokenStartPosition;", "+\t\tboolean onFirstColumn = isOnFirstColumn(start);", "+", "+\t\tboolean indentComment = false;", "+\t\tif (this.indentationLevel != 0) {", "+\t\t\tif (isJavadoc", "+\t\t\t\t\t|| !this.formatter.preferences.never_indent_block_comments_on_first_column", "+\t\t\t\t\t|| !onFirstColumn) {", "+\t\t\t\tindentComment = true;", "+\t\t\t\tprintIndentationIfNecessary();", "+\t\t\t}", "+\t\t}", "-\t\tthis.needSpace = false;\t\t", "-\t\tthis.pendingSpace = false;\t\t", "-\t\tint previousStart = currentTokenStartPosition;", "+\t\tthis.needSpace = false;", "+\t\tthis.pendingSpace = false;", "+", "+\t\tint currentCommentOffset = onFirstColumn ? 0 : getCurrentCommentOffset(start);", "+\t\tboolean formatComment = (isJavadoc && formatJavadocComment) || (!isJavadoc && formatBlockComment);", "+\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "-\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "-\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "-\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "+\t\t\t\t\t\tisNewLine = false;", "+\t\t\t\t\t\t", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t", "+\t\t\t\t\t\tif (onFirstColumn) {", "+\t\t\t\t\t\t\t// simply insert indentation if necessary", "+\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentCharacter != '\\r' && currentCharacter != '\\n') {", "+\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\tint previousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\tloop: while(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tif (count >= currentCommentOffset) {", "+\t\t\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\tpreviousStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t\tswitch(currentCharacter) {", "+\t\t\t\t\t\t\t\t\t\tcase '\\t' :", "+\t\t\t\t\t\t\t\t\t\t\tcount += this.tabLength;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\t\t\tcount ++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentCharacter == '\\r' || currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = previousStartPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\tif (indentComment) {", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (formatComment) {", "+\t\t\t\t\t\t\t\tint previousStartTemp = previousStart;", "+\t\t\t\t\t\t\t\tint nextCharacterStartTemp = nextCharacterStart;", "+\t\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\t\t\tpreviousStart = nextCharacterStart;", "+\t\t\t\t\t\t\t\t\tcurrentCharacter = this.scanner.getNextChar();", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (currentCharacter == '*') {", "+\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tpreviousStart = previousStartTemp;", "+\t\t\t\t\t\t\t\t\tnextCharacterStart = nextCharacterStartTemp;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.scanner.currentPosition = nextCharacterStart;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\tisNewLine = false;"]}], "num": 10646}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dd5a7101d945631a40fa1fb343e4d0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cdeaf733767b762e137a385a4986ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "a51f0328f1978f4c547fe994573879b0bcceba88", "commitAfterChange": "cbe22d350fa314e6e5df169cf670cab9bb8c2a20", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus) {", "+void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo) {", "+\tint nullStatus = this.expression.nullStatus(flowInfo, flowContext);", "-\t\tNullAnnotationMatching annotationStatus = NullAnnotationMatching.analyse(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "-\t\tif (annotationStatus.isDefiniteMismatch()) {", "-\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, annotationStatus);", "-\t\t} else if (annotationStatus.isUnchecked()) {", "-\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "-\t\t}", "+\t\tcheckAgainstNullTypeAnnotation(scope, methodBinding.returnType, this.expression, flowContext, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "903072fffc9bc73f5faa890e3226ac20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a2b4555c72745b195a5db2cb0624ba6878ccc93", "commitAfterChange": "0e8a2b3bc15c38e29faaa2105eb6e0bbf7b15cd5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractVariableDeclaration variableDeclaration, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractVariableDeclaration variableDeclaration, IJavaElement parent)", "diff": ["+\tboolean isParameter = true;", "-\t\t\tif (variableDeclaration.type.resolvedType != null) {", "-\t\t\t\treturn new LocalVariable((JavaElement)parent,", "-\t\t\t\t\tnew String(variableDeclaration.name),", "-\t\t\t\t\tvariableDeclaration.declarationSourceStart,", "-\t\t\t\t\tvariableDeclaration.declarationSourceEnd,", "-\t\t\t\t\tvariableDeclaration.sourceStart,", "-\t\t\t\t\tvariableDeclaration.sourceEnd,", "-\t\t\t\t\tnew String(variableDeclaration.type.resolvedType.signature()),", "-\t\t\t\t\tvariableDeclaration.annotations,", "-\t\t\t\t\tvariableDeclaration.modifiers,", "-\t\t\t\t\tfalse", "-\t\t\t\t);", "-\t\t\t}", "-\t\t\tbreak;", "+\t\t\tisParameter = false;", "+\t\t\t//$FALL-THROUGH$", "-\t\t\t\t\ttrue", "+\t\t\t\t\tisParameter,", "+\t\t\t\t\tvariableDeclaration.type.getAnnotationsOnDimensions()"]}], "num": 71542}
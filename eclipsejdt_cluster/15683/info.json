{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e982c904eda19881ee4b38582db98d4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12dfdd1cf45db4eaccd218b7e6e236f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "b418235473d69146fcb35be10bf158bb2b040cf7", "commitAfterChange": "eadf5ba6d44f28f071965cf829d67590b0a71974", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "signatureAfterChange": " public Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement)", "diff": ["+ */", "+public Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement) {", "+\t// switchExpressionType maybe null in error case", "+    scope.enclosingCase = this; // record entering in a switch case block", "+    ", "+\tif (this.constantExpression == null) {", "+\t\t// remember the default case into the associated switch statement", "+\t\tif (switchStatement.defaultCase != null)", "+\t\t\tscope.problemReporter().duplicateDefaultCase(this);", "-\t */", "-\tpublic Constant resolveCase(BlockScope scope, TypeBinding switchExpressionType, SwitchStatement switchStatement) {", "-\t\t// switchExpressionType maybe null in error case", "-\t    scope.enclosingCase = this; // record entering in a switch case block", "-\t    ", "-\t\tif (constantExpression == null) {", "-\t\t\t// remember the default case into the associated switch statement", "-\t\t\tif (switchStatement.defaultCase != null)", "-\t\t\t\tscope.problemReporter().duplicateDefaultCase(this);", "-\t", "-\t\t\t// on error the last default will be the selected one ...\t", "-\t\t\tswitchStatement.defaultCase = this;", "-\t\t\treturn Constant.NotAConstant;", "-\t\t}", "-\t\t// add into the collection of cases of the associated switch statement", "-\t\tswitchStatement.cases[switchStatement.caseCount++] = this;", "-\t\t// tag constant name with enum type for privileged access to its members", "-\t\tif (switchExpressionType != null && switchExpressionType.isEnum() && (constantExpression instanceof SingleNameReference)) {", "-\t\t\t((SingleNameReference) constantExpression).setActualReceiverType((ReferenceBinding)switchExpressionType);", "-\t\t}", "-\t\tTypeBinding caseType = constantExpression.resolveType(scope);", "-\t\tif (caseType == null || switchExpressionType == null) return Constant.NotAConstant;", "-\t\tif (constantExpression.isConstantValueOfTypeAssignableToType(caseType, switchExpressionType)", "-\t\t\t\t|| caseType.isCompatibleWith(switchExpressionType)) {", "-\t\t\tif (caseType.isEnum()) {", "-\t\t\t\tthis.isEnumConstant = true;", "-\t\t\t\tif (((this.constantExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "-\t\t\t\t\tscope.problemReporter().enumConstantsCannotBeSurroundedByParenthesis(this.constantExpression);", "-\t\t\t\t}", "-", "-\t\t\t\tif (constantExpression instanceof NameReference", "-\t\t\t\t\t\t&& (constantExpression.bits & RestrictiveFlagMASK) == Binding.FIELD) {", "-\t\t\t\t\tNameReference reference = (NameReference) constantExpression;", "-\t\t\t\t\tFieldBinding field = reference.fieldBinding();", "-\t\t\t\t\tif ((field.modifiers & ClassFileConstants.AccEnum) == 0) {", "-\t\t\t\t\t\t scope.problemReporter().enumSwitchCannotTargetField(reference, field);", "-\t\t\t\t\t} else \tif (reference instanceof QualifiedNameReference) {", "-\t\t\t\t\t\t scope.problemReporter().cannotUseQualifiedEnumConstantInCaseLabel(reference, field);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn IntConstant.fromValue(field.original().id + 1); // (ordinal value + 1) zero should not be returned see bug 141810", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\treturn constantExpression.constant;", "-\t\t\t}", "-\t\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)", "-\t\t\t\t\t\t|| (caseType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t&& !switchExpressionType.isBaseType()", "-\t\t\t\t\t\t\t\t&& constantExpression.isConstantValueOfTypeAssignableToType(caseType, scope.environment().computeBoxingType(switchExpressionType)))) {", "-\t\t\t// constantExpression.computeConversion(scope, caseType, switchExpressionType); - do not report boxing/unboxing conversion", "-\t\t\treturn constantExpression.constant;", "-\t\t}", "-\t\tscope.problemReporter().typeMismatchError(caseType, switchExpressionType, constantExpression);", "+\t\t// on error the last default will be the selected one ...\t", "+\t\tswitchStatement.defaultCase = this;", "+\t// add into the collection of cases of the associated switch statement", "+\tswitchStatement.cases[switchStatement.caseCount++] = this;", "+\t// tag constant name with enum type for privileged access to its members", "+\tif (switchExpressionType != null && switchExpressionType.isEnum() && (this.constantExpression instanceof SingleNameReference)) {", "+\t\t((SingleNameReference) this.constantExpression).setActualReceiverType((ReferenceBinding)switchExpressionType);", "+\tTypeBinding caseType = this.constantExpression.resolveType(scope);", "+\tif (caseType == null || switchExpressionType == null) return Constant.NotAConstant;", "+\tif (this.constantExpression.isConstantValueOfTypeAssignableToType(caseType, switchExpressionType)", "+\t\t\t|| caseType.isCompatibleWith(switchExpressionType)) {", "+\t\tif (caseType.isEnum()) {", "+\t\t\tif (((this.constantExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\t\t\tscope.problemReporter().enumConstantsCannotBeSurroundedByParenthesis(this.constantExpression);", "+\t\t\t}", "+", "+\t\t\tif (this.constantExpression instanceof NameReference", "+\t\t\t\t\t&& (this.constantExpression.bits & ASTNode.RestrictiveFlagMASK) == Binding.FIELD) {", "+\t\t\t\tNameReference reference = (NameReference) this.constantExpression;", "+\t\t\t\tFieldBinding field = reference.fieldBinding();", "+\t\t\t\tif ((field.modifiers & ClassFileConstants.AccEnum) == 0) {", "+\t\t\t\t\t scope.problemReporter().enumSwitchCannotTargetField(reference, field);", "+\t\t\t\t} else \tif (reference instanceof QualifiedNameReference) {", "+\t\t\t\t\t scope.problemReporter().cannotUseQualifiedEnumConstantInCaseLabel(reference, field);", "+\t\t\t\t}", "+\t\t\t\treturn IntConstant.fromValue(field.original().id + 1); // (ordinal value + 1) zero should not be returned see bug 141810", "+\t\t\t}", "+\t\t} else {", "+\t\t\treturn this.constantExpression.constant;", "+\t\t}", "+\t} else if (scope.isBoxingCompatibleWith(caseType, switchExpressionType)", "+\t\t\t\t\t|| (caseType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "+\t\t\t\t\t\t\t&& !switchExpressionType.isBaseType()", "+\t\t\t\t\t\t\t&& this.constantExpression.isConstantValueOfTypeAssignableToType(caseType, scope.environment().computeBoxingType(switchExpressionType)))) {", "+\t\t// constantExpression.computeConversion(scope, caseType, switchExpressionType); - do not report boxing/unboxing conversion", "+\t\treturn this.constantExpression.constant;", "+\t}", "+\tscope.problemReporter().typeMismatchError(caseType, switchExpressionType, this.constantExpression);", "+\treturn Constant.NotAConstant;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4181cafc6634889e0c61df7cab2fda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "24071af935ae982264becd6377e49aeb82ae6605", "commitAfterChange": "630841750ec7fd372d10d6a06da2b09122e947d0", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif ((this.type instanceof TypeReference) || (this.type instanceof NameReference)", "-\t\t\t&& ((this.type.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0) { // no extra parenthesis around type: ((A))exp", "+\tboolean exprContainCast = false;", "-\t\tboolean exprContainCast = false;", "-", "-\t\tTypeBinding castType = this.resolvedType = this.type.resolveType(scope);", "-\t\t//expression.setExpectedType(this.resolvedType); // needed in case of generic method invocation", "-\t\tif (this.expression instanceof CastExpression) {", "-\t\t\tthis.expression.bits |= ASTNode.DisableUnnecessaryCastCheck;", "-\t\t\texprContainCast = true;", "-\t\t}", "-\t\tTypeBinding expressionType = this.expression.resolveType(scope);", "-\t\tif (castType != null) {", "-\t\t\tif (expressionType != null) {", "-\t\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);", "-\t\t\t\tif (isLegal) {", "-\t\t\t\t\tthis.expression.computeConversion(scope, castType, expressionType);", "-\t\t\t\t\tif ((this.bits & ASTNode.UnsafeCast) != 0) { // unsafe cast", "-\t\t\t\t\t\tif (scope.compilerOptions().reportUnavoidableGenericTypeProblems || !this.expression.forcedToBeRaw(scope.referenceContext())) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore){", "-\t\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((this.bits & (ASTNode.UnnecessaryCast|ASTNode.DisableUnnecessaryCastCheck)) == ASTNode.UnnecessaryCast) { // unnecessary cast", "-\t\t\t\t\t\t\tif (!isIndirectlyUsed()) // used for generic type inference or boxing ?", "-\t\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else { // illegal cast", "-\t\t\t\t\tif ((castType.tagBits & TagBits.HasMissingType) == 0) { // no complaint if secondary error", "-\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.bits |= ASTNode.DisableUnnecessaryCastCheck; // disable further secondary diagnosis", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.resolvedType = castType.capture(scope, this.sourceEnd);", "-\t\t\tif (exprContainCast) {", "-\t\t\t\tcheckNeedForCastCast(scope, this);", "-\t\t\t}", "-\t\t}", "-\t\treturn this.resolvedType;", "-\t} else { // expression as a cast", "-\t\tTypeBinding expressionType = this.expression.resolveType(scope);", "-\t\tif (expressionType == null) return null;", "-\t\tscope.problemReporter().invalidTypeReference(this.type);", "-\t\treturn null;", "+\tTypeBinding castType = this.resolvedType = this.type.resolveType(scope);", "+\t//expression.setExpectedType(this.resolvedType); // needed in case of generic method invocation", "+\tif (this.expression instanceof CastExpression) {", "+\t\tthis.expression.bits |= ASTNode.DisableUnnecessaryCastCheck;", "+\t\texprContainCast = true;", "+\tTypeBinding expressionType = this.expression.resolveType(scope);", "+\tif (castType != null) {", "+\t\tif (expressionType != null) {", "+\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);", "+\t\t\tif (isLegal) {", "+\t\t\t\tthis.expression.computeConversion(scope, castType, expressionType);", "+\t\t\t\tif ((this.bits & ASTNode.UnsafeCast) != 0) { // unsafe cast", "+\t\t\t\t\tif (scope.compilerOptions().reportUnavoidableGenericTypeProblems || !this.expression.forcedToBeRaw(scope.referenceContext())) {", "+\t\t\t\t\t\tscope.problemReporter().unsafeCast(this, scope);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore){", "+\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((this.bits & (ASTNode.UnnecessaryCast|ASTNode.DisableUnnecessaryCastCheck)) == ASTNode.UnnecessaryCast) { // unnecessary cast", "+\t\t\t\t\t\tif (!isIndirectlyUsed()) // used for generic type inference or boxing ?", "+\t\t\t\t\t\t\tscope.problemReporter().unnecessaryCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { // illegal cast", "+\t\t\t\tif ((castType.tagBits & TagBits.HasMissingType) == 0) { // no complaint if secondary error", "+\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t}", "+\t\t\t\tthis.bits |= ASTNode.DisableUnnecessaryCastCheck; // disable further secondary diagnosis", "+\t\t\t}", "+\t\t}", "+\t\tthis.resolvedType = castType.capture(scope, this.sourceEnd);", "+\t\tif (exprContainCast) {", "+\t\t\tcheckNeedForCastCast(scope, this);", "+\t\t}", "+\t}", "+\treturn this.resolvedType;"]}], "num": 15683}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29360bf17629d878a03620b2d68f7723", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b56c79e98b7b20f16b7518cbc10a5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "11fe35f9c407ba8445270c225d007172a716d5dc", "commitAfterChange": "1dd7ed98be54465df7d1314f9e833c4bc5e5728c", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " public void testBug124469a() throws CoreException", "signatureAfterChange": " public void testBug124469a() throws CoreException", "diff": ["+\t\t\"lib/b124469.jar pack.E[] pack.A1.list() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar pack.E[] pack.A2.list() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar pack.E[] pack.A3.list() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.C EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar test.F.field EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + ", "+\t\t\"lib/b124469.jar void test.M.foo() EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c2c44d00e55d806754fa2ac51db812", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "3c1df96cd104b0fc430e4dc2bba86da9035261e4", "commitAfterChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["+\t\t\t\t\"   void dup() {} \\n\" +", "+\t\t\t\t\"   void dup() {} \\n\" +", "+\t\t\t\t\"   void values() {} \\n\" +", "+\t\t\t\t\"   Missing dup() {} \\n\" +", "+\t\t\t\"\tvoid dup() {} \\n\" + ", "+\t\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method dup() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tvoid dup() {} \\n\" + ", "+\t\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method dup() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tvoid values() {} \\n\" + ", "+\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\"The enum X already defines the method values() implicitly\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tMissing dup() {} \\n\" + ", "+\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\"Missing cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tMissing dup() {} \\n\" + ", "+\t\t\t\"\t        ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method dup() in type X\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e19961eafca31336a14d6af85a48336", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "f3ee9ffe2509f2256bd407103467020459d5833a", "commitAfterChange": "ede81cb8897443b61293f499b19db44fd44845ce", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void test039()", "signatureAfterChange": " public void test039()", "diff": ["-\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tObject fo = (String) new Object();\\n\" + ", "+\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from Object to String\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + ", "+\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to List\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\to = (ArrayList) al;\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to ArrayList\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject o2 = (ArrayList) al;\\n\" + ", "+\t\t\"\t            ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList to ArrayList\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\to = (ArrayList) l;\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from List to ArrayList\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tObject o3 = (ArrayList) l;\\n\" + ", "+\t\t\"\t            ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from List to ArrayList\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36ed41e16abcd3960ee753d7e9a3e591", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "96b6a1a036d724eb72c9dda7f875bf468e57542f", "commitAfterChange": "1088bd5003c7ca9240c67a19e715067bfb429dc6", "methodNumberBeforeChange": 974, "methodNumberAfterChange": 974, "signatureBeforeChange": " public void test0968()", "signatureAfterChange": " public void test0968()", "diff": ["-\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method addAll(Collection<? extends E>) of type ArrayList<T0> has the same erasure as addAll(Collection<? extends E>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method retainAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as retainAll(Collection<?>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method toArray(T[]) of type ArrayList<T0> has the same erasure as toArray(T[]) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method add(E) of type ArrayList<T0> has the same erasure as add(E) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method containsAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as containsAll(Collection<?>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Name clash: The method removeAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as removeAll(Collection<?>) of type Collection but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"9. WARNING in X.java (at line 4)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "580f027fed3aa05022a320d643644a8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 513, "methodNumberAfterChange": 513, "signatureBeforeChange": " \tpublic void test509()", "signatureAfterChange": " \tpublic void test509()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tList<MyTigerSimpleObject> list = new ArrayList<MyTigerSimpleObject>();\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tList<MyTigerSimpleObject> list = new ArrayList<MyTigerSimpleObject>();\\n\" + ", "+\t\t\t\"\t                                               ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tlist.add(new MyTigerSimpleObject(\\\"a\\\"));\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tlist.add(new MyTigerSimpleObject(\\\"b\\\"));\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfor (MyTigerSimpleObject so : list)\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyTigerSimpleObject is a raw type. References to generic type MyTigerSimpleObject<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 17)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 17)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 20)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be2bb5bc28a3f9f04636788518a0bff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "c218bc0b3cb8966af8e948021d2d770d85b0b8fd", "commitAfterChange": "0a2ac075c4c856fa99a690dbbe5d8bb93c4e0de4", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " public void test166() throws Exception", "signatureAfterChange": " public void test166() throws Exception", "diff": ["-\t\t\"The enum X already defines the method valueOf(String) implicitly\\n\" + ", "+\t\t\"The enum X already defines the method valueOf(String) implicitly\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "+\t\t\"\tint i = valueOf(\\\"\\\");\\n\" +", "+\t\t\"\t        ^^^^^^^^^^^\\n\" +", "+\t\t\"Type mismatch: cannot convert from X to int\\n\" + ", "-\t\t\"  // Method descriptor #20 (Ljava/lang/String;)I\\n\" + ", "-\t\t\"  // Stack: 3, Locals: 2\\n\" + ", "-\t\t\"  private int valueOf(java.lang.String arg0);\\n\" + ", "+\t\t\"public final enum X {\\n\" + ", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #6 (Ljava/lang/String;I)V\\n\" + ", "+\t\t\"  // Stack: 3, Locals: 3\\n\" + ", "+\t\t\"  private X(java.lang.String arg0, int arg1);\\n\" + ", "-\t\t\"     4  ldc <String \\\"Unresolved compilation problem: \\\\n\\\\tThe enum X already defines the method valueOf(String) implicitly\\\\n\\\"> [10]\\n\" + ", "+\t\t\"     4  ldc <String \\\"Unresolved compilation problems: \\\\n\\\\tThe enum X already defines the method valueOf(String) implicitly\\\\n\\\\tType mismatch: cannot convert from X to int\\\\n\\\"> [10]\\n\" + ", "-\t\t\"        [pc: 0, pc: 10] local: arg0 index: 1 type: java.lang.String\\n\";", "+\t\t\"  \\n\" + ", "+\t\t\"  // Method descriptor #20 ()V\\n\" + ", "+\t\t\"  // Stack: 3, Locals: 1\\n\" + ", "+\t\t\"  void foo();\\n\" + ", "+\t\t\"     0  new java.lang.Error [8]\\n\" + ", "+\t\t\"     3  dup\\n\" + ", "+\t\t\"     4  ldc <String \\\"Unresolved compilation problem: \\\\n\\\\tType mismatch: cannot convert from X to int\\\\n\\\"> [21]\\n\" + ", "+\t\t\"     6  invokespecial java.lang.Error(java.lang.String) [12]\\n\" + ", "+\t\t\"     9  athrow\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 5]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 10] local: this index: 0 type: X\\n\" + ", "+\t\t\"}\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c0267468e032651dfb11017b2d50e1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " \tpublic void test117()", "signatureAfterChange": " \tpublic void test117()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\r\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tnew X<X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\r\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew X<X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\tvoid foo(X<X.MX.MMX>.MX<X>.MMX<X> mx) {\\r\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew X<X<X.MX.MMX>.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tvoid foo(X<X.MX.MMX>.MX<X>.MMX<X> mx) {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: X.MX.MMX is a raw type. References to generic type X<T>.MX<MT>.MMX<MMT> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tvoid foo(X<X.MX.MMX>.MX<X>.MMX<X> mx) {\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tvoid foo(X<X.MX.MMX>.MX<X>.MMX<X> mx) {\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tvoid foo(X<X.MX.MMX>.MX<X>.MMX<X> mx) {\\n\" + ", "+\t\t\t\"\t                               ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96dcb3db5e077927b5d6c5d6a41bade0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 724, "signatureBeforeChange": " public void test718()", "signatureAfterChange": " public void test718()", "diff": ["-\t\t\"1. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"\tpublic class ActionImpl<T extends Base> extends Action<T> implements Comparable<ActionImpl> {\\n\" + ", "+\t\t\"\t                                                                                ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tpublic int compareTo(ActionImpl o) {\\n\" + ", "+\t\t\"\t                     ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t                                  ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 23)\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 23)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "995265371f2b7fdfc23fcb4e72931955", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 820, "methodNumberAfterChange": 820, "signatureBeforeChange": " public void test0799()", "signatureAfterChange": " public void test0799()", "diff": ["-\t\t\t\t\"5. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tref.next = first == null ? ref : first;\\n\" + ", "+\t\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#2-of ? extends T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\t\"6. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\t\"7. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"8. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"9. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tref.next = first2 == null ? ref : first2;\\n\" + ", "+\t\t\t\t\"\t                                  ^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<capture#5-of ? extends T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"10. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"\treturn first == null ? ref : first;\\n\" + ", "+\t\t\t\t\"\t                             ^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<? extends T>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adbda77a0d0ec2aa728679b2edbb3209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "b524a2e75280a0f2690531c4f00fea7a6004673b", "commitAfterChange": "7e90cfc843b0651b2df6811a5c412b5db3d07d3e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test009() throws Exception", "signatureAfterChange": " \tpublic void test009() throws Exception", "diff": ["-\t\t\t\t\t\"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\\n\" +", "+\t\t\t\t\t\"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_PARAMETER)\\n\" +", "-\t\t\t\t\"\t             ^^^^^^^\\n\" + ", "-\t\t\t\t\"The resource type Integer does not implement java.lang.AutoCloseable\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "-\t\t\t\t\"\t                                             ^^^^^^^\\n\" + ", "+\t\t\t\t\"\t             ^^^^^^^\\n\" + ", "+\t\t\t\t\"\t                                     ^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\ttry (@Marker Integer p = null; final @Marker Integer q = null; @Marker final Integer r = null) {\\n\" + ", "+\t\t\t\t\"\t                                             ^^^^^^^\\n\" + ", "+\t\t\t\t\"The resource type Integer does not implement java.lang.AutoCloseable\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\ttry (@Marker Integer p = null; final @Marker Integer q = null; @Marker final Integer r = null) {\\n\" + ", "+\t\t\t\t\"\t                                                               ^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\ttry (@Marker Integer p = null; final @Marker Integer q = null; @Marker final Integer r = null) {\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6bf120ba0a4b9fc9c9d4b424586bf69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 658, "methodNumberAfterChange": 658, "signatureBeforeChange": "\t\t \tpublic void test654()", "signatureAfterChange": "\t\t \tpublic void test654()", "diff": ["+\t        \"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tMap myMap = new HashMap();\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"Type safety: Map is a raw type. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tMap myMap = new HashMap();\\n\" + ", "+\t\t\t\"\t                ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfor (Map.Entry e : myMap.entrySet())\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tSet<Map.Entry> set = myMap.entrySet();\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tfor (Map.Entry e : set)\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Map.Entry is a raw type. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c48be7a587e547c3ff9cd8529d1eb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "ee8ad1e40e9b16f34ac6204dee3c91af5b27ff77", "commitAfterChange": "a6e44391963b63fa0c27651827313192cc7a80a0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test006()", "signatureAfterChange": " public void test006()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"Outer cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t             ^^^\\n\" + ", "+\t\t\t\"One cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                  ^^^\\n\" + ", "+\t\t\t\"Two cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                             ^^^^^\\n\" + ", "+\t\t\t\"Three cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                                    ^^^^\\n\" + ", "+\t\t\t\"Four cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                                                 ^^^^\\n\" + ", "+\t\t\t\"Five cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tIX i = Outer<One, Two>.Inner<Three, Four>.Deeper<Five, Six<String>>.Leaf::<Blah, Blah>method;\\n\" + ", "+\t\t\t\"\t                                                       ^^^\\n\" + ", "+\t\t\t\"Six cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 6)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edda0b69c690bfe7af590f6b5b19fd62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "d57293f4f12e1bef48b48f8eb4effbb7e4554bd3", "commitAfterChange": "80133b35a6b0bcde494737060ceebe86e07b8204", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \tpublic void test036() throws Exception", "signatureAfterChange": "\r \tpublic void test036() throws Exception", "diff": ["-\t\t\"1. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + \r", "+\t\t\"\t                       ^^^^^^^^^\\n\" + \r", "+\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"3. WARNING in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "-\t\t\"3. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"4. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                       ^^^^^^^^^\\n\" + \r", "+\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"5. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                 ^^^^^^\\n\" + \r", "+\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"6. WARNING in X.java (at line 3)\\n\" + \r", "-\t\t\"4. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"7. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                              ^^^^^^^^^\\n\" + \r", "+\t\t\"Annotation types that do not specify explicit target element types cannot be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"8. ERROR in X.java (at line 4)\\n\" + \r", "-\t\t\"5. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"9. ERROR in X.java (at line 4)\\n\" + \r", "-\t\t\"6. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"10. ERROR in X.java (at line 4)\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf028d066ae2d3ebfbc66847b445ca2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic void test104()", "signatureAfterChange": " \tpublic void test104()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends AX> {\\n\" + ", "+\t\t\t\"\t                          ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX<? extends BX> x = new X<AX<String>>(new AX<String>());\\n\" + ", "+\t\t\t\"\t            ^^\\n\" + ", "+\t\t\t\"Type safety: BX is a raw type. References to generic type BX<Q> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd2fcebd74a0a4dcbd7e68350a02e61f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test077()", "signatureAfterChange": " \tpublic void test077()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX x = new X();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX x = new X();\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tX x1 = new X(args);\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 13)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tX x1 = new X(args);\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tX x2 = new X(x);\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tX x2 = new X(x);\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in X.java (at line 15)\\n\" + "]}], "num": 15182}
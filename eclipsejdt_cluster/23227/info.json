{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca6159fcca847f5386f540e7946d26ef", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45f7f16d07363e93630f296e6fb38df0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f2d453b40b80a7b4342f872cb4a2ceb30cb26035", "commitAfterChange": "ff67eddd91980875c818d1dd4c9e986c8fe296a7", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 120, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t} else if (parent instanceof TryStatement) {", "+\t\t\tboolean isException = false;", "+\t\t\tif (node instanceof CompletionOnSingleTypeReference) {", "+\t\t\t\tisException = ((CompletionOnSingleTypeReference)node).isException();", "+\t\t\t} else if (node instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\t\tisException = ((CompletionOnQualifiedTypeReference)node).isException();", "+\t\t\t} else if (node instanceof CompletionOnParameterizedQualifiedTypeReference) {", "+\t\t\t\tisException = ((CompletionOnParameterizedQualifiedTypeReference)node).isException();", "+\t\t\t}", "+\t\t\tif (isException) {", "+\t\t\t\tThrownExceptionFinder thrownExceptionFinder = new ThrownExceptionFinder();", "+\t\t\t\tReferenceBinding[] bindings = thrownExceptionFinder.find((TryStatement) parent, (BlockScope)scope);", "+\t\t\t\tif (bindings != null && bindings.length > 0) {", "+\t\t\t\t\tfor (int i = 0; i < bindings.length; i++) {", "+\t\t\t\t\t\taddExpectedType(bindings[i], scope);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.expectedTypesFilter = SUPERTYPE;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "897663423430b49be6615e0f7b61ed70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "f2d453b40b80a7b4342f872cb4a2ceb30cb26035", "commitAfterChange": "ff67eddd91980875c818d1dd4c9e986c8fe296a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["+\t\t", "+\t\tif ((topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_CATCH_AND_RIGHT_PAREN)) {", "+\t\t\tif (this.assistNode instanceof CompletionOnSingleTypeReference &&", "+\t\t\t\t\t((CompletionOnSingleTypeReference)this.assistNode).isException()) {", "+\t\t\t\tbuildMoreTryStatementCompletionContext((TypeReference)this.assistNode);", "+\t\t\t\treturn;", "+\t\t\t} else if (this.assistNode instanceof CompletionOnQualifiedTypeReference &&", "+\t\t\t\t\t((CompletionOnQualifiedTypeReference)this.assistNode).isException()) {", "+\t\t\t\tbuildMoreTryStatementCompletionContext((TypeReference)this.assistNode);", "+\t\t\t\treturn;", "+\t\t\t} else if (this.assistNode instanceof CompletionOnParameterizedQualifiedTypeReference &&", "+\t\t\t\t\t((CompletionOnParameterizedQualifiedTypeReference)this.assistNode).isException()) {", "+\t\t\t\tbuildMoreTryStatementCompletionContext((TypeReference)this.assistNode);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 23227}
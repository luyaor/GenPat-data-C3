{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "220f85d05e514114ac56c1af6d68c327", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63692359b52dde61a2b0068743ccd1ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "72316be54b9086b28cc8ddca3e0761905b39515b", "commitAfterChange": "995fcf13bc3ad1e9b32a28fa575739b0c1b6aa41", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes)", "signatureAfterChange": "\r \tpublic IJavaElementDelta[] processResourceDelta(IResourceDelta changes)", "diff": ["-\t\t// get the workspace delta, and start processing there.\r", "-\t\tIResourceDelta[] deltas = changes.getAffectedChildren();\r", "-\t\tIJavaElementDelta[] translatedDeltas = new JavaElementDelta[deltas.length];\r", "-\t\tfor (int i = 0; i < deltas.length; i++) {\r", "-\t\t\tIResourceDelta delta = deltas[i];\r", "-\t\t\tJavaModel model =\r", "-\t\t\t\tJavaModelManager.getJavaModel(delta.getResource().getWorkspace());\r", "-\t\t\tif (model != null) {\r", "-\t\t\t\tfCurrentDelta = new JavaElementDelta(model);\r", "-\t\t\t\ttraverseDelta(delta, UNKNOWN_CLASSPATH); // traverse delta\r", "-\t\t\t\ttranslatedDeltas[i] = fCurrentDelta;\r", "+\t\ttry {\r", "+\t\t\t// get the workspace delta, and start processing there.\r", "+\t\t\tIResourceDelta[] deltas = changes.getAffectedChildren();\r", "+\t\t\tIJavaElementDelta[] translatedDeltas = new JavaElementDelta[deltas.length];\r", "+\t\t\tfor (int i = 0; i < deltas.length; i++) {\r", "+\t\t\t\tIResourceDelta delta = deltas[i];\r", "+\t\t\t\tJavaModel model =\r", "+\t\t\t\t\tJavaModelManager.getJavaModel(delta.getResource().getWorkspace());\r", "+\t\t\t\tif (model != null) {\r", "+\t\t\t\t\tfCurrentDelta = new JavaElementDelta(model);\r", "+\t\t\t\t\ttraverseDelta(delta, UNKNOWN_CLASSPATH); // traverse delta\r", "+\t\t\t\t\ttranslatedDeltas[i] = fCurrentDelta;\r", "+\t\t\t\t}\r", "+\t\t\t\r", "+\t\t\t// update package fragment roots of projects that were affected\r", "+\t\t\tEnumeration elements = this.projectsToUpdate.elements();\r", "+\t\t\twhile (elements.hasMoreElements()) {\r", "+\t\t\t\tJavaProject project = (JavaProject)elements.nextElement();\r", "+\t\t\t\tproject.updatePackageFragmentRoots();\r", "+\t\t\t}\r", "+\t\r", "+\t\t\treturn filterRealDeltas(translatedDeltas);\r", "+\t\t} finally {\r", "+\t\t\tthis.projectsToUpdate = new ObjectSet();\r", "-\r", "-\t\treturn filterRealDeltas(translatedDeltas);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a5dc7079ea95c12685814ca3559667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "fdaafe32db6fb8160ac96735f3629164c831f24b", "commitAfterChange": "1819c30a56affd533a48985d222f687b6215e066", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tpublic void checkExternalArchiveChanges(IJavaElement[] refreshedElements, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\tIWorkspaceRoot wksRoot = ResourcesPlugin.getWorkspace().getRoot();\r", "-\t\t\t\t\t\t\tObject targetLibrary = JavaModel.getTarget(project.getProject(), entryPath, true);\r", "+\t\t\t\t\t\t\tObject targetLibrary = JavaModel.getTarget(wksRoot, entryPath, true);\r", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());\r", "+\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());\r", "+\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());\r", "+\t\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82a0d34ff98723cbee43ca0e76d28dde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "f881f7f3af831f777efbcae1d912f604e776b198", "commitAfterChange": "af8ddf1224acdd73d35eff5f86a6b2b80c9a4304", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allOpenablesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(HashMap allOpenablesInRegion, IProgressMonitor monitor)", "diff": ["-private void createTypeHierarchyBasedOnRegion(ArrayList allOpenablesInRegion, IProgressMonitor monitor) {", "+private void createTypeHierarchyBasedOnRegion(HashMap allOpenablesInRegion, IProgressMonitor monitor) {", "-\tOpenable[] openables = new Openable[size];", "-\tallOpenablesInRegion.toArray(openables);", "-", "-\ttry {", "-\t\t// resolve", "-\t\tif (monitor != null) monitor.beginTask(\"\", size * 2/* 1 for build binding, 1 for connect hierarchy*/); //$NON-NLS-1$", "-\t\tif (size > 0) {", "-\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "+\t", "+\tIterator javaProjects = allOpenablesInRegion.keySet().iterator();", "+\twhile (javaProjects.hasNext()) {", "+\t\tArrayList allOpenables = (ArrayList) allOpenablesInRegion.get(javaProjects.next());", "+\t\tOpenable[] openables = new Openable[allOpenables.size()];", "+\t\tallOpenables.toArray(openables);", "+\t", "+\t\ttry {", "+\t\t\t// resolve", "+\t\t\tif (monitor != null) monitor.beginTask(\"\", size * 2/* 1 for build binding, 1 for connect hierarchy*/); //$NON-NLS-1$", "+\t\t\tif (size > 0) {", "+\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tif (monitor != null) monitor.done();", "-\t} finally {", "-\t\tif (monitor != null) monitor.done();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ad2c679641cd4748d2fa862319cde5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "fe41a5ed7a14de553c93fde5ff3064717032f87a", "commitAfterChange": "75a9b073354511bd41fc601022882d52caaa8ded", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tpublic void fire()", "signatureAfterChange": "\r \tpublic void fire()", "diff": ["+\t\t\t\t\t\r", "+\t\t\t\t\t// Refresh internal scopes\r", "+\t\t\t\t\tIterator scopes = this.scopes.keySet().iterator();\r", "+\t\t\t\t\twhile (scopes.hasNext()) {\r", "+\t\t\t\t\t\tAbstractSearchScope scope = (AbstractSearchScope)scopes.next();\r", "+\t\t\t\t\t\tscope.processDelta(delta);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t\r"]}], "num": 40032}
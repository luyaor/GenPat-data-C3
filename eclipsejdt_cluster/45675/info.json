{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "951a814e373ef50fb5de2175a6023c0f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37af3fb1badfdf38e6d3f25ba8b8074a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tCompilerOptions options, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory)", "diff": ["-\t\t\tINameEnvironment environment,", "-\t\t\tIErrorHandlingPolicy policy,", "-\t\t\tMap settings,", "-\t\t\tfinal ICompilerRequestor requestor,", "-\t\t\tIProblemFactory problemFactory,", "-\t\t\tboolean statementsRecovery) {", "-\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "-\t\t\t\tnull, false, false, false, statementsRecovery); // all defaults", "+\t\tINameEnvironment environment,", "+\t\tIErrorHandlingPolicy policy,", "+\t\tCompilerOptions options,", "+\t\tfinal ICompilerRequestor requestor,", "+\t\tIProblemFactory problemFactory) {", "+\t\tthis(environment, policy, options, requestor, problemFactory, null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "533e8660c8903a629dbfabb327636aa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory)", "diff": ["+\t\tINameEnvironment environment,", "+\t\tIErrorHandlingPolicy policy,", "+\t\tMap settings,", "+\t\tfinal ICompilerRequestor requestor,", "+\t\tIProblemFactory problemFactory) {", "+\t\tthis(environment, policy, new CompilerOptions(settings), requestor, problemFactory, null); ", "-\t\t\tINameEnvironment environment,", "-\t\t\tIErrorHandlingPolicy policy,", "-\t\t\tMap settings,", "-\t\t\tfinal ICompilerRequestor requestor,", "-\t\t\tIProblemFactory problemFactory,", "-\t\t\tPrintWriter out,", "-\t\t\tboolean statementsRecovery) {", "-\t\tthis(environment, policy, settings,\trequestor, problemFactory, out, ", "-\t\t\t\tfalse, false, false, statementsRecovery); // all defaults"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc9bb6177b72670a8b5078d6e9b7cb32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t\t\tpublic void acceptResult(CompilationResult result)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery)", "diff": ["-\t\t\tthis.requestor = new ICompilerRequestor(){", "-\t\t\t\tpublic void acceptResult(CompilationResult result){", "-\t\t\t\t\tif (DebugRequestor.isActive()){", "-\t\t\t\t\t\tDebugRequestor.acceptDebugResult(result);", "-\t\t\t\t\t}", "-\t\t\t\t\trequestor.acceptResult(result);", "-\t\t\t\t}", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory,", "+\t\t\tboolean parseLiteralExpressionsAsConstants,", "+\t\t\tboolean storeAnnotations,", "+\t\t\tboolean statementsRecovery) {", "+\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "+\t\t\t\tnull, // default ", "+\t\t\t\tparseLiteralExpressionsAsConstants, storeAnnotations, statementsRecovery, true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9613de8ecb590e6c1f36591fba677c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tfinal ICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean parseLiteralExpressionsAsConstants)", "diff": ["+\t\tINameEnvironment environment,", "+\t\tIErrorHandlingPolicy policy,", "+\t\tMap settings,", "+\t\tfinal ICompilerRequestor requestor,", "+\t\tIProblemFactory problemFactory,", "+\t\tboolean parseLiteralExpressionsAsConstants) {", "+\t\tthis(environment, policy, new CompilerOptions(settings, parseLiteralExpressionsAsConstants), requestor, problemFactory, null); ", "-\t\t\tINameEnvironment environment,", "-\t\t\tIErrorHandlingPolicy policy,", "-\t\t\tMap settings,", "-\t\t\tfinal ICompilerRequestor requestor,", "-\t\t\tIProblemFactory problemFactory,", "-\t\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\t\tboolean storeAnnotations,", "-\t\t\tboolean statementsRecovery) {", "-\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "-\t\t\t\tnull, // default ", "-\t\t\t\tparseLiteralExpressionsAsConstants, storeAnnotations, true, statementsRecovery);"]}], "num": 45675}
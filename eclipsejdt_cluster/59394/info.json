{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eca6083db33a3a0fe56b0c5a7e8456f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54ab3683642cebe4747379ca4a4d3538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/NodeInfoStore.java", "commitBeforeChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "commitAfterChange": "78c62e3a4157070f714848f4de312a55f14f5144", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic final ASTNode newPlaceholderNode(int nodeType)", "signatureAfterChange": " \tpublic final ASTNode newPlaceholderNode(int nodeType)", "diff": ["+\t\t\t\tcase ASTNode.PARAMETERIZED_TYPE :", "+\t\t\t\t    ((ParameterizedType) node).typeArguments().add(this.ast.newWildcardType()); //$NON-NLS-1$", "+\t\t    \t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ccd0ebfe9577c74f10b8488f6175b3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "fe41a5ed7a14de553c93fde5ff3064717032f87a", "commitAfterChange": "75a9b073354511bd41fc601022882d52caaa8ded", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "diff": ["+\t\t\t\tcase IResourceDelta.REMOVED :\r", "+\t\t\t\t\tindexManager.removeIndex(element.getJavaProject().getProject().getFullPath());\r", "+\t\t\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cae96ef700e455d1f526e628b6b3098", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t\t", "-\t\t// all problems detected inside annotations are associated with a generic severity\t\t\t", "-//\t\tif (referenceContext.isProcessingAnnotation()) {", "-//\t\t\treturn this.options.getSeverity(CompilerOptions.AnnotationProblem);", "-//\t\t}", "-\t\t\t", "-\t\t// by default, all other problems are errors.", "+", "+\t\t// by default, if not annotation, then problems are errors.", "+\t\t\tif ((problemId & IProblem.Annotation) == IProblem.Annotation) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\t\t}"]}], "num": 59394}
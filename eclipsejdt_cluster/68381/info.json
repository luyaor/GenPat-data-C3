{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9825d535da5bcad4ba1a463714b0e642", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5b5899e3eb4140a59dc8637ca2ad8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding)", "diff": ["-\tprivate void resolveAnnotations(", "-\t\t\tBlockScope scope,", "-\t\t\tAnnotation[] annotations,", "-\t\t\tBinding currentBinding) {", "-\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "-\t\tElement element = null;", "+\tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding) {", "-\t\tfor (Annotation annotation : annotations) {", "-\t\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "-\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it", "+\t\tint length = annotations == null ? 0 : annotations.length;", "+\t\tif (length == 0)", "+\t\t\treturn;", "+\t\t", "+\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "+\t\tElementImpl element = (ElementImpl) _factory.newElement(currentBinding);", "+\t\tAnnotationBinding [] annotationBindings = element.getPackedAnnotationBindings(); // discovery is never in terms of repeating annotation.", "+\t\tfor (AnnotationBinding binding : annotationBindings) {", "+\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it: it could have been wrapped into a container.", "-\t\t\t\tif (element == null) {", "-\t\t\t\t\telement = _factory.newElement(currentBinding);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4c8df95be48d2f412a3c445688bacb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate void locatePackageDeclarations( \t\tSearchPattern searchPattern, \t\tIWorkspace workspace) \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate void locatePackageDeclarations( \t\tSearchPattern searchPattern, \t\tIWorkspace workspace) \t\tthrows JavaModelException", "diff": ["-\t\t\tOrPattern orPattern = (OrPattern) searchPattern;", "-\t\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);", "-\t\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);", "+\t\t\tSearchPattern[] patterns = ((OrPattern) searchPattern).patterns;", "+\t\t\tfor (int i = 0, length = patterns.length; i < length; i++)", "+\t\t\t\tthis.locatePackageDeclarations(patterns[i], workspace);"]}], "num": 68381}
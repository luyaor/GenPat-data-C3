{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db2b4d978b18c839612ce791b7bd81b7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94264a178edff90ca220a60ae481a8bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "014c4b6fb1c7750e40400ac728ee53666326e3d2", "commitAfterChange": "f06de4b999ef266d99070d6e6ee7f897f16a1d0e", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\t\tenclosingElement = ((IClassFile)this.currentPossibleMatch.openable).getType();", "+\t\t\tIOpenable openable = enclosingElement.getOpenable();", "+\t\t\tIJavaElement anonType = null;", "+\t\t\tif (openable instanceof ClassFile) {", "+\t\t\t\tBinaryType binaryType = (BinaryType)((ClassFile) openable).getType();", "+\t\t\t\tString fileName = binaryType.getPath().toOSString();", "+\t\t\t\tif ((type.bits & ASTNode.IsAnonymousType) != 0) {", "+\t\t\t\t\tif (fileName != null) {", "+\t\t\t\t\t\tif (fileName.endsWith(\"jar\") || fileName.endsWith(SuffixConstants.SUFFIX_STRING_class)) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tIClassFile classFile= binaryType.getPackageFragment().getClassFile(binaryType.getTypeQualifiedName() + ", "+\t\t\t\t\t\t\t\t\t\"$\" + Integer.toString(occurrenceCount) + SuffixConstants.SUFFIX_STRING_class);//$NON-NLS-1$", "+\t\t\t\t\t\t\tanonType =  classFile.getType();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// TODO: JAVA 9 - JIMAGE to be included later - currently assuming that only .class files will be dealt here.", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tenclosingElement = anonType != null ? anonType : ((IClassFile)this.currentPossibleMatch.openable).getType() ;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8eb6a54e3f57c99a25bf2402d0254dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "6672145af9f0ffc7b3a43bbf4b4faa8f14d04d8b", "commitAfterChange": "5ae7e6b78bc18a365a04a008c907250a535fa48a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "signatureAfterChange": " protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding binding)", "diff": ["-protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type) {", "-\treturn resolveLevelForType(qualifiedPattern(simpleNamePattern, qualificationPattern), type);", "+protected int resolveLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding binding) {", "+//\treturn resolveLevelForType(qualifiedPattern(simpleNamePattern, qualificationPattern), type);", "+\tchar[] qualifiedPattern = getQualifiedPattern(simpleNamePattern, qualificationPattern);", "+\tint level = resolveLevelForType(qualifiedPattern, binding);", "+\tif (level == ACCURATE_MATCH || binding == null) return level;", "+\tboolean match = false;", "+\tTypeBinding type = binding instanceof ArrayBinding ? ((ArrayBinding)binding).leafComponentType : binding;", "+\tif (type.isMemberType() || type.isLocalType()) {", "+\t\tif (qualificationPattern != null) {", "+\t\t\tmatch = CharOperation.equals(qualifiedPattern, getQualifiedSourceName(binding), this.isCaseSensitive);", "+\t\t} else {", "+\t\t\tmatch = CharOperation.equals(qualifiedPattern, binding.sourceName(), this.isCaseSensitive); // need to keep binding to get source name", "+\t\t}", "+\t} else if (qualificationPattern == null) {", "+\t\tmatch = CharOperation.equals(qualifiedPattern, getQualifiedSourceName(binding), this.isCaseSensitive);", "+\t}", "+\treturn match ? ACCURATE_MATCH : IMPOSSIBLE_MATCH;", "+"]}], "num": 22928}
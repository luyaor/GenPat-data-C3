{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f200a624011bf18c2ecffd88372015bf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0033bfb2f7ab357346aa29dc301fac59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a161d7f24784c6f26a3e04f2476eedb781db89c", "commitAfterChange": "5dd162eac2c331c7c9160a32097997e39ff399ea", "methodNumberBeforeChange": 1198, "methodNumberAfterChange": 1198, "signatureBeforeChange": " public void test1170()", "signatureAfterChange": " public void test1170()", "diff": ["-\t\t\t\"class A<E> {}\\n\" + ", "-\t\t\t\"class B<E> extends A<E> {}\\n\" + ", "-\t\t\"1. ERROR in example\\\\Container3.java (at line 4)\\n\" + ", "-\t\t\"\tclass A<E> {}\\n\" + ", "-\t\t\"\t      ^\\n\" + ", "-\t\t\"The type A is already defined\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in example\\\\Container3.java (at line 5)\\n\" + ", "-\t\t\"\tclass B<E> extends A<E> {}\\n\" + ", "-\t\t\"\t      ^\\n\" + ", "-\t\t\"The type B is already defined\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in example\\\\Container3.java (at line 14)\\n\" + ", "+\t\t\"1. ERROR in example\\\\Container3.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in example\\\\Container3.java (at line 15)\\n\" + ", "+\t\t\"2. ERROR in example\\\\Container3.java (at line 13)\\n\" + ", "-\t\t\"5. ERROR in example\\\\Container3.java (at line 17)\\n\" + ", "+\t\t\"3. ERROR in example\\\\Container3.java (at line 15)\\n\" + ", "-\t\t\"6. WARNING in example\\\\Container3.java (at line 18)\\n\" + ", "+\t\t\"4. WARNING in example\\\\Container3.java (at line 16)\\n\" + ", "-\t\t\"7. ERROR in example\\\\Container3.java (at line 18)\\n\" + ", "+\t\t\"5. ERROR in example\\\\Container3.java (at line 16)\\n\" + ", "-\t\t\"8. ERROR in example\\\\Container3.java (at line 26)\\n\" + ", "+\t\t\"6. ERROR in example\\\\Container3.java (at line 24)\\n\" + ", "-\t\t\"9. ERROR in example\\\\Container3.java (at line 27)\\n\" + ", "+\t\t\"7. ERROR in example\\\\Container3.java (at line 25)\\n\" + ", "-\t\t\"10. ERROR in example\\\\Container3.java (at line 29)\\n\" + ", "+\t\t\"8. ERROR in example\\\\Container3.java (at line 27)\\n\" + ", "-\t\t\"11. WARNING in example\\\\Container3.java (at line 30)\\n\" + ", "+\t\t\"9. WARNING in example\\\\Container3.java (at line 28)\\n\" + ", "-\t\t\"12. ERROR in example\\\\Container3.java (at line 30)\\n\" + ", "+\t\t\"10. ERROR in example\\\\Container3.java (at line 28)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1170657e9410a4d85b2e28a4b9dede67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationAcceptCastableArgument\\\" value=\\\"disabled\\\"/>\\n\" + ", "-\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationIncompatibleArgument\\\" value=\\\"warning\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a138abf0430190610821865d71adb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "0a1a58cff49ba28ab8a24ea8cceb397cd28f5bb9", "commitAfterChange": "c6d42959c3928ea39552c68b8365ccff903e4852", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": " public void testCompletionEmptyTypeName2() throws JavaModelException", "signatureAfterChange": " public void testCompletionEmptyTypeName2() throws JavaModelException", "diff": ["-\t\t\t\"element:a    completion:a    relevance:\"+(R_DEFAULT + R_RESOLVED + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +", "-\t\t\t\"element:a    completion:a    relevance:\"+(R_DEFAULT + R_RESOLVED + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a9dbd4811afb0a1cd8689f51379e95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test049()", "signatureAfterChange": " public void test049()", "diff": ["-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 7, same]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 0, same]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 1\\n\" + ", "-\t\t\t\"        [pc: 9, same]\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 9, append: {int}]\\n\" + ", "-\t\t\t\"        [pc: 17, full, stack: {java.lang.Exception}, locals: {X}]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "+\t\t\t\"        [pc: 17, same_locals_1_stack_item, stack: {java.lang.Exception}]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bec5b8bde3e65619b567aadf9471a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "7f58cf8d914e5aa53841fb3523b63083d1492c30", "commitAfterChange": "fa42f55b5f89f904e4b17de6743a2f811e6773d7", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"                       [+p/X:-p/*] to forbid access to all types in package p\\n\" +", "+        \"                       [+p/X\" + File.pathSeparator + \"-p/*] to forbid access to all types in package p\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b66d7bb915d997bf978cc77f6891c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "14d447e9b3a680ded3744f07910de88768216ea3", "commitAfterChange": "689526016f6ab442680e718d2760fc44e79dd9b5", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationArgumentNotCastable\\\" value=\\\"warning\\\"/>\\n\" + ", "+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.discouragedInvocationIncompatibleArgument\\\" value=\\\"warning\\\"/>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44877f04ff7769e72cfb4171f7989202", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "5c654dd7dd9bc98526f6c419699195d84517b84b", "commitAfterChange": "99aa173e65435610dfe4b542988d65ff8c2f55f2", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["+\t\t\"    -endorseddirs <directories separated by \" + File.pathSeparator + \">\\n\" + ", "+\t\t\"                       specify location for extension zip/jar files\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c33ade6a61dbeee1952dbf1c735c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "a331916366d31b2eac24fa72c43e85436f424bb2", "commitAfterChange": "92833c2313d3c570c2dffa40d03aa84d01695a1a", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  \tpublic void test150()", "signatureAfterChange": "  \tpublic void test150()", "diff": ["-\t\t\t\"----------\\n\"", "-\t\t\t\t+ \"1. WARNING in test\\\\X.java (at line 2)\\n\"", "-\t\t\t\t+ \"\timport test.copy.*;\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^\\n\"", "-\t\t\t\t+ \"The import test.copy is never used\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"2. ERROR in test\\\\X.java (at line 7)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#unknown() Invalid ref: non visible class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"3. ERROR in test\\\\X.java (at line 8)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_private() Invalid ref: non visible class (non visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"4. ERROR in test\\\\X.java (at line 9)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_private(boolean) Invalid ref: non visible class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"5. ERROR in test\\\\X.java (at line 10)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_public() Invalid ref: non visible class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"6. ERROR in test\\\\X.java (at line 11)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage#vm_public(long,long,long,int) Invalid ref: non visible class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"7. ERROR in test\\\\X.java (at line 12)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#unknown() Invalid ref: non visible class and non visible inner class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"8. ERROR in test\\\\X.java (at line 13)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_private() Invalid ref: non visible class and non visible inner class (non visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"9. ERROR in test\\\\X.java (at line 14)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_private(boolean, String) Invalid ref: non visible class and non visible inner class (non applicable method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"10. ERROR in test\\\\X.java (at line 15)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_public() Invalid ref: non visible class and non visible inner class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"11. ERROR in test\\\\X.java (at line 16)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPrivate#vm_public(Object, float) Invalid ref: non visible class and non visible inner class (non applicable visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"12. ERROR in test\\\\X.java (at line 17)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#unknown() Invalid ref: non visible class and visible inner class (non existent method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"13. ERROR in test\\\\X.java (at line 18)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_private() Invalid ref: non visible class and visible inner class (non visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"14. ERROR in test\\\\X.java (at line 19)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_private(boolean, String) Invalid ref: non visible class and visible inner class (non applicable method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"15. ERROR in test\\\\X.java (at line 20)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_public() Invalid ref: non visible class and visible inner class (visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\"", "-\t\t\t\t+ \"16. ERROR in test\\\\X.java (at line 21)\\n\"", "-\t\t\t\t+ \"\t* @see VisibilityPackage.VpPublic#vm_public(Object, float) Invalid ref: non visible class and visible inner class (non applicable visible method)\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: The type VisibilityPackage is not visible\\n\"", "-\t\t\t\t+ \"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 7)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#unknown() Invalid ref: non visible class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_private() Invalid ref: non visible class (non visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 9)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_private(boolean) Invalid ref: non visible class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 10)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_public() Invalid ref: non visible class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 11)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage#vm_public(long,long,long,int) Invalid ref: non visible class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 12)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#unknown() Invalid ref: non visible class and non visible inner class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 13)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_private() Invalid ref: non visible class and non visible inner class (non visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 14)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_private(boolean, String) Invalid ref: non visible class and non visible inner class (non applicable method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_public() Invalid ref: non visible class and non visible inner class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in test\\\\X.java (at line 16)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPrivate#vm_public(Object, float) Invalid ref: non visible class and non visible inner class (non applicable visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. ERROR in test\\\\X.java (at line 17)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#unknown() Invalid ref: non visible class and visible inner class (non existent method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. ERROR in test\\\\X.java (at line 18)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_private() Invalid ref: non visible class and visible inner class (non visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_private(boolean, String) Invalid ref: non visible class and visible inner class (non applicable method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. ERROR in test\\\\X.java (at line 20)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_public() Invalid ref: non visible class and visible inner class (visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. ERROR in test\\\\X.java (at line 21)\\n\" + ", "+\t\t\t\"\t* @see VisibilityPackage.VpPublic#vm_public(Object, float) Invalid ref: non visible class and visible inner class (non applicable visible method)\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: The type VisibilityPackage is not visible\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8caca9eeb6682fe02ef90d65078933b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "510bca02ec1705cb49e8296894c2f20084ae432d", "commitAfterChange": "4b7339d0380d230f31bd3019b0bc7395f10d2215", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void _test012()", "signatureAfterChange": " public void test012()", "diff": ["-// TODO (maxime) reenable once passing on Linux", "-public void _test012(){", "+public void test012(){", "-        \"    -cp -classpath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "-        \"    -bootclasspath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "-        \"    -sourcepath <directories and zip/jar files separated by ;>\\n\" + ", "+        \"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator +\">\\n\" + ", "-        \"    -extdirs <directories separated by ;>\\n\" + ", "+        \"    -extdirs <directories separated by \" + File.pathSeparator +\">\\n\" + ", "-        \"\\r\\n\", ", "+        \"\\n\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be08752b2e6cfd303bf3e3bb64efa06c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void test050()", "signatureAfterChange": " public void test050()", "diff": ["-\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\"  void foo();\\n\" + ", "-\t\t\t\"     0  aload_0 [this]\\n\" + ", "-\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"     4  ifeq 11\\n\" + ", "-\t\t\t\"     7  goto 11\\n\" + ", "-\t\t\t\"    10  astore_1\\n\" + ", "-\t\t\t\"    11  return\\n\" + ", "-\t\t\t\"      Exception Table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 7] -> 10 when : java.lang.Exception\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 5]\\n\" + ", "-\t\t\t\"        [pc: 7, line: 6]\\n\" + ", "-\t\t\t\"        [pc: 10, line: 8]\\n\" + ", "-\t\t\t\"        [pc: 11, line: 10]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 12] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\"  void foo2();\\n\" + ", "-\t\t\t\"     0  aload_0 [this]\\n\" + ", "-\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"     4  ifeq 11\\n\" + ", "-\t\t\t\"     7  goto 11\\n\" + ", "-\t\t\t\"    10  astore_1\\n\" + ", "-\t\t\t\"    11  return\\n\" + ", "-\t\t\t\"      Exception Table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 7] -> 10 when : java.lang.Exception\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 13]\\n\" + ", "-\t\t\t\"        [pc: 7, line: 14]\\n\" + ", "-\t\t\t\"        [pc: 10, line: 16]\\n\" + ", "-\t\t\t\"        [pc: 11, line: 18]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 12] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\"  void foo3();\\n\" + ", "-\t\t\t\"    0  goto 4\\n\" + ", "-\t\t\t\"    3  astore_1\\n\" + ", "-\t\t\t\"    4  return\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 22]\\n\" + ", "-\t\t\t\"        [pc: 3, line: 24]\\n\" + ", "-\t\t\t\"        [pc: 4, line: 26]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\"  void foo4();\\n\" + ", "-\t\t\t\"     0  iconst_0\\n\" + ", "-\t\t\t\"     1  istore_1 [i]\\n\" + ", "-\t\t\t\"     2  aload_0 [this]\\n\" + ", "-\t\t\t\"     3  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"     6  ifeq 13\\n\" + ", "-\t\t\t\"     9  goto 13\\n\" + ", "-\t\t\t\"    12  astore_1\\n\" + ", "-\t\t\t\"    13  return\\n\" + ", "-\t\t\t\"      Exception Table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 9] -> 12 when : java.lang.Exception\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 29]\\n\" + ", "-\t\t\t\"        [pc: 9, line: 30]\\n\" + ", "-\t\t\t\"        [pc: 12, line: 32]\\n\" + ", "-\t\t\t\"        [pc: 13, line: 34]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 14] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 12] local: i index: 1 type: int\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "-\t\t\t\"  // Stack: 1, Locals: 1\\n\" + ", "-\t\t\t\"  void bar();\\n\" + ", "-\t\t\t\"     0  aload_0 [this]\\n\" + ", "-\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"     4  ifeq 17\\n\" + ", "-\t\t\t\"     7  aload_0 [this]\\n\" + ", "-\t\t\t\"     8  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"    11  ifeq 24\\n\" + ", "-\t\t\t\"    14  goto 24\\n\" + ", "-\t\t\t\"    17  aload_0 [this]\\n\" + ", "-\t\t\t\"    18  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"    21  ifeq 24\\n\" + ", "-\t\t\t\"    24  return\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 36]\\n\" + ", "-\t\t\t\"        [pc: 7, line: 37]\\n\" + ", "-\t\t\t\"        [pc: 14, line: 38]\\n\" + ", "-\t\t\t\"        [pc: 17, line: 40]\\n\" + ", "-\t\t\t\"        [pc: 24, line: 44]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 25] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"  \\n\" + ", "-\t\t\t\"  // Method descriptor #28 (I)V\\n\" + ", "-\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "-\t\t\t\"  void baz(int i);\\n\" + ", "-\t\t\t\"     0  aload_0 [this]\\n\" + ", "-\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"     4  ifeq 34\\n\" + ", "-\t\t\t\"     7  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  tableswitch default: 31\\n\" + ", "-\t\t\t\"          case 0: 28\\n\" + ", "-\t\t\t\"    28  goto 39\\n\" + ", "-\t\t\t\"    31  goto 39\\n\" + ", "-\t\t\t\"    34  aload_0 [this]\\n\" + ", "-\t\t\t\"    35  invokevirtual X.bool() : boolean [17]\\n\" + ", "-\t\t\t\"    38  pop\\n\" + ", "-\t\t\t\"    39  return\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 46]\\n\" + ", "-\t\t\t\"        [pc: 7, line: 47]\\n\" + ", "-\t\t\t\"        [pc: 28, line: 48]\\n\" + ", "-\t\t\t\"        [pc: 31, line: 49]\\n\" + ", "-\t\t\t\"        [pc: 34, line: 52]\\n\" + ", "-\t\t\t\"        [pc: 39, line: 54]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 40] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 40] local: i index: 1 type: int\\n\"", "+\t\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\t\t\"  void foo();\\n\" + ", "+\t\t\t\t\"     0  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"     4  ifeq 11\\n\" + ", "+\t\t\t\t\"     7  goto 11\\n\" + ", "+\t\t\t\t\"    10  astore_1\\n\" + ", "+\t\t\t\t\"    11  return\\n\" + ", "+\t\t\t\t\"      Exception Table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 7] -> 10 when : java.lang.Exception\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 5]\\n\" + ", "+\t\t\t\t\"        [pc: 7, line: 6]\\n\" + ", "+\t\t\t\t\"        [pc: 10, line: 8]\\n\" + ", "+\t\t\t\t\"        [pc: 11, line: 10]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 12] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\t\t\"  void foo2();\\n\" + ", "+\t\t\t\t\"     0  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"     4  ifeq 11\\n\" + ", "+\t\t\t\t\"     7  goto 11\\n\" + ", "+\t\t\t\t\"    10  astore_1\\n\" + ", "+\t\t\t\t\"    11  return\\n\" + ", "+\t\t\t\t\"      Exception Table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 7] -> 10 when : java.lang.Exception\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 13]\\n\" + ", "+\t\t\t\t\"        [pc: 7, line: 14]\\n\" + ", "+\t\t\t\t\"        [pc: 10, line: 16]\\n\" + ", "+\t\t\t\t\"        [pc: 11, line: 18]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 12] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 0, Locals: 1\\n\" + ", "+\t\t\t\t\"  void foo3();\\n\" + ", "+\t\t\t\t\"    0  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 26]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\t\t\"  void foo4();\\n\" + ", "+\t\t\t\t\"     0  iconst_0\\n\" + ", "+\t\t\t\t\"     1  istore_1 [i]\\n\" + ", "+\t\t\t\t\"     2  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     3  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"     6  ifeq 13\\n\" + ", "+\t\t\t\t\"     9  goto 13\\n\" + ", "+\t\t\t\t\"    12  astore_1\\n\" + ", "+\t\t\t\t\"    13  return\\n\" + ", "+\t\t\t\t\"      Exception Table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 9] -> 12 when : java.lang.Exception\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 29]\\n\" + ", "+\t\t\t\t\"        [pc: 9, line: 30]\\n\" + ", "+\t\t\t\t\"        [pc: 12, line: 32]\\n\" + ", "+\t\t\t\t\"        [pc: 13, line: 34]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 14] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"        [pc: 2, pc: 12] local: i index: 1 type: int\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #6 ()V\\n\" + ", "+\t\t\t\t\"  // Stack: 1, Locals: 1\\n\" + ", "+\t\t\t\t\"  void bar();\\n\" + ", "+\t\t\t\t\"     0  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"     4  ifeq 17\\n\" + ", "+\t\t\t\t\"     7  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     8  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"    11  ifeq 24\\n\" + ", "+\t\t\t\t\"    14  goto 24\\n\" + ", "+\t\t\t\t\"    17  aload_0 [this]\\n\" + ", "+\t\t\t\t\"    18  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"    21  ifeq 24\\n\" + ", "+\t\t\t\t\"    24  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 36]\\n\" + ", "+\t\t\t\t\"        [pc: 7, line: 37]\\n\" + ", "+\t\t\t\t\"        [pc: 14, line: 38]\\n\" + ", "+\t\t\t\t\"        [pc: 17, line: 40]\\n\" + ", "+\t\t\t\t\"        [pc: 24, line: 44]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 25] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"  \\n\" + ", "+\t\t\t\t\"  // Method descriptor #28 (I)V\\n\" + ", "+\t\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\t\t\"  void baz(int i);\\n\" + ", "+\t\t\t\t\"     0  aload_0 [this]\\n\" + ", "+\t\t\t\t\"     1  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"     4  ifeq 34\\n\" + ", "+\t\t\t\t\"     7  iload_1 [i]\\n\" + ", "+\t\t\t\t\"     8  tableswitch default: 31\\n\" + ", "+\t\t\t\t\"          case 0: 28\\n\" + ", "+\t\t\t\t\"    28  goto 39\\n\" + ", "+\t\t\t\t\"    31  goto 39\\n\" + ", "+\t\t\t\t\"    34  aload_0 [this]\\n\" + ", "+\t\t\t\t\"    35  invokevirtual X.bool() : boolean [17]\\n\" + ", "+\t\t\t\t\"    38  pop\\n\" + ", "+\t\t\t\t\"    39  return\\n\" + ", "+\t\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\t\"        [pc: 0, line: 46]\\n\" + ", "+\t\t\t\t\"        [pc: 7, line: 47]\\n\" + ", "+\t\t\t\t\"        [pc: 28, line: 48]\\n\" + ", "+\t\t\t\t\"        [pc: 31, line: 49]\\n\" + ", "+\t\t\t\t\"        [pc: 34, line: 52]\\n\" + ", "+\t\t\t\t\"        [pc: 39, line: 54]\\n\" + ", "+\t\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 40] local: this index: 0 type: X\\n\" + ", "+\t\t\t\t\"        [pc: 0, pc: 40] local: i index: 1 type: int\\n\"", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 7, same]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "-\t\t\t\"  // Stack: 1, Locals: 2\\n\" + ", "+\t\t\t\"  // Stack: 0, Locals: 1\\n\" + ", "-\t\t\t\"    0  goto 4\\n\" + ", "-\t\t\t\"    3  astore_1\\n\" + ", "-\t\t\t\"    4  return\\n\" + ", "+\t\t\t\"    0  return\\n\" + ", "-\t\t\t\"        [pc: 0, line: 22]\\n\" + ", "-\t\t\t\"        [pc: 3, line: 24]\\n\" + ", "-\t\t\t\"        [pc: 4, line: 26]\\n\" + ", "+\t\t\t\"        [pc: 0, line: 26]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 0, same]\\n\" + ", "-\t\t\t\"        [pc: 3, same_locals_1_stack_item, stack: {java.lang.Exception}]\\n\" + ", "-\t\t\t\"        [pc: 4, same]\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"      Stack map table: number of frames 3\\n\" + ", "-\t\t\t\"        [pc: 9, append: {int}]\\n\" + ", "-\t\t\t\"        [pc: 12, full, stack: {java.lang.Exception}, locals: {X}]\\n\" + ", "+\t\t\t\"      Stack map table: number of frames 2\\n\" + ", "+\t\t\t\"        [pc: 12, same_locals_1_stack_item, stack: {java.lang.Exception}]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d948f9a8af531309a2e80bee6b98fd9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 1345, "methodNumberAfterChange": 1345, "signatureBeforeChange": " public void test1314()", "signatureAfterChange": " public void test1314()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tif (false) return new Y(b);//1\\n\" +", "-\t\t\t\"\t                  ^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The constructor Y(Object) belongs to the raw type Y. References to generic type Y<K> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" +", "-\t\t\t\"\tif (false) return new Y(b);//1\\n\" +", "-\t\t\t\"\t                      ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<K> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" +", "-\t\t\t\"\t                  ^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The constructor Y(Object) belongs to the raw type Y. References to generic type Y<K> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" +", "-\t\t\t\"\t                      ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<K> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" +", "-\t\t\t\"\t                        ^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked cast from B to K\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. WARNING in X.java (at line 12)\\n\" +", "-\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" +", "-\t\t\t\"\t                        ^^^^^\\n\" +", "-\t\t\t\"Unnecessary cast from B to K\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" +", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The constructor Y(Object) belongs to the raw type Y. References to generic type Y<K> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"8. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" +", "-\t\t\t\"\t           ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<K> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"9. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" +", "-\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked cast from Object to K\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"10. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" +", "-\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Unnecessary cast from Object to K\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"11. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" +", "-\t\t\t\"\t                 ^^^^^^^^^^\\n\" +", "-\t\t\t\"Unnecessary cast from B to Object\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"12. ERROR in X.java (at line 16)\\n\" +", "-\t\t\t\"\tif (false) return new Y<K>(b);//4\\n\" +", "-\t\t\t\"\t                  ^^^^^^^^^^^\\n\" +", "-\t\t\t\"The constructor Y<K>(B) is undefined\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"13. WARNING in X.java (at line 17)\\n\" +", "-\t\t\t\"\tif (false) return new Y<K>((K) b);//5\\n\" +", "-\t\t\t\"\t                           ^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked cast from B to K\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"14. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\"\treturn new Y<K>((K) (Object) b);//6\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked cast from Object to K\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"15. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\"\treturn new Y<K>((K) (Object) b);//6\\n\" +", "-\t\t\t\"\t                    ^^^^^^^^^^\\n\" +", "-\t\t\t\"Unnecessary cast from B to Object\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tif (false) return new Y(b);//1\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tif (false) return new Y(b);//1\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The constructor Y(Object) belongs to the raw type Y. References to generic type Y<K> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tif (false) return new Y(b);//1\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<K> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The constructor Y(Object) belongs to the raw type Y. References to generic type Y<K> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<K> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" + ", "+\t\t\t\"\t                        ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from B to K\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tif (false) return new Y((K) b);//2\\n\" + ", "+\t\t\t\"\t                        ^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from B to K\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The constructor Y(Object) belongs to the raw type Y. References to generic type Y<K> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<K> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to K\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Object to K\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\treturn new Y((K) (Object) b);//3\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from B to Object\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tif (false) return new Y<K>(b);//4\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The constructor Y<K>(B) is undefined\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"\tif (false) return new Y<K>((K) b);//5\\n\" + ", "+\t\t\t\"\t                           ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from B to K\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"16. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\treturn new Y<K>((K) (Object) b);//6\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Object to K\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"17. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\treturn new Y<K>((K) (Object) b);//6\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from B to Object\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd9455b0f2bfeaddfc95486f373890b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "b4016c063ca85174cf00c10c6af46c1dcd82c530", "commitAfterChange": "3211eff761b273e34444be85ba8824de6905d84d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-\t\t\"    -sourcepath <directories and zip/jar files separated by ;>\\n\" + ", "+\t\t\"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0cd382c4e96bdc285a52be2cd2922a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\tassumeEquals(this.prefix+\"Wrong start position <\"+tagStart+\"> for \"+tagElement, '{', source[tagStart++]);", "+\t\t\tassumeEquals(prefix+\"Wrong start position <\"+tagStart+\"> for \"+tagElement, '{', source[tagStart++]);", "-\t\t\tassumeEquals(this.prefix+\"Misplaced tag name at <\"+tagStart+\">: \", tagName, text);", "+\t\t\tassumeEquals(prefix+\"Misplaced tag name at <\"+tagStart+\">: \", tagName, text);", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tassumeTrue(prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Unexpected node type for tag element \"+tagElement, ASTNode.SIMPLE_NAME, fragment.getNodeType());", "+\t\t\t\t\tassumeEquals(prefix+\"Unexpected node type for tag element \"+tagElement, ASTNode.SIMPLE_NAME, fragment.getNodeType());", "-\t\t\t\t\tassumeTrue(this.prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "+\t\t\t\t\tassumeTrue(prefix+\"Unexpected fragment end for \"+tagElement, elements.hasNext());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "+\t\t\t\t\t\t\tassumeTrue(prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Tag element <\"+inlineTag+\"> has wrong start position\", tagStart, inlineTag.getStartPosition());", "+\t\t\t\t\tassumeEquals(prefix+\"Tag element <\"+inlineTag+\"> has wrong start position\", tagStart, inlineTag.getStartPosition());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced # separator at <\"+start+\"> for member ref \"+memberRef, '#', source[start]);", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced # separator at <\"+start+\"> for member ref \"+memberRef, '#', source[start]);", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced member ref at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced member ref at <\"+start+\">: \", text, name.toString());", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced # separator at <\"+start+\"> for method ref: \"+methodRef, '#', source[start]);", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced # separator at <\"+start+\"> for method ref: \"+methodRef, '#', source[start]);", "-\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "+\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "-//\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "+//\t\t\t\t\tassumeEquals(prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "-\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "+\t\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "-\t\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "+\t\t\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "-\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "+\t\t\t\t\t\t\t\tassumeEquals(prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "-\t\t\t\t\t\t\tassumeTrue(this.prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "+\t\t\t\t\t\t\tassumeTrue(prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "-\t\t\tassumeEquals(this.prefix+\"Wrong end character at <\"+tagStart+\"> for \"+tagElement, '}', source[tagStart++]);", "+\t\t\tassumeEquals(prefix+\"Wrong end character at <\"+tagStart+\"> for \"+tagElement, '}', source[tagStart++]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc9149fa093e9c8b2b2aca02bb19db48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void test076()", "signatureAfterChange": " public void test076()", "diff": ["+// See that this test case exhibits the bug 345947", "-\t\t\"1. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\t<U> J<String> b();\\n\" + ", "+\t\t\"\t              ^^^\\n\" + ", "+\t\t\"Name clash: The method b() of type J<E> has the same erasure as b() of type I<E> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 17)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 19)\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 24)\\n\" + ", "+\t\t\"8. ERROR in X.java (at line 24)\\n\" + ", "-\t\t\"8. ERROR in X.java (at line 25)\\n\" + ", "+\t\t\"9. ERROR in X.java (at line 25)\\n\" + ", "-\t\t\"9. ERROR in X.java (at line 26)\\n\" + ", "+\t\t\"10. ERROR in X.java (at line 26)\\n\" + ", "-\t\t\"10. ERROR in X.java (at line 27)\\n\" + ", "+\t\t\"11. ERROR in X.java (at line 27)\\n\" + ", "-\t\t\"11. WARNING in X.java (at line 28)\\n\" + ", "+\t\t\"12. WARNING in X.java (at line 28)\\n\" + ", "-\t\t\"12. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\"13. ERROR in X.java (at line 28)\\n\" + ", "-\t\t\"13. ERROR in X.java (at line 29)\\n\" + ", "+\t\t\"14. ERROR in X.java (at line 29)\\n\" + ", "-\t\t\"14. ERROR in X.java (at line 30)\\n\" + ", "+\t\t\"15. ERROR in X.java (at line 30)\\n\" + ", "-\t\t\"15. ERROR in X.java (at line 31)\\n\" + ", "+\t\t\"16. ERROR in X.java (at line 31)\\n\" + ", "-\t\t\"16. WARNING in X.java (at line 32)\\n\" + ", "+\t\t\"17. WARNING in X.java (at line 32)\\n\" + ", "-\t\t\"17. ERROR in X.java (at line 32)\\n\" + ", "+\t\t\"18. ERROR in X.java (at line 32)\\n\" + ", "-\t\t\"18. WARNING in X.java (at line 39)\\n\" + ", "+\t\t\"19. WARNING in X.java (at line 39)\\n\" + ", "-\t\t\"19. WARNING in X.java (at line 43)\\n\" + ", "+\t\t\"20. WARNING in X.java (at line 43)\\n\" + "]}], "num": 4456}
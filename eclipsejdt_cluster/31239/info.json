{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b3b59fa33c804d9ee41d1d7093e6607", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24eb1b325964eccb8a85d8bf807cd144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": "     public void test137()", "signatureAfterChange": "     public void test137()", "diff": ["-", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tpublic class X {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"Javadoc: Missing comment for public declaration\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Javadoc: Missing comment for public declaration\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tW.deprecated();\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method deprecated() from the type W is deprecated\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tList<X> l = new Vector();\\n\" + ", "-\t\t\t\"\t            ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Vector needs unchecked conversion to conform to List<X>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\t\"\tclass S implements Serializable {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The serializable class S does not declare a static final serialVersionUID field of type long\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in W.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class W {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"Javadoc: Missing comment for public declaration\\n\" + ", "-\t\t\t\"----------\\n\",", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+    \t\t\"\tpublic class X {\\n\" + ", "+    \t\t\"\t             ^\\n\" + ", "+    \t\t\"Javadoc: Missing comment for public declaration\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+    \t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+    \t\t\"\t                   ^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Javadoc: Missing comment for public declaration\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+    \t\t\"\tW.deprecated();\\n\" + ", "+    \t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"The method deprecated() from the type W is deprecated\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+    \t\t\"\tList<X> l = new Vector();\\n\" + ", "+    \t\t\"\t            ^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: The expression of type Vector needs unchecked conversion to conform to List<X>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+    \t\t\"\tList<X> l = new Vector();\\n\" + ", "+    \t\t\"\t                ^^^^^^\\n\" + ", "+    \t\t\"Type safety: Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. ERROR in X.java (at line 16)\\n\" + ", "+    \t\t\"\tZork z;\\n\" + ", "+    \t\t\"\t^^^^\\n\" + ", "+    \t\t\"Zork cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"7. WARNING in X.java (at line 19)\\n\" + ", "+    \t\t\"\tclass S implements Serializable {\\n\" + ", "+    \t\t\"\t      ^\\n\" + ", "+    \t\t\"The serializable class S does not declare a static final serialVersionUID field of type long\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"1. WARNING in W.java (at line 1)\\n\" + ", "+    \t\t\"\tpublic class W {\\n\" + ", "+    \t\t\"\t             ^\\n\" + ", "+    \t\t\"Javadoc: Missing comment for public declaration\\n\" + ", "+    \t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c485a69e2102300ab050d112b5e053", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1039, "methodNumberAfterChange": 1039, "signatureBeforeChange": " public void test1015()", "signatureAfterChange": " public void test1015()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\"\tvoid foo1(List l, List<String> ls) {\\n\" +", "-\t\t\"\t          ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" +", "-\t\t\"\t                   ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(List, List) of the generic method bar(List<U>, List<V>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" +", "-\t\t\"\t                   ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" +", "-\t\t\"\t                       ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<U>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tString s = bar(l, ls);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(List, List) of the generic method bar(List<U>, List<V>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tString s = bar(l, ls);\\n\" +", "-\t\t\"\t           ^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from List to String\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tString s = bar(l, ls);\\n\" +", "-\t\t\"\t               ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<U>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tvoid foo1(List l, List<String> ls) {\\n\" + ", "+\t\t\"\t          ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" + ", "+\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(List, List<String>) of the generic method bar(List<U>, List<V>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" + ", "+\t\t\"\t                   ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tList<String> ls1 = bar(l, ls);\\n\" + ", "+\t\t\"\t                       ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tString s = bar(l, ls);\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(List, List<String>) of the generic method bar(List<U>, List<V>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tString s = bar(l, ls);\\n\" + ", "+\t\t\"\t           ^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List to String\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tString s = bar(l, ls);\\n\" + ", "+\t\t\"\t               ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e089f129ab763aad44f5bb100a29971", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "32f757dfe8da946b3f43d9a2940c80a3241b7487", "commitAfterChange": "362a367dfb78f3dcbcec97d2d2301a9c64da2876", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 174, "signatureBeforeChange": " \tpublic void _test052()", "signatureAfterChange": " \tpublic void test052a()", "diff": ["-\tpublic void _test052() {", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=91728", "+\tpublic void test052a() {", "-\t\t\tnew String[] {", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"public class A<T> {\\n\" + ", "-\t\t\t\t\"\tpublic <U> A<U> test() { return null; }\\n\" + ", "-\t\t\t\t\"\tpublic <U> A<U> test2() { return null; }\\n\" + ", "-\t\t\t\t\"\tpublic <U> A<U> test3() { return null; }\\n\" + ", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class B extends A<X> {\\n\" + ", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"A.java\",", "+\t\t\t\t\t\"public class A<T> {\\n\" + ", "+\t\t\t\t\t\"\tpublic <U> A<U> test() { return null; }\\n\" + ", "+\t\t\t\t\t\"\tpublic <U> A<U> test2() { return null; }\\n\" + ", "+\t\t\t\t\t\"\tpublic <U> A<U> test3() { return null; }\\n\" + ", "+\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\"class B extends A<X> {\\n\" + ", "+\t\t\t\t\t\"\t@Override public B test() { return null; }\\n\" + ", "+\t\t\t\t\t\"\t@Override public A test2() { return null; }\\n\" + ", "+\t\t\t\t\t\"\t@Override public A<X> test3() { return null; }\\n\" + ", "+\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\"class X{}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in A.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"Type safety: The return type B for test() from the type B needs unchecked conversion to conform to A<Object> from the type A<X>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in A.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in A.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t@Override public A test2() { return null; }\\n\" + ", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"Type safety: The return type A for test2() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in A.java (at line 9)\\n\" + ", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class X{}\\n\"", "-\t\t\t},", "-\t\t\t\"1. WARNING in A.java (at line 7)\\r\\n\" + ", "-\t\t\t\"\t@Override public B test() { return null; }\\r\\n\" + ", "-\t\t\t\"\t                 ^\\n\" + ", "-\t\t\t\"Type safety: The return type B for test() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in A.java (at line 8)\\n\" + ", "-\t\t\t\"\t@Override public A test2() { return null; }\\n\" + ", "-\t\t\t\"\t                 ^\\n\" + ", "-\t\t\t\"Type safety: The return type A for test2() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in A.java (at line 9)\\r\\n\" + ", "-\t\t\t\"\t@Override public A<X> test3() { return null; }\\r\\n\" + ", "-\t\t\t\"\t                 ^\\n\" + ", "-\t\t\t\"Type safety: The return type A<X> for test3() from the type B needs unchecked conversion to conform to A<U> from the type A<T>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t\t// warning: test() in B overrides <U>test() in A; return type requires unchecked conversion", "-\t\t\t// warning: test2() in B overrides <U>test2() in A; return type requires unchecked conversion", "-\t\t\t// warning: test3() in B overrides <U>test3() in A; return type requires unchecked conversion", "-\t\t);", "+\t\t\t\t\"\t                 ^\\n\" + ", "+\t\t\t\t\"Type safety: The return type A<X> for test3() from the type B needs unchecked conversion to conform to A<Object> from the type A<X>\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t\t// warning: test() in B overrides <U>test() in A; return type requires unchecked conversion", "+\t\t\t\t// warning: test2() in B overrides <U>test2() in A; return type requires unchecked conversion", "+\t\t\t\t// warning: test3() in B overrides <U>test3() in A; return type requires unchecked conversion", "+\t\t\t);"]}], "num": 31239}
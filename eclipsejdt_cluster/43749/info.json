{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bc34fcb45db72c84c7d253f714e767e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9a006113a527c02712f8f03e8644ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "4363912f18eb1d976122576b794dd16e256f3f9f", "commitAfterChange": "431faff9c8cb5108eaa2142661cdcdc8781fb704", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "signatureAfterChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "diff": ["-\t\tint end = statement.assertExpression.sourceEnd + 1;", "-\t\tassertStatement.setExpression(convert(statement.assertExpression));", "+\t\tfinal Expression assertExpression = convert(statement.assertExpression);", "+\t\tExpression searchingNode = assertExpression;", "+\t\tassertStatement.setExpression(assertExpression);", "-\t\t\tend = exceptionArgument.sourceEnd + 1;", "-\t\t\tassertStatement.setMessage(convert(exceptionArgument));", "+\t\t\tfinal Expression exceptionMessage = convert(exceptionArgument);", "+\t\t\tassertStatement.setMessage(exceptionMessage);", "+\t\t\tsearchingNode = exceptionMessage;", "-\t\tint sourceEnd = retrieveEndingSemiColonPosition(end, this.compilationUnitSourceLength);", "-\t\tassertStatement.setSourceRange(start, sourceEnd - start + 1);", "+\t\tint sourceEnd = retrieveSemiColonPosition(searchingNode);", "+\t\tif (sourceEnd == -1) {", "+\t\t\tsourceEnd = searchingNode.getStartPosition() + searchingNode.getLength() - 1;", "+\t\t\tassertStatement.setSourceRange(start, sourceEnd - start + 1);", "+\t\t} else {", "+\t\t\tassertStatement.setSourceRange(start, sourceEnd - start + 1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9006c2c87f90ea2bacd23038fe176a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "commitAfterChange": "53b5fe3415daa91888a4dcef6f73ef37da327c9d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void testAssertStatement() throws Exception", "signatureAfterChange": " \t \tpublic void testAssertStatement() throws Exception", "diff": ["+\t\tbuf.append(\"        assert/* comment*/true;\\n\");", "+\t\tbuf.append(\"        assert(true);\\n\");", "+\t\tbuf.append(\"        assert(true) : \\\"Hello\\\";\\n\");", "+\t\tbuf.append(\"        assert(true) : \\\"Hello\\\";\\n\");", "-\t\tassertTrue(\"Number of statements not 1\", statements.size() == 1);", "-\t\t{ // insert expression", "+\t\tassertTrue(\"Number of statements not 5\", statements.size() == 5);", "+\t\t{ // replace expression", "-\t\t}\t\t", "+\t\t}", "+\t\t{ // replace expression", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(1);", "+\t\t\t", "+\t\t\tSimpleName newExpression= ast.newSimpleName(\"x\");\t", "+\t\t\trewrite.set(statement, AssertStatement.EXPRESSION_PROPERTY, newExpression, null);", "+\t\t}", "+\t\t{ // insert message", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(2);", "+\t\t\t", "+\t\t\tSimpleName newExpression= ast.newSimpleName(\"x\");\t", "+\t\t\trewrite.set(statement, AssertStatement.MESSAGE_PROPERTY, newExpression, null);", "+\t\t}", "+\t\t{ // replace message", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(3);", "+\t\t\t", "+\t\t\tSimpleName newExpression= ast.newSimpleName(\"x\");\t", "+\t\t\trewrite.set(statement, AssertStatement.MESSAGE_PROPERTY, newExpression, null);", "+\t\t}", "+\t\t{ // remove message", "+\t\t\tAssertStatement statement= (AssertStatement) statements.get(4);", "+\t\t\t", "+\t\t\trewrite.set(statement, AssertStatement.MESSAGE_PROPERTY, null, null);", "+\t\t}\t", "+\t\tbuf.append(\"        assert x;\\n\");", "+\t\tbuf.append(\"        assert(true) : x;\\n\");", "+\t\tbuf.append(\"        assert(true) : x;\\n\");", "+\t\tbuf.append(\"        assert(true);\\n\");"]}], "num": 43749}
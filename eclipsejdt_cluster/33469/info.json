{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f27863b9a85b670c35d5b7835e07ab4d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "816bfa0a723e0396cc0ad7457d9331c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d63e77a4f3e59d96dada738a65e836b17108f62c", "commitAfterChange": "8b3dd5b0f6f317bedbda94f1dc54e156c48d6322", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tchar pc = peekChar();", "+\t\t\t\t\tif (!Character.isWhitespace(pc) && (!this.inlineTagStarted || pc != '}')) {", "+\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, this.lineEnd);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\tchar pc = peekChar();", "+\t\t\t\tif (!Character.isWhitespace(pc) && (!this.inlineTagStarted || pc != '}')) {", "+\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocMalformedSeeReference(start, this.lineEnd);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f1479937095a212b4a769a618730c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ac184a82eec2774ea709d467355e4ac84de0c7be", "commitAfterChange": "38e8034dd54c8ecc2dd76934beb4729edff6d0e3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["+\t\t\t\t\t\t\tboolean lastParam = !parameters.hasNext();", "+\t\t\t\t\t\t\t// if last param then perhaps a varargs", "+\t\t\t\t\t\t\twhile (Character.isWhitespace(source[start])) { // do NOT accept '*' in parameter declaration", "+\t\t\t\t\t\t\t\t start++; // purge non-stored characters", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (lastParam && this.astLevel != AST.JLS2 && param.isVarargs()) {", "+\t\t\t\t\t\t\t\tfor (int p=0;p<3;p++) {", "+\t\t\t\t\t\t\t\t\tassumeTrue(prefix+\"Missing ellipsis for vararg method ref parameter at <\"+start+\"> for method ref: \"+methodRef, source[start++]=='.');", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}"]}], "num": 33469}
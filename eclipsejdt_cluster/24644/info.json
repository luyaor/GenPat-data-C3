{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1961e44249966f026e217a30fe352f8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a46fd3390fdaa9e9aa4e81464834ccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "59119c56d69b798c59e5389db2508c4896e5dbdf", "commitAfterChange": "c861a0381ba1376aa01c18d9f68e1168bdac8aab", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tvoid printModifiers(int modifiers)", "signatureAfterChange": " \tvoid printModifiers(int modifiers)", "diff": ["-\t\t\tbuffer.append(\"public \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"public \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"protected \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"protected \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"private \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"private \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"static \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"static \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"abstract \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"abstract \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"final \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"final \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"synchronized \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"synchronized \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"volatile \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"volatile \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"native \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"native \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"strictfp \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"strictfp \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"transient \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"transient \");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f553bdedbc882b30bee24271a9b1333", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t */", "-\tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream) {", "-\t\t\t", "-\t\t// determine the rank until which we now we do not need any actual value for the field access", "-\t\tint otherBindingsCount = this.otherCodegenBindings == null ? 0 : otherCodegenBindings.length;", "-\t\tboolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();", "-\t\tFieldBinding lastFieldBinding = null;", "-\t\tTypeBinding lastGenericCast = null;", "-\t\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "-", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\tcase Binding.FIELD :", "-\t\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\t\tlastGenericCast = this.genericCast;", "-\t\t\t\t// if first field is actually constant, we can inline it", "-\t\t\t\tif (lastFieldBinding.constant() != Constant.NotAConstant) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif ((needValue && !lastFieldBinding.isStatic()) || lastGenericCast != null) {", "-\t\t\t\t\tint pc = codeStream.position;", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.LOCAL : // reading the first local variable", "-\t\t\t\tif (!needValue) break; // no value needed", "-\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "-\t\t\t\t// regular local variable read", "-\t\t\t\tConstant localConstant = localBinding.constant();", "-\t\t\t\tif (localConstant != Constant.NotAConstant) {", "-\t\t\t\t\tcodeStream.generateConstant(localConstant, 0);", "-\t\t\t\t\t// no implicit conversion", "-\t\t\t\t} else {", "-\t\t\t\t\t// outer local?", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.load(localBinding);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t// all intermediate field accesses are read accesses", "-\t\t// only the last field binding is a write access", "-\t\tint positionsLength = this.sourcePositions.length;", "-\t\tif (this.otherCodegenBindings != null) {", "-\t\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "-\t\t\t\tint pc = codeStream.position;", "-\t\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "-\t\t\t\tTypeBinding nextGenericCast = this.otherGenericCasts == null ? null : this.otherGenericCasts[i];", "-\t\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\t\tneedValue = !nextField.isStatic();", "-\t\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\t\tif (i > 0 && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (needValue) {", "-\t\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (needValue || (i > 0 && complyTo14) || lastGenericCast != null) {", "-\t\t\t\t\t\t\tMethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "-\t\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t\t\t\tif (!needValue) codeStream.pop();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (this.codegenBinding == lastFieldBinding) {", "-\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "-\t\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "-\t\t\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass != this.actualReceiverType.erasure()) {", "-\t\t\t\t\t\t\t\t\t\tMethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "-\t\t\t\t\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){", "-\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((positionsLength - otherBindingsCount + i - 1) >= 0) {", "-\t\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[positionsLength - otherBindingsCount + i - 1] >>>32);", "-\t\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, fieldPosition);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tlastFieldBinding = nextField;", "-\t\t\t\tlastGenericCast = nextGenericCast;", "-\t\treturn lastFieldBinding;", "+ */", "+public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream) {", "+\t// determine the rank until which we now we do not need any actual value for the field access", "+\tint otherBindingsCount = this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length;", "+\tboolean needValue = otherBindingsCount == 0 || !this.otherBindings[0].isStatic();", "+\tFieldBinding lastFieldBinding = null;", "+\tTypeBinding lastGenericCast = null;", "+\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+", "+\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\tcase Binding.FIELD :", "+\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\tlastGenericCast = this.genericCast;", "+\t\t\t// if first field is actually constant, we can inline it", "+\t\t\tif (lastFieldBinding.constant() != Constant.NotAConstant) {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif ((needValue && !lastFieldBinding.isStatic()) || lastGenericCast != null) {", "+\t\t\t\tint pc = codeStream.position;", "+\t\t\t\tif ((this.bits & ASTNode.DepthMASK) != 0) {", "+\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);", "+\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "+\t\t\t\t} else {", "+\t\t\t\t\tgenerateReceiver(codeStream);", "+\t\t\t\t}", "+\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.LOCAL : // reading the first local variable", "+\t\t\tif (!needValue) break; // no value needed", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\t// regular local variable read", "+\t\t\tConstant localConstant = localBinding.constant();", "+\t\t\tif (localConstant != Constant.NotAConstant) {", "+\t\t\t\tcodeStream.generateConstant(localConstant, 0);", "+\t\t\t\t// no implicit conversion", "+\t\t\t} else {", "+\t\t\t\t// outer local?", "+\t\t\t\tif ((this.bits & ASTNode.DepthMASK) != 0) {", "+\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t}", "+\t\t\t}", "+\t}", "+\t\t\t\t\t", "+\t// all intermediate field accesses are read accesses", "+\t// only the last field binding is a write access", "+\tint positionsLength = this.sourcePositions.length;", "+\tif (this.otherCodegenBindings != null) {", "+\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "+\t\t\tint pc = codeStream.position;", "+\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "+\t\t\tTypeBinding nextGenericCast = this.otherGenericCasts == null ? null : this.otherGenericCasts[i];", "+\t\t\tif (lastFieldBinding != null) {", "+\t\t\t\tneedValue = !nextField.isStatic();", "+\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\t\tif (i > 0 && !lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (needValue || (i > 0 && complyTo14) || lastGenericCast != null) {", "+\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i]; ", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "+\t\t\t\t\t\tif (!needValue) codeStream.pop();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.codegenBinding == lastFieldBinding) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t\tif (((FieldBinding)this.binding).original().declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i]; ", "+\t\t\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((positionsLength - otherBindingsCount + i - 1) >= 0) {", "+\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[positionsLength - otherBindingsCount + i - 1] >>>32);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, fieldPosition);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlastFieldBinding = nextField;", "+\t\t\tlastGenericCast = nextGenericCast;", "+\treturn lastFieldBinding;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70e09b2b8ff65b7a4bf10af25827d883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "8cf1dcdf2235b54b4116fb6f086a0d218e6b26f7", "commitAfterChange": "45fa88428d5d04389be0956547a1793c4e66bac3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\treceiver.generateCode(currentScope, codeStream, false);", "+\t\tthis.receiver.generateCode(currentScope, codeStream, false);", "-\t} else if ((bits & DepthMASK) != 0 && receiver.isImplicitThis()) { // outer access ?", "+\t} else if ((this.bits & ASTNode.DepthMASK) != 0 && this.receiver.isImplicitThis()) { // outer access ?", "-\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\t\t", "+\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);\t\t", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "+\t\tthis.receiver.generateCode(currentScope, codeStream, true);", "-\tgenerateArguments(binding, arguments, currentScope, codeStream);", "+\tgenerateArguments(this.binding, this.arguments, currentScope, codeStream);", "-\tif (syntheticAccessor == null){", "+\tif (this.syntheticAccessor == null){", "-\t\t\tif( (receiver.isSuper()) || this.codegenBinding.isPrivate()){", "+\t\t\tif( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "-\t\tcodeStream.invokestatic(syntheticAccessor);", "+\t\tcodeStream.invokestatic(this.syntheticAccessor);", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82ca4818590165d063924df0c09804da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate LocalTypeBinding buildLocalType(SourceTypeBinding enclosingType, ReferenceBinding anonymousOriginalSuperType, PackageBinding packageBinding)", "signatureAfterChange": " \t \tprivate LocalTypeBinding buildLocalType(SourceTypeBinding enclosingType, ReferenceBinding anonymousOriginalSuperType, PackageBinding packageBinding)", "diff": ["-\t\treferenceContext.scope = this;", "-\t\treferenceContext.staticInitializerScope = new MethodScope(this, referenceContext, true);", "-\t\treferenceContext.initializerScope = new MethodScope(this, referenceContext, false);", "+\t\tthis.referenceContext.scope = this;", "+\t\tthis.referenceContext.staticInitializerScope = new MethodScope(this, this.referenceContext, true);", "+\t\tthis.referenceContext.initializerScope = new MethodScope(this, this.referenceContext, false);", "-\t\treferenceContext.binding = localType;", "+\t\tthis.referenceContext.binding = localType;", "-\t\tif (referenceContext.memberTypes != null) {", "-\t\t\tint size = referenceContext.memberTypes.length;", "+\t\tif (this.referenceContext.memberTypes != null) {", "+\t\t\tint size = this.referenceContext.memberTypes.length;", "-\t\t\t\tTypeDeclaration memberContext = referenceContext.memberTypes[i];", "+\t\t\t\tTypeDeclaration memberContext = this.referenceContext.memberTypes[i];", "-\t\t\t\t\tif (CharOperation.equals(referenceContext.memberTypes[j].name, memberContext.name)) {", "+\t\t\t\t\tif (CharOperation.equals(this.referenceContext.memberTypes[j].name, memberContext.name)) {", "-\t\t\t\tClassScope memberScope = new ClassScope(this, referenceContext.memberTypes[i]);", "+\t\t\t\tClassScope memberScope = new ClassScope(this, this.referenceContext.memberTypes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac18a700c01870f306a11f3647b58e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": " \t \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["-\t\treferenceContext.scope = this;", "-\t\treferenceContext.staticInitializerScope = new MethodScope(this, referenceContext, true);", "-\t\treferenceContext.initializerScope = new MethodScope(this, referenceContext, false);", "+\t\tthis.referenceContext.scope = this;", "+\t\tthis.referenceContext.staticInitializerScope = new MethodScope(this, this.referenceContext, true);", "+\t\tthis.referenceContext.initializerScope = new MethodScope(this, this.referenceContext, false);", "-\t\t\tchar[][] className = CharOperation.arrayConcat(packageBinding.compoundName, referenceContext.name);", "-\t\t\treferenceContext.binding = new SourceTypeBinding(className, packageBinding, this);", "+\t\t\tchar[][] className = CharOperation.arrayConcat(packageBinding.compoundName, this.referenceContext.name);", "+\t\t\tthis.referenceContext.binding = new SourceTypeBinding(className, packageBinding, this);", "-\t\t\t\tCharOperation.concat(className[className.length - 1], referenceContext.name, '$');", "+\t\t\t\tCharOperation.concat(className[className.length - 1], this.referenceContext.name, '$');", "-\t\t\t\t\tthis.parent.problemReporter().duplicateNestedType(referenceContext);", "+\t\t\t\t\tthis.parent.problemReporter().duplicateNestedType(this.referenceContext);", "-\t\t\treferenceContext.binding = new MemberTypeBinding(className, this, enclosingType);", "+\t\t\tthis.referenceContext.binding = new MemberTypeBinding(className, this, enclosingType);", "-\t\tSourceTypeBinding sourceType = referenceContext.binding;", "+\t\tSourceTypeBinding sourceType = this.referenceContext.binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd4885f57295631d9197e1298a85fc87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/MultiOperation.java", "commitBeforeChange": "a3333bb335567ca03beac7199ab0f2b0e3a8fc03", "commitAfterChange": "e5c7fc4ae60b9d791500413e9c800c9fd02d03c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void initializeRenamings()", "signatureAfterChange": " \tprivate void initializeRenamings()", "diff": ["-\t\tif (fRenamingsList != null && fRenamingsList.length == fElementsToProcess.length) {", "-\t\t\tfRenamings = new HashMap(fRenamingsList.length);", "-\t\t\tfor (int i = 0; i < fRenamingsList.length; i++) {", "-\t\t\t\tif (fRenamingsList[i] != null) {", "-\t\t\t\t\tfRenamings.put(fElementsToProcess[i], fRenamingsList[i]);", "+\t\tif (this.renamingsList != null && this.renamingsList.length == fElementsToProcess.length) {", "+\t\t\tthis.renamings = new HashMap(this.renamingsList.length);", "+\t\t\tfor (int i = 0; i < this.renamingsList.length; i++) {", "+\t\t\t\tif (this.renamingsList[i] != null) {", "+\t\t\t\t\tthis.renamings.put(fElementsToProcess[i], this.renamingsList[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff0766b130d6a1020153d62042aa9356", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 259, "methodNumberAfterChange": 259, "signatureBeforeChange": " public void recoveryExitFromVariable()", "signatureAfterChange": " public void recoveryExitFromVariable()", "diff": ["-\tif(currentElement != null && currentElement.parent != null) {", "-\t\tif(currentElement instanceof RecoveredLocalVariable) {", "+\tif(this.currentElement != null && this.currentElement.parent != null) {", "+\t\tif(this.currentElement instanceof RecoveredLocalVariable) {", "-\t\t\tint end = ((RecoveredLocalVariable)currentElement).localDeclaration.sourceEnd;", "-\t\t\tcurrentElement.updateSourceEndIfNecessary(end);", "-\t\t\tcurrentElement = currentElement.parent;", "-\t\t} else if(currentElement instanceof RecoveredField", "-\t\t\t&& !(currentElement instanceof RecoveredInitializer)) {", "+\t\t\tint end = ((RecoveredLocalVariable)this.currentElement).localDeclaration.sourceEnd;", "+\t\t\tthis.currentElement.updateSourceEndIfNecessary(end);", "+\t\t\tthis.currentElement = this.currentElement.parent;", "+\t\t} else if(this.currentElement instanceof RecoveredField", "+\t\t\t&& !(this.currentElement instanceof RecoveredInitializer)) {", "-\t\t\tint end = ((RecoveredField)currentElement).fieldDeclaration.sourceEnd;", "-\t\t\tcurrentElement.updateSourceEndIfNecessary(end);", "-\t\t\tcurrentElement = currentElement.parent;", "+\t\t\tint end = ((RecoveredField)this.currentElement).fieldDeclaration.sourceEnd;", "+\t\t\tthis.currentElement.updateSourceEndIfNecessary(end);", "+\t\t\tthis.currentElement = this.currentElement.parent;"]}], "num": 24644}
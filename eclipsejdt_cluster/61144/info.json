{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a22083985b3d843dfd029045e51118d1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63536f9b2a4f2e05cef8157a2dc08e5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "b0dc1dab558ce36f11677d02e0885d555028b05e", "commitAfterChange": "91fd6592eedea8aedfdfc8b40a21d626aa183875", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-\t\tcategoryTable = new HashtableOfObject(size);", "+\t\ttry {", "+\t\t\tif (size < 0) { // DEBUG", "+\t\t\t\tSystem.err.println(\"-------------------- DEBUG --------------------\"); //$NON-NLS-1$", "+\t\t\t\tSystem.err.println(\"file = \"+getIndexFile()); //$NON-NLS-1$", "+\t\t\t\tSystem.err.println(\"offset = \"+offset); //$NON-NLS-1$", "+\t\t\t\tSystem.err.println(\"size = \"+size); //$NON-NLS-1$", "+\t\t\t\tSystem.err.println(\"--------------------   END   --------------------\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tcategoryTable = new HashtableOfObject(size);", "+\t\t} catch (OutOfMemoryError oom) {", "+\t\t\t// DEBUG", "+\t\t\toom.printStackTrace();", "+\t\t\tSystem.err.println(\"-------------------- DEBUG --------------------\"); //$NON-NLS-1$", "+\t\t\tSystem.err.println(\"file = \"+getIndexFile()); //$NON-NLS-1$", "+\t\t\tSystem.err.println(\"offset = \"+offset); //$NON-NLS-1$", "+\t\t\tSystem.err.println(\"size = \"+size); //$NON-NLS-1$", "+\t\t\tSystem.err.println(\"--------------------   END   --------------------\"); //$NON-NLS-1$", "+\t\t\tthrow oom;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16b9261f0ed997529aef194e76c9333", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/APIDocumentationTests.java", "commitBeforeChange": "d6d10602861f99a2e87d2ce2ba051c7b3da388a8", "commitAfterChange": "7e04164b6ff5e1f953daad29cd865817aa19cb20", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "signatureAfterChange": " public void test001() throws CoreException, IllegalArgumentException, IllegalAccessException, IOException", "diff": ["-// TODO maxime: reactivate in early 3.4 M6 and refine for remote execution", "-\tFile javaCoreSourceFile = new File(FileLocator.toFileURL(JavaCore.getJavaCore().getBundle().getEntry(\"/model/org/eclipse/jdt/core/JavaCore.java\")).getPath());", "+\t@SuppressWarnings(\"deprecation\")Bundle bundle = org.eclipse.jdt.core.tests.Activator.getInstance().getBundle();", "+\tURL url = bundle.getEntry(\"/\");", "+System.err.println(\"Bundle URL = \"+url);", "+\tIPath path = new Path(FileLocator.toFileURL(url).getPath());", "+System.err.println(\"Bundle path = \"+path);", "+\tpath = path.removeLastSegments(1).append(\"org.eclipse.jdt.core\");", "+System.err.println(\"jdt.core path = \"+path);", "+\tString stringPath = path.toString() + \"/model/org/eclipse/jdt/core/JavaCore.java\"; ", "+\tFile javaCoreSourceFile = new File(stringPath);", "+System.err.println(\"JavaCore.java = \"+javaCoreSourceFile+\" exists?\"+javaCoreSourceFile.exists());", "+\t\trealOptionIDs.remove(\"DEFAULT_JAVA_FORMATTER\");"]}], "num": 61144}
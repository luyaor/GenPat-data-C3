{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb015577cc3a00d4a0f22f9d73838acc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "128c2206997ff56160ae38e1193c2bd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "e411de6de610f4a41b2ca5b35274818572448e41", "commitAfterChange": "83aa074d1edc1431b30e3bdffeaa5b8dd0bf1353", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tpublic void searchAllMethodNames( \t\t\tString methodName, \t\t\tfinal int methodMatchRule, \t\t\tIJavaSearchScope scope, \t\t\tfinal MethodNameMatchRequestor nameRequestor)", "signatureAfterChange": "  \tpublic void searchAllMethodNames( \t\t\tString packageName, \t\t\tfinal int pkgMatchRule, \t\t\tString declaringQualification, \t\t\tfinal int declQualificationMatchRule, \t\t\tString declaringSimpleName, \t\t\tfinal int declSimpleNameMatchRule, \t\t\tString methodName, \t\t\tfinal int methodMatchRule, \t\t\tIJavaSearchScope scope, \t\t\tfinal MethodNameMatchRequestor nameRequestor)", "diff": ["-\t\t\tString methodName,", "-\t\t\tfinal int methodMatchRule,", "-\t\t\tIJavaSearchScope scope,", "-\t\t\tfinal MethodNameMatchRequestor nameRequestor) {", "-\t\tsearchAllMethodNames(", "-\t\t\t\tnull, SearchPattern.R_EXACT_MATCH, ", "-\t\t\t\tnull, SearchPattern.R_EXACT_MATCH, ", "-\t\t\t\tnull, SearchPattern.R_EXACT_MATCH, ", "-\t\t\t\tmethodName, methodMatchRule, ", "-\t\t\t\tscope, nameRequestor);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2785ccf2a619f98a39d7cb2e607cee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "e411de6de610f4a41b2ca5b35274818572448e41", "commitAfterChange": "83aa074d1edc1431b30e3bdffeaa5b8dd0bf1353", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void searchAllMethodNames( \t\t\tString declaringSimpleName, \t\t\tfinal int declSimpleNameMatchRule, \t\t\tString methodName, \t\t\tfinal int methodMatchRule, \t\t\tIJavaSearchScope scope, \t\t\tfinal MethodNameMatchRequestor nameRequestor)", "signatureAfterChange": "  \tpublic void searchAllMethodNames( \t\t\tString qualifier, \t\t\tfinal int qualifierMatchRule, \t\t\tString methodName, \t\t\tfinal int methodMatchRule, \t\t\tIJavaSearchScope scope, \t\t\tfinal MethodNameMatchRequestor nameRequestor)", "diff": ["-\t}", "-\tpublic void searchAllMethodNames(", "-\t\t\tString declaringSimpleName,", "-\t\t\tfinal int declSimpleNameMatchRule,", "-\t\t\tString methodName,", "-\t\t\tfinal int methodMatchRule,", "-\t\t\tIJavaSearchScope scope,", "-\t\t\tfinal MethodNameMatchRequestor nameRequestor) {", "-\t\tsearchAllMethodNames(", "-\t\t\t\tnull, SearchPattern.R_EXACT_MATCH, ", "-\t\t\t\tnull, SearchPattern.R_EXACT_MATCH, ", "-\t\t\t\tdeclaringSimpleName, declSimpleNameMatchRule, ", "-\t\t\t\tmethodName, methodMatchRule, ", "-\t\t\t\tscope, nameRequestor);", "-\t}", "+\tpublic void searchAllMethodNames(", "+\t\t\tString qualifier,", "+\t\t\tfinal int qualifierMatchRule,", "+\t\t\tString methodName,", "+\t\t\tfinal int methodMatchRule,", "+\t\t\tIJavaSearchScope scope,", "+\t\t\tfinal MethodNameMatchRequestor nameRequestor) {", "+\t\ttry {", "+\t\t\tnew SearchEngine(this.workingCopies).searchAllMethodNames(", "+\t\t\t\t\tqualifier != null ? qualifier.toCharArray() : null, qualifierMatchRule, ", "+\t\t\t\t\tmethodName != null ? methodName.toCharArray() : null, methodMatchRule, ", "+\t\t\t\t\tscope, nameRequestor, ", "+\t\t\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, ", "+\t\t\t\t\tnull);", "+\t\t} catch (JavaModelException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\t", "+\t}"]}], "num": 69860}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4232a74ae88b0082443c568eb3e96071", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "608a315139ca9549158b1c3c046a3bd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "e788af814a64e70ab3a9cd6cb10f201dff372018", "commitAfterChange": "c945180bdb2eaecff5db76edf8cbad26f61754a5", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tprivate void acceptPendingPolyArguments(final BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "signatureAfterChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "diff": ["-\tprivate void acceptPendingPolyArguments(final BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs) {", "+\tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs) {", "-\t\tSubstitution substitution = new Substitution() {", "+\t\tSubstitution substitution = getResultSubstitution(acceptedResult);", "+\t\tfor (int i = 0; i < this.invocationArguments.length; i++) {", "+\t\t\tTypeBinding targetType = getParameter(parameterTypes, i, isVarArgs);", "+\t\t\tif (!targetType.isProperType(true))", "+\t\t\t\ttargetType = Scope.substitute(substitution, targetType);", "+\t\t\tthis.invocationArguments[i].checkAgainstFinalTargetType(targetType);", "+\t\t}", "+\t}", "-\t\t\t\t\treturn acceptedResult.getInstantiation((InferenceVariable) typeVariable);", "-\t\tfor (int i = 0; i < this.invocationArguments.length; i++) {", "-\t\t\tTypeBinding targetType = getParameter(parameterTypes, i, isVarArgs);", "-\t\t\tif (!targetType.isProperType(true))", "-\t\t\t\ttargetType = Scope.substitute(substitution, targetType);", "-\t\t\tthis.invocationArguments[i].checkAgainstFinalTargetType(targetType);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c654e74ee8a0303eb853b24c82f382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e0224da700606ee4894293f10b71bd4b6b9d30f5", "commitAfterChange": "3cdc40c3e141f1d38e6828b30530d087867619a9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding capture(Scope scope, int position)", "signatureAfterChange": " \tpublic TypeBinding capture(Scope scope, int position)", "diff": ["+\t\tif ((this.tagBits & TagBits.HasDirectWildcard) == 0) ", "+\t\t\treturn this;", "+\t\t", "-\t\tif ((this.tagBits & TagBits.HasDirectWildcard) != 0) {", "-\t\t\tint length = originalArguments.length;", "-\t\t\tcapturedArguments = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeBinding argument = originalArguments[i];", "-\t\t\t\tif (argument.kind() == Binding.WILDCARD_TYPE) {", "-\t\t\t\t\tcapturedArguments[i] = ", "-\t\t\t\t\t\tnew CaptureBinding(", "-\t\t\t\t\t\t\t\t(WildcardBinding) argument, ", "-\t\t\t\t\t\t\t\tscope.enclosingSourceType().outermostEnclosingType(),", "-\t\t\t\t\t\t\t\tposition);", "-\t\t\t\t} else {", "-\t\t\t\t\tcapturedArguments[i] = argument;", "-\t\t\t\t}", "+\t\tint length = originalArguments.length;", "+\t\tcapturedArguments = new TypeBinding[length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding argument = originalArguments[i];", "+\t\t\tif (argument.kind() == Binding.WILDCARD_TYPE) {", "+\t\t\t\tcapturedArguments[i] = ", "+\t\t\t\t\tnew CaptureBinding(", "+\t\t\t\t\t\t\t(WildcardBinding) argument, ", "+\t\t\t\t\t\t\tscope.enclosingSourceType().outermostEnclosingType(),", "+\t\t\t\t\t\t\tposition);", "+\t\t\t} else {", "+\t\t\t\tcapturedArguments[i] = argument;", "-\t\t\treturn this.environment.createParameterizedType(this.type, capturedArguments, enclosingType());", "+\t\t\tParameterizedTypeBinding capturedParameterizedType = this.environment.createParameterizedType(this.type, capturedArguments, enclosingType());", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeBinding argument = capturedArguments[i];", "+\t\t\t\tif (argument.isCapture()) {", "+\t\t\t\t\t((CaptureBinding)argument).initializeBounds(capturedParameterizedType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn capturedParameterizedType;"]}], "num": 35130}
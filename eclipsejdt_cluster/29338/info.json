{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aaa6fdbeac977225112ddfd4d0dfa4f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ff4035ec4025435ef6bd2bef342e7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 234, "signatureBeforeChange": " public void optimizeBranch(int oldPosition, BranchLabel lbl)", "signatureAfterChange": " public void optimizeBranch(int oldPosition, BranchLabel lbl)", "diff": ["-\tif (lbl.forwardReferenceCount() > 0) {", "-\t\tStackMapFrame frame = this.frames;", "-\t\tloop: while (frame != null) {", "-\t\t\tif (frame.pc == oldPosition) {", "-\t\t\t\tframe.pc = this.position;", "-\t\t\t\tif (frame.prevFrame.pc == this.position) {", "-\t\t\t\t\t// remove the current frame", "-\t\t\t\t\tStackMapFrame prev = frame.prevFrame;", "-\t\t\t\t\tframe.prevFrame = null;", "-\t\t\t\t\tprev.nextFrame = null;", "-\t\t\t\t\tthis.frames = prev;", "-\t\t\t\t}", "-\t\t\t\tbreak loop;", "+\tint frameIndex = this.frames.size() - 1;", "+\tloop: while(frameIndex > 0) {", "+\t\tStackMapFrame frame = (StackMapFrame) this.frames.get(frameIndex);", "+\t\tif (frame.pc == oldPosition) {", "+\t\t\tif (this.framePositions.remove(new Integer(oldPosition))) {", "+\t\t\t\tthis.framePositions.add(new Integer(this.position));", "-\t\t}", "-\t} else {", "-\t\tStackMapFrame frame = this.frames;", "-\t\tloop: while (frame != null) {", "-\t\t\tif (frame.pc == oldPosition) {", "-\t\t\t\tif ((frame.tagBits & StackMapFrame.USED) != 0) {", "-\t\t\t\t\tframe.pc = this.position;", "-\t\t\t\t\tif (frame.prevFrame.pc == this.position) {", "-\t\t\t\t\t\t// remove the current frame", "-\t\t\t\t\t\tStackMapFrame prev = frame.prevFrame;", "-\t\t\t\t\t\tframe.prevFrame = null;", "-\t\t\t\t\t\tprev.nextFrame = null;", "-\t\t\t\t\t\tthis.frames = prev;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// we completely remove this entry if the prevFrame has the same position", "-\t\t\t\t\tStackMapFrame prev = frame.prevFrame;", "-\t\t\t\t\tframe.prevFrame = null;", "-\t\t\t\t\tprev.nextFrame = null;", "-\t\t\t\t\tthis.frames = prev;", "-\t\t\t\t}", "-\t\t\t\tbreak loop;", "+\t\t\tif (this.variablesModificationsPositions.remove(new Integer(oldPosition))) {", "+\t\t\t\tthis.variablesModificationsPositions.add(new Integer(this.position));", "+\t\t\tframe.pc = this.position;", "+\t\t\tStackMapFrame previousFrame = (StackMapFrame) this.frames.get(frameIndex - 1);", "+\t\t\tif (previousFrame.pc == this.position) {", "+\t\t\t\t// remove the current frame", "+\t\t\t\tthis.frames.set(frameIndex - 1, frame);", "+\t\t\t\tthis.frames.remove(frameIndex);", "+\t\t\t}", "+\t\t\tbreak loop;", "+\t\t} else if (frame.pc > oldPosition) {", "+\t\t\treturn;", "+\t\tframeIndex--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fecda3d91b39462a3600d127bdaf977", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void optimizeBranch(int oldPosition, BranchLabel lbl)", "signatureAfterChange": " public void optimizeBranch(int oldPosition, BranchLabel lbl)", "diff": ["-    super.optimizeBranch(oldPosition, lbl);", "-    int frameIndex = this.frames.size() - 1;", "-    loop: while(frameIndex > 0) {", "-        StackMapFrame frame = (StackMapFrame) this.frames.get(frameIndex);", "-        if (frame.pc == oldPosition) {", "-            if (this.framePositions.remove(new Integer(oldPosition))) {", "-                this.framePositions.add(new Integer(this.position));", "-            }", "-            if (this.variablesModificationsPositions.remove(new Integer(oldPosition))) {", "-                this.variablesModificationsPositions.add(new Integer(this.position));", "-            }", "-            frame.pc = this.position;", "-            StackMapFrame previousFrame = (StackMapFrame) this.frames.get(frameIndex - 1);", "-            if (previousFrame.pc == this.position) {", "-                // remove the current frame", "-                this.frames.set(frameIndex - 1, frame);", "-                this.frames.remove(frameIndex);", "-            }", "-            break loop;", "-        } else if (frame.pc > oldPosition) {", "-            return;", "-        }", "-        frameIndex--;", "-    }", "+\tsuper.optimizeBranch(oldPosition, lbl);", "+\tthis.removeFramePosition(oldPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3fcdd5aaaaace001cd575b71a1196f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "deab97e9d6d46862931efe9ba2f1c6c782f191e3", "commitAfterChange": "5da4e2969d847b90ef5747fa353d6487a9be6c2a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\tif (this.left instanceof FunctionalExpression) {", "-\t\t\t\t\tif (this.left instanceof LambdaExpression) {", "-\t\t\t\t\t\t// cf. NegativeLambdaExpressionTest.test412453()", "-\t\t\t\t\t\tLambdaExpression copy = ((LambdaExpression) this.left).getResolvedCopyForInferenceTargeting(this.right);", "-\t\t\t\t\t\treturn (copy.resolvedType != null && copy.resolvedType.isValidBinding()) ? TRUE : FALSE;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn this.left.isCompatibleWith(this.right, inferenceContext.scope) ? TRUE : FALSE;", "-\t\t\t\t}", "-\t\t\t\treturn FALSE;", "+\t\t\t\t// if we get here for some kinds of poly expressions (incl. ConditionalExpression),", "+\t\t\t\t// then other ways for checking compatibility are needed:", "+                if (this.left instanceof FunctionalExpression) {", "+                    if (this.left instanceof LambdaExpression) {", "+                        // cf. NegativeLambdaExpressionTest.test412453()", "+                        LambdaExpression copy = ((LambdaExpression) this.left).getResolvedCopyForInferenceTargeting(this.right);", "+                        return (copy.resolvedType != null && copy.resolvedType.isValidBinding()) ? TRUE : FALSE;", "+                    }", "+                }", "+                return this.left.isCompatibleWith(this.right, inferenceContext.scope) ? TRUE : FALSE;"]}], "num": 29338}
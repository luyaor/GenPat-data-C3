{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f64ec4fe2b3c85ffd2e4c5357394877", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bb5d0e5bdc36af7780be88cd1680de3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "129a0fdcad6de1451195255103919e9d6d33a6f9", "commitAfterChange": "249c2c9c8c9aca09e2b3964862d01be8145898d4", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tpublic static boolean isReferencedBy(IJavaElement element, IMarker marker) throws CoreException", "signatureAfterChange": "\r \tpublic static boolean isReferencedBy(IJavaElement element, IMarker marker) throws CoreException", "diff": ["-\t\tif (element instanceof IMember)\r", "-\t\t\telement = ((IMember) element).getClassFile();\r", "-\t\t\t\r", "+\t\t// only match units or classfiles\r", "+\t\tif (element instanceof IMember){\r", "+\t\t\tIMember member = (IMember) element;\r", "+\t\t\tif (member.isBinary()){\r", "+\t\t\t\telement = member.getClassFile();\r", "+\t\t\t} else {\r", "+\t\t\t\telement = member.getCompilationUnit();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (element == null) return false;\t\t\t\r", "+\r", "-\t\tif (markerElement == null) return false;\r", "-\t\t\r", "-\t\treturn element.equals(markerElement); // external elements may still be equal with different handleIDs.\r", "+\t\twhile (markerElement != null){\r", "+\t\t\tif (element.equals(markerElement)) return true; // external elements may still be equal with different handleIDs.\r", "+\t\t\t\r", "+\t\t\t// cycle through enclosing types in case marker is associated with a classfile (15568)\r", "+\t\t\tif (markerElement instanceof IClassFile){\r", "+\t\t\t\tIType enclosingType = ((IClassFile)markerElement).getType().getDeclaringType();\r", "+\t\t\t\tif (enclosingType != null){\r", "+\t\t\t\t\tmarkerElement = enclosingType.getClassFile(); // retry with immediate enclosing classfile\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "902f3696a9be64c8e694d970e77ff7d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "129a0fdcad6de1451195255103919e9d6d33a6f9", "commitAfterChange": "249c2c9c8c9aca09e2b3964862d01be8145898d4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tpublic static boolean isReferencedBy(IJavaElement element, IMarkerDelta markerDelta) throws CoreException", "signatureAfterChange": "\r \tpublic static boolean isReferencedBy(IJavaElement element, IMarkerDelta markerDelta) throws CoreException", "diff": ["-\t\tif (element instanceof IMember)\r", "-\t\t\telement = ((IMember) element).getClassFile();\r", "-\r", "+\t\t// only match units or classfiles\r", "+\t\tif (element instanceof IMember){\r", "+\t\t\tIMember member = (IMember) element;\r", "+\t\t\tif (member.isBinary()){\r", "+\t\t\t\telement = member.getClassFile();\r", "+\t\t\t} else {\r", "+\t\t\t\telement = member.getCompilationUnit();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (element == null) return false;\t\t\t\r", "+\r", "-\t\tif (markerElement == null) return false;\r", "-\t\t\r", "-\t\treturn element.equals(markerElement); // external elements may still be equal with different handleIDs.\r", "+\t\twhile (markerElement != null){\r", "+\t\t\tif (element.equals(markerElement)) return true; // external elements may still be equal with different handleIDs.\r", "+\t\t\t\r", "+\t\t\t// cycle through enclosing types in case marker is associated with a classfile (15568)\r", "+\t\t\tif (markerElement instanceof IClassFile){\r", "+\t\t\t\tIType enclosingType = ((IClassFile)markerElement).getType().getDeclaringType();\r", "+\t\t\t\tif (enclosingType != null){\r", "+\t\t\t\t\tmarkerElement = enclosingType.getClassFile(); // retry with immediate enclosing classfile\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn false;\r", "+\r"]}], "num": 2911}
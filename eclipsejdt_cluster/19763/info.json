{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6a4dc12d597988ec807657ea8102811", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb945381275fc558f28673dcbeebcae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "dc6cfc95d2e4c607e420e7f9e33cff815caf4698", "commitAfterChange": "c9e9c115fe4662fcd1932f07ade61e766dd0ea6b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "diff": ["+\t\tif (searchPattern.focus != null) {", "+\t\t\tthis.currentPossibleMatch = new PossibleMatch(this, searchPattern.focus.getResource(), null);", "+\t\t\ttry {", "+\t\t\t\tthis.report(-1, -2, searchPattern.focus, IJavaSearchResultCollector.EXACT_MATCH);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tif (e instanceof JavaModelException) {", "+\t\t\t\t\tthrow (JavaModelException) e;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t\t", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec25def373ce2abc1e8782a7182a9c41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void search(IWorkspace workspace, String patternString, int searchFor, int limitTo, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "signatureAfterChange": " \tpublic void search(IWorkspace workspace, String patternString, int searchFor, int limitTo, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "diff": ["-\t\tsearch(workspace, createSearchPattern(patternString, searchFor, limitTo, true), scope, resultCollector);", "+\t\ttry {", "+\t\t\tint matchMode = patternString.indexOf('*') != -1 || patternString.indexOf('?') != -1", "+\t\t\t\t? SearchPattern.R_PATTERN_MATCH", "+\t\t\t\t: SearchPattern.R_EXACT_MATCH;", "+\t\t\tsearch(", "+\t\t\t\tSearchPattern.createPattern(patternString, searchFor, limitTo, matchMode, true), ", "+\t\t\t\tnew SearchParticipant[] {getDefaultSearchParticipant()}, ", "+\t\t\t\tscope, ", "+\t\t\t\tnew ResultCollectorAdapter(resultCollector), ", "+\t\t\t\tresultCollector.getProgressMonitor());", "+\t\t} catch (CoreException e) {", "+\t\t\tif (e instanceof JavaModelException) {", "+\t\t\t\tthrow (JavaModelException) e;", "+\t\t\t} else {", "+\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t}", "+\t\t}"]}], "num": 19763}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7545cfe7ec443ce57a063ae7bad6ed26", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f7e36754bf12634e39fc2d14123a6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "309be04a155363e9f398875d6734d13ff5334b6c", "commitAfterChange": "6b58c2063066f4462a27490669b336c2263fae86", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected int matchLevel(ImportReference importRef)", "signatureAfterChange": "  protected int matchLevel(ImportReference importRef)", "diff": ["-\tif (this.pattern.qualification != null) {", "+\tif (this.pattern.qualification == null) {", "+\t\tif (this.pattern.simpleName == null) return ACCURATE_MATCH;", "-\t\tchar[] patternName = this.pattern.simpleName == null", "+\t\tfor (int i = 0, length = tokens.length; i < length; i++)", "+\t\t\tif (matchesName(this.pattern.simpleName, tokens[i])) return ACCURATE_MATCH;", "+\t} else {", "+\t\tchar[][] tokens = importRef.tokens;", "+\t\tchar[] qualifiedPattern = this.pattern.simpleName == null", "-\t\t\t\tif (CharOperation.prefixEquals(patternName, qualifiedTypeName, this.isCaseSensitive)) return POSSIBLE_MATCH;", "+\t\t\t\tif (CharOperation.prefixEquals(qualifiedPattern, qualifiedTypeName, this.isCaseSensitive)) return POSSIBLE_MATCH;", "-\t\t\t\tif (CharOperation.match(patternName, qualifiedTypeName, this.isCaseSensitive)) return POSSIBLE_MATCH;", "+\t\t\t\tif (CharOperation.match(qualifiedPattern, qualifiedTypeName, this.isCaseSensitive)) return POSSIBLE_MATCH;", "-\t} else {", "-\t\tif (this.pattern.simpleName == null) return ACCURATE_MATCH;", "-\t\tchar[][] tokens = importRef.tokens;", "-\t\tfor (int i = 0, length = tokens.length; i < length; i++)", "-\t\t\tif (matchesName(this.pattern.simpleName, tokens[i])) return ACCURATE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eace26bf3aeee71f1aba0fce8a9e62d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "9170036b60b531a506b4ffe0efeda8e18d918bef", "commitAfterChange": "f8aee71b6b129d09f997301cd8500148a6feb325", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected int matchLevel(ImportReference importRef)", "signatureAfterChange": "  protected int matchLevel(ImportReference importRef)", "diff": ["+\t\tif (qualifiedPattern == null) return ACCURATE_MATCH; // null is as if it was \"*\"", "+\t\tif (qualifiedTypeName == null) return IMPOSSIBLE_MATCH; // cannot match null name", "+\t\tif (qualifiedTypeName.length == 0) { // empty name", "+\t\t\tif (qualifiedPattern.length == 0) { // can only matches empty pattern", "+\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t}", "+\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t}", "+\t\tboolean matchFirstChar = !this.isCaseSensitive || (qualifiedPattern[0] == qualifiedTypeName[0]);", "+\t\tif (this.isCamelCase && matchFirstChar && CharOperation.camelCaseMatch(qualifiedPattern, qualifiedTypeName)) {", "+\t\t\treturn POSSIBLE_CAMELCASE_MATCH;", "+\t\t}", "-\t\t\tcase SearchPattern.R_EXACT_MATCH :", "-\t\t\tcase SearchPattern.R_PREFIX_MATCH :", "-\t\t\t\tif (CharOperation.prefixEquals(qualifiedPattern, qualifiedTypeName, this.isCaseSensitive)) return POSSIBLE_MATCH;", "+\t\t\tcase SearchPattern.R_EXACT_MATCH:", "+\t\t\t\tif (this.isCamelCase) break;", "+\t\t\tcase SearchPattern.R_PREFIX_MATCH:", "+\t\t\t\tif (CharOperation.prefixEquals(qualifiedPattern, qualifiedTypeName, this.isCaseSensitive)) {", "+\t\t\t\t\treturn POSSIBLE_PREFIX_MATCH;", "+\t\t\t\t}", "+", "-\t\t\t\tif (CharOperation.match(qualifiedPattern, qualifiedTypeName, this.isCaseSensitive)) return POSSIBLE_MATCH;", "+\t\t\t\tif (CharOperation.match(qualifiedPattern, qualifiedTypeName, this.isCaseSensitive)) {", "+\t\t\t\t\treturn POSSIBLE_MATCH;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+", "+\t\t\tcase SearchPattern.R_REGEXP_MATCH :", "+\t\t\t\t// TODO (frederic) implement regular expression match"]}], "num": 2141}
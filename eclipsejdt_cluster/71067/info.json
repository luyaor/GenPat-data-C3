{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "503033e80d42e41ea27565ffe87a9620", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef463cbdbc6e109a44f146362adf714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public final void addLocalType(TypeDeclaration localType)", "signatureAfterChange": " public final void addLocalType(TypeDeclaration localType)", "diff": ["+\t", "+\t// See comment in addAnonymousType.", "+\tMethodScope methodScope = methodScope();", "+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tif (!lambda.scope.isStatic) {", "+\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t}", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf58db3f42c7909b6c98f9824214944", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java", "commitBeforeChange": "4ec3d8941998f287d44af5beff0b7f8ef9d972cc", "commitAfterChange": "b1cdfe3ee438c0a38b27b1a4134346d549384d6a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-// TODO find exceptions thrown by the lambda's body, see 18.2.5 bullet 5", "-//\t\t\t\t((LambdaExpression)this.left).", "-//\t\t\t\tInferenceContext18.missingImplementation(\"NYI\");", "+\t\t\tLambdaExpression lambda = ((LambdaExpression) this.left).getResolvedCopyForInferenceTargeting(this.right);", "+\t\t\tSet<TypeBinding> ePrimeSet = lambda.getThrownExceptions();", "+\t\t\tePrime = ePrimeSet.toArray(new TypeBinding[ePrimeSet.size()]);"]}], "num": 71067}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bb87046f0aac793cb37f88b8594b45d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634f51700de268c9c4cca31b91f8e3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 48, "signatureBeforeChange": " protected void consumeSingleMemberAnnotation()", "signatureAfterChange": "  protected void consumeSingleMemberAnnotation()", "diff": ["+", "-\t// this is always an Annotation", "-\tAnnotation annotation = (Annotation) expressionStack[expressionPtr];", "-\tthis.patternLocator.match(annotation, nodeSet);", "+\tif (this.patternFineGrain == 0 || (this.patternFineGrain & IJavaSearchConstants.ANNOTATION_TYPE_REFERENCE) != 0) {", "+\t\t// this is always an Annotation", "+\t\tAnnotation annotation = (Annotation) this.expressionStack[this.expressionPtr];", "+\t\tthis.patternLocator.match(annotation, this.nodeSet);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bc59b34bba7e375acdfc628694e7b1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException", "signatureAfterChange": " protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedClassContainer, boolean shouldReportSuper) throws CoreException", "diff": ["-protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedClassContainer) throws CoreException {", "+}", "+protected void reportMatchingSuper(TypeReference superReference, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedClassContainer, boolean shouldReportSuper) throws CoreException {", "-\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\t\t\tif (this.patternFineGrain == 0 || ((this.patternFineGrain & IJavaSearchConstants.PARAMETERIZED_TYPE_REFERENCE) != 0)) {", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\t\t\t}", "-\t} else {", "+\t} else if (encloses(enclosingElement)) {", "-\t\tif (level != null && matchedClassContainer)", "+\t\tif (level != null && matchedClassContainer&& shouldReportSuper)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b2cc46f11d0a581f940952d724e49f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "3c02a6af2c4b681d96ee9d070d231fb04b85b5fd", "commitAfterChange": "78cdf23ec3b25cdd688a05f0ebd856906ff8208f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\t\t// TODO (kent) tag method in verifier if it overrides a method which can cause an anonymous error", "-\t\t\tif (match.hasSubstitutedParameters()) return null; // cannot be picked up as an exact match", "+\t\t\t// cannot be picked up as an exact match if its a possible anonymous case", "+\t\t\tif (match.hasSubstitutedParameters() && this.arguments != null && this.arguments.length > 1) return null;", "-", "-\t\tif (foundNothing) {", "+\t", "+\t\tif (foundNothing && (this.arguments == null || this.arguments.length <= 1)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2e2a31420e4bcd6be3f938775bdd212", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["-\t\tif (level != null && matchedContainer) {", "+\t\tif (level != null && matchedContainer && (this.patternFineGrain == 0 || (this.patternFineGrain & IJavaSearchConstants.ANNOTATION_TYPE_REFERENCE) != 0)) {", "-\t\t\tif (level != null && enclosesElement) {", "+\t\t\tif (level != null && enclosesElement && this.patternFineGrain == 0) {", "-\t\t\t} else {", "+\t\t\t} else if (this.patternFineGrain == 0) {"]}], "num": 1488}
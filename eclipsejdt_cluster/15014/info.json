{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea59fe21dc494f6396f2bda26d7adea5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10942c52bcf7f4a43690e11e8ba15b3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "cbb53b020eb8f2caef12392ab027078e6626eb25", "commitAfterChange": "cc0d1948b06806e38be7c9e3b2ad032475b51c9c", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 68, "signatureBeforeChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "signatureAfterChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "diff": ["- */", "+}", "-\t\tint length;", "-\t\tlength = 0;", "-\t\tbytes = new byte[SIZE];", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tif(bytes.length == length) {", "-\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "-\t\t\t}", "-\t\t\tbytes[length++]=(byte)b;", "-\t\t}", "-\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "-\t\tif(length > 0) {", "+\t\tbytes = readUntil(input, SEPARATOR1);", "+\t\tif(bytes.length > 0) {", "-\t\tlength = 0;", "-\t\tbytes = new byte[SIZE];", "-\t\tdo {", "-\t\t\tb = (byte)input.read();", "-\t\t\t", "-\t\t\tif(bytes.length == length) {", "-\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "+\t\t{", "+\t\t\tbytes = readUntil(input, SEPARATOR1);", "+\t\t\tbyte[] missing;", "+\t\t\tint j = 0;", "+\t\t\tint length = bytes.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tb = bytes[i];", "+\t\t\t\tif(b == SEPARATOR2) {", "+\t\t\t\t\tmissing = new byte[i - j];", "+\t\t\t\t\tSystem.arraycopy(bytes, j, missing, 0, i - j);", "+\t\t\t\t\ttypeHierarchy.missingTypes.add(new String(missing));", "+\t\t\t\t\tj = i + 1;", "+\t\t\t\t}", "-\t", "-\t\t\tif(b == SEPARATOR1 || b == SEPARATOR2) {", "-\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);;", "-\t\t\t\ttypeHierarchy.missingTypes.add(new String(bytes));", "-\t\t\t\tlength = 0;", "-\t\t\t} else {", "-\t\t\t\tbytes[length++] = b;", "-\t\t\t}", "-\t\t} while(b != SEPARATOR1);", "-", "-\t\t", "+\t\t\tSystem.arraycopy(bytes, j, missing = new byte[length - j], 0, length - j);", "+\t\t\ttypeHierarchy.missingTypes.add(new String(missing));", "+\t\t}", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 1;", "-\t\t\tbytes[0]=(byte)b;", "-\t\t\t", "-\t\t\t// read type memento", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR4){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1 && b != -1) {", "+\t\t\tbytes = readUntil(input, SEPARATOR4, 1);", "+\t\t\tbytes[0] = b;", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 0;", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR4){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "-\t\t\t", "+\t\t\tbytes = readUntil(input, SEPARATOR4);", "-\t\t\t", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 1;", "-\t\t\tbytes[0]=(byte)b;", "-\t\t\t", "-\t\t\t// read type", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR3){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1 && b != -1) {", "+\t\t\tbytes = readUntil(input, SEPARATOR3, 1);", "+\t\t\tbytes[0] = b;", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 0;", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR1){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\t\tbytes = readUntil(input, SEPARATOR1);", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 1;", "-\t\t\tbytes[0]=(byte)b;", "-\t\t\t", "-\t\t\t// read type", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR3){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1 && b != -1) {", "+\t\t\tbytes = readUntil(input, SEPARATOR3, 1);", "+\t\t\tbytes[0] = b;", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 0;", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR1){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\t\tbytes = readUntil(input, SEPARATOR1);", "+\t\tif(b == -1) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatus.ERROR));", "+\t\t}", "-\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatus.ERROR));", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d618b2dac67dd8885a1b470f6a9d0711", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "b74a7b82d9221b86893a88ea5453e92534ffe51b", "commitAfterChange": "1b2fefdcba6fae8f70ea49e17ba1e528ac24b968", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void acceptType(char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, int modifiers, AccessRestriction accessRestriction)", "signatureAfterChange": " \t\t \t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["+\t\t", "+\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access) {", "+\t\t\tif (enclosingTypeNames != null && enclosingTypeNames.length > 0) return;", "+\t\t\t", "+\t\t\tif (!this.importCachesNodeInitialized) initializeImportNodeCaches();", "+\t\t\t", "+\t\t\tchar[] fullyQualifiedTypeName = CharOperation.concat(packageName, simpleTypeName, '.');", "+\t\t\t", "+\t\t\tfor (int i = 0; i < this.importsNodeCacheCount; i++) {", "+\t\t\t\tchar[][] importName = this.importsNodeCache[i];", "+\t\t\t\tif (CharOperation.equals(importName[0], simpleTypeName)) {", "+\t\t\t\t\t", "+\t\t\t\t\tif(CharOperation.equals(importName[1], fullyQualifiedTypeName)) {", "+\t\t\t\t\t\tsuper.acceptType(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, access);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tfor (int i = 0; i < this.onDemandImportsNodeCacheCount; i++) {", "+\t\t\t\tchar[][] importName = this.onDemandImportsNodeCache[i].tokens;", "+\t\t\t\tchar[] importFlatName = CharOperation.concatWith(importName, '.');", "+\t\t\t\t", "+\t\t\t\tif (CharOperation.equals(importFlatName, packageName)) {", "+\t\t\t\t\t", "+\t\t\t\t\tthis.onDemandFound.put(simpleTypeName, simpleTypeName);", "+\t\t\t\t\tsuper.acceptType(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, access);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t", "+\t\t\tthis.notImportedFound.add(new AcceptedType(modifiers, packageName, simpleTypeName, path, access));", "+\t\t}"]}], "num": 15014}
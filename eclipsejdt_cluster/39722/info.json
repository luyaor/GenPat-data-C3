{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b400bf9a1b9b1c0dcc5b7b31e8bc62d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94cb8592c15c157ff3fef5f410a8e129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "ccba397e4e9d73802c009a4349e321c86584df94", "commitAfterChange": "cec508cecafb7942c9eac67dcd1f12c464401c60", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": "\r \r private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\tString qualifiedBinaryFileName = qualifiedTypeName + \".class\"; //$NON-NLS-1$\r", "-\tString binaryFileName = qualifiedBinaryFileName;\r", "-\tString qualifiedPackageName =  \"\"; //$NON-NLS-1$\r", "+\tString qBinaryFileName = qualifiedTypeName + \".class\"; //$NON-NLS-1$\r", "+\tString binaryFileName = qBinaryFileName;\r", "+\tString qPackageName =  \"\"; //$NON-NLS-1$\r", "-\t\tint typeNameStart = qualifiedBinaryFileName.length() - typeName.length - 6; // size of \".class\"\r", "-\t\tqualifiedPackageName =  qualifiedBinaryFileName.substring(0, typeNameStart - 1);\r", "-\t\tbinaryFileName = qualifiedBinaryFileName.substring(typeNameStart);\r", "+\t\tint typeNameStart = qBinaryFileName.length() - typeName.length - 6; // size of \".class\"\r", "+\t\tqPackageName =  qBinaryFileName.substring(0, typeNameStart - 1);\r", "+\t\tbinaryFileName = qBinaryFileName.substring(typeNameStart);\r", "-\tfor (int i = 0, length = classpathLocations.length; i < length; i++) {\r", "-\t\tNameEnvironmentAnswer answer = classpathLocations[i].findClass(binaryFileName, qualifiedPackageName, qualifiedBinaryFileName);\r", "+\r", "+\tif (sourceLocations != null && sourceLocations[0].isPackage(qPackageName)) { // looks in common output folder\r", "+\t\tif (additionalSourceFilenames != null) {\r", "+\t\t\tString qSourceFileName = qualifiedTypeName + \".java\"; //$NON-NLS-1$\r", "+\t\t\tfor (int i = 0, length = sourceLocations.length; i < length; i++) {\r", "+\t\t\t\tNameEnvironmentAnswer answer =\r", "+\t\t\t\t\tsourceLocations[i].findSourceFile(qSourceFileName, qPackageName, typeName, additionalSourceFilenames);\r", "+\t\t\t\tif (answer != null) return answer;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tNameEnvironmentAnswer answer = sourceLocations[0].findClass(binaryFileName, qPackageName, qBinaryFileName);\r", "+\t\tif (answer != null) return answer;\r", "+\t}\r", "+\tfor (int i = 0, length = binaryLocations.length; i < length; i++) {\r", "+\t\tNameEnvironmentAnswer answer = binaryLocations[i].findClass(binaryFileName, qPackageName, qBinaryFileName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7844e3e3888df3d15cbef1b6d07a296", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": "  private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\t\tfor (int i = 0, length = initialTypeNames.length; i < length; i++) {", "+\t\tfor (int i = 0, l = initialTypeNames.length; i < l; i++) {", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\tif (additionalUnits != null && sourceLocations.length > 0) {", "+\t\t// if an additional source file is waiting to be compiled, answer it BUT not if this is a secondary type search", "+\t\t// if we answer X.java & it no longer defines Y then the binary type looking for Y will think the class path is wrong", "+\t\t// let the recompile loop fix up dependents when the secondary type Y has been deleted from X.java", "+\t\tIPath qSourceFilePath = new Path(qualifiedTypeName + \".java\"); //$NON-NLS-1$", "+\t\tint qSegmentCount = qSourceFilePath.segmentCount();", "+\t\tnext : for (int i = 0, l = additionalUnits.length; i < l; i++) {", "+\t\t\tSourceFile additionalUnit = additionalUnits[i];", "+\t\t\tIPath fullPath = additionalUnit.resource.getFullPath();", "+\t\t\tint prefixCount = additionalUnit.sourceLocation.sourceFolder.getFullPath().segmentCount();", "+\t\t\tif (qSegmentCount == fullPath.segmentCount() - prefixCount) {", "+\t\t\t\tfor (int j = 0; j < qSegmentCount; j++)", "+\t\t\t\t\tif (!qSourceFilePath.segment(j).equals(fullPath.segment(j + prefixCount)))", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\treturn new NameEnvironmentAnswer(additionalUnit);", "-\tif (sourceLocations != null && sourceLocations[0].isPackage(qPackageName)) { // looks in common output folder", "-\t\tif (additionalSourceFilenames != null) {", "-\t\t\tString qSourceFileName = qualifiedTypeName + \".java\"; //$NON-NLS-1$", "-\t\t\tfor (int i = 0, length = sourceLocations.length; i < length; i++) {", "-\t\t\t\tNameEnvironmentAnswer answer =", "-\t\t\t\t\tsourceLocations[i].findSourceFile(qSourceFileName, qPackageName, typeName, additionalSourceFilenames);", "-\t\t\t\tif (answer != null) return answer;", "-\t\t\t}", "-\t\t}", "-\t\tNameEnvironmentAnswer answer = sourceLocations[0].findClass(binaryFileName, qPackageName, qBinaryFileName);", "-\t\tif (answer != null) return answer;", "-\t}", "-\tfor (int i = 0, length = binaryLocations.length; i < length; i++) {", "+\t// NOTE: the output folders are added at the beginning of the binaryLocations", "+\tfor (int i = 0, l = binaryLocations.length; i < l; i++) {"]}], "num": 39722}
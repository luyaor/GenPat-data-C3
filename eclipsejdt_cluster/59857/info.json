{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a11d63d7f61f2c73bc3b5a019c58903", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1009f1db2ddc5fc6c3b77fc3519c9a5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "b04af732a3a47936a23fd763b0f1a266fe2c010f", "commitAfterChange": "675036893efc507eeb48fc7f8ec7970945121ebd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public TypeDeclaration getTypeDeclaration(String name)", "signatureAfterChange": "     public TypeDeclaration getTypeDeclaration(String name)", "diff": ["-    \t//First check cache", "-    \tTypeDeclaration result = _typeCache.get(name);", "-    \tif (result != null) return result;", "-    \tif (_typeCache.containsKey(name)) {", "-    \t\t// We've seen this before, and it doesn't exist", "-    \t\treturn null;", "-    \t}", "-", "-\t\t// first see if it is one of the well known types.", "-\t\t// any AST is as good as the other.\t\t", "-\t\tCompilationUnit[] asts = getAsts();", "-\t\t", "-\t\tif( asts != null && asts.length > 0) {", "-\t\t\ttypeBinding = asts[0].getAST().resolveWellKnownType(name);", "-", "-\t\t\tif(typeBinding == null){", "-\t\t\t\t// then look into the current compilation units\t\t\t", "-\t\t\t\tASTNode node = null;", "-\t\t\t\tString typeKey = BindingKey.createTypeBindingKey(name);", "-\t\t\t\tfor (int i=0, len=asts.length;i<len;i++) {", "-\t\t\t\t\tnode = asts[i].findDeclaringNode(typeKey);", "-\t\t\t\t\t\t\t", "-\t\t\t\t\tif( node != null ){", "-\t\t\t\t\t\tfinal int nodeType = node.getNodeType();", "-\t\t\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "-\t\t\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "-\t\t\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "-\t\t\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\ttry {", "+\t\t\ttypeBinding = getTypeDefinitionBindingFromName(name);", "+\t\t}", "+\t\tcatch (ArrayIndexOutOfBoundsException e) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947", "+\t\t\t// if the name is invalid, JDT can throw an ArrayIndexOutOfBoundsException", "+\t\t\t// We'll ignore this and return null to the user", "+\t\t\tAptPlugin.log(e, \"Unable to get type definition binding for: \" + name); //$NON-NLS-1$", "-\t\t// finally go search for it in the universe.", "-\t\tif (typeBinding == null) {", "-\t\t\ttry {", "-\t\t\t\ttypeBinding = getTypeDefinitionBindingFromName(name);", "-\t\t\t}", "-\t\t\tcatch (ArrayIndexOutOfBoundsException e) {", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=133947", "-\t\t\t\t// if the name is invalid, JDT can throw an ArrayIndexOutOfBoundsException", "-\t\t\t\t// We'll ignore this and return null to the user", "-\t\t\t\tAptPlugin.log(e, \"Unable to get type definition binding for: \" + name); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tresult = Factory.createReferenceType(typeBinding, this);", "-    \t", "-    \t// update cache, nulls included", "-    \t_typeCache.put(name, result);", "-    \treturn result;", "+    \treturn Factory.createReferenceType(typeBinding, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec4325e32b602f8e55bd3d9d1ce2f5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "458dca4c2b9da6278d150eba84339274fccc6057", "commitAfterChange": "01d995488d5e309c6b243da146c63894a6df881d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "signatureAfterChange": "     protected CompilationUnit[] getAsts()", "diff": ["-    private TypeDeclaration getTypeDeclarationInBatch(String name)", "-    {\t", "-    \tif( name == null || _astRoots == null ) return null;", "-\t\t// get rid of the generics parts.", "-\t\tfinal int index = name.indexOf('<');", "-\t\tif( index != -1 )", "-\t\t\tname = name.substring(0, index);", "-\t\t", "-\t\t// first see if it is one of the well known types.", "-\t\t// any AST is as good as the other.", "-\t\tITypeBinding typeBinding = null;", "-\t\tString typeKey = BindingKey.createTypeBindingKey(name);", "-\t\tif( _astRoots.length > 0 ){", "-\t\t\t_astRoots[0].getAST().resolveWellKnownType(name);", "-\t\t\t", "-\t\t\tif(typeBinding == null){", "-\t\t\t\t// then look into the current compilation units\t\t\t", "-\t\t\t\tASTNode node = null;", "-\t\t\t\tfor( int i=0, len=_astRoots.length; i<len; i++ )", "-\t\t\t\t\tnode = _astRoots[i].findDeclaringNode(typeKey);\t\t\t", "-\t\t\t\tif( node != null ){", "-\t\t\t\t\tfinal int nodeType = node.getNodeType();", "-\t\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "-\t\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "-\t\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "-\t\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif( typeBinding != null )", "-\t\t\t\treturn Factory.createReferenceType(typeBinding, this);", "-\t\t}", "-", "-\t\t// finally go search for it in the universe.", "-\t\ttypeBinding = getTypeDefinitionBindingFromName(name);", "-\t\tif( typeBinding != null ){\t\t\t", "-\t\t\treturn Factory.createReferenceType(typeBinding, this);", "-\t\t}", "-", "-\t\treturn null;", "-    }  ", "+    // Called by getTypeDeclaration(). allows the searching of all asts, not just the current one.", "+    protected CompilationUnit[] getAsts() {", "+    \tif (_astRoots != null) return _astRoots;", "+    \treturn super.getAsts();", "+    }"]}], "num": 59857}
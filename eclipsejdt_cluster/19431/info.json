{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ec1b7233a1a4ca8b587ad74723ac236", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c22b255eb807be72a6aaffba485034e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "dead6a3867ba962f651fba3cb95e7139a59158e3", "commitAfterChange": "2c262bb049c7c4afe17af25384f399520f404e78", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["+\t\t// only collect for method type parameters", "+\t\tif (!(this.declaringElement instanceof MethodBinding)) return;", "-\t        int length = variableSubstitutes.length;", "-\t        for (int i = 0; i < length; i++) {", "-\t        \tTypeBinding substitute = variableSubstitutes[i];", "-\t            if (substitute == otherType) return; // already there", "-\t            if (substitute == null) {", "-\t                variableSubstitutes[i] = otherType;", "-\t                return;", "-\t            }", "-\t        }", "-\t        // no free spot found, need to grow", "-\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "-\t        variableSubstitutes[length] = otherType;", "-\t        substitutes.put(this, variableSubstitutes);", "+\t\t    insertLoop: {", "+\t\t        int length = variableSubstitutes.length;", "+\t\t        for (int i = 0; i < length; i++) {", "+\t\t        \tTypeBinding substitute = variableSubstitutes[i];", "+\t\t            if (substitute == otherType) return; // already there", "+\t\t            if (substitute == null) {", "+\t\t                variableSubstitutes[i] = otherType;", "+\t\t                break insertLoop;", "+\t\t            }", "+\t\t        }", "+\t\t        // no free spot found, need to grow", "+\t\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "+\t\t        variableSubstitutes[length] = otherType;", "+\t\t        substitutes.put(this, variableSubstitutes);", "+\t\t    }", "+\t    // recurse in variable bounds (82187)", "+\t    if (this.superclass != null && this.firstBound == this.superclass) {", "+\t    \tthis.superclass.collectSubstitutes(otherType, substitutes);", "+\t    }", "+\t   \tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+\t   \t\tthis.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "+\t   \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9be44dcc8ff0c590ed33b709b3ed09e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint) {", "+\t\t", "+\t\t//\tonly infer for type params of the generic method", "+\t\tif (this.declaringElement != inferenceContext.genericMethod) return;", "-\t    TypeBinding[][] variableSubstitutes = (TypeBinding[][])substitutes.get(this);", "-\t    if (variableSubstitutes != null) {", "-\t\t    insertLoop: {", "-\t\t    \tTypeBinding[] constraintSubstitutes = variableSubstitutes[variableConstraint];", "-\t\t    \tint length;", "-\t\t    \tif (constraintSubstitutes == null) {", "-\t\t    \t\tlength = 0;", "-\t\t    \t\tconstraintSubstitutes = new TypeBinding[1];", "-\t\t    \t} else {", "-\t\t    \t\tlength = constraintSubstitutes.length;", "-\t\t\t        for (int i = 0; i < length; i++) {", "-\t\t\t        \tTypeBinding substitute = constraintSubstitutes[i];", "-\t\t\t            if (substitute == actualType) return; // already there", "-\t\t\t            if (substitute == null) {", "-\t\t\t                constraintSubstitutes[i] = actualType;", "-\t\t\t                break insertLoop;", "-\t\t\t            }", "-\t\t\t        }", "-\t\t\t        // no free spot found, need to grow by one", "-\t\t\t        System.arraycopy(constraintSubstitutes, 0, constraintSubstitutes = new TypeBinding[length+1], 0, length);", "-\t\t    \t}", "-\t\t        constraintSubstitutes[length] = actualType;", "-\t\t        variableSubstitutes[variableConstraint] = constraintSubstitutes;", "-\t\t    }", "-\t    }", "+\t\tinferenceContext.recordSubstitute(this, actualType, variableConstraint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7a03d5c894c9e92178976ca1159713", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t\t", "+\t", "+\t\tif (otherType.isBaseType()) {", "+\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(otherType);", "+\t\t\tif (boxedType == otherType) return;", "+\t\t\totherType = boxedType;", "+\t\t}", "-\t    TypeBinding[] variableSubstitutes = (TypeBinding[])substitutes.get(this);", "+\t\t// reverse constraint, to reflect variable on rhs:   A << T --> T >: A", "+\t\tint variableConstraint;", "+\t\tswitch(constraint) {", "+\t\t\tcase CONSTRAINT_EQUAL :", "+\t\t\t\tvariableConstraint = CONSTRAINT_EQUAL;", "+\t\t\t\tbreak;", "+\t\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\t\tvariableConstraint = CONSTRAINT_SUPER;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t//case CONSTRAINT_SUPER :", "+\t\t\t\tvariableConstraint = CONSTRAINT_EXTENDS;", "+\t\t\t\tbreak;", "+\t\t}", "+\t    TypeBinding[][] variableSubstitutes = (TypeBinding[][])substitutes.get(this);", "-\t\t        int length = variableSubstitutes.length;", "-\t\t        for (int i = 0; i < length; i++) {", "-\t\t        \tTypeBinding substitute = variableSubstitutes[i];", "-\t\t            if (substitute == otherType) return; // already there", "-\t\t            if (substitute == null) {", "-\t\t                variableSubstitutes[i] = otherType;", "-\t\t                break insertLoop;", "-\t\t            }", "-\t\t        }", "-\t\t        // no free spot found, need to grow", "-\t\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "-\t\t        variableSubstitutes[length] = otherType;", "-\t\t        substitutes.put(this, variableSubstitutes);", "+\t\t    \tTypeBinding[] constraintSubstitutes = variableSubstitutes[variableConstraint];", "+\t\t    \tint length;", "+\t\t    \tif (constraintSubstitutes == null) {", "+\t\t    \t\tlength = 0;", "+\t\t    \t\tconstraintSubstitutes = new TypeBinding[1];", "+\t\t    \t} else {", "+\t\t    \t\tlength = constraintSubstitutes.length;", "+\t\t\t        for (int i = 0; i < length; i++) {", "+\t\t\t        \tTypeBinding substitute = constraintSubstitutes[i];", "+\t\t\t            if (substitute == otherType) return; // already there", "+\t\t\t            if (substitute == null) {", "+\t\t\t                constraintSubstitutes[i] = otherType;", "+\t\t\t                break insertLoop;", "+\t\t\t            }", "+\t\t\t        }", "+\t\t\t        // no free spot found, need to grow", "+\t\t\t        System.arraycopy(constraintSubstitutes, 0, constraintSubstitutes = new TypeBinding[2*length], 0, length);", "+\t\t    \t}", "+\t\t        constraintSubstitutes[length] = otherType;", "+\t\t        variableSubstitutes[variableConstraint] = constraintSubstitutes;", "-            // recurse in variable bounds (82187)", "-            if (this.superclass != null && this.firstBound == this.superclass) {", "-                this.superclass.collectSubstitutes(otherType, substitutes);", "-            }", "-            for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-                this.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "-            }"]}], "num": 19431}
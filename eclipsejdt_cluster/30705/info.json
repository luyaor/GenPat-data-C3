{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3a88dab2dce504d9033f907463525ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05991a32e97f6a7a1d9a4f7920bd8e27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "e4a2d2b531fec7e8dfebadf46195d19caa4fd924", "commitAfterChange": "b7872d5f1e96b5357df6dd8bf0aac5fc8ccf3c6d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test003() throws CoreException", "signatureAfterChange": " \tpublic void test003() throws CoreException", "diff": ["-\t */", "-\tpublic void test003() throws CoreException {", "-\t\tICompilationUnit[][] workingCopyBatches = new ICompilationUnit[3][];", "-\t\ttry {", "-\t\t\tworkingCopyBatches[0] = createWorkingCopies(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class X extends Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tworkingCopyBatches[1] = createWorkingCopies(new String[] {});", "-\t\t\tworkingCopyBatches[2] = createWorkingCopies(new String[] {", "-\t\t\t\t\"/P/p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Z {\\n\" +", "-\t\t\t\t\"  Object foo() {\\n\" +", "-\t\t\t\t\"    return new X();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\t", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor(workingCopyBatches);", "-\t\t\tcreateASTs(requestor);", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Z {\\n\" + ", "-\t\t\t\t\"  Object foo(){\\n\" + ", "-\t\t\t\t\"    return new X();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopyBatches);", "-\t\t}", "-\t}", "+\tpublic void test003() throws CoreException {", "+\t\t\tTestASTRequestor requestor = new TestASTRequestor();", "+\t\t\tresolveASTs(workingCopies, requestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf98d0c839d3e60aec4848df8a504154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BatchASTCreationTests.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test003() throws CoreException", "signatureAfterChange": " \tpublic void test003() throws CoreException", "diff": ["-\t */", "-\tpublic void test003() throws CoreException {", "-\t\tICompilationUnit[][] workingCopyBatches = new ICompilationUnit[3][];", "-\t\ttry {", "-\t\t\tworkingCopyBatches[0] = createWorkingCopies(new String[] {", "-\t\t\t\t\"/P/p1/X.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class X extends Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\t\"/P/p1/Y.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Y {\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\tworkingCopyBatches[1] = createWorkingCopies(new String[] {});", "-\t\t\tworkingCopyBatches[2] = createWorkingCopies(new String[] {", "-\t\t\t\t\"/P/p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" +", "-\t\t\t\t\"public class Z {\\n\" +", "-\t\t\t\t\"  Object foo() {\\n\" +", "-\t\t\t\t\"    return new X();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t});", "-\t\t\t", "-\t\t\tTestASTRequestor requestor = new TestASTRequestor(workingCopyBatches);", "-\t\t\tcreateASTs(requestor);", "-\t\t\tassertASTNodesEqual(", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class X extends Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Y {\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"public class Z {\\n\" + ", "-\t\t\t\t\"  Object foo(){\\n\" + ", "-\t\t\t\t\"    return new X();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\",", "-\t\t\t\trequestor.asts", "-\t\t\t);", "-\t\t} finally {", "-\t\t\tdiscardWorkingCopies(workingCopyBatches);", "-\t\t}", "-\t}", "+\tpublic void test003() throws CoreException {", "+\t\t\tTestASTRequestor requestor = new TestASTRequestor();", "+\t\t\tresolveASTs(workingCopies, requestor);"]}], "num": 30705}
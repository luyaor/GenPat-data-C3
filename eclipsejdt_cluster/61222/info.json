{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09ce45ce70bf6f7c509c5c15c492d67e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b07ac1e8382f5e3ecdbc43f54e82569", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "commitAfterChange": "a460dab1d90a50493c5778c6266a2505ebe8bca6", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t\t\tIPath projectPath = getProject().getFullPath();", "-\t\t\t\t\tElement cpeElement = (Element) node;", "-\t", "-\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "-\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "-\t\t\t\t\t// ensure path is absolute", "-\t\t\t\t\tIPath path = new Path(pathStr);", "-\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "-\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "-\t\t\t\t\t\tpath = projectPath.append(path);", "-\t\t\t\t\t}", "-\t\t\t\t\t// source attachment info (optional)", "-\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "-\t\t\t\t\tIPath sourceAttachmentPath =", "-\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "-\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "-\t\t\t\t\tIPath sourceAttachmentRootPath =", "-\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "-\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "-\t\t\t\t\t", "-\t\t\t\t\t// exported flag (optional)", "-\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\t\t\t\t// exclusion patterns (optional)", "-\t\t\t\t\tString exclusion = cpeElement.getAttribute(\"excluding\"); //$NON-NLS-1$ ", "-\t\t\t\t\tIPath[] exclusionPatterns = ClasspathEntry.NO_EXCLUSION_PATTERNS;", "-\t\t\t\t\tif (!exclusion.equals(\"\")) { //$NON-NLS-1$ ", "-\t\t\t\t\t\tchar[][] patterns = CharOperation.splitOn('|', exclusion.toCharArray());", "-\t\t\t\t\t\tint patternCount;", "-\t\t\t\t\t\tif ((patternCount  = patterns.length) > 0) {", "-\t\t\t\t\t\t\texclusionPatterns = new IPath[patternCount];", "-\t\t\t\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "-\t\t\t\t\t\t\t\texclusionPatterns[j] = new Path(new String(patterns[j]));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// recreate the CP entry", "-\t\t\t\t\tswitch (kind) {", "-\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "-\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "-\t\t\t\t\t\t\tString projSegment = path.segment(0);", "-\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "-\t\t\t\t\t\t\t\t// this project", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path, exclusionPatterns));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// another project", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "-\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "-\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "-\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "-\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\tbreak;", "-", "-\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "-\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "-\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "-\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "-\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\tClasspathEntry.NO_EXCLUSION_PATTERNS, ", "-\t\t\t\t\t\t\t\t\tnull, // source attachment", "-\t\t\t\t\t\t\t\t\tnull, // source attachment root", "-\t\t\t\t\t\t\t\t\tfalse));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this);", "+\t\t\t\t\tif (entry != null) paths.add(entry);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1e813aaeda94375cdc05ad34c5a74b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c0a0c19db3e1c410023eabce30626d520ce59204", "commitAfterChange": "b522a66d284b0239a056370560676a12fc9ec458", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r \tprotected IClasspathEntry[] readPaths(String xmlClasspath) throws IOException", "signatureAfterChange": "\r \tprotected IClasspathEntry[] readPaths(String xmlClasspath) throws IOException", "diff": ["-\t\tIPath projectPath= getProject().getFullPath();\r", "+\r", "+\t\tIPath projectPath = getProject().getFullPath();\r", "+\r", "-\t\t\tDocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\r", "+\t\t\tDocumentBuilder parser =\r", "+\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();\r", "-\t\t} catch(SAXException e) {\r", "+\t\t} catch (SAXException e) {\r", "-\t\t} catch(ParserConfigurationException e){\r", "+\t\t} catch (ParserConfigurationException e) {\r", "+\r", "-\t\tNodeList list= cpElement.getChildNodes();\r", "-\t\tVector paths= new Vector();\r", "-\t\tint length= list.getLength();\r", "-\t\tfor (int i= 0; i < length; ++i) {\r", "-\t\t\tNode node= list.item(i);\r", "-\t\t\tshort type= node.getNodeType();\r", "+\t\tNodeList list = cpElement.getChildNodes();\r", "+\t\tVector paths = new Vector();\r", "+\t\tint length = list.getLength();\r", "+\r", "+\t\tfor (int i = 0; i < length; ++i) {\r", "+\t\t\tNode node = list.item(i);\r", "+\t\t\tshort type = node.getNodeType();\r", "-\t\t\t\tElement cpeElement= (Element) node;\r", "-\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) { //$NON-NLS-1$\r", "+\t\t\t\tElement cpeElement = (Element) node;\r", "+\r", "+\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) {\r", "+\t\t\t\t\t//$NON-NLS-1$\r", "-\t\t\t\t\tIPath path= new Path(pathStr);\r", "-\t\t\t\t\tint kind= kindFromString(cpeElementKind);\r", "+\t\t\t\t\tIPath path = new Path(pathStr);\r", "+\t\t\t\t\tint kind = kindFromString(cpeElementKind);\r", "-\t\t\t\t\t\tpath= projectPath.append(path);\r", "+\t\t\t\t\t\tpath = projectPath.append(path);\r", "-\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\"); //$NON-NLS-1$\r", "-\t\t\t\t\tIPath sourceAttachmentPath = sourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$\r", "+\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$\r", "+\t\t\t\t\tIPath sourceAttachmentPath =\r", "+\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$\r", "-\t\t\t\t\tIPath sourceAttachmentRootPath = sourceAttachmentRootPathStr.equals(\"\") ? null : new Path(sourceAttachmentRootPathStr); //$NON-NLS-1$\r", "+\t\t\t\t\tIPath sourceAttachmentRootPath =\r", "+\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t? null\r", "+\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);\r", "-\t\t\t\t\tIClasspathEntry entry= createClasspathEntry(path, kind, sourceAttachmentPath, sourceAttachmentRootPath);\r", "-\t\t\t\t\tif (entry == null) return null;\r", "-\t\t\t\t\tpaths.addElement(entry);\r", "+\t\t\t\t\t// exported flag\r", "+\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "+\r", "+\t\t\t\t\t// recreate the CP entry\r", "+\t\t\t\t\tswitch (kind) {\r", "+\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\tpaths.addElement(JavaCore.newProjectEntry(path, isExported));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\tpaths.addElement(JavaCore.newLibraryEntry(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\t// must be an entry in this project or specify another project\r", "+\t\t\t\t\t\t\tString projSegment = path.segment(0);\r", "+\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {\r", "+\t\t\t\t\t\t\t\t// this project\r", "+\t\t\t\t\t\t\t\tpaths.addElement(JavaCore.newSourceEntry(path));\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t// another project\r", "+\t\t\t\t\t\t\t\tpaths.addElement(JavaCore.newProjectEntry(path, isExported));\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :\r", "+\t\t\t\t\t\t\tpaths.addElement(JavaCore.newVariableEntry(\r", "+\t\t\t\t\t\t\t\t\tpath,\r", "+\t\t\t\t\t\t\t\t\tsourceAttachmentPath,\r", "+\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, \r", "+\t\t\t\t\t\t\t\t\tisExported));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :\r", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;\r", "+\t\t\t\t\t\t\tpaths.addElement(new ClasspathEntry(\r", "+\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,\r", "+\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,\r", "+\t\t\t\t\t\t\t\t\tpath,\r", "+\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\tfalse));\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "-\t\t\tIClasspathEntry[] ips= new IClasspathEntry[paths.size()];\r", "+\t\t\tIClasspathEntry[] ips = new IClasspathEntry[paths.size()];\r"]}], "num": 61222}
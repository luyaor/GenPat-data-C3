{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aacb9fb6abf370bed6a32b6d2fffcc60", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d767f2c20619fd432e4d66b001b95f26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "119ab5f40e72a2e48985fa6b9f7f154cd8ab7391", "commitAfterChange": "8f964ebcfbbe015096db590c4a751ad5a6ca4f58", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+\t\t\t\t} else if (castedExpressionType == NullBinding){", "+\t\t\t\t\tcontinue; // tolerate null argument cast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e883555b1893aabb3051f92030e01fbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b7ff59a9f7a88f8cdef6546bff0e33b8f3b09f28", "commitAfterChange": "47dd59c8b6e7cd0a363f5c7a3e5323d2ab0e6afe", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, List invocations)", "diff": ["+\t\t\t} else if (invocation.isRawType()) {", "+\t\t\t\treturn invocation; // raw type is taking precedence"]}], "num": 4265}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9350617135a275904c8cf60158c10423", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c45a907273830ac99d61d23aa57951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic void handleLineTooLong()", "signatureAfterChange": "  \tpublic void handleLineTooLong()", "diff": ["-\t\tboolean insideMessageArguments = false;", "-\t\tboolean insideMessageSend = false;", "+\t\tint insideMessage = 0;", "+\t\tboolean insideStringConcat = false;", "-\t\t\t\t((insideMessageArguments || insideMessageSend) && targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS", "-\t\t\t\t\t\t&& (!targetAlignment.wasReset() || previousKind != Alignment.MESSAGE_SEND));", "+\t\t\t\t(!insideStringConcat &&", "+\t\t\t\t\t\tinsideMessage > 0 && targetAlignment.kind == Alignment.MESSAGE_ARGUMENTS &&", "+\t\t\t\t\t\t(!targetAlignment.wasReset() || previousKind != Alignment.MESSAGE_SEND));", "-\t\t\t\t\tinsideMessageArguments = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tinsideMessageSend = true;", "+\t\t\t\t\tinsideMessage++;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Alignment.STRING_CONCATENATION:", "+\t\t\t\t\tinsideStringConcat = true;", "+\t\t\t\t\tif (insideStringConcat) throw alignmentException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b328d54bb9a59a9c977cdb9a57f086de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExtendedStringLiteral.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic String toStringExpression()", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-\tpublic String toStringExpression() {", "+\tpublic StringBuffer printExpression(int indent, StringBuffer output) {", "-\t\tString str = \"ExtendedStringLiteral{\" + new String(source) + \"}\";\t//$NON-NLS-2$ //$NON-NLS-1$", "-\t\treturn str;", "+\t\treturn output.append(\"ExtendedStringLiteral{\").append(source).append('}'); //$NON-NLS-1$"]}], "num": 13306}
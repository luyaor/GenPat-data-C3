{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ef3ff050adea9337a865716fd6610d4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a36ebc55d26575dcc4c9658f1e415ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "signatureAfterChange": "  public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, boolean equalParameters)", "diff": ["-public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl) {", "+public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, boolean equalParameters) {", "-    boolean duplicateErasure = false;", "-    if ((method.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "-        // chech it occurs in parameters (the bit is set for return type | params | thrown exceptions", "-        for (int i = 0, length = method.parameters.length; i < length; i++) {", "-            if ((method.parameters[i].tagBits & TagBits.HasTypeVariable) != 0) {", "-                duplicateErasure = true;", "-                break;", "-            }", "-        }", "-    }", "-    if (duplicateErasure) {", "+    if (equalParameters) {", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateMethod,", "+\t\t\tnew String[] {", "+\t\t        new String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+    } else {", "-\t\t\tmethodDecl.sourceStart,", "-\t\t\tmethodDecl.sourceEnd);", "-    } else {", "-\t\tthis.handle(", "-\t\t\tIProblem.DuplicateMethod,", "-\t\t\tnew String[] {", "-\t\t        new String(methodDecl.selector),", "-\t\t\t\tnew String(method.declaringClass.readableName()),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)},", "-\t\t\tnew String[] {", "-\t\t\t\tnew String(methodDecl.selector),", "-\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da4be9efd143245d094c4087e47ea2ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public TypeBinding[] inferElidedTypes(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final BlockScope scope)", "signatureAfterChange": "  public TypeBinding[] inferElidedTypes(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final Scope scope)", "diff": ["-public TypeBinding[] inferElidedTypes(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final BlockScope scope) {", "+", "+public TypeBinding[] inferElidedTypes(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final Scope scope) {", "-\t\t// this is our last chance to inspect the result of the inference that is connected to the throw-away factory binding", "-\t\tInferenceContext18 infCtx18 = getInferenceContext(genericFactory);", "-\t\tif (infCtx18 != null && infCtx18.stepCompleted == InferenceContext18.BINDINGS_UPDATED) {", "-\t\t\t// refresh argumentTypes from updated bindings in arguments:", "-\t\t\t// (this shouldn't be strictly necessary, as FunctionExpression.isCompatibleWith() should give the same result,", "-\t\t\t//  but it's probably be a good idea to avoid the necessity to call isCompatibleWith() in the first place). ", "-\t\t\tfor (int i = 0; i < argumentTyps.length; i++) {", "-\t\t\t\tif (argumentTyps[i] instanceof PolyTypeBinding)", "-\t\t\t\t\targumentTyps[i] = this.arguments[i].resolvedType;", "-\t\t\t}", "-\t\t}"]}], "num": 68226}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c5c176565ee2cf86bd0a8e9d28a6f71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d52c1501451507ff220896f9603957c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1c3298c6e059e091058be85e5c193be4f3e2bb5c", "commitAfterChange": "1604c4cb884aee860a1cc5ef654a628a5e36afd0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "signatureAfterChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows JavaModelException", "diff": ["-\tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName,", "+\tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName,", "-\t\tthrows CoreException, JavaModelException", "+\t\tthrows JavaModelException", "-\t\tIJavaProject jp = parentCompilationUnit.getJavaProject();", "-", "-\t\t//", "-\t\t// create folder for generated source files", "-\t\t//", "-\t\tensureGeneratedSourceFolder( jp, progressMonitor );", "-\t\tIPackageFragmentRoot root = jp.getPackageFragmentRoot(folder);", "-\t\tIPackageFragment pkgFragment = ", "-\t\t\troot.createPackageFragment( pkgName, true, null );", "-\t\t", "+\t\tIPackageFragmentRoot root = _javaProject.getPackageFragmentRoot(folder);", "+\t\tIPackageFragment pkgFragment = \troot.getPackageFragment(pkgName );", "-\t\tif ( cu == null || ! cu.getResource().exists() )", "-\t\t{", "-\t\t    cu = pkgFragment.createCompilationUnit(", "-\t\t\t    fname, contents, true, progressMonitor );", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\tmakeReadOnly( cu, false );", "-\t\t}", "-\t\t", "-\t\t//  TODO:  can we call getWorkingCopy here?", "+\t\t// BecomeWorkingCopyOperation shouldn't take any resource locks to run, so we should be thread-safe here", "+\t\t//  update working copy", "+\t\t//", "+\t\tupdateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "+", "+\t\t", "+\t\t//", "-\t\taddEntryToWorkingCopyMaps( parentCompilationUnit, workingCopy );", "+\t\taddEntryToWorkingCopyMaps( parentFile, workingCopy );", "-\t\t// we save this here since the resource has to exist on disk", "-\t\tworkingCopy.commitWorkingCopy( true, progressMonitor );", "-\t\t", "-\t\t//", "-\t\t// make the file derived so that it is not checked into source control.", "-\t\t//", "-\t\tmakeDerived( workingCopy );", "-\t\t", "-\t\t//", "-\t\t// make working copy read-only", "-\t\t//", "-\t\tmakeReadOnly( workingCopy, true );", "-", "-\t\treturn workingCopy;", "-\t\t", "+\t\treturn workingCopy;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "941f96174596fafc86ec7a07fc4f756a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "f08e2fcfb74b9a513988b6c92b3d0f1c94eb6ecf", "commitAfterChange": "c35e0ba6a6bce7272fb4c8d0b339e50b59e7d2a3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void toStringInfo(int tab, StringBuffer buffer, Object info)", "signatureAfterChange": " protected void toStringInfo(int tab, StringBuffer buffer, Object info)", "diff": ["+\t\ttoStringParameters(buffer);", "+\t\ttoStringParameters(buffer);", "-\t\t\tbuffer.append('(');", "-\t\t\tString[] paramTypes = this.parameterTypes;", "-\t\t\tint length;", "-\t\t\tif (paramTypes != null && (length = paramTypes.length) > 0) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tbuffer.append(Signature.toString(paramTypes[i]));", "-\t\t\t\t\tif (i < length - 1) {", "-\t\t\t\t\t\tbuffer.append(\", \"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tbuffer.append(')');", "+\t\t\ttoStringParameters(buffer);"]}], "num": 40532}
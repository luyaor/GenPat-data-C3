{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f90768c5e5587abe3e408d95fd80b5bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b41e35f2c4f78cb1c96458adef87cb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "6ca2c17de7d2cf75286045cf5fe4db47b5ffe702", "commitAfterChange": "ec09b25a18c19092cc9fe16e9fc3af2be1689d02", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean generateInfos( \tOpenableElementInfo info, \tIProgressMonitor pm, \tMap newElements, \tIResource underlyingResource)\tthrows JavaModelException", "signatureAfterChange": " protected boolean generateInfos( \tOpenableElementInfo info, \tIProgressMonitor pm, \tMap newElements, \tIResource underlyingResource)\tthrows JavaModelException", "diff": ["-\ttry {", "-\t\tIProject[] projects = this.getWorkspace().getRoot().getProjects();", "-\t\tfor (int i = 0, max = projects.length; i < max; i++) {", "-\t\t\tIProject project = projects[i];", "-\t\t\tif (project.isOpen() && project.hasNature(JavaCore.NATURE_ID)) {", "-\t\t\t\tinfo.addChild(getJavaProject(project));", "-\t\t\t}", "+\tIProject[] projects = this.getWorkspace().getRoot().getProjects();", "+\tfor (int i = 0, max = projects.length; i < max; i++) {", "+\t\tIProject project = projects[i];", "+\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\tinfo.addChild(getJavaProject(project));", "-\t} catch (CoreException e) {", "-\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f49b0a200043ae9d3803d2d46c79f2d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "350354f214ca227e1737fa04a92c132cd3211f35", "commitAfterChange": "e85ca2cada691cc814bdc6ae7f59c48ddbdb7a54", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r \r \tprivate void addPotentialMatch(IResource resource, Openable openable)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r private void addPotentialMatch(PotentialMatch potentialMatch)", "diff": ["-\tprivate void addPotentialMatch(IResource resource, Openable openable)\r", "-\t\tthrows JavaModelException {\r", "-\t\ttry {\r", "-\t\t\tif (this.potentialMatchesLength == this.potentialMatches.length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tthis.potentialMatches,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tthis.potentialMatches = new PotentialMatch[this.potentialMatchesLength * 2],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tthis.potentialMatchesLength);\r", "-\t\t\t}\r", "-\t\t\tPotentialMatch potentialMatch = new PotentialMatch(this, resource, openable);\r", "-\t\t\tif (!this.includesPotentialMatch(potentialMatch)) {\r", "-\t\t\t\tthis.potentialMatches[this.potentialMatchesLength++] = potentialMatch;\r", "-\t\t\t}\r", "-\t\t} catch (AbortCompilation e) {\r", "-\t\t\t// problem with class path: it could not find base classes\r", "-\t\t\tthrow new JavaModelException(\r", "-\t\t\t\te,\r", "-\t\t\t\tIJavaModelStatusConstants.BUILDER_INITIALIZATION_ERROR);\r", "-\t\t}\r", "+}\r", "+private void addPotentialMatch(PotentialMatch potentialMatch) {\r", "+\tif (this.potentialMatchesLength == this.potentialMatches.length) {\r", "+\t\tSystem.arraycopy(\r", "+\t\t\tthis.potentialMatches,\r", "+\t\t\t0,\r", "+\t\t\tthis.potentialMatches = new PotentialMatch[this.potentialMatchesLength * 2],\r", "+\t\t\t0,\r", "+\t\t\tthis.potentialMatchesLength);\r", "+\t}\r", "+\tif (!this.includesPotentialMatch(potentialMatch)) {\r", "+\t\tthis.potentialMatches[this.potentialMatchesLength++] = potentialMatch;\r", "+\t}\r", "+}\r"]}], "num": 5975}
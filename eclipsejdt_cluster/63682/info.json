{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04495d68e61c47e3b153d6e564f13aaa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82d8e4e853d41e018990fdc610bf729a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "44f667842350aefa80632f7ada7f97ba8718496d", "commitAfterChange": "ae74e5c29550b6c950030ea6351d21da8edae8d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(Argument argument, BlockScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(Argument argument, BlockScope scope)", "diff": ["-\t\ttypeDeclaration.binding.resolveTypesFor(binding);", "-\t\tif (argument.binding != null) {", "-\t\t\targument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);", "+\t\tif (binding != null) {", "+\t\t\ttypeDeclaration.binding.resolveTypesFor(binding);", "+\t\t\tif (argument.binding != null) {", "+\t\t\t\targument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59da7b489df31f2fd8b2fb7f7a8f68b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void generateCode(ClassScope classScope, ClassFile enclosingClassFile)", "signatureAfterChange": " \tpublic void generateCode(ClassScope classScope, ClassFile enclosingClassFile)", "diff": ["-\t\tif (hasBeenGenerated)", "-\t\t\treturn;", "-\t\t((NestedTypeBinding) binding).computeSyntheticArgumentsOffset();", "+\t\tif (hasBeenGenerated) return;", "+\t\tif (binding != null) ((NestedTypeBinding) binding).computeSyntheticArgumentSlotSizes();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b8e54ad74739b0353a23fbd0f2ca9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CaseStatement.java", "commitBeforeChange": "45da29fec046b4bab81c695f4ab7b327659ef75f", "commitAfterChange": "a81195ff09b3e00d1785645fd080f14d3c2692cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (constantExpression.constant == NotAConstant)", "-\t\t\tcurrentScope.problemReporter().caseExpressionMustBeConstant(constantExpression);", "-", "-\t\tthis.constantExpression.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (constantExpression != null) {", "+\t\t\tif (constantExpression.constant == NotAConstant) {", "+\t\t\t\tcurrentScope.problemReporter().caseExpressionMustBeConstant(constantExpression);", "+\t\t\t}", "+\t\t\tthis.constantExpression.analyseCode(currentScope, flowContext, flowInfo);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f080414b628a9b9fea2627370610c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "dd0d8de41ff9634977089468dd69785577ba4097", "commitAfterChange": "802c7ac625f347675c393d0da79bae0fe10a00fd", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void resolve(IGenericType suppliedType)", "signatureAfterChange": " public void resolve(IGenericType suppliedType)", "diff": ["-\t\t\tHashSet localTypes = new HashSet();", "-\t\t\tlocalTypes.add(cu.getPath().toString());", "-\t\t\tthis.superTypesOnly = true;", "-\t\t\tresolve(new Openable[] {(Openable)cu}, localTypes, null);", "+\t\t\tif (cu != null) {", "+\t\t\t\tHashSet localTypes = new HashSet();", "+\t\t\t\tlocalTypes.add(cu.getPath().toString());", "+\t\t\t\tthis.superTypesOnly = true;", "+\t\t\t\tresolve(new Openable[] {(Openable)cu}, localTypes, null);", "+\t\t\t}"]}], "num": 63682}
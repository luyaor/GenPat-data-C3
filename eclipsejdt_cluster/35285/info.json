{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c158354ffdfe8059fef129c360bdd499", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a97f5cedfa96803a509690c187e146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "46b62da526fe2a6ffd79b0ba880e83b9b19218e9", "commitAfterChange": "b86d8384eaf8c819d0430387f9f109e2adf4cb49", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \t \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon", "-\t\t    for (int i = 0; i < typeSig.length-1; i++) sig.append(typeSig[i]); // copy all but trailing semicolon", "+\t\t    sig.append(typeSig, 0, typeSig.length-1); // copy all but trailing semicolon"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e623f2d947d57cc257a2118b92243cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "887e85023301ae4623fbf853a36078cfd9120d7a", "commitAfterChange": "b9bd51906a715700072cf746ced64d441415e678", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testMakeReferences() throws IOException, Exception", "signatureAfterChange": " public void testReference() throws IOException, Exception", "diff": ["-public void testMakeReferences() throws IOException, Exception {", "+public void testReference() throws IOException, Exception {", "-\tFile versionFile = new Path(OUTPUT_DIR.getPath()).append(\"version.txt\").toFile();", "-\tOUTPUT_DIR.mkdirs();", "-\tUtil.writeToFile(JDT_CORE_VERSION, versionFile.getAbsolutePath());", "+\tif (this.testIndex == 0) {", "+\t\tFile versionFile = new Path(OUTPUT_DIR.getPath()).append(\"version.txt\").toFile();", "+\t\tOUTPUT_DIR.mkdirs();", "+\t\tUtil.writeToFile(JDT_CORE_VERSION, versionFile.getAbsolutePath());", "+\t}", "-\t// Format each file of the input dir and write the result to the output directory", "-\tassertNotNull(\"We should have got input files from \"+INPUT_DIR, this.inputFiles);", "-\tDefaultCodeFormatter codeFormatter = codeFormatter();", "-\tint length = this.inputFiles.length;", "-\tfor (int i=0; i<length; i++) {", "+\t// Get the source from file", "+\tString source = new String(org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(this.file, null));", "+\ttry {", "+\t\t// Format the source", "+\t\tTextEdit edit = codeFormatter().format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "-\t\t// Get the source from file", "-\t\tString source = new String(org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(this.inputFiles[i], null));", "-", "-\t\ttry {", "-\t\t\t// Format the source", "-\t\t\tTextEdit edit = codeFormatter.format(CodeFormatter.K_COMPILATION_UNIT | CodeFormatter.F_INCLUDE_COMMENTS, source, 0, source.length(), 0, null);", "-", "-\t\t\t// Write the result", "-\t\t\tif (edit != null) {", "-\t\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "-\t\t\t\tString inputPath = this.inputFiles[i].getPath().substring(INPUT_DIR.getPath().length()+1);", "-\t\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "-\t\t\t\twrittenFile.getParentFile().mkdirs();", "-\t\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "-\t\t\t}", "+\t\t// Write the result", "+\t\tif (edit != null) {", "+\t\t\tString formatResult = org.eclipse.jdt.internal.core.util.Util.editedString(source, edit);", "+\t\t\tString inputPath = this.file.getPath().substring(INPUT_DIR.getPath().length()+1);", "+\t\t\tFile writtenFile = new Path(OUTPUT_DIR.getPath()).append(inputPath).toFile();", "+\t\t\twrittenFile.getParentFile().mkdirs();", "+\t\t\tUtil.writeToFile(formatResult, writtenFile.getAbsolutePath());", "-\t\tcatch (Exception ex) {", "-\t\t\t// skip silently", "-\t\t}", "+\t}", "+\tcatch (Exception ex) {", "+\t\t// skip silently"]}], "num": 35285}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "839c36a3b4655ecbb81af2e6e9a3b86e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1488963b5dc8773c5bbb7b3d1c823d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "00ece886ae76136ff484b3f9e45b5285979a4dc3", "commitAfterChange": "8d8694248d86f9da6cd848ecd9eac0f0df6b9357", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static IClasspathEntry newLibraryEntry( \t\tIPath path, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tboolean isExported)", "signatureAfterChange": " \tpublic static IClasspathEntry newLibraryEntry( \t\tIPath path, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tboolean isExported)", "diff": ["-\t\tif (sourceAttachmentPath != null && !sourceAttachmentPath.isAbsolute()) {", "-\t\t\t// TODO: (philippe) should use assertion instead once clients are behaving", "-\t\t\t//Assert.isTrue(false, \"Source attachment path for IClasspathEntry must be absolute\"); //$NON-NLS-1$", "-\t\t\tUtil.log(new IllegalArgumentException(), \"Source attachment path should be absolute: \\\"\" + sourceAttachmentPath.toOSString()+\"\\\"\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\tsourceAttachmentPath = sourceAttachmentPath.makeAbsolute();", "+\t\tif (sourceAttachmentPath != null) {", "+\t\t\tif (sourceAttachmentPath.isEmpty()) {", "+\t\t\t\tsourceAttachmentPath = null; // treat empty path as none", "+\t\t\t} else if (!sourceAttachmentPath.isAbsolute()) {", "+\t\t\t\t// TODO: (philippe) should use assertion instead once clients are behaving", "+\t\t\t\t//Assert.isTrue(false, \"Source attachment path for IClasspathEntry must be absolute\"); //$NON-NLS-1$", "+\t\t\t\tUtil.log(new IllegalArgumentException(), \"Source attachment path should be absolute: \\\"\" + sourceAttachmentPath.toOSString()+\"\\\"\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\tsourceAttachmentPath = sourceAttachmentPath.makeAbsolute();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "472853d54e8a83683024d0c0a36fb2f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "13a2bff8811ff586bab60fddd157d395e6533570", "commitAfterChange": "4e8c06d42dcf2a91f77056993fc995ad49c4f7d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// Propagate the optimized boolean constant if possible", "-\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant", "-\t\t\t\t&& valueIfTrueType == BooleanBinding) {", "-\t\t\t\t", "-\t\t\t\tthis.optimizedBooleanConstant = condConstant.booleanValue()", "-\t\t\t\t\t? valueIfTrue.optimizedBooleanConstant()", "-\t\t\t\t\t: valueIfFalse.optimizedBooleanConstant();", "+\t\t\tif (valueIfTrueType == BooleanBinding) {", "+\t\t\t\tthis.optimizedIfTrueConstant = valueIfTrue.optimizedBooleanConstant();", "+\t\t\t\tthis.optimizedIfFalseConstant = valueIfFalse.optimizedBooleanConstant();", "+\t\t\t", "+\t\t\t\t// Propagate the optimized boolean constant if possible", "+\t\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant) {", "+\t\t\t\t\t", "+\t\t\t\t\tthis.optimizedBooleanConstant = condConstant.booleanValue()", "+\t\t\t\t\t\t? optimizedIfTrueConstant", "+\t\t\t\t\t\t: optimizedIfFalseConstant;", "+\t\t\t\t}"]}], "num": 49493}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fac9c8e3cbfef7d2ebb9f10aed5edb1f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a49b75285d665e553c1f1652b85b1b3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tvoid findMatches(SearchPattern pattern, SearchParticipant[] participants, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tvoid findMatches(SearchPattern pattern, SearchParticipant[] participants, IJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["+\t\tif (participants == null) {", "+\t\t\tif (VERBOSE) Util.verbose(\"No participants => do nothing!\"); //$NON-NLS-1$", "+\t\t\treturn;", "+\t\t}", "-\t\t\tfor (int i = 0, l = participants == null ? 0 : participants.length; i < l; i++) {", "+\t\t\tfor (int i = 0, l = participants.length; i < l; i++) {", "-\t\t\t\t\tpathCollector = null; // release", "-\t\t\t\t\tint indexMatchLength = indexMatchPaths == null ? 0 : indexMatchPaths.length;", "-\t\t\t\t\tSearchDocument[] indexMatches = new SearchDocument[indexMatchLength];", "-\t\t\t\t\tfor (int j = 0; j < indexMatchLength; j++)", "-\t\t\t\t\t\tindexMatches[j] = participant.getDocument(indexMatchPaths[j]);", "-\t\t\t\t\tSearchDocument[] matches = MatchLocator.addWorkingCopies(pattern, indexMatches, getWorkingCopies(), participant);", "-\t\t\t\t\tparticipant.locateMatches(matches, pattern, scope, requestor, subMonitor);", "+\t\t\t\t\tif (indexMatchPaths != null) {", "+\t\t\t\t\t\tpathCollector = null; // release", "+\t\t\t\t\t\tint indexMatchLength = indexMatchPaths.length;", "+\t\t\t\t\t\tSearchDocument[] indexMatches = new SearchDocument[indexMatchLength];", "+\t\t\t\t\t\tfor (int j = 0; j < indexMatchLength; j++) {", "+\t\t\t\t\t\t\tindexMatches[j] = participant.getDocument(indexMatchPaths[j]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tSearchDocument[] matches = MatchLocator.addWorkingCopies(pattern, indexMatches, getWorkingCopies(), participant);", "+\t\t\t\t\t\tparticipant.locateMatches(matches, pattern, scope, requestor, subMonitor);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb523df4b62f67dfd731e9fe39166fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchParticipant.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void locateMatches(SearchDocument[] indexMatches, SearchPattern pattern, \t\t\tIJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic void locateMatches(SearchDocument[] indexMatches, SearchPattern pattern, \t\t\tIJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\t\tthis.workingCopies,", "-\t\t// working copies take precedence over corresponding compilation units", "-\t\tHashMap workingCopyDocuments = workingCopiesThatCanSeeFocus(pattern.focus, pattern.isPolymorphicSearch());", "-\t\tSearchDocument[] matches = null;", "-\t\tint length = indexMatches.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tSearchDocument searchDocument = indexMatches[i];", "-\t\t\tif (searchDocument.getParticipant() == this) {", "-\t\t\t\tSearchDocument workingCopyDocument = (SearchDocument) workingCopyDocuments.remove(searchDocument.getPath());", "-\t\t\t\tif (workingCopyDocument != null) {", "-\t\t\t\t\tif (matches == null) {", "-\t\t\t\t\t\tSystem.arraycopy(indexMatches, 0, matches = new SearchDocument[length], 0, length);", "-\t\t\t\t\t}", "-\t\t\t\t\tmatches[i] = workingCopyDocument;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (matches == null) { // no working copy", "-\t\t\tmatches = indexMatches;", "-\t\t}", "-\t\tint remainingWorkingCopiesSize = workingCopyDocuments.size();", "-\t\tif (remainingWorkingCopiesSize != 0) {", "-\t\t\tSystem.arraycopy(matches, 0, matches = new SearchDocument[length+remainingWorkingCopiesSize], 0, length);", "-\t\t\tIterator iterator = workingCopyDocuments.values().iterator();", "-\t\t\tint index = length;", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tmatches[index++] = (SearchDocument) iterator.next();", "-\t\t\t}", "-\t\t}", "-", "-\t\tmatchLocator.locateMatches(matches);", "+\t\tmatchLocator.locateMatches(indexMatches);"]}], "num": 65676}
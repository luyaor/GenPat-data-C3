{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81db0021ac6f6facc3a9071fa919fcab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16c067524b5a99e8b725f2d3042cd3ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProgrammingProblemsTest.java", "commitBeforeChange": "1aa5cee9e9697e028635f26ba41c923ef65834f6", "commitAfterChange": "3553ae2fde22d1bf8f8672de0126ed2f663e6d31", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void _test0010_declared_thrown_checked_exceptions()", "signatureAfterChange": " public void test0013_declared_thrown_checked_exceptions()", "diff": ["-public void _test0010_declared_thrown_checked_exceptions() {", "-/*\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference, ", "-\t\t\tCompilerOptions.DISABLED); */", "-\t\t\"ERR\" /* expectedCompilerLog */,", "+// @throws disables by default, but only exact matches work", "+public void test0013_declared_thrown_checked_exceptions() {", "+\tMap customOptions = new HashMap();", "+\tcustomOptions.put(CompilerOptions.OPTION_DocCommentSupport, ", "+\t\t\tCompilerOptions.ENABLED);", "+\trunTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"import java.io.IOException;\\n\" + ", "+\t\t\t\"import java.io.EOFException;\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"/** @throws EOFException does not mute warning for IOException **/\\n\" + ", "+\t\t\t\"  public void foo() throws IOException {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\tnull /* errorOptions */,", "+\t\tnew String[] {", "+\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownException", "+\t\t\t} /* warningOptions */,", "+\t\tnull /* ignoreOptions */,", "+\t\tfalse /* expectingCompilerErrors */,", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tpublic void foo() throws IOException {\\n\" + ", "+\t\t\"\t                         ^^^^^^^^^^^\\n\" + ", "+\t\t\"The declared exception IOException is not actually thrown by the method foo() from type X\\n\" + ", "+\t\t\"----------\\n\" /* expectedCompilerLog */,", "+\t\t\"\" /* expectedOutputString */,", "+\t\tfalse /* forceExecution */,", "+\t\tnull /* classLib */,", "+\t\ttrue /* shouldFlushOutputDirectory */, ", "+\t\tnull /* vmArguments */, ", "+\t\tcustomOptions,", "+\t\tnull /* clientRequestor */,", "+\t\ttrue /* skipJavac */);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f131760e8ed70681749c4b9fdac047e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProgrammingProblemsTest.java", "commitBeforeChange": "d0c29ef085aca7621ab6ac19e8de871cbd734495", "commitAfterChange": "c8ca33a12ce5373c4c6bcb65eced790d82bc1944", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test0028_declared_thrown_unchecked_exceptions()", "signatureAfterChange": " public void test0025_declared_thrown_checked_exceptions()", "diff": ["-// reporting unnecessary declaration of thrown unchecked exceptions as warning", "-public void test0028_declared_thrown_unchecked_exceptions() {", "-\tMap customOptions = new HashMap();", "-\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeUncheckedExceptions, ", "-\t\t\tCompilerOptions.ENABLED);", "+// unchecked exceptions", "+public void test0025_declared_thrown_checked_exceptions() {", "+\tMap customOptions = new HashMap();", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable, ", "+\t\t\tCompilerOptions.DISABLED);", "+\trunTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  public void foo() throws Exception {\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\tnull /* errorOptions */,", "+\t\tnew String[] {", "+\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownException", "+\t\t\t} /* warningOptions */,", "+\t\tnull /* ignoreOptions */,", "+\t\tfalse /* expectingCompilerErrors */,", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tpublic void foo() throws Exception {\\n\" + ", "+\t\t\"\t                         ^^^^^^^^^\\n\" + ", "+\t\t\"The declared exception Exception is not actually thrown by the method foo() from type X\\n\" + ", "+\t\t\"----------\\n\" /* expectedCompilerLog */,", "+\t\t\"\" /* expectedOutputString */,", "+\t\tfalse /* forceExecution */,", "+\t\tnull /* classLib */,", "+\t\ttrue /* shouldFlushOutputDirectory */, ", "+\t\tnull /* vmArguments */, ", "+\t\tcustomOptions,", "+\t\tnull /* clientRequestor */,", "+\t\ttrue /* skipJavac */);", "+}"]}], "num": 53966}
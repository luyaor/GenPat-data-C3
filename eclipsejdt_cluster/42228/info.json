{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fd11bdff01ab3a4841ef1026a119416", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec3a7a9d775a7eb736cd74fe17e4691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " public void recursiveConstructorInvocation(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  public void recursiveConstructorInvocation(ExplicitConstructorCall constructorCall)", "diff": ["- */", "-public void recursiveConstructorInvocation(TypeDeclaration typeDeclaration) {", "-\t// propagate the reference count, negative counts means leading to a super constructor invocation (directly or indirectly)", "-\tboolean hasChanged;", "-\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\tint max = methods.length;", "-\tdo {", "-\t\thasChanged = false;", "-\t\tfor(int i = 0; i < max; i++){", "-\t\t\tif (methods[i].isConstructor()){", "-\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) methods[i];", "-\t\t\t\tif (constructor.referenceCount > 0){", "-\t\t\t\t\tConstructorDeclaration targetConstructor = constructor.constructorCall == null", "-\t\t\t\t\t\t? null", "-\t\t\t\t\t\t: (ConstructorDeclaration)(typeDeclaration.declarationOf(constructor.constructorCall.binding));", "-\t\t\t\t\tif ((targetConstructor == null) || (targetConstructor.referenceCount < 0)){", "-\t\t\t\t\t\thasChanged = true;", "-\t\t\t\t\t\tconstructor.referenceCount = -1;", "-\t\t\t\t\t}\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} while (hasChanged);", "+public void recursiveConstructorInvocation(ExplicitConstructorCall constructorCall) {", "-\t// all remaining constructors with a positive count are still involved in a cycle", "-\tfor(int i = 0; i < max; i++){", "-\t\tif (methods[i].isConstructor()){", "-\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) methods[i];", "-\t\t\tif (constructor.referenceCount > 0){", "-\t\t\t\tthis.referenceContext = constructor;", "-\t\t\t\tthis.handle(", "-\t\t\t\t\tIProblem.RecursiveConstructorInvocation,", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(constructor.constructorCall.binding.declaringClass.readableName()), ", "-\t\t\t\t\t\tparametersAsString(constructor.constructorCall.binding)", "-\t\t\t\t\t},", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(constructor.constructorCall.binding.declaringClass.shortReadableName()), ", "-\t\t\t\t\t\tparametersAsShortString(constructor.constructorCall.binding)", "-\t\t\t\t\t},", "-\t\t\t\t\tconstructor.constructorCall.sourceStart,", "-\t\t\t\t\tconstructor.constructorCall.sourceEnd);", "-\t\t\t}", "-\t\t}", "-\t}", "+\tthis.handle(", "+\t\tIProblem.RecursiveConstructorInvocation,", "+\t\tnew String[] {", "+\t\t\tnew String(constructorCall.binding.declaringClass.readableName()), ", "+\t\t\tparametersAsString(constructorCall.binding)", "+\t\t},", "+\t\tnew String[] {", "+\t\t\tnew String(constructorCall.binding.declaringClass.shortReadableName()), ", "+\t\t\tparametersAsShortString(constructorCall.binding)", "+\t\t},", "+\t\tconstructorCall.sourceStart,", "+\t\tconstructorCall.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16e32c31ab4798361f7fa3d7e38947b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "6d3fe5277decae5e3a5511d22405bbe1fbb97924", "commitAfterChange": "5bcc7ea24a8cf84eab4e39ad9a998ea7bce03b7a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (anonymousType == null) { //----------------no anonymous class------------------------\t", "+\t\t", "+\t\tif (enclosingInstance != null) {", "-\t\t\t\tif (receiverType == null) {", "-\t\t\t\t\thasError = true;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (enclosingInstanceContainsCast) {", "+\t\t\t\tif (receiverType != null && enclosingInstanceContainsCast) {", "-\t\t\t\t\t}", "-\t\t\t// will check for null after args are resolved", "-\t\t\tTypeBinding[] argumentTypes = NoParameters;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\targumentTypes = new TypeBinding[length];", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\t\tif (argument instanceof CastExpression) {", "-\t\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\t\t\targsContainCast = true;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\t\thasError = true;", "-\t\t\t\t\t}", "+\t\t} else {", "+\t\t\treceiverType = type.resolveType(scope);", "+\t\t}", "+\t\tif (receiverType == null) {", "+\t\t\thasError = true;", "+\t\t} else if (((ReferenceBinding) receiverType).isFinal() && this.anonymousType != null) {", "+\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "+\t\t\thasError = true;", "+\t\t}", "+", "+\t\t// will check for null after args are resolved", "+\t\tTypeBinding[] argumentTypes = NoParameters;", "+\t\tif (arguments != null) {", "+\t\t\tint length = arguments.length;", "+\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\t\targsContainCast = true;", "+\t\t\t\t}", "+\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\t\thasError = true;", "-\t\t\t// limit of fault-tolerance", "-\t\t\tif (hasError) return receiverType;", "+\t\t}", "+\t\t// limit of fault-tolerance", "+\t\tif (hasError) return this.resolvedType = receiverType;", "+\t\t", "+\t\tif (this.anonymousType == null) {", "+\t\t\t// qualified allocation with no anonymous type", "-\t\t//--------------there is an anonymous type declaration-----------------", "-\t\tif (this.enclosingInstance != null) {", "-\t\t\tif (enclosingInstance instanceof CastExpression) {", "-\t\t\t\tenclosingInstance.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\tenclosingInstanceContainsCast = true;", "-\t\t\t}", "-\t\t\tif ((enclosingInstanceType = this.enclosingInstance.resolveType(scope)) == null) {", "-\t\t\t\thasError = true;", "-\t\t\t} else if (enclosingInstanceType.isBaseType() || enclosingInstanceType.isArrayType()) {", "-\t\t\t\tscope.problemReporter().illegalPrimitiveOrArrayTypeForEnclosingInstance(", "-\t\t\t\t\tenclosingInstanceType,", "-\t\t\t\t\tthis.enclosingInstance);", "-\t\t\t\thasError = true;", "-\t\t\t} else {", "-\t\t\t\treceiverType = ((SingleTypeReference) type).resolveTypeEnclosing(", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) enclosingInstanceType);\t\t\t\t", "-\t\t\t\tif (enclosingInstanceContainsCast) {", "-\t\t\t\t\tCastExpression.checkNeedForEnclosingInstanceCast(scope, enclosingInstance, enclosingInstanceType, receiverType);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\treceiverType = type.resolveType(scope);", "-\t\t}", "-\t\tif (receiverType == null) {", "-\t\t\thasError = true;", "-\t\t} else if (((ReferenceBinding) receiverType).isFinal()) {", "-\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(type, receiverType);", "-\t\t\thasError = true;", "-\t\t}", "-\t\tTypeBinding[] argumentTypes = NoParameters;", "-\t\tif (arguments != null) {", "-\t\t\tint length = arguments.length;", "-\t\t\targumentTypes = new TypeBinding[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\tif (argument instanceof CastExpression) {", "-\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\t\t\t\targsContainCast = true;", "-\t\t\t\t}", "-\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null) {", "-\t\t\t\t\thasError = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// limit of fault-tolerance", "-\t\tif (hasError) {", "-\t\t\treturn this.resolvedType = receiverType;", "-\t\t}", "-", "+\t\t// anonymous type scenario", "-\t\tthis.superTypeBinding =", "-\t\t\treceiverType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) receiverType;", "-\t\tMethodBinding inheritedBinding =", "-\t\t\tscope.getConstructor(this.superTypeBinding, argumentTypes, this);", "+\t\tthis.superTypeBinding = receiverType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) receiverType;", "+\t\t// insert anonymous type in scope", "+\t\tscope.addAnonymousType(this.anonymousType, (ReferenceBinding) receiverType);", "+\t\tthis.anonymousType.resolve(scope);\t\t", "+\t\t", "+\t\t// find anonymous super constructor", "+\t\tMethodBinding inheritedBinding = scope.getConstructor(this.superTypeBinding, argumentTypes, this);", "-\t\t\treturn null;", "+\t\t\treturn this.resolvedType = anonymousType.binding;", "-\t\t\t\treturn null;", "+\t\t\t\treturn this.resolvedType = anonymousType.binding;", "-\t\tscope.addAnonymousType(anonymousType, (ReferenceBinding) receiverType);", "-\t\tanonymousType.resolve(scope);"]}], "num": 42228}
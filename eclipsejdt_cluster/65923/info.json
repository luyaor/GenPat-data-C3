{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "060eeeeb5db87d2997db63f5426b7e9e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b528a449a33e10aece71c08d0fc8dfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "signatureAfterChange": "  \tpublic void computeConstant(BlockScope scope, int leftId, int rightId)", "diff": ["-\t\tif ((left.constant != Constant.NotAConstant)", "-\t\t\t&& (right.constant != Constant.NotAConstant)) {", "+\t\tif ((this.left.constant != Constant.NotAConstant)", "+\t\t\t&& (this.right.constant != Constant.NotAConstant)) {", "-\t\t\t\tconstant =", "+\t\t\t\tthis.constant =", "-\t\t\t\t\t\tleft.constant,", "+\t\t\t\t\t\tthis.left.constant,", "-\t\t\t\t\t\t(bits & OperatorMASK) >> OperatorSHIFT,", "-\t\t\t\t\t\tright.constant,", "+\t\t\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,", "+\t\t\t\t\t\tthis.right.constant,", "-\t\t\t\tconstant = Constant.NotAConstant;", "+\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\tconstant = Constant.NotAConstant;", "+\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\toptimizedBooleanConstant(", "+\t\t\tthis.optimizedBooleanConstant(", "-\t\t\t\t(bits & OperatorMASK) >> OperatorSHIFT,", "+\t\t\t\t(this.bits & OperatorMASK) >> OperatorSHIFT,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92cdd51c04642aca7699854c8620250f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb)", "signatureAfterChange": " public final void computeConstant(TypeBinding leftType, TypeBinding rightType)", "diff": ["-public final void computeConstant(TypeBinding leftTb, TypeBinding rightTb) {", "-\tif ((left.constant != NotAConstant) && (right.constant != NotAConstant)) {", "-\t\tconstant =", "+public final void computeConstant(TypeBinding leftType, TypeBinding rightType) {", "+\tif ((this.left.constant != NotAConstant) && (this.right.constant != NotAConstant)) {", "+\t\tthis.constant =", "-\t\t\t\tleftTb.id,", "+\t\t\t\tleftType.id,", "-\t\t\t\trightTb.id);", "-\t\tif (((bits & OperatorMASK) >> OperatorSHIFT) == NOT_EQUAL)", "+\t\t\t\trightType.id);", "+\t\tif (((this.bits & OperatorMASK) >> OperatorSHIFT) == NOT_EQUAL)", "-\t\tconstant = NotAConstant;", "+\t\tthis.constant = NotAConstant;", "+\t\t// optimization for null == null", "+\t\tif (this.left instanceof NullLiteral && this.right instanceof NullLiteral) {", "+\t\t\tthis.optimizedBooleanConstant = Constant.fromValue(((this.bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL);", "+\t\t}"]}], "num": 65923}
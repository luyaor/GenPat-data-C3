{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7907233da82d7cfe6a258a1621d86b9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fc105a1257d62fb9592d279b97f9ad7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c143533d344835eae9053a7d384648906ed40cff", "commitAfterChange": "6abf8e1881c12c9c3a3eab104c63d4f76b1fb73b", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet alreadyTraversed)", "signatureAfterChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet traversed)", "diff": ["-\t\t\tHashSet alreadyTraversed){", "-\t\t\t\t", "-\t\tprereqChain.add(this);", "+\t\t\tHashSet traversed){", "+", "+\t\tIPath path = this.getPath();", "+\t\tprereqChain.add(path);", "+\t\ttraversed.add(path);", "-\t\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\t\tIResource member = workspaceRoot.findMember(entryPath);", "-\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "-\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)member);", "-\t\t\t\t\t\tint index = cycleParticipants.contains(project) ? 0 : prereqChain.indexOf(project);", "-\t\t\t\t\t\tif (index >= 0) { // refer to cycle, or in cycle itself", "-\t\t\t\t\t\t\tfor (int size = prereqChain.size(); index < size; index++) {", "-\t\t\t\t\t\t\t\tcycleParticipants.add(prereqChain.get(index)); ", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (!alreadyTraversed.contains(project)) {", "-\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, alreadyTraversed);", "+\t\t\t\t\tIPath prereqProjectPath = entry.getPath();", "+\t\t\t\t\tint index = cycleParticipants.contains(prereqProjectPath) ? 0 : prereqChain.indexOf(prereqProjectPath);", "+\t\t\t\t\tif (index >= 0) { // refer to cycle, or in cycle itself", "+\t\t\t\t\t\tfor (int size = prereqChain.size(); index < size; index++) {", "+\t\t\t\t\t\t\tcycleParticipants.add(prereqChain.get(index)); ", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!traversed.contains(prereqProjectPath)) {", "+\t\t\t\t\t\t\tIResource member = workspaceRoot.findMember(prereqProjectPath);", "+\t\t\t\t\t\t\tif (member != null && member.getType() == IResource.PROJECT){", "+\t\t\t\t\t\t\t\tJavaProject project = (JavaProject)JavaCore.create((IProject)member);", "+\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed);", "-\t\tprereqChain.remove(this);", "-\t\talreadyTraversed.add(this);", "+\t\tprereqChain.remove(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82fdfcec89bc2e2ebd5c3a2868224677", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "signatureAfterChange": " \tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta)", "diff": ["+\t */", "+\tprivate void checkProjectsBeingAddedOrRemoved(IResourceDelta delta) {", "+\t\tIResource resource = delta.getResource();", "+\t\tswitch (resource.getType()) {", "+\t\t\tcase IResource.ROOT :", "+\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\tif (this.manager.javaProjectsCache == null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.manager.javaProjectsCache = this.manager.getJavaModel().getJavaProjects();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\t\t\tthis.checkProjectsBeingAddedOrRemoved(children[i]);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IResource.PROJECT :", "+\t\t\t\t// NB: No need to check project's nature as if the project is not a java project:", "+\t\t\t\t//     - if the project is added or changed this is a noop for projectsBeingDeleted", "+\t\t\t\t//     - if the project is closed, it has already lost its java nature", "+\t\t\t\tint deltaKind = delta.getKind();", "+\t\t\t\tif (deltaKind == IResourceDelta.ADDED) {", "+\t\t\t\t\t// remember project and its dependents", "+\t\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+\t\t\t\t\t", "+\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t}", "+", "+\t\t\t\t} else if (deltaKind == IResourceDelta.CHANGED) {", "+\t\t\t\t\tIProject project = (IProject)resource;", "+\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "+\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "+\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\t\tif (project.isOpen()) {", "+\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tjavaProject = (JavaProject)this.manager.getJavaModel().findJavaProject(project);", "+\t\t\t\t\t\t\tif (javaProject != null) {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tjavaProject.close();", "+\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "+\t\t\t\t\t\tboolean wasJavaProject = this.manager.getJavaModel().findJavaProject(project) != null;", "+\t\t\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "+\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "+\t\t\t\t\t\t\t// java nature added or removed: remember  project and its dependents", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\tthis.addToRootsToRefreshWithDependents(javaProject);", "+", "+\t\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\t\t\tif (isJavaProject) {", "+\t\t\t\t\t\t\t\tthis.addToParentInfo(javaProject);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// flush classpath markers", "+\t\t\t\t\t\t\t\tjavaProject.", "+\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "+\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "+\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "+\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "+\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "+", "+\t\t\t\t\t\t\t\t// close project", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tjavaProject.close();", "+\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// in case the project was removed then added then changed (see bug 19799)", "+\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "+\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "+\t\t\t\t\t\t// in case the project was removed then added then changed", "+\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "+\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "-\t */", "-\tpublic void checkProjectsBeingAddedOrRemoved(IResourceDelta delta) {", "-\t\tIResource resource = delta.getResource();", "-\t\tswitch (resource.getType()) {", "-\t\t\tcase IResource.ROOT :", "-\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\tif (this.manager.javaProjectsCache == null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.manager.javaProjectsCache = this.manager.getJavaModel().getJavaProjects();", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "-\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\t\t\t\tthis.checkProjectsBeingAddedOrRemoved(children[i]);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase IResource.PROJECT :", "-\t\t\t\t// NB: No need to check project's nature as if the project is not a java project:", "-\t\t\t\t//     - if the project is added or changed this is a noop for projectsBeingDeleted", "-\t\t\t\t//     - if the project is closed, it has already lost its java nature", "-\t\t\t\tint deltaKind = delta.getKind();", "-\t\t\t\tif (deltaKind == IResourceDelta.ADDED) {", "-\t\t\t\t\t// remember project and its dependents", "-\t\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\t\tthis.addToProjectsToUpdateWithDependents(project);", "-\t\t\t\t\t", "-\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t}", "-", "-\t\t\t\t} else if (deltaKind == IResourceDelta.CHANGED) {", "-\t\t\t\t\tIProject project = (IProject)resource;", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0) {", "-\t\t\t\t\t\t// project opened or closed: remember  project and its dependents", "-\t\t\t\t\t\tthis.addToProjectsToUpdateWithDependents(project);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\t\tif (project.isOpen()) {", "-\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) {", "-\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)this.manager.getJavaModel().findJavaProject(project);", "-\t\t\t\t\t\t\tif (javaProject != null) {", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tjavaProject.close();", "-\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {", "-\t\t\t\t\t\tboolean wasJavaProject = this.manager.getJavaModel().findJavaProject(project) != null;", "-\t\t\t\t\t\tboolean isJavaProject = JavaProject.hasJavaNature(project);", "-\t\t\t\t\t\tif (wasJavaProject != isJavaProject) {", "-\t\t\t\t\t\t\t// java nature added or removed: remember  project and its dependents", "-\t\t\t\t\t\t\tthis.addToProjectsToUpdateWithDependents(project);", "-", "-\t\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\t\t\tif (isJavaProject) {", "-\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// flush classpath markers", "-\t\t\t\t\t\t\t\tjavaProject.", "-\t\t\t\t\t\t\t\t\tflushClasspathProblemMarkers(", "-\t\t\t\t\t\t\t\t\t\ttrue, // flush cycle markers", "-\t\t\t\t\t\t\t\t\t\ttrue  //flush classpath format markers", "-\t\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t// remove problems and tasks created  by the builder", "-\t\t\t\t\t\t\t\tJavaBuilder.removeProblemsAndTasksFor(project);", "-", "-\t\t\t\t\t\t\t\t// close project", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tjavaProject.close();", "-\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.removeFromParentInfo(javaProject);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// in case the project was removed then added then changed (see bug 19799)", "-\t\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "-\t\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// workaround for bug 15168 circular errors not reported ", "-\t\t\t\t\t\t// in case the project was removed then added then changed", "-\t\t\t\t\t\tif (JavaProject.hasJavaNature(project)) { // need nature check - 18698", "-\t\t\t\t\t\t\tthis.addToParentInfo((JavaProject)JavaCore.create(project));", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t}"]}], "num": 27588}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e9a92d67a4a88e93b7899966c27b696", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ce46de064997f1e591a1102b2c37b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "aa3a93ccc3206cb1748c8a2362c7163309a5a4d8", "commitAfterChange": "a5c6e1f76d5a6c03c6d1a939c4f8dbefac55cdca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\tif (methodBinding != null)", "-\t\tif (canBeSeenByForCodeSnippet(methodBinding, receiverType, invocationSite, this))", "+\tif (methodBinding != null) {", "+\t\tif (canBeSeenByForCodeSnippet(methodBinding, receiverType, invocationSite, this)) {", "-", "+\t\t}", "+\t}", "-\tif (methods == NoMethods)", "+\tif (methods == NoMethods) {", "-", "+\t}", "-\t\tif (canBeSeenByForCodeSnippet(method, receiverType, invocationSite, this))", "+\t\tif (canBeSeenByForCodeSnippet(method, receiverType, invocationSite, this)) {", "+\t\t}", "-\tif (visibleIndex == 1)", "+\tif (visibleIndex == 1) {", "-\tif (visibleIndex == 0)", "+\t}", "+\tif (visibleIndex == 0) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab59b991565f1b8794a7dcb993870e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(possible, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(possible, argumentTypes, invocationSite, APPLICABILITY);", "-\t\t\t\t\tMethodBinding[] temp = new MethodBinding[visible.size];", "-\t\t\t\t\tvisible.copyInto(temp);", "-\t\t\t\t\tfoundMethod = mostSpecificMethodBinding(temp, temp.length, argumentTypes, invocationSite, null);", "+\t\t\t\t\tif (visible.size == 1) {", "+\t\t\t\t\t\tfoundMethod = (MethodBinding) visible.elementAt(0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tMethodBinding[] temp = new MethodBinding[visible.size];", "+\t\t\t\t\t\tvisible.copyInto(temp);", "+\t\t\t\t\t\tfoundMethod = mostSpecificMethodBinding(temp, temp.length, argumentTypes, invocationSite, null);", "+\t\t\t\t\t}"]}], "num": 675}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31b0136f6e564873da04d138498ce9fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9149156d12f097e7b562ebf399542ed9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "efab4b1a6e2a55838a6e3f24bd649c2741fed74a", "commitAfterChange": "031d90cabc1bb0305f45ecbde4233f936523f4a5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-\t\tif (linePtr < 0) {", "-\t\t\tint i = 0;", "-\t\t\twhile (Character.isWhitespace(this.source[i])) {", "-\t\t\t\ti++;", "-\t\t\t}", "-\t\t\tif (getCurrentTokenStartPosition() == i) {", "-\t\t\t\t// the whole line is commented out", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tint i = this.lineEnds[this.linePtr] + 1; ", "-\t\t\twhile (Character.isWhitespace(this.source[i])) {", "-\t\t\t\ti++;", "-\t\t\t}", "-\t\t\tif (getCurrentTokenStartPosition() == i) {", "-\t\t\t\t// the whole line is commented out", "-\t\t\t\treturn;", "-\t\t\t}", "+\t\tint position = 0;", "+\t\tif (linePtr >= 0) {", "+\t\t\tposition = this.lineEnds[this.linePtr] + 1; ", "+\t\t}", "+\t\twhile (Character.isWhitespace(this.source[position])) {", "+\t\t\tposition++;", "+\t\t}", "+\t\tif (getCurrentTokenStartPosition() == position) {", "+\t\t\t// the whole line is commented out", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a101c74d0eb5c70367343dd33e5d6e19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java", "commitBeforeChange": "fce949b99d272770d0ef99d0fd14291b59c28cff", "commitAfterChange": "bec584357dd9f5416d76c043f6bc97254c43e356", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["+\t\t", "+\t\t/* If throw specification does not encode any type parameters, there are no constraints to be gleaned/gathered from the throw sites.", "+\t\t   See also that thrown exceptions are not allowed to influence compatibility and overload resolution.", "+\t\t*/", "+\t\tif (n == 0)", "+\t\t\treturn TRUE;", "+\t\t", "-\t\t\treturn TRUE; // TODO is it a bug if we actually get here?", "-\t\tint m = ePrime.length;", "-\t\tif (n == 0) {", "-\t\t\tactual: for (int i = 0; i < m; i++) {", "-\t\t\t\tfor (int j = 0; j < thrown.length; j++)", "-\t\t\t\t\tif (ePrime[i].isCompatibleWith(thrown[j]))", "-\t\t\t\t\t\tcontinue actual;", "-\t\t\t\treturn FALSE;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tList<ConstraintFormula> result = new ArrayList<ConstraintFormula>();", "-\t\t\tactual: for (int i = 0; i < m; i++) {", "-\t\t\t\tfor (int j = 0; j < thrown.length; j++)", "-\t\t\t\t\tif (thrown[j].isProperType(true) && ePrime[i].isCompatibleWith(thrown[j]))", "-\t\t\t\t\t\tcontinue actual;", "-\t\t\t\tfor (int j = 0; j < n; j++)", "-\t\t\t\t\tresult.add(ConstraintTypeFormula.create(ePrime[i], e[j], SUBTYPE));", "-\t\t\t}\t\t\t\t", "+\t\tint m = ePrime.length;", "+\t\tList<ConstraintFormula> result = new ArrayList<ConstraintFormula>();", "+\t\tactual: for (int i = 0; i < m; i++) {", "+\t\t\tif (ePrime[i].isUncheckedException(false))", "+\t\t\t\tcontinue;", "+\t\t\tfor (int j = 0; j < thrown.length; j++)", "+\t\t\t\tif (thrown[j].isProperType(true) && ePrime[i].isCompatibleWith(thrown[j]))", "+\t\t\t\t\tcontinue actual;", "-\t\t\t\tinferenceContext.currentBounds.inThrows.add(e[j]);", "-\t\t\treturn result.toArray(new ConstraintFormula[result.size()]);", "-\t\t}", "+\t\t\t\tresult.add(ConstraintTypeFormula.create(ePrime[i], e[j], SUBTYPE));", "+\t\t}\t\t\t\t", "+\t\tfor (int j = 0; j < n; j++)", "+\t\t\tinferenceContext.currentBounds.inThrows.add(e[j]);", "+\t\treturn result.toArray(new ConstraintFormula[result.size()]);"]}], "num": 10230}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c67f6d21319822b9989eea05100f18a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5493ef35c4534e61b5902f735399db3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "ba3f3515e414cf41bff76ad382644021240dc399", "commitAfterChange": "0fef9e356bfc246dbfd0c9cfea1ba0d8941a3dcb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, JavaFileManager fileManager, DiagnosticListener<? super JavaFileObject> someDiagnosticListener, Iterable<String> options, Iterable<String> classes, Iterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\tpublic CompilationTask getTask(Writer out,", "-\t\t\tJavaFileManager fileManager,", "-\t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener,", "-\t\t\tIterable<String> options,", "-\t\t\tIterable<String> classes,", "-\t\t\tIterable<? extends JavaFileObject> compilationUnits) {", "-", "+\tpublic CompilationTask getTask(Writer out, JavaFileManager fileManager, DiagnosticListener<? super JavaFileObject> someDiagnosticListener, Iterable<String> options, Iterable<String> classes, Iterable<? extends JavaFileObject> compilationUnits) {", "-\t\teclipseCompiler2.diagnosticListener = diagnosticListener;", "+\t\teclipseCompiler2.diagnosticListener = someDiagnosticListener;", "-\t\t\teclipseCompiler2.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "+\t\t\teclipseCompiler2.fileManager = this.getStandardFileManager(someDiagnosticListener, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f900edf1063ae9696982f3254b210988", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "121da1ed9487cd06624131be60f7fed861a83829", "commitAfterChange": "65bcf10af454142ab48b1720e5cae843f9f8de26", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static boolean compileTreeWithErrors(JavaCompiler compiler, List<String> options, File targetFolder, StringWriter errors)", "signatureAfterChange": " \tpublic static boolean compileTreeWithErrors( \t\t\tJavaCompiler compiler, \t\t\tList<String> options, \t\t\tFile targetFolder, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener)", "diff": ["-\tpublic static boolean compileTreeWithErrors(JavaCompiler compiler, List<String> options, File targetFolder, StringWriter errors) {", "+\tpublic static boolean compileTreeWithErrors(", "+\t\t\tJavaCompiler compiler,", "+\t\t\tList<String> options,", "+\t\t\tFile targetFolder,", "+\t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener) {", "-\t\tPrintWriter printWriter = new PrintWriter(errors);", "-\t\tCompilationTask task = compiler.getTask(printWriter, manager, null, options, null, units);", "+\t\t// use writer to prevent System.out/err to be polluted with problems", "+\t\tStringWriter writer = new StringWriter();", "+\t\tCompilationTask task = compiler.getTask(writer, manager, diagnosticListener, options, null, units);"]}], "num": 9171}
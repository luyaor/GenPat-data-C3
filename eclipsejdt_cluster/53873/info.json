{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b87715b89640bbd43e4c1ed22cd8c64f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878f7f00497d35d1fb5bfdb0534e3b24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "f63095af3c7deaeee47a62f089307467f872f35e", "commitAfterChange": "6e8431ed2d3ced2183b0880b86a760ea14397f82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "+\t\t\tif (castType.isCompatibleWith(expressionType)) {", "+\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "+\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\t\tif (!match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cbf3840c5fb77ddf7c53c3ece99031f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tboolean argsContainCast = false;", "-\t\t\tif ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null) {", "+\t\t\tExpression argument = this.arguments[i];", "+\t\t\tif (argument instanceof CastExpression) {", "+\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\targsContainCast = true;", "+\t\t\t}", "+\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null) {", "+\tif ((this.resolvedType.tagBits & TagBits.HasWildcard) != 0) {", "+\t    scope.problemReporter().cannotInstantiateWithWildcards(type, (ParameterizedTypeBinding)this.resolvedType);", "+\t    return this.resolvedType;", "+\t}\t", "-\tif (this.arguments != null) {", "-\t\tfor (int i = 0; i < this.arguments.length; i++) {", "-\t\t\tthis.arguments[i].implicitWidening(this.binding.parameters[i], argumentTypes[i]);", "+\tboolean warnRawArgs = false;", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < arguments.length; i++) {", "+\t\t    TypeBinding parameterType = binding.parameters[i];", "+\t\t    TypeBinding argumentType = argumentTypes[i];", "+\t\t\targuments[i].computeConversion(scope, parameterType, argumentType);", "+\t\t\tif (argumentType != parameterType && argumentType.isRawType() && parameterType.isParameterizedType()) {", "+\t\t\t    warnRawArgs = true;", "+\t\t\t}", "+\t\tif (argsContainCast) {", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocatedType, binding, this.arguments, argumentTypes, this);", "+\t\t}", "+\t}", "+\tif (allocatedType.isRawType() && this.binding.hasSubstitutedParameters()) {", "+\t    scope.problemReporter().unsafeRawInvocation(this, allocatedType, this.binding);", "+\t} else if (warnRawArgs) {", "+\t    scope.problemReporter().unsafeInvocationWithRawArguments(this, allocatedType, this.binding, argumentTypes);"]}], "num": 53873}
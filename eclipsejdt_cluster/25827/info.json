{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d443362db15ab2139fceaf5801ecf86a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcec51bdb9536f818b9f3687485c0bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "ead8e814ab499b7622eb426e1befbcf339b11ce8", "commitAfterChange": "557b79fe942a0c2ecd096efec77764eeda1e9de9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "diff": ["-\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType) {", "+\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope) {", "+\t\tint code = internalBoundCheck(substitution, argumentType, scope);", "+\t\tif (code == TypeConstants.MISMATCH) {", "+\t\t\tif (argumentType instanceof TypeVariableBinding && scope != null) {", "+\t\t\t\tTypeBinding bound = ((TypeVariableBinding)argumentType).firstBound;", "+\t\t\t\tif (bound instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1), scope); // no position needed as this capture will never escape this context", "+\t\t\t\t\treturn Math.min(code, code2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn code;", "+\t}", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\treturn boundCheck(substitution, wildcard.bound);", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "657a2b15111de432bf185182f69e3155", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "370fc9797484c96c0e1fdf0a7794604c16e52ccb", "commitAfterChange": "c50ca866bcc8a651da6c9f1ec9e6c29c39dc7ade", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope)", "diff": ["-\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType) {", "+\tpublic int boundCheck(Substitution substitution, TypeBinding argumentType, Scope scope) {", "+\t\tint code = internalBoundCheck(substitution, argumentType, scope);", "+\t\tif (code == TypeConstants.MISMATCH) {", "+\t\t\tif (argumentType instanceof TypeVariableBinding && scope != null) {", "+\t\t\t\tTypeBinding bound = ((TypeVariableBinding)argumentType).firstBound;", "+\t\t\t\tif (bound instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\tint code2 = boundCheck(substitution, bound.capture(scope, -1), scope); // no position needed as this capture will never escape this context", "+\t\t\t\t\treturn Math.min(code, code2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn code;", "+\t}", "-\t\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\t\t\tif (!wildcardBound.isCompatibleWith(substitutedSuperType))", "-\t\t\t\t\treturn boundCheck(substitution, wildcard.bound);", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {", "-\t\t\t\tif (!argumentType.isCompatibleWith(substitutedSuperType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b506077f52b00ee035f9a6ea68681b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " public MethodBinding[] getMethods(char[] selector)", "diff": ["-", "-\t// handle forward references to potential default abstract methods", "-\taddDefaultAbstractMethods();", "+\tint selectorLength = selector.length;", "+\tboolean methodsAreResolved = (modifiers & AccUnresolved) == 0; // have resolved all arg types & return type of the methods", "+\tjava.util.ArrayList matchingMethods = null;", "+\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\tMethodBinding method = methods[i];", "+\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "+\t\t\tif (!methodsAreResolved && resolveTypesFor(method) == null || method.returnType == null) {", "+\t\t\t\tmethods();", "+\t\t\t\treturn getMethods(selector); // try again since the problem methods have been removed", "+\t\t\t}", "+\t\t\tif (matchingMethods == null)", "+\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "+\t\t\tmatchingMethods.add(method);", "+\t\t}", "+\t}", "+\tif (matchingMethods == null) return NoMethods;", "-\ttry{", "-\t\tint count = 0;", "-\t\tint lastIndex = -1;", "-\t\tint selectorLength = selector.length;", "-\t\tif ((modifiers & AccUnresolved) == 0) { // have resolved all arg types & return type of the methods", "-\t\t\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tcount++;", "-\t\t\t\t\tlastIndex = m;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tboolean foundProblem = false;", "-\t\t\tint failed = 0;", "-\t\t\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tif (resolveTypesFor(method) == null) {", "-\t\t\t\t\t\tfoundProblem = true;", "-\t\t\t\t\t\tmethods[m] = null; // unable to resolve parameters", "-\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t} else if (method.returnType == null) {", "-\t\t\t\t\t\tfoundProblem = true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tlastIndex = m;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t", "-\t\t\tif (foundProblem || count > 1) {", "-\t\t\t\tfor (int m = methods.length; --m >= 0;) {", "-\t\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\t\tif (method != null && method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\t\tAbstractMethodDeclaration methodDecl = null;", "-\t\t\t\t\t\tfor (int i = 0; i < m; i++) {", "-\t\t\t\t\t\t\tMethodBinding method2 = methods[i];", "-\t\t\t\t\t\t\tif (method2 != null && CharOperation.equals(method.selector, method2.selector)) {", "-\t\t\t\t\t\t\t\tif (method.areParametersEqual(method2)) {", "-\t\t\t\t\t\t\t\t\tif (methodDecl == null) {", "-\t\t\t\t\t\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "-\t\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t\t\tmethods[m] = null;", "-\t\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2.sourceMethod());", "-\t\t\t\t\t\t\t\t\tmethod2.sourceMethod().binding = null;", "-\t\t\t\t\t\t\t\t\tmethods[i] = null;", "-\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.returnType == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions", "-\t\t\t\t\t\t\tmethod.sourceMethod().binding = null;", "-\t\t\t\t\t\t\tmethods[m] = null;", "-\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t", "-\t\t\t\tif (failed > 0) {", "-\t\t\t\t\tint newSize = methods.length - failed;", "-\t\t\t\t\tif (newSize == 0)", "-\t\t\t\t\t\treturn methods = NoMethods;", "-\t", "-\t\t\t\t\tMethodBinding[] newMethods = new MethodBinding[newSize];", "-\t\t\t\t\tfor (int i = 0, n = 0, max = methods.length; i < max; i++)", "-\t\t\t\t\t\tif (methods[i] != null)", "-\t\t\t\t\t\t\tnewMethods[n++] = methods[i];", "-\t\t\t\t\tmethods = newMethods;", "-\t\t\t\t\treturn getMethods(selector); // try again now that the problem methods have been removed", "+\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "+\tmatchingMethods.toArray(result);", "+\tif (!methodsAreResolved) {", "+\t\tfor (int i = 0, length = result.length - 1; i < length; i++) {", "+\t\t\tMethodBinding method = result[i];", "+\t\t\tfor (int j = length; j > i; j--) {", "+\t\t\t\tif (method.areParameterErasuresEqual(result[j])) {", "+\t\t\t\t\tmethods();", "+\t\t\t\t\treturn getMethods(selector); // try again since the duplicate methods have been removed", "-\t\tif (count == 1)", "-\t\t\treturn new MethodBinding[] {methods[lastIndex]};", "-\t\tif (count > 1) {", "-\t\t\tMethodBinding[] result = new MethodBinding[count];", "-\t\t\tcount = 0;", "-\t\t\tfor (int m = 0; m <= lastIndex; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector))", "-\t\t\t\t\tresult[count++] = method;", "-\t\t\t}", "-\t\t\treturn result;", "-\t\t}", "-\t} catch(AbortCompilation e){", "-\t\t// ensure null methods are removed", "-\t\tMethodBinding[] newMethods = null;", "-\t\tint count = 0;", "-\t\tfor (int i = 0, max = methods.length; i < max; i++){", "-\t\t\tMethodBinding method = methods[i];", "-\t\t\tif (method == null && newMethods == null){", "-\t\t\t\tSystem.arraycopy(methods, 0, newMethods = new MethodBinding[max], 0, i);", "-\t\t\t} else if (newMethods != null && method != null) {", "-\t\t\t\tnewMethods[count++] = method;", "-\t\t\t}", "-\t\t}", "-\t\tif (newMethods != null){", "-\t\t\tSystem.arraycopy(newMethods, 0, methods = new MethodBinding[count], 0, count);", "-\t\t}\t\t\t", "-\t\tmodifiers ^= AccUnresolved;", "-\t\tthrow e;", "-\t}\t\t", "-\treturn NoMethods;", "+\t}", "+\treturn result;"]}], "num": 25827}
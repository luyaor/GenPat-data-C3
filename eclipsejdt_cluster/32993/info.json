{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f734b4dca0340a1573bca7973dafee4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6a62b4e1f60aef0832e8328b989986", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "e1049d9d375f2e122d69e3cc7e56e09bd058cc67", "commitAfterChange": "3f796b100e9b9a1c8682c406af615aae875d1ae1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\t\t\t\tif (match == null /*|| !match.isCompatibleWith(expressionType)*/) {", "-\t\t\t\t\t\t\t\t\t\t// potential runtime error", "+\t\t\t\t\t\t\t\t\tif (match == null) {", "-\t\t\t\t\t\t\t\t\tif (((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType))", "+\t\t\t\t\t\t\t\t\tif (((ReferenceBinding)castType).hasIncompatibleSuperType((ReferenceBinding) expressionType)) {", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (match == null || !match.isCompatibleWith(castType)) {", "+\t\t\t\t\t\t\t\t\tif (match == null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34310804f9e9379a3d99da3949646f0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "489c8df8b304202e6d95c31d2657dd3b11577e64", "commitAfterChange": "11e96c9dafd71d6efeeef32eb7653fd847eaeb30", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tif (!use15specifics) {", "+\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t// ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>", "+\t\t\t\t\t\t\t\t\tif (interfaceType.hasIncompatibleSuperType((ReferenceBinding)castType))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+//\t\t\t\t\t\t\t\t\tTypeBinding[] types = { castType, interfaceType };", "+//\t\t\t\t\t\t\t\t\tif (scope.lowerUpperBound(types) == null) /* would answer VoidBinding if unrelated interfaces */", "+//\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t} else {"]}], "num": 32993}
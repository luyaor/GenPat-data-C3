{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "516853e8f435b3e0e744e9ef84305a56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afec2d705812fc84a36994d14a423e4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic void indexAll(IProject project)", "signatureAfterChange": "\r public void indexAll(IProject project)", "diff": ["-\t */\r", "-\tpublic void indexAll(IProject project) {\r", "-\t\tif (JavaCore.getPlugin() == null || this.workspace == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Also request indexing of binaries on the classpath\r", "-\t\t// determine the new children\r", "-\t\t\tIJavaModel model = JavaModelManager.getJavaModel(this.workspace);\r", "-\t\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots(entry);\r", "-\t\t\t\tfor (int j = 0; j < roots.length; j++) {\r", "-\t\t\t\t\tIPackageFragmentRoot root = roots[j];\r", "-\t\t\t\t\tif (root.exists()) {\r", "-\t\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t\tIResource rsc = root.getUnderlyingResource();\r", "-\t\t\t\t\t\t\tif (rsc == null) {\r", "-\t\t\t\t\t\t\t\tindexJarFile(root, project.getName());\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tindexJarFile((IFile) rsc, project.getName());\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (JavaModelException e) { // cannot retrieve classpath info\r", "-\t\t}\r", "-\t\trequest(new IndexAllProject(project, this));\r", "-\t}\r", "+ */\r", "+public void indexAll(IProject project){\r", "+\tif (JavaCore.getPlugin() == null || this.workspace == null) return;\r", "+\r", "+\t// Also request indexing of binaries on the classpath\r", "+\t// determine the new children\r", "+\ttry {\r", "+\t\tIJavaModel model = JavaModelManager.getJavaModel(this.workspace);\r", "+\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\t\r", "+\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\t\r", "+\t\tfor (int i = 0; i < entries.length; i++) {\r", "+\t\t\tIClasspathEntry entry= entries[i];\r", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY){\r", "+\t\t\t\tindexJarFile(entry.getPath(), project.getName());\r", "+\t} catch(JavaModelException e){ // cannot retrieve classpath info\r", "+\t}\t\r", "+\trequest(new IndexAllProject(project, this));\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fee56dbc7fe89f17f142d1bdd0d4bb9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic void add(IResource element)", "signatureAfterChange": "\r public void add(IResource element)", "diff": ["-\t */\r", "-\tpublic void add(IResource element) {\r", "-\t\tsuper.add(element);\r", "+ */\r", "+public void add(IResource element) {\r", "+\tsuper.add(element);\r", "-\t\t// clear indexer cache\r", "-\t\tfLastCheckedResource = null;\r", "+\t// clear indexer cache\r", "+\tfLastCheckedResource = null;\r", "-\t\tif (element instanceof IProject) {\r", "-\t\t\t// remember the paths of its classpath entries\r", "-\t\t\tIJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "-\t\t\ttry {\r", "-\t\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\t\tthis.add(entry.getPath());\r", "-\t\t\t\t}\r", "-\t\t\t} catch (JavaModelException e) {\r", "+\tif (element instanceof IProject) {\r", "+\t\t// remember the paths of its classpath entries\r", "+\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(element.getWorkspace());\r", "+\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "+\t\ttry {\r", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\tthis.add(entry.getPath());\r", "-\t\t} else {\r", "-\t\t\tthis.add(element.getFullPath());\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t}\r", "+\t} else {\r", "+\t\tthis.add(element.getFullPath());\r", "+\t}\r", "+}\r"]}], "num": 63517}
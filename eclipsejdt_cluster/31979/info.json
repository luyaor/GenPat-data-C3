{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "234402c058fbaa0b8ef7101ee8e805ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "048afbff50442f83950dbf2c894e638c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7f9e7745cf3f1c024406269afc8bec9564b2443c", "commitAfterChange": "f71ae6e6dfede90c4056a2e033197a9212bd23a2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void acceptClass(char[] packageName, char[] className, int modifiers, AccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptClass(char[] packageName, char[] className, int modifiers, AccessRestriction accessRestriction)", "diff": ["-\t\tif(this.options.checkRestrictions && accessRestriction != null) return;", "+\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "+\t\tif(accessRestriction != null) {", "+\t\t\tswitch (accessRestriction.getProblemId()) {", "+\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\tif(this.options.checkForbiddenReference) return;", "+\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\tif(this.options.checkDiscouragedReference) return;", "+\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-\t\trelevance += computeRelevanceForRestrictions(accessRestriction != null);", "+\t\trelevance += computeRelevanceForRestrictions(accessibility);", "+\t\t\tproposal.setAccessibility(accessibility);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d42abff3c586ebec0b0a0f60c90ed9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": "  \tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "diff": ["-\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t}", "-\t\t\t\tif (fields[i] instanceof Initializer) {", "-\t\t\t\t\t((Initializer) fields[i]).parseStatements(parser, this, unit);", "+\t\t\t\tfinal FieldDeclaration fieldDeclaration = fields[i];", "+\t\t\t\tswitch(fieldDeclaration.getKind()) {", "+\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\t\t\t\t((Initializer) fieldDeclaration).parseStatements(parser, this, unit);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AbstractVariableDeclaration.ENUM_CONSTANT:", "+\t\t\t\t\t\tFieldDeclaration enumConstant = fieldDeclaration;", "+\t\t\t\t\t\tfinal Expression expression = enumConstant.initialization;", "+\t\t\t\t\t\tif (expression instanceof QualifiedAllocationExpression) {", "+\t\t\t\t\t\t\t((QualifiedAllocationExpression) expression).anonymousType.parseMethod(parser, unit);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;\t\t\t\t\t\t"]}], "num": 31979}
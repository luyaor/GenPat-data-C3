{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df1af19a8da160497bc17083b8a8d7e6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9eaeb99ab3f25b552c283f59d4efba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "523ea3b2c64428d6b9f9d9783cbb0776a4263765", "commitAfterChange": "19e8b378f3973cba5b6ddd20330ed251678b8a37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\t\tif (!this.completedTokenFound && ", "+\t\t\t\t\t\tif (this.completionIdentifier == null && ", "-\t\t\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\t\t\t\t\t\t//&& (previousToken == TokenNameDOT)", "-\t\t\t\t\t\t&& (!this.completedTokenFound)", "-\t\t\t\t\t\t&& (whiteStart <= this.cursorLocation+1)", "-\t\t\t\t\t\t&& (this.cursorLocation < this.startPosition)", "-\t\t\t\t\t\t&& !Character.isJavaIdentifierStart(this.currentCharacter)){", "-", "-\t\t\t\t\tif (this.tokenizeWhiteSpace && hasWhiteSpaces && !this.whitespacesBeforeCompletedTokenFound) {", "-\t\t\t\t\t\t// reposition scanner in case we are interested by spaces as tokens", "-\t\t\t\t\t\tthis.currentPosition-=offset;", "-\t\t\t\t\t\tthis.startPosition = whiteStart;", "-\t\t\t\t\t\tthis.whitespacesBeforeCompletedTokenFound = true;", "-\t\t\t\t\t\treturn TokenNameWHITESPACE;", "-\t\t\t\t\t}", "+\t\t\t\t\t//&& (previousToken == TokenNameDOT)", "+\t\t\t\t\t&& (this.completionIdentifier == null)", "+\t\t\t\t\t&& (whiteStart <= this.cursorLocation+1)", "+\t\t\t\t\t&& (this.cursorLocation < this.startPosition)", "+\t\t\t\t\t&& !Character.isJavaIdentifierStart(this.currentCharacter)){", "-\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\t\t\t\t\tthis.whitespacesBeforeCompletedTokenFound = false;", "-\t\t\t\tif (!this.completedTokenFound  && ", "+\t\t\t\tif (this.completionIdentifier == null && ", "-\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\t\t\t\t\t\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\t\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\t\t\t\t\t\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\t\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\t\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\t\t\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){", "-\t\t\t\t\t\tthis.completedTokenFound = true;", "-\t\t\t\t\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\t\t\t\t\tthis.completedIdentifierEnd = this.currentPosition - 1;", "-\tif (!this.completedTokenFound && ", "+\tif (this.completionIdentifier == null && ", "-\t\tthis.completedTokenFound = true;", "-\t\tthis.completedIdentifierStart = this.startPosition;", "-\t\tthis.completedIdentifierEnd = this.currentPosition - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98e0b7fb1ff693234636025da327ef45", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "signatureAfterChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "diff": ["-\t\t// copy array because elements  from the original are removed below", "+\t\tint index = 0;", "+\t\twhile (index < length) {", "+\t\t\tint max = Math.min(MAX_AT_ONCE, length-index);", "+\t\t\tlocateMatches(javaProject, potentialMatches, index, max);", "+\t\t\tindex += max;", "+\t\t}", "+\t}", "-\t\tSystem.arraycopy(potentialMatches, 0, copy, 0, length);", "-\t", "-", "-\t\t\tthis.createAndResolveBindings(potentialMatches);", "-\t", "-\t", "-\t\t\t\t\tif (this.options.verbose)", "-\t\t\t\t\t\tSystem.out.println(", "-\t\t\t\t\t\t\tUtil.bind(", "-\t\t\t\t\t\t\t\t\"compilation.process\" , //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\t\t\tString.valueOf(totalUnits),", "-\t\t\t\t\t\t\t\t\tnew String(unitsToProcess[i].getFileName())}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae7d56d273d62d219dc86d9d2328e362", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "signatureAfterChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "diff": ["+\t\tLambdaExpression lambda = this.resolvedCopies.get(targetType);", "+\t\tif (lambda == null) {", "+\t\t\tlambda = getResolvedCopyForInferenceTargeting0(targetType);", "+\t\t\tif (lambda != null) {", "+\t\t\t\tthis.resolvedCopies.put(targetType, lambda);", "+\t\t\t}", "+\t\t}", "+\t\treturn lambda;", "+\t}", "-\t\ttargetType = targetType.uncapture(this.enclosingScope);", "-\t\t// TODO: caching"]}], "num": 44025}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "433ccac409c92ef5ff6509fbbc78404e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c981b91691c712ed20f46b00392bcf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void setUserLibrary(String name, UserLibrary library, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tpublic synchronized void removeUserLibrary(String libName)", "diff": ["-\t */", "-\tpublic static void setUserLibrary(String name, UserLibrary library, IProgressMonitor monitor) throws JavaModelException {", "-\t\tinternalSetUserLibrary(name, library, true, true, monitor);", "-\t}", "+\t", "+\tpublic synchronized void removeUserLibrary(String libName)  {", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\tinstancePreferences.remove(propertyName);", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while removing user library \" + libName); //$NON-NLS-1$", "+\t\t}", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e57a4b94d077f1626600bd3abddfd0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "1b2fefdcba6fae8f70ea49e17ba1e528ac24b968", "commitAfterChange": "bca3f57a59122220b2da4d318202ae5c57ace15e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 47, "signatureBeforeChange": " public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String jarPath) throws IOException", "signatureAfterChange": " public static void waitAtLeast(int time)", "diff": ["-public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String jarPath) throws IOException {", "-\tcreateJar(pathsAndContents, extraPathsAndContents, options, null, jarPath);", "-}", "+public static void waitAtLeast(int time) {", "+\tlong start = System.currentTimeMillis();", "+\tdo {", "+\t\ttry {", "+\t\t\tThread.sleep(time);", "+\t\t} catch (InterruptedException e) {", "+\t\t}", "+\t} while ((System.currentTimeMillis() - start) < time);", "+}"]}], "num": 57517}
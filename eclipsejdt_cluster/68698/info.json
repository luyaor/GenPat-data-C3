{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e84a48ee0686017b2f40ff7d685da84", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5241555b726ef610cad75a475fb6a4ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTypeAnnotationsTest.java", "commitBeforeChange": "e1051acac48de2e59e4c3d2d0f46898b4067bf9a", "commitAfterChange": "25dbd9e17c7b6920dccf1b458296dbbe00f382de", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testQualifiedTypeAnnotations() throws Exception", "signatureAfterChange": " \tpublic void testQualifiedTypeAnnotations() throws Exception", "diff": ["-\t\t\tQualifiedType qualifiedType = (QualifiedType) variableDeclarationStatement.getType();", "+\t\t\tNameQualifiedType nameQualifiedType = (NameQualifiedType) variableDeclarationStatement.getType();", "-\t\t\trewrite.replace((ASTNode) qualifiedType.annotations().get(0), markerAnnotation, null);", "+\t\t\trewrite.replace((ASTNode) nameQualifiedType.annotations().get(0), markerAnnotation, null);", "-\t\t\tqualifiedType = (QualifiedType) variableDeclarationStatement.getType();", "-\t\t\trewrite.remove((ASTNode) qualifiedType.annotations().get(0), null);", "+\t\t\tnameQualifiedType = (NameQualifiedType) variableDeclarationStatement.getType();", "+\t\t\trewrite.remove((ASTNode) nameQualifiedType.annotations().get(0), null);", "-\t\t\tqualifiedType = (QualifiedType) variableDeclarationStatement.getType();", "+\t\t\tnameQualifiedType = (NameQualifiedType) variableDeclarationStatement.getType();", "-\t\t\trewrite.getListRewrite(qualifiedType, QualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "+\t\t\trewrite.getListRewrite(nameQualifiedType, NameQualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "-\t\t\tqualifiedType = ast.newQualifiedType(ast.newSimpleType(qualifiedName), simpleName);", "+\t\t\tnameQualifiedType = ast.newNameQualifiedType(qualifiedName, simpleName);", "-\t\t\trewrite.getListRewrite(qualifiedType, QualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "-\t\t\trewrite.replace(variableDeclarationStatement.getType(), qualifiedType, null);", "+\t\t\trewrite.getListRewrite(nameQualifiedType, NameQualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "+\t\t\trewrite.replace(variableDeclarationStatement.getType(), nameQualifiedType, null);", "-\t\t\t\t \"\t\tOuter. Inner.@NewMarker Deeper deeper2 =  second.new Deeper();\\n\" +", "+\t\t\t\t \"\t\tOuter.Inner.@NewMarker Deeper deeper2 =  second.new Deeper();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a4ce1821a12d1b9d78fef65a0c4773", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTypeAnnotationsTest.java", "commitBeforeChange": "e1051acac48de2e59e4c3d2d0f46898b4067bf9a", "commitAfterChange": "25dbd9e17c7b6920dccf1b458296dbbe00f382de", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void testPackageQualifiedTypeAnnotations() throws Exception", "signatureAfterChange": " \tpublic void testNameQualifiedTypeAnnotations() throws Exception", "diff": ["-\tpublic void testPackageQualifiedTypeAnnotations() throws Exception {", "+\tpublic void testNameQualifiedTypeAnnotations() throws Exception {", "-\t\t\tPackageQualifiedType packageQualifiedType = (PackageQualifiedType) methodDeclaration.getReturnType2();", "+\t\t\tNameQualifiedType nameQualifiedType = (NameQualifiedType) methodDeclaration.getReturnType2();", "-\t\t\trewrite.replace((ASTNode) packageQualifiedType.annotations().get(0), markerAnnotation, null);", "+\t\t\trewrite.replace((ASTNode) nameQualifiedType.annotations().get(0), markerAnnotation, null);", "-\t\t\tpackageQualifiedType = (PackageQualifiedType) param.getType();", "-\t\t\trewrite.remove((ASTNode) packageQualifiedType.annotations().get(0), null);", "+\t\t\tnameQualifiedType = (NameQualifiedType) param.getType();", "+\t\t\trewrite.remove((ASTNode) nameQualifiedType.annotations().get(0), null);", "-\t\t\tpackageQualifiedType = (PackageQualifiedType) methodDeclaration.thrownExceptionTypes().get(0);", "+\t\t\tnameQualifiedType = (NameQualifiedType) methodDeclaration.thrownExceptionTypes().get(0);", "-\t\t\trewrite.getListRewrite(packageQualifiedType, PackageQualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "+\t\t\trewrite.getListRewrite(nameQualifiedType, NameQualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "-\t\t\t/* insert an annotation in a type not converted as a PackageQualifiedType. This would involve", "-\t\t\t *  creation of a PackageQualifiedType from fields of the existing type.", "+\t\t\t/* insert an annotation in a type not converted as a NameQualifiedType. This would involve", "+\t\t\t *  creation of a NameQualifiedType from fields of the existing type.", "-\t\t\tpackageQualifiedType = ast.newPackageQualifiedType(qualifiedName, simpleName);", "+\t\t\tnameQualifiedType = ast.newNameQualifiedType(qualifiedName, simpleName);", "-\t\t\trewrite.getListRewrite(packageQualifiedType, PackageQualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "-\t\t\trewrite.replace(classInstanceCreation.getType(), packageQualifiedType, null);", "+\t\t\trewrite.getListRewrite(nameQualifiedType, NameQualifiedType.ANNOTATIONS_PROPERTY).insertLast(markerAnnotation, null);", "+\t\t\trewrite.replace(classInstanceCreation.getType(), nameQualifiedType, null);"]}], "num": 68698}
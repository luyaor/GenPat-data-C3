{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d7c8e9d6ec286d3886212836acf8f28", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40e5c0ffd61d9f5ce0305070040c86d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "6279337ba7a56fe0ba602068e82284092e08edd4", "commitAfterChange": "a3974de2e53f4a7f6384d82823b901bd516b0970", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Object getWrappedConstantValue() throws ClassFormatException", "signatureAfterChange": " public Object getWrappedConstantValue() throws ClassFormatException", "diff": ["-\t\t\tConstant constant = getConstant();", "-\t\t\tswitch (constant.typeID()) {", "+\t\t\tConstant fieldConstant = getConstant();", "+\t\t\tswitch (fieldConstant.typeID()) {", "-\t\t\t\t\tthis.wrappedConstantValue = new Integer(constant.intValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Integer(fieldConstant.intValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Byte(constant.byteValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Byte(fieldConstant.byteValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Short(constant.shortValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Short(fieldConstant.shortValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Character(constant.charValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Character(fieldConstant.charValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Float(constant.floatValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Float(fieldConstant.floatValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Double(constant.doubleValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Double(fieldConstant.doubleValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Boolean(constant.booleanValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Boolean(fieldConstant.booleanValue());", "-\t\t\t\t\tthis.wrappedConstantValue = new Long(constant.longValue());", "+\t\t\t\t\tthis.wrappedConstantValue = new Long(fieldConstant.longValue());", "-\t\t\t\t\tthis.wrappedConstantValue = constant.stringValue();", "+\t\t\t\t\tthis.wrappedConstantValue = fieldConstant.stringValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c8c016671fa338ee5294fd44a997fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "204dbb0f962baec45cc155adc0f25897806fc936", "commitAfterChange": "8d7962f9f430b3236797be4f077716228c08370e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t\tif (fieldBinding.constant != Constant.NotAConstant){", "+\t\tif (fieldBinding.isConstantValue()){", "-\t\t\tswitch (fieldBinding.constant.typeID()) {", "+\t\t\tConstant fieldConstant = fieldBinding.constant();", "+\t\t\tswitch (fieldConstant.typeID()) {", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.booleanValue() ? 1 : 0);", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.booleanValue() ? 1 : 0);", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.intValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.intValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.floatValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.floatValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.doubleValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.doubleValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.longValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.longValue());", "-\t\t\t\t\t\t\t((StringConstant) fieldBinding.constant).stringValue());", "+\t\t\t\t\t\t\t((StringConstant) fieldConstant).stringValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb0ee1e351f557027bdfbcf39892f00d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "e0325c6422f39f597d14dd4c27ecf43875108a27", "commitAfterChange": "f389464fbe74a4e5c3adfde8847a7200db37d80c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic ClassFile( \t\tSourceTypeBinding aType, \t\tClassFile enclosingClassFile, \t\tboolean creatingProblemType)", "signatureAfterChange": " \t \tpublic ClassFile(SourceTypeBinding typeBinding)", "diff": ["+\t", "+\tpublic ClassFile(SourceTypeBinding typeBinding) {", "+\t\t// default constructor for subclasses", "+\t\tthis.constantPool = new ConstantPool(this);", "+\t\tfinal CompilerOptions options = typeBinding.scope.compilerOptions();", "+\t\tthis.targetJDK = options.targetJDK;", "+\t\tthis.produceAttributes = options.produceDebugAttributes;", "+\t\tthis.referenceBinding = typeBinding;", "+\t\tif (this.targetJDK >= ClassFileConstants.JDK1_6) {", "+\t\t\tthis.produceAttributes |= ClassFileConstants.ATTR_STACK_MAP;", "+\t\t\tthis.codeStream = new StackMapFrameCodeStream(this);", "+\t\t} else {", "+\t\t\tthis.codeStream = new CodeStream(this);", "+\t\t}", "+\t\tthis.initByteArrays();", "+\t}", "-\t */", "-\tpublic ClassFile(", "-\t\tSourceTypeBinding aType,", "-\t\tClassFile enclosingClassFile,", "-\t\tboolean creatingProblemType) {", "-\t    ", "-\t\tthis.referenceBinding = aType;", "-\t\tinitByteArrays();", "-", "-\t\tfinal CompilerOptions options = aType.scope.compilerOptions();", "-\t\tthis.targetJDK = options.targetJDK;", "-\t\tconstantPool = new ConstantPool(this);", "-\t\tthis.enclosingClassFile = enclosingClassFile;", "-\t\tproduceAttributes = options.produceDebugAttributes;", "-\t\tthis.creatingProblemType = creatingProblemType;", "-\t\tif (this.targetJDK >= ClassFileConstants.JDK1_6) {", "-\t\t\tthis.produceAttributes |= ClassFileConstants.ATTR_STACK_MAP;", "-\t\t\tcodeStream = new StackMapFrameCodeStream(this);", "-\t\t} else {", "-\t\t\tcodeStream = new CodeStream(this);", "-\t\t}", "-\t\t\tcodeStream.maxFieldCount = aType.scope.referenceType().maxFieldCount;", "-\t\t\tcodeStream.maxFieldCount = outermostClassFile.codeStream.maxFieldCount;"]}], "num": 63186}
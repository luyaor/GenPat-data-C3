{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caec06876995c2dc759c439125629998", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2218b838071cc7d1dcf682212960b4f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "fd3ab9c75de2623a0c445ae20bbf9555b802842b", "commitAfterChange": "dc82ed373b675aa38d1bde68b062faa0d442c79e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate TypeBinding getTypeFromSignature(String typeSignature, Scope scope)", "signatureAfterChange": " \t \tprivate TypeBinding getTypeFromSignature(String typeSignature, Scope scope)", "diff": ["-\t\t\ttypeVariables = methodDeclaration.binding.typeVariables;", "+\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "+\t\t\t\tint length = typeParameters.length;", "+\t\t\t\tint count = 0;", "+\t\t\t\ttypeVariables = new TypeVariableBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (typeParameters[i].binding != null) {", "+\t\t\t\t\t\ttypeVariables[count++] = typeParameters[i].binding;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (count != length) {", "+\t\t\t\t\tSystem.arraycopy(typeVariables, 0, typeVariables = new TypeVariableBinding[count], 0, count);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3fe665e99a5ed6be28dbf394c39f98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "c06bff376a1042f1b591cced5c14f84ebe26c37c", "commitAfterChange": "3979124e5de1f0b06967888f395869afdd989278", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static char[] getInputStreamAsCharArray(InputStream stream, int length, String encoding) \t\tthrows IOException", "signatureAfterChange": " \tpublic static char[] getInputStreamAsCharArray(InputStream stream, int length, String encoding) \t\tthrows IOException", "diff": ["+\t\t\t// Do not keep first character for UTF-8 BOM encoding", "+\t\t\tint start = 0;", "+\t\t\tif (\"UTF-8\".equals(encoding)) { //$NON-NLS-1$", "+\t\t\t\tif (contents[0] == 0xFEFF) { // if BOM char then skip", "+\t\t\t\t\tcontentsLength--;", "+\t\t\t\t\tstart = 1;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\t\t0,", "+\t\t\t\t\tstart,", "+\t\t\t// Do not keep first character for UTF-8 BOM encoding", "+\t\t\tint start = 0;", "+\t\t\tif (\"UTF-8\".equals(encoding)) { //$NON-NLS-1$", "+\t\t\t\tif (contents[0] == 0xFEFF) { // if BOM char then skip", "+\t\t\t\t\tlen--;", "+\t\t\t\t\tstart = 1;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tSystem.arraycopy(contents, 0, (contents = new char[len]), 0, len);", "+\t\t\t\tSystem.arraycopy(contents, start, (contents = new char[len]), 0, len);"]}], "num": 68924}
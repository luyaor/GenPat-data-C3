{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f6dd25127f145f4c50649f15750e39e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed5dff5d6fc808582cd5173d4fcd172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "3363755daf5e11f7ba5c27ee1ed39285b9c60a26", "commitAfterChange": "b25ba34af45dc400b54fbb4a1c94812b44a4f39f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-\tif (!concreteMethod.isPublic())", "-\t\t// Cannot reduce visibility of a public method specified by an interface", "-\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "+\tif (!concreteMethod.isPublic()) {", "+\t\tint index = 0, length = abstractMethods.length;", "+\t\tif (concreteMethod.isProtected()) {", "+\t\t\tfor (; index < length; index++)", "+\t\t\t\tif (abstractMethods[index].isPublic()) break;", "+\t\t} else if (concreteMethod.isDefault()) {", "+\t\t\tfor (; index < length; index++)", "+\t\t\t\tif (!abstractMethods[index].isDefault()) break;", "+\t\t}", "+\t\tif (index < length)", "+\t\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ad5d388b62b0aa37504c7e10b744345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-", "-\t// Remember that interfaces can only define public instance methods", "-\tif (concreteMethod.isStatic())", "-\t\t// Cannot inherit a static method which is specified as an instance method by an interface", "-\t\tproblemReporter().staticInheritedMethodConflicts(type, concreteMethod, abstractMethods);\t", "-\tif (!concreteMethod.isPublic())", "-\t\t// Cannot reduce visibility of a public method specified by an interface", "-\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "-\tif (concreteMethod.thrownExceptions != NoExceptions)", "-\t\tfor (int i = abstractMethods.length; --i >= 0;)", "-\t\t\tcheckExceptions(concreteMethod, abstractMethods[i]);", "+\tcheckConcreteInheritedMethod(concreteMethod, abstractMethods);"]}], "num": 44403}
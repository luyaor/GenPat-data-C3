{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "255f67ac3a017870690fffddf9812a7e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551cede1822f0fa96fd1f88d483fb1e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tpublic void fire()", "signatureAfterChange": "\r \tprivate void fire(ArrayList deltas)", "diff": ["+\tprivate void fire(ArrayList deltas) {\r", "+\t\tIterator iterator = deltas.iterator();\r", "+\t\twhile (iterator.hasNext()) {\r", "+\t\t\tIJavaElementDelta delta= (IJavaElementDelta) iterator.next();\r", "+\t\t\tif (DeltaProcessor.VERBOSE){\r", "+\t\t\t\tSystem.out.println(\"FIRING Delta (\"+ Thread.currentThread()+\"):\"+ delta);//$NON-NLS-1$//$NON-NLS-2$\r", "+\t\t\t}\r", "+\t\t\tElementChangedEvent event= new ElementChangedEvent(delta);\r", "+\t\t\t// Clone the listeners since they could remove themselves when told about the event \r", "+\t\t\t// (eg. a type hierarchy becomes invalid (and thus it removes itself) when the type is removed\r", "+\t\t\tArrayList listeners= (ArrayList) fElementChangedListeners.clone();\r", "+\t\t\tfor (int i= 0; i < listeners.size(); i++) {\r", "+\t\t\t\tIElementChangedListener listener= (IElementChangedListener) listeners.get(i);\r", "+\t\t\t\tlistener.elementChanged(event);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "-\t\t\tIterator deltas= null;\r", "-\t\t\tif (fJavaModelDeltas.isEmpty()) {\r", "-\t\t\t\tdeltas= fResourceDeltas.iterator();\r", "-\t\t\t} else {\r", "-\t\t\t\tdeltas= fJavaModelDeltas.iterator();\r", "-\t\t\t}\r", "-\t\t\t\twhile (deltas.hasNext()) {\r", "-\t\t\t\t\tIJavaElementDelta delta= (IJavaElementDelta) deltas.next();\r", "-\t\t\t\t\tif (DeltaProcessor.VERBOSE){\r", "-\t\t\t\t\t\tSystem.out.println(\"FIRING Delta (\"+ Thread.currentThread()+\"):\"+ delta);//$NON-NLS-1$//$NON-NLS-2$\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tElementChangedEvent event= new ElementChangedEvent(delta);\r", "-\t\t\t\t\t// Clone the listeners since they could remove themselves when told about the event \r", "-\t\t\t\t\t// (eg. a type hierarchy becomes invalid (and thus it removes itself) when the type is removed\r", "-\t\t\t\t\tArrayList listeners= (ArrayList) fElementChangedListeners.clone();\r", "-\t\t\t\t\tfor (int i= 0; i < listeners.size(); i++) {\r", "-\t\t\t\t\t\tIElementChangedListener listener= (IElementChangedListener) listeners.get(i);\r", "-\t\t\t\t\t\tlistener.elementChanged(event);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t// empty the queues\r", "-\t\t\t\tflush();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f825e881998eafcb9b00de74c216a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "8dbc99dee143d32d3a96be79f92eced339ac164f", "commitAfterChange": "83bb490aaa27b3be84451721b4409bd67ff52642", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic ClassFile(\r \t\tSourceTypeBinding aType,\r \t\tClassFile enclosingClassFile,\r \t\tboolean creatingProblemType)", "signatureAfterChange": "\r \tpublic ClassFile(\r \t\tSourceTypeBinding aType,\r \t\tClassFile enclosingClassFile,\r \t\tboolean creatingProblemType)", "diff": ["-\t\tint accessFlags = aType.getAccessFlags() | AccSuper;\r", "-\t\tif (aType.isNestedType()) {\r", "-\t\t\tif (aType.isStatic()) {\r", "-\t\t\t\t// clear Acc_Static\r", "-\t\t\t\taccessFlags &= ~AccStatic;\r", "-\t\t\t}\r", "-\t\t\tif (aType.isPrivate()) {\r", "-\t\t\t\t// clear Acc_Private and Acc_Public\r", "-\t\t\t\taccessFlags &= ~(AccPrivate | AccPublic);\r", "-\t\t\t}\r", "-\t\t\tif (aType.isProtected()) {\r", "-\t\t\t\t// clear Acc_Protected and set Acc_Public\r", "-\t\t\t\taccessFlags &= ~AccProtected;\r", "-\t\t\t\taccessFlags |= AccPublic;\r", "-\t\t\t}\r", "+\t\t\r", "+\t\t// Modifier manipulations for classfile\r", "+\t\tint accessFlags = aType.getAccessFlags();\r", "+\t\tif (aType.isProtected()) { // rewrite protected into public\r", "+\t\t\taccessFlags |= AccPublic;\r", "-\r", "+\t\t\t\t\t\r", "+\t\t// set the AccSuper flag (has to be done after clearing AccSynchronized - since same value)\r", "+\t\taccessFlags |= AccSuper;\r", "+\t\t\r"]}], "num": 17408}
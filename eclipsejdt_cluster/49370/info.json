{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ae0df231a47d3d2a249be9cd22a3f9c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b983284ccfe543a1983da190410ba9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "2077a29bc8cfe42c01e5c07aa5d0c90e2eceb36b", "commitAfterChange": "ba2b33c0750d6d7311c1eadcadc15015d0ae8f36", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": " \tprivate void trimWhiteSpacesAndComments(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": " \tprivate void trimWhiteSpacesAndComments(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tint start = expression.sourceStart;", "-\t\tint end = expression.sourceEnd;", "+\t\tint[] positions = trimWhiteSpacesAndComments(expression.sourceStart, expression.sourceEnd);", "+\t\texpression.sourceStart = positions[0];", "+\t\texpression.sourceEnd = positions[1];", "+\t}", "-\t\tint trimLeftPosition = expression.sourceStart;", "-\t\tint trimRightPosition = expression.sourceEnd;", "-\t\t\t\t\t\texpression.sourceStart = trimLeftPosition;", "-\t\t\t\t\t\texpression.sourceEnd = trimRightPosition;", "-\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27739f0e4a78eaa2ca9c319ef37de4cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "commitAfterChange": "dfe6cc33aaef3c9c6160f09ab2a92557f3d235f0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\ttotalUnits = 0;", "-\t\tunitsToProcess = new CompilationUnitDeclaration[maxUnits];", "+\t\tthis.totalUnits = 0;", "+\t\tthis.unitsToProcess = new CompilationUnitDeclaration[maxUnits];", "-\t\t// Switch the current policy and compilation result for this unit to the requested one.", "-\t\tfor (int i = 0; i < maxUnits; i++) {", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tCompilationResult unitResult =", "-\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "-\t\t\ttry {", "-\t\t\t\tif (options.verbose) {", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_request,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(maxUnits),", "-\t\t\t\t\t\t\tnew String(sourceUnits[i].getFileName())", "-\t\t\t\t\t\t}));", "-\t\t\t\t}", "-\t\t\t\t// diet parsing for large collection of units", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t\t}", "-\t\t\t\t// initial type binding creation", "-\t\t\t\tlookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\tthis.addCompilationUnit(sourceUnits[i], parsedUnit);", "-\t\t\t\tImportReference currentPackage = parsedUnit.currentPackage;", "-\t\t\t\tif (currentPackage != null) {", "-\t\t\t\t\tunitResult.recordPackageName(currentPackage.tokens);", "-\t\t\t\t}", "-\t\t\t\t//} catch (AbortCompilationUnit e) {", "-\t\t\t\t//\trequestor.acceptResult(unitResult.tagAsAccepted());", "-\t\t\t} finally {", "-\t\t\t\tsourceUnits[i] = null; // no longer hold onto the unit", "-\t\t\t}", "-\t\t}", "-\t\t// binding resolution", "-\t\tlookupEnvironment.completeTypeBindings();", "-\t}", "+\t\tinternalBeginToCompile(sourceUnits, maxUnits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc24ad9131086b775f22c63fae41bf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public FieldBinding[] fields()", "signatureAfterChange": " public FieldBinding[] fields()", "diff": ["+// NOTE: the type of each field of a source type is resolved when needed", "-\t", "+\tint failed = 0;", "-\t\tint failed = 0;", "-\t\tfor (int f = 0, max = fields.length; f < max; f++) {", "-\t\t\tif (resolveTypeFor(fields[f]) == null) {", "-\t\t\t\tfields[f] = null;", "+\t\tfor (int i = 0, length = fields.length; i < length; i++) {", "+\t\t\tif (resolveTypeFor(fields[i]) == null) {", "+\t\t\t\tfields[i] = null;", "+\t} finally {", "+\t\t\t// ensure fields are consistent reqardless of the error", "-\t\t\tfor (int i = 0, n = 0, max = fields.length; i < max; i++)", "+\t\t\tfor (int i = 0, j = 0, length = fields.length; i < length; i++)", "-\t\t\t\t\tnewFields[n++] = fields[i];", "+\t\t\t\t\tnewFields[j++] = fields[i];", "-\t} catch(AbortCompilation e){", "-\t\t// ensure null fields are removed", "-\t\tFieldBinding[] newFields = null;", "-\t\tint count = 0;", "-\t\tfor (int i = 0, max = fields.length; i < max; i++){", "-\t\t\tFieldBinding field = fields[i];", "-\t\t\tif (field == null && newFields == null){", "-\t\t\t\tSystem.arraycopy(fields, 0, newFields = new FieldBinding[max], 0, i);", "-\t\t\t} else if (newFields != null && field != null) {", "-\t\t\t\tnewFields[count++] = field;", "-\t\t\t}", "-\t\t}", "-\t\tif (newFields != null){", "-\t\t\tSystem.arraycopy(newFields, 0, fields = new FieldBinding[count], 0, count);", "-\t\t}\t\t\t", "-\t\tthrow e;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4338b86b04df6c0df3c0b556f58ee582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "commitAfterChange": "e6d8789df9b4566a0124edc04d16cdf543582e67", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \t  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (compilerOptions.isAnyEnabled(IrritantSet.UNLIKELY_ARGUMENT_TYPE) && this.binding.isValidBinding()) {", "-\t\tTypeBinding[] signatureReplacement = detectAndReplaceDangerousSignature(currentScope);", "-\t\tif (signatureReplacement != null) {", "-\t\t\tint len = this.argumentTypes.length;", "-\t\t\tfor (int i = 0; i < len; i++) {", "-\t\t\t\tTypeBinding expectedArgumentType = signatureReplacement[i];", "-\t\t\t\tTypeBinding argumentType = this.argumentTypes[i];", "-\t\t\t\tif (argumentType.isBaseType())", "-\t\t\t\t\targumentType = currentScope.boxing(argumentType);", "-\t\t\t\tif (!argumentType.isCompatibleWith(expectedArgumentType, currentScope)) {", "-\t\t\t\t\tboolean castable = checkCastTypesCompatibility(currentScope, expectedArgumentType, argumentType, this.arguments[i]);", "-\t\t\t\t\tcurrentScope.problemReporter().discouragedInvocationIncompatibleArgument(this.binding, this.arguments[i],", "-\t\t\t\t\t\t\t\texpectedArgumentType, signatureReplacement[len], castable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "458ae5b4815650aaf769a094c5a90e6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f97b24f3f8e94d8f54a74d9a196551c56851e735", "commitAfterChange": "edd951b2efc6b8f7b24cb3f178fd99c174eb6c7a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "signatureAfterChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] exclusionPatterns)", "diff": ["-\tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns) {", "+\tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] exclusionPatterns) {", "-\t\t// discard empty trimmed patterns", "-\t\t\tString[] trimmedPatterns = exclusionPatterns;", "-\t\tif (exclusionPatterns != null) {", "-\t\t\tint index = 0;", "-\t\t\tint patternCount = exclusionPatterns.length;", "-\t\t\tfor (int i = 0; i < patternCount; i++){", "-\t\t\t\tString pattern;", "-\t\t\t\tif ((pattern = exclusionPatterns[i]) == null) continue;", "-\t\t\t\tString trimmedPattern = exclusionPatterns[i].trim();", "-\t\t\t\tif (trimmedPattern.length() == 0) continue;", "-\t\t\t\t", "-\t\t\t\tif (pattern.length() == trimmedPattern.length()) {", "-\t\t\t\t\tif (trimmedPatterns == exclusionPatterns) { // clone if necessary", "-\t\t\t\t\t\tSystem.arraycopy(exclusionPatterns, 0, trimmedPatterns = new String[patternCount], 0, index);", "-\t\t\t\t\t}", "-\t\t\t\t\ttrimmedPatterns[index] = trimmedPattern;", "-\t\t\t\t}", "-\t\t\t\tindex++;", "-\t\t\t}", "-\t\t\tif (index != patternCount) {", "-\t\t\t\tif (index == 0) {", "-\t\t\t\t\ttrimmedPatterns = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tSystem.arraycopy(trimmedPatterns, 0, trimmedPatterns = new String[index], 0, index);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}\t\t", "-\t\t\ttrimmedPatterns,", "+\t\t\texclusionPatterns,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad64025b3790869f0bbc5018761a653", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\tif ((modifiers & AccUnresolved) == 0)", "+\t\treturn methods;", "+", "+\tint failed = 0;", "-\t\tif ((modifiers & AccUnresolved) == 0)", "-\t\t\treturn methods;", "-\t", "-\t\tint failed = 0;", "-\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "-\t\t\tif (resolveTypesFor(methods[m]) == null) {", "-\t\t\t\tmethods[m] = null; // unable to resolve parameters", "+\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\tif (resolveTypesFor(methods[i]) == null) {", "+\t\t\t\tmethods[i] = null; // unable to resolve parameters", "-\t", "-\t\tfor (int m = methods.length; --m >= 0;) {", "-\t\t\tMethodBinding method = methods[m];", "+", "+\t\t// find & report collision cases", "+\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\tMethodBinding method = methods[i];", "-\t\t\t\tfor (int i = 0; i < m; i++) {", "-\t\t\t\t\tMethodBinding method2 = methods[i];", "+\t\t\t\tfor (int j = length - 1; j > i; j--) {", "+\t\t\t\t\tMethodBinding method2 = methods[j];", "-\t\t\t\t\t\tif (method.areParametersEqual(method2)) {", "+\t\t\t\t\t\tif (method.areParameterErasuresEqual(method2)) {", "-\t\t\t\t\t\t\t\tmethods[m] = null;", "+\t\t\t\t\t\t\t\tmethods[i] = null;", "-\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2.sourceMethod());", "-\t\t\t\t\t\t\tmethod2.sourceMethod().binding = null;", "-\t\t\t\t\t\t\tmethods[i] = null;", "+\t\t\t\t\t\t\tAbstractMethodDeclaration method2Decl = method2.sourceMethod();", "+\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2Decl);", "+\t\t\t\t\t\t\tmethod2Decl.binding = null;", "+\t\t\t\t\t\t\tmethods[j] = null;", "-\t\t\t\t\tmethods[m] = null;", "+\t\t\t\t\tmethods[i] = null;", "-\t", "+\t} finally {", "-\t\t\t\tfor (int m = 0, n = 0, max = methods.length; m < max; m++)", "-\t\t\t\t\tif (methods[m] != null)", "-\t\t\t\t\t\tnewMethods[n++] = methods[m];", "+\t\t\t\tfor (int i = 0, j = 0, length = methods.length; i < length; i++)", "+\t\t\t\t\tif (methods[i] != null)", "+\t\t\t\t\t\tnewMethods[j++] = methods[i];", "-\t", "+", "-\t} catch(AbortCompilation e){", "-\t\t// ensure null methods are removed", "-\t\tMethodBinding[] newMethods = null;", "-\t\tint count = 0;", "-\t\tfor (int i = 0, max = methods.length; i < max; i++){", "-\t\t\tMethodBinding method = methods[i];", "-\t\t\tif (method == null && newMethods == null){", "-\t\t\t\tSystem.arraycopy(methods, 0, newMethods = new MethodBinding[max], 0, i);", "-\t\t\t} else if (newMethods != null && method != null) {", "-\t\t\t\tnewMethods[count++] = method;", "-\t\t\t}", "-\t\t}", "-\t\tif (newMethods != null){", "-\t\t\tSystem.arraycopy(newMethods, 0, methods = new MethodBinding[count], 0, count);", "-\t\t}\t\t\t", "+", "-\t\tthrow e;", "-\tmodifiers ^= AccUnresolved;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0528b95bf9ad7537e1c98ccc0f005b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "e569ccbcfbcb74e518eafb76280b234f1f261194", "commitAfterChange": "2f320253f72e97c287894f0303a7d3fb710470ca", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "diff": ["-\tIndex[] indexes = new Index[length];", "-\tint count = 0;", "-\tIndexManager indexManager = JavaModelManager.getIndexManager();", "-\tfor (int i = 0; i < length; i++) {", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\t// may trigger some index recreation work", "-\t\tIPath indexLocation = indexLocations[i];", "-\t\tIndex index = indexManager.getIndex(indexLocation);", "-\t\tif (index == null) {", "-\t\t\t// only need containerPath if the index must be built", "-\t\t\tIPath containerPath = (IPath) indexManager.indexLocations.keyForValue(indexLocation);", "-\t\t\tif (containerPath != null) // sanity check", "-\t\t\t\tindex = indexManager.getIndex(containerPath, indexLocation, true /*reuse index file*/, false /*do not create if none*/);", "-\t\t}", "-\t\tif (index != null)", "-\t\t\tindexes[count++] = index; // only consider indexes which are ready", "-\t}", "-\tif (count == length) ", "-\t\tthis.areIndexesReady = true;", "-\telse", "-\t\tSystem.arraycopy(indexes, 0, indexes=new Index[count], 0, count);", "+\tIndex[] indexes = JavaModelManager.getIndexManager().getIndexes(indexLocations, progressMonitor);", "+\tthis.areIndexesReady = indexes.length == length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6a7625dd61de1803af7a47b0728d039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 373, "signatureBeforeChange": " protected Annotation[][] getMergedAnnotationsOnDimensions(int dims, Annotation[][] annotationsOnDimensions, \t\tint extendedDims, Annotation[][] annotationsOnExtendedDimensions)", "signatureAfterChange": "  protected TypeReference augmentTypeWithAdditionalDimensions(TypeReference typeReference, int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs)", "diff": ["-}", "-protected Annotation[][] getMergedAnnotationsOnDimensions(int dims, Annotation[][] annotationsOnDimensions,", "-\t\tint extendedDims, Annotation[][] annotationsOnExtendedDimensions) {", "-", "-\tif (annotationsOnDimensions == null && annotationsOnExtendedDimensions == null)", "-\t\treturn null;", "-", "-\tAnnotation [][] mergedAnnotations = new Annotation[dims + extendedDims][];", "-\t", "-\tif (annotationsOnDimensions != null) {", "-\t\tfor (int i = 0; i < dims; i++) {", "-\t\t\tmergedAnnotations[i] = annotationsOnDimensions[i];", "-\t\t} ", "-\t}", "-\tif (annotationsOnExtendedDimensions != null) {", "-\t\tfor (int i = dims, j = 0; i < dims + extendedDims; i++, j++) {", "-\t\t\tmergedAnnotations[i] = annotationsOnExtendedDimensions[j];", "-\t\t}", "-\t}", "-", "-\treturn mergedAnnotations;", "+protected TypeReference augmentTypeWithAdditionalDimensions(TypeReference typeReference, int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs) {", "+\treturn typeReference.augmentTypeWithAdditionalDimensions(additionalDimensions, additionalAnnotations, isVarargs);"]}], "num": 49370}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39d8d75251648676e47a5af7387fe7fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4166f6ad09a3ee2f9cefb9103f3014ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "408302f5651c0f3bdb87a0de2c60492173de703b", "commitAfterChange": "854aca9c52e0b62eeec0af763519f02672c03791", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private boolean projectCanSeeFocusElement(IJavaProject project)", "signatureAfterChange": "\r private boolean referencingProjectsIncludes(IJavaProject javaProject, IPath path) throws JavaModelException", "diff": ["- */\r", "-private boolean projectCanSeeFocusElement(IJavaProject project) {\r", "-\ttry {\r", "-\t\twhile (!(this.focus instanceof IJavaProject) && !(this.focus instanceof JarPackageFragmentRoot)) {\r", "-\t\t\tthis.focus = this.focus.getParent();\r", "-\t\t}\r", "-\t\tif (this.focus instanceof JarPackageFragmentRoot) {\r", "-\t\t\t// this.focus is part of a jar\r", "-\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)this.focus;\r", "-\t\t\tIPath rootPath = root.getPath();\r", "-\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) \r", "-\t\t\t\t\t&& entry.getPath().equals(rootPath)) {\r", "-\t\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn false;\r", "-\t\t} else {\r", "-\t\t\t// this.focus is part of a project\r", "-\t\t\tIJavaProject focusProject = (IJavaProject)this.focus;\r", "-\t\t\tif (project.equals(focusProject)) {\r", "+private boolean referencingProjectsIncludes(IJavaProject javaProject, IPath path) throws JavaModelException {\r", "+\tIJavaModel model = javaProject.getJavaModel();\r", "+\tIProject[] projects = javaProject.getProject().getReferencingProjects();\r", "+\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "+\t\tIProject project = projects[i];\r", "+\t\tIJavaProject referencingProject = model.getJavaProject(project.getName());\r", "+\t\tIClasspathEntry[] classpath = referencingProject.getResolvedClasspath(true);\r", "+\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {\r", "+\t\t\tIClasspathEntry entry = classpath[j];\r", "+\t\t\tif (entry.getPath().equals(path)) {\r", "-\t\t\t} else {\r", "-\t\t\t\tIPath focusPath = focusProject.getProject().getFullPath();\r", "-\t\t\t\tIClasspathEntry[] entries = ((JavaProject)project).getExpandedClasspath(true);\r", "-\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) \r", "-\t\t\t\t\t\t&& entry.getPath().equals(focusPath)) {\r", "-\t\t\t\t\t\t\treturn true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\treturn false;\r", "-\t} catch (JavaModelException e) {\r", "-\t\treturn false;\r", "+\t\tif (this.referencingProjectsIncludes(referencingProject, path)) {\r", "+\t\t\treturn true;\r", "+\t\t}\r", "+\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f1e3200e92e5732d755b8020e2338ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "8eff811a28d835d940585e1dd6e43b7e81d9c25c", "commitAfterChange": "ecd6b6b03e84e16fa2ef3316475695c9990930d4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private boolean canSeeFocus(IPath projectOrJarPath)", "signatureAfterChange": " public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath)", "diff": ["- */", "-private boolean canSeeFocus(IPath projectOrJarPath) {", "-\t// if it is a workspace scope, focus is visible from everywhere", "-\t// if (this.searchScope instanceof JavaWorkspaceScope) return true;", "-\t", "-\treturn canSeeFocus(getProjectOrJar(this.focus), projectOrJarPath);", "+public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearch, IPath projectOrJarPath) {", "+\t\tif (project == null) {", "+\t\t\t// projectOrJarPath is a jar", "+\t\t\t// it can see the focus only if it is on the classpath of a project that can see the focus", "+\t\t\tIJavaProject[] allProjects = model.getJavaProjects();", "+\t\t\tfor (int i = 0, length = allProjects.length; i < length; i++) {", "+\t\t\t\tIJavaProject otherProject = allProjects[i];", "+\t\t\t\tIClasspathEntry[] entries = otherProject.getResolvedClasspath(true);", "+\t\t\t\tfor (int j = 0, length2 = entries.length; j < length2; j++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[j];", "+\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) ", "+\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "+\t\t\t\t\t\t\tif (canSeeFocus(focus, isPolymorphicSearch, otherProject.getPath())) {", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t} else {", "+\t\t\t// projectOrJarPath is a project", "+\t\t\tJavaProject focusProject = focus instanceof JarPackageFragmentRoot ? (JavaProject)focus.getParent() : (JavaProject)focus;", "+\t\t\tif (isPolymorphicSearch) {", "+\t\t\t\t// look for refering project", "+\t\t\t\tIClasspathEntry[] entries = focusProject.getExpandedClasspath(true);", "+\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\t\tif ((entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) ", "+\t\t\t\t\t\t&& entry.getPath().equals(projectOrJarPath)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (focus instanceof JarPackageFragmentRoot) {", "+\t\t\t\t// focus is part of a jar", "+\t\t\t\tIPath focusPath = focus.getPath();", "+\t\t\t\t\t\t&& entry.getPath().equals(focusPath)) {", "+\t\t\t\t// focus is part of a project", "+\t\t\t\tif (focus.equals(project)) {", "+\t\t\t\t\t// look for dependent projects"]}], "num": 8205}
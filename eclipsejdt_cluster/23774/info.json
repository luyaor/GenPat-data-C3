{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df8d351c47f9ebf9c277fbbd8ab2cc9d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "339401ba33e1c76d17adb49d60812621", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "signatureAfterChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "diff": ["+\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "+\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "+\t\t\t\t\t\tif ((fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "+\t\t\t\tif (fieldType != null ", "+\t\t\t\t\t\t&& ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0)", "+\t\t\t\t\t\t&& ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "+\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t\tint size = allTypeAnnotationContexts.size();", "+\t\t\t\tif (size != 0) {", "+\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "+\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "+\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37fb2b849eb49d008e49df7e04e2e859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "21d3c1ac784a9ef78a64389e4df817ec0452ce19", "commitAfterChange": "2c4adf2736a9a7ce066a42070aabd3f4b1ddf5af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset)", "signatureAfterChange": "  public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset)", "diff": ["-\tAnnotationInfo[] annotations = fieldInfo.readAttributes();", "-\tif (annotations == null)", "-\t\treturn fieldInfo;", "-\treturn new FieldInfoWithAnnotation(fieldInfo, annotations);", "+\t", "+\tint attributesCount = fieldInfo.u2At(6);", "+\tint readOffset = 8;", "+\tAnnotationInfo[] annotations = null;", "+\tTypeAnnotationInfo[] typeAnnotations = null;", "+\tfor (int i = 0; i < attributesCount; i++) {", "+\t\t// check the name of each attribute", "+\t\tint utf8Offset = fieldInfo.constantPoolOffsets[fieldInfo.u2At(readOffset)] - fieldInfo.structOffset;", "+\t\tchar[] attributeName = fieldInfo.utf8At(utf8Offset + 3, fieldInfo.u2At(utf8Offset + 1));", "+\t\tif (attributeName.length > 0) {", "+\t\t\tswitch(attributeName[0]) {", "+\t\t\t\tcase 'S' :", "+\t\t\t\t\tif (CharOperation.equals(AttributeNamesConstants.SignatureName, attributeName))", "+\t\t\t\t\t\tfieldInfo.signatureUtf8Offset = fieldInfo.constantPoolOffsets[fieldInfo.u2At(readOffset + 6)] - fieldInfo.structOffset;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'R' :", "+\t\t\t\t\tAnnotationInfo[] decodedAnnotations = null;", "+\t\t\t\t\tTypeAnnotationInfo[] decodedTypeAnnotations = null;", "+\t\t\t\t\tif (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodedAnnotations = fieldInfo.decodeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodedAnnotations = fieldInfo.decodeAnnotations(readOffset, false);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tdecodedTypeAnnotations = fieldInfo.decodeTypeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tdecodedTypeAnnotations = fieldInfo.decodeTypeAnnotations(readOffset, false);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (decodedAnnotations != null) {", "+\t\t\t\t\t\tif (annotations == null) {", "+\t\t\t\t\t\t\tannotations = decodedAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = annotations.length;", "+\t\t\t\t\t\t\tAnnotationInfo[] combined = new AnnotationInfo[length + decodedAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(annotations, 0, combined, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(decodedAnnotations, 0, combined, length, decodedAnnotations.length);", "+\t\t\t\t\t\t\tannotations = combined;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (decodedTypeAnnotations != null) {", "+\t\t\t\t\t\tif (typeAnnotations == null) {", "+\t\t\t\t\t\t\ttypeAnnotations = decodedTypeAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = typeAnnotations.length;", "+\t\t\t\t\t\t\tTypeAnnotationInfo[] combined = new TypeAnnotationInfo[length + decodedTypeAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(typeAnnotations, 0, combined, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(decodedTypeAnnotations, 0, combined, length, decodedTypeAnnotations.length);", "+\t\t\t\t\t\t\ttypeAnnotations = combined;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treadOffset += (6 + fieldInfo.u4At(readOffset + 2));", "+\t}", "+\tfieldInfo.attributeBytes = readOffset;", "+\t", "+\tif (typeAnnotations != null)", "+\t\treturn new FieldInfoWithTypeAnnotation(fieldInfo, annotations, typeAnnotations);", "+\tif (annotations != null)", "+\t\treturn new FieldInfoWithAnnotation(fieldInfo, annotations);", "+\treturn fieldInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "808657a6d37c027664f230cbbd952352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "signatureAfterChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "diff": ["-", "+\t\t", "-\t\t\tList allTypeAnnotationContexts = ((TypeAnnotationCodeStream) this.codeStream).allTypeAnnotationContexts;", "+\t\t\tList allTypeAnnotationContexts = new ArrayList();", "-\t\t\tfor (int i = 0, max = this.codeStream.allLocalsCounter; i < max; i++) {", "-\t\t\t\tLocalVariableBinding localVariable = this.codeStream.locals[i];", "-\t\t\t\tLocalDeclaration declaration = localVariable.declaration;", "-\t\t\t\tif (declaration == null", "-\t\t\t\t\t\t|| (declaration.isArgument() && ((declaration.bits & ASTNode.IsUnionType) == 0))", "-\t\t\t\t\t\t|| (localVariable.initializationCount == 0)", "-\t\t\t\t\t\t|| ((declaration.bits & ASTNode.HasTypeAnnotations) == 0)) {", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tdeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.LOCAL_VARIABLE, localVariable, allTypeAnnotationContexts);", "-\t\t\t}", "-\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_PARAMETER, i, allTypeAnnotationContexts);", "+\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, i, allTypeAnnotationContexts);", "-\t\t\t\t\tAnnotation[] annotations = (methodDeclaration.receiver==null?null:methodDeclaration.receiver.annotations);", "-\t\t\t\t\tif (annotations != null) {", "-\t\t\t\t\t\tfor (int i = 0, max = annotations.length; i < max; i++) {", "-\t\t\t\t\t\t\tAnnotation annotation = annotations[i];", "-\t\t\t\t\t\t\tAnnotationContext annotationContext = null;", "-\t\t\t\t\t\t\tif (annotation.isRuntimeTypeInvisible()) {", "-\t\t\t\t\t\t\t\tannotationContext = new AnnotationContext(annotation, null, AnnotationTargetTypeConstants.METHOD_RECEIVER, null, AnnotationContext.INVISIBLE, null);", "-\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\t} else if (annotation.isRuntimeTypeVisible()) {", "-\t\t\t\t\t\t\t\tannotationContext = new AnnotationContext(annotation, null, AnnotationTargetTypeConstants.METHOD_RECEIVER, null, AnnotationContext.VISIBLE, null);", "-\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (annotationContext != null) {", "-\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\tReceiver receiver = methodDeclaration.receiver;", "+\t\t\t\t\tif (receiver != null && (receiver.type.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\treceiver.type.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RECEIVER, allTypeAnnotationContexts);", "-\t\t\t\t\tmethodDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN_TYPE, allTypeAnnotationContexts);", "+\t\t\t\t\tmethodDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN, allTypeAnnotationContexts);", "-\t\t\t\t\t\ttypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN_TYPE, allTypeAnnotationContexts);", "+\t\t\t\t\t\ttypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN, allTypeAnnotationContexts);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847f8a2b5037e727d2649f8ed33c0cc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "990743369489693dca5f5fa68483b66fb1bdecda", "commitAfterChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "signatureAfterChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "diff": ["-\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {", "-\t\tAnnotationBinding[] instances = null;", "-\t\tint length = annotations == null ? 0 : annotations.length;", "+\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient) {", "+\t\tAnnotationBinding[] annotations = null;", "+\t\tint length = sourceAnnotations == null ? 0 : sourceAnnotations.length;", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\ttype.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\ttype.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tmethod.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tmethod.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tfield.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tfield.setAnnotations(annotations);", "-\t\t\t\t\t\tinstances = new AnnotationBinding[length];", "-\t\t\t\t\t\tlocal.setAnnotations(instances);", "+\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "+\t\t\t\t\t\tlocal.setAnnotations(annotations);", "-\t\tif (annotations == null)", "+\t\tif (sourceAnnotations == null)", "-\t\tTypeBinding[] annotationTypes = new TypeBinding[length];", "-\t\t\tAnnotation annotation = annotations[i];", "+\t\t\tAnnotation annotation = sourceAnnotations[i];", "-\t\t\t\tif (instances != null) {", "+\t\t\t\tif (annotations != null) {", "-\t\t\t\t\tinstances[0] = annotation.getCompilerAnnotation();", "+\t\t\t\t\tannotations[0] = annotation.getCompilerAnnotation();", "-\t\t\t\t\t\tAnnotation annot = annotations[j];", "-\t\t\t\t\t\tinstances[j] = annot.getCompilerAnnotation();", "+\t\t\t\t\t\tAnnotation annot = sourceAnnotations[j];", "+\t\t\t\t\t\tannotations[j] = annot.getCompilerAnnotation();", "-\t\t\t\tannotationTypes[i] = annotation.resolveType(scope);", "+\t\t\t\tannotation.resolveType(scope);", "-\t\t\t\tif (instances != null) {", "-\t\t\t\t\tinstances[i] = annotation.getCompilerAnnotation();", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tannotations[i] = annotation.getCompilerAnnotation();", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeBinding annotationType = annotationTypes[i];", "-\t\t\tif (annotationType == null) continue;", "-\t\t\tboolean foundDuplicate = false;", "-\t\t\tfor (int j = i+1; j < length; j++) {", "-\t\t\t\tif (annotationTypes[j] == annotationType) {", "-\t\t\t\t\tfoundDuplicate = true;", "-\t\t\t\t\tannotationTypes[j] = null; // report it only once", "-\t\t\t\t\tscope.problemReporter().duplicateAnnotation(annotations[j]);", "+\t\tif (annotations != null) {", "+\t\t\tAnnotationBinding[] distinctAnnotations = annotations; // only copy after 1st duplicate is detected", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAnnotationBinding annotation = distinctAnnotations[i];", "+\t\t\t\tif (annotation == null) continue;", "+\t\t\t\tTypeBinding annotationType = annotation.getAnnotationType();", "+\t\t\t\tboolean foundDuplicate = false;", "+\t\t\t\tfor (int j = i+1; j < length; j++) {", "+\t\t\t\t\tif (distinctAnnotations[j].getAnnotationType() == annotationType) {", "+\t\t\t\t\t\tfoundDuplicate = true;", "+\t\t\t\t\t\tif (distinctAnnotations == annotations) {", "+\t\t\t\t\t\t\tSystem.arraycopy(distinctAnnotations, 0, distinctAnnotations = new AnnotationBinding[length], 0, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdistinctAnnotations[j] = null; // report it only once", "+\t\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[j]);", "+\t\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (foundDuplicate) {", "-\t\t\t\tscope.problemReporter().duplicateAnnotation(annotations[i]);", "+\t\t\t\tif (foundDuplicate) {", "+\t\t\t\t\tscope.problemReporter().duplicateAnnotation(sourceAnnotations[i]);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc05911496fb318cb3988bcf69baf56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "signatureAfterChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "diff": ["-\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "-\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "-\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "-\t\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "-\t\t\t\t\t\tif ((fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "-\t\t\t\tif (fieldType != null ", "-\t\t\t\t\t\t&& ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0)", "-\t\t\t\t\t\t&& ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "-\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "-\t\t\t\t}", "-\t\t\t\tint size = allTypeAnnotationContexts.size();", "-\t\t\t\tif (size != 0) {", "-\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "-\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "-\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "-\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "-\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "-\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "-\t\t\t\t\t\t}", "+", "+\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "+\t\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "+\t\t\t\t\tif (annotations != null && (fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "-\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "-\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "-\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "-\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);", "+\t\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "+\t\t\t\t\tif (fieldType != null && ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "+\t\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t\t}", "+\t\t\t\t\tint size = allTypeAnnotationContexts.size();", "+\t\t\t\t\tif (size != 0) {", "+\t\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "+\t\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "+\t\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4b518e9e4e9e68c6b5cfd9d67be52a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprivate static int[] getWildcardLocations(TypeReference reference, Wildcard wildcard)", "signatureAfterChange": " \t \tpublic int generateTypeAnnotationsOnCodeAttribute()", "diff": ["-\t */", "-\tprivate static int[] getWildcardLocations(TypeReference reference, Wildcard wildcard) {", "-\t\tclass LocationCollector extends ASTVisitor {", "-\t\t\tStack currentIndexes;", "-\t\t\tboolean search = true;", "-\t\t\tWildcard currentWildcard;", "-\t\t\t", "-\t\t\tpublic LocationCollector(Wildcard currentWildcard) {", "-\t\t\t\tthis.currentIndexes = new Stack();", "-\t\t\t\tthis.currentWildcard = currentWildcard;", "-\t\t\t}", "-\t\t\tpublic boolean visit(ParameterizedSingleTypeReference typeReference, BlockScope scope) {", "-\t\t\t\tif (!this.search) return false;", "-\t\t\t\tTypeReference[] typeReferences = typeReference.typeArguments;", "-\t\t\t\tthis.currentIndexes.push(new Integer(0));", "-\t\t\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "-\t\t\t\t\ttypeReferences[i].traverse(this, scope);", "-\t\t\t\t\tif (!this.search) return false;", "-\t\t\t\t\tthis.currentIndexes.push(new Integer(((Integer) this.currentIndexes.pop()).intValue() + 1));", "-\t\t\t\t}", "-\t\t\t\tthis.currentIndexes.pop();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic boolean visit(ParameterizedQualifiedTypeReference typeReference, BlockScope scope) {", "-\t\t\t\tif (!this.search) return false;", "-\t\t\t\tTypeReference[] typeReferences = typeReference.typeArguments[typeReference.typeArguments.length - 1];", "-\t\t\t\tthis.currentIndexes.push(new Integer(0));", "-\t\t\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "-\t\t\t\t\ttypeReferences[i].traverse(this, scope);", "-\t\t\t\t\tif (!this.search) return false;", "-\t\t\t\t\tthis.currentIndexes.push(new Integer(((Integer) this.currentIndexes.pop()).intValue() + 1));", "-\t\t\t\t}", "-\t\t\t\tthis.currentIndexes.pop();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic boolean visit(Wildcard typeReference, BlockScope scope) {", "-\t\t\t\tif (!this.search) return false;", "-\t\t\t\tif (typeReference.equals(this.currentWildcard)) {", "-\t\t\t\t\tthis.search = false;", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic String toString() {", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(\"search location for \") //$NON-NLS-1$", "-\t\t\t\t\t.append(this.currentWildcard)", "-\t\t\t\t\t.append(\"\\ncurrent indexes : \") //$NON-NLS-1$", "-\t\t\t\t\t.append(this.currentIndexes);", "-\t\t\t\treturn String.valueOf(buffer);", "-\t\t\t}", "-\t\t}", "-\t\tif (reference == null) return null;", "-\t\tLocationCollector collector = new LocationCollector(wildcard);", "-\t\treference.traverse(collector, (BlockScope) null);", "-\t\tif (collector.currentIndexes.isEmpty()) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tint size = collector.currentIndexes.size();", "-\t\tint[] result = new int[size];", "-\t\tfor (int i = 0; i < size; i++) {", "-\t\t\tresult[size - i - 1] = ((Integer) collector.currentIndexes.pop()).intValue();", "-\t\t}", "-\t\treturn result;", "-\t}", "+\t", "+\tpublic int generateTypeAnnotationsOnCodeAttribute() {", "+\t\tint attributesNumber = 0;", "+\t\t", "+\t\tList allTypeAnnotationContexts = ((TypeAnnotationCodeStream) this.codeStream).allTypeAnnotationContexts;", "+\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\tint visibleTypeAnnotationsCounter = 0;", "+", "+\t\tfor (int i = 0, max = this.codeStream.allLocalsCounter; i < max; i++) {", "+\t\t\tLocalVariableBinding localVariable = this.codeStream.locals[i];", "+\t\t\tif (localVariable.isCatchParameter()) continue;", "+\t\t\tLocalDeclaration declaration = localVariable.declaration;", "+\t\t\tif (declaration == null", "+\t\t\t\t\t|| (declaration.isArgument() && ((declaration.bits & ASTNode.IsUnionType) == 0))", "+\t\t\t\t\t|| (localVariable.initializationCount == 0)", "+\t\t\t\t\t|| ((declaration.bits & ASTNode.HasTypeAnnotations) == 0)) {", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tint targetType = ((localVariable.tagBits & TagBits.IsResource) == 0) ? AnnotationTargetTypeConstants.LOCAL_VARIABLE : AnnotationTargetTypeConstants.RESOURCE_VARIABLE;", "+\t\t\tdeclaration.getAllAnnotationContexts(targetType, localVariable, allTypeAnnotationContexts);", "+\t\t}", "+\t\t", "+\t\tExceptionLabel[] exceptionLabels = this.codeStream.exceptionLabels;", "+\t\tint tableIndex = 0;", "+\t\tfor (int i = 0, max = this.codeStream.exceptionLabelsCounter; i < max; i++) {", "+\t\t\tExceptionLabel exceptionLabel = exceptionLabels[i];", "+\t\t\tif (exceptionLabel instanceof MultiCatchExceptionLabel) {", "+\t\t\t\tMultiCatchExceptionLabel multiCatchExceptionLabel = (MultiCatchExceptionLabel)exceptionLabel;", "+\t\t\t\ttableIndex += multiCatchExceptionLabel.getAllAnnotationContexts(tableIndex, allTypeAnnotationContexts);", "+\t\t\t} else {", "+\t\t\t\tif (exceptionLabel.exceptionTypeReference != null) { // ignore those which cannot be annotated", "+\t\t\t\t\texceptionLabel.exceptionTypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.EXCEPTION_PARAMETER, tableIndex, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t\ttableIndex++;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tint size = allTypeAnnotationContexts.size();", "+\t\tif (size != 0) {", "+\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\tfor (int j = 0, max2 = allTypeAnnotationContextsArray.length; j < max2; j++) {", "+\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[j];", "+\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t} else {", "+\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\tinvisibleTypeAnnotationsCounter);", "+\t\t}", "+\t\treturn attributesNumber;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8dbf2db60ee227121cd0d7ff1ad4cc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "signatureAfterChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "diff": ["+", "+\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "+\t\t\tList allTypeAnnotationContexts = ((TypeAnnotationCodeStream) this.codeStream).allTypeAnnotationContexts;", "+\t\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\t\tint visibleTypeAnnotationsCounter = 0;", "+\t\t\tfor (int i = 0, max = this.codeStream.allLocalsCounter; i < max; i++) {", "+\t\t\t\tLocalVariableBinding localVariable = this.codeStream.locals[i];", "+\t\t\t\tLocalDeclaration declaration = localVariable.declaration;", "+\t\t\t\tif (declaration == null", "+\t\t\t\t\t\t|| (declaration.isArgument() && ((declaration.bits & ASTNode.IsUnionType) == 0))", "+\t\t\t\t\t\t|| (localVariable.initializationCount == 0)", "+\t\t\t\t\t\t|| ((declaration.bits & ASTNode.HasTypeAnnotations) == 0)) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tdeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.LOCAL_VARIABLE, localVariable, allTypeAnnotationContexts);", "+\t\t\t}", "+\t\t\tAbstractMethodDeclaration methodDeclaration = binding.sourceMethod();", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tif ((methodDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\tArgument[] arguments = methodDeclaration.arguments;", "+\t\t\t\t\tif (arguments != null) {", "+\t\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tArgument argument = arguments[i];", "+\t\t\t\t\t\t\tif ((argument.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_PARAMETER, i, allTypeAnnotationContexts);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tAnnotation[] annotations = (methodDeclaration.receiver==null?null:methodDeclaration.receiver.annotations);", "+\t\t\t\t\tif (annotations != null) {", "+\t\t\t\t\t\tfor (int i = 0, max = annotations.length; i < max; i++) {", "+\t\t\t\t\t\t\tAnnotation annotation = annotations[i];", "+\t\t\t\t\t\t\tAnnotationContext annotationContext = null;", "+\t\t\t\t\t\t\tif (annotation.isRuntimeTypeInvisible()) {", "+\t\t\t\t\t\t\t\tannotationContext = new AnnotationContext(annotation, null, AnnotationTargetTypeConstants.METHOD_RECEIVER, null, AnnotationContext.INVISIBLE, null);", "+\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\t} else if (annotation.isRuntimeTypeVisible()) {", "+\t\t\t\t\t\t\t\tannotationContext = new AnnotationContext(annotation, null, AnnotationTargetTypeConstants.METHOD_RECEIVER, null, AnnotationContext.VISIBLE, null);", "+\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (annotationContext != null) {", "+\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tAnnotation[] annotations = methodDeclaration.annotations;", "+\t\t\t\tif (annotations != null && binding.returnType.id != T_void) {", "+\t\t\t\t\tmethodDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN_TYPE, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t\tif (!methodDeclaration.isConstructor() && !methodDeclaration.isClinit() && binding.returnType.id != T_void) {", "+\t\t\t\t\tMethodDeclaration declaration = (MethodDeclaration) methodDeclaration;", "+\t\t\t\t\tTypeReference typeReference = declaration.returnType;", "+\t\t\t\t\tif ((typeReference.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\ttypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN_TYPE, allTypeAnnotationContexts);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTypeReference[] thrownExceptions = methodDeclaration.thrownExceptions;", "+\t\t\t\tif (thrownExceptions != null) {", "+\t\t\t\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {", "+\t\t\t\t\t\tTypeReference thrownException = thrownExceptions[i];", "+\t\t\t\t\t\tthrownException.getAllAnnotationContexts(AnnotationTargetTypeConstants.THROWS, i, allTypeAnnotationContexts);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\t\t\tif (typeParameters != null) {", "+\t\t\t\t\tfor (int i = 0, max = typeParameters.length; i < max; i++) {", "+\t\t\t\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\t\t\t\tif ((typeParameter.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\t\ttypeParameter.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER, i, allTypeAnnotationContexts);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint size = allTypeAnnotationContexts.size();", "+\t\t\tif (size != 0) {", "+\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\t\tfor (int j = 0, max2 = allTypeAnnotationContextsArray.length; j < max2; j++) {", "+\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[j];", "+\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);", "+\t\t\t}", "+\t\t}", "+"]}], "num": 23774}
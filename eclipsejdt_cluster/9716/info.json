{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e20927fd229e392b6631ad34633670cc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c280641704669f937c9a90fc6a24ee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "fe6a884d07923baa40d9529cf7f3a98ef01ac1de", "commitAfterChange": "1aa4cd735bf7026e52f4628e91c000e2311012b1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "signatureAfterChange": " \tprivate void searchVisibleVariablesAndMethods( \t\t\tScope scope, \t\t\tObjectVector localsFound, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector methodsFound, \t\t\tboolean notInJavadoc)", "diff": ["-", "+\t\t\t\t\t\t// If the local variable declaration's initialization statement itself has the completion,", "+\t\t\t\t\t\t// then don't propose the local variable", "+\t\t\t\t\t\tif (local.declaration.initialization != null) {", "+\t\t\t\t\t\t\tif(local.declaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\t\t\t\t\tif (this.assistNode.sourceEnd <= local.declaration.initialization.sourceEnd", "+\t\t\t\t\t\t\t\t\t\t\t&& this.assistNode.sourceStart >= local.declaration.initialization.sourceStart) {", "+\t\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(", "+\t\t\t\t\t\t\t\t\t\tthis.assistNode,", "+\t\t\t\t\t\t\t\t\t\tlocal.declaration.initialization);", "+\t\t\t\t\t\t\t\tif (detector.containsCompletionNode()) {", "+\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88eafd98a898c94e960b336212f352c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2b25437c1d081a8e45247264663df433e9d9e360", "commitAfterChange": "b6b8173d4f9c7b0fe8067e052e4660cc0c1fa5df", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\tif (fieldDeclaration != null && fieldDeclaration.initialization != null) {", "-\t\t\t\t// We're asking for a proposal inside this field's initialization. So record its id", "-\t\t\t\tfieldBeingCompletedId = field.id;", "-\t\t\t\tbreak;", "+\t\t\t// We maybe asking for a proposal inside this field's initialization. So record its id", "+\t\t\tASTNode astNode = this.parser.assistNode;", "+\t\t\tif (fieldDeclaration != null && fieldDeclaration.initialization != null && astNode != null) {", "+\t\t\t\tif (fieldDeclaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\tif (fieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\tfieldBeingCompletedId = field.id;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else { // The sourceEnd may not yet be set", "+\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(astNode, fieldDeclaration.initialization);", "+\t\t\t\t\tif (detector.containsCompletionNode()) {  // completion is inside a field initializer", "+\t\t\t\t\t\tfieldBeingCompletedId = field.id;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 9716}
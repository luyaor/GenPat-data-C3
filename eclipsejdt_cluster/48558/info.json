{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6b894e5a7d1d146c11b09da824ee263", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e5ef96a4614f30d677fa069b78285f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "b3a2f7bfaa3438c01da8001220d197a764da19bb", "commitAfterChange": "40a85c2d4c57226c917bc0f991a26ac5a5d8b085", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 197, "signatureBeforeChange": " \tpublic void test0552() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0552() throws JavaModelException", "diff": ["-\t */", "-\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\", \"src\", \"test0552\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\", \"src\", \"test0552\", \"Test.java\");", "-\t\tASTNode result = runConversion(sourceUnit, false);", "-\t\tassertEquals(\"not a compilation unit\", ASTNode.COMPILATION_UNIT, result.getNodeType()); //$NON-NLS-1$", "+\t\tCompilationUnit result = (CompilationUnit) runConversion(sourceUnit, true);", "+\t\tassertEquals(\"Got errors\", 0, result.getProblems().length);", "+\t\tTypeDeclaration declaration = (TypeDeclaration) result.types().get(0);", "+\t\tBlock body = declaration.getMethods()[0].getBody();", "+\t\tExpressionStatement expr = (ExpressionStatement) body.statements().get(0);", "+\t\tMethodInvocation invocation = (MethodInvocation) expr.getExpression();", "+\t\tInfixExpression node = (InfixExpression) invocation.arguments().get(0);", "+\t\tITypeBinding typeBinding = node.resolveTypeBinding();", "+\t\tassertEquals(\"wrong type\", \"java.lang.String\", typeBinding.getQualifiedName());", "+\t\tcheckSourceRange(node, \"\\\"a\\\" + \\\"a\\\" + \\\"a\\\"\", source);", "+\t\tList extendedOperands = node.extendedOperands();", "+\t\tassertEquals(\"Wrong size\", 1, extendedOperands.size());", "+\t\tExpression leftOperand = node.getLeftOperand();", "+\t\tcheckSourceRange(leftOperand, \"\\\"a\\\"\", source);", "+\t\ttypeBinding = leftOperand.resolveTypeBinding();", "+\t\tassertEquals(\"wrong type\", \"java.lang.String\", typeBinding.getQualifiedName());", "+\t\tExpression rightOperand = node.getRightOperand();", "+\t\tcheckSourceRange(rightOperand, \"\\\"a\\\"\", source);", "+\t\ttypeBinding = rightOperand.resolveTypeBinding();", "+\t\tassertEquals(\"wrong type\", \"java.lang.String\", typeBinding.getQualifiedName());", "+\t\tExpression expression = (Expression) extendedOperands.get(0);", "+\t\tcheckSourceRange(expression, \"\\\"a\\\"\", source);", "+\t\ttypeBinding = expression.resolveTypeBinding();", "+\t\tassertEquals(\"wrong type\", \"java.lang.String\", typeBinding.getQualifiedName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3b31ec426430e8e0a8e4e70e4611dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \t \tpublic IJavaElement getJavaElement()", "diff": ["-\t\tITypeBinding annotationType = getAnnotationType();", "-\t\tif (annotationType == null)", "+\t\tif (!(this.bindingResolver instanceof DefaultBindingResolver)) return null;", "+\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.bindingResolver).bindingsToAstNodes.get(this);", "+\t\tif (!(node instanceof Annotation)) return null;", "+\t\tASTNode parent = node.getParent();", "+\t\tIJavaElement parentElement = null;", "+\t\tswitch (parent.getNodeType()) {", "+\t\tcase ASTNode.PACKAGE_DECLARATION:", "+\t\t\tIJavaElement cu = ((CompilationUnit) parent.getParent()).getJavaElement();", "+\t\t\tif (cu instanceof ICompilationUnit) {", "+\t\t\t\tString pkgName = ((PackageDeclaration) parent).getName().getFullyQualifiedName();", "+\t\t\t\tparentElement =  ((ICompilationUnit) cu).getPackageDeclaration(pkgName);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase ASTNode.TYPE_DECLARATION:", "+\t\t\tparentElement = ((TypeDeclaration) parent).resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tcase ASTNode.FIELD_DECLARATION:", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) ((FieldDeclaration) parent).fragments().get(0);", "+\t\t\tparentElement = fragment.resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tcase ASTNode.METHOD_DECLARATION:", "+\t\t\tparentElement = ((MethodDeclaration) parent).resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT:", "+\t\t\tfragment = (VariableDeclarationFragment) ((VariableDeclarationStatement) parent).fragments().get(0);", "+\t\t\tparentElement = fragment.resolveBinding().getJavaElement();", "+\t\t\tbreak;", "+\t\tdefault:", "-\t\treturn annotationType.getJavaElement();", "+\t\t}", "+\t\tif (! (parentElement instanceof IAnnotatable)) return null;", "+\t\treturn ((IAnnotatable) parentElement).getAnnotation(getName());"]}], "num": 48558}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52eadd4f14eaecb6049e49bfb48df6f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d178251e0b24b330ea987d9cd1faffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedTypeHierarchy.java", "commitBeforeChange": "8e8d8e45c2ef2f6ead0467d2ea8c6dadb189ddb8", "commitAfterChange": "b3d1d871406f56d8ee454b6524d9decdbf5e4860", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public RegionBasedTypeHierarchy(IRegion region, ICompilationUnit[] workingCopies, IType type, boolean computeSubtypes)", "signatureAfterChange": " public RegionBasedTypeHierarchy(IRegion region, ICompilationUnit[] workingCopies, IType type, boolean computeSubtypes)", "diff": ["-\tthis.region = region;", "+\t", "+\tRegion newRegion = new Region() {", "+\t\tpublic void add(IJavaElement element) {", "+\t\t\tif (!contains(element)) {", "+\t\t\t\t//\"new\" element added to region", "+\t\t\t\tremoveAllChildren(element);", "+\t\t\t\tfRootElements.add(element);", "+\t\t\t\tif (element.getElementType() == IJavaElement.JAVA_PROJECT) {", "+\t\t\t\t\t// add jar roots as well so that jars don't rely on their parent to know ", "+\t\t\t\t\t// if they are contained in the region", "+\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=146615)", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = ((IJavaProject) element).getPackageFragmentRoots();", "+\t\t\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\t\t\t\tif (roots[i].isArchive() && !fRootElements.contains(roots[i]))", "+\t\t\t\t\t\t\t\tfRootElements.add(roots[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// project doesn't exist", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tfRootElements.trimToSize();", "+\t\t\t}", "+\t\t}", "+\t};", "+\tfor (int i = 0, length = elements.length; i < length; i++) {", "+\t\tnewRegion.add(elements[i]);", "+\t\t", "+\t}", "+\tthis.region = newRegion;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94e769ad3bda6c0fe951d6dc545e51f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "dbadb98550952623b726dd998146fbf52c65b243", "commitAfterChange": "2bf8c3e6cfdd23abdb50efdd7ca63654ea4ff3b0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public Index[] getIndexes(IPath[] locations, IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IPath[] locations, IProgressMonitor progressMonitor)", "diff": ["+\tif (this.javaLikeNamesChanged) {", "+\t\tthis.javaLikeNamesChanged = hasJavaLikeNamesChanged();", "+\t}", "-\t\t\tif (containerPath != null) // sanity check", "+\t\t\tif (containerPath != null) {// sanity check", "+\t\t\t\tif (index != null && this.javaLikeNamesChanged && !index.isIndexForJar()) {", "+\t\t\t\t\t// When a change in java like names extension has been detected, all", "+\t\t\t\t\t// non jar files indexes (i.e. containing sources) need to be rebuilt.", "+\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=286379", "+\t\t\t\t\tFile indexFile = index.getIndexFile();", "+\t\t\t\t\tif (indexFile.exists()) {", "+\t\t\t\t\t\tif (DEBUG)", "+\t\t\t\t\t\t\tUtil.verbose(\"Change in javaLikeNames - removing index file for \" + containerPath ); //$NON-NLS-1$", "+\t\t\t\t\t\tindexFile.delete();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.indexes.put(indexLocation, null);", "+\t\t\t\t\trebuildIndex(indexLocation, containerPath);", "+\t\t\t\t\tindex = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t}", "+\tif (this.javaLikeNamesChanged) {", "+\t\twriteJavaLikeNamesFile();", "+\t\tthis.javaLikeNamesChanged = false;"]}], "num": 41483}
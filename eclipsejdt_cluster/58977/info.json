{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0814a880bdcc4aaeb4f0a5d66ed0bbd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13241beb855bee89a0e8ea4ece43627d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "dd64a16174459dffe3d8fb64c70f9bdbed3cfd5d", "commitAfterChange": "ec24afa0a22b3cf783f13e68616c04d9e4a9bca3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "diff": ["-\t\ttry {", "-\t\t\tIterator iterator = this.refreshedElements.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "-\t\t\t\tswitch(element.getElementType()){", "-\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "-\t\t\t\t\t\tarchivePathsToRefresh.add(element.getPath());", "+\t\tIterator iterator = this.refreshedElements.iterator();", "+\t\tthis.refreshedElements = null; // null out early to avoid concurrent modification exception (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=63534)", "+\t\twhile (iterator.hasNext()) {", "+\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "+\t\t\tswitch(element.getElementType()){", "+\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "+\t\t\t\t\tarchivePathsToRefresh.add(element.getPath());", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IJavaElement.JAVA_PROJECT :", "+\t\t\t\t\tJavaProject project = (JavaProject) element;", "+\t\t\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\t\t\t\t// project is not accessible or has lost its Java nature", "-\t\t\t\t\tcase IJavaElement.JAVA_PROJECT :", "-\t\t\t\t\t\tJavaProject project = (JavaProject) element;", "+\t\t\t\t\t}", "+\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){", "+\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "+\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// project doesn't exist -> ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IJavaElement.JAVA_MODEL :", "+\t\t\t\t\tIJavaProject[] projects;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\t\t\t} catch (JavaModelException e1) {", "+\t\t\t\t\t\t// cannot retrieve old projects list -> ignore", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int j = 0, projectsLength = projects.length; j < projectsLength; j++){", "+\t\t\t\t\t\tproject = (JavaProject) projects[j];", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tIClasspathEntry[] classpath;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){", "-\t\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "-\t\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// project doesn't exist -> ignore", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.JAVA_MODEL :", "-\t\t\t\t\t\tIJavaProject[] projects;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\t\t\t\t} catch (JavaModelException e1) {", "-\t\t\t\t\t\t\t// cannot retrieve old projects list -> ignore", "-\t\t\t\t\t\tfor (int j = 0, projectsLength = projects.length; j < projectsLength; j++){", "-\t\t\t\t\t\t\tproject = (JavaProject) projects[j];", "-\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "-\t\t\t\t\t\t\t\t// project is not accessible or has lost its Java nature", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\t\t\t} catch (JavaModelException e2) {", "-\t\t\t\t\t\t\t\t// project doesn't exist -> ignore", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfor (int k = 0, cpLength = classpath.length; k < cpLength; k++){", "-\t\t\t\t\t\t\t\tif (classpath[k].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "-\t\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[k].getPath());", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\t} catch (JavaModelException e2) {", "+\t\t\t\t\t\t\t// project doesn't exist -> ignore", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int k = 0, cpLength = classpath.length; k < cpLength; k++){", "+\t\t\t\t\t\t\tif (classpath[k].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "+\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[k].getPath());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t} finally {", "-\t\t\tthis.refreshedElements = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce789386a8b7f54714b354d0d8f954b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f6037f3e0e76e18ea82dd93d13e55dc410583456", "commitAfterChange": "a5577117cb4a612450eddce3c0b20eb90f21cb89", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tJavaProject project = (JavaProject) element;", "-\t\t\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\t\t\tJavaProject javaProject = (JavaProject) element;", "+\t\t\t\t\tif (!JavaProject.hasJavaNature(javaProject.getProject())) {", "-\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\tclasspath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\tIJavaProject[] projects;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t\t\t\t} catch (JavaModelException e1) {", "-\t\t\t\t\t\t// cannot retrieve old projects list -> ignore", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int j = 0, projectsLength = projects.length; j < projectsLength; j++){", "-\t\t\t\t\t\tproject = (JavaProject) projects[j];", "-\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\t\t\tIterator projectNames = this.state.getOldJavaProjecNames().iterator();", "+\t\t\t\t\twhile (projectNames.hasNext()) {", "+\t\t\t\t\t\tString projectName = (String) projectNames.next();", "+\t\t\t\t\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);", "+\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\tjavaProject = (JavaProject) JavaCore.create(project);", "-\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\t\t\t\tclasspath = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\tIJavaProject[] projects;", "-\t\ttry {", "-\t\t\tprojects = this.manager.getJavaModel().getOldJavaProjectsList();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// cannot retrieve old projects list -> give up", "-\t\t\treturn false;", "-\t\t}", "+\t\tIterator projectNames = this.state.getOldJavaProjecNames().iterator();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\twhile (projectNames.hasNext()) {", "-\t\t\tJavaProject project = (JavaProject) projects[i];", "-\t\t\tif (!JavaProject.hasJavaNature(project.getProject())) {", "+\t\t\tString projectName = (String) projectNames.next();", "+\t\t\tIProject project = wksRoot.getProject(projectName);", "+\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\tJavaProject javaProject = (JavaProject) JavaCore.create(project);", "-\t\t\t\tentries = project.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "+\t\t\t\tentries = javaProject.getResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/);", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());", "-\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)project.getPackageFragmentRoot(entryPath.toString());", "+\t\t\t\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());"]}], "num": 58977}
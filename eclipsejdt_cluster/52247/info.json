{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c367133e9019a8be12eb1c643aa5fcf1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c496a88cf95300bf2e4d0cad90176c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "1ce14f7d38953baa0407a7c04bf1e650dc1a4ab4", "commitAfterChange": "188c9c7dc3851a0a188854f7875a3d0a8c55cb71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, IClasspathEntry[] focusEntriesForPolymorphicSearch)", "signatureAfterChange": " private static boolean canSeeFocus(IJavaElement[] focuses, JavaProject javaProject)", "diff": ["-public static boolean canSeeFocus(IJavaElement focus, JavaProject javaProject, IClasspathEntry[] focusEntriesForPolymorphicSearch) {", "+private static boolean canSeeFocus(IJavaElement[] focuses, JavaProject javaProject) {", "+\tint length = focuses.length;", "+\tfor (int i=0; i<length; i++) {", "+\t\tif (canSeeFocus(focuses[i], javaProject)) return true;", "+\t}", "+\treturn false;", "+}", "-\t\tif (focus.equals(javaProject))", "-\t\t\treturn true;", "-\t\tif (focusEntriesForPolymorphicSearch != null) {", "-\t\t\t// look for refering project", "-\t\t\tIPath projectPath = javaProject.getProject().getFullPath();", "-\t\t\tfor (int i = 0, length = focusEntriesForPolymorphicSearch.length; i < length; i++) {", "-\t\t\t\tIClasspathEntry entry = focusEntriesForPolymorphicSearch[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT && entry.getPath().equals(projectPath))", "-\t\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "036246b11583f3898db98180f14677b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean ensureGeneratedSourceFolder()", "signatureAfterChange": " \tpublic void enabledPreferenceChanged()", "diff": ["-\tprivate boolean ensureGeneratedSourceFolder(){", "-\t\t", "-\t\tboolean reset = false;", "-\t\tIFolder curSrcFolder = null;", "-\t", "-\t\t// Determine current state of affairs, with respect to", "-\t\t// folder, folder name, and classpath.", "-\t\tsynchronized( this )", "-\t\t{", "-\t\t\tif( _generatedSourceFolder != null ){", "-\t\t\t\tfinal IPath srcFolderPath = _generatedSourceFolder.getProjectRelativePath();", "-\t\t\t\t", "-\t\t\t\tif( !_generatedSourceFolderName.equals( srcFolderPath.toString()) ){", "-\t\t\t\t\t// Folder name has been changed!  Save the current folder so we can clear it out later.", "-\t\t\t\t\treset = true;", "-\t\t\t\t\tcurSrcFolder = _generatedSourceFolder;", "-\t\t\t\t\t_generatedSourceFolder = null;", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\t// Folder name and folder are in sync.  Check that folder is on classpath.", "-\t\t\t\t\t", "-\t\t\t\t\t// If the folder doesn't exist on disk, there is no point examining the classpath.", "-\t\t\t\t\ttry{", "-\t\t\t\t\t\t_generatedSourceFolder.refreshLocal( IResource.DEPTH_INFINITE, null );", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch(CoreException ce){", "-\t\t\t\t\t\tAptPlugin.log(ce, \"Failure during refreshLocal on \" + srcFolderPath); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!_generatedSourceFolder.exists()) {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIJavaProject jp = _aptProject.getJavaProject();", "-\t\t\t\t\t\tIClasspathEntry[] cp = jp.getRawClasspath();", "-\t\t\t\t\t\tIPath path = _generatedSourceFolder.getFullPath();", "-\t\t\t\t\t\tif (ClasspathUtil.isProjectClassPathUpToDate(jp, cp, path, null)) {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch (JavaModelException jme) {", "-\t\t\t\t\t\tAptPlugin.log(jme, \"Failure examining the classpath\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tIFolder srcFolder = null;", "-\t\ttry{", "-\t\t\tif( reset ){", "-\t\t\t\t// Folder name was out of sync with folder.  Delete the old folder and classpath entry.", "-\t\t\t\tClasspathUtil.removeFromProjectClasspath(_aptProject.getJavaProject(), curSrcFolder, null );", "-\t\t\t\tif ( curSrcFolder.exists() ){", "-\t\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\t\tAptPlugin.trace(\"deleting gen src dir \" + curSrcFolder.getName() ); //$NON-NLS-1$", "-\t\t\t\t\tcurSrcFolder.delete( true, false, null );", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tsrcFolder = getFolder();", "-\t\t\t\t", "-\t\t\t//", "-\t\t\t// make sure __generated_src dir is on the cp if not already", "-\t\t\t//", "-\t\t\tClasspathUtil.updateProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );", "-\t\t\t", "-\t\t\tif(AptPlugin.DEBUG)", "-\t\t\t\tAptPlugin.trace(\"Added directory \" + srcFolder.getName() + \" and updated classpath\" ); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tcatch(CoreException e){\t\t\t\t\t\t", "-\t\t\tAptPlugin.log(e, \"Failed to create generated source directory\"); //$NON-NLS-1$", "-\t\t\treturn false;", "+\t */", "+\tpublic void enabledPreferenceChanged()", "+\t{", "+\t\tfinal boolean enable = AptConfig.isEnabled(_aptProject.getJavaProject());", "+\t\t// Short-circuit if nothing changed.", "+\t\tif (enable == (_generatedSourceFolder != null)) {", "+\t\t\tif( AptPlugin.DEBUG ) {", "+\t\t\t\tAptPlugin.trace(\"enabledChanged() doing nothing; state is already \" + enable); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t// no change in state", "+\t\t\treturn;", "-\t\tsynchronized ( this )", "-\t\t{", "-\t\t\t_generatedSourceFolder = srcFolder;", "-\t\t\treturn true;", "+\t\tif ( AptPlugin.DEBUG ) {", "+\t\t\tAptPlugin.trace(\"enabledChanged() changing state to \" + enable +  //$NON-NLS-1$", "+\t\t\t\t\t\" for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "+\t\t}", "+\t\tif( enable ) {", "+\t\t\tconfigure();", "+\t\t} ", "+\t\telse {", "+\t\t\tremoveFolder();"]}], "num": 52247}
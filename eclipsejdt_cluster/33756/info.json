{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88420299a31cbda40efdb0b9806c0f30", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "824dec177eee1e939d801de041ba0ca4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "55189ed648ac780e2783a409705c9c8b61eeced6", "commitAfterChange": "cd7ab76e97bbde2dfa388ac94141efed3a1c5385", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["+\t\tboolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8;", "+\t\tboolean typeReplaced = false;", "+\t\t\ttypeReplaced = true;", "-\t\t\tboolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8;", "+\t\t\teditGroup = null;", "-\t\t\t\t\tif (astLevelGTE8) rewriteAnnotationsOnDimension(replacingType, i, offset);", "-\t\t\t\t\t offset= getScanner().getTokenEndOffset(TerminalTokens.TokenNameLBRACKET, offset);", "+\t\t\t\t\tif (astLevelGTE8)", "+\t\t\t\t\t\trewriteAnnotationsOnDimension(arrayType, replacingType, i, offset, typeReplaced, editGroup);", "+\t\t\t\t\toffset= getScanner().getTokenEndOffset(TerminalTokens.TokenNameLBRACKET, offset);", "-\t\t\t\t\tif (astLevelGTE8) rewriteAnnotationsOnDimension(replacingType, i, offset);", "+\t\t\t\t\tif (astLevelGTE8)", "+\t\t\t\t\t\trewriteAnnotationsOnDimension(arrayType, replacingType, i, offset, typeReplaced, editGroup);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7ae693338a44067aed31848a3289735", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\tboolean didAlreadyComplain = false;", "-\t\t\t\tif ((caseIndex < caseCount)", "-\t\t\t\t\t&& (statement == cases[caseIndex])) { // statements[i] is a case or a default case", "+\t\t\t\tif ((caseIndex < caseCount) && (statement == cases[caseIndex])) { // statement is a case", "-\t\t\t\t} else {", "-\t\t\t\t\tif (statement == defaultCase) {", "-\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "-\t\t\t\t\t}", "+\t\t\t\t\tdidAlreadyComplain = false; // reset complaint", "+\t\t\t\t} else if (statement == defaultCase) { // statement is the default case", "+\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "+\t\t\t\t\tdidAlreadyComplain = false; // reset complaint", "-\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope)) {", "+\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope, didAlreadyComplain)) {", "+\t\t\t\t} else {", "+\t\t\t\t\tdidAlreadyComplain = true;"]}], "num": 33756}
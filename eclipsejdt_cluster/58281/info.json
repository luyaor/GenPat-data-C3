{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e12848f323fdd136f0dea9263af7bd2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26387571f7f32b46604be697dacbebbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "e2fc869fb2209264acf37dd5d1ab362ae9f0a788", "commitAfterChange": "1dcc09d8003561fdd93ea3576412b5ec7090338b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprivate void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprivate void formatTypeOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration)", "diff": ["-\t\tif (methodCount == 1 && typeDeclaration.methods[0].isDefaultConstructor()) {", "-\t\t\tmethodCount = 0;", "+\t\tif (methodCount != 0) {", "+\t\t\tfor (int i = 0, max = methodCount; i < max; i++) {", "+\t\t\t\tfinal AbstractMethodDeclaration abstractMethodDeclaration = typeDeclaration.methods[i];", "+\t\t\t\tif (abstractMethodDeclaration.isDefaultConstructor()) {", "+\t\t\t\t\tmethodCount--;", "+\t\t\t\t} else if (abstractMethodDeclaration.isClinit()) {", "+\t\t\t\t\tmethodCount--;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f22cde8b73a7a52c1a6fabd4b1370e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "43191caefaa8fabb3434b14cf3063f1b06673205", "commitAfterChange": "7484e25e299b8203b28cf436ac2de883b2f5dd8e", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "signatureAfterChange": "  private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException", "diff": ["-\t\tfor (int j = 0; j < contractsCount; j++) {", "-\t\t\tif (contracts[j] == null)", "-\t\t\t\tcontinue;", "-\t\t\tif (MethodVerifier.doesMethodOverride(method, contracts[j], scope.environment())) {", "+\t\tfor (int j = 0; j < contractsCount;) {", "+\t\t\tif ( contracts[j] != null && MethodVerifier.doesMethodOverride(method, contracts[j], scope.environment())) {", "-\t\t\t\tif (j < contractsCount)", "+\t\t\t\tif (j < contractsCount) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\tj++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1e1c6151e485a088b5c7f61c52226fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "2502ea5c7a722d0a85e8b40f6d4e90d701bfb34c", "commitAfterChange": "3f53b6598aea6e6a4987220f067085b809f68f6f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tprivate void formatTypeOpeningBraceForEnumConstant(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tprivate void formatTypeOpeningBraceForEnumConstant(String bracePosition, boolean insertSpaceBeforeBrace, TypeDeclaration typeDeclaration)", "diff": ["-\t\tif (methodCount == 1 && typeDeclaration.methods[0].isDefaultConstructor()) {", "-\t\t\tmethodCount = 0;", "+\t\tif (methodCount <= 2) {", "+\t\t\tfor (int i = 0, max = methodCount; i < max; i++) {", "+\t\t\t\tfinal AbstractMethodDeclaration abstractMethodDeclaration = typeDeclaration.methods[i];", "+\t\t\t\tif (abstractMethodDeclaration.isDefaultConstructor()) {", "+\t\t\t\t\tmethodCount--;", "+\t\t\t\t} else if (abstractMethodDeclaration.isClinit()) {", "+\t\t\t\t\tmethodCount--;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 58281}
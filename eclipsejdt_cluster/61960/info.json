{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2be1b8fea3cde39ed89bead8bb4dc33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d923f77aae71f2e903c9e4f1123fb09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "368e7b2744bb4a520a4dfc9ab8183508aa7c626d", "commitAfterChange": "93b70485a331557e06c4f378f7086f6e4f12616a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void handleInternalException( \t\tAbortCompilation abortException, \t\tCompilationUnitDeclaration unit)", "signatureAfterChange": " \tprotected void handleInternalException( \t\tAbortCompilation abortException, \t\tCompilationUnitDeclaration unit)", "diff": ["-\t\t\t/* distant problem which could not be reported back there */", "-\t\t\tif (abortException.problemId != 0) {", "-\t\t\t\tresult", "-\t\t\t\t\t.record(", "-\t\t\t\t\t\tproblemReporter", "-\t\t\t\t\t\t.createProblem(", "-\t\t\t\t\t\t\tresult.getFileName(),", "-\t\t\t\t\t\t\tabortException.problemId,", "-\t\t\t\t\t\t\tabortException.problemArguments,", "-\t\t\t\t\t\t\tabortException.messageArguments,", "-\t\t\t\t\t\t\tError, // severity", "-\t\t\t\t\t\t\t0, // source start", "-\t\t\t\t\t\t\t0, // source end", "-\t\t\t\t\t\t\t0, // line number\t\t", "-\t\t\t\t\t\t\tunit,", "-\t\t\t\t\t\t\tresult),", "-\t\t\t\t\t\tunit);\t\t\t\t", "+\t\t\t/* distant problem which could not be reported back there? */", "+\t\t\tif (abortException.problem != null) {", "+\t\t\t\trecordDistantProblem: {", "+\t\t\t\t\tIProblem distantProblem = abortException.problem;", "+\t\t\t\t\tIProblem[] knownProblems = result.problems;", "+\t\t\t\t\tfor (int i = 0; i < result.problemCount; i++) {", "+\t\t\t\t\t\tif (knownProblems[i] == distantProblem) { // already recorded", "+\t\t\t\t\t\t\tbreak recordDistantProblem;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (distantProblem instanceof DefaultProblem) { // fixup filename TODO (philippe) should improve API to make this official", "+\t\t\t\t\t\t((DefaultProblem) distantProblem).setOriginatingFileName(result.getFileName());", "+\t\t\t\t\t}", "+\t\t\t\t\tresult\t.record(distantProblem, unit);", "+\t\t\t\t}", "-\t\t\t/*", "-\t\t\tif (abortException.problemId != 0){ ", "-\t\t\t\tIProblem problem =", "-\t\t\t\t\tproblemReporter.createProblem(", "-\t\t\t\t\t\t\"???\".toCharArray(),", "-\t\t\t\t\t\tabortException.problemId, ", "-\t\t\t\t\t\tabortException.problemArguments, ", "-\t\t\t\t\t\tError, // severity", "-\t\t\t\t\t\t0, // source start", "-\t\t\t\t\t\t0, // source end", "-\t\t\t\t\t\t0); // line number", "-\t\t\t\tSystem.out.println(problem.getMessage());", "-\t\t\t}", "-\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908ec882f9930473df59c194f6bd729e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "29911619e9eb038f230f09e2190cd9ca1e9cfd72", "commitAfterChange": "f342df887ac2bde5a33a69c02311bfd7246a7e43", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testFindType() throws CoreException", "signatureAfterChange": " public void testFindType() throws CoreException", "diff": ["-\t// get 20 projects", "-\tint max = 20;", "-\tIJavaProject[] projects = new IJavaProject[max];", "-\tfor (int i = 0; i < max; i++) {", "-\t\tprojects[i] = createJavaProject(\"FindType\" + i);", "-\t}", "-\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\tAbstractJavaModelTests.waitForAutoBuild();", "+\tIJavaProject[] existingProjects = model.getJavaProjects();", "-\t\t// warm up", "-\t\tint warmup = WARMUP_COUNT / 10;", "-\t\tfor (int i = 0; i < warmup; i++) {", "-\t\t\tmodel.close();", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "-\t\t\t}", "-\t\t}", "-\t\t\t", "-\t\t// measure performance", "-\t\tfor (int i = 0; i < MEASURES_COUNT; i++) {", "-\t\t\tmodel.close();", "-\t\t\trunGc();", "-\t\t\tstartMeasuring();", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "-\t\t\t}", "-\t\t\tstopMeasuring();", "+\t\t// close existing projects", "+\t\tfor (int i = 0, length = existingProjects.length; i < length; i++) {", "+\t\t\texistingProjects[i].getProject().close(null);", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t} finally {", "+\t\t// get 20 projects", "+\t\tint max = 20;", "+\t\tIJavaProject[] projects = new IJavaProject[max];", "-\t\t\tprojects[i].getProject().delete(false, null);", "+\t\t\tprojects[i] = createJavaProject(\"FindType\" + i);", "+\t\t}", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\tAbstractJavaModelTests.waitForAutoBuild();", "+\t\t", "+\t\ttry {", "+\t\t\t// warm up", "+\t\t\tint warmup = WARMUP_COUNT / 10;", "+\t\t\tfor (int i = 0; i < warmup; i++) {", "+\t\t\t\tmodel.close();", "+\t\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\t", "+\t\t\t// measure performance", "+\t\t\tfor (int i = 0; i < MEASURES_COUNT; i++) {", "+\t\t\t\tmodel.close();", "+\t\t\t\trunGc();", "+\t\t\t\tstartMeasuring();", "+\t\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "+\t\t\t\t}", "+\t\t\t\tstopMeasuring();", "+\t\t\t}", "+\t\t", "+\t\t\tcommitMeasurements();", "+\t\t\tassertPerformance();", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < max; i++) {", "+\t\t\t\tprojects[i].getProject().delete(false, null);", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\t// reopen existing projects", "+\t\tfor (int i = 0, length = existingProjects.length; i < length; i++) {", "+\t\t\texistingProjects[i].getProject().open(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efa47b1b6c543d055ce18b4ab5c6ff81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "abe804713571cdfdd296f9f85293e127191ccc0a", "commitAfterChange": "6e909e2d43e962644adc7ba6bf38655e030104c8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic boolean overrides(IMethodBinding method)", "signatureAfterChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "diff": ["-\tpublic boolean overrides(IMethodBinding method) {", "-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding otherCompilerBinding = ((MethodBinding) method).binding;", "-\t\tif (this.binding == otherCompilerBinding) ", "+\tpublic boolean overrides(IMethodBinding overridenMethod) {", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "+\t\tif (this.binding == overridenCompilerBinding) ", "-\t\tif (!CharOperation.equals(this.binding.selector, otherCompilerBinding.selector))", "+\t\tif (!CharOperation.equals(this.binding.selector, overridenCompilerBinding.selector))", "-\t\tif (!this.binding.declaringClass.isCompatibleWith(otherCompilerBinding.declaringClass))", "-\t\t\treturn false;", "-\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "-\t\tif (lookupEnvironment == null) return false;", "-\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "-\t\treturn methodVerifier.doesMethodOverride(this.binding, otherCompilerBinding);", "+\t\tReferenceBinding match = this.binding.declaringClass.findSuperTypeWithSameErasure(overridenCompilerBinding.declaringClass);", "+\t\tif (match == null) return false;", "+\t\t", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = match.methods();", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "+\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "+\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\treturn methodVerifier.doesMethodOverride(this.binding, superMethods[i]);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 61960}
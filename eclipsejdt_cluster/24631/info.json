{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19c6804f06ad9428da316a8987f4341b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276a515034cc538fb4fb2aa28def26c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9b8ee75c11bad2c154d3b44975d2142fe2fb81ac", "commitAfterChange": "2ed5fda15ee0abbf21f67405514b53d77bc6ee3a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void findEnumConstant(char[] enumConstantName, SwitchStatement switchStatement)", "signatureAfterChange": " \tprivate void findEnumConstant(char[] enumConstantName, SwitchStatement switchStatement)", "diff": ["+\t\t\tCaseStatement[] cases = switchStatement.cases;", "+\t\t\t", "+\t\t\tchar[][] alreadyUsedConstants = new char[switchStatement.caseCount][];", "+\t\t\tint alreadyUsedConstantCount = 0;", "+\t\t\tfor (int i = 0; i < switchStatement.caseCount; i++) {", "+\t\t\t\tif(cases[i].isEnumConstant) {", "+\t\t\t\t\talreadyUsedConstants[alreadyUsedConstantCount++] = ((SingleNameReference)cases[i].constantExpression).token;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0; i < alreadyUsedConstantCount; i++) {", "+\t\t\t\t\tif(CharOperation.equals(alreadyUsedConstants[i], completion)) continue next;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43dc0971f326ee259a3dea86cea3c662", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1f911d51d5f7aed075946732ed8e3d1eec231ff5", "commitAfterChange": "994909f27ab64cbff8a4b8b71b6f8d78e265bc42", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \r \tprivate boolean mustQualifyType(\r \t\tchar[][] packageName,\r \t\tchar[] readableTypeName)", "signatureAfterChange": "\r \r \tprivate boolean mustQualifyType(\r \t\tchar[] packageName,\r \t\tchar[] typeName)", "diff": ["-\t\tchar[][] packageName,\r", "-\t\tchar[] readableTypeName) {\r", "+\t\tchar[] packageName,\r", "+\t\tchar[] typeName) {\r", "+\t\t\t\r", "+\t\tchar[][] compoundPackageName = CharOperation.splitOn('.', packageName);\r", "+\t\tchar[] readableTypeName = CharOperation.concat(packageName, typeName, '.');\r", "-\t\tif (CharOperation.equals(unitScope.fPackage.compoundName, packageName))\r", "+\t\tif (CharOperation.equals(unitScope.fPackage.compoundName, compoundPackageName))\r", "-\r", "-\t\t\t\tif (CharOperation.equals(imports[i].compoundName, packageName))\r", "+\t\t\t\tif (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {\r", "+\t\t\t\t\tfor (int j = 0; j < imports.length; j++) {\r", "+\t\t\t\t\t\tif(i != j){\r", "+\t\t\t\t\t\t\tif(imports[j].onDemand) {\r", "+\t\t\t\t\t\t\t\tif(nameEnvironment.findType(typeName, imports[j].compoundName) != null){\r", "+\t\t\t\t\t\t\t\t\treturn true;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tif(CharOperation.endsWith(imports[j].readableName(), typeName)) {\r", "+\t\t\t\t\t\t\t\t\treturn true;\t\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}], "num": 24631}
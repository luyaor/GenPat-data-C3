{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47223a55facf080a9abb51b4e6dcb32d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b8c9c3b43b16d19b13dafc4a69886b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public static List buildTestsList(Class evaluationTestClass)", "signatureAfterChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["+", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth) {", "+\tClass evaluationTestSuperclass = evaluationTestClass.getSuperclass();", "+\tfor (int i=0; i<inheritedDepth && !Flags.isAbstract(evaluationTestSuperclass.getModifiers()); i++) {", "+\t\tMethod[] superMethods = evaluationTestSuperclass.getDeclaredMethods();", "+\t\tMethod[] mergedMethods = new Method[methods.length+superMethods.length];", "+\t\tSystem.arraycopy(superMethods, 0, mergedMethods, 0, superMethods.length);", "+\t\tSystem.arraycopy(methods, 0, mergedMethods, superMethods.length, methods.length);", "+\t\tmethods = mergedMethods;", "+\t\tevaluationTestSuperclass = evaluationTestSuperclass.getSuperclass();", "+\t}", "-\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\t\t\ttestNames.add(methName);", "-\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "-\t\t\t\t\t\ttests.add(constructor.newInstance(params));", "+\t\t\t\t\t\tif (testNames.add(methName))", "+\t\t\t\t\t\t\ttests.add(constructor.newInstance(params));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7316cf559c2ca0989607602268dd61d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "3a24c8e93f77a32dae59173b29a4fa366ce01a3a", "commitAfterChange": "5d36ded47d2c78d72658a7417caa4c325d7b6276", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes)", "diff": ["-public TypeDeclaration updatedTypeDeclaration(){", "+public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes){", "+\tif (depth >= MAX_TYPE_DEPTH) return null;", "+", "+\tif(knownTypes.contains(this.typeDeclaration)) return null;", "+\tknownTypes.add(this.typeDeclaration);", "+\t", "+\t\t", "+\t\tint updatedCount = 0;", "-\t\t\tmemberTypeDeclarations[existingCount + i] = this.memberTypes[i].updatedTypeDeclaration();", "+\t\t\tTypeDeclaration updatedTypeDeclaration = this.memberTypes[i].updatedTypeDeclaration(depth + 1, knownTypes);", "+\t\t\tif (updatedTypeDeclaration != null) {", "+\t\t\t\tmemberTypeDeclarations[existingCount + (updatedCount++)] = updatedTypeDeclaration;", "+\t\t\t}", "-\t\tthis.typeDeclaration.memberTypes = memberTypeDeclarations;", "-\t\tif(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "-\t\t\tlastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;", "+\t\tif (updatedCount < this.memberTypeCount) {", "+\t\t\tint length = existingCount + updatedCount;", "+\t\t\tSystem.arraycopy(memberTypeDeclarations, 0, memberTypeDeclarations = new TypeDeclaration[length], 0, length);", "+\t\t}", "+\t\t", "+\t\tif (memberTypeDeclarations.length > 0) { ", "+\t\t\tthis.typeDeclaration.memberTypes = memberTypeDeclarations;", "+\t\t\tif(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {", "+\t\t\t\tlastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;", "+\t\t\t}", "-\t\t\tfieldDeclarations[existingCount + i] = this.fields[i].updatedFieldDeclaration();", "+\t\t\tfieldDeclarations[existingCount + i] = this.fields[i].updatedFieldDeclaration(depth, knownTypes);", "-\t\t\tAbstractMethodDeclaration updatedMethod = this.methods[i].updatedMethodDeclaration();", "+\t\t\tAbstractMethodDeclaration updatedMethod = this.methods[i].updatedMethodDeclaration(depth, knownTypes);"]}], "num": 64424}
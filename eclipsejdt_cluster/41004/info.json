{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4238285e5c0e679c14387e5967c9ed8b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "851992fb97d8ede6315d9ddc503a05b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "ff2422726abd9b4eb2726e976f3ef82854d72609", "commitAfterChange": "20fa08dd67915598091c483c6e898b71bc3a58de", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static ReplaceEdit[] getChangeIndentEdits(String source, int sourceIndentLevel, int tabWidth, int indentWidth, String newIndent)", "signatureAfterChange": " \tpublic static ReplaceEdit[] getChangeIndentEdits(String source, int indentUnitsToRemove, int tabWidth, int indentWidth, String newIndentString)", "diff": ["-\tpublic static ReplaceEdit[] getChangeIndentEdits(String source, int sourceIndentLevel, int tabWidth, int indentWidth, String newIndent) {", "-\t    ArrayList result= new ArrayList();", "+\tpublic static ReplaceEdit[] getChangeIndentEdits(String source, int indentUnitsToRemove, int tabWidth, int indentWidth, String newIndentString) {", "+\t\tif (tabWidth < 0 || indentWidth <= 0 || source == null || indentUnitsToRemove < 0 || newIndentString == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\t", "+\t\tArrayList result= new ArrayList();", "-\t\t\t\tint length= Indents.computeIndentLength(line, sourceIndentLevel, tabWidth, indentWidth);", "+\t\t\t\tint length= indexOfIndent(line, indentUnitsToRemove, tabWidth, indentWidth);", "-\t\t\t\t\tresult.add(new ReplaceEdit(offset, length, newIndent));", "+\t\t\t\t\tresult.add(new ReplaceEdit(offset, length, newIndentString));", "-\t\t\t\t\tlength= Indents.computeIndentUnits(line, tabWidth, indentWidth);", "+\t\t\t\t\tlength= measureIndentUnits(line, tabWidth, indentWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c919bba8c59c0a808b98eff5d7835716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "\t \tpublic String getFormattedResult(ASTNode node, int initialIndentationLevel, Collection resultingMarkers)", "signatureAfterChange": "\t \tpublic String getFormattedResult(ASTNode node, int initialIndentationLevel, Collection resultingMarkers)", "diff": ["-\t\tExtendedFlattener flattener= new ExtendedFlattener(fEventStore);", "+\t\tExtendedFlattener flattener= new ExtendedFlattener(this.eventStore);", "-\t\tTextEdit edit= CodeFormatterUtil.format2(node, unformatted, initialIndentationLevel, fLineDelimiter, fOptions);", "+\t\tTextEdit edit= formatNode(node, unformatted, initialIndentationLevel, this.lineDelimiter, this.options);", "-\t\t\treturn unformatted;", "+\t\t    if (initialIndentationLevel > 0) {", "+\t\t        // at least correct the indent", "+\t\t        String indentString = createIndentString(initialIndentationLevel);", "+\t\t\t\tReplaceEdit[] edits = Indents.getChangeIndentEdits(unformatted, 0, this.tabWidth, indentString);", "+\t\t\t\tedit= new MultiTextEdit();", "+\t\t\t\tedit.addChild(new InsertEdit(0, indentString));", "+\t\t\t\tedit.addChildren(edits);", "+\t\t    } else {", "+\t\t       return unformatted;", "+\t\t    }", "-\t\t", "-\t\treturn CodeFormatterUtil.evaluateFormatterEdit(unformatted, edit, markers);", "+\t\treturn evaluateFormatterEdit(unformatted, edit, markers);"]}], "num": 41004}
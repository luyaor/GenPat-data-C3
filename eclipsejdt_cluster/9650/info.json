{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff0f211da97db9ea5190921e8b273e24", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c7c88a1384940cada15d74631c9162a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate synchronized void readState()", "signatureAfterChange": " \tprivate boolean compareFileContents(String contents, IFile file)", "diff": ["+\t */", "+\tprivate boolean compareFileContents(String contents, IFile file)", "+\t{", "+\t\tboolean contentsDiffer = true;", "+\t\tif (file.exists()) {", "+\t\t\tInputStream oldData = null;", "+\t\t\tInputStream is = null;", "+\t\t\ttry {", "+\t\t\t\tis = new ByteArrayInputStream(contents.getBytes());", "+\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\tcontentsDiffer = !FileSystemUtil.compareStreams(oldData, is);", "+\t\t\t} catch (CoreException ce) {", "+\t\t\t\t// Do nothing. Assume the new content is different", "+\t\t\t} finally {", "+\t\t\t\tif (oldData != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\toldData.close();", "+\t\t\t\t\t} catch (IOException ioe) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (is != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tis.close();", "+\t\t\t\t\t} catch (IOException ioe) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn contentsDiffer;", "+\t}", "-\tprivate synchronized void readState() {", "-\t\tFile file = getSerializationFile(_jProject.getProject());", "-\t\tif (file == null || !file.exists()) {", "-\t\t\t// We'll just start with no dependencies", "-\t\t\treturn;", "-\t\t}", "-\t\tDataInputStream in = null;", "-\t\ttry {", "-\t\t\tin= new DataInputStream(new BufferedInputStream(new FileInputStream(file)));", "-\t\t\tint version = in.readInt();", "-\t\t\tif (version != SERIALIZATION_VERSION) {", "-\t\t\t\tthrow new IOException(\"Dependency map file version does not match. Expected \"  //$NON-NLS-1$", "-\t\t\t\t\t\t+ SERIALIZATION_VERSION + \", but found \" + version); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tint sizeOfMap = in.readInt();", "-\t\t\t", "-\t\t\t// For each entry, we'll have a parent and a set of children, ", "-\t\t\t// which we can drop into the parent -> child map.", "-\t\t\tfor (int parentIndex=0; parentIndex<sizeOfMap; parentIndex++) {", "-\t\t\t\tString parentPath = in.readUTF();", "-\t\t\t\tIFile parent = convertPathToIFile(parentPath);", "-\t\t\t\tSet<IFile> children = new HashSet<IFile>();", "-\t\t\t\t_parentFile2GeneratedFiles.put(parent, children);", "-\t\t\t\t", "-\t\t\t\tint numChildren = in.readInt();", "-\t\t\t\tfor (int childIndex = 0; childIndex<numChildren; childIndex++) {", "-\t\t\t\t\tString childPath = in.readUTF();", "-\t\t\t\t\tIFile child = convertPathToIFile(childPath);", "-\t\t\t\t\t// add the child to the parent->child map", "-\t\t\t\t\tchildren.add(child);", "-\t\t\t\t\t", "-\t\t\t\t\t// Now we need to update the child -> parents map", "-\t\t\t\t\tSet<IFile> parentSet = _generatedFile2ParentFiles.get(child);", "-\t\t\t\t\tif (parentSet == null) {", "-\t\t\t\t\t\tparentSet = new HashSet<IFile>();", "-\t\t\t\t\t\t_generatedFile2ParentFiles.put(child, parentSet);", "-\t\t\t\t\t}", "-\t\t\t\t\tparentSet.add(parent);", "-\t\t\t\t}", "-\t\tcatch (IOException ioe) {", "-\t\t\t// We can safely continue without having read our dependencies.", "-\t\t\tAptPlugin.log(ioe, \"Could not deserialize APT dependencies\"); //$NON-NLS-1$", "-\t\tfinally {", "-\t\t\tif (in != null) {", "-\t\t\t\ttry {in.close();} catch (IOException ioe) {}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdbdcd3f5573ce2557d91d7716e5153c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "diff": ["-\tIType[] types = new IType[size];", "-\tallTypesInRegion.toArray(types);", "-", "-\t/*", "-\t * NOTE: To workaround pb with hierarchy resolver that requests top  ", "-\t * level types in the process of caching an enclosing type, this needs to", "-\t * be sorted in reverse alphabetical order so that top level types are cached", "-\t * before their inner types.", "-\t */", "-\tUtil.sort(", "-\t\ttypes,", "-\t\tnew Util.Comparer() {", "-\t\t\t/**", "-\t\t\t * @see Comparer#compare(Object, Object)", "-\t\t\t */", "-\t\t\tpublic int compare(Object a, Object b) {", "-\t\t\t\treturn - ((IJavaElement)a).getParent().getElementName().compareTo(((IJavaElement)b).getParent().getElementName());", "-\t\t\t}", "+\tHashSet existingOpenables = new HashSet(size);", "+\tOpenable[] openables = new Openable[size];", "+\tint openableIndex = 0;", "+\tfor (int i = 0; i < size; i++) {", "+\t\tIType type = (IType)allTypesInRegion.get(i);", "+\t\tOpenable openable;", "+\t\tif (type.isBinary()) {", "+\t\t\topenable = (Openable)type.getClassFile();", "+\t\t} else {", "+\t\t\topenable = (Openable)type.getCompilationUnit();", "-\t);", "-", "-\t// collect infos and compilation units", "-\tArrayList infos = new ArrayList();", "-\tArrayList closedUnits = new ArrayList();", "-\ttypes : for (int i = 0; i < size; i++) {", "-\t\ttry {", "-\t\t\tIType type = types[i];", "-\t\t\tthis.addInfoFromElement((Openable)type.getOpenable(), infos, closedUnits, type.getPath().toString());", "-\t\t} catch (JavaModelException npe) {", "-\t\t\tcontinue types;", "+\t\tif (existingOpenables.add(openable)) {", "+\t\t\topenables[openableIndex++] = openable;", "-", "-\t// copy vectors into arrays", "-\tIGenericType[] genericTypes;", "-\tint infosSize = infos.size();", "-\tif (infosSize > 0) {", "-\t\tgenericTypes = new IGenericType[infosSize];", "-\t\tinfos.toArray(genericTypes);", "-\t} else {", "-\t\tgenericTypes = new IGenericType[0];", "-\t}", "-\tICompilationUnit[] closedCUs;", "-\tint closedUnitsSize = closedUnits.size();", "-\tif (closedUnitsSize > 0) {", "-\t\tclosedCUs = new ICompilationUnit[closedUnitsSize];", "-\t\tclosedUnits.toArray(closedCUs);", "-\t} else {", "-\t\tclosedCUs = new ICompilationUnit[0];", "+\tif (openableIndex < size) {", "+\t\tSystem.arraycopy(openables, 0, openables = new Openable[openableIndex], 0, openableIndex);", "-\t\tif (monitor != null) monitor.beginTask(\"\", (infosSize+closedUnitsSize) * 2/* 1 for build binding, 1 for connect hierarchy*/); //$NON-NLS-1$", "-\t\tif (infosSize > 0 || closedUnitsSize > 0) {", "+\t\tif (monitor != null) monitor.beginTask(\"\", openableIndex * 2/* 1 for build binding, 1 for connect hierarchy*/); //$NON-NLS-1$", "+\t\tif (openableIndex > 0) {", "-\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, closedCUs, null, monitor);", "+\t\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "-\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, closedCUs, null, monitor);", "+\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);"]}], "num": 9650}
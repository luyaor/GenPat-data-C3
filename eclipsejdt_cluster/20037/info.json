{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18bf4e7fe687bb75320e6a5ebfa926c3", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7482632b12cc3385433c40c6c6a94234", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "60d259d5b1e0ff710248aa3b7ae16581d3024e86", "commitAfterChange": "ae317766273ccd74fe0e1bfd1f3ccc3925356a13", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 194, "signatureBeforeChange": "  \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "signatureAfterChange": "  \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "diff": ["-\t\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false/* ignore case */)", "-\t\t\t\t\t\t\t\t\t\t&& !(this.options.camelCaseMatch && CharOperation.camelCaseMatch(typeName, localType.sourceName)))", "+\t\t\t\t\t\t\t\tif (isFailedMatch(typeName, localType.sourceName))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97c25070013831c0e0e40a45eff94bc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "60d259d5b1e0ff710248aa3b7ae16581d3024e86", "commitAfterChange": "ae317766273ccd74fe0e1bfd1f3ccc3925356a13", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType, \t\t\tBlockScope scope, \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "signatureAfterChange": " \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType, \t\t\tBlockScope scope, \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "diff": ["-\t\tif (!CharOperation.prefixEquals(typeName, exceptionType.sourceName, false/* ignore case */)", "-\t\t\t\t&& !(this.options.camelCaseMatch && CharOperation.camelCaseMatch(typeName, exceptionType.sourceName)))", "+\t\tif (isFailedMatch(typeName, exceptionType.sourceName))"]}], "num": 20037}
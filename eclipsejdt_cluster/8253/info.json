{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9abe8f95b39dcf7fc315307cfe24b496", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30d5d454e86e6e2287cfc24c72d5e092", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "59ccfc02e85b3cb54d1260f0f13d4e77dbe5b35a", "commitAfterChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "signatureAfterChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "diff": ["-\t\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\t\t\t\tArgument argument = arguments[i];", "-\t\t\t\t\t\t\tif ((argument.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, i, allTypeAnnotationContexts);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcompleteArgumentAnnotationInfo(arguments, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t} else if (binding.sourceLambda() != null) { // SyntheticMethodBinding, purpose : LambdaMethod.", "+\t\t\t\tLambdaExpression lambda = binding.sourceLambda();", "+\t\t\t\tif ((lambda.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\tif (lambda.arguments != null)", "+\t\t\t\t\t\tcompleteArgumentAnnotationInfo(lambda.arguments, allTypeAnnotationContexts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2732c200db7078ee8e354a71b479cc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "59ccfc02e85b3cb54d1260f0f13d4e77dbe5b35a", "commitAfterChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "signatureAfterChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "diff": ["-\t\t\tfor (int i = 0, max = targetParameters.length; i < max; i++) {", "-\t\t\t\tif (methodDeclaration != null && methodDeclaration.arguments != null && methodDeclaration.arguments.length > i && methodDeclaration.arguments[i] != null) {", "-\t\t\t\t\tArgument argument = methodDeclaration.arguments[i];", "+\t\t\tArgument[] arguments = null;", "+\t\t\tif (methodDeclaration != null && methodDeclaration.arguments != null) {", "+\t\t\t\targuments = methodDeclaration.arguments;", "+\t\t\t} else if (binding.sourceLambda() != null) { // SyntheticMethodBinding, purpose : LambdaMethod.", "+\t\t\t\targuments = binding.sourceLambda().arguments;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = targetParameters.length, argumentsLength = arguments != null ? arguments.length : 0; i < max; i++) {", "+\t\t\t\tif (argumentsLength > i && arguments[i] != null) {", "+\t\t\t\t\tArgument argument = arguments[i];"]}], "num": 8253}
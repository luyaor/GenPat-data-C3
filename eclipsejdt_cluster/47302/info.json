{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ad2df006a4503b5178af79ec1dd96f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceddb96e5ff7f86a91196de213f285db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "7d7a110acd7fb43dd9a0120381db3995104a56b1", "commitAfterChange": "c7a7e4e108b0e3c57db4a9ecb9572c48f5ebfb8b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["+\t\t\t\tif (this.showAccess) {", "+\t\t\t\t\tif (match instanceof FieldReferenceMatch) {", "+\t\t\t\t\t\tFieldReferenceMatch fieldRef = (FieldReferenceMatch) match;", "+\t\t\t\t\t\tif (fieldRef.isReadAccess()) {", "+\t\t\t\t\t\t\tline.append(\" READ\");", "+\t\t\t\t\t\t\tif (fieldRef.isWriteAccess()) line.append(\"/WRITE\");", "+\t\t\t\t\t\t\tline.append(\" ACCESS\");", "+\t\t\t\t\t\t} else if (fieldRef.isWriteAccess()) {", "+\t\t\t\t\t\t\tline.append(\" WRITE ACCESS\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (match instanceof LocalVariableReferenceMatch) {", "+\t\t\t\t\t\tLocalVariableReferenceMatch variableRef = (LocalVariableReferenceMatch) match;", "+\t\t\t\t\t\tif (variableRef.isReadAccess()) {", "+\t\t\t\t\t\t\tline.append(\" READ\");", "+\t\t\t\t\t\t\tif (variableRef.isWriteAccess()) line.append(\"/WRITE\");", "+\t\t\t\t\t\t\tline.append(\" ACCESS\");", "+\t\t\t\t\t\t} else if (variableRef.isWriteAccess()) {", "+\t\t\t\t\t\t\tline.append(\" WRITE ACCESS\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdb51022048a120ab755fb5b31890bd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "43910be7c5e7874a970515d1dbb3b63c454bc688", "commitAfterChange": "d7d4a2e6181a270380c8726d1367c8cd49a78b6b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic String getContext()", "signatureAfterChange": " \t \tpublic String getContext()", "diff": ["+\t\tif(!this.shortContext) {", "+\t\t\tbuffer.append(\"completion offset=\");", "+\t\t\tbuffer.append(context.getOffset());", "+\t\t\tbuffer.append('\\n');", "+\t\t\t", "+\t\t\tbuffer.append(\"completion range=[\");", "+\t\t\tbuffer.append(context.getTokenStart());", "+\t\t\tbuffer.append(\", \");", "+\t\t\tbuffer.append(context.getTokenEnd());", "+\t\t\tbuffer.append(\"]\\n\");", "+\t\t\t", "+\t\t\tchar[] token = context.getToken();", "+\t\t\tbuffer.append(\"completion token=\");", "+\t\t\tif(token == null) {", "+\t\t\t\tbuffer.append(\"null\");", "+\t\t\t} else {", "+\t\t\t\tbuffer.append('\\\"');", "+\t\t\t\tbuffer.append(token);", "+\t\t\t\tbuffer.append('\\\"');", "+\t\t\t}", "+\t\t\tbuffer.append('\\n');", "+\t\t}"]}], "num": 47302}
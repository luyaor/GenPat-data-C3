{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04ddddcdfa52d04c2d43cb8918cbb176", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858ea87f4cef43adb34840000bec2813", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (!areTypesCastCompatible(scope, checkType, expressionType)) {", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkType);", "-\t\t\treturn null;", "+\t\tboolean necessary = checkCastTypesCompatibility(scope, checkType, expressionType);", "+\t\tif (!necessary) {", "+\t\t\tscope.problemReporter().unnecessaryInstanceof(this, checkType);", "-\t\tthis.resolvedType = BooleanBinding;", "-\t\treturn BooleanBinding;", "+\t\treturn this.resolvedType = BooleanBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d02d3e5975d39cd9a5871d7b3974caf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "bf33f3a91a6da19e79db165110d4a3ad6ee71dd0", "commitAfterChange": "e5112ad3430fec45ff2b1f0ba393b967c7039732", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t} else {", "-\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, checkedType, expressionType, null);", "-\t\t\tif (!isLegal) {", "-\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "-\t\t\t}", "+\t\t}", "+\t\tif ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "+\t\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);"]}], "num": 56393}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3676fe33b50cd9e0096f2b49f26bcbb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d12357536abc342b3cc44cd9315c3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java", "commitBeforeChange": "f2226bbed940778401b5f9a8cbc4f34bcf0789f4", "commitAfterChange": "e877d064b04747bbafa04391a87e31df3c17a315", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e)", "signatureAfterChange": " \tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e,  \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["-\tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e) {", "+\tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e, ", "+\t\t\tAnnotationMirror a, AnnotationValue v) {", "+\t\tAnnotation[] elementAnnotations = null;", "+\t\t\t\t\t\telementAnnotations = typeDeclaration.annotations;", "+\t\t\t\t\t\t\telementAnnotations = sourceMethod.annotations;", "+\t\t\t\t\t\t\telementAnnotations = fieldDeclaration.annotations;", "+\t\t\t\t\t\t\telementAnnotations = parameterDeclaration.annotations;", "+\t\tif (a != null && elementAnnotations != null) {", "+\t\t\tAnnotationBinding annotationBinding = ((AnnotationMirrorImpl) a)._binding;", "+\t\t\tAnnotation annotation = null;", "+\t\t\tfor (int i = 0; annotation == null && i < elementAnnotations.length; i++) {", "+\t\t\t\tif (annotationBinding == elementAnnotations[i].getCompilerAnnotation()) {", "+\t\t\t\t\tannotation = elementAnnotations[i];", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (annotation != null) {", "+\t\t\t\tstartPosition = annotation.sourceStart;", "+\t\t\t\tendPosition = annotation.sourceEnd;", "+\t\t\t\tif (v != null && v instanceof AnnotationMemberValue) {", "+\t\t\t\t\tMethodBinding methodBinding = ((AnnotationMemberValue) v).getMethodBinding();", "+\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t\tMemberValuePair memberValuePair = null;", "+\t\t\t\t\tfor (int i = 0; memberValuePair == null && i < memberValuePairs.length; i++) {", "+\t\t\t\t\t\tif (methodBinding == memberValuePairs[i].binding) {", "+\t\t\t\t\t\t\tmemberValuePair = memberValuePairs[i];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (memberValuePair != null) {", "+\t\t\t\t\t\tstartPosition = memberValuePair.sourceStart;", "+\t\t\t\t\t\tendPosition = memberValuePair.sourceEnd;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7c66d6eefd5a4213f079110c928d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "b2c3be7bd78bc61f04ab542749dc9420d42f47cb", "commitAfterChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public AnnotationBinding[] getParameterAnnotations(int index)", "signatureAfterChange": " public AnnotationBinding[][] getParameterAnnotations()", "diff": ["-public AnnotationBinding[] getParameterAnnotations(int index) {", "+public AnnotationBinding[][] getParameterAnnotations() {", "+\tint length = this.parameters.length;", "+\tif (this.parameters == null || length == 0) {", "+\t\treturn null;", "+\t}", "+\t\tallParameterAnnotations = new AnnotationBinding[length][];", "-\t\t\t\tif (methodDecl.arguments != null) {", "-\t\t\t\t\tfor (int i = 0, length = methodDecl.arguments.length; i < length; i++) {", "-\t\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "-\t\t\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "-\t\t\t\t\t\t\tif (allParameterAnnotations == null) {", "-\t\t\t\t\t\t\t\tallParameterAnnotations = new AnnotationBinding[length][];", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "+\t\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "+\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t\t\tif (allParameterAnnotations != null)", "-\t\t\t\t\t\tthis.setParameterAnnotations(allParameterAnnotations);", "+\t\t\t\tthis.setParameterAnnotations(allParameterAnnotations);", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "-\tAnnotationBinding[] resultParameterAnnotations = allParameterAnnotations == null ? null : allParameterAnnotations[\tindex];", "-\t if (resultParameterAnnotations != null) {", "-\t\t return resultParameterAnnotations;", "-\t }", "-\treturn Binding.NO_ANNOTATIONS;", "+\treturn allParameterAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccf83936a6b3806d1b0e80237b7bc84b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  protected void fillInDefaultNonNullness18(AbstractMethodDeclaration sourceMethod, LookupEnvironment env)", "signatureAfterChange": " protected void fillInDefaultNonNullness18(AbstractMethodDeclaration sourceMethod, LookupEnvironment env)", "diff": ["+//pre: null annotation analysis is enabled", "-\tboolean added = false;", "-\tint length = this.parameters.length;", "-\tfor (int i = 0; i < length; i++) {", "-\t\tTypeBinding parameter = this.parameters[i];", "-\t\tif (parameter.isBaseType())", "-\t\t\tcontinue;", "-\t\tlong existing = parameter.tagBits & TagBits.AnnotationNullMASK;", "-\t\tif (existing == 0L) {", "-\t\t\tadded = true;", "-\t\t\tif (!parameter.isBaseType()) {", "-\t\t\t\tthis.parameters[i] = env.createAnnotatedType(parameter, new AnnotationBinding[]{env.getNonNullAnnotation()});", "-\t\t\t\tif (sourceMethod != null)", "-\t\t\t\t\tsourceMethod.arguments[i].binding.type = this.parameters[i];", "+\tif (hasNonNullDefaultFor(DefaultLocationParameter, true)) {", "+\t\tboolean added = false;", "+\t\tint length = this.parameters.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tTypeBinding parameter = this.parameters[i];", "+\t\t\tif (parameter.isBaseType())", "+\t\t\t\tcontinue;", "+\t\t\tlong existing = parameter.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (existing == 0L) {", "+\t\t\t\tadded = true;", "+\t\t\t\tif (!parameter.isBaseType()) {", "+\t\t\t\t\tthis.parameters[i] = env.createAnnotatedType(parameter, new AnnotationBinding[]{env.getNonNullAnnotation()});", "+\t\t\t\t\tif (sourceMethod != null)", "+\t\t\t\t\t\tsourceMethod.arguments[i].binding.type = this.parameters[i];", "+\t\t\t\t}", "+\t\t\t} else if (sourceMethod != null && (parameter.tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t\t\t\tsourceMethod.scope.problemReporter().nullAnnotationIsRedundant(sourceMethod, i);", "-\t\t} else if (sourceMethod != null && (parameter.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t\t\tsourceMethod.scope.problemReporter().nullAnnotationIsRedundant(sourceMethod, i);", "+\t\tif (added)", "+\t\t\tthis.tagBits |= TagBits.HasParameterAnnotations;", "-\tif (added)", "-\t\tthis.tagBits |= TagBits.HasParameterAnnotations;", "-\tif (this.returnType != null) {", "+\tif (this.returnType != null && hasNonNullDefaultFor(DefaultLocationReturnType, true)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9838826c673966ded1dd7bac210307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "6b66bca84f13c7e210ac53b9682e41436c31dce2", "commitAfterChange": "2073ae07201f3b4750a106d0cadf90473710a63d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding)", "signatureAfterChange": " \tstatic void analyseArguments(LookupEnvironment environment, FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding)", "diff": ["-\tstatic void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {", "+\tstatic void analyseArguments(LookupEnvironment environment, FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {", "-\t\t\tfor (int i = 0, count = methodArguments.length; i < count; i++) {", "-\t\t\t\tif (methodBinding.parameterNonNullness != null) {", "-\t\t\t\t\t// leverage null-info from parameter annotations:", "-\t\t\t\t\tBoolean nonNullNess = methodBinding.parameterNonNullness[i];", "-\t\t\t\t\tif (nonNullNess != null) {", "-\t\t\t\t\t\tif (nonNullNess.booleanValue())", "-\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// tag parameters as being set:", "-\t\t\t\tflowInfo.markAsDefinitelyAssigned(methodArguments[i].binding);", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t\tboolean usesNullTypeAnnotations = environment.usesNullTypeAnnotations();", "+\t\t\t\tif (usesNullTypeAnnotations) {", "+\t\t\t\t\t// leverage null type annotations:", "+\t\t\t\t\tlong tagBits = methodBinding.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (tagBits == TagBits.AnnotationNonNull)", "+\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "+\t\t\t\t\telse if (tagBits == TagBits.AnnotationNullable)", "+\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "+\t\t\t\t} else {\t\t\t\t\t", "+\t\t\t\t\tif (methodBinding.parameterNonNullness != null) {", "+\t\t\t\t\t\t// leverage null-info from parameter annotations:", "+\t\t\t\t\t\tBoolean nonNullNess = methodBinding.parameterNonNullness[i];", "+\t\t\t\t\t\tif (nonNullNess != null) {", "+\t\t\t\t\t\t\tif (nonNullNess.booleanValue())", "+\t\t\t\t\t\t\t\tflowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\tflowInfo.markPotentiallyNullBit(methodArguments[i].binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 1865}
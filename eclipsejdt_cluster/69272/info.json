{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed19a4bac60d670a7091a043baf7812e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a6836276f837851e2aa899cf839883", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "86397dfc80023f615cc88c0705b2ada916e6efb2", "commitAfterChange": "24624a25f60573230ed7652730faedca15fd4d8b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "signatureAfterChange": " \tpublic IPath addPackageFragmentRoot(IPath projectPath, String sourceFolderName, IPath[] exclusionPatterns, String specificOutputLocation) throws JavaModelException", "diff": ["+\t\treturn addPackageFragmentRoot(projectPath, sourceFolderName, exclusionPatterns, true/*exclusion patterns*/, specificOutputLocation);", "+\t}", "-\t\tIClasspathEntry entry = JavaCore.newSourceEntry(path, exclusionPatterns == null ? new Path[0] : exclusionPatterns, outputPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1e40f2b907852dba62e81d80b18d1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "1ffd93ec138fc38a22c082921b3ee25a9e75ba37", "commitAfterChange": "cef21f9db5e181946eac0a0d175b10763094848c", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProblemRequestor problemRequestor, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProgressMonitor monitor) throws JavaModelException", "diff": ["+ */", "+public ICompilationUnit getWorkingCopy(WorkingCopyOwner workingCopyOwner, IProgressMonitor monitor) throws JavaModelException {", "+\treturn getWorkingCopy(workingCopyOwner, null, monitor);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5918e7949aeb70e09bfe043358996a13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "0ce8ad5b0d44dc70bab93f6f64c0b898ece7748d", "commitAfterChange": "42f83db749431568a0412462e46b75fee51080ac", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "signatureAfterChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["-", "-\tJavaModelManager manager= JavaModelManager.getJavaModelManager();", "-\tWorkingCopyOwner workingCopyOwner = BufferFactoryWrapper.create(factory);", "-\tIPath path = getPath();", "-\tCompilationUnit workingCopy = new CompilationUnit(null/*not needed since don't create*/, path.lastSegment(), workingCopyOwner);", "-\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "-\t\tmanager.getPerWorkingCopyInfo(workingCopy, path, false/*don't create*/, false/*don't record usage*/, null/*not need since don't create*/);", "-\tif (perWorkingCopyInfo == null) return null;", "-\treturn perWorkingCopyInfo.getWorkingCopy();", "+\treturn findWorkingCopy(BufferFactoryWrapper.create(factory));"]}], "num": 69272}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "798a253027cb83f6cca39ffa00b62082", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402712d860adabb65afd1819b5a067cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods)", "signatureAfterChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "diff": ["-public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods) {", "+public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl) {", "+\tif (type.isEnum() && type.isLocalType()) {", "+\t\tFieldBinding field = type.scope.enclosingMethodScope().initializedField;", "+\t\tFieldDeclaration decl = field.sourceField();", "+\t\tString[] arguments = new String[] {new String(decl.name), new String(methodDecl.selector)};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInEnum,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+\t} else {", "+\t\tString[] arguments = new String[] {new String(type.sourceName()), new String(methodDecl.selector)};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInAbstractClass,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+\t}", "+}", "-\t\tStringBuffer selectorsString = new StringBuffer();", "-\t\tfor (int i = 0, l = abstractMethods.length; i < l;) {", "-\t\t\tMethodBinding abstractMethod = abstractMethods[i++];", "-\t\t\tselectorsString.append(abstractMethod.selector);", "-\t\t\tselectorsString.append(\"()\"); //$NON-NLS-1$", "-\t\t\tif (i < l)", "-\t\t\t\tselectorsString.append(\", \"); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] arguments = new String[] {new String(type.sourceName()), selectorsString.toString()};", "-\t\t\tIProblem.AbstractMethodInAbstractClass,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e5c719db4bb9a0568650d6fbc2573a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "signatureAfterChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods)", "diff": ["-public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl) {", "-", "-\tString[] arguments = new String[] {new String(type.sourceName()), new String(methodDecl.selector)};", "-\tthis.handle(", "-\t\tIProblem.AbstractMethodInAbstractClass,", "-\t\targuments,", "-\t\targuments,", "-\t\tmethodDecl.sourceStart,", "-\t\tmethodDecl.sourceEnd);", "+public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods) {", "+\tif (type.isEnum() && type.isLocalType()) {", "+\t\tFieldBinding field = type.scope.enclosingMethodScope().initializedField;", "+\t\tFieldDeclaration decl = field.sourceField();", "+\t\tString[] arguments = new String[] {new String(decl.name)};", "+\t\tthis.handle(", "+\t\t\tIProblem.EnumConstantCannotDefineAbstractMethod,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tdecl.sourceStart(),", "+\t\t\tdecl.sourceEnd());", "+\t} else {", "+\t\tStringBuffer selectorsString = new StringBuffer();", "+\t\tfor (int i = 0, l = abstractMethods.length; i < l;) {", "+\t\t\tMethodBinding abstractMethod = abstractMethods[i++];", "+\t\t\tselectorsString.append(abstractMethod.selector);", "+\t\t\tselectorsString.append(\"()\"); //$NON-NLS-1$", "+\t\t\tif (i < l)", "+\t\t\t\tselectorsString.append(\", \"); //$NON-NLS-1$", "+\t\t}", "+\t\tString[] arguments = new String[] {new String(type.sourceName()), selectorsString.toString()};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInAbstractClass,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\ttype.sourceStart(),", "+\t\t\ttype.sourceEnd());", "+\t}"]}], "num": 47696}
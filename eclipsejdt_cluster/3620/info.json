{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "347e90f397ce8d1cc52d56c07872f86d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe6f10c60d70ef84a60728ece469d08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected String getClasspathAsXML( \t\tIClasspathEntry[] classpath, \t\tIPath outputLocation) \t\tthrows JavaModelException", "signatureAfterChange": " \tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean useLineSeparator) throws JavaModelException", "diff": ["+\t */", "+\tprotected String encodeClasspath(IClasspathEntry[] classpath, IPath outputLocation, boolean useLineSeparator) throws JavaModelException {", "+", "+\t\tDocument document = new DocumentImpl();", "+\t\tElement cpElement = document.createElement(\"classpath\"); //$NON-NLS-1$", "+\t\tdocument.appendChild(cpElement);", "+", "+\t\tfor (int i = 0; i < classpath.length; ++i) {", "+\t\t\tcpElement.appendChild(((ClasspathEntry)classpath[i]).elementEncode(document, getProject().getFullPath()));", "+\t\t}", "+", "+\t\tif (outputLocation != null) {", "+\t\t\toutputLocation = outputLocation.removeFirstSegments(1);", "+\t\t\toutputLocation = outputLocation.makeRelative();", "+\t\t\tElement oElement = document.createElement(\"classpathentry\"); //$NON-NLS-1$", "+\t\t\toElement.setAttribute(\"kind\", ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));\t//$NON-NLS-1$", "+\t\t\toElement.setAttribute(\"path\", outputLocation.toString()); //$NON-NLS-1$", "+\t\t\tcpElement.appendChild(oElement);", "+\t\t}", "+", "+\t\t// produce a String output", "+\t\ttry {", "+\t\t\tByteArrayOutputStream s = new ByteArrayOutputStream();", "+\t\t\tOutputFormat format = new OutputFormat();", "+\t\t\tif (useLineSeparator) {", "+\t\t\t\tformat.setIndenting(true);", "+\t\t\t\tformat.setLineSeparator(System.getProperty(\"line.separator\"));  //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tformat.setPreserveSpace(true);", "+\t\t\t}\t\t\t", "+\t\t\tSerializer serializer =", "+\t\t\t\tSerializerFactory.getSerializerFactory(Method.XML).makeSerializer(", "+\t\t\t\t\tnew OutputStreamWriter(s, \"UTF8\"), //$NON-NLS-1$", "+\t\t\t\t\tformat);", "+\t\t\tserializer.asDOMSerializer().serialize(document);", "+\t\t\treturn s.toString(\"UTF8\"); //$NON-NLS-1$", "+\t\t} catch (IOException e) {", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t}", "+\t}", "-\t */", "-\tprotected String getClasspathAsXML(", "-\t\tIClasspathEntry[] classpath,", "-\t\tIPath outputLocation)", "-\t\tthrows JavaModelException {", "-", "-\t\tDocument document = new DocumentImpl();", "-\t\tElement cpElement = document.createElement(\"classpath\"); //$NON-NLS-1$", "-\t\tdocument.appendChild(cpElement);", "-", "-\t\tfor (int i = 0; i < classpath.length; ++i) {", "-\t\t\tcpElement.appendChild(((ClasspathEntry)classpath[i]).elementEncode(document, getProject().getFullPath()));", "-\t\t}", "-", "-\t\tif (outputLocation != null) {", "-\t\t\toutputLocation = outputLocation.removeFirstSegments(1);", "-\t\t\toutputLocation = outputLocation.makeRelative();", "-\t\t\tElement oElement = document.createElement(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\toElement.setAttribute(\"kind\", ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));\t//$NON-NLS-1$", "-\t\t\toElement.setAttribute(\"path\", outputLocation.toString()); //$NON-NLS-1$", "-\t\t\tcpElement.appendChild(oElement);", "-\t\t}", "-", "-\t\t// produce a String output", "-\t\ttry {", "-\t\t\tByteArrayOutputStream s= new ByteArrayOutputStream();", "-\t\t\tOutputFormat format = new OutputFormat();", "-\t\t\tformat.setIndenting(true);", "-\t\t\tformat.setLineSeparator(System.getProperty(\"line.separator\"));  //$NON-NLS-1$", "-\t\t\t", "-\t\t\tSerializer serializer =", "-\t\t\t\tSerializerFactory.getSerializerFactory(Method.XML).makeSerializer(", "-\t\t\t\t\tnew OutputStreamWriter(s, \"UTF8\"), //$NON-NLS-1$", "-\t\t\t\t\tformat);", "-\t\t\tserializer.asDOMSerializer().serialize(document);", "-\t\t\treturn s.toString(\"UTF8\"); //$NON-NLS-1$", "-\t\t} catch (IOException e) {", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d09b7eed7eaae0e272977fa5e572e5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e9319b33025ecf8b2148a8134d3733884dd65fff", "commitAfterChange": "8d91d5c811f3f400237d12dea4d98edfb8f8a099", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, ObjectVector typesFound)", "signatureAfterChange": " \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "diff": ["-\tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, ObjectVector typesFound) {", "+\tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound) {", "-\t\t\t\t\t\tfindKeywords(token, BASE_TYPE_NAMES, false, false);", "+\t\t\t\t\t\tif (proposeVoidType) {", "+\t\t\t\t\t\t\tfindKeywords(token, BASE_TYPE_NAMES, false, false);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tfindKeywords(token, BASE_TYPE_NAMES_WITHOUT_VOID, false, false);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8b1106981db7360fd045e7eeeb7c03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "97f8324e5173c25eb49866037a9ca2738b41d6bc", "commitAfterChange": "d3e0216a95fa30f6c7aa5765196e9b2431469696", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected void assertSearchResults(String message, String expected, Object collector)", "signatureAfterChange": " \tprotected void assertSearchResults(String message, String expected, Object collector, boolean assertion)", "diff": ["+\t}", "+\tprotected void assertSearchResults(String message, String expected, Object collector, boolean assertion) {", "-\t\tassertEquals(", "-\t\t\tmessage,", "-\t\t\texpected,", "-\t\t\tactual", "-\t\t);", "+\t\tif (assertion) {", "+\t\t\tassertEquals(message, expected, actual);", "+\t\t} else {", "+\t\t\tassumeEquals(message, expected, actual);", "+\t\t}"]}], "num": 3620}
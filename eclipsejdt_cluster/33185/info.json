{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d4bc15f8f5fc473f5fd1e869f4d4460", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8911b629905b99b062503351da44ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "signatureAfterChange": " public void complainOnDeferredNullChecks(BlockScope scope, FlowInfo callerFlowInfo)", "diff": ["-\t\t\tswitch (this.nullCheckTypes[i]) {", "+\t\t\tswitch (this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) {", "-\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == (CAN_ONLY_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {", "+\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, location);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, location);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\tswitch (this.nullCheckTypes[i]) {", "+\t\t\tswitch (this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) {", "-\t\t\t\t\t\tif (this.nullCheckTypes[i] == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((this.nullCheckTypes[i] & ~HIDE_NULL_COMPARISON_WARNING_MASK) == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\t\tif ((this.nullCheckTypes[i] & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, expression);", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\tif (((this.nullCheckTypes[i] & CHECK_MASK & ~HIDE_NULL_COMPARISON_WARNING_MASK) == CAN_ONLY_NULL) && (expression.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99ec94d46de4c029e5100883a07983eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "1af62c8ac8c29f055bb8404d4de6ad60e868f8c4", "commitAfterChange": "1c68a970a8cbd8bfa2174955d5c78e149d7e6268", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": "      void postMarkers()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["-", "-    void postMarkers()", "+     */", "+    private void updateProblemLength()", "-    \tfor( MarkerInfo markerInfo : _markerInfos ){    \t\t", "-    \t\tif( markerInfo._markerAttrs.get(IMarker.CHAR_END) == null ) ", "-    \t\t\tcount ++;", "+    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "+    \t\tif( _file.equals(entry.getKey()) ){", "+    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+    \t\t\t\t\tcount ++;", "+    \t\t\t}    \t\t\t\t", "+    \t\t}", "+    \t\telse{", "+    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "+    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "+    \t\t\t}", "+    \t\t}", "-\t    \tfor( MarkerInfo markerInfo : _markerInfos ){    \t\t", "-\t    \t\tif( markerInfo._markerAttrs.get(IMarker.CHAR_END) == null ){", "-\t    \t\t\tfinal Integer startingOffset = (Integer)markerInfo._markerAttrs.get(IMarker.CHAR_START);", "-\t    \t\t\tstartingOffsets[index++] = startingOffset.intValue();", "+\t    \t", "+\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "+\t    \t\tif( entry.getKey() == _file ){", "+\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+\t    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+\t    \t\t\t\t\tstartingOffsets[index++] = problem.getSourceStart();", "+\t    \t\t\t}    \t\t\t\t", "-\t    \tfor( MarkerInfo markerInfo : _markerInfos ){    \t\t", "-\t    \t\tif( markerInfo._markerAttrs.get(IMarker.CHAR_END) == null ){", "-\t    \t\t\tfinal int startingOffset = ", "-\t    \t\t\t\t((Integer)markerInfo._markerAttrs.get(IMarker.CHAR_START)).intValue();", "-\t    \t\t\tint endingOffset = lfinder.getEndingOffset(startingOffset);", "-\t    \t\t\tif( endingOffset == 0 )", "-\t    \t\t\t\tendingOffset = startingOffset;", "-\t    \t\t\tmarkerInfo._markerAttrs.put(IMarker.CHAR_END, endingOffset);", "+\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "+\t    \t\tif( _file.equals(entry.getKey()) ){", "+\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+\t    \t\t\t\tif( problem.getSourceEnd() == -1 ){", "+\t    \t\t\t\t\tint startingOffset = problem.getSourceStart();", "+\t    \t\t\t\t\tint endingOffset = lfinder.getEndingOffset(startingOffset);", "+\t    \t    \t\t\tif( endingOffset == 0 )", "+\t    \t    \t\t\t\tendingOffset = startingOffset;", "+\t    \t    \t\t\tproblem.setSourceEnd(endingOffset);\t    \t    \t\t\t", "+\t    \t\t\t\t}", "+\t    \t\t\t}    \t\t\t\t", "-    \t", "-\t\t// Posting all the markers to the workspace. Doing this in a batch process", "-\t\t// to minimize the amount of notification.", "-\t\ttry{", "-\t\t\t// the resource of the compilation unit in the environment.", "-\t\t\tfinal IResource currentResource = _file; ", "-\t        final IWorkspaceRunnable runnable = new IWorkspaceRunnable(){", "-\t            public void run(IProgressMonitor monitor)", "-\t            {\t            ", "-\t\t\t\t\tfinal String markerType = _phase == Phase.RECONCILE ?", "-\t\t\t\t\t\t\t\t\t\t\t  RECONCILE_MARKER : BUILD_MARKER;\t\t\t\t", "-\t                for( MarkerInfo markerInfo : _markerInfos ){", "-\t                    IResource resource = markerInfo._resource;", "-\t\t\t\t\t\tif( resource == null )", "-\t\t\t\t\t\t\tresource = currentResource;", "-\t\t\t\t\t\ttry{", "-\t\t                    final IMarker marker = resource.createMarker(markerType);", "-\t\t                    marker.setAttributes(markerInfo._markerAttrs);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatch(CoreException e){", "-\t\t\t\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t\t\t\t}", "-\t                }", "-\t            };", "-\t        };", "-\t\t\tcurrentResource.getWorkspace().run(runnable, currentResource, IWorkspace.AVOID_UPDATE, null );", "-", "-\t\t}", "-\t\tcatch(CoreException e){", "-\t\t\tthrow new IllegalStateException(e);", "-\t\t}", "-\t\tfinally{", "-\t\t\t_markerInfos.clear();", "-\t\t}"]}], "num": 33185}
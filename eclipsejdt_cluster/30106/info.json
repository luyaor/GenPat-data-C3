{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdddc2880a7a9f071a147a793f7d3581", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78545afece0cdb56ecc1fa333d7c15b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void inexactParameterToVarargsMethod(MethodBinding method, InvocationSite location)", "signatureAfterChange": " public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "diff": ["+public void ambiguousArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "+\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.AmbiguousArgumentToVarargsConstructor,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.AmbiguousArgumentToVarargsMethod,", "+\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "+\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t}", "+}", "-}", "-public void inexactParameterToVarargsMethod(MethodBinding method, InvocationSite location) {", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.InexactParameterToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), parametersAsString(method.parameters, false)},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), parametersAsString(method.parameters, true)},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.InexactParameterToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), parametersAsString(method.parameters, false)},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), parametersAsString(method.parameters, true)},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec3a7a9d775a7eb736cd74fe17e4691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " public void recursiveConstructorInvocation(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  public void recursiveConstructorInvocation(ExplicitConstructorCall constructorCall)", "diff": ["- */", "-public void recursiveConstructorInvocation(TypeDeclaration typeDeclaration) {", "-\t// propagate the reference count, negative counts means leading to a super constructor invocation (directly or indirectly)", "-\tboolean hasChanged;", "-\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\tint max = methods.length;", "-\tdo {", "-\t\thasChanged = false;", "-\t\tfor(int i = 0; i < max; i++){", "-\t\t\tif (methods[i].isConstructor()){", "-\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) methods[i];", "-\t\t\t\tif (constructor.referenceCount > 0){", "-\t\t\t\t\tConstructorDeclaration targetConstructor = constructor.constructorCall == null", "-\t\t\t\t\t\t? null", "-\t\t\t\t\t\t: (ConstructorDeclaration)(typeDeclaration.declarationOf(constructor.constructorCall.binding));", "-\t\t\t\t\tif ((targetConstructor == null) || (targetConstructor.referenceCount < 0)){", "-\t\t\t\t\t\thasChanged = true;", "-\t\t\t\t\t\tconstructor.referenceCount = -1;", "-\t\t\t\t\t}\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} while (hasChanged);", "+public void recursiveConstructorInvocation(ExplicitConstructorCall constructorCall) {", "-\t// all remaining constructors with a positive count are still involved in a cycle", "-\tfor(int i = 0; i < max; i++){", "-\t\tif (methods[i].isConstructor()){", "-\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) methods[i];", "-\t\t\tif (constructor.referenceCount > 0){", "-\t\t\t\tthis.referenceContext = constructor;", "-\t\t\t\tthis.handle(", "-\t\t\t\t\tIProblem.RecursiveConstructorInvocation,", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(constructor.constructorCall.binding.declaringClass.readableName()), ", "-\t\t\t\t\t\tparametersAsString(constructor.constructorCall.binding)", "-\t\t\t\t\t},", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(constructor.constructorCall.binding.declaringClass.shortReadableName()), ", "-\t\t\t\t\t\tparametersAsShortString(constructor.constructorCall.binding)", "-\t\t\t\t\t},", "-\t\t\t\t\tconstructor.constructorCall.sourceStart,", "-\t\t\t\t\tconstructor.constructorCall.sourceEnd);", "-\t\t\t}", "-\t\t}", "-\t}", "+\tthis.handle(", "+\t\tIProblem.RecursiveConstructorInvocation,", "+\t\tnew String[] {", "+\t\t\tnew String(constructorCall.binding.declaringClass.readableName()), ", "+\t\t\tparametersAsString(constructorCall.binding)", "+\t\t},", "+\t\tnew String[] {", "+\t\t\tnew String(constructorCall.binding.declaringClass.shortReadableName()), ", "+\t\t\tparametersAsShortString(constructorCall.binding)", "+\t\t},", "+\t\tconstructorCall.sourceStart,", "+\t\tconstructorCall.sourceEnd);"]}], "num": 30106}
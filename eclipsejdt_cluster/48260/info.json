{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed74a429bcf0ed53a562e40dde02de33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d69390025af6a2ffc0e7a62698f6b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "38d28ea617b0a936911af5a6eaa00f4a348a9008", "commitAfterChange": "53df7d602035de3d31fcc1ea92403ee3f66bc84a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic ReferenceBinding findDirectMemberType(char[] typeName, ReferenceBinding enclosingType)", "signatureAfterChange": " \tpublic ReferenceBinding findDirectMemberType(char[] typeName, ReferenceBinding enclosingType)", "diff": ["-\t\t\tif (enclosingReceiverType == null", "-\t\t\t\t? memberType.canBeSeenBy(getCurrentPackage())", "-\t\t\t\t: memberType.canBeSeenBy(enclosingType, enclosingReceiverType))", "+\t\t\tif (enclosingReceiverType == null) {", "+\t\t\t\tif (memberType.canBeSeenBy(getCurrentPackage())) {", "+\t\t\t\t}", "+\t\t\t\t// maybe some type in the compilation unit is extending some class in some package", "+\t\t\t\t// and the selection is for some protected inner class of that superclass", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=235658", "+\t\t\t\tif (this instanceof CompilationUnitScope) {", "+\t\t\t\t\tTypeDeclaration[] types = ((CompilationUnitScope)this).referenceContext.types;", "+\t\t\t\t\tif (types != null) {", "+\t\t\t\t\t\tfor (int i = 0, max = types.length; i < max; i++) {", "+\t\t\t\t\t\t\tif (memberType.canBeSeenBy(enclosingType, types[i].binding)) {", "+\t\t\t\t\t\t\t\treturn memberType;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (memberType.canBeSeenBy(enclosingType, enclosingReceiverType)) {", "+\t\t\t\treturn memberType;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "365e8e449f399820860f75e3ee234784", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "07b82c9368bd10ac7ebb1046caebd6da084b537f", "commitAfterChange": "cb61394506c50bdecec5c108eded9cebfe12f3fe", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "signatureAfterChange": " \t \tpublic ForStatement convert(org.eclipse.jdt.internal.compiler.ast.ForStatement statement)", "diff": ["-\t\t\tint initializationsLength = initializations.length;", "-\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "-\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "+\t\t\t// we know that we have at least one initialization", "+\t\t\tif (initializations[0] instanceof LocalDeclaration) {", "+\t\t\t\tVariableDeclarationExpression variableDeclarationExpression = convertToVariableDeclarationExpression((LocalDeclaration) initializations[0]);", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 1; i < initializationsLength; i++) {", "+\t\t\t\t\tvariableDeclarationExpression.fragments().add(convertToVariableDeclarationFragment((LocalDeclaration)initializations[i]));", "+\t\t\t\t}", "+\t\t\t\tforStatement.initializers().add(variableDeclarationExpression);", "+\t\t\t} else {", "+\t\t\t\tint initializationsLength = initializations.length;", "+\t\t\t\tfor (int i = 0; i < initializationsLength; i++) {", "+\t\t\t\t\tforStatement.initializers().add(convertToExpression(initializations[i]));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59b67ceb3b88d2dd88c8790b47d11de4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "eff66822782d106f03c0800c15129e6995eea01c", "commitAfterChange": "899768f2df905f3ba878d5719c34fb81d4ef08b5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "signatureAfterChange": " \t \tpublic static void checkAnnotationValue(TypeBinding requiredType, TypeBinding annotationType, char[] memberName, Expression memberValue, Scope scope)", "diff": ["-\t\t\t\t\tif (memberValue.constant == NotAConstant) {", "+\t\t\t\t\tif (memberValue instanceof ArrayInitializer) {", "+\t\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) memberValue;", "+\t\t\t\t\t\tfinal Expression[] expressions = initializer.expressions;", "+\t\t\t\t\t\tif (expressions != null) {", "+\t\t\t\t\t\t\tfor (int i =0, max = expressions.length; i < max; i++) {", "+\t\t\t\t\t\t\t\tif (expressions[i].constant == NotAConstant) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().annotationValueMustBeConstant(annotationType, memberName, memberValue);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (memberValue.constant == NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b6fe783c58efff377e453cb0cb3b88f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "7a140644bb864b33a5703af3dc19c84a2bcb243d", "commitAfterChange": "0f61b5a730cd24bb7ab05a282fa3a07ec8b534a5", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["+\t\t\t\t// contradictory null annotations on the type are already detected in Annotation.resolveType() (SE7 treatment)", "-\t\t\t\tthis.resolvedType = resolveAnnotations(resolutionScope, annotationsOnDimensions, this.resolvedType);\t\t", "+\t\t\t\tthis.resolvedType = resolveAnnotations(resolutionScope, annotationsOnDimensions, this.resolvedType);", "+\t\t\t\tif (this.resolvedType instanceof ArrayBinding) {", "+\t\t\t\t\tlong[] nullTagBitsPerDimension = ((ArrayBinding)this.resolvedType).nullTagBitsPerDimension;", "+\t\t\t\t\tif (nullTagBitsPerDimension != null) {", "+\t\t\t\t\t\tfor (int i = 0; i < dimensions; i++) { // skip last annotations at [dimensions] (concerns the leaf type)", "+\t\t\t\t\t\t\tif ((nullTagBitsPerDimension[i] & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(annotationsOnDimensions[i]);", "+\t\t\t\t\t\t\t\tnullTagBitsPerDimension[i] = 0;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 48260}
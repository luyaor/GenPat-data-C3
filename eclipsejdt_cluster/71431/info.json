{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd41736dd6c3a8ec8c060b2cba215e9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "879c0bb5c9c829a41a207bf2def21348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "bcb46990486d868577608d099b51c359510600ab", "commitAfterChange": "76641371763d25b26245b79d3162c6759e069b9e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["+ */", "+protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException {", "+\tfor (int i=0, al=annotations.length; i<al; i++) {", "+\t\tAnnotation annotationType = annotations[i];", "+", "+\t\t// Look for annotation type ref", "+\t\tTypeReference typeRef = annotationType.type;", "+\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeRef);", "+\t\tif (level != null && matchedContainer) {", "+\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t}", "+\t\t", "+\t\t// Look for attribute ref", "+\t\tMemberValuePair[] pairs = annotationType.memberValuePairs();", "+\t\tfor (int j = 0, pl = pairs.length; j < pl; j++) {", "+\t\t\tMemberValuePair pair = pairs[j];", "+\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(pair);", "+\t\t\tif (level != null && enclosesElement) {", "+\t\t\t\tASTNode reference = (annotationType instanceof SingleMemberAnnotation) ? (ASTNode) annotationType: pair;", "+\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, pair.binding, level.intValue(), this);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9170d85ef5e412d2054fff745f72a69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1fe69d52230e67687b32b072c6843ac0b930c0b8", "commitAfterChange": "6b2eaccbd1d9579997548e9877abcafa55f36650", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean moveRecoveryCheckpoint()", "signatureAfterChange": " private void addPotentialName(char[] potentialVariableName, int start, int end)", "diff": ["+}", "+private void addPotentialName(char[] potentialVariableName, int start, int end) {", "+\tint length = this.potentialVariableNames.length;", "+\tif (this.potentialVariableNamesPtr >= length - 1) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.potentialVariableNames, ", "+\t\t\t\t0,", "+\t\t\t\tthis.potentialVariableNames = new char[length * 2][],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.potentialVariableNameStarts,", "+\t\t\t\t0,", "+\t\t\t\tthis.potentialVariableNameStarts = new int[length * 2],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.potentialVariableNameEnds,", "+\t\t\t\t0,", "+\t\t\t\tthis.potentialVariableNameEnds = new int[length * 2],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t}", "+\tthis.potentialVariableNames[++this.potentialVariableNamesPtr] = potentialVariableName;", "+\tthis.potentialVariableNameStarts[this.potentialVariableNamesPtr] = start;", "+\tthis.potentialVariableNameEnds[this.potentialVariableNamesPtr] = end;", "+}", "-protected boolean moveRecoveryCheckpoint() {", "-\tCompletionScanner completionScanner = (CompletionScanner) this.scanner;", "-\tboolean recordIdentifers = completionScanner.record;", "-\tif (!recordIdentifers) {", "-\t\treturn super.moveRecoveryCheckpoint();", "-\t}", "-", "-\tcompletionScanner.record = false;", "-", "-\tint pos = this.lastCheckPoint;", "-\tint curTok = completionScanner.lastUsedToken;", "-\tint curTokStart = completionScanner.lastUsedTokenStart;", "-", "-\t/* reset this.scanner, and move checkpoint by one token */", "-\tthis.scanner.startPosition = pos;", "-\tthis.scanner.currentPosition = pos;", "-\tthis.scanner.diet = false; // quit jumping over method bodies", "-", "-\tcompletionScanner.currentToken = curTok;", "-\tcompletionScanner.currentTokenStart = curTokStart;", "-", "-\t/* if about to restart, then no need to shift token */", "-\tif (this.restartRecovery){", "-\t\tthis.lastIgnoredToken = -1;", "-\t\tthis.scanner.insideRecovery = true;", "-\t\tcompletionScanner.record = true;", "-\t\treturn true;", "-\t}", "-", "-\t/* protect against shifting on an invalid token */", "-\tthis.lastIgnoredToken = this.nextIgnoredToken;", "-\tthis.nextIgnoredToken = -1;", "-\tdo {", "-\t\ttry {", "-\t\t\tthis.nextIgnoredToken = this.scanner.getNextToken();", "-\t\t\tif(this.scanner.currentPosition == this.scanner.startPosition){", "-\t\t\t\tthis.scanner.currentPosition++; // on fake completion identifier", "-\t\t\t\tthis.nextIgnoredToken = -1;", "-\t\t\t}", "-", "-\t\t} catch(InvalidInputException e){", "-\t\t\tpos = this.scanner.currentPosition;", "-\t\t}", "-\t} while (this.nextIgnoredToken < 0);", "-", "-\tif (this.nextIgnoredToken == TokenNameEOF) { // no more recovery after this point", "-\t\tif (this.currentToken == TokenNameEOF) { // already tried one iteration on EOF", "-\t\t\tcompletionScanner.record = true;", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-\tthis.lastCheckPoint = this.scanner.currentPosition;", "-\tcompletionScanner.lastUsedToken = this.nextIgnoredToken;", "-\tcompletionScanner.lastUsedTokenStart = this.lastCheckPoint;", "-", "-\t/* reset this.scanner again to previous checkpoint location*/", "-\tthis.scanner.startPosition = pos;", "-\tthis.scanner.currentPosition = pos;", "-\tthis.scanner.commentPtr = -1;", "-\tthis.scanner.foundTaskCount = 0;", "-", "-\tcompletionScanner.currentToken = curTok;", "-\tcompletionScanner.currentTokenStart = curTokStart;", "-\tcompletionScanner.record = true;", "-", "-\treturn true;", "-}"]}], "num": 71431}
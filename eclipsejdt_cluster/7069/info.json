{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c53c623dbfcaf00001df17db1f10b117", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcbd1b480c7b976e911b46b2cadeaf52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic FlowInfo addInitializationsFrom(FlowInfo inits)", "signatureAfterChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "diff": ["+public FlowInfo addInitializationsFrom(FlowInfo inits) {", "+\tif (this == DEAD_END)", "+\t\treturn this;", "+\tif (inits == DEAD_END)", "+\t\treturn this;", "+\tUnconditionalFlowInfo otherInits = inits.unconditionalInits();\t\t", "+", "+\t// union of definitely assigned variables, ", "+\tthis.definiteInits |= otherInits.definiteInits;", "+\t// union of potentially set ones", "+\tthis.potentialInits |= otherInits.potentialInits;", "+\t// combine null information", "+\t// note: we may have both forms of protection (null and non null) ", "+\t// coming with otherInits, because of loops", "+\tboolean considerNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0;", "+\tlong a1, na1, a2, na2, a3, a4, na4, b1, b2, nb2, b3, nb3, b4, nb4;", "+\t// REVIEW does an inner declaration save stack space? does duplicate declaration waste time?", "+\tif (considerNulls) {", "+\t\tif ((this.tagBits & NULL_FLAG_MASK) == 0) {", "+\t\t\tthis.nullAssignmentStatusBit1 = otherInits.nullAssignmentStatusBit1;", "+\t\t\tthis.nullAssignmentStatusBit2 = otherInits.nullAssignmentStatusBit2;", "+\t\t\tthis.nullAssignmentValueBit1 = otherInits.nullAssignmentValueBit1;", "+\t\t\tthis.nullAssignmentValueBit2 = otherInits.nullAssignmentValueBit2;", "+\t\t\tif (coverageTestFlag && coverageTestId == 1) {", "+\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t// TODO (maxime) indent as follows: ", "+\t\t\t/*", "+\t\t\t *   a ", "+\t\t\t *   \t| (b", "+\t\t\t *   \t\t& c)", "+\t\t\t *   ", "+\t\t\t */", "+\t\t\t// REVIEW indentation example", "+\t\t\tthis.nullAssignmentStatusBit1 =", "+\t\t\t\t(b1 = otherInits.nullAssignmentStatusBit1) ", "+\t\t\t\t\t| ((a1 = this.nullAssignmentStatusBit1) ", "+\t\t\t\t\t\t& (((nb2 = ~(b2 = otherInits.nullAssignmentStatusBit2)) ", "+\t\t\t\t\t\t\t\t& (nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) ", "+\t\t\t\t\t\t\t\t& ((nb4 = ~(b4 = otherInits.nullAssignmentValueBit2)) ", "+\t\t\t\t\t\t\t\t\t| ((a2 = this.nullAssignmentStatusBit2) ", "+\t\t\t\t\t\t\t\t\t\t^ (a4 = this.nullAssignmentValueBit2)))) ", "+\t\t\t\t\t\t\t| nb4 &\t(na2 = ~a2)\t& (na4 = ~a4)));", "+\t\t\tthis.nullAssignmentStatusBit2 =", "+\t\t\t\t(b1 & b2) ", "+\t\t\t\t\t| (~b1 ", "+\t\t\t\t\t\t& ((((na1 = ~a1) | a4) & b2) ", "+\t\t\t\t\t\t\t| (a2 ", "+\t\t\t\t\t\t\t\t& (b2 ", "+\t\t\t\t\t\t\t\t\t| (a1 & (na4 = ~a4) & nb2 & nb3) ", "+\t\t\t\t\t\t\t\t\t| ((~(a3 = this.nullAssignmentValueBit1) & nb3) ", "+\t\t\t\t\t\t\t\t\t\t\t| (na1 & na4)) ", "+\t\t\t\t\t\t\t\t\t\t& nb4))));", "+\t\t\tthis.nullAssignmentValueBit1 = ", "+\t\t\t\tnb2 & b3 |", "+\t\t\t\t~b1 & ((a1 & na2 & na4 | na1 & a3) & (nb2 | nb4) |", "+\t\t\t\t\t\ta1 & na2 & a3 & nb2 |", "+\t\t\t\t\t\t(a1 | a2 | na4) & b3);", "+\t\t\tthis.nullAssignmentValueBit2 =", "+\t\t\t\tb4 |", "+\t\t\t\ta4 & (nb2 & nb3 | ~(b1 ^ b2));", "+\t\t\tif (coverageTestFlag && coverageTestId == 2) {", "+\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t}", "+\t\t}", "+\t\tthis.tagBits |= NULL_FLAG_MASK; // in all cases - avoid forgetting extras", "-\t// unions of both sets of initialization - used for try/finally", "-\tpublic FlowInfo addInitializationsFrom(FlowInfo inits) {", "-", "-\t\tif (this == DEAD_END)", "-\t\t\treturn this;", "-", "-\t\tUnconditionalFlowInfo otherInits = inits.unconditionalInits();\t", "-\t\tif (otherInits == DEAD_END)", "-\t\t\treturn this;", "-\t\t\t", "-\t\t// union of definitely assigned variables, ", "-\t\tdefiniteInits |= otherInits.definiteInits;", "-\t\t// union of potentially set ones", "-\t\tpotentialInits |= otherInits.potentialInits;", "-\t", "-\t\t// union of definitely null variables, ", "-\t\tdefiniteNulls = (definiteNulls | otherInits.definiteNulls) & ~otherInits.definiteNonNulls;", "-\t\t// union of definitely non null variables,", "-\t\tdefiniteNonNulls = (definiteNonNulls | otherInits.definiteNonNulls) & ~otherInits.definiteNulls;", "-\t\t// fix-up null/non-null infos since cannot overlap: <defN1:0,defNoN1:1>  + <defN2:1,defNoN2:0>  --> <defN:0,defNon:0>", "-", "-\t\t// treating extra storage", "-\t\tif (extraDefiniteInits != null) {", "-\t\t\tif (otherInits.extraDefiniteInits != null) {", "+\t// treating extra storage", "+\tif (this.extra != null || otherInits.extra != null) {", "+\t\tint mergeLimit = 0, copyLimit = 0;", "+\t\tif (this.extra != null) {", "+\t\t\tif (otherInits.extra != null) {", "-\t\t\t\tint i = 0, length, otherLength;", "-\t\t\t\tif ((length = extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "-\t\t\t\t\t// current storage is shorter -> grow current (could maybe reuse otherInits extra storage?)", "-\t\t\t\t\tSystem.arraycopy(extraDefiniteInits, 0, (extraDefiniteInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(extraPotentialInits, 0, (extraPotentialInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(extraDefiniteNulls, 0, (extraDefiniteNulls = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(extraDefiniteNonNulls, 0, (extraDefiniteNonNulls = new long[otherLength]), 0, length);\t\t\t\t\t", "-\t\t\t\t\tfor (; i < length; i++) {", "-\t\t\t\t\t\textraDefiniteInits[i] |= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\textraDefiniteNulls[i] = (extraDefiniteNulls[i] | otherInits.extraDefiniteNulls[i]) & ~otherInits.extraDefiniteNonNulls[i];", "-\t\t\t\t\t\textraDefiniteNonNulls[i] = (extraDefiniteNonNulls[i] | otherInits.extraDefiniteNonNulls[i]) & ~otherInits.extraDefiniteNulls[i];", "+\t\t\t\tint length, otherLength;", "+\t\t\t\tif ((length = this.extra[0].length) < ", "+\t\t\t\t\t\t(otherLength = otherInits.extra[0].length)) {", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 3) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 3\"); //$NON-NLS-1$", "-\t\t\t\t\tfor (; i < otherLength; i++) {", "-\t\t\t\t\t\textraPotentialInits[i] = otherInits.extraPotentialInits[i];", "+\t\t\t\t\t// current storage is shorter -> grow current", "+\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[otherLength]), 0, length);", "+\t\t\t\t\tmergeLimit = length;", "+\t\t\t\t\tcopyLimit = otherLength;", "-\t\t\t\t\t// current storage is longer", "-\t\t\t\t\tfor (; i < otherLength; i++) {", "-\t\t\t\t\t\textraDefiniteInits[i] |= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\textraDefiniteNulls[i] = (extraDefiniteNulls[i] | otherInits.extraDefiniteNulls[i]) & ~otherInits.extraDefiniteNonNulls[i];", "-\t\t\t\t\t\textraDefiniteNonNulls[i] = (extraDefiniteNonNulls[i] | otherInits.extraDefiniteNonNulls[i]) & ~otherInits.extraDefiniteNulls[i];", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 4) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 4\"); //$NON-NLS-1$", "-\t\t\t\t\tfor (; i < length; i++) {", "-\t\t\t\t\t\textraDefiniteInits[i] = 0;", "-\t\t\t\t\t\textraDefiniteNulls[i] = 0;", "-\t\t\t\t\t\textraDefiniteNonNulls[i] = 0;", "+\t\t\t\t\t// current storage is longer", "+\t\t\t\t\tmergeLimit = otherLength;", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t} ", "+\t\telse if (otherInits.extra != null) {", "+\t\t\t// no storage here, but other has extra storage.", "+\t\t\t// shortcut regular copy because array copy is better", "+\t\t\tint otherLength;", "+\t\t\tthis.extra = new long[extraLength][];", "+\t\t\tSystem.arraycopy(otherInits.extra[0], 0, ", "+\t\t\t\t(this.extra[0] = new long[otherLength = ", "+\t\t\t\t\totherInits.extra[0].length]), 0, otherLength);\t\t\t", "+\t\t\tSystem.arraycopy(otherInits.extra[1], 0, ", "+\t\t\t\t(this.extra[1] = new long[otherLength]), 0, otherLength);", "+\t\t\tif (considerNulls) {", "+\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\tSystem.arraycopy(otherInits.extra[j], 0, ", "+\t\t\t\t\t\t(this.extra[j] = new long[otherLength]), 0, otherLength);", "+\t\t\t\t}", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 5) {", "+\t\t\t\t\tthis.extra[5][otherLength - 1] = ~0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[otherLength];\t\t\t", "+\t\t\t\t}", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 6) {", "+\t\t\t\t\tthis.extra[5][otherLength - 1] = ~0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tint i = 0;", "+\t\tfor (; i < mergeLimit; i++) {", "+\t\t\tthis.extra[0][i] |= otherInits.extra[0][i];", "+\t\t\tthis.extra[1][i] |= otherInits.extra[1][i];", "+\t\t\tif (considerNulls) { // could consider pushing the test outside the loop", "+\t\t\t\tif (this.extra[2][i] == 0 &&", "+\t\t\t\t\t\tthis.extra[3][i] == 0 &&", "+\t\t\t\t\t\tthis.extra[4][i] == 0 &&", "+\t\t\t\t\t\tthis.extra[5][i] == 0) {", "+\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "+\t\t\t\t\t}", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 7) {", "+\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t} else {", "-\t\t\t\t// no extra storage on otherInits", "+\t\t\t\telse {", "+\t\t\t\t\tthis.extra[2][i] =", "+\t\t\t\t\t\t(b1 = otherInits.extra[2][i]) |", "+\t\t\t\t\t\t(a1\t = this.extra[2][i]) & ", "+\t\t\t\t\t\t\t((nb2 = ~(b2 = otherInits.extra[3][i])) &", "+\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) &", "+\t\t\t\t\t\t\t\t((nb4 = ~(b4 = otherInits.extra[5][i])) |", "+\t\t\t\t\t\t\t\t\t((a2 = this.extra[3][i]) ^ ", "+\t\t\t\t\t\t\t\t\t\t(a4 = this.extra[5][i]))) | ", "+\t\t\t\t\t\t\tnb4 & (na2 = ~a2) & (na4 = ~a4));", "+\t\t\t\t\tthis.extra[3][i] =", "+\t\t\t\t\t\tb1 & b2 |", "+\t\t\t\t\t\t~b1 & (((na1 = ~a1) | a4) & b2 |", "+\t\t\t\t\t\t\t\ta2 & (b2 |", "+\t\t\t\t\t\t\t\t\ta1 & (na4 = ~a4) & nb2 & nb3 |", "+\t\t\t\t\t\t\t\t\t(~(a3 = this.extra[4][i]) & nb3 | na1 & na4) & nb4));", "+\t\t\t\t\tthis.extra[4][i] = ", "+\t\t\t\t\t\tnb2 & b3 |", "+\t\t\t\t\t\t~b1 & ((a1 & na2 & na4 | na1 & a3) & (nb2 | nb4) |", "+\t\t\t\t\t\t\t\ta1 & na2 & a3 & nb2 |", "+\t\t\t\t\t\t\t\t(a1 | a2 | na4) & b3);", "+\t\t\t\t\tthis.extra[5][i] =", "+\t\t\t\t\t\tb4 |", "+\t\t\t\t\t\ta4 & (nb2 & nb3 | ~(b1 ^ b2));", "+\t\t\t\t\t\tif (coverageTestFlag && coverageTestId == 8) {", "+\t\t\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t} else", "-\t\t\tif (otherInits.extraDefiniteInits != null) {", "-\t\t\t\t// no storage here, but other has extra storage.", "-\t\t\t\tint otherLength;", "-\t\t\t\tSystem.arraycopy(otherInits.extraDefiniteInits, 0, (extraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length]), 0, otherLength);\t\t\t", "-\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (extraPotentialInits = new long[otherLength]), 0, otherLength);", "-\t\t\t\tSystem.arraycopy(otherInits.extraDefiniteNulls, 0, (extraDefiniteNulls = new long[otherLength]), 0, otherLength);\t\t\t", "-\t\t\t\tSystem.arraycopy(otherInits.extraDefiniteNonNulls, 0, (extraDefiniteNonNulls = new long[otherLength]), 0, otherLength);\t\t\t", "+\t\t}", "+\t\tfor (; i < copyLimit; i++) {", "+\t\t\tthis.extra[0][i] = otherInits.extra[0][i];", "+\t\t\tthis.extra[1][i] = otherInits.extra[1][i];", "+\t\t\tif (considerNulls) {", "+\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "+\t\t\t\t}", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 9) {", "+\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t}", "+\t\t}", "+\t}", "+\treturn this;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbe696619c69c1ec91a89509b23f5143", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "signatureAfterChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "diff": ["-\t// note: we may have both forms of protection (null and non null) ", "-\t// coming with otherInits, because of loops", "-\tboolean considerNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0;", "-\tlong a1, na1, a2, na2, a3, a4, na4, b1, b2, nb2, b3, nb3, b4, nb4;", "-\tif (considerNulls) {", "-\t\tif ((this.tagBits & NULL_FLAG_MASK) == 0) {", "-\t\t\tthis.nullAssignmentStatusBit1 = otherInits.nullAssignmentStatusBit1;", "-\t\t\tthis.nullAssignmentStatusBit2 = otherInits.nullAssignmentStatusBit2;", "-\t\t\tthis.nullAssignmentValueBit1 = otherInits.nullAssignmentValueBit1;", "-\t\t\tthis.nullAssignmentValueBit2 = otherInits.nullAssignmentValueBit2;", "+\tboolean thisHadNulls = (this.tagBits & NULL_FLAG_MASK) != 0,", "+\t\totherHasNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0;", "+\tlong ", "+\t\ta1, a2, a3, a4, ", "+\t\tna1, na2, na3, na4, ", "+\t\tb1, b2, b3, b4,", "+\t\tnb1, nb2, nb3, nb4;", "+\tif (otherHasNulls) {", "+\t\tif (!thisHadNulls) {", "+\t\t\tthis.nullBit1 = otherInits.nullBit1;", "+\t\t\tthis.nullBit2 = otherInits.nullBit2;", "+\t\t\tthis.nullBit3 = otherInits.nullBit3;", "+\t\t\tthis.nullBit4 = otherInits.nullBit4;", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t  this.nullBit4 = ~0;", "-\t\t\tthis.nullAssignmentStatusBit1 =", "-\t\t\t\t(b1 = otherInits.nullAssignmentStatusBit1) ", "-\t\t\t\t\t| ((a1 = this.nullAssignmentStatusBit1) ", "-\t\t\t\t\t\t& (((nb2 = ~(b2 = otherInits.nullAssignmentStatusBit2)) ", "-\t\t\t\t\t\t\t\t& (nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) ", "-\t\t\t\t\t\t\t\t& ((nb4 = ~(b4 = otherInits.nullAssignmentValueBit2)) ", "-\t\t\t\t\t\t\t\t\t| ((a2 = this.nullAssignmentStatusBit2) ", "-\t\t\t\t\t\t\t\t\t\t^ (a4 = this.nullAssignmentValueBit2)))) ", "-\t\t\t\t\t\t\t| nb4 &\t(na2 = ~a2)\t& (na4 = ~a4)));", "-\t\t\tthis.nullAssignmentStatusBit2 =", "-\t\t\t\t(b1 & b2) ", "-\t\t\t\t\t| (~b1 ", "-\t\t\t\t\t\t& ((((na1 = ~a1) | a4) & b2) ", "-\t\t\t\t\t\t\t| (a2 ", "-\t\t\t\t\t\t\t\t& (b2 ", "-\t\t\t\t\t\t\t\t\t| (a1 & (na4 = ~a4) & nb2 & nb3) ", "-\t\t\t\t\t\t\t\t\t| ((~(a3 = this.nullAssignmentValueBit1) & nb3) ", "-\t\t\t\t\t\t\t\t\t\t\t| (na1 & na4)) ", "-\t\t\t\t\t\t\t\t\t\t& nb4))));", "-\t\t\tthis.nullAssignmentValueBit1 = ", "-\t\t\t\tnb2 & b3 |", "-\t\t\t\t~b1 & ((a1 & na2 & na4 | na1 & a3) & (nb2 | nb4) |", "-\t\t\t\t\t\ta1 & na2 & a3 & nb2 |", "-\t\t\t\t\t\t(a1 | a2 | na4) & b3);", "-\t\t\tthis.nullAssignmentValueBit2 =", "-\t\t\t\tb4 |", "-\t\t\t\ta4 & (nb2 & nb3 | ~(b1 ^ b2));", "+\t\t\tthis.nullBit1 = (b1 = otherInits.nullBit1)", "+                \t\t\t\t| (a1 = this.nullBit1) & ((a3 = this.nullBit3) ", "+                \t\t\t\t\t& (a4 = this.nullBit4) & (nb2 = ~(b2 = otherInits.nullBit2)) ", "+                \t\t\t\t\t& (nb4 = ~(b4 = otherInits.nullBit4))", "+                        \t\t| ((na4 = ~a4) | (na3 = ~a3)) ", "+                        \t\t\t& ((na2 = ~(a2 = this.nullBit2)) & nb2 ", "+                        \t\t\t\t| a2 & (nb3 = ~(b3 = otherInits.nullBit3)) & nb4));", "+\t\t\tthis.nullBit2  = b2 & (nb4 | nb3)", "+                    \t\t\t| na3 & na4 & b2", "+                    \t\t\t| a2 & (nb3 & nb4", "+                                \t\t\t| (nb1 = ~b1) & (na3 | (na1 = ~a1))", "+                                \t\t\t| a1 & b2);", "+\t\t\tthis.nullBit3 = b3 & (nb1 & (b2 | a2 | na1)", "+                        \t\t\t| b1 & (b4 | nb2 | a1 & a3)", "+                         \t\t\t| na1 & na2 & na4)", "+                    \t\t\t| a3 & nb2 & nb4", "+                    \t\t\t| nb1 & ((na2 & a4 | na1) & a3", "+                                \t\t\t| a1 & na2 & na4 & b2);", "+\t\t\tthis.nullBit4 = nb1 & (a4 & (na3 & nb3\t| (a3 | na2) & nb2)", "+                      \t\t\t| a1 & (a3 & nb2 & b4", "+                              \t\t\t| a2 & b2 & (b4\t| a3 & na4 & nb3)))", "+                      \t\t\t| b1 & (a3 & a4 & b4", "+                          \t\t\t| na2 & na4 & nb3 & b4", "+                          \t\t\t| a2 & ((b3 | a4) & b4", "+                                  \t\t\t\t| na3 & a4 & b2 & b3)", "+                          \t\t\t| na1 & (b4\t| (a4 | a2) & b2 & b3))", "+                      \t\t\t| (na1 & (na3 & nb3 | na2 & nb2)", "+                      \t\t\t\t| a1 & (nb2 & nb3 | a2 & a3)) & b4;\t", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t  this.nullBit4 = ~0;", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 3) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 3\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 3) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 3\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\t// current storage is longer", "+\t\t\t\t\tmergeLimit = otherLength;", "-\t\t\t\t\t// current storage is longer", "-\t\t\t\t\tmergeLimit = otherLength;", "-\t\t} ", "-\t\telse if (otherInits.extra != null) {", "+\t\t} else if (otherInits.extra != null) {", "-\t\t\tif (considerNulls) {", "+\t\t\tif (otherHasNulls) {", "-\t\t\t\t\tthis.extra[5][otherLength - 1] = ~0;", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 6\"); //$NON-NLS-1$", "-\t\tint i = 0;", "-\t\tfor (; i < mergeLimit; i++) {", "+\t\tint i;", "+\t\t// manage definite assignment info", "+\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\tif (considerNulls) { // could consider pushing the test outside the loop", "-\t\t\t\tif (this.extra[2][i] == 0 &&", "-\t\t\t\t\t\tthis.extra[3][i] == 0 &&", "-\t\t\t\t\t\tthis.extra[4][i] == 0 &&", "-\t\t\t\t\t\tthis.extra[5][i] == 0) {", "-\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "-\t\t\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "-\t\t\t\t\t}", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 7) {", "-\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tthis.extra[2][i] =", "-\t\t\t\t\t\t(b1 = otherInits.extra[2][i]) |", "-\t\t\t\t\t\t(a1\t = this.extra[2][i]) & ", "-\t\t\t\t\t\t\t((nb2 = ~(b2 = otherInits.extra[3][i])) &", "-\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) &", "-\t\t\t\t\t\t\t\t((nb4 = ~(b4 = otherInits.extra[5][i])) |", "-\t\t\t\t\t\t\t\t\t((a2 = this.extra[3][i]) ^ ", "-\t\t\t\t\t\t\t\t\t\t(a4 = this.extra[5][i]))) | ", "-\t\t\t\t\t\t\tnb4 & (na2 = ~a2) & (na4 = ~a4));", "-\t\t\t\t\tthis.extra[3][i] =", "-\t\t\t\t\t\tb1 & b2 |", "-\t\t\t\t\t\t~b1 & (((na1 = ~a1) | a4) & b2 |", "-\t\t\t\t\t\t\t\ta2 & (b2 |", "-\t\t\t\t\t\t\t\t\ta1 & (na4 = ~a4) & nb2 & nb3 |", "-\t\t\t\t\t\t\t\t\t(~(a3 = this.extra[4][i]) & nb3 | na1 & na4) & nb4));", "-\t\t\t\t\tthis.extra[4][i] = ", "-\t\t\t\t\t\tnb2 & b3 |", "-\t\t\t\t\t\t~b1 & ((a1 & na2 & na4 | na1 & a3) & (nb2 | nb4) |", "-\t\t\t\t\t\t\t\ta1 & na2 & a3 & nb2 |", "-\t\t\t\t\t\t\t\t(a1 | a2 | na4) & b3);", "-\t\t\t\t\tthis.extra[5][i] =", "-\t\t\t\t\t\tb4 |", "-\t\t\t\t\t\ta4 & (nb2 & nb3 | ~(b1 ^ b2));", "-\t\t\t\t\t\tif (coverageTestFlag && coverageTestId == 8) {", "-\t\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (considerNulls) {", "-\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "-\t\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "-\t\t\t\t}", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 9) {", "-\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t}", "+\t\t}", "+\t\t// tweak limits for nulls", "+\t\tif (!thisHadNulls) {", "+\t\t    if (copyLimit < mergeLimit) {", "+\t\t      \tcopyLimit = mergeLimit;", "+\t\t    }", "+\t\t  \tmergeLimit = 0;", "+\t\t}", "+\t\tif (!otherHasNulls) {", "+\t\t  \tcopyLimit = 0;", "+\t\t  \tmergeLimit = 0;", "+\t\t}", "+\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t\t\tthis.extra[1 + 1][i] = (b1 = otherInits.extra[1 + 1][i])", "+                \t\t\t\t| (a1 = this.extra[1 + 1][i]) & ((a3 = this.extra[3 + 1][i]) ", "+                \t\t\t\t\t& (a4 = this.extra[4 + 1][i]) & (nb2 = ~(b2 = otherInits.extra[2 + 1][i])) ", "+                \t\t\t\t\t& (nb4 = ~(b4 = otherInits.extra[4 + 1][i]))", "+                        \t\t| ((na4 = ~a4) | (na3 = ~a3)) ", "+                        \t\t\t& ((na2 = ~(a2 = this.extra[2 + 1][i])) & nb2 ", "+                        \t\t\t\t| a2 & (nb3 = ~(b3 = otherInits.extra[3 + 1][i])) & nb4));", "+\t\t\tthis.extra[2 + 1][i]  = b2 & (nb4 | nb3)", "+                    \t\t\t| na3 & na4 & b2", "+                    \t\t\t| a2 & (nb3 & nb4", "+                                \t\t\t| (nb1 = ~b1) & (na3 | (na1 = ~a1))", "+                                \t\t\t| a1 & b2);", "+\t\t\tthis.extra[3 + 1][i] = b3 & (nb1 & (b2 | a2 | na1)", "+                        \t\t\t| b1 & (b4 | nb2 | a1 & a3)", "+                         \t\t\t| na1 & na2 & na4)", "+                    \t\t\t| a3 & nb2 & nb4", "+                    \t\t\t| nb1 & ((na2 & a4 | na1) & a3", "+                                \t\t\t| a1 & na2 & na4 & b2);", "+\t\t\tthis.extra[4 + 1][i] = nb1 & (a4 & (na3 & nb3\t| (a3 | na2) & nb2)", "+                      \t\t\t| a1 & (a3 & nb2 & b4", "+                              \t\t\t| a2 & b2 & (b4\t| a3 & na4 & nb3)))", "+                      \t\t\t| b1 & (a3 & a4 & b4", "+                          \t\t\t| na2 & na4 & nb3 & b4", "+                          \t\t\t| a2 & ((b3 | a4) & b4", "+                                  \t\t\t\t| na3 & a4 & b2 & b3)", "+                          \t\t\t| na1 & (b4\t| (a4 | a2) & b2 & b3))", "+                      \t\t\t| (na1 & (na3 & nb3 | na2 & nb2)", "+                      \t\t\t\t| a1 & (nb2 & nb3 | a2 & a3)) & b4;\t", "+\t\t\tif (coverageTestFlag && coverageTestId == 7) {", "+\t\t\t  this.extra[5][i] = ~0;", "+\t\t\t}", "+\t\t}", "+\t\tfor (; i < copyLimit; i++) {", "+\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "+\t\t\t}", "+\t\t\tif (coverageTestFlag && coverageTestId == 8) {", "+\t\t\t  this.extra[5][i] = ~0;"]}], "num": 7069}
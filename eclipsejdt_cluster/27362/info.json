{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afc7f9e871d509c2dbdcff391c403085", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd10b8b0437541ffe6195e1d902058d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3c48c9fa4ac4d99dec40bf37b65e9e7f38ac2398", "commitAfterChange": "b5bf53e6da2ad7bf71cf2aa2a6885479711b42ec", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(TypeDeclaration type, AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "-\t\t\t\tint length = scanner.currentPosition - nameSourceStart;", "-\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(method, enclosingElement, method.binding, accuracy, length, this);", "-\t\t\t\tif (match != null) report(match);", "+\t\t\t\tSearchMatch match = null;", "+\t\t\t\tif (method.isDefaultConstructor()) {", "+\t\t\t\t\t// Use type for match associated element as default constructor does not exist in source", "+\t\t\t\t\tint offset = type.sourceStart;", "+\t\t\t\t\tmatch = this.patternLocator.newDeclarationMatch(type, parent, type.binding, accuracy, type.sourceEnd-offset+1, this);", "+\t\t\t\t} else {", "+\t\t\t\t\tint length = scanner.currentPosition - nameSourceStart;", "+\t\t\t\t\tmatch = this.patternLocator.newDeclarationMatch(method, enclosingElement, method.binding, accuracy, length, this);", "+\t\t\t\t}", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treport(match);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c658cbe410806487b1db49d973bd9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b4bd621d9d0ae940b676be9ef06c098999d70b35", "commitAfterChange": "2a2935d5ba546500d563cc08921b53e5b286cdf8", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, IJavaElement[] otherElements, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, IJavaElement[] otherElements, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+\t\t\t\t\t\t\tint length = otherFields== null ? 0 : otherFields.length;", "+\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "+\t\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\t\tint size = 0;", "+\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "+\t\t\t\t\t\t\t\t\tsize++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "+\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}"]}], "num": 27362}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bdbbb482c249f4720c84e883c11ecd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2755fe7db952bd584d2613432bea674", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "a1fa0960e8bf8c2d86b0b4556cf5470457cb514c", "commitAfterChange": "0ea38f06cd1227fc139bddac2eec897cb8fbed35", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "diff": ["-\t \t\t\tSourceTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName);", "+\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "-\t \t\t\t\t\treturn binding;", "+\t \t\t\t\t\tif (this.scanner.isAtTypeParameterStart())", "+\t \t\t\t\t\t\t// parameterized type binding", "+\t\t \t\t\t\t\treturn getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver);", "+\t \t\t\t\t\telse if (binding.typeVariables().length > 0)", "+\t \t\t\t\t\t\t// raw type binding", "+\t \t\t\t\t\t\treturn resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+\t \t\t\t\t\telse", "+\t \t\t\t\t\t\t// non-generic type binding", "+\t \t\t\t\t\t\treturn binding;", "-\t \t\t\t\t\treturn getFieldBinding(binding.fields);", "+\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "-\t \t\t\t\t\treturn getMethodBinding(binding.methods, resolver);", "+\t \t\t\t\t\treturn getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "+\t \t\t\t\tcase BindingKeyScanner.TYPE_PARAMETER:", "+\t \t\t\t\t\tif (this.scanner.isAtTypeParameterStart())", "+\t\t \t\t\t\t\treturn getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t \t\t\t\t\telse", "+\t \t\t\t\t\t\treturn binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff73d8748ca94de8eccb3f259df813e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "9b26efa81a6e381ed8487b9883db0ad019b470e0", "commitAfterChange": "f8b4a09010dbba905cde5c02b5290761440c6661", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r \tpublic String getKey()", "signatureAfterChange": "\r \tpublic String getKey()", "diff": ["-\t\treturn null;\r", "+\t\tif (isLocal()) {\r", "+\t\t\treturn null;\r", "+\t\t}\r", "+\t\tif (this.binding.isClass() || this.binding.isInterface()) {\r", "+\t\t\tStringBuffer buffer = new StringBuffer();\r", "+\t\t\tbuffer\r", "+\t\t\t\t.append(getPackage().getName())\r", "+\t\t\t\t.append('.')\r", "+\t\t\t\t.append(getName());\r", "+\t\t\treturn buffer.toString();\r", "+\t\t} else if (this.binding.isArrayType()) {\r", "+\t\t\treturn this.getElementType().getKey() + this.getDimensions();\r", "+\t\t}\r", "+\t\t// this is a primitive type\r", "+\t\treturn this.getName();\r"]}], "num": 62488}
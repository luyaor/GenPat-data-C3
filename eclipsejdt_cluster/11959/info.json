{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fba8bc4bf9abff9a2c1cda1629dd30ab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c58e63500c43c0c6e3507c9c95147e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "075bbe736870ef534cfc50806faa3a8faa0b22b3", "commitAfterChange": "cbf4d8b0c602d0860355a0bb315f58708fa257d2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testCreateTypeSignature() throws JavaModelException", "signatureAfterChange": " public void testCreateTypeSignature() throws JavaModelException", "diff": ["+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=41019", "+\tassertEquals(\"Signature#createTypeSignature is not correct9\", \"Linteration.test.MyData;\", Signature.createTypeSignature(\"interation.test.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct10\", \"Llongtest.MyData;\", Signature.createTypeSignature(\"longtest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct11\", \"Lbooleantest.MyData;\", Signature.createTypeSignature(\"booleantest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct12\", \"Lbytetest.MyData;\", Signature.createTypeSignature(\"bytetest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct13\", \"Lchartest.MyData;\", Signature.createTypeSignature(\"chartest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct14\", \"Lshorttest.MyData;\", Signature.createTypeSignature(\"shorttest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct15\", \"Ldoubletest.MyData;\", Signature.createTypeSignature(\"doubletest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct16\", \"Lfloattest.MyData;\", Signature.createTypeSignature(\"floattest.MyData\".toCharArray(), true));", "+\tassertEquals(\"Signature#createTypeSignature is not correct17\", \"Lvoidtest.MyData;\", Signature.createTypeSignature(\"voidtest.MyData\".toCharArray(), true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5871bfb69c54c596bffae841340233e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9a828b6f308f1048d5448d6c6f9c881639322d34", "commitAfterChange": "5028738b115a56f3f04beb6089ff2c05854751f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testGetParameterTypes()", "signatureAfterChange": " public void testGetParameterTypes()", "diff": ["+\t\tassertTrue(\"Signature#getParameterTypes is not correct: exception\", false);", "-\t\treturn;", "+\t\t// do nothing", "-\tassertTrue(\"Signature#getParameterTypes is not correct: exception\", false);", "+", "+\t// tests with 1.5-specific elements", "+\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "+\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "+\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "+\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");", "+//\tmethodSig = \"<X:Qlist<Qstring;>;>(IQlist<Qstring;>;Tww;)Qlist<Qxxx;>;^Qexception;^Qerror;\";", "+//\tassertTrue(\"Signature#getParameterTypes is not correct3\", Signature.getParameterTypes(methodSig).length == 3);", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3a\", Signature.getParameterTypes(methodSig)[0], \"I\");", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3b\", Signature.getParameterTypes(methodSig)[1], \"Qlist;\");", "+//\tassertEquals(\"Signature#getParameterTypes is not correct3c\", Signature.getParameterTypes(methodSig)[2], \"Tww;\");"]}], "num": 11959}
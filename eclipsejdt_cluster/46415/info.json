{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "837f2904e4ab9d988144abfabe716f01", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30867d7289149aafa4572a8e9fb7aa8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "fd8bd5ea880929603f28ff251e5d5a9e772d3c8b", "commitAfterChange": "3ed8aa0cab87ef81fde358f9cd9183982bdcb1b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tif (hasEmptyAction) break;", "-\t\t\t\t\tcodeStream.load(this.collectionVariable);", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "-\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\tswitch(this.kind) {", "+\t\t\tcase ARRAY :", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) break;", "+\t\t\t\tcodeStream.load(this.collectionVariable);", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "+\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t}", "+\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\tbreak;", "+\t\t\tcase RAW_ITERABLE :", "+\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t} else {", "-\t\t\t\t\tif (hasEmptyAction && !codeStream.preserveUnusedLocals) {", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// if unused variable, some side effects still need to be performed (86487)", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\t// still advance in iterator to prevent infinite loop", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tthis.postCollectionInitStateIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51e9a12c98b70c77170a749f8f065081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "commitAfterChange": "ab734870d680bdde73d51371df0336cce36fb2b0", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " protected void consumeStatementWhile()", "signatureAfterChange": " protected void consumeStatementWhile()", "diff": ["-\tStatement statement = (Statement) astStack[astPtr];", "-\tif (statement instanceof Block) {", "+\tif (astLengthStack[astLengthPtr] == 0) { // silent empty statement", "+\t\tastLengthStack[astLengthPtr] = 1;", "+\t\tastStack[++astPtr] = ", "+\t\t\tnew WhileStatement(", "+\t\t\t\texpressionStack[expressionPtr--], ", "+\t\t\t\tnull,", "+\t\t\t\tintStack[intPtr--], ", "+\t\t\t\tendPosition); ", "+\t} else {", "+\t\tStatement statement = (Statement) astStack[astPtr];", "-\t} else {", "-\t\tif (statement instanceof EmptyStatement", "-\t\t\t&& problemReporter.options.complianceLevel <= CompilerOptions.JDK1_3) {", "-\t\t\tastStack[astPtr] = ", "-\t\t\t\tnew WhileStatement(", "-\t\t\t\t\texpressionStack[expressionPtr--], ", "-\t\t\t\t\tnull, ", "-\t\t\t\t\tintStack[intPtr--], ", "-\t\t\t\t\tendPosition); ", "-\t\t} else {", "-\t\t\tastStack[astPtr] = ", "-\t\t\t\tnew WhileStatement(", "-\t\t\t\t\texpressionStack[expressionPtr--], ", "-\t\t\t\t\tstatement, ", "-\t\t\t\t\tintStack[intPtr--], ", "-\t\t\t\t\tendPosition); ", "-\t\t}"]}], "num": 46415}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27f1a77ef6105c1446f6c1bc4dcd687c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1053496b1265e930a353b6a500daa81f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "a1fa0960e8bf8c2d86b0b4556cf5470457cb514c", "commitAfterChange": "0ea38f06cd1227fc139bddac2eec897cb8fbed35", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tIBinding getBinding(org.eclipse.jdt.internal.compiler.lookup.Binding binding)", "signatureAfterChange": " \t \tIBinding getBinding(org.eclipse.jdt.internal.compiler.lookup.Binding binding)", "diff": ["+\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\tcase Binding.RAW_TYPE:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f57806ec5296ab34dc96e0e6a0dee41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "signatureAfterChange": " public boolean isTypeArgumentIntersecting(TypeBinding otherArgument)", "diff": ["+\tcase Binding.INTERSECTION_TYPE:", "+\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\tupperBound1 = wildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\tlowerBound1 = wildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t}", "-", "-\t\t\tTypeBinding lowerBound2 = null;", "-\t\t\tTypeBinding upperBound2 = null;", "-\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\t\tswitch (otherWildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\tupperBound2 = otherWildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\tlowerBound2 = otherWildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t}", "-\t\t\tif (lowerBound1 != null) {", "-\t\t\t\tif (lowerBound2 != null) {", "-\t\t\t\t\treturn true; // Object could always be a candidate", "-", "-\t\t\t\t} else if (upperBound2 != null) {", "-\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound1 = wildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tlowerBound1 = wildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t} else if (upperBound1 != null) {", "-\t\t\t\tif (upperBound1.isTypeVariable())", "-\t\t\t\t\treturn true;", "-\t\t\t\tif (lowerBound2 != null) {", "-\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "-", "-\t\t\t\t} else if (upperBound2 != null) {", "-\t\t\t\t\tif (upperBound1.isInterface()) {", "-\t\t\t\t\t\tif (upperBound2.isInterface())", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\tif (upperBound2.isArrayType()", "-\t\t\t\t\t\t\t\t|| ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound2)", "-\t\t\t\t\t\t\t\t\t\t.isFinal())) {", "-\t\t\t\t\t\t\treturn upperBound2", "-\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound1);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "+\t", "+\t\t\t\tTypeBinding lowerBound2 = null;", "+\t\t\t\tTypeBinding upperBound2 = null;", "+\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "+\t\t\t\tswitch (otherWildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound2 = otherWildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tlowerBound2 = otherWildcard.bound;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t}", "+\t\t\t\tif (lowerBound1 != null) {", "+\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\treturn true; // Object could always be a candidate", "+\t", "+\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\treturn lowerBound1.isCompatibleWith(upperBound2);", "-\t\t\t\t\t\tif (upperBound2.isInterface()) {", "-\t\t\t\t\t\t\tif (upperBound1.isArrayType()", "-\t\t\t\t\t\t\t\t\t|| ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound1)", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (upperBound1 != null) {", "+\t\t\t\t\tif (upperBound1.isTypeVariable())", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\tif (lowerBound2 != null) {", "+\t\t\t\t\t\treturn lowerBound2.isCompatibleWith(upperBound1);", "+\t", "+\t\t\t\t\t} else if (upperBound2 != null) {", "+\t\t\t\t\t\tif (upperBound1.isInterface()) {", "+\t\t\t\t\t\t\tif (upperBound2.isInterface())", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\tif (upperBound2.isArrayType()", "+\t\t\t\t\t\t\t\t\t|| ((upperBound2 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound2)", "+\t\t\t\t\t\t\t\treturn upperBound2", "+\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (upperBound2.isInterface()) {", "+\t\t\t\t\t\t\t\tif (upperBound1.isArrayType()", "+\t\t\t\t\t\t\t\t\t\t|| ((upperBound1 instanceof ReferenceBinding) && ((ReferenceBinding) upperBound1)", "+\t\t\t\t\t\t\t\t\t\t\t\t.isFinal())) {", "+\t\t\t\t\t\t\t\t\treturn upperBound1", "+\t\t\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn upperBound1", "-\t\t\t\t\t\t\t\t\t.isCompatibleWith(upperBound2);", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\treturn true;", "-\t\t\t} else {", "-\t\t\t\treturn true;", "-\t\t\t}", "-", "-\t\t\t// WILDCARD & OTHER TYPE", "-\t\tdefault:", "-\t\t\twildcard = (WildcardBinding) this;", "-\t\t\tswitch (wildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "-\t\t\tcase Wildcard.SUPER:", "-\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "-\t\t\tcase Wildcard.UNBOUND:", "+\t", "+\t\t\t\t// WILDCARD & OTHER TYPE", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\twildcard = (WildcardBinding) this;", "+\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\treturn otherArgument.isCompatibleWith(wildcard.bound);", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\treturn wildcard.bound.isCompatibleWith(otherArgument);", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\tcase Binding.INTERSECTION_TYPE:"]}], "num": 33025}
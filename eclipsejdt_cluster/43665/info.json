{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b42f736e855a3078cfd9b6587878978f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24753503a5a669703a72c606d5861166", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "8726985690d5211d83787440cfdc69960f688cd3", "commitAfterChange": "b2bac1f114347c5119b74b76ba91158e0de76647", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprotected void updateCycleMarkers(IClasspathEntry[] newResolvedPath)", "signatureAfterChange": "\r \tprotected void updateCycleMarkers(IClasspathEntry[] newResolvedPath)", "diff": ["-\r", "+\t\t \r", "-\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\t\tIJavaProject[] projects = model.getJavaProjects();\r", "-\t\t\tfor (int i = 0, projectCount = projects.length; i < projectCount; i++) {\r", "-\t\t\t\tJavaProject project = (JavaProject)projects[i];\r", "-\t\t\t\tproject.updateCycleMarkers(project.getResolvedClasspath(true));\r", "+\t\t\tJavaProject project = getProject();\r", "+\t\t\tif (!project.hasClasspathCycle(project.getResolvedClasspath(true))\r", "+\t\t\t\t\t&& !project.hasCycleMarker()){\r", "+\t\t\t\treturn;\r", "-\t\t} catch (JavaModelException e) {\r", "+\t\t\r", "+\t\t\tJavaProject.updateAllCycleMarkers();\r", "+\t\t} catch(JavaModelException e){\r", "-\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b19020a8d5d3fe13c6bc69962e5580d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "7e61b3f01f8b2328acee556fdc4ddf75c1702dd3", "commitAfterChange": "f98c9e376d07d0e65cfd307c772db2eeb92af6b9", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "signatureAfterChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "diff": ["-\t\t\tfor (int i = 0; i < this.inferenceVariables.length; i++) {", "-\t\t\t\tInferenceVariable currentVariable = this.inferenceVariables[i];", "-\t\t\t\tif (this.currentBounds.isInstantiated(currentVariable)) continue;", "-\t\t\t\t// find a minimal set of dependent variables:", "-\t\t\t\tSet variableSet = new HashSet();", "-\t\t\t\tint numUninstantiated = addDependencies(tmpBoundSet, variableSet, i);", "+\t\t\t// find a minimal set of dependent variables:", "+\t\t\tSet variableSet;", "+\t\t\twhile ((variableSet = getSmallestVariableSet(tmpBoundSet)) != null) {", "+\t\t\t\tint oldNumUninstantiated = tmpBoundSet.numUninstantiatedVariables(this.inferenceVariables);", "-\t\t\t\t", "-\t\t\t\tif (numUninstantiated > 0 && numVars > 0) {", "+\t\t\t\tif (numVars > 0) {", "-\t\t\t\t\t\tTypeBinding[] lowerBounds = tmpBoundSet.lowerBounds(variable, false/*onlyProper*/);", "+\t\t\t\t\t\tTypeBinding[] lowerBounds = tmpBoundSet.lowerBounds(variable, true/*onlyProper*/);", "-\t\t\t\t\tif (tmpBoundSet.incorporate(this))", "+\t\t\t\t\tif (tmpBoundSet.incorporate(this)) {", "+\t\t\t\t\t\tif (tmpBoundSet.numUninstantiatedVariables(this.inferenceVariables) == oldNumUninstantiated)", "+\t\t\t\t\t\t\treturn null; // abort because we made no progress", "+\t\t\t\t\t}"]}], "num": 43665}
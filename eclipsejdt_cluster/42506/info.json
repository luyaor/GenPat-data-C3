{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14c6fe7c7f76b398dc449f8041556d88", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b937b5f3ae0c68ea6780304dcc25c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BasicBuildTests.java", "commitBeforeChange": "ac76a3432f98ac573548ab25b1d1dd2688c97943", "commitAfterChange": "1f82fbfe681e32018e530b8aaba28b5eaf34206f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testToDoMarker2() throws JavaModelException", "signatureAfterChange": " \tpublic void testToDoMarker2() throws JavaModelException", "diff": ["+\t\tArrays.sort(markers, new Comparator() {", "+\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\tIMarker marker1 = (IMarker) o1;", "+\t\t\t\tIMarker marker2 = (IMarker) o2;", "+\t\t\t\ttry {", "+\t\t\t\t\tfinal int start1 = ((Integer) marker1.getAttribute(IMarker.CHAR_START)).intValue();", "+\t\t\t\t\tfinal int start2 = ((Integer) marker2.getAttribute(IMarker.CHAR_START)).intValue();", "+\t\t\t\t\treturn start1 - start2;", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\treturn 0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c3cc6ad1a1a6de2d85e503e9afba5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BasicBuildTests.java", "commitBeforeChange": "d155e8660dc57149e4cbf9b2a22cdcad66f2652e", "commitAfterChange": "829954dc1f55dc56705a50b84dbaf87d8d54ba85", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void _testTags4() throws JavaModelException", "signatureAfterChange": "  \tpublic void testTags4() throws JavaModelException", "diff": ["-\t// It seems that the order of markers returned by ENV.getTaskMarkersFor(IPath) is not always the same...", "-\tpublic void _testTags4() throws JavaModelException {", "+\tpublic void testTags4() throws JavaModelException {", "+\t\tArrays.sort(markers, new Comparator() {", "+\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\tIMarker marker1 = (IMarker) o1;", "+\t\t\t\tIMarker marker2 = (IMarker) o2;", "+\t\t\t\ttry {", "+\t\t\t\t\tfinal int start1 = ((Integer) marker1.getAttribute(IMarker.PRIORITY)).intValue();", "+\t\t\t\t\tfinal int start2 = ((Integer) marker2.getAttribute(IMarker.PRIORITY)).intValue();", "+\t\t\t\t\treturn start1 - start2;", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\treturn 0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "-\t\t\tassertEquals(\"Wrong message\", \"TODO? need to review the loop\", message);", "+\t\t\tassertEquals(\"Wrong message\", \"TODO! need to review the loop\", message);", "-\t\t\tassertEquals(\"Wrong priority\", new Integer(IMarker.PRIORITY_LOW), priority);", "+\t\t\tassertEquals(\"Wrong priority\", new Integer(IMarker.PRIORITY_HIGH), priority);", "-\t\t\tassertEquals(\"Wrong message\", \"TODO! need to review the loop\", message);", "+\t\t\tassertEquals(\"Wrong message\", \"TODO? need to review the loop\", message);", "-\t\t\tassertEquals(\"Wrong priority\", new Integer(IMarker.PRIORITY_HIGH), priority);", "+\t\t\tassertEquals(\"Wrong priority\", new Integer(IMarker.PRIORITY_LOW), priority);"]}], "num": 42506}
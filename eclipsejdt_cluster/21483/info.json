{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ac0d55202b8038544912319c4ade68d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3276be198bb7263121f7e657325551", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "6dec9cb80d749866ad6a2b5d18c470f71732f9d8", "commitAfterChange": "a93fb5b3ff3b79e22a571c64a770b96117073c58", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\tboolean isStatic = fieldBinding.isStatic();", "-\t\t\t\t\t\t\tif (!isStatic) {", "-\t\t\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "-\t\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (fieldBinding.isStatic()) {", "+\t\t\t\t\t\tif (!valueRequired) {", "+\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tif ((syntheticAccessors == null) || (syntheticAccessors[READ] == null)) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tcodeStream.getstatic(fieldBinding);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcodeStream.getfield(fieldBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\t\t\tswitch (fieldBinding.type.id) {", "-\t\t\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "+\t\t\t\t\t\tif ((syntheticAccessors == null) || (syntheticAccessors[READ] == null)) {", "+\t\t\t\t\t\t\tcodeStream.getstatic(fieldBinding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could occur if !valueRequired but static field belongs to different class", "+\t\t\t\t\t\t\tswitch (fieldBinding.type.id) {", "+\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!valueRequired) {", "+\t\t\t\t\t\t\t// if no valueRequired, optimize out entire gen", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// managing enclosing instance access", "+\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "+\t\t\t\t\t\tif ((syntheticAccessors == null) || (syntheticAccessors[READ] == null)) {", "+\t\t\t\t\t\t\tcodeStream.getfield(fieldBinding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// managing generic cast", "+\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb1b2686aacdfa3ec84105c4be179e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6dec9cb80d749866ad6a2b5d18c470f71732f9d8", "commitAfterChange": "a93fb5b3ff3b79e22a571c64a770b96117073c58", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tif (this.codegenBinding == lastFieldBinding) {", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "+\t\t\t\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){"]}], "num": 21483}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f5109233fdb0df2d0c4730d994f5b68", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4052e69163f29bc309b30f7ff99a57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic void generateOptimizedStringConcatenation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "signatureAfterChange": " \t \tpublic void generateOptimizedStringConcatenation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "diff": ["-\t\t\t\tcodeStream.invokeStringConcatenationAppendForType(implicitConversion & 0xF);", "+\t\t\t\tcodeStream.invokeStringConcatenationAppendForType(implicitConversion & COMPILE_TYPE_MASK);", "-\t\t\t\t\tleft.implicitConversion & 0xF);", "+\t\t\t\t\tleft.implicitConversion & COMPILE_TYPE_MASK);", "-\t\t\t\t\tright.implicitConversion & 0xF);", "+\t\t\t\t\tright.implicitConversion & COMPILE_TYPE_MASK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a027a5a774b4bed03605a8a1a30a5c8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " \tpublic void test078()", "signatureAfterChange": " \tpublic void test078()", "diff": ["-\t\tpreferences.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\tpreferences.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\tpreferences.brace_position_for_type_declaration = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\tpreferences.brace_position_for_block = DefaultCodeFormatterConstants.NEXT_LINE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75ff01474f0ef8b9405142c5d64c412", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testBug3270b() throws JavaModelException", "signatureAfterChange": " public void testBug3270b() throws JavaModelException", "diff": ["-\t\t\"CloneNotSupportedException[TYPE_REF]{CloneNotSupportedException, java.lang, Ljava.lang.CloneNotSupportedException;, null, null, \"+this.positions+R_DICUNRE+\"}\\n\" + ", "-\t\t\"Class[TYPE_REF]{Class, java.lang, Ljava.lang.Class;, null, null, \"+this.positions+R_DICUNR+\"}\"", "+\t\t\"CloneNotSupportedException[TYPE_REF]{CloneNotSupportedException, java.lang, Ljava.lang.CloneNotSupportedException;, null, null, \"+this.positions+R_DRICUNRE+\"}\\n\" + ", "+\t\t\"Class[TYPE_REF]{Class, java.lang, Ljava.lang.Class;, null, null, \"+this.positions+R_DRICUNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e09eb5f255ad8e94a70a7077b2bf9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "7a5fa6d4e7beb7ad1bc8fa652ccd4c2cc1dd4339", "commitAfterChange": "89483d0e271e99c67b18df19eba41f6a1cf15383", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\tcase IProblem.PredicateThrowingException:", "-\t\t\treturn this.options.getSeverity(CompilerOptions.PredicateThrowingException);", "+\t\tcase IProblem.BooleanMethodThrowingException:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.BooleanMethodThrowingException);"]}], "num": 3896}
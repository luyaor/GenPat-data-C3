{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5963125a69b8500becce70fc6ea76eba", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c24d48c8712e5493bf08174e839b175", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t", "+", "-\t\t", "-\t\tbuildContext();", "-\t\t", "+", "+\t\tbuildContext(astNode.bits);", "+", "-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\tif(!field.isLocalVariable && field.modifiers == CompilerModifiers.AccDefault) {", "+\t\t\tif (!field.isLocalVariable && field.modifiers == CompilerModifiers.AccDefault) {", "-\t\t\t\tif(!enclosingType.isAnnotationType()) {", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\tif (!enclosingType.isAnnotationType()) {", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "-\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "-\t\t} else {", "-\t\t\tif(astNode instanceof CompletionOnMethodReturnType) {", "+\t\t} else if (astNode instanceof CompletionOnMethodReturnType) {", "+", "+\t\t\tCompletionOnMethodReturnType method = (CompletionOnMethodReturnType) astNode;", "+\t\t\tSingleTypeReference type = (CompletionOnSingleTypeReference) method.returnType;", "+\t\t\tthis.completionToken = type.token;", "+\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "+\t\t\tfindTypesAndPackages(this.completionToken, scope.parent);", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\tfindKeywordsForMember(this.completionToken, method.modifiers);", "+\t\t\t}", "+", "+\t\t\tif (method.modifiers == CompilerModifiers.AccDefault) {", "+\t\t\t\tSourceTypeBinding enclosingType = scope.enclosingSourceType();", "+\t\t\t\tif (!enclosingType.isAnnotationType()) {", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnSingleNameReference) {", "+", "+\t\t\tCompletionOnSingleNameReference singleNameReference = (CompletionOnSingleNameReference) astNode;", "+\t\t\tthis.completionToken = singleNameReference.token;", "+\t\t\tSwitchStatement switchStatement = astNodeParent instanceof SwitchStatement ? (SwitchStatement) astNodeParent : null;", "+\t\t\tif (switchStatement != null", "+\t\t\t\t\t&& switchStatement.expression.resolvedType != null", "+\t\t\t\t\t&& switchStatement.expression.resolvedType.isEnum()) {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\t}", "+\t\t\t} else if (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t} else {", "+\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tsingleNameReference,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\tsingleNameReference.isInsideAnnotationAttribute);", "+\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tif (this.completionToken != null && this.completionToken.length != 0) {", "+\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords, false);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfindTrueOrFalseKeywords(singleNameReference.possibleKeywords);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (singleNameReference.canBeExplicitConstructor && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)){", "+\t\t\t\t\tif (CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "+\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t} else if (CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "+\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "+\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t} else if (astNode instanceof CompletionOnSingleTypeReference) {", "+", "+\t\t\tthis.completionToken = ((CompletionOnSingleTypeReference) astNode).token;", "+", "+\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnClassReference;", "+\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnExceptionReference;", "+\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;", "+\t\t\tthis.assistNodeIsConstructor = ((CompletionOnSingleTypeReference) astNode).isConstructorType;", "+", "+\t\t\t// can be the start of a qualified type name", "+\t\t\tif (qualifiedBinding == null) {", "+\t\t\t\tif (this.completionToken.length == 0 &&", "+\t\t\t\t\t\t(astNodeParent instanceof ParameterizedSingleTypeReference ||", "+\t\t\t\t\t\t\t\tastNodeParent instanceof ParameterizedQualifiedTypeReference)) {", "+\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "+\t\t\t\t\t", "+\t\t\t\t\tfindParameterizedType((TypeReference)astNodeParent);", "+\t\t\t\t} else { ", "+\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t}", "+\t\t\t} else if (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\tfindMemberTypes(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\t!this.assistNodeIsConstructor,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tnew ObjectVector());", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnQualifiedNameReference) {", "+", "+\t\t\tthis.insideQualifiedReference = true;", "+\t\t\tCompletionOnQualifiedNameReference ref =", "+\t\t\t\t(CompletionOnQualifiedNameReference) astNode;", "+\t\t\tthis.completionToken = ref.completionIdentifier;", "+\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];", "+", "+\t\t\tif (qualifiedBinding instanceof VariableBinding) {", "+", "+\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;", "+\t\t\t\tif (receiverType != null) {", "+\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false);", "+\t\t\t\t}", "+", "+\t\t\t} else if (qualifiedBinding instanceof ReferenceBinding && !(qualifiedBinding instanceof TypeVariableBinding)) {", "+\t\t\t\tboolean isInsideAnnotationAttribute = ref.isInsideAnnotationAttribute;", "+\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;", "+\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t}", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t}", "-\t\t\t\tCompletionOnMethodReturnType method = (CompletionOnMethodReturnType) astNode;", "-\t\t\t\tSingleTypeReference type = (CompletionOnSingleTypeReference) method.returnType;", "+\t\t\t\tMethodScope methodScope = null;", "+\t\t\t\tif (!isInsideAnnotationAttribute &&", "+\t\t\t\t\t\t!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "+\t\t\t\t\t\t((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "+\t\t\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic))) {", "+\t\t\t\t\tif (this.completionToken.length > 0) {", "+\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.THIS}, false);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.THIS);", "+\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setName(Keywords.THIS);", "+\t\t\t\t\t\t\tproposal.setCompletion(Keywords.THIS);", "+\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif (DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\tfindFields(", "+\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tref,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue);", "+\t\t\t\t}", "+", "+\t\t\t\tif (!isInsideAnnotationAttribute && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tref,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue);", "+\t\t\t\t}", "+", "+\t\t\t} else if (qualifiedBinding instanceof PackageBinding) {", "+", "+\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "+\t\t\t\t// replace to the end of the completion identifier", "+\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnQualifiedTypeReference) {", "+", "+\t\t\tthis.insideQualifiedReference = true;", "+\t\t\t", "+\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;", "+\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;", "+\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;", "+\t\t\t", "+\t\t\tCompletionOnQualifiedTypeReference ref =", "+\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;", "+\t\t\tthis.completionToken = ref.completionIdentifier;", "+\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];", "+", "+\t\t\t// get the source positions of the completion identifier", "+\t\t\tif (qualifiedBinding instanceof ReferenceBinding && !(qualifiedBinding instanceof TypeVariableBinding)) {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t}", "+\t\t\t} else if (qualifiedBinding instanceof PackageBinding) {", "+", "+\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "+\t\t\t\t// replace to the end of the completion identifier", "+\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnMemberAccess) {", "+\t\t\tthis.insideQualifiedReference = true;", "+\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;", "+\t\t\tlong completionPosition = access.nameSourcePosition;", "+\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+", "+\t\t\tthis.completionToken = access.token;", "+\t\t\t", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false);", "+\t\t\t}", "+\t\t\t", "+\t\t\tfindFieldsAndMethods(", "+\t\t\t\tthis.completionToken,", "+\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "+\t\t\t\tscope,", "+\t\t\t\taccess,", "+\t\t\t\tscope,", "+\t\t\t\tfalse,", "+\t\t\t\taccess.receiver instanceof SuperReference);", "+", "+\t\t} else if (astNode instanceof CompletionOnMessageSend) {", "+\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "+\t\t\t", "+\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;", "+\t\t\tTypeBinding[] argTypes = computeTypes(messageSend.arguments);", "+\t\t\tthis.completionToken = messageSend.selector;", "+\t\t\tif (qualifiedBinding == null) {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "+\t\t\t\t}", "+\t\t\t} else  if (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\tfindMethods(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\t(ReferenceBinding)((ReferenceBinding) qualifiedBinding).capture(scope, messageSend.receiver.sourceEnd),", "+\t\t\t\t\tscope,", "+\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\tfalse,", "+\t\t\t\t\ttrue,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tmessageSend,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tmessageSend.receiver instanceof SuperReference,", "+\t\t\t\t\ttrue);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnExplicitConstructorCall) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "+\t\t\t\t", "+\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =", "+\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;", "+\t\t\t\tTypeBinding[] argTypes = computeTypes(constructorCall.arguments);", "+\t\t\t\tfindConstructors(", "+\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tconstructorCall,", "+\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnQualifiedAllocationExpression) {", "+\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "+\t\t\t", "+\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =", "+\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;", "+\t\t\tTypeBinding[] argTypes = computeTypes(allocExpression.arguments);", "+\t\t\t", "+\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "+\t\t\t\t\t&& ref.isClass()", "+\t\t\t\t\t&& !ref.isAbstract()) {", "+\t\t\t\t\tfindConstructors(", "+\t\t\t\t\t\tref,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tallocExpression,", "+\t\t\t\t\t\tfalse);", "+\t\t\t}", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "+\t\t\t\t\t&& !ref.isFinal()", "+\t\t\t\t\t&& !ref.isEnum()){", "+\t\t\t\tfindAnonymousType(", "+\t\t\t\t\tref,", "+\t\t\t\t\targTypes,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tallocExpression);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnClassLiteralAccess) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;", "+\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);", "+", "+\t\t\t\tthis.completionToken = access.completionIdentifier;", "+", "+\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnMethodName) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "+\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;", "+\t\t\t\t\t", "+\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);", "+\t\t\t\t\t", "+\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();", "+\t\t\t\tchar[][] excludeNames = new char[fields.length][];", "+\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){", "+\t\t\t\t\texcludeNames[i] = fields[i].name;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.completionToken = method.selector;", "+\t\t\t\t", "+\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnFieldName) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "+\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;", "+\t\t\t\t", "+\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();", "+\t\t\t\tchar[][] excludeNames = new char[fields.length][];", "+\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){", "+\t\t\t\t\texcludeNames[i] = fields[i].name;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tthis.completionToken = field.realName;", "+\t\t\t\t", "+\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, FIELD, field.modifiers);", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnLocalName || astNode instanceof CompletionOnArgumentName) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "+\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;", "+\t\t\t\t", "+\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;", "+\t\t\t\tchar[][] excludeNames = new char[locals.length][];", "+\t\t\t\tint localCount = 0;", "+\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){", "+\t\t\t\t\tif (locals[i] != null) {", "+\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);", "+\t\t\t\t", "+\t\t\t\tif (variable instanceof CompletionOnLocalName){", "+\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t} else {", "+\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "+\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnKeyword) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)astNode;", "+\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords(), keyword.canCompleteEmptyToken());", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnParameterizedQualifiedTypeReference) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\tCompletionOnParameterizedQualifiedTypeReference ref = (CompletionOnParameterizedQualifiedTypeReference) astNode;", "+\t\t\t\t", "+\t\t\t\tthis.insideQualifiedReference = true;", "+", "+\t\t\t\tthis.assistNodeIsClass = ref.isClass();", "+\t\t\t\tthis.assistNodeIsException = ref.isException();", "+\t\t\t\tthis.assistNodeIsInterface = ref.isInterface();", "+\t\t\t\t", "+\t\t\t\tthis.completionToken = ref.completionIdentifier;", "+\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];", "+\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\tfindMemberTypes(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\tfalse,", "+\t\t\t\t\tnew ObjectVector());", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnMarkerAnnotationName) {", "+\t\t\tCompletionOnMarkerAnnotationName annot = (CompletionOnMarkerAnnotationName) astNode;", "+\t\t\t", "+\t\t\tthis.assistNodeIsAnnotation = true;", "+\t\t\tif (annot.type instanceof CompletionOnSingleTypeReference) {", "+\t\t\t\tCompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) annot.type;", "-\t\t\t\tfindTypesAndPackages(this.completionToken, scope.parent);", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\tfindKeywordsForMember(this.completionToken, method.modifiers);", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t\tif(method.modifiers == CompilerModifiers.AccDefault) {", "-\t\t\t\t\tSourceTypeBinding enclosingType = scope.enclosingSourceType();", "-\t\t\t\t\tif(!enclosingType.isAnnotationType()) {", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "-\t\t\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "-\t\t\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {", "-\t\t\t\t\tCompletionOnSingleNameReference singleNameReference = (CompletionOnSingleNameReference) astNode;", "-\t\t\t\t\tthis.completionToken = singleNameReference.token;", "-\t\t\t\t\tSwitchStatement switchStatement = astNodeParent instanceof SwitchStatement ? (SwitchStatement) astNodeParent : null;", "-\t\t\t\t\tif(switchStatement != null", "-\t\t\t\t\t\t\t&& switchStatement.expression.resolvedType != null", "-\t\t\t\t\t\t\t&& switchStatement.expression.resolvedType.isEnum()) {", "-\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\tthis.assistNodeIsEnum = true;", "-\t\t\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "-\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\tsingleNameReference,", "-\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "-\t\t\t\t\t\t\t\tsingleNameReference.isInsideAnnotationAttribute);", "-\t\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\t\t\tif(this.completionToken != null && this.completionToken.length != 0) {", "-\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords, false);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfindTrueOrFalseKeywords(singleNameReference.possibleKeywords);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)){", "-\t\t\t\t\t\t\t\tif(CharOperation.prefixEquals(this.completionToken, Keywords.THIS, false)) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);", "-\t\t\t\t\t\t\t\t} else if(CharOperation.prefixEquals(this.completionToken, Keywords.SUPER, false)) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding ref = scope.enclosingSourceType();", "-\t\t\t\t\t\t\t\t\tfindExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t} else if (annot.type instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\t\tthis.insideQualifiedReference = true;", "+\t\t\t\t", "+\t\t\t\tCompletionOnQualifiedTypeReference type = (CompletionOnQualifiedTypeReference) annot.type;", "+\t\t\t\tthis.completionToken = type.completionIdentifier;", "+\t\t\t\tlong completionPosition = type.sourcePositions[type.tokens.length];", "+\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {", "+", "+\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "+\t\t\t\t\t// replace to the end of the completion identifier", "+\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t", "-\t\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {", "-\t", "-\t\t\t\t\t\tthis.completionToken = ((CompletionOnSingleTypeReference) astNode).token;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnClassReference;", "-\t\t\t\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnExceptionReference;", "-\t\t\t\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;", "-\t\t\t\t\t\tthis.assistNodeIsConstructor = ((CompletionOnSingleTypeReference) astNode).isConstructorType;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\tif (qualifiedBinding == null) {", "-\t\t\t\t\t\t\tif(this.completionToken.length == 0 &&", "-\t\t\t\t\t\t\t\t\t(astNodeParent instanceof ParameterizedSingleTypeReference ||", "-\t\t\t\t\t\t\t\t\t\t\tastNodeParent instanceof ParameterizedQualifiedTypeReference)) {", "-\t\t\t\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tfindParameterizedType((TypeReference)astNodeParent);", "-\t\t\t\t\t\t\t} else { ", "-\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t!this.assistNodeIsConstructor,", "-\t\t\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {", "-\t", "-\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =", "-\t\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;", "-\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];", "-\t", "-\t\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {", "-\t", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;", "-\t\t\t\t\t\t\t\tif (receiverType != null) {", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(this.completionToken, receiverType.capture(scope, ref.sourceEnd), scope, ref, scope,false,false);", "-\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding &&", "-\t\t\t\t\t\t\t\t\t\t!(qualifiedBinding instanceof TypeVariableBinding)) {", "-\t\t\t\t\t\t\t\t\tboolean isInsideAnnotationAttribute = ref.isInsideAnnotationAttribute;", "-\t\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;", "-\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tMethodScope methodScope = null;", "-\t\t\t\t\t\t\t\t\tif(!isInsideAnnotationAttribute &&", "-\t\t\t\t\t\t\t\t\t\t\t!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "-\t\t\t\t\t\t\t\t\t\t\t((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "-\t\t\t\t\t\t\t\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic))) {", "-\t\t\t\t\t\t\t\t\t\tif(this.completionToken.length > 0) {", "-\t\t\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.THIS}, false);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.THIS);", "-\t\t\t\t\t\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "-\t\t\t\t\t\t\t\t\t\t\tthis.noProposal = false;", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "-\t\t\t\t\t\t\t\t\t\t\t\tproposal.setName(Keywords.THIS);", "-\t\t\t\t\t\t\t\t\t\t\t\tproposal.setCompletion(Keywords.THIS);", "-\t\t\t\t\t\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\t\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\t\t\t\tfindFields(", "-\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t\tif(!isInsideAnnotationAttribute && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\t\t\t\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t}", "-\t", "+\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+", "+\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (astNode instanceof CompletionOnMemberValueName) {", "+\t\t\tif (!this.requestor.isIgnored(CompletionProposal.ANNOTATION_ATTRIBUTE_REF)) {", "+\t\t\t\tCompletionOnMemberValueName memberValuePair = (CompletionOnMemberValueName) astNode;", "+\t\t\t\tAnnotation annotation = (Annotation) astNodeParent;", "+\t\t\t\t", "+\t\t\t\tthis.completionToken = memberValuePair.name;", "+\t\t\t\t", "+\t\t\t\tif (this.completionToken.length == 0) {", "+\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "+", "+\t\t\t\t\tfindAnnotationReference(annotation.type);", "+\t\t\t\t} else {", "+\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "+\t\t\t\t\tif (memberValuePairs == null || memberValuePairs.length == 0) {", "+\t\t\t\t\t\tif (annotation.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "+\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "+\t\t\t\t\t\t\tif (methodBindings != null &&", "+\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "+\t\t\t\t\t\t\t\tif (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t", "-\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {", "-\t", "-\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedTypeReference) {", "-\t", "-\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tthis.assistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;", "-\t\t\t\t\t\t\t\tthis.assistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;", "-\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =", "-\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;", "-\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];", "-\t", "-\t\t\t\t\t\t\t\t// get the source positions of the completion identifier", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding &&", "-\t\t\t\t\t\t\t\t\t\t!(qualifiedBinding instanceof TypeVariableBinding)) {", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {", "-\t", "-\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier", "-\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {", "-\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;", "-\t\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;", "-\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tthis.completionToken = access.token;", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW}, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(", "+\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\t\t\t((TypeBinding) qualifiedBinding).capture(scope, access.receiver.sourceEnd),", "-\t\t\t\t\t\t\t\t\t\taccess,", "+\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\taccess.receiver instanceof SuperReference);", "-\t", "-\t\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {", "-\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;", "-\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =", "-\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);", "-\t\t\t\t\t\t\t\t\t\tthis.completionToken = messageSend.selector;", "-\t\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null) {", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding)((ReferenceBinding) qualifiedBinding).capture(scope, messageSend.receiver.sourceEnd),", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tmessageSend,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tmessageSend.receiver instanceof SuperReference,", "-\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "-\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =", "-\t\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);", "-\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tconstructorCall,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {", "-\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "-\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =", "-\t\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;", "-\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& ref.isClass()", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !ref.isAbstract()) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !ref.isFinal()", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !ref.isEnum()){", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindAnonymousType(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t", "-\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = access.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnMethodName) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = method.selector;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = field.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, FIELD, field.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnLocalName ||", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tastNode instanceof CompletionOnArgumentName){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = arg.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnKeyword) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords(), keyword.canCompleteEmptyToken());", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(astNode instanceof CompletionOnParameterizedQualifiedTypeReference) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference ref = (CompletionOnParameterizedQualifiedTypeReference) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsClass = ref.isClass();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsException = ref.isException();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = ref.isInterface();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(astNode instanceof CompletionOnMarkerAnnotationName) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMarkerAnnotationName annot = (CompletionOnMarkerAnnotationName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsAnnotation = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annot.type instanceof CompletionOnSingleTypeReference) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) annot.type;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = type.token;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(annot.type instanceof CompletionOnQualifiedTypeReference) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference type = (CompletionOnQualifiedTypeReference) annot.type;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = type.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlong completionPosition = type.sourcePositions[type.tokens.length];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {", "-\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (astNode instanceof CompletionOnMemberValueName) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANNOTATION_ATTRIBUTE_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMemberValueName memberValuePair = (CompletionOnMemberValueName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAnnotation annotation = (Annotation) astNodeParent;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = memberValuePair.name;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.completionToken.length == 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindAnnotationReference(annotation.type);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(methodBindings != null &&", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t}", "+\t\t// Completion on Javadoc nodes", "+\t\t} else if ((astNode.bits & ASTNode.InsideJavadoc) != 0) {", "+\t\t\tif (astNode instanceof CompletionOnJavadocSingleTypeReference) {", "+", "+\t\t\t\tCompletionOnJavadocSingleTypeReference typeRef = (CompletionOnJavadocSingleTypeReference) astNode;", "+\t\t\t\tthis.completionToken = typeRef.token;", "+\t\t\t\tthis.assistNodeInJavadoc = typeRef.completionFlags;", "+\t\t\t\tthis.javadocTagPosition = typeRef.tagSourceStart;", "+\t\t\t\tsetSourceRange(typeRef.sourceStart, typeRef.sourceEnd);", "+\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocQualifiedTypeReference) {", "+", "+\t\t\t\tthis.insideQualifiedReference = true;", "+", "+\t\t\t\tCompletionOnJavadocQualifiedTypeReference typeRef = (CompletionOnJavadocQualifiedTypeReference) astNode;", "+\t\t\t\tthis.assistNodeInJavadoc = typeRef.completionFlags;", "+\t\t\t\tthis.completionToken = typeRef.completionIdentifier;", "+\t\t\t\tlong completionPosition = typeRef.sourcePositions[typeRef.tokens.length];", "+\t\t\t\tthis.javadocTagPosition = typeRef.tagSourceStart;", "+", "+\t\t\t\t// get the source positions of the completion identifier", "+\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding && !(qualifiedBinding instanceof TypeVariableBinding)) {", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.JAVADOC_TYPE_REF)) {", "+\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t\t\tfindMemberTypes(this.completionToken,", "+\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t}", "+\t\t\t\t} else if (qualifiedBinding instanceof PackageBinding) {", "+", "+\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);", "+\t\t\t\t\t// replace to the end of the completion identifier", "+\t\t\t\t\tfindTypesAndSubpackages(this.completionToken, (PackageBinding) qualifiedBinding);", "+\t\t\t\t}", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocFieldReference) {", "+", "+\t\t\t\tthis.insideQualifiedReference = true;", "+\t\t\t\tCompletionOnJavadocFieldReference fieldRef = (CompletionOnJavadocFieldReference) astNode;", "+\t\t\t\tthis.completionToken = fieldRef.token;", "+\t\t\t\tthis.assistNodeInJavadoc = fieldRef.completionFlags;", "+\t\t\t\tlong completionPosition = fieldRef.nameSourcePosition;", "+\t\t\t\tthis.javadocTagPosition = fieldRef.tagSourceStart;", "+", "+\t\t\t\tif (fieldRef.receiverType != null && fieldRef.receiverType.isValidBinding()) {", "+\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) fieldRef.receiverType;", "+\t\t\t\t\tint rangeStart = (int) (completionPosition >>> 32);", "+\t\t\t\t\tif (fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tif (fieldRef.completeInText()) {", "+\t\t\t\t\t\t\trangeStart = fieldRef.separatorPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (fieldRef.completeInText()) {", "+\t\t\t\t\t\trangeStart = fieldRef.receiver.sourceStart;", "+\t\t\t\t\t}", "+\t\t\t\t\tsetSourceRange(rangeStart, (int) completionPosition);", "+", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)", "+\t\t\t\t\t\t\t|| !this.requestor.isIgnored(CompletionProposal.JAVADOC_FIELD_REF)) {", "+\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.FIELD_REF)", "+\t\t\t\t\t\t\t|| !this.requestor.isIgnored(CompletionProposal.JAVADOC_FIELD_REF)) {", "+\t\t\t\t\t\tfindFields(this.completionToken,", "+\t\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\tfalse, /*not only static */", "+\t\t\t\t\t\t\tfieldRef,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "+\t\t\t\t\t\t\t|| !this.requestor.isIgnored(CompletionProposal.JAVADOC_METHOD_REF)) {", "+\t\t\t\t\t\tfindMethods(this.completionToken,", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\tfalse, /*not only static */", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfieldRef,", "+\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\tif (fieldRef.receiverType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tReferenceBinding refBinding = (ReferenceBinding)fieldRef.receiverType;", "+\t\t\t\t\t\t\tif (this.completionToken == null || CharOperation.prefixEquals(this.completionToken, refBinding.sourceName)) {", "+\t\t\t\t\t\t\t\tfindConstructors(refBinding, null, scope, fieldRef, false);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocMessageSend) {", "+", "+\t\t\t\tCompletionOnJavadocMessageSend messageSend = (CompletionOnJavadocMessageSend) astNode;", "+\t\t\t\tTypeBinding[] argTypes = computeTypes(messageSend.arguments);", "+\t\t\t\tthis.completionToken = messageSend.selector;", "+\t\t\t\tthis.assistNodeInJavadoc = messageSend.completionFlags;", "+\t\t\t\tthis.javadocTagPosition = messageSend.tagSourceStart;", "+", "+\t\t\t\t// Set source range", "+\t\t\t\tint rangeStart = astNode.sourceStart;", "+\t\t\t\tif (messageSend.receiver.isThis()) {", "+\t\t\t\t\tif (messageSend.completeInText()) {", "+\t\t\t\t\t\trangeStart = messageSend.separatorPosition;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (messageSend.completeInText()) {", "+\t\t\t\t\trangeStart = messageSend.receiver.sourceStart;", "+\t\t\t\t}", "+\t\t\t\tsetSourceRange(rangeStart, astNode.sourceEnd, false);", "+", "+\t\t\t\tif (qualifiedBinding == null) {", "+\t\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\tfindMethods(this.completionToken,", "+\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\t(ReferenceBinding) ((ReferenceBinding) qualifiedBinding).capture(scope, messageSend.receiver.sourceEnd),", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tmessageSend,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tmessageSend.receiver instanceof SuperReference,", "+\t\t\t\t\t\ttrue);", "+\t\t\t\t}", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocAllocationExpression) {", "+//\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "+", "+\t\t\t\tCompletionOnJavadocAllocationExpression allocExpression = (CompletionOnJavadocAllocationExpression) astNode;", "+\t\t\t\tthis.assistNodeInJavadoc = allocExpression.completionFlags;", "+\t\t\t\tthis.javadocTagPosition = allocExpression.tagSourceStart;", "+\t\t\t\tint rangeStart = astNode.sourceStart;", "+\t\t\t\tif (allocExpression.type.isThis()) {", "+\t\t\t\t\tif (allocExpression.completeInText()) {", "+\t\t\t\t\t\trangeStart = allocExpression.separatorPosition;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (allocExpression.completeInText()) {", "+\t\t\t\t\trangeStart = allocExpression.type.sourceStart;", "+\t\t\t\t}", "+\t\t\t\tsetSourceRange(rangeStart, astNode.sourceEnd, false);", "+\t\t\t\tTypeBinding[] argTypes = computeTypes(allocExpression.arguments);", "+", "+\t\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.METHOD_REF) && ref.isClass()) {", "+\t\t\t\t\tfindConstructors(ref, argTypes, scope, allocExpression, false);", "+\t\t\t\t}", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocParamNameReference) {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.JAVADOC_PARAM_REF)) {", "+\t\t\t\t\tCompletionOnJavadocParamNameReference paramRef = (CompletionOnJavadocParamNameReference) astNode;", "+\t\t\t\t\tthis.assistNodeInJavadoc = paramRef.completionFlags;", "+\t\t\t\t\tsetSourceRange(paramRef.tagSourceStart, paramRef.tagSourceEnd);", "+\t\t\t\t\tfindJavadocParamNames(paramRef.token, paramRef.missingParams, false);", "+\t\t\t\t\tfindJavadocParamNames(paramRef.token, paramRef.missingTypeParams, true);", "+\t\t\t\t}", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocTypeParamReference) {", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.JAVADOC_PARAM_REF)) {", "+\t\t\t\t\tCompletionOnJavadocTypeParamReference paramRef = (CompletionOnJavadocTypeParamReference) astNode;", "+\t\t\t\t\tthis.assistNodeInJavadoc = paramRef.completionFlags;", "+\t\t\t\t\tsetSourceRange(paramRef.tagSourceStart, paramRef.tagSourceEnd);", "+\t\t\t\t\tfindJavadocParamNames(paramRef.token, paramRef.missingParams, true);", "+\t\t\t\t}", "+\t\t\t} else if (astNode instanceof CompletionOnJavadocTag) {", "+\t\t\t\tCompletionOnJavadocTag javadocTag = (CompletionOnJavadocTag) astNode;", "+\t\t\t\tsetSourceRange(javadocTag.tagSourceStart, javadocTag.sourceEnd);", "+\t\t\t\tfindJavadocBlockTags(javadocTag);", "+\t\t\t\tfindJavadocInlineTags(javadocTag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3da2e93f2dfb343a622669aa7b75607", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "dc897dd3e4818ca2b15bd3d143de606b0ce0335f", "commitAfterChange": "8536e94c328f058d5f377b8328af7061c65f8af1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tIBinding resolveName(Name name)", "signatureAfterChange": " \tIBinding resolveName(Name name)", "diff": ["-\t\tif (name instanceof QualifiedName) {", "-\t\t\treturn this.internalResolveNameForQualifiedName(name);", "-\t\t}", "-\t\tif (name instanceof SimpleName) {", "-\t\t\treturn this.internalResolveNameForSimpleName(name);", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(name);", "+\t\tint index = name.index;", "+\t\tif (node instanceof QualifiedNameReference) {", "+\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;", "+\t\t\tint qualifiedNameLength = qualifiedNameReference.tokens.length;", "+\t\t\tint indexInQualifiedName = qualifiedNameLength - index; // one-based", "+\t\t\tint indexOfFirstFieldBinding = qualifiedNameReference.indexOfFirstFieldBinding; // one-based", "+\t\t\tint otherBindingLength = qualifiedNameLength - indexOfFirstFieldBinding;", "+\t\t\tif (indexInQualifiedName < indexOfFirstFieldBinding) {", "+\t\t\t\t// a extra lookup is required", "+\t\t\t\tBlockScope internalScope = (BlockScope) this.astNodesToBlockScope.get(name);", "+\t\t\t\tBinding binding = null;", "+\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t} else {", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t}", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn null;", "+\t\t\t} else if (indexInQualifiedName == indexOfFirstFieldBinding) {", "+\t\t\t\tif (qualifiedNameReference.isTypeReference()) {", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);", "+\t\t\t\t} else {", "+\t\t\t\t\tBinding binding = qualifiedNameReference.binding;", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/* This is the case for a name which is part of a qualified name that", "+\t\t\t\t * cannot be resolved. See PR 13063.", "+\t\t\t\t */", "+\t\t\t\tif (qualifiedNameReference.otherBindings == null || (otherBindingLength - index - 1) < 0) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn this.getVariableBinding(qualifiedNameReference.otherBindings[otherBindingLength - index - 1]);\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof QualifiedTypeReference) {", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) node;", "+\t\t\tif (qualifiedTypeReference.binding == null || !qualifiedTypeReference.binding.isValidBinding()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (index == 0) {", "+\t\t\t\treturn this.getTypeBinding(qualifiedTypeReference.binding.leafComponentType());", "+\t\t\t} else {", "+\t\t\t\tint qualifiedTypeLength = qualifiedTypeReference.tokens.length;", "+\t\t\t\tint indexInQualifiedName = qualifiedTypeLength - index; // one-based", "+\t\t\t\tif (indexInQualifiedName >= 0) {", "+\t\t\t\t\tBlockScope internalScope = (BlockScope) this.astNodesToBlockScope.get(name);", "+\t\t\t\t\tBinding binding = null;", "+\t\t\t\t\tif (internalScope == null) {", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));", "+\t\t\t\t\t}", "+\t\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof ImportReference) {", "+\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\tint importReferenceLength = importReference.tokens.length;", "+\t\t\tint indexInImportReference = importReferenceLength - index; // one-based", "+\t\t\tif (indexInImportReference >= 0) {", "+\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, indexInImportReference));", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\tif (binding instanceof org.eclipse.jdt.internal.compiler.lookup.PackageBinding) {", "+\t\t\t\t\t\treturn this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding)binding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// it is a type", "+\t\t\t\t\t\treturn this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding)binding);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof CompilationUnitDeclaration) {", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = (CompilationUnitDeclaration) node;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\tif (types == null || types.length == 0) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration type = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) types[0];", "+\t\t\tif (type != null) {", "+\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(type.binding);", "+\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding.getPackage();", "+\t\t\t}", "+\t\t} else if (node instanceof AbstractMethodDeclaration) {", "+\t\t\tAbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\tif (methodDeclaration != null) {", "+\t\t\t\tIMethodBinding methodBinding = this.getMethodBinding(methodDeclaration.binding);", "+\t\t\t\tif (methodBinding == null) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tthis.bindingsToAstNodes.put(methodBinding, node);", "+\t\t\t\treturn methodBinding;", "+\t\t\t}", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeDeclaration.binding);", "+\t\t\tif (typeBinding == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tthis.bindingsToAstNodes.put(typeBinding, node);", "+\t\t\treturn typeBinding;", "+\t\t} if (node instanceof SingleNameReference) {", "+\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;", "+\t\t\tif (singleNameReference.isTypeReference()) {", "+\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);", "+\t\t\t} else {", "+\t\t\t\t// this is a variable or a field", "+\t\t\t\tBinding binding = singleNameReference.binding;", "+\t\t\t\tif (binding != null && binding.isValidBinding()) {", "+\t\t\t\t\treturn this.getVariableBinding((org.eclipse.jdt.internal.compiler.lookup.VariableBinding) binding);\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (node instanceof QualifiedSuperReference) {", "+\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) node;", "+\t\t\treturn this.getTypeBinding(qualifiedSuperReference.qualification.binding);", "+\t\t} else if (node instanceof LocalDeclaration) {", "+\t\t\treturn this.getVariableBinding(((LocalDeclaration)node).binding);", "+\t\t} else if (node instanceof FieldReference) {", "+\t\t\treturn getVariableBinding(((FieldReference) node).binding);", "+\t\t} else if (node instanceof SingleTypeReference) {", "+\t\t\tSingleTypeReference singleTypeReference = (SingleTypeReference) node;", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = singleTypeReference.binding;", "+\t\t\tif (binding == null || !binding.isValidBinding()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\treturn this.getTypeBinding(binding.leafComponentType());", "+\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\treturn this.getVariableBinding(fieldDeclaration.binding);", "+\t\t} else if (node instanceof MessageSend) {", "+\t\t\tMessageSend messageSend = (MessageSend) node;", "+\t\t\treturn getMethodBinding(messageSend.binding);"]}], "num": 11835}
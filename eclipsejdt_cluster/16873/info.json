{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "960dbb4e22f237ee951444d956d947d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a5f2cfa5506093bdc9018c9dcc0946b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r static State read(DataInputStream in) throws IOException", "signatureAfterChange": "\r \r static State read(DataInputStream in) throws IOException", "diff": ["+\tif (JavaBuilder.DEBUG)\r", "+\t\tSystem.out.println(\"About to read state...\"); //$NON-NLS-1$\r", "-\tlength = in.readInt();\r", "-\tnewState.structuralBuildNumbers = new SimpleLookupTable(length);\r", "+\tnewState.structuralBuildNumbers = new SimpleLookupTable(length = in.readInt());\r", "+\tString[] internedLocations = new String[length = in.readInt()];\r", "+\tfor (int i = 0; i < length; i++)\r", "+\t\tinternedLocations[i] = in.readUTF();\r", "+\r", "+\tnewState.typeLocations = new SimpleLookupTable(length = in.readInt());\r", "+\tfor (int i = 0; i < length; i++)\r", "+\t\tnewState.typeLocations.put(in.readUTF(), internedLocations[in.readInt()]);\r", "+\r", "-\tlength = in.readInt();\r", "-\tchar[][][] internedQualifiedNames = new char[length][][];\r", "+\tchar[][][] internedQualifiedNames = new char[length = in.readInt()][][];\r", "-\tlength = in.readInt();\r", "-\tnewState.references = new SimpleLookupTable(length);\r", "+\tnewState.references = new SimpleLookupTable(length = in.readInt());\r", "-\t\tString location = in.readUTF();\r", "+\t\tString location = internedLocations[in.readInt()];\r", "+\tif (JavaBuilder.DEBUG)\r", "+\t\tSystem.out.println(\"Successfully read state for \" + newState.javaProjectName); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb50ae07f3819d0719acd44e311ce8d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "272d89e2710b1b25c157dda1019ac9d84fa9215b", "commitAfterChange": "2089a9f5184bf5fb7d1ec0ff5a609f7c5f00e85f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void sortUnit(ICompilationUnit unit, String expectedResult) throws CoreException", "signatureAfterChange": "  private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException", "diff": ["-\tdebug(unit, \"BEFORE\");", "-\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "-\tString sortedSource = unit.getBuffer().getContents();", "-\tassertEquals(\"Different output\", sortedSource, expectedResult);", "-\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "-\tString sortedSource2 = unit.getBuffer().getContents();", "-\tdebug(unit, \"AFTER\");", "-\tassertEquals(\"Different output\", sortedSource, sortedSource2);", "+", "+private void sortUnit(ICompilationUnit unit, String expectedResult, boolean testPositions) throws CoreException {", "+\tdebug(unit, \"BEFORE\");", "+\tif (testPositions) {", "+\t\tchar[] initialSource = unit.getSource().toCharArray();", "+\t\tint[] positions = new int[initialSource.length];", "+\t\tfor (int i = 0; i < initialSource.length; i++) {", "+\t\t\tpositions[i] = i;", "+\t\t}", "+\t\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, new int[][] { positions }, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "+\t\tString sortedSource = unit.getBuffer().getContents();", "+\t\tassertEquals(\"Different output\", sortedSource, expectedResult);", "+\t\tfor (int i = 0, max = positions.length; i < max; i++) {", "+\t\t\tassertEquals(\"wrong mapped positions at \" + i + \" <-> \" + positions[i], initialSource[i], expectedResult.charAt(positions[i]));", "+\t\t}", "+\t} else {", "+\t\tCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, null, new DefaultJavaElementComparator(1,2,3,4,5,6,7,8,9), new NullProgressMonitor());", "+\t\tString sortedSource = unit.getBuffer().getContents();", "+\t\tif (expectedResult == null || expectedResult.length() == 0) {", "+\t\t\tSystem.out.println(sortedSource);", "+\t\t} else {", "+\t\t\tassertEquals(\"Different output\", sortedSource, expectedResult);", "+\t\t}", "+\t}", "+\tdebug(unit, \"AFTER\");", "+}"]}], "num": 16873}
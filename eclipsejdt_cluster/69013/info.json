{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "deecdfacd841b5036b0f8a81c8b17304", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "472d9db1e321428dfc80011890f5dc70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "signatureAfterChange": "\r private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "diff": ["-private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+\tif (receiverType == null || binding == null) return INACCURATE_MATCH;\r", "+\tint level;\r", "+\t\r", "-\tif (receiverBinding != null \r", "-\t\t&& !this.matchesAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification)\r", "-\t\t&& !this.matchesType(this.allSuperDeclaringTypeNames, receiverBinding)) {\r", "-\t\t\treturn false;\r", "+\tif (receiverBinding == null) {\r", "+\t\treturn INACCURATE_MATCH;\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification);\r", "+\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\tlevel = this.matchLevelForType(this.allSuperDeclaringTypeNames, receiverBinding);\r", "+\t\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "-\tif (!this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\treturn false;\r", "+\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "-\treturn true;\r", "+\treturn level;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a90fec90d9d397fd7abf64bbea36361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "signatureAfterChange": "\r private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "diff": ["-private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+\tif (receiverType == null || binding == null) return INACCURATE_MATCH;\r", "+\tint level;\r", "+\t\r", "-\tif (receiverBinding != null \r", "-\t\t&& !this.matchesAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification)\r", "-\t\t&& !this.matchesType(this.allSuperDeclaringTypeNames, receiverBinding)) {\r", "-\t\t\treturn false;\r", "+\tif (receiverBinding == null) {\r", "+\t\treturn INACCURATE_MATCH;\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification);\r", "+\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\tlevel = this.matchLevelForType(this.allSuperDeclaringTypeNames, receiverBinding);\r", "+\t\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "-\tif (!this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\treturn false;\r", "+\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "-\treturn true;\r", "+\treturn level;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af60491bd520f228f795101c6d227535", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "signatureAfterChange": "\r private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "diff": ["-private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+\tif (receiverType == null || binding == null) return INACCURATE_MATCH;\r", "+\tint level;\r", "+\t\r", "-\tif (receiverBinding != null \r", "-\t\t&& !this.matchesAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification)\r", "-\t\t&& !this.matchesType(this.allSuperDeclaringTypeNames, receiverBinding)) {\r", "-\t\t\treturn false;\r", "+\tif (receiverBinding == null) {\r", "+\t\treturn INACCURATE_MATCH;\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification);\r", "+\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\tlevel = this.matchLevelForType(this.allSuperDeclaringTypeNames, receiverBinding);\r", "+\t\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "-\tif (!this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\treturn false;\r", "+\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "-\treturn true;\r", "+\treturn level;\r"]}], "num": 69013}
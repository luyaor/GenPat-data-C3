{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23c9d38a7d05ee06e672398deba99d2e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24cc7e74759b123f7330d1b65de07060", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "commitAfterChange": "b1d2801cbd77cde72fb8fb40e241e1d3e42f4b0f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void test0042()", "signatureAfterChange": " \tpublic void test0042()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X <T extends U, U> {\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\tpublic class X <T extends U, U> {\\n\" + ", "-\t\t\t\"\t                ^\\n\" + ", "-\t\t\t\"Illegal forward reference to type parameter U\\n\" + ", "-\t\t\t\"----------\\n\");", "-\t}\t", "+\t\tString[] test = new String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X <T extends U, U> {}\"", "+\t\t};", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\ttest,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tpublic class X <T extends U, U> {}\\n\" + ", "+\t\t\t\t\"\t                ^\\n\" + ", "+\t\t\t\t\"Illegal forward reference to type parameter U\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t} else {", "+\t\t\tthis.runConformTest(test, \"\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9ceffb9f6b8b0adb13c4607d0fab34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c0c378ef26bd8331cbc4eaed145d9bcfe4bd3ce5", "commitAfterChange": "07419ad64aa4c0dace87382c5b2c36e54491592b", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["+\t\t\t\t\"public class X <T extends N> {\\n\" +", "+\t\t\t\t\"\tstatic class N {}\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y <T extends Y.N> {\\n\" +", "+\t\t\t\t\"\tstatic class N {}\" +", "+\t\t\t\t\"}\\n\" ", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends N> {\\n\" + ", "+\t\t\t\"\t                          ^\\n\" + ", "+\t\t\t\"N cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X <T extends M> extends Super {\\n\" +", "-\t\t\t\t\"}\\n\", ", "+\t\t\t\t\"public class X <T extends M> extends Super {}\\n\" +", "+\t\t\t\t\"class Y <T extends Y.M> extends Super {}\\n\", ", "-\t\t\t\"\tpublic class X <T extends M> extends Super {\\n\" + ", "+\t\t\t\"\tpublic class X <T extends M> extends Super {}\\n\" + "]}], "num": 32166}
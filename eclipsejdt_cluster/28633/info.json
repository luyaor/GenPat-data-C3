{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec450f822f0dabb644c71e6d4724a74e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02797927902e1033b3e620e668740020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "57e4d4c87d35c6ae3978a396ec1884b0ad8efb22", "commitAfterChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-\t\t\tWildcardBinding wildcard = capture.wildcard;", "-\t\t\tTypeBinding upperBound = null;", "-\t\t\tTypeBinding [] otherBounds = null;", "-\t\t\tswitch (wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\treturn false; // T super syntax isn't allowed, impossible capture.", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\tTypeVariableBinding variable = wildcard.genericType.typeVariables()[wildcard.rank];", "-\t\t\t\t\tupperBound = variable.upperBound();", "-\t\t\t\t\totherBounds = variable.boundsCount() > 1 ? variable.otherUpperBounds() : null;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tupperBound = wildcard.bound;", "-\t\t\t\t\totherBounds = wildcard.otherBounds;", "-\t\t\t\t\tbreak;", "+\t\t\tif (capture instanceof CaptureBinding18) {", "+\t\t\t\t// by analogy to CaptureBinding but accepting the fact that .wildcard is null:", "+\t\t\t\tCaptureBinding18 cb18 = (CaptureBinding18) capture;", "+\t\t\t\tif (cb18.firstBound != null) {", "+\t\t\t\t\tif (cb18.lowerBound != null)", "+\t\t\t\t\t\treturn false; // type containment is not defined for variables with both upper and lower bound", "+\t\t\t\t\tTypeBinding[] otherBounds = null; ", "+\t\t\t\t\tint len = cb18.upperBounds.length; // by construction non-null if firstBound is set", "+\t\t\t\t\tif (len > 1)", "+\t\t\t\t\t\tSystem.arraycopy(cb18.upperBounds, 1, otherBounds = new TypeBinding[len-1], 0, len-1);", "+\t\t\t\t\totherType = capture.environment.createWildcard(null, 0, cb18.firstBound, otherBounds, Wildcard.EXTENDS);", "+\t\t\t\t} else if (cb18.lowerBound != null) {", "+\t\t\t\t\totherType = capture.environment.createWildcard(null, 0, cb18.lowerBound, null, Wildcard.SUPER);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn false; // not wellformed", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tTypeBinding upperBound = null;", "+\t\t\t\tTypeBinding [] otherBounds = null;", "+\t\t\t\tWildcardBinding wildcard = capture.wildcard;", "+\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\treturn false; // T super syntax isn't allowed, impossible capture.", "+\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\tTypeVariableBinding variable = wildcard.genericType.typeVariables()[wildcard.rank];", "+\t\t\t\t\t\tupperBound = variable.upperBound();", "+\t\t\t\t\t\totherBounds = variable.boundsCount() > 1 ? variable.otherUpperBounds() : null;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\t\totherBounds = wildcard.otherBounds;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\t// Given class A<T extends B<?>>, A<?> cannot be the universe of all parameterizations of A", "+\t\t\t\tif (upperBound.id == TypeIds.T_JavaLangObject && otherBounds == null) {", "+\t\t\t\t\treturn false; // but given class A<T>, A<?> stays an unbounded wildcard, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=348956", "+\t\t\t\t}", "+\t\t\t\totherType = capture.environment.createWildcard(null, 0, upperBound, otherBounds, Wildcard.EXTENDS);", "-\t\t\t// Given class A<T extends B<?>>, A<?> cannot be the universe of all parameterizations of A", "-\t\t\tif (upperBound.id == TypeIds.T_JavaLangObject && otherBounds == null) {", "-\t\t\t\treturn false; // but given class A<T>, A<?> stays an unbounded wildcard, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=348956", "-\t\t\t}", "-\t\t\totherType = capture.environment.createWildcard(null, 0, upperBound, otherBounds, Wildcard.EXTENDS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a2844608de42fd7429ea65732a0c692", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["+\t\t} else if(parent instanceof MemberValuePair) {", "+\t\t\tMemberValuePair memberValuePair = (MemberValuePair) parent;", "+\t\t\tif(memberValuePair.binding != null) {", "+\t\t\t\taddExpectedType(memberValuePair.binding.returnType);", "+\t\t\t}", "+\t\t} else if (parent instanceof NormalAnnotation) {", "+\t\t\tNormalAnnotation annotation = (NormalAnnotation) parent;", "+\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "+\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\tMethodBinding[] methodBindings =", "+\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "+\t\t\t\t\tif(methodBindings != null &&", "+\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "+\t\t\t\t\t\taddExpectedType(methodBindings[0].returnType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8f495c35985bfafd729b78ed4c511b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding)", "diff": ["-\t", "-\tprotected TypeBinding getTypeBinding(Scope scope) {", "-\t\t", "-\t\tif (this.resolvedType != null)", "-\t\t\treturn this.resolvedType;", "+", "+\tprotected TypeBinding findNextTypeBinding(int tokenIndex, Scope scope, PackageBinding packageBinding) {", "-\t\t\treturn scope.getType(this.tokens, this.tokens.length);", "+\t\t    if (this.resolvedType == null) {", "+\t\t\t\tthis.resolvedType = scope.getType(this.tokens[tokenIndex], packageBinding);", "+\t\t    } else {", "+\t\t\t    this.resolvedType = scope.getMemberType(this.tokens[tokenIndex], (ReferenceBinding) this.resolvedType);", "+\t\t\t\tif (this.resolvedType instanceof ProblemReferenceBinding) {", "+\t\t\t\t\tProblemReferenceBinding problemBinding = (ProblemReferenceBinding) this.resolvedType;", "+\t\t\t\t\tthis.resolvedType = new ProblemReferenceBinding(", "+\t\t\t\t\t\torg.eclipse.jdt.core.compiler.CharOperation.subarray(this.tokens, 0, tokenIndex + 1),", "+\t\t\t\t\t\tproblemBinding.original,", "+\t\t\t\t\t\tthis.resolvedType.problemId());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t    return this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "419dd9d083539e1bd730f783ff3fff5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "d135b079aa3cba8ba7f809e3b8fa111052de185d", "commitAfterChange": "c29ff6f3ca53453d86d6a9de68da632d3d253455", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " protected void popElement(int kind)", "signatureAfterChange": " protected void popElement(int kind)", "diff": ["-protected void popElement(int kind){", "-\tif(this.elementPtr < 0 || this.elementKindStack[this.elementPtr] != kind) return;", "-\tthis.previousKind = this.elementKindStack[this.elementPtr];", "-\tthis.previousInfo = this.elementInfoStack[this.elementPtr];", "-\tthis.previousObjectInfo = this.elementObjectInfoStack[this.elementPtr];", "-", "-\tthis.elementObjectInfoStack[this.elementPtr] = null;", "-", "-\tswitch (kind) {", "-\t\tdefault :", "-\t\t\tthis.elementPtr--;", "-\t\t\tbreak;", "+// the name is a misnomer, we allow \"pop\"s not just at the TOS. Lambda wants to be sticky till fully reduced, however we do want other elements poppped at the right point, so ... ", "+protected void popElement(int kind) {", "+\t", "+\tif (this.elementPtr < 0)", "+\t\treturn;", "+\t", "+\tint stackPointer = this.elementPtr;", "+\t", "+\tif (this.elementKindStack[stackPointer] == K_LAMBDA_EXPRESSION_DELIMITER) {", "+\t\tif (kind == K_FIELD_INITIALIZER_DELIMITER) // wait until lambda is reduced.", "+\t\t\treturn;", "-}", "+\t", "+\tif (kind != K_LAMBDA_EXPRESSION_DELIMITER) {", "+\t\twhile (this.elementKindStack[stackPointer] == K_LAMBDA_EXPRESSION_DELIMITER) {", "+\t\t\tstackPointer --;", "+\t\t}", "+\t}", "+\tif (stackPointer < 0 || this.elementKindStack[stackPointer] != kind)", "+\t\treturn;", "+\t", "+\tthis.previousKind = this.elementKindStack[stackPointer];", "+\tthis.previousInfo = this.elementInfoStack[stackPointer];", "+\tthis.previousObjectInfo = this.elementObjectInfoStack[stackPointer];", "+", "+\tfinal int length = this.elementPtr - stackPointer;", "+\tif (length > 0) {", "+\t\tSystem.arraycopy(this.elementKindStack, stackPointer + 1, this.elementKindStack, stackPointer, length);", "+\t\tSystem.arraycopy(this.elementInfoStack, stackPointer + 1, this.elementInfoStack, stackPointer, length);", "+\t\tSystem.arraycopy(this.elementObjectInfoStack, stackPointer + 1, this.elementObjectInfoStack, stackPointer, length);", "+\t}", "+\tthis.elementObjectInfoStack[this.elementPtr] = null;", "+\tthis.elementPtr--;", "+ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8998beb3d19c6b9453df50dcaff70894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c170f8179cacaa96bd5e7ced1e8d03ed5ea31d41", "commitAfterChange": "e2cf787950c6d582e25b73b2371c68f3fffed436", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "\r \r \tprivate void complete(AstNode astNode, Binding qualifiedBinding, Scope scope)", "diff": ["-\r", "-\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {\r", "-\r", "-\t\t\t\ttoken = ((CompletionOnSingleNameReference) astNode).token;\r", "-\t\t\t\tfindVariablesAndMethods(\r", "-\t\t\t\t\ttoken,\r", "-\t\t\t\t\tscope,\r", "-\t\t\t\t\t(CompletionOnSingleNameReference) astNode,\r", "-\t\t\t\t\tscope);\r", "-\t\t\t\t// can be the start of a qualified type name\r", "-\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\r", "-\t\t\t} else {\r", "-\r", "-\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {\r", "-\r", "-\t\t\t\t\ttoken = ((CompletionOnSingleTypeReference) astNode).token;\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnClassReference;\r", "-\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnExceptionReference;\r", "-\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;\r", "-\r", "-\t\t\t\t\t// can be the start of a qualified type name\r", "-\t\t\t\t\tif (qualifiedBinding == null) {\r", "-\t\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tfindMemberTypes(\r", "-\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {\r", "-\r", "-\t\t\t\t\t\tinsideQualifiedReference = true;\r", "-\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =\r", "-\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;\r", "-\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "-\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];\r", "-\r", "-\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {\r", "-\r", "-\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;\r", "-\t\t\t\t\t\t\tif (receiverType != null) {\r", "-\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope,false);\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;\r", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\r", "-\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());\r", "-\r", "-\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "-\r", "-\t\t\t\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "-\t\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "-\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "-\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedTypeReference) {\r", "-\r", "-\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;\r", "-\t\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;\r", "-\t\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =\r", "-\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;\r", "-\t\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "-\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];\r", "-\r", "-\t\t\t\t\t\t\t// get the source positions of the completion identifier\r", "-\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "-\t\t\t\t\t\t\t\tfindMemberTypes(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "-\r", "-\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "-\r", "-\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "-\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "-\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {\r", "-\r", "-\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;\r", "-\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;\r", "-\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\tif(astNode instanceof CompletionOnMethodReturnType) {\r", "-\t\t\t\t\t\t\t\ttoken = access.token;\r", "-\r", "-\t\t\t\t\t\t\t\tfindFieldsAndMethods(\r", "-\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t(TypeBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\taccess,\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "+\t\t\t\tCompletionOnMethodReturnType method = (CompletionOnMethodReturnType) astNode;\r", "+\t\t\t\tSingleTypeReference type = (CompletionOnSingleTypeReference) method.returnType;\r", "+\t\t\t\ttoken = type.token;\r", "+\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);\r", "+\t\t\t\tfindTypesAndPackages(token, scope);\r", "+\t\t\t\t\r", "+\t\t\t\tif(method.modifiers == CompilerModifiers.AccDefault) {\r", "+\t\t\t\t\tfindMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t\r", "+\t\t\t\tif (astNode instanceof CompletionOnSingleNameReference) {\r", "+\t\r", "+\t\t\t\t\ttoken = ((CompletionOnSingleNameReference) astNode).token;\r", "+\t\t\t\t\tfindVariablesAndMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t(CompletionOnSingleNameReference) astNode,\r", "+\t\t\t\t\t\tscope);\r", "+\t\t\t\t\t// can be the start of a qualified type name\r", "+\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "+\t\r", "+\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\tif (astNode instanceof CompletionOnSingleTypeReference) {\r", "+\t\r", "+\t\t\t\t\t\ttoken = ((CompletionOnSingleTypeReference) astNode).token;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnClassReference;\r", "+\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnExceptionReference;\r", "+\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;\r", "+\t\r", "+\t\t\t\t\t\t// can be the start of a qualified type name\r", "+\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "+\t\t\t\t\t\t\tfindTypesAndPackages(token, scope);\r", "-\r", "-\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {\r", "-\r", "-\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;\r", "-\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "-\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\ttoken = messageSend.selector;\r", "-\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "-\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(token, argTypes, scope, messageSend, scope);\r", "-\t\t\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\t\ttrue,\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\t\t\t\t\t\tmessageSend,\r", "-\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\r", "+\t\t\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedNameReference) {\r", "+\t\r", "+\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "+\t\t\t\t\t\t\tCompletionOnQualifiedNameReference ref =\r", "+\t\t\t\t\t\t\t\t(CompletionOnQualifiedNameReference) astNode;\r", "+\t\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "+\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.sourcePositions.length - 1];\r", "+\t\r", "+\t\t\t\t\t\t\tif (qualifiedBinding instanceof VariableBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\t\t\tTypeBinding receiverType = ((VariableBinding) qualifiedBinding).type;\r", "+\t\t\t\t\t\t\t\tif (receiverType != null) {\r", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(token, receiverType, scope, ref, scope,false);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) qualifiedBinding;\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(token, receiverType, scope, scope.enclosingSourceType());\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindFields(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "-\r", "-\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =\r", "-\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedTypeReference) {\r", "+\t\r", "+\t\t\t\t\t\t\t\tinsideQualifiedReference = true;\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\tassistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;\r", "+\t\t\t\t\t\t\t\tassistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;\r", "+\t\t\t\t\t\t\t\tassistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference ref =\r", "+\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedTypeReference) astNode;\r", "+\t\t\t\t\t\t\t\ttoken = ref.completionIdentifier;\r", "+\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];\r", "+\t\r", "+\t\t\t\t\t\t\t\t// get the source positions of the completion identifier\r", "+\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof ReferenceBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType());\r", "+\t\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tif (qualifiedBinding instanceof PackageBinding) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, (int) completionPosition);\r", "+\t\t\t\t\t\t\t\t\t\t// replace to the end of the completion identifier\r", "+\t\t\t\t\t\t\t\t\t\tfindTypesAndSubpackages(token, (PackageBinding) qualifiedBinding);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMemberAccess) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tCompletionOnMemberAccess access = (CompletionOnMemberAccess) astNode;\r", "+\t\t\t\t\t\t\t\t\tlong completionPosition = access.nameSourcePosition;\r", "+\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);\r", "+\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\ttoken = access.token;\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tfindFieldsAndMethods(\r", "+\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\t(TypeBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\taccess,\r", "+\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnMessageSend) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tCompletionOnMessageSend messageSend = (CompletionOnMessageSend) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);\r", "-\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "-\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "-\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\tconstructorCall,\r", "-\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\r", "-\t\t\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =\r", "-\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(messageSend.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\ttoken = messageSend.selector;\r", "+\t\t\t\t\t\t\t\t\t\tif (qualifiedBinding == null) {\r", "-\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;\r", "-\t\t\t\t\t\t\t\t\t\t\tif(ref.isClass()) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isAbstract()) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(token, argTypes, scope, messageSend, scope);\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\t\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tmessageSend,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnExplicitConstructorCall) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "+\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,\r", "+\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tconstructorCall,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnQualifiedAllocationExpression) {\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedAllocationExpression allocExpression =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnQualifiedAllocationExpression) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(allocExpression.arguments, (BlockScope) scope);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) qualifiedBinding;\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif(ref.isClass()) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isAbstract()) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tref,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression,\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isFinal()){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindAnonymousType(\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);\r", "-\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\t\tif(!ref.isFinal()){\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfindAnonymousType(\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tref,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tallocExpression);\r", "-\t\t\t\t\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);\r", "-\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\ttoken = access.completionIdentifier;\r", "-\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "+\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnMethodName) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = method.selector;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, method.returnType, excludeNames);\r", "+\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnClassLiteralAccess) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);\r", "+\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = access.completionIdentifier;\r", "+\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(token, (TypeBinding) qualifiedBinding, scope);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif(astNode instanceof CompletionOnMethodName) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = field.realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = method.selector;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, method.returnType, excludeNames);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnLocalName ||\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tastNode instanceof CompletionOnArgumentName){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = field.realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnLocalName ||\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tastNode instanceof CompletionOnArgumentName){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnLocalName) variable).realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnArgumentName) variable).realName;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, variable.type, excludeNames);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnLocalName) variable).realName;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoken = ((CompletionOnArgumentName) variable).realName;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(token, variable.type, excludeNames);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceddb96e5ff7f86a91196de213f285db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "7d7a110acd7fb43dd9a0120381db3995104a56b1", "commitAfterChange": "c7a7e4e108b0e3c57db4a9ecb9572c48f5ebfb8b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["+\t\t\t\tif (this.showAccess) {", "+\t\t\t\t\tif (match instanceof FieldReferenceMatch) {", "+\t\t\t\t\t\tFieldReferenceMatch fieldRef = (FieldReferenceMatch) match;", "+\t\t\t\t\t\tif (fieldRef.isReadAccess()) {", "+\t\t\t\t\t\t\tline.append(\" READ\");", "+\t\t\t\t\t\t\tif (fieldRef.isWriteAccess()) line.append(\"/WRITE\");", "+\t\t\t\t\t\t\tline.append(\" ACCESS\");", "+\t\t\t\t\t\t} else if (fieldRef.isWriteAccess()) {", "+\t\t\t\t\t\t\tline.append(\" WRITE ACCESS\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (match instanceof LocalVariableReferenceMatch) {", "+\t\t\t\t\t\tLocalVariableReferenceMatch variableRef = (LocalVariableReferenceMatch) match;", "+\t\t\t\t\t\tif (variableRef.isReadAccess()) {", "+\t\t\t\t\t\t\tline.append(\" READ\");", "+\t\t\t\t\t\t\tif (variableRef.isWriteAccess()) line.append(\"/WRITE\");", "+\t\t\t\t\t\t\tline.append(\" ACCESS\");", "+\t\t\t\t\t\t} else if (variableRef.isWriteAccess()) {", "+\t\t\t\t\t\t\tline.append(\" WRITE ACCESS\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d654df1d43754988ed7ae1082779797c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "848c414ceb7f8dfa6bf1cb908b31047bf78910eb", "commitAfterChange": "827bc8f09eb6be33972723284a202745477c7656", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\t} else if (isArrayConstructorReference()) {", "+\t\t\t// We don't care for annotations, source positions etc. They are immaterial, just drop.", "+\t\t\tArrayAllocationExpression arrayAllocationExpression = new ArrayAllocationExpression();", "+\t\t\tarrayAllocationExpression.dimensions = new Expression[] { argv[0] };", "+\t\t\tif (this.lhs instanceof ArrayTypeReference) {", "+\t\t\t\tArrayTypeReference arrayTypeReference = (ArrayTypeReference) this.lhs;", "+\t\t\t\tarrayAllocationExpression.type = arrayTypeReference.dimensions == 1 ? new SingleTypeReference(arrayTypeReference.token, 0L) : ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ArrayTypeReference(arrayTypeReference.token, arrayTypeReference.dimensions - 1, 0L);", "+\t\t\t} else {", "+\t\t\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference = (ArrayQualifiedTypeReference) this.lhs;", "+\t\t\t\tarrayAllocationExpression.type = arrayQualifiedTypeReference.dimensions == 1 ? new QualifiedTypeReference(arrayQualifiedTypeReference.tokens, arrayQualifiedTypeReference.sourcePositions)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: new ArrayQualifiedTypeReference(arrayQualifiedTypeReference.tokens, arrayQualifiedTypeReference.dimensions - 1, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tarrayQualifiedTypeReference.sourcePositions);", "+\t\t\t}", "+\t\t\timplicitLambda.setBody(arrayAllocationExpression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f167e8fa7209e9488eb7351a3d72b8ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "65ea78ccf732b2fce9a73969b46bac043c656dfc", "commitAfterChange": "e7d50afd382868f3818623a18647c2543f09bea3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "signatureAfterChange": " \t \tpublic void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic)", "diff": ["-\t\tCompilationUnitDeclaration compilationUnit = new CompilationUnitDeclaration(this.problemReporter, compilationResult, 0);", "+\t\tCompilationUnitDeclaration compilationUnit = null;", "-\t\t\tTypeDeclaration typeDeclaration = TypeConverter.buildTypeDeclaration(type, compilationUnit, compilationResult);", "+\t\t\tTypeDeclaration typeDeclaration = null;", "+\t\t\tif (type instanceof SourceType) {", "+\t\t\t\tSourceType sourceType = (SourceType) type;", "+\t\t\t\tISourceType info = (ISourceType) sourceType.getElementInfo();", "+\t\t\t\tcompilationUnit = SourceTypeConverter.buildCompilationUnit(", "+\t\t\t\t\tnew ISourceType[] {info},//sourceTypes[0] is always toplevel here", "+\t\t\t\t\tSourceTypeConverter.FIELD_AND_METHOD // need field and methods", "+\t\t\t\t\t| SourceTypeConverter.MEMBER_TYPE, // need member types", "+\t\t\t\t\t// no need for field initialization", "+\t\t\t\t\tthis.problemReporter,", "+\t\t\t\t\tcompilationResult);", "+\t\t\t\tif (compilationUnit.types != null)", "+\t\t\t\t\ttypeDeclaration = compilationUnit.types[0];", "+\t\t\t} else {", "+\t\t\t\tcompilationUnit = new CompilationUnitDeclaration(this.problemReporter, compilationResult, 0);", "+\t\t\t\ttypeDeclaration = BinaryTypeConverter.buildTypeDeclaration(type, compilationUnit, compilationResult);", "+\t\t\t}", "-\t\t\t\tFieldDeclaration[] newFields = new FieldDeclaration[oldFields.length + 1];", "-\t\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);", "-\t\t\t\tnewFields[oldFields.length] = fakeInitializer;", "+\t\t\t\tFieldDeclaration[] newFields = null;", "+\t\t\t\tif (oldFields != null) {", "+\t\t\t\t\tnewFields = new FieldDeclaration[oldFields.length + 1];", "+\t\t\t\t\tSystem.arraycopy(oldFields, 0, newFields, 0, oldFields.length);", "+\t\t\t\t\tnewFields[oldFields.length] = fakeInitializer;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewFields = new FieldDeclaration[] {fakeInitializer};", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5db9e4a1a732e47d1bce6339ac6f67b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "add2e09bc88bdef923e6e3e79386b09d19b0c6d4", "commitAfterChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(astNode instanceof CompletionOnMarkerAnnotationName) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMarkerAnnotationName annot = (CompletionOnMarkerAnnotationName) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsAnnotation = true;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annot.type instanceof CompletionOnSingleTypeReference) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) annot.type;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = type.token;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if(annot.type instanceof CompletionOnQualifiedTypeReference) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnQualifiedTypeReference type = (CompletionOnQualifiedTypeReference) annot.type;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = type.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(type.sourceStart, type.sourceEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}"]}], "num": 28633}
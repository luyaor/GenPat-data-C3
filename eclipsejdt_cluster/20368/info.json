{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee7cd9e92b042257edbfc351cbabe1a9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63b61a258d74da112eac8b329ddf8eac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\tif (this.expression.nullStatus(flowInfo) != FlowInfo.NON_NULL) {", "+\t\t\t// if we can't prove non-null check against declared null-ness of the enclosing method:", "+\t\t\tAbstractMethodDeclaration referenceMethod = currentScope.methodScope().referenceMethod();", "+\t\t\tif (referenceMethod != null) {", "+\t\t\t\tMethodBinding method = referenceMethod.binding;", "+\t\t\t\tif ((method.tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t\t\t\t\tchar[][] annotationName = currentScope.environment().globalOptions.nonNullAnnotationName;", "+\t\t\t\t\tcurrentScope.problemReporter().possiblyNullFromNonNullMethod(this, this.expression.nullStatus(flowInfo), ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t annotationName[annotationName.length-1]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed0d951391a6927474191182a8e88f23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t}", "-\t\tif (this.expression.nullStatus(flowInfo) != FlowInfo.NON_NULL) {", "-\t\t\t// if we can't prove non-null check against declared null-ness of the enclosing method:", "-\t\t\tAbstractMethodDeclaration referenceMethod = currentScope.methodScope().referenceMethod();", "-\t\t\tif (referenceMethod != null) {", "-\t\t\t\tMethodBinding method = referenceMethod.binding;", "-\t\t\t\tif ((method.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t\t\t\t\tchar[][] annotationName = currentScope.environment().globalOptions.nonNullAnnotationName;", "-\t\t\t\t\tcurrentScope.problemReporter().possiblyNullFromNonNullMethod(this, this.expression.nullStatus(flowInfo), ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t annotationName[annotationName.length-1]);", "-\t\t\t\t}", "-\t\t\t}"]}], "num": 20368}
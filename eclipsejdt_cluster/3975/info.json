{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "292b31ad336f1c7b47f688bb2cd3296c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11ea8dab8d137e004b92744c1d30e76a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 86, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "diff": ["- */", "-protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException {", "-", "-\t// create buffer -  compilation units only use default buffer factory", "-\tBufferManager bufManager = getBufferManager();", "-\tIBuffer buffer = getBufferFactory().createBuffer(this);", "-\tif (buffer == null) return null;", "-\t", "-\t// set the buffer source", "-\tif (buffer.getCharacters() == null){", "-\t\tIFile file = (IFile)this.getResource();", "-\t\tif (file == null || !file.exists()) throw newNotPresentException();", "-\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "-\t}", "-", "-\t// add buffer to buffer cache", "-\tbufManager.addBuffer(buffer);", "-\t\t\t", "-\t// listen to buffer changes", "-\tbuffer.addBufferChangedListener(this);", "-\t", "-\treturn buffer;", "-}", "+ */", "+protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException {", "+", "+\t// create buffer", "+\tboolean isWorkingCopy = info instanceof WorkingCopyElementInfo;", "+\tIBuffer buffer = ", "+\t\tisWorkingCopy ", "+\t\t\t? this.owner.createBuffer(this) ", "+\t\t\t: BufferManager.getDefaultBufferManager().createBuffer(this);", "+\tif (buffer == null) return null;", "+\t", "+\t// set the buffer source", "+\tif (buffer.getCharacters() == null) {", "+\t\tif (isWorkingCopy) {", "+\t\t\tICompilationUnit original = new CompilationUnit((IPackageFragment)getParent(), getElementName(), DefaultCompilationUnitOwner.PRIMARY);", "+\t\t\tif (original.isOpen()) {", "+\t\t\t\tbuffer.setContents(original.getSource());", "+\t\t\t} else {", "+\t\t\t\tIFile file = (IFile)original.getResource();", "+\t\t\t\tif (file == null || !file.exists()) {", "+\t\t\t\t\t// initialize buffer with empty contents", "+\t\t\t\t\tbuffer.setContents(CharOperation.NO_CHAR);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tIFile file = (IFile)this.getResource();", "+\t\t\tif (file == null || !file.exists()) throw newNotPresentException();", "+\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "+\t\t}", "+\t}", "+", "+\t// add buffer to buffer cache", "+\tBufferManager bufManager = getBufferManager();", "+\tbufManager.addBuffer(buffer);", "+\t\t\t", "+\t// listen to buffer changes", "+\tbuffer.addBufferChangedListener(this);", "+\t", "+\treturn buffer;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc9f354b1b3e110eb18c33a2d0b0f63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "3b3ce580437006f5042c282546d7f1102a1b2a54", "commitAfterChange": "ad076ac3457d21950247155079c8bac974a24116", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "diff": ["+\tBufferManager bufManager = getBufferManager();", "-\t\t\t: BufferManager.getDefaultBufferManager().createBuffer(this);", "+\t\t\t: bufManager.createBuffer(this);", "-\t// set the buffer source", "-\tif (buffer.getCharacters() == null) {", "-\t\tif (isWorkingCopy) {", "-\t\t\tICompilationUnit original;", "-\t\t\tif (!isPrimary() ", "-\t\t\t\t\t&& (original = new CompilationUnit((PackageFragment)getParent(), getElementName(), DefaultWorkingCopyOwner.PRIMARY)).isOpen()) {", "-\t\t\t\tbuffer.setContents(original.getSource());", "-\t\t\t} else {", "-\t\t\t\tIFile file = (IFile)getResource();", "-\t\t\t\tif (file == null || !file.exists()) {", "-\t\t\t\t\t// initialize buffer with empty contents", "-\t\t\t\t\tbuffer.setContents(CharOperation.NO_CHAR);", "+\t// synchronize to ensure that 2 threads are not putting 2 different buffers at the same time", "+\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=146331", "+\tsynchronized(bufManager) {", "+\t\tIBuffer existingBuffer = bufManager.getBuffer(this);", "+\t\tif (existingBuffer != null)", "+\t\t\treturn existingBuffer;", "+\t\t", "+\t\t// set the buffer source", "+\t\tif (buffer.getCharacters() == null) {", "+\t\t\tif (isWorkingCopy) {", "+\t\t\t\tICompilationUnit original;", "+\t\t\t\tif (!isPrimary() ", "+\t\t\t\t\t\t&& (original = new CompilationUnit((PackageFragment)getParent(), getElementName(), DefaultWorkingCopyOwner.PRIMARY)).isOpen()) {", "+\t\t\t\t\tbuffer.setContents(original.getSource());", "-\t\t\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "+\t\t\t\t\tIFile file = (IFile)getResource();", "+\t\t\t\t\tif (file == null || !file.exists()) {", "+\t\t\t\t\t\t// initialize buffer with empty contents", "+\t\t\t\t\t\tbuffer.setContents(CharOperation.NO_CHAR);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "+\t\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tIFile file = (IFile)this.getResource();", "+\t\t\t\tif (file == null || !file.exists()) throw newNotPresentException();", "+\t\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "-\t\t} else {", "-\t\t\tIFile file = (IFile)this.getResource();", "-\t\t\tif (file == null || !file.exists()) throw newNotPresentException();", "-\t\t\tbuffer.setContents(Util.getResourceContentsAsCharArray(file));", "-\t}", "-", "-\t// add buffer to buffer cache", "-\tBufferManager bufManager = getBufferManager();", "-\tbufManager.addBuffer(buffer);", "-\t\t\t", "-\t// listen to buffer changes", "-\tbuffer.addBufferChangedListener(this);", "+\t\t// add buffer to buffer cache", "+\t\t// note this may cause existing buffers to be removed from the buffer cache, but only primary compilation unit's buffer", "+\t\t// can be closed, thus no call to a client's IBuffer#close() can be done in this synchronized block.", "+\t\tbufManager.addBuffer(buffer);", "+\t\t\t\t", "+\t\t// listen to buffer changes", "+\t\tbuffer.addBufferChangedListener(this);", "+\t}\t"]}], "num": 3975}
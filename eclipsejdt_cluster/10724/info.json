{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3888275ad40f2e55445be8c9b1c3800", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cebfd31c3b907c72c03bad56fdb5d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "ed216bad8ac7db85d4e5d7fd2492a6cf18c498b9", "commitAfterChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding, \t\tint classpathDirectoryMode, AccessRuleSet accessRuleSet)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding, \t\tint classpathDirectoryMode, AccessRuleSet accessRuleSet)", "diff": ["-\ttry {", "-\t\t\tFile file = new File(convertPathSeparators(classpathName));", "-\t\t\tif (file.isDirectory()) {", "-\t\t\t\tif (file.exists()) {", "-\t\t\t\t\tresult = new ClasspathDirectory(file, encoding,", "-\t\t\t\t\t\t\tclasspathDirectoryMode, accessRuleSet);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tString lowercaseClasspathName = classpathName.toLowerCase();", "-\t\t\t\tif (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)", "-\t\t\t\t\t\t|| lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {", "-\t\t\t\t\tresult = new ClasspathJar(new ZipFile(file), true,", "-\t\t\t\t\t\t\taccessRuleSet);", "-\t\t\t\t\t// will throw an IOException if file does not exist", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\t// result = null; -- this is already the case", "+\tFile file = new File(convertPathSeparators(classpathName));", "+\tif (file.isDirectory()) {", "+\t\tif (file.exists()) {", "+\t\t\tresult = new ClasspathDirectory(file, encoding,", "+\t\t\t\t\tclasspathDirectoryMode, accessRuleSet);", "+\t} else {", "+\t\tString lowercaseClasspathName = classpathName.toLowerCase();", "+\t\tif (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)", "+\t\t\t\t|| lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {", "+\t\t\tresult = new ClasspathJar(file, true, accessRuleSet);", "+\t\t\t// will throw an IOException if file does not exist", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecccc5defb35e707662e7d2618ff12a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "68ccb4031ed08b4fe5c4be466185d9f98028d52b", "commitAfterChange": "b97b84a6370469b0432a4c45b3f13c4f7bb62ce7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "signatureAfterChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["-\tString[] pathNames = new String[classpathSize];", "-\t\ttry {", "-\t\t\tFile file = new File(convertPathSeparators(classpathNames[i]));", "-\t\t\tif (file.isDirectory()) {", "-\t\t\t\tif (file.exists()) {", "-\t\t\t\t\tif (classpathDirectoryModes == null){", "-\t\t\t\t\t\tthis.classpaths[i] = new ClasspathDirectory(file, encoding);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.classpaths[i] = new ClasspathDirectory(file, encoding, classpathDirectoryModes[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tpathNames[i] = ((ClasspathDirectory) this.classpaths[i]).path;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tString lowercaseClasspathName = classpathNames[i].toLowerCase();", "-\t\t\t\tif (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)", "-\t\t\t\t\t  || lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {", "-\t\t\t\t\tthis.classpaths[i] = this.getClasspathJar(file); // will throw an IOException if file does not exist", "-\t\t\t\t\tpathNames[i] = classpathNames[i].substring(0, classpathNames[i].lastIndexOf('.'));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\tthis.classpaths[i] = null;", "-\t\t}", "+\t\tthis.classpaths[i] = getClasspath(classpathNames[i], encoding,", "+\t\t\t\t\tclasspathDirectoryModes == null ? 0", "+\t\t\t\t\t\t\t: classpathDirectoryModes[i], null);", "-\t\tString[] newNames = new String[classpathSize - problemsOccured];", "-\t\t\t\tnewNames[current++] = pathNames[i];", "-\t\tpathNames = newNames;", "-", "+\tinitializeKnownFileNames(initialFileNames);", "+}", "-\t\tfor (int j = 0; j < classpathSize; j++)", "-\t\t\tif (fileName.startsWith(pathNames[j]))", "-\t\t\t\tmatchingPathName = pathNames[j];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda92c6e980c1fe9c9ab959c8adae3ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "signatureAfterChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["-\tclasspaths = new Classpath[classpathSize];", "+\tthis.classpaths = new Classpath[classpathSize];", "-\t\t\t\t\t\tclasspaths[i] = new ClasspathDirectory(file, encoding);", "+\t\t\t\t\t\tthis.classpaths[i] = new ClasspathDirectory(file, encoding);", "-\t\t\t\t\t\tclasspaths[i] = new ClasspathDirectory(file, encoding, classpathDirectoryModes[i]);", "+\t\t\t\t\t\tthis.classpaths[i] = new ClasspathDirectory(file, encoding, classpathDirectoryModes[i]);", "-\t\t\t\t\tpathNames[i] = ((ClasspathDirectory) classpaths[i]).path;", "+\t\t\t\t\tpathNames[i] = ((ClasspathDirectory) this.classpaths[i]).path;", "-\t\t\t\tclasspaths[i] = this.getClasspathJar(file); // will throw an IOException if file does not exist", "+\t\t\t\tthis.classpaths[i] = this.getClasspathJar(file); // will throw an IOException if file does not exist", "-\t\t\tclasspaths[i] = null;", "+\t\t\tthis.classpaths[i] = null;", "-\t\tif (classpaths[i] == null)", "+\t\tif (this.classpaths[i] == null)", "-\t\t\tif (classpaths[i] != null) {", "-\t\t\t\tnewPaths[current] = classpaths[i];", "+\t\t\tif (this.classpaths[i] != null) {", "+\t\t\t\tnewPaths[current] = this.classpaths[i];", "-\t\tclasspaths = newPaths;", "+\t\tthis.classpaths = newPaths;", "-\tknownFileNames = new String[initialFileNames.length];", "+\tthis.knownFileNames = new String[initialFileNames.length];", "-\t\t\tknownFileNames[i] = fileName; // leave as is...", "+\t\t\tthis.knownFileNames[i] = fileName; // leave as is...", "-\t\t\tknownFileNames[i] = fileName.substring(matchingPathName.length());", "+\t\t\tthis.knownFileNames[i] = fileName.substring(matchingPathName.length());"]}], "num": 10724}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddd194bf96dd043ab9231616c79b9230", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73f2fd64d28f72f7d3be75333ff12ec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean formatJavadoc)", "diff": ["-\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "-\t\tif (ProbingScanner == null) {", "+", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean formatJavadoc) {", "+\t\tif (PROBING_SCANNER == null) {", "-\t\t\tProbingScanner = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t\tPROBING_SCANNER = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_3, ClassFileConstants.JDK1_3, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tProbingScanner.setSource(source.toCharArray());", "+\t\tPROBING_SCANNER.setSource(source.toCharArray());", "-\t\tProbingScanner.resetTo(offset, offset + length);", "+\t\tPROBING_SCANNER.resetTo(offset, offset + length);", "-\t\t\tswitch(ProbingScanner.getNextToken()) {", "+\t\t\tswitch(PROBING_SCANNER.getNextToken()) {", "-\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "-\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "-\t\t\t\t\tif (ProbingScanner.getCurrentTokenEndPosition() == offset + length - 1) {", "-\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t\tif (PROBING_SCANNER.getCurrentTokenEndPosition() == offset + length - 1) {", "+\t\t\t\t\t\t// bug 102780 - javadoc is formatted in a different manner", "+\t\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "-\t\tProbingScanner.setSource((char[]) null);", "+\t\tPROBING_SCANNER.setSource((char[]) null);", "-\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, formatJavadoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3e9db7524b18d3994ced6deb5360bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "ec1201be6eb9490fec9fdaa6f4ea5d677aacc407", "commitAfterChange": "480bd4c12ce02b942d6c4f0771fb76bf589234f5", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public static UnconditionalFlowInfo mergedOptimizedBranchesIfElse( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch, FlowInfo flowInfo)", "signatureAfterChange": " public static UnconditionalFlowInfo mergedOptimizedBranchesIfElse( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement)", "diff": ["-\t\tboolean allowFakeDeadBranch, FlowInfo flowInfo) {", "+\t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement) {", "-\t\t\t\t(initsWhenFalse.tagBits & FlowInfo.UNREACHABLE) != 0 &&", "+\t\t\t\t(ifStatement.bits & ASTNode.IsElseStatementUnreachable) != 0 &&", "-\t\t\t(initsWhenTrue.tagBits & FlowInfo.UNREACHABLE) != 0 && initsWhenTrue != FlowInfo.DEAD_END", "+\t\t\t(ifStatement.bits & ASTNode.IsThenStatementUnreachable) != 0 && initsWhenTrue != FlowInfo.DEAD_END"]}], "num": 54755}
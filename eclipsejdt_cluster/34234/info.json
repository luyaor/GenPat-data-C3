{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe127e8f466680aeecd8dfddcf248a55", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fd6ef0d94b6df8679824db923169097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope unused)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["-\tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope unused) {", "+\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused) {", "-\t\t\tString simpleName = \"\"; //$NON-NLS-1$", "+\t\t\tString simpleName;", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\t\tsimpleName = \"\"; //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tsimpleName = new String(typeDeclaration.name);", "+\t\t\t}", "-\t\t\tif (occurrenceCount == null)", "+\t\t\tif (occurrenceCount == null) {", "-\t\t\telse", "+\t\t\t} else {", "+\t\t\t}", "-\t\t\treportMatching(anonymousTypeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount.intValue());", "-\t\t\treturn false; // don't visit members as this was done during reportMatching(...)", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new WrappedCoreException(e);", "-\t\t}", "-\t}", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\t\treportMatching(typeDeclaration, enclosingElement, -1, nodeSet, occurrenceCount.intValue());", "+\t\t\t} else {", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);", "+\t\t\t\treportMatching(typeDeclaration, enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount.intValue());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7590bb424c84a72c958f27a8b785fe66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " protected IJavaElement createHandle(Annotation annotation, IAnnotatable parent)", "diff": ["-\t}", "-\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused) {", "-\t\ttry {", "-\t\t\tchar[] simpleName;", "-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {\t\t\t\t", "-\t\t\t\tsimpleName = CharOperation.NO_CHAR;", "-\t\t\t} else {", "-\t\t\t\tsimpleName = typeDeclaration.name;", "-\t\t\t}", "-\t\t\tint occurrenceCount = occurrencesCounts.get(simpleName);", "-\t\t\tif (occurrenceCount == HashtableOfIntValues.NO_VALUE) {", "-\t\t\t\toccurrenceCount = 1;", "-\t\t\t} else {", "-\t\t\t\toccurrenceCount = occurrenceCount + 1;", "-\t\t\t}", "-\t\t\toccurrencesCounts.put(simpleName, occurrenceCount);", "-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {\t\t\t\t", "-\t\t\t\treportMatching(typeDeclaration, this.enclosingElement, -1, nodeSet, occurrenceCount);", "-\t\t\t} else {", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeDeclaration);", "-\t\t\t\treportMatching(typeDeclaration, this.enclosingElement, level != null ? level.intValue() : -1, nodeSet, occurrenceCount);", "-\t\t\t}", "-\t\t\treturn false; // don't visit members as this was done during reportMatching(...)", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new WrappedCoreException(e);", "-\t\t}", "-\t}", "+ */", "+protected IJavaElement createHandle(Annotation annotation, IAnnotatable parent) {", "+\tif (parent == null) return null;", "+\tTypeReference typeRef = annotation.type;", "+\tchar[][] typeName = typeRef.getTypeName();", "+\tString name = new String(typeName[typeName.length-1]);", "+\ttry {", "+\t\tIAnnotation[] annotations = parent.getAnnotations();", "+\t\tint length = annotations == null ? 0 : annotations.length;", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tif (annotations[i].getElementName().equals(name)) {", "+\t\t\t\treturn annotations[i];", "+\t\t\t}", "+\t\t}", "+\t}", "+\tcatch (JavaModelException jme) {", "+\t\t// skip", "+\t}", "+\treturn null;", "+}"]}], "num": 34234}
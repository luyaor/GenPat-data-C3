{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab75c8efbaa51f31d2dd9319c8457f43", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dc2e700da40aa0ea1099448f2c54205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "090fe346c72e2854da50fe3a145f46de3d4f7de0", "commitAfterChange": "a0b059290bf7b15573bfcb14661207df6f99dd45", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\tif (match != null) {", "-\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t}", "-\t\t\t", "-\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t}  else {", "-\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\tgetAllInheritedMethods((ReferenceBinding) expressionType);", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80745", "-\t\t\t\tMethodVerifier verifier = env.methodVerifier();", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++) {", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "-\t\t\t\t\t\tif (verifier.doReturnTypesCollide(castTypeMethods[i], expressionTypeMethods[j]))", "-\t\t\t\t\t\t\treturn false;", "+\t\t\t\tReferenceBinding interfaceType = (ReferenceBinding) expressionType;", "+\t\t\t\tTypeBinding match = interfaceType.findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t}", "+\t\t\t\t", "+\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)interfaceType.erasure());", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "+\t\t\t\t}", "+\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\t// pre1.5 semantics - no covariance allowed (even if 1.5 compliant, but 1.4 source)", "+\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "+\t\t\t\tMethodBinding[] expressionTypeMethods = getAllInheritedMethods((ReferenceBinding) expressionType);", "+\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\treturn false;", "+", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5412f994d9b2793f7de9af0a3c8865f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "8b226a492ac84a08d6b25c8931ed21c4c6d95533", "commitAfterChange": "5df5b275110c6cdc85b67221e388c4e6ac6468cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\tif (expressionType == NullBinding) {", "-\t\t\tconstant = expression.constant;", "+\t\tif (expressionType == NullBinding) ", "-\t\t}", "+", "-\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionType).elementsType(scope);", "-\t\t\t\tif (expressionEltTb.isBaseType()) {", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == expressionEltTb)", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType)", "-\t\t\t\t\texpressionEltTb);", "+\t\t\t\t\texprElementType);", "-\t\t\t\t\tif (castType.id == T_String && expression.constant != Constant.NotAConstant){", "-\t\t\t\t\t\tconstant = expression.constant; // (String) cst is still a constant", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (castType.id == T_String) constant = expression.constant; // (String) cst is still a constant", "+\t\t\t\t\treturn;", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType))", "+\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)) ", "-\t\t} else if (", "-\t\t\tcastType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "+\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length;", "-\t\t\t\t\ti < castMethodsLength;", "-\t\t\t\t\ti++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "-\t\t\t\t\t\tif (castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\tif (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "-\t\t\t\t\t\t\t\tif (castTypeMethods[i].areParametersEqual(expressionTypeMethods[j]))", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 61082}
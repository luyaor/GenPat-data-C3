{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a23856806222c70f63a3fbe39e7db86", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0beebe0b561a463905c6e7ba35ab9fa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprivate static boolean updateWorkingCopy(  \t\t\tString contents, ICompilationUnit workingCopy,  \t\t\tWorkingCopyOwner workingCopyOwner, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate synchronized Set<ICompilationUnit> discardWorkingCopy(ICompilationUnit wc)", "diff": ["+\t */", "+\tprivate synchronized Set<ICompilationUnit> discardWorkingCopy(ICompilationUnit wc) {", "+\t\tSet<ICompilationUnit> toDiscard;", "+\t\tICompilationUnit hidingWc = _hiddenBuiltTypes.remove(wc);", "+\t\tif (null != hidingWc) {", "+\t\t\ttoDiscard = Collections.singleton(hidingWc);", "+\t\t}", "+\t\telse {", "+\t\t\ttoDiscard = removeWcChildrenFromMaps(wc);", "+\t\t\tIFile file = (IFile) wc.getResource();", "+\t\t\t_parentToGenWorkingCopies.removeKey(file);", "+\t\t\t_workingCopies.remove(wc);", "+\t\t\ttoDiscard.add(wc);", "+\t\t}", "+\t\tassert checkIntegrity();", "+\t\treturn toDiscard;", "+\t}", "-\t */", "-\tprivate static boolean updateWorkingCopy( ", "-\t\t\tString contents, ICompilationUnit workingCopy, ", "-\t\t\tWorkingCopyOwner workingCopyOwner, IProgressMonitor progressMonitor )", "-\t\tthrows JavaModelException", "-\t{", "-\t\tIBuffer b = workingCopy.getBuffer();", "-\t\tchar[] oldBuf = b.getCharacters();", "-\t\t// Diff the contents, and only set if they differ", "-\t\tif (oldBuf.length == contents.length()) {", "-\t\t\tboolean contentsMatch = true;", "-\t\t\tfor (int i=0; i<oldBuf.length; i++) {", "-\t\t\t\tif (oldBuf[i] != contents.charAt(i)) {", "-\t\t\t\t\tcontentsMatch = false;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (contentsMatch) {", "-\t\t\t\t// No change, no need to update buffer", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tb.setContents(contents);", "-\t\tworkingCopy.reconcile(AST.JLS3, true, workingCopyOwner,", "-\t\t\t\tprogressMonitor);", "-\t\treturn true;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d29d9230c76035689003aeec296b567f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "commitAfterChange": "7549708bfbb6541d509ec2f74894b85fedbf2954", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void _loadFactory(final String className, final ClassLoader classLoader)", "signatureAfterChange": " \t \tprivate List<AnnotationProcessorFactory> loadFactoryClasses( FactoryContainer fc, ClassLoader classLoader )", "diff": ["+\t", "+\tprivate List<AnnotationProcessorFactory> loadFactoryClasses( FactoryContainer fc, ClassLoader classLoader )", "+\t{", "+\t\tList<String> factoryNames = fc.getFactoryNames();", "+\t\tList<AnnotationProcessorFactory> factories = new ArrayList<AnnotationProcessorFactory>( factoryNames.size() ); ", "+\t\tfor ( String factoryName : factoryNames )", "+\t\t{", "+\t\t\tAnnotationProcessorFactory factory;", "+\t\t\tif ( fc.isPlugin() )", "+\t\t\t\tfactory = loadFactoryFromPlugin( factoryName );", "+\t\t\telse", "+\t\t\t\tfactory = loadFactoryFromClassLoader( factoryName, classLoader );", "+\t\t\t", "+\t\t\tif ( factory != null )", "+\t\t\t\tfactories.add( factory );", "+\t\t}", "+\t\treturn factories;", "+\t}", "-", "-    private void _loadFactory(final String className, final ClassLoader classLoader)", "-    {", "-        try {", "-            if (_verboseLoad) {", "-                System.err.println(\"\\tAttempting to load APT factory class \\\"\" + className + \"\\\"...\");", "-            }", "-            Class c = classLoader.loadClass(className);", "-            Constructor ctor = c.getDeclaredConstructor( new Class[0] );", "-            AnnotationProcessorFactory factory = ( AnnotationProcessorFactory ) ctor.newInstance( new Object[0] );", "-            if (factory != null) {", "-                if(!_factories.contains( factory) )", "-                    _factories.add(factory);", "-            }", "-            if (_verboseLoad) {", "-                System.err.println(\"\\t... succeeded.\");", "-            }", "-        }", "-        catch (Throwable t) {", "-            if (_verboseLoad) {", "-                System.err.println(\"\\t... failed: \" + t);", "-                if (t.getCause() != null) t.getCause().printStackTrace(System.err);", "-            }", "-            // Uncomment this to debug exception throws that are real.", "-            //throw new IllegalStateException(t);", "-        }", "-    }"]}], "num": 55827}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e1afb8f936d6c72d86f89f92b3e9e6a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c147b2fd93950d382f9467865fce79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ce5e99be53ea4136316bd613e61153c059e7a481", "commitAfterChange": "6ba8969cfb610f1f976fc162e09094107082e31f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "signatureAfterChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "diff": ["-\t\tMap options = JavaCore.getOptions();", "-\t\t// probing algorithm", "-\t\t/*", "-\t\t * 1) expression", "-\t\t * 2) statements", "-\t\t * 3) classbody declarations", "-\t\t * 4) compilation unit", "-\t\t */", "-\t\tExpression expression = parseExpression(source.toCharArray(), options);", "-\t\t", "-\t\tif (expression != null) {", "-\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "-\t\t}", "-", "-\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "-\t\t", "-\t\tif (constructorDeclaration.statements != null) {", "-\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "-\t\t}", "-\t\t", "-\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "-\t\t", "-\t\tif (bodyDeclarations != null) {", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "-\t\t}", "-", "-\t\treturn format(K_COMPILATION_UNIT, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());", "+\t\treturn format(K_UNKNOWN, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb98bbdc687331ff1934dd63ed05cbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tvalueIfTrue.implicitWidening(valueIfTrueType, valueIfTrueType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "-\t\t\t\tvalueIfTrue.implicitWidening(ShortBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(ShortBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, ShortBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, ShortBinding, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(valueIfTrueType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(valueIfTrueType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(valueIfFalseType, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(valueIfFalseType, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(IntBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(IntBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, IntBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, IntBinding, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(LongBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(LongBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, LongBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, LongBinding, valueIfFalseType);", "-\t\t\t\tvalueIfTrue.implicitWidening(FloatBinding, valueIfTrueType);", "-\t\t\t\tvalueIfFalse.implicitWidening(FloatBinding, valueIfFalseType);", "+\t\t\t\tvalueIfTrue.computeConversion(scope, FloatBinding, valueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, FloatBinding, valueIfFalseType);", "-\t\t\tvalueIfTrue.implicitWidening(DoubleBinding, valueIfTrueType);", "-\t\t\tvalueIfFalse.implicitWidening(DoubleBinding, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, DoubleBinding, valueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, DoubleBinding, valueIfFalseType);", "-\t\t\tvalueIfTrue.implicitWidening(valueIfTrueType, valueIfTrueType);", "-\t\t\tvalueIfFalse.implicitWidening(valueIfTrueType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, valueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfTrueType, valueIfFalseType);", "-\t\t\tvalueIfTrue.implicitWidening(valueIfFalseType, valueIfTrueType);", "-\t\t\tvalueIfFalse.implicitWidening(valueIfFalseType, valueIfFalseType);", "+\t\t\tvalueIfTrue.computeConversion(scope, valueIfFalseType, valueIfTrueType);", "+\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, valueIfFalseType);", "+\t\t// 1.5 addition: allow most common type ", "+\t\tif (scope.environment().options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tTypeBinding commonType = scope.mostSpecificCommonType(new TypeBinding[] { valueIfTrueType, valueIfFalseType });", "+\t\t\tif (commonType != null) {", "+\t\t\t\treturn this.resolvedType = commonType;", "+\t\t\t}", "+\t\t}"]}], "num": 69017}
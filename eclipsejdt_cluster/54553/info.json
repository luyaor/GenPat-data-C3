{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23ee017e86bd0ce6d17cc40e3b08ed18", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b87f15e9169f5c8a0a82dd402c149e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "5df75ce3074574b9ceea64411eeaa18313a445b2", "commitAfterChange": "418c3c32abb13732045765a3a2278937dc9fd129", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\tString javadocContents = null;", "+\t\tJavadocContents javadocContents = null;", "-\t\t\tjavadocContents = (String) projectInfo.javadocCache.get(declaringType);", "+\t\t\tjavadocContents = (JavadocContents) projectInfo.javadocCache.get(declaringType);", "+\t\t", "+\t\tString methodDoc = null;", "-\t\t\tjavadocContents = nameCollector.getJavadoc();", "+\t\t\tmethodDoc = nameCollector.getJavadoc();", "-\t\t\t\tjavadocContents = extractJavadoc(declaringType, javadocContents);", "+\t\t\t\tmethodDoc = javadocContents.getMethodDoc(this);", "-\t\tif (javadocContents != null && javadocContents != BinaryType.EMPTY_JAVADOC) {", "-\t\t\tfinal int indexOfOpenParen = javadocContents.indexOf('(');", "+\t\tif (methodDoc != null) {", "+\t\t\tfinal int indexOfOpenParen = methodDoc.indexOf('(');", "-\t\t\t\tfinal int indexOfClosingParen = javadocContents.indexOf(')', indexOfOpenParen);", "+\t\t\t\tfinal int indexOfClosingParen = methodDoc.indexOf(')', indexOfOpenParen);", "-\t\t\t\t\t\t\tjavadocContents.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),", "+\t\t\t\t\t\t\tmethodDoc.substring(indexOfOpenParen + 1, indexOfClosingParen).toCharArray(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f065fb12867d62c6d33de58aaaa6f4dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "605463bb98397b59c78b7fc56ee33e7e22fd8367", "commitAfterChange": "7428bd3b18a16b1860e6a1a28fbc6cd63967fdc6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private String expectedFormattedSource(String source)", "signatureAfterChange": "  private String expectedFormattedSource(String source)", "diff": ["-\t\tif (commentKind == CodeFormatter.K_JAVA_DOC) { // Only process javadoc for now", "-\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, Util.LINE_SEPARATOR);", "+\t\tif (commentKind != CodeFormatter.K_MULTI_LINE_COMMENT) { // Does not process block comment", "+\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);", "-\t\t\tint commentStart = positions[0] > 0 ? positions [0] : -positions[0];", "-\t\t\tint commentEnd = positions[1] > 0 ? positions [1] : -positions[1];", "+\t\t\tint commentStart = positions [0];", "+\t\t\tint commentEnd = positions [1];", "+\t\t\tif (commentEnd < 0) { // line or block comments have negative end position", "+\t\t\t\tcommentEnd = -commentEnd;", "+\t\t\t\tif (commentStart < 0) { // line comments have negative start position", "+\t\t\t\t\tcommentStart = -commentStart;", "+\t\t\t\t\tString comment = formattedComments[i];", "+\t\t\t\t\tif (comment.trim().length() > 2) { // non empty comment", "+\t\t\t\t\t\tchar ch = source.charAt(commentEnd);", "+\t\t\t\t\t\tif (ch == '\\r' || ch == '\\n') {", "+\t\t\t\t\t\t\tcommentEnd++;", "+\t\t\t\t\t\t\tch = source.charAt(commentEnd);", "+\t\t\t\t\t\t\tif (ch == '\\r' || ch == '\\n') {", "+\t\t\t\t\t\t\t\tcommentEnd++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\treturn oldResult;", "+\treturn oldResult == null ? newSource : oldResult;"]}], "num": 54553}
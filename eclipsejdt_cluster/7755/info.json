{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfd1d202f1303334937f309568495bd2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6470afe82394133267cd070799b38fd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "diff": ["-    \t\t\tthis.typeArguments[i] = inferenceContext.substitutes[i];", "+    \t\t\tthis.typeArguments[i] = substitute;", "-\t    \t\tthis.typeArguments[i] = originalVariables[i].upperBound();", "+\t    \t\tthis.typeArguments[i] = inferenceContext.substitutes[i] = originalVariables[i].upperBound();", "-\t\t// may still need an extra substitution at the end (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=121369)", "-\t\t// to properly substitute a remaining unresolved variable which also appear in a formal bound", "-    \tthis.typeArguments = Scope.substitute(this, this.typeArguments);", "+\t\t/* May still need an extra substitution at the end (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=121369)", "+\t\t   to properly substitute a remaining unresolved variable which also appear in a formal bound. See also", "+\t\t   http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5021635. It is questionable though whether this extra", "+\t\t   substitution should take place when the invocation site offers no guidance whatsoever and the type variables", "+\t\t   are inferred to be the glb of the published bounds - as there can recursion in the formal bounds, the", "+\t\t   inferred bounds would no longer be glb.", "+\t\t*/", "+\t\t", "+\t\tthis.typeArguments = Scope.substitute(this, this.typeArguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc11152647329cffa34d55500fe5420b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c98abd1679793c741445024ae2ee115b37f6fe95", "commitAfterChange": "b2ee2f0e0ad1c5d61d4417df1a17fc01d93cc41f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate void preserveEmptyLines(int count)", "signatureAfterChange": " \t \tprivate void preserveEmptyLines(int count)", "diff": ["-\t\tif ((count - 1) > 0) {", "-\t\t\tint linesToPreserve = Math.min(count - 1, this.formatter.preferences.number_of_empty_lines_to_preserve);", "+\t\tif (count > 0) {", "+\t\t\tint linesToPreserve = Math.min(count, this.formatter.preferences.number_of_empty_lines_to_preserve + 1);"]}], "num": 7755}
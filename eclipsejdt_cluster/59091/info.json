{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b056dfa36b07ddfb49a710abc76d478", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1196a74fb3bc117040e1bdda7668fa76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "c17d3895a0e0525887a24ddd3e8adeeb66ba12c9", "commitAfterChange": "97db7e90ccc840cc657b10cff644c6263b14fb3a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t}", "-\tif (this.binding != null && this.type.resolvedType instanceof TypeVariableBinding) {", "-\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.type.resolvedType;", "-\t\tMethodScope methodScope= this.binding.declaringScope.methodScope();", "-\t\tif (methodScope != null && methodScope.referenceContext instanceof TypeDeclaration) {", "-\t\t\t// initialization scope", "-\t\t\tmethodScope = methodScope.enclosingMethodScope();", "-\t\t}", "-\t\tAbstractMethodDeclaration methodDeclaration = (methodScope != null) ? methodScope.referenceMethod() : null;", "-\t\tif (methodDeclaration != null && methodDeclaration.binding != null) {", "-\t\t\tTypeVariableBinding[] typeVariables = methodDeclaration.binding.typeVariables();", "-\t\t\tif (typeVariables == null) typeVariables = Binding.NO_TYPE_VARIABLES;", "-\t\t\tif (typeVariables == Binding.NO_TYPE_VARIABLES) {", "-\t\t\t\t// Method declares no type variables.", "-\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)", "-\t\t\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag((TypeBinding) typeVariableBinding.declaringElement);", "-\t\t\t\telse", "-\t\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "-\t\t\t} else {", "-\t\t\t\t// to check whether the resolved type for this is declared by enclosing method as a type variable", "-\t\t\t\tboolean usesEnclosingTypeVar = false; ", "-\t\t\t\tfor (int i = 0; i < typeVariables.length ; i ++) {", "-\t\t\t\t\tif (typeVariables[i] == this.type.resolvedType){", "-\t\t\t\t\t\tusesEnclosingTypeVar = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!usesEnclosingTypeVar) {", "-\t\t\t\t\t// uses a type variable not declared by enclosing method", "-\t\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)", "-\t\t\t\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag((TypeBinding) typeVariableBinding.declaringElement);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7238bdb89782ff34005658b1ff05ac3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "07e9b0e8791371fe37d0b3154d25a43e023b50c9", "commitAfterChange": "fd61d3d365e4129ad38d13ee5d665ea318749efb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t}", "-\tif (this.binding != null && this.type.resolvedType instanceof TypeVariableBinding) {", "-\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.type.resolvedType;", "-\t\tMethodScope methodScope= this.binding.declaringScope.methodScope();", "-\t\tif (methodScope != null && methodScope.referenceContext instanceof TypeDeclaration) {", "-\t\t\t// initialization scope", "-\t\t\tmethodScope = methodScope.enclosingMethodScope();", "-\t\t}", "-\t\tAbstractMethodDeclaration methodDeclaration = (methodScope != null) ? methodScope.referenceMethod() : null;", "-\t\tif (methodDeclaration != null && methodDeclaration.binding != null) {", "-\t\t\tTypeVariableBinding[] typeVariables = methodDeclaration.binding.typeVariables();", "-\t\t\tif (typeVariables == null) typeVariables = Binding.NO_TYPE_VARIABLES;", "-\t\t\tif (typeVariables == Binding.NO_TYPE_VARIABLES) {", "-\t\t\t\t// Method declares no type variables.", "-\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)", "-\t\t\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag((TypeBinding) typeVariableBinding.declaringElement);", "-\t\t\t\telse", "-\t\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "-\t\t\t} else {", "-\t\t\t\t// to check whether the resolved type for this is declared by enclosing method as a type variable", "-\t\t\t\tboolean usesEnclosingTypeVar = false; ", "-\t\t\t\tfor (int i = 0; i < typeVariables.length ; i ++) {", "-\t\t\t\t\tif (typeVariables[i] == this.type.resolvedType){", "-\t\t\t\t\t\tusesEnclosingTypeVar = true;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!usesEnclosingTypeVar) {", "-\t\t\t\t\t// uses a type variable not declared by enclosing method", "-\t\t\t\t\tif (typeVariableBinding != null && typeVariableBinding.declaringElement instanceof TypeBinding)", "-\t\t\t\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag((TypeBinding) typeVariableBinding.declaringElement);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}], "num": 59091}
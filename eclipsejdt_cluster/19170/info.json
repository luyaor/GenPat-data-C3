{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9e693177eb171134ad64ed871785845", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03babc343ec8a6ae31f97f472e6631e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d6269129563f98355327b1ab05b64efc1651a96c", "commitAfterChange": "3a42960d70f16619a40a10161fc61740ab2695a4", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tsourceEnd = returnType.sourceEnd;", "+\t\tif (returnType instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference typeReference = (ParameterizedSingleTypeReference) returnType;", "+\t\t\tTypeReference[] typeArguments = typeReference.typeArguments;", "+\t\t\tif (typeArguments[typeArguments.length - 1].sourceEnd > typeReference.sourceEnd) {", "+\t\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t\t} else {", "+\t\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t\t}", "+\t\t} else if (returnType instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference typeReference = (ParameterizedQualifiedTypeReference) returnType;", "+\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t} else {", "+\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "947a4cf3bfe7ad9d9d3e99a4773da7a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5ae7e6b78bc18a365a04a008c907250a535fa48a", "commitAfterChange": "e30351551cacd61d107b0f2c8e2d961ea6077c69", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void invalidType(ASTNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(ASTNode location, TypeBinding type)", "diff": ["+\t} else if (location instanceof ArrayQualifiedTypeReference) {", "+\t\tif (!(location instanceof ParameterizedQualifiedTypeReference)) {", "+\t\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference = (ArrayQualifiedTypeReference) location;", "+\t\t\tlong[] positions = arrayQualifiedTypeReference.sourcePositions;", "+\t\t\tend = (int) positions[positions.length - 1];", "+\t\t}", "+\t} else if (location instanceof ArrayTypeReference) {", "+\t\tif (!(location instanceof ParameterizedSingleTypeReference)) {", "+\t\t\tArrayTypeReference arrayTypeReference = (ArrayTypeReference) location;", "+\t\t\tend = arrayTypeReference.originalSourceEnd;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3468ae95ec2899f6dd9b190c1b57956", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic boolean isDeclaration()", "signatureAfterChange": "  \tpublic boolean isDeclaration()", "diff": ["+\t\tif (parent instanceof EnumDeclaration) {", "+\t\t\t// could only be the name of the enum type", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (parent instanceof EnumConstantDeclaration) {", "+\t\t\t// could only be the name of the enum constant", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (parent instanceof EnhancedForStatement) {", "+\t\t\tEnhancedForStatement p = (EnhancedForStatement) parent;", "+\t\t\t// make sure its the name of the loop variable (not the initializer)", "+\t\t\treturn (p.getName() == this);", "+\t\t}", "+\t\tif (parent instanceof TypeParameter) {", "+\t\t\t// could only be the type variable name", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (parent instanceof AnnotationTypeDeclaration) {", "+\t\t\t// could only be the name of the annotation type", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (parent instanceof AnnotationTypeMemberDeclaration) {", "+\t\t\tAnnotationTypeMemberDeclaration p = (AnnotationTypeMemberDeclaration) parent;", "+\t\t\t// make sure its the name of the member (not the default)", "+\t\t\treturn (p.getName() == this);", "+\t\t}"]}], "num": 19170}
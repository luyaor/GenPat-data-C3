{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5fa80b1dfab3be79806b41d8ccfae5b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d31608e2e5d9c2457952ab8f8ec23a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocArgumentExpression.java", "commitBeforeChange": "a0a4fc04d251f660d926a9aa75cac417e8668b19", "commitAfterChange": "6c179d1611035fa643a61ef0b82b25ce29580a3a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "-\t\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\t\treturn null; // already reported error", "-\t\t\t}", "-\t\t}", "-\t\telse {", "-\t\t\tif (this.argument != null) {", "-\t\t\t\tTypeReference typeRef = this.argument.type;", "-\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\tthis.resolvedType = typeRef.getTypeBinding(scope);", "-\t\t\t\t\ttypeRef.resolvedType = this.resolvedType;", "-\t\t\t\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\t\t\t\tscope.problemReporter().javadocInvalidType(typeRef, this.resolvedType, scope.getDeclarationModifiers());", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (isTypeUseDeprecated(this.resolvedType, scope)) {", "-\t\t\t\t\t\tscope.problemReporter().javadocDeprecatedType(this.resolvedType, typeRef, scope.getDeclarationModifiers());", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\t// check raw type", "-\t\t\t\t\tif (this.resolvedType.isArrayType()) {", "-\t\t\t\t\t    TypeBinding leafComponentType = this.resolvedType.leafComponentType();", "-\t\t\t\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t\t\t\t        this.resolvedType = scope.createArrayType(scope.environment().createRawType((ReferenceBinding)leafComponentType, null), this.resolvedType.dimensions());", "-\t\t\t\t\t    }", "-\t\t\t\t\t} else if (this.resolvedType.isGenericType()) {", "-\t\t\t\t        this.resolvedType = scope.environment().createRawType((ReferenceBinding)this.resolvedType, null); // raw type", "-\t\t\t\t\t}\t\t", "-\t\t\t\t\treturn this.resolvedType;", "+\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "+\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "+", "+\t\tif (this.argument != null) {", "+\t\t\tTypeReference typeRef = this.argument.type;", "+\t\t\tif (typeRef != null) {", "+\t\t\t\tthis.resolvedType = typeRef.getTypeBinding(scope);", "+\t\t\t\ttypeRef.resolvedType = this.resolvedType;", "+\t\t\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t\t\t\tscope.problemReporter().javadocInvalidType(typeRef, this.resolvedType, scope.getDeclarationModifiers());", "+\t\t\t\t\treturn null;", "+\t\t\t\tif (isTypeUseDeprecated(this.resolvedType, scope)) {", "+\t\t\t\t\tscope.problemReporter().javadocDeprecatedType(this.resolvedType, typeRef, scope.getDeclarationModifiers());", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\treturn this.resolvedType = scope.convertToRawType(this.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f39fd246e8261f7bc26812689a30e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public TypeBinding resolveType(ClassScope classScope)", "signatureAfterChange": " public TypeBinding resolveType(ClassScope classScope)", "diff": ["+}", "+public TypeBinding resolveType(ClassScope classScope) {", "+\t// handle the error here", "+\tthis.constant = NotAConstant;", "+\tTypeBinding type;", "+\tif ((type = this.resolvedType) != null) { // is a shared type reference which was already resolved", "+\t\tif (!type.isValidBinding())", "+\t\t\treturn null; // already reported error", "+\t} else {", "+\t\ttype = this.resolvedType = getTypeBinding(classScope);", "+\t\tif (type == null)", "+\t\t\treturn null; // detected cycle while resolving hierarchy\t\t", "+\t\tif (!type.isValidBinding()) {", "+\t\t\treportInvalidType(classScope);", "+\t\t\treturn null;", "+\t\t}", "+\t\tif (isTypeUseDeprecated(type, classScope)) {", "+\t\t\treportDeprecatedType(classScope);", "+\t\t}", "+\t\t// check raw type", "+\t\tif (type.isArrayType()) {", "+\t\t    TypeBinding leafComponentType = type.leafComponentType();", "+\t\t    if (leafComponentType.isGenericType()) { // raw type", "+\t\t        return this.resolvedType = classScope.createArrayType(classScope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "+\t\t    }", "+\t\t} else if (type.isGenericType()) {", "+\t        return this.resolvedType = classScope.environment().createRawType((ReferenceBinding)type, null); // raw type", "+\t\t}\t\t", "+", "-public TypeBinding resolveType(ClassScope classScope) {", "-\t// handle the error here", "-\tthis.constant = NotAConstant;", "-\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "-\t\tif (!this.resolvedType.isValidBinding())", "-\t\t\treturn null; // already reported error", "-\t} else {", "-\t\tthis.resolvedType = getTypeBinding(classScope);", "-\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\treportInvalidType(classScope);", "-\t\t\treturn null;", "-\t\t}", "-\t\tif (isTypeUseDeprecated(this.resolvedType, classScope)) {", "-\t\t\treportDeprecatedType(classScope);", "-\t\t}", "-\t}", "-\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f81de3b23ec1528d9515bd75aeb122", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public TypeBinding resolveType(ClassScope classScope)", "signatureAfterChange": " public TypeBinding resolveType(ClassScope classScope)", "diff": ["-\tTypeBinding type;", "-\tif ((type = this.resolvedType) != null) { // is a shared type reference which was already resolved", "-\t\tif (!type.isValidBinding())", "-\t\t\treturn null; // already reported error", "-\t} else {", "-\t\ttype = this.resolvedType = getTypeBinding(classScope);", "-\t\tif (type == null)", "-\t\t\treturn null; // detected cycle while resolving hierarchy\t", "-\t\tif (!type.isValidBinding()) {", "-\t\t\treportInvalidType(classScope);", "-\t\t\treturn null;", "-\t\t}", "-\t\tif (isTypeUseDeprecated(type, classScope)) {", "-\t\t\treportDeprecatedType(classScope);", "-\t\t}", "-\t\t// check raw type", "-\t\tif (type.isArrayType()) {", "-\t\t    TypeBinding leafComponentType = type.leafComponentType();", "-\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t        return this.resolvedType = classScope.createArrayType(classScope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "-\t\t    }", "-\t\t} else if (type.isGenericType()) {", "-\t        return this.resolvedType = classScope.environment().createRawType((ReferenceBinding)type, null); // raw type", "-\t\t}", "+\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "+\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "+", "+\tthis.resolvedType = getTypeBinding(classScope);", "+\tif (this.resolvedType == null)", "+\t\treturn null; // detected cycle while resolving hierarchy\t", "+\tif (!this.resolvedType.isValidBinding()) {", "+\t\treportInvalidType(classScope);", "+\t\treturn null;", "-\treturn this.resolvedType;", "+\tif (isTypeUseDeprecated(this.resolvedType, classScope))", "+\t\treportDeprecatedType(classScope);", "+\treturn this.resolvedType = convertToRawType(this.resolvedType, classScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4df5079d63bbb04a06cda03c774f739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "b2f2db5aca4b5592810cb876316dc430449c50f8", "commitAfterChange": "423363127bfe75baf23fa282b4893f61b836a936", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\tTypeBinding type;", "-\tif ((type = this.resolvedType) != null) { // is a shared type reference which was already resolved", "-\t\tif (!type.isValidBinding())", "-\t\t\treturn null; // already reported error", "-\t} else {", "-\t\ttype = this.resolvedType = getTypeBinding(blockScope);", "-\t\tif (type == null)", "-\t\t\treturn null; // detected cycle while resolving hierarchy\t", "-\t\tif (!type.isValidBinding()) {", "-\t\t\treportInvalidType(blockScope);", "-\t\t\treturn null;", "-\t\t}", "-\t\tif (isTypeUseDeprecated(type, blockScope)) {", "-\t\t\treportDeprecatedType(blockScope);", "-\t\t}", "-\t\t// check raw type", "-\t\tif (type.isArrayType()) {", "-\t\t    TypeBinding leafComponentType = type.leafComponentType();", "-\t\t    if (leafComponentType.isGenericType()) { // raw type", "-\t\t        return this.resolvedType = blockScope.createArrayType(blockScope.environment().createRawType((ReferenceBinding)leafComponentType, null), type.dimensions());", "-\t\t    }", "-\t\t} else if (type.isGenericType()) {", "-\t        return this.resolvedType = blockScope.environment().createRawType((ReferenceBinding)type, null); // raw type", "-\t\t}", "+\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "+\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "+", "+\tthis.resolvedType = getTypeBinding(blockScope);", "+\tif (this.resolvedType == null)", "+\t\treturn null; // detected cycle while resolving hierarchy\t", "+\tif (!this.resolvedType.isValidBinding()) {", "+\t\treportInvalidType(blockScope);", "+\t\treturn null;", "-\treturn this.resolvedType;", "+\tif (isTypeUseDeprecated(this.resolvedType, blockScope))", "+\t\treportDeprecatedType(blockScope);", "+\treturn this.resolvedType = convertToRawType(this.resolvedType, blockScope);"]}], "num": 19291}
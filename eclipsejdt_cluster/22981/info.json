{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f85885073f1807da76c283346dca781f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3049740720c6a41d244453e573c0e1fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsClearBlankLinesTests.java", "commitBeforeChange": "c06f9af8601b57efefc26206714b09ea6019dd0e", "commitAfterChange": "5ea115fe8e6cecfd274e1f47f1ed0f1d3b207a51", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  DefaultCodeFormatter codeFormatter()", "signatureAfterChange": "  DefaultCodeFormatter codeFormatter()", "diff": ["-\tDefaultCodeFormatterOptions preferences = DefaultCodeFormatterOptions.getEclipseDefaultSettings();", "-\tpreferences.comment_clear_blank_lines_in_block_comment = true;", "-\tpreferences.comment_clear_blank_lines_in_javadoc_comment = true;", "-\tpreferences.comment_format_header = true;", "-\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);", "+\tthis.preferences.comment_clear_blank_lines_in_block_comment = true;", "+\tthis.preferences.comment_clear_blank_lines_in_javadoc_comment = true;", "+\tthis.preferences.comment_format_header = true;", "+\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(this.preferences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba786ca1017427585b44797fe019e38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "8761bc78bc4b10c860ffd0abaa11fe6e4409f4a7", "commitAfterChange": "e638bcfa6ede2617a8de404af4af8024502bc348", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\tLookupEnvironment environment = scope.environment();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tenvironment.getNonNullAnnotationName());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.environment.getNonNullAnnotationName());", "-\t\t\t\t\tannotationName = environment.getNonNullAnnotationName();", "+\t\t\t\t\tannotationName = this.environment.getNonNullAnnotationName();", "-\t\t\t\t\tannotationName = environment.getNullableAnnotationName();", "+\t\t\t\t\tannotationName = this.environment.getNullableAnnotationName();", "-\t\t\t\t\t\t\t\t(inheritedNonNullNess == null) ? null : environment.getNullableAnnotationName());", "+\t\t\t\t\t\t\t\t(inheritedNonNullNess == null) ? null : this.environment.getNullableAnnotationName());"]}], "num": 22981}
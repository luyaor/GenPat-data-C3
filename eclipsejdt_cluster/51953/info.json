{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "444573534fda81b300e45eb732f33146", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b10f79fa3f68ff75caf8ceb4e3a6d91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "d18d748d27f9a5a2b0700c50117c5b71b5a69a2c", "commitAfterChange": "23d2c7d5ecd0932e580dd57beaa6827dafdaddc8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["+\t\tboolean hasLibFolder = false;", "+\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\tif (!org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(rawEntry.getPath().lastSegment())) {", "+\t\t\t\t\t\thasLibFolder = true;", "+\t\t\t\t\t}", "-\t\tif (!hasSource) allowNestingInOutput = true; // if no source, then allowed", "+\t\tif (!hasSource && !hasLibFolder) allowNestingInOutput = true; // if no source and no lib folder, then allowed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46a0b4dc5cd90e3035bea6c3fc512dee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "8115b94a15102913234fbbe463796f613813039a", "commitAfterChange": "b8f3bfdacc5a2270c01f7e0bbb60d6fde20b1569", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void run()", "signatureAfterChange": "\r \tpublic void run()", "diff": ["-\t\twhile (true) {\r", "-\t\t\ttry {\r", "-\t\t\t\tIJob job;\r", "-\t\t\t\tif ((job = currentJob()) == null) {\r", "-\t\t\t\t\tif (idlingStart < 0)\r", "-\t\t\t\t\t\tidlingStart = System.currentTimeMillis();\r", "-\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);\r", "-\t\t\t\t\tThread.currentThread().sleep(500);\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tidlingStart = -1;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (VERBOSE) {\r", "-\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "-\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "+\t\ttry {\r", "+\t\t\twhile (true) {\r", "-\t\t\t\t\texecuting = true;\r", "-\t\t\t\t\t/*boolean status = */job.execute(null);\r", "-\t\t\t\t\t//if (status == FAILED) request(job);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\texecuting = false;\r", "+\t\t\t\t\tIJob job;\r", "+\t\t\t\t\tif ((job = currentJob()) == null) {\r", "+\t\t\t\t\t\tif (idlingStart < 0)\r", "+\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();\r", "+\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);\r", "+\t\t\t\t\t\tThread.currentThread().sleep(500);\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tidlingStart = -1;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "-\t\t\t\t\tmoveToNextJob();\r", "-\t\t\t\t\tif (this.awaitingClients == 0) {\r", "-\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\texecuting = true;\r", "+\t\t\t\t\t\t/*boolean status = */job.execute(null);\r", "+\t\t\t\t\t\t//if (status == FAILED) request(job);\r", "+\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\texecuting = false;\r", "+\t\t\t\t\t\tif (VERBOSE) {\r", "+\t\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tmoveToNextJob();\r", "+\t\t\t\t\t\tif (this.awaitingClients == 0) {\r", "+\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t} catch (InterruptedException e) { // background indexing was interrupted\r", "-\t\t\t} catch (InterruptedException e) { // background indexing was interrupted\r", "+\t\t} catch (RuntimeException e) {\r", "+\t\t\t// log exception\r", "+\t\t\tJavaCore.getPlugin().getLog().log(\r", "+\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\tIJavaModelStatus.ERROR,\r", "+\t\t\t\t\te)\r", "+\t\t\t);\r", "+\t\t\t\r", "+\t\t\t// keep job manager alive\r", "+\t\t\tthis.discardJobs(null);\r", "+\t\t\tthis.thread = null;\r", "+\t\t\tthis.reset(); // this will fork a new thread\r", "+\t\t\tthrow e;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520041748e23342d0a5c6ae75dacbc54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "2ead4bdcbfe85e4d5b336d70f2ec655c30027212", "commitAfterChange": "f616e9e60854b9ecc305ec556fb6b4dc12ff00d6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\tthis.reset(); // this will fork a new thread", "-\t\t\t\tthrow e;", "+\t\t\t\tthis.reset(); // this will fork a new thread with no waiting jobs, some indexes will be inconsistent", "+\t\t\tthrow e;", "+\t\t} catch (Error e) {", "+\t\t\tif (this.thread != null && !(e instanceof ThreadDeath)) {", "+\t\t\t\t// log exception", "+\t\t\t\torg.eclipse.jdt.internal.core.Util.log(e, \"Background Indexer Crash Recovery\"); //$NON-NLS-1$", "+\t\t\t\t", "+\t\t\t\t// keep job manager alive", "+\t\t\t\tthis.discardJobs(null);", "+\t\t\t\tthis.thread = null;", "+\t\t\t\tthis.reset(); // this will fork a new thread with no waiting jobs, some indexes will be inconsistent", "+\t\t\t}", "+\t\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b18045fd59c9485ab8272f8547273c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1a0dc0ac3e33cbb594dc3b8ca78970e5922d2a33", "commitAfterChange": "a945fcd8cebafa62249918db0f5904366cbcf37e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic Expression convert(MessageSend expression)", "signatureAfterChange": "  \tpublic Expression convert(MessageSend expression)", "diff": ["-\t\t\tif (expression.receiver instanceof MessageSend) {", "-\t\t\t\tqualifier = convert((MessageSend) expression.receiver);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression receiver = expression.receiver;", "+\t\t\tif (receiver instanceof MessageSend) {", "+\t\t\t\tif ((receiver.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) != 0) {", "+\t\t\t\t\tqualifier = convertToParenthesizedExpression(receiver);", "+\t\t\t\t} else {", "+\t\t\t\t\tqualifier = convert((MessageSend) receiver);", "+\t\t\t\t}", "-\t\t\t\tqualifier = convert(expression.receiver);", "+\t\t\t\tqualifier = convert(receiver);", "-\t\t\t\trecordNodes(qualifier, expression.receiver);", "+\t\t\t\trecordNodes(qualifier, receiver);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e1240ed419cd744dee2af2f62693c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "487e87efd8ee25ac280d99fbe2a7407018ec4af0", "commitAfterChange": "cb36a2c1d2807d188865d619946aab1b90306a44", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["+\t\t} catch (ZipError e) { // merge with the code above using '|' when we move to 1.7", "+\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\torg.eclipse.jdt.internal.core.util.Util.verbose(\"-> failed to index \" + this.containerPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t\tthis.manager.removeIndex(this.containerPath);", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7f13506b9ac508ba2c10a8cc2eff5ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/Index.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic void initialize() throws IOException", "signatureAfterChange": "\r \tpublic void initialize() throws IOException", "diff": ["-\t\t\t\tmainIndexInput = null;\r", "-\t\t\t\tthrow e;\r", "+\t\t\t\tif (org.eclipse.jdt.internal.core.search.Util.bind(\"exception.wrongFormat\").equals(e.getMessage())) { //$NON-NLS-1$\r", "+\t\t\t\t\tInMemoryIndex mainIndex= new InMemoryIndex();\t\t\t\r", "+\t\t\t\t\tIndexOutput mainIndexOutput= new BlocksIndexOutput(indexFile);\r", "+\t\t\t\t\tmainIndex.save(mainIndexOutput);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tmainIndexInput = null;\r", "+\t\t\t\t\tthrow e;\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0479cd7c7fb0eba124310f653144599", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "26de20ae619c91a55a35147a34aba32ab3111d61", "commitAfterChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy)", "signatureAfterChange": " \tprivate static boolean updateType(StringBuffer buf, char[] oldType, char[] newType, MergeStrategy mergeStrategy)", "diff": ["-\t\tSignatureWrapper oWrap = new SignatureWrapper(oldType, true, true); // may already contain annotations", "-\t\tSignatureWrapper nWrap = new SignatureWrapper(newType, true, true); // may already contain annotations", "-\t\tif (match(buf, oWrap, nWrap, 'L', false)", "-\t\t\t|| match(buf, oWrap, nWrap, 'T', false))", "-\t\t{", "-\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\tbuf.append(oWrap.nextName());", "-\t\t\tnWrap.nextName(); // skip", "-\t\t\tif (match(buf, oWrap, nWrap, '<', false)) {", "-\t\t\t\tdo {", "-\t\t\t\t\tint oStart = oWrap.start;", "-\t\t\t\t\tint nStart = nWrap.start;", "-\t\t\t\t\toWrap.computeEnd();", "-\t\t\t\t\tnWrap.computeEnd();", "-\t\t\t\t\tif (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))", "-\t\t\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\t\t} while (!match(buf, oWrap, nWrap, '>', false));", "+\t\ttry {", "+\t\t\tSignatureWrapper oWrap = new SignatureWrapper(oldType, true, true); // may already contain annotations", "+\t\t\tSignatureWrapper nWrap = new SignatureWrapper(newType, true, true); // may already contain annotations", "+\t\t\tif (match(buf, oWrap, nWrap, 'L', false)", "+\t\t\t\t|| match(buf, oWrap, nWrap, 'T', false))", "+\t\t\t{", "+\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\tbuf.append(oWrap.nextName());", "+\t\t\t\tnWrap.nextName(); // skip", "+\t\t\t\tif (match(buf, oWrap, nWrap, '<', false)) {", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\tint oStart = oWrap.start;", "+\t\t\t\t\t\tint nStart = nWrap.start;", "+\t\t\t\t\t\toWrap.computeEnd();", "+\t\t\t\t\t\tnWrap.computeEnd();", "+\t\t\t\t\t\tif (updateType(buf, oWrap.getFrom(oStart), nWrap.getFrom(nStart), mergeStrategy))", "+\t\t\t\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\t\t} while (!match(buf, oWrap, nWrap, '>', false));", "+\t\t\t\t}", "+\t\t\t\tmatch(buf, oWrap, nWrap, ';', true);", "+\t\t\t} else if (match(buf, oWrap, nWrap, '[', false)) {", "+\t\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "+\t\t\t\tupdateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);", "+\t\t\t} else if (match(buf, oWrap, nWrap, '*', false)", "+\t\t\t\t\t|| match(buf, oWrap, nWrap, '+', false)", "+\t\t\t\t\t|| match(buf, oWrap, nWrap, '-', false))", "+\t\t\t{", "+\t\t\t\treturn true; // annotation allowed after this (not included in oldType / newType)", "+\t\t\t} else {\t\t\t", "+\t\t\t\tbuf.append(oldType);", "-\t\t\tmatch(buf, oWrap, nWrap, ';', true);", "-\t\t} else if (match(buf, oWrap, nWrap, '[', false)) {", "-\t\t\tmergeAnnotation(buf, oWrap, nWrap, mergeStrategy);", "-\t\t\tupdateType(buf, oWrap.tail(), nWrap.tail(), mergeStrategy);", "-\t\t} else if (match(buf, oWrap, nWrap, '*', false)", "-\t\t\t\t|| match(buf, oWrap, nWrap, '+', false)", "-\t\t\t\t|| match(buf, oWrap, nWrap, '-', false))", "-\t\t{", "-\t\t\treturn true; // annotation allowed after this (not included in oldType / newType)", "-\t\t} else {\t\t\t", "-\t\t\tbuf.append(oldType);", "+\t\t} catch (ArrayIndexOutOfBoundsException aioobe) { // from several locations inside match() or mergeAnnotation().", "+\t\t\tStringBuilder msg = new StringBuilder(\"Structural mismatch between \").append(oldType).append(\" and \").append(newType); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tthrow new IllegalArgumentException(msg.toString(), aioobe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e65ba5b2f101fa0c42a6793d2b7e053e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "37b18fe3dec30aacdbf97606c4be5a6236865064", "commitAfterChange": "1bf86fe4326efd3891490b85eefffb1c336ab872", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate ASTNode internalCreateASTForKind()", "signatureAfterChange": " \tprivate ASTNode internalCreateASTForKind()", "diff": ["+\t\t\t\tExplicitConstructorCall constructorCall = constructorDeclaration.constructorCall;", "+\t\t\t\tif (constructorCall != null && constructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\tblock.statements().add(converter.convert(constructorCall));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec47294826a4e2f178190e1ca77ab1e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "e0a465676c8bf52f6a68296e739df7add44fe957", "commitAfterChange": "b37375a93ebc2cf6aa7a7ddfbf79766d2db89b53", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "signatureAfterChange": "   public NameEnvironmentAnswer findClass(String sourceFileWithoutExtension, String qualifiedPackageName, String qualifiedSourceFileWithoutExtension)", "diff": ["+\tString sourceFolderPath = this.sourceFolder.getFullPath().toString() + IPath.SEPARATOR;", "+\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isExcluded((sourceFolderPath + qualifiedSourceFileName).toCharArray(), this.fulInclusionPatternChars, this.fullExclusionPatternChars, false/*not a folder path*/))", "+\t\t\tcontinue;"]}], "num": 51953}
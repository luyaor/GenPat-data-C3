{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91cc11f6160c6225cd4723ed1819e4db", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1592471c74a18c14c200743ef6101d68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "commitAfterChange": "a460dab1d90a50493c5778c6266a2505ebe8bca6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tstatic int kindFromString(String kindStr)", "signatureAfterChange": " \tpublic boolean isCleaningOutputLocation() throws JavaModelException", "diff": ["-\t */", "-\tstatic int kindFromString(String kindStr) {", "-", "-\t\tif (kindStr.equalsIgnoreCase(\"prj\")) //$NON-NLS-1$", "-\t\t\treturn IClasspathEntry.CPE_PROJECT;", "-\t\tif (kindStr.equalsIgnoreCase(\"var\")) //$NON-NLS-1$", "-\t\t\treturn IClasspathEntry.CPE_VARIABLE;", "-\t\tif (kindStr.equalsIgnoreCase(\"con\")) //$NON-NLS-1$", "-\t\t\treturn IClasspathEntry.CPE_CONTAINER;", "-\t\tif (kindStr.equalsIgnoreCase(\"src\")) //$NON-NLS-1$", "-\t\t\treturn IClasspathEntry.CPE_SOURCE;", "-\t\tif (kindStr.equalsIgnoreCase(\"lib\")) //$NON-NLS-1$", "-\t\t\treturn IClasspathEntry.CPE_LIBRARY;", "-\t\tif (kindStr.equalsIgnoreCase(\"output\")) //$NON-NLS-1$", "-\t\t\treturn ClasspathEntry.K_OUTPUT;", "-\t\treturn -1;", "-\t}", "+\t */", "+\tpublic boolean isCleaningOutputLocation() throws JavaModelException {", "+", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = getJavaModelManager().getPerProjectInfoCheckExistence(fProject);", "+\t\tIClasspathEntry[] classpath = perProjectInfo.classpath;", "+\t\tif (classpath != null){ // if classpath is set, then flag is up to date", "+\t\t\treturn perProjectInfo.isCleaningOutputLocation;", "+\t\t}", "+\t\t// force to read classpath - will position clean mode (since flag is persisted in there)", "+\t\tthis.getRawClasspath();", "+\t\treturn perProjectInfo.isCleaningOutputLocation;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4001be3da19bf7d57bcfa34a16c301cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void setEnabled(boolean enable)", "signatureAfterChange": " \tprivate IFolder getFolderPreference()", "diff": ["-\t */", "-\tpublic void setEnabled(boolean enable)", "-\t{", "-\t\tif( AptPlugin.DEBUG ){", "-\t\t\tif( enable )", "-\t\t\t\tAptPlugin.trace(\"enabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t\telse", "-\t\t\t\tAptPlugin.trace(\"disabling APT for \" + _aptProject.getJavaProject().getElementName()); //$NON-NLS-1$", "-\t\t}", "-\t\tif( enable ) {", "-\t\t\tfinal String folderName = _generatedSourceFolderName;", "-\t\t\tif( AptPlugin.DEBUG ){", "-\t\t\t\tAptPlugin.trace(\"configure generated source folder to be \" + folderName ); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tconfigure(folderName, null);", "-\t\t} else{", "-\t\t\tfinal IFolder srcFolder = getFolder();", "-\t\t\t_aptProject.projectClean(true);", "-\t\t\tresetGeneratedSrcFolder(srcFolder, false);", "-\t\t}", "-\t}", "+\t */", "+\tprivate IFolder getFolderPreference() {", "+\t\tfinal String folderName = AptConfig.getGenSrcDir(_aptProject.getJavaProject());", "+\t\tIFolder folder = null;", "+\t\ttry {", "+\t\t\tfolder = _aptProject.getJavaProject().getProject().getFolder( folderName );", "+\t\t}", "+\t\tcatch (IllegalArgumentException e) {", "+\t\t\t// In the event that the folderName is invalid, just return null.", "+\t\t}", "+\t\treturn folder;"]}], "num": 31046}
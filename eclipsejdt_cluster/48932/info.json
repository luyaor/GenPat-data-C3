{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06b785f4c2944251e204ada0445f34c9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88f4c185a9a48f1a21dac91c8a4f2872", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void findIndexMatches(IIndex index, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope)", "signatureAfterChange": " public void findIndexMatches(IIndex index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["- */", "-public void findIndexMatches(IIndex index, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) {", "+}", "+public void findIndexMatches(IIndex index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\tif (scope.encloses(path))", "-\t\tacceptPath(requestor, path);", "+\tif (scope.encloses(path)) {", "+\t\tif (!requestor.acceptIndexMatch(path, this, participant)) ", "+\t\t\tthrow new OperationCanceledException();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27e1df871e7db22d6fd0ef3585c7253", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/pattern/InternalSearchPattern.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic InternalSearchPattern(int patternKind, int matchRule)", "signatureAfterChange": "  protected void acceptMatch(String documentName, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "diff": ["-", "-\tpublic InternalSearchPattern(int patternKind, int matchRule) {", "-\t\tthis.kind = patternKind;", "-\t\tthis.isCaseSensitive = (matchRule & SearchPattern.R_CASE_SENSITIVE) != 0;", "-\t\tthis.matchMode = matchRule - (this.isCaseSensitive ? SearchPattern.R_CASE_SENSITIVE : 0);", "-\t}", "+protected void acceptMatch(String documentName, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "+\tString documentPath = Index.convertPath(documentName);", "+\tif (scope.encloses(documentPath))", "+\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant)) ", "+\t\t\tthrow new OperationCanceledException();", "+}"]}], "num": 48932}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bba384cca5bd1e117c51e7fcb8d84015", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "258fc48e3d3146f0950d7ef319042c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "225ea5653541f8a56d524334d3e9e6bb7fa18aa6", "commitAfterChange": "e67d1dc6830648c83fdb0e0b83b59925424638d8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "+\tboolean analyseResources = currentScope.compilerOptions().analyseResourceLeaks;", "+\tif (analyseResources && CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "-\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "-\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo, false);", "+\t\t\tif (analyseResources) {", "+\t\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "+\t\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo, false);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73e908c298e09faffca610395746322", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/imports/OnDemandComputer.java", "commitBeforeChange": "001ca9d4537f1e1061869245f5c25686f203ddc4", "commitAfterChange": "d5ff27f4ac6567ec3845ab2a4c87d426d2f2009e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tCollection<OnDemandReduction> identifyPossibleReductions( \t\t\tSet<ImportName> imports, \t\t\tSet<ImportName> touchedContainers, \t\t\tSet<String> typeExplicitSimpleNames, \t\t\tSet<String> staticExplicitSimpleNames)", "signatureAfterChange": " \tCollection<OnDemandReduction> identifyPossibleReductions( \t\t\tSet<ImportName> imports, \t\t\tSet<ImportName> touchedContainers, \t\t\tSet<String> typeExplicitSimpleNames, \t\t\tSet<String> staticExplicitSimpleNames)", "diff": ["-\t\t\tCollection<ImportName> containerImports = containerAndImports.getValue();", "-\t\t\tSet<String> explicitSimpleNames =", "-\t\t\t\t\tcontainerOnDemand.isStatic ? staticExplicitSimpleNames : typeExplicitSimpleNames;", "+\t\t\t// Imports from an unnamed package should not be reduced (see bug 461863).", "+\t\t\tboolean isUnnamedPackage = containerOnDemand.containerName.isEmpty();", "-\t\t\tint onDemandThreshold =", "-\t\t\t\t\tcontainerOnDemand.isStatic ? this.staticOnDemandThreshold : this.typeOnDemandThreshold;", "+\t\t\tif (touchedContainers.contains(containerOnDemand) && !isUnnamedPackage) {", "+\t\t\t\tCollection<ImportName> containerImports = containerAndImports.getValue();", "-\t\t\tif (touchedContainers.contains(containerOnDemand)) {", "+\t\t\t\tSet<String> explicitSimpleNames =", "+\t\t\t\t\t\tcontainerOnDemand.isStatic ? staticExplicitSimpleNames : typeExplicitSimpleNames;", "+", "+\t\t\t\tint onDemandThreshold =", "+\t\t\t\t\t\tcontainerOnDemand.isStatic ? this.staticOnDemandThreshold : this.typeOnDemandThreshold;", "+"]}], "num": 8223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24eafe8e0c6468801f52c3c9c39e97f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ce68435abb087faa8a298e2eb842bbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \t \tprivate void computeExpectedTypesForMessageSendForInterface( \t\tReferenceBinding binding, \t\tchar[] selector, \t\tExpression[] arguments, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean isStatic)", "signatureAfterChange": " \t \tprivate void computeExpectedTypesForMessageSendForInterface( \t\tReferenceBinding binding, \t\tchar[] selector, \t\tExpression[] arguments, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean isStatic)", "diff": ["-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\t\tint lastPosition = 0;", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\tSimpleSet interfacesSeen = new SimpleSet(itsInterfaces.length * 2);", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding currentType = interfacesToVisit[i];", "+\t\t\t\tcomputeExpectedTypesForMessageSend(", "+\t\t\t\t\tcurrentType,", "+\t\t\t\t\tselector,", "+\t\t\t\t\targuments,", "+\t\t\t\t\treceiverType,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tinvocationSite,", "+\t\t\t\t\tisStatic);", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding currentType = interfaces[j];", "-", "-\t\t\t\t\tif (!interfacesSeen.includes(currentType)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(currentType);", "-", "-\t\t\t\t\t\tcomputeExpectedTypesForMessageSend(", "-\t\t\t\t\t\t\tcurrentType,", "-\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\targuments,", "-\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\tinvocationSite,", "-\t\t\t\t\t\t\tisStatic);", "-", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\t\tif ((itsInterfaces = currentType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6634deb9c0cedfee78df6f2d9526885d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "diff": ["-\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\t\tint lastPosition = 0;", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\torg.eclipse.jdt.internal.compiler.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.compiler.util.SimpleSet(itsInterfaces.length * 2);", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding currentType = interfacesToVisit[i];", "+\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);", "+\t\t\t\tif(methods != null) {", "+\t\t\t\t\tfor (int k = 0; k < methods.length; k++) {", "+\t\t\t\t\t\tif(methodBinding.areParametersEqual(methods[k]))", "+\t\t\t\t\t\t\treturn methods[k];", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding currentType = interfaces[j];", "-", "-\t\t\t\t\tif (!interfacesSeen.includes(currentType)) {", "-\t\t\t\t\t\t// if interface as not already been visited", "-\t\t\t\t\t\tinterfacesSeen.add(currentType);", "-", "-\t\t\t\t\t\tMethodBinding[] methods = currentType.getMethods(methodBinding.selector);", "-\t\t\t\t\t\tif(methods != null) {", "-\t\t\t\t\t\t\tfor (int k = 0; k < methods.length; k++) {", "-\t\t\t\t\t\t\t\tif(methodBinding.areParametersEqual(methods[k])) {", "-\t\t\t\t\t\t\t\t\treturn methods[k];", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-", "-\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "-\t\t\t\t\t\t}", "+\t\t\t\tif ((itsInterfaces = currentType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;"]}], "num": 55934}
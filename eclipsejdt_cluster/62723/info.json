{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bb2a7eec3d2af6881dfb94989261fac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "156dd1033b7c198c031004f44bf85e13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "4346eeab4fb87a337058c1b95511e337c016519f", "commitAfterChange": "cac0d7dbd7d720d6d9c74a57092b05502219bb37", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate TypeReference decodeType(String typeSignature, int length, int start, int end)", "signatureAfterChange": " \t \tprivate TypeReference decodeType(String typeSignature, int length, int start, int end)", "diff": ["-\t\t\t\t\t} else", "+\t\t\t\t\t} else if (this.namePos > nameFragmentStart) // handle name starting with a $ (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=91709)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba3b0d9510426e796e46c3dc22fa4db6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e9cb8a680609e97a11e6fc9b255fcb2043219aa", "commitAfterChange": "9892e22e3cda97844e8704bc9ff3072e4e043b62", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\t\t// Though, if field is static, then it can be still be proposed", "-\t\t\t\tif (!field.isStatic()) { ", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t} else if (isFieldBeingCompletedStatic) {", "-\t\t\t\t\t// static fields can't be proposed before they are actually declared if the ", "-\t\t\t\t\t// field currently being declared is also static", "-\t\t\t\t\tcontinue next;", "+\t\t\t\t// Though, if field is static or completion happens in Javadoc, then it can be still be proposed", "+\t\t\t\tif (this.assistNodeInJavadoc == 0) {", "+\t\t\t\t\tif (!field.isStatic()) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t} else if (isFieldBeingCompletedStatic) {", "+\t\t\t\t\t\t// static fields can't be proposed before they are actually declared if the", "+\t\t\t\t\t\t// field currently being declared is also static", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}"]}], "num": 62723}
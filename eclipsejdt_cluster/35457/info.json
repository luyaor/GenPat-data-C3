{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05973f006909024c25c2fe734b33e27a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a23eb78b14fc3278ca0eec203fd1844", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6165513415c99ad03f999b37c71bd02bae25f741", "commitAfterChange": "f63095af3c7deaeee47a62f089307467f872f35e", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " public void scannerError(Parser parser, String errorTokenName)", "signatureAfterChange": " public void scannerError(Parser parser, String errorTokenName)", "diff": ["-\telse", "-\t\tif (errorTokenName.equals(Scanner.INVALID_HEXA))", "-\t\t\tflag = IProblem.InvalidHexa;", "-\t\telse", "-\t\t\tif (errorTokenName.equals(Scanner.INVALID_OCTAL))", "-\t\t\t\tflag = IProblem.InvalidOctal;", "-\t\t\telse", "-\t\t\t\tif (errorTokenName.equals(Scanner.INVALID_CHARACTER_CONSTANT))", "-\t\t\t\t\tflag = IProblem.InvalidCharacterConstant;", "-\t\t\t\telse", "-\t\t\t\t\tif (errorTokenName.equals(Scanner.INVALID_ESCAPE))", "-\t\t\t\t\t\tflag = IProblem.InvalidEscape;", "-\t\t\t\t\telse", "-\t\t\t\t\t\tif (errorTokenName.equals(Scanner.INVALID_UNICODE_ESCAPE)){", "-\t\t\t\t\t\t\tflag = IProblem.InvalidUnicodeEscape;", "-\t\t\t\t\t\t\t// better locate the error message", "-\t\t\t\t\t\t\tchar[] source = scanner.source;", "-\t\t\t\t\t\t\tint checkPos = scanner.currentPosition - 1;", "-\t\t\t\t\t\t\tif (checkPos >= source.length) checkPos = source.length - 1;", "-\t\t\t\t\t\t\twhile (checkPos >= startPos){", "-\t\t\t\t\t\t\t\tif (source[checkPos] == '\\\\') break;", "-\t\t\t\t\t\t\t\tcheckPos --;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tstartPos = checkPos;", "-\t\t\t\t\t\t} else", "-\t\t\t\t\t\t\tif (errorTokenName.equals(Scanner.INVALID_FLOAT))", "-\t\t\t\t\t\t\t\tflag = IProblem.InvalidFloat;", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\tif (errorTokenName.equals(Scanner.UNTERMINATED_STRING))", "-\t\t\t\t\t\t\t\t\tflag = IProblem.UnterminatedString;", "-\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tif (errorTokenName.equals(Scanner.UNTERMINATED_COMMENT))", "-\t\t\t\t\t\t\t\t\t\tflag = IProblem.UnterminatedComment;", "-\t\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\t\tif (errorTokenName.equals(Scanner.INVALID_CHAR_IN_STRING))", "-\t\t\t\t\t\t\t\t\t\t\tflag = IProblem.UnterminatedString;", "+\telse if (errorTokenName.equals(Scanner.INVALID_HEXA))", "+\t\tflag = IProblem.InvalidHexa;", "+\telse if (errorTokenName.equals(Scanner.INVALID_OCTAL))", "+\t\tflag = IProblem.InvalidOctal;", "+\telse if (errorTokenName.equals(Scanner.INVALID_CHARACTER_CONSTANT))", "+\t\tflag = IProblem.InvalidCharacterConstant;", "+\telse if (errorTokenName.equals(Scanner.INVALID_ESCAPE))", "+\t\tflag = IProblem.InvalidEscape;", "+\telse if (errorTokenName.equals(Scanner.INVALID_UNICODE_ESCAPE)){", "+\t\tflag = IProblem.InvalidUnicodeEscape;", "+\t\t// better locate the error message", "+\t\tchar[] source = scanner.source;", "+\t\tint checkPos = scanner.currentPosition - 1;", "+\t\tif (checkPos >= source.length) checkPos = source.length - 1;", "+\t\twhile (checkPos >= startPos){", "+\t\t\tif (source[checkPos] == '\\\\') break;", "+\t\t\tcheckPos --;", "+\t\t}", "+\t\tstartPos = checkPos;", "+\t} else if (errorTokenName.equals(Scanner.INVALID_FLOAT))", "+\t\tflag = IProblem.InvalidFloat;", "+\telse if (errorTokenName.equals(Scanner.UNTERMINATED_STRING))", "+\t\tflag = IProblem.UnterminatedString;", "+\telse if (errorTokenName.equals(Scanner.UNTERMINATED_COMMENT))", "+\t\tflag = IProblem.UnterminatedComment;", "+\telse if (errorTokenName.equals(Scanner.INVALID_CHAR_IN_STRING))", "+\t\tflag = IProblem.UnterminatedString;", "+\telse if (errorTokenName.equals(Scanner.INVALID_DIGIT))", "+\t\tflag = IProblem.InvalidDigit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd0ae6a7e00bf98d7c4e7b5e7cf4bec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "726a798d36524f8c9a905565a81f0a3797b5162f", "commitAfterChange": "e925e4f453288f04c2f64d6eaf5afcd7f24f7bf6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\tif (signature.equals(Signature.SIG_INT)) {", "-\t\tconstant = new Integer(constantSource);", "-\t} else if (signature.equals(Signature.SIG_SHORT)) {", "-\t\tconstant = new Short(constantSource);", "-\t} else if (signature.equals(Signature.SIG_BYTE)) {", "-\t\tconstant = new Byte(constantSource);", "-\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "-\t\tconstant = Boolean.valueOf(constantSource);", "-\t} else if (signature.equals(Signature.SIG_CHAR)) {", "-\t\tif (constantSourceChars.length != 3) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tconstant = new Character(constantSourceChars[1]);", "-\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "-\t\tconstant = new Double(constantSource);", "-\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "-\t\tconstant = new Float(constantSource);", "-\t} else if (signature.equals(Signature.SIG_LONG)) {", "-\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "-\t\t\tif (index != -1) {", "-\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "-\t\t\t} else {", "-\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\ttry {", "+\t\tif (signature.equals(Signature.SIG_INT)) {", "+\t\t\tconstant = new Integer(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_SHORT)) {", "+\t\t\tconstant = new Short(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_BYTE)) {", "+\t\t\tconstant = new Byte(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_BOOLEAN)) {", "+\t\t\tconstant = Boolean.valueOf(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_CHAR)) {", "+\t\t\tif (constantSourceChars.length != 3) {", "+\t\t\t\treturn null;", "-\t\t} else {", "-\t\t\tconstant = new Long(constantSource);", "+\t\t\tconstant = new Character(constantSourceChars[1]);", "+\t\t} else if (signature.equals(Signature.SIG_DOUBLE)) {", "+\t\t\tconstant = new Double(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_FLOAT)) {", "+\t\t\tconstant = new Float(constantSource);", "+\t\t} else if (signature.equals(Signature.SIG_LONG)) {", "+\t\t\tif (constantSource.endsWith(\"L\") || constantSource.endsWith(\"l\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tint index = constantSource.lastIndexOf(\"L\");//$NON-NLS-1$", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tconstant = new Long(constantSource.substring(0, index));", "+\t\t\t\t} else {", "+\t\t\t\t\tconstant = new Long(constantSource.substring(0, constantSource.lastIndexOf(\"l\")));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tconstant = new Long(constantSource);", "+\t\t\t}", "+\t\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "+\t\t\tconstant = constantSource;", "-\t} else if (signature.equals(\"QString;\")) {//$NON-NLS-1$", "-\t\tconstant = constantSource;", "+\t} catch (NumberFormatException e) {", "+\t\t// not a parsable constant", "+\t\treturn null;"]}], "num": 35457}
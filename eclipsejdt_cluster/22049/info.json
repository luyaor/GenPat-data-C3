{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b090257a4f97af4b731c181c8b8522a4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034ee87de836b2a8f04b7abe57ff56f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}\t\t\t    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2d4a3951f8c1215c76b4e13fc74d2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ReferenceBinding declaringClass, MethodBinding originalMethod, char[][] alternateParamaterNames, final LookupEnvironment environment)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2c64418caa01bf0b53ab32e9b456ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}\t\t\t    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebe0317a34f506fc671ffee50c86bcdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["+\t\tcheckMissingType: {", "+\t\t\tif ((this.tagBits & TagBits.HasMissingType) != 0) ", "+\t\t\t\tbreak checkMissingType;", "+\t\t\tif ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\tbreak checkMissingType;", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.parameters.length; i < max; i++) {", "+\t\t\t\tif ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0, max = this.thrownExceptions.length; i < max; i++) {", "+\t\t\t\tif ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tthis.tagBits |=  TagBits.HasMissingType;", "+\t\t\t\t\tbreak checkMissingType;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t\t}"]}], "num": 22049}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bdd11d27098b45cd8439a15397b22bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "340e05c78cba8f8d9015118bae45317f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "e9325d403afb7057e34332564d229e812fdc64cb", "commitAfterChange": "b06653aabe96c99d4e2ae2d1cfbb284b89a81675", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tint nextToken()", "signatureAfterChange": " \t \tint nextToken()", "diff": ["+\t\t\t\tcase '#':", "+\t\t\t\t\tthis.token = LOCAL_VAR;", "+\t\t\t\t\treturn this.token;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase METHOD:", "+\t\t\t\t\t\tcase LOCAL_VAR:", "+\t\t\t\t\t\t\tthis.token = LOCAL_VAR;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4850677c449be8c7cc2fc222c7fbaea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src-annotations/org/eclipse/jdt/apt/tests/annotations/readannotation/ReadAnnotationProcessor.java", "commitBeforeChange": "4f3cb4506b570faea11a184c16ddcb866109910f", "commitAfterChange": "792a8c6c3e374444dc583ac6a4c04af5f3cf356d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void process()", "signatureAfterChange": "  \tpublic void process()", "diff": ["-\t{\t", "+\t{", "-\t\ttry{\t\t\t", "-\t\t\tTypeDeclaration typeDecl = _env.getTypeDeclaration(\"question.AnnotationTest\");\t\t", "+\t\ttry{", "+\t\t\tTypeDeclaration typeDecl = _env.getTypeDeclaration(\"question.AnnotationTest\");", "-\t\t\t\tassertAnnotation(expectedPkgAnnos, typeDecl.getPackage().getAnnotationMirrors() );\t\t\t\t", "+\t\t\t\tassertAnnotation(expectedPkgAnnos, typeDecl.getPackage().getAnnotationMirrors() );", "-\t\t\t\t", "+", "-\t\t\t\t", "+", "-\t\t\t\tassertAnnotation(expectedTypeAnnos, typeDecl.getAnnotationMirrors());\t", "-\t\t\t\t", "+\t\t\t\tassertAnnotation(expectedTypeAnnos, typeDecl.getAnnotationMirrors());", "+", "-\t\t\t\t", "+", "-\t\t\t\t\tfinal String name = \"field\" + counter;\t\t\t\t", "-\t\t\t\t\t", "+\t\t\t\t\tfinal String name = \"field\" + counter;", "+", "-\t\t\t\t\tswitch(counter){\t\t\t\t", "-\t\t\t\t\tcase 0:\t\t", "+\t\t\t\t\tswitch(counter){", "+\t\t\t\t\tcase 0:", "-\t\t\t\t\t\tbreak;\t", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t", "+", "-\t\t\t\t}\t\t\t", "-\t\t\t\t", "+\t\t\t\t}", "+", "-\t\t\t\tjunit.framework.TestCase.assertEquals(7, methodDecls.size());", "+\t\t\t\tjunit.framework.TestCase.assertEquals(8, methodDecls.size());", "-\t\t\t\t\tfinal String name = \"method\" + counter;\t\t\t\t", "-\t\t\t\t\t", "+\t\t\t\t\tfinal String name = \"method\" + counter;", "+", "-\t\t\t\t\t\t\t                      \"@Deprecated()\" };\t\t\t\t", "+\t\t\t\t\t\t\t                      \"@Deprecated()\" };", "+\t\t\t\t\t\texpected = NO_ANNOTATIONS;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 7:", "+\t\t\t\t\t\texpected = new String[] { \"@RTVisibleAnno(name = I'm \\\"special\\\": \t\\\\\\n, charValue = ', clazzes = {}, anno = @SimpleAnnotation(value = ))\" };", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t", "+", "-\t\t\t\t\t", "+", "-\t\t\t\t\t\tCollection<ParameterDeclaration> paramDecls = methodDecl.getParameters();\t\t\t\t", "+\t\t\t\t\t\tCollection<ParameterDeclaration> paramDecls = methodDecl.getParameters();", "-\t\t\t\t\t\t\tcase 2:\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tcase 2:", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      \"@RTInvisibleAnno(value = 2)\" };\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      \"@RTInvisibleAnno(value = 2)\" };", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\texpectedParamAnnotations = NO_ANNOTATIONS;\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\texpectedParamAnnotations = NO_ANNOTATIONS;", "-\t\t\t\t\t\t", "+", "-\t\tcatch( ComparisonFailure failure ){\t\t\t", "+\t\tcatch( ComparisonFailure failure ){"]}], "num": 67159}
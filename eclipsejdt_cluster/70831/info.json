{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f20f8a708fac5849c9a22c0867ed2101", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e135ab068f199719366d23aabe3e3109", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "15fa59f515a70009e6cbf51fc1f1e76b789612ec", "commitAfterChange": "3d6e00e97b57234862bfc1c608c23df209272cea", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["+\t\t\t\t|| (expression instanceof Assignment\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=287939", "+\t\t\t\t\t&& ((Assignment)expression).expression == this.assistNode", "+\t\t\t\t\t&& (this.expressionPtr > 0 && this.expressionStack[this.expressionPtr - 1] instanceof InstanceOfExpression))", "+\t\t\t\tif (this.assistNodeParent == null", "+\t\t\t\t\t&& expression instanceof Assignment) {", "+\t\t\t\t\tthis.assistNodeParent = detector.getCompletionNodeParent();", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (this.astPtr > -1 && this.astStack[this.astPtr] instanceof LocalDeclaration) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=287939", "+\t\t// To take care of:  if (a instance of X)  int i = a.|", "+\t\tLocalDeclaration local = (LocalDeclaration) this.astStack[this.astPtr];", "+\t\tif (local.initialization == this.assistNode) {", "+\t\t\tStatement enclosing = buildMoreCompletionEnclosingContext(local);", "+\t\t\tif (enclosing instanceof IfStatement) {", "+\t\t\t\tif (this.currentElement instanceof RecoveredBlock) {", "+\t\t\t\t\t// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead", "+\t\t\t\t\tRecoveredBlock recoveredBlock = (RecoveredBlock) this.currentElement;", "+\t\t\t\t\trecoveredBlock.statements[--recoveredBlock.statementCount] = null;", "+\t\t\t\t\tthis.currentElement = this.currentElement.add(enclosing, 0);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89c07733986ec7fdd60c96f78512809", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "058521030c68f15c9e89da9672ee6010c8a54c82", "commitAfterChange": "ad3ff878b34a7bd9fdf182c96c6fcce95bcbf6a2", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " protected void consumeNormalAnnotation(boolean isTypeAnnotation)", "signatureAfterChange": " protected void consumeNormalAnnotation(boolean isTypeAnnotation)", "diff": ["+\t\tif (this.expressionPtr >= 0 && this.expressionStack[this.expressionPtr] instanceof CompletionOnMarkerAnnotationName) {", "+\t\t\tAnnotation annotation = (Annotation)this.expressionStack[this.expressionPtr];", "+\t\t\tif(this.currentElement != null) {", "+\t\t\t\tannotationRecoveryCheckPoint(annotation.sourceStart, annotation.declarationSourceEnd);", "+\t\t\t\tif (this.currentElement instanceof RecoveredAnnotation) {", "+\t\t\t\t\tthis.currentElement = ((RecoveredAnnotation)this.currentElement).addAnnotation(annotation, this.identifierPtr);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\tif(!this.statementRecoveryActivated &&", "+\t\t\t\t\tthis.options.sourceLevel < ClassFileConstants.JDK1_5 &&", "+\t\t\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "+\t\t\t\tproblemReporter().invalidUsageOfAnnotation(annotation);", "+\t\t\t}", "+\t\t\tthis.recordStringLiterals = true;", "+\t\t\treturn;", "+\t\t}"]}], "num": 70831}
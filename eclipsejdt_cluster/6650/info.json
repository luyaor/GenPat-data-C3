{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e63a74a01cd8fb6d03dbd9acde29f11", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "615f31e64588cfcb692430d1e624469f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tpublic ReturnStatement convert(org.eclipse.jdt.internal.compiler.ast.ReturnStatement statement)", "signatureAfterChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression reference)", "diff": ["+", "+\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression reference) {", "+\t\tif (this.ast.apiLevel < AST.JLS8) {", "+\t\t\treturn createFakeNullLiteral(reference);", "+\t\t}", "+\t\tExpression result = null;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Expression lhs = reference.lhs;", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] arguments = reference.typeArguments;", "+\t\tint start = arguments != null && arguments.length > 0 ? arguments[arguments.length - 1].sourceEnd + 1 : reference.lhs.sourceEnd + 1;", "+\t\tfinal SimpleName name = new SimpleName(this.ast);", "+\t\tretrieveIdentifierAndSetPositions(start, reference.sourceEnd, name);", "+\t\tname.internalSetIdentifier(new String(reference.selector));", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(name, reference);", "+\t\t}", "+\t\tList typeArguments = null;", "+\t\tif (name.getStartPosition() < start) {// check for new ", "+\t\t\tretrieveInitAndSetPositions(start, reference.sourceEnd, name);", "+\t\t\tif (!name.getIdentifier().equals(\"<init>\")) { //$NON-NLS-1$", "+\t\t\t\tNullLiteral nullLiteral = new NullLiteral(this.ast);", "+\t\t\t\tnullLiteral.setFlags(nullLiteral.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\tresult = nullLiteral;", "+\t\t\t} else {", "+\t\t\t\tCreationReference creationReference = new CreationReference(this.ast);", "+\t\t\t\tcreationReference.setExpression(convert(lhs));", "+\t\t\t\ttypeArguments = creationReference.typeArguments();", "+\t\t\t\tresult = creationReference;", "+\t\t\t}", "+\t\t} else if (lhs instanceof TypeReference) {", "+\t\t\tTypeMethodReference typeMethodReference = new TypeMethodReference(this.ast);", "+\t\t\ttypeMethodReference.setType(convertType((TypeReference) lhs));", "+\t\t\ttypeMethodReference.setName(name);", "+\t\t\ttypeArguments = typeMethodReference.typeArguments();", "+\t\t\tresult = typeMethodReference;", "+\t\t} else if (lhs instanceof SuperReference) {", "+\t\t\tSuperMethodReference superMethodReference = new SuperMethodReference(this.ast);", "+\t\t\tsuperMethodReference.setName(name);", "+\t\t\ttypeArguments = superMethodReference.typeArguments();", "+\t\t\tresult = superMethodReference;", "+\t\t} else if (lhs instanceof QualifiedSuperReference) {", "+\t\t\tSuperMethodReference superMethodReference = new SuperMethodReference(this.ast);", "+\t\t\tsuperMethodReference.setQualifier(convert((QualifiedSuperReference)lhs));", "+\t\t\tsuperMethodReference.setName(name);", "+\t\t\ttypeArguments = superMethodReference.typeArguments();", "+\t\t\tresult = superMethodReference;", "+\t\t} else {", "+\t\t\tExpressionMethodReference expressionMethodReference = new ExpressionMethodReference(this.ast);", "+\t\t\texpressionMethodReference.setExpression(convert(lhs));", "+\t\t\ttypeArguments = expressionMethodReference.typeArguments();", "+\t\t\texpressionMethodReference.setName(name);", "+\t\t\tresult = expressionMethodReference;", "+\t\t}", "+\t\tif (typeArguments != null && arguments != null) {", "+\t\t\tint argumentsLength = arguments.length;", "+\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference argument = arguments[i];", "+\t\t\t\ttypeArguments.add(convertType(argument));", "+\t\t\t}", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(result, reference);", "+\t\t}", "+\t\tint sourceStart = reference.sourceStart; ", "+\t\tresult.setSourceRange(sourceStart, reference.sourceEnd - sourceStart + 1);", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed343c6a0f315fe05b669f772533c74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ThisReference reference)", "signatureAfterChange": " \t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration)", "diff": ["-\t", "-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.ThisReference reference) {", "-\t\tif (reference.isImplicitThis()) {", "-\t\t\t// There is no source associated with an implicit this", "-\t\t\treturn null;", "-\t\t} else if (reference instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference) reference);", "-\t\t} else if (reference instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference) reference);", "-\t\t}  else {", "-\t\t\tThisExpression thisExpression = this.ast.newThisExpression();", "-\t\t\tthisExpression.setSourceRange(reference.sourceStart, reference.sourceEnd - reference.sourceStart + 1);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(thisExpression, reference);", "-\t\t\t\trecordPendingThisExpressionScopeResolution(thisExpression);", "-\t\t\t}", "-\t\t\treturn thisExpression;", "-\t\t}", "-\t}", "+\t", "+\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration) {", "+\t\tcheckCanceled();", "+\t\tif (this.ast.apiLevel == AST.JLS2) {", "+\t\t\treturn null;", "+\t\t}", "+\t\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration2 = this.ast.newAnnotationTypeMemberDeclaration();", "+\t\tif ((annotationTypeMemberDeclaration.modifiers & CompilerModifiers.AccJustFlag) != 0) {", "+\t\t\tsetModifiers(annotationTypeMemberDeclaration2, annotationTypeMemberDeclaration);", "+\t\t}", "+\t\tSimpleName methodName = this.ast.newSimpleName(new String(annotationTypeMemberDeclaration.selector));", "+\t\tint start = annotationTypeMemberDeclaration.sourceStart;", "+\t\tint end = retrieveIdentifierEndPosition(start, annotationTypeMemberDeclaration.sourceEnd);", "+\t\tmethodName.setSourceRange(start, end - start + 1);", "+\t\tannotationTypeMemberDeclaration2.setName(methodName);", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeReference = annotationTypeMemberDeclaration.returnType;", "+\t\tif (typeReference != null) {", "+\t\t\tType returnType = convertType(typeReference);", "+\t\t\tsetTypeForMethodDeclaration(annotationTypeMemberDeclaration2, returnType, 0);", "+\t\t}", "+\t\tint declarationSourceStart = annotationTypeMemberDeclaration.declarationSourceStart;", "+\t\tint declarationSourceEnd = annotationTypeMemberDeclaration.bodyEnd;", "+\t\tannotationTypeMemberDeclaration2.setSourceRange(declarationSourceStart, declarationSourceEnd - declarationSourceStart + 1);", "+\t\t// The javadoc comment is now got from list store in compilation unit declaration", "+\t\tconvert(annotationTypeMemberDeclaration.javadoc, annotationTypeMemberDeclaration2);", "+\t\torg.eclipse.jdt.internal.compiler.ast.Expression memberValue = annotationTypeMemberDeclaration.memberValue;", "+\t\tif (memberValue != null) {", "+\t\t\tannotationTypeMemberDeclaration2.setDefault(convert(memberValue));", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(annotationTypeMemberDeclaration2, annotationTypeMemberDeclaration);", "+\t\t\trecordNodes(methodName, annotationTypeMemberDeclaration);", "+\t\t\tannotationTypeMemberDeclaration2.resolveBinding();", "+\t\t}", "+\t\treturn annotationTypeMemberDeclaration2;", "+\t}"]}], "num": 6650}
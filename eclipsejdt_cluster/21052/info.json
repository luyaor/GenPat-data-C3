{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69b80a7aeb4ea5244e23155aa46a3bf7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6144e55dfd2046a1a1bce2881e76ced5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "259ab729885d11212fdf6dd0b606b9f4d2fb1d41", "commitAfterChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\tint throwsTagsNbre = this.thrownExceptions == null ? 0 : this.thrownExceptions.length;", "+\t\tint throwsTagsLength = this.thrownExceptions == null ? 0 : this.thrownExceptions.length;", "-\t\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tfor (int i = 0; i < throwsTagsLength; i++) {", "-\t\tint thrownExceptionSize = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "-\t\tif (throwsTagsNbre == 0) {", "+\t\tint boundExceptionLength = (md.binding == null || md.binding.thrownExceptions == null) ? 0 : md.binding.thrownExceptions.length;", "+\t\tint thrownExceptionLength = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "+\t\tif (throwsTagsLength == 0) {", "-\t\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\t\tTypeReference typeRef = md.thrownExceptions[i];", "-\t\t\t\t\tif (typeRef.resolvedType != null && typeRef.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef, md.binding.modifiers);", "+\t\t\t\tfor (int i = 0; i < boundExceptionLength; i++) {", "+\t\t\t\t\tReferenceBinding exceptionBinding = md.binding.thrownExceptions[i];", "+\t\t\t\t\tif (exceptionBinding != null && exceptionBinding.isValidBinding()) { // flag only valid class name", "+\t\t\t\t\t\tint j=i;", "+\t\t\t\t\t\tboolean diff=true;", "+\t\t\t\t\t\twhile (j<thrownExceptionLength && (diff=exceptionBinding != md.thrownExceptions[j++].resolvedType));", "+\t\t\t\t\t\tif (!diff) {", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(md.thrownExceptions[j-1], md.binding.modifiers);", "+\t\t\t\t\t\t}", "-\t\t\tTypeReference[] typeReferences = new TypeReference[throwsTagsNbre];", "+\t\t\tTypeReference[] typeReferences = new TypeReference[throwsTagsLength];", "-\t\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tfor (int i = 0; i < throwsTagsLength; i++) {", "-\t\t\t\t\t// Verify duplicated tags", "-\t\t\t\t\t// Disable as we finally allow duplicate throws tags", "-\t\t\t\t\t// @see <a href=\"http://bugs.eclipse.org/bugs/show_bug.cgi?id=49491\">49491</a>", "-\t\t\t\t\t/*", "-\t\t\t\t\tboolean found = false;", "-\t\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "-\t\t\t\t\t\tif (typeReferences[j].resolvedType == typeBinding) {", "-\t\t\t\t\t\t\tmethScope.problemReporter().javadocDuplicatedThrowsClassName(typeRef, md.binding.modifiers);", "-\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\ttypeReferences[maxRef++] = typeRef;", "-\t\t\t\t\t}", "-\t\t\t\t\t*/", "-\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "+\t\t\tfor (int i = 0; i < boundExceptionLength; i++) {", "+\t\t\t\tReferenceBinding exceptionBinding = md.binding.thrownExceptions[i];", "-\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "+\t\t\t\t\t\tif (exceptionBinding == typeBinding) {", "-\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception, md.binding.modifiers);", "+\t\t\t\t\tif (exceptionBinding != null && exceptionBinding.isValidBinding()) { // flag only valid class name", "+\t\t\t\t\t\tint k=i;", "+\t\t\t\t\t\tboolean diff=true;", "+\t\t\t\t\t\twhile (k<thrownExceptionLength && (diff=exceptionBinding != md.thrownExceptions[k++].resolvedType));", "+\t\t\t\t\t\tif (!diff) {", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(md.thrownExceptions[k-1], md.binding.modifiers);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tfor (int j = 0; j<thrownExceptionSize && !compatible; j++) {", "+\t\t\t\t\tfor (int j = 0; j<thrownExceptionLength && !compatible; j++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea6e5a8b2788218fef24a31640da4a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "ed1175e5f3196c1368a9a2b98678b1f4969f4620", "commitAfterChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tint thrownExceptionSize = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "+\t\tint throwsTagsNbre = this.thrownExceptions == null ? 0 : this.thrownExceptions.length;", "+", "+\t\t// If no referenced method (field initializer for example) then report a problem for each param tag", "+\t\tif (md == null) {", "+\t\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "+\t\t\t\tint start = typeRef.sourceStart;", "+\t\t\t\tint end = typeRef.sourceEnd;", "+\t\t\t\tif (typeRef instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\tstart = ((JavadocQualifiedTypeReference) typeRef).tagSourceStart;", "+\t\t\t\t\tend = ((JavadocQualifiedTypeReference) typeRef).tagSourceEnd;", "+\t\t\t\t} else if (typeRef instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tstart = ((JavadocSingleTypeReference) typeRef).tagSourceStart;", "+\t\t\t\t\tend = ((JavadocSingleTypeReference) typeRef).tagSourceEnd;", "+\t\t\t\t}", "+\t\t\t\tmethScope.problemReporter().javadocUnexpectedTag(start, end);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tint thrownExceptionSize = md.thrownExceptions == null ? 0 : md.thrownExceptions.length;", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef);", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef, md.binding.modifiers);", "-\t\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\t\tTypeReference typeRef = this.thrownExceptions[i];", "-\t\t\t\t\t\t\tmethScope.problemReporter().javadocInvalidThrowsClassName(typeRef, true);", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocDuplicatedThrowsClassName(typeRef, md.binding.modifiers);", "-\t\t\tif (reportMissing) {", "-\t\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "-\t\t\t\t\tboolean found = false;", "-\t\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "-\t\t\t\t\t\tif (typeReferences[j] != null) {", "-\t\t\t\t\t\t\tTypeBinding typeBinding = typeReferences[j].resolvedType;", "-\t\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "-\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\ttypeReferences[j] = null;", "-\t\t\t\t\t\t\t}", "+\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "+\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "+\t\t\t\tboolean found = false;", "+\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "+\t\t\t\t\tif (typeReferences[j] != null) {", "+\t\t\t\t\t\tTypeBinding typeBinding = typeReferences[j].resolvedType;", "+\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\ttypeReferences[j] = null;", "-\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name", "-\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception);", "-\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!found && reportMissing) {", "+\t\t\t\t\tif (exception.resolvedType != null && exception.resolvedType.isValidBinding()) { // flag only valid class name", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception, md.binding.modifiers);", "-\t\t\t\t\t\tmethScope.problemReporter().javadocInvalidThrowsClassName(typeRef, false);", "+\t\t\t\t\t\tmethScope.problemReporter().javadocInvalidThrowsClassName(typeRef, md.binding.modifiers);"]}], "num": 21052}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6efb635405b14cacdf402245d15f55e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af4a3461af1da192014962fca830fd50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2a46362da18e1189829e578c276cfbf726376a20", "commitAfterChange": "948661c4cb198af70b598b9954e5159cb73d7234", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-\t\t\t\t} else if(answer.isBinaryType()) {\r", "-\t\t\t\t\tIBinaryType binaryType = answer.getBinaryType();\r", "-\t\t\t\t\tIBinaryMethod[] binaryMethods = binaryType.getMethods();\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tfor(int i = 0; i < binaryMethods.length ; i++){\r", "-\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[i];\r", "-\t\t\t\t\t\tString[] argTypeStringNames = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "-\t\t\t\t\t\tchar[][] argTypeNames = new char[argTypeStringNames.length][];\r", "-\t\t\t\t\t\tfor(int j = 0; j < argTypeStringNames.length; j++){\r", "-\t\t\t\t\t\t\targTypeNames[j] = argTypeStringNames[j].toCharArray();\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\r", "-\t\t\t\t\t\tif(argTypeNames != null &&\r", "-\t\t\t\t\t\t\tCharOperation.equals(method.selector,binaryMethod.getSelector()) &&\r", "-\t\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){\r", "-\t\t\t\t\t\t\tparameterNames = binaryMethod.getArgumentNames();\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "+\t\t\t\t} \r", "-\t\t// default parameters name\r", "-\t\tif(parameterNames == null) {\r", "-\t\t\tparameterNames = new char[length][];\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b047e75ae169ec3239be3a248d5bc555", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "commitAfterChange": "a1fcf7304168cfe820abddf9b4c29fb602e9a7cd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-//??\tif(bindingType.isBinaryBinding()) return null;\r", "-\t\t\r", "+\r", "+\t\t\r", "+\t\t\t\t} else if(answer.isBinaryType()) {\r", "+\t\t\t\t\tIBinaryType binaryType = answer.getBinaryType();\r", "+\t\t\t\t\tIBinaryMethod[] binaryMethods = binaryType.getMethods();\r", "+\t\t\t\t\t\r", "+\t\t\t\t\tfor(int i = 0; i < binaryMethods.length ; i++){\r", "+\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[i];\r", "+\t\t\t\t\t\tString[] argTypeStringNames = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "+\t\t\t\t\t\tchar[][] argTypeNames = new char[argTypeStringNames.length][];\r", "+\t\t\t\t\t\tfor(int j = 0; j < argTypeStringNames.length; j++){\r", "+\t\t\t\t\t\t\targTypeNames[j] = argTypeStringNames[j].toCharArray();\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif(argTypeNames != null &&\r", "+\t\t\t\t\t\t\tCharOperation.equals(method.selector,binaryMethod.getSelector()) &&\r", "+\t\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){\r", "+\t\t\t\t\t\t\tparameterNames = binaryMethod.getArgumentNames();\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\r", "-\r", "+\t\t// default parameters name\r", "+\t\tif(parameterNames == null) {\r", "+\t\t\tparameterNames = new char[length][];\r", "+\t\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r"]}], "num": 56160}
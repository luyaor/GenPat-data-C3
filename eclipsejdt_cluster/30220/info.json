{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5a84ed3379f4de593143c738a3a99fe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e8d00475e7a3979d2d00a20203c111", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "1621c26161ec3c3c873e4f7bb53cba6eb9386f82", "commitAfterChange": "bd694647e8272783b0f72f57db94ca8452555ef0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tif (isConsistent()) return;", "-\t", "-\t// create a new info and make it the current info", "-\t// (this will remove the info and its children just before storing the new infos)", "-\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\tboolean hadTemporaryCache = manager.hasTemporaryCache();", "-\ttry {", "-\t\tHashMap newElements = manager.getTemporaryCache();", "-\t\topenWhenClosed(newElements, monitor);", "-\t\tif (newElements.get(this) == null) {", "-\t\t\t// close any buffer that was opened for the new elements", "-\t\t\tIterator iterator = newElements.keySet().iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "-\t\t\t\tif (element instanceof Openable) {", "-\t\t\t\t\t((Openable)element).closeBuffer();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow newNotPresentException();", "-\t\t}", "-\t\tif (!hadTemporaryCache) {", "-\t\t\tmanager.putInfos(this, newElements);", "-\t\t}", "-\t} finally {", "-\t\tif (!hadTemporaryCache) {", "-\t\t\tmanager.resetTemporaryCache();", "-\t\t}", "-\t}", "+\t// only compilation units can be inconsistent", "+\t// other openables cannot be inconsistent so default is to do nothing"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d63f9562f28c1e4312a8fc331d978d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "52bcd11b027159dafabbf3cf6f9d177a13351775", "commitAfterChange": "ee8099c3ec35bd16fde9c1edf1cbb0dd9d874457", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic synchronized void cleanUp(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  \tpublic void cleanUp(IProgressMonitor monitor) throws CoreException", "diff": ["-\tpublic synchronized void cleanUp(IProgressMonitor monitor) throws CoreException {", "+\tpublic void cleanUp(IProgressMonitor monitor) throws CoreException {", "+\t\tArrayList toDelete = getFoldersToCleanUp(monitor);", "+\t\tif (toDelete == null)", "+\t\t\treturn;", "+\t\tfor (Iterator iterator = toDelete.iterator(); iterator.hasNext();) {", "+\t\t\tIFolder folder = (IFolder) iterator.next();", "+\t\t\tfolder.delete(true, monitor);", "+\t\t}", "+\t\tIProject project = getExternalFoldersProject();", "+\t\tif (project.isAccessible() && project.members().length == 1/*remaining member is .project*/)", "+\t\t\tproject.delete(true, monitor);", "+\t}", "-\t\t\treturn;", "-\t\t\t\tif (folder != null)", "-\t\t\t\t\tfolder.delete(true, monitor);", "-\t\tIProject project = getExternalFoldersProject();", "-\t\tif (project.isAccessible() && project.members().length == 1/*remaining member is .project*/)", "-\t\t\tproject.delete(true, monitor);"]}], "num": 30220}
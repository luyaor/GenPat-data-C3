{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc68d800dc608a5cc2ab0839743221c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57ca135b738985feffde9f0afeffaa9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void internalGenerateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": "  \tprivate void internalGenerateCode(ClassScope classScope, ClassFile classFile)", "diff": ["-\t\t\tint argSize = 0;", "-\t\t\tscope.computeLocalVariablePositions(// consider synthetic arguments if any", "-\t\t\targSize =", "-\t\t\t\tdeclaringClass.isNestedType()", "-\t\t\t\t\t? ((NestedTypeBinding) declaringClass).syntheticArgumentsOffset", "-\t\t\t\t\t: 1,", "-\t\t\t\tcodeStream);", "+\t\t\tint argSlotSize = 1; // this==aload0", "+\t\t\t", "+\t\t\tif (declaringClass.isNestedType()){", "+\t\t\t\tNestedTypeBinding nestedType = (NestedTypeBinding) declaringClass;", "+\t\t\t\tthis.scope.extraSyntheticArguments = nestedType.syntheticOuterLocalVariables();", "+\t\t\t\tscope.computeLocalVariablePositions(// consider synthetic arguments if any", "+\t\t\t\t\tnestedType.enclosingInstancesSlotSize + 1,", "+\t\t\t\t\tcodeStream);", "+\t\t\t\targSlotSize += nestedType.enclosingInstancesSlotSize;", "+\t\t\t\targSlotSize += nestedType.outerLocalVariablesSlotSize;", "+\t\t\t} else {", "+\t\t\t\tscope.computeLocalVariablePositions(1,  codeStream);", "+\t\t\t}", "+\t\t\t\t", "-\t\t\t\t\t\targSize += 2;", "+\t\t\t\t\t\targSlotSize += 2;", "-\t\t\t\t\t\targSize++;", "+\t\t\t\t\t\targSlotSize++;", "+\t\t\t", "-\t\t\tinitializerScope.computeLocalVariablePositions(argSize, codeStream); // offset by the argument size (since not linked to method scope)", "+\t\t\tinitializerScope.computeLocalVariablePositions(argSlotSize, codeStream); // offset by the argument size (since not linked to method scope)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7615128e095a74a58442a21149421e33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/DebugEvaluationSetup.java", "commitBeforeChange": "a1ef3c329d5aa2ced30d6367713d8ba098b0256e", "commitAfterChange": "9506ae8fe4d60e3a32e2b276be442609d9dc9308", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprotected void setUp()", "signatureAfterChange": "  \tprotected void setUp()", "diff": ["+\t\t\t\t\t((Connector.Argument)args.get(\"timeout\")).setValue(\"10000\");", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tSystem.out.println(\"Could not contact the VM at \" + launcher.getTargetAddress() + \":\" + debugPort + \". Retrying...\");", "+\t\t\t\t\t\tThread.sleep(100);", "+\t\t\t\t\t} catch (InterruptedException e2) {", "+\t\t\t\t\t}", "-\t\t\t\t\tSystem.out.println(\"Got exception: \" + e.getMessage());", "+\t\t\t\t\te.printStackTrace();", "-\t\t\t\tthrow new Error(\"Could not contact the VM\");", "+\t\t\t\tSystem.err.println(\"Could not contact the VM\");", "+\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d4344c8baf3bef9370968709648a4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testSearchAllTypeNames() throws CoreException", "signatureAfterChange": " \tpublic void testSearchAllTypeNames() throws CoreException", "diff": ["+\t\tIJavaSearchScope scope = SearchEngine.createWorkspaceScope();", "-\t\t\tthis.workspaceScope, ", "+\t\t\tscope, ", "+\t\tNumberFormat intFormat = NumberFormat.getIntegerInstance();", "+\t\tSystem.out.println(\"\tAll type names = \"+intFormat.format(requestor.count));", "+\t\tJavaSearchResultCollector resultCollector = new JavaSearchResultCollector();", "-\t\t\tcleanCategoryTableCache(true);", "+\t\t\tcleanCategoryTableCache(true, scope, resultCollector);", "-\t\t\t\t\tthis.workspaceScope, ", "+\t\t\t\t\tscope, ", "-", "-\t\t// Store counter", "-\t\tALL_TYPES_NAMES = requestor.count;"]}], "num": 26580}
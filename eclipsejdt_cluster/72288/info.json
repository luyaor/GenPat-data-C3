{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebb1751e3167951b168ff58dcfc4d3b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01dd2faee0236e9e0f2ad0d12bff6700", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunFormatterTests.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["+", "-\t\tClass[] testClasses = getAllTestClasses();", "-\t\tfor (int i = 0; i < testClasses.length; i++) {", "-\t\t\tClass testClass = testClasses[i];", "+\t\t// Store test classes with same \"JavaSearch\"project", "+\t\tFormatterJavadocTests.ALL_TEST_SUITES = new ArrayList(TEST_SUITES);", "+", "+\t\t// Get all classes", "+\t\tList allClasses = new ArrayList();", "+\t\tString type = System.getProperty(\"type\");", "+\t\tif (type == null || !type.equals(\"javadoc\")) {", "+\t\t\tallClasses.add(FormatterRegressionTests.class);", "+\t\t}", "+\t\tallClasses.add(CommentsTestSuite.class);", "+\t\tallClasses.addAll(TEST_SUITES);", "+", "+\t\t// Reset forgotten subsets of tests", "+\t\tTestCase.TESTS_PREFIX = null;", "+\t\tTestCase.TESTS_NAMES = null;", "+\t\tTestCase.TESTS_NUMBERS = null;", "+\t\tTestCase.TESTS_RANGE = null;", "+\t\tTestCase.RUN_ONLY_ID = null;", "+", "+\t\t// Add all tests suite of tests", "+\t\tfor (int i = 0, size = allClasses.size(); i < size; i++) {", "+\t\t\tClass testClass = (Class) allClasses.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09f1a2fba15159a2dbbc1b01760eb3ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "41321e271ce9d99e44edf867f5f75e8abc4a221f", "commitAfterChange": "61133b8c5e6da454f7cea747a5c83744e4b067c9", "methodNumberBeforeChange": 535, "methodNumberAfterChange": 536, "signatureBeforeChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "signatureAfterChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "diff": ["+}", "+\t// nonNullAnnotationName is not used in 1.8-mode", "+\tTypeBinding inheritedReturnType = inheritedMethod.returnType;", "+\tString[] arguments;", "+\tString[] argumentsShort;", "+\tif (this.options.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tStringBuilder returnType = new StringBuilder();", "+\t\treturnType.append('@').append(CharOperation.concatWith(nonNullAnnotationName, '.'));", "+\t\treturnType.append(' ').append(inheritedReturnType.readableName());", "+\t\targuments = new String[] { methodSignature.toString(), returnType.toString() };", "+\t\t", "+\t\treturnType = new StringBuilder();", "+\t\treturnType.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "+\t\treturnType.append(' ').append(inheritedReturnType.shortReadableName());", "+\t\targumentsShort = new String[] { shortSignature.toString(), returnType.toString() };", "+\t} else {", "+\t\targuments = new String[] { methodSignature.toString(), ", "+\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, false))};", "+\t\targumentsShort = new String[] { shortSignature.toString(),", "+\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, true))};", "+\t}", "-\t\tIProblem.IllegalReturnNullityRedefinition, ", "-\t\tnew String[] { methodSignature.toString(), CharOperation.toString(nonNullAnnotationName)},", "-\t\tnew String[] { shortSignature.toString(), new String(nonNullAnnotationName[nonNullAnnotationName.length-1])},", "-\t\tsourceStart,", "-\t\tmethodDecl.returnType.sourceEnd);", "+\t\t\tIProblem.IllegalReturnNullityRedefinition, ", "+\t\t\targuments,", "+\t\t\targumentsShort,", "+\t\t\tsourceStart,", "+\t\t\tmethodDecl.returnType.sourceEnd);"]}], "num": 72288}
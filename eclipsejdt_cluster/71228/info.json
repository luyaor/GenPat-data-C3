{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96e0f4fabf99c8ff6940b0ce43f42a10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d05db87b061053b207c5b04de48a5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected Map getCompilerOptions()", "signatureAfterChange": " protected Map getCompilerOptions()", "diff": ["-\t// Augment problem detection settings", "-\tprotected Map getCompilerOptions() {", "-\t\tMap defaultOptions = super.getCompilerOptions();", "-\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.WARNING);", "-\t\tdefaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.WARNING);", "-\t\treturn defaultOptions;", "-\t}", "+// Augment problem detection settings", "+protected Map getCompilerOptions() {", "+    Map defaultOptions = super.getCompilerOptions();", "+//    defaultOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.WARNING);", "+    defaultOptions.put(CompilerOptions.OPTION_ReportNullReference, CompilerOptions.ERROR);", "+//    defaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.WARNING);", "+    return defaultOptions;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "664f72a549228e4167171b04196e352d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test0061_method_call_guard()", "signatureAfterChange": " public void test0061_method_call_guard()", "diff": ["-\t// null analysis -- method call", "-\tpublic void test0061_method_call_guard() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(Object o) {\\n\" + ", "-\t\t\t\t\"    if (o == null) {};\\n\" + // quiet: we don't know anything", "-\t\t\t\t\"    o.toString();\\n\" +      // guards o from being null", "-\t\t\t\t\"    if (o == null) {};\\n\" + // complain", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tif (o == null) {};\\n\" + ", "-\t\t\t\"\t    ^\\n\" + ", "-\t\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}\t", "+// null analysis -- method call", "+public void test0061_method_call_guard() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o) {\\n\" + ", "+\t\t\t\"    o.toString();\\n\" +      // guards o from being null", "+\t\t\t\"    if (o == null) {};\\n\" + // complain", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {};\\n\" + ", "+\t\t\"\t    ^\\n\" + ", "+\t\t\"The variable o cannot be null; it was either set to a non-null value or assumed to be non-null when last used\\n\" + ", "+\t\t\"----------\\n\");", "+} "]}], "num": 71228}
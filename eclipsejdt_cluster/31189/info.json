{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "987d9d9b1d2a2be524a4624dab86b511", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8115d358dc712651421cb2b826a65ee2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/AllPerformanceTests.java", "commitBeforeChange": "dea180787931d8ee1f626772e59d44fa10c93411", "commitAfterChange": "b6e6b13ef7ecfc2948e12f097478c9541e12b4c6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\t// Cannot run performance tests if one of subset static fields is not null", "+\t\t// Display warning if one of subset static fields is not null", "-\t\tif (TestCase.TESTS_NAMES != null ||", "-\t\t\tTestCase.TESTS_PREFIX != null ||", "-\t\t\tTestCase.TESTS_NUMBERS != null ||", "-\t\t\tTestCase.TESTS_RANGE != null) {", "-\t\t\tSystem.err.println(\"Cannot run performance tests as there are defined subsets which may alter tests order!\");", "-\t\t\treturn perfSuite;", "+\t\tStringBuffer buffer = null;", "+\t\tif (TestCase.TESTS_NAMES != null) {", "+\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\tbuffer.append(\"\t\t+ TESTS_NAMES = new String[] { \");", "+\t\t\tint length = TestCase.TESTS_NAMES.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (i>0) buffer.append(',');", "+\t\t\t\tbuffer.append('\"');", "+\t\t\t\tbuffer.append(TestCase.TESTS_NAMES[i]);", "+\t\t\t\tbuffer.append('\"');", "+\t\t\t}", "+\t\t\tbuffer.append(\" };\\n\");", "+\t\t}", "+\t\tif (TestCase.TESTS_PREFIX != null) {", "+\t\t\tif (buffer == null) {", "+\t\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\t}", "+\t\t\tbuffer.append(\"\t\t+ TESTS_PREFIX = \");", "+\t\t\tbuffer.append('\"');", "+\t\t\tbuffer.append(TestCase.TESTS_PREFIX);", "+\t\t\tbuffer.append('\"');", "+\t\t\tbuffer.append(\";\\n\");", "+\t\t}", "+\t\tif (TestCase.TESTS_NUMBERS != null) {", "+\t\t\tif (buffer == null) {", "+\t\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\t}", "+\t\t\tbuffer.append(\"\t\t+ TESTS_NUMBERS = new int[] { \");", "+\t\t\tint length = TestCase.TESTS_NUMBERS.length;", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tif (i>0) buffer.append(',');", "+\t\t\t\tbuffer.append(TestCase.TESTS_NUMBERS[i]);", "+\t\t\t}", "+\t\t\tbuffer.append(\" };\\n\");", "+\t\t}", "+\t\tif (TestCase.TESTS_RANGE != null) {", "+\t\t\tif (buffer == null) {", "+\t\t\t\tbuffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\t\tbuffer.append(\"\t- following subset is still defined and may alter tests order:\\n\");", "+\t\t\t}", "+\t\t\tbuffer.append(\"\t\t+ TESTS_RANGE = new int[] { \");", "+\t\t\tbuffer.append(TestCase.TESTS_RANGE[0]);", "+\t\t\tbuffer.append(',');", "+\t\t\tbuffer.append(TestCase.TESTS_RANGE[1]);", "+\t\t\tbuffer.append(\";\\n\");", "+\t\t}", "+\t\t", "+\t\t// Verify VM memory arguments: should be -Xmx256M -Xms256M", "+\t\tNumberFormat floatFormat = NumberFormat.getNumberInstance();", "+\t\tfloatFormat.setMaximumFractionDigits(1);", "+\t\tlong maxMem = Runtime.getRuntime().maxMemory(); // -Xmx", "+\t\tboolean tooMuch = false;", "+\t\tif (maxMem < (MAX_MEM*0.98) || (tooMuch = maxMem > (MAX_MEM*1.02))) {", "+\t\t\tif (buffer == null) buffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\tbuffer.append(\"\t- \");", "+\t\t\tbuffer.append(tooMuch ? \"too much \" : \"not enough \");", "+\t\t\tbuffer.append(\"max memory allocated (\");", "+\t\t\tbuffer.append(floatFormat.format(((maxMem/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M)!\\n\");", "+\t\t\tbuffer.append(\"\t\t=> -Xmx\");", "+\t\t\tbuffer.append(floatFormat.format(((MAX_MEM/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M should have been specified.\\n\");", "+\t\t}", "+\t\tlong totalMem = Runtime.getRuntime().totalMemory(); // -Xms", "+\t\ttooMuch = false;", "+\t\tif (totalMem < (TOTAL_MEM*0.98)|| (tooMuch = totalMem > (TOTAL_MEM*1.02))) {", "+\t\t\tif (buffer == null) buffer = new StringBuffer(\"WARNING: Performance tests results may be invalid !!!\\n\");", "+\t\t\tbuffer.append(\"\t- \");", "+\t\t\tbuffer.append(tooMuch ? \"too much \" : \"not enough \");", "+\t\t\tbuffer.append(\"total memory allocated (\");", "+\t\t\tbuffer.append(floatFormat.format(((totalMem/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M)!\\n\");", "+\t\t\tbuffer.append(\"\t\t=> -Xms\");", "+\t\t\tbuffer.append(floatFormat.format(((MAX_MEM/1024.0)/1024.0)));", "+\t\t\tbuffer.append(\"M should have been specified.\\n\");", "+\t\t}", "+\t\t", "+\t\t// Display warning message if any", "+\t\tif (buffer != null) {", "+\t\t\tSystem.err.println(buffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7cdfca03e82dfc3d0c7a1c0bdac87c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t\tthis.indentationLevel = getNextIndentationLevel(firstColumn);", "+\t\tthis.indentationLevel = (this.column / this.tabLength) * this.tabLength;", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tboolean bufferHasTokens = false;", "-\t\t\t\tString msg = iie.getMessage();", "-\t\t\t\tif (msg == Scanner.INVALID_CHARACTER_CONSTANT) {", "-\t\t\t\t\tbuffer.append('\\'');", "-\t\t\t\t} else if (msg == Scanner.INVALID_CHAR_IN_STRING) {", "-\t\t\t\t\tbuffer.append('\"');", "-\t\t\t\t} else {", "-\t\t\t\t\t// skip failure", "-\t\t\t\t}", "-\t\t\t\t// Need to retrieve correct position", "+\t    \t\tif (previousToken == -1 || previousToken == TerminalTokens.TokenNameWHITESPACE) {", "+\t    \t\t\ttokensBuffer.append(' ');", "+\t    \t\t}", "-\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\tthis.column++;", "+\t    \t\tchar ch = (char) this.scanner.getNextChar();", "+\t\t\t\tpreviousToken = TerminalTokens.TokenNameWHITESPACE;", "+\t\t\t\twhile (!ScannerHelper.isWhitespace(ch)) {", "+\t\t\t\t\ttokensBuffer.append(ch);", "+\t\t\t\t\tif (this.scanner.atEnd()) {", "+\t\t\t\t\t\tpreviousToken = TerminalTokens.TokenNameEOF;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tch = (char) this.scanner.getNextChar();", "+\t\t\t\t}", "+\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tbufferHasTokens = true;", "+\t\t\t\t\t}", "-    \t\tboolean insertSpace = previousToken == TerminalTokens.TokenNameWHITESPACE;", "-\t\t\tthis.column += tokenLength;", "-    \t\tif (previousToken == -1 || insertSpace) this.column++;", "-    \t\tint col = column; ", "-\t\t\tif (!firstWord && col > maxColumn) {", "+    \t\tboolean insertSpace = previousToken == -1 || previousToken == TerminalTokens.TokenNameWHITESPACE;", "+    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+    \t\tif (insertSpace) lastColumn++;", "+\t\t\tif (!firstWord && lastColumn > maxColumn) {", "-\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t    \tthis.column = 1;", "-\t\t    \tprintIndentationIfNecessary(buffer);", "-\t    \t\tbuffer.append(LINE_COMMENT_PREFIX);", "-\t\t    \tthis.column = firstColumn + LINE_COMMENT_PREFIX_LENGTH;", "+\t\t\t\tif ((firstColumn+tokensBuffer.length()+tokenLength) > maxColumn) {", "+\t\t\t\t\t// there won't be enough room even if we break the line before the buffered tokens", "+\t\t\t\t\t// So add the buffered tokens now", "+\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tbufferHasTokens = true;", "+\t\t\t\t}", "+\t\t\t\tif (bufferHasTokens) {", "+\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.column = 1;", "+\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t    \t\t\tbuffer.append(LINE_COMMENT_PREFIX);", "+\t\t    \t\tthis.column += LINE_COMMENT_PREFIX_LENGTH;", "+\t\t\t\t}", "+\t\t    \tif (tokensBuffer.length() > 0) {", "+\t\t    \t\tif (ScannerHelper.isWhitespace(tokensBuffer.charAt(0))) {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer.substring(1));", "+\t\t\t\t\t\tthis.column += tokensBuffer.length() - 1;", "+\t\t    \t\t} else {", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t    \t\t}", "+\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tif (insertSpace)  {", "+\t\t    \t\t\tbuffer.append(' ');", "+\t\t    \t\t\tthis.column++;", "+\t\t\t\t\t}", "+\t\t    \t}", "+\t\t\t\tbufferHasTokens = true;", "+\t\t\t\tfirstColumn = this.indentationLevel + LINE_COMMENT_PREFIX_LENGTH;", "-\t\t\t\tif (previousToken == -1 || insertSpace)  {", "-\t    \t\t\tbuffer.append(' ');", "+\t\t\t\tif (insertSpace)  {", "+\t    \t\t\ttokensBuffer.append(' ');", "-\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t}", "+", "+\t\t// Add remaining buffered tokens", "+\t\tif (tokensBuffer.length() > 0) {", "+\t\t\tbuffer.append(tokensBuffer);", "+\t\t\tthis.column += tokensBuffer.length();"]}], "num": 31189}
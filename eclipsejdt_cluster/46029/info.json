{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c85dd1509e2b120e61fd320eeaa94946", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb5a014f169c40ac154ad195dbfdb3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic IPath[] enclosingProjectsAndJars()", "signatureAfterChange": "\r public IPath[] enclosingProjectsAndJars()", "diff": ["-\t */\r", "-\tpublic IPath[] enclosingProjectsAndJars() {\r", "-\t\ttry {\r", "-\t\t\tVector paths = new Vector();\r", "-\t\t\tIJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\t\tIWorkspaceRoot root = javaModel.getWorkspace().getRoot();\r", "-\t\t\tfor (int i = 0; i < this.elementCount; i++) {\r", "-\t\t\t\tIResource element = this.elements[i];\r", "-\t\t\t\tIPath path = element.getProject().getFullPath();\r", "-\t\t\t\tIProject project = element.getProject();\r", "-\t\t\t\tif (project.exists() && project.isOpen()) {\r", "-\t\t\t\t\tif (!paths.contains(path))\r", "-\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\tif (this.includesClasspaths) {\r", "-\t\t\t\t\t\tIJavaProject javaProject = javaModel.getJavaProject(project.getName());\r", "-\t\t\t\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\r", "-\t\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "-\t\t\t\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+ */\r", "+public IPath[] enclosingProjectsAndJars() {\r", "+\ttry {\r", "+\t\tVector paths = new Vector();\r", "+\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(ResourcesPlugin.getWorkspace());\r", "+\t\tIWorkspaceRoot root = javaModel.getWorkspace().getRoot();\r", "+\t\tfor (int i = 0; i < this.elementCount; i++){\r", "+\t\t\tIResource element = this.elements[i];\r", "+\t\t\tIPath path = element.getProject().getFullPath();\r", "+\t\t\tIProject project = element.getProject();\r", "+\t\t\tif (project.exists() && project.isOpen()) {\r", "+\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "+\t\t\t\tif (this.includesClasspaths) {\r", "+\t\t\t\t\tIJavaProject javaProject = javaModel.getJavaProject(project.getName());\r", "+\t\t\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\r", "+\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "+\t\t\t\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "+\t\t\t\t\t\t\t\tif (!paths.contains(path) && root.getProject(path.lastSegment()).isAccessible()) {\r", "+\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\t\t\tif (this.includesBinaries) {\r", "-\t\t\t\t\t\t\t\t\tif (!paths.contains(path)\r", "-\t\t\t\t\t\t\t\t\t\t&& root.getProject(path.lastSegment()).isAccessible()) {\r", "-\t\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "-\t\t\t\t\t\t\t\t\tif (this.includesBinaries) {\r", "-\t\t\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "-\t\t\t\t\t\t\t\t\t\tif (!paths.contains(path))\r", "-\t\t\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\tIPath[] result = new IPath[paths.size()];\r", "-\t\t\tpaths.copyInto(result);\r", "-\t\t\treturn result;\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\treturn new IPath[0];\r", "+\t\tIPath[] result = new IPath[paths.size()];\r", "+\t\tpaths.copyInto(result);\r", "+\t\treturn result;\r", "+\t} catch (JavaModelException e) {\r", "+\t\treturn new IPath[0];\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fee56dbc7fe89f17f142d1bdd0d4bb9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic void add(IResource element)", "signatureAfterChange": "\r public void add(IResource element)", "diff": ["-\t */\r", "-\tpublic void add(IResource element) {\r", "-\t\tsuper.add(element);\r", "+ */\r", "+public void add(IResource element) {\r", "+\tsuper.add(element);\r", "-\t\t// clear indexer cache\r", "-\t\tfLastCheckedResource = null;\r", "+\t// clear indexer cache\r", "+\tfLastCheckedResource = null;\r", "-\t\tif (element instanceof IProject) {\r", "-\t\t\t// remember the paths of its classpath entries\r", "-\t\t\tIJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "-\t\t\ttry {\r", "-\t\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\t\tthis.add(entry.getPath());\r", "-\t\t\t\t}\r", "-\t\t\t} catch (JavaModelException e) {\r", "+\tif (element instanceof IProject) {\r", "+\t\t// remember the paths of its classpath entries\r", "+\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(element.getWorkspace());\r", "+\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "+\t\ttry {\r", "+\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\tthis.add(entry.getPath());\r", "-\t\t} else {\r", "-\t\t\tthis.add(element.getFullPath());\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t}\r", "+\t} else {\r", "+\t\tthis.add(element.getFullPath());\r", "+\t}\r", "+}\r"]}], "num": 46029}
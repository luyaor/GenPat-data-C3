{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0eeb267b92b2d4f58dbd66df9f1ece96", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "374c9c2df59721889cc2b9d8f0e55fbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f51d6f5a0e9a386694d73d0c3aec5b18e2ce1002", "commitAfterChange": "4ec516fd83ba9f8d854c904c0afabe8bb5fc0412", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": " \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["-\t\r\t\tint k = context.getKind();", "-\t\tif (k == ISaveContext.FULL_SAVE){", "-\t\t\tthis.saveBuildState();\t// build state", "-\t\t} else if (k == ISaveContext.PROJECT_SAVE){", "-\t\t\tPerProjectInfo info = getPerProjectInfo(context.getProject());", "-\t\t\tif (info.triedRead)", "-\t\t\t\tsaveState(info);", "+\t", "+\t\tIProject savedProject = context.getProject();", "+\t\tif (savedProject != null) {", "+\t\t\tPerProjectInfo info = getPerProjectInfo(savedProject);", "+\t\t\tsaveState(info, context);", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tArrayList vStats= null; // lazy initialized", "+\t\tfor (Iterator iter =  perProjectInfo.values().iterator(); iter.hasNext();) {", "+\t\t\ttry {", "+\t\t\t\tPerProjectInfo info = (PerProjectInfo) iter.next();", "+\t\t\t\tsaveState(info, context);", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tif (vStats == null)", "+\t\t\t\t\tvStats= new ArrayList();", "+\t\t\t\tvStats.add(e.getStatus());", "+\t\t\t}", "+\t\t}", "+\t\tif (vStats != null) {", "+\t\t\tIStatus[] stats= new IStatus[vStats.size()];", "+\t\t\tvStats.toArray(stats);", "+\t\t\tthrow new CoreException(new MultiStatus(JavaCore.PLUGIN_ID, IStatus.ERROR, stats, Util.bind(\"build.cannotSaveStates\"), null)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c46634832be9e68a3c46f204842695e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "70ee08b37d9e1985bf6e556eb4c75b0a1c82e56b", "commitAfterChange": "a46f42e6852cac4afd504be345bfdc6cb42a6150", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["+\t\tHashMap oldTypeCategories = oldSourceTypeInfo.categories;", "+\t\tHashMap newTypeCategories = newSourceTypeInfo.categories;", "+\t\tif (oldTypeCategories != null) {", "+\t\t\tIterator elements = oldTypeCategories.keySet().iterator();", "+\t\t\twhile (elements.hasNext()) {", "+\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "+\t\t\t\tString[] oldCategories = (String[]) oldTypeCategories.get(element);", "+\t\t\t\tString[] newCategories = newTypeCategories == null ? null : (String[]) newTypeCategories.get(element);", "+\t\t\t\tif (!Util.equalArraysOrNull(oldCategories, newCategories)) {", "+\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (newTypeCategories != null) {", "+\t\t\tIterator elements = newTypeCategories.keySet().iterator();", "+\t\t\twhile (elements.hasNext()) {", "+\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "+\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES); // all categories for this element were removed", "+\t\t\t}", "+\t\t}"]}], "num": 4216}
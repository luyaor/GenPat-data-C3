{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8e1845f1f4663328ebfeb469e204eb4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b734a54c26d89343ef610818f8f99130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "458161dc550c876a0d717a9a36eda696046c367f", "commitAfterChange": "59d8c0d8b554a42bbafdc0ad10f524f90fa03b31", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void consumeFieldAccess(boolean isSuperAccess)", "signatureAfterChange": " protected void consumeFieldAccess(boolean isSuperAccess)", "diff": ["-\tthis.matchSet.checkMatching(this.expressionStack[this.expressionPtr]);", "+\tExpression node = this.expressionStack[this.expressionPtr];", "+\tif (node instanceof Reference) // should always be a FieldReference, but play it safe", "+\t\tthis.patternLocator.match((Reference) node, this.matchSet);", "+\telse", "+\t\tthis.patternLocator.match(node, this.matchSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9a2ac852ec7b6efb215f6a428168907", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "4dd777707c2803e1e51e44f3ccb37074b166c552", "commitAfterChange": "bb0062c9650742fadc1d35f4bf3fa1b174bd1969", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void consumeFieldAccess(boolean isSuperAccess)", "signatureAfterChange": " protected void consumeFieldAccess(boolean isSuperAccess)", "diff": ["-\tExpression node = this.expressionStack[this.expressionPtr];", "-\tif (node instanceof Reference) // should always be a FieldReference, but play it safe", "-\t\tthis.patternLocator.match((Reference) node, this.matchSet);", "-\telse", "-\t\tthis.patternLocator.match(node, this.matchSet);", "+", "+\t// this is always a Reference", "+\tthis.patternLocator.match((Reference) this.expressionStack[this.expressionPtr], this.matchSet);"]}], "num": 617}
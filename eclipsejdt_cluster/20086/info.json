{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f31ff78afb5c61d8f86a01c021f033b0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "624b94a7fee87c9f35b29a2bf6d9ab94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes, Scope scope)", "diff": ["-\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes) {", "+\tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes, Scope scope) {", "-\t\t\t\t\tMethodBinding binding = innerInvocation.binding(parameterType);", "+\t\t\t\t\tMethodBinding binding = innerInvocation.binding(parameterType, true, scope);", "-\t\t\t\t\t\t\t\t\tresolvePolyExpressionArguments(innerInvocation, improvedBinding);", "+\t\t\t\t\t\t\t\t\tresolvePolyExpressionArguments(innerInvocation, improvedBinding, scope);", "-\t\t\t\t\t\tupdatedArgumentType = argument.checkAgainstFinalTargetType(parameterType);", "+\t\t\t\t\t\tupdatedArgumentType = argument.checkAgainstFinalTargetType(parameterType, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b77842d819abace3248812be50abf8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "signatureAfterChange": "  \tprivate void acceptPendingPolyArguments(BoundSet acceptedResult, TypeBinding[] parameterTypes, boolean isVarArgs)", "diff": ["-\t\t\t\t\tMethodBinding method = invocation.binding(targetType);", "+\t\t\t\t\tMethodBinding method = invocation.binding(targetType, true, this.scope);", "-\t\t\t\t\t\t\t\tASTNode.resolvePolyExpressionArguments(invocation, innerBinding);", "+\t\t\t\t\t\t\t\tASTNode.resolvePolyExpressionArguments(invocation, innerBinding, this.scope);", "+\t\t\t\t} else {", "+\t\t\t\t\texpression.setExpectedType(targetType);", "-\t\t\t\texpression.checkAgainstFinalTargetType(targetType);", "+\t\t\t\texpression.checkAgainstFinalTargetType(targetType, this.scope);"]}], "num": 20086}
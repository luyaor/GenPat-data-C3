{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83ed2a3627168a5e827babb7a056543f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fe6e94ff6b18b730369a5ad078be43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "df84bc0b0e74080458b4e3f35c6e77ec6fed2587", "commitAfterChange": "2bb013de372e754bf58118fac6dab82d5a5c9625", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": " protected void consumeLocalVariableDeclarationStatement()", "signatureAfterChange": " protected void consumeLocalVariableDeclarationStatement()", "diff": ["+\t", "+\tint variableDeclaratorsCounter = this.astLengthStack[this.astLengthPtr];", "+\tif (variableDeclaratorsCounter == 1) {", "+\t\tLocalDeclaration localDeclaration = (LocalDeclaration) this.astStack[this.astPtr];", "+\t\tif (localDeclaration.isRecoveredFromLoneIdentifier()) {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430336, [1.8][compiler] Bad syntax error recovery: Lonely identifier should be variable name, not type", "+\t\t\t// Mutate foo $missing; into foo = $missing$; ", "+\t\t\tExpression left;", "+\t\t\tif (localDeclaration.type instanceof QualifiedTypeReference) {", "+\t\t\t\tQualifiedTypeReference qtr = (QualifiedTypeReference) localDeclaration.type;", "+\t\t\t\tleft = new QualifiedNameReference(qtr.tokens, qtr.sourcePositions, 0, 0);", "+\t\t\t} else {", "+\t\t\t\tleft = new SingleNameReference(localDeclaration.type.getLastToken(), 0L);", "+\t\t\t}", "+\t\t\tleft.sourceStart = localDeclaration.type.sourceStart;", "+\t\t\tleft.sourceEnd = localDeclaration.type.sourceEnd;", "+\t\t\t", "+\t\t\tExpression right = new SingleNameReference(localDeclaration.name, 0L);", "+\t\t\tright.sourceStart = localDeclaration.sourceStart;", "+\t\t\tright.sourceEnd = localDeclaration.sourceEnd;", "+\t\t\t", "+\t\t\tAssignment assignment = new Assignment(left, right, 0);", "+\t\t\tint end = this.endStatementPosition;", "+\t\t\tassignment.sourceEnd = (end == localDeclaration.sourceEnd) ? ++end : end; ", "+\t\t\tassignment.statementEnd = end;", "+\t\t\tthis.astStack[this.astPtr] = assignment;", "+\t\t\t", "+\t\t\t// also massage recovery scanner data.", "+\t\t\tif (this.recoveryScanner != null) {", "+\t\t\t\tRecoveryScannerData data = this.recoveryScanner.getData();", "+\t\t\t\tint position = data.insertedTokensPtr;", "+\t\t\t\twhile (position > 0) {", "+\t\t\t\t\tif (data.insertedTokensPosition[position] != data.insertedTokensPosition[position - 1])", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tposition--;", "+\t\t\t\t}", "+\t\t\t\tthis.recoveryScanner.insertTokenAhead(TerminalTokens.TokenNameEQUAL, position);", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (this.currentElement != null) {", "+\t\t\t\tthis.lastCheckPoint = assignment.sourceEnd + 1;", "+\t\t\t\tthis.currentElement = this.currentElement.add(assignment, 0);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\tint variableDeclaratorsCounter = this.astLengthStack[this.astLengthPtr];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22df468f1a88729eda1815c682d15c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void triggerRecoveryUponLambdaClosure()", "signatureAfterChange": "  protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit)", "diff": ["-}", "-protected void triggerRecoveryUponLambdaClosure() {", "-\tif (this.assistNode == null || !this.lambdaNeedsClosure)", "-\t\treturn;", "-\tASTNode node = this.astStack[this.astPtr];", "-\tif (this.assistNode.sourceStart >= node.sourceStart && this.assistNode.sourceEnd <= node.sourceEnd) {", "-\t\tfor (int i = 0; i <= this.astPtr; i++) {", "-\t\t\tif (this.astStack[i] instanceof LambdaExpression)", "-\t\t\t\treturn;", "-\t\t}", "-\t\tthis.restartRecovery = true;", "-\t\tthis.isOrphanCompletionNode = false;", "-\t\tthis.lambdaNeedsClosure = false;", "-\t}", "-}", "+protected boolean triggerRecoveryUponLambdaClosure(Statement statement, boolean shouldCommit) {", "+\t// Last block statement reduced is required to be on the AST stack top.", "+\tboolean lambdaClosed = false;", "+\tint statementStart, statementEnd;", "+\tstatementStart = statement.sourceStart;", "+\tstatementEnd = statement instanceof AbstractVariableDeclaration ? ((AbstractVariableDeclaration)statement).declarationSourceEnd : statement.sourceEnd;", "+\tfor (int i = this.elementPtr; i >= 0; --i) {", "+\t\tif (this.elementKindStack[i] != K_LAMBDA_EXPRESSION_DELIMITER)", "+\t\t\tcontinue;", "+\t\tLambdaExpression expression = (LambdaExpression) this.elementObjectInfoStack[i];", "+\t\tif (expression.sourceStart >= statementStart && expression.sourceEnd <= statementEnd) {", "+\t\t\tthis.elementPtr = i - 1;", "+\t\t\tlambdaClosed = true;", "+\t\t} else {", "+\t\t\tif (shouldCommit) {", "+\t\t\t\tint stackLength = this.stack.length;", "+\t\t\t\tif (++this.stateStackTop >= stackLength) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.stack, 0,", "+\t\t\t\t\t\t\tthis.stack = new int[stackLength + StackIncrement], 0,", "+\t\t\t\t\t\t\tstackLength);", "+\t\t\t\t}", "+\t\t\t\tthis.stack[this.stateStackTop] = this.unstackedAct;", "+\t\t\t\tcommit();", "+\t\t\t\tthis.stateStackTop --;", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "+\t}", "+\t", "+\tif (lambdaClosed && this.currentElement != null) {", "+\t\tthis.restartRecovery = true;", "+\t\tif (!(statement instanceof AbstractVariableDeclaration)) // added already as part of standard recovery since these contribute a name to the scope prevailing at the cursor.", "+\t\t\tthis.currentElement.add(statement, 0);", "+\t}", "+\tthis.snapShot = null;", "+\treturn lambdaClosed;", "+}"]}], "num": 56195}
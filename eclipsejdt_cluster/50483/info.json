{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48c0aab1e01e63d0cc1e0b569e38292a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad4fa62eb20ce8705024efd743bee59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "6d3e536ecd8e7c91687c7c90569a25a3f6f6eb94", "commitAfterChange": "e97394b80d49fb5dc34a1a6fec8af65d69ccf130", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void appendForwardReferencesFrom(Label otherLabel)", "signatureAfterChange": " public void appendForwardReferencesFrom(Label otherLabel)", "diff": ["-\tint otherCount = otherLabel.forwardReferenceCount;", "+\tfinal int otherCount = otherLabel.forwardReferenceCount;", "-\tint length = forwardReferences.length;", "-\tint neededSpace = otherCount + forwardReferenceCount;", "-\tif (neededSpace >= length){", "-\t\tSystem.arraycopy(forwardReferences, 0, (forwardReferences = new int[neededSpace]), 0, forwardReferenceCount);", "+\t// need to merge the two sorted arrays of forward references", "+\tint[] mergedForwardReferences = new int[this.forwardReferenceCount + otherCount];", "+\tint indexInMerge = 0;", "+\tint j = 0;", "+\tint i = 0;", "+\tint max = this.forwardReferenceCount;", "+\tint max2 = otherLabel.forwardReferenceCount;", "+\tloop1 : for (; i < max; i++) {", "+\t\tfinal int value1 = this.forwardReferences[i];", "+\t\tfor (; j < max2; j++) {", "+\t\t\tfinal int value2 = otherLabel.forwardReferences[j];", "+\t\t\tif (value1 < value2) {", "+\t\t\t\tmergedForwardReferences[indexInMerge++] = value1;", "+\t\t\t\tcontinue loop1;", "+\t\t\t} else if (value1 == value2) {", "+\t\t\t\tmergedForwardReferences[indexInMerge++] = value1;", "+\t\t\t\tj++;", "+\t\t\t\tcontinue loop1;", "+\t\t\t} else {", "+\t\t\t\tmergedForwardReferences[indexInMerge++] = value2;", "+\t\t\t}", "+\t\t}", "-\t// append other forward references at the end, so they will get updated as well", "-\tSystem.arraycopy(otherLabel.forwardReferences, 0, forwardReferences, forwardReferenceCount, otherCount);", "-\tforwardReferenceCount = neededSpace;", "+\tfor (; j < max2; j++) {", "+\t\tmergedForwardReferences[indexInMerge++] = otherLabel.forwardReferences[j];", "+\t}", "+\tthis.forwardReferences = mergedForwardReferences;", "+\tthis.forwardReferenceCount = indexInMerge;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a08fc8404ff0d92882425b0c462c9736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "f96cd0ecae0cba5d7e7fa39b67cc4c6c7e6eaa8e", "commitAfterChange": "67a18e4f65a6a995842d9a3b7571c2508b82d670", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding findMethod(char[] methodDescriptor, char[][][] missingTypeNames)", "diff": ["+\tint paramStart = index;", "-", "-\tint startIndex = 0;", "-\t\tindex = 1;", "-\t\tint end = 0;   // first character is always '(' so skip it", "+\t\tindex = paramStart + 1;", "+\t\tint end = paramStart; // first character is always '(' so skip it", "-\t\t\tif (i >= startIndex) {   // skip the synthetic arg if necessary", "-\t\t\t\tparameters[i - startIndex] = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\tTypeBinding param = this.environment.getTypeFromSignature(methodDescriptor, index, end, false, this, missingTypeNames);", "+\t\t\tif (param instanceof UnresolvedReferenceBinding) {", "+\t\t\t\tparam = resolveType(param, this.environment, true /* raw conversion */);", "+\t\t\tparameters[i] = param;", "-\treturn CharOperation.equals(selector, TypeConstants.INIT)", "-\t\t? this.enclosingType.getExactConstructor(parameters)", "-\t\t: this.enclosingType.getExactMethod(selector, parameters, null);", "+\tint parameterLength = parameters.length;", "+\tMethodBinding[] methods2 = this.enclosingType.getMethods(selector, parameterLength);", "+\t// find matching method using parameters", "+\tloop: for (int i = 0, max = methods2.length; i < max; i++) {", "+\t\tMethodBinding currentMethod = methods2[i];", "+\t\tTypeBinding[] parameters2 = currentMethod.parameters;", "+\t\tint currentMethodParameterLength = parameters2.length;", "+\t\tif (parameterLength == currentMethodParameterLength) {", "+\t\t\tfor (int j = 0; j < currentMethodParameterLength; j++) {", "+\t\t\t\tif (parameters[j] != parameters2[j] && parameters[j].erasure() != parameters2[j].erasure()) {", "+\t\t\t\t\tcontinue loop;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn currentMethod;", "+\t\t}", "+\t}", "+\treturn null;"]}], "num": 50483}
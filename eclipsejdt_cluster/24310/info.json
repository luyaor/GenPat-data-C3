{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08bd09944e1c4807b883dfcaff6c4581", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "779f8720eb2c3b389038fdf39c2382a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0aed651787bbf037293557b7c88429b8514a95c0", "commitAfterChange": "1719c13f5400eb5914bb79f89f0e1d4c54e3cd14", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " protected void reportAccurateParameterizedTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportAccurateParameterizedTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "diff": ["-\t\t\ttry {", "-\t\t\t\tint count = 0;", "-\t\t\t\twhile (token != TerminalTokens.TokenNameGREATER || count > 0) {", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "-\t\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "-\t\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameEOF:", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t\t\tint count = 0;", "+\t\t\tint ch = -1;", "+\t\t\twhile (ch != '>' || count > 0) {", "+\t\t\t\tch = scanner.getNextChar();", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '<':", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase -1:", "+\t\t\t\t\t\t// we missed type parameters declarations! => do not report match", "+\t\t\t\t\t\treturn;", "-\t\t\t} catch (InvalidInputException e1) {", "-\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d67bdf83ea7b473f3228d9ee50be946", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 89, "signatureBeforeChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny)", "signatureAfterChange": "  \tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, int emptyLineRules)", "diff": ["+", "+\tpublic void printNextToken(int expectedTokenType, boolean considerSpaceIfAny, int emptyLineRules) {", "-\t\tswitch (expectedTokenType) {", "-\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\tcase TerminalTokens.TokenNameLBRACE:", "-\t\t\t\tthis.formatBrace = true;", "-\t\t}", "+\t\tprintComment(CodeFormatter.K_UNKNOWN, NO_TRAILING_COMMENT, emptyLineRules);", "-\t\t\tprintComment(CodeFormatter.K_UNKNOWN, NO_TRAILING_COMMENT);", "-\t\t\ttry {", "-\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\tif (expectedTokenType != this.currentToken) {", "-\t\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "-\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\tthrow new AbortFormatting(e);", "+\t\t\tthis.currentToken = this.scanner.getNextToken();", "+\t\t\tif (expectedTokenType != this.currentToken) {", "+\t\t\t\tthrow new AbortFormatting(\"unexpected token type, expecting:\"+expectedTokenType+\", actual:\"+this.currentToken);//$NON-NLS-1$//$NON-NLS-2$", "-\t\t}", "-\t\tfinally {", "-\t\t\t// Flush brace flag", "-\t\t\tswitch (expectedTokenType) {", "-\t\t\t\tcase TerminalTokens.TokenNameRBRACE:", "-\t\t\t\tcase TerminalTokens.TokenNameLBRACE:", "-\t\t\t\t\tthis.formatBrace = false;", "-\t\t\t}", "+\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, considerSpaceIfAny);", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);"]}], "num": 24310}
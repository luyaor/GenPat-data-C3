{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1c5ed8de451a04476863b44435f56c9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb6a8436a0eebaa3e04e3d685a8da95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementsOperation.java", "commitBeforeChange": "de1902358d63b1941a17fd54aec570fbf78d2d3e", "commitAfterChange": "a7831f00aa7162fca2867ec12502713787229e00", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tif (!isWorkingCopy) { // if unit is working copy, then save will have already fired the delta", "+\t\t\tif (!isWorkingCopy // if unit is working copy, then save will have already fired the delta", "+\t\t\t\t&& !Util.isExcluded(unit)", "+\t\t\t\t&& unit.getParent().exists()) { // if unit is working copy, then save will have already fired the delta", "-\t\t\t} // else unit is created outside classpath", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8fa3411661b249afe4b3905fb48de47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "cdbba3fe3494f2d010469af9060ef95e48842233", "commitAfterChange": "35725fdbc820b5d03438d3e4a4d3db79142d2182", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r void recordTypeReference(TypeBinding type)", "signatureAfterChange": "\r void recordTypeReference(TypeBinding type)", "diff": ["-\tif (qualifiedReferences == null) return; // we're not recording dependencies\r", "+\tif (qualifiedReferences == null) return; // not recording dependencies\r", "-\tif (!type.isBaseType()) {\r", "+\tif (!type.isBaseType() && !typeReferences.containsIdentical(type)) {\r", "+\t\ttypeReferences.add(type);\r", "-\t\t\trecordReference(actualType.isMemberType()\r", "+\t\t\trecordQualifiedReference(actualType.isMemberType()\r", "-\t\t\t\trecordTypeReference(actualType.enclosingType());\r", "+\t\t\t\trecordTypeReference(actualType.enclosingType()); // to record its supertypes\r"]}], "num": 33268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcffc3554801881b3edc4cf123b77c5c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e7f366074bc0cb13470ce11adfc179", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavadocCompletionModelTest.java", "commitBeforeChange": "1d3824feb74dac2cd72f42f67996821e25271c63", "commitAfterChange": "9f02272e8245618968be36ae4ecb54a3d73ce22b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected void completeInJavadoc(String[] sources, boolean showPositions, String completeBehind, int occurencePosition) throws JavaModelException", "signatureAfterChange": "  \tprotected void completeInJavadoc(String[] sources, boolean showPositions, String completeBehind, int occurencePosition, int[] ignoreList) throws JavaModelException", "diff": ["-\tprotected void completeInJavadoc(String[] sources, boolean showPositions, String completeBehind, int occurencePosition) throws JavaModelException {", "+\tprotected void completeInJavadoc(String[] sources, boolean showPositions, String completeBehind, int occurencePosition, int[] ignoreList) throws JavaModelException {", "+\t\tif (ignoreList != null) {", "+\t\t\tfor (int i = 0; i < ignoreList.length; i++) {", "+\t\t\t\tthis.requestor.setIgnored(ignoreList[i], true);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be34410036e4c9c913d0b0461b6968e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Block.java", "commitBeforeChange": "3b08272ee847aa9d892ea0105ce6d34424762f9c", "commitAfterChange": "ed6be0a94093e63f3ba13a0769b90a8ca2a5b2b0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (this.explicitDeclarations > 0) // if block has its own scope analyze tracking vars now:", "+\tif (this.explicitDeclarations > 0) {", "+\t\t// if block has its own scope analyze tracking vars now:", "+\t\t// cleanup assignment info for locals that are scoped to this block:", "+\t\tLocalVariableBinding[] locals = this.scope.locals;", "+\t\tif (locals != null) {", "+\t\t\tint numLocals = this.scope.localIndex;", "+\t\t\tfor (int i = 0; i < numLocals; i++) {", "+\t\t\t\tflowInfo.resetAssignmentInfo(locals[i]);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 69426}
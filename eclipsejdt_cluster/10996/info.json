{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0cc6e55a9268dfb534b28c02b138d65", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da77414dddba3625a1b0166bf277a651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "79774393baaba7f9e5f3461242a5b822bf662647", "commitAfterChange": "8b644ce068ecf49daa5da8af14e814933ab3df61", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " \tpublic static int checkAssignment(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t   VariableBinding var, FlowInfo flowInfo, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "+\t\t\t\t\t\t\t\t\t   VariableBinding var, FlowInfo flowInfo, int nullStatus, Expression expression, TypeBinding providedType)", "-\t\t\t\tint status1 = NullAnnotationMatching.checkAssignment(currentScope, flowContext, var, ce.ifTrueNullStatus, ce.valueIfTrue, ce.valueIfTrue.resolvedType);", "-\t\t\t\tint status2 = NullAnnotationMatching.checkAssignment(currentScope, flowContext, var, ce.ifFalseNullStatus, ce.valueIfFalse, ce.valueIfFalse.resolvedType);", "+\t\t\t\tint status1 = NullAnnotationMatching.checkAssignment(currentScope, flowContext, var, flowInfo, ce.ifTrueNullStatus, ce.valueIfTrue, ce.valueIfTrue.resolvedType);", "+\t\t\t\tint status2 = NullAnnotationMatching.checkAssignment(currentScope, flowContext, var, flowInfo, ce.ifFalseNullStatus, ce.valueIfFalse, ce.valueIfFalse.resolvedType);", "-\t\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, flowInfo, nullStatus);", "-\t\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, flowInfo, nullStatus);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd58d5cd4fbb2be42dddc30953ea4727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "signatureAfterChange": " protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, FlowContext flowContext, \t\t\t\t\t\t\t\t\t\t\t\t   VariableBinding var, int nullStatus, Expression expression, TypeBinding providedType)", "diff": ["-\tint severity = 0;", "-\tif ((var.tagBits & TagBits.AnnotationNonNull) != 0", "-\t\t\t&& nullStatus != FlowInfo.NON_NULL) {", "-\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\tlong lhsTagBits = 0L;", "+\tboolean hasReported = false;", "+\tif (currentScope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\tlhsTagBits = var.tagBits & TagBits.AnnotationNullMASK;", "+\t} else {", "+\t\tlhsTagBits = var.type.tagBits & TagBits.AnnotationNullMASK;", "+\t\tint severity = findNullTypeAnnotationMismatch(var.type, providedType, nullStatus);", "+\t\tif (severity == 3) {", "+\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity);", "+\t\t\thasReported = true;", "+\t\t} else if (severity == 2) {", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "+\t\t\thasReported = true;", "+\t\t}", "+\t}", "+\tif (lhsTagBits == TagBits.AnnotationNonNull && nullStatus != FlowInfo.NON_NULL) {", "+\t\tif (!hasReported)", "+\t\t\tflowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, nullStatus);", "-\t} else if ((severity = findNullTypeAnnotationMismatch(var.type, providedType)) > 0) {", "-\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(expression, providedType, var.type, severity==1, currentScope.environment());", "-\t} else if ((var.tagBits & TagBits.AnnotationNullable) != 0", "-\t\t\t&& nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?", "+\t} else if (lhsTagBits == TagBits.AnnotationNullable && nullStatus == FlowInfo.UNKNOWN) {\t// provided a legacy type?"]}], "num": 10996}
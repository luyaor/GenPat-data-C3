{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a75c4b04409f67950f3dc3c4a8de4b38", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c558774c84ea24810c3eba3baf37d732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java", "commitBeforeChange": "0e6e3363ae1376359a141e5a7728b6487db35f2e", "commitAfterChange": "ec6df7d4c471e5dbef077b14779058e1a50feb58", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected IMethod findCorrespondingMethod(IMethod method, IMethod[] methods)", "signatureAfterChange": "\r protected IMethod[] findMethods(IMethod method, IMethod[] methods)", "diff": ["-protected IMethod findCorrespondingMethod(IMethod method, IMethod[] methods) {\r", "+protected IMethod[] findMethods(IMethod method, IMethod[] methods) {\r", "+\tArrayList list = new ArrayList();\r", "-\t\t\t\treturn existingMethod;\r", "+\t\t\t\tlist.add(existingMethod);\r", "-\treturn null;\r", "+\tint size = list.size();\r", "+\tif (size == 0) {\r", "+\t\treturn null;\r", "+\t} else {\r", "+\t\tIMethod[] result = new IMethod[size];\r", "+\t\tlist.toArray(result);\r", "+\t\treturn result;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4ea1e3ab76507d150f3c65619b944f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "37207b2312332e7eb9b138e12e2db23f9f9da53e", "commitAfterChange": "1829731a70d63f049379e6ceb23edadc61e7b589", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": " private IBinaryMethod[] createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private void createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames) {", "+private IBinaryMethod[] createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames) {", "-\t\treturn;", "+\t\treturn NO_BINARY_METHODS;", "+\t\treturn iMethods;", "+\t\tIBinaryMethod[] mappedBinaryMethods = new IBinaryMethod[total];", "+\t\t\t\tmappedBinaryMethods[index] = iMethods[i];", "+\t\treturn mappedBinaryMethods;"]}], "num": 61235}
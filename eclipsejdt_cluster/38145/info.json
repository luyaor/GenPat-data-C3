{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2341327125614a343b673d1d9a081fed", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2237f5dc77632c453d4bb094f5446aaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "75871e5cf780d193f3aa131d6533bfb3e88085a3", "commitAfterChange": "262c2d405c84f8f17d09d055f013ac895aa0dc67", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] tokens,\r \t\tIJavaElement element,\r \t\tint[] accuracies)\r \t\tthrows CoreException", "diff": ["-\t\t\t\r", "-\t\tthis.reportAccurateReference(\r", "-\t\t\tsourceStart,\r", "-\t\t\tsourceEnd,\r", "-\t\t\tqualifiedName,\r", "-\t\t\telement,\r", "-\t\t\tnew int[] {accuracy},\r", "-\t\t\tfalse);\r", "-\t}\r", "+\t */\r", "+\tpublic void reportAccurateReference(\r", "+\t\tint sourceStart,\r", "+\t\tint sourceEnd,\r", "+\t\tchar[][] tokens,\r", "+\t\tIJavaElement element,\r", "+\t\tint[] accuracies)\r", "+\t\tthrows CoreException {\r", "+\r", "+\t\t// compute source positions of the qualified reference \r", "+\t\tScanner scanner = parser.scanner;\r", "+\t\tscanner.setSourceBuffer(\r", "+\t\t\tthis.potentialMatches[this.potentialMatchesIndex].getSource());\r", "+\t\tscanner.resetTo(sourceStart, sourceEnd);\r", "+\r", "+\t\tint refSourceStart = -1, refSourceEnd = -1;\r", "+\t\tint length = tokens.length;\r", "+\t\tint token = -1;\r", "+\t\tint previousValid = -1;\r", "+\t\tint i = 0;\r", "+\t\tint accuracyIndex = 0;\r", "+\t\tdo {\r", "+\t\t\tint currentPosition = scanner.currentPosition;\r", "+\t\t\t// read token\r", "+\t\t\ttry {\r", "+\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\t}\r", "+\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();\r", "+\t\t\t\tboolean equals = false;\r", "+\t\t\t\twhile (i < length\r", "+\t\t\t\t\t&& !(equals = CharOperation.equals(tokens[i++], currentTokenSource))) {\r", "+\t\t\t\t}\r", "+\t\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {\r", "+\t\t\t\t\tpreviousValid = i - 1;\r", "+\t\t\t\t\tif (refSourceStart == -1) {\r", "+\t\t\t\t\t\trefSourceStart = currentPosition;\r", "+\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t}\r", "+\t\t\t\t// read '.'\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttoken = scanner.getNextToken();\r", "+\t\t\t\t} catch (InvalidInputException e) {\r", "+\t\t\tif (accuracies[accuracyIndex] != -1) {\r", "+\t\t\t\t// accept reference\r", "+\t\t\t\tif (refSourceStart != -1) {\r", "+\t\t\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracies[accuracyIndex]);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tthis.report(sourceStart, sourceEnd, element, accuracies[accuracyIndex]);\r", "+\t\t\t\t}\r", "+\t\t\t\ti = 0;\r", "+\t\t\t}\r", "+\t\t\trefSourceStart = -1;\r", "+\t\t\tpreviousValid = -1;\r", "+\t\t\tif (accuracyIndex < accuracies.length-1) {\r", "+\t\t} while (token != TerminalSymbols.TokenNameEOF);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85396a15b0d50d34ba831d92669e1b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7f7148c3b7ae3451b296c63ec6faa42df92b750d", "commitAfterChange": "e562014fc7f6276a90541f6d031954413a725f91", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " protected void reportAccurateTypeReference(SearchMatch match, ASTNode typeRef, char[] name) throws CoreException", "signatureAfterChange": " protected void reportAccurateTypeReference(SearchMatch match, ASTNode typeRef, char[] name) throws CoreException", "diff": ["-\t", "-\t// Compute source positions of the qualified reference ", "+", "-\tScanner scanner = this.parser.scanner;", "-\tscanner.setSource(this.currentPossibleMatch.getContents());", "-\tscanner.resetTo(sourceStart, sourceEnd);", "+\t", "+\t// Compute source positions of the qualified reference ", "+\tif (name != null) {", "+\t\tScanner scanner = this.parser.scanner;", "+\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "+\t\tscanner.resetTo(sourceStart, sourceEnd);", "-\tint token = -1;", "-\tint currentPosition;", "-\tdo {", "-\t\tcurrentPosition = scanner.currentPosition;", "-\t\ttry {", "-\t\t\ttoken = scanner.getNextToken();", "-\t\t} catch (InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\tif (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name, scanner.getCurrentTokenSource())) {", "-\t\t\tint length = scanner.currentPosition-currentPosition;", "-\t\t\tmatch.setOffset(currentPosition);", "-\t\t\tmatch.setLength(length);", "-\t\t\treport(match);", "-\t\t\treturn;", "-\t\t}", "-\t} while (token != TerminalTokens.TokenNameEOF);", "+\t\tint token = -1;", "+\t\tint currentPosition;", "+\t\tdo {", "+\t\t\tcurrentPosition = scanner.currentPosition;", "+\t\t\ttry {", "+\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "+\t\t\tif (token == TerminalTokens.TokenNameIdentifier && this.pattern.matchesName(name, scanner.getCurrentTokenSource())) {", "+\t\t\t\tint length = scanner.currentPosition-currentPosition;", "+\t\t\t\tmatch.setOffset(currentPosition);", "+\t\t\t\tmatch.setLength(length);", "+\t\t\t\treport(match);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t} while (token != TerminalTokens.TokenNameEOF);", "+\t}"]}], "num": 38145}
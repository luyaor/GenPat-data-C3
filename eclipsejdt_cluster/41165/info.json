{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6ef46aef1089927faf7a37b58f65724", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04c2e3777b73bf63b981d410b092da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " boolean checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters)", "diff": ["-boolean checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "-\tTypeBinding[] currentVars = currentMethod.typeVariables;", "-\tTypeBinding[] inheritedVars = inheritedMethod.typeVariables;", "-\tif (currentVars.length != inheritedVars.length && currentVars.length > 0) return true; // must match unless all are replaced", "-\t// must check each parameter pair to see if parameterized types are compatible", "-\t// already know that each erasure() is equal", "-\tTypeBinding[] currentArgs = currentMethod.parameters;", "-\tTypeBinding[] inheritedArgs = inheritedMethod.parameters;", "-\tif (currentArgs != inheritedArgs) {", "-\t\tfor (int i = 0, l = currentArgs.length; i < l; i++) {", "-\t\t\tTypeBinding currentArg = currentArgs[i].leafComponentType();", "-\t\t\tTypeBinding inheritedArg = inheritedArgs[i].leafComponentType();", "-\t\t\tif (currentArg != inheritedArg && currentArg.isParameterizedType()) {", "-\t\t\t\tif (!inheritedArg.isParameterizedType()) return true;", "-\t\t\t\tTypeBinding[] args1 = ((ParameterizedTypeBinding) currentArg).arguments;", "-\t\t\t\tTypeBinding[] args2 = ((ParameterizedTypeBinding) inheritedArg).arguments;", "-\t\t\t\tfor (int j = 0, k = args1.length; j < k; j++)", "-\t\t\t\t    if (!areTypesEquivalent(args1[j], args2[j])) return true;", "+}", "+boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters) {", "+\tif (doTypeVariablesClash(one, substituteTwo) || (checkParameters && doParametersClash(one, substituteTwo))) {", "+\t\tif (this.type == one.declaringClass)", "+\t\t \tproblemReporter(one).methodNameClash(one, substituteTwo);", "+\t\telse", "+\t\t\tproblemReporter().inheritedMethodsHaveNameClash(this.type, one, substituteTwo);", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a999b6f863ba9bb0cd188abdcf59ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "f7e03b51cbcdb65febacaecaf401f7cd7093398d", "commitAfterChange": "b41a5de95343375633384e6b1b331ea9265a7fc6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["+}", "-\t\t// must check each parameter pair to see if you have raw to parameterized conversions", "-\t\tTypeBinding[] currentArgs = currentMethod.parameters;", "-\t\tTypeBinding[] inheritedArgs = inheritedMethod.parameters;", "-\t\tif (currentArgs != inheritedArgs) {", "-\t\t\tfor (int j = 0, k = currentArgs.length; j < k; j++) {", "-\t\t\t\tTypeBinding currentArg = currentArgs[j].leafComponentType();", "-\t\t\t\tTypeBinding inheritedArg = inheritedArgs[j].leafComponentType();", "-\t\t\t\tif (currentArg != inheritedArg) {", "-\t\t\t\t\tif (currentArg.isParameterizedType() && hasBoundedParameters((ParameterizedTypeBinding) currentArg)) {", "-\t\t\t\t\t\tif (inheritedArg.isRawType()) {", "-//\t\t\t\t\t\tif (inheritedArg.isRawType() || !inheritedArg.isEquivalentTo(currentArg)) {", "-\t\t\t\t\t\t\tthis.problemReporter(currentMethod).methodNameClash(currentMethod, inheritedMethod);", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif (checkForNameClash(currentMethod, inheritedMethod)) {", "+\t\t\tthis.problemReporter(currentMethod).methodNameClash(currentMethod, inheritedMethod);", "+\t\t\tcontinue nextMethod;"]}], "num": 41165}
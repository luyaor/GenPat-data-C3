{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86e5d6e86c2375a0601c9827f6fd2b41", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fea6a75bd61de0404bffc9d7bf9add6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-//\t\t\tscanner.commentPtr = -1;", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t//System.out.println(scanner.toStringAction(type));", "+\t//System.out.println(this.scanner.toStringAction(type));", "-\t\t\tif (scanner.useAssertAsAnIndentifier) {", "-\t\t\t\tlong positions = identifierPositionStack[identifierPtr];", "+\t\t\tif (this.scanner.useAssertAsAnIndentifier) {", "+\t\t\t\tlong positions = this.identifierPositionStack[this.identifierPtr];", "-//\t\t\tscanner.commentPtr = -1;", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tthis.synchronizedBlockSourceStart = scanner.startPosition;\t", "+\t\t\tthis.synchronizedBlockSourceStart = this.scanner.startPosition;\t", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSourceString(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1); ", "+\t\t\t\t\tthis.scanner.getCurrentTokenSourceString(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1); ", "-//\t\t\tscanner.commentPtr = -1;", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\tnew FalseLiteral(scanner.startPosition, scanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\tnew FalseLiteral(this.scanner.startPosition, this.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\tnew TrueLiteral(scanner.startPosition, scanner.currentPosition - 1)); ", "+\t\t\t\tnew TrueLiteral(this.scanner.startPosition, this.scanner.currentPosition - 1)); ", "-\t\t\t\tnew NullLiteral(scanner.startPosition, scanner.currentPosition - 1)); ", "+\t\t\t\tnew NullLiteral(this.scanner.startPosition, this.scanner.currentPosition - 1)); ", "-\t\t\tendPosition = scanner.currentPosition - 1;", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tthis.endPosition = this.scanner.currentPosition - 1;", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);", "-\t\t\tendPosition = scanner.startPosition;", "+\t\t\tthis.endPosition = this.scanner.startPosition;", "-\t\t\tendPosition = scanner.startPosition;", "-\t\t\tendStatementPosition = scanner.currentPosition - 1;", "+\t\t\tthis.endPosition = this.scanner.startPosition;", "+\t\t\tthis.endStatementPosition = this.scanner.currentPosition - 1;", "-\t\t\tendStatementPosition = scanner.currentPosition - 1;", "-\t\t\tendPosition = scanner.startPosition - 1; ", "+\t\t\tthis.endStatementPosition = this.scanner.currentPosition - 1;", "+\t\t\tthis.endPosition = this.scanner.startPosition - 1; ", "-\t\t\trParenPos = scanner.currentPosition - 1; // position of the end of right parenthesis (in case of unicode \\u0029) lex00101", "+\t\t\tthis.rParenPos = this.scanner.currentPosition - 1; // position of the end of right parenthesis (in case of unicode \\u0029) lex00101", "-\t\t\tlParenPos = scanner.startPosition;", "+\t\t\tthis.lParenPos = this.scanner.startPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3ae073cb689c2b30897eb59079197eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (accessMode != This)", "+\t\t\tboolean rcvHasError = false;", "+\t\t\tif (this.accessMode != ExplicitConstructorCall.This) {", "-", "-\t\t\tif (receiverType == null) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\t// prevent (explicit) super constructor invocation from within enum", "-\t\t\tif (this.accessMode == Super && receiverType.erasure().id == T_JavaLangEnum) {", "-\t\t\t\tscope.problemReporter().cannotInvokeSuperConstructorInEnum(this, methodScope.referenceMethod().binding);", "-\t\t\t}", "-\t\t\t// qualification should be from the type of the enclosingType", "-\t\t\tif (qualification != null) {", "-\t\t\t\tif (accessMode != Super) {", "-\t\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(", "-\t\t\t\t\t\tqualification,", "-\t\t\t\t\t\treceiverType);", "+\t\t\t\tTypeReference superclassRef = scope.referenceType().superclass;", "+\t\t\t\tif (superclassRef != null && superclassRef.resolvedType != null && !superclassRef.resolvedType.isValidBinding()) {", "+\t\t\t\t\trcvHasError = true;", "-\t\t\t\tReferenceBinding enclosingType = receiverType.enclosingType();", "-\t\t\t\tif (enclosingType == null) {", "-\t\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(", "-\t\t\t\t\t\tqualification,", "-\t\t\t\t\t\treceiverType);", "-\t\t\t\t\tthis.bits |= ASTNode.DiscardEnclosingInstance;", "-\t\t\t\t} else {", "-\t\t\t\t\tTypeBinding qTb = qualification.resolveTypeExpecting(scope, enclosingType);", "-\t\t\t\t\tqualification.computeConversion(scope, qTb, qTb);", "+\t\t\t}", "+\t\t\tif (receiverType != null) {", "+\t\t\t\t// prevent (explicit) super constructor invocation from within enum", "+\t\t\t\tif (this.accessMode == ExplicitConstructorCall.Super && receiverType.erasure().id == TypeIds.T_JavaLangEnum) {", "+\t\t\t\t\tscope.problemReporter().cannotInvokeSuperConstructorInEnum(this, methodScope.referenceMethod().binding);", "+\t\t\t\t}", "+\t\t\t\t// qualification should be from the type of the enclosingType", "+\t\t\t\tif (this.qualification != null) {", "+\t\t\t\t\tif (this.accessMode != ExplicitConstructorCall.Super) {", "+\t\t\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(", "+\t\t\t\t\t\t\tthis.qualification,", "+\t\t\t\t\t\t\treceiverType);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!rcvHasError) {", "+\t\t\t\t\t\tReferenceBinding enclosingType = receiverType.enclosingType();", "+\t\t\t\t\t\tif (enclosingType == null) {", "+\t\t\t\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.qualification, receiverType);", "+\t\t\t\t\t\t\tthis.bits |= ASTNode.DiscardEnclosingInstance;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tTypeBinding qTb = this.qualification.resolveTypeExpecting(scope, enclosingType);", "+\t\t\t\t\t\t\tthis.qualification.computeConversion(scope, qTb, qTb);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "-\t\t\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\t\t\t\tif (this.arguments != null) { // still attempt to resolve arguments", "+\t\t\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t\t", "-\t", "-\t\t\tif (arguments != null) {", "+\t\t\tif (this.arguments != null) {", "-\t\t\t\tint length = arguments.length;", "+\t\t\t\tint length = this.arguments.length;", "-\t\t\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on", "+\t\t\t\t\t\targument.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "+\t\t\t\t\tif (receiverType == null) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "-\t\t\t} else if (receiverType.erasure().id == T_JavaLangEnum) {", "+\t\t\t} else if (receiverType.erasure().id == TypeIds.T_JavaLangEnum) {", "-\t\t\tif ((binding = scope.getConstructor(receiverType, argumentTypes, this)).isValidBinding()) {", "-\t\t\t\tif (isMethodUseDeprecated(this.binding, scope, this.accessMode != ImplicitSuper))", "-\t\t\t\t\tscope.problemReporter().deprecatedMethod(binding, this);", "-\t\t\t\tcheckInvocationArguments(scope, null, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);", "-\t\t\t\tif (binding.isPrivate() || receiverType.isLocalType()) {", "-\t\t\t\t\tbinding.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\t\t\tif (receiverType == null) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif ((this.binding = scope.getConstructor(receiverType, argumentTypes, this)).isValidBinding()) {", "+\t\t\t\tif ((this.binding.tagBits & TagBits.HasMissingType) != 0) {", "+\t\t\t\t\tif (!methodScope.enclosingSourceType().isAnonymousType()) {", "+\t\t\t\t\t\tscope.problemReporter().missingTypeInConstructor(this, this.binding);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (isMethodUseDeprecated(this.binding, scope, this.accessMode != ExplicitConstructorCall.ImplicitSuper)) {", "+\t\t\t\t\tscope.problemReporter().deprecatedMethod(this.binding, this);", "-\t\t\t\tif (this.typeArguments != null && this.binding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\t\t\tcheckInvocationArguments(scope, null, receiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t\t\tif (this.binding.isPrivate() || receiverType.isLocalType()) {", "+\t\t\t\t\tthis.binding.original().modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\t\t\t\t}", "+\t\t\t\tif (this.typeArguments != null ", "+\t\t\t\t\t\t&& this.binding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {", "-\t\t\t\tif (binding.declaringClass == null)", "-\t\t\t\t\tbinding.declaringClass = receiverType;", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, binding);", "+\t\t\t\tif (this.binding.declaringClass == null) {", "+\t\t\t\t\tthis.binding.declaringClass = receiverType;", "+\t\t\t\t}", "+\t\t\t\tif (rcvHasError)", "+\t\t\t\t\treturn;", "+\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);"]}], "num": 38599}
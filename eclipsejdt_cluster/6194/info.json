{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f95821e943e40f021f1ffb31d52b3e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3033ca95dcc70d2826d402dbb43b004e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "f2d3caf9f49a021f049c1182aa65112ac7cc9bd8", "commitAfterChange": "656dac68cbd33286fd4921aa8c255b2c9899af18", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\tcase Binding.WILDCARD_TYPE :", "-\t\t\t\t\t\ttagAsUnnecessaryCast(scope, castType);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "+\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE : // intersection type", "+\t\t\t\tif (castType instanceof ReferenceBinding) {", "+\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t// recursively on the type variable upper bound", "+\t\t\t\treturn checkCastTypesCompatibility(scope, castType, ((WildcardBinding)expressionType).bound, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68204356dc736d75d8f8d144c4a65aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "b944419a775a8766a80aaf50d5c9201201448e38", "commitAfterChange": "66a68a77c79dc8161adf91226d8f791e46bc037a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tBinding getDirectBinding(Expression someExpression)", "signatureAfterChange": "  public static Binding getDirectBinding(Expression someExpression)", "diff": ["+", "+public static Binding getDirectBinding(Expression someExpression) {", "+\tif (someExpression instanceof SingleNameReference) {", "+\t\treturn ((SingleNameReference)someExpression).binding;", "+\t} else if (someExpression instanceof FieldReference) {", "+\t\tFieldReference fieldRef = (FieldReference)someExpression;", "+\t\tif (fieldRef.receiver.isThis() && !(fieldRef.receiver instanceof QualifiedThisReference)) {", "+\t\t\treturn fieldRef.binding;", "+\t\t}\t\t\t", "+\t} else if (someExpression instanceof Assignment) {", "+\t\tExpression lhs = ((Assignment)someExpression).lhs;", "+\t\tif ((lhs.bits & ASTNode.IsStrictlyAssigned) != 0) {", "+\t\t\t// i = i = ...; // eq to int i = ...;", "+\t\t\treturn getDirectBinding (((Assignment)someExpression).lhs);", "+\t\t} else if (someExpression instanceof PrefixExpression) {", "+\t\t\t// i = i++; // eq to ++i;", "+\t\t\treturn getDirectBinding (((Assignment)someExpression).lhs);", "-", "-\tBinding getDirectBinding(Expression someExpression) {", "-\t\tif (someExpression instanceof SingleNameReference) {", "-\t\t\treturn ((SingleNameReference)someExpression).binding;", "-\t\t} else if (someExpression instanceof FieldReference) {", "-\t\t\tFieldReference fieldRef = (FieldReference)someExpression;", "-\t\t\tif (fieldRef.receiver.isThis() && !(fieldRef.receiver instanceof QualifiedThisReference)) {", "-\t\t\t\treturn fieldRef.binding;", "-\t\t\t}\t\t\t", "-\t\t}", "+\treturn null;", "+}"]}], "num": 6194}
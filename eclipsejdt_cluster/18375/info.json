{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4c156c4368ed77dd0fd4a4fa989d653", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8004c56330448a125b42fbfaf91c86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f11400a6293169aae30e17b2e27f5adb8ea51511", "commitAfterChange": "f04e3f1ae3453f83dbe0aa3f6ea76c9c43c152ce", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \r \tpublic void loadVariables() throws CoreException", "signatureAfterChange": "\r \r \tpublic void loadVariables() throws CoreException", "diff": ["+\r", "+\t\t// backward compatibility, consider persistent property\t\r", "+\t\tQualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, \"variables\"); //$NON-NLS-1$\r", "+\t\tString xmlString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);\r", "-\t\tString xmlString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(\r", "-\t\t\t\t\t\t\t\tnew QualifiedName(JavaCore.PLUGIN_ID, \"variables\")); //$NON-NLS-1$\r", "-\t\t\tif (xmlString != null) readVariables(xmlString);\r", "+\t\t\tif (xmlString != null){\r", "+\t\t\t\tStringReader reader = new StringReader(xmlString);\r", "+\t\t\t\tElement cpElement;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tDocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\r", "+\t\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();\r", "+\t\t\t\t} catch(SAXException e) {\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t} catch(ParserConfigurationException e){\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\treader.close();\r", "+\t\t\t\t}\r", "+\t\t\t\tif (cpElement == null) return;\r", "+\t\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"variables\")) { //$NON-NLS-1$\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t\tArrayList variableNamesList = new ArrayList();\r", "+\t\t\t\tArrayList variablePathsList = new ArrayList();\r", "+\t\t\t\t\r", "+\t\t\t\tNodeList list= cpElement.getChildNodes();\r", "+\t\t\t\tint length= list.getLength();\r", "+\t\t\t\tfor (int i= 0; i < length; ++i) {\r", "+\t\t\t\t\tNode node= list.item(i);\r", "+\t\t\t\t\tshort type= node.getNodeType();\r", "+\t\t\t\t\tif (type == Node.ELEMENT_NODE) {\r", "+\t\t\t\t\t\tElement element= (Element) node;\r", "+\t\t\t\t\t\tif (element.getNodeName().equalsIgnoreCase(\"variable\")) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tvariablePut( \r", "+\t\t\t\t\t\t\t\telement.getAttribute(\"name\"), //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tnew Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\t\treturn;\r", "+\t\t} finally {\r", "+\t\t\tif (xmlString != null){\r", "+\t\t\t\tResourcesPlugin.getWorkspace().getRoot().setPersistentProperty(qName, null); // flush old one\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\r", "+\t\t// load variables from preferences into cache\r", "+\t\tPreferences preferences = JavaCore.getPlugin().getPluginPreferences();\r", "+\r", "+\t\t// only get variable from preferences not set to their default\r", "+\t\tString[] propertyNames = preferences.propertyNames();\r", "+\t\tint prefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();\r", "+\t\tfor (int i = 0; i < propertyNames.length; i++){\r", "+\t\t\tString propertyName = propertyNames[i];\r", "+\t\t\tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)){\r", "+\t\t\t\tString varName = propertyName.substring(prefixLength);\r", "+\t\t\t\tIPath varPath = new Path(preferences.getString(propertyName));\r", "+\t\t\t\tVariables.put(varName, varPath);\r", "+\t\t\t}\r", "+\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0fbe9e9f2ab734bf2dae3ae6779588", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["-\t\t\tIProgressMonitor progressMonitor,", "-\t\t\tString charsetName ) ", "-\t\tthrows CoreException, UnsupportedEncodingException", "+\t\t\tIProgressMonitor progressMonitor)", "+\tthrows CoreException", "-\t\ttry", "-\t\t{", "+\t\ttry{", "+\t\t\tfinal IFolder genFolder = getGeneratedSourceFolder();", "+\t\t\tIPackageFragmentRoot genFragRoot = null;", "+\t\t\tIPackageFragmentRoot[] roots = _javaProject.getAllPackageFragmentRoots();", "+\t\t\tfor (IPackageFragmentRoot root : roots) {", "+\t\t\t\tif( genFolder.equals(root.getResource()) ){", "+\t\t\t\t\tgenFragRoot = root;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif( genFragRoot == null ){", "+\t\t\t\tthrow new IllegalStateException(\"failed to locate package fragment root for \" + genFolder.getName()); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif( typeName.indexOf('/') != -1 )", "+\t\t\t\ttypeName = typeName.replace('/', '.');", "+\t\t\tint separatorIndex = typeName.lastIndexOf('.');\t\t\t", "+\t\t\tfinal String typeSimpleName;", "+\t\t\tfinal String pkgName;", "+\t\t\tif( separatorIndex == -1 ){", "+\t\t\t\tpkgName = \"\"; //$NON-NLS-1$", "+\t\t\t\ttypeSimpleName = typeName;", "+\t\t\t}", "+\t\t\telse{", "+\t\t\t\tpkgName = typeName.substring(0, separatorIndex);", "+\t\t\t\ttypeSimpleName = typeName.substring(separatorIndex + 1, typeName.length());", "+\t\t\t}", "+\t\t\tIPackageFragment pkgFrag = genFragRoot.createPackageFragment(pkgName, true, progressMonitor);", "+\t\t\tif( pkgFrag == null ){", "+\t\t\t\tIStatus status = AptPlugin.createStatus(", "+\t\t\t\t\t\tnew IllegalStateException(\"failed to locate package '\" + pkgName + \"'\"),  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\"Failure generating file\");  //$NON-NLS-1$", "+\t\t\t\tthrow new CoreException(status);", "+\t\t\t}\t\t\t", "+\t\t\tfinal String cuName = typeSimpleName + \".java\"; //$NON-NLS-1$", "-\t\t\tIFile file = getIFileForTypeName( typeName );", "-", "-\t\t\tbyte[] bytes;", "-\t\t\tif ( charsetName == null || charsetName == \"\" ) //$NON-NLS-1$", "-\t\t\t\tbytes = contents.getBytes();", "-\t\t\telse", "-\t\t\t\tbytes = contents.getBytes( charsetName );", "-\t\t\tInputStream is = new ByteArrayInputStream( bytes );", "-\t\t\t", "+\t\t\tICompilationUnit unit = pkgFrag.getCompilationUnit(cuName);", "-\t\t\tif ( !file.exists() )", "-\t\t\t{", "-\t\t\t\tcreateFoldersForFile( file );", "-\t\t\t\tfile.create( is, true, progressMonitor );", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\t// Check if the content has changed", "+\t\t\tif( unit.exists() ){", "+\t\t\t\tInputStream is = null;", "-\t\t\t\t\toldData = new BufferedInputStream(file.getContents());", "+\t\t\t\t\tis = new ByteArrayInputStream( contents.getBytes() );", "+\t\t\t\t\toldData = new BufferedInputStream( ((IFile)unit.getResource() ).getContents());", "-\t\t\t\tif (contentsDiffer) {", "-\t\t\t\t\tfile.setContents( is, true, true, progressMonitor );", "-\t\t\t\t}", "-\t\t\tfile.setDerived( true );", "-\t\t\t// We used to also make the file read-only. This is a bad idea,", "-\t\t\t// as refactorings then fail in the future, which is worse", "-\t\t\t// than allowing a user to modify a generated file.", "+\t\t\tif( contentsDiffer )", "+\t\t\t\tunit = pkgFrag.createCompilationUnit(cuName, contents, true, progressMonitor);", "-\t\t\t// during a batch build", "-\t\t\tif( parentFile != null )", "-\t\t\t\taddEntryToFileMaps( parentFile, file );", "-\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);", "+\t\t\tif( unit == null ) {", "+\t\t\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Unable to create unit for \" + cuName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tthrow new CoreException(status);", "+\t\t\t}", "+\t\t\telse{", "+\t\t\t\tfinal IFile file = (IFile)unit.getResource();", "+\t\t\t\tfile.setDerived( true );", "+\t\t\t\t// We used to also make the file read-only. This is a bad idea,", "+\t\t\t\t// as refactorings then fail in the future, which is worse", "+\t\t\t\t// than allowing a user to modify a generated file.", "+\t\t\t\t", "+\t\t\t\t// during a batch build", "+\t\t\t\tif( parentFile != null )", "+\t\t\t\t\taddEntryToFileMaps( parentFile, file );", "+\t\t\t\treturn new FileGenerationResult(file, contentsDiffer, updatededSourcePath);", "+\t\t\t}", "+\t\t\t", "-\t\tcatch (CoreException ce) {", "-\t\t\tthrow ce;", "+\t\tcatch(Exception e){", "+\t\t\tAptPlugin.log(e, \"failed to generate type \" + typeName); //$NON-NLS-1$", "-\t\tcatch (UnsupportedEncodingException uee) {", "-\t\t\tthrow uee;", "-\t\t}", "-\t\tcatch ( Throwable t )", "-\t\t{", "-\t\t\tthrow new CoreException(AptPlugin.createStatus(t, \"Could not generate file for type: \" + typeName)); //$NON-NLS-1$", "-\t\t}", "-\t}", "+\t\tIStatus status = AptPlugin.createStatus(new IllegalStateException(\"Failed to generate type \" + typeName), \"Failure generating file\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tthrow new CoreException(status);", "+\t}\t"]}], "num": 18375}
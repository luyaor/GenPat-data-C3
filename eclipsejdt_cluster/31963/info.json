{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cec53deead5037e21c18a3c0a1b88b6f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "076ae01067f8deebe337090ed7fc08a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "commitAfterChange": "e08761f63c783c669290a9af1a8a518a8fe34113", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\tif (originalBinding != this.binding && originalBinding.type != this.binding.type) {", "-\t\t    // extra cast needed if method return type has type variable", "-\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {", "-\t\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "-\t\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "-\t\t    \t\t: runtimeTimeType;", "-\t\t        this.genericCast = originalBinding.type.genericCast(targetType);", "-\t\t    }", "+\t\tTypeBinding originalType = originalBinding.type;", "+\t    // extra cast needed if method return type is type variable", "+\t\tif (originalBinding != this.binding ", "+\t\t\t\t&& originalType != this.binding.type", "+\t\t\t\t&& runtimeTimeType.id != T_JavaLangObject", "+\t\t\t\t&& (originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "+\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "+\t    \t\t: runtimeTimeType;", "+\t        this.genericCast = originalBinding.type.genericCast(targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f78fe797839ba3422b27aefc1c866762", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "commitAfterChange": "e08761f63c783c669290a9af1a8a518a8fe34113", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\tif (originalBinding != this.binding && originalBinding.returnType != this.binding.returnType) {", "-\t\t    // extra cast needed if method return type has type variable", "-\t\t    if ((originalBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {", "-\t\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "-\t\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "-\t\t    \t\t: runtimeTimeType;", "-\t\t        this.valueCast = originalBinding.returnType.genericCast(targetType); ", "-\t\t    }", "+\t\tTypeBinding originalType = originalBinding.returnType;", "+\t    // extra cast needed if method return type is type variable", "+\t\tif (originalBinding != this.binding ", "+\t\t\t\t&& originalType != this.binding.returnType", "+\t\t\t\t&& runtimeTimeType.id != T_JavaLangObject", "+\t\t\t\t&& (originalType.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t    \tTypeBinding targetType = (!compileTimeType.isBaseType() && runtimeTimeType.isBaseType()) ", "+\t    \t\t? compileTimeType  // unboxing: checkcast before conversion", "+\t    \t\t: runtimeTimeType;", "+\t        this.valueCast = originalType.genericCast(targetType); "]}], "num": 31963}
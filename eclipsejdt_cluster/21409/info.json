{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "348b57374d232ac8c0e2929ceb8bca89", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72db780a86c92862a9c802150642d84b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "57b394813576bd0089aca541b5b581458c1b6d75", "commitAfterChange": "99e894848fc56021931fbde74aea8ec7cd4a00da", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": " void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "diff": ["-\tif (!explicitNullness && currentDefault == NONNULL_BY_DEFAULT) {", "+\tif (!explicitNullness ", "+\t\t\t&& (methodBinding.returnType != null && !methodBinding.returnType.isBaseType()) ", "+\t\t\t&& currentDefault == NONNULL_BY_DEFAULT) {", "-\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "+\t\t\t\tif (methodBinding.parameters[j]!= null && !methodBinding.parameters[j].isBaseType()) {", "+\t\t\t\t\tmethodBinding.parameterNonNullness[j] = Boolean.TRUE;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9d07a8d245ed46f9c31f668e277b276", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "6b8ea1fe34801155ff098e297d8447ae3bdf9761", "commitAfterChange": "a12821fa8f0e23855d8771487235dddff394d6b5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, Substitution substitution, int nullStatus, CheckMode mode)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, Substitution substitution, int nullStatus, CheckMode mode)", "diff": ["-\t\t\t\t\t\t\tif (i > 0)", "-\t\t\t\t\t\t\t\tcurrentNullStatus = -1; // don't use beyond the outermost dimension", "-\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, currentNullStatus, i == 0 ? mode : mode.toDetail(), false));", "-\t\t\t\t\t\t\tif (severity == 2)", "-\t\t\t\t\t\t\t\treturn NullAnnotationMatching.NULL_ANNOTATIONS_MISMATCH;", "+\t\t\t\t\t\t\tif (i == 0 && requiredBits == TagBits.AnnotationNullable && nullStatus != -1 && mode.requiredNullableMatchesAll()) {", "+\t\t\t\t\t\t\t\t// toplevel nullable array: no need to check ", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (i > 0)", "+\t\t\t\t\t\t\t\t\tcurrentNullStatus = -1; // don't use beyond the outermost dimension", "+\t\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, currentNullStatus, i == 0 ? mode : mode.toDetail(), false));", "+\t\t\t\t\t\t\t\tif (severity == 2)", "+\t\t\t\t\t\t\t\t\treturn NullAnnotationMatching.NULL_ANNOTATIONS_MISMATCH;", "+\t\t\t\t\t\t\t}", "-\t\t\t\tif (requiredBits != TagBits.AnnotationNullable // nullable lhs accepts everything, ...", "-\t\t\t\t\t\t|| nullStatus == -1) // only at detail/recursion even nullable must be matched exactly", "-\t\t\t\t{", "+\t\t\t\tif (requiredBits == TagBits.AnnotationNullable && nullStatus != -1 && mode.requiredNullableMatchesAll()) {", "+\t\t\t\t\t// at toplevel (having a nullStatus) nullable matches all", "+\t\t\t\t} else {"]}], "num": 21409}
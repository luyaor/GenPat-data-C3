{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89161b092d02b083c16ffef617532647", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10942c52bcf7f4a43690e11e8ba15b3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "cbb53b020eb8f2caef12392ab027078e6626eb25", "commitAfterChange": "cc0d1948b06806e38be7c9e3b2ad032475b51c9c", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 68, "signatureBeforeChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "signatureAfterChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "diff": ["- */", "+}", "-\t\tint length;", "-\t\tlength = 0;", "-\t\tbytes = new byte[SIZE];", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tif(bytes.length == length) {", "-\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "-\t\t\t}", "-\t\t\tbytes[length++]=(byte)b;", "-\t\t}", "-\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "-\t\tif(length > 0) {", "+\t\tbytes = readUntil(input, SEPARATOR1);", "+\t\tif(bytes.length > 0) {", "-\t\tlength = 0;", "-\t\tbytes = new byte[SIZE];", "-\t\tdo {", "-\t\t\tb = (byte)input.read();", "-\t\t\t", "-\t\t\tif(bytes.length == length) {", "-\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "+\t\t{", "+\t\t\tbytes = readUntil(input, SEPARATOR1);", "+\t\t\tbyte[] missing;", "+\t\t\tint j = 0;", "+\t\t\tint length = bytes.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tb = bytes[i];", "+\t\t\t\tif(b == SEPARATOR2) {", "+\t\t\t\t\tmissing = new byte[i - j];", "+\t\t\t\t\tSystem.arraycopy(bytes, j, missing, 0, i - j);", "+\t\t\t\t\ttypeHierarchy.missingTypes.add(new String(missing));", "+\t\t\t\t\tj = i + 1;", "+\t\t\t\t}", "-\t", "-\t\t\tif(b == SEPARATOR1 || b == SEPARATOR2) {", "-\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);;", "-\t\t\t\ttypeHierarchy.missingTypes.add(new String(bytes));", "-\t\t\t\tlength = 0;", "-\t\t\t} else {", "-\t\t\t\tbytes[length++] = b;", "-\t\t\t}", "-\t\t} while(b != SEPARATOR1);", "-", "-\t\t", "+\t\t\tSystem.arraycopy(bytes, j, missing = new byte[length - j], 0, length - j);", "+\t\t\ttypeHierarchy.missingTypes.add(new String(missing));", "+\t\t}", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 1;", "-\t\t\tbytes[0]=(byte)b;", "-\t\t\t", "-\t\t\t// read type memento", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR4){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1 && b != -1) {", "+\t\t\tbytes = readUntil(input, SEPARATOR4, 1);", "+\t\t\tbytes[0] = b;", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 0;", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR4){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "-\t\t\t", "+\t\t\tbytes = readUntil(input, SEPARATOR4);", "-\t\t\t", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 1;", "-\t\t\tbytes[0]=(byte)b;", "-\t\t\t", "-\t\t\t// read type", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR3){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1 && b != -1) {", "+\t\t\tbytes = readUntil(input, SEPARATOR3, 1);", "+\t\t\tbytes[0] = b;", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 0;", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR1){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\t\tbytes = readUntil(input, SEPARATOR1);", "-\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 1;", "-\t\t\tbytes[0]=(byte)b;", "-\t\t\t", "-\t\t\t// read type", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR3){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1 && b != -1) {", "+\t\t\tbytes = readUntil(input, SEPARATOR3, 1);", "+\t\t\tbytes[0] = b;", "-\t\t\tbytes = new byte[SIZE];", "-\t\t\tlength = 0;", "-\t\t\twhile((b = (byte)input.read()) != SEPARATOR1){", "-\t\t\t\tif(bytes.length == length) {", "-\t\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);", "-\t\t\t\t}", "-\t\t\t\tbytes[length++]=(byte)b;", "-\t\t\t}", "-\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\t\tbytes = readUntil(input, SEPARATOR1);", "+\t\tif(b == -1) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatus.ERROR));", "+\t\t}", "-\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatus.ERROR));", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23bb42998f8d2d932bd57362196ad54b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "ae317766273ccd74fe0e1bfd1f3ccc3925356a13", "commitAfterChange": "3fc8f68d913a6f6e40f71f3d7dea34c1f2893e07", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static char[] createDeclarationIndexKey( \t\t\tchar[] typeName, \t\t\tchar[] declaringQualification, \t\t\tchar[] methodName, \t\t\tint argCount, \t\t\tchar[] signature, \t\t\tchar[][] parameterTypes, \t\t\tchar[][] parameterNames, \t\t\tchar[] returnType, \t\t\tint modifiers, \t\t\tchar[] packageName, \t\t\tint typeModifiers, \t\t\tint extraFlags)", "signatureAfterChange": " \tpublic static char[] createDeclarationIndexKey( \t\t\tchar[] typeName, \t\t\tchar[] declaringQualification, \t\t\tchar[] methodName, \t\t\tint argCount, \t\t\tchar[] signature, \t\t\tchar[][] parameterTypes, \t\t\tchar[][] parameterNames, \t\t\tchar[] returnType, \t\t\tint modifiers, \t\t\tchar[] packageName, \t\t\tint typeModifiers, \t\t\tint extraFlags)", "diff": ["-\t\tcountChars = argCount < 10 ? COUNTS[argCount]: (\"/\" + String.valueOf(argCount)).toCharArray(); //$NON-NLS-1$", "+\t\tcountChars = argCount < 10 ? new char[] {COUNTS[argCount][1]}:  String.valueOf(argCount).toCharArray(); ", "-\t\t\t", "-\t\tchar[] returnTypeChars = returnType == null ? CharOperation.NO_CHAR : getTypeErasure(returnType);", "-\t\t", "-\t\t", "-\t\tint typeNameLength = typeName == null ? 0 : typeName.length;", "-\t\tint qualifierLength = declaringQualification == null ? 0 : declaringQualification.length;", "-\t\tint methodNameLength = methodName == null ? 0 : methodName.length;", "-\t\tint packageNameLength = packageName == null ? 0 : packageName.length;", "-\t\tint countCharsLength = countChars.length;", "-\t\tint parameterTypesLength = signature == null ? (parameterTypesChars == null ? 0 : parameterTypesChars.length): signature.length;", "-\t\tint parameterNamesLength = parameterNamesChars == null ? 0 : parameterNamesChars.length;", "-\t\tint returnTypeLength = returnTypeChars.length;", "-\t\t", "-\t\tint resultLength = methodNameLength + countCharsLength + qualifierLength + typeNameLength + 2 /* type modifiers */", "-\t\t\t\t+ packageNameLength + parameterTypesLength + parameterNamesLength + returnTypeLength + 2 /* modifiers*/ + 9; // SEPARATOR = 9", "-\t\tchar[] result = new char[resultLength];", "-\t\t", "-\t\tint pos = 0;", "-\t\tif (methodNameLength > 0) {", "-\t\t\tSystem.arraycopy(methodName, 0, result, pos, methodNameLength);", "-\t\t\tpos += methodNameLength;", "-\t\t}", "-\t\tif (countCharsLength > 0) {", "-\t\t\tSystem.arraycopy(countChars, 0, result, pos, countCharsLength);", "-\t\t\tpos += countCharsLength;", "-\t\t}", "-\t\tresult[pos++] = SEPARATOR;", "-\t\tif (qualifierLength > 0) {", "-\t\t\tSystem.arraycopy(declaringQualification, 0, result, pos, qualifierLength);", "-\t\t\tpos += qualifierLength;", "-\t\t}", "-\t\tresult[pos++] = SEPARATOR;", "-", "-\t\tif (typeNameLength > 0) {", "-\t\t\tSystem.arraycopy(typeName, 0, result, pos, typeNameLength);", "-\t\t\tpos += typeNameLength;", "-\t\t}", "-", "-\t\t", "+\t\tchar[] returnTypeChars = returnType == null ? CharOperation.NO_CHAR : getTypeErasure(returnType);\t\t", "-\t\tresult[pos++] = SEPARATOR;", "-\t\tresult[pos++] = (char) typeModifiersWithExtraFlags;", "-\t\tresult[pos++] = (char) (typeModifiersWithExtraFlags>>16);", "+\t\tint entryIndex = 0;", "+\t\tint numEntries = 10;", "+\t\tchar [][] tmp = new char[numEntries][];", "-\t\tresult[pos++] = SEPARATOR;", "-\t\tif (packageNameLength > 0) {", "-\t\t\tSystem.arraycopy(packageName, 0, result, pos, packageNameLength);", "-\t\t\tpos += packageNameLength;", "-\t\t}", "+\t\ttmp[entryIndex++] = methodName != null ? methodName : CharOperation.NO_CHAR;", "+\t\ttmp[entryIndex++] = countChars;", "+\t\ttmp[entryIndex++] = declaringQualification != null ? declaringQualification : CharOperation.NO_CHAR;", "+\t\ttmp[entryIndex++] = typeName != null ? typeName : CharOperation.NO_CHAR;", "+\t\ttmp[entryIndex++] = new char[] {(char) typeModifiersWithExtraFlags, (char) (typeModifiersWithExtraFlags>>16)};", "+\t\ttmp[entryIndex++] = packageName != null ? packageName : CharOperation.NO_CHAR;", "-\t\t\tresult[pos++] = SEPARATOR;", "-\t\t\tresult[pos++] = SEPARATOR;", "-\t\t\tresult[pos++] = SEPARATOR;", "+\t\t\ttmp[entryIndex++] = CharOperation.NO_CHAR;", "+\t\t\ttmp[entryIndex++] = CharOperation.NO_CHAR;", "-\t\t\tresult[pos++] = SEPARATOR;", "-\t\t\tif (parameterTypesLength > 0) {", "-\t\t\t\tif (signature == null) {", "-\t\t\t\t\tSystem.arraycopy(parameterTypesChars, 0, result, pos, parameterTypesLength);", "-\t\t\t\t} else {", "-\t\t\t\t\tSystem.arraycopy(CharOperation.replaceOnCopy(signature, SEPARATOR, '\\\\'), 0, result, pos, parameterTypesLength);", "-\t\t\t\t}", "-\t\t\t\tpos += parameterTypesLength;", "-\t\t\t}", "-\t\t\t", "-\t\t\tresult[pos++] = SEPARATOR;", "-\t\t\tif (parameterNamesLength > 0) {", "-\t\t\t\tSystem.arraycopy(parameterNamesChars, 0, result, pos, parameterNamesLength);", "-\t\t\t\tpos += parameterNamesLength;", "-\t\t\t}", "-\t\t\t", "-\t\t\tresult[pos++] = SEPARATOR;", "+\t\t\ttmp[entryIndex++] = signature != null ? CharOperation.replaceOnCopy(signature, SEPARATOR, '\\\\') : parameterTypesChars != null ? parameterTypesChars  : CharOperation.NO_CHAR;", "+\t\t\ttmp[entryIndex++] = parameterNamesChars != null ? parameterNamesChars : CharOperation.NO_CHAR;", "-\t\tresult[pos++] = (char) modifiers;", "-\t\tresult[pos++] = (char) (modifiers>>16);", "-\t\tresult[pos++] = SEPARATOR;", "-", "-\t\tif (returnTypeLength > 0) {", "-\t\t\tSystem.arraycopy(returnTypeChars, 0, result, pos, returnTypeLength);", "-\t\t\tpos += returnTypeLength;", "-\t\t}", "-\t\tresult[pos++] = SEPARATOR;", "-\t\treturn result;", "+\t\ttmp[entryIndex++] = new char[] {(char) modifiers, (char) (modifiers>>16)};", "+\t\ttmp[entryIndex] = returnTypeChars;", "+\t\treturn CharOperation.concatWithAll(tmp, '/');"]}], "num": 33962}
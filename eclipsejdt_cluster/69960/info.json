{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e51cc7448c5ef787eaf0c6a1ece6a9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3998e1a6fb440a77c78961a88a629da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 53, "signatureBeforeChange": "  TypeBinding getTypeFromVariantTypeSignature( \t\tSignatureWrapper wrapper, \t\tTypeVariableBinding[] staticVariables, \t\tReferenceBinding enclosingType, \t\tReferenceBinding genericType, \t\tint rank, \t\tchar[][][] missingTypeNames, \t\tTypeAnnotationWalker walker)", "signatureAfterChange": "  TypeBinding getTypeFromVariantTypeSignature( \t\tSignatureWrapper wrapper, \t\tTypeVariableBinding[] staticVariables, \t\tReferenceBinding enclosingType, \t\tReferenceBinding genericType, \t\tint rank, \t\tchar[][][] missingTypeNames, \t\tTypeAnnotationWalker walker)", "diff": ["-\t\t\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER, tagBits);", "+\t\t\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\treturn this.typeSystem.getWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER, annotations);", "-\t\t\ttagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS, tagBits);", "+\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\treturn this.typeSystem.getWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS, annotations);", "-\t\t\ttagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\t\treturn createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND, tagBits);", "+\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\treturn this.typeSystem.getWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND, annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b4d652f82b86d3e84ea033dc6cb006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void testFieldDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testFieldDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\tassertEquals(\"Number of fields\", 4, fieldDecls.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of fields\", 4, fieldDecls.size());", "-\t\tassertTrue(\"Field i exists\", fieldI != null);", "-\t\tassertEquals(\"Field i constant expression is 1\", \"1\", fieldI.getConstantExpression());", "-\t\tassertEquals(\"Field i constant value is 1\", \"1\", fieldI.getConstantValue().toString());", "-\t\tassertEquals(\"Field i type is int\", \"int\", fieldI.getType().toString());", "-\t\tassertTrue(\"Field f exists\", fieldF != null);", "-\t\tassertEquals(\"Field f constant expression is null\", null, fieldF.getConstantExpression());", "-\t\tassertEquals(\"Field f constant value is null\", null, fieldF.getConstantValue());", "-\t\tassertEquals(\"Field f type is float\", \"float\", fieldF.getType().toString());", "-\t\tassertTrue(\"Field s exists\", fieldS != null);", "-\t\tassertEquals(\"Field s constant expression is hello\", \"hello\", fieldS.getConstantExpression());", "-\t\tassertEquals(\"Field s constant value is hello\", \"hello\", fieldS.getConstantValue().toString());", "-\t\tassertEquals(\"Field s type is java.lang.String\", \"java.lang.String\", fieldS.getType().toString());", "-\t\tassertTrue(\"Field gc exists\", fieldGC != null);", "-\t\tassertEquals(\"Field gc constant expression is null\", null, fieldGC.getConstantExpression());", "-\t\tassertEquals(\"Field gc constant value is null\", null, fieldGC.getConstantValue());", "-\t\tassertEquals(\"Field gc type is java.util.GregorianCalendar\", \"java.util.GregorianCalendar\", fieldGC.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field i exists\", fieldI != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field i constant expression is 1\", \"1\", fieldI.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field i constant value is 1\", \"1\", fieldI.getConstantValue().toString());", "+\t\tProcessorTestStatus.assertEquals(\"Field i type is int\", \"int\", fieldI.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field f exists\", fieldF != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field f constant expression is null\", null, fieldF.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field f constant value is null\", null, fieldF.getConstantValue());", "+\t\tProcessorTestStatus.assertEquals(\"Field f type is float\", \"float\", fieldF.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field s exists\", fieldS != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field s constant expression is hello\", \"hello\", fieldS.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field s constant value is hello\", \"hello\", fieldS.getConstantValue().toString());", "+\t\tProcessorTestStatus.assertEquals(\"Field s type is java.lang.String\", \"java.lang.String\", fieldS.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"Field gc exists\", fieldGC != null);", "+\t\tProcessorTestStatus.assertEquals(\"Field gc constant expression is null\", null, fieldGC.getConstantExpression());", "+\t\tProcessorTestStatus.assertEquals(\"Field gc constant value is null\", null, fieldGC.getConstantValue());", "+\t\tProcessorTestStatus.assertEquals(\"Field gc type is java.util.GregorianCalendar\", \"java.util.GregorianCalendar\", fieldGC.getType().toString());"]}], "num": 69960}
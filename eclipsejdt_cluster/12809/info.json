{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07f86a59d2093cbee138251ef9870e61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f806a9b77228286e8e00a2ce599948c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "commitAfterChange": "eba08540864c5a072bab6eda44e20e08ad2dd7a0", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "diff": ["+\t\tif (level >= AST.JLS8) {", "+\t\t\tif (!safeSubtreeMatch(node.getReceiverType(), o.getReceiverType())) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (!safeSubtreeMatch(node.getReceiverQualifier(), o.getReceiverQualifier())) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5bf8c8585dacc721a05f559d914c56e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "5aaaa6bdbb696b87990cc8f57fe071291cdfe15f", "commitAfterChange": "b7f75a17e67c2bd2897084e9995204be442d247d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t", "-\t\t\t// collect output locations", "-\t\t\tfinal HashSet outputs = new HashSet();", "-\t\t\toutputs.add(javaProject.getOutputLocation());", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {", "-\t\t\t\tIPath output = entries[i].getOutputLocation();", "-\t\t\t\tif (output != null) {", "-\t\t\t\t\toutputs.add(output);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// collect output locations if source is project (see http://bugs.eclipse.org/bugs/show_bug.cgi?id=32041)", "+\t\t\t\t\t\tfinal HashSet outputs = new HashSet();", "+\t\t\t\t\t\tif (sourceFolder.getType() == IResource.PROJECT) {", "+\t\t\t\t\t\t\toutputs.add(javaProject.getOutputLocation());", "+\t\t\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\t\t\tIPath output = entries[j].getOutputLocation();", "+\t\t\t\t\t\t\t\tif (output != null) {", "+\t\t\t\t\t\t\t\t\toutputs.add(output);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\tif (outputs.contains(proxy.requestFullPath())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\t}"]}], "num": 12809}
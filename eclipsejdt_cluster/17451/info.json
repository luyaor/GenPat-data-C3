{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f771fca98abde94e6d7a666eb38b4e4b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b651cb39f994e029e8642a66da3654f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "ba9e3449f64c91617b5be3decfc1def93b0260fd", "commitAfterChange": "fc981e7b8dbede817ba4f79a36a2d73299506e96", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tTypeBinding resultType = TypeBinding.wellKnownType(scope, result & 0x0000F);", "+\t\tif (checkCastCompatibility()) {", "+\t\t\tif (originalLhsType.id != T_JavaLangString && resultType.id != T_JavaLangString) {", "+\t\t\t\tif (!checkCastTypesCompatibility(scope, originalLhsType, resultType, null)) {", "+\t\t\t\t\tscope.problemReporter().invalidOperator(this, originalLhsType, expressionType);", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858ea87f4cef43adb34840000bec2813", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (!areTypesCastCompatible(scope, checkType, expressionType)) {", "-\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkType);", "-\t\t\treturn null;", "+\t\tboolean necessary = checkCastTypesCompatibility(scope, checkType, expressionType);", "+\t\tif (!necessary) {", "+\t\t\tscope.problemReporter().unnecessaryInstanceof(this, checkType);", "-\t\tthis.resolvedType = BooleanBinding;", "-\t\treturn BooleanBinding;", "+\t\treturn this.resolvedType = BooleanBinding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f9f6c4af4fd4c191c6a3f1137b835bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "42fae1490ed2d92e261335f913496df0bca26df8", "commitAfterChange": "c61a3471dc232eb282f499e766b6240869dfcc94", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (this.checkCastTypesCompatibility(scope, leftType, rightType, null) ", "-\t\t\t\t|| this.checkCastTypesCompatibility(scope, rightType, leftType, null)) {", "+\t\tif ((!leftType.isBaseType() || leftType == NullBinding) // cannot compare: Object == (int)0", "+\t\t\t\t&& (!rightType.isBaseType() || rightType == NullBinding)", "+\t\t\t\t&& (this.checkCastTypesCompatibility(scope, leftType, rightType, null) ", "+\t\t\t\t\t\t|| this.checkCastTypesCompatibility(scope, rightType, leftType, null))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66fdda7506d01c1f9826f5fd7d7041a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t", "-\t\t\t\tboolean necessary = checkCastTypesCompatibility(scope, this.resolvedType, expressionType);", "-\t\t\t\texpression.computeConversion(scope, this.resolvedType, expressionType);", "-\t\t\t\tif (!necessary && this.expression.resolvedType != null) { // cannot do better if expression is not bound", "-\t\t\t\t\tthis.bits |= UnnecessaryCastMask;", "+\t\t\t\tcheckCastTypesCompatibility(scope, this.resolvedType, expressionType, this.expression);", "+\t\t\t\tthis.expression.computeConversion(scope, this.resolvedType, expressionType);", "+\t\t\t\tif ((this.bits & UnnecessaryCastMask) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d02d3e5975d39cd9a5871d7b3974caf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "bf33f3a91a6da19e79db165110d4a3ad6ee71dd0", "commitAfterChange": "e5112ad3430fec45ff2b1f0ba393b967c7039732", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t} else {", "-\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, checkedType, expressionType, null);", "-\t\t\tif (!isLegal) {", "-\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);", "-\t\t\t}", "+\t\t}", "+\t\tif ((expressionType != TypeBinding.NULL && expressionType.isBaseType()) // disallow autoboxing", "+\t\t\t\t|| !checkCastTypesCompatibility(scope, checkedType, expressionType, null)) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, checkedType);"]}], "num": 17451}
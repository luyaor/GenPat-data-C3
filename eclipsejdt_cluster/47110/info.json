{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7999edbb6b016ce30cfc81d9887360ee", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092b1b728898cfc5d3d2c59597af82bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "7065da01531bf4c318c59206b62aa1503a948abe", "commitAfterChange": "0d303c13e0085d7aef9947e46f37c617f206a066", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static FieldDeclaration convert(ISourceField sourceField)", "signatureAfterChange": " \tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type)", "diff": ["-\tprivate static FieldDeclaration convert(ISourceField sourceField) {", "+\tprivate FieldDeclaration convert(ISourceField sourceField, TypeDeclaration type) {", "-\t\t/* conversion of field constant: if not present, then cannot generate binary against ", "-\t\t\tconverted parse nodes */", "-\t\t/*", "-\t\tif (field.modifiers & AccFinal){", "+\t\tif (this.needFieldInitialization) {", "+\t\t\t/* conversion of field constant */", "+\t\t\tif (initializationSource != null) {", "+\t\t\t\tif (this.parser == null) {", "+\t\t\t\t\tthis.parser = ", "+\t\t\t\t\t\tnew Parser(", "+\t\t\t\t\t\t\tthis.problemReporter, ", "+\t\t\t\t\t\t\ttrue, ", "+\t\t\t\t\t\t\tthis.problemReporter.options.sourceLevel >= CompilerOptions.JDK1_4);", "+\t\t\t\t}", "+\t\t\t\tthis.parser.parse(field, type, this.unit, initializationSource);", "+\t\t\t}", "-\t\t*/", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ce4d407783cd16f8f146c4381fbd9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["+\t\t", "+\t\tTypeParameter[] typeParameters = method.typeParameters();", "+\t    // do not construct type variables if source < 1.5", "+\t\tif (typeParameters == null || environment().options.sourceLevel < ClassFileConstants.JDK1_5) {", "+\t\t    method.binding.typeVariables = NoTypeVariables;", "+\t\t} else {", "+\t\t\tmethod.binding.typeVariables = createTypeVariables(typeParameters, method.binding);", "+\t\t\tmethod.binding.modifiers |= AccGenericSignature;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b4e820670cd8ede06b8594f5e19d2b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": "   public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["+\t// need enclosing type to access type variables", "+\tchar[] enclosingTypeName = binaryType.getEnclosingTypeName();", "+\tif (enclosingTypeName != null) {", "+\t\t// attempt to find the enclosing type if it exists in the cache (otherwise - resolve it when requested)", "+\t\tthis.enclosingType = environment.getTypeFromConstantPoolName(enclosingTypeName, 0, -1, true); // pretend parameterized to avoid raw", "+\t\tthis.tagBits |= MemberTypeMask;   // must be a member type not a top-level or local type", "+\t\tthis.tagBits |= \tHasUnresolvedEnclosingType;", "+\t\tif (this.enclosingType().isStrictfp())", "+\t\t\tthis.modifiers |= AccStrictfp;", "+\t\tif (this.enclosingType().isDeprecated())", "+\t\t\tthis.modifiers |= AccDeprecatedImplicitly;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280f094ffcb7457a8deebfc1a9cd01ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "2a23c62d5a3b74783613a638cca640e487db040a", "commitAfterChange": "79c4ba61903262b42e2a1f500afb283891f6e429", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding targetMethod)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding targetMethod)", "diff": ["+\t\t\t\t\t\tSyntheticMethodBinding olderBridge = getSyntheticBridgeMethod(method);", "+\t\t\t\t\t\tMethodBinding olderTarget;", "+\t\t\t\t\t\tif (olderBridge == null || ((olderTarget = olderBridge.targetMethod) == null)) {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (olderTarget.returnType.erasure() != targetMethod.returnType.erasure()", "+\t\t\t\t\t\t\t\t|| !olderTarget.areParameterErasuresEqual(targetMethod)) {", "+\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=83162", "+\t\t\t\t\t\t\tthis.scope.problemReporter().inheritedMethodsHaveNameClash(this, method, inheritedMethodToBridge);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f14ead1a777534cf127c38db85e9006", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "e5c43dd471dbf8471a49f6e1d0d0bd8b0674d309", "commitAfterChange": "5ddd4f3ebd7249766144e83fbecfadbf5a91a48a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " \tMethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\t\t\tif (method.isDefaultConstructor()) {", "+\t\t\tif (method.isDefaultConstructor())", "-\t\t\t}", "+", "+\t\tArgument[] argTypes = method.arguments;", "+\t\tint argLength = argTypes == null ? 0 : argTypes.length;", "+\t\tif (argLength > 0 && environment().options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tif (argTypes[--argLength].isVarArgs)", "+\t\t\t\tmethod.binding.modifiers |= AccVarargs;", "+\t\t\twhile (--argLength >= 0) {", "+\t\t\t\tif (argTypes[argLength].isVarArgs)", "+\t\t\t\t\tproblemReporter().illegalVararg(argTypes[argLength], method);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5771e18c505dad8ad6198a1794c7345e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "b9b3b8c1fedf5d6daa213336839897b001a3416e", "commitAfterChange": "bdd2ddc06125eff9d34246fb7941b569e87e3115", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["+\t\t\t\t\t\t\tchar[] signature = method.getGenericSignature();", "+\t\t\t\t\t\t\tif (signature == null) {", "+\t\t\t\t\t\t\t\tsignature = descriptor;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (name.length > 0)  {", "+\t\t\t\t\t\t\t\taddMethodDeclaration(", "+\t\t\t\t\t\t\t\t\t\tname,", "+\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\tmethod.getSelector(),", "+\t\t\t\t\t\t\t\t\t\tparameterTypes == null ? 0 : parameterTypes.length,", "+\t\t\t\t\t\t\t\t\t\t\t\tsignature,\t", "+\t\t\t\t\t\t\t\t\t\t\t\tparameterTypes,", "+\t\t\t\t\t\t\t\t\t\t\t\tmethod.getArgumentNames(),", "+\t\t\t\t\t\t\t\t\t\t\t\treturnType,", "+\t\t\t\t\t\t\t\t\t\t\t\tmethod.getModifiers(),", "+\t\t\t\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\t\t\t\tmodifiers,", "+\t\t\t\t\t\t\t\t\t\t\t\texceptionTypes,", "+\t\t\t\t\t\t\t\t\t\t\t\textraFlags);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0cb0f68c96b75f8ef6d809eb071329", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["+\t\t\t", "+\t\t\tint extraFlags = ExtraFlags.getExtraFlags(reader);", "+\t\t\tboolean noConstructor = true;", "-\t\t\t\t\t\taddConstructorDeclaration(className, parameterTypes, exceptionTypes);", "+\t\t\t\t\t\tnoConstructor = false;", "+\t\t\t\t\t\tchar[] signature = method.getGenericSignature();", "+\t\t\t\t\t\tif (signature == null) {", "+\t\t\t\t\t\t\tif (reader.isNestedType() && ((modifiers & ClassFileConstants.AccStatic) == 0)) {", "+\t\t\t\t\t\t\t\tsignature = removeFirstSyntheticParameter(descriptor);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tsignature = descriptor;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\taddConstructorDeclaration(", "+\t\t\t\t\t\t\t\tname,", "+\t\t\t\t\t\t\t\tparameterTypes == null ? 0 : parameterTypes.length,", "+\t\t\t\t\t\t\t\tsignature,\t", "+\t\t\t\t\t\t\t\tparameterTypes,", "+\t\t\t\t\t\t\t\tmethod.getArgumentNames(),", "+\t\t\t\t\t\t\t\tmethod.getModifiers(),", "+\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\tmodifiers,", "+\t\t\t\t\t\t\t\texceptionTypes,", "+\t\t\t\t\t\t\t\textraFlags);", "+\t\t\t}", "+\t\t\tif (noConstructor) {", "+\t\t\t\taddDefaultConstructorDeclaration(className, packageName, modifiers, extraFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d4473e7037f2a37bd87ee1c06ef3100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bef60d1fb53f507f903d66ac6e04e719aa5b50f4", "commitAfterChange": "3b418eaef41604a68c97dae4dd32fddcb839b515", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tif (methodDecl != null && methodDecl.binding != null) {", "-\t\t\t\t\t\t\tTypeVariableBinding typeVariable = methodDecl.binding.getTypeVariable(name);", "-\t\t\t\t\t\t\tif (typeVariable != null)\treturn typeVariable;", "+\t\t\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\t\t\tif (methodDecl.binding != null) {", "+\t\t\t\t\t\t\t\tTypeVariableBinding typeVariable = methodDecl.binding.getTypeVariable(name);", "+\t\t\t\t\t\t\t\tif (typeVariable != null)", "+\t\t\t\t\t\t\t\t\treturn typeVariable;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// use the methodDecl's typeParameters to handle problem cases when the method binding doesn't exist", "+\t\t\t\t\t\t\t\tTypeParameter[] params = methodDecl.typeParameters();", "+\t\t\t\t\t\t\t\tfor (int i = params == null ? 0 : params.length; --i >= 0;)", "+\t\t\t\t\t\t\t\t\tif (CharOperation.equals(params[i].name, name))", "+\t\t\t\t\t\t\t\t\t\tif (params[i].binding != null && params[i].binding.isValidBinding())", "+\t\t\t\t\t\t\t\t\t\t\treturn params[i].binding;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cf21096059e9bd2abbca8dd81b22958", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "c738f8a2f8c38edb037b1844278da54dc7b0f406", "commitAfterChange": "2ceff175173889ef3caa9cfcd05ec98c46b15cac", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "signatureAfterChange": " protected int matchLevelForType(char[] simpleNamePattern, char[] qualificationPattern, TypeBinding type)", "diff": ["-\treturn matchesType(simpleNamePattern, qualificationPattern, fullyQualifiedTypeName)", "+", "+\t// NOTE: if case insensitive search then simpleNamePattern & qualificationPattern are assumed to be lowercase", "+\tchar[] pattern;", "+\tif (simpleNamePattern == null) {", "+\t\tif (qualificationPattern == null) return ACCURATE_MATCH;", "+\t\tpattern = CharOperation.concat(qualificationPattern, ONE_STAR, '.');", "+\t} else {", "+\t\tpattern = qualificationPattern == null", "+\t\t\t? CharOperation.concat(ONE_STAR, simpleNamePattern)", "+\t\t\t: CharOperation.concat(qualificationPattern, simpleNamePattern, '.');", "+\t}", "+\treturn CharOperation.match(pattern, fullyQualifiedTypeName, this.isCaseSensitive)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d2b0f4238a2d6a92cb0e82e19b35ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "b7bb9d2950572af77f85c2c708c3816367817930", "commitAfterChange": "6cea394a74122bc3b2f5fee1a70c7921f0e635d8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void resolveReceiver()", "signatureAfterChange": "  \tpublic void resolveReceiver()", "diff": ["-\t\tif ((this.receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(this.receiver.qualifyingName.getName(), enclosingReceiver)) {", "-\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis(this.receiver, enclosingReceiver);\t\t\t\t\t", "-\t\t}", "-\t}", "+\t\tchar[][] tokens = (this.receiver.qualifyingName == null) ? null : this.receiver.qualifyingName.getName();", "+\t\tif (this.isConstructor()) {", "+\t\t\tif (tokens == null || tokens.length > 1 || !CharOperation.equals(enclosingReceiver.sourceName(), tokens[0])) {", "+\t\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis(this.receiver, enclosingReceiver);", "+\t\t\t\tthis.receiver.qualifyingName = null;", "+\t\t} else if (tokens != null && tokens.length > 0) {", "+\t\t\tthis.scope.problemReporter().illegalQualifierForExplicitThis2(this.receiver);", "+\t\t\tthis.receiver.qualifyingName = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81c88f73a5e6eaa37d7a40322e4ed1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "24242f27a56569515f3a766b79af5b4f6c52fffe", "commitAfterChange": "270b2d0dc66fd2f8c8012264ce82bca4953b85cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  boolean isValueProvidedUsingAnnotation(FieldDeclaration fieldDecl)", "signatureAfterChange": "  boolean isValueProvidedUsingAnnotation(FieldDeclaration fieldDecl)", "diff": ["+\t\t\t} else if (annotation.resolvedType.id == TypeIds.T_OrgSpringframeworkBeansFactoryAnnotationAutowired) {", "+\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\tif (memberValuePairs == Annotation.NoValuePairs)", "+\t\t\t\t\treturn true;", "+\t\t\t\tfor (int j = 0; j < memberValuePairs.length; j++) {", "+\t\t\t\t\tif (CharOperation.equals(memberValuePairs[j].name, TypeConstants.REQUIRED))", "+\t\t\t\t\t\treturn memberValuePairs[j].value instanceof TrueLiteral;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cafb73d21df16a56d8b03222049e7168", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "2d17c3f3748f5061b72ef32975e0ca27c9d144b7", "commitAfterChange": "e5a2719fd3070db36626a31ae631e601cad79bf0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void process(CompilationUnitDeclaration unit, int i)", "signatureAfterChange": " \tpublic void process(CompilationUnitDeclaration unit, int i)", "diff": ["+\t\tif (this.annotationProcessorManager != null) {", "+\t\t\tthis.annotationProcessorManager.processAnnotation(unit);", "+    \t\tICompilationUnit[] newUnits = this.annotationProcessorManager.getNewUnits();", "+\t\t\tfor (int j = 0, max = newUnits.length; j < max; j++) {", "+\t\t\t\tthis.accept(newUnits[j], null);", "+\t\t\t}", "+\t\t\tthis.annotationProcessorManager.reset();", "+\t\t\tif (!this.options.generateClassFiles) {", "+\t\t\t\t// compiler was called with -proc:only", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d1f7cbc3469d8a05b10e93d0dd1a5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "6ac14fb94b619629e9d1194f1e68de6d5f7b6969", "commitAfterChange": "54f21b938e43513d8b3615d9c7068527e047df4e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " private boolean isAffectedByJavaProject(IJavaElementDelta delta, IJavaElement element)", "signatureAfterChange": " private boolean isAffectedByJavaProject(IJavaElementDelta delta, IJavaElement element)", "diff": ["+\t\t\t\tif (this.focusType != null) {", "+\t\t\t\t\t// if the hierarchy's project is on the added project classpath, then the hierarchy has changed", "+\t\t\t\t\tclasspath = ((JavaProject)element).getExpandedClasspath(true);", "+\t\t\t\t\tIPath hierarchyProject = javaProject().getPath();", "+\t\t\t\t\tfor (int i = 0; i < classpath.length; i++) {", "+\t\t\t\t\t\tif (classpath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT ", "+\t\t\t\t\t\t\t\t&& classpath[i].getPath().equals(hierarchyProject)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f29539ce461c6472266f1a547106b7d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "16854241687f97764faa9f85ee1f3765fd3ba174", "commitAfterChange": "38d650016715ef9203472d6cae057b9ec4d53fc1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\tchar[] qualifiedName = this.getQualifiedName();\r", "+\t\tif (qualifiedName == null || (this.parsedUnit = (CompilationUnitDeclaration)this.locator.parsedUnits.get(qualifiedName)) == null) {\r", "+\t\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\t}\r", "+\t\t\t\t\t\t\tif (this.parsedUnit.scope == null) {\r", "+\t\t\t\t\t\t\t\t// bindings were not created (case of a FieldReferencePattern that doesn't need resolve, \r", "+\t\t\t\t\t\t\t\t// but we need to resolve because of a SingleNameReference being a potential match)\r", "+\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);\r", "+\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.completeTypeBindings(this.parsedUnit, true);\r", "+\t\t\t\t\t\t\t}\r"]}], "num": 47110}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fd278f8608724b8d0dcb042deac9ddf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766d5e833d53d798d49350f08e8cfc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "7fa614421be752542e93fc8394ff005421401e06", "commitAfterChange": "8c40adfe15c680e040fa4c1f51e65e6986081149", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": "  public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["+\t\t", "+\t\tCompilationUnitDeclaration focusUnit = null;", "+\t\tBinaryTypeBinding focusBinaryBinding = null;", "+\t\tIType focus = this.requestor.getType();", "+\t\tOpenable focusOpenable = null;", "+\t\tif (focus != null) {", "+\t\t\tif (focus.isBinary()) {", "+\t\t\t\tfocusOpenable = (Openable)focus.getClassFile();", "+\t\t\t} else {", "+\t\t\t\tfocusOpenable = (Openable)focus.getCompilationUnit();", "+\t\t\t}", "+\t\t}", "+\t\t\t\t\t\tif (openable.equals(focusOpenable)) {", "+\t\t\t\t\t\t\tfocusUnit = parsedUnit;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (openable.equals(focusOpenable)) {", "+\t\t\t\t\t\t\tfocusBinaryBinding = binaryTypeBinding;", "+\t\t\t\t\t\t}", "-\t\treportHierarchy();", "+\t\treportHierarchy(focus, focusUnit, focusBinaryBinding);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e610fc79691484d14cf03fd2cfb81b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "a9fc88e66080e1f53be7d1d3e6e899cec4143f11", "commitAfterChange": "df511f7d8700bc6fecb763badf839262e3c7877a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IMarker[] reconcile() throws JavaModelException", "signatureAfterChange": " \r public IMarker[] reconcile() throws JavaModelException", "diff": ["- */\r", "+ */ \r", "-\tthis.reconcile(null);\r", "-\t// report syntax problems\r", "-\treturn null;\r", "-/* DISABLED because of 1GAJJ3A: ITPJUI:WINNT - Deadlock in Java Editor\r", "-\ttry {\r", "-\t\tWorkingCopyElementInfo info = (WorkingCopyElementInfo)JavaModelManager.getJavaModelManager().getInfo(this);\r", "-\t\tIProblem[] problems = info.problems;\r", "-\t\tint length; \r", "-\t\tIResource resource = getOriginalElement().getUnderlyingResource();\r", "-\t\t\r", "-\t\t// flush previous markers first\r", "-\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.TRANSIENT_PROBLEM, true,  IResource.DEPTH_ONE);\r", "-\t\tresource.getWorkspace().deleteMarkers(markers);\r", "+\t// create the delta builder (this remembers the current content of the cu)\r", "+\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(this);\r", "-\t\t// create markers if needed\r", "-\t\tif (problems == null || (length = problems.length) == 0) return null;\r", "-\t\tmarkers = new IMarker[length];\r", "-\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\tIProblem problem = problems[i];\r", "-\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.TRANSIENT_PROBLEM);\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.ID, problem.getID());\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.CHAR_START, problem.getSourceStart());\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.CHAR_END, problem.getSourceEnd() + 1);\r", "-\t\t\tmarker.setAttribute(IJavaModelMarker.LINE_NUMBER, problem.getSourceLineNumber());\r", "-\t\t\tmarker.setAttribute(IMarker.LOCATION, \"#\" + problem.getSourceLineNumber());\r", "-\t\t\tmarker.setAttribute(IMarker.MESSAGE, problem.getMessage());\r", "-\t\t\tmarker.setAttribute(IMarker.PRIORITY, (problem.isWarning() ? IMarker.PRIORITY_LOW : IMarker.PRIORITY_HIGH));\r", "-\t\t\tmarkers[i] = marker;\r", "+\t// update the element infos with the content of the working copy\r", "+\tif (this.problemRequestor != null) this.problemRequestor.clear();\r", "+\tthis.makeConsistent(this.problemRequestor, this.problemRequestor != null, null);\r", "+\t//if (this.problemRequestor != null) this.problemRequestor.done();\r", "+\r", "+\t// build the deltas\r", "+\tdeltaBuilder.buildDeltas();\r", "+\t\r", "+\t// fire the deltas\r", "+\tboolean shouldFire = false;\r", "+\tJavaModelManager manager = null;\r", "+\tif (deltaBuilder.delta != null) {\r", "+\t\tmanager = (JavaModelManager)JavaModelManager.getJavaModelManager();\r", "+\t\tif (deltaBuilder.delta.getAffectedChildren().length > 0) {\r", "+\t\t\tmanager.registerJavaModelDelta(deltaBuilder.delta);\r", "+\t\t\tshouldFire = true;\r", "-\t\treturn markers;\r", "-\t} catch (CoreException e) {\r", "-\t\tthrow new JavaModelException(e);\r", "-*/\r", "+\tif (shouldFire) manager.fire();\r", "+\r", "+\treturn null;\r"]}], "num": 6343}
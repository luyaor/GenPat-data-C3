{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c48acea402ab99fc186ae5e8a675d40", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f5f63e99cb0f9c290de1b769172a5e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bd3a3cad1ce734989fe638578b24f55571172fd2", "commitAfterChange": "adc07cf3b793a0c93fc3ffa3b36d812e63e0ed07", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "  \tprivate void findClassField(char[] token, TypeBinding receiverType, Scope scope)", "diff": ["-\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\tcreateNonGenericTypeSignature(", "-\t\t\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "-\t\t\t\t\t\t\t\tCLASS));", "+\t\t\t\tchar[] signature = ", "+\t\t\t\t\tcreateNonGenericTypeSignature(", "+\t\t\t\t\t\tCharOperation.concatWith(JAVA_LANG, '.'),", "+\t\t\t\t\t\tCLASS);", "+\t\t\t\tif (this.compilerOptions.sourceLevel > ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t// add type argument", "+\t\t\t\t\tchar[] typeArgument = getTypeSignature(receiverType);", "+\t\t\t\t\tint oldLength = signature.length;", "+\t\t\t\t\tint argumentLength = typeArgument.length;", "+\t\t\t\t\tint newLength = oldLength + argumentLength + 2;", "+\t\t\t\t\tSystem.arraycopy(signature, 0, signature = new char[newLength], 0, oldLength - 1);", "+\t\t\t\t\tsignature[oldLength - 1] = '<';", "+\t\t\t\t\tSystem.arraycopy(typeArgument, 0, signature, oldLength , argumentLength);", "+\t\t\t\t\tsignature[newLength - 2] = '>';", "+\t\t\t\t\tsignature[newLength - 1] = ';';", "+\t\t\t\t}", "+\t\t\t\tproposal.setSignature(signature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "902c625a86492eefcc90e124c289c13a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 545, "methodNumberAfterChange": 545, "signatureBeforeChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, int severity)", "signatureAfterChange": " public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, Statement.NullAnnotationStatus status)", "diff": ["-public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, int severity) ", "+public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding providedType, TypeBinding requiredType, Statement.NullAnnotationStatus status) ", "-\tString[] arguments = new String[] {", "-\t\tString.valueOf(requiredType.nullAnnotatedReadableName(this.options, false)),", "-\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, false))", "-\t};", "-\tString[] shortArguments = new String[] {", "-\t\tString.valueOf(requiredType.nullAnnotatedReadableName(this.options, true)),", "-\t\tString.valueOf(providedType.nullAnnotatedReadableName(this.options, true))", "-\t};", "-\tint problemId = severity == 1 ? IProblem.NullityUncheckedTypeAnnotationDetail : IProblem.NullityMismatchingTypeAnnotation;\t\t\t", "-\tthis.handle(", "-\t\t\tproblemId,", "-\t\t\targuments, shortArguments, expression.sourceStart, expression.sourceEnd);", "+\tString[] arguments ;", "+\tString[] shortArguments;", "+\t\t", "+\tint problemId = 0;", "+\tif (status.superTypeHint != null) {", "+\t\tproblemId = (status.isUnchecked()", "+\t\t\t? IProblem.NullityUncheckedTypeAnnotationDetailSuperHint", "+\t\t\t: IProblem.NullityMismatchingTypeAnnotationSuperHint);", "+\t\targuments      = new String[] { null, null, status.superTypeHintName(this.options, false) };", "+\t\tshortArguments = new String[] { null, null, status.superTypeHintName(this.options, true) };", "+\t} else {", "+\t\tproblemId = (status.isUnchecked()", "+\t\t\t? IProblem.NullityUncheckedTypeAnnotationDetail", "+\t\t\t: IProblem.NullityMismatchingTypeAnnotation);", "+\t\targuments      = new String[2];", "+\t\tshortArguments = new String[2];", "+\t}", "+\targuments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, false));", "+\targuments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, false));", "+\tshortArguments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, true));", "+\tshortArguments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, true));", "+\tthis.handle(problemId, arguments, shortArguments, expression.sourceStart, expression.sourceEnd);"]}], "num": 20840}
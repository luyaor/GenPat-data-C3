{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af888237b6cc7ecc79346a2d3e570c1e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bab5a1ef6d9293dab7bb3ebb73f1011", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding)", "signatureAfterChange": " \t \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding)", "diff": ["+\t", "-", "-\t\t// Look at member types", "-\t\tReferenceBinding[] memberTypeBindings = NoMemberTypes;", "-\t\tif (referenceContext.memberTypes != null) {", "-\t\t\tint size = referenceContext.memberTypes.length;", "-\t\t\tmemberTypeBindings = new ReferenceBinding[size];", "-\t\t\tint count = 0;", "-\t\t\tnextMember : for (int i = 0; i < size; i++) {", "-\t\t\t\tTypeDeclaration memberContext = referenceContext.memberTypes[i];", "-\t\t\t\tif (memberContext.isInterface()", "-\t\t\t\t\t&& sourceType.isNestedType()", "-\t\t\t\t\t&& sourceType.isClass()", "-\t\t\t\t\t&& !sourceType.isStatic()) {", "-\t\t\t\t\tproblemReporter().nestedClassCannotDeclareInterface(memberContext);", "-\t\t\t\t\tcontinue nextMember;", "-\t\t\t\t}", "-\t\t\t\tReferenceBinding type = sourceType;", "-\t\t\t\t// check that the member does not conflict with an enclosing type", "-\t\t\t\tdo {", "-\t\t\t\t\tif (CharOperation.equals(type.sourceName, memberContext.name)) {", "-\t\t\t\t\t\tproblemReporter().hidingEnclosingType(memberContext);", "-\t\t\t\t\t\tcontinue nextMember;", "-\t\t\t\t\t}", "-\t\t\t\t\ttype = type.enclosingType();", "-\t\t\t\t} while (type != null);", "-\t\t\t\t// check that the member type does not conflict with another sibling member type", "-\t\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\t\tif (CharOperation.equals(referenceContext.memberTypes[j].name, memberContext.name)) {", "-\t\t\t\t\t\tproblemReporter().duplicateNestedType(memberContext);", "-\t\t\t\t\t\tcontinue nextMember;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\tClassScope memberScope = new ClassScope(this, memberContext);", "-\t\t\t\tmemberTypeBindings[count++] = memberScope.buildType(sourceType, packageBinding);", "-\t\t\t}", "-\t\t\tif (count != size)", "-\t\t\t\tSystem.arraycopy(memberTypeBindings, 0, memberTypeBindings = new ReferenceBinding[count], 0, count);", "-\t\t}", "-\t\tsourceType.memberTypes = memberTypeBindings;", "+\t\tbuildTypeVariables();", "+\t\tbuildMemberTypes();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3244f8fc2803756a1c619e94b1d30c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntersectionCastTypeReference.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "diff": ["-\t\treturn (this.resolvedType = null);", "+", "+\t\tint length = this.typeReferences.length;", "+\t\tReferenceBinding[] intersectingTypes = new ReferenceBinding[length];", "+\t\tboolean hasError = false;", "+\t\t", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tfinal TypeReference typeReference = this.typeReferences[i];", "+\t\t\tTypeBinding type = typeReference.resolveType(scope, checkBounds);", "+\t\t\tif (type == null || ((type.tagBits & TagBits.HasMissingType) != 0)) {", "+\t\t\t\thasError = true;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tif (i == 0) {", "+\t\t\t\tif (type.isBaseType()) { // rejected in grammar for i > 0", "+\t\t\t\t\tscope.problemReporter().onlyReferenceTypesInIntersectionCast(typeReference);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (type.isArrayType()) { // javac rejects the pedantic cast: (X[] & Serializable & Cloneable) new X[0], what is good for the goose ...", "+\t\t\t\t\tscope.problemReporter().illegalArrayTypeInIntersectionCast(typeReference);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t} else if (!type.isInterface()) {  // TODO: understand how annotations play here ...", "+\t\t\t\tscope.problemReporter().boundMustBeAnInterface(typeReference, type);", "+\t\t\t\thasError = true;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tfor (int j = 0; j < i; j++) {", "+\t\t\t\tif (intersectingTypes[j] == type) {", "+\t\t\t\t\tscope.problemReporter().duplicateBoundInIntersectionCast(typeReference);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tintersectingTypes[i] = (ReferenceBinding) type;", "+\t\t}", "+\t\tif (hasError) {", "+\t\t\treturn null;", "+\t\t}", "+\t\treturn (this.resolvedType = scope.environment().createIntersectionCastType(intersectingTypes));"]}], "num": 21345}
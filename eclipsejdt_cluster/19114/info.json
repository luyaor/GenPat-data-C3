{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ed71bbf90020498735b7a4e6eebb873", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "351fbf5b3bf374feacb63ad32a1624ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tpublic void generateOptimizedStringConcatenationCreation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "signatureAfterChange": " \t \tpublic void generateOptimizedStringConcatenationCreation( \t\tBlockScope blockScope, \t\tCodeStream codeStream, \t\tint typeID)", "diff": ["-\t\t\t\t\tleft.implicitConversion & 0xF);", "+\t\t\t\t\tleft.implicitConversion & COMPILE_TYPE_MASK);", "-\t\t\t\t\tright.implicitConversion & 0xF);", "+\t\t\t\t\tright.implicitConversion & COMPILE_TYPE_MASK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62eec40da571346d49cd0d8b299a931c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void generateStringConcatenationAppend(BlockScope blockScope, Expression oper1, Expression oper2)", "signatureAfterChange": " public void generateStringConcatenationAppend(BlockScope blockScope, Expression oper1, Expression oper2)", "diff": ["-\t\toper1.generateOptimizedStringConcatenationCreation(blockScope, this, oper1.implicitConversion & 0xF);", "+\t\toper1.generateOptimizedStringConcatenationCreation(blockScope, this, oper1.implicitConversion & COMPILE_TYPE_MASK);", "-\toper2.generateOptimizedStringConcatenation(blockScope, this, oper2.implicitConversion & 0xF);", "+\toper2.generateOptimizedStringConcatenation(blockScope, this, oper2.implicitConversion & COMPILE_TYPE_MASK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d2aa80c7a2053485a8d24bcd6d9443", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "05bd6362ebc3db4accc519070d9c8a9ecd2a788b", "commitAfterChange": "905cf94d64f942e28e58015355605b9b9383c577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t\t\tif ((left.implicitConversion & 0xF) /*compile-time*/ == T_boolean) {", "+\t\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) /*compile-time*/ == T_boolean) {", "-\t\t\tif ((left.implicitConversion & 0xF) /*compile-time*/ == T_boolean) {", "+\t\t\tif ((left.implicitConversion & COMPILE_TYPE_MASK) /*compile-time*/ == T_boolean) {"]}], "num": 19114}
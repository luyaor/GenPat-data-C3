{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b33a9d9f63125273a6f8c9bfabca18db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7b8479e14857f0ef8e00183b1a3bed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "76d395ddd90431ef7cb4486078cb51e978a5ad63", "commitAfterChange": "e6a17a8fa461eb3f06e289d5024883e9ab8df861", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " \tpublic void test0208() throws JavaModelException", "signatureAfterChange": " \tpublic void test0208() throws JavaModelException", "diff": ["-\t\t\t\"@Override(x= 1)\\n\" +", "+\t\t\t\"/*start*/@Override(x= 1)/*end*/\\n\" +", "-\t\tASTNode node = buildAST(", "+\t\tNormalAnnotation normalAnnotation = (NormalAnnotation) buildAST(", "+\t\t\t\tfalse,", "+\t\t\t\ttrue,", "-\t\tassertNotNull(\"No node\", node);", "-\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\tString problems =", "-\t\t\t\"The annotation @Override is disallowed for this location\\n\" +", "-\t\t\t\"The attribute x is undefined for the annotation type Override\";", "-\t\tassertProblemsSize(compilationUnit, 2, problems);", "-\t\tnode = getASTNode(compilationUnit, 0);", "-\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\tList modifiers = typeDeclaration.modifiers();", "-\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "-\t\tassertTrue(\"Wrong type\", modifiers.get(0) instanceof NormalAnnotation);", "-\t\tNormalAnnotation normalAnnotation = (NormalAnnotation) modifiers.get(0);", "-\t\tassertEquals(\"Wrong size\", 1, pairs.length);", "-\t\tassertNotNull(\"Should not be null\", pairs[0].getValue());", "+\t\tassertEquals(\"Wrong size\", 0, pairs.length);", "+\t\tList values = normalAnnotation.values();", "+\t\tassertEquals(\"Wrong size\", 1, values.size());", "+\t\tMemberValuePair pair = (MemberValuePair) values.get(0);", "+\t\tassertNotNull(\"no value\", pair.getValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c13ec5aef78a7d66a361ced7470da9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 105, "signatureBeforeChange": " \t  \tpublic void test0094() throws JavaModelException", "signatureAfterChange": " \t  \tpublic void test0094() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" +", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@Retention(RetentionPolicy.SOURCE)\\n\" +", "-\t\t\t\t\"@Target(ElementType.METHOD)\\n\" +", "-\t\t\t\t\"@interface ThrowAwayMethod {\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\t/**\\n\" +", "-\t\t\t\t\"\t * Comment for <code>test</code>\\n\" +", "-\t\t\t\t\"\t */\\n\" +", "-\t\t\t\t\"\tprotected final Test test;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\t/**\\n\" +", "-\t\t\t\t\"\t * @param test\\n\" +", "-\t\t\t\t\"\t */\\n\" +", "-\t\t\t\t\"\tThrowAwayMethod(Test test) {\\n\" +", "-\t\t\t\t\"\t\tthis.test= test;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/ThrowAwayMethod.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy,", "-\t\t\t\tfalse);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"import java.lang.annotation.Target;\\n\" +", "+\t\t\t\"import java.lang.annotation.Retention;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@Retention(RetentionPolicy.SOURCE)\\n\" +", "+\t\t\t\"@Target(ElementType.METHOD)\\n\" +", "+\t\t\t\"@interface ThrowAwayMethod {\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t/**\\n\" +", "+\t\t\t\"\t * Comment for <code>test</code>\\n\" +", "+\t\t\t\"\t */\\n\" +", "+\t\t\t\"\tprotected final Test test;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t/**\\n\" +", "+\t\t\t\"\t * @param test\\n\" +", "+\t\t\t\"\t */\\n\" +", "+\t\t\t\"\tThrowAwayMethod(Test test) {\\n\" +", "+\t\t\t\"\t\tthis.test= test;\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/ThrowAwayMethod.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy,", "+\t\t\tfalse);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());"]}], "num": 54060}
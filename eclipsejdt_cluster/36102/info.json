{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32aa9a474d4ccd416e7f638c6148d1ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fab6cf983ef11991cfe166f1c7f177e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "fa5b9584504523e008d75d3102bbd9fdb41a99d1", "commitAfterChange": "be28c707007790646fb850eb239db7444413aebf", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": " \tpublic void test0152() throws JavaModelException", "signatureAfterChange": " \tpublic void test0152() throws JavaModelException", "diff": ["-\t\tassertTrue(\"The field is not malformed\", isMalformed(node)); //$NON-NLS-1$", "+\t\tassertTrue(\"The field is malformed\", !isMalformed(node)); //$NON-NLS-1$", "+\t\tnode = getASTNode((CompilationUnit) result, 0, 1);", "+\t\tassertNotNull(\"Expression should not be null\", node); //$NON-NLS-1$", "+\t\tassertTrue(\"The method is not malformed\", isMalformed(node)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcc47055924207da83d258f0d0b52f4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "3631cf47f01fc0da1be7732f6c067adbe5bd4214", "commitAfterChange": "bcf1522935dfbdb0bc359777ceee5d7211666ccc", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic void test0150() throws JavaModelException", "signatureAfterChange": " \tpublic void test0150() throws JavaModelException", "diff": ["-\t\tassertTrue(\"The package declaration is malformed\", !isMalformed(unit.getPackage())); //$NON-NLS-1$", "+\t\tassertTrue(\"The package declaration is not malformed\", isMalformed(unit.getPackage())); //$NON-NLS-1$", "-\t\tassertTrue(\"The first import is not malformed\", isMalformed((ASTNode) imports.get(0))); //$NON-NLS-1$", "+\t\tassertTrue(\"The first import is malformed\", !isMalformed((ASTNode) imports.get(0))); //$NON-NLS-1$"]}], "num": 36102}
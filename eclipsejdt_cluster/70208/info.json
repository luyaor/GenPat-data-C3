{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98a61b79f62f795ced294e92b0be7461", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0665bc002cc9cb5ed83d6109c5be2319", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": "\t\t  \tpublic void testWildcardType()", "signatureAfterChange": "\t\t  \tpublic void testWildcardType()", "diff": ["+\t\tx.setBound(b);", "+\t\tx.setUpperBound(false);", "+\t\tassertTrue(x.isUpperBound() == false);", "+\t\tx.setUpperBound(true);", "+\t\tassertTrue(x.isUpperBound() == true);", "+\t\tx.setBound(null);", "+\t\tx.setUpperBound(false);", "+\t\tassertTrue(x.isUpperBound() == false);", "+\t\tx.setUpperBound(true);", "+\t\tassertTrue(x.isUpperBound() == true);", "+\t\t", "+\t\t// make sure that setBound(Type,boolean) works", "+\t\tassertTrue(x.getBound() == b);", "+\t\tassertTrue(x.getBound() == null);", "+\t\tassertTrue(x.getBound() == b);", "-\t\tx.setBound(null, false);  // isUpper ignored when bound is null", "-\t\tassertTrue(x.isUpperBound() == true);", "+\t\tx.setBound(null, false);", "+\t\tassertTrue(x.getBound() == null);", "+\t\tassertTrue(x.isUpperBound() == false);", "-\t\t\t\ts1.setBound(x, true);", "+\t\t\t\ts1.setBound(x);", "-\t\t\t\ts1.setBound(null, true);", "+\t\t\t\ts1.setBound(null);", "-\t\t\t\tx.setBound((Type) value, true);", "+\t\t\t\tx.setBound((Type) value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "193172d2b3247c0c85144847553ff1d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t \tpublic void testSimpleName()", "signatureAfterChange": " \t \tpublic void testSimpleName()", "diff": ["+\t\t// \"assert\" only became a keyword in J2SE 1.4 and we do *not* want to", "+\t\t// preclude the AST API from being used to analyze pre-1.4 code", "+\t\t", "+\t\t// check that \"enum\" is not considered a keyword", "+\t\t// \"enum\" only became a keyword in J2SE 1.5 and we do *not* want to", "+\t\t// preclude the AST API from being used to analyze pre-1.5 code", "+\t\tx.setIdentifier(\"enum\"); //$NON-NLS-1$", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tAnnotationTypeDeclaration atd = ast.newAnnotationTypeDeclaration();", "+\t\t\tatd.setName(x);", "+\t\t\tassertTrue(x.isDeclaration() == true);", "+\t\t\tatd.setName(ast.newSimpleName(\"b\")); //$NON-NLS-1$", "+\t\t\tassertTrue(x.isDeclaration() == false);", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tAnnotationTypeMemberDeclaration atmd = ast.newAnnotationTypeMemberDeclaration();", "+\t\t\tatmd.setName(x);", "+\t\t\tassertTrue(x.isDeclaration() == true);", "+\t\t\tatmd.setName(ast.newSimpleName(\"b\")); //$NON-NLS-1$", "+\t\t\tassertTrue(x.isDeclaration() == false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba27cbce2515d1886f25fb6b8ee3401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java", "commitBeforeChange": "6a514a348b687707873fde0f6184e6b09d1607ee", "commitAfterChange": "15cb47257592351618c0f415edc117a6b315a803", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static ASTNode oneOfEach(AST target)", "signatureAfterChange": " \tpublic static ASTNode oneOfEach(AST target)", "diff": ["+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tExtraDimension ed = target.newExtraDimension();", "+\t\t\tmd.extraDimensions().add(ed);", "+\t\t}", "+\t\tif (target.apiLevel() >= JLS4_INTERNAL) {", "+\t\t\tUnionType ut = target.newUnionType();", "+\t\t\tcatchClause.getException().setType(ut);", "+\t\t}", "+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tIntersectionType it = target.newIntersectionType();", "+\t\t\tcastExpression.setType(it);", "+\t\t}", "+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tLambdaExpression lambdaExpression = target.newLambdaExpression();", "+\t\t\tz.add(lambdaExpression);", "+\t\t}"]}], "num": 70208}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adb975b72bd95d9fd3e0328fe9524e35", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "358b2fe3c799f6fd1ab26eeb9109350c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "749aa1c27be4903ff44650cbac7fb5e2a22e8990", "commitAfterChange": "500f73122f66aacb24affb61ea382198072d398b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public final String getLocalizedMessage(int id, int elaborationId, String[] problemArguments)", "signatureAfterChange": " public final String getLocalizedMessage(int id, int elaborationId, String[] problemArguments)", "diff": ["-\tString message = (String) this.messageTemplates.get(keyFromID(id & IProblem.IgnoreCategoriesMask));", "-\tif (message == null) {", "+\tString rawMessage = (String) this.messageTemplates.get(keyFromID(id & IProblem.IgnoreCategoriesMask));", "+\tif (rawMessage == null) {", "+\tchar[] message = rawMessage.toCharArray();", "-\t\t// make the substitution. String.replaceAll(String,String) cannot be used since it is", "-\t\t// defined only in 1.4", "-\t\tmessage = new String(CharOperation.replace(", "-\t\t\t\tmessage.toCharArray(),", "-\t\t\t\tFIRST_ARGUMENT,", "-\t\t\t\telaboration.toCharArray()));", "+\t\tmessage = CharOperation.replace(message, FIRST_ARGUMENT, elaboration.toCharArray());", "-\tchar[] messageWithNoDoubleQuotes =", "-\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "+\tmessage = CharOperation.replace(message, DOUBLE_QUOTES, SINGLE_QUOTE);", "-\tif (problemArguments == null) return new String(messageWithNoDoubleQuotes);", "+\tif (problemArguments == null) {", "+\t\treturn new String(message);", "+\t}", "-\tint length = messageWithNoDoubleQuotes.length;", "+\tint length = message.length;", "-\t\tif ((end = CharOperation.indexOf('{', messageWithNoDoubleQuotes, start)) > -1) {", "+\t\tif ((end = CharOperation.indexOf('{', message, start)) > -1) {", "-\t\t\toutput.append(messageWithNoDoubleQuotes, start, end - start);", "-\t\t\tif ((start = CharOperation.indexOf('}', messageWithNoDoubleQuotes, end + 1)) > -1) {", "-\t\t\t\tint index = -1;", "-\t\t\t\tString argId = new String(messageWithNoDoubleQuotes, end + 1, start - end - 1);", "+\t\t\toutput.append(message, start, end - start);", "+\t\t\tif ((start = CharOperation.indexOf('}', message, end + 1)) > -1) {", "-\t\t\t\t\tindex = Integer.parseInt(argId);", "-\t\t\t\t\toutput.append(problemArguments[index]);", "+\t\t\t\t\toutput.append(problemArguments[CharOperation.parseInt(message, end + 1, start - end - 1)]);", "-\t\t\t\t\toutput.append(messageWithNoDoubleQuotes, end + 1, start - end);", "+\t\t\t\t\toutput.append(message, end + 1, start - end);", "-\t\t\t\t\t\t+ message", "+\t\t\t\t\t\t+ new String(message)", "-\t\t\t\toutput.append(messageWithNoDoubleQuotes, end, length);", "+\t\t\t\toutput.append(message, end, length);", "-\t\t\tif (output == null) return new String(messageWithNoDoubleQuotes);", "-\t\t\toutput.append(messageWithNoDoubleQuotes, start, length - start);", "+\t\t\tif (output == null) {", "+\t\t\t\treturn new String(message);", "+\t\t\t}", "+\t\t\toutput.append(message, start, length - start);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7ebdb3cb9a8735e4a5b895332f64df2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "4070a80ec708f74aed77de9c7062557e3db209e8", "commitAfterChange": "e40a14518c878498ad39595017fa5c41fd3a84fd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " public char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\tStringBuffer buffer = new StringBuffer();", "-\tbuffer.append(outermostEnclosingType().computeUniqueKey(isLeaf));", "-\t", "-\t// innsert $sourceStart", "-\tint semicolon = buffer.lastIndexOf(\";\"); //$NON-NLS-1$", "-\tbuffer.insert(semicolon, '$');", "-\tsemicolon = buffer.lastIndexOf(\";\"); //$NON-NLS-1$", "-\tbuffer.insert(semicolon, this.sourceStart);", "-\tint length = buffer.length();", "-\tchar[] uniqueKey = new char[length];", "-\tbuffer.getChars(0, length, uniqueKey, 0);", "-\treturn uniqueKey;", "+\tchar[] outerKey = outermostEnclosingType().computeUniqueKey(isLeaf);", "+\tint semicolon = CharOperation.lastIndexOf(';', outerKey);", "+", "+\t// insert $sourceStart", "+\treturn CharOperation.concat(", "+\t\tCharOperation.concat(", "+\t\t\tCharOperation.subarray(outerKey, 0, semicolon),", "+\t\t\tString.valueOf(", "+\t\t\tthis.sourceStart).toCharArray(),", "+\t\t\t'$'),", "+\t\tCharOperation.subarray(outerKey, semicolon, outerKey.length));"]}], "num": 68926}
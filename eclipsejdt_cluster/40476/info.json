{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2db7c98fbe12e277ba4e7d2f6dfe78f2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a56d4ae2c42865f5255fe3347c8db7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "cc547ec5c074d17ff882a095dbec68dcad72a87a", "commitAfterChange": "99250bacae54994417cccb9e6d497671bd34c73a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.continueLabel != null) {", "+\t\tif (this.continueLabel == null) {", "+\t\t\tconditionLabel.place();", "+\t\t\tif ((condition != null) && (condition.constant == Constant.NotAConstant)) {", "+\t\t\t\tcondition.generateOptimizedBoolean(scope, codeStream, null, breakLabel, true);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// jump over the actionBlock", "+\t\t\tif ((condition != null)", "+\t\t\t\t&& (condition.constant == Constant.NotAConstant)", "+\t\t\t\t&& !((action == null || action.isEmptyBlock()) && (increments == null))) {", "+\t\t\t\tconditionLabel.tagBits |= BranchLabel.USED;", "+\t\t\t\tint jumpPC = codeStream.position;", "+\t\t\t\tcodeStream.goto_(conditionLabel);", "+\t\t\t\tcodeStream.recordPositionsFrom(jumpPC, condition.sourceStart);", "+\t\t\t}", "-\t\t// jump over the actionBlock", "-\t\tif ((condition != null)", "-\t\t\t&& (condition.constant == Constant.NotAConstant)", "-\t\t\t&& !((action == null || action.isEmptyBlock()) && (increments == null))) {", "-\t\t\tconditionLabel.tagBits |= BranchLabel.USED;", "-\t\t\tint jumpPC = codeStream.position;", "-\t\t\tcodeStream.goto_(conditionLabel);", "-\t\t\tcodeStream.recordPositionsFrom(jumpPC, condition.sourceStart);", "-\t\t}", "+", "-\t\t}", "-", "-\t\t// May loose some local variable initializations : affecting the local variable attributes", "-\t\tif (preCondInitStateIndex != -1) {", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preCondInitStateIndex);", "-\t\t}", "-", "-\t\t// generate the condition", "-\t\tconditionLabel.place();", "-\t\tif ((condition != null) && (condition.constant == Constant.NotAConstant)) {", "-\t\t\tcondition.generateOptimizedBoolean(scope, codeStream, actionLabel, null, true);", "-\t\t} else {", "-\t\t\tif (continueLabel != null) {", "+\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "+\t\t\tif (preCondInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preCondInitStateIndex);", "+\t\t\t}\t\t", "+\t\t\t// generate the condition", "+\t\t\tconditionLabel.place();", "+\t\t\tif ((condition != null) && (condition.constant == Constant.NotAConstant)) {", "+\t\t\t\tcondition.generateOptimizedBoolean(scope, codeStream, actionLabel, null, true);", "+\t\t\t} else {", "+\t\t\t", "+\t\t} else {", "+\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "+\t\t\tif (preCondInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, preCondInitStateIndex);", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94cf9506d8ba1207611faf182e7c19cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tLabel falseLabel;", "+\t\t\tLabel falseLabel = null;", "-\t\t\t\t(falseLabel = new Label(codeStream)),", "+\t\t\t\thasElsePart ? (falseLabel = new Label(codeStream)) : endifLabel,", "-\t\t\tif (hasElsePart && !thenExit) {", "-\t\t\t\tthis.thenStatement.branchChainTo(endifLabel);", "-\t\t\t\tint position = codeStream.position;", "-\t\t\t\tcodeStream.goto_(endifLabel);", "-\t\t\t\tcodeStream.updateLastRecordedEndPC((this.thenStatement instanceof Block) ? ((Block) this.thenStatement).scope : currentScope, position);", "-\t\t\t\t//goto is tagged as part of the thenAction block", "-\t\t\t}", "-\t\t\tfalseLabel.place();", "-\t\t} else {", "-\t\t\t\t// generate boolean condition", "-\t\t\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tcodeStream,", "-\t\t\t\t\tendifLabel,", "-\t\t\t\t\tnull,", "-\t\t\t\t\ttrue);", "-\t\t\t} else {", "-\t\t\t\t// generate condition side-effects", "-\t\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "-\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\tif (!thenExit) {", "+\t\t\t\t\tthis.thenStatement.branchChainTo(endifLabel);", "+\t\t\t\t\tint position = codeStream.position;", "+\t\t\t\t\tcodeStream.goto_(endifLabel);", "+\t\t\t\t\t//goto is tagged as part of the thenAction block", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC((this.thenStatement instanceof Block) ? ((Block) this.thenStatement).scope : currentScope, position);", "+\t\t\t\t\t// generate else statement", "+\t\t\t\t}", "+\t\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "+\t\t\t\tif (elseInitStateIndex != -1) {", "+\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\telseInitStateIndex);", "+\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, elseInitStateIndex);", "+\t\t\t\t}", "+\t\t\t\tif (falseLabel != null) falseLabel.place();", "+\t\t\t\tthis.elseStatement.generateCode(currentScope, codeStream);", "-\t\t}", "-\t\t// generate else statement", "-\t\tif (hasElsePart) {", "+\t\t} else if (hasElsePart) {", "+\t\t\t// generate boolean condition", "+\t\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tendifLabel,", "+\t\t\t\tnull,", "+\t\t\t\ttrue);", "+\t\t\t// generate else statement", "+\t\t} else {", "+\t\t\t// generate condition side-effects", "+\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\tendifLabel.place();", "+\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\tendifLabel.place();"]}], "num": 40476}
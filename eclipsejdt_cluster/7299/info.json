{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a39ea357b3d0c8b60865033eade81468", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "844e14ec054666866a81a0f341367354", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "signatureAfterChange": " \tprivate void extractReferenceFromConstantPool(byte[] contents, ClassFileReader reader) throws ClassFormatException", "diff": ["-\t\t\t\t\t\t// add a constructor reference", "-\t\t\t\t\t\tchar[] className = replace('/', '.', extractClassName(constantPoolOffsets, reader, i)); // so that it looks like java.lang.String", "-\t\t\t\t\t\taddConstructorReference(className, extractArgCount(type));", "+\t\t\t\t\t\t// get class name and see if it's a local type or not", "+\t\t\t\t\t\tchar[] className = extractClassName(constantPoolOffsets, reader, i);", "+\t\t\t\t\t\tboolean localType = false;", "+\t\t\t\t\t\tif (className !=  null) {", "+\t\t\t\t\t\t\tfor (int c = 0, max = className.length; c < max; c++) {", "+\t\t\t\t\t\t\t\tswitch (className[c]) {", "+\t\t\t\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\t\t\t\tclassName[c] = '.';", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase '$':", "+\t\t\t\t\t\t\t\t\t\tlocalType = true;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// add a constructor reference, use class name to extract arg count if it's a local type to remove synthetic parameter", "+\t\t\t\t\t\taddConstructorReference(className, extractArgCount(type, localType?className:null));", "-\t\t\t\t\t\taddMethodReference(name, extractArgCount(type));", "+\t\t\t\t\t\taddMethodReference(name, extractArgCount(type, null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8af46df97a6ca244b47553420232025", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "commitAfterChange": "a49b0379fae683770f815e7e32d76b4ebea892ec", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tfinal TypeBinding typeBinding, \t\tchar[][] excludeNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "signatureAfterChange": " \tprivate void findVariableName( \t\tchar[] token, \t\tchar[] qualifiedPackageName, \t\tchar[] qualifiedSourceName, \t\tchar[] sourceName, \t\tfinal TypeBinding typeBinding, \t\tchar[][] discouragedNames, \t\tfinal char[][] forbiddenNames, \t\tint dim, \t\tint kind, \t\tint modifiers)", "diff": ["-\t\tchar[][] excludeNames,", "+\t\tchar[][] discouragedNames,", "+\t\tfinal char[][] forbiddenNames,", "+\t\t\t\tint l = forbiddenNames == null ? 0 : forbiddenNames.length;", "+\t\t\t\tfor (int i = 0; i < l; i++) {", "+\t\t\t\t\tif (CharOperation.equals(forbiddenNames[i], name, false)) return;", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\t\texcludeNames,", "+\t\t\t\t\tdiscouragedNames,", "-\t\t\t\t\texcludeNames,", "+\t\t\t\t\tdiscouragedNames,", "-\t\t\t\t\texcludeNames,", "+\t\t\t\t\tdiscouragedNames,"]}], "num": 7299}
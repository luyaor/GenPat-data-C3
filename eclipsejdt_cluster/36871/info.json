{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd80eeb5283c052ac455f4c52e7b328f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fb17603e261343791d812c811dd49c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "128a99659b73df0d65c1b7965233f291b8bbcedc", "commitAfterChange": "2d75a247df9701b0f81bd7f30330af100821c0c6", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\tLambdaExpression copy =  (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tLambdaExpression copy =  (LambdaExpression) parser.parseLambdaExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "-\t\tcopy.valueCompatible = this.valueCompatible;", "-\t\tcopy.voidCompatible = this.voidCompatible;", "-\t\tcopy.shapeAnalysisComplete = this.shapeAnalysisComplete;", "+", "+\t\tif (copy != null) { // ==> syntax errors", "+\t\t\tcopy.valueCompatible = this.valueCompatible;", "+\t\t\tcopy.voidCompatible = this.voidCompatible;", "+\t\t\tcopy.shapeAnalysisComplete = this.shapeAnalysisComplete;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad34a14f3b668100dc760060a0f475c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\treturn (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tLambdaExpression copy =  (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, ", "+\t\tcopy.valueCompatible = this.valueCompatible;", "+\t\tcopy.voidCompatible = this.voidCompatible;", "+\t\tcopy.shapeAnalysisComplete = this.shapeAnalysisComplete;", "+\t\treturn copy;"]}], "num": 36871}
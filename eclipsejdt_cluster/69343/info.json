{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdaa5e2da9b17542117485aabdcb6345", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76edef6f70700666a71fd58414bfda6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "27e347b6c930838a35dee8fcbff4b393aa0d8dde", "commitAfterChange": "32efda4ca470a8ccf71ee2d08eca76774c3b3fec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\tboolean compareOK = false;", "+\t\tboolean compareOK = false, outCompareOK = false, errCompareOK = false;", "-\t\t\tcompareOK = semiNormalizedComparison(expectedOutOutputString,", "-\t\t\t\t\toutOutputString, outputDirNormalizer)", "-\t\t\t\t\t&& semiNormalizedComparison(expectedErrOutputString,", "-\t\t\t\t\t\t\terrOutputString, outputDirNormalizer);", "+\t\t\tcompareOK =", "+\t\t\t\t(outCompareOK = semiNormalizedComparison(expectedOutOutputString,", "+\t\t\t\t\toutOutputString, outputDirNormalizer))", "+\t\t\t\t&& (errCompareOK = semiNormalizedComparison(expectedErrOutputString,", "+\t\t\t\t\t\terrOutputString, outputDirNormalizer));", "-\t\tassertTrue(\"Unexpected output for invocation with arguments [\"", "-\t\t\t\t+ commandLine + \"]:\\n--[START]--\\n\" + outOutputString + \"\\n\"", "-\t\t\t\t+ errOutputString + \"\\n---[END]---\\n\", compareOK);", "+\t\tif (!outCompareOK) {", "+\t\t\t// calling assertEquals to benefit from the comparison UI", "+\t\t\t// (need appropriate exception)", "+\t\t\tassertEquals(", "+\t\t\t\t\t\"Unexpected standard output for invocation with arguments [\"", "+\t\t\t\t\t\t+ commandLine + \"]\",", "+\t\t\t\t\texpectedOutOutputString,", "+\t\t\t\t\toutOutputString);", "+\t\t}", "+\t\tif (!errCompareOK) {", "+\t\t\tassertEquals(", "+\t\t\t\t\t\"Unexpected error output for invocation with arguments [\"", "+\t\t\t\t\t\t+ commandLine + \"]\",", "+\t\t\t\t\texpectedErrOutputString,", "+\t\t\t\t\terrOutputString);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf32e04c5afa5ac733e8d9e7c313e7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor)", "signatureAfterChange": " \t \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedOutputString,  \t\tString[] classLibraries, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor customRequestor)", "diff": ["+\t", "-\t\tString expectedSuccessOutputString, ", "-\t\tString[] classLib,", "+\t\tString expectedOutputString, ", "+\t\tString[] classLibraries,", "-\t\tICompilerRequestor clientRequestor) {", "-\t\trunConformTest(", "-\t\t  testFiles, ", "-\t\t  expectedSuccessOutputString, ", "-\t\t  classLib,", "-\t\t  shouldFlushOutputDirectory, ", "-\t\t  vmArguments, ", "-\t\t  customOptions,", "-\t\t  clientRequestor,", "-\t\t  false /* do not skip javac for this peculiar test */); ", "+\t\tICompilerRequestor customRequestor) {", "+\t\trunTest(", "+\t \t\t// test directory preparation", "+\t\t\tshouldFlushOutputDirectory /* should flush output directory */,", "+\t\t\ttestFiles /* test files */,", "+\t\t\t// compiler options", "+\t\t\tclassLibraries /* class libraries */,", "+\t\t\tcustomOptions /* custom options */,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tcustomRequestor /* custom requestor */,", "+\t\t\t// compiler results", "+\t\t\tfalse /* expecting no compiler errors */,", "+\t\t\tnull /* do not check compiler log */,", "+\t\t\t// runtime options", "+\t\t\tfalse /* do not force execution */,", "+\t\t\tvmArguments /* vm arguments */, ", "+\t\t\t// runtime results", "+\t\t\texpectedOutputString /* expected output string */,", "+\t\t\tnull /* do not check error string */,", "+\t\t\t// javac options", "+\t\t\tJavacTestOptions.DEFAULT /* default javac test options */);"]}], "num": 69343}
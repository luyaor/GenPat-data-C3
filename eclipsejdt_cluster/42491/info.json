{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f151ed6101adb677825cd0095bb9beb5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "295e061ed90ba4ebb1d4b845811787e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic void test021()", "signatureAfterChange": " \tpublic void test021()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"true\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Y.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class Y<V extends String> extends X<V> {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\"The type parameter V should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic static <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\"The type parameter W should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in Y.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic static <W extends String> Y<W> make(Class<W> clazz) {\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method make(Class<W>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in Y.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic static <U extends Object> X<U> make(Class<U> clazz) {\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method make(Class<U>) has the same erasure make(Class<T>) as another method in type Y<V>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Y.java (at line 13)\\n\" + ", "+\t\t\t\"\tY.make(getClazz());\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation make(Class) of the generic method make(Class<W>) of type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Y.java (at line 13)\\n\" + ", "+\t\t\t\"\tY.make(getClazz());\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in Y.java (at line 15)\\n\" + ", "+\t\t\t\"\tpublic static Class getClazz() {\\n\" + ", "+\t\t\t\"\t              ^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+/* javac 7", "+X.java:8: name clash: <U>make(Class<U>) and <W>make(Class<W>) have the same erasure", "+  public static <U extends Object> X<U> make(Class<U> clazz) {", "+                                        ^", "+  where U,W are type-variables:", "+    U extends Object declared in method <U>make(Class<U>)", "+    W extends String declared in method <W>make(Class<W>)", "+X.java:13: warning: [unchecked] unchecked conversion", "+    Y.make(getClazz());", "+                   ^", "+  required: Class<W#1>", "+  found:    Class", "+  where W#1,W#2 are type-variables:", "+    W#1 extends String declared in method <W#2>make(Class<W#2>)", "+    W#2 extends String declared in method <W#2>make(Class<W#2>)", "+X.java:13: warning: [unchecked] unchecked method invocation: method make in class Y is applied to given types", "+    Y.make(getClazz());", "+          ^", "+  required: Class<W>", "+  found: Class", "+  where W is a type-variable:", "+    W extends String declared in method <W>make(Class<W>)", "+1 error", "+2 warnings", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c74e98f4b793a397818268f256faad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "b7295bb19a68269f09e5fdceeecf4f4c701e7063", "commitAfterChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test007a()", "signatureAfterChange": " public void test007a()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\"\tpublic X(){\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\tpublic X(T param){\\n\" +", "-\t\t\t\"\t\tSystem.out.println(param);\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\tpublic static void testFunction(X<String> param){\\n\" +", "-\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t\tX.testFunction(new X<>());\\n\" + ", "-\t\t\t\"\t\tX.testFunction(new X(\\\"hello\\\"));\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tX.testFunction(new X<>());\\n\" + ", "-\t\t\"\t  ^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method testFunction(X<String>) in the type X is not applicable for the arguments (X<Object>)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "-\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "-\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "-\t\t\"\t                   ^\\n\" + ", "-\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\");", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\"\tpublic X(){\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic X(T param){\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(param);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void testFunction(X<String> param){\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tX.testFunction(new X<>());\\n\" + ", "+\t\t\t\t\"\t\tX.testFunction(new X(\\\"hello\\\"));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X<>());\\n\" + ", "+\t\t\t\"\t  ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method testFunction(X<String>) in the type X is not applicable for the arguments (X<Object>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.testFunction(new X(\\\"hello\\\"));\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\t\"\tpublic X(){\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"\tpublic X(T param){\\n\" +", "+\t\t\t\t\t\"\t\tSystem.out.println(param);\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"\tpublic static void testFunction(X<String> param){\\n\" +", "+\t\t\t\t\t\"\t\tSystem.out.println(\\\"SUCCESS\\\");\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t\tX.testFunction(new X<>());\\n\" + ", "+\t\t\t\t\t\"\t\tX.testFunction(new X(\\\"hello\\\"));\\n\" +", "+\t\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\t\"}\",", "+\t\t\t\t},", "+\t\t\t\t\"SUCCESS\\n\" + ", "+\t\t\t\t\"hello\\n\" + ", "+\t\t\t\t\"SUCCESS\");", "+\t}"]}], "num": 42491}
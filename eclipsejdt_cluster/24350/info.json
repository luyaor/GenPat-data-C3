{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9829c4df9fcf75c5addd6fc39953115d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "086e6e3d7e0ab4001644b5ad537a99ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void accept(CompletionProposal proposal)", "signatureAfterChange": " \tpublic void accept(CompletionProposal proposal)", "diff": ["-\t\tproposals.add(proposal);", "+\t\tint length = this.proposals.length;", "+\t\tif (++this.proposalsPtr== length) {", "+\t\t\tSystem.arraycopy(this.proposals, 0, this.proposals = new CompletionProposal[length+PROPOSALS_INCREMENT], 0, length);", "+\t\t}", "+\t\tthis.proposals[this.proposalsPtr] = proposal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a2cb7823d83ffaf1c5dec9411e0d2ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "83a89658caebe02428391b44cda60d0c881e9e2d", "commitAfterChange": "084792986a184eb522c2b0979d8faf076d06bee4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void pushParent(ASTNode parent)", "signatureAfterChange": " \tprivate void pushParent(ASTNode parent)", "diff": ["-\t\tint length = this.parentsz.length;", "+\t\tint length = this.parents.length;", "-\t\t\tSystem.arraycopy(this.parentsz, 0, this.parentsz = new ASTNode[length * 2], 0, length);", "+\t\t\tSystem.arraycopy(this.parents, 0, this.parents = new ASTNode[length * 2], 0, length);", "-\t\tthis.parentsz[++this.parentsPtr] = parent;", "+\t\tthis.parents[++this.parentsPtr] = parent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1654617852eed2a12a1da02c29156505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "a82b0643e63bc02a2e19585e0393bd1a0c838083", "commitAfterChange": "f1ebb2640c5454bff9caaa47acfae254f27d145c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "signatureAfterChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "diff": ["-\t\t\t\tthis.astStack = new Object[stackLength + AstStackIncrement], 0,", "+\t\t\t\tthis.astStack = new Object[stackLength + AST_STACK_INCREMENT], 0,", "-\t\t\t\t\tthis.astLengthStack = new int[stackLength + AstStackIncrement], 0,", "+\t\t\t\t\tthis.astLengthStack = new int[stackLength + AST_STACK_INCREMENT], 0,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "168179fa4424bddb41e988759bc849ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "338d40a986ae11da05f7ed006e0f54f68eeda642", "commitAfterChange": "2cd08e31ebe03f16766f3751a8572a8d9fcd2d34", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected void classInstanceCreation(boolean alwaysQualified)", "signatureAfterChange": "\r protected void classInstanceCreation(boolean alwaysQualified)", "diff": ["+\t\r", "-\tif (this.indexOfAssistIdentifier() < 0) {\r", "-\t\tsuper.classInstanceCreation(alwaysQualified);\r", "-\t\treturn;\r", "-\t} \r", "-\tQualifiedAllocationExpression alloc;\r", "-\tif (((length = astLengthStack[astLengthPtr--]) == 1)\r", "+\tif (((length = astLengthStack[astLengthPtr]) == 1)\r", "-\t\t//NO ClassBody\r", "+\r", "+\t\tif (this.indexOfAssistIdentifier() < 0) {\r", "+\t\t\tsuper.classInstanceCreation(alwaysQualified);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\tQualifiedAllocationExpression alloc;\r", "+\t\tastLengthPtr--;\r", "+\t} else {\r", "+\t\tsuper.classInstanceCreation(alwaysQualified);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32495b0d3a8fa241c8f4750b0d3caa87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static void compile(String[] pathsAndContents, Map options, String[] classpath, String outputPath)", "signatureAfterChange": " public static void compile(String[] pathsAndContents, Map options, String[] classpath, String outputPath)", "diff": ["-        \tSystem.arraycopy(classpath, 0, classpath = new String[classLibsLength + length], classLibsLength, length);", "-        \tSystem.arraycopy(classLibs, 0, classpath, 0, classLibsLength);", "+        \tSystem.arraycopy(classpath, 0, classpath = new String[length + classLibsLength], 0, length);", "+        \tSystem.arraycopy(classLibs, 0, classpath, length, classLibsLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3625be85d2dc1465da57017c826100b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "14f89ca9b18a3480429e3f25bc68dd79b7e9f0db", "commitAfterChange": "eb21ce31e87e64ed6c3b487b0fe31d2556ab8015", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " public IJavaElement[] getElements()", "signatureAfterChange": " public IJavaElement[] getElements()", "diff": ["-\treturn fElements;", "-}", "+\tint elementLength = this.elementIndex + 1;", "+\tif (this.elements.length != elementLength) {", "+\t\tSystem.arraycopy(this.elements, 0, this.elements = new IJavaElement[elementLength], 0, elementLength);", "+\t}", "+\treturn this.elements;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea5bdac6f3f93cefa35970a89370975", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "a82b0643e63bc02a2e19585e0393bd1a0c838083", "commitAfterChange": "f1ebb2640c5454bff9caaa47acfae254f27d145c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected boolean pushParamName(boolean isTypeParam)", "signatureAfterChange": " \tprotected boolean pushParamName(boolean isTypeParam)", "diff": ["-\t\t\t\t\t\t\t\tthis.invalidParamReferencesStack = new JavadocSingleNameReference[stackLength + AstStackIncrement], 0,", "+\t\t\t\t\t\t\t\tthis.invalidParamReferencesStack = new JavadocSingleNameReference[stackLength + AST_STACK_INCREMENT], 0,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41d4ac9dbf948209f298d6bdddea3b10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "2e116c3e018660ef5b20120d1f6bee149cdcd47d", "commitAfterChange": "9f83390b8974225073423e6d4d9c0d282b2dec03", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void updateFromParserState()", "signatureAfterChange": " public void updateFromParserState()", "diff": ["+\t\t\t\t", "+\t\t\t\t// remove unfinished annotation nodes", "+\t\t\t\tif (argLength > 0 && parser.astStack[parser.astPtr] instanceof MemberValuePair) {", "+\t\t\t\t\tparser.astLengthPtr--;", "+\t\t\t\t\tparser.astPtr -= argLength;", "+\t\t\t\t\t", "+\t\t\t\t\targLength = parser.astLengthStack[parser.astLengthPtr];", "+\t\t\t\t\targStart = parser.astPtr - argLength + 1;", "+\t\t\t\t\tneedUpdateRParenPos = true;", "+\t\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420d1ed9907ea312215ca393752f8dce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "ce41f66e0706b1b71981331d2b2667a0940a3697", "commitAfterChange": "014eef8cad2ee5584b28815ec4238bd578f1c1b0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void removePreResourceChangedListener(IResourceChangeListener listener)", "signatureAfterChange": "  \tpublic void removePreResourceChangedListener(IResourceChangeListener listener)", "diff": ["+\t\t\t\tint[] newEventMasks = new int[length];", "+\t\t\t\tSystem.arraycopy(this.preResourceChangeEventMasks, 0, newEventMasks, 0, i);", "-\t\t\t\tif (trailingLength > 0){", "+\t\t\t\tif (trailingLength > 0) {", "+\t\t\t\t\tSystem.arraycopy(this.preResourceChangeEventMasks, i+1, newEventMasks, i, trailingLength);", "+\t\t\t\tthis.preResourceChangeEventMasks = newEventMasks;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9348b7e2f7c4eb2a7e3841e6dd66a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 219, "signatureBeforeChange": " protected void consumeMethodDeclaration(boolean isNotAbstract)", "signatureAfterChange": " protected void consumeMethodDeclaration(boolean isNotAbstract)", "diff": ["-\t\tif (!this.options.ignoreMethodBodies) {", "-\t\t\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\t\tif (this.options.ignoreMethodBodies) {", "+\t\t\t\tthis.astPtr -= length;", "+\t\t\t} else {", "-\t\t} else {", "-\t\t\tlength = this.astLengthStack[this.astLengthPtr--];", "-\t\t\tthis.astPtr -= length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a104e3ef5e9adae1f779bd4c9433034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "0bc1fb773dee9ce83e70a274b6c2a8cb011d33dd", "commitAfterChange": "e7a652a3e1fc51229046f5d9d46b6d80154d02ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void classInstanceCreation(boolean hasClassBody)", "signatureAfterChange": " protected void classInstanceCreation(boolean hasClassBody)", "diff": ["-\tint length;", "-\tif (((length = astLengthStack[astLengthPtr]) == 1)", "+\t", "+\tif ((astLengthStack[astLengthPtr] == 1)", "-\t\tif (this.indexOfAssistIdentifier() < 0) {", "+\t\t", "+\t\tint index;", "+\t\tif ((index = this.indexOfAssistIdentifier()) < 0) {", "+\t\t\tsuper.classInstanceCreation(hasClassBody);", "+\t\t\treturn;", "+\t\t} else if(this.identifierLengthPtr > -1 &&", "+\t\t\t\t\t(this.identifierLengthStack[this.identifierLengthPtr] - 1) != index) {", "+\t\tint length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c693239070c516d537c2a220d783a790", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void addDependencies(String[] typeNameDependencies)", "signatureAfterChange": "  public void addDependencies(String[] typeNameDependencies)", "diff": ["+\t\t\t}", "+\t\t\tif (!insideRoot(qualifiedTypeName[0])) {", "+\t\t\t\tint length = this.rootReferences.length;", "+\t\t\t\tSystem.arraycopy(this.rootReferences, 0, this.rootReferences = new char[length + 1][], 0, length);", "+\t\t\t\tthis.rootReferences[length] = qualifiedTypeName[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5088d4efbbd432f9304296ebb061d99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\tpublic void acceptNameWithoutPrefixAndSuffix(char[] name)", "signatureAfterChange": "  \t\tpublic void acceptNameWithoutPrefixAndSuffix(char[] name)", "diff": ["-\t\t\tint length = otherResults.length;", "-\t\t\tif(length == otherResultsCount) {", "+\t\t\tint length = this.otherResults.length;", "+\t\t\tif(length == this.otherResultsCount) {", "-\t\t\t\t\totherResults,", "+\t\t\t\t\tthis.otherResults,", "-\t\t\t\t\totherResults = new char[length * 2][],", "+\t\t\t\t\tthis.otherResults = new char[length * 2][],", "-\t\t\totherResults[otherResultsCount++] = name;", "+\t\t\tthis.otherResults[this.otherResultsCount++] = name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa5f7ad325fbc26617817df15bf3331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": " protected void pushOnElementStack(int kind, int info)", "signatureAfterChange": " protected void pushOnElementStack(int kind, int info, Object objectInfo)", "diff": ["+}", "+protected void pushOnElementStack(int kind, int info, Object objectInfo){", "+\tthis.previousObjectInfo = null;", "+\t\tSystem.arraycopy(", "+\t\t\tthis.elementObjectInfoStack, 0,", "+\t\t\tthis.elementObjectInfoStack = new Object[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.elementObjectInfoStack[this.elementPtr] = objectInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8515c586d098695f2f5fa0410a45e4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "5a93797d2f258be80b0e70fb0ad4670a5571876a", "commitAfterChange": "6cb1ee2c113971e09be9a0df169e31be32946ece", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "signatureAfterChange": " \tprotected void pushOnAstStack(Object node, boolean newLength)", "diff": ["-\t\t\tthis.astLengthStack[++this.astLengthPtr] = 0;", "+\t\t\tint stackLength = this.astLengthStack.length;", "+\t\t\tif (++this.astLengthPtr >= stackLength) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astLengthStack, 0,", "+\t\t\t\t\tthis.astLengthStack = new int[stackLength + AST_STACK_INCREMENT], 0,", "+\t\t\t\t\tstackLength);", "+\t\t\t}", "+\t\t\tthis.astLengthStack[this.astLengthPtr] = 0;"]}], "num": 24350}
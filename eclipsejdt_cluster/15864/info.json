{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "428577fa009b5f6a58ae1ad5e4b3f405", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e23e10cbe9f610bfc1249e6c2f96902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "28020d0b0ceb0e665c1071bfd968796eb9e2e394", "commitAfterChange": "def990b8509828ed437909a92c80eeb89428931a", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope)", "diff": ["-\t\t\tif (expression instanceof CastExpression", "-\t\t\t\t\t|| expression instanceof PrefixExpression", "-\t\t\t\t\t|| expression instanceof StringLiteral", "-\t\t\t\t\t|| expression instanceof StringLiteralConcatenation", "-\t\t\t\t\t|| (((expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0)) {", "-\t\t\t\tif (this.preferences.insert_space_before_expression_in_return) {", "+\t\t\tif (((expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\t\t\tif (this.preferences.insert_space_before_parenthesized_expression_in_return) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de684a1305dcd7c83b604e3fa5beb7f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method)", "signatureAfterChange": " \t \tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method)", "diff": ["-\tpublic boolean isPertinentToApplicability(TypeBinding targetType, MethodBinding method) {", "-\t\tif (targetType instanceof TypeVariableBinding) {", "-\t\t\tif (method != null) { // when called from type inference", "-\t\t\t\tif (((TypeVariableBinding)targetType).declaringElement == method)", "-\t\t\t\t\treturn false;", "-\t\t\t\tif (method.isConstructor() && ((TypeVariableBinding)targetType).declaringElement == method.declaringClass)", "-\t\t\t\t\treturn false;", "-\t\t\t} else { // for internal calls", "-\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) targetType;", "-\t\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "+\t", "+\tpublic boolean isPertinentToApplicability(TypeVariableBinding typeVariable, MethodBinding method) {", "+\t\tif (method != null) { // when called from type inference", "+\t\t\tif (typeVariable.declaringElement == method)", "+\t\t\t\treturn false;", "+\t\t\tif (method.isConstructor() && typeVariable.declaringElement == method.declaringClass)", "+\t\t\t\treturn false;", "+\t\t} else { // for internal calls", "+\t\t\tif (typeVariable.declaringElement instanceof MethodBinding)", "+\t\t\t\treturn false;", "+\t\treturn true;", "+\t}"]}], "num": 15864}
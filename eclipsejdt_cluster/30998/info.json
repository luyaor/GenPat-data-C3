{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fb3e8d75e763daaa5cb34863d5b7e4a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76c43b821048753f7bdba99f6a9dc92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "039fe9e46951f3ae4fb135033e62de597c68c2d9", "commitAfterChange": "9a2f6070469e990d6a98dbcb9b47ac6f4413a2cc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected void assertMatchBindings(TagElement tagElement)", "signatureAfterChange": " \t \tvoid verifyName(Name name)", "diff": ["-\tprotected void assertMatchBindings(TagElement tagElement) {", "-\t\t\t\tassertMatchBindings((TagElement) fragment);", "-\t\t\t} else if (fragment.getNodeType() == ASTNode.SIMPLE_NAME || fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "-\t\t\t\tpreviousBinding = ((Name)fragment).resolveBinding();", "-\t\t\t} else if (fragment.getNodeType() == ASTNode.MEMBER_REF) {", "-\t\t\t\tpreviousBinding = ((MemberRef)fragment).resolveBinding();", "-\t\t\t\tresolvedBinding = true;", "-\t\t\t} else if (fragment.getNodeType() == ASTNode.METHOD_REF) {", "-\t\t\t\tpreviousBinding = ((MethodRef) fragment).resolveBinding();", "-\t\t\t\tresolvedBinding = true;", "-\t\t\tpreviousFragment = fragment;", "+\t", "+\tvoid verifyName(Name name) {", "+\t\tif (name != null) {", "+\t\t\tassertNotNull(name+\" binding was not found!\", name.resolveBinding());", "+\t\t\tSimpleName simpleName = null;", "+\t\t\twhile (name.isQualifiedName()) {", "+\t\t\t\tsimpleName = ((QualifiedName) name).getName();", "+\t\t\t\tassertNotNull(simpleName+\" binding was not found!\", simpleName.resolveBinding());", "+\t\t\t\tname = ((QualifiedName) name).getQualifier();", "+\t\t\t\tassertNotNull(name+\" binding was not found!\", name.resolveBinding());", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aacc3f22ec0c77f737b90a0ac5d7e88d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/UtilTest.java", "commitBeforeChange": "0f549220f498cda7c86a65324f594a6b8e8c2616", "commitAfterChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void test65()", "signatureAfterChange": " public void test65()", "diff": ["-\tassertTrue(\"Camel pattern matching failure-1\",", "-\t\t\tCharOperation.camelCaseMatch(\"iSCDCo\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-2\",", "-\t\t\t!CharOperation.camelCaseMatch(\"inVOke\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-3\",", "-\t\t\tCharOperation.camelCaseMatch(\"i\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-4\",", "-\t\t\t!CharOperation.camelCaseMatch(\"I\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-5\",", "-\t\t\t!CharOperation.camelCaseMatch(\"iStringCD\".toCharArray(), \"invokeStringConcatenationDefaultConstructor\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-6\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointerException/java.lang\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-7\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointer/lang.Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-8\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"Null_Pointer$Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-9\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"Null1Pointer2Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-10\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"Null.Pointer.Exception\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-11\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"aNullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-12\",", "-\t\t\tCharOperation.camelCaseMatch(\"nullP\".toCharArray(), \"nullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-13\",", "-\t\t\tCharOperation.camelCaseMatch(\"nP\".toCharArray(), \"nullPointerException\".toCharArray()));", "+\tassertCamelCase(\"iSCDCo\", \"invokeStringConcatenationDefaultConstructor\", true/* should match */);", "+\tassertCamelCase(\"inVOke\", \"invokeStringConcatenationDefaultConstructor\", false/* should not match */);", "+\tassertCamelCase(\"i\", \"invokeStringConcatenationDefaultConstructor\", true/* should match */);", "+\tassertCamelCase(\"I\", \"invokeStringConcatenationDefaultConstructor\", false/* should not match */);", "+\tassertCamelCase(\"iStringCD\", \"invokeStringConcatenationDefaultConstructor\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"NullPointerException/java.lang\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"NullPointer/lang.Exception\", false/* should not match */);", "+\tassertCamelCase(\"NPE\", \"Null_Pointer$Exception\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"Null1Pointer2Exception\", true/* should match */);", "+\tassertCamelCase(\"NPE\", \"Null.Pointer.Exception\", false/* should not match */);", "+\tassertCamelCase(\"NPE\", \"aNullPointerException\", false/* should not match */);", "+\tassertCamelCase(\"nullP\", \"nullPointerException\", true/* should match */);", "+\tassertCamelCase(\"nP\", \"nullPointerException\", true/* should match */);", "+\t// Verify that there were no unexpected results", "+    assertTrue(this.camelCaseErrors.toString(), this.camelCaseErrors.length()==0);", "+}"]}], "num": 30998}
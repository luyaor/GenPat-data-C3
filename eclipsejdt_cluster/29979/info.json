{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "371e26c341afeb69cf42d4399ffe9713", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51447f3eec307b357547ef83c397d1fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0c96a215dc417e2a3711d5e3a64712a85e5ebfe5", "commitAfterChange": "79e03912c161a70c24307f9119f487254a855031", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\t\t\tString matchName = name.toLowerCase();", "+\t\t\t\tint matchLength = name.length();", "+\t\t\t\t\t// MatchName will never have the extension \".class\" and the elementName always will.", "-\t\t\t\t\telementName = elementName.toLowerCase();", "-\t\t", "-\t\t\t\t\t/**", "-\t\t\t\t\t * Must use startWith because matchName will never have the ", "-\t\t\t\t\t * extension \".class\" and the elementName always will.", "-\t\t\t\t\t */", "-\t\t\t\t\tif (elementName.startsWith(matchName)) {", "+\t\t\t\t\tif (elementName.regionMatches(true /*ignore case*/, 0, name, 0, matchLength)) {", "-\t\t\t\t\t\tif ((type.getElementName().length() > 0 && !Character.isDigit(type.getElementName().charAt(0)))) { //not an anonymous type", "+\t\t\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\t\t\tif (typeName.length() > 0 && !Character.isDigit(typeName.charAt(0))) { //not an anonymous type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c220340bb9ff846c9afed4b4146d74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "e2a6d43d6cfc7ae0c6dc6dfaa282461be00cd7e3", "commitAfterChange": "225b64b4cacb0e2a7e07c6447406d2ac8f3df97c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": "\r \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\tString lowerName= name.toLowerCase();\r", "+\t\tString matchName= partialMatch ? name.toLowerCase() : name;\r", "+\t\t\tString elementName = classFile.getElementName();\r", "+\t\t\tif (partialMatch) elementName = elementName.toLowerCase();\r", "+\r", "-\t\t\t * In the following call to nameMatches we must always send true \r", "-\t\t\t * for the partialMatch argument since name will never have the \r", "-\t\t\t * extension \".class\" and the classFile always will.\r", "+\t\t\t * Must use startWith because matchName will never have the \r", "+\t\t\t * extension \".class\" and the elementName always will.\r", "-\t\t\tif (nameMatches(lowerName, classFile, true)) {\r", "+\t\t\tif (elementName.startsWith(matchName)) {\r"]}], "num": 29979}
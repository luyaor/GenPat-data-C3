{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39a37f54e2deb20f566ff8f394c0fa5e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16292f74f81963faab7c639fe417b5a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\tASTNode previousFragment = null;", "+//\t\tASTNode previousFragment = null;", "-\t\t\t\t\t\tassertTrue(\"Reference in '\"+previousFragment+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassertTrue(this.prefix+\"Reference in '\"+tagElement+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t\t\tassertFalse(\"Unknown reference in'\"+previousFragment+\"' should NOT be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassertFalse(this.prefix+\"Unknown reference in '\"+tagElement+\"' should NOT be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t} else if (fragment.getNodeType() == ASTNode.SIMPLE_NAME || fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "+\t\t\t\t} else if (fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "-\t\t\t\t\tverifyNameBindings(name.getQualifier());", "+//\t\t\t\t\tverifyNameBindings(name.getQualifier());", "+\t\t\t\t\tverifyNameBindings(name);", "-\t\t\t\t\tpreviousFragment = fragment;", "+//\t\t\t\t\tpreviousFragment = fragment;", "-\t\t\t\t\t\tassertNotNull(memberRef.getName()+\" binding was not found!\", memberRef.getName().resolveBinding());", "+\t\t\t\t\t\tassertNotNull(this.prefix+\"\"+memberRef.getName()+\" binding was not found!\", memberRef.getName().resolveBinding());", "-\t\t\t\t\t\tassertNotNull(methodRef.getName()+\" binding was not found!\", methodRef.getName().resolveBinding());", "+\t\t\t\t\t\tassertNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\", methodRef.getName().resolveBinding());", "-\t\t\t\t\t\t\tassertNotNull(param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "+\t\t\t\t\t\t\tassertNotNull(this.prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "-\t\t\t\tpreviousFragment = fragment;", "+//\t\t\t\tpreviousFragment = fragment;", "-\t\tassertTrue(\"Reference in '\"+previousFragment+\"' should be bound!\", (!resolvedBinding || previousBinding != null));", "+\t\tassertTrue(this.prefix+\"Reference in '\"+tagElement+\"' should be bound!\", (!resolvedBinding || previousBinding != null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb45c2197da8941b7ef47720cba37095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate String updatedContent(ICompilationUnit cu, PackageFragment dest, String newName) throws JavaModelException", "signatureAfterChange": " \tprivate String updatedContent(ICompilationUnit cu, PackageFragment dest, String newName) throws JavaModelException", "diff": ["-    // TODO - JDOM - remove once model ported off of JDOM", "-\t\t\tIDOMCompilationUnit cuDOM = null;", "-\t\t\tIBuffer buffer = cu.getBuffer();", "-\t\t\tif (buffer == null) return null;", "-\t\t\tchar[] contents = buffer.getCharacters();", "-\t\t\tif (contents == null) return null;", "-\t\t\tcuDOM = fFactory.createCompilationUnit(contents, typeName);", "-\t\t\tupdateTypeName(cu, cuDOM, cu.getElementName(), newName);", "-\t\t\tupdatePackageStatement(cuDOM, destPackageName);", "-\t\t\treturn cuDOM.getContents();", "+\t\t\t// ensure cu is consistent (noop if already consistent)", "+\t\t\tcu.makeConsistent(this.progressMonitor);", "+\t\t\tthis.parser.setSource(cu);", "+\t\t\tCompilationUnit astCU = (CompilationUnit) this.parser.createAST(this.progressMonitor);", "+\t\t\tIDocument document = getDocument(cu);", "+\t\t\tupdateTypeName(cu, astCU, cu.getElementName(), newName, document);", "+\t\t\tupdatePackageStatement(astCU, destPackageName, document);", "+\t\t\treturn document.get();"]}], "num": 2319}
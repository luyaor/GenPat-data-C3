{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "904eb5f5b70626d66e3396fabb911960", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db5b7ebe966479dbb9447618fc0aa36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c326c940f9ef138395e800fef452568d0c87c6c0", "commitAfterChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "-\t\t\trecordFunctionalType(scope);", "-\t\t}", "-\t\t", "-    \t\tthis.lhs.bits |= ASTNode.IgnoreRawTypeCheck;", "+    \t\tif (this.original == this)", "+    \t\t\trecordFunctionalType(scope);", "+    \t\tthis.lhs.bits |= ASTNode.IgnoreRawTypeCheck;", "+    \t\tif (isConstructorReference() && lhsType.isArrayType()) {", "+\t        \tfinal TypeBinding leafComponentType = lhsType.leafComponentType();", "+\t\t\t\tif (!leafComponentType.isReifiable()) {", "+\t        \t\tscope.problemReporter().illegalGenericArray(leafComponentType, this);", "+\t        \t\treturn this.resolvedType = null;", "+\t        \t}", "+\t\t\t\tif (this.typeArguments != null) {", "+\t                scope.problemReporter().invalidTypeArguments(this.typeArguments);", "+\t                return this.resolvedType = null;", "+\t            }", "+\t        \tthis.binding = this.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "+\t        }", "+", "+", "-\t\t", "+", "+\t\t/* For Reference expressions unlike other call sites, we always have a receiver _type_ since LHS of :: cannot be empty. ", "+\t\t   LHS's resolved type == actual receiver type. All code below only when a valid descriptor is available.", "+\t\t*/", "+    \tif (this.descriptor == null || !this.descriptor.isValidBinding())", "+    \t\treturn this.resolvedType =  null;", "+     ", "-        \tfinal TypeBinding leafComponentType = lhsType.leafComponentType();", "-\t\t\tif (!leafComponentType.isReifiable()) {", "-        \t\tscope.problemReporter().illegalGenericArray(leafComponentType, this);", "-        \t\treturn this.resolvedType = null;", "-        \t}", "-", "-            if (this.typeArguments != null) {", "-                scope.problemReporter().invalidTypeArguments(this.typeArguments);", "-                return this.resolvedType = null;", "-            }", "-", "-        \tthis.binding = this.exactMethodBinding = scope.getExactConstructor(lhsType, this);", "-\t\t/* For Reference expressions unlike other call sites, we always have a receiver _type_ since LHS of :: cannot be empty. ", "-\t\t   LHS's resolved type == actual receiver type. All code below only when a valid descriptor is available.", "-\t\t */", "-        if (this.descriptor == null || !this.descriptor.isValidBinding())", "-        \treturn this.resolvedType =  null;", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515c1c57851cdecc2e5e522e4fd77dfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "aec729ad3adcaa5e52d24a53651dd8b9e99d3639", "commitAfterChange": "44335de1fa884744b7a885d0019e36f5505aad65", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-        \tfinal boolean isStatic = someMethod.isStatic();", "-        \tif (isStatic && (this.haveReceiver || this.receiverType.isParameterizedTypeWithActualArguments())) {", "+    \t\tif (someMethod.isStatic() && (this.haveReceiver || this.receiverType.isParameterizedTypeWithActualArguments())) {", "-        \tif (!this.haveReceiver) {", "-        \t\tif (!isStatic && !someMethod.isConstructor()) {", "-        \t\t\tscope.problemReporter().methodMustBeAccessedWithInstance(this, someMethod);", "-        \t\t\treturn this.resolvedType = null;", "-        \t\t}", "-        \t} ", "-        \tif (anotherMethod != null && anotherMethod.isValidBinding() && anotherMethod.isStatic()) {", "-        \t\tscope.problemReporter().methodMustBeAccessedStatically(this, anotherMethod);", "-        \t\treturn this.resolvedType = null;", "-        \t}", "-        if (someMethod != null && someMethod.isValidBinding() && anotherMethod != null && anotherMethod.isValidBinding()) {", "+        if (someMethod != null && someMethod.isValidBinding() && someMethod.isStatic() && anotherMethod != null && anotherMethod.isValidBinding() && !anotherMethod.isStatic()) {", "-        if (someMethod != null && someMethod.isValidBinding()) {", "+        if (someMethod != null && someMethod.isValidBinding() && (anotherMethod == null || !anotherMethod.isValidBinding() || anotherMethod.isStatic())) {", "-        } else if (anotherMethod != null && anotherMethod.isValidBinding()) {", "+        \tif (!this.haveReceiver) {", "+        \t\tif (!someMethod.isStatic() && !someMethod.isConstructor()) {", "+        \t\t\tscope.problemReporter().methodMustBeAccessedWithInstance(this, someMethod);", "+        \t\t\treturn this.resolvedType = null;", "+        \t\t}", "+        \t} ", "+        } else if (anotherMethod != null && anotherMethod.isValidBinding() && (someMethod == null || !someMethod.isValidBinding() || !someMethod.isStatic())) {", "+        \tif (anotherMethod.isStatic()) {", "+        \t\tscope.problemReporter().methodMustBeAccessedStatically(this, anotherMethod);", "+        \t\treturn this.resolvedType = null;", "+        \t}"]}], "num": 22649}
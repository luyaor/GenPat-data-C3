{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d91f8d02fb2cf4076daea916edab2a5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab40731d8671a56f8773514ad36d69c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["-\tint typeLevel = resolveLevelForType(fieldPattern.typeSimpleName, fieldPattern.typeQualification, field.type);", "-\t", "-\t\t// SEARCH_15 (frederic) Specific field pattern verification for generics (not fully tested yet...)", "-\t\tif (typeLevel == IMPOSSIBLE_MATCH) {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t\tTypeBinding typeBinding = field.type;", "-\t\tif (typeBinding != null) {", "-\t\t\tboolean isParameterized = typeBinding.isParameterizedType();", "-\t\t\tboolean isRawType = typeBinding.isRawType();", "-\t\t\tif (fieldPattern.typeNames== null) {", "-\t\t\t\tif (isParameterized && !isRawType) return IMPOSSIBLE_MATCH;", "-\t\t\t} else {", "-\t\t\t\tif (!isParameterized) return IMPOSSIBLE_MATCH;", "-\t\t\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) typeBinding;", "-\t\t\t\tif (paramTypeBinding.arguments == null) {", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t\tint length = fieldPattern.typeNames.length;", "-\t\t\t\tif (paramTypeBinding.arguments.length != length) return IMPOSSIBLE_MATCH;", "-\t\t\t\tfor (int i= 0; i<length; i++) {", "-\t\t\t\t\tchar[] argType = fieldPattern.typeNames[i];", "-\t\t\t\t\tTypeBinding argTypeBinding = paramTypeBinding.arguments[i];", "-\t\t\t\t\tif (!CharOperation.equals(argType, argTypeBinding.shortReadableName(), fieldPattern.isCaseSensitive) &&", "-\t\t\t\t\t\t!CharOperation.equals(argType, argTypeBinding.readableName(), fieldPattern.isCaseSensitive)) {", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t/* Try to pull-up generics verification in PatternLocator?", "-\t\tint typeLevel = resolveLevelForType(", "-\t\t\t\tfieldPattern.typeSimpleName,", "-\t\t\t\tfieldPattern.typeQualification,", "-\t\t\t\tfieldPattern.typeNames,", "-\t\t\t\tfieldPattern.mustResolve(),", "-\t\t\t\ttrue // parameterized,", "-\t\t\t\tfield.type);", "-\t\t*/", "-\t\t// end", "+\t// get real field binding", "+\tFieldBinding fieldBinding = field;", "+\tif (field instanceof ParameterizedFieldBinding) {", "+\t\tfieldBinding = ((ParameterizedFieldBinding) field).originalField;", "+\t}", "+\tint typeLevel = resolveLevelForType(fieldBinding.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f1d29993d78a9e69164a22e18701a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "141dabda2ef1bf78b17f32c0b9e9d86db622fc74", "commitAfterChange": "531c739d9ad2a599c5863aeaf49b058d9a8ba1bc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected int matchField(FieldBinding field, boolean matchName)", "signatureAfterChange": " protected int matchField(FieldBinding field, boolean matchName)", "diff": ["+\t", "+\t\t// SEARCH_15 (frederic) Specific field pattern verification for generics (not fully tested yet...)", "+\t\tif (typeLevel == IMPOSSIBLE_MATCH) {", "+\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t}", "+\t\tTypeBinding typeBinding = field.type;", "+\t\tif (typeBinding != null) {", "+\t\t\tboolean isParameterized = typeBinding.isParameterizedType();", "+\t\t\tboolean isRawType = typeBinding.isRawType();", "+\t\t\tif (fieldPattern.typeNames== null) {", "+\t\t\t\tif (isParameterized && !isRawType) return IMPOSSIBLE_MATCH;", "+\t\t\t} else {", "+\t\t\t\tif (!isParameterized) return IMPOSSIBLE_MATCH;", "+\t\t\t\tParameterizedTypeBinding paramTypeBinding = (ParameterizedTypeBinding) typeBinding;", "+\t\t\t\tif (paramTypeBinding.arguments == null) {", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t}", "+\t\t\t\tint length = fieldPattern.typeNames.length;", "+\t\t\t\tif (paramTypeBinding.arguments.length != length) return IMPOSSIBLE_MATCH;", "+\t\t\t\tfor (int i= 0; i<length; i++) {", "+\t\t\t\t\tchar[] argType = fieldPattern.typeNames[i];", "+\t\t\t\t\tTypeBinding argTypeBinding = paramTypeBinding.arguments[i];", "+\t\t\t\t\tif (!CharOperation.equals(argType, argTypeBinding.shortReadableName(), fieldPattern.isCaseSensitive) &&", "+\t\t\t\t\t\t!CharOperation.equals(argType, argTypeBinding.readableName(), fieldPattern.isCaseSensitive)) {", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t/* Try to pull-up generics verification in PatternLocator?", "+\t\tint typeLevel = resolveLevelForType(", "+\t\t\t\tfieldPattern.typeSimpleName,", "+\t\t\t\tfieldPattern.typeQualification,", "+\t\t\t\tfieldPattern.typeNames,", "+\t\t\t\tfieldPattern.mustResolve(),", "+\t\t\t\ttrue // parameterized,", "+\t\t\t\tfield.type);", "+\t\t*/", "+\t\t// end", "+"]}], "num": 68514}
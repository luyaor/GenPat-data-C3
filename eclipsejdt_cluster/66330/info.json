{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad7c490f8c0afd4e1d649b330864d8e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041366edfb42d7ef02582c8eeb0ecb7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": " public void test100()", "signatureAfterChange": " public void test100()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.Collection;\\n\" + ", "-\t\t\t\t\"public class X<E> {\\n\" + ", "-\t\t\t\t\"  boolean removeAll(Collection<? extends E> c) {\\n\" + ", "-\t\t\t\t\"    return false;\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"Y.java\",", "-\t\t\t\t\"import java.util.Collection;\\n\" + ", "-\t\t\t\t\"public class Y<E> extends X<E>\\n\" + ", "-\t\t\t\t\"{\\n\" + ", "-\t\t\t\t\"  <T extends E> boolean removeAll(Collection<T> c) {\\n\" + ", "-\t\t\t\t\"    return false;\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Y.java (at line 4)\\n\" + ", "-\t\t\t\"\t<T extends E> boolean removeAll(Collection<T> c) {\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method removeAll(Collection<T>) of type Y<E> has the same erasure as removeAll(Collection<? extends E>) of type X<E> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"import java.util.Collection;\\n\" + ", "+\t\t\t\"public class X<E> {\\n\" + ", "+\t\t\t\"  boolean removeAll(Collection<? extends E> c) {\\n\" + ", "+\t\t\t\"    return false;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\t\"Y.java\",", "+\t\t\t\"import java.util.Collection;\\n\" + ", "+\t\t\t\"public class Y<E> extends X<E>\\n\" + ", "+\t\t\t\"{\\n\" + ", "+\t\t\t\"  <T extends E> boolean removeAll(Collection<T> c) {\\n\" + ", "+\t\t\t\"    return false;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Y.java (at line 4)\\n\" + ", "+\t\t\"\t<T extends E> boolean removeAll(Collection<T> c) {\\n\" + ", "+\t\t\"\t                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method removeAll(Collection<T>) of type Y<E> has the same erasure as removeAll(Collection<? extends E>) of type X<E> but does not override it\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7d820c3bc286925b38d4cce399ff0f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "cbbc77bad29ab0935f23d7976e8f3a83a2098569", "commitAfterChange": "218bf9e76765a0b6d9236837b12cba562b6c4513", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 248, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["-\tif (this.complianceLevel.compareTo(COMPLIANCE_1_5) >= 0) {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.List;\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"    Integer getX(List<Integer> l) {\\n\" + ", "-\t\t\t\t\"        return null;\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    String getX(List<String> l) {\\n\" + ", "-\t\t\t\t\"        return null;\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class Y {\\n\" + ", "-\t\t\t\t\"    Integer getX(List<Integer> l) {\\n\" + ", "-\t\t\t\t\"        return null;\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    String getX(List<Integer> l) {\\n\" + ", "-\t\t\t\t\"        return null;\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"import java.util.List;\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"    Integer getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"        return null;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    String getX(List<String> l) {\\n\" + ", "+\t\t\t\"        return null;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class Y {\\n\" + ", "+\t\t\t\"    Integer getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"        return null;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    String getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"        return null;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}], "num": 66330}
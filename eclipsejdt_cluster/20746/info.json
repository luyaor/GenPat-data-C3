{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96b62a062ea9f328362d1a10bb00bf03", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119eb78db40eea73f46389b111e5fd44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "00cabdb6b90ee48364f71e75a5da5edca1e7837c", "commitAfterChange": "fcccc4dd1377e549112e0bdc9a74b0eb625c6ab2", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate void printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["+", "+\t\t// Compute indentation", "+\t\tint firstColumn = this.column;", "+\t\tint indentLevel = this.indentationLevel;", "+\t\tint indentations = this.numberOfIndentations;", "+\t\tthis.indentationLevel = getNextIndentationLevel(firstColumn);", "+\t\tthis.numberOfIndentations = this.indentationLevel % this.indentationSize;", "+", "+\t\t\t\t\t\t\t\tnewLine = false;", "-    \t\tif (scannerLine == firstLine) hastTextOnFirstLine = true;", "+    \t\tif (!hastTextOnFirstLine && scannerLine == firstLine) {", "+    \t\t\thastTextOnFirstLine = true;", "+    \t\t\tthis.column++;", "+    \t\t}", "+\t\tthis.indentationLevel = indentLevel;", "+\t\tthis.numberOfIndentations = indentations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62220e0c9568e0bee05401d70ebfba62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "commitAfterChange": "416292d2f4be39d514e933551cdaebb7c7ebd8a7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (this.expectedType != null && !this.trialResolution) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "+\t\tif (this.expectedType != null && this.original == this) {  // final resolution ? may be not - i.e may be, but only in a non-final universe.", "-\t    \t\tthis.exactMethodBinding = isMethodReference() ? scope.getExactMethod(lhsType, this.selector, this) : scope.getExactConstructor(lhsType, this);", "+\t    \t\tthis.binding = this.exactMethodBinding = isMethodReference() ? scope.getExactMethod(lhsType, this.selector, this) : scope.getExactConstructor(lhsType, this);", "+        this.inferenceKind = InferenceContext18.CHECK_UNKNOWN;", "+        int someMethodInfereceKind = this.inferenceKind;", "+        int anotherMethodInferenceKind = this.inferenceKind = InferenceContext18.CHECK_UNKNOWN;", "+        \t\tanotherMethodInferenceKind = this.inferenceKind;", "+        \tthis.inferenceKind = someMethodInfereceKind;", "+        \tthis.inferenceKind = anotherMethodInferenceKind;", "+        \tthis.inferenceKind = InferenceContext18.CHECK_UNKNOWN;"]}], "num": 20746}
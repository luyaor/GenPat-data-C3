{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c9a81d2a510c58e1beb675a4bae298d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b20a484ef0441e6b1960be2b5bdd843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "43c947b648b5a1fa1fb7d4f5ce5b7cea1d4fa7a2", "commitAfterChange": "eee151556fa5628da58c297d3e841df408f33c62", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void doExtraRangesForChildren(ASTNode node, Scanner scanner)", "signatureAfterChange": "  \t\tprotected boolean visitNode(ASTNode node)", "diff": ["-\t */", "-\tprivate void doExtraRangesForChildren(ASTNode node, Scanner scanner) {", "-\t\t// Compute node children", "-\t\tList children= getChildren(node);", "-\t\tint size = children.size() ;", "-\t\t// Compute last next start and previous end. Next start is the starting position", "-\t\t// of first token following node end which is neither a comment nor white spaces.", "-\t\tint lastPos = getExtendedEnd(node);", "-\t\tint previousEnd = node.getStartPosition();", "-\t\t", "-\t\t// Compute leading and trailing comments for all children nodes at this level", "-\t\tthis.commentIndex = 0;", "-\t\ttry {", "-\t\t\tfor (int i= 0; i < size; i++) {", "-\t\t\t\tASTNode current = (ASTNode) children.get(i);", "-\t\t\t\tboolean lastChild = i==(size-1);", "-\t\t\t\tint nextStart = lastChild ? lastPos : ((ASTNode) children.get(i+1)).getStartPosition();", "-\t\t\t\tstoreLeadingComments(current, previousEnd,scanner);", "-\t\t\t\tpreviousEnd = storeTrailingComments(current, nextStart, scanner, lastChild);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Exception ex) {", "-\t\t\t// Give up extended ranges at this level if unexpected exception happens...", "-\t\t}", "-\t\t", "-\t\t// Compute extended ranges at sub-levels", "-\t\tfor (int i= 0; i < size; i++) {", "-\t\t\tdoExtraRangesForChildren((ASTNode) children.get(i), scanner);", "-\t\t}", "+", "+", "+\t\t\t// Get default previous end", "+\t\t\tASTNode parent = node.getParent();", "+\t\t\tint previousEnd = parent.getStartPosition();", "+", "+\t\t\t// Look for sibling node", "+\t\t\tASTNode sibling = (ASTNode) this.waitingSiblings.get(parent);", "+\t\t\tif (sibling != null) {", "+\t\t\t\t// Found one previous sibling, so compute its trailing comments using current node start position", "+\t\t\t\ttry {", "+\t\t\t\t\tpreviousEnd = storeTrailingComments(sibling, node.getStartPosition(), false);", "+\t\t\t\t} catch (Exception ex) {", "+\t\t\t\t\t// Give up extended ranges at this level if unexpected exception happens...", "+\t\t\t\t}", "+", "+\t\t\t// Compute leading comments for current node", "+\t\t\ttry {", "+\t\t\t\tstoreLeadingComments(node, previousEnd);", "+\t\t\t} catch (Exception ex) {", "+\t\t\t\t// Give up extended ranges at this level if unexpected exception happens...", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Store current node as waiting sibling for its parent", "+\t\t\tthis.waitingSiblings.put(parent, node);", "+", "+\t\t\t// We're always ok to visit sub-levels", "+\t\t\treturn true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a2c9eb53d75de01c9cc4d14b4d1d21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "57bbae793b080e332ffbe7d9a1eee58929157c9e", "commitAfterChange": "b217112507f53a311f9d32f09e4f736a9ed00294", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate final void addOptimizedReplaceEdit(int offset, int length, String replacement)", "signatureAfterChange": "  \tprivate final void addOptimizedReplaceEdit(int offset, int length, String replacement)", "diff": ["-\t\t\tif (previousOffset == offset && previousLength == length && (replacementLength == 0 || previous.replacement.length() == 0)) {", "+\t\t\tfinal String previousReplacement = previous.replacement;", "+\t\t\tfinal int previousReplacementLength = previousReplacement.length();", "+\t\t\tif (previousOffset == offset && previousLength == length && (replacementLength == 0 || previousReplacementLength == 0)) {", "-\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previous.replacement + replacement);", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previousReplacement + replacement);", "+\t\t\t\t\t} else if (previousLength + length == previousReplacementLength) {", "+\t\t\t\t\t\t// check the characters. If they are identical, we can get rid of the previous edit", "+\t\t\t\t\t\tboolean canBeRemoved = true;", "+\t\t\t\t\t\tloop: for (int i = previousOffset; i < previousOffset + previousReplacementLength; i++) {", "+\t\t\t\t\t\t\tif (scanner.source[i] != previousReplacement.charAt(i - previousOffset)) {", "+\t\t\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previousReplacement);", "+\t\t\t\t\t\t\t\tcanBeRemoved = false;", "+\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (canBeRemoved) {", "+\t\t\t\t\t\t\tif (this.currentAlignment != null) {", "+\t\t\t\t\t\t\t\tfinal Location location = this.currentAlignment.location;", "+\t\t\t\t\t\t\t\tif (location.editsIndex == this.editsIndex) {", "+\t\t\t\t\t\t\t\t\tlocation.editsIndex--;", "+\t\t\t\t\t\t\t\t\tlocation.textEdit = previous;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.editsIndex--;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previous.replacement);", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength + length, previousReplacement);", "-\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength, previous.replacement + replacement);", "+\t\t\t\t\t\tthis.edits[this.editsIndex - 1] = new OptimizedReplaceEdit(previousOffset, previousLength, previousReplacement + replacement);"]}], "num": 47935}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57f2e172b0497faa3cfd48b2d84c133d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00d5c4b47615c9fd47561a64de3cd0df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\tif (methDecl != null && (methDecl.isConstructor() || overriding) && !superRef) {", "-\t\t\t\tif (this.seeReferences[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "-\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "-\t\t\t\t\t\tif ((methodReceiverType.isSuperclassOf(methDecl.binding.declaringClass) || (methodReceiverType.isInterface() && methDecl.binding.declaringClass.implementsInterface(methodReceiverType, true))) &&", "-\t\t\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "-\t\t\t\t\t\t\t\t(methDecl.binding.returnType.isCompatibleWith(messageSend.binding.returnType))) {", "-\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParameterErasuresEqual(messageSend.binding);", "+\t\t\tif (methDecl != null && !superRef) {", "+\t\t\t\tif (!methDecl.isConstructor()) {", "+\t\t\t\t\tif (overriding && this.seeReferences[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "+\t\t\t\t\t\t\tTypeBinding superType = methDecl.binding.declaringClass.findSuperTypeOriginatingFrom(methodReceiverType);", "+\t\t\t\t\t\t\tif (superType != null && superType.original() != methDecl.binding.declaringClass && CharOperation.equals(messageSend.selector, methDecl.selector)) {", "+\t\t\t\t\t\t\t\tif (methScope.environment().methodVerifier().doesMethodOverride(methDecl.binding, messageSend.binding.original())) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\telse if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t} else if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "-\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\tReferenceBinding allocType = (ReferenceBinding) allocationExpr.resolvedType.original();", "+\t\t\t\t\t\tReferenceBinding superType = (ReferenceBinding) methDecl.binding.declaringClass.findSuperTypeOriginatingFrom(allocType);", "+\t\t\t\t\t\tif (superType != null && superType.original() != methDecl.binding.declaringClass) {", "+\t\t\t\t\t\t\tMethodBinding superConstructor = methScope.getConstructor(superType, methDecl.binding.parameters, allocationExpr);", "+\t\t\t\t\t\t\tif (superConstructor.isValidBinding() && superConstructor.original() == allocationExpr.binding.original()) {", "+\t\t\t\t\t\t\t\tif (superConstructor.areParametersEqual(methDecl.binding)) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null && allocationExpr.arguments.length == methDecl.arguments.length) {", "-\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersCompatibleWith(allocationExpr.binding.parameters);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "801351b77856d2a7864fa58c92817ec0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "7bc98d3c9cadc6046cec79607ef811e2701d7e07", "commitAfterChange": "f0876a2c26cb4231ffe7dc0126e9ac775a1337ba", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\ttry {", "-\t\t\t\tif (methDecl != null && (methDecl.isConstructor() || overriding) && !superRef) {", "-\t\t\t\t\tif (this.seeReferences[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "-\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "-\t\t\t\t\t\t\tif ((methodReceiverType.isSuperclassOf(methDecl.binding.declaringClass) || (methodReceiverType.isInterface() && methDecl.binding.declaringClass.implementsInterface(methodReceiverType, true))) &&", "+\t\t\tif (methDecl != null && (methDecl.isConstructor() || overriding) && !superRef) {", "+\t\t\t\tif (this.seeReferences[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "+\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "+\t\t\t\t\t\tif ((methodReceiverType.isSuperclassOf(methDecl.binding.declaringClass) || (methodReceiverType.isInterface() && methDecl.binding.declaringClass.implementsInterface(methodReceiverType, true))) &&", "-\t\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParameterErasuresEqual(messageSend.binding);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\telse if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.seeReferences[i];", "-\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "-\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "-\t\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersCompatibleWith(allocationExpr.binding.parameters);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParameterErasuresEqual(messageSend.binding);", "-\t\t\t}", "-\t\t\tcatch (Exception e) {", "-\t\t\t\t// Something wrong happen, forget super ref...", "+\t\t\t\telse if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.seeReferences[i];", "+\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "+\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "+\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null && allocationExpr.arguments.length == methDecl.arguments.length) {", "+\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersCompatibleWith(allocationExpr.binding.parameters);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 72570}
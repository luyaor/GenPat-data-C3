{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36e54723307c9f28b4a95b1c8db9c045", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41901448dd1f5680ad0f3fa8bab97000", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 211, "signatureBeforeChange": " public void test412650()", "signatureAfterChange": " public void test412650()", "diff": ["-\t\t\"1. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tfoo(() -> foo(X::getInt));\\n\" +", "-\t\t\"\t              ^^^^^^^^^\\n\" +", "-\t\t\"The type of getInt() from the type X is Integer, this is incompatible with the descriptor's return type: String\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tfoo(() -> foo(X::getInt));\\n\" + ", "+\t\t\"\t          ^^^\\n\" + ", "+\t\t\"The method foo(I) in the type X is not applicable for the arguments (X::getInt)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tfoo(() -> foo(X::getInt));\\n\" + ", "+\t\t\"\t              ^^^^^^^^^\\n\" + ", "+\t\t\"The type of getInt() from the type X is Integer, this is incompatible with the descriptor\\'s return type: String\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd019bbc3869fdb81eb44b9294cd8e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "57e4d4c87d35c6ae3978a396ec1884b0ad8efb22", "commitAfterChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void _testBug424712b()", "signatureAfterChange": " public void testBug424712b()", "diff": ["-public void _testBug424712b() {", "+public void testBug424712b() {", "-\t\t\t\"\t\tComparator<? super T> comparator = (Comparator<? super T>) Comparator.naturalOrder();\\n\" + ", "+\t\t\t\"\t\tComparator<? super T> comparator = (Comparator<? super T>) Comparator.naturalOrder();\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"OK\\\");\\n\" + ", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tnew X().test();\\n\" +", "-\t\t});", "+\t\t},", "+\t\t\"OK\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f161310f95eee6b6cc2866f66a2c96cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " public void test401610h()", "signatureAfterChange": " public void test401610h()", "diff": ["+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\t\"  return 10;\\n\" + ", "+\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tnew X().foo(()->{ return 10; });\\n\" + "]}], "num": 37006}
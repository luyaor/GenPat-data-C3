{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf6a44898d153a2e4f2565db81987f48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4723fd67544c67454bc17debdb5922da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic TypeBinding substitute(TypeBinding originalType)", "signatureAfterChange": " \tpublic TypeBinding substitute(TypeVariableBinding originalVariable)", "diff": ["-\tpublic TypeBinding substitute(TypeBinding originalType) {", "-\t    ", "-\t\tswitch (originalType.kind()) {", "-\t\t\t", "-\t\t\tcase Binding.TYPE_PARAMETER:", "-\t\t        TypeVariableBinding originalVariable = (TypeVariableBinding) originalType;", "-\t\t        TypeVariableBinding[] variables = this.originalMethod.typeVariables;", "-\t\t        int length = variables.length;", "-\t\t        // check this variable can be substituted given parameterized type", "-\t\t        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "-\t\t\t\t\treturn this.typeArguments[originalVariable.rank];", "-\t\t        }", "-\t\t        if (this.declaringClass instanceof Substitution) {", "-\t\t        \treturn ((Substitution)this.declaringClass).substitute(originalType);", "-\t\t        }", "-\t\t        break;", "-\t   \t\t       ", "-\t\t\tcase Binding.PARAMETERIZED_TYPE:", "-\t\t\t\tParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "-\t\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "-\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) this.substitute(originalEnclosing);", "-\t\t\t\t}", "-\t\t\t\tif (this.isRaw) {", "-\t\t\t\t\treturn this.environment.createRawType(originalParameterizedType.type, substitutedEnclosing);\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\tTypeBinding[] originalArguments = originalParameterizedType.arguments;", "-\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "-\t\t\t\tif (originalArguments != null) {", "-\t\t\t\t\tsubstitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\t\t}", "-\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "-\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "-\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;", "-\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "-\t\t\t\t\t\tlength = originalVariables.length;", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn originalParameterizedType.type;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, substitutedEnclosing);", "-\t\t\t\t}", "-\t\t\t\tbreak;   \t\t        ", "-\t\t        ", "-\t\t\tcase Binding.ARRAY_TYPE:", "-\t\t\t\tTypeBinding originalLeafComponentType = originalType.leafComponentType();", "-\t\t\t\tTypeBinding substitute = substitute(originalLeafComponentType); // substitute could itself be array type", "-\t\t\t\tif (substitute != originalLeafComponentType) {", "-\t\t\t\t\treturn this.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase Binding.WILDCARD_TYPE:", "-\t\t        WildcardBinding wildcard = (WildcardBinding) originalType;", "-\t\t        if (wildcard.kind != Wildcard.UNBOUND) {", "-\t\t\t        TypeBinding originalBound = wildcard.bound;", "-\t\t\t        TypeBinding substitutedBound = substitute(originalBound);", "-\t\t\t        if (substitutedBound != originalBound) {", "-\t\t        \t\treturn this.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, wildcard.kind);", "-\t\t\t        }", "-\t\t        }", "-\t\t        break;", "-\t", "-\t\t\tcase Binding.GENERIC_TYPE:", "-\t\t\t    // treat as if parameterized with its type variables", "-\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "-\t\t\t\toriginalEnclosing = originalType.enclosingType();", "-\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "-\t\t\t\tif (originalEnclosing != null) {", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) this.substitute(originalEnclosing);", "-\t\t\t\t}", "-\t\t\t\tif (this.isRaw) {", "-\t\t\t\t\treturn this.environment.createRawType(originalGenericType, substitutedEnclosing);\t\t\t\t\t", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "-\t\t\t\tlength = originalVariables.length;", "-\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "-\t\t\t\tsubstitutedArguments = Scope.substitute(this, originalArguments);", "-\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "-\t\t\t\t\treturn this.environment.createParameterizedType(", "-\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, substitutedEnclosing);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t    }", "-\t    return originalType;", "+\t */", "+\tpublic TypeBinding substitute(TypeVariableBinding originalVariable) {", "+        TypeVariableBinding[] variables = this.originalMethod.typeVariables;", "+        int length = variables.length;", "+        // check this variable can be substituted given parameterized type", "+        if (originalVariable.rank < length && variables[originalVariable.rank] == originalVariable) {", "+\t\t\treturn this.typeArguments[originalVariable.rank];", "+        }", "+        if (!this.isStatic() && this.declaringClass instanceof Substitution) {", "+        \treturn ((Substitution)this.declaringClass).substitute(originalVariable);", "+        }", "+\t    return originalVariable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c9ebe6ae4dd924a43beb96f8d57d6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8816a21753c2d607b8868597ac43f18ef7dd2d50", "commitAfterChange": "3af20c8fa9116cf8e52dcf498c1b4eea06f21754", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static ReferenceBinding[] substitute(Substitution substitution, ReferenceBinding[] originalTypes)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["+\t */", "+\tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType) {", "+\t\t", "+\t\tswitch (originalType.kind()) {", "+\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\t\treturn substitution.substitute( (TypeVariableBinding) originalType);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\tParameterizedTypeBinding originalParameterizedType = (ParameterizedTypeBinding) originalType;", "+\t\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "+\t\t\t\tReferenceBinding substitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "+\t\t\t\t}", "+\t\t\t\tif (substitution.isRawSubstitution()) {", "+\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.type, substitutedEnclosing);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tTypeBinding[] originalArguments = originalParameterizedType.arguments;", "+\t\t\t\tTypeBinding[] substitutedArguments = originalArguments;", "+\t\t\t\tif (originalArguments != null) {", "+\t\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "+\t\t\t\t}", "+\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "+\t\t\t\t\tidenticalVariables: { // if substituted with original variables, then answer the generic type itself", "+\t\t\t\t\t\tif (substitutedEnclosing != originalEnclosing) break identicalVariables;", "+\t\t\t\t\t\tTypeVariableBinding[] originalVariables = originalParameterizedType.type.typeVariables();", "+\t\t\t\t\t\tfor (int i = 0, length = originalVariables.length; i < length; i++) {", "+\t\t\t\t\t\t\tif (substitutedArguments[i] != originalVariables[i]) break identicalVariables;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn originalParameterizedType.type;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn originalParameterizedType.environment.createParameterizedType(", "+\t\t\t\t\t\t\toriginalParameterizedType.type, substitutedArguments, substitutedEnclosing);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\tArrayBinding originalArrayType = (ArrayBinding) originalType;", "+\t\t\t\tTypeBinding originalLeafComponentType = originalArrayType.leafComponentType;", "+\t\t\t\tTypeBinding substitute = substitute(substitution, originalLeafComponentType); // substitute could itself be array type", "+\t\t\t\tif (substitute != originalLeafComponentType) {", "+\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+", "+\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t        WildcardBinding wildcard = (WildcardBinding) originalType;", "+\t\t        if (wildcard.kind != Wildcard.UNBOUND) {", "+\t\t\t        TypeBinding originalBound = wildcard.bound;", "+\t\t\t        TypeBinding substitutedBound = substitute(substitution, originalBound);", "+\t\t\t        if (substitutedBound != originalBound) {", "+\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, wildcard.kind);", "+\t\t\t        }", "+\t\t        }", "+\t\t\t\tbreak;", "+", "+\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "+\t\t\t\toriginalEnclosing = originalType.enclosingType();", "+\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "+\t\t\t\t}", "+\t\t\t\tif (substitution.isRawSubstitution()) {", "+\t\t            return substitution.environment().createRawType(originalGenericType, substitutedEnclosing);", "+\t            }", "+\t\t\t    // treat as if parameterized with its type variables", "+\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "+\t\t\t\tint length = originalVariables.length;", "+\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "+\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "+\t\t\t\tif (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {", "+\t\t\t\t\treturn substitution.environment().createParameterizedType(", "+\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\treturn originalType;", "+\t}\t", "-\t        ReferenceBinding substitutedParameter = (ReferenceBinding)substitution.substitute(originalType);"]}], "num": 47798}
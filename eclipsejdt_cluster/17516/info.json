{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "972e090269feb739b9a1c65780a52511", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0714def1813c9db83a0aa0270415a721", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["-protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException {", "+protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException {", "+\t\tIJavaElement localElement = null;", "-\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, localElement, otherElements, elementBinding, level.intValue(), this);", "-\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, pair.binding, level.intValue(), this);", "+\t\t\t\tif (localElement == null) {", "+\t\t\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t}", "+\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, localElement, otherElements, pair.binding, level.intValue(), this);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, elementBinding, level.intValue(), this);", "+\t\t\t\t\t\tif (localElement == null) {", "+\t\t\t\t\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, localElement, otherElements, elementBinding, level.intValue(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999be74a2940a343107427f77cdc936c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "2445b4918489720c19f8f06e5268b782d8fa3e09", "commitAfterChange": "a4c0884f4909a7148eef43d80a79301d90c42921", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static Object convertDOMValueToMirrorValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t   String name,\t \t\t\t\t\t\t\t\t\t\t\t\t\t   EclipseMirrorImpl parent, \t\t\t\t\t\t\t\t\t\t\t\t\t   DeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env)", "signatureAfterChange": "     private static Object convertDOMValueToMirrorValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t   String name,\t \t\t\t\t\t\t\t\t\t\t\t\t\t   EclipseMirrorImpl parent, \t\t\t\t\t\t\t\t\t\t\t\t\t   DeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env, \t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t   ProcessorEnvImpl env,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t   TypeMirror expectedType)", "-        else if(domValue instanceof Boolean   ||", "-\t\t\t\tdomValue instanceof Byte      ||", "-\t\t\t\tdomValue instanceof Character ||", "-\t\t\t\tdomValue instanceof Double    || ", "-\t\t\t\tdomValue instanceof Float     ||", "-\t\t\t\tdomValue instanceof Integer   ||", "-\t\t\t\tdomValue instanceof Long      ||", "-\t\t\t\tdomValue instanceof Short     ||", "-\t\t\t\tdomValue instanceof String ) ", "-\t\t\treturn domValue;", "+        ", "+        final Object returnValue;", "+        if( domValue instanceof Boolean   ||", "+\t\t\tdomValue instanceof Byte      ||", "+\t\t\tdomValue instanceof Character ||", "+\t\t\tdomValue instanceof Double    || ", "+\t\t\tdomValue instanceof Float     ||", "+\t\t\tdomValue instanceof Integer   ||", "+\t\t\tdomValue instanceof Long      ||", "+\t\t\tdomValue instanceof Short     ||", "+\t\t\tdomValue instanceof String ) ", "+\t\t\treturnValue = domValue;", "+        ", "-\t\t\treturn Factory.createDeclaration((IVariableBinding)domValue, env);\t\t\t", "+        \treturnValue = Factory.createDeclaration((IVariableBinding)domValue, env);\t\t\t", "+            final TypeMirror leaf; ", "+            if( expectedType instanceof ArrayType )", "+            \tleaf = ((ArrayType)expectedType).getComponentType();", "+            else", "+            \tleaf = expectedType; // doing our best here.", "-\t\t\t\tObject o = convertDOMValueToMirrorValue( elements[i], name, parent, decl, env );", "+\t\t\t\tObject o = convertDOMValueToMirrorValue( elements[i], name, parent, decl, env, leaf );", "-\t\t\treturn Factory.createTypeMirror((ITypeBinding)domValue, env);", "+\t\t\treturnValue = Factory.createTypeMirror((ITypeBinding)domValue, env);", "-\t\t\treturn Factory.createAnnotationMirror((IResolvedAnnotation)domValue, decl, env);", "+\t\t\treturnValue = Factory.createAnnotationMirror((IResolvedAnnotation)domValue, decl, env);", "+        else\t        ", "+\t\t\t// should never reach this point", "+\t\t\tthrow new IllegalStateException(\"cannot build annotation value object from \" + domValue);", "-\t\t// should never reach this point", "-\t\tthrow new IllegalStateException(\"cannot build annotation value object from \" + domValue);", "+        return performNecessaryTypeConversion(expectedType, returnValue, name, parent, env);", "+    }"]}], "num": 17516}
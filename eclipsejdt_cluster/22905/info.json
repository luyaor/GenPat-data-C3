{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53edd58c032816aba8fc2bfda2ff2354", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4a985422be0b500768b70f633e7b57e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2193765f6a14f1428523dab68858768ca623c9d3", "commitAfterChange": "5450463d69e66bedc3d0797b782f5dab3b9072d6", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 154, "signatureBeforeChange": " \t \tprivate Set loadNonChainingJarsCache()", "signatureAfterChange": " \t \tprivate Set loadClasspathListCache(String cacheName)", "diff": ["-\tprivate Set loadNonChainingJarsCache() {", "-\t\tSet nonChainingJarsCache = new HashSet();", "-\t\tFile nonChainingJarsFile = getNonChainingJarsFile();", "+\tprivate Set loadClasspathListCache(String cacheName) {", "+\t\tSet pathCache = new HashSet();", "+\t\tFile cacheFile = getClasspathListFile(cacheName);", "-\t\t\tin = new DataInputStream(new BufferedInputStream(new FileInputStream(nonChainingJarsFile)));", "+\t\t\tin = new DataInputStream(new BufferedInputStream(new FileInputStream(cacheFile)));", "-\t\t\t\tnonChainingJarsCache.add(Path.fromPortableString(path));", "+\t\t\t\tpathCache.add(Path.fromPortableString(path));", "-\t\t\tif (nonChainingJarsFile.exists())", "+\t\t\tif (cacheFile.exists())", "-\t\treturn Collections.synchronizedSet(nonChainingJarsCache);", "+\t\treturn Collections.synchronizedSet(pathCache);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2b16cbcb225f1c8c00eb9a22efbe6ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "fbfdac6d7ce3e57d87b2a41c24ca19b307df27cb", "commitAfterChange": "1f2bb3880562da32cc48ce4bb6e920301c0ee336", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void saveExternalLibTimeStamps() throws CoreException", "signatureAfterChange": "  \tpublic void saveExternalLibTimeStamps() throws CoreException", "diff": ["+\t\t", "+\t\t// cleanup to avoid any leak ( https://bugs.eclipse.org/bugs/show_bug.cgi?id=244849 )", "+\t\tHashSet toRemove = new HashSet();", "+\t\tif (this.roots != null) {", "+\t\t\tEnumeration keys = this.externalTimeStamps.keys();", "+\t\t\twhile (keys.hasMoreElements()) {", "+\t\t\t\tObject key = keys.nextElement();", "+\t\t\t\tif (this.roots.get(key) == null) {", "+\t\t\t\t\ttoRemove.add(key);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t\tout.writeInt(this.externalTimeStamps.size());", "+\t\t\tout.writeInt(this.externalTimeStamps.size() - toRemove.size());", "-\t\t\t\tout.writeUTF(key.toPortableString());", "-\t\t\t\tLong timestamp = (Long) entry.getValue();", "-\t\t\t\tout.writeLong(timestamp.longValue());", "+\t\t\t\tif (!toRemove.contains(key)) {", "+\t\t\t\t\tout.writeUTF(key.toPortableString());", "+\t\t\t\t\tLong timestamp = (Long) entry.getValue();", "+\t\t\t\t\tout.writeLong(timestamp.longValue());", "+\t\t\t\t}"]}], "num": 22905}
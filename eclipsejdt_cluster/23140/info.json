{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34c44ad399650874ad4110d3a3ce473f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b87cb0bcb5d7ee41c30cf2e1abc953d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "8593ccbacaea58bc31d7f71f8a393c5c276effab", "commitAfterChange": "ab233550db657855007d7fd2c56941a3b07c6fa6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate void disassemble(IRuntimeInvisibleAnnotationsAttribute runtimeInvisibleAnnotationsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": "  \tprivate void disassemble(IBootstrapMethodsAttribute bootstrapMethodsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+\tprivate void disassemble(IBootstrapMethodsAttribute bootstrapMethodsAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tbuffer.append(Messages.disassembler_bootstrapmethodattributesheader);", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tIBootstrapMethodsEntry[] entries = bootstrapMethodsAttribute.getBootstrapMethods();", "+\t\tint length = entries.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (i != 0) {", "+\t\t\t\tbuffer.append(Messages.disassembler_comma);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t}", "+\t\t\tIBootstrapMethodsEntry entry = entries[i];", "+\t\t\tbuffer.append(", "+\t\t\t\tMessages.bind(", "+\t\t\t\t\tMessages.disassembler_bootstrapmethodentry,", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\tInteger.toString(entry.getBootstrapMethodReference()),", "+\t\t\t\t\t\tgetArguments(entry.getBootstrapArguments())", "+\t\t\t\t\t}));", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce7074a19aa1aaf72374511991259263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowInfo condInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "+\t\tFlowInfo condInfo =\tflowInfo.nullInfoLessUnconditionalCopy();", "+\t\t// we need to collect the contribution to nulls of the coming paths through the", "+\t\t// loop, be they falling through normally or branched to break, continue labels", "+\t\t// or catch blocks", "-\t\t\t\t\tnew LoopingFlowContext(flowContext, this, null, null, currentScope)),", "+\t\t\t\t\tnew LoopingFlowContext(flowContext, flowInfo, this, null, ", "+\t\t\t\t\t\tnull, currentScope)),", "-\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, condInfo);", "+\t\t\tcondLoopContext.complainOnDeferredFinalChecks(currentScope, ", "+\t\t\t\t\tcondInfo);", "+\t\t\tcondLoopContext.complainOnDeferredNullChecks(currentScope,", "+\t\t\t\tcondInfo.unconditionalInits());", "-\t\t\t\tFlowInfo mergedInfo = condInfo.initsWhenFalse().unconditionalInits();", "+\t\t\t\tFlowInfo mergedInfo = condInfo.initsWhenFalse();", "-\t\t\t\treturn mergedInfo;", "+\t\t\t\treturn flowInfo.unconditionalInits().", "+\t\t\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\t\t\t\tcondInfo.initsWhenFalse().unconditionalInits()); ", "+\t\t\t\t\tflowInfo,", "-\t\t\texitBranch = condInfo.initsWhenFalse();", "-\t\t\texitBranch.addInitializationsFrom(flowInfo); // recover null inits from before condition analysis", "-\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "+\t\t\texitBranch = flowInfo.copy();", "+\t\t\t// need to start over from flowInfo so as to get null inits", "+", "+\t\t\tif ((actionInfo.tagBits & ", "+\t\t\t\t\tloopingContext.initsOnContinue.tagBits &", "+\t\t\t\t\tFlowInfo.UNREACHABLE) != 0) {", "+\t\t\t\texitBranch.addInitializationsFrom(condInfo.initsWhenFalse());", "-\t\t\t\tcondLoopContext.complainOnDeferredChecks(currentScope, condInfo);", "+\t\t\t\tcondLoopContext.complainOnDeferredFinalChecks(currentScope, ", "+\t\t\t\t\t\tcondInfo);", "-\t\t\t\tloopingContext.complainOnDeferredChecks(currentScope, actionInfo);", "-\t\t\t\texitBranch.addPotentialInitializationsFrom(actionInfo.unconditionalInits());", "+\t\t\t\tcondLoopContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\t\tactionInfo);", "+\t\t\t\tloopingContext.complainOnDeferredFinalChecks(currentScope, ", "+\t\t\t\t\t\tactionInfo);", "+\t\t\t\tloopingContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\t\tactionInfo);", "+\t\t\t\texitBranch.", "+\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\tactionInfo.unconditionalInits()).", "+\t\t\t\t\taddInitializationsFrom(condInfo.initsWhenFalse());"]}], "num": 23140}
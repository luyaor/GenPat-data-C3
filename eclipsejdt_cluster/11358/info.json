{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16e7339c44cb990d7b48b3659c3a5fb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "396dadc53326f5a10d19282175285726", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "07500b3aefa58aecd5e846627b7c70382793f29f", "commitAfterChange": "641c18a6fa8d154329ae2bcdac1ab25ff8b18f71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["-\t\t\tfinal boolean sourcepathUpdated = ensureGeneratedSourceFolder(progressMonitor);", "-\t\t\tfinal IFolder genFolder = getGeneratedSourceFolder();", "-\t\t\tIPackageFragmentRoot genFragRoot = null;", "-\t\t\tIPackageFragmentRoot[] roots = _javaProject.getAllPackageFragmentRoots();", "-\t\t\tfor (IPackageFragmentRoot root : roots) {", "-\t\t\t\tif( genFolder.equals(root.getResource()) ){", "-\t\t\t\t\tgenFragRoot = root;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif( genFragRoot == null ){", "-\t\t\t\tStringBuilder sb = new StringBuilder();", "-\t\t\t\t", "-\t\t\t\tsb.append(\"*** start of classpath ***\\n\"); //$NON-NLS-1$", "-\t\t\t\tIClasspathEntry[] cp = _javaProject.getRawClasspath();", "-\t\t\t\tfor (IClasspathEntry c : cp) {", "-\t\t\t\t\tsb.append(c).append(\"\\n\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tsb.append(\"*** end of classpath ***\"); //$NON-NLS-1$", "-\t\t\t\t", "-\t\t\t\tthrow new IllegalStateException(\"failed to locate package fragment root for \" +  //$NON-NLS-1$", "-\t\t\t\t\t\tgenFolder.getName() + \". classpath:\\n\" + sb.toString()); //$NON-NLS-1$ ", "-\t\t\t}", "-\t\t\tfinal Set<IContainer> newFolders = getNewPackageFolders(pkgName, genFolder);", "-\t\t\tIPackageFragment pkgFrag = genFragRoot.createPackageFragment(pkgName, true, progressMonitor);", "+\t\t\tIFolder genSrcFolder = (IFolder)_generatedPackageFragmentRoot.getResource();", "+\t\t\tfinal Set<IContainer> newFolders = getNewPackageFolders(pkgName, genSrcFolder);", "+\t\t\tIPackageFragment pkgFrag = _generatedPackageFragmentRoot.createPackageFragment(pkgName, true, progressMonitor);", "-\t\t\t}\t\t\t", "-\t\t\tfile.setDerived(true);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Mark the file as derived. Note that certain user actions may have", "+\t\t\t// deleted this file before we get here, so if the file doesn't exist,", "+\t\t\t// marking it derived throws a ResourceException", "+\t\t\tif (file.exists()) {", "+\t\t\t\tfile.setDerived(true);", "+\t\t\t}", "-\t\t\treturn new FileGenerationResult(file, contentsDiffer, sourcepathUpdated);", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9137a26966041728224fe1de36cf73ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "65e1f9794af1b0b3028b4c4ccf6c8c82d9c2fa61", "commitAfterChange": "a443bde4ac794ade15630c52c634e854501ba28b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tboolean openedString = false;", "-\t\t\t\tString msg = iie.getMessage();", "-\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || newLine) && !firstWord;", "-\t\t\t\tif (msg == Scanner.INVALID_CHARACTER_CONSTANT) {", "-\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t}", "-\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t} else if (msg == Scanner.INVALID_CHAR_IN_STRING) {", "-\t\t\t\t\tif (openedString) {", "-\t\t\t\t\t\topenedString = false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\topenedString = true;", "-\t\t\t\t\t}", "-\t\t\t\t\ttokensBuffer.append('\"');", "-\t\t\t\t} else {", "-\t\t\t\t\t// skip failure", "-\t\t\t\t}", "-\t\t\t\t// Need to retrieve correct position", "-\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, currentTokenEndPosition-1);", "-\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\tpreviousToken = 2000;", "+\t    \t\ttoken = consumeInvalidToken(currentTokenEndPosition-1);", "-\t\t\t\tcontinue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d38625adca0372922dc09d7a382890", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 245, "methodNumberAfterChange": 252, "signatureBeforeChange": " public void removeStackFrameFor(int pos)", "signatureAfterChange": " public void removeStackFrameFor(int pos)", "diff": ["-\tStackMapFrame frame = this.frames;", "-\twhile (frame.prevFrame != null && frame.pc >= pos) {", "-\t\tif (frame.pc == pos) {", "-\t\t\tStackMapFrame next = frame.nextFrame;", "-\t\t\tStackMapFrame prev = frame.prevFrame;", "-\t\t\tprev.nextFrame = next;", "-\t\t\tif (next != null) {", "-\t\t\t\tnext.prevFrame = prev;", "-\t\t\t}", "-\t\t\tframe.nextFrame = null;", "-\t\t\tframe.prevFrame = null;", "-\t\t\tframe = prev;", "-\t\t\twhile (frame.nextFrame != null) {", "-\t\t\t\tframe = frame.nextFrame;", "-\t\t\t}", "-\t\t\tthis.frames = frame;", "-\t\t\tthis.framesCounter--;", "-\t\t\treturn;", "-\t\t}", "-\t\tframe = frame.prevFrame;", "-\t}", "+\t// TODO (olivier) need to see how to get rid of some unnecessary frames"]}], "num": 11358}
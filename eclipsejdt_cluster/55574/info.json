{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ea2b429db51d0b5706feedda52dd2f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b6df525fdca8f6d838e884ac55be6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, boolean checkTypeVariables)", "diff": ["+\t// TODO (olivier) should optimize to use switch(binding.kind()) & modifier bitmask comparisons", "-\t\tif (typeBinding == null) {", "-\t\t\treturn typeBinding2 == null;", "-\t\t} else if (typeBinding2 == null) {", "+\t\tif (typeBinding == typeBinding2)", "+\t\t\treturn true;", "+\t\tif (typeBinding == null || typeBinding2 == null)", "-\t\t} else if (typeBinding.isBaseType()) {", "-\t\t\t// base type", "-\t\t\tif (!typeBinding2.isBaseType()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\treturn typeBinding.id == typeBinding2.id;", "-\t\t} else if (typeBinding.isArrayType()) {", "-\t\t\t// array case", "-\t\t\tif (!typeBinding2.isArrayType()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\treturn typeBinding.dimensions() == typeBinding2.dimensions()", "-\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType(), checkTypeVariables);", "-\t\t} else {", "-\t\t\t// reference type", "-\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) typeBinding;", "-\t\t\tif (!(typeBinding2 instanceof ReferenceBinding)) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tReferenceBinding referenceBinding2 = (ReferenceBinding) typeBinding2;", "-\t\t\tif (referenceBinding.isParameterizedType()) {", "-\t\t\t\tif (!referenceBinding2.isParameterizedType()) {", "+\t\t", "+\t\tswitch (typeBinding.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\tif (!typeBinding2.isBaseType()) {", "-\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) referenceBinding;", "-\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding2 = (ParameterizedTypeBinding) referenceBinding2;", "+\t\t\t\treturn typeBinding.id == typeBinding2.id;", "+\t\t\t\t", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tif (!typeBinding2.isArrayType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\treturn typeBinding.dimensions() == typeBinding2.dimensions()", "+\t\t\t\t\t\t&& isEqual(typeBinding.leafComponentType(), typeBinding2.leafComponentType(), checkTypeVariables);", "+\t\t\t\t", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tif (!typeBinding2.isParameterizedType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) typeBinding;", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding2 = (ParameterizedTypeBinding) typeBinding2;", "-\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "-\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t\t&& ((referenceBinding.modifiers & CompilerModifiers.AccJustFlag) == (referenceBinding2.modifiers & CompilerModifiers.AccJustFlag));", "-\t\t\t} else if (referenceBinding.isWildcard()) {", "-\t\t\t\tif (!referenceBinding2.isWildcard()) {", "+\t\t\t\treturn CharOperation.equals(parameterizedTypeBinding.compoundName, parameterizedTypeBinding2.compoundName)", "+\t\t\t\t\t&& (parameterizedTypeBinding.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t\t\t== (parameterizedTypeBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t\t\t\t\t\t", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tif (!typeBinding2.isWildcard()) {", "-\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) referenceBinding;", "-\t\t\t\tWildcardBinding wildcardBinding2 = (WildcardBinding) referenceBinding2;", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) typeBinding;", "+\t\t\t\tWildcardBinding wildcardBinding2 = (WildcardBinding) typeBinding2;", "-\t\t\t\t\t&& wildcardBinding.kind == wildcardBinding2.kind;", "-\t\t\t} else if (referenceBinding.isGenericType()) {", "-\t\t\t\tif (!referenceBinding2.isGenericType()) {", "+\t\t\t\t\t&& wildcardBinding.boundKind == wildcardBinding2.boundKind;", "+\t\t\t\t", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\tif (!(typeBinding2.isTypeVariable())) {", "-\t\t\t\tif (checkTypeVariables) {", "-\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables(), true)) {", "+\t\t\t\tif (typeBinding.isCapture()) {", "+\t\t\t\t\tif (!(typeBinding2.isCapture())) {", "+\t\t\t\t\tCaptureBinding captureBinding = (CaptureBinding) typeBinding;", "+\t\t\t\t\tCaptureBinding captureBinding2 = (CaptureBinding) typeBinding2;", "+\t\t\t\t\treturn isEqual(captureBinding.wildcard, captureBinding2.wildcard, checkTypeVariables);", "-\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "-\t\t\t\t\t&& (referenceBinding.isGenericType() == referenceBinding2.isGenericType())", "-\t\t\t\t\t&& (referenceBinding.isRawType() == referenceBinding2.isRawType())", "-\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t\t&& ((referenceBinding.modifiers & CompilerModifiers.AccJustFlag) == (referenceBinding2.modifiers & CompilerModifiers.AccJustFlag));", "-\t\t\t} else if (referenceBinding instanceof TypeVariableBinding) {", "-\t\t\t\tif (!(referenceBinding2 instanceof TypeVariableBinding)) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) referenceBinding;", "-\t\t\t\tTypeVariableBinding typeVariableBinding2 = (TypeVariableBinding) referenceBinding2;", "+\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) typeBinding;", "+\t\t\t\tTypeVariableBinding typeVariableBinding2 = (TypeVariableBinding) typeBinding2;", "-\t\t\t} else {", "+\t\t\t", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tif (!typeBinding2.isGenericType()) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding) typeBinding;", "+\t\t\t\tReferenceBinding referenceBinding2 = (ReferenceBinding) typeBinding2;", "+\t\t\t\tif (checkTypeVariables) {", "+\t\t\t\t\tif (!isEqual(referenceBinding.typeVariables(), referenceBinding2.typeVariables(), true)) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn CharOperation.equals(referenceBinding.compoundName, referenceBinding2.compoundName)", "+\t\t\t\t\t&& (referenceBinding.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t\t\t== (referenceBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t", "+\t\t\tcase Binding.RAW_TYPE :", "+\t\t\tdefault :", "+\t\t\t\tif (!(typeBinding2 instanceof ReferenceBinding)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\treferenceBinding = (ReferenceBinding) typeBinding;", "+\t\t\t\treferenceBinding2 = (ReferenceBinding) typeBinding2;", "+\t\t\t\t\t&& (!referenceBinding2.isGenericType())", "-\t\t\t\t\t&& (referenceBinding.isInterface() == referenceBinding2.isInterface())", "-\t\t\t\t\t&& (referenceBinding.isEnum() == referenceBinding2.isEnum())", "-\t\t\t\t\t&& (referenceBinding.isAnnotationType() == referenceBinding2.isAnnotationType())", "-\t\t\t\t\t&& ((referenceBinding.modifiers & CompilerModifiers.AccJustFlag) == (referenceBinding2.modifiers & CompilerModifiers.AccJustFlag));", "-\t\t\t}", "+\t\t\t\t\t&& (referenceBinding.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation))", "+\t\t\t\t\t\t\t== (referenceBinding2.modifiers & (CompilerModifiers.AccJustFlag | IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation));", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d0ce9617140995413c7c48d1be08bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "diff": ["-\t", "+\t */", "+\tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes) {", "+\t\tTypeDeclaration typeDecl = this.ast.newTypeDeclaration();", "+\t\tint nodesLength = nodes.length;", "+\t\tfor (int i = 0; i < nodesLength; i++) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = nodes[i];", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "+\t\t\t\t\tInitializer initializer = this.ast.newInitializer();", "+\t\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "+\t\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "+\t\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "+\t\t\t\t\tsetJavaDocComment(initializer);", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\t\t} else {", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\t\t\tif (i > 0", "+\t\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "+\t\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "+\t\t\t\t\t\t// we have a multiple field declaration", "+\t\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "+\t\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "+\t\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// we can create a new FieldDeclaration", "+\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {", "+\t\t\t\tAbstractMethodDeclaration nextMethodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMethodDeclaration));", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMemberDeclaration));", "+\t\t\t}", "+\t\t}", "+\t\treturn typeDecl;", "+\t}"]}], "num": 55574}
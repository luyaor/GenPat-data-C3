{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "031dea3c9c5bc7c4aaf6a7f0dd5b371e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d5a52a3f1932cb2b6f1ffe8470b062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f595c3df6cbb40a33fa3de2980da6860a9a3730f", "commitAfterChange": "665fa70c145e3460af8c3efab89c50489feb17d0", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": " \tpublic static void setOptions(Hashtable newOptions)", "diff": ["-\t\t", "-\t\ttry {", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tIEclipsePreferences defaultPreferences = manager.getDefaultPreferences();", "-\t\t\tIEclipsePreferences instancePreferences = manager.getInstancePreferences();", "-", "-\t\t\tif (newOptions == null){", "-\t\t\t\tinstancePreferences.clear();", "-\t\t\t} else {", "-\t\t\t\tEnumeration keys = newOptions.keys();", "-\t\t\t\twhile (keys.hasMoreElements()){", "-\t\t\t\t\tString key = (String)keys.nextElement();", "-\t\t\t\t\tif (!JavaModelManager.getJavaModelManager().optionNames.contains(key)) continue; // unrecognized option", "-\t\t\t\t\tif (key.equals(CORE_ENCODING)) continue; // skipped, contributed by resource prefs", "-\t\t\t\t\tString value = (String)newOptions.get(key);", "-\t\t\t\t\tString defaultValue = defaultPreferences.get(key, null);", "-\t\t\t\t\tif (defaultValue != null && defaultValue.equals(value)) {", "-\t\t\t\t\t\tinstancePreferences.remove(key);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tinstancePreferences.put(key, value);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// persist options", "-\t\t\tinstancePreferences.flush();", "-\t\t\t", "-\t\t\t// update cache", "-\t\t\toptionsCache = newOptions==null ? null : new Hashtable(newOptions);", "-\t\t} catch (BackingStoreException e) {", "-\t\t\t// ignore", "-\t\t}", "+\t\tJavaModelManager.getJavaModelManager().setOptions(newOptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f1fa8d1d9e5600d142e7fd0ce03dd08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "0ae44cb94fd5970ee99a6625f01c4e21cfef9943", "commitAfterChange": "7d0759aa475ed30414afbcf0da4d76dd1b16cba1", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": "\r \tpublic static void setOptions(Hashtable newOptions)", "diff": ["+\t */\r", "+\tpublic static void setOptions(Hashtable newOptions) {\r", "+\t\t\r", "+\t\t// see #initializeDefaultPluginPreferences() for changing default settings\r", "+\t\tPreferences preferences = getPlugin().getPluginPreferences();\r", "+\r", "+\t\tif (newOptions == null){\r", "+\t\t\tnewOptions = JavaCore.getDefaultOptions();\r", "+\t\t}\r", "+\t\tEnumeration keys = newOptions.keys();\r", "+\t\twhile (keys.hasMoreElements()){\r", "+\t\t\tString key = (String)keys.nextElement();\r", "+\t\t\tif (key.equals(CompilerOptions.OPTION_Encoding)) continue; // skipped, contributed by resource prefs\r", "+\t\t\tString value = (String)newOptions.get(key);\r", "+\t\t\tpreferences.setValue(key, value);\r", "+\t\t}\r", "+\t}\r", "-\t */\r", "-\tpublic static void setOptions(Hashtable newOptions) {\r", "-\t\tif (newOptions == null){\r", "-\t\t\tJavaModelManager.Options = getDefaultOptions();\r", "-\t\t} else {\r", "-\t\t\tJavaModelManager.Options = (Hashtable)newOptions.clone();\r", "-\t\t}\r", "-\t}\r"]}], "num": 16868}
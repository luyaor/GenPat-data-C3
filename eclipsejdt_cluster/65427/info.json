{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6a67876131e376a1e11a1827b6e3c32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e023db0e3dfad05f48f22050f66cd4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "61bb7cec9d84760aee596143730a3411f8956386", "commitAfterChange": "3ff8bc4f6d4262fd58c9aba3cd836581456da007", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "signatureAfterChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "diff": ["-\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "+\t\t\t\tif (target == null) {", "+\t\t\t\t\t// target doesn't exist any longer", "+\t\t\t\t\t// just resize cpLocations", "+\t\t\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "+\t\t\t\t} else if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1aa57fca604642102cb6f35966d4a9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite, boolean tiebreakingVarargsMethods)", "diff": ["+\t\t\telse  // ensure that computeCompatibleMethod() below can update arguments without harming our caller: (TODO: always copy before the loop? only in 1.8?)", "+\t\t\t\tSystem.arraycopy(arguments, 0, arguments=new TypeBinding[argLength], 0, argLength);", "-\t\tif ((compatibilityLevel = parameterCompatibilityLevel(method, arguments, tiebreakingVarargsMethods)) > NOT_COMPATIBLE) {", "+\t\tif ((compatibilityLevel = myParameterCompatibilityLevel(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {"]}], "num": 65427}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d58d503f0d0af082e387b99ac8c91fa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a61b61b4a15dfbe0c57d3c2b1ecc08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " \tpublic void test050k()", "signatureAfterChange": " \tpublic void test050k()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" +", "+\t\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" +", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" +", "+\t\t\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" +", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" +", "-\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f826b59649ac9094f58b5f8a2a902c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": " \tpublic void test058b()", "signatureAfterChange": " \tpublic void test058b()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "-\t\t\t\"\t                ^^^\\n\" + ", "-\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "-\t\t\t\"\t                ^^^^\\n\" + ", "-\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354779d869939ae788b4b19da49c4b56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " \tpublic void test050i()", "signatureAfterChange": " \tpublic void test050i()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\t<N extends B> N a(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<N> Object a(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t<N extends B> N b(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method b(A<Number>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\t<N> Object b(A<String> n) { return null; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method b(A<String>) has the same erasure b(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e8fb87deeae1fa1323f95f74cf58dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0d3b917e085a30ae0d0e62e1fdd9fed7538807f0", "commitAfterChange": "76b6a3cfd736c0a5d2fa443496ebcce87b457034", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " \tpublic void test050k()", "signatureAfterChange": " \tpublic void test050k()", "diff": ["-\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" + ", "-\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" + ", "-\t\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" + ", "-\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" + ", "-\t\t\t\t\"----------\\n\":", "-\t\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "-\t\t\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" +", "-\t\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "-\t\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" +", "-\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "-\t\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" +", "-\t\t\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "-\t\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" +", "-\t\t\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "-\t\t\t\t\t\"----------\\n\";", "-\t\t\texpectedCompilerLog", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" +", "+\t\t\t\"\t<N extends B> void a(A<Number> s) {}\\n\" +", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" +", "+\t\t\t\"\t<N extends B> B a(A<Number> n) { return null; }\\n\" +", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Duplicate method a(A<Number>) in type X\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"\t<N extends B> Object b(A<Number> s) { return null; }\\n\" +", "+\t\t\t\"\t                     ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\t<N extends B> B b(A<Number> n) { return null; }\\n\" +", "+\t\t\t\"\t                ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"Duplicate method b(A<Number>) in type X\\n\" +", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f88a06e0a92a7efe51038653f2adce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81824ec5f5f9c1edd1d54b2cee36542f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " \tpublic void test054d()", "signatureAfterChange": " \tpublic void test054d()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\t<T> T a(A<T> t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "-\t\t\t\"Method a(A<T>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<T> String a(A<Object> o) {return null;}\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method a(A<Object>) has the same erasure a(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\t<T> T aa(A<T> t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method aa(A<T>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"\tString aa(A<Object> o) {return null;}\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method aa(A<Object>) has the same erasure aa(A<T>) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9de21dc7a9b942cd0c5e4d954712c438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The static method foo() from the type X should be accessed in a static way\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\tX.<B>foo();\\n\" + ", "+\t\t\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tX.<B>foo();\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tnew X().<B>foo();\\n\" + ", "-\t\t\t\"\t           ^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04b9186abea6ad4929fc5ccdd117880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": " \tpublic void test058a()", "signatureAfterChange": " \tpublic void test058a()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tvoid foo(A a) {}\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\t<T> void foo2(A a) {}\\n\" + ", "+\t\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\tvoid foo(A a) {}\\n\" + ", "+\t\t\t\t\t\"\t     ^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\t\"\t<T> void foo2(A a) {}\\n\" + ", "+\t\t\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(T) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tvoid foo(A a) {}\\n\" + ", "-\t\t\t\"\t     ^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo(A) has the same erasure foo(Object) as another method in type X<A>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo2(T) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\t\"\t<T> void foo2(A a) {}\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^\\n\" + ", "-\t\t\t\"Method foo2(A) has the same erasure foo2(Object) as another method in type X<A>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc64d1f5cb00afad0071e13f8956bee5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\t\t public static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t public static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t public static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\t \tX.<A>foo();\\n\" +", "-\t\t\t\t\"\t\t \tX.<B>foo();\\n\" +", "-\t\t\t\t\"\t\t \tnew X().<B>foo();\\n\" +", "-\t\t\t\t\"\t\t }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class A {}\\n\" +", "-\t\t\t\t\"class B {}\\n\"", "-\t\t\t},", "-\t\t\t\"ABB\"", "-\t\t);", "-\t}", "+\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\t\"\t\tX.<A>foo();\\n\" +", "+\t\t\t\t\"\t\tX.<B>foo();\\n\" +", "+\t\t\t\t\"\t\tnew X().<B>foo();\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"class B {}\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX.<B>foo();\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+/* javac 7", "+X.java:3: name clash: <N>foo() and <S>foo() have the same erasure", "+        public static <N extends B> N foo() { System.out.print(\"B\"); return null; }", "+                                      ^", "+  where N,S are type-variables:", "+    N extends B declared in method <N>foo()", "+    S extends A declared in method <S>foo()", "+X.java:6: method foo in class X cannot be applied to given types", "+                X.<B>foo();", "+                 ^", "+  required: no arguments", "+  found: no arguments", "+X.java:7: method foo in class X cannot be applied to given types", "+                new X().<B>foo();", "+                       ^", "+  required: no arguments", "+  found: no arguments", "+3 errors", "+ */", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d285d0bebb12cbdbaab1223002d05221", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 593, "methodNumberAfterChange": 593, "signatureBeforeChange": " \tpublic void test0574()", "signatureAfterChange": " \tpublic void test0574()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                      ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\"\t                     ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tnew X().new C2().foo((List<String>) null);\\n\" + ", "+\t\t\t\t\"\t                 ^^^\\n\" + ", "+\t\t\t\t\"The method foo(Object) is ambiguous for the type X.C2\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                      ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "+\t\t\t\t\t\"\t                     ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\t<T extends Integer> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                      ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t           ^^^^^^\\n\" + ", "-\t\t\t\"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t<T extends String> T foo(Object o) {  return null; } // ok\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo(Object) in type X.C2\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef2219b47fcc6fc079dc16164f69af09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " \tpublic void test054a()", "signatureAfterChange": " \tpublic void test054a()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tString a(X x) {  return null; }\\n\" +", "-\t\t\t\"\t       ^^^^^^\\n\" +", "-\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\t<T extends X> T a(T x) {  return null; }\\n\" +", "-\t\t\t\"\t                ^^^^^^\\n\" +", "-\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<T1, T2> String aaa(X x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^\\n\" + ", "+\t\t\t\"Method aaa(X) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<T extends X> T aaa(T x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^\\n\" + ", "+\t\t\t\"Method aaa(T) has the same erasure aaa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t<T> String aa(X x) {  return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^\\n\" + ", "+\t\t\t\"Method aa(X) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t<T extends X> T aa(T x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^^\\n\" + ", "+\t\t\t\"Method aa(T) has the same erasure aa(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tString a(X x) {  return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\"Method a(X) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T extends X> T a(T x) {  return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Method a(T) has the same erasure a(X) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\t<T> String z(X x) { return null; }\\n\" + ", "+\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method z(X) in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\t<T, S> Object z(X x) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method z(X) in type X\\n\" + ", "-\t\t\t// a(X) is already defined in X", "+/* javac 7", "+X.java:3: name clash: <T>aaa(T) and <T1,T2>aaa(X) have the same erasure", "+        <T extends X> T aaa(T x) {  return null; }", "+                        ^", "+  where T,T1,T2 are type-variables:", "+    T extends X declared in method <T>aaa(T)", "+    T1 extends Object declared in method <T1,T2>aaa(X)", "+    T2 extends Object declared in method <T1,T2>aaa(X)", "+X.java:5: name clash: <T#1>aa(T#1) and <T#2>aa(X) have the same erasure", "+        <T extends X> T aa(T x) {  return null; }", "+                        ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends X declared in method <T#1>aa(T#1)", "+    T#2 extends Object declared in method <T#2>aa(X)", "+X.java:7: a(X) is already defined in X", "+        <T extends X> T a(T x) {  return null; }", "+                        ^", "+X.java:9: name clash: <T#1,S>z(X) and <T#3>z(X) have the same erasure", "+        <T, S> Object z(X x) { return null; }", "+                      ^", "+  where T#1,S,T#3 are type-variables:", "+    T#1 extends Object declared in method <T#1,S>z(X)", "+    S extends Object declared in method <T#1,S>z(X)", "+    T#3 extends Object declared in method <T#3>z(X)", "+4 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef8bb1c19d4cceb36de04d777ec444e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " public void test101()", "signatureAfterChange": " public void test101()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tString getX(List<String> l) {\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tString getX(List<String> l) {\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method getX(List<Integer>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tString getX(List<String> l) {\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method getX(List<String>) has the same erasure getX(List<E>) as another method in type X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\tInteger getX(List<Integer> l) {\\n\" + ", "-\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"\tString getX(List<Integer> l) {\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Duplicate method getX(List<Integer>) in type Y\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}], "num": 7044}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72e88e23e3a893960f263bb62d83f4dc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c5ed1f35dbdfcd5d49e28477b76680b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "commitAfterChange": "a5351a8c92738db988d5e1c19e4b7b0af64944e3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "diff": ["-\t\tif (res instanceof IProject) {\r", "+\t\tif (currentProject != null || res instanceof IProject) {\r", "+\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "+\t\t\t\t// force the currentProject to be used\r", "+\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "+\t\t\t}\r", "-\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "-\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t// invalid project\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t// non java resource or invalid project\r", "-\t\t\tif (delta.getKind() != IResourceDelta.CHANGED \r", "-\t\t\t\t\t|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\treturn false; // don't go deeper for added, removed, opened or closed projects\r", "-\t\t\t}\r", "-\t\t\tif (currentProject != null) {\r", "-\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "-\t\t\t\t\t// force the currentProject to be used\r", "-\t\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "-\t\t\t\t}\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t\t// non java resource\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\t// not yet inside a package fragment root\r", "-\t\t\t\tprocessChildren = true;\r", "-\t\t\t}\r", "+\t\t\t// not yet inside a package fragment root\r", "+\t\t\tprocessChildren = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5caca864bf6cef3e71c8fdc7d2436552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "21a92705021889a65433ba6133c5366adde75501", "commitAfterChange": "caca5bd5e672e7bb994591ef9a7c0d942b3bf6fb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, int elementType, IJavaProject currentProject)", "diff": ["-\t\tif (currentProject != null) {\r", "-\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "-\t\t\t\t// force the currentProject to be used\r", "-\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "-\t\t\t}\r", "+\t\tif (res instanceof IProject) {\r", "+\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// non java resource\r", "+\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t// invalid project\r", "+\t\t\tif (delta.getKind() != IResourceDelta.CHANGED \r", "+\t\t\t\t\t|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\treturn false; // don't go deeper for added, removed, opened or closed projects\r", "+\t\t\t}\r", "-\t\t\tif (res instanceof IProject) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tif (this.isOpen(res) && !((IProject)res).hasNature(JavaCore.NATURE_ID)) return false; // non java project\r", "-\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r", "-\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t// invalid project\r", "-\t\t\t\t\treturn false;\r", "+\t\t\tif (currentProject != null) {\r", "+\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {\r", "+\t\t\t\t\t// force the currentProject to be used\r", "+\t\t\t\t\tthis.currentElement = (Openable)currentProject;\r", "-\t\t\t\tif (delta.getKind() != IResourceDelta.CHANGED \r", "-\t\t\t\t\t\t|| (delta.getFlags() & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t\treturn false; // don't go deeper for added, removed, opened or closed projects\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(delta, elementType, currentProject);\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t// non java resource\r", "+\t\t\t\t\treturn false;\r", "-\t\t\t\tif (!this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject)) {\r", "+\t\t\t\tif (childType == -1\r", "+\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject)) {\r", "-\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT) {\r", "+\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT\r", "+\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { \r", "+\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)\r"]}], "num": 32890}
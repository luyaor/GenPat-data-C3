{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bfe321477ea6bfcf4253d1e3b9bdd2b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9eeae7300cc56c69d499f518261e186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "94923d3acfa7fb7266e9eb4199d83aab0f8b9fca", "commitAfterChange": "3300bd0a2560c278ec7d1063d301ade85a3f2d14", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor)", "diff": ["-\tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) throws JavaModelException {", "+\tprivate boolean createExternalArchiveDelta(IProgressMonitor monitor) {", "-\t\t\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "-\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){", "-\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "-\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());", "+\t\t\t\t\t\tIClasspathEntry[] classpath;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++){", "+\t\t\t\t\t\t\t\tif (classpath[j].getEntryKind() == IClasspathEntry.CPE_LIBRARY){", "+\t\t\t\t\t\t\t\t\tarchivePathsToRefresh.add(classpath[j].getPath());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// project doesn't exist -> ignore", "-\t\t\t\t\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\t\t\t\tIJavaProject[] projects;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t\t\t\t\t} catch (JavaModelException e1) {", "+\t\t\t\t\t\t\t// cannot retrieve old projects list -> ignore", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tclasspath = project.getResolvedClasspath(true);", "+\t\t\t\t\t\t\t} catch (JavaModelException e2) {", "+\t\t\t\t\t\t\t\t// project doesn't exist -> ignore", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "-\t\tIJavaProject[] projects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\tIJavaProject[] projects;", "+\t\ttry {", "+\t\t\tprojects = manager.getJavaModel().getOldJavaProjectsList();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// cannot retrieve old projects list -> give up", "+\t\t\treturn false;", "+\t\t}", "-\t\t\tIClasspathEntry[] entries = project.getResolvedClasspath(true);", "+\t\t\tIClasspathEntry[] entries;", "+\t\t\ttry {", "+\t\t\t\tentries = project.getResolvedClasspath(true);", "+\t\t\t} catch (JavaModelException e1) {", "+\t\t\t\t// project does not exist -> ignore", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e6013f69c9e6fdaba16c0656213ce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "1be73a28e8693fd4a9be4c27ed8d390d77259ff3", "commitAfterChange": "324863400f4389e9f875d1a388b059a798fc9b0e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected boolean parseParam() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseParam() throws InvalidInputException", "diff": ["-\t\t\tswitch (token = readToken()) {", "+\t\t\ttry {", "+\t\t\t\ttoken = readToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\tvalid = false;", "+\t\t\t}", "+\t\t\tswitch (token) {", "-\t\t\t\tswitch (token = readToken()) {", "+\t\t\t\ttry {", "+\t\t\t\t\ttoken = readToken();", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t}", "+\t\t\t\tswitch (token) {", "-\t\t\t\tswitch (token = readToken()) {", "+\t\t\t\ttry {", "+\t\t\t\t\ttoken = readToken();", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t}", "+\t\t\t\tswitch (token) {", "-\t\t\tif (readToken() == TerminalTokens.TokenNameWHITESPACE) {", "+\t\t\ttry {", "+\t\t\t\ttoken = readToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\tvalid = false;", "+\t\t\t}", "+\t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5c8067d6edb6aec74a152f8679ea6ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3893f9662e17f5d43c912c47159d3c4894ded1f5", "commitAfterChange": "c783c9f83972dd4e94fef317bc1b83a05af7acff", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["-\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();", "+\t\t\tIPackageFragmentRoot[] roots = null;", "+\t\t\ttry {", "+\t\t\t\troots = javaProject.getPackageFragmentRoots();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// java project doesn't exist -> continue with next project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "+\t\t\t\tcontinue;", "+\t\t\t}", "-\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();", "+\t\t\t\tIJavaElement[] pkgs = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tpkgs = roots[j].getChildren();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// pkg fragment root doesn't exist -> continue with next root (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "-\t\t\t\t\tif (pkg.getChildren().length > 0 ", "+\t\t\t\t\tIJavaElement[] children = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tchildren = pkg.getChildren();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// package doesn't exist -> continue with next package (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75561)", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (children.length > 0 "]}], "num": 55528}
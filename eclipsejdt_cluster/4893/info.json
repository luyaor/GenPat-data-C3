{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acf1d9c31f7951b637c74aa1aac4f888", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0760ba81e6f9e508e5ebee72585268a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "9ef16bbd886b16521464fbe002994d5fbaed976f", "commitAfterChange": "b27f301e84866741a3cab27f0e35cc886c5fd2e8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "diff": ["+\t\tMap<FactoryContainer, Boolean> containers = null;", "-\t\t\tMap<FactoryContainer, Boolean> projectContainers = null;", "-\t\t\tif (_projectsWithFactoryPathLoaded.contains(jproj)) {", "-\t\t\t\tprojectContainers = _containerMaps.get(jproj);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// Load project-level containers", "-\t\t\t\ttry {", "-\t\t\t\t\tprojectContainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\t\t\t}", "-\t\t\t\tcatch (CoreException ce) {", "-\t\t\t\t\tce.printStackTrace();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException ioe) {", "-\t\t\t\t\tioe.printStackTrace();", "-\t\t\t\t}", "-\t\t\t\t_projectsWithFactoryPathLoaded.add(jproj);", "-\t\t\t\t_containerMaps.put(jproj, projectContainers);", "-\t\t\t}", "-\t\t\tif (projectContainers != null) {", "-\t\t\t\treturn projectContainers;", "-\t\t\t}", "-\t\t}", "-\t\t// Workspace", "-\t\tif (!_workspaceFactoryPathLoaded) {", "-\t\t\t// Load the workspace", "-\t\t\t\t_workspaceFactories = FactoryPathUtil.readFactoryPathFile(null);", "-\t\t\t\tif (_workspaceFactories == null) {", "-\t\t\t\t\t// TODO: Need to get the default set of factories -- plugins only", "-\t\t\t\t}", "+\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(jproj);", "-\t\treturn new LinkedHashMap(_workspaceFactories);", "+\t\t// Workspace if no project data was found", "+\t\tif (containers == null) {", "+\t\t\ttry {", "+\t\t\t\tcontainers = FactoryPathUtil.readFactoryPathFile(null);", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tce.printStackTrace();", "+\t\t\t}", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tioe.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\t// if no project and no workspace data was found, we'll get the defaults", "+\t\tif (containers == null) {", "+\t\t\tcontainers = new LinkedHashMap<FactoryContainer, Boolean>();", "+\t\t}", "+\t\thandlePluginContainers(containers);", "+\t\treturn new LinkedHashMap(containers);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b15dc3c6f39efa56305d3989929be2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "06cb2fb2cd016c5bb9806c77f9b924461e74f729", "commitAfterChange": "f722c144cbd3d9ea00d9fcbd08f20190051637e3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t\tpublic void logIncorrectExtDirsEntry(String wrongPath)", "signatureAfterChange": " private void addPendingErrors(String message)", "diff": ["-\t\t */", "-\t\tpublic void logIncorrectExtDirsEntry(String wrongPath) {", "-\t\t\tif ((this.tagBits & Logger.XML) != 0) {", "-\t\t\t\tthis.parameters.put(Logger.MESSAGE, this.main.bind(\"configure.incorrectExtDirsEntry\", wrongPath)); //$NON-NLS-1$", "-\t\t\t\tthis.printTag(Logger.ERROR_TAG, this.parameters, true, true);", "-\t\t\t}", "-\t\t\tthis.printlnErr(this.main.bind(", "-\t\t\t\t\"configure.incorrectExtDirsEntry\", wrongPath)); //$NON-NLS-1$", "-\t\t}", "+}", "+private void addPendingErrors(String message) {", "+\tif (this.pendingErrors == null) {", "+\t\tthis.pendingErrors = new ArrayList();", "+\t}", "+\tthis.pendingErrors.add(message);"]}], "num": 4893}
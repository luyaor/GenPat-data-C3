{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee4daaf9661eda4be625920e5c6b30a2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff433b33ad98d2b3bd1fefaa3582274", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6e8c555a7d6f504d4ea246c591d5bb3f080d438", "commitAfterChange": "3316f207e855c46fb5e805791239fa37620ca8c4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void cleanUpIndexes()", "signatureAfterChange": " public void cleanUpIndexes()", "diff": ["-\tSimpleLookupTable knownPaths = new SimpleLookupTable();", "+\tSimpleSet knownPaths = new SimpleSet();", "-\tfor (int j = 0, max = selectedIndexes.length; j < max; j++) {", "-\t\t// TODO should use getJavaPluginWorkingLocation()+index simple name to avoid bugs such as https://bugs.eclipse.org/bugs/show_bug.cgi?id=62267", "-\t\tString path = selectedIndexes[j].getIndexFile().getAbsolutePath();", "-\t\tknownPaths.put(path, path);", "+\tfor (int i = 0, l = selectedIndexes.length; i < l; i++) {", "+\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();", "+\t\tknownPaths.add(path);", "-\tif (indexStates != null) {", "-\t\tObject[] keys = indexStates.keyTable;", "-\t\tint keysLength = keys.length;", "-\t\tint updates = 0;", "-\t\tString locations[] = new String[keysLength];", "+\tif (this.indexStates != null) {", "+\t\tObject[] keys = this.indexStates.keyTable;", "+\t\tIPath[] locations = new IPath[this.indexStates.elementSize];", "+\t\tint count = 0;", "-\t\t\tString key = (String) keys[i];", "-\t\t\tif (key != null && !knownPaths.containsKey(key)) {", "-\t\t\t\tlocations[updates++] = key;", "-\t\t\t}", "+\t\t\tIPath key = (IPath) keys[i];", "+\t\t\tif (key != null && !knownPaths.includes(key.toOSString()))", "+\t\t\t\tlocations[count++] = key;", "-\t\tif (updates > 0) {", "+\t\tif (count > 0)", "-\t\t}", "-", "-\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "-\tif (indexesDirectory.isDirectory()) {", "-\t\tFile[] indexesFiles = indexesDirectory.listFiles();", "-\t\tif (indexesFiles != null) {", "-\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "-\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "-\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\tUtil.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "-\t\t\t\t\tindexesFiles[i].delete();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\tdeleteIndexFiles(knownPaths);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c87644cb1be636a56bcd3ba512ebb0ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "ce9d82264275b3c4ad926312ca4ca735e225fab4", "commitAfterChange": "3f70f3f99df21def4574d8396aee2d34db8ebf8e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r public void shutdown()", "signatureAfterChange": "\r \r public void shutdown()", "diff": ["-\ttry {\r", "-\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();\r", "-\t\tHashMap keepingIndexesPaths = new HashMap();\r", "-\t\tif (model != null) {\r", "-\t\t\t// remove unused indexes\r", "-\t\t\tIJavaProject[] projects = model.getJavaProjects();\r", "-\t\t\tfor (int i = 0, max = projects.length; i < max; i++) {\r", "-\t\t\t\tif (projects[i].exists()) {\r", "-\t\t\t\t\tString path = this.getIndex(projects[i].getProject().getFullPath()).getIndexFile().getPath();\r", "-\t\t\t\t\tkeepingIndexesPaths.put(path,path);\r", "-\t\t\t\t\tIClasspathEntry[] entries = projects[i].getResolvedClasspath(true);\r", "-\t\t\t\t\tfor (int j = 0, max2 = entries.length; j < max2; j++) {\r", "-\t\t\t\t\t\tif (entries[j].getEntryKind() == ClasspathEntry.CPE_LIBRARY) {\r", "-\t\t\t\t\t\t\tpath = this.getIndex(entries[j].getPath()).getIndexFile().getPath();\r", "-\t\t\t\t\t\t\tkeepingIndexesPaths.put(path,path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tFile indexesDirectory = new File(this.getJavaPluginWorkingLocation().toOSString());\r", "-\t\t\tif (indexesDirectory.isDirectory()) {\r", "-\t\t\t\tFile[] indexesFiles = indexesDirectory.listFiles();\r", "-\t\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {\r", "-\t\t\t\t\tif (keepingIndexesPaths.get(indexesFiles[i].getAbsolutePath()) == null) {\r", "-\t\t\t\t\t\tindexesFiles[i].delete();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "+\tHashMap keepingIndexesPaths = new HashMap();\r", "+\tIndexSelector indexSelector = new IndexSelector(new JavaWorkspaceScope(), null, this);\r", "+\tIIndex[] selectedIndexes = indexSelector.getIndexes();\r", "+\tfor (int i = 0, max = selectedIndexes.length; i < max; i++) {\r", "+\t\tString path = selectedIndexes[i].getIndexFile().getAbsolutePath();\r", "+\t\tkeepingIndexesPaths.put(path, path);\r", "+\t}\r", "+\tFile indexesDirectory = new File(this.getJavaPluginWorkingLocation().toOSString());\r", "+\tif (indexesDirectory.isDirectory()) {\r", "+\t\tFile[] indexesFiles = indexesDirectory.listFiles();\r", "+\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {\r", "+\t\t\tif (keepingIndexesPaths.get(indexesFiles[i].getAbsolutePath()) == null) {\r", "+\t\t\t\tindexesFiles[i].delete();\r", "-\t} catch(JavaModelException e) {\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5202a4be5a21b3fc8f9e8ec5fd777e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "7945d73aff0d324cf6c482ab612e6ee2d0b41a3c", "commitAfterChange": "e08b6baf18ecb6431e206eaa17596ee7ddd52af0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void shutdown()", "signatureAfterChange": " public void cleanUpIndexes()", "diff": ["+ */", "+public void cleanUpIndexes() {", "+\tSimpleLookupTable knownPaths = new SimpleLookupTable();", "+\tSearchParticipant[] participants = SearchEngine.getSearchParticipants();", "+\tIJavaSearchScope scope = new JavaWorkspaceScope();", "+\tfor (int i = 0, length = participants.length; i < length; i++) {", "+\t\tPatternSearchJob job = new PatternSearchJob(null, participants[i], scope, null);", "+\t\tIndex[] selectedIndexes = job.getIndexes(null);", "+\t\tfor (int j = 0, max = selectedIndexes.length; j < max; j++) {", "+\t\t\tString path = selectedIndexes[j].getIndexFile().getAbsolutePath();", "+\t\t\tknownPaths.put(path, path);", "+\t\t}", "+\t}", "+", "+\tif (indexStates != null) {", "+\t\tObject[] keys = indexStates.keyTable;", "+\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "+\t\t\tString key = (String) keys[i];", "+\t\t\tif (key != null && !knownPaths.containsKey(key))", "+\t\t\t\tupdateIndexState(key, null);", "+\t\t}", "+\t}", "+", "+\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "+\tif (indexesDirectory.isDirectory()) {", "+\t\tFile[] indexesFiles = indexesDirectory.listFiles();", "+\t\tif (indexesFiles != null) {", "+\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "+\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "+\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\tJobManager.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "+\t\t\t\t\tindexesFiles[i].delete();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-}", "-public void shutdown() {", "-\tif (VERBOSE)", "-\t\tJobManager.verbose(\"Shutdown\"); //$NON-NLS-1$", "-", "-\tSimpleLookupTable knownPaths = new SimpleLookupTable();", "-\tSearchParticipant[] participants = SearchEngine.getSearchParticipants();", "-\tIJavaSearchScope scope = new JavaWorkspaceScope();", "-\tfor (int i = 0, length = participants.length; i < length; i++) {", "-\t\tPatternSearchJob job = new PatternSearchJob(null, participants[i], scope, null);", "-\t\tIndex[] selectedIndexes = job.getIndexes(null);", "-\t\tfor (int j = 0, max = selectedIndexes.length; j < max; j++) {", "-\t\t\tString path = selectedIndexes[j].getIndexFile().getAbsolutePath();", "-\t\t\tknownPaths.put(path, path);", "-\t\t}", "-\t}", "-", "-\tif (indexStates != null) {", "-\t\tObject[] keys = indexStates.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tString key = (String) keys[i];", "-\t\t\tif (key != null && !knownPaths.containsKey(key))", "-\t\t\t\tupdateIndexState(key, null);", "-\t\t}", "-\t}", "-", "-\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "-\tif (indexesDirectory.isDirectory()) {", "-\t\tFile[] indexesFiles = indexesDirectory.listFiles();", "-\t\tif (indexesFiles != null) {", "-\t\t\tfor (int i = 0, indexesFilesLength = indexesFiles.length; i < indexesFilesLength; i++) {", "-\t\t\t\tString fileName = indexesFiles[i].getAbsolutePath();", "-\t\t\t\tif (!knownPaths.containsKey(fileName) && fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\tJobManager.verbose(\"Deleting index file \" + indexesFiles[i]); //$NON-NLS-1$", "-\t\t\t\t\tindexesFiles[i].delete();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-", "-\tsuper.shutdown();"]}], "num": 62836}
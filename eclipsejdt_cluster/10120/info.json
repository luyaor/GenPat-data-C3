{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72d31b244ee5fd06311d83d11aa28587", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553dd041551074afa8c59fbd39929875", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "318dc15f93f5b3f5f4463826d6cce77e09ce4026", "commitAfterChange": "38b7a9cf48e2b7b43c2a92fc5bd92474a255d139", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "diff": ["-\t// field name\r", "-\tboolean nameMatch = true;\r", "-\tif (this.name != null) {\r", "-\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\tnameMatch = this.matchesName(this.name, ((SingleNameReference)nameRef).token);\r", "-\t\t} else { // QualifiedNameReference\r", "-\t\t\tnameMatch = false;\r", "-\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding-1, max = tokens.length; i < max && !nameMatch; i++){\r", "-\t\t\t\tif (i >= 0) nameMatch = this.matchesName(this.name, tokens[i]);\r", "-\t\t\t}\r", "-\t\t}\t\t\t\t\r", "-\t} \r", "-\tif (!nameMatch) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tif (resolve) {\t\r", "+\tif (!resolve) {\r", "+\t\t// field name\r", "+\t\tboolean nameMatch = true;\r", "+\t\tif (this.name != null) {\r", "+\t\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\t\tnameMatch = this.matchesName(this.name, ((SingleNameReference)nameRef).token);\r", "+\t\t\t} else { // QualifiedNameReference\r", "+\t\t\t\tnameMatch = false;\r", "+\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding-1, max = tokens.length; i < max && !nameMatch; i++){\r", "+\t\t\t\t\tif (i >= 0) nameMatch = this.matchesName(this.name, tokens[i]);\r", "+\t\t\t\t}\r", "+\t\t\t}\t\t\t\t\r", "+\t\t} \r", "+\t\tif (nameMatch) {\r", "+\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else {\r", "-\t\t\t\t\t\tFieldBinding otherBinding = qNameRef.otherBindings[i];\r", "-\t\t\t\t\t\tif (this.matchesName(this.name, otherBinding.name)) {\r", "+\t\t\t\t\t\tchar[] token = qNameRef.tokens[i + qNameRef.indexOfFirstFieldBinding];\r", "+\t\t\t\t\t\tif (this.matchesName(this.name, token)) {\r", "+\t\t\t\t\t\t\tFieldBinding otherBinding = qNameRef.otherBindings[i];\r", "-\t} else {\r", "-\t\treturn POSSIBLE_MATCH;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40259d60dfbd4a942ec16eb86dd5405", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "8635a189d924741fc24bc4be873c4d30df46a524", "commitAfterChange": "903406128c19b4f927e6592cfb93facd59066f36", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "diff": ["-\t\tboolean nameMatch = true;\r", "-\t\tif (this.name != null) {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tnameMatch = this.matchesName(this.name, ((SingleNameReference)nameRef).token);\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tnameMatch = false;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tfor (int i = qNameRef.indexOfFirstFieldBinding-1, max = tokens.length; i < max && !nameMatch; i++){\r", "-\t\t\t\t\tif (i >= 0) nameMatch = this.matchesName(this.name, tokens[i]);\r", "-\t\t\t\t}\r", "-\t\t\t}\t\t\t\t\r", "-\t\t} \r", "-\t\tif (nameMatch) {\r", "+\t\tif (this.name == null) {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "+\t\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\t\tif (this.matchesName(this.name, ((SingleNameReference)nameRef).token)) {\r", "+\t\t\t\t\t// can only be a possible match since resolution is needed \r", "+\t\t\t\t\t// to find out if it is a field ref\r", "+\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t} else { // QualifiedNameReference\r", "+\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\t\tboolean matchOnFirstToken = false;\r", "+\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "+\t\t\t\t\tif (this.matchesName(this.name, tokens[i])) {\r", "+\t\t\t\t\t\t// can only be a possible match since resolution is needed \r", "+\t\t\t\t\t\t// to find out if it is a field ref\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\t\t\t\t\r", "+\t\t} \r"]}], "num": 10120}
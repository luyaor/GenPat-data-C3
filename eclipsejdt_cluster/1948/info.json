{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62114bf1279f8d494cdc53939d2a3be0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b402de27cc00ce870ba4efb5d0d450b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void buildSupertypes()", "signatureAfterChange": " \tprotected void buildSupertypes()", "diff": ["-\t\t\tsynchronized(nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set", "-\t\t\t\tIWorkingCopy[] workingCopies = this.getWokingCopies();", "-\t\t\t\tIWorkingCopy[] unitsToLookInside;", "-\t\t\t\tif (unitToLookInside != null) {", "-\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "-\t\t\t\t\tif (wcLength == 0) {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "-\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "-\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\t\t}", "+\t\t\tIWorkingCopy[] workingCopies = this.getWokingCopies();", "+\t\t\tIWorkingCopy[] unitsToLookInside;", "+\t\t\tif (unitToLookInside != null) {", "+\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "+\t\t\t\tif (wcLength == 0) {", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "+\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "+\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\ttry {", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside);", "-\t\t\t\t\t// resolve", "-\t\t\t\t\tthis.hierarchyResolver.resolve(type);", "-\t\t\t\t} finally {", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tnameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe", "+\t\t\t\t// resolve", "+\t\t\t\tthis.hierarchyResolver.resolve(type);", "+\t\t\t} finally {", "+\t\t\t\tnameLookup.setUnitsToLookInside(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf6a551e612df0d22c18c15cd071e464", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList units, IWorkingCopy[] workingCopies, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the units to look inside are set", "-\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "-\t\t\t\tIWorkingCopy[] unitsToLookInside;", "-\t\t\t\tif (unitToLookInside != null) {", "-\t\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "-\t\t\t\t\tif (wcLength == 0) {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "-\t\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "-\t\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\t\t}", "+\t\tif (inProjectOfFocusType) {", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();", "+\t\t\tIWorkingCopy[] unitsToLookInside;", "+\t\t\tif (unitToLookInside != null) {", "+\t\t\t\tint wcLength = workingCopies == null ? 0 : workingCopies.length;", "+\t\t\t\tif (wcLength == 0) {", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[] {unitToLookInside};", "-\t\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\t\t\tunitsToLookInside = new IWorkingCopy[wcLength+1];", "+\t\t\t\t\tunitsToLookInside[0] = unitToLookInside;", "+\t\t\t\t\tSystem.arraycopy(workingCopies, 0, unitsToLookInside, 1, wcLength);", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside);", "+\t\t\t} else {", "+\t\t\t\tunitsToLookInside = workingCopies;", "+\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe"]}], "num": 1948}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e730a0a6e2f806335f8d56de797073cc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03f65caddb347acd474d432d384f6e6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d939c06c1bb86210ecdbf93881e5113054d8f519", "commitAfterChange": "69eeae945b65b4592f77b2b84f96eeb06060ca5b", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tpublic boolean isInsideDeprecatedCode()", "signatureAfterChange": " \t \tpublic boolean isInsideDeprecatedCode()", "diff": ["-\t\t\t\t\tif (type != null && type.isViewedAsDeprecated())", "-\t\t\t\t\t\treturn true;", "+\t\t\t\t\tif (type != null) {", "+\t\t\t\t\t\ttype.initializeDeprecatedAnnotationTagBits(); // may not have been resolved until then", "+\t\t\t\t\t\tif (type.isViewedAsDeprecated())", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "-\t\t\t\tif (context != null && context.isViewedAsDeprecated())", "-\t\t\t\t\treturn true;", "+\t\t\t\tif (context != null) {", "+\t\t\t\t\tcontext.initializeDeprecatedAnnotationTagBits(); // may not have been resolved until then", "+\t\t\t\t\tif (context.isViewedAsDeprecated()) ", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "-\t\t\t\t\tif (type != null && type.isViewedAsDeprecated())", "-\t\t\t\t\t\treturn true;", "+\t\t\t\t\tif (type != null) {", "+\t\t\t\t\t\ttype.initializeDeprecatedAnnotationTagBits(); // may not have been resolved until then", "+\t\t\t\t\t\tif (type.isViewedAsDeprecated())", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63217c1c4d0099748470d24fc8bd25b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "3e7cf81e60cc58d031ed4122a60846c5260297d0", "commitAfterChange": "4c23c3ad7f7e3db972a09fa55eef5555a90bc2bd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\texpectedCollectionType = upperScope.createArrayType(elementType, 1);", "-\t\t\t\tthis.collection.computeConversion(this.scope, expectedCollectionType, collectionType);", "-\t\t\t\t\texpectedCollectionType = null;", "+\t\t\t\t\tthis.collection.computeConversion(this.scope, collectionType, collectionType);", "-\t\t\t\t\texpectedCollectionType = null;", "+\t\t\t\t\tthis.collection.computeConversion(this.scope, collectionType, collectionType);", "+\t\t\t\t} else {", "+\t\t\t\t\texpectedCollectionType = upperScope.createArrayType(elementType, 1);", "+\t\t\t\t\tthis.collection.computeConversion(this.scope, expectedCollectionType, collectionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712c1006a89be0acc5c402e7a3c1f331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "commitAfterChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (leftTypeId == T_String", "-\t\t\t\t\t&& rightType.isArrayType()", "-\t\t\t\t\t&& ((ArrayBinding) rightType).elementsType() == CharBinding) {", "-\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(right);", "-\t\t\t\t\t} else if (rightTypeId == T_String", "-\t\t\t\t\t\t\t&& leftType.isArrayType()", "-\t\t\t\t\t\t\t&& ((ArrayBinding) leftType).elementsType() == CharBinding) {", "-\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(left);", "+\t\t\tif (leftTypeId == T_String) {", "+\t\t\t\tthis.left.computeConversion(scope, leftType, leftType);", "+\t\t\t\tif (rightType.isArrayType() && ((ArrayBinding) rightType).elementsType() == CharBinding) {", "+\t\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(right);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (rightTypeId == T_String) {", "+\t\t\t\tthis.right.computeConversion(scope, rightType, rightType);", "+\t\t\t\tif (leftType.isArrayType() && ((ArrayBinding) leftType).elementsType() == CharBinding) {", "+\t\t\t\t\tscope.problemReporter().signalNoImplicitStringConversionForCharArrayExpression(left);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74a04270332c5e98a52b963596381dae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5a9617d46eeedacda30ce2f97acd9c0340885311", "commitAfterChange": "f3e681d78029f0800d6f55351b70c72cab18c6a2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\tReferenceBinding foundType = null;", "+\t\tint problemId = NotFound;", "+\t\t\tReferenceBinding foundType = null;", "-\t\t\tif (foundType != null && foundType.problemId() != NotVisible)", "-\t\t\t\treturn foundType;", "+\t\t\tif (foundType != null) {", "+\t\t\t\tif (foundType.problemId() != NotVisible) return foundType;", "+\t\t\t\tproblemId = NotVisible;", "+\t\t\t}", "-\t\t\tboolean foundInImport = false;", "-\t\t\tReferenceBinding type = null;", "+\t\t\t\tboolean foundInImport = false;", "+\t\t\t\tReferenceBinding type = null;", "-\t\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, currentPackage)", "-\t\t\t\t\t\t\t\t: findDirectMemberType(name, (ReferenceBinding) resolvedImport);", "-\t\t\t\t\t\tif (temp != null && temp.isValidBinding()) {", "-\t\t\t\t\t\t\tImportReference importReference = someImport.reference;", "-\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\t\tif (foundInImport)", "-\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "-\t\t\t\t\t\t\ttype = temp;", "-\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, currentPackage)", "+\t\t\t\t\t\t\t: findDirectMemberType(name, (ReferenceBinding) resolvedImport);", "+\t\t\t\t\t\tif (temp != null) {", "+\t\t\t\t\t\t\tif (temp.isValidBinding()) {", "+\t\t\t\t\t\t\t\tImportReference importReference = someImport.reference;", "+\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\ttype = temp;", "+\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tproblemId = temp.problemId();", "+\t\t\t\t\t\t\t}", "+\t\t\t\tif (type != null) return type;", "-\t\t\tif (type != null) return type;", "-\t\tif (foundType != null) return foundType; // problem type from above", "-\t\treturn new ProblemReferenceBinding(name, NotFound);", "+\t\treturn new ProblemReferenceBinding(name, problemId);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1f67beeb3a681202fa5ed6a8d8c400", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tScribe(CodeFormatterVisitor formatter, long sourceLevel, IRegion[] regions, CodeSnippetParsingUtil codeSnippetParsingUtil, boolean includeComments)", "signatureAfterChange": "  \tScribe(CodeFormatterVisitor formatter, long sourceLevel, IRegion[] regions, CodeSnippetParsingUtil codeSnippetParsingUtil, boolean includeComments)", "diff": ["+", "-\t\tthis.scanner = new Scanner(true, true, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\tinitializeScanner(sourceLevel, formatter.preferences);", "+\t\tthis.firstLS = this.lineSeparator.charAt(0);", "+\t\tthis.lsLength = this.lineSeparator.length();"]}], "num": 63573}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e57c72aa8b169ee7835463bd0be6b9b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a9144e919bcbbbda47007962b99d71b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "505b0db16406f11df3227a34e8e784faefbd6e90", "commitAfterChange": "09731db443a17aa3c4de981e4334f98fc716832d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void updateAffectedProjects(IPath prerequisiteProjectPath)", "signatureAfterChange": " \tprotected void updateAffectedProjects(IPath prerequisiteProjectPath)", "diff": ["+\t\t// remove all update classpath post actions for this project", "+\t\tremoveAllPostAction(prerequisiteProjectPath.toString());", "+\t\t", "-\t\t\t\t\tJavaProject affectedProject = (JavaProject) projects[i];", "+\t\t\t\t\tfinal JavaProject affectedProject = (JavaProject) projects[i];", "-\t\t\t\t\t\t\taffectedProject.setRawClasspath(", "-\t\t\t\t\t\t\t\tUpdateClasspath, ", "-\t\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation, ", "-\t\t\t\t\t\t\t\tthis.fMonitor, ", "-\t\t\t\t\t\t\t\tthis.canChangeResource,  ", "-\t\t\t\t\t\t\t\taffectedProject.getResolvedClasspath(true), ", "-\t\t\t\t\t\t\t\tfalse, // updating only - no validation", "-\t\t\t\t\t\t\t\tfalse); // updating only - no need to save", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\t\treturn affectedProject.getPath().toString();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\t\taffectedProject.setRawClasspath(", "+\t\t\t\t\t\t\t\t\t\t\tUpdateClasspath, ", "+\t\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation, ", "+\t\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.this.fMonitor, ", "+\t\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.this.canChangeResource,  ", "+\t\t\t\t\t\t\t\t\t\t\taffectedProject.getResolvedClasspath(true), ", "+\t\t\t\t\t\t\t\t\t\t\tfalse, // updating only - no validation", "+\t\t\t\t\t\t\t\t\t\t\tfalse); // updating only - no need to save", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\t\tREMOVEALL_APPEND);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82254d86df89a8cf61c43b0a98cf325e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "6e3659bcc81a697d6dd17eb7b12230c5c5e2e02e", "commitAfterChange": "84c253c6de5d6b04e227efb942ee9828a865cfbe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tfinal JavaProject project)", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas( \t\tIClasspathEntry[] oldResolvedPath, \t\tIClasspathEntry[] newResolvedPath, \t\tfinal JavaProject project)", "diff": ["-", "+\t\t\t\t", "-\t\t\t\t// Remove the .java files from the index.", "-\t\t\t\t// Note that .class files belong to binary folders which can be shared, ", "-\t\t\t\t// so leave the index for .class files.", "-\t\t\t\tif (indexManager != null && changeKind == IClasspathEntry.CPE_SOURCE) {", "+\t\t\t\t// Remove the .java files from the index for a source folder", "+\t\t\t\t// For a lib folder or a .jar file, remove the corresponding index if not shared.", "+\t\t\t\tif (indexManager != null) {", "-\t\t\t\t\tfinal char[][] exclusionPatterns = ((ClasspathEntry)oldEntry).fullExclusionPatternChars();", "-\t\t\t\t\tpostAction(new IPostAction() {", "-\t\t\t\t\t\tpublic String getID() {", "-\t\t\t\t\t\t\treturn path.toString();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic void run() throws JavaModelException {", "-\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path, exclusionPatterns);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}, ", "-\t\t\t\t\tREMOVEALL_APPEND);", "+\t\t\t\t\tswitch (changeKind) {", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:", "+\t\t\t\t\t\t\tfinal char[][] exclusionPatterns = ((ClasspathEntry)oldEntry).fullExclusionPatternChars();", "+\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\treturn path.toString();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, path, exclusionPatterns);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}, ", "+\t\t\t\t\t\t\tREMOVEALL_APPEND);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t\tfinal DeltaProcessor deltaProcessor = manager.deltaProcessor;", "+\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\treturn path.toString();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\tif (deltaProcessor.otherRoots.get(path) == null) { // if root was not shared", "+\t\t\t\t\t\t\t\t\t\tindexManager.removeIndex(path);", "+\t\t\t\t\t\t\t\t\t\t// TODO: (kent) we could just remove the in-memory index and have the indexing check for timestamps", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}, ", "+\t\t\t\t\t\t\tREMOVEALL_APPEND);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}\t\t"]}], "num": 70165}
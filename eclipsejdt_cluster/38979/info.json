{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96a84d41a7ded593285a7320047d92b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf0a1ea757185052c62392aa454c3c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tBlockScope scope)", "diff": ["-\t\tif (parameterizedSingleTypeReference.annotations != null) formatInlineAnnotations(parameterizedSingleTypeReference.annotations[0], false);", "-\t\tformatLeadingDimensions(parameterizedSingleTypeReference, false);", "+\t\tint dimensions = getDimensions();", "+\t\tif (dimensions != 0 && dimensions <= parameterizedSingleTypeReference.dimensions()) {", "+\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70928766d8957142aa46e3e91e8b7623", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedSingleTypeReference parameterizedSingleTypeReference, \t\t\tClassScope scope)", "diff": ["-\t\tif (parameterizedSingleTypeReference.annotations != null) formatInlineAnnotations(parameterizedSingleTypeReference.annotations[0], false);", "-\t\tformatLeadingDimensions(parameterizedSingleTypeReference, false);", "+\t\tint dimensions = getDimensions();", "+\t\tif (dimensions != 0 && dimensions <= parameterizedSingleTypeReference.dimensions()) {", "+\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a287c90babde4c6f72ebcc5e651c10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f875f4161e47c5087f589529b7e7ee5cf66c1b26", "commitAfterChange": "3e03e3984540d3907fa7739b419f89dad9725944", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void formatArrayQualifiedTypeReference(ArrayQualifiedTypeReference arrayQualifiedTypeReference)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "diff": ["-\tprivate void formatArrayQualifiedTypeReference(ArrayQualifiedTypeReference arrayQualifiedTypeReference) {", "-\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t}", "-\t\tformatQualifiedTypeReference(arrayQualifiedTypeReference);", "-\t\tformatLeadingDimensions(arrayQualifiedTypeReference, true);", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t}", "-\t}", "+\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference,", "+\t\tBlockScope scope) {", "+\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "+\t\t\t}", "+\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "+\t\t\tint dimensions = getDimensions();", "+\t\t\tif (dimensions != 0) {", "+\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "+\t\t\t}"]}], "num": 38979}
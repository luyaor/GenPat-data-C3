{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "929a4acac940f4a8af18a0865e6ee1f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5064d8d96eb653d1aeebbfab8c8bb04a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "signatureAfterChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation)", "diff": ["-\t */", "-\tpublic void generateSubRoutineInvocation(", "-\t\t\tBlockScope currentScope,", "-\t\t\tCodeStream codeStream) {", "-\t", "-\t\tif (isSubRoutineEscaping()) {", "-\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "-\t\t} else {", "-\t\t\tif (currentScope.compilerOptions().inlineJsrBytecode) {", "-\t\t\t\t// cannot use jsr bytecode, then simply inline the subroutine", "-\t\t\t\tthis.exitAnyExceptionHandler();", "-\t\t\t\t// inside try block, ensure to deactivate all catch block exception handlers while inlining finally block", "-\t\t\t\tfor (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {", "-\t\t\t\t\tthis.enclosingExceptionLabels[i].placeEnd();", "-\t\t\t\t}", "-\t\t\t\tthis.finallyBlock.generateCode(currentScope, codeStream);", "-\t\t\t\tthis.enterAnyExceptionHandler(codeStream);", "-\t\t\t\t// inside try block, ensure to reactivate all catch block exception handlers after inlining finally block", "-\t\t\t\tfor (int i = 0, length = this.enclosingExceptionLabels == null ? 0 : this.enclosingExceptionLabels.length; i < length; i++) {", "-\t\t\t\t\tthis.enclosingExceptionLabels[i].placeStart();", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// classic subroutine invocation, distinguish case of non-returning subroutine", "-\t\t\t\tcodeStream.jsr(this.subRoutineStartLabel);", "-\t\t}", "-\t}", "+ */", "+public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation) {", "+\tint finallyMode = finallyMode();", "+\tswitch(finallyMode) {", "+\t\tcase FINALLY_DOES_NOT_COMPLETE :", "+\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "+\t\t\treturn true;", "+", "+\t\tcase NO_FINALLY :", "+\t\t\texitDeclaredExceptionHandlers(codeStream);", "+\t\t\treturn false;", "+\t}", "+\t// optimize subroutine invocation sequences, using the targetLocation (if any)", "+\tif (targetLocation != null) {", "+\t\tif (this.reusableJSRTargetsCount > 0) {", "+\t\t\tnextReusableTarget: for (int i = 0, count = this.reusableJSRTargetsCount; i < count; i++) {", "+\t\t\t\tObject reusableJSRTarget = this.reusableJSRTargets[i];", "+\t\t\t\tdifferentTarget: {", "+\t\t\t\t\tif (targetLocation == reusableJSRTarget) ", "+\t\t\t\t\t\tbreak differentTarget;", "+\t\t\t\t\tif (targetLocation instanceof Constant ", "+\t\t\t\t\t\t\t&& reusableJSRTarget instanceof Constant", "+\t\t\t\t\t\t\t&& ((Constant)targetLocation).hasSameValue((Constant) reusableJSRTarget)) {", "+\t\t\t\t\t\tbreak differentTarget;", "+\t\t\t\t\t}", "+\t\t\t\t\t// cannot reuse current target", "+\t\t\t\t\tcontinue nextReusableTarget;", "+\t\t\t\t}", "+\t\t\t\t// current target has been used in the past, simply branch to its label", "+\t\t\t\tcodeStream.goto_(this.reusableJSRSequenceStartLabels[i]);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.reusableJSRTargets = new Object[3];", "+\t\t\tthis.reusableJSRSequenceStartLabels = new BranchLabel[3];", "+\t\t}", "+\t\tif (this.reusableJSRTargetsCount == this.reusableJSRTargets.length) {", "+\t\t\tSystem.arraycopy(this.reusableJSRTargets, 0, this.reusableJSRTargets = new Object[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\tSystem.arraycopy(this.reusableJSRSequenceStartLabels, 0, this.reusableJSRSequenceStartLabels = new BranchLabel[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t}", "+\t\tthis.reusableJSRTargets[this.reusableJSRTargetsCount] = targetLocation;", "+\t\tBranchLabel reusableJSRSequenceStartLabel = new BranchLabel(codeStream);", "+\t\treusableJSRSequenceStartLabel.place();", "+\t\tthis.reusableJSRSequenceStartLabels[this.reusableJSRTargetsCount++] = reusableJSRSequenceStartLabel;", "+\t}\t\t\t", "+\tif (finallyMode == FINALLY_INLINE) {", "+\t\t// cannot use jsr bytecode, then simply inline the subroutine", "+\t\t// inside try block, ensure to deactivate all catch block exception handlers while inlining finally block", "+\t\texitAnyExceptionHandler();", "+\t\texitDeclaredExceptionHandlers(codeStream);", "+\t\tthis.finallyBlock.generateCode(currentScope, codeStream);", "+\t} else {", "+\t\t// classic subroutine invocation, distinguish case of non-returning subroutine", "+\t\tcodeStream.jsr(this.subRoutineStartLabel);", "+\t\texitAnyExceptionHandler();", "+\t\texitDeclaredExceptionHandlers(codeStream);", "+\t}", "+\treturn false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c478f38613fe527afce7815f2dd5e85b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation)", "signatureAfterChange": " public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation, int stateIndex, LocalVariableBinding secretLocal)", "diff": ["-public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation) {", "+public boolean generateSubRoutineInvocation(BlockScope currentScope, CodeStream codeStream, Object targetLocation, int stateIndex, LocalVariableBinding secretLocal) {", "+\tboolean isStackMapFrameCodeStream = codeStream instanceof StackMapFrameCodeStream;", "+\t\tboolean reuseTargetLocation = true;", "-\t\t\t\tcodeStream.goto_(this.reusableJSRSequenceStartLabels[i]);", "-\t\t\t\treturn true;", "+\t\t\t\tif ((this.reusableJSRStateIndexes[i] != stateIndex) && finallyMode == FINALLY_INLINE && isStackMapFrameCodeStream) {", "+\t\t\t\t\treuseTargetLocation = false;", "+\t\t\t\t\tbreak nextReusableTarget;", "+\t\t\t\t} else {", "+\t\t\t\t\tcodeStream.goto_(this.reusableJSRSequenceStartLabels[i]);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\tthis.reusableJSRStateIndexes = new int[3];", "-\t\tif (this.reusableJSRTargetsCount == this.reusableJSRTargets.length) {", "-\t\t\tSystem.arraycopy(this.reusableJSRTargets, 0, this.reusableJSRTargets = new Object[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "-\t\t\tSystem.arraycopy(this.reusableJSRSequenceStartLabels, 0, this.reusableJSRSequenceStartLabels = new BranchLabel[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\tif (reuseTargetLocation) {", "+\t\t\tif (this.reusableJSRTargetsCount == this.reusableJSRTargets.length) {", "+\t\t\t\tSystem.arraycopy(this.reusableJSRTargets, 0, this.reusableJSRTargets = new Object[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\t\tSystem.arraycopy(this.reusableJSRSequenceStartLabels, 0, this.reusableJSRSequenceStartLabels = new BranchLabel[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\t\tSystem.arraycopy(this.reusableJSRStateIndexes, 0, this.reusableJSRStateIndexes = new int[2*this.reusableJSRTargetsCount], 0, this.reusableJSRTargetsCount);", "+\t\t\t}", "+\t\t\tthis.reusableJSRTargets[this.reusableJSRTargetsCount] = targetLocation;", "+\t\t\tBranchLabel reusableJSRSequenceStartLabel = new BranchLabel(codeStream);", "+\t\t\treusableJSRSequenceStartLabel.place();", "+\t\t\tthis.reusableJSRStateIndexes[this.reusableJSRTargetsCount] = stateIndex;", "+\t\t\tthis.reusableJSRSequenceStartLabels[this.reusableJSRTargetsCount++] = reusableJSRSequenceStartLabel;", "-\t\tthis.reusableJSRTargets[this.reusableJSRTargetsCount] = targetLocation;", "-\t\tBranchLabel reusableJSRSequenceStartLabel = new BranchLabel(codeStream);", "-\t\treusableJSRSequenceStartLabel.place();", "-\t\tthis.reusableJSRSequenceStartLabels[this.reusableJSRTargetsCount++] = reusableJSRSequenceStartLabel;", "-\t}\t\t\t", "+\t}", "-\t\tif (this.preTryInitStateIndex != -1) {", "-\t\t\t// reset initialization state, as for a normal catch block", "-\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preTryInitStateIndex);", "+\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t((StackMapFrameCodeStream) codeStream).pushStateIndex(stateIndex);", "+\t\t\tif (this.naturalExitMergeInitStateIndex != -1 || stateIndex != -1) {", "+\t\t\t\t// reset initialization state, as for a normal catch block", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (this.naturalExitMergeInitStateIndex != -1) {", "+\t\t\t\t// reset initialization state, as for a normal catch block", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, this.naturalExitMergeInitStateIndex);", "+\t\t\t}", "+\t\t}", "+\t\tif (secretLocal != null) {", "+\t\t\tcodeStream.addVariable(secretLocal);", "+\t\tif (isStackMapFrameCodeStream) {", "+\t\t\t((StackMapFrameCodeStream) codeStream).popStateIndex();", "+\t\t}"]}], "num": 47633}
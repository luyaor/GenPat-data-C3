{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d88b998cd6bb6d0298790e2ae9bf4dff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68bdcde1f1e90618bd0844babed1192e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "commitAfterChange": "3ba8416c88ea2caabb450ac956476cf3b7bed2e6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "signatureAfterChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-\tIBinaryType type = (IBinaryType)binaryInfo;", "+\tIBinaryType type = (IBinaryType) binaryInfo;", "+\tchar[] fullyQualifiedTypeName = (char[]) type.getName().clone();", "+\tCharOperation.replace(fullyQualifiedTypeName, '/', '.');", "-\t// fully qualified name", "-\tchar[] typeName = (char[])type.getName().clone();", "-\tCharOperation.replace(typeName, '/', '.');", "-\tchar[] enclosingTypeName = this.enclosingTypeNames == null ? null : CharOperation.concatWith(this.enclosingTypeNames, '.');", "-\tif (!this.matchesType(this.simpleName, this.pkg, enclosingTypeName, typeName)) {", "-\t\treturn false;", "+\tif (this.enclosingTypeNames == null) {", "+\t\tif (!matchesType(this.simpleName, this.pkg, fullyQualifiedTypeName)) return false;", "+\t} else {", "+\t\tchar[] enclosingTypeName = CharOperation.concatWith(this.enclosingTypeNames, '.');", "+\t\tchar[] pattern = this.pkg == null", "+\t\t\t? enclosingTypeName", "+\t\t\t: CharOperation.concat(this.pkg, enclosingTypeName, '.');", "+\t\tif (!matchesType(this.simpleName, pattern, fullyQualifiedTypeName)) return false;", "-\t// class or interface", "-\t\t\tif (type.isInterface())", "-\t\t\t\treturn false;", "-\t\t\tbreak;", "+\t\t\treturn !type.isInterface();", "-\t\t\tif (!type.isInterface())", "-\t\t\t\treturn false;", "-\t\t\tbreak;", "+\t\t\treturn type.isInterface();", "+\t\tcase TYPE_SUFFIX: // nothing", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77bdfe6a5801e7bb9693f79ec12b148f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bd9b8a508d7aa736ac369de31831b8689e766757", "commitAfterChange": "5cdaf7a24addcdf2556ae50d4248faab4b628186", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \r \t@Override\r \tpublic boolean visit(IfStatement node)", "signatureAfterChange": "\r \r \t@Override\r \tpublic boolean visit(IfStatement node)", "diff": ["-\t\thandleTokenBefore(node.getThenStatement(), TokenNameRPAREN,\r", "-\t\t\t\tthis.options.insert_space_before_closing_paren_in_if, true);\r", "-\t\tif (thenStatement instanceof Block && this.tm.isGuardClause((Block) node.getThenStatement())) {\r", "+\t\tint closingParenIndex = this.tm.firstIndexBefore(thenStatement, TokenNameRPAREN);\r", "+\t\thandleToken(this.tm.get(closingParenIndex), this.options.insert_space_before_closing_paren_in_if,\r", "+\t\t\t\t/* space before then statement may be needed if it will stay on the same line */\r", "+\t\t\t\t!(thenStatement instanceof Block) && !this.tm.get(closingParenIndex + 1).isComment());\r", "+\r", "+\t\tif (thenStatement instanceof Block && this.tm.isGuardClause((Block) thenStatement)) {\r"]}], "num": 59844}
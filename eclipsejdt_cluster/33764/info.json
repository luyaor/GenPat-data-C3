{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26037d5baa1a4de1b564e873005e3de9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b48cc5ca9453b04366ecaff33cdbae0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 284, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-\t\t\tcheckAndSetModifiers(AccAbstract);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccAbstract);", "-\t\t\tcheckAndSetModifiers(AccStrictfp);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccStrictfp);", "-\t\t\tcheckAndSetModifiers(AccFinal);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccFinal);", "-\t\t\tcheckAndSetModifiers(AccNative);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccNative);", "-\t\t\tcheckAndSetModifiers(AccPrivate);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccPrivate);", "-\t\t\tcheckAndSetModifiers(AccProtected);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccProtected);", "-\t\t\tcheckAndSetModifiers(AccPublic);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccPublic);", "-\t\t\tcheckAndSetModifiers(AccTransient);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccTransient);", "-\t\t\tcheckAndSetModifiers(AccVolatile);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccVolatile);", "-\t\t\tcheckAndSetModifiers(AccStatic);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccStatic);", "-\t\t\tcheckAndSetModifiers(AccSynchronized);", "+\t\t\tcheckAndSetModifiers(ClassFileConstants.AccSynchronized);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed4dbc5924e0a0cd7b2d82d6d9ef70c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void testAnnotationImplementations(TypeDeclaration testClass)", "signatureAfterChange": " \tprivate void testAnnotationImplementations(TypeDeclaration testClass)", "diff": ["-\t\tassertEquals(\"Number of annotation mirrors\", 1, annoMirrors.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of annotation mirrors\", 1, annoMirrors.size());", "-        assertTrue(\"Annotation mirror contents\", annoMirror.toString().startsWith(\"@MirrorDeclarationTestAnnotation\"));", "+        ProcessorTestStatus.assertTrue(\"Annotation mirror contents\", annoMirror.toString().startsWith(\"@MirrorDeclarationTestAnnotation\"));", "-        assertTrue(\"AnnotationType name\", annoType.toString().endsWith(\"mirrortest.MirrorDeclarationTestAnnotation\"));", "+        ProcessorTestStatus.assertTrue(\"AnnotationType name\", annoType.toString().endsWith(\"mirrortest.MirrorDeclarationTestAnnotation\"));", "-        assertEquals(\"AnnotationTypeDeclaration same as AnnotationType\", annoType, annoTypeDecl);", "+        ProcessorTestStatus.assertEquals(\"AnnotationTypeDeclaration same as AnnotationType\", annoType, annoTypeDecl);", "-        assertEquals(\"Number of methods on annotation\", 2, elementDeclarations.size());", "+        ProcessorTestStatus.assertEquals(\"Number of methods on annotation\", 2, elementDeclarations.size());", "-        assertEquals(\"declaring type same as AnnotationTypeDeclaration\", annoTypeDecl, elementString.getDeclaringType());", "-        assertEquals(\"declaring type same as AnnotationTypeDeclaration\", annoTypeDecl, elementInt.getDeclaringType());", "+        ProcessorTestStatus.assertEquals(\"declaring type same as AnnotationTypeDeclaration\", annoTypeDecl, elementString.getDeclaringType());", "+        ProcessorTestStatus.assertEquals(\"declaring type same as AnnotationTypeDeclaration\", annoTypeDecl, elementInt.getDeclaringType());", "-        assertEquals(\"\", \"bob\", valueString.getValue());", "-        assertEquals(\"\", new Integer(3), valueInt.getValue());", "-        assertEquals(\"\", \"bob\", valueString.toString());", "-        assertEquals(\"\", \"3\", valueInt.toString());", "+        ProcessorTestStatus.assertEquals(\"\", \"bob\", valueString.getValue());", "+        ProcessorTestStatus.assertEquals(\"\", new Integer(3), valueInt.getValue());", "+        ProcessorTestStatus.assertEquals(\"\", \"bob\", valueString.toString());", "+        ProcessorTestStatus.assertEquals(\"\", \"3\", valueInt.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e8eb079b27c3ea97fcaf1bb1ac0e63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorUtilTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@SuppressWarnings(\"unused\") \tprivate void testHidesOverrides()", "signatureAfterChange": " \t  \t@SuppressWarnings(\"unused\") \tprivate void testHidesOverrides()", "diff": ["-\t\tfor(TypeDeclaration type : env.getTypeDeclarations())", "+\t\tfor(TypeDeclaration type : _env.getTypeDeclarations())", "-\t\tassertTrue(\"Expect B.method() to override A.method()\", env.getDeclarationUtils().overrides(method_B, method_A));", "-\t\tassertTrue(\"Expect K.method() to override I.method()\", env.getDeclarationUtils().overrides(method_K, method_I));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.method() to override A.method()\", _env.getDeclarationUtils().overrides(method_B, method_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect K.method() to override I.method()\", _env.getDeclarationUtils().overrides(method_K, method_I));", "-\t\tassertTrue(\"Expect B.method() to not override C.method()\", !env.getDeclarationUtils().overrides(method_B, method_C));", "-    \tassertTrue(\"Expect D.method(String s) to not override A.method()\", !env.getDeclarationUtils().overrides(method_D, method_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.method() to not override C.method()\", !_env.getDeclarationUtils().overrides(method_B, method_C));", "+    \tProcessorTestStatus.assertTrue(\"Expect D.method(String s) to not override A.method()\", !_env.getDeclarationUtils().overrides(method_D, method_A));", "-\t\tassertTrue(\"Expect B.field to hide A.field\", env.getDeclarationUtils().hides(field_B, field_A));", "-\t\tassertTrue(\"Expect D.field to hide A.field\", env.getDeclarationUtils().hides(field_D, field_A));", "-\t\tassertTrue(\"Expect K.field to hide I.field\", env.getDeclarationUtils().hides(field_K, field_I));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.field to hide A.field\", _env.getDeclarationUtils().hides(field_B, field_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect D.field to hide A.field\", _env.getDeclarationUtils().hides(field_D, field_A));", "+\t\tProcessorTestStatus.assertTrue(\"Expect K.field to hide I.field\", _env.getDeclarationUtils().hides(field_K, field_I));", "-\t\tassertTrue(\"Expect B.field to not hide C.field\", !env.getDeclarationUtils().hides(field_B, field_C));", "+\t\tProcessorTestStatus.assertTrue(\"Expect B.field to not hide C.field\", !_env.getDeclarationUtils().hides(field_B, field_C));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "994332dcf422a3921a0fdd7b664b53fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic static StringBuffer printModifiers(int modifiers, StringBuffer output)", "signatureAfterChange": "  \tpublic static StringBuffer printModifiers(int modifiers, StringBuffer output)", "diff": ["-\t\tif ((modifiers & AccPublic) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccPublic) != 0)", "-\t\tif ((modifiers & AccPrivate) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccPrivate) != 0)", "-\t\tif ((modifiers & AccProtected) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccProtected) != 0)", "-\t\tif ((modifiers & AccStatic) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccStatic) != 0)", "-\t\tif ((modifiers & AccFinal) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccFinal) != 0)", "-\t\tif ((modifiers & AccSynchronized) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccSynchronized) != 0)", "-\t\tif ((modifiers & AccVolatile) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccVolatile) != 0)", "-\t\tif ((modifiers & AccTransient) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccTransient) != 0)", "-\t\tif ((modifiers & AccNative) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccNative) != 0)", "-\t\tif ((modifiers & AccAbstract) != 0)", "+\t\tif ((modifiers & ClassFileConstants.AccAbstract) != 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9907c40f8e052c6366f4fff697c91dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\tif (this.scope.compilerOptions().sourceLevel < JDK1_5) break checkOverride;", "+\t\t\tif (this.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\tif ((bindingModifiers & AccOverriding) == 0 || isInterfaceMethod)", "+\t\t\t\tif ((bindingModifiers & ExtraCompilerModifiers.AccOverriding) == 0 || isInterfaceMethod)", "-\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding) {", "+\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "-\t\t\t\tif ((this.modifiers & AccSemicolonBody) != 0) {", "-\t\t\t\t\tif ((this.modifiers & AccNative) == 0)", "-\t\t\t\t\t\tif ((this.modifiers & AccAbstract) == 0)", "+\t\t\t\tif ((this.modifiers & ExtraCompilerModifiers.AccSemicolonBody) != 0) {", "+\t\t\t\t\tif ((this.modifiers & ClassFileConstants.AccNative) == 0)", "+\t\t\t\t\t\tif ((this.modifiers & ClassFileConstants.AccAbstract) == 0)", "-\t\t\t\t\tif (((this.modifiers & AccNative) != 0) || ((this.modifiers & AccAbstract) != 0))", "+\t\t\t\t\tif (((this.modifiers & ClassFileConstants.AccNative) != 0) || ((this.modifiers & ClassFileConstants.AccAbstract) != 0))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e502f38611408eeed1c2058c7ac7e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif ((method.modifiers & AccUnresolved) == 0)", "+\tif ((method.modifiers & ExtraCompilerModifiers.AccUnresolved) == 0)", "-\t\t\tmethod.modifiers |= AccDeprecated;", "-\t\telse if ((method.modifiers & AccDeprecated) != 0)", "+\t\t\tmethod.modifiers |= ClassFileConstants.AccDeprecated;", "+\t\telse if ((method.modifiers & ClassFileConstants.AccDeprecated) != 0)", "-\t\tmethod.modifiers |= AccDeprecatedImplicitly;", "+\t\tmethod.modifiers |= ExtraCompilerModifiers.AccDeprecatedImplicitly;", "-\t\t    if ((resolvedExceptionType.modifiers & AccGenericSignature) != 0)", "-\t\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t    if ((resolvedExceptionType.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\t    if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & AccGenericSignature) != 0)", "-\t\t\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t\t    if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & AccGenericSignature) != 0)", "-\t\t\t\t\tmethod.modifiers |= AccGenericSignature;", "+\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\t\tmethod.modifiers |= ExtraCompilerModifiers.AccGenericSignature;", "-\tmethod.modifiers &= ~AccUnresolved;", "+\tmethod.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2320bbe730b61dbce4b0cfbe2e61a74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/mirrortest/MirrorDeclarationTestAnnotationProcessor.java", "commitBeforeChange": "39ba98be39d071668a6de3e8fa86c213405fcffe", "commitAfterChange": "fa5043035008baa87658a861702929b4e6cc6033", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "signatureAfterChange": " \tprivate void testMethodDeclaration(ClassDeclaration testClassDec)", "diff": ["-\t\tassertTrue(\"Method methodDec exists\", methodDec != null);", "+\t\tProcessorTestStatus.assertTrue(\"Method methodDec exists\", methodDec != null);", "-\t\tassertEquals(\"Number of types thrown\", 1, thrownTypes.size());", "+\t\tProcessorTestStatus.assertEquals(\"Number of types thrown\", 1, thrownTypes.size());", "-\t\tassertEquals(\"methodDec throws Exception\", \"java.lang.Exception\", thrownType.toString());", "-\t\tassertTrue(\"methodDec is varargs\", methodDec.isVarArgs());", "-\t\tassertTrue(\"Method methodDecNoArg exists\", methodDecNoArg != null);", "-\t\tassertEquals(\"Number of types thrown\", 0, methodDecNoArg.getThrownTypes().size());", "-\t\tassertTrue(\"methodDecNoArg is not varargs\", !methodDecNoArg.isVarArgs());", "+\t\tProcessorTestStatus.assertEquals(\"methodDec throws Exception\", \"java.lang.Exception\", thrownType.toString());", "+\t\tProcessorTestStatus.assertTrue(\"methodDec is varargs\", methodDec.isVarArgs());", "+\t\tProcessorTestStatus.assertTrue(\"Method methodDecNoArg exists\", methodDecNoArg != null);", "+\t\tProcessorTestStatus.assertEquals(\"Number of types thrown\", 0, methodDecNoArg.getThrownTypes().size());", "+\t\tProcessorTestStatus.assertTrue(\"methodDecNoArg is not varargs\", !methodDecNoArg.isVarArgs());", "-\t\tassertTrue(\"int parameter exists\", paramDeclInt != null);", "-\t\tassertEquals(\"Parameter type is int\", \"int\", paramDeclInt.getType().toString());", "-\t\tassertTrue(\"String[] parameter exists\", paramDeclString != null);", "-\t\tassertEquals(\"Parameter type is String[]\", \"java.lang.String[]\", paramDeclString.getType().toString());", "-\t\tassertEquals(\"Number of parameters in methodDecNoArg\", 0, methodDecNoArg.getParameters().size());", "+\t\tProcessorTestStatus.assertTrue(\"int parameter exists\", paramDeclInt != null);", "+\t\tProcessorTestStatus.assertEquals(\"Parameter type is int\", \"int\", paramDeclInt.getType().toString());", "+\t\tProcessorTestStatus.assertTrue(\"String[] parameter exists\", paramDeclString != null);", "+\t\tProcessorTestStatus.assertEquals(\"Parameter type is String[]\", \"java.lang.String[]\", paramDeclString.getType().toString());", "+\t\tProcessorTestStatus.assertEquals(\"Number of parameters in methodDecNoArg\", 0, methodDecNoArg.getParameters().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea70d8eeb2dd616449235093c1ef279", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\t\tcurrentModifiers |= AccVarargs;", "-\t\t\tboolean deprecated = (currentModifiers & AccDeprecated) != 0; // remember deprecation so as to not lose it below", "+\t\t\t\tcurrentModifiers |= ClassFileConstants.AccVarargs;", "+\t\t\tboolean deprecated = (currentModifiers & ClassFileConstants.AccDeprecated) != 0; // remember deprecation so as to not lose it below", "-\t\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag;", "+\t\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;", "-\t\t\tcurrentModifiers |= AccVarargs;", "-\t\tboolean deprecated = (currentModifiers & AccDeprecated) != 0; // remember deprecation so as to not lose it below", "+\t\t\tcurrentModifiers |= ClassFileConstants.AccVarargs;", "+\t\tboolean deprecated = (currentModifiers & ClassFileConstants.AccDeprecated) != 0; // remember deprecation so as to not lose it below", "-\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag;", "+\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;"]}], "num": 33764}
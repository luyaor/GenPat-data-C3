{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a285401d18d9ffb3e0ba98a124faa203", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2069e19665c3610ba9c3b8a5094f9375", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatterApplication.java", "commitBeforeChange": "7d879fb1ebcea4aeee6c7768254a09d17ebfe5f5", "commitAfterChange": "c2646812d22906feca88c2f52911ca7c4eae2299", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate Properties readConfig(String filename)", "signatureAfterChange": " \tprivate Properties readConfig(String filename)", "diff": ["+\t\tFile configFile = new File(filename);", "-\t\t\tstream = new BufferedInputStream(new FileInputStream(new File(filename)));", "+\t\t\tstream = new BufferedInputStream(new FileInputStream(configFile));", "-\t\t\tUtil.log(e, Messages.bind(Messages.ConfigFileReadingError));", "+\t\t\tString canonicalPath = null;", "+\t\t\ttry {", "+\t\t\t\tcanonicalPath = configFile.getCanonicalPath();", "+\t\t\t} catch(IOException e2) {", "+\t\t\t\tcanonicalPath = configFile.getAbsolutePath();", "+\t\t\t}", "+\t\t\tString errorMessage;", "+\t\t\tif (!configFile.exists() && !configFile.isAbsolute()) {", "+\t\t\t\terrorMessage = Messages.bind(Messages.ConfigFileNotFoundErrorTryFullPath, new Object[] {", "+\t\t\t\t\tcanonicalPath,", "+\t\t\t\t\tSystem.getProperty(\"user.dir\") //$NON-NLS-1$", "+\t\t\t\t});", "+", "+\t\t\t} else {", "+\t\t\t\terrorMessage = Messages.bind(Messages.ConfigFileReadingError, canonicalPath);", "+\t\t\t}", "+\t\t\tUtil.log(e, errorMessage);", "+\t\t\tSystem.err.println(errorMessage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6625f830dfd4a069a1fc95f951d18b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptUtil.java", "commitBeforeChange": "9378f12e46617b3c47a50827083b7b76b76aaf96", "commitAfterChange": "ecc05f0ca2665c6c46b18bc8153f342d2808fcb6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static boolean hasAnnotationInstance( IFile f )", "signatureAfterChange": " \tpublic static boolean hasAnnotationInstance( IFile f )", "diff": ["-\tpublic static boolean hasAnnotationInstance( IFile f )", "-\t{", "-\t\ttry", "-\t\t{", "-\t\t\tchar[] source = ProcessorEnvImpl.getFileContents( f );", "-\t\t\treturn hasAnnotationInstance( source );", "+\tpublic static boolean hasAnnotationInstance( IFile f ) {", "+\t\t", "+\t\tInputStreamReader reader = null;", "+\t\tInputStream input = null;", "+\t\ttry {", "+\t\t\tAnnotationScanner scanner;", "+\t\t\t// If this is a single byte encoding, we can deal directly ", "+\t\t\t// with the bytes, which is *much* faster", "+\t\t\tif (SINGLE_BYTE_ENCODINGS.contains(f.getCharset())) {", "+\t\t\t\tinput = ProcessorEnvImpl.getInputStream(f);", "+\t\t\t\tscanner = new InputStreamAnnotationScanner(input);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\treader = ProcessorEnvImpl.getFileReader( f );", "+\t\t\t\tscanner = new ReaderAnnotationScanner(reader);", "+\t\t\t}", "+\t\t\treturn scanner.containsAnnotations();", "-\t\tcatch( Exception ioe )", "-\t\t{", "+\t\tcatch( Exception ioe ) {", "+\t\t}", "+\t\tfinally {", "+\t\t\tif (reader != null) { try {reader.close();} catch (IOException ioe) {} }", "+\t\t\tif (input != null) { try {input.close();} catch (IOException ioe) {} }"]}], "num": 15668}
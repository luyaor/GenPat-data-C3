{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0e72dddec728f7d29e478de80b0b578", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b3e7a15871a29c5dfa8b653afd6e486", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f1f25c6cdf998a1ec590849c8e88206d0ec0f3ca", "commitAfterChange": "11bdf7ee83fa535bb4e922a4f202eec91a5eb529", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+\t\t\tif (SourceRangeVerifier.DEBUG) {", "+\t\t\t\tString bugs = new SourceRangeVerifier().process(compilationUnit);", "+\t\t\t\tif (bugs != null) {", "+\t\t\t\t\tStringBuffer message = new StringBuffer(\"Bad AST node structure:\");  //$NON-NLS-1$", "+\t\t\t\t\tString lineDelimiter = Util.findLineSeparator(source);", "+\t\t\t\t\tif (lineDelimiter == null) lineDelimiter = System.getProperty(\"line.separator\");//$NON-NLS-1$", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(bugs.replaceAll(\"\\n\", lineDelimiter)); //$NON-NLS-1$", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(\"----------------------------------- SOURCE BEGIN -------------------------------------\"); //$NON-NLS-1$", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(source);", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(\"----------------------------------- SOURCE END -------------------------------------\"); //$NON-NLS-1$", "+\t\t\t\t\tUtil.log(new IllegalStateException(\"Bad AST node structure\"), message.toString()); //$NON-NLS-1$", "+\t\t\t\t\tif (SourceRangeVerifier.DEBUG_THROW) {", "+\t\t\t\t\t\tthrow new IllegalStateException(message.toString());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c61f02882c2a12e8d5443e233f25a01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "0325089db3ca0a8e6a36752438c4d3b535f031b0", "commitAfterChange": "2c5129ccdeb3bec0116f7310eb4a5f7c456e0788", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": "  \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+\t\t\tif (SourceRangeVerifier.DEBUG) {", "+\t\t\t\tString bugs = new SourceRangeVerifier().process(compilationUnit);", "+\t\t\t\tif (bugs != null) {", "+\t\t\t\t\tStringBuffer message = new StringBuffer(\"Bad AST node structure:\");  //$NON-NLS-1$", "+\t\t\t\t\tString lineDelimiter = Util.findLineSeparator(source);", "+\t\t\t\t\tif (lineDelimiter == null) lineDelimiter = System.getProperty(\"line.separator\");//$NON-NLS-1$", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(bugs.replaceAll(\"\\n\", lineDelimiter)); //$NON-NLS-1$", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(\"----------------------------------- SOURCE BEGIN -------------------------------------\"); //$NON-NLS-1$", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(source);", "+\t\t\t\t\tmessage.append(lineDelimiter);", "+\t\t\t\t\tmessage.append(\"----------------------------------- SOURCE END -------------------------------------\"); //$NON-NLS-1$", "+\t\t\t\t\tUtil.log(new IllegalStateException(\"Bad AST node structure\"), message.toString()); //$NON-NLS-1$", "+\t\t\t\t\tif (SourceRangeVerifier.DEBUG_THROW) {", "+\t\t\t\t\t\tthrow new IllegalStateException(message.toString());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 45822}
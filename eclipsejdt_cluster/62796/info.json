{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40b316838bce864edce69c1b4609612a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48f87925a29c6a50269410ec1e4add08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "e2ebe7e46ee7b738e4a2095867ce25f2e5cd118c", "commitAfterChange": "0e45e470334a22a4640bca0d06c853602205abbd", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static final int hashCode(char[] array)", "signatureAfterChange": " \tpublic static final int hashCode(char[] array)", "diff": ["-\t\tint hash = 0;", "-\t\tint offset = 0;", "-\t\tif (length < 16) {", "-\t\t\tfor (int i = length; i > 0; i--)", "-\t\t\t\thash = (hash * 37) + array[offset++];", "+\t\tint hash = length == 0 ? 31 : array[0];", "+\t\tif (length < 8) {", "+\t\t\tfor (int i = length; --i > 0;)", "+\t\t\t\thash = (hash * 31) + array[i];", "-\t\t\t// only sample some characters", "-\t\t\tint skip = length / 8;", "-\t\t\tfor (int i = length; i > 0; i -= skip, offset += skip)", "-\t\t\t\thash = (hash * 39) + array[offset];", "+\t\t\t// 8 characters is enough to compute a decent hash code, don't waste time examining every character", "+\t\t\tfor (int i = length - 1, last = i > 16 ? i - 16 : 0; i > last; i -= 2)", "+\t\t\t\thash = (hash * 31) + array[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba0b5848d2a5173cd8ecf906b8981afe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic int getNextIndentationLevel(int someColumn)", "signatureAfterChange": " \tpublic int getNextIndentationLevel(int someColumn)", "diff": ["-\t\tint indent = someColumn - 1;", "-\t\tif (indent == 0)", "-\t\t\treturn this.indentationLevel;", "-\t\tif (this.snapToTabs) {", "-\t\t\tint rem = indent % this.indentationSize;", "-\t\t\tint addition = rem == 0 ? 0 : this.indentationSize - rem; // round to superior", "-\t\t\treturn indent + addition;", "+\t\tif (someColumn == 1) return this.indentationLevel;", "+\t\tif (this.useTab) {", "+\t\t\tint rem = (someColumn - 1)% this.tabSize; // round to superior", "+\t\t\treturn rem == 0 ? (someColumn - 1)/ this.tabSize : ((someColumn - 1)/ this.tabSize)+1;", "-\t\t\treturn indent;", "+\t\t\treturn someColumn - 1;", "-\t}", "+\t}\t"]}], "num": 62796}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "697f96754fee50870eca8504363bb93b", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c3c694327a765a081ea48ea5f85aef3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 38, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "-\t// declaration in this method", "-\t// (NB: declarations must be searched first (see bug 20631 Declaration of local binary type not found)", "+protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+\tIJavaElement enclosingElement = null;", "+\tif (accuracy > -1) {", "+\t\tenclosingElement = createHandle(method, parent);", "+", "+\t\t// compute source positions of the selector ", "+\t\tScanner scanner = parser.scanner;", "+\t\tint nameSourceStart = method.sourceStart;", "+\t\tscanner.setSource(this.currentPossibleMatch.getContents());", "+\t\tscanner.resetTo(nameSourceStart, method.sourceEnd);", "+\t\ttry {", "+\t\t\tscanner.getNextToken();", "+\t\t} catch (InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tint nameSourceEnd = scanner.currentPosition - 1;", "+", "+\t\treport(nameSourceStart, nameSourceEnd, enclosingElement, accuracy);", "+\t}", "+", "+\t// handle nodes for the local type first", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "-\t\t\t(parent instanceof IType)", "-\t\t\t\t? createMethodHandle(method, (IType) parent)", "-\t\t\t\t: parent,", "-\t\t\tnodeSet);", "+\t\tif (enclosingElement == null)", "+\t\t\tenclosingElement = createHandle(method, parent);", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(enclosingElement, nodeSet);", "-\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\tAstNode node = nodes[i];", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0)", "-\t\t\t\t\treportReference(node, method, parent, level.intValue());", "+\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) == 0) {", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t} else {", "+\t\t\t\tif (enclosingElement == null)", "+\t\t\t\t\tenclosingElement = createHandle(method, parent);", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f845a385817df31320fc64ca3f84505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "957977037bae1c5fe509d6f5b83d064a1bf50d04", "commitAfterChange": "78430308e7d45c151f6732314055fefd33935867", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 40, "signatureBeforeChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "+protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+\tIJavaElement enclosingElement = null;", "+\tif (accuracy > -1) {", "+\t\tenclosingElement = createHandle(field, type, parent);", "+\t\treport(field.sourceStart, field.sourceEnd, enclosingElement, accuracy);", "+\t}", "+", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "-\t\t\t(parent instanceof IType)", "-\t\t\t\t? (field.isField()", "-\t\t\t\t\t? (IJavaElement) createFieldHandle(field, (IType) parent)", "-\t\t\t\t\t: (IJavaElement) createInitializerHandle(type, field, (IType) parent))", "-\t\t\t\t: parent,", "-\t\t\tnodeSet);", "+\t\tif (enclosingElement == null)", "+\t\t\tenclosingElement = createHandle(field, type, parent);", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(enclosingElement, nodeSet);", "-\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\tAstNode node = nodes[i];", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0)", "-\t\t\t\t\treportReference(node, type, field, parent, level.intValue());", "+\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t} else {", "+\t\t\t\tif (enclosingElement == null)", "+\t\t\t\t\tenclosingElement = createHandle(field, type, parent);", "+\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t}"]}], "num": 17817}
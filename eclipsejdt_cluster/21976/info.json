{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaa6538fc2c75426c8168328f167ce4b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b841ac3a2c859afe87c35643bf9672c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "b7bbd528ad22316d79eac8a0aca3516a1f90a5ec", "commitAfterChange": "8a13e69e3b12126618841f95523da258e6a2ee16", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void updateFromParserState()", "signatureAfterChange": "\r public void updateFromParserState()", "diff": ["-\t\t\tparser.consumeClassHeaderImplements(); \r", "-\t\t\t// will reset typeListLength to zero\r", "-\t\t\t// thus this check will only be performed on first errorCheck after class X implements Y,Z,\r", "+\t\t\tint typePtr = parser.astPtr - parser.astLengthStack[parser.astLengthPtr];\r", "+\t\t\tif(typePtr >= 0 && parser.astStack[typePtr] instanceof TypeDeclaration) {\r", "+\t\t\t\tparser.consumeClassHeaderImplements(); \r", "+\t\t\t\t// will reset typeListLength to zero\r", "+\t\t\t\t// thus this check will only be performed on first errorCheck after class X implements Y,Z,\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "495c1f923b14f7d493620ca5b4e2268b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "eef75e8cff97a0c4a6156f3b48d037bb0a5a8b17", "commitAfterChange": "7cfd16cce02bf6c15cc69b5ed56b855234dd7ed5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean recordLineSeparator, String sourceLevel)", "signatureAfterChange": " \tpublic static IScanner createScanner(boolean tokenizeComments, boolean tokenizeWhiteSpace, boolean recordLineSeparator, String sourceLevel)", "diff": ["-\t\tPublicScanner scanner = null;", "-\t\tlong level = CompilerOptions.versionToJdkLevel(sourceLevel);", "-\t\tif (level == 0) level = ClassFileConstants.JDK1_3; // fault-tolerance", "-\t\tscanner = new PublicScanner(tokenizeComments, tokenizeWhiteSpace, false/*nls*/,level /*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\t// use default workspace compliance", "+\t\tlong complianceLevelValue = CompilerOptions.versionToJdkLevel(JavaCore.getOption(JavaCore.COMPILER_COMPLIANCE));", "+\t\tif (complianceLevelValue == 0) complianceLevelValue = ClassFileConstants.JDK1_4; // fault-tolerance", "+\t\tlong sourceLevelValue = CompilerOptions.versionToJdkLevel(sourceLevel);", "+\t\tif (sourceLevelValue == 0) sourceLevelValue = ClassFileConstants.JDK1_3; // fault-tolerance", "+\t\tPublicScanner scanner =", "+\t\t\tnew PublicScanner(", "+\t\t\t\ttokenizeComments,", "+\t\t\t\ttokenizeWhiteSpace,", "+\t\t\t\tfalse/*nls*/,", "+\t\t\t\tsourceLevelValue /*sourceLevel*/,", "+\t\t\t\tcomplianceLevelValue,", "+\t\t\t\tnull/*taskTags*/,", "+\t\t\t\tnull/*taskPriorities*/,", "+\t\t\t\ttrue/*taskCaseSensitive*/);"]}], "num": 21976}
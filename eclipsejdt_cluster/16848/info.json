{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdd8848a5dc5419d1fe9874de44dfe07", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "290e09650885c69cd2ec9c30e01909fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cce21e3b45d018858fa1553670d03204b9b4f3bb", "commitAfterChange": "bc8484abab01070df30e1fc1e6b359233211db0d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t\tbuf.append(\"\\n\\t- import access restriction includes: \").append(this.importRestrictionInclude == null ? \"\" : new String(CharOperation.concatWith(this.importRestrictionInclude,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n\\t- import access restriction excludes: \").append(this.importRestrictionExclude == null ? \"\" : new String(CharOperation.concatWith(this.importRestrictionExclude,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n\\t- export access restriction includes: \").append(this.exportRestrictionInclude == null ? \"\" : new String(CharOperation.concatWith(this.exportRestrictionInclude,',')));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbuf.append(\"\\n\\t- export access restriction excludes: \").append(this.exportRestrictionExclude == null ? \"\" : new String(CharOperation.concatWith(this.exportRestrictionExclude,',')));  //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c22af617d90225892324d64f4786e96f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t \tpublic Map getMap()", "signatureAfterChange": "  \t \tpublic Map getMap()", "diff": ["-\t\toptionsMap.put(OPTION_ReportNullContractViolation, getSeverityString(NullContractViolation));", "-\t\toptionsMap.put(OPTION_ReportPotentialNullContractViolation, getSeverityString(PotentialNullContractViolation));", "-\t\toptionsMap.put(OPTION_ReportNullContractInsufficientInfo, getSeverityString(NullContractInsufficientInfo));", "-\t\tif (this.nullableAnnotationName != null) {", "-\t\t\tchar[] compoundName = CharOperation.concatWith(this.nullableAnnotationName, '.');", "-\t\t\toptionsMap.put(OPTION_NullableAnnotationName, String.valueOf(compoundName));", "-\t\t}", "-\t\tif (this.nonNullAnnotationName != null) {", "-\t\t\tchar[] compoundName = CharOperation.concatWith(this.nonNullAnnotationName, '.');", "-\t\t\toptionsMap.put(OPTION_NonNullAnnotationName, String.valueOf(compoundName));", "-\t\t}", "-\t\toptionsMap.put(OPTION_EmulateNullAnnotationTypes, this.emulateNullAnnotationTypes ? ENABLED : DISABLED);", "-\t\toptionsMap.put(OPTION_DefaultImportNullAnnotationTypes, this.defaultImportNullAnnotationTypes ? ENABLED : DISABLED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd230cdd584296e7c850705ed2e9e4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cce21e3b45d018858fa1553670d03204b9b4f3bb", "commitAfterChange": "bc8484abab01070df30e1fc1e6b359233211db0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Map getMap()", "signatureAfterChange": "  \tpublic Map getMap()", "diff": ["-\t\toptionsMap.put(OPTION_ImportRestrictionInclude, this.importRestrictionInclude == null ? \"\" : new String(CharOperation.concatWith(this.importRestrictionInclude,','))); //$NON-NLS-1$", "-\t\toptionsMap.put(OPTION_ImportRestrictionExclude, this.importRestrictionExclude == null ? \"\" : new String(CharOperation.concatWith(this.importRestrictionExclude,','))); //$NON-NLS-1$", "-\t\toptionsMap.put(OPTION_ImportRestrictionInclude, this.exportRestrictionInclude == null ? \"\" : new String(CharOperation.concatWith(this.exportRestrictionInclude,','))); //$NON-NLS-1$", "-\t\toptionsMap.put(OPTION_ExportRestrictionExclude, this.exportRestrictionExclude == null ? \"\" : new String(CharOperation.concatWith(this.exportRestrictionExclude,','))); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66fe2f04e327fca7d84c1cb94d0abfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/CompilerAptTests.java", "commitBeforeChange": "57effdfbf8500b1bf7932afcc270c4183c0fd5bb", "commitAfterChange": "aeba50ed8bce5da37b3a88a633f33265f2c2db1c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate void compileOneClass(JavaCompiler compiler)", "signatureAfterChange": " \tprivate void compileOneClass(JavaCompiler compiler, File inputFile, List<String> options)", "diff": ["-\t */", "-\tprivate void compileOneClass(JavaCompiler compiler) {", "-\t\tStandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "-\t\tForwardingJavaFileManager<StandardJavaFileManager> forwardingJavaFileManager = getForwardingFileManager(manager);", "-", "-\t\t// create new list containing inputfile", "-\t\tList<File> files = new ArrayList<File>();", "-\t\tfiles.add(inputFile);", "-\t\tIterable<? extends JavaFileObject> units = manager.getJavaFileObjectsFromFiles(files);", "-\t\tStringWriter stringWriter = new StringWriter();", "-\t\tPrintWriter printWriter = new PrintWriter(stringWriter);", "-\t\t", "-\t\tif (compiler == _eclipseCompiler) {", "-\t\t\toptions.add(\"-6.0\"); // not the default for Eclipse compiler", "-\t\t}", "-\t\toptions.add(\"-d\");", "-\t\toptions.add(_tmpBinFolderName);", "-\t\toptions.add(\"-s\");", "-\t\toptions.add(_tmpGenFolderName);", "-\t\toptions.add(\"-cp\");", "-\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarName);", "-\t\toptions.add(\"-XprintRounds\");", "- \t\tCompilationTask task = compiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);", "-\t\tBoolean result = task.call();", "- \t\tif (!result.booleanValue()) {", "- \t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "- \t \t\tassertTrue(\"Compilation failed \", false);", "- \t\t}", "+\t */", "+\tprivate void compileOneClass(JavaCompiler compiler, File inputFile, List<String> options) {", "+\t\tStandardJavaFileManager manager = compiler.getStandardFileManager(null, Locale.getDefault(), Charset.defaultCharset());", "+\t\tForwardingJavaFileManager<StandardJavaFileManager> forwardingJavaFileManager = getForwardingFileManager(manager);", "+\t", "+\t\t", "+\t\t// create new list containing inputfile", "+\t\tList<File> files = new ArrayList<File>();", "+\t\tfiles.add(inputFile);", "+\t\tIterable<? extends JavaFileObject> units = manager.getJavaFileObjectsFromFiles(files);", "+\t\tStringWriter stringWriter = new StringWriter();", "+\t\tPrintWriter printWriter = new PrintWriter(stringWriter);", "+\t\t", "+\t\tif (compiler == _eclipseCompiler) {", "+\t\t\toptions.add(\"-6.0\"); // not the default for Eclipse compiler", "+\t\t}", "+\t\toptions.add(\"-d\");", "+\t\toptions.add(_tmpBinFolderName);", "+\t\toptions.add(\"-s\");", "+\t\toptions.add(_tmpGenFolderName);", "+\t\toptions.add(\"-cp\");", "+\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarName);", "+\t\toptions.add(\"-XprintRounds\");", "+\t\tCompilationTask task = compiler.getTask(printWriter, forwardingJavaFileManager, null, options, null, units);", "+\t\tBoolean result = task.call();", "+\t\t", "+\t\tif (!result.booleanValue()) {", "+\t\t\tSystem.err.println(\"Compilation failed: \" + stringWriter.getBuffer().toString());", "+\t \t\tassertTrue(\"Compilation failed \", false);", "+\t\t}", "+\t}"]}], "num": 16848}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d29644dadd8459a29cb1e45c3174e3e6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a00955f0e74d22f715c599c392bf93c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f67216e8a4721dbe44a0a5d1b44a59dfb3149cc6", "commitAfterChange": "74fdaef3cc94563b0c878462808ab3d2bb5b8d72", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": "\r public void unhandledException(TypeBinding exceptionType, AstNode location, Scope scope)", "signatureAfterChange": "\r public void unhandledException(TypeBinding exceptionType, AstNode location)", "diff": ["-public void unhandledException(TypeBinding exceptionType, AstNode location, Scope scope) {\r", "+public void unhandledException(TypeBinding exceptionType, AstNode location) {\r", "+\r", "+\tboolean insideDefaultConstructor = \r", "+\t\t(referenceContext instanceof ConstructorDeclaration)\r", "+\t\t\t&& ((ConstructorDeclaration)referenceContext).isDefaultConstructor();\r", "+\tboolean insideImplicitConstructorCall =\r", "+\t\t(location instanceof ExplicitConstructorCall)\r", "+\t\t\t&& (((ExplicitConstructorCall) location).accessMode == ExplicitConstructorCall.ImplicitSuper);\r", "+\r", "-\t\tIProblem.UnhandledException,\r", "+\t\tinsideDefaultConstructor\r", "+\t\t\t? IProblem.UnhandledExceptionInDefaultConstructor\r", "+\t\t\t: (insideImplicitConstructorCall \r", "+\t\t\t\t\t? IProblem.UndefinedConstructorInImplicitConstructorCall\r", "+\t\t\t\t\t: IProblem.UnhandledException),\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f242c82e764ac3a7c830e30a40fe6596", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "46df66625bb01025e2f747d9b3cccffff9c1a6c7", "commitAfterChange": "c7ee0f26df56582a4fdd4c9183c2b927d77dbd19", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tboolean expressionIsCast;", "+\t\tif ((expressionIsCast = this.expression instanceof CastExpression) == true) this.expression.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\tint expressionId = expressionType.id;", "-\t\tif (expressionId > 15) {", "+\t\tint expressionTypeId = expressionType.id;", "+\t\tif (expressionTypeId > 15) {", "-", "+\t", "-", "+\t", "-\t\tint result = OperatorSignatures[tableId][(expressionId << 4) + expressionId];", "-\t\tthis.expression.implicitConversion = result >>> 12;", "-\t\tthis.bits |= result & 0xF;", "-\t\tswitch (result & 0xF) { // only switch on possible result type.....", "+\t\tint operatorSignature = OperatorSignatures[tableId][(expressionTypeId << 4) + expressionTypeId];", "+\t\tthis.expression.implicitConversion = operatorSignature >>> 12;", "+\t\tthis.bits |= operatorSignature & 0xF;", "+\t\tswitch (operatorSignature & 0xF) { // only switch on possible result type.....", "-\t\t\t\tif (expressionId != T_undefined)", "+\t\t\t\tif (expressionTypeId != T_undefined)", "-\t\t\t\t\texpressionId,", "+\t\t\t\t\texpressionTypeId,", "+\t\tif (expressionIsCast) {", "+\t\t// check need for operand cast", "+\t\t\tCastExpression.checkNeedForArgumentCast(scope, tableId, operatorSignature, this.expression, expressionTypeId);", "+\t\t}"]}], "num": 66776}
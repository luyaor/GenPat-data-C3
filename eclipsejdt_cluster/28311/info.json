{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43d8e48a576832774a7dc8093d21cbed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8371737f82fd8f0a1d6ae1f6c92479cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "62d3eaa4b27479370ad7de8268c38e813fccfa43", "commitAfterChange": "11dcf3d3ee1968a8baaa68f96fb65b7f9b3db0b4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t", "-\t\t// filter options which are related to the compiler component", "-\t\tIterator entries = settings.entrySet().iterator();", "-\t\twhile (entries.hasNext()) {", "-\t\t\tMap.Entry entry = (Map.Entry)entries.next();", "-\t\t\tif (!(entry.getKey() instanceof String)) continue;", "-\t\t\tif (!(entry.getValue() instanceof String)) continue;", "-\t\t\tString optionID = (String) entry.getKey();", "-\t\t\tString optionValue = (String) entry.getValue();", "-\t\t\t", "-\t\t\t// Local variable attribute", "-\t\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){", "-\t\t\t\tif (optionValue.equals(GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes |= Vars;", "-\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){", "-\t\t\t\t\tthis.produceDebugAttributes &= ~Vars;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t}  ", "-\t\t\t// Line number attribute\t", "-\t\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {", "-\t\t\t\tif (optionValue.equals(GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes |= Lines;", "-\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes &= ~Lines;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Source file attribute\t", "-\t\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {", "-\t\t\t\tif (optionValue.equals(GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes |= Source;", "-\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes &= ~Source;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Preserve unused local\t", "-\t\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){", "-\t\t\t\tif (optionValue.equals(PRESERVE)) {", "-\t\t\t\t\tthis.preserveAllLocalVariables = true;", "-\t\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {", "-\t\t\t\t\tthis.preserveAllLocalVariables = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unreachable code\t\t\t\t", "-\t\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){", "-\t\t\t\tupdateSeverity(UnreachableCode, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report invalid import\t", "-\t\t\tif(optionID.equals(OPTION_ReportInvalidImport)){", "-\t\t\t\tupdateSeverity(ImportProblem, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Define the target JDK tag for .classfiles", "-\t\t\tif(optionID.equals(OPTION_TargetPlatform)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level != 0) this.targetJDK = level;", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Define the JDK compliance level", "-\t\t\tif(optionID.equals(OPTION_Compliance)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level != 0) this.complianceLevel = level;", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Private constructor access emulation (extra arg vs. visibility change)", "-\t\t\tif(optionID.equals(OPTION_PrivateConstructorAccess)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level >= JDK1_3) this.isPrivateConstructorAccessChangingVisibility = true;", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report method with constructor name", "-\t\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){", "-\t\t\t\tupdateSeverity(MethodWithConstructorName, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report overriding package default method", "-\t\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){", "-\t\t\t\tupdateSeverity(OverriddenPackageDefaultMethod, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report deprecation", "-\t\t\tif(optionID.equals(OPTION_ReportDeprecation)){", "-\t\t\t\tupdateSeverity(UsingDeprecatedAPI, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report deprecation inside deprecated code ", "-\t\t\tif(optionID.equals(OPTION_ReportDeprecationInDeprecatedCode)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportDeprecationInsideDeprecatedCode = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportDeprecationInsideDeprecatedCode = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report hidden catch block", "-\t\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){", "-\t\t\t\tupdateSeverity(MaskedCatchBlock, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused local variable", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){", "-\t\t\t\tupdateSeverity(UnusedLocalVariable, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report no implicit String conversion", "-\t\t\tif (optionID.equals(OPTION_ReportNoImplicitStringConversion)) {", "-\t\t\t\tupdateSeverity(NoImplicitStringConversion, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report unused parameter", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){", "-\t\t\t\tupdateSeverity(UnusedArgument, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused parameter when implementing abstract method ", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedParameterWhenImplementingAbstract)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenImplementingAbstract = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenImplementingAbstract = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused parameter when implementing abstract method ", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedParameterWhenOverridingConcrete)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenOverridingConcrete = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenOverridingConcrete = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused import", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedImport)){", "-\t\t\t\tupdateSeverity(UnusedImport, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report synthetic access emulation", "-\t\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){", "-\t\t\t\tupdateSeverity(AccessEmulation, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report local var hiding another variable", "-\t\t\tif(optionID.equals(OPTION_ReportLocalVariableHiding)){", "-\t\t\t\tupdateSeverity(LocalVariableHiding, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report field hiding another variable", "-\t\t\tif(optionID.equals(OPTION_ReportFieldHiding)){", "-\t\t\t\tupdateSeverity(FieldHiding, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report constructor/setter parameter hiding another field", "-\t\t\tif(optionID.equals(OPTION_ReportSpecialParameterHidingField)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportSpecialParameterHidingField = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportSpecialParameterHidingField = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t}\t\t\t", "-\t\t\t// Report possible accidental boolean assignment", "-\t\t\tif(optionID.equals(OPTION_ReportPossibleAccidentalBooleanAssignment)){", "-\t\t\t\tupdateSeverity(AccidentalBooleanAssign, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report possible accidental boolean assignment", "-\t\t\tif(optionID.equals(OPTION_ReportSuperfluousSemicolon)){", "-\t\t\t\tupdateSeverity(SuperfluousSemicolon, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report non-externalized string literals", "-\t\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){", "-\t\t\t\tupdateSeverity(NonExternalizedString, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report usage of 'assert' as an identifier", "-\t\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){", "-\t\t\t\tupdateSeverity(AssertUsedAsAnIdentifier, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Set the source compatibility mode (assertions)", "-\t\t\tif(optionID.equals(OPTION_Source)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level != 0) this.sourceLevel = level;", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Set the default encoding format", "-\t\t\tif(optionID.equals(OPTION_Encoding)){", "-\t\t\t\tif (optionValue.length() == 0){", "-\t\t\t\t\tthis.defaultEncoding = null;", "-\t\t\t\t} else {", "-\t\t\t\t\ttry { ", "-\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), optionValue);", "-\t\t\t\t\t\tthis.defaultEncoding = optionValue;", "-\t\t\t\t\t} catch(UnsupportedEncodingException e){", "-\t\t\t\t\t\t// ignore unsupported encoding", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Set the threshold for problems per unit", "-\t\t\tif(optionID.equals(OPTION_MaxProblemPerUnit)){", "-\t\t\t\ttry {", "-\t\t\t\t\tint val = Integer.parseInt(optionValue);", "-\t\t\t\t\tif (val >= 0) this.maxProblemsPerUnit = val;", "-\t\t\t\t} catch(NumberFormatException e){", "-\t\t\t\t\t// ignore ill-formatted limit", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report unnecessary receiver for static access", "-\t\t\tif(optionID.equals(OPTION_ReportNonStaticAccessToStatic)){", "-\t\t\t\tupdateSeverity(NonStaticAccessToStatic, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report indirect static access", "-\t\t\tif(optionID.equals(OPTION_ReportIndirectStaticAccess)){", "-\t\t\t\tupdateSeverity(IndirectStaticAccess, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report interface method incompatible with non-inherited Object method", "-\t\t\tif(optionID.equals(OPTION_ReportIncompatibleNonInheritedInterfaceMethod)){", "-\t\t\t\tupdateSeverity(IncompatibleNonInheritedInterfaceMethod, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused private members", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedPrivateMember)){", "-\t\t\t\tupdateSeverity(UnusedPrivateMember, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report boolean method throwing exception", "-\t\t\tif(optionID.equals(OPTION_ReportUndocumentedEmptyBlock)){", "-\t\t\t\tupdateSeverity(UndocumentedEmptyBlock, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unnecessary cast/instance of", "-\t\t\tif(optionID.equals(OPTION_ReportUnnecessaryTypeCheck)){", "-\t\t\t\tupdateSeverity(UnnecessaryTypeCheck, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report inconsistent javadoc annotation", "-\t\t\tif(optionID.equals(OPTION_ReportInvalidAnnotation)){", "-\t\t\t\tupdateSeverity(InvalidAnnotation, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report finally block not completing normally", "-\t\t\tif(optionID.equals(OPTION_ReportFinallyBlockNotCompletingNormally)){", "-\t\t\t\tupdateSeverity(FinallyBlockNotCompleting, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused declared thrown exception", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedDeclaredThrownException)){", "-\t\t\t\tupdateSeverity(UnusedDeclaredThrownException, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unqualified field access", "-\t\t\tif(optionID.equals(OPTION_ReportUnqualifiedFieldAccess)){", "-\t\t\t\tupdateSeverity(UnqualifiedFieldAccess, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report task", "-\t\t\tif(optionID.equals(OPTION_TaskTags)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t\tthis.taskTags = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.taskTags = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report no-op assignments", "-\t\t\tif(optionID.equals(OPTION_ReportNoEffectAssignment)){", "-\t\t\t\tupdateSeverity(NoEffectAssignment, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tif(optionID.equals(OPTION_TaskPriorities)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t\tthis.taskPriorites = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.taskPriorites = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t}", "+\t\tset(settings);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e474fd664f9e1439ddbaee338022f67c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": " private String filterFormattingInComments(String input)", "signatureAfterChange": " private String[] formattedComments(String source, boolean old)", "diff": ["-private String filterFormattingInComments(String input) {", "-\tStringTokenizer tokenizer = new StringTokenizer(input, \"\\r\\n\\f\");", "-\tStringBuffer buffer = new StringBuffer();", "-\tboolean skipToken = false;", "-\tString line =  null;", "-\tlineLoop: while (tokenizer.hasMoreTokens()) {", "-\t\tif (!skipToken) {", "-\t\t\tline = tokenizer.nextToken();", "-\t\t}", "-\t\tskipToken = false;", "-\t\tint length = line.length();", "-\t\tint lineStart = 0;", "-\t\tif (length > 0) {", "-\t\t\t// Trim leading whitespaces", "-\t\t\tif (IGNORE_SPACES > 0) {", "-\t\t\t\twhile (lineStart < length && ScannerHelper.isWhitespace(line.charAt(lineStart))) {", "-\t\t\t\t\tlineStart++;", "+private String[] formattedComments(String source, boolean old) {", "+\tboolean enableNewCommentFormatter = DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT;", "+\ttry {", "+\t\tDefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT = !old;", "+\t\tDefaultCodeFormatter codeFormatter = codeFormatter();", "+\t\tScanner scanner = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_4/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);", "+\t\tfinal TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\tint headerEndPosition = types == null ? compilationUnitDeclaration.sourceEnd : types[0].declarationSourceStart;", "+\t\tscanner.setSource(source.toCharArray());", "+\t\tscanner.lineEnds = codeSnippetParsingUtil.recordedParsingInformation.lineEnds;", "+\t\tint[][] commentsPositions = compilationUnitDeclaration.comments;", "+\t\tint length = commentsPositions == null ? 0 : commentsPositions.length;", "+\t\tString[] formattedComments = new String[length];", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tint[] positions = commentsPositions[i];", "+\t\t\tint commentKind = CodeFormatter.K_JAVA_DOC;", "+\t\t\tint commentStart = positions [0];", "+\t\t\tint commentEnd = positions [1];", "+\t\t\tif (commentEnd < 0) { // line or block comments have negative end position", "+\t\t\t\tcommentEnd = -commentEnd;", "+\t\t\t\tif (commentStart > 0) { // block comments have positive start position", "+\t\t\t\t\tcommentKind = CodeFormatter.K_MULTI_LINE_COMMENT;", "+\t\t\t\t} else {", "+\t\t\t\t\tcommentStart = -commentStart;", "+\t\t\t\t\tcommentKind = CodeFormatter.K_SINGLE_LINE_COMMENT;", "-\t\t\t// Search if a comment starts", "-\t\t\tint commentKind = 0;", "-\t\t\tint idx = line.indexOf('/', lineStart);", "-\t\t\tif (idx >= 0 && (idx+1) < length) {", "-\t\t\t\tidx++;", "-\t\t\t\tchar ch = line.charAt(idx++);", "-\t\t\t\tswitch (ch) {", "-\t\t\t\t\tcase '/':", "-\t\t\t\t\t\tcommentKind = 1; // line comment", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '*':", "-\t\t\t\t\t\tcommentKind = 2; // block comment", "-\t\t\t\t\t\tif (idx < length && line.charAt(idx) == '*') {", "-\t\t\t\t\t\t\tcommentKind = 3; // javadoc comment", "-\t\t\t\t\t\t\tidx++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (commentKind != 0) {", "-\t\t\t\t\t// Enter a comment", "-\t\t\t\t\tswitch (IGNORE_SPACES) {", "-\t\t\t\t\t\tcase ALL_COMMENTS_SPACES:", "-\t\t\t\t\t\t\tswitch (commentKind) {", "-\t\t\t\t\t\t\t\tcase 1:", "-\t\t\t\t\t\t\t\t\tint start = idx;", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "-\t\t\t\t\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(start)));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tlength = line.length();", "-\t\t\t\t\t\t\t\t\t\tstart = 0;", "-\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (start > length+1 || line.charAt(start) != '/' || line.charAt(start+1) != '/') {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "-\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tstart += 2;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 2:", "-\t\t\t\t\t\t\t\tcase 3:", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, idx).trim());", "-\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "-\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "-\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line));", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "-\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase ALL_COMMENTS_LINES_LEADING_SPACES:", "-\t\t\t\t\t\t\tswitch (commentKind) {", "-\t\t\t\t\t\t\t\tcase 1:", "-\t\t\t\t\t\t\t\t\tint start = idx;", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "-\t\t\t\t\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tlength = line.length();", "-\t\t\t\t\t\t\t\t\t\tstart = 0;", "-\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (start < length && (line.charAt(start) != '/' || line.charAt(start+1) != '/')) {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "-\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\t\t\tstart += 2; // skip next line starting comment", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 3:", "-\t\t\t\t\t\t\t\tcase 2:", "-\t\t\t\t\t\t\t\t\tstart = idx;", "-\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "-\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "-\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "-\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "-\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (start < length && ch == '*') {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tlength = line.length();", "-\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\t\tstart = 0;", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "-\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tif (commentStart >= headerEndPosition) {", "+\t\t\t\tint indentationLevel = getIndentationLevel(scanner, commentStart);", "+\t\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);", "-\t\tif (length > 0 && lineStart > 0 && lineStart < length) {", "-\t\t\tbuffer.append(line.substring(lineStart).trim());", "-\t\t} else {", "-\t\t\tbuffer.append(line);", "-\t\t}", "-\t\tbuffer.append('\\n');", "+\t\treturn formattedComments;", "-    return buffer.toString();", "+\tfinally {", "+\t\tDefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT = enableNewCommentFormatter;", "+\t}"]}], "num": 28311}
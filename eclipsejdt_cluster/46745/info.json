{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3bb88c84009f9ad012ff8d430a64bc6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b866c1cdf04bba83e3303e20e53cc3ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveTypeExpecting( \t\t\tBlockScope scope, \t\t\tTypeBinding expectedType)", "signatureAfterChange": " \tpublic TypeBinding resolveTypeExpecting( \t\t\tBlockScope scope, \t\t\tTypeBinding expectedType)", "diff": ["+\t\tTypeBinding lhsType = this.resolvedType; ", "+\t\tTypeBinding rhsType = this.expression.resolvedType;", "-\t\t\t\t&& this.lhs.resolvedType == BooleanBinding ", "+\t\t\t\t&& lhsType == BooleanBinding ", "-", "+\t\tcheckAssignment(scope, lhsType, rhsType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbef5872014607bbb9138162f5bd3eb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\t\t\t\t\tif (verifier.isParameterSubsignature(matchingMethod.original(), currentMethod.original())) {", "+\t\t\t\t\t\t\tMethodBinding matchingOriginal = matchingMethod.original();", "+\t\t\t\t\t\t\tMethodBinding currentOriginal = matchingOriginal.findOriginalInheritedMethod(currentMethod);", "+\t\t\t\t\t\t\tif (currentOriginal != null && verifier.isParameterSubsignature(matchingOriginal, currentOriginal)) {"]}], "num": 46745}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b863d0ce7f76a83e5bfb9bcaa6bacf0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634525ed5706c65281c8519d1212271c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "829b5d6c0fd9442407ed5d0be6ed8177d80d3792", "commitAfterChange": "2996adbc84ee533860ed3db3015812d956d4e3af", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \tprivate void format()", "signatureAfterChange": "\r \tprivate void format()", "diff": ["-\t\t\t\t\tcase TokenNamesynchronized :\r", "-\t\t\t\t\t\tindentationLevel += pushControlStatement(token);\r", "-\t\t\t\t\t\tbreak;\r", "-\r", "-\t\t\t\t\t\t// Put a space between the previous and current token if the\r", "-\t\t\t\t\t\t// previous token was not a keyword, open paren, logical\r", "-\t\t\t\t\t\t// compliment (eg: !), semi-colon, open brace, close brace,\r", "-\t\t\t\t\t\t// super, or this.\r", "-\t\t\t\t\t\tif (previousCompilableToken != TokenNameLBRACKET\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameIdentifier\r", "-\t\t\t\t\t\t\t&& previousToken != 0\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameNOT\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameLPAREN\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameTWIDDLE\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameSEMICOLON\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameLBRACE\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNameRBRACE\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNamesuper\r", "-\t\t\t\t\t\t\t&& previousToken != TokenNamethis) {\r", "-\t\t\t\t\t\t\tspace();\r", "+\t\t\t\t\t\tif (previousToken == TokenNamesynchronized) {\r", "+\t\t\t\t\t\t\tindentationLevel += pushControlStatement(previousToken);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// Put a space between the previous and current token if the\r", "+\t\t\t\t\t\t\t// previous token was not a keyword, open paren, logical\r", "+\t\t\t\t\t\t\t// compliment (eg: !), semi-colon, open brace, close brace,\r", "+\t\t\t\t\t\t\t// super, or this.\r", "+\t\t\t\t\t\t\tif (previousCompilableToken != TokenNameLBRACKET\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameIdentifier\r", "+\t\t\t\t\t\t\t\t&& previousToken != 0\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameNOT\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameLPAREN\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameTWIDDLE\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameSEMICOLON\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameLBRACE\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNameRBRACE\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNamesuper\r", "+\t\t\t\t\t\t\t\t&& previousToken != TokenNamethis) {\r", "+\t\t\t\t\t\t\t\tspace();\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t// If in a for/if/while statement, increase the parenthesis count\r", "+\t\t\t\t\t\t\t// for the current openParenthesisCount\r", "+\t\t\t\t\t\t\t// else increase the count for stand alone parenthesis.\r", "+\t\t\t\t\t\t\tif (openParenthesisCount > 0)\r", "+\t\t\t\t\t\t\t\topenParenthesis[openParenthesisCount - 1]++;\r", "+\t\t\t\t\t\t\telse\r", "+\t\t\t\t\t\t\t\topenParenthesis[0]++;\r", "+\t\r", "+\t\t\t\t\t\t\tpendingSpace = false;\r", "-\t\t\t\t\t\t// If in a for/if/while statement, increase the parenthesis count\r", "-\t\t\t\t\t\t// for the current openParenthesisCount\r", "-\t\t\t\t\t\t// else increase the count for stand alone parenthesis.\r", "-\t\t\t\t\t\tif (openParenthesisCount > 0)\r", "-\t\t\t\t\t\t\topenParenthesis[openParenthesisCount - 1]++;\r", "-\t\t\t\t\t\telse\r", "-\t\t\t\t\t\t\topenParenthesis[0]++;\r", "-\r", "-\t\t\t\t\t\tpendingSpace = false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9908d23784b98276954374c6dffcf026", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "bbb21a5affc4d3b9808e8ab897f64d3b1e68b6b2", "commitAfterChange": "e57c1379bf2ab200d310135306edb2776411f753", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void setIdentifier(String identifier)", "signatureAfterChange": "  \tpublic void setIdentifier(String identifier)", "diff": ["-\t\tscanner.resetTo(0, length);", "+\t\tscanner.resetTo(0, length - 1);", "-\t\t\tint tokenType = scanner.getNextToken();", "-\t\t\tswitch(tokenType) {", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "-\t\t\t\t\tif (scanner.getCurrentTokenEndPosition() != length - 1) {", "-\t\t\t\t\t\t// this is the case when there is only one identifier see 87849", "-\t\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\tint tokenType = scanner.scanIdentifier();", "+\t\t\tif (tokenType != TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t}", "+\t\t\tif (scanner.currentPosition != length) {", "+\t\t\t\t// this is the case when there is only one identifier see 87849", "+\t\t\t\tthrow new IllegalArgumentException();"]}], "num": 60230}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98bde8699696f2e96ea9c424e7cf95b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077c845165f5eca9fb9a4c1c584cd5cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "6100c16f42a61b4785fb3431eabdff7008e0822d", "commitAfterChange": "ae1f54f274fcbc3fe4d90b39f8d538bfd84fcc06", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\tif (one.returnType == substituteTwo.returnType) return true;", "-", "-\t// short is compatible with int, but as far as covariance is concerned, its not", "-\tif (one.returnType.isBaseType()) return false;", "-", "-\tif (!one.declaringClass.isInterface()) {", "-\t\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\t}", "-", "-\t// check for methods from Object, every interface inherits from Object", "-\tif (substituteTwo.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-", "-\t// both are interfaces, see if they're related", "-\tif (one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\tif (substituteTwo.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "-", "-\t// unrelated interfaces... one must be a subtype of the other", "-\treturn one.returnType.isCompatibleWith(substituteTwo.returnType)", "-\t\t|| substituteTwo.returnType.isCompatibleWith(one.returnType);", "+\treturn areReturnTypesCompatible(one, substituteTwo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d713560a90df279021b1c39b0e4caff1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "656dac68cbd33286fd4921aa8c255b2c9899af18", "commitAfterChange": "a6bad330f50e54d88b8e6f7c179ff0f20248efb6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void setUpSuite() throws Exception", "signatureAfterChange": " \tpublic void setUpSuite() throws Exception", "diff": ["-\t\t\tIJavaProject project = setUpJavaProject(\"Converter\"); //$NON-NLS-1$", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.IGNORE);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER, JavaCore.IGNORE);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_FIELD_HIDING, JavaCore.IGNORE);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING, JavaCore.IGNORE);", "-\t\t\tproject = setUpJavaProject(\"Converter15\", \"1.5\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.IGNORE);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER, JavaCore.IGNORE);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_FIELD_HIDING, JavaCore.IGNORE);", "-\t\t\tproject.setOption(JavaCore.COMPILER_PB_LOCAL_VARIABLE_HIDING, JavaCore.IGNORE);", "+\t\t\tsetUpJavaProject(\"Converter\"); //$NON-NLS-1$", "+\t\t\tsetUpJavaProject(\"Converter15\", \"1.5\"); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 15578}
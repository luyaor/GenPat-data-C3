{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17b8f857a99aba486fccbfa2703910e8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9321ab803bae23015ee55981b4d70b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "4d4c077960caad3dac6f1440a1eec3349b581bc3", "commitAfterChange": "84e94fe061dc975da80dda85572c99f5b95d09f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IIndex[] getIndexes()", "diff": ["-\tif (this.indexes == null) {", "-\t\treturn this.computeIndexes(); // if some indexes aren't ready, the index list won't be cached into 'indexes' slot", "+\tif (this.indexKeys == null) {", "+\t\tthis.initializeIndexKeys(); ", "-\treturn this.indexes;", "+\t// acquire the in-memory indexes on the fly", "+\tint length = this.indexKeys.length;", "+\tIIndex[] indexes = new IIndex[length];", "+\tfor (int i = 0; i < length; i++){", "+\t\t// may trigger some index recreation work", "+\t\tindexes[i] = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t}", "+\treturn indexes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1b428979e0a4efc7078549d3d0827d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IPath[] getIndexKeys()", "diff": ["-public IIndex[] getIndexes() {", "+public IPath[] getIndexKeys() {", "-\t// acquire the in-memory indexes on the fly", "-\tint length = this.indexKeys.length;", "-\tIIndex[] indexes = new IIndex[length];", "-\tint count = 0;", "-\tfor (int i = 0; i < length; i++){", "-\t\t// may trigger some index recreation work", "-\t\tIIndex index = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "-\t\tif (index != null) indexes[count++] = index; // only consider indexes which are ready yet", "-\t}", "-\tif (count != length) {", "-\t\tSystem.arraycopy(indexes, 0, indexes=new IIndex[count], 0, count);", "-\t}", "-\treturn indexes;", "+\treturn this.indexKeys;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dca49109e8d3a6d3d6006e19d69228be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "bd673e70d2edbc0e521113de6223a36ce39b9f38", "commitAfterChange": "f39ebdc35f9d09bb9c2d74130f4d665ebd4bf2dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IIndex[] getIndexes()", "diff": ["+\tint count = 0;", "-\t\tindexes[i] = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t\tIIndex index = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t\tif (index != null) indexes[count++] = index; // only consider indexes which are ready yet", "+\t}", "+\tif (count != length) {", "+\t\tSystem.arraycopy(indexes, 0, indexes=new IIndex[count], 0, count);"]}], "num": 34734}
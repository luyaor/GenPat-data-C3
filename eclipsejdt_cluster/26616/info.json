{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20abff1a49b451754ac94df5d277d8cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073dbaade8aa8fe767a7e43023277ac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "04abb6d1e9cce4ccf64496ee5f7d45399d283bd2", "commitAfterChange": "e586991bacf22cb0c88410f0cd529579715fb06a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected static TestSuite createSuite(Class testClass)", "signatureAfterChange": " \tprotected static TestSuite createSuite(Class testClass)", "diff": ["+\t\treturn createSuite(testClass, -1);", "+\t}", "-\t\t\t\t\t\t\tif (level >= since) {", "-\t\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(level)}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "374f3e92eb9d8aa9ce36fd13a1ca7431", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 114, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions = typeReference.getAnnotationsOnDimensions();", "-\t\t\t\ttype = this.ast.newArrayType(type, dimensions);", "-\t\t\t\ttype.setSourceRange(sourceStart, length);", "-\t\t\t\tArrayType subarrayType = (ArrayType) type;", "-\t\t\t\tint index = dimensions - 1;", "-\t\t\t\twhile (index > 0) {", "-\t\t\t\t\tif (annotationsOnDimensions != null && (annotations = annotationsOnDimensions[index]) != null) {", "-\t\t\t\t\t\tannotateType(subarrayType, annotations);", "-\t\t\t\t\t}", "-\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\tint end = retrieveProperRightBracketPosition(index, sourceStart);", "-\t\t\t\t\tsubarrayType.setSourceRange(sourceStart, end - sourceStart + 1);", "-\t\t\t\t\tindex--;", "-\t\t\t\t}", "-\t\t\t\tif (annotationsOnDimensions != null && (annotations = annotationsOnDimensions[0]) != null) {", "-\t\t\t\t\tannotateType(subarrayType, annotations);", "-\t\t\t\t}", "+\t\t\t\ttype = convertToArray(type, sourceStart, length, dimensions, typeReference.getAnnotationsOnDimensions());", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDimensions = typeReference.getAnnotationsOnDimensions();", "-\t\t\t\ttype = this.ast.newArrayType(type, dimensions);", "+\t\t\t\ttype = convertToArray(type, sourceStart, -1, dimensions, typeReference.getAnnotationsOnDimensions());", "-\t\t\t\t}", "-\t\t\t\tint end = retrieveEndOfDimensionsPosition(sourceStart+length, this.compilationUnitSourceLength);", "-\t\t\t\tif (end != -1) {", "-\t\t\t\t\ttype.setSourceRange(sourceStart, end - sourceStart + 1);", "-\t\t\t\t} else {", "-\t\t\t\t\ttype.setSourceRange(sourceStart, length);", "-\t\t\t\t}", "-\t\t\t\tArrayType subarrayType = (ArrayType) type;", "-\t\t\t\tint index = dimensions - 1;", "-\t\t\t\twhile (index > 0) {", "-\t\t\t\t\tif (annotationsOnDimensions != null  && (annotations = annotationsOnDimensions[index]) != null) {", "-\t\t\t\t\t\tannotateType(subarrayType, annotations);", "-\t\t\t\t\t}", "-\t\t\t\t\tsubarrayType = (ArrayType) subarrayType.getComponentType();", "-\t\t\t\t\tend = retrieveProperRightBracketPosition(index, sourceStart);", "-\t\t\t\t\tsubarrayType.setSourceRange(sourceStart, end - sourceStart + 1);", "-\t\t\t\t\tindex--;", "-\t\t\t\t}", "-\t\t\t\tif (annotationsOnDimensions != null  && (annotations = annotationsOnDimensions[0]) != null) {", "-\t\t\t\t\tannotateType(subarrayType, annotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a49969d2478f52f8506a8ea8b89e1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public IPath[] enclosingProjectsAndJars()", "signatureAfterChange": "\r public IPath[] enclosingProjectsAndJars()", "diff": ["-\ttry {\r", "-\t\tVector paths = new Vector();\r", "-\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(ResourcesPlugin.getWorkspace());\r", "-\t\tIWorkspaceRoot root = javaModel.getWorkspace().getRoot();\r", "-\t\tfor (int i = 0; i < this.elementCount; i++){\r", "-\t\t\tIResource element = this.elements[i];\r", "-\t\t\tIPath path = element.getProject().getFullPath();\r", "-\t\t\tIProject project = element.getProject();\r", "-\t\t\tif (project.exists() && project.isOpen()) {\r", "-\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "-\t\t\t\tif (this.includesClasspaths) {\r", "-\t\t\t\t\tIJavaProject javaProject = javaModel.getJavaProject(project.getName());\r", "-\t\t\t\t\tIClasspathEntry[] entries = ((JavaProject)javaProject).getExpandedClasspath(true);\r", "-\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\r", "-\t\t\t\t\t\tIClasspathEntry entry = entries[j];\r", "-\t\t\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "-\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "-\t\t\t\t\t\t\t\tif (!paths.contains(path) && root.getProject(path.lastSegment()).isAccessible()) {\r", "-\t\t\t\t\t\t\t\t\tpaths.add(path);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\t\t\tif (this.includesBinaries) {\r", "-\t\t\t\t\t\t\t\t\tpath = entry.getPath();\r", "-\t\t\t\t\t\t\t\t\tif (!paths.contains(path)) paths.add(path);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tIPath[] result = new IPath[paths.size()];\r", "-\t\tpaths.copyInto(result);\r", "-\t\treturn result;\r", "-\t} catch (JavaModelException e) {\r", "-\t\treturn new IPath[0];\r", "-\t}\r", "+\treturn this.enclosingProjectsAndJars;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98ee9e17271947f4b604f0f0d3925810", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "cda1b15548fe8a60a0e333685b77168207ce463b", "commitAfterChange": "3e5cc2c42f4e1b7d5f4da0ff6228df838f56d815", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns)", "diff": ["-\t\tStringTokenizer tokenizer = new StringTokenizer(patterns, \"|\");", "-\t\tint ruleCount =  tokenizer.countTokens();", "-\t\tIAccessRule[] accessRules = new IAccessRule[ruleCount];", "-\t\tint nonAccessibleRules = 0;", "-\t\tfor (int j = 0; j < ruleCount; j++) {", "-\t\t\tString rule = tokenizer.nextToken();", "-\t\t\tint kind;", "-\t\t\tif (rule.charAt(0) == '+') {", "-\t\t\t\tkind = IAccessRule.K_ACCESSIBLE;", "-\t\t\t} else {", "-\t\t\t\tkind = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\tnonAccessibleRules++;", "-\t\t\t}", "-\t\t\taccessRules[j] = JavaCore.newAccessRule(new Path(rule.substring(1)), kind);", "-\t\t}", "-", "-\t\tIPath folderPath = new Path(src);", "-\t\tif (projectName != null && folderPath.segmentCount() == 1 && !projectName.equals(folderPath.lastSegment())) {", "-\t\t\tclasspath[i/2] = JavaCore.newProjectEntry(folderPath, accessRules, true/*combine access restrictions*/, new IClasspathAttribute[0], false); ", "-\t\t} else {", "-\t\t\tIPath[] accessibleFiles = new IPath[ruleCount-nonAccessibleRules];", "-\t\t\tint accessibleIndex = 0;", "-\t\t\tIPath[] nonAccessibleFiles = new IPath[nonAccessibleRules];", "-\t\t\tint nonAccessibleIndex = 0;", "-\t\t\tfor (int j = 0; j < ruleCount; j++) {", "-\t\t\t\tIAccessRule accessRule = accessRules[i];", "-\t\t\t\tif (accessRule.getKind() == IAccessRule.K_ACCESSIBLE) ", "-\t\t\t\t\taccessibleFiles[accessibleIndex++] = accessRule.getPattern();", "-\t\t\t\telse", "-\t\t\t\t\tnonAccessibleFiles[nonAccessibleIndex++] = accessRule.getPattern();", "-\t\t\t}", "-\t\t\tclasspath[i/2] = JavaCore.newSourceEntry(folderPath, accessibleFiles, nonAccessibleFiles, null); ", "-\t\t}", "+\t\tclasspath[i/2] = createSourceEntry(projectName, src, patterns);"]}], "num": 26616}
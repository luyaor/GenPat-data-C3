{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d32ff6f1ef684f77dff4557244c89aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48840a86666a0f541e6615491d9bf659", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "signatureAfterChange": " private void findContentChange(JavaElementInfo oldInfo, JavaElementInfo newInfo, IJavaElement newElement)", "diff": ["-\t\t} else if (oldInfo instanceof SourceMethodElementInfo && newInfo instanceof SourceMethodElementInfo) {", "+\t\t} ", "+\t\tif (oldInfo instanceof AnnotatableInfo && newInfo instanceof AnnotatableInfo) {", "+\t\t\tfindAnnotationChanges(((AnnotatableInfo) oldInfo).annotations, ((AnnotatableInfo) newInfo).annotations, newElement);", "+\t\t}", "+\t\tif (oldInfo instanceof SourceMethodElementInfo && newInfo instanceof SourceMethodElementInfo) {", "-\t\t}", "-\t}", "-\tif (oldInfo instanceof SourceTypeElementInfo && newInfo instanceof SourceTypeElementInfo) {", "-\t\tSourceTypeElementInfo oldSourceTypeInfo = (SourceTypeElementInfo)oldInfo;", "-\t\tSourceTypeElementInfo newSourceTypeInfo = (SourceTypeElementInfo)newInfo;", "-\t\tif (!CharOperation.equals(oldSourceTypeInfo.getSuperclassName(), newSourceTypeInfo.getSuperclassName()) ", "-\t\t\t\t|| !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(), newSourceTypeInfo.getInterfaceNames())) {", "-\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_SUPER_TYPES);", "-\t\t}", "-\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterNames(), newSourceTypeInfo.getTypeParameterNames())", "-\t\t\t\t|| !equals(oldSourceTypeInfo.getTypeParameterBounds(), newSourceTypeInfo.getTypeParameterBounds())) {", "-\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);", "-\t\t}", "-\t\tHashMap oldTypeCategories = oldSourceTypeInfo.categories;", "-\t\tHashMap newTypeCategories = newSourceTypeInfo.categories;", "-\t\tif (oldTypeCategories != null) {", "-\t\t\t// take the union of old and new categories elements (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=125675)", "-\t\t\tSet elements;", "-\t\t\tif (newTypeCategories != null) {", "-\t\t\t\telements = new HashSet(oldTypeCategories.keySet());", "-\t\t\t\telements.addAll(newTypeCategories.keySet());", "-\t\t\t} else", "-\t\t\t\telements = oldTypeCategories.keySet();", "-\t\t\tIterator iterator = elements.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement) iterator.next();", "-\t\t\t\tString[] oldCategories = (String[]) oldTypeCategories.get(element);", "-\t\t\t\tString[] newCategories = newTypeCategories == null ? null : (String[]) newTypeCategories.get(element);", "-\t\t\t\tif (!Util.equalArraysOrNull(oldCategories, newCategories)) {", "-\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES);", "-\t\t\t\t}", "+\t\t} else if (oldInfo instanceof SourceTypeElementInfo && newInfo instanceof SourceTypeElementInfo) {", "+\t\t\tSourceTypeElementInfo oldSourceTypeInfo = (SourceTypeElementInfo)oldInfo;", "+\t\t\tSourceTypeElementInfo newSourceTypeInfo = (SourceTypeElementInfo)newInfo;", "+\t\t\tif (!CharOperation.equals(oldSourceTypeInfo.getSuperclassName(), newSourceTypeInfo.getSuperclassName()) ", "+\t\t\t\t\t|| !CharOperation.equals(oldSourceTypeInfo.getInterfaceNames(), newSourceTypeInfo.getInterfaceNames())) {", "+\t\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_SUPER_TYPES);", "-\t\t} else if (newTypeCategories != null) {", "-\t\t\tIterator elements = newTypeCategories.keySet().iterator();", "-\t\t\twhile (elements.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "-\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES); // all categories for this element were removed", "+\t\t\tif (!CharOperation.equals(oldSourceTypeInfo.getTypeParameterNames(), newSourceTypeInfo.getTypeParameterNames())", "+\t\t\t\t\t|| !equals(oldSourceTypeInfo.getTypeParameterBounds(), newSourceTypeInfo.getTypeParameterBounds())) {", "+\t\t\t\tthis.delta.changed(newElement, IJavaElementDelta.F_CONTENT);", "+\t\t\t}", "+\t\t\tHashMap oldTypeCategories = oldSourceTypeInfo.categories;", "+\t\t\tHashMap newTypeCategories = newSourceTypeInfo.categories;", "+\t\t\tif (oldTypeCategories != null) {", "+\t\t\t\t// take the union of old and new categories elements (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=125675)", "+\t\t\t\tSet elements;", "+\t\t\t\tif (newTypeCategories != null) {", "+\t\t\t\t\telements = new HashSet(oldTypeCategories.keySet());", "+\t\t\t\t\telements.addAll(newTypeCategories.keySet());", "+\t\t\t\t} else", "+\t\t\t\t\telements = oldTypeCategories.keySet();", "+\t\t\t\tIterator iterator = elements.iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tIJavaElement element = (IJavaElement) iterator.next();", "+\t\t\t\t\tString[] oldCategories = (String[]) oldTypeCategories.get(element);", "+\t\t\t\t\tString[] newCategories = newTypeCategories == null ? null : (String[]) newTypeCategories.get(element);", "+\t\t\t\t\tif (!Util.equalArraysOrNull(oldCategories, newCategories)) {", "+\t\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (newTypeCategories != null) {", "+\t\t\t\tIterator elements = newTypeCategories.keySet().iterator();", "+\t\t\t\twhile (elements.hasNext()) {", "+\t\t\t\t\tIJavaElement element = (IJavaElement) elements.next();", "+\t\t\t\t\tthis.delta.changed(element, IJavaElementDelta.F_CATEGORIES); // all categories for this element were removed", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccf37253236eddaa4f38e88a1583d0ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["-\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "-\t\t\tTypeReference typeRef = thrownExceptions[i];", "-\t\t\tif (typeRef instanceof JavadocSingleTypeReference) {", "-\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) typeRef;", "-\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "-\t\t\t} else if (typeRef instanceof JavadocQualifiedTypeReference) {", "-\t\t\t\tJavadocQualifiedTypeReference qualifiedRef = (JavadocQualifiedTypeReference) typeRef;", "-\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\tif (thrownExceptions != null) {", "+\t\t\tfor (int i = 0, max=thrownExceptions.length; i < max; i++) {", "+\t\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\t\tif (typeRef instanceof JavadocSingleTypeReference) {", "+\t\t\t\t\tJavadocSingleTypeReference singleRef = (JavadocSingleTypeReference) typeRef;", "+\t\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t\t} else if (typeRef instanceof JavadocQualifiedTypeReference) {", "+\t\t\t\t\tJavadocQualifiedTypeReference qualifiedRef = (JavadocQualifiedTypeReference) typeRef;", "+\t\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t\t}", "-\t\tint seeTagsNbre = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "-\t\t\tExpression reference = references[i];", "-\t\t\tacceptJavadocTypeReference(reference);", "-\t\t\tif (reference instanceof JavadocFieldReference) {", "-\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "-\t\t\t\tthis.requestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "-\t\t\t\tif (fieldRef.receiver != null && !fieldRef.receiver.isThis()) {", "-\t\t\t\t\tacceptJavadocTypeReference(fieldRef.receiver);", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocMessageSend) {", "-\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "-\t\t\t\tint argCount = messageSend.arguments == null ? 0 : messageSend.arguments.length;", "-\t\t\t\tthis.requestor.acceptMethodReference(messageSend.selector, argCount, messageSend.sourceStart);", "-\t\t\t\tthis.requestor.acceptConstructorReference(messageSend.selector, argCount, messageSend.sourceStart);", "-\t\t\t\tif (messageSend.receiver != null && !messageSend.receiver.isThis()) {", "-\t\t\t\t\tacceptJavadocTypeReference(messageSend.receiver);", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "-\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "-\t\t\t\tint argCount = constructor.arguments == null ? 0 : constructor.arguments.length;", "-\t\t\t\tif (constructor.type != null) {", "-\t\t\t\t\tchar[][] compoundName = constructor.type.getParameterizedTypeName();", "-\t\t\t\t\tthis.requestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);", "-\t\t\t\t\tif (!constructor.type.isThis()) {", "-\t\t\t\t\t\tacceptJavadocTypeReference(constructor.type);", "+\t\tif (references != null) {", "+\t\t\tfor (int i = 0, max=references.length; i < max; i++) {", "+\t\t\t\tExpression reference = references[i];", "+\t\t\t\tacceptJavadocTypeReference(reference);", "+\t\t\t\tif (reference instanceof JavadocFieldReference) {", "+\t\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "+\t\t\t\t\tthis.requestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "+\t\t\t\t\tif (fieldRef.receiver != null && !fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tacceptJavadocTypeReference(fieldRef.receiver);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "+\t\t\t\t\tint argCount = messageSend.arguments == null ? 0 : messageSend.arguments.length;", "+\t\t\t\t\tthis.requestor.acceptMethodReference(messageSend.selector, argCount, messageSend.sourceStart);", "+\t\t\t\t\tthis.requestor.acceptConstructorReference(messageSend.selector, argCount, messageSend.sourceStart);", "+\t\t\t\t\tif (messageSend.receiver != null && !messageSend.receiver.isThis()) {", "+\t\t\t\t\t\tacceptJavadocTypeReference(messageSend.receiver);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\t\tint argCount = constructor.arguments == null ? 0 : constructor.arguments.length;", "+\t\t\t\t\tif (constructor.type != null) {", "+\t\t\t\t\t\tchar[][] compoundName = constructor.type.getParameterizedTypeName();", "+\t\t\t\t\t\tthis.requestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);", "+\t\t\t\t\t\tif (!constructor.type.isThis()) {", "+\t\t\t\t\t\t\tacceptJavadocTypeReference(constructor.type);", "+\t\t\t\t\t\t}"]}], "num": 15619}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a81a6b5d0d61d3268e0685cf10915199", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cb59108475b3e7223f8f8a8c754ee6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "e3ab7adcf5341254d66eeef47fc0727dbe42868f", "commitAfterChange": "8915ec2bb74e44419be85002d7c3a4c9f8582635", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(NLSLine line)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-protected void parseTags(NLSLine line) {", "-\tString s = new String(getCurrentTokenSource());", "-\tint pos = s.indexOf(TAG_PREFIX);", "-\tint lineLength = line.size();", "-\twhile (pos != -1) {", "-\t\tint start = pos + TAG_PREFIX_LENGTH;", "-\t\tint end = s.indexOf(TAG_POSTFIX, start);", "-\t\tif (end != -1) {", "-\t\t\tString index = s.substring(start, end);", "-\t\t\tint i = 0;", "-\t\t\ttry {", "-\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "-\t\t\t}", "-\t\t\tif (line.exists(i)) {", "-\t\t\t\tline.set(i, null);", "+protected void parseTags(boolean hasLineComment) {", "+\tfinal NLSLine line = this.currentLine;", "+\tif (!hasLineComment) {", "+\t\tif (line.size() == 0) return; // nothing to do", "+\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "+\t\tthis.nonNLSStrings.addAll(line.elements);", "+\t} else {", "+\t\tchar[] s = getCurrentTokenSource();", "+\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true);", "+\t\tif (pos != -1) {", "+\t\t\tif (this.unnecessaryNONNLSTags == null) this.unnecessaryNONNLSTags = new HashSet();", "+\t\t\twhile (pos != -1) {", "+\t\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "+\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start);", "+\t\t\t\tif (end != -1) {", "+\t\t\t\t\tString index = new String(CharOperation.subarray(s, start, end));", "+\t\t\t\t\tint i = 0;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "+\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "+\t\t\t\t\t}", "+\t\t\t\t\tif (line != null && line.exists(i)) {", "+\t\t\t\t\t\tline.set(i, null);", "+\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);", "+\t\t\t\t\t\tif (!this.unnecessaryNONNLSTags.add(tag)) {", "+\t\t\t\t\t\t\tthis.unnecessaryNONNLSTags.remove(tag);", "+\t\t\t\t\t\t\tthis.unnecessaryNONNLSTags.add(tag);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.unnecessaryNONNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, start);", "-\t\tpos = s.indexOf(TAG_PREFIX, start);", "-\t}", "-", "-\tthis.nonNLSStrings = new StringLiteral[lineLength];", "-\tint nonNLSCounter = 0;", "-\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "-\t\tStringLiteral literal = (StringLiteral) iterator.next();", "-\t\tif (literal != null) {", "-\t\t\tthis.nonNLSStrings[nonNLSCounter++] = literal;", "+\t", "+\t\tif (line.size() != 0) {", "+\t\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "+\t\t\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "+\t\t\t\tStringLiteral literal = (StringLiteral) iterator.next();", "+\t\t\t\tif (literal != null) {", "+\t\t\t\t\tthis.nonNLSStrings.add(literal);", "+\t\t\t\t}", "+\t\t\t}", "-\tif (nonNLSCounter == 0) {", "-\t\tthis.nonNLSStrings = null;", "-\t\tthis.currentLine = null;", "-\t\treturn;", "-\t} ", "-\tthis.wasNonExternalizedStringLiteral = true;", "-\tif (nonNLSCounter != lineLength) {", "-\t\tSystem.arraycopy(this.nonNLSStrings, 0, (this.nonNLSStrings = new StringLiteral[nonNLSCounter]), 0, nonNLSCounter);", "-\t}", "-\tthis.currentLine = null;", "+\tif (this.currentLine != null) this.currentLine.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c1c0981f394d1165c597ab83dfffb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "c45bf502fba0f629b4a4d8d054f7be8a5c8b1dee", "commitAfterChange": "39b76d2a7f3a6f2c26b172e494e7acf3aff1dea6", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(NLSLine line)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-protected void parseTags(NLSLine line) {", "-\tString s = new String(getCurrentTokenSource());", "-\tint pos = s.indexOf(TAG_PREFIX);", "-\tint lineLength = line.size();", "-\twhile (pos != -1) {", "-\t\tint start = pos + TAG_PREFIX_LENGTH;", "-\t\tint end = s.indexOf(TAG_POSTFIX, start);", "-\t\tif (end != -1) {", "-\t\t\tString index = s.substring(start, end);", "-\t\t\tint i = 0;", "-\t\t\ttry {", "-\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "-\t\t\t}", "-\t\t\tif (line.exists(i)) {", "-\t\t\t\tline.set(i, null);", "+protected void parseTags(boolean hasLineComment) {", "+\tfinal NLSLine line = this.currentLine;", "+\tif (!hasLineComment) {", "+\t\tif (line.size() == 0) return; // nothing to do", "+\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "+\t\tthis.nonNLSStrings.addAll(line.elements);", "+\t} else {", "+\t\tchar[] s = getCurrentTokenSource();", "+\t\tint pos = CharOperation.indexOf(TAG_PREFIX, s, true);", "+\t\tif (pos != -1) {", "+\t\t\tif (this.unnecessaryNONNLSTags == null) this.unnecessaryNONNLSTags = new HashSet();", "+\t\t\twhile (pos != -1) {", "+\t\t\t\tint start = pos + TAG_PREFIX_LENGTH;", "+\t\t\t\tint end = CharOperation.indexOf(TAG_POSTFIX, s, start);", "+\t\t\t\tif (end != -1) {", "+\t\t\t\t\tString index = new String(CharOperation.subarray(s, start, end));", "+\t\t\t\t\tint i = 0;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "+\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "+\t\t\t\t\t}", "+\t\t\t\t\tif (line != null && line.exists(i)) {", "+\t\t\t\t\t\tline.set(i, null);", "+\t\t\t\t\t\tfinal NLSTag tag = new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end, NLSTag.USED);", "+\t\t\t\t\t\tif (!this.unnecessaryNONNLSTags.add(tag)) {", "+\t\t\t\t\t\t\tthis.unnecessaryNONNLSTags.remove(tag);", "+\t\t\t\t\t\t\tthis.unnecessaryNONNLSTags.add(tag);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.unnecessaryNONNLSTags.add(new NLSTag(pos + this.getCurrentTokenStartPosition(), this.getCurrentTokenStartPosition() + end));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpos = CharOperation.indexOf(TAG_PREFIX, s, true, start);", "-\t\tpos = s.indexOf(TAG_PREFIX, start);", "-\t}", "-", "-\tthis.nonNLSStrings = new StringLiteral[lineLength];", "-\tint nonNLSCounter = 0;", "-\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "-\t\tStringLiteral literal = (StringLiteral) iterator.next();", "-\t\tif (literal != null) {", "-\t\t\tthis.nonNLSStrings[nonNLSCounter++] = literal;", "+\t", "+\t\tif (line.size() != 0) {", "+\t\t\tif (this.nonNLSStrings == null) this.nonNLSStrings = new HashSet();", "+\t\t\tfor (Iterator iterator = line.iterator(); iterator.hasNext(); ) {", "+\t\t\t\tStringLiteral literal = (StringLiteral) iterator.next();", "+\t\t\t\tif (literal != null) {", "+\t\t\t\t\tthis.nonNLSStrings.add(literal);", "+\t\t\t\t}", "+\t\t\t}", "-\tif (nonNLSCounter == 0) {", "-\t\tthis.nonNLSStrings = null;", "-\t\tthis.currentLine = null;", "-\t\treturn;", "-\t} ", "-\tthis.wasNonExternalizedStringLiteral = true;", "-\tif (nonNLSCounter != lineLength) {", "-\t\tSystem.arraycopy(this.nonNLSStrings, 0, (this.nonNLSStrings = new StringLiteral[nonNLSCounter]), 0, nonNLSCounter);", "-\t}", "-\tthis.currentLine = null;", "+\tif (this.currentLine != null) this.currentLine.clear();"]}], "num": 26672}
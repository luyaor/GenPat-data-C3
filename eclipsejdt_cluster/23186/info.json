{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e282ba73eff3660b924ad39499a604e5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1db15d4b6c007c9f3595a8fae571916b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "206ad24d44233cc9c2be37e780d152ced497a68c", "commitAfterChange": "c8764bd191b442c989d64659a101e6d60b5fd3b5", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope)", "diff": ["-\t\t\tif (((expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "-\t\t\t\tif (this.preferences.insert_space_before_parenthesized_expression_in_return) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t} else {", "+\t\t\tfinal int numberOfParens = (expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\tif ((numberOfParens != 0 && this.preferences.insert_space_before_parenthesized_expression_in_return)", "+\t\t\t\t\t|| numberOfParens == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90226c42650bc6831ba0b4da72b02ce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "206ad24d44233cc9c2be37e780d152ced497a68c", "commitAfterChange": "c8764bd191b442c989d64659a101e6d60b5fd3b5", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": " \tpublic boolean visit(ThrowStatement throwStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ThrowStatement throwStatement, BlockScope scope)", "diff": ["-\t\tthis.scribe.space();", "-\t\tthrowStatement.exception.traverse(this, scope);", "+\t\tExpression expression = throwStatement.exception;", "+\t\tfinal int numberOfParens = (expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif ((numberOfParens > 0 && this.preferences.insert_space_before_parenthesized_expression_in_throw)", "+\t\t\t\t|| numberOfParens == 0) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\texpression.traverse(this, scope);"]}], "num": 23186}
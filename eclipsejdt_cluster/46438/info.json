{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a83d22cf2bc9df727ad73bcaab0d7dc2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "299de959c2641869b2bcab4852764f75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 236, "signatureBeforeChange": "  public void parse( \tInitializer ini,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "signatureAfterChange": "  public void parse( \tInitializer ini,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit)", "diff": ["-\tgoForInitializer();", "+\tgoForBlockStatementsopt();", "-", "+\tpushOnRealBlockStack(0);", "+\t", "-\tscanner.resetTo(ini.sourceStart, ini.sourceEnd); // just on the beginning {", "+\tscanner.resetTo(ini.bodyStart, ini.bodyEnd); // just on the beginning {", "+\tcheckNonNLSAfterBodyEnd(ini.declarationSourceEnd);", "+\t", "-", "-\tini.block = ((Initializer) astStack[astPtr]).block;", "+\t", "+\t//refill statements", "+\tini.block.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tint length;", "+\tif ((length = astLengthStack[astLengthPtr--]) != 0)", "+\t\tSystem.arraycopy(", "+\t\t\tastStack, ", "+\t\t\t(astPtr -= length) + 1, ", "+\t\t\tini.block.statements = new Statement[length], ", "+\t\t\t0, ", "+\t\t\tlength); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39a361c80fe6ebebecb9d70b0f795e51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "commitAfterChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void parseBlockStatements(MethodDeclaration md, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parseBlockStatements(MethodDeclaration md, CompilationUnitDeclaration unit)", "diff": ["+\t", "+\tif (this.assistNode != null || lastAct == ERROR_ACTION) {", "+\t\treturn;", "+\t}", "+", "+\t// if no assist node was found, attach the statements as we might be searching for a declaration in a local type", "+\tmd.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tint length;", "+\tif ((length = astLengthStack[astLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tastStack, ", "+\t\t\t(astPtr -= length) + 1, ", "+\t\t\tmd.statements = new Statement[length], ", "+\t\t\t0, ", "+\t\t\tlength); ", "+\t} else {", "+\t\tif (!containsComment(md.bodyStart, md.bodyEnd)) {", "+\t\t\tmd.bits |= AstNode.UndocumentedEmptyBlockMASK;", "+\t\t}", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b26c2f5317ca7324b02a44a6cf00c57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "2cf58056e866ff671cad90d5365fdd17bef2e395", "commitAfterChange": "5eaac7ac2a1f933d3823239cdabe42da5dc006f8", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": " protected void consumeMethodDeclaration(boolean isNotAbstract)", "signatureAfterChange": " protected void consumeMethodDeclaration(boolean isNotAbstract)", "diff": ["-\t\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack,", "-\t\t\t\t(this.astPtr -= length) + 1,", "-\t\t\t\tstatements = new Statement[length],", "-\t\t\t\t0,", "-\t\t\t\tlength);", "+\t\tif (!this.options.ignoreMethodBodies) {", "+\t\t\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\t(this.astPtr -= length) + 1,", "+\t\t\t\t\tstatements = new Statement[length],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tlength = this.astLengthStack[this.astLengthPtr--];", "+\t\t\tthis.astPtr -= length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e2323ecc0ac89d1b6f77c83d4b9fb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8b2f544bc2c01b972e8c0734076c17a325ac4120", "commitAfterChange": "cedc325f2a935c759cba1f1e5e6c7415bee87a4f", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " protected void consumeMethodHeaderRightParen()", "signatureAfterChange": " protected void consumeMethodHeaderRightParen()", "diff": ["-\t\tSystem.arraycopy(", "-\t\t\tthis.astStack,", "-\t\t\tthis.astPtr + 1,", "-\t\t\tmd.arguments = new Argument[length],", "-\t\t\t0,", "-\t\t\tlength);", "+\t\tArgument arg = (Argument) this.astStack[this.astPtr + 1];", "+\t\tif (arg.isReceiver()) {", "+\t\t\tmd.receiver = (Receiver) arg;", "+\t\t\tif (length > 1) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 2,", "+\t\t\t\t\tmd.arguments = new Argument[length - 1],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength - 1);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\tthis.astPtr + 1,", "+\t\t\t\t\tmd.arguments = new Argument[length],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76b241aaaf205a2526a1b52128faaf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "fe024fd7797ce73b0a83969f685073606863b79e", "commitAfterChange": "124641ac651bbea2bd062a9605817d39b473bf0e", "methodNumberBeforeChange": 206, "methodNumberAfterChange": 206, "signatureBeforeChange": " protected void consumeInterfaceMethodDeclaration(boolean hasSemicolonBody)", "signatureAfterChange": " protected void consumeInterfaceMethodDeclaration(boolean hasSemicolonBody)", "diff": ["+\tint explicitDeclarations = 0;", "+\tStatement[] statements = null;", "-\t\t// retrieve end position of method declarator", "-", "+\t\tthis.intPtr--;", "+\t\t", "+\t\texplicitDeclarations = this.realBlockStack[this.realBlockPtr--];", "+\t\t", "-\t\tthis.realBlockPtr--;", "-\t\t\tthis.astPtr -= length;", "+\t\t\tif (this.options.ignoreMethodBodies) {", "+\t\t\t\tthis.astPtr -= length;", "+\t\t\t} else {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack,", "+\t\t\t\t\t(this.astPtr -= length) + 1,", "+\t\t\t\t\tstatements = new Statement[length],", "+\t\t\t\t\t0,", "+\t\t\t\t\tlength);", "+\t\t\t}", "+\tmd.statements = statements;", "+\tmd.explicitDeclarations = explicitDeclarations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e2fb215633641466f40ce4ece0bfcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5a0b16973c5f2b4b1beccfae3f83602332ac3f5d", "commitAfterChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 387, "signatureBeforeChange": " public void parse(MethodDeclaration md, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parse(MethodDeclaration md, CompilationUnitDeclaration unit)", "diff": ["-\t\tSystem.arraycopy(", "-\t\t\tthis.astStack,", "-\t\t\t(this.astPtr -= length) + 1,", "-\t\t\tmd.statements = new Statement[length],", "-\t\t\t0,", "-\t\t\tlength);", "+\t\tif ((md.bits & ASTNode.HasLocalType) == 0 && this.options.ignoreMethodBodies) {", "+\t\t\t// ignore statements", "+\t\t\tthis.astPtr -= length;", "+\t\t} else {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.astStack,", "+\t\t\t\t(this.astPtr -= length) + 1,", "+\t\t\t\tmd.statements = new Statement[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\t}"]}], "num": 46438}
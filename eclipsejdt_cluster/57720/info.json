{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "393db32a2be3cd89a7e2292d6dc53ddc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e1439b8592354496cc35c9dd9e8ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/align/Alignment.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString(StringBuffer buffer, int level)", "diff": ["-\t\tString className = getClass().getName();", "-\t\tclassName = className.substring(className.lastIndexOf('.')+1);", "-\t\tbuffer", "-\t\t\t.append(className)", "-\t\t\t.append(\":<name: \")\t//$NON-NLS-1$", "-\t\t\t.append(this.name)", "-\t\t\t.append(\">\");\t//$NON-NLS-1$", "-\t\tint indentLength = className.length()+1;", "-\t\tbuffer.append('\\n');", "-\t\tfor (int i=0; i<indentLength; i++) {", "-\t\t\tbuffer.append(' ');", "+", "+\tpublic String toString(StringBuffer buffer, int level) {", "+\t\t", "+\t\t// Compute the indentation at the given level", "+\t\tStringBuffer indentation = new StringBuffer();", "+\t\tfor (int i=0; i<level; i++) {", "+\t\t\tindentation.append('\\t');", "+\t\t", "+\t\t// First line is for class and name", "+\t\tbuffer.append(indentation);", "+\t\tbuffer", "+\t\t\t.append(\"<name: \")\t//$NON-NLS-1$", "+\t\t\t.append(this.name)", "+\t\t\t.append(\">\\n\");\t//$NON-NLS-1$", "+\t\t", "+\t\t// Line for depth and break indentation", "+\t\tbuffer.append(indentation);", "-\t\t\t.append('>');", "-\t\tif (this.enclosing != null) {", "-\t\t\tbuffer", "-\t\t\t\t.append(\"<enclosingName: \")\t//$NON-NLS-1$", "-\t\t\t\t.append(this.enclosing.name)", "-\t\t\t\t.append('>');", "-\t\t}", "-\t\tbuffer.append('\\n');", "+\t\t\t.append(\">\\n\"); //$NON-NLS-1$", "+\t\t// Line to display the location", "+\t\tbuffer.append(indentation);", "+\t\tbuffer", "+\t\t\t.append(\"<location=\")\t//$NON-NLS-1$", "+\t\t\t.append(this.location.toString())", "+\t\t\t.append(\">\\n\");\t//$NON-NLS-1$", "+", "+\t\t// Lines for fragments", "+\t\tbuffer", "+\t\t\t.append(indentation)", "+\t\t\t.append(\"<fragments:\\n\");\t//$NON-NLS-1$", "-\t\t\t\t.append(\" - fragment \")\t//$NON-NLS-1$", "+\t\t\t\t.append(indentation)", "+\t\t\t\t.append(\" - \")\t//$NON-NLS-1$", "-\t\tbuffer.append('\\n');", "+\t\tbuffer", "+\t\t\t.append(indentation)", "+\t\t\t.append(\">\\n\"); //$NON-NLS-1$", "+\t\t", "+\t\t// Display enclosing", "+\t\tif (this.enclosing != null && level >= 0) {", "+\t\t\tbuffer", "+\t\t\t\t.append(indentation)", "+\t\t\t\t.append(\"<enclosing assignement:\\n\");\t//$NON-NLS-1$", "+\t\t\tthis.enclosing.toString(buffer, level+1);", "+\t\t\tbuffer", "+\t\t\t\t.append(indentation)", "+\t\t\t\t.append(\">\\n\"); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// Return the result"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5280e00682f0f65cc13edf167980fca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " protected StringBuffer print(StringBuffer output)", "diff": ["-public String toString() {", "-\tStringBuffer buffer = new StringBuffer(20);", "+protected StringBuffer print(StringBuffer output) {", "-\t\t\tbuffer.append(\"ClassDeclarationPattern: pkg<\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"ClassDeclarationPattern: pkg<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"InterfaceDeclarationPattern: pkg<\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"InterfaceDeclarationPattern: pkg<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"EnumDeclarationPattern: pkg<\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"EnumDeclarationPattern: pkg<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"AnnotationTypeDeclarationPattern: pkg<\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"AnnotationTypeDeclarationPattern: pkg<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(\"TypeDeclarationPattern: pkg<\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"TypeDeclarationPattern: pkg<\"); //$NON-NLS-1$", "-\t\tbuffer.append(pkg);", "+\t\toutput.append(pkg);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append(\">, enclosing<\"); //$NON-NLS-1$", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "+\toutput.append(\">, enclosing<\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(enclosingTypeNames[i]);", "+\t\t\toutput.append(enclosingTypeNames[i]);", "-\t\t\t\tbuffer.append('.');", "+\t\t\t\toutput.append('.');", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append(\">, type<\"); //$NON-NLS-1$", "+\toutput.append(\">, type<\"); //$NON-NLS-1$", "-\t\tbuffer.append(simpleName);", "+\t\toutput.append(simpleName);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append(\">, \"); //$NON-NLS-1$", "-\tswitch(getMatchMode()){", "-\t\tcase R_EXACT_MATCH : ", "-\t\t\tbuffer.append(\"exact match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PREFIX_MATCH :", "-\t\t\tbuffer.append(\"prefix match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PATTERN_MATCH :", "-\t\t\tbuffer.append(\"pattern match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t}", "-\tif (isCaseSensitive())", "-\t\tbuffer.append(\"case sensitive\"); //$NON-NLS-1$", "-\telse", "-\t\tbuffer.append(\"case insensitive\"); //$NON-NLS-1$", "-\treturn buffer.toString();", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "+\toutput.append(\">\"); //$NON-NLS-1$", "+\treturn super.print(output);"]}], "num": 57720}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2d087341e8f8248677a8d6f5c5a5deb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbac4ef0c26e0cc7b5da6407df7af01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "183bd75c46b88010e052308e0b5a2ec9acc24639", "commitAfterChange": "70e7dc8284deadd5b37cb25d1eb08df1105ac893", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": " \t \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\tif (requiredType == null) ", "-\t\t\treturn;", "+\t\tif (requiredType == null) {", "+\t\t\t// fault tolerance: keep resolving", "+\t\t\tif (this.value instanceof ArrayInitializer) {", "+\t\t\t\tthis.value.resolveTypeExpecting(scope, null);", "+\t\t\t} else {", "+\t\t\t\tthis.value.resolveType(scope);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f4ccb910f391f77c287e76396d094df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "2c7a59198ef0accc78a3ea8fb276fbfe877a83c2", "commitAfterChange": "a55be3089b1474701c6009071b6792ce21fce5bc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tsignature.append(this.expectedType.signature());", "+\t\tif (this.expectedType instanceof IntersectionCastTypeBinding) {", "+\t\t\tsignature.append(((IntersectionCastTypeBinding)this.expectedType).getSAMType(currentScope).signature());", "+\t\t} else {", "+\t\t\tsignature.append(this.expectedType.signature());", "+\t\t}"]}], "num": 71252}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c85df883ac605112615dddc99671ffe9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a03564e88147265aed52de32fcd86d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "6f8a1f468102cc95fa52d9b7fdbd93df1eea7638", "commitAfterChange": "e4d4ff5013f9df9fd57cdef7bafc039c1cd3f062", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tHashSet externalPaths = new HashSet();", "-\t\t\t\t\t\t\t\texternalPaths.add(entryPath);", "+\t\t\t\t\t\t\t\texternalFoldersManager.addFolder(entryPath, true);", "-\t\t\t", "-\t\t\tISchedulingRule rule = null;", "-\t\t\t\t// Use a schedule rule to avoid a race condition (https://bugs.eclipse.org/bugs/show_bug.cgi?id=369251)", "-\t\t\t\trule = ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(externalFoldersManager.getExternalFoldersProject());", "-\t\t\t\tJob.getJobManager().beginRule(rule, monitor);", "-\t\t\t\t", "-\t\t\t\tIterator externalPathIter = externalPaths.iterator();", "-\t\t\t\twhile (externalPathIter.hasNext()) {", "-\t\t\t\t\texternalFoldersManager.addFolder((IPath) externalPathIter.next(), true);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t} catch (JavaModelException jme) {", "+\t\t\t}", "+\t\t\tcatch(JavaModelException jme) {", "-\t\t\t} finally {", "-\t\t\t\tJob.getJobManager().endRule(rule);", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b70b55f4c66e109b909bf50ed9fe4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "f1f93a7d91e89cdeb0fa2ce3bdaa99ce3dc6f98d", "commitAfterChange": "ba9a2de3815926454983a937a48457fb91305171", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\tSearchPattern closestPattern = null;", "-\tint level = IMPOSSIBLE_MATCH;", "-\tfor (int i = 0, length = this.patterns.length; i < length; i++) {", "-\t\tint newLevel = this.patterns[i].matchLevel(reference, true);", "-\t\tif (newLevel > level) {", "-\t\t\tif (newLevel == ACCURATE_MATCH) {", "-\t\t\t\tthis.patterns[i].matchReportReference(reference, element, accuracy, locator);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tlevel = newLevel;", "-\t\t\tclosestPattern = this.patterns[i];", "-\t\t}", "-\t}", "+\tSearchPattern closestPattern = findClosestPattern(reference);"]}], "num": 66635}
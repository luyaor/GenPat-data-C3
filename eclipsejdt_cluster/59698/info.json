{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2cf71f71d60d48f1fdb72da2707d623", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c54b10db1ff7c6a48aa64b5a14250352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariablePattern.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor)", "signatureAfterChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor)", "diff": ["-\tif (scope.encloses(path))", "-\t\tif (!requestor.acceptIndexMatch(path, this, participant)) ", "+", "+\tif (scope instanceof JavaSearchScope) {", "+\t\tJavaSearchScope javaSearchScope = (JavaSearchScope) scope;", "+\t\t// Get document path access restriction from java search scope", "+\t\t// Note that requestor has to verify if needed whether the document violates the access restriction or not", "+\t\tAccessRestriction access = javaSearchScope.getAccessRestriction(path);", "+\t\tif (!JavaSearchScope.UNINIT_RESTRICTION.equals(access)) { // scope encloses the path", "+\t\t\tif (!requestor.acceptIndexMatch(path, this, participant, access)) ", "+\t\t\t\tthrow new OperationCanceledException();", "+\t\t}", "+\t} else if (scope.encloses(path)) {", "+\t\tif (!requestor.acceptIndexMatch(path, this, participant, null)) ", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e49d4d832053610bc37a69a1e3a499e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/InternalSearchPattern.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tvoid acceptMatch(String documentName, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "signatureAfterChange": " \t \tvoid acceptMatch(String documentName, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "diff": ["-\t\tif (scope.encloses(documentPath))", "-\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant)) ", "+", "+\t\tif (scope instanceof JavaSearchScope) {", "+\t\t\tJavaSearchScope javaSearchScope = (JavaSearchScope) scope;", "+\t\t\t// Get document path access restriction from java search scope", "+\t\t\t// Note that requestor has to verify if needed whether the document violates the access restriction or not", "+\t\t\tAccessRestriction access = javaSearchScope.getAccessRestriction(documentPath);", "+\t\t\tif (JavaSearchScope.UNINIT_RESTRICTION != access) { // scope encloses the document path", "+\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant, access)) ", "+\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t}", "+\t\t} else if (scope.encloses(documentPath)) {", "+\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant, null)) ", "+\t\t}"]}], "num": 59698}
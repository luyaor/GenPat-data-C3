{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70c9021bb896050d3a4f94968e82d58d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c1e34ac4f505e33ddbaf3ce03bff667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "5bad0f0933acdc658d4e40a7d9becfd8568dd235", "commitAfterChange": "4316c760d5aabce67e5ab83fef96d7ef0cdbee57", "methodNumberBeforeChange": 539, "methodNumberAfterChange": 539, "signatureBeforeChange": "  public void cannotReferToAbstractMethod(ReferenceExpression expression, MethodBinding method)", "signatureAfterChange": "  public void incompatibleReturnType(ReferenceExpression expression, MethodBinding method, TypeBinding returnType)", "diff": ["-public void cannotReferToAbstractMethod(ReferenceExpression expression, MethodBinding method) {", "-\tTypeBinding receiverType = method.declaringClass;", "-\tchar [] selector = method.selector;", "+public void incompatibleReturnType(ReferenceExpression expression, MethodBinding method, TypeBinding returnType) {", "-\t", "-\tint id = IProblem.UndefinedMethod;", "-\tthis.handle(", "-\t\tid,", "-\t\tnew String[] { new String(receiverType.readableName()), new String(selector), buffer.toString() },", "-\t\tnew String[] { new String(receiverType.shortReadableName()), new String(selector), shortBuffer.toString() },", "-\t\texpression.sourceStart,", "-\t\texpression.sourceEnd);", "+\tString selector = new String(method.selector);", "+\tthis.handle(IProblem.IncompatibleMethodReference,", "+\t\t\tnew String[] { selector, buffer.toString(), new String(method.declaringClass.readableName()), new String(method.returnType.readableName()), new String(returnType.readableName())},", "+\t\t\tnew String[] { selector, shortBuffer.toString(), new String(method.declaringClass.shortReadableName()), new String(method.returnType.shortReadableName()), new String(returnType.shortReadableName())},", "+\t\t\texpression.sourceStart,", "+\t\t\texpression.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d462539dbc6e3813e2c6dea43d535546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f13b3f138b2707e2ed0706cfa2c6808559abaedc", "commitAfterChange": "3f8d782744788869617c5d4942a7906c3f97360f", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void needToEmulateMethodAccess( \tMethodBinding method,  \tASTNode location)", "signatureAfterChange": " public void needToEmulateMethodAccess( \tMethodBinding method,  \tASTNode location)", "diff": ["-\tif (method.isConstructor())", "+\tif (method.isConstructor()) {", "+\t\tif (method.declaringClass.isEnum())", "+\t\t\treturn; // tolerate emulation for enum constructors, which can only be made private", "-\telse", "-\t\tthis.handle(", "-\t\t\tIProblem.NeedToEmulateMethodAccess, ", "-\t\t\tnew String[] {", "-\t\t\t\tnew String(method.declaringClass.readableName()), ", "-\t\t\t\tnew String(method.selector), ", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)", "-\t\t\t }, ", "-\t\t\tnew String[] {", "-\t\t\t\tnew String(method.declaringClass.shortReadableName()), ", "-\t\t\t\tnew String(method.selector), ", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)", "-\t\t\t }, ", "-\t\t\tlocation.sourceStart, ", "-\t\t\tlocation.sourceEnd); ", "+\t\treturn;", "+\t}", "+\tthis.handle(", "+\t\tIProblem.NeedToEmulateMethodAccess, ", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.readableName()), ", "+\t\t\tnew String(method.selector), ", "+\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)", "+\t\t }, ", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.shortReadableName()), ", "+\t\t\tnew String(method.selector), ", "+\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)", "+\t\t }, ", "+\t\tlocation.sourceStart, ", "+\t\tlocation.sourceEnd); "]}], "num": 71965}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1478ad9e26ea10a1a71c7bb8b198206", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f825530981ac5fa7fc42f1bf986afbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\tpublic void updateProjectReferencesIfNecessary() throws JavaModelException", "signatureAfterChange": "  \tpublic synchronized ClasspathValidation[] removeClasspathValidations()", "diff": ["-\t\t */", "-\t\tpublic void updateProjectReferencesIfNecessary() throws JavaModelException {", "-\t\t\t", "-\t\t\tString[] oldRequired = this.oldResolvedPath == null ? CharOperation.NO_STRINGS : this.project.projectPrerequisites(this.oldResolvedPath);", "-\t", "-\t\t\tif (this.newResolvedPath == null) {", "-\t\t\t\tif (this.newRawPath == null)", "-\t\t\t\t\tthis.newRawPath = this.project.getRawClasspath(true/*create markers*/, false/*don't log problems*/);", "-\t\t\t\tthis.newResolvedPath = ", "-\t\t\t\t\tthis.project.getResolvedClasspath(", "-\t\t\t\t\t\tthis.newRawPath, ", "-\t\t\t\t\t\tnull/*no output*/, ", "-\t\t\t\t\t\ttrue/*ignore unresolved entry*/, ", "-\t\t\t\t\t\ttrue/*generate marker on error*/, ", "-\t\t\t\t\t\tnull/*no reverse map*/);", "-\t\t\t}", "-\t\t\tString[] newRequired = this.project.projectPrerequisites(this.newResolvedPath);", "-\t\t\ttry {", "-\t\t\t\tIProject projectResource = this.project.getProject();", "-\t\t\t\tIProjectDescription description = projectResource.getDescription();", "-\t\t\t\t ", "-\t\t\t\tIProject[] projectReferences = description.getDynamicReferences();", "-\t\t\t\t", "-\t\t\t\tHashSet oldReferences = new HashSet(projectReferences.length);", "-\t\t\t\tfor (int i = 0; i < projectReferences.length; i++){", "-\t\t\t\t\tString projectName = projectReferences[i].getName();", "-\t\t\t\t\toldReferences.add(projectName);", "-\t\t\t\t}", "-\t\t\t\tHashSet newReferences = (HashSet)oldReferences.clone();", "-\t\t", "-\t\t\t\tfor (int i = 0; i < oldRequired.length; i++){", "-\t\t\t\t\tString projectName = oldRequired[i];", "-\t\t\t\t\tnewReferences.remove(projectName);", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < newRequired.length; i++){", "-\t\t\t\t\tString projectName = newRequired[i];", "-\t\t\t\t\tnewReferences.add(projectName);", "-\t\t\t\t}", "-\t\t", "-\t\t\t\tIterator iter;", "-\t\t\t\tint newSize = newReferences.size();", "-\t\t\t\t", "-\t\t\t\tcheckIdentity: {", "-\t\t\t\t\tif (oldReferences.size() == newSize){", "-\t\t\t\t\t\titer = newReferences.iterator();", "-\t\t\t\t\t\twhile (iter.hasNext()){", "-\t\t\t\t\t\t\tif (!oldReferences.contains(iter.next())){", "-\t\t\t\t\t\t\t\tbreak checkIdentity;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tString[] requiredProjectNames = new String[newSize];", "-\t\t\t\tint index = 0;", "-\t\t\t\titer = newReferences.iterator();", "-\t\t\t\twhile (iter.hasNext()){", "-\t\t\t\t\trequiredProjectNames[index++] = (String)iter.next();", "-\t\t\t\t}", "-\t\t\t\tUtil.sort(requiredProjectNames); // ensure that if changed, the order is consistent", "-\t\t\t\t", "-\t\t\t\tIProject[] requiredProjectArray = new IProject[newSize];", "-\t\t\t\tIWorkspaceRoot wksRoot = projectResource.getWorkspace().getRoot();", "-\t\t\t\tfor (int i = 0; i < newSize; i++){", "-\t\t\t\t\trequiredProjectArray[i] = wksRoot.getProject(requiredProjectNames[i]);", "-\t\t\t\t}", "-\t\t\t\tdescription.setDynamicReferences(requiredProjectArray);", "-\t\t\t\tprojectResource.setDescription(description, null);", "-\t\t", "-\t\t\t} catch(CoreException e){", "-\t\t\t\tif (!ExternalJavaProject.EXTERNAL_PROJECT_NAME.equals(this.project.getElementName()))", "-\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t}", "-\t\t}", "+\tpublic synchronized ClasspathValidation[] removeClasspathValidations() {", "+\t    int length = this.classpathValidations.size();", "+\t    ClasspathValidation[]  validations = new ClasspathValidation[length];", "+\t    this.classpathValidations.values().toArray(validations);", "+\t    this.classpathValidations.clear();", "+\t    return validations;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f24616565b0118ba2e8e8bd220c2bd36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "05a3e6b542ee827cf511d126431eeeeff129c0c5", "commitAfterChange": "c203fa24cd19d35decddec98e524ad9aa8271741", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 505, "signatureBeforeChange": "  \tpublic void _test()", "signatureAfterChange": " \tpublic void test486()", "diff": ["-\tpublic void _test() {", "-\t\ttry {", "-\t\t\tchar[] contents = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(new File(\"D:/workspaces/eclipse/plugins/TestingOlivier/src/FormatterRegressionTests.java\"), null);", "-\t\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "-\t\t\tc.setSource(contents);", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) c.createAST(null);", "-\t\t\tList types = compilationUnit.types();", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) types.get(0);", "-\t\t\tMethodDeclaration[] methodDeclarations = typeDeclaration.getMethods();", "-\t\t\tint testCaseCounter = 229;", "-\t\t\tfor (int i = 0, max = methodDeclarations.length; i < max; i++) {", "-\t\t\t\tMethodDeclaration methodDeclaration = methodDeclarations[i];", "-\t\t\t\tfinal SimpleName methodName = methodDeclaration.getName();", "-\t\t\t\tif (methodName.getIdentifier().startsWith(\"test\")) {", "-\t\t\t\t\tBlock block = methodDeclaration.getBody();", "-\t\t\t\t\tList statements = block.statements();", "-\t\t\t\t\tStatement statement = (Statement) statements.get(0);", "-\t\t\t\t\tif (statement.getNodeType() == ASTNode.VARIABLE_DECLARATION_STATEMENT) {", "-\t\t\t\t\t\tVariableDeclarationStatement localDeclaration = (VariableDeclarationStatement) statement;", "-\t\t\t\t\t\tList fragments = localDeclaration.fragments();", "-\t\t\t\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\t\t\t\tif (fragment.getName().getIdentifier().equals(\"source\")) {", "-\t\t\t\t\t\t\tExpression expression = fragment.getInitializer();", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tswitch(expression.getNodeType()) {", "-\t\t\t\t\t\t\t\tcase ASTNode.INFIX_EXPRESSION :", "-\t\t\t\t\t\t\t\t\tInfixExpression expression2 = (InfixExpression) expression;", "-\t\t\t\t\t\t\t\t\tList extendedOperands = expression2.extendedOperands();", "-\t\t\t\t\t\t\t\t\tbuffer.append(getSource(expression2.getLeftOperand(), contents));", "-\t\t\t\t\t\t\t\t\tbuffer.append(getSource(expression2.getRightOperand(), contents));", "-\t\t\t\t\t\t\t\t\tfor (int j = 0, max2 = extendedOperands.size(); j < max2; j++) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getSource((Expression) extendedOperands.get(j), contents));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tcase ASTNode.STRING_LITERAL :", "-\t\t\t\t\t\t\t\t\tStringLiteral literal = (StringLiteral) expression;", "-\t\t\t\t\t\t\t\t\tbuffer.append(getSource(literal, contents));", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcreateTestCase(buffer.toString(), testCaseCounter++);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t}", "+\t */", "+\tpublic void test486() {", "+\t\tMap options = DefaultCodeFormatterConstants.getDefaultSettings();", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_BLOCK, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_SWITCH, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION, DefaultCodeFormatterConstants.NEXT_LINE);//$NON-NLS-1$", "+\t\tDefaultCodeFormatterOptions preferences = new DefaultCodeFormatterOptions(options);", "+\t\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);", "+\t\trunTest(codeFormatter, \"test486\", \"A.java\", CodeFormatter.K_COMPILATION_UNIT);//$NON-NLS-1$ //$NON-NLS-2$", "+\t}"]}], "num": 13049}
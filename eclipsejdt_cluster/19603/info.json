{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c5f3c6004145c118ba9378cba2bdce5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061313541a3c9c523e1ab0ed8111a52a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9a099ab7eaca6de468f171f604d52045eb064822", "commitAfterChange": "245938f53ddff468739c34085f55dc93baea5c7e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["+\t\tString previousClassName = CURRENT_CLASS_NAME;", "+\t\tif (isFirst()) {", "+\t\t\tIPath dir = new Path(Util.getOutputDirectory());", "+\t\t\tif (previousClassName != null) {", "+\t\t\t\t// Minimize resilient files by removing previous test class global output dir", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(previousClassName, \".\");", "+\t\t\t\tIPath previousDir = dir;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tpreviousDir = previousDir.append(tokenizer.nextToken());", "+\t\t\t\t}", "+\t\t\t\tUtil.rmdir(new File(previousDir.toOSString()));", "+\t\t\t}", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(CURRENT_CLASS_NAME, \".\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tdir = dir.append(tokenizer.nextToken());", "+\t\t\t}", "+\t\t\tOUTPUT_DIR =  dir.append(\"output\").toOSString();", "+\t\t\tSOURCE_DIRECTORY = dir.append(\"source\").toOSString();", "+\t\t\tJAVAC_OUTPUT_DIR = dir.append(\"javac\").toOSString();", "+\t\t}", "+", "-\t\t\tif (!getClass().getName().equals(CURRENT_CLASS_NAME)) {", "+\t\t\tif (isFirst()) {", "-\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\");", "-\t        // PREMATURE implement consistent error policy", "-\t        versionLogger.start();", "-\t        compileProcess.waitFor();", "+\t\t\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\");", "+\t\t\t        // PREMATURE implement consistent error policy", "+\t\t\t        versionLogger.start();", "+\t\t\t        compileProcess.waitFor();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b551a689426c67b3e69159ee9ee0b9ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "41073afde07bc165731dc0876951fb4352f46439", "commitAfterChange": "95ccf829fe70457c64a0e61794a7f1137ca9c9b0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["-\t\tString previousClassName = CURRENT_CLASS_NAME;", "-\t\tif (isFirst()) {", "-\t\t\tIPath dir = new Path(Util.getOutputDirectory());", "-\t\t\tif (previousClassName != null) {", "-\t\t\t\t// Minimize resilient files by removing previous test class global output dir", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(previousClassName, \".\");", "-\t\t\t\tIPath previousDir = dir;", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tpreviousDir = previousDir.append(tokenizer.nextToken());", "-\t\t\t\t}", "-\t\t\t\tUtil.rmdir(new File(previousDir.toOSString()));", "-\t\t\t}", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(CURRENT_CLASS_NAME, \".\");", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tdir = dir.append(tokenizer.nextToken());", "-\t\t\t}", "-\t\t\tOUTPUT_DIR =  dir.append(\"output\").toOSString();", "-\t\t\tSOURCE_DIRECTORY = dir.append(\"source\").toOSString();", "-\t\t\tJAVAC_OUTPUT_DIR = dir.append(\"javac\").toOSString();", "-\t\t}", "-"]}], "num": 19603}
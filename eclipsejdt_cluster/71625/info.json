{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5923efb3aa8db2b7d157b8ece72db39c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c676fe8d8c3163da36e897dc87b600b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ac184a82eec2774ea709d467355e4ac84de0c7be", "commitAfterChange": "38e8034dd54c8ecc2dd76934beb4729edff6d0e3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\t\t\t\t\tassumeNotNull(prefix+\"\"+name+\" binding was not found!\", name.resolveBinding());", "+\t\t\t\t\t\tassumeNotNull(prefix+\"\"+name+\" binding was not foundfound in \"+fragment, name.resolveBinding());", "-\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found!\",methNameBinding);", "+\t\t\t\t\t\tassumeNotNull(prefix+\"\"+methodName+\" binding was not found in \"+fragment, methNameBinding);", "-\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "-\t\t\t\t\t\t\tif (param.getType().isSimpleType()) {", "-\t\t\t\t\t\t\t\tverifyNameBindings(((SimpleType)param.getType()).getName());", "+\t\t\t\t\t\t\tType type = param.getType();", "+\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+type+\" binding was not found in \"+fragment, type.resolveBinding());", "+\t\t\t\t\t\t\tif (type.isSimpleType()) {", "+\t\t\t\t\t\t\t\tverifyNameBindings(((SimpleType)type).getName());", "+\t\t\t\t\t\t\t} else if (type.isArrayType()) {", "+\t\t\t\t\t\t\t\tType elementType = ((ArrayType) param.getType()).getElementType();", "+\t\t\t\t\t\t\t\tassumeNotNull(prefix+\"\"+elementType+\" binding was not found in \"+fragment, elementType.resolveBinding());", "+\t\t\t\t\t\t\t\tif (elementType.isSimpleType()) {", "+\t\t\t\t\t\t\t\t\tverifyNameBindings(((SimpleType)elementType).getName());", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42fa04dd8ce8a481a92d54de8b154911", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/valueconversion/ValueConversionProcessor.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate void assertValueTypeMatch(final String name, final Object value, final Class expectedType)", "signatureAfterChange": " \t \tprivate void assertValueTypeMatch( \t\t\tfinal String name,  \t\t\tfinal Object actualValue,  \t\t\tfinal Class expectedType, \t\t\tfinal Object expectedValue)", "diff": ["-\t", "-\tprivate void assertValueTypeMatch(final String name, final Object value, final Class expectedType)", "-\t{", "-\t\tTestCase.assertEquals(", "-\t\t\t\t\"value type mismatch for member \" + name,  //$NON-NLS-1$", "-\t\t\t\texpectedType, ", "-\t\t\t\tvalue.getClass());", "-\t}", "+\t", "+\tprivate void assertValueTypeMatch(", "+\t\t\tfinal String name, ", "+\t\t\tfinal Object actualValue, ", "+\t\t\tfinal Class expectedType,", "+\t\t\tfinal Object expectedValue)", "+\t{", "+\t\tif( actualValue != null && expectedType != actualValue.getClass() ){", "+\t\t\tfinal Messager msgr = _env.getMessager(); ", "+\t\t\tmsgr.printError(\"type mismatch for memeber \" + name + ", "+\t\t\t\t\t\" expected \" + expectedType.getName() + \" but got \" + actualValue.getClass().getName());", "+\t\t}", "+\t\telse if( !expectedValue.equals(actualValue) ){", "+\t\t\tfinal Messager msgr = _env.getMessager(); ", "+\t\t\tmsgr.printError(\"value mismatch for memeber \" + name + ", "+\t\t\t\t\t\" expected \" + expectedValue + \" but got \" + actualValue);", "+\t\t}", "+\t}"]}], "num": 71625}
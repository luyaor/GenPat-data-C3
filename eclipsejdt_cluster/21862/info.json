{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e411f6841151683be7c2c1d15860dfca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f21b0f4b761406ae63168a763e73307", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "126dd6025c8f23861069be98f78a4771959a405b", "commitAfterChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "signatureAfterChange": " \tpublic boolean performConcurrentJob(IJob searchJob, int waitingPolicy, IProgressMonitor progress)", "diff": ["-\t\t\tint concurrentJobWork = 100;", "-\t\t\tif (progress != null)", "-\t\t\t\tprogress.beginTask(\"\", concurrentJobWork); //$NON-NLS-1$", "+\t\t\tSubMonitor subMonitor = SubMonitor.convert(progress);", "-\t\t\t\t\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\t\t\t\t\tstatus = searchJob.execute(subMonitor);", "-\t\t\t\t\t\tIProgressMonitor subProgress = null;", "+\t\t\t\t\t\tint totalWork = 1000;", "+\t\t\t\t\t\tSubMonitor subProgress = subMonitor.setWorkRemaining(10).split(8).setWorkRemaining(totalWork);", "+\t\t\t\t\t\t// use local variable to avoid potential NPE (see bug 20435 NPE when searching java method", "+\t\t\t\t\t\t// and bug 42760 NullPointerException in JobManager when searching)", "+\t\t\t\t\t\tThread t = this.processingThread;", "+\t\t\t\t\t\tint originalPriority = t == null ? -1 : t.getPriority();", "-\t\t\t\t\t\t\tint totalWork = 1000;", "-\t\t\t\t\t\t\tif (progress != null) {", "-\t\t\t\t\t\t\t\tsubProgress = new SubProgressMonitor(progress, concurrentJobWork * 8 / 10);", "-\t\t\t\t\t\t\t\tsubProgress.beginTask(\"\", totalWork); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tconcurrentJobWork = concurrentJobWork * 2 / 10;", "+\t\t\t\t\t\t\tif (t != null)", "+\t\t\t\t\t\t\t\tt.setPriority(Thread.currentThread().getPriority());", "+\t\t\t\t\t\t\tsynchronized(this) {", "+\t\t\t\t\t\t\t\tthis.awaitingClients++;", "-\t\t\t\t\t\t\t// use local variable to avoid potential NPE (see bug 20435 NPE when searching java method", "-\t\t\t\t\t\t\t// and bug 42760 NullPointerException in JobManager when searching)", "-\t\t\t\t\t\t\tThread t = this.processingThread;", "-\t\t\t\t\t\t\tint originalPriority = t == null ? -1 : t.getPriority();", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tif (t != null)", "-\t\t\t\t\t\t\t\t\tt.setPriority(Thread.currentThread().getPriority());", "-\t\t\t\t\t\t\t\tsynchronized(this) {", "-\t\t\t\t\t\t\t\t\tthis.awaitingClients++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tIJob previousJob = null;", "-\t\t\t\t\t\t\t\tint awaitingJobsCount;", "-\t\t\t\t\t\t\t\tint lastJobsCount = totalWork;", "-\t\t\t\t\t\t\t\tfloat lastWorked = 0;", "-\t\t\t\t\t\t\t\tfloat totalWorked = 0;", "-\t\t\t\t\t\t\t\twhile ((awaitingJobsCount = awaitingJobsCount()) > 0) {", "-\t\t\t\t\t\t\t\t\tif ((subProgress != null && subProgress.isCanceled())", "-\t\t\t\t\t\t\t\t\t\t\t|| this.processingThread == null)", "-\t\t\t\t\t\t\t\t\t\tthrow new OperationCanceledException();", "-\t\t\t\t\t\t\t\t\tIJob currentJob = currentJob();", "-\t\t\t\t\t\t\t\t\t// currentJob can be null when jobs have been added to the queue but job manager is not enabled", "-\t\t\t\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob) {", "-\t\t\t\t\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\t\t\t\t\tUtil.verbose(\"-> NOT READY - waiting until ready - \" + searchJob);//$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\tif (subProgress != null) {", "-\t\t\t\t\t\t\t\t\t\t\tString indexing = Messages.bind(Messages.jobmanager_filesToIndex, currentJob.getJobFamily(), Integer.toString(awaitingJobsCount));", "-\t\t\t\t\t\t\t\t\t\t\tsubProgress.subTask(indexing);", "-\t\t\t\t\t\t\t\t\t\t\t// ratio of the amount of work relative to the total work", "-\t\t\t\t\t\t\t\t\t\t\tfloat ratio = awaitingJobsCount < totalWork ? 1 : ((float) totalWork) / awaitingJobsCount;", "-\t\t\t\t\t\t\t\t\t\t\tif (lastJobsCount > awaitingJobsCount) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttotalWorked += (lastJobsCount - awaitingJobsCount) * ratio;", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t// more jobs were added, just increment by the ratio", "-\t\t\t\t\t\t\t\t\t\t\t\ttotalWorked += ratio;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (totalWorked - lastWorked >= 1) {", "-\t\t\t\t\t\t\t\t\t\t\t\tsubProgress.worked((int) (totalWorked - lastWorked));", "-\t\t\t\t\t\t\t\t\t\t\t\tlastWorked = totalWorked;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tlastJobsCount = awaitingJobsCount;", "+\t\t\t\t\t\t\tIJob previousJob = null;", "+\t\t\t\t\t\t\tint awaitingJobsCount;", "+\t\t\t\t\t\t\tint lastJobsCount = totalWork;", "+\t\t\t\t\t\t\tfloat lastWorked = 0;", "+\t\t\t\t\t\t\tfloat totalWorked = 0;", "+\t\t\t\t\t\t\twhile ((awaitingJobsCount = awaitingJobsCount()) > 0) {", "+\t\t\t\t\t\t\t\tif ((subProgress != null && subProgress.isCanceled())", "+\t\t\t\t\t\t\t\t\t\t|| this.processingThread == null)", "+\t\t\t\t\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t\t\t\t\t\tIJob currentJob = currentJob();", "+\t\t\t\t\t\t\t\t// currentJob can be null when jobs have been added to the queue but job manager is not enabled", "+\t\t\t\t\t\t\t\tif (currentJob != null && currentJob != previousJob) {", "+\t\t\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\t\t\tUtil.verbose(\"-> NOT READY - waiting until ready - \" + searchJob);//$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tif (subProgress != null) {", "+\t\t\t\t\t\t\t\t\t\tString indexing = Messages.bind(Messages.jobmanager_filesToIndex, currentJob.getJobFamily(), Integer.toString(awaitingJobsCount));", "+\t\t\t\t\t\t\t\t\t\tsubProgress.subTask(indexing);", "+\t\t\t\t\t\t\t\t\t\t// ratio of the amount of work relative to the total work", "+\t\t\t\t\t\t\t\t\t\tfloat ratio = awaitingJobsCount < totalWork ? 1 : ((float) totalWork) / awaitingJobsCount;", "+\t\t\t\t\t\t\t\t\t\tif (lastJobsCount > awaitingJobsCount) {", "+\t\t\t\t\t\t\t\t\t\t\ttotalWorked += (lastJobsCount - awaitingJobsCount) * ratio;", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t// more jobs were added, just increment by the ratio", "+\t\t\t\t\t\t\t\t\t\t\ttotalWorked += ratio;", "-\t\t\t\t\t\t\t\t\t\tpreviousJob = currentJob;", "+\t\t\t\t\t\t\t\t\t\tif (totalWorked - lastWorked >= 1) {", "+\t\t\t\t\t\t\t\t\t\t\tsubProgress.worked((int) (totalWorked - lastWorked));", "+\t\t\t\t\t\t\t\t\t\t\tlastWorked = totalWorked;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tlastJobsCount = awaitingJobsCount;", "-\t\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\t\t\t\t\t\tUtil.verbose(\"-> GOING TO SLEEP - \" + searchJob);//$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\tThread.sleep(50);", "-\t\t\t\t\t\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\t\t\t\t\t\t// ignore", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpreviousJob = currentJob;", "-\t\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\t\tsynchronized(this) {", "-\t\t\t\t\t\t\t\t\tthis.awaitingClients--;", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\t\t\tUtil.verbose(\"-> GOING TO SLEEP - \" + searchJob);//$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tThread.sleep(50);", "+\t\t\t\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t\t\t\t// ignore", "-\t\t\t\t\t\t\t\tif (t != null && originalPriority > -1 && t.isAlive())", "-\t\t\t\t\t\t\t\t\tt.setPriority(originalPriority);", "-\t\t\t\t\t\t\tif (subProgress != null)", "-\t\t\t\t\t\t\t\tsubProgress.done();", "+\t\t\t\t\t\t\tsynchronized(this) {", "+\t\t\t\t\t\t\t\tthis.awaitingClients--;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (t != null && originalPriority > -1 && t.isAlive())", "+\t\t\t\t\t\t\t\tt.setPriority(originalPriority);", "-\t\t\tstatus = searchJob.execute(progress == null ? null : new SubProgressMonitor(progress, concurrentJobWork));", "+\t\t\tstatus = searchJob.execute(subMonitor);", "-\t\t\tif (progress != null)", "-\t\t\t\tprogress.done();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94a40ea245d17146d7855421dd9c95bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int literalIndex(FieldBinding aFieldBinding)", "signatureAfterChange": " public int literalIndex(FieldBinding aFieldBinding)", "diff": ["-\tint nameAndTypeIndex;", "-\tint classIndex;", "-\tint indexWellKnownField;", "-\tif ((indexWellKnownField = indexOfWellKnownFields(aFieldBinding)) == -1) {", "-\t\tif ((index = fieldCache.get(aFieldBinding)) < 0) {", "-\t\t\t// The entry doesn't exit yet", "-\t\t\tclassIndex = literalIndex(aFieldBinding.declaringClass);", "-\t\t\tnameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "-\t\t\tindex = fieldCache.put(aFieldBinding, currentIndex++);", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(FieldRefTag);", "-\t\t\twriteU2(classIndex);", "-\t\t\twriteU2(nameAndTypeIndex);", "+\tif ((index = getFromCache(aFieldBinding)) < 0) {", "+\t\t// The entry doesn't exit yet", "+\t\tint classIndex = literalIndexForType(aFieldBinding.declaringClass.constantPoolName());", "+\t\tint nameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "+\t\tindex = putInCache(aFieldBinding, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t} else {", "-\t\tif ((index = wellKnownFields[indexWellKnownField]) == 0) {", "-\t\t\t// that field need to be inserted", "-\t\t\tclassIndex = literalIndex(aFieldBinding.declaringClass);", "-\t\t\tnameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "-\t\t\tindex = wellKnownFields[indexWellKnownField] = currentIndex++;", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(FieldRefTag);", "-\t\t\twriteU2(classIndex);", "-\t\t\twriteU2(nameAndTypeIndex);", "-\t\t}", "+\t\twriteU1(FieldRefTag);", "+\t\twriteU2(classIndex);", "+\t\twriteU2(nameAndTypeIndex);"]}], "num": 21862}
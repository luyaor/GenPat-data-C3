{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36ff7f4e30da29060769cad99aa3a0a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833d4b993ed349e536b36525270792dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "de08ae3ac42ace8070739ebb7715adc6c4ed1304", "commitAfterChange": "a74cc2e7acd1e0aec09bded5c981fd784a55b04c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic SourceMapper(IPath sourcePath, String rootPath, Map options)", "signatureAfterChange": " \tpublic SourceMapper(IPath sourcePath, String rootPath, Map options, String encoding)", "diff": ["-\tpublic SourceMapper(IPath sourcePath, String rootPath, Map options) {", "+\tpublic SourceMapper(IPath sourcePath, String rootPath, Map options, String encoding) {", "+\t\tthis.encoding = encoding;", "-\t\t\tthis.encoding = ResourcesPlugin.getWorkspace().getRoot().getDefaultCharset();", "+\t\t\tthis.defaultEncoding = ResourcesPlugin.getWorkspace().getRoot().getDefaultCharset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc36aa1a2b6086d7dbd9e364d4d4b36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ReconcileEnv.java", "commitBeforeChange": "d6a1ffedf077f274f1f4a0cb05ad0efdc6b89131", "commitAfterChange": "4055f343b4ceab738f8724cf85d9a355cc0e3f77", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate ReconcileEnv( \t\t\tCompilationUnit astCompilationUnit, \t\t    IFile file, \t\t    IJavaProject javaProj)", "signatureAfterChange": " \t \tprivate ReconcileEnv( \t\t\tICompilationUnit workingCopy, \t\t    IFile file, \t\t    IJavaProject javaProj)", "diff": ["-\t\t\tCompilationUnit astCompilationUnit,", "+\t\t\tICompilationUnit workingCopy,", "-\t\tsuper(astCompilationUnit, file, javaProj, Phase.RECONCILE);", "+\t\t// See bug 133744: calling ReconcileContext.getAST3() here would result in ", "+\t\t// a typesystem whose types are not comparable with the types we get after ", "+\t\t// openPipeline().  Instead, we start the env with an EMPTY_AST_UNIT, and ", "+\t\t// replace it with the real thing inside the openPipeline() ASTRequestor's ", "+\t\t// acceptAST() callback.", "+\t\tsuper(EMPTY_AST_UNIT, file, javaProj, Phase.RECONCILE);", "+\t\t_workingCopy = workingCopy;"]}], "num": 12334}
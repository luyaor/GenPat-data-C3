{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d287aac8356d439460c551f7d33e2c3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d910d1249cd737d97680053a701fe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["+\t\tFieldBinding field;", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\tif (!fieldBinding.isStatic()) {", "+\t\t\tfield = (FieldBinding) this.binding;", "+\t\t\tif (!field.isStatic()) {", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, field);", "-\t\t\t\t\t\t&& fieldBinding.declaringClass != actualReceiverType) {", "-\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "+\t\t\t\t\t\t&& field.declaringClass != actualReceiverType) {", "+\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, field);", "-\t\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "-\t\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "+\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "+\t\t\t\tscope.problemReporter().deprecatedField(field, this);", "+\t\t} else {", "+\t\t\tfield = null;", "-\t\tthis.constant =", "-\t\t\t((bits & FIELD) != 0)", "+\t\tthis.constant = field != null", "+\t\t\t// set generic cast of for previous field (if any)", "+\t\t\tif (field != null) {", "+\t\t\t\tFieldBinding originalBinding = field.original();", "+\t\t\t\tif (originalBinding != field) {", "+\t\t\t\t    // extra cast needed if method return type has type variable", "+\t\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && type.id != T_Object) {", "+\t\t\t\t    \tsetGenericCast(index-1,originalBinding.type.genericCast(type));", "+\t\t\t\t    }", "+\t\t\t\t} \t", "+\t\t\t}", "-\t\t\tFieldBinding field = scope.getField(type, token, this);", "+\t\t\tfield = scope.getField(type, token, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f45d6dd1a01446b5952ce4502652a2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\tif (!((FieldBinding) binding).isStatic()) {", "+\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\t\t\tif (!fieldBinding.isStatic()) {", "-\t\t\t\tif (indexOfFirstFieldBinding == 1) {", "-\t\t\t\t\t//the field is the first token of the qualified reference....", "-\t\t\t\t\tif (scope.methodScope().isStatic) {", "-\t\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(", "-\t\t\t\t\t\t\tthis,", "-\t\t\t\t\t\t\t(FieldBinding) binding);", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t} else { //accessing to a field using a type as \"receiver\" is allowed only with static field\t", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(", "-\t\t\t\t\t\tthis,", "-\t\t\t\t\t\t(FieldBinding) binding);", "+\t\t\t\tif (indexOfFirstFieldBinding > 1  //accessing to a field using a type as \"receiver\" is allowed only with static field", "+\t\t\t\t\t\t || scope.methodScope().isStatic) { \t// the field is the first token of the qualified reference....", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\t\t }", "+\t\t\t} else {", "+\t\t\t\t// indirect static reference ?", "+\t\t\t\tif (indexOfFirstFieldBinding > 1 ", "+\t\t\t\t\t\t&& fieldBinding.declaringClass != actualReceiverType) {", "+\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "-\t\t\tif (isFieldUseDeprecated((FieldBinding) binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "-\t\t\t\tscope.problemReporter().deprecatedField((FieldBinding) binding, this);", "+\t\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "+\t\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "-\t\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && index+1 == length))", "+\t\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && index+1 == length)) {", "+\t\t\t\t}", "-\t\t\t\ttype = field.type;", "-\t\t\t\tindex++;", "-\t\t\t\t", "-\t\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, field);", "+\t\t\t\t\tscope.problemReporter().nonStaticAccessToStaticField(this, field);", "+\t\t\t\t\t// indirect static reference ?", "+\t\t\t\t\tif (field.declaringClass != type) {", "+\t\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, field);", "+\t\t\t\t\t}", "-\t\t\t\t", "+\t\t\t\ttype = field.type;", "+\t\t\t\tindex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7ce1da36a01cbafc5f1c75049d18f16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "7cc5105214055493937549b61fac95d343064ee5", "commitAfterChange": "7568a4350d418633b0b504fd95408219cea387db", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\tFieldBinding field;", "-\tif ((this.bits & Binding.FIELD) != 0) {", "-\t\tfield = (FieldBinding) this.binding;", "-\t\tif (!field.isStatic()) {", "-\t\t\t//must check for the static status....", "-\t\t\tif (this.indexOfFirstFieldBinding > 1  //accessing to a field using a type as \"receiver\" is allowed only with static field", "-\t\t\t\t\t || scope.methodScope().isStatic) { \t// the field is the first token of the qualified reference....", "-\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, field);", "-\t\t\t\treturn null;", "-\t\t\t }", "-\t\t} else if (this.indexOfFirstFieldBinding > 1", "-\t\t\t\t\t&& field.declaringClass != this.actualReceiverType", "-\t\t\t\t\t&& field.declaringClass.canBeSeenBy(scope)) {", "-\t\t\tscope.problemReporter().indirectAccessToStaticField(this, field);", "-\t\t}", "-\t\t// only last field is actually a write access if any", "-\t\tif (isFieldUseDeprecated(field, scope, (this.bits & ASTNode.IsStrictlyAssigned) != 0 && this.indexOfFirstFieldBinding == length))", "-\t\t\tscope.problemReporter().deprecatedField(field, this);", "-\t} else {", "-\t\tfield = null;", "-\t}", "+\tFieldBinding field = ((this.bits & Binding.FIELD) != 0) ? (FieldBinding) this.binding : null;", "-\t\t\t\t// check if accessing enum static field in initializer", "-\t\t\t\tReferenceBinding declaringClass = field.declaringClass;", "+\t\t\t\tReferenceBinding declaringClass = field.original().declaringClass;", "+\t\t\t\t\tif ((this.bits & ASTNode.IsStrictlyAssigned) == 0", "+\t\t\t\t\t\t\t&& sourceType == declaringClass", "+\t\t\t\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t\t\t\t\t&& field.id >= methodScope.lastVisibleFieldID", "+\t\t\t\t\t\t\t&& (!field.isStatic() || methodScope.isStatic)) {", "+\t\t\t\t\t\tscope.problemReporter().forwardReference(this, index, field);", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t// check if accessing enum static field in initializer"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb3cbcd5ebc25fcfe7574df485892f0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);", "-\t\tif (!binding.isValidBinding()) {", "+\t\tFieldBinding fieldBinding = this.codegenBinding = this.binding = scope.getField(this.receiverType, token, this);", "+\t\tif (!fieldBinding.isValidBinding()) {", "-\t\t\tReferenceBinding match = ((ReferenceBinding)receiverErasure).findSuperTypeErasingTo((ReferenceBinding)this.binding.declaringClass.erasure());", "+\t\t\tReferenceBinding match = ((ReferenceBinding)receiverErasure).findSuperTypeErasingTo((ReferenceBinding)fieldBinding.declaringClass.erasure());", "-\t\t\t\tthis.receiverType = this.binding.declaringClass; // handle indirect inheritance thru variable secondary bound", "+\t\t\t\tthis.receiverType = fieldBinding.declaringClass; // handle indirect inheritance thru variable secondary bound", "-\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "-\t\t\tscope.problemReporter().deprecatedField(binding, this);", "+\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0)) {", "+\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "-\t\tconstant = FieldReference.getConstantFor(binding, this, isImplicitThisRcv, scope);", "+\t\tconstant = FieldReference.getConstantFor(fieldBinding, this, isImplicitThisRcv, scope);", "-\t\tif (binding.isStatic()) {", "+\t\tif (fieldBinding.isStatic()) {", "-\t\t\t\tscope.problemReporter().nonStaticAccessToStaticField(this, binding);", "+\t\t\t\tscope.problemReporter().nonStaticAccessToStaticField(this, fieldBinding);", "-\t\t\tif (!isImplicitThisRcv && binding.declaringClass != receiverType) {", "-\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, binding);", "+\t\t\tif (!isImplicitThisRcv && fieldBinding.declaringClass != receiverType) {", "+\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "-\t\treturn this.resolvedType = binding.type;", "+\t\t// perform capture conversion if read access", "+\t\treturn this.resolvedType = ", "+\t\t\t(((this.bits & IsStrictlyAssignedMASK) == 0) ", "+\t\t\t\t? fieldBinding.type.capture()", "+\t\t\t\t: fieldBinding.type);"]}], "num": 10493}
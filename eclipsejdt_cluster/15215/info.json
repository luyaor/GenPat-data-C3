{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "145614575cdc339ba2df81095223045e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14d0c74e55952b2182c68dcbea07318e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocQualifiedTypeReference.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\tthis.constant = NotAConstant;", "-\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "-\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "+\t\tconstant = NotAConstant;", "+\t\tif (resolvedType != null) // is a shared type reference which was already resolved", "+\t\t\treturn resolvedType.isValidBinding() ? resolvedType : null; // already reported error", "-\t\tthis.resolvedType = getTypeBinding(scope);", "-\t\tif (!this.resolvedType.isValidBinding()) {", "-\t\t\tBinding binding = scope.getTypeOrPackage(this.tokens);", "+\t\tresolvedType = getTypeBinding(scope);", "+\t\tif (!resolvedType.isValidBinding()) {", "+\t\t\tBinding binding = scope.getTypeOrPackage(tokens);", "-\t\t\t\tthis.packageBinding = (PackageBinding) binding;", "+\t\t\t\tpackageBinding = (PackageBinding) binding;", "-\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "+\t\tif (isTypeUseDeprecated(resolvedType, scope))", "-\t\treturn this.resolvedType = scope.convertToRawType(this.resolvedType);", "+\t\tif (resolvedType instanceof ParameterizedTypeBinding) {", "+\t\t\tresolvedType = ((ParameterizedTypeBinding)resolvedType).type;", "+\t\t}", "+\t\treturn resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3beac7b713dfcb91bedb22082e419216", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 290, "methodNumberAfterChange": 291, "signatureBeforeChange": "  protected void consumeTypeElidedLambdaParameter(boolean parenthesized)", "signatureAfterChange": "  protected void consumeTypeElidedLambdaParameter(boolean parenthesized)", "diff": ["-\t", "-\tthis.identifierLengthPtr--;", "-\tchar[] identifierName = this.identifierStack[this.identifierPtr];", "-\tlong namePositions = this.identifierPositionStack[this.identifierPtr--];", "-\tArgument arg =", "-\t\tnew Argument(", "-\t\t\tidentifierName,", "-\t\t\tnamePositions,", "-\t\t\tnull, // elided type", "-\t\t\tClassFileConstants.AccDefault,", "-\t\t\ttrue);", "-\targ.declarationSourceStart = (int) (namePositions >>> 32);", "+\tArgument arg = typeElidedArgument();", "-\tpushOnAstStack(arg);", "+\t\tLambdaExpression lambda;", "+\t\tpushOnAstStack(lambda = new LambdaExpression(this.compilationUnit.compilationResult, this instanceof AssistParser));", "+\t\tlambda.sourceStart = arg.declarationSourceStart;", "+\tpushOnAstStack(arg);"]}], "num": 15215}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "909277c1007e6c747b715a926ccfbbc6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c3dbc5cd806da358a848c0d8fc2b85c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "e57673ef79fc8a78dd18b62f70acff1a24c8bce9", "commitAfterChange": "eb6fea9292986a112a3d78c8e49c94f6ad299981", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["-\t\t\t\t\tint start = line == firstLineNumber", "+\t\t\t\t\tint lineStart = line == firstLineNumber", "-\t\t\t\t\tthis.index = start;", "+\t\t\t\t\tthis.index = lineStart;", "-\t\t\t\t\twhile (this.index < this.lineEnd) {", "-\t\t\t\t\t\tchar nextCharacter = readChar(); // consider unicodes", "-\t\t\t\t\t\tif  (nextCharacter == '@') {", "-\t\t\t\t\t\t\tif ((readChar() == 'd') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'p') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'r') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'c') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'a') &&", "-\t\t\t\t\t\t\t\t(readChar() == 't') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t\t(readChar() == 'd'))", "-\t\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "-\t\t\t\t\t\t\t\tnextCharacter = readChar();", "-\t\t\t\t\t\t\t\tif (Character.isWhitespace(nextCharacter) || nextCharacter == '*') {", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbreak; // skip to next line", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (nextCharacter != '*' && !Character.isWhitespace(nextCharacter)) {", "-\t\t\t\t\t\t\tbreak; // skip to next line", "+\t\t\t\t\tnextCharacter : while (this.index < this.lineEnd) {", "+\t\t\t\t\t\tchar c = readChar(); // consider unicodes", "+\t\t\t\t\t\tswitch (c) {", "+\t\t\t\t\t\t    default : ", "+\t\t\t\t\t\t        if (Character.isWhitespace(c)) {", "+\t\t\t\t\t\t            continue nextCharacter;", "+\t\t\t\t\t\t        }", "+\t\t\t\t\t\t        break;", "+\t\t\t\t\t\t    case '*' :", "+\t\t\t\t\t\t        continue nextCharacter;", "+\t\t\t\t\t\t    case '@' :", "+\t\t\t\t\t\t        if ((readChar() == 'd') && (readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'p') && (readChar() == 'r') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'e') && (readChar() == 'c') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'a') && (readChar() == 't') &&", "+\t\t\t\t\t\t\t\t\t\t(readChar() == 'e') && (readChar() == 'd')) {", "+\t\t\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "+\t\t\t\t\t\t\t\t\tc = readChar();", "+\t\t\t\t\t\t\t\t\tif (Character.isWhitespace(c) || c == '*') {", "+\t\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t        }", "+\t\t\t        \tcontinue nextLine;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4ab3bacb6e731ef9b110e6071e958fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "8e09a020c985a5c59c2f77650ea0c690b64e1566", "commitAfterChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tpublic boolean checkDeprecation(int javadocStart, int javadocEnd)", "diff": ["+\t\t\tthis.lineEnds = this.sourceParser.scanner.getLineEnds();", "-\t\t\tif (this.checkJavadoc) {", "+\t\t\tif (this.checkDocComment) {", "-\t\t\t\tthis.javadoc = new Javadoc(javadocStart, javadocEnd);", "-\t\t\t\tsuper.checkDeprecation(javadocStart, javadocEnd);", "+\t\t\t\tthis.docComment = new Javadoc(javadocStart, javadocEnd);", "+\t\t\t\tparseComment(javadocStart, javadocEnd);", "-\t\t\t\t\tthis.javadoc = new Javadoc(javadocStart, javadocEnd);", "+\t\t\t\t\tthis.docComment = new Javadoc(javadocStart, javadocEnd);", "-\t\t\t\t\tthis.javadoc = null;", "+\t\t\t\t\tthis.docComment = null;", "-\t\t\t\t\tint lineStart = line == firstLineNumber", "+\t\t\t\t\tint start = line == firstLineNumber", "-\t\t\t\t\tthis.index = lineStart;", "+\t\t\t\t\tthis.index = start;", "-\t\t\t\t\t\tif  (nextCharacter == '@' &&", "-\t\t\t\t\t\t\t(readChar() == 'd') &&", "-\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t(readChar() == 'p') &&", "-\t\t\t\t\t\t\t(readChar() == 'r') &&", "-\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t(readChar() == 'c') &&", "-\t\t\t\t\t\t\t(readChar() == 'a') &&", "-\t\t\t\t\t\t\t(readChar() == 't') &&", "-\t\t\t\t\t\t\t(readChar() == 'e') &&", "-\t\t\t\t\t\t\t(readChar() == 'd'))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "-\t\t\t\t\t\t\tnextCharacter = readChar();", "-\t\t\t\t\t\t\tif (Character.isWhitespace(nextCharacter) || nextCharacter == '*') {", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\tif  (nextCharacter == '@') {", "+\t\t\t\t\t\t\tif ((readChar() == 'd') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'p') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'r') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'c') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'a') &&", "+\t\t\t\t\t\t\t\t(readChar() == 't') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'e') &&", "+\t\t\t\t\t\t\t\t(readChar() == 'd'))", "+\t\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t\t// ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.", "+\t\t\t\t\t\t\t\tnextCharacter = readChar();", "+\t\t\t\t\t\t\t\tif (Character.isWhitespace(nextCharacter) || nextCharacter == '*') {", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tbreak; // skip to next line", "+\t\t\t\t\t\t} else if (nextCharacter != '*' && !Character.isWhitespace(nextCharacter)) {", "+\t\t\t\t\t\t\tbreak; // skip to next line"]}], "num": 41705}
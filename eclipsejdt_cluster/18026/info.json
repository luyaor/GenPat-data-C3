{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a38cdc71ecdabf6f8e235d59df74e6a4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "349828c9c98afc4b1122cad1872b1dad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "af652d9d40e3e30a14ccbd2056144782592afc53", "commitAfterChange": "3dca78ae937ad139f018c4ddaaa87c3fe26600ed", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  public boolean tIsMoreSpecific(TypeBinding t, TypeBinding s)", "signatureAfterChange": "  public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-public boolean tIsMoreSpecific(TypeBinding t, TypeBinding s) {", "+public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {", "-\tif (TypeBinding.equalsEquals(t.findSuperTypeOriginatingFrom(s), s))", "+\tif (s.findSuperTypeOriginatingFrom(t) != null)", "-\tfinal boolean tIsBaseType = t.isBaseType();", "+\tfinal boolean tIsBaseType = t.isBaseType();", "-\treturn expressionType.isBaseType() ? tIsBaseType && !sIsBaseType : !tIsBaseType && sIsBaseType;", "+\treturn expressionType.isBaseType() ? sIsBaseType && !tIsBaseType : !sIsBaseType && tIsBaseType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b47397b81c441effa46fd8716a27283f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "e1b169e81e77457e606284ca99eb647f32044188", "commitAfterChange": "3aabc067e22084d59ef0ea59b0d58e1085dede4c", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": "  public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "diff": ["-\t", "-\tif (s.findSuperTypeOriginatingFrom(t) != null)", "-\t\treturn true;", "-\t", "-\tfinal boolean sIsBaseType = s.isBaseType();", "-\tfinal boolean tIsBaseType = t.isBaseType();", "-\t", "-\treturn expressionType.isBaseType() ? sIsBaseType && !tIsBaseType : !sIsBaseType && tIsBaseType;", "+\treturn s.findSuperTypeOriginatingFrom(t) != null;"]}], "num": 18026}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97a3edb645d1516a0fff3a874f69f04f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53e2707f53a58214f87af21341b17853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "diff": ["-\t\tif ((matchSet.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\tmatchSet.checkMatching(methodDeclaration);", "-\t\t}", "+\t\tmatchSet.checkMatching(methodDeclaration);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98a83e552e281df05f682cfbf37c461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tConstructorDeclaration constructorDeclaration, \t\t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(", "-\t\t\tConstructorDeclaration constructorDeclaration,", "-\t\t\tClassScope scope) {", "-\t\tif ((matchSet.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\tmatchSet.checkMatching(constructorDeclaration);", "-\t\t}", "+public class ClassButNoMethodDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "+\tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope) {", "+\t\tmatchSet.checkMatching(constructorDeclaration);", "+\t\treturn (constructorDeclaration.bits & AstNode.HasLocalTypeMASK) != 0; // continue only if it has local type", "+\t}"]}], "num": 61323}
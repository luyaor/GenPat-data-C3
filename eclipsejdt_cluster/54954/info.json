{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2324805f55e63531bc14a3b1c5f3b83", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3956e781ffbb8f2a6f3ca1775b1c16fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList infos, ArrayList closedUnits, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-private void buildForProject(JavaProject project, ArrayList infos, ArrayList closedUnits, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException {", "+private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException {", "-\tIGenericType[] genericTypes;", "-\tint infosSize = infos.size();", "-\tif (infosSize > 0) {", "-\t\tgenericTypes = new IGenericType[infosSize];", "-\t\tinfos.toArray(genericTypes);", "-\t} else {", "-\t\tgenericTypes = new IGenericType[0];", "-\t}", "-\torg.eclipse.jdt.core.ICompilationUnit[] closedCUs;", "-\tint closedUnitsSize = closedUnits.size();", "-\tif (closedUnitsSize > 0) {", "-\t\tclosedCUs = new org.eclipse.jdt.core.ICompilationUnit[closedUnitsSize];", "-\t\tclosedUnits.toArray(closedCUs);", "-\t} else {", "-\t\tclosedCUs = new org.eclipse.jdt.core.ICompilationUnit[0];", "-\t}", "+\tint openablesLength = potentialSubtypes.size();", "+\tOpenable[] openables = new Openable[openablesLength];", "+\tpotentialSubtypes.toArray(openables);", "-\tif (infosSize > 0 || closedUnitsSize > 0) {", "+\tif (openablesLength > 0) {", "-\t\t\tthis.hierarchyResolver.resolve(genericTypes, closedCUs, localTypes, monitor);", "+\t\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d882f68f08f4c12d9a71414449bd5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "980e2ed65938249223128b7fd8d8778c9eb3b8a3", "commitAfterChange": "929a0b3bf0dc89629d94cc4afbe6066815008f9f", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 211, "signatureBeforeChange": "  private boolean isKeyword(char[] tokenSource)", "signatureAfterChange": "  private boolean isKeyword(int token)", "diff": ["-private boolean isKeyword(char[] tokenSource) {", "-\t/*", "-\t * This code is heavily grammar dependant", "-\t */", "-", "-\tif (tokenSource == null) {", "-\t\treturn false;", "-\t}", "-\ttry {", "-\t\tScanner scanner = new Scanner();", "-\t\tscanner.setSource(tokenSource);", "-\t\tint token = scanner.getNextToken();", "-\t\tchar[] currentKeyword;", "-\t\ttry {", "-\t\t\tcurrentKeyword = scanner.getCurrentIdentifierSource();", "-\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tint nextToken= scanner.getNextToken();", "-\t\tif (nextToken == TerminalTokens.TokenNameEOF", "-\t\t\t&& scanner.startPosition == scanner.source.length) { // to handle case where we had an ArrayIndexOutOfBoundsException ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t     // while reading the last token", "-\t\t\tswitch(token) {", "-\t\t\t\tcase Scanner.TokenNameERROR:", "-\t\t\t\t\tif (CharOperation.equals(\"goto\".toCharArray(), currentKeyword) ||CharOperation.equals(\"const\".toCharArray(), currentKeyword)) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\tcase Scanner.TokenNameabstract:", "-\t\t\t\tcase Scanner.TokenNameassert:", "-\t\t\t\tcase Scanner.TokenNamebyte:", "-\t\t\t\tcase Scanner.TokenNamebreak:", "-\t\t\t\tcase Scanner.TokenNameboolean:", "-\t\t\t\tcase Scanner.TokenNamecase:", "-\t\t\t\tcase Scanner.TokenNamechar:", "-\t\t\t\tcase Scanner.TokenNamecatch:", "-\t\t\t\tcase Scanner.TokenNameclass:", "-\t\t\t\tcase Scanner.TokenNamecontinue:", "-\t\t\t\tcase Scanner.TokenNamedo:", "-\t\t\t\tcase Scanner.TokenNamedouble:", "-\t\t\t\tcase Scanner.TokenNamedefault:", "-\t\t\t\tcase Scanner.TokenNameelse:", "-\t\t\t\tcase Scanner.TokenNameextends:", "-\t\t\t\tcase Scanner.TokenNamefor:", "-\t\t\t\tcase Scanner.TokenNamefinal:", "-\t\t\t\tcase Scanner.TokenNamefloat:", "-\t\t\t\tcase Scanner.TokenNamefalse:", "-\t\t\t\tcase Scanner.TokenNamefinally:", "-\t\t\t\tcase Scanner.TokenNameif:", "-\t\t\t\tcase Scanner.TokenNameint:", "-\t\t\t\tcase Scanner.TokenNameimport:", "-\t\t\t\tcase Scanner.TokenNameinterface:", "-\t\t\t\tcase Scanner.TokenNameimplements:", "-\t\t\t\tcase Scanner.TokenNameinstanceof:", "-\t\t\t\tcase Scanner.TokenNamelong:", "-\t\t\t\tcase Scanner.TokenNamenew:", "-\t\t\t\tcase Scanner.TokenNamenull:", "-\t\t\t\tcase Scanner.TokenNamenative:", "-\t\t\t\tcase Scanner.TokenNamepublic:", "-\t\t\t\tcase Scanner.TokenNamepackage:", "-\t\t\t\tcase Scanner.TokenNameprivate:", "-\t\t\t\tcase Scanner.TokenNameprotected:", "-\t\t\t\tcase Scanner.TokenNamereturn:", "-\t\t\t\tcase Scanner.TokenNameshort:", "-\t\t\t\tcase Scanner.TokenNamesuper:", "-\t\t\t\tcase Scanner.TokenNamestatic:", "-\t\t\t\tcase Scanner.TokenNameswitch:", "-\t\t\t\tcase Scanner.TokenNamestrictfp:", "-\t\t\t\tcase Scanner.TokenNamesynchronized:", "-\t\t\t\tcase Scanner.TokenNametry:", "-\t\t\t\tcase Scanner.TokenNamethis:", "-\t\t\t\tcase Scanner.TokenNametrue:", "-\t\t\t\tcase Scanner.TokenNamethrow:", "-\t\t\t\tcase Scanner.TokenNamethrows:", "-\t\t\t\tcase Scanner.TokenNametransient:", "-\t\t\t\tcase Scanner.TokenNamevoid:", "-\t\t\t\tcase Scanner.TokenNamevolatile:", "-\t\t\t\tcase Scanner.TokenNamewhile:", "-\t\t\t\t\treturn true;", "-\t\t\t\tdefault: ", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t} else {", "-\t\t\treturn false;", "+private boolean isKeyword(int token) {", "+\t\tswitch(token) {", "+\t\t\tcase Scanner.TokenNameabstract:", "+\t\t\tcase Scanner.TokenNameassert:", "+\t\t\tcase Scanner.TokenNamebyte:", "+\t\t\tcase Scanner.TokenNamebreak:", "+\t\t\tcase Scanner.TokenNameboolean:", "+\t\t\tcase Scanner.TokenNamecase:", "+\t\t\tcase Scanner.TokenNamechar:", "+\t\t\tcase Scanner.TokenNamecatch:", "+\t\t\tcase Scanner.TokenNameclass:", "+\t\t\tcase Scanner.TokenNamecontinue:", "+\t\t\tcase Scanner.TokenNamedo:", "+\t\t\tcase Scanner.TokenNamedouble:", "+\t\t\tcase Scanner.TokenNamedefault:", "+\t\t\tcase Scanner.TokenNameelse:", "+\t\t\tcase Scanner.TokenNameextends:", "+\t\t\tcase Scanner.TokenNamefor:", "+\t\t\tcase Scanner.TokenNamefinal:", "+\t\t\tcase Scanner.TokenNamefloat:", "+\t\t\tcase Scanner.TokenNamefalse:", "+\t\t\tcase Scanner.TokenNamefinally:", "+\t\t\tcase Scanner.TokenNameif:", "+\t\t\tcase Scanner.TokenNameint:", "+\t\t\tcase Scanner.TokenNameimport:", "+\t\t\tcase Scanner.TokenNameinterface:", "+\t\t\tcase Scanner.TokenNameimplements:", "+\t\t\tcase Scanner.TokenNameinstanceof:", "+\t\t\tcase Scanner.TokenNamelong:", "+\t\t\tcase Scanner.TokenNamenew:", "+\t\t\tcase Scanner.TokenNamenull:", "+\t\t\tcase Scanner.TokenNamenative:", "+\t\t\tcase Scanner.TokenNamepublic:", "+\t\t\tcase Scanner.TokenNamepackage:", "+\t\t\tcase Scanner.TokenNameprivate:", "+\t\t\tcase Scanner.TokenNameprotected:", "+\t\t\tcase Scanner.TokenNamereturn:", "+\t\t\tcase Scanner.TokenNameshort:", "+\t\t\tcase Scanner.TokenNamesuper:", "+\t\t\tcase Scanner.TokenNamestatic:", "+\t\t\tcase Scanner.TokenNameswitch:", "+\t\t\tcase Scanner.TokenNamestrictfp:", "+\t\t\tcase Scanner.TokenNamesynchronized:", "+\t\t\tcase Scanner.TokenNametry:", "+\t\t\tcase Scanner.TokenNamethis:", "+\t\t\tcase Scanner.TokenNametrue:", "+\t\t\tcase Scanner.TokenNamethrow:", "+\t\t\tcase Scanner.TokenNamethrows:", "+\t\t\tcase Scanner.TokenNametransient:", "+\t\t\tcase Scanner.TokenNamevoid:", "+\t\t\tcase Scanner.TokenNamevolatile:", "+\t\t\tcase Scanner.TokenNamewhile:", "+\t\t\t\treturn true;", "+\t\t\tdefault: ", "+\t\t\t\treturn false;", "-\tcatch (InvalidInputException e) {", "-\t\treturn false;", "-\t}", "-\t", "-}"]}], "num": 54954}
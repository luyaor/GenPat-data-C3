{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9aa8bb4e58b1d5f534d43361c902815", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82affb3f6e560a6bdcde99c94e983337", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 183, "signatureBeforeChange": " \tpublic void _test0206_do_while()", "signatureAfterChange": " public void test0606_do_while()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0206_do_while() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = null,\\n\" + ", "-\t\t\t\t\"\t\t        u = new Object(),\\n\" + ", "-\t\t\t\t\"\t\t        v = new Object();\\n\" + ", "-\t\t\t\t\"\t\t do {\\n\" +", "-\t\t\t\t\"\t\t   if (v == null) {\\n\" +", "-\t\t\t\t\"\t\t     o = new Object();\\n\" +", "-\t\t\t\t\"\t\t   };\\n\" +", "-\t\t\t\t\"\t\t   if (u == null) {\\n\" +", "-\t\t\t\t\"\t\t     v = null;\\n\" +", "-\t\t\t\t\"\t\t   };\\n\" +", "-\t\t\t\t\"\t\t   u = null;\\n\" +", "-\t\t\t\t\"\t\t }\\n\" +", "-\t\t\t\t\"\t\t while (o == null);\\n\" +", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"  ", "-\t\t);", "-\t}", "+// null analysis -- do while", "+public void test0606_do_while() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = null,\\n\" + ", "+\t\t\t\"           u = new Object(),\\n\" + ", "+\t\t\t\"           v = new Object();\\n\" + ", "+\t\t\t\"    do {\\n\" +", "+\t\t\t\"      if (v == null) {\\n\" +", "+\t\t\t\"        o = new Object();\\n\" +", "+\t\t\t\"      };\\n\" +", "+\t\t\t\"      if (u == null) {\\n\" +", "+\t\t\t\"        v = null;\\n\" +", "+\t\t\t\"      };\\n\" +", "+\t\t\t\"      u = null;\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    while (o == null);\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afaf02bb57af14a6ac8e6d0fb966d187", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 171, "signatureBeforeChange": " \tpublic void _test0174_try_catch()", "signatureAfterChange": " public void test0554_try_catch()", "diff": ["-\t// TODO (maxime) fix", "-\tpublic void _test0174_try_catch() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo(Object o) throws Exception {\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t   o = null;\\n\" + ", "-\t\t\t\t\"\t\t   throwLocalException();\\n\" + ", "-\t\t\t\t\"\t\t   throw new Exception();\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t catch (LocalException e) {\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t if (o != null) {\\n\" +", "-\t\t\t\t \t// complain: only way to get out of try and get there is to go", "-\t\t\t\t\t// through throwLocalException, after the assignment ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t class LocalException extends Exception {\\n\" + ", "-\t\t\t\t\"\t\t private static final long serialVersionUID = 1L;\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"\t void throwLocalException() throws LocalException {\\n\" + ", "-\t\t\t\t\"\t\t throw new LocalException();\\n\" + ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"WARN\"", "-\t\t);", "-\t}", "+// null analysis - try/catch", "+public void test0554_try_catch() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o) throws Exception {\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      o = null;\\n\" + ", "+\t\t\t\"      throwLocalException();\\n\" + ", "+\t\t\t\"      throw new Exception();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    catch (LocalException e) {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    if (o != null) {\\n\" +", "+\t\t\t  // complain: only way to get out of try and get there is to go", "+\t\t\t  // through throwLocalException, after the assignment ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  class LocalException extends Exception {\\n\" + ", "+\t\t\t\"    private static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"  void throwLocalException() throws LocalException {\\n\" + ", "+\t\t\t\"    throw new LocalException();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\"", "+\t\t// conservative flow analysis suppresses the warning", "+//\t\t\"----------\\n\" + ", "+//\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "+//\t\t\"\tif (o != null) {\\n\" + ", "+//\t\t\"\t    ^\\n\" + ", "+//\t\t\"The variable o can only be null; it was either set to null or checked for null when last used\\n\" + ", "+//\t\t\"----------\\n\"", "+\t);", "+}"]}], "num": 6421}
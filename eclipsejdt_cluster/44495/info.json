{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6abbd195a7d49f43272a4f4ee159c4b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09f6d0c07fe9464ab501bbbcd25a7b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/SimpleLookupTable.java", "commitBeforeChange": "7e3acecdf92fee77409490932eac5fbc5cb85d56", "commitAfterChange": "6c1cad3e0e92fdcf0520484f2933244675a48853", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public SimpleLookupTable(int size)", "signatureAfterChange": "  public SimpleLookupTable(int size)", "diff": ["-\tif (size < 3) size = 3;", "-\tthis.threshold = size + 1; // size is the expected number of elements", "-\tint tableLength = 2 * size + 1;", "-\tthis.keyTable = new Object[tableLength];", "-\tthis.valueTable = new Object[tableLength];", "+\tthis.threshold = size; // size represents the expected number of elements", "+\tint extraRoom = (int) (size * 1.5f);", "+\tif (this.threshold == extraRoom)", "+\t\textraRoom++;", "+\tthis.keyTable = new Object[extraRoom];", "+\tthis.valueTable = new Object[extraRoom];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850c5244111e024f068e684c0f93c084", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/SimpleLookupTable.java", "commitBeforeChange": "e121f6d797fe6ae86af3fdab76ec98a07ee99a25", "commitAfterChange": "9c69d8563911aa9f6df8f556adf1ceee2ecffd81", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r public SimpleLookupTable(int size)", "signatureAfterChange": "\r \r public SimpleLookupTable(int size)", "diff": ["+\tif (size < 7) size = 7;\r", "-\tthis.threshold = size; // size represents the expected number of elements\r", "-\tint extraRoom = (int) (size * 1.75f);\r", "-\tif (this.threshold == extraRoom)\r", "-\t\textraRoom++;\r", "-\tthis.keyTable = new Object[extraRoom];\r", "-\tthis.valueTable = new Object[extraRoom];\r", "+\tthis.threshold = size + 1; // size is the expected number of elements\r", "+\tint tableLength = 2 * size + 1;\r", "+\tthis.keyTable = new Object[tableLength];\r", "+\tthis.valueTable = new Object[tableLength];\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0e673aa5d064900043e48a9863e76e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfObject.java", "commitBeforeChange": "5133c2bbdcfe9be066c05eb73a026179089e535a", "commitAfterChange": "38c1f37ee2bda3a3a519d51d7b02f49c2c25b6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic HashtableOfObject(int size)", "signatureAfterChange": "\r \r \tpublic HashtableOfObject(int size)", "diff": ["-\t// size represents the expected number of elements\r", "-\t\tthis(\r", "-\t\t\t0, \r", "-\t\t\tnew char[(size = (int) (size * 1.75f)) == size ? ++size : size][],\r", "-\t\t\tnew Object[size],\r", "-\t\t\tsize);\r", "+\t\tthis.elementSize = 0;\r", "+\t\tthis.threshold = size; // size represents the expected number of elements\r", "+\t\tint extraRoom = (int) (size * 1.75f);\r", "+\t\tif (this.threshold == extraRoom)\r", "+\t\t\textraRoom++;\r", "+\t\tthis.keyTable = new char[extraRoom][];\r", "+\t\tthis.valueTable = new Object[extraRoom];\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4566ba6dea7a4e781b33bc361271cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/HashtableOfObject.java", "commitBeforeChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "commitAfterChange": "5133c2bbdcfe9be066c05eb73a026179089e535a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic HashtableOfObject(int size)", "signatureAfterChange": "\r \tpublic HashtableOfObject(int size)", "diff": ["+\t// size represents the expected number of elements\r", "-\t\tthis.elementSize = 0;\r", "-\t\tthis.threshold = size; // size represents the expected number of elements\r", "-\t\tint extraRoom = (int) (size * 1.75f);\r", "-\t\tif (this.threshold == extraRoom)\r", "-\t\t\textraRoom++;\r", "-\t\tthis.keyTable = new char[extraRoom][];\r", "-\t\tthis.valueTable = new Object[extraRoom];\r", "+\t\tthis(\r", "+\t\t\t0, \r", "+\t\t\tnew char[(size = (int) (size * 1.75f)) == size ? ++size : size][],\r", "+\t\t\tnew Object[size],\r", "+\t\t\tsize);\r"]}], "num": 44495}
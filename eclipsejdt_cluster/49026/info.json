{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83a5e3d40a8b7417b2f06466b2b91012", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5402cffd3a0108c35a90610daf535d6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9b921f99315dbbd37e5ce242cb0efa8c0bd12214", "commitAfterChange": "6b16361a0fd854f68a5a4796074fceea4b12f838", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options)", "signatureAfterChange": " protected void runJavac( \t\tString[] testFiles, \t\tboolean expectingCompilerErrors, \t\tString expectedCompilerLog, \t\tString expectedOutputString, \t\tString expectedErrorString, \t\tboolean shouldFlushOutputDirectory,  \t\tJavacTestOptions options, \t\tString[] vmArguments)", "diff": ["-\t\tJavacTestOptions options) {", "+\t\tJavacTestOptions options,", "+\t\tString[] vmArguments) {", "+\t// WORK reorder parameters", "-\t\t\t\t\truntime.execute(javacOutputDirectory, \"\", testFiles[0].substring(0, testFiles[0].length() - 5), stdout, stderr);", "+\t\t\t\t\tString vmOptions = \"\";", "+\t\t\t\t\tif (vmArguments != null) {", "+\t\t\t\t\t\tint l = vmArguments.length;", "+\t\t\t\t\t\tif (l > 0) {", "+\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer(vmArguments[0]);", "+\t\t\t\t\t\t\tfor (int i = 1; i < l; i++) {", "+\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\tbuffer.append(vmArguments[i]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tvmOptions = buffer.toString();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\truntime.execute(javacOutputDirectory, vmOptions, testFiles[0].substring(0, testFiles[0].length() - 5), stdout, stderr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "952efe967cd451f9b5243fccd04cdf55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "fb2d7d99aabb8ff6fc09a1333f98ae4d56a6ccdf", "commitAfterChange": "9c8a866e1dfa3b05dfb4303df292630a591df281", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["-\t\t\t\t.append('.')", "-\t\t\t\t.append(getName());", "+\t\t\t\t.append('.');", "+\t\t\tif (isParameterizedType()) {", "+\t\t\t\tParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) this.binding;", "+\t\t\t\tbuffer.append(parameterizedTypeBinding.sourceName());", "+\t\t\t\tITypeBinding[] typeArguments = getTypeArguments();", "+\t\t\t\tfinal int typeArgumentsLength = typeArguments.length;", "+\t\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\t\tbuffer.append('<');", "+\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tbuffer.append(',');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(typeArguments[i].getQualifiedName());", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append('>');\t", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(getName());", "+\t\t\t}"]}], "num": 49026}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15d7e8fe3f76f275b6a490c2672fdeae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0642663590f9faf291078052f197c31c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+ */", "+protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {", "+\tReferenceBinding typeBinding = null;", "+\tif (binding instanceof ReferenceBinding)", "+\t\ttypeBinding = (ReferenceBinding) binding;", "+", "+\tchar[][] typeTokens = importRef.tokens;", "+\tint lastIndex = typeTokens.length-1;", "+\tchar[][] tokens = null;", "+\t// try to match all enclosing types for which the token matches as well.", "+\twhile (typeBinding != null && lastIndex >= 0) {", "+\t\tif (matchesName(this.simpleName, typeTokens[lastIndex--])) {", "+\t\t\tint level = matchLevelForType(this.simpleName, this.qualification, typeBinding);", "+\t\t\tif (level != IMPOSSIBLE_MATCH) {", "+\t\t\t\ttokens = new char[lastIndex+2][];", "+\t\t\t\tSystem.arraycopy(typeTokens, 0, tokens, 0, lastIndex+2);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\ttypeBinding = typeBinding.enclosingType();", "+\t}", "+\tif (tokens == null) {", "+\t\ttokens = typeBinding == null || typeBinding instanceof ProblemReferenceBinding", "+\t\t\t? new char[][] {this.simpleName}", "+\t\t\t: importRef.tokens;", "+\t\tif (!this.isCaseSensitive) {", "+\t\t\tint length = tokens.length;", "+\t\t\tchar[][] lowerCaseTokens = new char[length][];", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tlowerCaseTokens[i] = CharOperation.toLowerCase(tokens[i]);", "+\t\t\ttokens = lowerCaseTokens;", "+\t\t}", "+\t}", "+\tlocator.reportAccurateReference(importRef.sourceStart, importRef.sourceEnd, tokens, element, accuracy);", "+}", "- */", "-protected void matchReportImportRef(ImportReference importRef, Binding binding, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {", "-\tReferenceBinding typeBinding = null;", "-\tchar[][] tokens = null;", "-\tif (binding instanceof ReferenceBinding) {", "-\t\ttypeBinding = (ReferenceBinding)binding;", "-\t}", "-\tchar[][] typeTokens = importRef.tokens;", "-\tint lastIndex = typeTokens.length-1;", "-\t// try to match all enclosing types for which the token matches as well.", "-\twhile (typeBinding != null && lastIndex >= 0){", "-\t\tif (matchesName(this.simpleName, typeTokens[lastIndex--])) {", "-\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);", "-\t\t\tif (level != IMPOSSIBLE_MATCH) {", "-\t\t\t\ttokens = new char[lastIndex+2][];", "-\t\t\t\tSystem.arraycopy(typeTokens, 0, tokens, 0, lastIndex+2);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\ttypeBinding = typeBinding.enclosingType();", "-\t}", "-\tif (tokens == null) {", "-\t\tif (typeBinding == null || typeBinding instanceof ProblemReferenceBinding) {", "-\t\t\ttokens = new char[][] {this.simpleName};", "-\t\t} else {", "-\t\t\ttokens = importRef.tokens;", "-\t\t}", "-\t\tif (!this.isCaseSensitive) {", "-\t\t\tint length = tokens.length;", "-\t\t\tchar[][] lowerCaseTokens = new char[length][];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tchar[] token = tokens[i];", "-\t\t\t\tlowerCaseTokens[i] = CharOperation.toLowerCase(token);", "-\t\t\t}", "-\t\t\ttokens = lowerCaseTokens;", "-\t\t}", "-\t}", "-\tlocator.reportAccurateReference(importRef.sourceStart, importRef.sourceEnd, tokens, element, accuracy);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af3ce59a95e07e5f4981a02a47590229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\twhile (typeBinding != null && lastIndex >= 0){", "+\twhile (typeBinding != null && lastIndex >= 0) {", "-\t\tif (typeBinding instanceof ReferenceBinding){", "-\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();", "-\t\t} else {", "-\t\t\ttypeBinding = null;", "-\t\t}", "+\t\ttypeBinding = typeBinding instanceof ReferenceBinding", "+\t\t\t? ((ReferenceBinding)typeBinding).enclosingType()", "+\t\t\t: null;", "-\t\tif (binding == null || binding instanceof ProblemBinding) {", "-\t\t\ttokens = new char[][] {this.simpleName};", "-\t\t} else {", "-\t\t\ttokens = qNameRef.tokens;", "-\t\t}", "+\t\ttokens = binding == null || binding instanceof ProblemBinding", "+\t\t\t? new char[][] {this.simpleName}", "+\t\t\t: qNameRef.tokens;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab86ff3f5dc62cd81f4c715a823c99d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] fullyQualifiedTypeName)", "signatureAfterChange": " protected boolean matchesType(char[] simpleNamePattern, char[] qualificationPattern, char[] fullyQualifiedTypeName)", "diff": ["-\t\tif (qualificationPattern == null) {", "-\t\t\tpattern = ONE_STAR;", "-\t\t} else {", "-\t\t\tpattern = CharOperation.concat(qualificationPattern, ONE_STAR, '.');", "-\t\t}", "+\t\tpattern = qualificationPattern == null", "+\t\t\t? ONE_STAR", "+\t\t\t: CharOperation.concat(qualificationPattern, ONE_STAR, '.');", "-\t\tif (qualificationPattern == null) {", "-\t\t\tpattern = CharOperation.concat(ONE_STAR, simpleNamePattern);", "-\t\t} else {", "-\t\t\tpattern = CharOperation.concat(qualificationPattern, simpleNamePattern, '.');", "-\t\t}", "+\t\tpattern = qualificationPattern == null", "+\t\t\t? CharOperation.concat(ONE_STAR, simpleNamePattern)", "+\t\t\t: CharOperation.concat(qualificationPattern, simpleNamePattern, '.');", "-\tif (!this.isCaseSensitive) {", "+\tif (!this.isCaseSensitive)", "-\t}", "-\treturn ", "-\t\tCharOperation.match(", "-\t\t\tpattern,", "-\t\t\tfullyQualifiedTypeName,", "-\t\t\tthis.isCaseSensitive", "-\t\t);", "+\treturn CharOperation.match(pattern, fullyQualifiedTypeName, this.isCaseSensitive);"]}], "num": 62029}
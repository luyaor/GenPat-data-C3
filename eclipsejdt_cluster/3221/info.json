{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79d4522a77cfa032963780a3ff4153b0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829dda28007b0121be08be483015d975", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "signatureAfterChange": "  public void parseMethod(Parser parser, CompilationUnitDeclaration unit)", "diff": ["+", "+public void parseMethod(Parser parser, CompilationUnitDeclaration unit) {", "+\t//connect method bodies", "+\tif (unit.ignoreMethodBodies)", "+\t\treturn;", "+", "+\t//members", "+\tif (this.memberTypes != null) {", "+\t\tint length = this.memberTypes.length;", "+\t\tfor (int i = 0; i < length; i++)", "+\t\t\tthis.memberTypes[i].parseMethod(parser, unit);", "+\t}", "+", "+\t//methods", "+\tif (this.methods != null) {", "+\t\tint length = this.methods.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tthis.methods[i].parseStatements(parser, unit);", "+\t\t}", "+\t}", "+", "+\t//initializers", "+\tif (this.fields != null) {", "+\t\tint length = this.fields.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tfinal FieldDeclaration fieldDeclaration = this.fields[i];", "+\t\t\tswitch(fieldDeclaration.getKind()) {", "+\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\t\t\t((Initializer) fieldDeclaration).parseStatements(parser, this, unit);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-", "-\tpublic void parseMethod(Parser parser, CompilationUnitDeclaration unit) {", "-", "-\t\t//connect method bodies", "-\t\tif (unit.ignoreMethodBodies)", "-\t\t\treturn;", "-", "-\t\t//members", "-\t\tif (memberTypes != null) {", "-\t\t\tint length = memberTypes.length;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tmemberTypes[i].parseMethod(parser, unit);", "-\t\t}", "-", "-\t\t//methods", "-\t\tif (methods != null) {", "-\t\t\tint length = methods.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tmethods[i].parseStatements(parser, unit);", "-\t\t\t}", "-\t\t}", "-", "-\t\t//initializers", "-\t\tif (fields != null) {", "-\t\t\tint length = fields.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tfinal FieldDeclaration fieldDeclaration = fields[i];", "-\t\t\t\tswitch(fieldDeclaration.getKind()) {", "-\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "-\t\t\t\t\t\t((Initializer) fieldDeclaration).parseStatements(parser, this, unit);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf4ac7fa1e5c5f6e58c11a8a4b71cf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "133e081382658fdf4b2c93257a825d3355922192", "commitAfterChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tif (enclosingInstance != null) {", "-\t\t\tflowInfo = enclosingInstance.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.enclosingInstance != null) {", "+\t\t\tflowInfo = this.enclosingInstance.analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, count = arguments.length; i < count; i++) {", "-\t\t\t\tflowInfo = arguments[i].analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.arguments != null) {", "+\t\t\tfor (int i = 0, count = this.arguments.length; i < count; i++) {", "+\t\t\t\tflowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (anonymousType != null) {", "-\t\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);", "+\t\tif (this.anonymousType != null) {", "+\t\t\tflowInfo = this.anonymousType.analyseCode(currentScope, flowContext, flowInfo);", "-\t\tif (((thrownExceptions = binding.thrownExceptions).length) != 0) {", "+\t\tif (((thrownExceptions = this.binding.thrownExceptions).length) != 0) {"]}], "num": 3221}
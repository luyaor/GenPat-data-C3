{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eff47afb1a89d420ccd76bfb150d2a00", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18e60d760f308a03d90a2aa0cb1d475", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "diff": ["-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\t\tIResource res = members[i];", "-\t\t\t\tswitch (res.getType()) {", "-\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\tIPath resFullPath = res.getFullPath();", "-\t\t\t\t\t\tString resName = res.getName();", "+\t\t\tint length = members.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIResource res = members[i];", "+\t\t\t\t\tswitch (res.getType()) {", "+\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\tIPath resFullPath = res.getFullPath();", "+\t\t\t\t\t\t\tString resName = res.getName();", "-\t\t\t\t\t\t// ignore a jar file on the classpath", "-\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t// ignore a jar file on the classpath", "+\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// ignore .java file if src == project", "+\t\t\t\t\t\t\tif (srcIsProject ", "+\t\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName, sourceLevel, complianceLevel)", "+\t\t\t\t\t\t\t\t\t&& !Util.isExcluded(res, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// ignore .class file if bin == project", "+\t\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName, sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "+\t\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\t\t\tresources,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tresourcesCounter);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresources[resourcesCounter++] = res;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// ignore .java file if src == project", "-\t\t\t\t\t\tif (srcIsProject ", "-\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "-\t\t\t\t\t\t\t&& !Util.isExcluded(res, inclusionPatterns, exclusionPatterns)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// ignore .class file if bin == project", "-\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\tresources,", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\tresourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresources[resourcesCounter++] = res;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\tresFullPath = res.getFullPath();", "+\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\tresFullPath = res.getFullPath();", "-\t\t\t\t\t\t// ignore non-excluded folders on the classpath or that correspond to an output location", "-\t\t\t\t\t\tif ((srcIsProject && !Util.isExcluded(res, inclusionPatterns, exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName()))", "-\t\t\t\t\t\t\t\t|| this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\tresources,", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\tresourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresources[resourcesCounter++] = res;", "+\t\t\t\t\t\t\t// ignore non-excluded folders on the classpath or that correspond to an output location", "+\t\t\t\t\t\t\tif ((srcIsProject && !Util.isExcluded(res, inclusionPatterns, exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName(), sourceLevel, complianceLevel))", "+\t\t\t\t\t\t\t\t\t|| this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "+\t\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\t\t\tresources,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tresourcesCounter);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresources[resourcesCounter++] = res;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2427449b1f97d85132ef678f3e6746f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tnextResource: for (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource member = members[i];", "-\t\t\tswitch (member.getType()) {", "-\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\tString fileName = member.getName();", "+\t\tint length = members.length;", "+\t\tif (length > 0) {", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tnextResource: for (int i = 0; i < length; i++) {", "+\t\t\t\tIResource member = members[i];", "+\t\t\t\tswitch (member.getType()) {", "+\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\tString fileName = member.getName();", "-\t\t\t\t\t// ignore .java files that are not excluded", "-\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\t// ignore .class files", "-\t\t\t\t\tif (Util.isValidClassFileName(fileName)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\t// ignore .zip or .jar file on classpath", "-\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// ignore .java files that are not excluded", "+\t\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName, sourceLevel, complianceLevel) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\t// ignore .class files", "+\t\t\t\t\t\tif (Util.isValidClassFileName(fileName, sourceLevel, complianceLevel)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\t// ignore .zip or .jar file on classpath", "+\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t// ignore valid packages or excluded folders that correspond to a nested pkg fragment root", "-\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName())", "-\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) ", "-\t\t\t\t\t\t\t\t|| isClasspathEntry(member.getFullPath(), classpath)))", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t// resize", "-\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t}", "-\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-", "+\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t// ignore valid packages or excluded folders that correspond to a nested pkg fragment root", "+\t\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName(), sourceLevel, complianceLevel)", "+\t\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) ", "+\t\t\t\t\t\t\t\t\t\t|| isClasspathEntry(member.getFullPath(), classpath)))", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "+\t\t\t\t}", "+\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "+\t\t\t}\t"]}], "num": 52582}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84962ac50b9a990c5b2e8473c554d278", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29c8336c2ca76bdae8a64351a892e688", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(CompilerOptions options)", "diff": ["+\t */", "+\tpublic CompilerOptions(CompilerOptions options) {", "+\t\tthis.errorThreshold = options.errorThreshold;", "+\t\tthis.warningThreshold = options.warningThreshold;", "+\t\tthis.produceDebugAttributes = options.produceDebugAttributes;", "+\t\tthis.complianceLevel = options.complianceLevel;", "+\t\tthis.sourceLevel = options.sourceLevel;", "+\t\tthis.targetJDK = options.targetJDK;", "+\t\tthis.isPrivateConstructorAccessChangingVisibility = options.isPrivateConstructorAccessChangingVisibility;", "+\t\tthis.defaultEncoding = options.defaultEncoding;", "+\t\tthis.verbose = options.verbose;", "+\t\tthis.produceReferenceInfo = options.produceReferenceInfo;", "+\t\tthis.preserveAllLocalVariables = options.preserveAllLocalVariables;", "+\t\tthis.parseLiteralExpressionsAsConstants = options.parseLiteralExpressionsAsConstants;", "+\t\tthis.maxProblemsPerUnit = options.maxProblemsPerUnit;", "+\t\tthis.taskTags = options.taskTags;", "+\t\tthis.taskPriorites = options.taskPriorites;", "+\t\tthis.isTaskCaseSensitive = options.isTaskCaseSensitive;", "+\t\tthis.reportDeprecationInsideDeprecatedCode = options.reportDeprecationInsideDeprecatedCode;", "+\t\tthis.reportDeprecationWhenOverridingDeprecatedMethod = options.reportDeprecationWhenOverridingDeprecatedMethod;", "+\t\tthis.reportUnusedParameterWhenImplementingAbstract = options.reportUnusedParameterWhenImplementingAbstract;", "+\t\tthis.reportUnusedParameterWhenOverridingConcrete = options.reportUnusedParameterWhenOverridingConcrete;", "+\t\tthis.reportUnusedDeclaredThrownExceptionWhenOverriding = options.reportUnusedDeclaredThrownExceptionWhenOverriding;", "+\t\tthis.reportSpecialParameterHidingField = options.reportSpecialParameterHidingField;", "+\t\tthis.reportInvalidJavadocTagsVisibility = options.reportInvalidJavadocTagsVisibility;", "+\t\tthis.reportInvalidJavadocTags = options.reportInvalidJavadocTags;", "+\t\tthis.reportInvalidJavadocTagsDeprecatedRef = options.reportInvalidJavadocTagsDeprecatedRef;", "+\t\tthis.reportInvalidJavadocTagsNotVisibleRef = options.reportInvalidJavadocTagsNotVisibleRef;", "+\t\tthis.reportMissingJavadocTagsVisibility = options.reportMissingJavadocTagsVisibility;", "+\t\tthis.reportMissingJavadocTagsOverriding = options.reportMissingJavadocTagsOverriding;", "+\t\tthis.reportMissingJavadocCommentsVisibility = options.reportMissingJavadocCommentsVisibility; ", "+\t\tthis.reportMissingJavadocCommentsOverriding = options.reportMissingJavadocCommentsOverriding;", "+\t\tthis.inlineJsrBytecode = options.inlineJsrBytecode;", "+\t\tthis.docCommentSupport = options.docCommentSupport;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332b9dee4de407360b503be174e40498", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "11e4e14c87ae9f5d3c387265b339332ab33728bd", "commitAfterChange": "a8ccd47f929845c5a31f3d30e26f356186998ae8", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["+\t\t\t\t} else if (expr1 instanceof CombinedBinaryExpression) {", "+\t\t\t\t\tCombinedBinaryExpression cursor;", "+\t\t\t\t\t// left branch is comprised of PLUS BEs", "+\t\t\t\t\t// cursor is shifted upwards, while needed BEs are added", "+\t\t\t\t\t// on demand; past the arityMax-th", "+\t\t\t\t\t// consecutive BE, a CBE is inserted that holds a ", "+\t\t\t\t\t// full-fledged references table", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "+\t\t\t\t\t\t\t\tcursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS);", "+\t\t\t\t\t\tcursor.arity++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "+\t\t\t\t\t\tcursor.arity = 0;", "+\t\t\t\t\t\tcursor.tuneArityMax();", "+\t\t\t\t\t}", "+\t\t\t\t\tcursor.right = expr2;", "+\t\t\t\t\tcursor.sourceEnd = expr2.sourceEnd;", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = cursor;", "+\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code\t\t\t\t\t", "+//\t\t\t\t\tcursor.depthTracker = ((BinaryExpression)cursor.left).", "+//\t\t\t\t\t\tdepthTracker + 1;\t\t\t\t\t", "+\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t// single out the a + b case, which is a BE ", "+\t\t\t\t\t// instead of a CBE (slightly more than a half of strings", "+\t\t\t\t\t// concatenation are one-deep binary expressions)", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\t\tnew BinaryExpression(", "-\t\t\t\t\t\t\texpr1, ", "-\t\t\t\t\t\t\texpr2, ", "-\t\t\t\t\t\t\top);", "+\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t} else {", "-\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\tnew BinaryExpression(", "-\t\t\t\t\t\texpr1, ", "-\t\t\t\t\t\texpr2, ", "-\t\t\t\t\t\top);", "-\t\t\t}", "+\t\t\t} else if (expr1 instanceof CombinedBinaryExpression) {", "+\t\t\t\t\tCombinedBinaryExpression cursor;", "+\t\t\t\t\t// shift cursor; create BE/CBE as needed", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "+\t\t\t\t\t\t\t\tcursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS);", "+\t\t\t\t\t\tcursor.arity++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "+\t\t\t\t\t\tcursor.arity = 0;", "+\t\t\t\t\t\tcursor.tuneArityMax();", "+\t\t\t\t\t}", "+\t\t\t\t\tcursor.right = expr2;", "+\t\t\t\t\tcursor.sourceEnd = expr2.sourceEnd;", "+\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code\t\t\t\t\t", "+//\t\t\t\t\tcursor.depthTracker = ((BinaryExpression)cursor.left).", "+//\t\t\t\t\t\tdepthTracker + 1;", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = cursor;", "+\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "+\t\t\t\t} else {", "+\t\t\t\t\t// single out the a + b case", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t}"]}], "num": 33420}
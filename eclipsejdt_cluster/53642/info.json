{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60f4c1a9cf60d4c5012e229e5b740c5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb93d63fa5b4654a37a59c154b32f4c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "1a542c460a449efbae14d1057ba233825602248d", "commitAfterChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "signatureAfterChange": " \tpublic void createInitialConstraintsForParameters(TypeBinding[] parameters, boolean checkVararg, TypeBinding varArgsType, MethodBinding method)", "diff": ["+\t\t\tTypeBinding thetaF = substitute(parameters[i]);", "-\t\t\t\tTypeBinding thetaF = substitute(parameters[i]);", "+\t\t\t} else {", "+\t\t\t\tif (parameters[i].isPertinentToApplicability(this.invocationArguments[i].resolvedType, method))", "+\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t// else we know it is potentially compatible, no need to assert.", "+\t\t\t\t} else {", "+\t\t\t\t\tif (varArgsType.isPertinentToApplicability(this.invocationArguments[i].resolvedType, method))", "+\t\t\t\t\t\tthis.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);", "+\t\t\t\t\t// else we know it is potentially compatible, no need to assert."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c50edb41f862097ec68bb8b38f79e4b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "e5bb4bddaa8ae27dfddec859067bcb3df83df4dc", "commitAfterChange": "65877d9109defab8c1c7191e1a9530b8bc8f9b43", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-", "+\t\t// to check whether the method returns a type parameter not declared by it.", "+\t\tboolean returnsUndeclTypeVar = false;", "+\t\tif (this.returnType != null && this.returnType.resolvedType instanceof TypeVariableBinding) {", "+\t\t\treturnsUndeclTypeVar = true;", "+\t\t}", "+\t\t\t\tif (returnsUndeclTypeVar && this.typeParameters[i].binding == this.returnType.resolvedType) {", "+\t\t\t\t\treturnsUndeclTypeVar = false;", "+\t\t\t\t}", "+\t\t\t\t\telse if (this.binding != null && !this.binding.isStatic() && !(this.binding.declaringClass instanceof LocalTypeBinding) && !returnsUndeclTypeVar) {", "+\t\t\t\t\t\t// Not a method of local type - can be static", "+\t\t\t\t\t\tthis.bits |= ASTNode.CanBeStatic;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e97723aff024761f21d096236082e53c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java", "commitBeforeChange": "b420bfdd4a859691c7aeac5921ac84f8a5db1f18", "commitAfterChange": "6cf1783794eb1a6e5e7c6e98927f2c861618e7ac", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic IPackageBinding getPackage()", "signatureAfterChange": " \tpublic IPackageBinding getPackage()", "diff": ["+\t\tif (this.binding != null) {", "+\t\t\tswitch (this.binding.kind()) {", "+\t\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tcase Binding.TYPE_PARAMETER : // includes capture scenario", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tcase Binding.INTERSECTION_TYPE:", "+\t\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tIPackageBinding packageBinding = this.resolver.getPackageBinding(this.binding.getPackage());", "+\t\t\tif (packageBinding != null) return packageBinding;", "+\t\t}", "+\t\tif (this.innerTypeBinding != null && this.dimensions > 0) {", "+\t\t\treturn null;", "+\t\t}"]}], "num": 53642}
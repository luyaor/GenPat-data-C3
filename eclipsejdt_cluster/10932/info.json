{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c23ae57fb5a22423bd7cfcdb8bf7173c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93fdbd05a6aab585a7f507aa89878ab7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/nestedhelloworld/NestedHelloWorldAnnotationProcessor.java", "commitBeforeChange": "f2e69392c2b77f78381f44504717309f40a69302", "commitAfterChange": "cfc6d63918bb7d5d29292fed4468743597d36bdc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic String getCode()", "signatureAfterChange": " \tpublic String getCode()", "diff": ["-\tpublic String getCode() { return CODE; }", "+\t// Code is annotated with HelloWorldAnnotation, so it will cause another round of processing", "+\tpublic String getCode() {", "+\t\treturn \"package \" + PACKAGENAME + \";\" + \"\\n\" + ", "+\t\t\"public class \" + TYPENAME + \"\\n\" +", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0057e1409134df8367cad62733cd235", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "2d053de9651cebac3cf0a82f4012b7196ccb5c83", "commitAfterChange": "a209f427039b5b4db27a67f609cb706801ba28e5", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void _testBug428811()", "signatureAfterChange": " public void testBug428811()", "diff": ["-public void _testBug428811() {", "-\t// perhaps fail is the correct answer?", "-\trunConformTest(", "+public void testBug428811() {", "+\t// perhaps fail is the correct answer? FIXME: validate!", "+\trunNegativeTest(", "-\t\t});", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in MoreCollectors.java (at line 16)\\n\" + ", "+\t\t\"\treturn Collector.of(ArrayList<T>::new,\\n\" + ", "+\t\t\"\t                 ^^\\n\" + ", "+\t\t\"The method of(ArrayList<T>::new, List<T>::add, (<no type> left, <no type> right) -> {\\n\" + ", "+\t\t\"  left.addAll(right);\\n\" + ", "+\t\t\"  return left;\\n\" + ", "+\t\t\"}, ImmutableList::copyOf) is undefined for the type Collector\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in MoreCollectors.java (at line 23)\\n\" + ", "+\t\t\"\tpublic static <T> ImmutableList<T> copyOf (Collection<T> c) {\\n\" + ", "+\t\t\"\t                                   ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method copyOf(Collection<T>) from the type MoreCollectors.ImmutableList<T> is never used locally\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 10932}
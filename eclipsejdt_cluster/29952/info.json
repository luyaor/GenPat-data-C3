{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f246c07c7e66b248d002c27bdc7546b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "465a90bbc1039ca63d90eb47c2c4c191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " private void writeAllDocumentNames(String[] sortedDocNames, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeAllDocumentNames(String[] sortedDocNames, FileOutputStream stream) throws IOException", "diff": ["-private void writeAllDocumentNames(String[] sortedDocNames, DataOutputStream stream) throws IOException {", "+}", "+private void writeAllDocumentNames(String[] sortedDocNames, FileOutputStream stream) throws IOException {", "-\tstream.writeUTF(SIGNATURE);", "-\tthis.headerInfoOffset = stream.size();", "-\tstream.writeInt(-1); // will overwrite with correct value later", "+\twriteStreamChars(stream, SIGNATURE_CHARS);", "+\tthis.headerInfoOffset = this.streamEnd;", "+\twriteStreamInt(stream, -1); // will overwrite with correct value later", "-\t\tthis.chunkOffsets[i] = stream.size();", "+\t\tthis.chunkOffsets[i] = this.streamEnd;", "-\t\tstream.writeUTF(current);", "+\t\twriteStreamChars(stream, current.toCharArray());", "-\t\t\tstream.writeByte(start);", "-\t\t\tstream.writeByte(end);", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) start;", "+\t\t\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\tthis.bufferIndex = 0;", "+\t\t\t}", "+\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) end;", "+\t\t\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\tthis.bufferIndex = 0;", "+\t\t\t}", "+\t\t\tthis.streamEnd += 2;", "-\t\t\tstream.writeUTF(start < last ? next.substring(start, last) : \"\"); //$NON-NLS-1$", "+\t\t\twriteStreamChars(stream, (start < last ? CharOperation.subarray(next.toCharArray(), start, last) : CharOperation.NO_CHAR));", "-\tthis.startOfCategoryTables = stream.size() + 1;", "+\tthis.startOfCategoryTables = this.streamEnd + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "facb0785fa191337f0d3ffd54dac20cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": " private void writeHeaderInfo(DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeHeaderInfo(FileOutputStream stream) throws IOException", "diff": ["-private void writeHeaderInfo(DataOutputStream stream) throws IOException {", "-\tstream.writeInt(this.numberOfChunks);", "-\tstream.writeByte(this.sizeOfLastChunk);", "-\tstream.writeByte(this.documentReferenceSize);", "+private void writeHeaderInfo(FileOutputStream stream) throws IOException {", "+\twriteStreamInt(stream, this.numberOfChunks);", "+\tthis.streamBuffer[this.bufferIndex++] = (byte) this.sizeOfLastChunk;", "+\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\tthis.bufferIndex = 0;", "+\t}", "+\tthis.streamBuffer[this.bufferIndex++] = (byte) this.documentReferenceSize;", "+\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\tthis.bufferIndex = 0;", "+\t}", "+\tthis.streamEnd += 2;", "-\tfor (int i = 0; i < this.numberOfChunks; i++)", "-\t\tstream.writeInt(this.chunkOffsets[i]);", "+\tfor (int i = 0; i < this.numberOfChunks; i++) {", "+\t\twriteStreamInt(stream, this.chunkOffsets[i]);", "+\t}", "-\tstream.writeInt(this.startOfCategoryTables);", "+\twriteStreamInt(stream, this.startOfCategoryTables);", "-\tstream.writeInt(this.categoryOffsets.elementSize);", "+\twriteStreamInt(stream, this.categoryOffsets.elementSize);", "-\t\t\tUtil.writeUTF(stream, categoryNames[i]);", "-\t\t\tstream.writeInt(offsets[i]);", "+\t\t\twriteStreamChars(stream, categoryNames[i]);", "+\t\t\twriteStreamInt(stream, offsets[i]);"]}], "num": 29952}
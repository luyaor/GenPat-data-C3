{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f4b8f0795be1e4e631272d43fd67761", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e8cc1faba3edec4ce4a0979bf34a82a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/LongCache.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int get(long key)", "signatureAfterChange": " public int putIfAbsent(long key, int value)", "diff": ["- */", "-public int get(long key) {", "-\tint index = hash(key);", "-\twhile ((keyTable[index] != 0) || ((keyTable[index] == 0) &&(valueTable[index] != 0))) {", "-\t\tif (keyTable[index] == key)", "-\t\t\treturn valueTable[index];", "-\t\tindex = (index + 1) % keyTable.length;", "-\t}", "-\treturn -1;", "-}", "+ */", "+public int putIfAbsent(long key, int value) {", "+\tint index = hash(key);", "+\twhile ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {", "+\t\tif (keyTable[index] == key)", "+\t\t\treturn valueTable[index];", "+\t\tindex = (index + 1) % keyTable.length;", "+\t}", "+\tkeyTable[index] = key;", "+\tvalueTable[index] = value;", "+", "+\t// assumes the threshold is never equal to the size of the table", "+\tif (++elementSize > threshold) {", "+\t\trehash();", "+\t}", "+\treturn -value; // negative when added, assumes value is > 0", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecaac3fa02b2d3d7b833e3e72f0ab312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/IntegerCache.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int get(int key)", "signatureAfterChange": " public int putIfAbsent(int key, int value)", "diff": ["- */", "-public int get(int key) {", "-\tint index = hash(key);", "-\twhile ((keyTable[index] != 0) || ((keyTable[index] == 0) &&(valueTable[index] != 0))) {", "-\t\tif (keyTable[index] == key)", "-\t\t\treturn valueTable[index];", "-\t\tindex = (index + 1) % keyTable.length;", "-\t}", "-\treturn -1;", "-}", "+ */", "+public int putIfAbsent(int key, int value) {", "+\tint index = hash(key);", "+\twhile ((keyTable[index] != 0) || ((keyTable[index] == 0) && (valueTable[index] != 0))) {", "+\t\tif (keyTable[index] == key)", "+\t\t\treturn valueTable[index];", "+\t\tindex = (index + 1) % keyTable.length;", "+\t}", "+\tkeyTable[index] = key;", "+\tvalueTable[index] = value;", "+", "+\t// assumes the threshold is never equal to the size of the table", "+\tif (++elementSize > threshold) {", "+\t\trehash();", "+\t}", "+\treturn -value; // negative when added, assumes value is > 0", "+}"]}], "num": 58600}
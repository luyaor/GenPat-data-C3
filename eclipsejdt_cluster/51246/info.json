{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "141fc4f8c326471f3c196bc13659a1c8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ac338f456f35c91130392909c10d183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0490e8b1eeb14a2cc033060047b6bcfdf849f8a0", "commitAfterChange": "68c4f604f354a3213e3cb188ddbd758a47497f3f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic static void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container)", "signatureAfterChange": "  \tpublic synchronized void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container)", "diff": ["-", "-\tpublic static void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container){", "-", "-\t\tMap projectContainers = (Map)Containers.get(project);", "-\t\tif (projectContainers == null){", "-\t\t\tprojectContainers = new HashMap(1);", "-\t\t\tContainers.put(project, projectContainers);", "-", "-\t\tif (container == null) {", "-\t\t\tprojectContainers.remove(containerPath);", "-\t\t\tMap previousContainers = (Map)PreviousSessionContainers.get(project);", "-\t\t\tif (previousContainers != null){", "-\t\t\t\tpreviousContainers.remove(containerPath);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tprojectContainers.put(containerPath, container);", "-\t\t// do not write out intermediate initialization value", "-\t\tif (container == JavaModelManager.ContainerInitializationInProgress) {", "+\tpublic synchronized void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container){", "+", "+\t\t// set/unset the initialization in progress", "+\t\tHashSet projectInitializations = containerInitializationInProgress(project);", "+\t\tif (container == CONTAINER_INITIALIZATION_IN_PROGRESS) {", "+\t\t\tprojectInitializations.add(containerPath);", "+\t\t\t", "+\t\t\t// do not write out intermediate initialization value", "+\t\t} else {", "+\t\t\tprojectInitializations.remove(containerPath);", "+", "+\t\t\tMap projectContainers = (Map)this.containers.get(project);", "+\t\t\tif (projectContainers == null){", "+\t\t\t\tprojectContainers = new HashMap(1);", "+\t\t\t\tthis.containers.put(project, projectContainers);", "+\t\t\t}", "+\t", "+\t\t\tif (container == null) {", "+\t\t\t\tprojectContainers.remove(containerPath);", "+\t\t\t\tMap previousContainers = (Map)this.previousSessionContainers.get(project);", "+\t\t\t\tif (previousContainers != null){", "+\t\t\t\t\tpreviousContainers.remove(containerPath);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tprojectContainers.put(containerPath, container);", "+\t\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3264b7af3d7ca9734b45c97ad703d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "87dd132b690b39c22112692b2510e01020cf3c19", "commitAfterChange": "cf29dd30719608417591dd031afb88e7a13d5f98", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate static Map getOptions(IJavaProject jproject)", "signatureAfterChange": " \tprivate static Map getOptions(IJavaProject jproject)", "diff": ["-\t */", "-\tprivate static Map getOptions(IJavaProject jproject) {", "-\t\tMap options = _optionsMaps.get(jproject);", "-\t\tif (null != options) {", "-\t\t\treturn options;", "-\t\t}", "-\t\t// We didn't already have an options map for this project, so create one.", "-\t\toptions = new HashMap(AptPreferenceConstants.NSETTINGS);", "-", "-\t\t// First load workspace-wide, then overlay per-project options if possible.", "-\t\tloadWorkspaceOptions(options);", "-\t\tif (jproject.getProject() != null) {", "-\t\t\tIScopeContext context = new ProjectScope(jproject.getProject());", "-\t\t\tfinal IEclipsePreferences eclipsePreferences = context.getNode(AptPlugin.PLUGIN_ID);", "-\t\t\ttry {", "-\t\t\t\tfor (String s : eclipsePreferences.keys()) {", "-\t\t\t\t\toptions.put(s, eclipsePreferences.get(s, \"\"));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcatch (BackingStoreException e) {", "-\t\t\t\t// TODO", "-\t\t\t\te.printStackTrace();", "-\t\treturn options;", "+\t */", "+\tprivate static Map getOptions(IJavaProject jproject) {", "+\t\tMap options = _optionsMaps.get(jproject);", "+\t\tif (null != options) {", "+\t\t\treturn options;", "+\t\t}", "+\t\t// We didn't already have an options map for this project, so create one.", "+\t\tIPreferencesService service = Platform.getPreferencesService();", "+\t\t// Don't need to do this, because it's the default-default already:", "+\t\t//service.setDefaultLookupOrder(AptPlugin.PLUGIN_ID, null, lookupOrder);", "+\t\toptions = new HashMap(AptPreferenceConstants.NSETTINGS);", "+\t\tif (jproject != null) {", "+\t\t\tIScopeContext projContext = new ProjectScope(jproject.getProject());", "+\t\t\tIScopeContext[] contexts = new IScopeContext[] { projContext };", "+\t\t\tfor (String optionName : AptPreferenceConstants.OPTION_NAMES) {", "+\t\t\t\tString val = service.getString(AptPlugin.PLUGIN_ID, optionName, null, contexts);", "+\t\t\t\tif (val != null) {", "+\t\t\t\t\toptions.put(optionName, val);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\t// TODO: do we need to handle this case?", "+\t\t\treturn null;", "+\t\t}", "+\t\t", "+\t\treturn options;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a13ab649df46f92f7db474a5f97c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/BaseConfigurationBlock.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container)", "signatureAfterChange": " \t \tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container)", "diff": ["+\t", "+\tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container) {", "+\t\tfContext= context;", "+\t\tfProject= project;", "+\t\tfAllKeys= keys;", "+\t\tfContainer= container;", "+\t\t/*", "+\t\tif (container == null) {", "+\t\t\tfManager= new WorkingCopyManager();", "+\t\t} else {", "+\t\t\tfManager= container.getWorkingCopyManager();", "+\t\t}", "+\t\t*/", "+\t\t// Workaround for Bugzilla 115731 - always use our own WCM.", "+\t\tfManager = new WorkingCopyManager();", "+\t\t", "+\t\tif (fProject != null) {", "+\t\t\tfLookupOrder= new IScopeContext[] {", "+\t\t\t\tnew ProjectScope(fProject),", "+\t\t\t\tnew InstanceScope(),", "+\t\t\t\tnew DefaultScope()", "+\t\t\t};", "+\t\t} else {", "+\t\t\tfLookupOrder= new IScopeContext[] {", "+\t\t\t\tnew InstanceScope(),", "+\t\t\t\tnew DefaultScope()", "+\t\t\t};", "+\t\t}", "+\t\t", "+\t\ttestIfOptionsComplete(keys);", "+\t\tif (fProject == null || hasProjectSpecificOptions(fProject)) {", "+\t\t\tfDisabledProjectSettings= null;", "+\t\t} else {", "+\t\t\tfDisabledProjectSettings= new IdentityHashMap<Key, String>();", "+\t\t\tfor (int i= 0; i < keys.length; i++) {", "+\t\t\t\tKey curr= keys[i];", "+\t\t\t\tfDisabledProjectSettings.put(curr, curr.getStoredValue(fLookupOrder, false, fManager));", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tsettingsUpdated();", "+\t\t", "+\t\tfCheckBoxes= new ArrayList<Button>();", "+\t\tfComboBoxes= new ArrayList<Combo>();", "+\t\tfTextBoxes= new ArrayList<Text>(2);", "+\t\tfLabels= new HashMap<Scrollable, Label>();", "+\t\tfExpandedComposites= new ArrayList<ExpandableComposite>();", "+\t}", "-", "-\tpublic BaseConfigurationBlock(IStatusChangeListener context, IProject project, Key[] keys, IWorkbenchPreferenceContainer container) {", "-\t\tsuper(context, project, keys, container);", "-\t}"]}], "num": 51246}
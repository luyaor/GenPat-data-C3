{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c71089586be37c8c3d9a4dedae58e89c", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0baaddb1b77799a3f9a72b0578d47142", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5194065a29db2efb6ca399235812dc2379a0b639", "commitAfterChange": "64dc9dc143f648f63c2998f7d684fab052c282d9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r \tpublic Name convert(QualifiedNameReference nameReference)", "signatureAfterChange": "\r \r \tpublic Name convert(QualifiedNameReference nameReference)", "diff": ["-\t\t\tchar[][] typeName = nameReference.tokens;\r", "-\t\t\tint length = typeName.length;\r", "-\t\t\tString[] identifiers = new String[length];\r", "-\t\t\tfor (int index = 0; index < length; index++) {\r", "-\t\t\t\tidentifiers[index] = new String(typeName[index]);\r", "-\t\t\t}\r", "-\t\t\tName name = this.ast.newName(identifiers);\r", "-\t\t\tif (this.resolveBindings) {\r", "-\t\t\t\trecordNodes(name, nameReference);\r", "-\t\t\t}\r", "-\t\t\tname.setSourceRange(nameReference.sourceStart, nameReference.sourceEnd - nameReference.sourceStart + 1);\r", "-\t\t\treturn name;\r", "+\t\tchar[][] typeName = nameReference.tokens;\r", "+\t\tint length = typeName.length;\r", "+\t\tlong[] positions = scanAllIdentifiersPositions(nameReference.sourceStart, nameReference.sourceEnd, length);\r", "+\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));\r", "+\t\tint start0 = (int)(positions[0]>>>32);\r", "+\t\tint start = start0;\r", "+\t\tint end = (int)(positions[0] & 0xFFFFFFFF);\r", "+\t\tfirstToken.setSourceRange(start, end - start + 1);\r", "+\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));\r", "+\t\tstart = (int)(positions[1]>>>32);\r", "+\t\tend = (int)(positions[1] & 0xFFFFFFFF);\r", "+\t\tsecondToken.setSourceRange(start, end - start + 1);\r", "+\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);\r", "+\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);\r", "+\t\tSimpleName newPart;\r", "+\t\tfor (int i = 2; i < length; i++) {\r", "+\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));\r", "+\t\t\tstart = (int)(positions[i]>>>32);\r", "+\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);\r", "+\t\t\tnewPart.setSourceRange(start,  end - start + 1);\r", "+\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);\r", "+\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);\r", "+\t\t}\r", "+\t\tQualifiedName name = qualifiedName;\r", "+\t\tif (this.resolveBindings) {\r", "+\t\t\trecordNodes(name, nameReference);\r", "+\t\t}\r", "+\t\treturn name;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11b11eadae1ccbb810f0b07e5b45a8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5194065a29db2efb6ca399235812dc2379a0b639", "commitAfterChange": "64dc9dc143f648f63c2998f7d684fab052c282d9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r \tpublic Name convert(TypeReference typeReference)", "signatureAfterChange": "\r \r \tpublic Name convert(TypeReference typeReference)", "diff": ["-\t\t\tchar[][] typeName = typeReference.getTypeName();\r", "-\t\t\tint length = typeName.length;\r", "-\t\t\tString[] identifiers = new String[length];\r", "-\t\t\tfor (int index = 0; index < length; index++) {\r", "-\t\t\t\tidentifiers[index] = new String(typeName[index]);\r", "+\t\tName name;\r", "+\t\tchar[][] typeName = typeReference.getTypeName();\r", "+\t\tint length = typeName.length;\r", "+\t\tif (length > 1) {\r", "+\t\t\t// QualifiedName\r", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) typeReference;\r", "+\t\t\tlong[] positions = qualifiedTypeReference.sourcePositions;\r", "+\t\t\tSimpleName firstToken = this.ast.newSimpleName(new String(typeName[0]));\r", "+\t\t\tint start0 = (int)(positions[0]>>>32);\r", "+\t\t\tint start = start0;\r", "+\t\t\tint end = (int)(positions[0] & 0xFFFFFFFF);\r", "+\t\t\tfirstToken.setSourceRange(start, end - start + 1);\r", "+\t\t\tSimpleName secondToken = this.ast.newSimpleName(new String(typeName[1]));\r", "+\t\t\tstart = (int)(positions[1]>>>32);\r", "+\t\t\tend = (int)(positions[1] & 0xFFFFFFFF);\r", "+\t\t\tsecondToken.setSourceRange(start, end - start + 1);\r", "+\t\t\tQualifiedName qualifiedName = this.ast.newQualifiedName(firstToken, secondToken);\r", "+\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);\r", "+\t\t\tSimpleName newPart;\r", "+\t\t\tfor (int i = 2; i < length; i++) {\r", "+\t\t\t\tnewPart = this.ast.newSimpleName(new String(typeName[i]));\r", "+\t\t\t\tstart = (int)(positions[i]>>>32);\r", "+\t\t\t\tend = (int)(positions[i] & 0xFFFFFFFF);\r", "+\t\t\t\tnewPart.setSourceRange(start,  end - start + 1);\r", "+\t\t\t\tqualifiedName = this.ast.newQualifiedName(qualifiedName, newPart);\r", "+\t\t\t\tqualifiedName.setSourceRange(start0, end - start0 + 1);\r", "-\t\t\tName name = this.ast.newName(identifiers);\t\t\r", "-\t\t\tif (typeReference instanceof QualifiedTypeReference) {\r", "-\t\t\t\tlong[] positions = ((QualifiedTypeReference) typeReference).sourcePositions;\r", "-\t\t\t\tname.setSourceRange((int)(positions[0]>>>32), (int)(positions[length - 1] & 0xFFFFFFFF) - (int)(positions[0]>>>32) + 1);\r", "-\t\t\t} else {\r", "-\t\t\t\tname.setSourceRange(typeReference.sourceStart, typeReference.sourceEnd - typeReference.sourceStart + 1);\r", "-\t\t\t}\r", "-\t\t\treturn name;\r", "+\t\t\tname = qualifiedName;\r", "+\t\t} else {\r", "+\t\t\t// SimpleName\r", "+\t\t\tname = this.ast.newSimpleName(new String(typeName[0]));\r", "+\t\t\tname.setSourceRange(typeReference.sourceStart, typeReference.sourceEnd - typeReference.sourceStart + 1);\r", "+\t\t}\r", "+\t\tif (this.resolveBindings) {\r", "+\t\t\trecordNodes(name, typeReference);\r", "+\t\t}\r", "+\t\treturn name;\r"]}], "num": 12105}
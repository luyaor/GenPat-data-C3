{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d2157bfe5365612b211dfcdd9942b3f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28317dae35930a6e5511e4ecbf6ff37a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "ad30422de59b5093c5225e2a4599516c056303dc", "commitAfterChange": "c1c045ff9c256acaa6d98530fa4640b4cd80b7c6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = NotAConstant;", "+\t\tthis.constant = NotAConstant;", "-\t\texpression.setExpectedType(lhsType); // needed in case of generic method invocation", "+\t\tthis.expression.setExpectedType(lhsType); // needed in case of generic method invocation", "-\t\tTypeBinding rhsType = expression.resolveType(scope);", "+\t\tTypeBinding rhsType = this.expression.resolveType(scope);", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, lhsType)", "+\t\tif ((this.expression.isConstantValueOfTypeAssignableToType(rhsType, lhsType)", "-\t\t\texpression.computeConversion(scope, lhsType, rhsType);", "+\t\t\tthis.expression.computeConversion(scope, lhsType, rhsType);", "-\t\t} else if (scope.isBoxingCompatibleWith(rhsType, lhsType)) {", "-\t\t\texpression.computeConversion(scope, lhsType, rhsType);", "+\t\t} else if (scope.isBoxingCompatibleWith(rhsType, lhsType) ", "+\t\t\t\t\t\t\t|| (rhsType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t\t\t&& !lhsType.isBaseType()", "+\t\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(rhsType, scope.environment().computeBoxingType(lhsType)))) {", "+\t\t\tthis.expression.computeConversion(scope, lhsType, rhsType);", "-\t\tscope.problemReporter().typeMismatchError(rhsType, lhsType, expression);", "+\t\tscope.problemReporter().typeMismatchError(rhsType, lhsType, this.expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515c1c57851cdecc2e5e522e4fd77dfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "aec729ad3adcaa5e52d24a53651dd8b9e99d3639", "commitAfterChange": "44335de1fa884744b7a885d0019e36f5505aad65", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-        \tfinal boolean isStatic = someMethod.isStatic();", "-        \tif (isStatic && (this.haveReceiver || this.receiverType.isParameterizedTypeWithActualArguments())) {", "+    \t\tif (someMethod.isStatic() && (this.haveReceiver || this.receiverType.isParameterizedTypeWithActualArguments())) {", "-        \tif (!this.haveReceiver) {", "-        \t\tif (!isStatic && !someMethod.isConstructor()) {", "-        \t\t\tscope.problemReporter().methodMustBeAccessedWithInstance(this, someMethod);", "-        \t\t\treturn this.resolvedType = null;", "-        \t\t}", "-        \t} ", "-        \tif (anotherMethod != null && anotherMethod.isValidBinding() && anotherMethod.isStatic()) {", "-        \t\tscope.problemReporter().methodMustBeAccessedStatically(this, anotherMethod);", "-        \t\treturn this.resolvedType = null;", "-        \t}", "-        if (someMethod != null && someMethod.isValidBinding() && anotherMethod != null && anotherMethod.isValidBinding()) {", "+        if (someMethod != null && someMethod.isValidBinding() && someMethod.isStatic() && anotherMethod != null && anotherMethod.isValidBinding() && !anotherMethod.isStatic()) {", "-        if (someMethod != null && someMethod.isValidBinding()) {", "+        if (someMethod != null && someMethod.isValidBinding() && (anotherMethod == null || !anotherMethod.isValidBinding() || anotherMethod.isStatic())) {", "-        } else if (anotherMethod != null && anotherMethod.isValidBinding()) {", "+        \tif (!this.haveReceiver) {", "+        \t\tif (!someMethod.isStatic() && !someMethod.isConstructor()) {", "+        \t\t\tscope.problemReporter().methodMustBeAccessedWithInstance(this, someMethod);", "+        \t\t\treturn this.resolvedType = null;", "+        \t\t}", "+        \t} ", "+        } else if (anotherMethod != null && anotherMethod.isValidBinding() && (someMethod == null || !someMethod.isValidBinding() || !someMethod.isStatic())) {", "+        \tif (anotherMethod.isStatic()) {", "+        \t\tscope.problemReporter().methodMustBeAccessedStatically(this, anotherMethod);", "+        \t\treturn this.resolvedType = null;", "+        \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb754c4e5cbcd66b77994d14e4911233", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": " \t \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["+\t\t", "+\t\tboolean proposeType = !this.requestor.isIgnored(CompletionProposal.TYPE_REF);", "+\t\t", "-\t\tif (scope.enclosingSourceType() != null) {", "+\t\tif (proposeType && scope.enclosingSourceType() != null) {", "-\t\tif (this.unitScope != null) {", "+\t\tif (proposeType && this.unitScope != null) {", "-\t\tthis.findTypesFromStaticImports(token, scope, typesFound);", "+\t\tif(proposeType) {", "+\t\t\tthis.findTypesFromStaticImports(token, scope, typesFound);", "+\t\t}", "-\t\t\tif(this.expectedTypesPtr > -1) {", "+\t\t\tif(proposeType && this.expectedTypesPtr > -1) {", "-\t\t\tfindKeywords(token, baseTypes);", "-\t\t\tthis.nameEnvironment.findTypes(token, this);", "-\t\t\tthis.nameEnvironment.findPackages(token, this);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\tfindKeywords(token, baseTypes);", "+\t\t\t}", "+\t\t\tif(proposeType) {", "+\t\t\t\tthis.nameEnvironment.findTypes(token, this);", "+\t\t\t}", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\t\tthis.nameEnvironment.findPackages(token, this);", "+\t\t\t}"]}], "num": 49314}
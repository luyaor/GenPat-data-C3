{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e36e0570bad7e830b4ff9796f89a2bf3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8c092eccfbfbc6a989beac43120b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "b736a4b7b5e36e43e9911cb920eaa27b719a1739", "commitAfterChange": "f7ef9224b59ac5e8fd98d69dbf74c94b4c3ba7fe", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException", "signatureAfterChange": " \tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException", "diff": ["-\t\tINameEnvironment wrappedEnvironment;", "-\t\t\twrappedEnvironment = project.getSearchableNameEnvironment();", "+\t\t\tthis.nameEnvironment = project.getSearchableNameEnvironment();", "-\t\t\twrappedEnvironment = new ClasspathNameEnvironment(project);", "+\t\t\tthis.nameEnvironment = new JavaSearchNameEnvironment2(project);", "-\t\tthis.nameEnvironment = new JavaSearchNameEnvironment2(wrappedEnvironment, potentialMatches);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34414d77b99ae835350936d00614c541", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java", "commitBeforeChange": "357e7f80c15f23eab4aa968e46d39c66d6f56a92", "commitAfterChange": "8164609d0329b8e1757d2e11bb01a0c925e98561", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t \tpublic static TextEdit formatString(int kind, String string, int indentationLevel, String lineSeparator, Map options)", "signatureAfterChange": " \t\t \tpublic TextEdit formatString(int kind, String string, int offset, int length, int indentationLevel)", "diff": ["-\tpublic static TextEdit formatString(int kind, String string, int indentationLevel, String lineSeparator, Map options) {", "-\t\treturn ToolFactory.createCodeFormatter(options).format(kind, string, 0, string.length(), indentationLevel, lineSeparator);", "+\tpublic TextEdit formatString(int kind, String string, int offset, int length, int indentationLevel) {", "+\t\treturn ToolFactory.createCodeFormatter(this.options).format(kind, string, offset, length, indentationLevel, this.lineDelimiter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f16f23418776c5d6dd97de235b9a48d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "90e98ea747dd40944691567191de48b8385bc592", "commitAfterChange": "c5659478737cfb72ca02f096294cf83949ad2a06", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void propagateErrors(ASTNode astNode, CategorizedProblem[] problems, RecoveryScannerData data)", "signatureAfterChange": "  \tprivate void propagateErrors(ASTNode astNode, CategorizedProblem[] problems, RecoveryScannerData data)", "diff": ["-\t\tASTSyntaxErrorPropagator syntaxErrorPropagator = new ASTSyntaxErrorPropagator(problems);", "-\t\tastNode.accept(syntaxErrorPropagator);", "-\t\tASTRecoveryPropagator recoveryPropagator = new ASTRecoveryPropagator(problems, data);", "-\t\tastNode.accept(recoveryPropagator);", "+\t\tastNode.accept(new ASTSyntaxErrorPropagator(problems));", "+\t\tif (data != null) {", "+\t\t\tastNode.accept(new ASTRecoveryPropagator(problems, data));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa06e4eb5f0474da21a6a3a36fb04f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tMap settings, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tboolean creatingAST, \t\tboolean statementsRecovery)", "signatureAfterChange": " \tprotected CompilationUnitProblemFinder( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tCompilerOptions compilerOptions, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory)", "diff": ["-\t\tMap settings,", "+\t\tCompilerOptions compilerOptions,", "-\t\tIProblemFactory problemFactory,", "-\t\tboolean creatingAST,", "-\t\tboolean statementsRecovery) {", "+\t\tIProblemFactory problemFactory) {", "-\t\t\tsettings,", "+\t\t\tcompilerOptions,", "-\t\t\tproblemFactory,", "-\t\t\t!creatingAST/*parse literal expressions as constants only if not creating a DOM AST*/,", "-\t\t\tcreatingAST/*store annotations in the bindings if creating a DOM AST*/,", "-\t\t\tstatementsRecovery/*perform statements recovery during parse if creating a DOM AST*/", "+\t\t\tproblemFactory"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4694cb834da1d7244d38e8dfe048a42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "da9e30a8d441a1da42a289d2606f77eaa8d811d1", "commitAfterChange": "ba5344094af5a10113083e490b48587602f0a697", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public HierarchyResolver(INameEnvironment nameEnvironment, Map settings, IHierarchyRequestor requestor, IProblemFactory problemFactory)", "signatureAfterChange": " public HierarchyResolver(LookupEnvironment lookupEnvironment, IHierarchyRequestor requestor)", "diff": ["-}", "-\tthis(", "-\t\tnameEnvironment,", "-\t\tDefaultErrorHandlingPolicies.exitAfterAllProblems(),", "-\t\tsettings,", "-\t\trequestor,", "-\t\tproblemFactory);", "+}", "+public HierarchyResolver(LookupEnvironment lookupEnvironment, IHierarchyRequestor requestor) {", "+\tthis.initialize(lookupEnvironment, requestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac83e3eb8d22352cbd2548e2c966ada5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/WorkingCopyCleanupListener.java", "commitBeforeChange": "4a9dbcb223c65a26348db68f3ba0775c9668cb28", "commitAfterChange": "ea8e63f616ba93be45fa6f7194a531b08059ef99", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate void processElementDelta( IJavaElementDelta delta )", "signatureAfterChange": " \t \tprivate void processElementDelta( IJavaElementDelta delta )", "diff": ["-\t\t\t//", "-\t\t\t// cu.isWorkingCopy() doesn't work here.  For back-compat reasons, that always returns ", "-\t\t\t// true for non-primary working copies, so we use the following test to see if a working copy", "-\t\t\t// has been discarded.", "-\t\t\t//", "-\t\t\t// TODO:  remove reference to jdt-internal class", "-\t\t\t//", "-\t\t\torg.eclipse.jdt.internal.core.CompilationUnit cu2 = (org.eclipse.jdt.internal.core.CompilationUnit)cu;\t\t\t", "-\t\t\tboolean workingCopyDiscarded = cu2.isPrimary() ? !cu.isWorkingCopy() : cu2.getPerWorkingCopyInfo() == null;", "-", "+\t\t\tboolean workingCopyDiscarded = ", "+\t\t\t\tcu.getOwner() == null ? !cu.isWorkingCopy() : !cu.exists();", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc22676ceff8f6c8931314b7292144d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\tMap workingCopies = (Map) this.unitsToLookInside.get();", "-\t\tif (workingCopies != null && (workingCopiesSize = workingCopies.size()) > 0) {", "+\t\tif (this.unitsToLookInside != null && (workingCopiesSize = this.unitsToLookInside.size()) > 0) {", "-\t\t\ttemp.putAll(workingCopies);", "+\t\t\ttemp.putAll(this.unitsToLookInside);"]}], "num": 54631}
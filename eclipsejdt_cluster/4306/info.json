{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ab2b616431a1bef98fed26c41acf411", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160815a10b30cb52a284dc039ef4dc52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "33e03339ed2881c9f793c3a49497633bbac5c8a8", "commitAfterChange": "09c3f545375b31028657f0b8044c5cbcb5324abc", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 124, "signatureBeforeChange": " protected void consumeToken(int token)", "signatureAfterChange": " protected void consumeToken(int token)", "diff": ["+\t\t\t\t\tcase K_INSIDE_ASSERT_EXCEPTION :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_ASSERT_EXCEPTION);", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_ASSERT_STATEMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_CONDITIONAL_OPERATOR", "-\t\t\t\t\t&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == QUESTION) {", "-\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "-\t\t\t\t\tpushOnElementStack(K_CONDITIONAL_OPERATOR, COLON);", "-\t\t\t\t} else {", "-\t\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_CASE_AND_COLON) {", "+\t\t\t\tswitch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "+\t\t\t\t\tcase K_CONDITIONAL_OPERATOR:", "+\t\t\t\t\t\tif (topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == QUESTION) {", "+\t\t\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "+\t\t\t\t\t\t\tpushOnElementStack(K_CONDITIONAL_OPERATOR, COLON);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_CASE_AND_COLON:", "-\t\t\t\t\t} else {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_DEFAULT_AND_COLON:", "-\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_INSIDE_ASSERT_STATEMENT:", "+\t\t\t\t\t\tpushOnElementStack(K_INSIDE_ASSERT_EXCEPTION, this.bracketDepth);", "+\t\t\t\t\t\tbreak;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3484d7d434bc5331a2bbd4e1da283e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "966a22346960ea60743eaef27c799d23dc7b9bd3", "commitAfterChange": "89566b19098686deffb54767a28967337579ef90", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": " \t \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["-\t\t\tif (binding == lastFieldBinding", "+\t\t\tif (otherBindingsCount == 0", "-\t\t\tif (lastFieldBinding == binding){", "-\t\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t\t} else if (otherBindingsCount == 1){", "-\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "-\t\t\t} else {", "-\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\t\tswitch (otherBindingsCount) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tlastReceiverType = this.actualReceiverType;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\t\t\t\tbreak;", "-\t\t\t\tlastFieldBinding == binding", "-\t\t\t\t\t? 0 ", "-\t\t\t\t\t: otherBindingsCount, ", "+\t\t\t\totherBindingsCount, ", "-\t\tif (lastFieldBinding == binding){", "-\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t} else if (otherBindingsCount == 1){", "-\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "-\t\t} else {", "-\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\tswitch (otherBindingsCount) {", "+\t\t\tcase 0 :", "+\t\t\t\tlastReceiverType = this.actualReceiverType;", "+\t\t\t\tbreak;", "+\t\t\tcase 1 :", "+\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60435096282c661730433e28cbcc68e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "689d1c5ebca4843f31f4f4e1dc3ea53436cbc89c", "commitAfterChange": "709c9629c7ca5e9f5f62caafc7b62b1f650d3793", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t\t \t\tvoid skipMethodSignature()", "signatureAfterChange": " \t\t \t\tvoid skipMethodSignature()", "diff": ["-\t\t\tchar currentChar;", "-\t\t\twhile (this.index < this.source.length && (currentChar = this.source[this.index]) != '#' && currentChar != '%')", "+\t\t\tint braket = 0;", "+\t\t\twhile (this.index < this.source.length) {", "+\t\t\t\tswitch (this.source[this.index]) {", "+\t\t\t\t\tcase '#':", "+\t\t\t\t\tcase '%':", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tcase ':':", "+\t\t\t\t\t\tif (braket == 0)", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '<':", "+\t\t\t\t\tcase '(':", "+\t\t\t\t\t\tbraket++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '>':", "+\t\t\t\t\tcase ')':", "+\t\t\t\t\t\tbraket--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b7e77885635e0c9a355801c1e971ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c0f9d8b84abc89ce64134386f4c44ab56579df25", "commitAfterChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " private static int appendClassTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "signatureAfterChange": " private static int appendClassTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "diff": ["-\t\tif (c == C_SEMICOLON) {", "-\t\t\t// all done", "-\t\t\treturn p;", "-\t\t} else if (c == C_GENERIC_START) {", "-\t\t\tint e = appendTypeArgumentSignatures(string, p, fullyQualifyTypeNames, buffer);", "-\t\t\t// once we hit type arguments there are no more package prefixes", "-\t\t\tremovePackageQualifiers = false;", "-\t\t\tp = e;", "-\t\t} else if (c == C_DOT || c == '/') {", "-\t\t\tif (removePackageQualifiers) {", "-\t\t\t\t// erase package prefix", "-\t\t\t\tbuffer.setLength(checkpoint);", "-\t\t\t} else {", "-\t\t\t\tbuffer.append('.');", "-\t\t\t}", "-\t\t} else if (c == C_DOLLAR && resolved) {", "-\t\t\t// once we hit \"$\" there are no more package prefixes", "-\t\t\tremovePackageQualifiers = false;", "-\t\t\t/**", "-\t\t\t * Convert '$' in resolved type signatures into '.'.", "-\t\t\t * NOTE: This assumes that the type signature is an inner type", "-\t\t\t * signature. This is true in most cases, but someone can define a", "-\t\t\t * non-inner type name containing a '$'.", "-\t\t\t */", "-\t\t\tbuffer.append('.');", "-\t\t} else {", "-\t\t\tbuffer.append(c);", "+\t\tswitch(c) {", "+\t\t\tcase C_SEMICOLON :", "+\t\t\t\t// all done", "+\t\t\t\treturn p;", "+\t\t\tcase C_GENERIC_START :", "+\t\t\t\tint e = appendTypeArgumentSignatures(string, p, fullyQualifyTypeNames, buffer);", "+\t\t\t\t// once we hit type arguments there are no more package prefixes", "+\t\t\t\tremovePackageQualifiers = false;", "+\t\t\t\tp = e;", "+\t\t\t\tbreak;", "+\t\t\tcase C_DOT :", "+\t\t\t\tif (removePackageQualifiers) {", "+\t\t\t\t\t// erase package prefix", "+\t\t\t\t\tbuffer.setLength(checkpoint);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append('.');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t case '/' :", "+\t\t\t\tif (removePackageQualifiers) {", "+\t\t\t\t\t// erase package prefix", "+\t\t\t\t\tbuffer.setLength(checkpoint);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append('/');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t case C_DOLLAR :", "+\t\t\t \tif (resolved) {", "+\t\t\t\t\t// once we hit \"$\" there are no more package prefixes", "+\t\t\t\t\tremovePackageQualifiers = false;", "+\t\t\t\t\t/**", "+\t\t\t\t\t * Convert '$' in resolved type signatures into '.'.", "+\t\t\t\t\t * NOTE: This assumes that the type signature is an inner type", "+\t\t\t\t\t * signature. This is true in most cases, but someone can define a", "+\t\t\t\t\t * non-inner type name containing a '$'.", "+\t\t\t\t\t */", "+\t\t\t\t\tbuffer.append('.');", "+\t\t\t \t}", "+\t\t\t \tbreak;", "+\t\t\t default :", "+\t\t\t\tbuffer.append(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e92cef8879e0b190f4ae9b82b3ef80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "2c216d62729c7bf0a533819d86bda0a688a39a26", "commitAfterChange": "789f8ee3dc78aa2cb74e4e857fb2da09cf6b5b4e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\tif (visiblesCount == 1) {", "-\t\t\t\tif (searchForDefaultAbstractMethod)", "-\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\t\treturn candidates[0];", "-\t\t\t}", "-\t\t\tif (visiblesCount == 0) {", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "-\t\t\t\treturn new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, ProblemReasons.NotVisible);", "+\t\t\tswitch (visiblesCount) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "+\t\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\t\t\treturn new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, ProblemReasons.NotVisible);", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tif (searchForDefaultAbstractMethod)", "+\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "+\t\t\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "+\t\t\t\t\treturn candidates[0];", "+\t\t\t\tdefault :", "+\t\t\t\t\tbreak;", "-\t\t\t\tMethodBinding current = candidates[i];", "-\t\t\t\tif (current instanceof ParameterizedGenericMethodBinding)", "-\t\t\t\t\tcurrent = ((ParameterizedGenericMethodBinding) current).originalMethod;", "-\t\t\t\tif (current instanceof ParameterizedMethodBinding)", "-\t\t\t\t\tfor (int j = i + 1; j < visiblesCount; j++)", "-\t\t\t\t\t\tif (current.declaringClass == candidates[j].declaringClass && current.areParametersEqual(candidates[j]))", "+\t\t\t\tMethodBinding candidate = candidates[i];", "+\t\t\t\tif (candidate instanceof ParameterizedGenericMethodBinding)", "+\t\t\t\t\tcandidate = ((ParameterizedGenericMethodBinding) candidate).originalMethod;", "+\t\t\t\tif (candidate instanceof ParameterizedMethodBinding)", "+\t\t\t\t\tfor (int j = i + 1; j < visiblesCount; j++) {", "+\t\t\t\t\t\tMethodBinding otherCandidate = candidates[j];", "+\t\t\t\t\t\tif (otherCandidate == candidate ", "+\t\t\t\t\t\t\t\t|| (candidate.declaringClass == otherCandidate.declaringClass && candidate.areParametersEqual(otherCandidate))) {", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 4306}
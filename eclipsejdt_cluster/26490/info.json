{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26e37b1ecb74387c9c803195f565705e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2690cc2d188f3468199df1d039d16f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "diff": ["+\t\tlong a1, a2, a3, a4, na2;", "+\t\t\tif (((mask = 1L << position) ", "+\t\t\t\t& (a1 = this.nullBit1)", "+\t\t\t\t& (na2 = ~(a2 = this.nullBit2))", "+\t\t\t\t& ~(a3 = this.nullBit3)", "+\t\t\t\t& (a4 = this.nullBit4))", "+\t\t\t\t\t!= 0) {", "+\t\t\t  \tthis.nullBit4 &= ~mask;", "+\t\t\t} else if ((mask & a1 & na2 & a3) == 0) {", "+\t\t\t  \tthis.nullBit4 |= mask;", "+\t\t\t  \tif ((mask & a1) == 0) {", "+\t\t\t  \t  \tif ((mask & a2 & (a3 ^ a4)) != 0) {", "+\t\t\t  \t  \t  \tthis.nullBit2 &= ~mask;", "+\t\t\t  \t  \t}", "+\t\t\t  \t  \telse if ((mask & (a2 | a3 | a4)) == 0) {", "+\t\t\t  \t  \t  \tthis.nullBit2 |= mask;", "+\t\t\t  \t  \t}", "+\t\t\t  \t}", "+\t\t\tthis.nullBit1 |= mask;", "+\t\t\tthis.nullBit3 |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 15) {", "+\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 16) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 16\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 17) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 17\"); //$NON-NLS-1$", "+\t\t\t// MACRO :'b,'es/nullBit\\(.\\)/extra[\\1 + 1][vectorIndex]/gc", "+\t\t\tif (((mask = 1L << (position % BitCacheSize)) ", "+  \t\t\t\t& (a1 = this.extra[1 + 1][vectorIndex])", "+  \t\t\t\t& (na2 = ~(a2 = this.extra[2 + 1][vectorIndex]))", "+  \t\t\t\t& ~(a3 = this.extra[3 + 1][vectorIndex])", "+  \t\t\t\t& (a4 = this.extra[4 + 1][vectorIndex]))", "+  \t\t\t\t\t!= 0) {", "+  \t\t\t  \tthis.extra[4 + 1][vectorIndex] &= ~mask;", "+  \t\t\t} else if ((mask & a1 & na2 & a3) == 0) {", "+  \t\t\t  \tthis.extra[4 + 1][vectorIndex] |= mask;", "+  \t\t\t  \tif ((mask & a1) == 0) {", "+  \t\t\t  \t  \tif ((mask & a2 & (a3 ^ a4)) != 0) {", "+  \t\t\t  \t  \t  \tthis.extra[2 + 1][vectorIndex] &= ~mask;", "+  \t\t\t  \t  \t}", "+  \t\t\t  \t  \telse if ((mask & (a2 | a3 | a4)) == 0) {", "+  \t\t\t  \t  \t  \tthis.extra[2 + 1][vectorIndex] |= mask;", "+  \t\t\t  \t  \t}", "+  \t\t\t  \t}", "+  \t\t\t}", "+  \t\t\tthis.extra[1 + 1][vectorIndex] |= mask;", "+  \t\t\tthis.extra[3 + 1][vectorIndex] |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 18) {", "+\t\t\t  \tthis.extra[5][vectorIndex] = ~0;", "-\t\tlong mask, unknownAssigned;", "-\t\t\tmask = 1L << position;", "-\t\t\tif ((mask & // leave assigned null unchanged", "-\t\t\t\t\tthis.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\tthis.nullAssignmentValueBit1 &", "-\t\t\t\t\t~this.nullAssignmentValueBit2) == 0) {", "-\t\t\t\tunknownAssigned = this.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\tthis.nullAssignmentValueBit1 &", "-\t\t\t\t\tthis.nullAssignmentValueBit2;", "-\t\t\t\t// set protected", "-\t\t\t\tthis.nullAssignmentStatusBit2 |= mask;", "-\t\t\t\tthis.nullAssignmentStatusBit1 &= (mask = ~mask);", "-\t\t\t\t// protected is null", "-\t\t\t\tthis.nullAssignmentValueBit1 &= mask | ~unknownAssigned;", "-\t\t\t\tthis.nullAssignmentValueBit2 &= mask;", "-\t\t\t\t// clear potential anything but null", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 24) {", "-\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\t}", "-\t\t\tif (coverageTestFlag && coverageTestId == 25) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 26) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 26\"); //$NON-NLS-1$", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 27) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 27\"); //$NON-NLS-1$", "-\t\t\tif ((mask &", "-\t\t\t\t\tthis.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\tthis.extra[4][vectorIndex] &", "-\t\t\t\t\t~this.extra[5][vectorIndex]) == 0) {", "-\t\t\t\tunknownAssigned = this.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\tthis.extra[4][vectorIndex] &", "-\t\t\t\t\tthis.extra[5][vectorIndex];", "-\t\t\t\tthis.extra[3][vectorIndex]\t |= mask;", "-\t\t\t\tthis.extra[2][vectorIndex] &= (mask = ~mask);", "-\t\t\t\tthis.extra[4][vectorIndex] &= mask | ~unknownAssigned;", "-\t\t\t\tthis.extra[5][vectorIndex]\t&= mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 28) {", "-\t\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5508d6f071fcfcc209e7b35281b96ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public UnconditionalFlowInfo mitigateNullInfoOf(FlowInfo flowInfo)", "signatureAfterChange": " public UnconditionalFlowInfo mitigateNullInfoOf(FlowInfo flowInfo)", "diff": ["-//\t// Reference implementation", "-//\tUnconditionalFlowInfo source = flowInfo.unconditionalCopy();", "-//\tlong mask;", "-//\t// clear uncompatible protections", "-//\tmask = source.nullAssignmentStatusBit1 & source.nullAssignmentStatusBit2", "-//\t\t\t// prot. non null", "-//\t\t& (this.nullAssignmentStatusBit1 | this.nullAssignmentValueBit1);", "-//\t\t\t// null or unknown", "-//\tsource.nullAssignmentStatusBit1 &= ~mask;", "-//\tsource.nullAssignmentStatusBit2 &= ~mask;", "-//\tmask = ~source.nullAssignmentStatusBit1 & source.nullAssignmentStatusBit2", "-//\t\t\t// prot. null", "-//\t\t& (this.nullAssignmentStatusBit2 | this.nullAssignmentValueBit1", "-//\t\t\t\t| this.nullAssignmentValueBit2);", "-//\t\t\t// non null or unknown", "-//\tsource.nullAssignmentStatusBit2 &= ~mask;", "-//\t// clear uncompatible assignments", "-//\tmask = source.nullAssignmentStatusBit1 & ~source.nullAssignmentStatusBit2", "-//\t\t& (source.nullAssignmentValueBit1 & ~source.nullAssignmentValueBit2 ", "-//\t\t\t\t& (this.nullAssignmentStatusBit2 | this.nullAssignmentValueBit1", "-//\t\t\t\t\t\t| this.nullAssignmentValueBit2)", "-//\t\t\t| ~source.nullAssignmentValueBit1 & source.nullAssignmentValueBit2", "-//\t\t\t\t& (this.nullAssignmentStatusBit1 | this.nullAssignmentValueBit1)", "-//\t\t\t| source.nullAssignmentValueBit1 & source.nullAssignmentValueBit2", "-//\t\t\t\t& (this.nullAssignmentStatusBit1));", "-//\tsource.nullAssignmentStatusBit1 &= ~mask;", "-\tlong m1, m2, m3, a1, a2, a3, a4, s1, s2, s3, s4;", "+\tlong m, m1, nm1, m2, nm2, m3, a2, a3, a4, s1, s2, ns2, s3, ns3, s4, ns4;", "-\t// clear uncompatible protections", "-\tm1 = (s1 = source.nullAssignmentStatusBit1) ", "-\t\t\t& (s2 = source.nullAssignmentStatusBit2)", "+\t// clear incompatible protections", "+\tm1 = (s1 = source.nullBit1) & (s3 = source.nullBit3) ", "+\t\t\t\t& (s4 = source.nullBit4)", "-\t\t& ((a1 = this.nullAssignmentStatusBit1)", "-\t\t\t\t| (a3 = this.nullAssignmentValueBit1));", "+\t\t& ((a2 = this.nullBit2) | (a4 = this.nullBit4));", "-\tm2 = ~s1 & s2", "+\tm2 = s1 & (s2 = this.nullBit2) & (s3 ^ s4)", "-\t\t& ((a2 = this.nullAssignmentStatusBit2) | a3", "-\t\t\t\t| (a4 = this.nullAssignmentValueBit2));", "+\t\t& ((a3 = this.nullBit3) | a4);", "-\t// clear uncompatible assignments", "-\tm3 = s1 & ~s2", "-\t\t& ((s3 = source.nullAssignmentValueBit1) ", "-\t\t\t\t& ~(s4 = source.nullAssignmentValueBit2) ", "-\t\t\t\t& (a2 | a3 | a4)", "-\t\t\t\t\t| s4 & (~s3 & a3 | a1));", "-\tif ((m1 | m2 | m3) != 0) {", "+\t// clear incompatible assignments", "+\t// PREMATURE check effect of protected non null (no NPE on call)", "+\t// TODO (maxime) code extensive implementation tests", "+\tm3 = s1\t& (s2 & (ns3 = ~s3) & (ns4 = ~s4) & (a3 | a4)", "+\t\t\t\t| (ns2 = ~s2) & s3 & ns4 & (a2 | a4)", "+\t\t\t\t| ns2 & ns3 & s4 & (a2 | a3)); ", "+\tif ((m = (m1 | m2 | m3)) != 0) {", "-\t\tsource.nullAssignmentStatusBit1 &= ~(m1 | m3);", "-\t\tsource.nullAssignmentStatusBit2 &= ~(m1 | m2);", "+\t\tsource.nullBit1 &= ~m;", "+\t\tsource.nullBit2 &= (nm1 = ~m1) & ((nm2 = ~m2) | a4);", "+\t\tsource.nullBit3 &= (nm1 | a2) & nm2;", "+\t\tsource.nullBit4 &= nm1 & nm2;", "-\t\t\t// clear uncompatible protections", "-\t\t\tm1 = (s1 = source.extra[2][i]) & (s2 = source.extra[3][i])", "-\t\t\t\t\t// prot. non null", "-\t\t\t\t& ((a1 = this.extra[2][i]) | (a3 = this.extra[4][i]));", "-\t\t\t\t\t// null or unknown", "-\t\t\tm2 = ~s1 & s2", "-\t\t\t\t\t// prot. null", "-\t\t\t\t& ((a2 = this.extra[3][i]) | a3", "-\t\t\t\t\t\t| (a4 = this.extra[5][i]));", "-\t\t\t\t\t// non null or unknown", "-\t\t\t// clear uncompatible assignments", "-\t\t\tm3 = s1 & ~s2", "-\t\t\t\t& ((s3 = source.extra[4][i]) & ~(s4 = source.extra[5][i]) ", "-\t\t\t\t\t\t& (a2 | a3 | a4)", "-\t\t\t\t\t| s4 & (~s3 & a3 | a1));", "-\t\t\tif ((m1 | m2 | m3) != 0) {", "-\t\t\t\tif (!newCopy) {", "-\t\t\t\t\tnewCopy = true;", "-\t\t\t\t\tsource = source.unconditionalCopy();", "-\t\t\t\t}", "-\t\t\t\tsource.extra[2][i] &= ~(m1 | m3);", "-\t\t\t\tsource.extra[3][i] &= ~(m1 | m2);", "-\t\t\t}", "+        \tm1 = (s1 = source.extra[1 + 1][i]) & (s3 = source.extra[3 + 1][i]) ", "+        \t\t\t\t& (s4 = source.extra[4 + 1][i])", "+        \t\t& ((a2 = this.extra[2 + 1][i]) | (a4 = this.extra[4 + 1][i]));", "+        \tm2 = s1 & (s2 = this.extra[2 + 1][i]) & (s3 ^ s4)", "+        \t\t& ((a3 = this.extra[3 + 1][i]) | a4);", "+        \tm3 = s1\t& (s2 & (ns3 = ~s3) & (ns4 = ~s4) & (a3 | a4)", "+        \t\t\t\t| (ns2 = ~s2) & s3 & ns4 & (a2 | a4)", "+        \t\t\t\t| ns2 & ns3 & s4 & (a2 | a3)); ", "+        \tif ((m = (m1 | m2 | m3)) != 0) {", "+        \t  \tif (! newCopy) {", "+            \t\tnewCopy = true;", "+            \t\tsource = source.unconditionalCopy();", "+        \t  \t}", "+        \t\tsource.extra[1 + 1][i] &= ~m;", "+        \t\tsource.extra[2 + 1][i] &= (nm1 = ~m1) & ((nm2 = ~m2) | a4);", "+        \t\tsource.extra[3 + 1][i] &= (nm1 | a2) & nm2;", "+        \t\tsource.extra[4 + 1][i] &= nm1 & nm2;", "+        \t}"]}], "num": 26490}
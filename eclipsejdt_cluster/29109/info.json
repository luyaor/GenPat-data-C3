{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58f52f8fdef683a31027a27d3a56ec1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82015eac2294b47ae986aefae7538ddb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "63e1f1decc43a525e62efd06af41afe94624af82", "commitAfterChange": "75e4065d4db8d1c67a280c4b46e8853fada67561", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "signatureAfterChange": " \tpublic Map getOptions(boolean inheritJavaCoreOptions)", "diff": ["-\t\t", "-\t\t// Get cached preferences if exist", "-\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "-\t\tif (inheritJavaCoreOptions) {", "-\t\t\ttry {", "-\t\t\t\tperProjectInfo = getPerProjectInfo();", "-\t\t\t\tif (perProjectInfo.options != null) {", "-\t\t\t\t\treturn new Hashtable(perProjectInfo.options);", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t// skip", "-\t\t\t}", "-\t\t}", "-\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "-\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "+\t\t// Get project specific options", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "+\t\tHashtable projectOptions = null;", "-\t\t", "-\t\t// project cannot hold custom preferences set to their default, as it uses CUSTOM_DEFAULT_OPTION_VALUE", "-", "-\t\t// get custom preferences not set to their default", "-\t\t\tString[] propertyNames = projectPreferences.keys();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tString value = projectPreferences.get(propertyName, null);", "-\t\t\t\tif (value != null && optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, value.trim());", "-\t\t\t\t}", "-\t\t\t}\t\t", "+\t\t\tperProjectInfo = getPerProjectInfo();", "+\t\t\tprojectOptions = perProjectInfo.options;", "+\t\t\tif (projectOptions == null) {", "+\t\t\t\t// get eclipse preferences", "+\t\t\t\tIEclipsePreferences projectPreferences= getEclipsePreferences();", "+\t\t\t\tif (projectPreferences == null) return options; // cannot do better (non-Java project)", "+\t\t\t\t// create project options", "+\t\t\t\tString[] propertyNames = projectPreferences.keys();", "+\t\t\t\tprojectOptions = new Hashtable(propertyNames.length);", "+\t\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "+\t\t\t\t\tString propertyName = propertyNames[i];", "+\t\t\t\t\tString value = projectPreferences.get(propertyName, null);", "+\t\t\t\t\tif (value != null && optionNames.contains(propertyName)){", "+\t\t\t\t\t\tprojectOptions.put(propertyName, value.trim());", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t", "+\t\t\t\t// cache project options", "+\t\t\t\tperProjectInfo.options = projectOptions;", "+\t\t\t}", "+\t\t} catch (JavaModelException jme) {", "+\t\t\tprojectOptions = new Hashtable();", "-\t\t\t// nothing to do", "+\t\t\tprojectOptions = new Hashtable();", "-\t\t// Cache computed map", "-\t\tif (perProjectInfo != null) {", "-\t\t\tperProjectInfo.options = options;", "+\t\t// Inherit from JavaCore options if specified", "+\t\tif (inheritJavaCoreOptions) {", "+\t\t\tIterator propertyNames = projectOptions.keySet().iterator();", "+\t\t\twhile (propertyNames.hasNext()) {", "+\t\t\t\tString propertyName = (String) propertyNames.next();", "+\t\t\t\tString propertyValue = (String) perProjectInfo.options.get(propertyName);", "+\t\t\t\tif (propertyValue != null && optionNames.contains(propertyName)){", "+\t\t\t\t\toptions.put(propertyName, propertyValue.trim());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn options;", "-\t\treturn options;", "+\t\treturn projectOptions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efe53c9837da1ff572cdc3ad8032dde5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t */", "+\tpublic Object getElementInfo(IProgressMonitor monitor) throws JavaModelException {", "-\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "-\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "-\t\tIJavaProject project = getJavaProject();", "-\t\tif (project != null && !project.isOpen()) {", "-\t\t\t// TODO: (jerome) need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "-\t\t\ttry {", "-\t\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project is not accessible or is not a java project", "-\t\t\t}", "-\t\t}", "-", "-\t\t// element info creation is done inside a lock on the JavaModelManager", "-\t\tJavaModelManager manager;", "-\t\tsynchronized(manager = JavaModelManager.getJavaModelManager()){", "-\t\t\tObject info = manager.getInfo(this);", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tObject info = manager.getInfo(this);", "+\t\tif (info != null) return info;", "+\t\t", "+\t\tboolean hadTemporaryCache = manager.hasTemporaryCache();", "+\t\ttry {", "+\t\t\tHashMap newElements = manager.getTemporaryCache();", "+\t\t\tinfo = openWhenClosed(newElements, monitor);", "-\t\t\t\topenHierarchy();", "-\t\t\t\tinfo= manager.getInfo(this);", "-\t\t\t\tif (info == null) {", "-\t\t\t\t\tthrow newNotPresentException();", "+\t\t\t\t// close any buffer that was opened for the new elements", "+\t\t\t\tIterator iterator = newElements.keySet().iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "+\t\t\t\t\tif (element instanceof Openable) {", "+\t\t\t\t\t\t((Openable)element).closeBuffer();", "+\t\t\t\t\t}", "+\t\t\t\tthrow newNotPresentException();", "-\t\t\treturn info;", "+\t\t\tif (!hadTemporaryCache) {", "+\t\t\t\tmanager.putInfos(this, newElements);", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tif (!hadTemporaryCache) {", "+\t\t\t\tmanager.resetTemporaryCache();", "+\t\t\t}", "+", "+\t\treturn info;"]}], "num": 29109}
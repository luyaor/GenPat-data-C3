{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a603af83856800d150c99c712b7754dd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea8aa22022bbe4891e43c36cea789d92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "11204112fa5839fef68c4b511b3aece9ba6627e4", "commitAfterChange": "cefc7f3f8677282aa49e610700500999ffcaffcb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (expressionType != null && checkedType != null && NullAnnotationMatching.analyse(checkedType, expressionType, -1).isAnyMismatch()) {", "-\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);", "+\tif (expressionType != null && checkedType != null && checkedType.hasNullTypeAnnotations()) {", "+\t\t// don't complain if the entire operation is redundant anyway", "+\t\tif (!expressionType.isCompatibleWith(checkedType) || NullAnnotationMatching.analyse(checkedType, expressionType, -1).isAnyMismatch())", "+\t\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51500756da55110e164f270ae9e938c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "2ee73279867ea28c543d7870cc3c68615c7dee12", "commitAfterChange": "6ed6becc4fd53e7d1da742b5c31941d1e72ebac3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "diff": ["-\t\t\t\t\t\t\t// lowercase name char is ignored", "+\t\t\t\t\t\tcase ScannerHelper.C_DIGIT :", "+\t\t\t\t\t\t\t// lowercase/digit char is ignored", "-\t\t\t\t} else if (Character.isLowerCase(nameChar)) {", "+\t\t\t\t} else if (Character.isJavaIdentifierPart(nameChar) ", "+\t\t\t\t\t\t\t\t&& !Character.isUpperCase(nameChar)) {"]}], "num": 5180}
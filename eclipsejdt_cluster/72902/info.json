{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f066781b7208a5a5cd22fe043295f81d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa0c496a4213a8d7cb9816eeb43af41c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t \tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, CompilationUnit compilationUnit, ASTNode node, RecordedParsingInformation recordedParsingInformation)", "signatureAfterChange": " \tpublic AnnotationTypeDeclaration newAnnotationTypeDeclaration()", "diff": ["-\tprivate static void rootNodeToCompilationUnit(AST ast, ASTConverter converter, CompilationUnit compilationUnit, ASTNode node, RecordedParsingInformation recordedParsingInformation) {", "-\t\tfinal int problemsCount = recordedParsingInformation.problemsCount;", "-\t\tswitch(node.getNodeType()) {", "-\t\t\tcase ASTNode.BLOCK :", "-\t\t\t\t{", "-\t\t\t\t\tBlock block = (Block) node;", "-\t\t\t\t\tif (problemsCount != 0) {", "-\t\t\t\t\t\t// propagate and record problems", "-\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\tfor (int i = 0, max = block.statements().size(); i < max; i++) {", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) block.statements().get(i), problems);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tTypeDeclaration typeDeclaration = ast.newTypeDeclaration();", "-\t\t\t\t\tInitializer initializer = ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(block);", "-\t\t\t\t\ttypeDeclaration.bodyDeclarations().add(initializer);", "-\t\t\t\t\tcompilationUnit.types().add(typeDeclaration);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase ASTNode.TYPE_DECLARATION :", "-\t\t\t\t{", "-\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\t\t\tif (problemsCount != 0) {", "-\t\t\t\t\t\t// propagate and record problems", "-\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\tfor (int i = 0, max = typeDeclaration.bodyDeclarations().size(); i < max; i++) {", "-\t\t\t\t\t\t\tconverter.propagateErrors((ASTNode) typeDeclaration.bodyDeclarations().get(i), problems);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tcompilationUnit.types().add(typeDeclaration);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tif (node instanceof Expression) {", "-\t\t\t\t\tExpression expression = (Expression) node;", "-\t\t\t\t\tif (problemsCount != 0) {", "-\t\t\t\t\t\t// propagate and record problems", "-\t\t\t\t\t\tfinal IProblem[] problems = recordedParsingInformation.problems;", "-\t\t\t\t\t\tconverter.propagateErrors(expression, problems);", "-\t\t\t\t\t\tcompilationUnit.setProblems(problems);", "-\t\t\t\t\t}", "-\t\t\t\t\tExpressionStatement expressionStatement = ast.newExpressionStatement(expression);", "-\t\t\t\t\tBlock block = ast.newBlock();", "-\t\t\t\t\tblock.statements().add(expressionStatement);", "-\t\t\t\t\tInitializer initializer = ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(block);", "-\t\t\t\t\tTypeDeclaration typeDeclaration = ast.newTypeDeclaration();", "-\t\t\t\t\ttypeDeclaration.bodyDeclarations().add(initializer);", "-\t\t\t\t\tcompilationUnit.types().add(typeDeclaration);", "-\t\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tpublic AnnotationTypeDeclaration newAnnotationTypeDeclaration() {", "+\t    unsupportedIn2();", "+\t\tAnnotationTypeDeclaration result = new AnnotationTypeDeclaration(this);", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b83bc91382c7b462f3e0995e1b55c752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "diff": ["+\tcheckExceptionHandlers(raisedException, location, flowInfo, scope, false);", "+}", "-\tscope.problemReporter().unhandledException(raisedException, location);"]}], "num": 72902}
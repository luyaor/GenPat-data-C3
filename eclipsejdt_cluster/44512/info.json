{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf88d6cc3016b51d35d1eb6c18ecd7c6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dfb0e4b6bd76c2709888cc9a52321a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void updateDocComment()", "signatureAfterChange": " \tprotected void updateDocComment()", "diff": ["-\t\tthis.docComment.references = new Expression[sizes[SEE_TAG_EXPECTED_ORDER]];", "-\t\tthis.docComment.thrownExceptions = new TypeReference[sizes[THROWS_TAG_EXPECTED_ORDER]];", "-\t\tthis.docComment.parameters = new JavadocSingleNameReference[sizes[PARAM_TAG_EXPECTED_ORDER]];", "+\t\tthis.docComment.seeReferences = new Expression[sizes[SEE_TAG_EXPECTED_ORDER]];", "+\t\tthis.docComment.exceptionReferences = new TypeReference[sizes[THROWS_TAG_EXPECTED_ORDER]];", "+\t\tthis.docComment.paramReferences = new JavadocSingleNameReference[sizes[PARAM_TAG_EXPECTED_ORDER]];", "+\t\tint paramRefPtr = sizes[PARAM_TAG_EXPECTED_ORDER];", "+\t\tthis.docComment.paramTypeParameters = new JavadocSingleTypeReference[sizes[PARAM_TAG_EXPECTED_ORDER]];", "+\t\tint paramTypeParamPtr = sizes[PARAM_TAG_EXPECTED_ORDER];", "-\t\t\t\t\t\tthis.docComment.references[--sizes[ptr]] = (Expression) this.astStack[this.astPtr--];", "+\t\t\t\t\t\tthis.docComment.seeReferences[--sizes[ptr]] = (Expression) this.astStack[this.astPtr--];", "-\t\t\t\t\t\tthis.docComment.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[this.astPtr--];", "+\t\t\t\t\t\tthis.docComment.exceptionReferences[--sizes[ptr]] = (TypeReference) this.astStack[this.astPtr--];", "-\t\t\t\t\t\tthis.docComment.parameters[--sizes[ptr]] = (JavadocSingleNameReference) this.astStack[this.astPtr--];", "+\t\t\t\t\t\tExpression reference = (Expression) this.astStack[this.astPtr--];", "+\t\t\t\t\t\tif (reference instanceof JavadocSingleNameReference)", "+\t\t\t\t\t\t\tthis.docComment.paramReferences[--paramRefPtr] = (JavadocSingleNameReference) reference;", "+\t\t\t\t\t\telse if (reference instanceof JavadocSingleTypeReference)", "+\t\t\t\t\t\t\tthis.docComment.paramTypeParameters[--paramTypeParamPtr] = (JavadocSingleTypeReference) reference;", "+\t\t", "+\t\t// Resize param tag references arrays", "+\t\tif (paramRefPtr == 0) { // there's no type parameters references", "+\t\t\tthis.docComment.paramTypeParameters = null;", "+\t\t} else if (paramTypeParamPtr == 0) { // there's no names references", "+\t\t\tthis.docComment.paramReferences = null;", "+\t\t} else { // there both of references => resize arrays", "+\t\t\tint size = sizes[PARAM_TAG_EXPECTED_ORDER];", "+\t\t\tSystem.arraycopy(this.docComment.paramReferences, paramRefPtr, this.docComment.paramReferences = new JavadocSingleNameReference[size - paramRefPtr], 0, size - paramRefPtr);", "+\t\t\tSystem.arraycopy(this.docComment.paramTypeParameters, paramTypeParamPtr, this.docComment.paramTypeParameters = new JavadocSingleTypeReference[size - paramTypeParamPtr], 0, size - paramTypeParamPtr);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3d60bb9bef5075e3ab8992ce3ccbc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "b63ee5a669593061b975bc2def28757d777c16ca", "commitAfterChange": "09bf35df2168c2ab3f5a24971ca9aae42bfc8d5b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void updateAnnotation()", "signatureAfterChange": " \tprivate void updateAnnotation()", "diff": ["+\t\tif (this.astLengthPtr == -1) {", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t// Initialize arrays", "+\t\tint[] sizes = new int[ORDERED_TAGS_NUMBER];", "+\t\tfor (int i=0; i<=this.astLengthPtr; i++) {", "+\t\t\tsizes[i%ORDERED_TAGS_NUMBER] += this.astLengthStack[i];", "+\t\t}", "+\t\tthis.annotation.references = new Expression[sizes[SEE_TAG_EXPECTED_ORDER]];", "+\t\tthis.annotation.thrownExceptions = new TypeReference[sizes[THROWS_TAG_EXPECTED_ORDER]];", "+\t\tthis.annotation.parameters = new AnnotationSingleNameReference[sizes[PARAM_TAG_EXPECTED_ORDER]];", "+\t\t", "+\t\t// Store nodes in arrays", "+\t\t\tint ptr = this.astLengthPtr % ORDERED_TAGS_NUMBER;", "-\t\t\tif (this.astLengthPtr == 2) {", "+\t\t\tif (ptr == SEE_TAG_EXPECTED_ORDER) {", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tthis.annotation.references = new Expression[size];", "-\t\t\t\t\tfor (int i = (size - 1); i >= 0; i--) {", "-\t\t\t\t\t\tthis.annotation.references[i] = (Expression) this.astStack[astPtr--];", "-\t\t\t\t\t}", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tthis.annotation.references[--sizes[ptr]] = (Expression) this.astStack[astPtr--];", "-\t\t\telse if (this.astLengthPtr == 1) {", "+\t\t\telse if (ptr == THROWS_TAG_EXPECTED_ORDER) {", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tthis.annotation.thrownExceptions = new TypeReference[size];", "-\t\t\t\t\tfor (int i = (size - 1); i >= 0; i--) {", "-\t\t\t\t\t\tthis.annotation.thrownExceptions[i] = (TypeReference) this.astStack[astPtr--];", "-\t\t\t\t\t}", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tthis.annotation.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[astPtr--];", "-\t\t\telse if (this.astLengthPtr == 0) {", "+\t\t\telse if (ptr == PARAM_TAG_EXPECTED_ORDER) {", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tthis.annotation.parameters = new AnnotationSingleNameReference[size];", "-\t\t\t\t\tfor (int i = (size - 1); i >= 0; i--) {", "-\t\t\t\t\t\tthis.annotation.parameters[i] = (AnnotationSingleNameReference) this.astStack[astPtr--];", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// Flag all nodes got from other ast length stack pointer values as invalid....", "-\t\t\t// TODO (frederic) To be changed when mixed tags declaration will be accepted", "-\t\t\telse {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tif (size > 0) {", "-\t\t\t\t\tfor (int i = 0; i < size; i++) {", "-\t\t\t\t\t\tAstNode node = this.astStack[astPtr--];", "-\t\t\t\t\t\tthis.sourceParser.problemReporter().annotationUnexpectedTag(node.sourceStart, node.sourceEnd);", "-\t\t\t\t\t}", "+\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\tthis.annotation.parameters[--sizes[ptr]] = (AnnotationSingleNameReference) this.astStack[astPtr--];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f372933d5769cd4a26a821c3ed5186cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "ba65adb7228709772812cc43f8ccb14a824acf89", "commitAfterChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void updateDocComment()", "signatureAfterChange": " \tprotected void updateDocComment()", "diff": ["-\t\t\tif (ptr == SEE_TAG_EXPECTED_ORDER) {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tthis.docComment.references[--sizes[ptr]] = (Expression) this.astStack[this.astPtr--];", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tswitch(ptr) {", "+\t\t\t\tcase SEE_TAG_EXPECTED_ORDER:", "+\t\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "+\t\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\t\tthis.docComment.references[--sizes[ptr]] = (Expression) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t\t// Then continuing with class names (eg. TypeReference) coming from @throw/@exception declarations", "-\t\t\telse if (ptr == THROWS_TAG_EXPECTED_ORDER) {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tthis.docComment.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[this.astPtr--];", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\t\t// Then continuing with class names (eg. TypeReference) coming from @throw/@exception declarations", "+\t\t\t\tcase THROWS_TAG_EXPECTED_ORDER:", "+\t\t\t\t\tsize = this.astLengthStack[this.astLengthPtr--];", "+\t\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\t\tthis.docComment.thrownExceptions[--sizes[ptr]] = (TypeReference) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t\t// Finally, finishing with parameters nales (ie. Argument) coming from @param declaration", "-\t\t\telse if (ptr == PARAM_TAG_EXPECTED_ORDER) {", "-\t\t\t\tint size = this.astLengthStack[this.astLengthPtr--];", "-\t\t\t\tfor (int i=0; i<size; i++) {", "-\t\t\t\t\tthis.docComment.parameters[--sizes[ptr]] = (JavadocSingleNameReference) this.astStack[this.astPtr--];", "-\t\t\t\t}", "+\t\t\t\t// Finally, finishing with parameters nales (ie. Argument) coming from @param declaration", "+\t\t\t\tcase PARAM_TAG_EXPECTED_ORDER:", "+\t\t\t\t\tsize = this.astLengthStack[this.astLengthPtr--];", "+\t\t\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\t\t\tthis.docComment.parameters[--sizes[ptr]] = (JavadocSingleNameReference) this.astStack[this.astPtr--];", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}], "num": 44512}
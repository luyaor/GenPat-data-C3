{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54110350aa3079c97398f3062e01cefc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7960befa4d144005684661850fcbaa50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public int literalIndexForField(char[] declaringClass, char[] name, char[] signature)", "signatureAfterChange": " public int literalIndexForField(char[] declaringClass, char[] name, char[] signature)", "diff": ["-\tint index;", "-\tif ((index = putInCacheIfAbsent(declaringClass, name, signature, this.currentIndex)) < 0) {", "-\t\tthis.currentIndex++;", "-\t\t// doesn't exist yet", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\t// Write the interface method ref constant into the constant pool", "-\t\t// First add the tag", "-\t\twriteU1(FieldRefTag);", "-\t\tint classIndexOffset = this.currentOffset;", "-\t\tif (currentOffset + 4 >= poolContent.length) {", "-\t\t\tresizePoolContents(4);", "-\t\t}", "-\t\tcurrentOffset+=4;", "-\t\t", "-\t\tfinal int classIndex = literalIndexForType(declaringClass);", "-\t\tfinal int nameAndTypeIndex = literalIndexForNameAndType(name, signature);", "+    int index;", "+    if ((index = putInCacheIfAbsent(declaringClass, name, signature, this.currentIndex)) < 0) {", "+        this.currentIndex++;", "+        // doesn't exist yet", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        // Write the interface method ref constant into the constant pool", "+        // First add the tag", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(FieldRefTag);", "+        int classIndexOffset = this.currentOffset;", "+        if (currentOffset + 4 >= poolContent.length) {", "+            resizePoolContents(4);", "+        }", "+        currentOffset+=4;", "-\t\tpoolContent[classIndexOffset++] = (byte) (classIndex >> 8);", "-\t\tpoolContent[classIndexOffset++] = (byte) classIndex;", "-\t\tpoolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);", "-\t\tpoolContent[classIndexOffset] = (byte) nameAndTypeIndex;\t\t", "-\t}", "-\treturn index;", "+        final int classIndex = literalIndexForType(declaringClass);", "+        final int nameAndTypeIndex = literalIndexForNameAndType(name, signature);", "+", "+        poolContent[classIndexOffset++] = (byte) (classIndex >> 8);", "+        poolContent[classIndexOffset++] = (byte) classIndex;", "+        poolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);", "+        poolContent[classIndexOffset] = (byte) nameAndTypeIndex;", "+    }", "+    return index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4002d1fde220fb03f456923c3ae1e91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface)", "signatureAfterChange": " public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface)", "diff": ["-\tint index;", "-\tif ((index = putInCacheIfAbsent(declaringClass, selector, signature, this.currentIndex)) < 0) {", "-\t\t// it doesn't exist yet", "-\t\tthis.currentIndex++;", "-\t\tif ((index = -index) > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t}", "-\t\t// Write the interface method ref constant into the constant pool", "-\t\t// First add the tag", "-\t\twriteU1(isInterface ? InterfaceMethodRefTag : MethodRefTag);", "+    int index;", "+    if ((index = putInCacheIfAbsent(declaringClass, selector, signature, this.currentIndex)) < 0) {", "+        // it doesn't exist yet", "+        this.currentIndex++;", "+        if ((index = -index) > 0xFFFF){", "+            this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+        }", "+        // Write the interface method ref constant into the constant pool", "+        // First add the tag", "+        int length = this.offsets.length;", "+        if (length <= index) {", "+        \t// resize", "+            System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);", "+        }", "+        this.offsets[index] = this.currentOffset;", "+        writeU1(isInterface ? InterfaceMethodRefTag : MethodRefTag);", "-\t\tint classIndexOffset = this.currentOffset;", "-\t\tif (currentOffset + 4 >= poolContent.length) {", "-\t\t\tresizePoolContents(4);", "-\t\t}", "-\t\tcurrentOffset+=4;", "-\t\t", "-\t\tfinal int classIndex = literalIndexForType(declaringClass);", "-\t\tfinal int nameAndTypeIndex = literalIndexForNameAndType(selector, signature);", "+        int classIndexOffset = this.currentOffset;", "+        if (currentOffset + 4 >= poolContent.length) {", "+            resizePoolContents(4);", "+        }", "+        currentOffset+=4;", "-\t\tpoolContent[classIndexOffset++] = (byte) (classIndex >> 8);", "-\t\tpoolContent[classIndexOffset++] = (byte) classIndex;", "-\t\tpoolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);", "-\t\tpoolContent[classIndexOffset] = (byte) nameAndTypeIndex;", "-\t}", "-\treturn index;", "+        final int classIndex = literalIndexForType(declaringClass);", "+        final int nameAndTypeIndex = literalIndexForNameAndType(selector, signature);", "+", "+        poolContent[classIndexOffset++] = (byte) (classIndex >> 8);", "+        poolContent[classIndexOffset++] = (byte) classIndex;", "+        poolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);", "+        poolContent[classIndexOffset] = (byte) nameAndTypeIndex;", "+    }", "+    return index;"]}], "num": 24584}
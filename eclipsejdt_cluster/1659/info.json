{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8caf8b41a75a1f87882fb33fb1ba761f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1abf66dd655608acfbbd6c3e20d7fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "da9e30a8d441a1da42a289d2606f77eaa8d811d1", "commitAfterChange": "ba5344094af5a10113083e490b48587602f0a697", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean encloses(IJavaElement element)", "signatureAfterChange": " \tpublic boolean encloses(IJavaElement element)", "diff": ["-\t\t\t\ttry {", "-\t\t\t\t\tthis.initialize();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "+\t\t\t\tif (this.needsRefresh) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.initialize();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// the scope is used only to find enclosing projects and jars", "+\t\t\t\t\t// clients is responsible for filtering out elements not in the hierarchy (see SearchEngine)", "+\t\t\t\t\treturn true;", "+\t\t\t\t}\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5eb43d8dcef01d18d5a79883f0bc178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "7dba18510735a8c60d8d91fa6d89b06fa7636203", "commitAfterChange": "7c282c0ddcdb6ffe774e195ad66f8c97fb6de3a9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\t\t\t\tif (!((InternalSearchPattern)this.pattern).mustResolve) {", "-\t\t\t\t\t// Set resolution flag on node set in case of types was inferred in parameterized types from generic ones...", "-\t\t\t\t \t// (see  bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990, 96761, 96763)", "-\t\t\t\t\tnodeSet.mustResolve = true;", "-\t\t\t\t\tresolve = true;", "+\t\t\t\t// Do not return as impossible when source level is at least 1.5", "+\t\t\t\tif (this.mayBeGeneric) {", "+\t\t\t\t\tif (!((InternalSearchPattern)this.pattern).mustResolve) {", "+\t\t\t\t\t\t// Set resolution flag on node set in case of types was inferred in parameterized types from generic ones...", "+\t\t\t\t\t \t// (see  bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990, 96761, 96763)", "+\t\t\t\t\t\tnodeSet.mustResolve = true;", "+\t\t\t\t\t\tresolve = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;"]}], "num": 1659}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "138d25015ebe5e023871a4048eb60e35", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "574c7d6cba29643c93b8c6d86b3449b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "signatureAfterChange": " public MethodBinding getMethodBinding(MethodPattern methodPattern)", "diff": ["-\t\t\t\tif (paramLength == paramTypeslength) {", "+\t\t\t\tif (methodParameters != null && paramLength == paramTypeslength) {", "-\t\t\t\t\t\t\tfor (int v=0; v<typeVarLength; v++) {", "-\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {", "-\t\t\t\t\t\t\t\t\tfound = false;", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tif (refTypeVariables != null) {", "+\t\t\t\t\t\t\t\tfor (int v=0; v<typeVarLength; v++) {", "+\t\t\t\t\t\t\t\t\tif (!CharOperation.equals(refTypeVariables[v].sourceName, parameterTypes[p])) {", "+\t\t\t\t\t\t\t\t\t\tfound = false;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\tif (!found && methodTypeVariables != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d2e16f44950992c276e1ad8447a712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "diff": ["-\t\tnextVariable : for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+", "+\t\tint paramLength = typeParameters.length;", "+\t\tnextVariable : for (int i = 0; i < paramLength; i++) {", "-\t", "+", "-\t", "+", "-\t\t\tif (superType.isFinal()) {", "+\t\t\tif (superType.isFinal())", "-\t\t\t}", "-\t", "+", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (this.kind == CLASS_SCOPE) {", "+\t\t\tfor (int i = 0; i < paramLength; i++) {", "+\t\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\t\tTypeReference typeRef = typeParameter.type;", "+\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\ttypeRef.checkBounds(this);", "+", "+\t\t\t\t\tTypeReference[] boundRefs = typeParameter.bounds;", "+\t\t\t\t\tif (boundRefs != null)", "+\t\t\t\t\t\tfor (int j = 0, k = boundRefs.length; j < k; j++)", "+\t\t\t\t\t\t\tboundRefs[j].checkBounds(this);"]}], "num": 22121}
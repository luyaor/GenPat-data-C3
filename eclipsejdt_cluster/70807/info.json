{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65bb16baa329cafc72aa49d5f049b3a7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6796d9ca1bce759e4361e3ce61f43a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "425b0c5314087893896fa849d0ee8761b973ef60", "commitAfterChange": "340d840f950775980b46fcf21979bc21f0e19016", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public int match(TypeParameter node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(ReferenceExpression node, MatchingNodeSet nodeSet)", "diff": ["+public int match(ReferenceExpression node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bddc0bad822c54489254c57ab201c1d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndLocator.java", "commitBeforeChange": "425b0c5314087893896fa849d0ee8761b973ef60", "commitAfterChange": "340d840f950775980b46fcf21979bc21f0e19016", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public int match(TypeParameter node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(ReferenceExpression node, MatchingNodeSet nodeSet)", "diff": ["+public int match(ReferenceExpression node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;", "+}"]}], "num": 70807}
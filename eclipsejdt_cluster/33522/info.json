{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60b6561944869a0f7007fdea0326e65c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1020ebc28ba12756f20647caf0d9872f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "f5937020c6b957eed03745f57cfee671f23dd9b8", "commitAfterChange": "ad2aca1c2960107e50013b8f7866125addb168b4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic static void checkAnnotationContainerTarget(Annotation annotation, BlockScope scope, TypeBinding annotationType, TypeBinding containerAnnotationType)", "signatureAfterChange": " \tpublic static void checkContainingAnnotationTarget(Annotation annotation, BlockScope scope, TypeBinding containerAnnotationType, TypeBinding annotationType)", "diff": ["+\t// This is for error reporting for bad targets at the repeated annotation use site (as opposed to repeatable annotation type declaration site) - Leads to better message.", "+\tpublic static void checkContainingAnnotationTarget(Annotation annotation, BlockScope scope, TypeBinding containerAnnotationType, TypeBinding annotationType) {", "+\t\t// check (meta)target compatibility", "+\t\tif (!annotationType.isValidBinding()) {", "+\t\t\t// no need to check annotation usage if missing", "+\t\t\treturn;", "+\t\t}", "+\t\tif (! isAnnotationTargetAllowed(annotation, scope, containerAnnotationType, annotation.recipient.kind())) {", "+\t\t\tscope.problemReporter().disallowedTargetForContainerAnnotation(annotation, containerAnnotationType);", "+\t\t}", "+\t}", "-\tpublic static void checkAnnotationContainerTarget(Annotation annotation, BlockScope scope, TypeBinding annotationType, TypeBinding containerAnnotationType) {", "-\t\t// check (meta)target compatibility", "-\t\tif (!annotationType.isValidBinding()) {", "-\t\t\t// no need to check annotation usage if missing", "-\t\t\treturn;", "-\t\t}", "-\t\tif (! isAnnotationTargetAllowed(annotation, scope, containerAnnotationType, annotation.recipient.kind())) {", "-\t\t\tscope.problemReporter().disallowedTargetForContainerAnnotation(annotation, containerAnnotationType);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4cc901ed6c168f881802f0f29595937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic static void checkContainingAnnotationTarget(Annotation annotation, BlockScope scope, TypeBinding containerAnnotationType, TypeBinding annotationType)", "signatureAfterChange": " \tpublic static void checkContainingAnnotationTargetAtUse(Annotation annotation, BlockScope scope, TypeBinding containerAnnotationType, TypeBinding annotationType)", "diff": ["-\t// This is for error reporting for bad targets at the repeated annotation use site (as opposed to repeatable annotation type declaration site) - Leads to better message.", "-\tpublic static void checkContainingAnnotationTarget(Annotation annotation, BlockScope scope, TypeBinding containerAnnotationType, TypeBinding annotationType) {", "-\t\t// check (meta)target compatibility", "-\t\tif (!annotationType.isValidBinding()) {", "-\t\t\t// no need to check annotation usage if missing", "-\t\t\treturn;", "-\t\t}", "-\t\tif (! isAnnotationTargetAllowed(annotation, scope, containerAnnotationType, annotation.recipient.kind())) {", "-\t\t\tscope.problemReporter().disallowedTargetForContainerAnnotation(annotation, containerAnnotationType);", "-\t\t}", "+\t// This is for error reporting for bad targets at the repeated annotation use site (as opposed to repeatable annotation type declaration site) - Leads to better message.", "+\tpublic static void checkContainingAnnotationTargetAtUse(Annotation annotation, BlockScope scope, TypeBinding containerAnnotationType, TypeBinding annotationType) {", "+\t\t// check (meta)target compatibility", "+\t\tif (!annotationType.isValidBinding()) {", "+\t\t\t// no need to check annotation usage if missing", "+\t\t\treturn;", "+\t\t}", "+\t\tif (! isAnnotationTargetAllowed(annotation, scope, containerAnnotationType, annotation.recipient.kind())) {", "+\t\t\tscope.problemReporter().disallowedTargetForContainerAnnotation(annotation, containerAnnotationType);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eceb999c5f11de61bb214c6f1f70129d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static MethodBinding checkForContraditions( \t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope)", "signatureAfterChange": " \tpublic static MethodBinding checkForContradictions( \t\t\tfinal MethodBinding method, final Object location, final Scope scope)", "diff": ["-\tpublic static MethodBinding checkForContraditions(", "-\t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope) {", "+\tpublic static MethodBinding checkForContradictions(", "+\t\t\tfinal MethodBinding method, final Object location, final Scope scope) {", "+\t\tint start = 0, end = 0;", "+\t\tif (location instanceof InvocationSite) {", "+\t\t\tstart = ((InvocationSite) location).sourceStart();", "+\t\t\tend = ((InvocationSite) location).sourceEnd();", "+\t\t} else if (location instanceof ASTNode) {", "+\t\t\tstart = ((ASTNode) location).sourceStart;", "+\t\t\tend = ((ASTNode) location).sourceEnd;", "+\t\t}", "-\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);", "+\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, start, end, location instanceof FunctionalExpression);", "-\t\tif (invocationSite instanceof Invocation)", "-\t\t\targuments = ((Invocation)invocationSite).arguments();", "+\t\tif (location instanceof Invocation)", "+\t\t\targuments = ((Invocation)location).arguments();", "-\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotationsInferred(method, start, end, location instanceof FunctionalExpression);"]}], "num": 33522}
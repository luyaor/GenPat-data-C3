{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1c65ebd4e763242a314a0ad8f592be6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47d216a08b07fc54ec1ace2eb82ada54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "64151d299c94cd994364e344797612fa2bd1a461", "commitAfterChange": "87afee9399abda7dff755456c24d9246af8651dd", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic boolean visit( \t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\tCompilationUnitScope scope)", "diff": ["-\t\tif (isSemiColon()) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "+\t\tint blankLineBetweenTypeDeclarations = this.preferences.blank_lines_between_type_declarations;", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\tif (isSemiColon()) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\tif (blankLineBetweenTypeDeclarations != 0) {", "+\t\t\t\t\tthis.scribe.printEmptyLines(blankLineBetweenTypeDeclarations);", "+\t\t\t\t} else {", "-\t\t}", "-\t\tif (isSemiColon()) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t\tthis.scribe.printNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a9b86e4958d7cc38aba8b00215faf5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "d35754bf597e1e3c63426404dbcb66843b76444c", "commitAfterChange": "889cbee9e452a2b606e084167406ae9a949acd46", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 186, "signatureBeforeChange": " protected void invoke(int opcode, int argsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature)", "signatureAfterChange": "  protected void invoke(byte opcode, int receiverAndArgsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature)", "diff": ["-protected void invoke(int opcode, int argsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature) {", "-\tthis.countLabels = 0;", "-\tint argCount = argsSize;", "-\tswitch(opcode) {", "-\t\tcase Opcodes.OPC_invokeinterface :", "-\t\t\tif (this.classFileOffset + 4 >= this.bCodeStream.length) {", "-\t\t\t\tresizeByteArray();", "-\t\t\t}", "-\t\t\tthis.position +=3;", "-\t\t\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_invokeinterface;", "-\t\t\twriteUnsignedShort(this.constantPool.literalIndexForMethod(declaringClass, selector, signature, true));", "-\t\t\targCount++;", "-\t\t\tthis.bCodeStream[this.classFileOffset++] = (byte) argCount;", "-\t\t\tthis.bCodeStream[this.classFileOffset++] = 0;", "-\t\t\tbreak;", "-\t\tcase Opcodes.OPC_invokevirtual :", "-\t\tcase Opcodes.OPC_invokespecial :", "-\t\t\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "-\t\t\t\tresizeByteArray();", "-\t\t\t}", "-\t\t\tthis.position++;", "-\t\t\tthis.bCodeStream[this.classFileOffset++] = (byte) opcode;", "-\t\t\twriteUnsignedShort(this.constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "-\t\t\targCount++;", "-\t\t\tbreak;", "-\t\tcase Opcodes.OPC_invokestatic :", "-\t\t\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "-\t\t\t\tresizeByteArray();", "-\t\t\t}", "-\t\t\tthis.position++;", "-\t\t\tthis.bCodeStream[this.classFileOffset++] = Opcodes.OPC_invokestatic;", "-\t\t\twriteUnsignedShort(this.constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "-\tthis.stackDepth += returnTypeSize - argCount;", "+", "+protected void invoke(byte opcode, int receiverAndArgsSize, int returnTypeSize, char[] declaringClass, char[] selector, char[] signature) {", "+\tthis.countLabels = 0;", "+\tif (opcode == Opcodes.OPC_invokeinterface) {", "+\t\t// invokeinterface", "+\t\tif (this.classFileOffset + 4 >= this.bCodeStream.length) {", "+\t\t\tresizeByteArray();", "+\t\t}", "+\t\tthis.position +=3;", "+\t\tthis.bCodeStream[this.classFileOffset++] = opcode;", "+\t\twriteUnsignedShort(this.constantPool.literalIndexForMethod(declaringClass, selector, signature, true));", "+\t\tthis.bCodeStream[this.classFileOffset++] = (byte) receiverAndArgsSize;", "+\t\tthis.bCodeStream[this.classFileOffset++] = 0;", "+\t} else {", "+\t\t// invokespecial", "+\t\t// invokestatic", "+\t\t// invokevirtual", "+\t\tif (this.classFileOffset + 2 >= this.bCodeStream.length) {", "+\t\t\tresizeByteArray();", "+\t\t}", "+\t\tthis.position++;", "+\t\tthis.bCodeStream[this.classFileOffset++] = opcode;", "+\t\twriteUnsignedShort(this.constantPool.literalIndexForMethod(declaringClass, selector, signature, false));", "+\t}", "+\tthis.stackDepth += returnTypeSize - receiverAndArgsSize;"]}], "num": 39220}
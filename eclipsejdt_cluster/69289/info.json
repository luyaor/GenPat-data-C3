{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a50bee616e5a3fc96fdc0b0f3bc62017", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451c707c3c6b05ae9655d6d62de8474c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "906228369eed23f930bc548422a9ed0c01a3237e", "commitAfterChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeBounds()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeBounds()", "diff": ["+\t\tTypeVariableBinding typeVariableBinding = null;", "-\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t\ttypeVariableBinding = (TypeVariableBinding) this.binding;", "+\t\t} else if (this.binding instanceof WildcardBinding) {", "+\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\ttypeVariableBinding = wildcardBinding.typeVariable();", "+\t\t}", "+\t\tif (typeVariableBinding != null) {", "-\t\t\tif (firstClassOrArrayBound != null) {", "+\t\t\tif (firstClassOrArrayBound == null) {", "+\t\t\t\tif (varSuperclass != null && varSuperclass.id != TypeIds.T_JavaLangObject) {", "+\t\t\t\t\tfirstClassOrArrayBound = varSuperclass;", "+\t\t\t\t\tboundsLength++;", "+\t\t\t\t}", "+\t\t\t} else  {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c95a482a85172e87c631f6a7119c0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "commitAfterChange": "0473b4fed0787a43089ff37104916db5b418eb5b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "signatureAfterChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, TypeDeclaration declaringType)", "diff": ["-\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\t// accept constructor reference for enum constant", "+\t\t\tif (fieldDeclaration.initialization instanceof AllocationExpression) {", "+\t\t\t\tAllocationExpression alloc = (AllocationExpression) fieldDeclaration.initialization;", "+\t\t\t\trequestor.acceptConstructorReference(", "+\t\t\t\t\tdeclaringType.name,", "+\t\t\t\t\talloc.arguments == null ? 0 : alloc.arguments.length, ", "+\t\t\t\t\talloc.sourceStart);", "+\t\t\t}", "+\t\t\t// fall through next case", "+\t\tcase AbstractVariableDeclaration.FIELD:"]}], "num": 69289}
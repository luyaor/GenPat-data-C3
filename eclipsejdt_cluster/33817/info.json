{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea20a63b8aa3a8b95aae0671b2b34180", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171d3ee58546c493bb219b9003397c35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "01e509448d7e8ce35b916b42d2b7e86284f0209d", "commitAfterChange": "22a834a98ee15054e5c5a6c83029376faf3ab633", "methodNumberBeforeChange": 1233, "methodNumberAfterChange": 1233, "signatureBeforeChange": " public void test1203a()", "signatureAfterChange": " public void test1203a()", "diff": ["-\tString expectedOutput = this.complianceLevel < ClassFileConstants.JDK1_7", "-\t\t? \t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "-\t\t\t\"\t                 ^^^\\n\" + ", "-\t\t\t\"The method foo(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "-\t\t\t\"\t                    ^^^\\n\" + ", "-\t\t\t\"The method bar(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t: \t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "-\t\t\t\"\t          ^^^^^^\\n\" + ", "-\t\t\t\"Unused type arguments for the non generic method foo(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "-\t\t\t\"\t             ^^^^^^\\n\" + ", "-\t\t\t\"Unused type arguments for the non generic method bar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t", "-\tthis.runNegativeTest(", "+\tString[] sources =", "-\t\t},", "-\t\texpectedOutput);", "+\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\trunNegativeTest(", "+\t\t\tsources,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "+\t\t\t\"\t                 ^^^\\n\" + ", "+\t\t\t\"The method foo(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "+\t\t\t\"\t                    ^^^\\n\" + ", "+\t\t\t\"The method bar(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\trunConformTest(", "+\t\t\ttrue,", "+\t\t\tsources,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "+\t\t\t\"\t          ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method foo(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "+\t\t\t\"\t             ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method bar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\tnull, null,", "+\t\t\tJavacTestOptions.Excuse.EclipseHasSomeMoreWarnings);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5cf4a7795abd5fff630d32c7548e06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\tif (SearchBasicEngine.VERBOSE) {", "+\tif (BasicSearchEngine.VERBOSE) {", "+\t\tif (this.parser != null) {", "+\t\t\tString selection = new String(this.parser.scanner.source, match.getOffset(), match.getLength());", "+\t\t\tSystem.out.println(\"\\tSelection: -->\" + selection + \"<--\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}", "-\tif (SearchBasicEngine.VERBOSE)", "+\tif (BasicSearchEngine.VERBOSE)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c8e704e242d975156cb0b05d3edc57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "88a4dd39dc6c1f5f682680ea6c30a4a9958ce465", "commitAfterChange": "bf9515bec05982e28ecc8fc1b64de84b4e8e1bf5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tStringBuffer buffer = new StringBuffer(\"(position=\"); //$NON-NLS-1$", "-\tbuffer.append(position);", "+\tString basic = getClass().getName();", "+\tbasic = basic.substring(basic.lastIndexOf('.')+1);", "+\tStringBuffer buffer = new StringBuffer(basic); ", "+\tbuffer.append('@').append(Integer.toHexString(hashCode()));", "+\tbuffer.append(\"(position=\").append(position); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cbd877e25b0fd197031c20623d7eda2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "81692e071192b9c42c4a6026dc5f6c18d5f213cc", "commitAfterChange": "aa6251de28ce7d8f307172e681d4401e486ea590", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t\tTypeBinding[] parameterTypes = methodBinding.parameters;", "+\t\t\t\tTypeBinding[] parameterTypes = methodBinding.original().parameters;", "+\t\t\t\tString[] parameterSignatures = new String[length];", "+\t\t\t\t\tparameterSignatures[i] = getSignature(parameterTypes[i]).replace('/', '.');", "+\t\t\t\t\t\tparameterSignatures,", "+\t\t\t\t\t\tdeclaringClass.enclosingType() == null ? null : getSignature(declaringClass.enclosingType()),", "+\t\t\t\t\t\tparameterSignatures,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d4db6c8264249d83e67b12b9ddb88c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "2c86ed00820c78be99f0cceda1ffc7f485f46f9e", "commitAfterChange": "fcf34323849ee5aaf15434ece715a6b80e91cc94", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected void appendProposal(CompletionProposal proposal, StringBuffer buffer)", "signatureAfterChange": "  \tprotected void appendProposal(CompletionProposal proposal, StringBuffer buffer)", "diff": ["-//\t\tbuffer.append(\", [\");", "-//\t\tbuffer.append(proposal.getReplaceStart());", "-//\t\tbuffer.append(\", \");", "-//\t\tbuffer.append(proposal.getReplaceEnd());", "-//\t\tbuffer.append(\"]\");", "+\t\tif(this.showPositions) {", "+\t\t\tbuffer.append(\", [\");", "+\t\t\tbuffer.append(proposal.getReplaceStart());", "+\t\t\tbuffer.append(\", \");", "+\t\t\tbuffer.append(proposal.getReplaceEnd());", "+\t\t\tbuffer.append(\"]\");", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b72a6d5e2d027e3d17fe4f3f3a337c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic String toString()", "signatureAfterChange": " \t \tpublic String toString()", "diff": ["-\t\t\tbuffer.append(CharOperation.subarray(this.source, this.start, this.index));", "-\t\t\tbuffer.append('#');", "-\t\t\tbuffer.append(CharOperation.subarray(this.source, this.index, this.source.length));", "+\t\t\tif (this.start <= this.index) {", "+\t\t\t\tbuffer.append(CharOperation.subarray(this.source, this.start, this.index));", "+\t\t\t\tbuffer.append('#');", "+\t\t\t\tbuffer.append(CharOperation.subarray(this.source, this.index, this.source.length));", "+\t\t\t} else {", "+\t\t\t\tbuffer.append('#');", "+\t\t\t\tbuffer.append(CharOperation.subarray(this.source, this.start, this.source.length));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c826761ebb1aa17788f4a1c33d057b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "9f8c0aff4541413a1d59ce816c9847753c28077a", "commitAfterChange": "9252f03474977360ba3ba4ad93fe71b877d8ccd9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void accept(IResource resource, int start, int end, IJavaElement element, int accuracy)", "signatureAfterChange": " \tpublic void accept(IResource resource, int start, int end, IJavaElement element, int accuracy)", "diff": ["+\t\t\t}", "+\t\t\tif (showProject) {", "+\t\t\t\tIProject project = element.getJavaProject().getProject();", "+\t\t\t\tresults.append(\" [in \");", "+\t\t\t\tresults.append(project.getName());", "+\t\t\t\tresults.append(\"]\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3d0a06466e13cd7270d59ed5973061e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "150ea6aad0e3f07df1c56f34e2968d5c4e914a0c", "commitAfterChange": "e91110df42d468297a7f0f4f917c63937b06463a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["-\t\t\t\tline = new StringBuffer(getPathString(resource, element));", "+\t\t\t\tline = new StringBuffer();", "+\t\t\t\tif (this.showMatchKind) {", "+\t\t\t\t\tString matchClassName = this.match.getClass().getName();", "+\t\t\t\t\tline.append(matchClassName.substring(matchClassName.lastIndexOf('.')+1));", "+\t\t\t\t\tline.append(\": \");", "+\t\t\t\t}", "+\t\t\t\tline.append(getPathString(resource, element));"]}], "num": 33817}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02df74d12e319f5da93e039d3e20c985", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e472587ac7594c8d4351d3846b8e1f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "f36c718beb8bf08713390b2fd835e572041478ae", "commitAfterChange": "de0ec0255833f27449d5f59da580e82b41fe6f0d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " protected void consumeCastExpressionWithGenericsArray()", "signatureAfterChange": " protected void consumeCastExpressionWithGenericsArray()", "diff": ["-protected void consumeCastExpressionWithGenericsArray() {", "-\t// CastExpression ::= PushLPAREN Name TypeArguments Dims PushRPAREN InsideCastExpression UnaryExpressionNotPlusMinus", "+}", "+protected void consumeCastExpressionWithGenericsArray() {", "+\t// CastExpression ::= PushLPAREN Name TypeArguments Dimsopt AdditionalBoundsListOpt PushRPAREN InsideCastExpression UnaryExpressionNotPlusMinus", "+\t", "+\tTypeReference[] bounds = null;", "+\tint additionalBoundsLength = this.genericsLengthStack[this.genericsLengthPtr--];", "+\tif (additionalBoundsLength > 0) {", "+\t\tbounds = new TypeReference[additionalBoundsLength + 1];", "+\t\tthis.genericsPtr -= additionalBoundsLength;", "+\t\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, bounds, 1, additionalBoundsLength);", "+\t}", "-", "-\tthis.expressionStack[this.expressionPtr] = cast = new CastExpression(exp = this.expressionStack[this.expressionPtr], castType = getTypeReference(dim));", "+\tif (additionalBoundsLength > 0) {", "+\t\tbounds[0] = getTypeReference(dim);", "+\t\tcastType = new IntersectionCastTypeReference(bounds); ", "+\t} else {", "+\t\tcastType = getTypeReference(dim);", "+\t}", "+\tthis.expressionStack[this.expressionPtr] = cast = new CastExpression(exp = this.expressionStack[this.expressionPtr], castType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7ed8ec31b2168216be52070a6c1691b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "f36c718beb8bf08713390b2fd835e572041478ae", "commitAfterChange": "de0ec0255833f27449d5f59da580e82b41fe6f0d", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": " protected void consumeInsideCastExpressionWithQualifiedGenerics()", "signatureAfterChange": " protected void consumeInsideCastExpressionWithQualifiedGenerics()", "diff": ["+}", "+\t", "+\tTypeReference[] bounds = null;", "+\tint additionalBoundsLength = this.genericsLengthStack[this.genericsLengthPtr--];", "+\tif (additionalBoundsLength > 0) {", "+\t\tbounds = new TypeReference[additionalBoundsLength + 1];", "+\t\tthis.genericsPtr -= additionalBoundsLength;", "+\t\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, bounds, 1, additionalBoundsLength);", "+\t}", "+\t", "+\tif (additionalBoundsLength > 0) {", "+\t\tbounds[0] = (TypeReference) castType;", "+\t\tcastType = new IntersectionCastTypeReference(bounds); ", "+\t} "]}], "num": 62747}
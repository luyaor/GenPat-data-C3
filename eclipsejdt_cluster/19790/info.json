{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17e242e500bf25808fa5dcc94e1778fd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87912d489bd2e0172f321334e7c73f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "6e620c90299ecbe2ea4d151a9b603737c382128e", "commitAfterChange": "f78a80d2602a4819c65d70ccd2f80a6802bed489", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t}", "+\t\tfinal Object convertOldToNewOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_CONVERT_OLD_TO_NEW);", "+\t\tif (convertOldToNewOption != null) {", "+\t\t\tthis.convert_old_to_new = DefaultCodeFormatterConstants.TRUE.equals(convertOldToNewOption);", "-\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "-\t\tif (clearBlankLines != null) {", "-\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "-\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "-\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "-\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "-\t\t\t} else {", "-\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.MAX_VALUE;", "+\t\tif (this.convert_old_to_new) {", "+\t\t\tfinal Object clearBlankLines = settings.get(JavaCore.FORMATTER_CLEAR_BLANK_LINES);", "+\t\t\tif (clearBlankLines != null) {", "+\t\t\t\tif (JavaCore.CLEAR_ALL.equals(clearBlankLines)) {", "+\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t\t} else if (JavaCore.PRESERVE_ONE.equals(clearBlankLines)) {", "+\t\t\t\t\tthis.number_of_empty_lines_to_preserve = 1;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.MAX_VALUE;", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "-\t\tif (compactAssignment != null) {", "-\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "-\t\t}", "-\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "-\t\tif(newLineOpenBrace != null){", "-\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "-\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\t\t} else {", "-\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "-\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\tfinal Object compactAssignment = settings.get(JavaCore.FORMATTER_COMPACT_ASSIGNMENT);", "+\t\t\tif (compactAssignment != null) {", "+\t\t\t\tthis.insert_space_before_assignment_operators = JavaCore.NORMAL.equals(compactAssignment);", "-\t\t}", "-\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "-\t\tif (newLineControl != null) {", "-\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "-\t\t}", "-\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "-\t\tif (newLineElseIf != null) {", "-\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "-\t\t}", "-\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "-\t\tif (newLineEmptyBlock != null) {", "-\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "-\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "-\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "-\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "-\t\t\t\tthis.insert_new_line_in_empty_block = true;", "-\t\t\t} else {", "-\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "-\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "-\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "-\t\t\t\tthis.insert_new_line_in_empty_block = false;", "+\t\t\tfinal Object newLineOpenBrace = settings.get(JavaCore.FORMATTER_NEWLINE_OPENING_BRACE);", "+\t\t\tif(newLineOpenBrace != null){", "+\t\t\t\tif (JavaCore.INSERT.equals(newLineOpenBrace)) {", "+\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.type_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.method_declaration_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.block_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t\tthis.switch_brace_position = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t\t}", "-\t\t}", "-\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "-\t\tif (castExpression != null) {", "-\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "+\t\t\tfinal Object newLineControl = settings.get(JavaCore.FORMATTER_NEWLINE_CONTROL);", "+\t\t\tif (newLineControl != null) {", "+\t\t\t\tthis.insert_new_line_in_control_statements = JavaCore.INSERT.equals(newLineControl);", "+\t\t\t}", "+\t\t\tfinal Object newLineElseIf  = settings.get(JavaCore.FORMATTER_NEWLINE_ELSE_IF);", "+\t\t\tif (newLineElseIf != null) {", "+\t\t\t\tthis.compact_else_if = JavaCore.DO_NOT_INSERT.equals(newLineElseIf);", "+\t\t\t}", "+\t\t\tfinal Object newLineEmptyBlock  = settings.get(JavaCore.FORMATTER_NEWLINE_EMPTY_BLOCK);", "+\t\t\tif (newLineEmptyBlock != null) {", "+\t\t\t\tif (JavaCore.INSERT.equals(newLineEmptyBlock)) {", "+\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = true;", "+\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = true;", "+\t\t\t\t\tthis.insert_new_line_in_empty_method_body = true;", "+\t\t\t\t\tthis.insert_new_line_in_empty_block = true;", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.insert_new_line_in_empty_anonymous_type_declaration = false;", "+\t\t\t\t\tthis.insert_new_line_in_empty_type_declaration = false;", "+\t\t\t\t\tthis.insert_new_line_in_empty_method_body = false;", "+\t\t\t\t\tthis.insert_new_line_in_empty_block = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfinal Object castExpression = settings.get(JavaCore.FORMATTER_SPACE_CASTEXPRESSION);", "+\t\t\tif (castExpression != null) {", "+\t\t\t\tthis.insert_space_after_closing_paren_in_cast = JavaCore.INSERT.equals(castExpression);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe366e46d2c9a76288cc32586187dd15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "89ddf192475aac83d0a34d106c516b9e02e5a4fa", "commitAfterChange": "06bc51755014cd9b7b3dc704b8ea211f7fcf82d8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\tfinal Object commentClearBlankLinesInJavadocCommentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_JAVADOC_COMMENT);", "-\t\tif (commentClearBlankLinesInJavadocCommentOption != null) {", "-\t\t\tthis.comment_clear_blank_lines_in_javadoc_comment = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesInJavadocCommentOption);", "-\t\t}", "-\t\tfinal Object commentClearBlankLinesInBlockCommentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_BLOCK_COMMENT);", "-\t\tif (commentClearBlankLinesInBlockCommentOption != null) {", "-\t\t\tthis.comment_clear_blank_lines_in_block_comment = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesInBlockCommentOption);", "+\t\t// backward compatibility code", "+\t\tfinal Object commentClearBlankLinesOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_CLEAR_BLANK_LINES);", "+\t\tif (commentClearBlankLinesOption != null) {", "+\t\t\tthis.comment_clear_blank_lines_in_javadoc_comment = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesOption);", "+\t\t\tthis.comment_clear_blank_lines_in_block_comment = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesOption);", "+\t\t} else {", "+\t\t\tfinal Object commentClearBlankLinesInJavadocCommentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_JAVADOC_COMMENT);", "+\t\t\tif (commentClearBlankLinesInJavadocCommentOption != null) {", "+\t\t\t\tthis.comment_clear_blank_lines_in_javadoc_comment = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesInJavadocCommentOption);", "+\t\t\t}", "+\t\t\tfinal Object commentClearBlankLinesInBlockCommentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_BLOCK_COMMENT);", "+\t\t\tif (commentClearBlankLinesInBlockCommentOption != null) {", "+\t\t\t\tthis.comment_clear_blank_lines_in_block_comment = DefaultCodeFormatterConstants.TRUE.equals(commentClearBlankLinesInBlockCommentOption);", "+\t\t\t}"]}], "num": 19790}
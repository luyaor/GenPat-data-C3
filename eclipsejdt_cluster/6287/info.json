{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5b27842eee5f2f81bb23b2235d084ad", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21e75d18626fdd3691e808c72786b5e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "3a7eebe0921eeefbdbf1fe4891891b6335310197", "commitAfterChange": "e8aa72d0e85424c76c1185b7518db6803dde6255", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-", "-public FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo) {", "-\tif (this.resolvedType.id == T_JavaLangString) {", "-\t\treturn right.analyseCode(currentScope, flowContext, ", "-\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).", "-\t\t\tunconditionalInits();", "-\t}", "-\telse {", "-\t\tleft.checkNPE(currentScope, flowContext, flowInfo);", "-\t\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\t\tunconditionalInits();", "-\t\tright.checkNPE(currentScope, flowContext, flowInfo);", "-\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\t\tunconditionalInits();", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {", "+\tif (this.resolvedType.id == TypeIds.T_JavaLangString) {", "+\t\treturn this.right.analyseCode(", "+\t\t\t\t\t\t\tcurrentScope, flowContext, ", "+\t\t\t\t\t\t\tthis.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "+\t\t\t\t\t\t.unconditionalInits();", "+\t} else {", "+\t\tthis.left.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tflowInfo = this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab7a3ebc3df610065e32c2a56673c17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (this.resolvedType.id == TypeIds.T_JavaLangString) {", "-\t\treturn this.right.analyseCode(", "-\t\t\t\t\t\t\tcurrentScope, flowContext,", "-\t\t\t\t\t\t\tthis.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t\t\t\t.unconditionalInits();", "-\t} else {", "-\t\tthis.left.checkNPE(currentScope, flowContext, flowInfo);", "-\t\tflowInfo = this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "-\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\ttry {", "+\t\tif (this.resolvedType.id == TypeIds.T_JavaLangString) {", "+\t\t\treturn this.right.analyseCode(", "+\t\t\t\t\t\t\t\tcurrentScope, flowContext,", "+\t\t\t\t\t\t\t\tthis.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "+\t\t\t\t\t\t\t.unconditionalInits();", "+\t\t} else {", "+\t\t\tthis.left.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\tflowInfo = this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t}", "+\t} finally {", "+\t\t// account for exception possibly thrown by arithmetics", "+\t\tflowContext.recordAbruptExit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d9a9d3b90d4036a388a944b16ebcb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "2eab698c606e3b17217602bbc99837242c743a5a", "commitAfterChange": "6d141275326cf4caf65ec5dca68b565e2e9b1360", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (this.resolvedType.id == TypeIds.T_JavaLangString) {", "-\t\treturn this.right.analyseCode(", "-\t\t\t\t\t\t\tcurrentScope, flowContext,", "-\t\t\t\t\t\t\tthis.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t\t\t\t.unconditionalInits();", "-\t} else {", "-\t\tthis.left.checkNPE(currentScope, flowContext, flowInfo);", "-\t\tflowInfo = this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "-\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "-\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\ttry {", "+\t\tif (this.resolvedType.id == TypeIds.T_JavaLangString) {", "+\t\t\treturn this.right.analyseCode(", "+\t\t\t\t\t\t\t\tcurrentScope, flowContext,", "+\t\t\t\t\t\t\t\tthis.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "+\t\t\t\t\t\t\t.unconditionalInits();", "+\t\t} else {", "+\t\t\tthis.left.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\tflowInfo = this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t\tthis.right.checkNPE(currentScope, flowContext, flowInfo);", "+\t\t\treturn this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();", "+\t\t}", "+\t} finally {", "+\t\t// account for exception possibly thrown by arithmetics", "+\t\tflowContext.recordAbruptExit();"]}], "num": 6287}
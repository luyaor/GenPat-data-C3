{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe2fd920341d47c4c7618af548306cd9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1710c1b97af9d0ae530c9c87ed0330c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic static MethodBinding computeCompatibleMethod18(MethodBinding originalMethod, TypeBinding[] arguments, final Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t((ReferenceExpression) invocationSite).inferenceKind = infCtx18.inferenceKind;   // CHECK", "+\t\t\t\t\t((ReferenceExpression) invocationSite).inferenceKind = infCtx18.inferenceKind;", "-\t\t\t\t\t\t\tmethodSubstitute = null;", "-\t\t\t\t\t\t\tmethodSubstitute = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85a710385a41f3345f74be479ff444a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "18214de46fa9202fa142bc8c10e22754e8ddc00c", "commitAfterChange": "a19e5612a97c00c41d991b7d28c08961f0357225", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\t\t\tif (innerCtx == null)", "-\t\t\t\t\t\t\tInferenceContext18.missingImplementation(\"Missing context for inner inference for \"+invocation.toString()); //$NON-NLS-1$", "+\t\t\t\t\t\tif (innerCtx == null) { // no inference -> assume it wasn't really poly after all", "+\t\t\t\t\t\t\tTypeBinding exprType = this.left.resolvedType;", "+\t\t\t\t\t\t\tif (exprType == null || !exprType.isValidBinding())", "+\t\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\t\t\treturn new ConstraintTypeFormula(exprType, this.right, COMPATIBLE, this.isSoft);", "+\t\t\t\t\t\t}"]}], "num": 37154}
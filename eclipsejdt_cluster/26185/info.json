{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5e65df6ac01186b77156c4ddc0298af", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebb2bfe62b6cfdd3e1200c5c4d7965a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java", "commitBeforeChange": "62d7bc26fcfe8fee6f088c0a69095098be2525c3", "commitAfterChange": "a7de86808802e4be20313d06df54304c589c14a0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void initializeDefaultPreferences()", "signatureAfterChange": " \tpublic void initializeDefaultPreferences()", "diff": ["-\t\tMap defaultOptionsMap = new CompilerOptions().getMap(); // compiler defaults", "-", "-\t\t// Override some compiler defaults", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_LOCAL_VARIABLE_ATTR, JavaCore.GENERATE);", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_CODEGEN_UNUSED_LOCAL, JavaCore.PRESERVE);", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_TAGS, JavaCore.DEFAULT_TASK_TAGS);", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_PRIORITIES, JavaCore.DEFAULT_TASK_PRIORITIES);", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_CASE_SENSITIVE, JavaCore.ENABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.ENABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);", "-", "-\t\t// Builder settings", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, JavaCore.ABORT);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE, JavaCore.WARNING);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER, JavaCore.CLEAN);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER, JavaCore.IGNORE);", "-", "-\t\t// JavaCore settings", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_ORDER, JavaCore.IGNORE);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_INCOMPLETE_CLASSPATH, JavaCore.ERROR);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_CIRCULAR_CLASSPATH, JavaCore.ERROR);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, JavaCore.IGNORE);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, JavaCore.ENABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, JavaCore.ENABLED);", "-", "-\t\t// encoding setting comes from resource plug-in", "-\t\toptionNames.add(JavaCore.CORE_ENCODING);", "-", "-\t\t// Formatter settings", "-\t\tMap codeFormatterOptionsMap = DefaultCodeFormatterConstants.getEclipseDefaultSettings(); // code formatter defaults", "-\t\tfor (Iterator iter = codeFormatterOptionsMap.entrySet().iterator(); iter.hasNext();) {", "-\t\t\tMap.Entry entry = (Map.Entry) iter.next();", "-\t\t\tString optionName = (String) entry.getKey();", "-\t\t\tdefaultOptionsMap.put(optionName, entry.getValue());", "-\t\t\toptionNames.add(optionName);", "-\t\t}", "-", "-\t\t// CodeAssist settings", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.DISABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_DEPRECATION_CHECK, JavaCore.DISABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_IMPLICIT_QUALIFICATION, JavaCore.DISABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_PREFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_PREFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_SUFFIXES, \"\"); //$NON-NLS-1$", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_DISCOURAGED_REFERENCE_CHECK, JavaCore.DISABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "-\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_SUGGEST_STATIC_IMPORTS, JavaCore.ENABLED);", "-", "-\t\t// Time out for parameter names", "-\t\tdefaultOptionsMap.put(JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC, \"50\"); //$NON-NLS-1$", "+\t\tMap defaultOptionsMap = Util.getOriginalDefaultOptions(optionNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9398fcdcae86b2e1e0bbd3fc1d92aa3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tdisableWarnings();", "-\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tdisableWarnings();", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportOverridingPackageDefaultMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportMethodWithConstructorName,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportDeprecation, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportHiddenCatchBlock,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedLocal, ", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameter,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put( ", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSyntheticAccessEmulation,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNonExternalizedStringLiteral,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportAssertIdentifier,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedImport,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoEffectAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportNoImplicitStringConversion,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod,", "-\t\t\t\t\tCompilerOptions.IGNORE);\t\t\t\t", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedPrivateMember,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportLocalVariableHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportFieldHiding,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSpecialParameterHidingField,", "-\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_ReportSuperfluousSemicolon,", "-\t\t\t\t\tCompilerOptions.IGNORE);", "-\t\t\t\toptions.put(", "-\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "-\t\t\t\t\t\"\"); //$NON-NLS-1$", "+\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportStaticAccessReceiver,", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportNonStaticAccessToStatic,", "+\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t} else if (token.equals(\"indirectStatic\")) { //$NON-NLS-1$", "+\t\t\t\t\t\toptions.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportIndirectStaticAccess,"]}], "num": 26185}
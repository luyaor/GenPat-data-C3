{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32d5500fac20302e7007c2b64b1bb252", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1966b1ee9b171ce588a277f58eca162f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "7a4894572c8dc97616c8aa59652842aae37320e6", "commitAfterChange": "328c06fa136c963530115a367863b6a931384871", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["+\t\tboolean reportIllegalModifierCombination = false;", "+\t\tboolean isJDK18orGreater = false;", "+\t\t\texpectedModifiers |= ClassFileConstants.AccStrictfp", "+\t\t\t\t\t| ExtraCompilerModifiers.AccDefaultMethod | ClassFileConstants.AccStatic;", "+\t\t\tisJDK18orGreater = true;", "-\t\t\t\texpectedModifiers |= ClassFileConstants.AccStrictfp", "-\t\t\t\t\t\t\t\t\t\t| (isDefaultMethod ?  ExtraCompilerModifiers.AccDefaultMethod : ClassFileConstants.AccStatic);", "+\t\t\t\treportIllegalModifierCombination = isDefaultMethod && methodBinding.isStatic();", "+\t\t\t} else {", "+\t\t\t\treportIllegalModifierCombination = isDefaultMethod || methodBinding.isStatic();", "+\t\t\t\tif (methodBinding.isStrictfp()) {", "+\t\t\t\t\tproblemReporter().illegalAbstractModifierCombinationForMethod((AbstractMethodDeclaration) this.referenceContext);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (reportIllegalModifierCombination) {", "+\t\t\t\tproblemReporter().illegalModifierCombinationForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext);", "-\t\t\t\tproblemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext, isDefaultMethod);", "+\t\t\t\tproblemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext, isJDK18orGreater);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f399d907dfd88149dceececb3019e83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "commitAfterChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["-\t\t// 9.4 got updated for JSR 335 (default methods), more permissive grammar plus:", "-\t\t// \"It is a compile-time error if an abstract method declaration contains either of the keywords strictfp or synchronized.\"", "-\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8 && !methodBinding.isAbstract()) {", "-\t\t\texpectedModifiers |= (ClassFileConstants.AccSynchronized | ClassFileConstants.AccStrictfp);", "-\t\t}", "+\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8 && !declaringClass.isAnnotationType()) {", "+\t\t\tif (!methodBinding.isAbstract()) {", "+\t\t\t\texpectedModifiers |= ClassFileConstants.AccStrictfp", "+\t\t\t\t\t\t\t\t\t\t| (isDefaultMethod ?  ExtraCompilerModifiers.AccDefaultMethod : ClassFileConstants.AccStatic);", "+\t\t\t}", "+\t\t\t// Kludge - The AccDefaultMethod bit is outside the lower 16 bits and got removed earlier. Putting it back.", "+\t\t\tif (isDefaultMethod) {", "+\t\t\t\trealModifiers |= ExtraCompilerModifiers.AccDefaultMethod;", "+\t\t\t}", "+\t\t}", "-\t\t}", "-\t\tif (isDefaultMethod && (modifiers & ClassFileConstants.AccAbstract) != 0) {", "-\t\t\tproblemReporter().abstractMethodNeedingNoBody((AbstractMethodDeclaration) this.referenceContext);"]}], "num": 15573}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "517e7c295aba1a46fd80f2e586dc0638", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65dc466e8796f92a7bba6b91747536ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "1798df591429fc6a5448f8a074f2d563846bcebb", "commitAfterChange": "e8a92b10517fc0e6b59559ac009096fb50176b96", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName, boolean asBinaryOnly)", "signatureAfterChange": " public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName, boolean asBinaryOnly)", "diff": ["-\t\t\tif (this.annotationPath != null) {", "+\t\t\tif (this.annotationPaths != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.annotationZipFile = reader.setExternalAnnotationProvider(this.annotationPath, qualifiedClassName, this.annotationZipFile, null);", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t// don't let error on annotations fail class reading", "+\t\t\t\tfor (String annotationPath : this.annotationPaths) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tthis.annotationZipFile = reader.setExternalAnnotationProvider(annotationPath, qualifiedClassName, this.annotationZipFile, null);", "+\t\t\t\t\t\tif (reader.hasAnnotationProvider())", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// don't let error on annotations fail class reading", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39730faae0f98a8a02875786c34fea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate int classpathContains(IClasspathEntry[] list, IClasspathEntry entry)", "signatureAfterChange": " \tprivate int classpathContains(IClasspathEntry[] list, IClasspathEntry entry)", "diff": ["+\t\t\t\t\tif (JavaCore.ENABLED.equals(this.project.getOption(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, true))) {", "+\t\t\t\t\t\t// if null annotations are enabled, also check for changes in external annotation attachment", "+\t\t\t\t\t\tString annotationPath = ClasspathEntry.getRawExternalAnnotationPath(entry);", "+\t\t\t\t\t\tString otherAnnotationPath = ClasspathEntry.getRawExternalAnnotationPath(other);", "+\t\t\t\t\t\tif (annotationPath != null && otherAnnotationPath != null) {", "+\t\t\t\t\t\t\tif (!annotationPath.equals(otherAnnotationPath))", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t} else if (annotationPath != otherAnnotationPath) {", "+\t\t\t\t\t\t\tcontinue; // null and not-null", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}"]}], "num": 26979}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6afa7e8068804a0ab685e62963d18ead", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02797927902e1033b3e620e668740020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "57e4d4c87d35c6ae3978a396ec1884b0ad8efb22", "commitAfterChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-\t\t\tWildcardBinding wildcard = capture.wildcard;", "-\t\t\tTypeBinding upperBound = null;", "-\t\t\tTypeBinding [] otherBounds = null;", "-\t\t\tswitch (wildcard.boundKind) {", "-\t\t\t\tcase Wildcard.SUPER:", "-\t\t\t\t\treturn false; // T super syntax isn't allowed, impossible capture.", "-\t\t\t\tcase Wildcard.UNBOUND:", "-\t\t\t\t\tTypeVariableBinding variable = wildcard.genericType.typeVariables()[wildcard.rank];", "-\t\t\t\t\tupperBound = variable.upperBound();", "-\t\t\t\t\totherBounds = variable.boundsCount() > 1 ? variable.otherUpperBounds() : null;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\t\tupperBound = wildcard.bound;", "-\t\t\t\t\totherBounds = wildcard.otherBounds;", "-\t\t\t\t\tbreak;", "+\t\t\tif (capture instanceof CaptureBinding18) {", "+\t\t\t\t// by analogy to CaptureBinding but accepting the fact that .wildcard is null:", "+\t\t\t\tCaptureBinding18 cb18 = (CaptureBinding18) capture;", "+\t\t\t\tif (cb18.firstBound != null) {", "+\t\t\t\t\tif (cb18.lowerBound != null)", "+\t\t\t\t\t\treturn false; // type containment is not defined for variables with both upper and lower bound", "+\t\t\t\t\tTypeBinding[] otherBounds = null; ", "+\t\t\t\t\tint len = cb18.upperBounds.length; // by construction non-null if firstBound is set", "+\t\t\t\t\tif (len > 1)", "+\t\t\t\t\t\tSystem.arraycopy(cb18.upperBounds, 1, otherBounds = new TypeBinding[len-1], 0, len-1);", "+\t\t\t\t\totherType = capture.environment.createWildcard(null, 0, cb18.firstBound, otherBounds, Wildcard.EXTENDS);", "+\t\t\t\t} else if (cb18.lowerBound != null) {", "+\t\t\t\t\totherType = capture.environment.createWildcard(null, 0, cb18.lowerBound, null, Wildcard.SUPER);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn false; // not wellformed", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tTypeBinding upperBound = null;", "+\t\t\t\tTypeBinding [] otherBounds = null;", "+\t\t\t\tWildcardBinding wildcard = capture.wildcard;", "+\t\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\t\treturn false; // T super syntax isn't allowed, impossible capture.", "+\t\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\t\tTypeVariableBinding variable = wildcard.genericType.typeVariables()[wildcard.rank];", "+\t\t\t\t\t\tupperBound = variable.upperBound();", "+\t\t\t\t\t\totherBounds = variable.boundsCount() > 1 ? variable.otherUpperBounds() : null;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\t\totherBounds = wildcard.otherBounds;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\t// Given class A<T extends B<?>>, A<?> cannot be the universe of all parameterizations of A", "+\t\t\t\tif (upperBound.id == TypeIds.T_JavaLangObject && otherBounds == null) {", "+\t\t\t\t\treturn false; // but given class A<T>, A<?> stays an unbounded wildcard, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=348956", "+\t\t\t\t}", "+\t\t\t\totherType = capture.environment.createWildcard(null, 0, upperBound, otherBounds, Wildcard.EXTENDS);", "-\t\t\t// Given class A<T extends B<?>>, A<?> cannot be the universe of all parameterizations of A", "-\t\t\tif (upperBound.id == TypeIds.T_JavaLangObject && otherBounds == null) {", "-\t\t\t\treturn false; // but given class A<T>, A<?> stays an unbounded wildcard, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=348956", "-\t\t\t}", "-\t\t\totherType = capture.environment.createWildcard(null, 0, upperBound, otherBounds, Wildcard.EXTENDS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b8a3347ff4f4eae96c3e77e3e5acbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["+\t\t// handle captured wildcards.", "+\t\tcase Binding.TYPE_PARAMETER: {", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=347426", "+\t\t\tif (!isParameterizedType() || !otherType.isCapture()) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tCaptureBinding capture = (CaptureBinding) otherType;", "+\t\t\tWildcardBinding wildcard = capture.wildcard;", "+\t\t\tTypeBinding upperBound = null;", "+\t\t\tTypeBinding [] otherBounds = null;", "+\t\t\tswitch (wildcard.boundKind) {", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\treturn false; // T super syntax isn't allowed, impossible capture.", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\tTypeVariableBinding variable = wildcard.genericType.typeVariables()[wildcard.rank];", "+\t\t\t\t\tupperBound = variable.upperBound();", "+\t\t\t\t\totherBounds = variable.boundsCount() > 1 ? variable.otherUpperBounds() : null;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\totherBounds = wildcard.otherBounds;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\t// Given class A<T extends B<?>>, A<?> cannot be the universe of all parameterizations of A", "+\t\t\tif (upperBound.id == TypeIds.T_JavaLangObject && otherBounds == null) {", "+\t\t\t\treturn false; // but given class A<T>, A<?> stays an unbounded wildcard, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=348956", "+\t\t\t}", "+\t\t\totherType = capture.environment.createWildcard(null, 0, upperBound, otherBounds, Wildcard.EXTENDS);", "+\t\t\treturn isTypeArgumentContainedBy(otherType);", "+\t\t}"]}], "num": 27383}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7544185daf64188a3678d3f5444d7a70", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30fe54769be1a90c98815a491d76d54a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (this.constant != NotAConstant) {", "+\tif (this.constant != Constant.NotAConstant) {", "-\t\t\t\tFieldBinding fieldBinding;", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\tif (!(fieldBinding = (FieldBinding) this.codegenBinding).isConstantValue()) { // directly use inlined value for constant fields", "-\t\t\t\t\t\tif (fieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\t\t // directly use inlined value for constant fields", "-\t\t\t\t\t\t\tboolean isStatic;", "-\t\t\t\t\t\t\tif (!(isStatic = fieldBinding.isStatic())) {", "-\t\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "-\t\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\tcodeStream.getstatic(fieldBinding);", "+\t\t\t\tif (!valueRequired) ", "+\t\t\t\t\tbreak;", "+\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t\tConstant fieldConstant = fieldBinding.constant();", "+\t\t\t\tif (fieldConstant == Constant.NotAConstant) { // directly use inlined value for constant fields", "+\t\t\t\t\tif (fieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\t\t\t // directly use inlined value for constant fields", "+\t\t\t\t\t\tboolean isStatic;", "+\t\t\t\t\t\tif (!(isStatic = fieldBinding.isStatic())) {", "+\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\t\t\tcodeStream.getfield(fieldBinding);", "+\t\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "+\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\tcodeStream.getstatic(fieldBinding);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.getfield(fieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// managing private access", "+\t\t\t\t\t\tif (!fieldBinding.isStatic()) {", "+\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t\t// internal error, per construction we should have found it", "+\t\t\t\t\t\t\t\t// not yet supported", "+\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t\t// managing private access", "-\t\t\t\t\t\t\tif (!fieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\t\t\t// not yet supported", "-\t\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.aconst_null();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateEmulatedReadAccessForField(fieldBinding);", "+\t\t\t\t\t\t\tcodeStream.aconst_null();", "-\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\t\t\t\t} else { // directly use the inlined value", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldBinding.constant(), this.implicitConversion);", "+\t\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateEmulatedReadAccessForField(fieldBinding);", "+\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t} else { // directly use the inlined value", "+\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "-\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t// outer local?", "-\t\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// regular local variable read", "-\t\t\t\t\t\tcodeStream.load(localBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\tif (!valueRequired)", "+\t\t\t\t\tbreak;", "+\t\t\t\t// outer local?", "+\t\t\t\tif ((this.bits & DepthMASK) != 0) {", "+\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "+\t\t\t\t} else {", "+\t\t\t\t\t// regular local variable read", "+\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e684d00220a03ca08951a08a673ce68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "6dbb2ec74b77026a9a8c00b4381c92a21f100370", "commitAfterChange": "2d88125c63a44736bd6507d03cfcacc7c43a6f63", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\treturn;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tif (!valueRequired) {", "+\t\t\t\t\t\tif (!valueRequired", "-\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()", "-\t\t\t\t\t\t\t\t\t&& ((implicitConversion & TypeIds.UNBOXING) == 0)) {", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t&& ((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()", "+\t\t\t\t\t\t\t&& ((implicitConversion & TypeIds.UNBOXING) == 0)", "+\t\t\t\t\t\t\t&& this.genericCast == null) {", "+\t\t\t\t\t\t\t// if no valueRequired, optimize out entire gen", "+\t\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "-\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif ((implicitConversion & TypeIds.UNBOXING) != 0) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// could occur if !valueRequired but static field belongs to different class", "-\t\t\t\t\t\t\tswitch (fieldBinding.type.id) {", "-\t\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}\t\t\t\t\t\t\t", "-\t\t\t\t\t\tif (!valueRequired && ((implicitConversion & TypeIds.UNBOXING) == 0)) {", "+\t\t\t\t\t\tif (!valueRequired", "+\t\t\t\t\t\t\t\t&& (implicitConversion & TypeIds.UNBOXING) == 0 ", "+\t\t\t\t\t\t\t\t&& this.genericCast == null) {", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t// managing generic cast", "-\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t// outer local?", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// regular local variable read", "-\t\t\t\t\t\t\tcodeStream.load(localBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t} else if ((implicitConversion & TypeIds.UNBOXING) != 0) {", "-", "-\t\t\t\t\t\t// outer local?", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// regular local variable read", "-\t\t\t\t\t\t\tcodeStream.load(localBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\tif ((localBinding.type == TypeBinding.LONG) || (localBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (!valueRequired && (implicitConversion & TypeIds.UNBOXING) == 0) {", "+\t\t\t\t\t\t// if no valueRequired, optimize out entire gen", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t// outer local?", "+\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// regular local variable read", "+\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault: // type", "+\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\treturn;\t\t\t\t\t", "+\t\t// required cast must occur even if no value is required", "+\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "+\t\tif (valueRequired) {", "+\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t} else {", "+\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t// conversion only generated if unboxing", "+\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\t\tcase T_long :", "+\t\t\t\tcase T_double :", "+\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\t}\t\t\t\t\t\t\t"]}], "num": 18502}
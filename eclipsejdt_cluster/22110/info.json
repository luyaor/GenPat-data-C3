{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed2d69b64ba495a69b80f7e2654c7510", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b8e89d47ffb3f38a9b74437daea4056", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected TypeReference getAssistTypeReferenceForGenericType(int dim, int identifierLength, int numberOfIdentifiers)", "signatureAfterChange": " protected TypeReference getAssistTypeReferenceForGenericType(int dim, int identifierLength, int numberOfIdentifiers)", "diff": ["-\t\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "-\t\tthis.genericsPtr -= length;", "+//\t\tint length = this.genericsLengthStack[this.genericsLengthPtr--];", "+//\t\tthis.genericsPtr -= length;", "+//\t\tlong[] positions = new long[identifierLength];", "+//\t\tSystem.arraycopy(", "+//\t\t\tidentifierPositionStack, ", "+//\t\t\tidentifierPtr, ", "+//\t\t\tpositions, ", "+//\t\t\t0, ", "+//\t\t\tidentifierLength); ", "+//\t\t", "+//\t\tthis.identifierPtr--;", "+//\t\tTypeReference reference = this.createSingleAssistTypeReference(", "+//\t\t\t\t\t\t\t\t\t\tassistIdentifier(), ", "+//\t\t\t\t\t\t\t\t\t\tpositions[0]);", "+//\t\tthis.assistNode = reference;", "+//\t\tthis.lastCheckPoint = reference.sourceEnd + 1;", "+//\t\treturn reference;", "+\t\t", "+\t\tint currentTypeArgumentsLength = this.genericsLengthStack[this.genericsLengthPtr--];", "+\t\tTypeReference[] typeArguments = new TypeReference[currentTypeArgumentsLength];", "+\t\tthis.genericsPtr -= currentTypeArgumentsLength;", "+\t\tSystem.arraycopy(this.genericsStack, this.genericsPtr + 1, typeArguments, 0, currentTypeArgumentsLength);", "-\t\tTypeReference reference = this.createSingleAssistTypeReference(", "-\t\t\t\t\t\t\t\t\t\tassistIdentifier(), ", "-\t\t\t\t\t\t\t\t\t\tpositions[0]);", "+\t\t\t\t", "+\t\tTypeReference reference = this.createParameterizedSingleAssistTypeReference(", "+\t\t\t\ttypeArguments,", "+\t\t\t\tassistIdentifier(),", "+\t\t\t\tpositions[0]);", "+\t\t", "-\t\treference = this.createSingleAssistTypeReference(assistIdentifier(), positions[0]);", "+\t\tif(typeArguments[0] != null && typeArguments[0].length > 0) {", "+\t\t\treference = this.createParameterizedSingleAssistTypeReference(typeArguments[0], assistIdentifier(), positions[0]);", "+\t\t} else {", "+\t\t\treference = this.createSingleAssistTypeReference(assistIdentifier(), positions[0]);", "+\t\t}", "+\t\tTypeReference[] assistTypeArguments = typeArguments[realLength];", "-\t\tif(isParameterized) {", "-\t\t\treference = this.createParameterizedQualifiedAssistTypeReference(tokens, typeArguments, assistIdentifier(), positions);", "+\t\tif(isParameterized || (assistTypeArguments != null && assistTypeArguments.length > 0)) {", "+\t\t\treference = this.createParameterizedQualifiedAssistTypeReference(tokens, typeArguments, assistIdentifier(), assistTypeArguments, positions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab781d02156cbc14f95a5df410766ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-\tif ((index = indexOfAssistIdentifier()) < 0) {", "+\tif ((index = indexOfAssistIdentifier(true)) < 0) {", "-", "-\t/* retrieve identifiers subset and whole positions, the assist node positions", "-\t\tshould include the entire replaced source. */", "-\tchar[][] subset = identifierSubSet(index);", "-\tidentifierLengthPtr--;", "-\tidentifierPtr -= length;", "-\tlong[] positions = new long[length];", "-\tSystem.arraycopy(", "-\t\tidentifierPositionStack, ", "-\t\tidentifierPtr + 1, ", "-\t\tpositions, ", "-\t\t0, ", "-\t\tlength); ", "-", "-\t/* build specific assist on type reference */", "-\tif (index == 0) {", "-\t\t/* assist inside first identifier */", "-\t\treference = this.createSingleAssistTypeReference(", "-\t\t\t\t\t\tassistIdentifier(), ", "-\t\t\t\t\t\tpositions[0]);", "+\tint numberOfIdentifiers = this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr--];", "+\tif (length != numberOfIdentifiers || this.genericsLengthStack[this.genericsLengthPtr] != 0) {", "+\t\tidentifierLengthPtr--;", "+\t\t// generic type", "+\t\treference = getAssistTypeReferenceForGenericType(dim, length, numberOfIdentifiers);", "-\t\t/* assist inside subsequent identifier */", "-\t\treference =\tthis.createQualifiedAssistTypeReference(", "-\t\t\t\t\t\tsubset,  ", "-\t\t\t\t\t\tassistIdentifier(), ", "-\t\t\t\t\t\tpositions);", "+\t\t/* retrieve identifiers subset and whole positions, the assist node positions", "+\t\t\tshould include the entire replaced source. */", "+\t\t", "+\t\tchar[][] subset = identifierSubSet(index);", "+\t\tidentifierLengthPtr--;", "+\t\tidentifierPtr -= length;", "+\t\tlong[] positions = new long[length];", "+\t\tSystem.arraycopy(", "+\t\t\tidentifierPositionStack, ", "+\t\t\tidentifierPtr + 1, ", "+\t\t\tpositions, ", "+\t\t\t0, ", "+\t\t\tlength); ", "+\t", "+\t\t/* build specific assist on type reference */", "+\t\t", "+\t\tif (index == 0) {", "+//\t\t\tgenericsIdentifiersLengthPtr--;", "+\t\t\tgenericsLengthPtr--;", "+\t\t\t/* assist inside first identifier */", "+\t\t\treference = this.createSingleAssistTypeReference(", "+\t\t\t\t\t\t\tassistIdentifier(), ", "+\t\t\t\t\t\t\tpositions[0]);", "+\t\t} else {", "+//\t\t\tgenericsIdentifiersLengthPtr--;", "+\t\t\tgenericsLengthPtr--;", "+\t\t\t/* assist inside subsequent identifier */", "+\t\t\treference =\tthis.createQualifiedAssistTypeReference(", "+\t\t\t\t\t\t\tsubset,  ", "+\t\t\t\t\t\t\tassistIdentifier(), ", "+\t\t\t\t\t\t\tpositions);", "+\t\t}", "+\t\tassistNode = reference;", "+\t\tthis.lastCheckPoint = reference.sourceEnd + 1;", "+\treturn reference;", "+}"]}], "num": 22110}
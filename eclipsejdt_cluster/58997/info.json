{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc23ed2b36c9b2ee11579cd3b0aecb21", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a8c481bb824da09b049e7ce9d8316a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": " \tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, int argEnd) throws InvalidInputException", "diff": ["+\tprotected Object createArgumentReference(char[] name, int dim, Object typeRef, int argEnd) throws InvalidInputException {", "+\t\ttry {", "+\t\t\tTypeReference argTypeRef = (TypeReference) typeRef;", "+\t\t\tif (dim > 0) {", "+\t\t\t\tlong pos = ((long) argTypeRef.sourceStart) << 32 + argTypeRef.sourceEnd;", "+\t\t\t\t\targTypeRef = new JavadocArraySingleTypeReference(singleRef.token, dim, pos);", "+\t\t\t\t\targTypeRef = new JavadocArrayQualifiedTypeReference(qualifRef, dim);", "+\t\t\treturn new JavadocArgumentExpression(name, argTypeRef.sourceStart, argEnd, argTypeRef);", "-\t */", "-\tprivate boolean parseHref() throws InvalidInputException {", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tconsumeToken();", "-\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)", "-\t\t\t\t\t&& readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'h', 'r', 'e', 'f'}, false) &&", "-\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameEQUAL) {", "-\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameStringLiteral) {", "-\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\twhile (readToken() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n' || this.scanner.getCurrentTokenStartPosition() > this.lineEnd) {", "-\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameDIVIDE) {", "-\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "-\t\t\t\t\t\t\t\t\t\t\treadToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t\t\t\tconsumeToken();", "-\t\t\t\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} catch (InvalidInputException ex) {", "-\t\t\t\t\t// Do nothing as we want to keep positions for error message", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeUrlReference(start, this.lineEnd);", "-\t\treturn false;", "-\t}", "+\t\tcatch (ClassCastException ex) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd5feb8c3d2c490caf8652499035fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "signatureAfterChange": " private void notifySourceElementRequestor(TypeParameter[] typeParameters)", "diff": ["+private void notifySourceElementRequestor(TypeParameter[] typeParameters) {", "+\tif (typeParameters != null) {", "+\t\tint typeParametersLength = typeParameters.length;", "+\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\tTypeReference[] bounds = typeParameter.bounds;", "+\t\t\tchar[][] typeParameterBounds = null;", "+\t\t\tif (bounds != null) {", "+\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\tCharOperation.concatWith(bounds[j].getParameterizedTypeName(), '.'); ", "+\t\t\t\t}", "+\t\t\t\ttypeParameterBounds = boundNames;", "+\t\t\t}", "+\t\t\trequestor.enterTypeParameter(", "+\t\t\t\ttypeParameter.declarationSourceStart, ", "+\t\t\t\ttypeParameter.name, ", "+\t\t\t\ttypeParameter.sourceStart, ", "+\t\t\t\ttypeParameter.sourceEnd,", "+\t\t\t\ttypeParameterBounds);", "+\t\t\trequestor.exitTypeParameter(typeParameter.declarationSourceEnd);", "+\t\t}", "+\t}", "+}"]}], "num": 58997}
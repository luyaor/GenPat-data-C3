{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d937c47a5c001b517c126f93aab7322", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb62ddd9ca4192d1b5234fb98320e9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchMethod(MethodBinding method)", "signatureAfterChange": " protected int matchMethod(MethodBinding method)", "diff": ["+\t\t// TODO (frederic) use this call to refine accuracy on return type", "+\t\t// int newLevel = resolveLevelForType(this.pattern.returnSimpleName, this.pattern.returnQualification, this.pattern.returnTypeArguments, 0, method.returnType);", "+\t\t// global verification", "-\t\tif (!method.isValidBinding() && ((ProblemMethodBinding)method).problemId() == ProblemReasons.Ambiguous)", "+\t\tif (!method.isValidBinding() && ((ProblemMethodBinding)method).problemId() == ProblemReasons.Ambiguous) {", "+\t\t}", "+", "+\t\t// verify each parameter", "-\t\t\t\tnewLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], method.parameters[i]);", "+\t\t\t\t// TODO (frederic) use this call to refine accuracy on parameter types", "+\t\t\t\t// newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], this.pattern.parametersTypeArguments[i], 0, argType);", "+\t\t\t\tnewLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], argType);", "-\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "+\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) {", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e981f6bede5e986a77e428c81d3e36d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected int matchConstructor(MethodBinding constructor)", "signatureAfterChange": "  protected int matchConstructor(MethodBinding constructor)", "diff": ["-\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], /*this.pattern.parametersTypeArguments[i], 0,*/ constructor.parameters[i]);", "+\t\t\t// TODO (frederic) use this call to refine accuracy on parameter types", "+//\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], this.pattern.parametersTypeArguments[i], 0, constructor.parameters[i]);", "+\t\t\tint newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], constructor.parameters[i]);", "-\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) return IMPOSSIBLE_MATCH;", "+\t\t\t\tif (newLevel == IMPOSSIBLE_MATCH) {", "+//\t\t\t\t\tif (isErasureMatch) {", "+//\t\t\t\t\t\treturn ERASURE_MATCH;", "+//\t\t\t\t\t}", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t}"]}], "num": 32683}
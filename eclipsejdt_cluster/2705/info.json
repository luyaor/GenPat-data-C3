{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78166a3fb2d3bfa17b4ee716c039447d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "153b95523a320fbc2ef7b04b156504d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "758f55a5a64497d7398f91effe575e974d834411", "commitAfterChange": "a920298c522cfd65cad97a6c929cd34516c3baed", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public void replace(int position, int length, String text)", "signatureAfterChange": "\r public void replace(int position, int length, String text)", "diff": ["-\tif (!isReadOnly()) {\r", "-\t\tint textLength = 0;\r", "-\t\tif (text != null) {\r", "-\t\t\ttextLength = text.length();\r", "-\t\t}\r", "-\t\t\r", "-\t\tsynchronized (this.lock) {\r", "-\t\t\t// move gap\r", "-\t\t\tadjustGap(position + length, textLength - length);\r", "-\r", "-\t\t\t// overwrite\r", "-\t\t\tint min = Math.min(textLength, length);\r", "-\t\t\tfor (int i = position, j = 0; i < position + min; i++, j++)\r", "-\t\t\t\tthis.contents[i] = text.charAt(j);\r", "-\t\t\tif (length > textLength) {\r", "-\t\t\t\t// enlarge the gap\r", "-\t\t\t\tthis.gapStart -= (length - textLength);\r", "-\t\t\t} else\r", "-\t\t\t\tif (textLength > length) {\r", "-\t\t\t\t\t// shrink gap\r", "-\t\t\t\t\tthis.gapStart += (textLength - length);\r", "-\t\t\t\t\tfor (int i = length; i < textLength; i++)\r", "-\t\t\t\t\t\tthis.contents[position + i] = text.charAt(i);\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t\tthis.flags |= F_HAS_UNSAVED_CHANGES;\r", "-\t\t\r", "-\t\tnotifyChanged(new BufferChangedEvent(this, position, length, text));\r", "-\t}\r", "+\tthis.replace(position, length, text == null ? null : text.toCharArray());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc340854b26a1951258efec258ef3020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "26bbc0f1d79a90c550f0bbb95cc6eeae2aa4e3bf", "commitAfterChange": "3b79f63e00cbebb1fe326313cd6905bd51bae92d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void enterField(FieldInfo fieldInfo)", "signatureAfterChange": " public void enterField(FieldInfo fieldInfo)", "diff": ["-\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) this.infoStack.peek();", "+\tTypeInfo parentInfo = (TypeInfo) this.infoStack.peek();", "-\tSourceFieldElementInfo info = new SourceFieldElementInfo();", "-\tinfo.setNameSourceStart(fieldInfo.nameSourceStart);", "-\tinfo.setNameSourceEnd(fieldInfo.nameSourceEnd);", "-\tinfo.setSourceRangeStart(fieldInfo.declarationStart);", "-\tinfo.setFlags(fieldInfo.modifiers);", "-\tchar[] typeName = JavaModelManager.getJavaModelManager().intern(fieldInfo.type);", "-\tinfo.setTypeName(typeName);", "-", "-\tparentInfo.addCategories(handle, fieldInfo.categories);", "-\tthis.newElements.put(handle, info);", "+\tparentInfo.childrenCategories.put(handle, fieldInfo.categories);", "-\tthis.infoStack.push(info);", "+\tthis.infoStack.push(fieldInfo);", "-\tif (fieldInfo.annotations != null) {", "-\t\tint length = fieldInfo.annotations.length;", "-\t\tthis.unitInfo.annotationNumber += length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = fieldInfo.annotations[i];", "-\t\t\tenterAnnotation(annotation, info, handle);", "-\t\t\texitMember(annotation.declarationSourceEnd);", "-\t\t}", "-\t}"]}], "num": 2705}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7673f9dcae820d5bf77945eed781d0c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44215e2e769886476e87e6027c59ce1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic ICompilationUnit generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )", "signatureAfterChange": " \tpublic synchronized FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )", "diff": ["-\tpublic ICompilationUnit generateFileDuringReconcile(", "+\tpublic synchronized FileGenerationResult generateFileDuringReconcile(", "+\t\tFileGenerationResult result = null;", "-\t\t\tworkingCopy = getWorkingCopy( ", "-\t\t\t\tparentCompilationUnit,  typeName, contents,  ", "-\t\t\t\tworkingCopyOwner, problemRequestor,  progressMonitor);", "+\t\t\tworkingCopy = getCachedWorkingCopy( parentCompilationUnit, typeName );", "-\t\t\t//", "-\t\t\t//  Update working copy's buffer with the contents of the type ", "-\t\t\t// ", "-\t\t\tupdateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "+\t\t\tif ( workingCopy == null )", "+\t\t\t{", "+\t\t\t\t// create a new working copy", "+\t\t\t\tworkingCopy = createNewWorkingCopy(  ", "+\t\t\t\t\t\tparentCompilationUnit,  typeName, contents,  ", "+\t\t\t\t\t\tworkingCopyOwner, problemRequestor,  progressMonitor);", "+\t\t\t\tworkingCopy.reconcile(AST.JLS3, true, workingCopyOwner,", "+\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+", "+\t\t\t\t//", "+\t\t\t\t//  Update working copy's buffer with the contents of the type ", "+\t\t\t\t// ", "+\t\t\t\tboolean modified = updateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified);", "+\t\t\t}", "-\t\t\treturn workingCopy;", "-\t\t", "+\t\t\treturn result;", "-\t\treturn workingCopy;", "+\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b1dbd01ba5189ec12408ef7c9f6624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "4c091ce71f1c6a2472a4afd7104c5d8f3424456d", "commitAfterChange": "756e1981ccaf3561b93bab71937951ef14b72eb6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\t\tCompilationUnitDeclaration unit = CompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, this.progressMonitor);", "-\t\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "-\t\t\t\t\t\tif (this.createAST && unit != null) {", "-\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "-\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "-\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(unit, contents, options, this.progressMonitor);", "+\t\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()) {", "+\t\t\t\t\t    CompilationUnitDeclaration unit = null;", "+\t\t\t\t\t    try {", "+\t\t\t\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\t\t\t\tunit = CompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, false/*don't cleanup cu*/, this.progressMonitor);", "+\t\t\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (this.createAST && unit != null) {", "+\t\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "+\t\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "+\t\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(unit, contents, options, this.progressMonitor);", "+\t\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t    } finally {", "+\t\t\t\t\t        if (unit != null) {", "+\t\t\t\t\t            unit.cleanUp();", "+\t\t\t\t\t        }", "+\t\t\t\t\t    }"]}], "num": 66337}
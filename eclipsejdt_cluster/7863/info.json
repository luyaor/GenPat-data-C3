{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5260ef48a53c905e7a907e21f612d9ac", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1734c7c72adfbecbf8705efb9f7d5d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule, char indexSuffix)", "signatureAfterChange": " private static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule, char indexSuffix)", "diff": ["-\t// extract declaring type infos", "-\tif (type != null) {", "-\t\t// get type part and signature", "-\t\tchar[] typePart = null;", "-\t\ttry {", "-\t\t\ttypeSignature = Signature.createTypeSignature(type, false);", "-\t\t\tif (typeSignature.indexOf(Signature.C_GENERIC_START) < 0) {", "-\t\t\t\ttypePart = type.toCharArray();", "-\t\t\t} else {", "-\t\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature.toCharArray()));", "-\t\t\t}", "-\t\t}", "-\t\tcatch (IllegalArgumentException iae) {", "-\t\t\t// string is not a valid type syntax", "-\t\t\treturn null;", "-\t\t}", "-\t\t// get qualification name", "-\t\tint lastDotPosition = CharOperation.lastIndexOf('.', typePart);", "-\t\tif (lastDotPosition >= 0) {", "-\t\t\tqualificationChars = CharOperation.subarray(typePart, 0, lastDotPosition);", "-\t\t\tif (qualificationChars.length == 1 && qualificationChars[0] == '*')", "-\t\t\t\tqualificationChars = null;", "-\t\t\ttypeChars = CharOperation.subarray(typePart, lastDotPosition+1, typePart.length);", "+\t// get type part and signature", "+\tchar[] typePart = null;", "+\ttry {", "+\t\ttypeSignature = Signature.createTypeSignature(type, false);", "+\t\tif (typeSignature.indexOf(Signature.C_GENERIC_START) < 0) {", "+\t\t\ttypePart = type.toCharArray();", "-\t\t\tqualificationChars = null;", "-\t\t\ttypeChars = typePart;", "+\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature.toCharArray()));", "-\t\tif (typeChars.length == 1 && typeChars[0] == '*')", "-\t\t\ttypeChars = null;", "+\t}", "+\tcatch (IllegalArgumentException iae) {", "+\t\t// string is not a valid type syntax", "+\t\treturn null;", "+\t}", "+", "+\t// get qualification name", "+\tint lastDotPosition = CharOperation.lastIndexOf('.', typePart);", "+\tif (lastDotPosition >= 0) {", "+\t\tqualificationChars = CharOperation.subarray(typePart, 0, lastDotPosition);", "+\t\tif (qualificationChars.length == 1 && qualificationChars[0] == '*')", "+\t\t\tqualificationChars = null;", "+\t\ttypeChars = CharOperation.subarray(typePart, lastDotPosition+1, typePart.length);", "+\t} else {", "+\t\ttypeChars = typePart;", "+\t}", "+\tif (typeChars.length == 1 && typeChars[0] == '*') {", "+\t\ttypeChars = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e65bb7efa2906a6bfbd7147eea0d9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/OperatorExpression.java", "commitBeforeChange": "6f559832866ec7957220224e260ced70fbcf727a", "commitAfterChange": "f3a6f459efd2ac1aed8a2fbc164dee41b4c19dd6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static final void classInitialize()", "signatureAfterChange": " \tpublic static final void classInitialize()", "diff": ["-\t\tResolveTypeTables[AND] = get_AND();", "-\t\tResolveTypeTables[AND_AND] = get_AND_AND();", "-\t\tResolveTypeTables[DIVIDE] = get_DIVIDE();", "-\t\tResolveTypeTables[EQUAL_EQUAL] = get_EQUAL_EQUAL();", "-\t\tResolveTypeTables[GREATER] = get_GREATER();", "-\t\tResolveTypeTables[GREATER_EQUAL] = get_GREATER_EQUAL();", "-\t\tResolveTypeTables[LEFT_SHIFT] = get_LEFT_SHIFT();", "-\t\tResolveTypeTables[LESS] = get_LESS();", "-\t\tResolveTypeTables[LESS_EQUAL] = get_LESS_EQUAL();", "-\t\tResolveTypeTables[MINUS] = get_MINUS();", "-\t\tResolveTypeTables[MULTIPLY] = get_MULTIPLY();", "-\t\tResolveTypeTables[OR] = get_OR();", "-\t\tResolveTypeTables[OR_OR] = get_OR_OR();", "-\t\tResolveTypeTables[PLUS] = get_PLUS();", "-\t\tResolveTypeTables[REMAINDER] = get_REMAINDER();", "-\t\tResolveTypeTables[RIGHT_SHIFT] = get_RIGHT_SHIFT();", "-\t\tResolveTypeTables[UNSIGNED_RIGHT_SHIFT] = get_UNSIGNED_RIGHT_SHIFT();", "-\t\tResolveTypeTables[XOR] = get_XOR();", "+\t\tOperatorSignatures[AND] = get_AND();", "+\t\tOperatorSignatures[AND_AND] = get_AND_AND();", "+\t\tOperatorSignatures[DIVIDE] = get_DIVIDE();", "+\t\tOperatorSignatures[EQUAL_EQUAL] = get_EQUAL_EQUAL();", "+\t\tOperatorSignatures[GREATER] = get_GREATER();", "+\t\tOperatorSignatures[GREATER_EQUAL] = get_GREATER_EQUAL();", "+\t\tOperatorSignatures[LEFT_SHIFT] = get_LEFT_SHIFT();", "+\t\tOperatorSignatures[LESS] = get_LESS();", "+\t\tOperatorSignatures[LESS_EQUAL] = get_LESS_EQUAL();", "+\t\tOperatorSignatures[MINUS] = get_MINUS();", "+\t\tOperatorSignatures[MULTIPLY] = get_MULTIPLY();", "+\t\tOperatorSignatures[OR] = get_OR();", "+\t\tOperatorSignatures[OR_OR] = get_OR_OR();", "+\t\tOperatorSignatures[PLUS] = get_PLUS();", "+\t\tOperatorSignatures[REMAINDER] = get_REMAINDER();", "+\t\tOperatorSignatures[RIGHT_SHIFT] = get_RIGHT_SHIFT();", "+\t\tOperatorSignatures[UNSIGNED_RIGHT_SHIFT] = get_UNSIGNED_RIGHT_SHIFT();", "+\t\tOperatorSignatures[XOR] = get_XOR();"]}], "num": 7863}
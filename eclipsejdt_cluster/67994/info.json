{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dd491001b434d4e3f163139e4fac1ca", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034a77d769f2110497abb22d223d222e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "commitAfterChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 264, "signatureBeforeChange": " public void test116()", "signatureAfterChange": " public void test116()", "diff": ["-\tString expectedOutput = new CompilerOptions(options).sourceLevel < ClassFileConstants.JDK1_6", "-\t?\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tZork foo() {}\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tObject foo() {\\n\" + ", "-\t\t\"\t       ^^^^^\\n\" + ", "-\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "-\t\t\"----------\\n\"", "-\t:\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tZork foo() {}\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tObject foo() {\\n\" + ", "-\t\t\"\t       ^^^^^\\n\" + ", "-\t\t\"The method foo() of type X must override or implement a supertype method\\n\" + ", "-\t\t\"----------\\n\";\t", "-   \tthis.runNegativeTest(", "+\tthis.runNegativeTest(", "-\t\texpectedOutput,", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\"\tZork foo() {}\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\tmustOverrideMessage(\"foo()\", \"X\") + ", "+\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb027243cdf2a9f5d00752aeb19b0d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": " public void test197()", "signatureAfterChange": " public void test197()", "diff": ["+\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t?\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method X.foo() does not override the inherited method from OldStuff since it is private to a different package\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "+\t\t\"----------\\n\"", "+\t:\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method X.foo() does not override the inherited method from OldStuff since it is private to a different package\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\"\t     ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override or implement a supertype method\\n\" + ", "+\t\t\"----------\\n\";\t\t", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\"\t     ^^^^^\\n\" + ", "-\t\t\"The method X.foo() does not override the inherited method from OldStuff since it is private to a different package\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\"\tvoid foo() {\\n\" + ", "-\t\t\"\t     ^^^^^\\n\" + ", "-\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "-\t\t\"----------\\n\");", "+        expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7201cef427801f4d9c8f4d3ca0612ba7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " public void test194()", "signatureAfterChange": " public void test194()", "diff": ["+\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t?\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\t@Override\\n\" + ", "+\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\"The annotation @Override is disallowed for this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "+\t\t\"----------\\n\"", "+\t:\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\t@Override\\n\" + ", "+\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\"The annotation @Override is disallowed for this location\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\"The method foo() of type X must override or implement a supertype method\\n\" + ", "+\t\t\"----------\\n\";\t", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\t@Override\\n\" + ", "-\t\t\"\t^^^^^^^^^\\n\" + ", "-\t\t\"The annotation @Override is disallowed for this location\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tpublic static void foo() {}\\n\" + ", "-\t\t\"\t                   ^^^^^\\n\" + ", "-\t\t\"The method foo() of type X must override a superclass method\\n\" + ", "-\t\t\"----------\\n\");", "+\t\texpectedOutput);"]}], "num": 67994}
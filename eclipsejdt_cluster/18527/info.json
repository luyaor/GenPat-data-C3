{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99e6303f810605942592d03e0175d5dd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f7904edc1bd487f8d8739df33ebab0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Util.java", "commitBeforeChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "commitAfterChange": "e87f626a0744f3e42bfbad630a4e9545c488a83d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static String bind(String id, String[] bindings)", "signatureAfterChange": " \tpublic static String bind(String id, String[] bindings)", "diff": ["-\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "+\t\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "-\t", "-\t\tif (bindings == null)", "-\t\t\treturn message;", "-\t", "+", "-\t\tStringBuffer output = new StringBuffer(80);", "+\t\tStringBuffer output = null;", "+\t\t\t\tif (output == null) output = new StringBuffer(80);", "-\t\t\t\t\t} catch (NumberFormatException nfe) {", "-\t\t\t\t\t\toutput.append(message.substring(end + 1, start + 1));", "+\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "+\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "+\t\t\t\t\t\tboolean done = false;", "+\t\t\t\t\t\tif (!id.equals(argId)) {", "+\t\t\t\t\t\t\tString argMessage = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "+\t\t\t\t\t\t\t\toutput.append(argMessage);", "+\t\t\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "+\t\t\t\tif (output == null) return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c659d3a2eb7677ec6955f6a5641088", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java", "commitBeforeChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "commitAfterChange": "e87f626a0744f3e42bfbad630a4e9545c488a83d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static String bind(String id, String[] bindings)", "signatureAfterChange": " \tpublic static String bind(String id, String[] bindings)", "diff": ["-\t\tif (bindings == null)", "-\t\t\treturn message;", "-", "-\t\tStringBuffer output = new StringBuffer(80);", "+\t\tStringBuffer output = null;", "+\t\t\t\tif (output == null) output = new StringBuffer(80);", "-\t\t\t\t\t} catch (NumberFormatException nfe) {", "-\t\t\t\t\t\toutput.append(message.substring(end + 1, start + 1));", "+\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "+\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "+\t\t\t\t\t\tboolean done = false;", "+\t\t\t\t\t\tif (!id.equals(argId)) {", "+\t\t\t\t\t\t\tString argMessage = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "+\t\t\t\t\t\t\t\toutput.append(argMessage);", "+\t\t\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "-\t\t\t\t\t\toutput.append(\"{missing \" + Integer.toString(index) + \"}\");\t//$NON-NLS-2$ //$NON-NLS-1$", "+\t\t\t\t\t\toutput.append(\"{missing \" + Integer.toString(index) + \"}\"); //$NON-NLS-2$ //$NON-NLS-1$", "+\t\t\t\tif (output == null) return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769b2b0fcf5a6fabef26b7814d71ec2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static String bind(String id, String[] bindings)", "signatureAfterChange": " \tpublic static String bind(String id, String[] bindings)", "diff": ["-\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "+\t\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "-\t", "-\t\tif (bindings == null)", "-\t\t\treturn message;", "-\t", "+", "-\t\tStringBuffer output = new StringBuffer(80);", "+\t\tStringBuffer output = null;", "+\t\t\t\tif (output == null) output = new StringBuffer(80);", "-\t\t\t\t\t} catch (NumberFormatException nfe) {", "-\t\t\t\t\t\toutput.append(message.substring(end + 1, start + 1));", "+\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "+\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "+\t\t\t\t\t\tboolean done = false;", "+\t\t\t\t\t\tif (!id.equals(argId)) {", "+\t\t\t\t\t\t\tString argMessage = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "+\t\t\t\t\t\t\t\toutput.append(argMessage);", "+\t\t\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "+\t\t\t\tif (output == null) return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac2768fc4f6b9c157ff462de12d2bfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static String bind(String id, String[] bindings)", "signatureAfterChange": " \tpublic static String bind(String id, String[] bindings)", "diff": ["-\t\tif (bindings == null)", "-\t\t\treturn message;", "-", "-\t\tStringBuffer output = new StringBuffer(80);", "+\t\tStringBuffer output = null;", "+\t\t\t\tif (output == null) output = new StringBuffer(80);", "-\t\t\t\t\t} catch (NumberFormatException nfe) {", "-\t\t\t\t\t\toutput.append(message.substring(end + 1, start + 1));", "+\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "+\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "+\t\t\t\t\t\tboolean done = false;", "+\t\t\t\t\t\tif (!id.equals(argId)) {", "+\t\t\t\t\t\t\tString argMessage = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "+\t\t\t\t\t\t\t\toutput.append(argMessage);", "+\t\t\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "+\t\t\t\tif (output == null) return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4daae3cbb655e0c2fb888d229ec2100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/Util.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String bind(String id, String[] bindings)", "signatureAfterChange": " public static String bind(String id, String[] bindings)", "diff": ["-\tif (id == null)", "-\t\treturn \"No message available\"; //$NON-NLS-1$", "-\tString message = null;", "-\ttry {", "-\t\tmessage = bundle.getString(id);", "-\t} catch (MissingResourceException e) {", "-\t\t// If we got an exception looking for the message, fail gracefully by just returning", "-\t\t// the id we were looking for.  In most cases this is semi-informative so is not too bad.", "-\t\treturn \"Missing message: \" + id + \" in: \" + bundleName; //$NON-NLS-2$ //$NON-NLS-1$", "-\t}", "-\t// for compatibility with MessageFormat which eliminates double quotes in original message", "-\tchar[] messageWithNoDoubleQuotes =", "-\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "-\tmessage = new String(messageWithNoDoubleQuotes);", "+\t\tif (id == null)", "+\t\t\treturn \"No message available\"; //$NON-NLS-1$", "+\t\tString message = null;", "+\t\ttry {", "+\t\t\tmessage = bundle.getString(id);", "+\t\t} catch (MissingResourceException e) {", "+\t\t\t// If we got an exception looking for the message, fail gracefully by just returning", "+\t\t\t// the id we were looking for.  In most cases this is semi-informative so is not too bad.", "+\t\t\treturn \"Missing message: \" + id + \" in: \" + bundleName; //$NON-NLS-2$ //$NON-NLS-1$", "+\t\t}", "+\t\t// for compatibility with MessageFormat which eliminates double quotes in original message", "+\t\tchar[] messageWithNoDoubleQuotes =", "+\t\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "+\t\tmessage = new String(messageWithNoDoubleQuotes);", "-\tif (bindings == null)", "-\t\treturn message;", "-\tint length = message.length();", "-\tint start = -1;", "-\tint end = length;", "-\tStringBuffer output = new StringBuffer(80);", "-\twhile (true) {", "-\t\tif ((end = message.indexOf('{', start)) > -1) {", "-\t\t\toutput.append(message.substring(start + 1, end));", "-\t\t\tif ((start = message.indexOf('}', end)) > -1) {", "-\t\t\t\tint index = -1;", "-\t\t\t\ttry {", "-\t\t\t\t\tindex = Integer.parseInt(message.substring(end + 1, start));", "-\t\t\t\t\toutput.append(bindings[index]);", "-\t\t\t\t} catch (NumberFormatException nfe) {", "-\t\t\t\t\toutput.append(message.substring(end + 1, start + 1));", "-\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "-\t\t\t\t\toutput.append(\"{missing \" + Integer.toString(index) + \"}\"); //$NON-NLS-2$ //$NON-NLS-1$", "+\t\tint length = message.length();", "+\t\tint start = -1;", "+\t\tint end = length;", "+\t\tStringBuffer output = null;", "+\t\twhile (true) {", "+\t\t\tif ((end = message.indexOf('{', start)) > -1) {", "+\t\t\t\tif (output == null) output = new StringBuffer(80);", "+\t\t\t\toutput.append(message.substring(start + 1, end));", "+\t\t\t\tif ((start = message.indexOf('}', end)) > -1) {", "+\t\t\t\t\tint index = -1;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tindex = Integer.parseInt(message.substring(end + 1, start));", "+\t\t\t\t\t\toutput.append(bindings[index]);", "+\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "+\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "+\t\t\t\t\t\tboolean done = false;", "+\t\t\t\t\t\tif (!id.equals(argId)) {", "+\t\t\t\t\t\t\tString argMessage = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "+\t\t\t\t\t\t\t\toutput.append(argMessage);", "+\t\t\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "+\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "+\t\t\t\t\t\toutput.append(\"{missing \" + Integer.toString(index) + \"}\"); //$NON-NLS-2$ //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\toutput.append(message.substring(end, length));", "+\t\t\t\t\tbreak;", "-\t\t\t\toutput.append(message.substring(end, length));", "+\t\t\t\tif (output == null) return message;", "+\t\t\t\toutput.append(message.substring(start + 1, length));", "-\t\t} else {", "-\t\t\toutput.append(message.substring(start + 1, length));", "-\t\t\tbreak;", "+\t\treturn output.toString();", "-\treturn output.toString();", "-}"]}], "num": 18527}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "228d7fe996b91d2f668566fe3b068f15", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed94d0ea68e10972cdfc667ee710f18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "988b834a35e1571af05adddd8db1ce5aaa1f0ff0", "commitAfterChange": "c90773ded969a955dbf869e7d3cd599898423a64", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected static TestSuite addMethodsToSuite(Class testClass)", "signatureAfterChange": " \tprotected static TestSuite createSuite(Class testClass)", "diff": ["-\tprotected static TestSuite addMethodsToSuite(Class testClass) {", "+\t */", "+\tprotected static TestSuite createSuite(Class testClass) {", "-\t\t\t\t\tint levels = getASTLevelsForTest(name);", "-\t\t\t\t\tif ( (levels & LEVEL_2) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS2_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_3) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS3_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_4) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS4_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_8) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(AST.JLS8)}));", "-\t\t\t\t\t// In future when adding support for new levels, make sure you update the getASTLevelsForTest() method too", "-\t\t\t\t\t// and create a new SINCE_* constant and update the value of SINCE_8", "+\t\t\t\t\t", "+\t\t\t\t\tint index = name.indexOf(ONLY_AST_STRING);", "+\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\tString suffix = name.substring(index + ONLY_AST_STRING.length() + 1);", "+\t\t\t\t\t\tString[] levels = suffix.split(STRING_);", "+\t\t\t\t\t\tfor (int l= 0; l < levels.length; l++) {", "+\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  Integer.valueOf(levels[l])}));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint since = -1;", "+\t\t\t\t\t\tindex = name.indexOf(SINCE_AST_STRING);", "+\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\tString suffix = name.substring(index + SINCE_AST_STRING.length() + 1);", "+\t\t\t\t\t\t\tsince = Integer.parseInt(suffix);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int j= 0; j < JLS_LEVELS.length; j++) {", "+\t\t\t\t\t\t\tint level = JLS_LEVELS[j];", "+\t\t\t\t\t\t\tif (level >= since) {", "+\t\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(level)}));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4376e2a71a6302de2434bcafd7fe287", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java", "commitBeforeChange": "14aaae6e589afc08756540e2b0c7b0b83003376b", "commitAfterChange": "0f2fe4c87f2d34f3b54dd9231d53f8675d730578", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static Test buildAllCompliancesSetupSuite(Class testSuiteClass, Class setupClass, List testClasses)", "signatureAfterChange": " \tpublic static Test buildAllCompliancesTestSuite(Class testSuiteClass, Class setupClass, List testClasses)", "diff": ["+\t */", "+\tpublic static Test buildAllCompliancesTestSuite(Class testSuiteClass, Class setupClass, List testClasses) {", "+\t\tTestSuite suite = new TestSuite(testSuiteClass.getName());", "+\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "+\t\t\tsuite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_3));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "+\t\t\tsuite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_4));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "+\t\t\tsuite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_5));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {", "+\t\t\tsuite.addTest(buildComplianceTestSuite(testClasses, setupClass, COMPLIANCE_1_6));", "+\t\t}", "+\t\treturn suite;", "+\t}", "-\t */", "-\tpublic static Test buildAllCompliancesSetupSuite(Class testSuiteClass, Class setupClass, List testClasses) {", "-\t\tTestSuite suite = new TestSuite(testSuiteClass.getName());", "-\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "-\t\tif ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "-\t\t\tsuite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_3));", "-\t\t}", "-\t\tif ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "-\t\t\tsuite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_4));", "-\t\t}", "-\t\tif ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "-\t\t\tsuite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_5));", "-\t\t}", "-\t\tif ((complianceLevels & AbstractCompilerTest.F_1_6) != 0) {", "-\t\t\tsuite.addTest(buildComplianceSetupTestSuite(testClasses, setupClass, COMPLIANCE_1_6));", "-\t\t}", "-\t\treturn suite;", "-\t}"]}], "num": 22350}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2be9bb6288a0d9acfcdba1fa380c8c5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ebb4a3717c108a18efa7a427580466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration node)", "diff": ["+\t\tint apiLevel= node.getAST().apiLevel();", "+\t\t", "-\t\tprintModifiers(getIntAttribute(node, TypeDeclaration.MODIFIERS_PROPERTY), this.result);", "-\t\t", "+", "+\t\tif (apiLevel == AST.JLS2) {", "+\t\t\tprintModifiers(getIntAttribute(node, TypeDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\t} else {", "+\t\t\tvisitList(node, TypeDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\t}", "+\t", "+\t\tif (apiLevel >= AST.JLS3) {", "+\t\t\tvisitList(node, TypeDeclaration.TYPE_PARAMETERS_PROPERTY, String.valueOf(','), String.valueOf('<'), String.valueOf('>'));", "+\t\t}", "+", "-\t\tASTNode superclass= getChildNode(node, TypeDeclaration.SUPERCLASS_PROPERTY);", "+\t\t", "+\t\tChildPropertyDescriptor superClassProperty= (apiLevel == AST.JLS2) ? TypeDeclaration.SUPERCLASS_PROPERTY : TypeDeclaration.SUPERCLASS_TYPE_PROPERTY;", "+\t\tASTNode superclass= getChildNode(node, superClassProperty);", "+\t\tChildListPropertyDescriptor superInterfaceProperty= (apiLevel == AST.JLS2) ? TypeDeclaration.SUPER_INTERFACES_PROPERTY : TypeDeclaration.SUPER_INTERFACE_TYPES_PROPERTY;", "-\t\tvisitList(node, TypeDeclaration.SUPER_INTERFACES_PROPERTY, String.valueOf(','), lead);", "+\t\tvisitList(node, superInterfaceProperty, String.valueOf(','), lead, EMPTY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8792221a71d84b68a62d87311ec08a68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\tprintModifiers(getIntAttribute(node, MethodDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\tprintModifiers(getIntAttribute(node, MethodDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\t} else {", "+\t\t\tvisitList(node, MethodDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\t}", "+\t\t", "-\t\t\tgetChildNode(node, MethodDeclaration.RETURN_TYPE_PROPERTY).accept(this);", "+\t\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\t\tgetChildNode(node, MethodDeclaration.RETURN_TYPE_PROPERTY).accept(this);", "+\t\t\t} else {", "+\t\t\t\tASTNode returnType = getChildNode(node, MethodDeclaration.RETURN_TYPE2_PROPERTY);", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.accept(this);", "+\t\t\t\t} else {", "+\t\t\t\t\t// methods really ought to have a return type", "+\t\t\t\t\tthis.result.append(\"void\");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "-\t\tvisitList(node, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY, String.valueOf(','), \" throws \"); //$NON-NLS-1$", "+\t\tvisitList(node, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY, String.valueOf(','), \" throws \", EMPTY); //$NON-NLS-1$"]}], "num": 4900}
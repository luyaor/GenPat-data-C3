{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "621983988695d8a6e3560cfe6f330c41", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809fec916db36d42b3263230f03108b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\tString[] optionsToProcess = new String[allOptions.size()];", "+\t\tfinal String[] optionsToProcess = new String[allOptions.size()];", "-    \t\t\tthrow new UnsupportedOperationException();", "+    \t\t\tArrayList<Processor> temp = new ArrayList<Processor>();", "+    \t\t\tfor (Processor processor : processors) {", "+    \t\t\t\ttemp.add(processor);", "+    \t\t\t}", "+    \t\t\tProcessor[] processors2 = new Processor[temp.size()];", "+    \t\t\ttemp.toArray(processors2);", "+    \t\t\tEclipseCompiler.this.processors = processors2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7d3bd9ff0d21db17a12739a0dc82992", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationProcessorManager.java", "commitBeforeChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "commitAfterChange": "aa852841b1dd73414418bf5fc5420a74b80d0cd9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic void setProcessors(Object[] processors)", "signatureAfterChange": "  \t@Override \tpublic void setProcessors(Object[] processors)", "diff": ["-\t\t// do nothing", "+\t\tif (!_isFirstRound) {", "+\t\t\tthrow new IllegalStateException(\"setProcessors() cannot be called after processing has begun\");", "+\t\t}", "+\t\t// Cast all the processors here, rather than failing later.", "+\t\t// But don't call init() until the processor is actually needed.", "+\t\t_setProcessors = new ArrayList<Processor>(processors.length);", "+\t\tfor (Object o : processors) {", "+\t\t\tProcessor p = (Processor)o;", "+\t\t\t_setProcessors.add(p);", "+\t\t}", "+\t\t_setProcessorIter = _setProcessors.iterator();", "+", "+\t\t// processors set this way take precedence over anything on the command line ", "+\t\t_commandLineProcessors = null;", "+\t\t_commandLineProcessorIter = null;"]}], "num": 45476}
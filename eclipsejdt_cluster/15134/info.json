{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4840b06223e6cd9a5d776eebfba6f9ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12916af06016fd86ad7b6e7e384e5152", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "a31fc41a761266e1336ef1dbd295debe293f4d81", "commitAfterChange": "4cad3f68ebca407bf91db6d03bc970a0ea223e63", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": "\t \t \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t, Scope scope)", "diff": ["-\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {", "-\t\tif (super.sIsMoreSpecific(s, t))", "+\t", "+\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t, Scope scope) {", "+\t\tif (super.sIsMoreSpecific(s, t, scope))", "-\t\t\t\tthis.valueIfTrue.sIsMoreSpecific(s, t) && this.valueIfFalse.sIsMoreSpecific(s, t):", "+\t\t\t\tthis.valueIfTrue.sIsMoreSpecific(s, t, scope) && this.valueIfFalse.sIsMoreSpecific(s, t, scope):"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3644b322b882c1d1ac82f0801b649253", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "e489533002c2a8aea30eadfa50c303ea4823e94d", "commitAfterChange": "31362234b943750140a7714a1b76106b136f08fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected CompilationUnit createAST3(ICompilationUnit cu)", "signatureAfterChange": " \t \tprotected CompilationUnit createAST3(ICompilationUnit cu, boolean statementsRecovery)", "diff": ["+\t", "+\tprotected CompilationUnit createAST3(ICompilationUnit cu, boolean statementsRecovery) {", "+\t\tparser.setStatementsRecovery(statementsRecovery);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf9128748cda9fc0d5156808827bbb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "a31fc41a761266e1336ef1dbd295debe293f4d81", "commitAfterChange": "4cad3f68ebca407bf91db6d03bc970a0ea223e63", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t)", "signatureAfterChange": "  \tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t, Scope skope)", "diff": ["-\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {", "+\tpublic boolean sIsMoreSpecific(TypeBinding s, TypeBinding t, Scope skope) {", "-\t\tif (super.sIsMoreSpecific(s, t))", "+\t\tif (super.sIsMoreSpecific(s, t, skope))", "-\t\tif (r1.isCompatibleWith(r2))", "+\t\tif (r1.isCompatibleWith(r2, skope))", "-\t\t\t\tif (!resultExpression.sIsMoreSpecific(r1, r2))", "+\t\t\t\tif (!resultExpression.sIsMoreSpecific(r1, r2, skope))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16ad58e95af060fe404091cdebc285a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "718f134410758d0c3958ff0713b43b8ae289788b", "commitAfterChange": "20f8a24204e3d8e78975ced9c8fd79f8776dcf1e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\t\t\tdisassemble(attribute, buffer, lineSeparator, tabNumber, mode);", "-\t\t\t\tdisassemble((IAnnotationDefaultAttribute) annotationDefaultAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\tdisassemble((IAnnotationDefaultAttribute) annotationDefaultAttribute, buffer, lineSeparator, tabNumber, mode);", "-\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\tdisassemble((IRuntimeVisibleAnnotationsAttribute) runtimeVisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber, mode);", "-\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\tdisassemble((IRuntimeInvisibleAnnotationsAttribute) runtimeInvisibleAnnotationsAttribute, buffer, lineSeparator, tabNumber, mode);", "-\t\t\t\tdisassemble((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\tdisassemble((IRuntimeVisibleParameterAnnotationsAttribute) runtimeVisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber, mode);", "-\t\t\t\tdisassemble((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber);", "+\t\t\t\tdisassemble((IRuntimeInvisibleParameterAnnotationsAttribute) runtimeInvisibleParameterAnnotationsAttribute, buffer, lineSeparator, tabNumber, mode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed2a31395cdc33ddcc047a3a199cdd32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic ConstructorDeclaration parseStatements(char[] source, int offset, int length, Map settings, boolean recordParsingInformation)", "signatureAfterChange": " \t \tpublic ConstructorDeclaration parseStatements(char[] source, int offset, int length, Map settings, boolean recordParsingInformation, boolean enabledStatementRecovery)", "diff": ["-\tpublic ConstructorDeclaration parseStatements(char[] source, int offset, int length, Map settings, boolean recordParsingInformation) {", "+\tpublic ConstructorDeclaration parseStatements(char[] source, int offset, int length, Map settings, boolean recordParsingInformation, boolean enabledStatementRecovery) {", "+\t\tparser.setStatementsRecovery(enabledStatementRecovery);"]}], "num": 15134}
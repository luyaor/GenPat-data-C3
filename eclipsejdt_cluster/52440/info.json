{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f89a26e94e9884cbfeef17b7cb881d85", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99ca6e265f98507e79563a1cb9c8d119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "f5a6b32f5440a6dc40e1353ed6c94f89e64c1de3", "commitAfterChange": "53dd39a8862ca5242dbb932ca83dc2b678997664", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void assertInvalidTypeSignature(String typeName, boolean isResolved) throws JavaModelException", "signatureAfterChange": " protected void assertInvalidTypeSignature(String typeName, boolean isResolved, String expected) throws JavaModelException", "diff": ["-protected void assertInvalidTypeSignature(String typeName, boolean isResolved) throws JavaModelException {", "-\tboolean gotException = false;", "+protected void assertInvalidTypeSignature(String typeName, boolean isResolved, String expected) throws JavaModelException {", "+\tString actual;", "-\t\tSignature.createTypeSignature(typeName, isResolved);", "+\t\tactual = Signature.createTypeSignature(typeName, isResolved);", "-\t\tgotException = true;", "+\t\treturn;", "-\tassertTrue(\"Should have got an IllegalArgumentException for \" + typeName, gotException);", "+\tassertEquals(expected, actual);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8e3d0df3eccf799c45c8df80de3e62f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExistenceTests.java", "commitBeforeChange": "cae7f8c61c51ef4d85d837657b5392af988fbdde", "commitAfterChange": "578d821fa14706debbd7277feb7d8a3dc6683433", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void assertOpenFails(IOpenable openable)", "signatureAfterChange": " protected void assertOpenFails(String expectedMessage, IOpenable openable)", "diff": ["-protected void assertOpenFails(IOpenable openable) {", "-\tboolean gotException = false;", "+protected void assertOpenFails(String expectedMessage, IOpenable openable) {", "+\tString message = \"\";", "-\t\tif (e.isDoesNotExist()) {", "-\t\t\tgotException = true;", "-\t\t}", "+\t\tmessage = e.getMessage();", "-\tassertTrue(\"Should not be able to open element\", gotException);", "+\tif (!expectedMessage.equals(message)) {", "+\t\tSystem.out.print(Util.displayString(message, 3));", "+\t\tSystem.out.println(\",\");", "+\t}", "+\tassertEquals(expectedMessage, message);"]}], "num": 52440}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a48462415d760fbf1a7c9c2b00df63a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6df89985b2295a152e6d00644593e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "874cc60b34062d184abafc157c764e3af128769a", "commitAfterChange": "946979c8e5ddaa5ee72e6c4a1d2d619fb28b1d8f", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 236, "signatureBeforeChange": " \tprotected void touch(File f)", "signatureAfterChange": " \tprotected void touch(File f)", "diff": ["-\t\tf.setLastModified(lastModified + time);", "+\t\tf.setLastModified(lastModified + time);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6892e9f0e7d9dbb59fa9bda2a1e92394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "c8e7a959ceee9c2fcd5e69703c49273f43d8f66e", "commitAfterChange": "6c4672b1e2a9f0f79cc6133dda1f6a85c52a7092", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tflowContext.recordUsingNullReference(currentScope, local,", "-\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL | FlowContext.IN_INSTANCEOF, flowInfo);", "+\t\tflowContext.recordUsingNullReference(currentScope, local,", "+\t\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL | FlowContext.IN_INSTANCEOF, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7750a350b3801efda6b7ca1a8e8a0623", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "a7da40a1a62439fc4b1ece4f5221022e1778c205", "commitAfterChange": "0ad2415ee4f1a2517a3e261113b08f2dfc4514f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": "   \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-        if (this.bootclasspath != null) {", "+\t\tif (this.bootclasspath != null) {", "-        \tif (this.bootclasspath.size() != 0) {", "-    \t\t\t/*", "-    \t\t\t * Set the bootclasspath for the Eclipse compiler.", "-    \t\t\t */", "-    \t\t\tcmd.createArgument().setPath(this.bootclasspath);", "-        \t} else {", "-    \t\t\tcmd.createArgument().setValue(Util.EMPTY_STRING);", "-        \t}", "-        }", "+\t\t\tif (this.bootclasspath.size() != 0) {", "+\t\t\t\t/*", "+\t\t\t\t * Set the bootclasspath for the Eclipse compiler.", "+\t\t\t\t */", "+\t\t\t\tcmd.createArgument().setPath(this.bootclasspath);", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(Util.EMPTY_STRING);", "+\t\t\t}", "+\t\t}", "-        Path classpath = new Path(this.project);", "+\t\tPath classpath = new Path(this.project);", "-       /*", "-         * Eclipse compiler doesn't support -extdirs.", "-         * It is emulated using the classpath. We add extdirs entries after the", "-         * bootclasspath.", "-         */", "-        if (this.extdirs != null) {", "+\t\t/*", "+\t\t * Eclipse compiler doesn't support -extdirs.", "+\t\t * It is emulated using the classpath. We add extdirs entries after the", "+\t\t * bootclasspath.", "+\t\t */", "+\t\tif (this.extdirs != null) {", "-        }", "+\t\t}", "-        classpath.append(getCompileClasspath());", "+\t\tclasspath.append(getCompileClasspath());", "-        // For -sourcepath, use the \"sourcepath\" value if present.", "-        // Otherwise default to the \"srcdir\" value.", "-        Path sourcepath = null;", "+\t\t// For -sourcepath, use the \"sourcepath\" value if present.", "+\t\t// Otherwise default to the \"srcdir\" value.", "+\t\tPath sourcepath = null;", "-        // retrieve the method getSourcepath() using reflect", "-        // This is done to improve the compatibility to ant 1.5", "-        Method getSourcepathMethod = null;", "-        try {", "-\t        getSourcepathMethod = javacClass.getMethod(\"getSourcepath\", null); //$NON-NLS-1$", "-        } catch(NoSuchMethodException e) {", "-        \t// if not found, then we cannot use this method (ant 1.5)", "-        }", "-        Path compileSourcePath = null;", "-        if (getSourcepathMethod != null) {", "-\t \t\ttry {", "+\t\t// retrieve the method getSourcepath() using reflect", "+\t\t// This is done to improve the compatibility to ant 1.5", "+\t\tMethod getSourcepathMethod = null;", "+\t\ttry {", "+\t\t\tgetSourcepathMethod = javacClass.getMethod(\"getSourcepath\", null); //$NON-NLS-1$", "+\t\t} catch(NoSuchMethodException e) {", "+\t\t\t// if not found, then we cannot use this method (ant 1.5)", "+\t\t}", "+\t\tPath compileSourcePath = null;", "+\t\tif (getSourcepathMethod != null) {", "+\t\t\ttry {", "-        }", "-        if (compileSourcePath != null) {", "-            sourcepath = compileSourcePath;", "-        } else {", "-            sourcepath = this.src;", "-        }", "+\t\t}", "+\t\tif (compileSourcePath != null) {", "+\t\t\tsourcepath = compileSourcePath;", "+\t\t} else {", "+\t\t\tsourcepath = this.src;", "+\t\t}", "-        final String javaVersion = JavaEnvUtils.getJavaVersion();", "+\t\tfinal String javaVersion = JavaEnvUtils.getJavaVersion();", "-        if (this.memoryInitialSize != null) {", "-            if (!this.attributes.isForkedJavac()) {", "-                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-            } else {", "-                cmd.createArgument().setValue(memoryParameterPrefix", "-                                              + \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "-            }", "-        }", "+\t\tif (this.memoryInitialSize != null) {", "+\t\t\tif (!this.attributes.isForkedJavac()) {", "+\t\t\t\tthis.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(memoryParameterPrefix", "+\t\t\t\t\t\t+ \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "-        if (this.memoryMaximumSize != null) {", "-            if (!this.attributes.isForkedJavac()) {", "-                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-            } else {", "-                cmd.createArgument().setValue(memoryParameterPrefix", "-                                              + \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "-            }", "-        }", "+\t\tif (this.memoryMaximumSize != null) {", "+\t\t\tif (!this.attributes.isForkedJavac()) {", "+\t\t\t\tthis.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(memoryParameterPrefix", "+\t\t\t\t\t\t+ \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "-        if (this.debug) {", "-\t       // retrieve the method getSourcepath() using reflect", "-\t        // This is done to improve the compatibility to ant 1.5", "-\t        Method getDebugLevelMethod = null;", "-\t        try {", "-\t\t        getDebugLevelMethod = javacClass.getMethod(\"getDebugLevel\", null); //$NON-NLS-1$", "-\t        } catch(NoSuchMethodException e) {", "-\t        \t// if not found, then we cannot use this method (ant 1.5)", "-\t        \t// debug level is only available with ant 1.5.x", "-\t        }", "-     \t    String debugLevel = null;", "-\t        if (getDebugLevelMethod != null) {", "+\t\tif (this.debug) {", "+\t\t\t// retrieve the method getSourcepath() using reflect", "+\t\t\t// This is done to improve the compatibility to ant 1.5", "+\t\t\tMethod getDebugLevelMethod = null;", "+\t\t\ttry {", "+\t\t\t\tgetDebugLevelMethod = javacClass.getMethod(\"getDebugLevel\", null); //$NON-NLS-1$", "+\t\t\t} catch(NoSuchMethodException e) {", "+\t\t\t\t// if not found, then we cannot use this method (ant 1.5)", "+\t\t\t\t// debug level is only available with ant 1.5.x", "+\t\t\t}", "+\t\t\tString debugLevel = null;", "+\t\t\tif (getDebugLevelMethod != null) {", "-        \t}", "+\t\t\t}", "-            }", "-        } else {", "+\t\t\t}", "+\t\t} else {", "-        }", "+\t\t}", "-\t        // disable all warnings", "+\t\t\t// disable all warnings", "-\t   \t/*", "+\t\t/*", "-        if (source != null) {", "+\t\tif (source != null) {", "-        }", "-", "-\t\t/*", "-\t\t * encoding option", "-\t\t */", "-        if (this.encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "-            cmd.createArgument().setValue(this.encoding);", "-        }", "+\t\t}", "-\t        /*", "+\t\t\t/*", "-\t\t\t        cmd.createArgument().setValue(arg);", "+\t\t\t\t\tcmd.createArgument().setValue(arg);", "-\t   \t}", "-     \t/*", "+\t\t}", "+\t\t/*", "+\t\t * encoding option. javac task encoding property must be the last encoding on the command", "+\t\t * line as compiler arg might also specify an encoding.", "+\t\t */", "+\t\tif (this.encoding != null) {", "+\t\t\tcmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "+\t\t\tcmd.createArgument().setValue(this.encoding);", "+\t\t}", "+", "+\t\t/*", "-        logAndAddFilesToCompile(cmd);", "-        return cmd;", "+\t\tlogAndAddFilesToCompile(cmd);", "+\t\treturn cmd;"]}], "num": 69865}
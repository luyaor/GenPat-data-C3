{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c05a5b484fe2f6e809d1f1d73486711", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d8e13a23b38a40b9f42c58bfd115ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "2f81606b204235a7fea213d9e3c8df9d3bed65b9", "commitAfterChange": "af85a4064bb6dcfadda2603d722c6067b5a89418", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "signatureAfterChange": "\r \r \tprivate IBinding returnBindingForQualifiedNamePart(ASTNode parent, int index)", "diff": ["-\t\t\t\t\tScope internalScope = retrieveEnclosingScope(parent);\r", "-\t\t\t\t\tBinding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\t\tBinding binding = null;\r", "+\t\t\t\t\tif (internalScope == null) {\r", "+\t\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedNameReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t\t}\r", "-\t\t\t\tScope internalScope = retrieveEnclosingScope(parent);\r", "-\t\t\t\tBinding binding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\tBlockScope internalScope = retrieveEnclosingScope(parent);\r", "+\t\t\t\tBinding binding = null;\r", "+\t\t\t\tif (internalScope == null) {\r", "+\t\t\t\t\tbinding = this.scope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tbinding = internalScope.getTypeOrPackage(CharOperation.subarray(qualifiedTypeReference.tokens, 0, indexInQualifiedName));\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c012ad145c7cbb8fd59198e7206f2c68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t", "+\tFlowInfo preInitInfo = null;", "+\tboolean shouldAnalyseResource = local != null ", "+\t\t\t&& flowInfo.reachMode() == FlowInfo.REACHABLE ", "+\t\t\t&& (FakedTrackingVariable.isAnyCloseable(this.expression.resolvedType)", "+\t\t\t\t\t|| this.expression.resolvedType == TypeBinding.NULL);", "+\tif (shouldAnalyseResource) {", "+\t\tpreInitInfo = flowInfo.unconditionalCopy();", "+\t\t// analysis of resource leaks needs additional context while analyzing the RHS:", "+\t\tFakedTrackingVariable.preConnectTrackerAcrossAssignment(this, local, this.expression);", "+\t}", "+\t", "-\tif (local != null) {", "-\t\tLocalVariableBinding previousTrackerBinding = null;", "-\t\tif (local.closeTracker != null) {", "-\t\t\t// Assigning to a variable already holding an AutoCloseable, has it been closed before?", "-\t\t\tpreviousTrackerBinding = local.closeTracker.binding;", "-\t\t\tif (!flowInfo.isDefinitelyNull(local)) // only if previous value may be non-null", "-\t\t\t\tlocal.closeTracker.recordErrorLocation(this, flowInfo.nullStatus(previousTrackerBinding));", "-\t\t}", "-\t\tFakedTrackingVariable.handleResourceAssignment(flowInfo, this, this.expression, local, previousTrackerBinding);", "-\t}", "+", "+\tif (shouldAnalyseResource)", "+\t\tFakedTrackingVariable.handleResourceAssignment(currentScope, preInitInfo, flowInfo, this, this.expression, local);", "+\telse", "+\t\tFakedTrackingVariable.cleanUpAfterAssignment(currentScope, this.lhs.bits, this.expression);", "+"]}], "num": 51036}
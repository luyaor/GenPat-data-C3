{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c739f48447c49e4f80b3312acc510b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009a4b03e0317731e049cd8b159d47fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f3c9675cf51bb72e29fbc9d7f34e4971169f02fd", "commitAfterChange": "16b5be2e00222a3a00629ad2d72eba0fbb1b2400", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["-\t\t\t} ", "+\t\t\t} else if (token.startsWith(\"nullAnnot\")) { //$NON-NLS-1$", "+\t\t\t\tString annotationNames = Util.EMPTY_STRING;", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString nonNullAnnotName = null, nullableAnnotName = null, nonNullByDefaultAnnotName = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tannotationNames = token.substring(start+1, end).trim();", "+\t\t\t\t\tint separator1 = annotationNames.indexOf('|');", "+\t\t\t\t\tif (separator1 == -1) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tnullableAnnotName = annotationNames.substring(0, separator1).trim();", "+\t\t\t\t\tif (nullableAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tint separator2 = annotationNames.indexOf('|', separator1 + 1);", "+\t\t\t\t\tif (separator2 == -1) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tnonNullAnnotName = annotationNames.substring(separator1 + 1, separator2).trim();", "+\t\t\t\t\tif (nonNullAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tnonNullByDefaultAnnotName = annotationNames.substring(separator2 + 1).trim();", "+\t\t\t\t\tif (nonNullByDefaultAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, nullableAnnotName);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, nonNullAnnotName);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationName, nonNullByDefaultAnnotName);", "+\t\t\t\t}", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_AnnotationBasedNullAnalysis,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullSpecViolation, severity, isEnabling);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportPotentialNullSpecViolation, severity, isEnabling);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullSpecInsufficientInfo, severity, isEnabling);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportRedundantNullAnnotation, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f90524ecee2651378cb3e6b62f3289d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6c5ed1b4ed06e066835a3bf2ea35d093c31d8a42", "commitAfterChange": "8bc47c693f418d320513158fd7b4c7024ff227d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int InsideDefaultEncoding = 64;\r", "-\t\t\t\r", "+\tboolean didSpecifyDefaultEncoding = false;\r", "+\r", "+\tString customEncoding = null;\r", "+\tString currentArg = \"\";\r", "+\t\t\r", "-\t\tString currentArg = argv[index].trim();\r", "+\r", "+\t\tif (customEncoding != null){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$\r", "+\t\t}\r", "+\r", "+\t\tcurrentArg = argv[index].trim();\r", "+\r", "+\t\tcustomEncoding = null;\r", "+\t\tif (currentArg.endsWith(\"]\")){ // look for encoding specification\r", "+\t\t\tint encodingStart = currentArg.indexOf('[') + 1;\r", "+\t\t\tint encodingEnd = currentArg.length() - 1;\r", "+\t\t\tif (encodingStart >= 1){\r", "+\t\t\t\tif (encodingStart < encodingEnd){\r", "+\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);\r", "+\t\t\t\t\ttry {// ensure encoding is supported\r", "+\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);\r", "+\t\t\t\t\t} catch(UnsupportedEncodingException e){\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\t\t\tencodings = new String[argCount - index];\r", "+\t\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + argCount - index]), 0, length);\r", "-\t\t\tfilenames[filesCount++] = currentArg;\r", "+\t\t\tfilenames[filesCount] = currentArg;\r", "+\t\t\tencodings[filesCount++] = customEncoding;\r", "+\t\t\tcustomEncoding = null;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$\r", "+\t\t\tmode = InsideDefaultEncoding;\r", "+\t\tif (mode == InsideDefaultEncoding){\r", "+\t\t\tif (didSpecifyDefaultEncoding){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateDefaultEncoding\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\ttry { // ensure encoding is supported\r", "+\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);\r", "+\t\t\t} catch(UnsupportedEncodingException e){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\toptions.put(CompilerOptions.OPTION_Encoding, currentArg);\r", "+\t\t\tdidSpecifyDefaultEncoding = true;\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + filesCount]), 0, filesCount);\r", "+\t\t\tfor (int i = 0; i < length; i++){\r", "+\t\t\t\tencodings[filesCount+i] = customEncoding;\r", "+\t\t\t}\r", "+\t\t\tcustomEncoding = null;\r", "+\t\t\tencodings = new String[filesCount];\r", "+\t\t\tfor (int i = 0; i < filesCount; i++){\r", "+\t\t\t\tencodings[i] = customEncoding;\r", "+\t\t\t}\r", "+\t\t\tcustomEncoding = null;\r"]}], "num": 51762}
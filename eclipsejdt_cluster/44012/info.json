{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a04c5fae4ec340a5902d30f9e4bd615", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253f62d827fe9e15838b92e3a4436054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void prepareComments()", "signatureAfterChange": "  \tprivate TextEdit internalFormatClassBodyDeclarations(String source, int indentationLevel, String lineSeparator, ASTNode[] bodyDeclarations, IRegion[] regions, boolean includeComments)", "diff": ["-", "-\tprivate void prepareComments() {", "-\t\tCommentsPreparator commentsPreparator = new CommentsPreparator(this.tokenManager, this.workingOptions,", "-\t\t\t\tthis.sourceLevel);", "-\t\tList<Comment> comments = ((CompilationUnit) this.astRoot.getRoot()).getCommentList();", "-\t\tfor (Comment comment : comments) {", "-\t\t\tcomment.accept(commentsPreparator);", "+\tprivate TextEdit internalFormatClassBodyDeclarations(String source, int indentationLevel, String lineSeparator, ASTNode[] bodyDeclarations, IRegion[] regions, boolean includeComments) {", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t} else {", "+\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "-\t\tcommentsPreparator.finishUp();", "+\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, includeComments);", "+\t\treturn this.newCodeFormatter.format(source, bodyDeclarations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9397c300cb8da881a7d50f02487ad113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate boolean init(String source)", "signatureAfterChange": "  \tprivate TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["-", "-\tprivate boolean init(String source) {", "-", "-\t\t// this is convenient for debugging (see Token.toString())", "-\t\t// Token.source = source;", "-", "-\t\tthis.sourceString = source;", "-\t\tthis.sourceArray = source.toCharArray();", "-\t\tthis.tokens.clear();", "-\t\tthis.tokenManager = new TokenManager(this.tokens, source, this.workingOptions);", "-", "-\t\ttokenizeSource();", "-\t\treturn !this.tokens.isEmpty();", "-\t}", "+", "+\tprivate TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), this.defaultCompilerOptions, true);", "+", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t} else {", "+\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "+\t\t}", "+\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, includeComments);", "+", "+\t\treturn this.newCodeFormatter.format(source, compilationUnitDeclaration);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6b021046ed22923eb729bb2a81c691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate void prepareLineBreaks()", "signatureAfterChange": "  \tprivate TextEdit internalFormatExpression(String source, int indentationLevel, String lineSeparator, Expression expression, IRegion[] regions, boolean includeComments)", "diff": ["-", "-\tprivate void prepareLineBreaks() {", "-\t\tLineBreaksPreparator breaksPreparator = new LineBreaksPreparator(this.tokenManager, this.workingOptions);", "-\t\tthis.astRoot.accept(breaksPreparator);", "-\t\tbreaksPreparator.finishUp();", "-\t}", "+\tprivate TextEdit internalFormatExpression(String source, int indentationLevel, String lineSeparator, Expression expression, IRegion[] regions, boolean includeComments) {", "+\t\tif (lineSeparator != null) {", "+\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t} else {", "+\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "+\t\t}", "+\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+", "+\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, includeComments);", "+", "+\t\tTextEdit textEdit = this.newCodeFormatter.format(source, expression);", "+\t\treturn textEdit;", "+\t}"]}], "num": 44012}
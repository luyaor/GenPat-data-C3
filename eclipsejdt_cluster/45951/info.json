{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e41eb93255818f41586c247bac690ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a11713578517dcd239ecd1aef47e1f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\tthis.problemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "-\t\t\t\tif (mustImplementAbstractMethod(methods[i])) {", "+\t\t\t\tif (mustImplementAbstractMethod(methods[i].declaringClass)) {", "-\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t\t\t\tproblemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "-\t\tthis.problemReporter().staticInheritedMethodConflicts(type, concreteMethod, abstractMethods);\t", "+\t\tproblemReporter().staticInheritedMethodConflicts(type, concreteMethod, abstractMethods);\t", "-\t\tthis.problemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "+\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "-\t\t\tthis.checkExceptions(concreteMethod, abstractMethods[i]);", "+\t\t\tcheckExceptions(concreteMethod, abstractMethods[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ad5d388b62b0aa37504c7e10b744345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-", "-\t// Remember that interfaces can only define public instance methods", "-\tif (concreteMethod.isStatic())", "-\t\t// Cannot inherit a static method which is specified as an instance method by an interface", "-\t\tproblemReporter().staticInheritedMethodConflicts(type, concreteMethod, abstractMethods);\t", "-\tif (!concreteMethod.isPublic())", "-\t\t// Cannot reduce visibility of a public method specified by an interface", "-\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "-\tif (concreteMethod.thrownExceptions != NoExceptions)", "-\t\tfor (int i = abstractMethods.length; --i >= 0;)", "-\t\t\tcheckExceptions(concreteMethod, abstractMethods[i]);", "+\tcheckConcreteInheritedMethod(concreteMethod, abstractMethods);"]}], "num": 45951}
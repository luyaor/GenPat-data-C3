{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb4ac9193d40fae77329b1f35378b284", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f8a6908761dd8a63abcb093d50ec5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \t\r \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "signatureAfterChange": "\r \t\r \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "diff": ["+\t\t\tclassInstanceCreation.resolveTypeBinding();\r", "-\t\tint fieldsLength;\r", "-\t\tint methodsLength;\r", "-\t\tint memberTypesLength;\r", "-\r", "-\t\t// <superclass> is bound to the actual type from the allocation expression\r", "-\t\t// therefore it has already been iterated at this point.\r", "-\t\tMemberTypeDeclaration[] memberTypes = expression.memberTypes;\r", "-\t\tif (memberTypes != null) {\r", "-\t\t\tmemberTypesLength = memberTypes.length;\r", "-\t\t\tfor (int i = 0; i < memberTypesLength; i++) {\r", "-\t\t\t\tclassInstanceCreation.bodyDeclarations().add(convert(memberTypes[i]));\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = expression.fields;\r", "-\t\tif (fields != null) {\r", "-\t\t\tfieldsLength = fields.length;\r", "-\t\t\tfor (int i = 0; i < fieldsLength; i++) {\r", "-\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, i, classInstanceCreation.bodyDeclarations());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = expression.methods;\r", "-\t\tif (methods != null) {\r", "-\t\t\tmethodsLength = methods.length;\r", "-\t\t\tfor (int i = 0; i < methodsLength; i++) {\r", "-\t\t\t\tif (!methods[i].isDefaultConstructor() && !methods[i].isClinit()) {\r", "-\t\t\t\t\tclassInstanceCreation.bodyDeclarations().add(convert(methods[i]));\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tbuildBodyDeclarations(expression, classInstanceCreation);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b312e4e9c8a426d9511dcc44d0ee2239", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 61, "signatureBeforeChange": "  void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "signatureAfterChange": "  void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType)", "diff": ["-\t// walk all the unique collections & replace the unresolvedType with the resolvedType", "-\t// must prevent 2 entries so == still works (1 containing the unresolvedType and the other containing the resolvedType)", "-\tif (this.uniqueParameterizedTypeBindings.get(unresolvedType) != null) { // update the key", "-\t\tObject[] keys = this.uniqueParameterizedTypeBindings.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tif (keys[i] == unresolvedType) {", "-\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works - cannot be raw since type of parameterized type", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (this.uniqueRawTypeBindings.get(unresolvedType) != null) { // update the key", "-\t\tObject[] keys = this.uniqueRawTypeBindings.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tif (keys[i] == unresolvedType) {", "-\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (this.uniqueWildcardBindings.get(unresolvedType) != null) { // update the key", "-\t\tObject[] keys = this.uniqueWildcardBindings.keyTable;", "-\t\tfor (int i = 0, l = keys.length; i < l; i++) {", "-\t\t\tif (keys[i] == unresolvedType) {", "-\t\t\t\tkeys[i] = resolvedType; // hashCode is based on compoundName so this works", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tthis.typeSystem.updateCaches(unresolvedType, resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04e74c7fa3e2cd10e4e1e6ea96bdd29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "\t\r \r \tpublic TypeDeclaration convert(MemberTypeDeclaration typeDeclaration)", "signatureAfterChange": "\t\r \r \tpublic TypeDeclaration convert(MemberTypeDeclaration typeDeclaration)", "diff": ["+\t\t\ttypeDecl.resolveBinding();\r", "-\t\tMemberTypeDeclaration[] members = typeDeclaration.memberTypes;\r", "-\t\tif (members != null) {\r", "-\t\t\tfor (int i = 0, length = members.length; i < length; i++) {\r", "-\t\t\t\ttypeDecl.bodyDeclarations().add(convert(members[i]));\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fields[] = typeDeclaration.fields;\r", "-\t\tif (fields != null) {\r", "-\t\t\tint fieldsLength = fields.length;\r", "-\t\t\tfor (int i = 0; i < fieldsLength; i++) {\r", "-\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, i, typeDecl.bodyDeclarations());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;\r", "-\t\tif (methods != null) {\r", "-\t\t\tint methodsLength = methods.length;\r", "-\t\t\tfor (int i = 0; i < methodsLength; i++) {\r", "-\t\t\t\tif (!methods[i].isDefaultConstructor() && !methods[i].isClinit()) {\r", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(methods[i]));\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tbuildBodyDeclarations(typeDeclaration, typeDecl);\r"]}], "num": 18945}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68f92647b698d252ac40a058ab0d1eb0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a009dee278cf215c3d6944e77b45beab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo copy()", "signatureAfterChange": "  public FlowInfo copy()", "diff": ["+", "+public FlowInfo copy() {", "+\t// do not clone the DeadEnd", "+\tif (this == DEAD_END) {", "-\t */", "-\tpublic FlowInfo copy() {", "-\t\t", "-\t\t// do not clone the DeadEnd", "-\t\tif (this == DEAD_END)", "-\t\t\treturn this;", "-\t", "-\t\t// look for an unused preallocated object", "-\t\tUnconditionalFlowInfo copy = new UnconditionalFlowInfo();", "-\t", "-\t\t// copy slots", "-\t\tcopy.definiteInits = this.definiteInits;", "-\t\tcopy.potentialInits = this.potentialInits;", "-\t\tcopy.definiteNulls = this.definiteNulls;", "-\t\tcopy.definiteNonNulls = this.definiteNonNulls;", "-\t\tcopy.reachMode = this.reachMode;", "-\t\tcopy.maxFieldCount = this.maxFieldCount;", "-\t\t", "-\t\tif (this.extraDefiniteInits != null) {", "-\t\t\tint length;", "-\t\t\tSystem.arraycopy(this.extraDefiniteInits, 0, (copy.extraDefiniteInits = new long[length = extraDefiniteInits.length]), 0, length);", "-\t\t\tSystem.arraycopy(this.extraPotentialInits, 0, (copy.extraPotentialInits = new long[length]), 0, length);", "-\t\t\tSystem.arraycopy(this.extraDefiniteNulls, 0, (copy.extraDefiniteNulls = new long[length]), 0, length);", "-\t\t\tSystem.arraycopy(this.extraDefiniteNonNulls, 0, (copy.extraDefiniteNonNulls = new long[length]), 0, length);", "-\t\t}", "-\t\treturn copy;", "+\tUnconditionalFlowInfo copy = new UnconditionalFlowInfo();", "+\t// copy slots", "+\tcopy.definiteInits = this.definiteInits;", "+\tcopy.potentialInits = this.potentialInits;", "+\tboolean hasNullInfo = (this.tagBits & NULL_FLAG_MASK) != 0;", "+\tif (hasNullInfo) { ", "+\t\tcopy.nullAssignmentStatusBit1 = this.nullAssignmentStatusBit1;", "+\t\tcopy.nullAssignmentStatusBit2 = this.nullAssignmentStatusBit2;", "+\t\tcopy.nullAssignmentValueBit1 = this.nullAssignmentValueBit1;", "+\t\tcopy.nullAssignmentValueBit2 = this.nullAssignmentValueBit2;", "+\tcopy.tagBits = this.tagBits;", "+\tcopy.maxFieldCount = this.maxFieldCount;", "+\tif (this.extra != null) {", "+\t\tint length;", "+\t\tcopy.extra = new long[extraLength][];", "+\t\tSystem.arraycopy(this.extra[0], 0, ", "+\t\t\t(copy.extra[0] = new long[length = this.extra[0].length]), 0, ", "+\t\t\tlength);", "+\t\tSystem.arraycopy(this.extra[1], 0, ", "+\t\t\t(copy.extra[1] = new long[length]), 0, length);", "+\t\tif (hasNullInfo) {", "+\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t(copy.extra[j] = new long[length]), 0, length);", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\tcopy.extra[j] = new long[length];", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn copy;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4b5ac8c115cff1183e2098c2139ec71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": " public void illegalInstanceOfGenericType(TypeBinding checkedType, ASTNode location)", "signatureAfterChange": " public void illegalInstanceOfGenericType(TypeBinding checkedType, ASTNode location)", "diff": ["-\tif (checkedType.isTypeVariable()) {", "+\tTypeBinding erasedType = checkedType.leafComponentType().erasure();", "+\tStringBuffer recommendedFormBuffer = new StringBuffer(10);", "+\trecommendedFormBuffer.append(erasedType.sourceName());", "+\tint count = erasedType.typeVariables().length;", "+\tif (count > 0) {", "+\t\trecommendedFormBuffer.append('<');", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tif (i > 0) {", "+\t\t\t\trecommendedFormBuffer.append(',');", "+\t\t\t}", "+\t\t\trecommendedFormBuffer.append('?');", "+\t\t}", "+\t\trecommendedFormBuffer.append('>');", "+\t}", "+\tfor (int i = 0, dim = checkedType.dimensions(); i < dim; i++) {", "+\t\trecommendedFormBuffer.append(\"[]\"); //$NON-NLS-1$", "+\t}", "+\tString recommendedForm = recommendedFormBuffer.toString();", "+\tif (checkedType.leafComponentType().isTypeVariable()) {", "-\t\tIProblem.IllegalInstanceofTypeParameter,", "-\t\t\tnew String[] { new String(checkedType.readableName()), new String(checkedType.erasure().readableName())},", "-\t\t\tnew String[] { new String(checkedType.shortReadableName()), new String(checkedType.erasure().shortReadableName())},", "-\t\t\tlocation.sourceStart,", "-\t\t\tlocation.sourceEnd);", "+\t\t\tIProblem.IllegalInstanceofTypeParameter,", "+\t\t\tnew String[] { new String(checkedType.readableName()), recommendedForm, },", "+\t\t\tnew String[] { new String(checkedType.shortReadableName()), recommendedForm, },", "+\t\t\t\tlocation.sourceStart,", "+\t\t\t\tlocation.sourceEnd);", "-\t\tnew String[] { new String(checkedType.readableName()), new String(checkedType.erasure().sourceName())},", "-\t\tnew String[] { new String(checkedType.shortReadableName()), new String(checkedType.erasure().sourceName())},", "+\t\tnew String[] { new String(checkedType.readableName()), recommendedForm, },", "+\t\tnew String[] { new String(checkedType.shortReadableName()), recommendedForm, },"]}], "num": 18504}
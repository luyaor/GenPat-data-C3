{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a983f5ee45e338ab7467104d35f077a3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "281127710802e7f39271b7c4ff949638", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "8db2a22a82e2d4efc29edee16188f254a9d47da3", "commitAfterChange": "72fd8c6a4dc73c6ac3a3682b35550798adce77f5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "diff": ["-\t\t\tfinal ArrayList participants = new ArrayList();", "+\t\t\tfinal HashMap modifyingEnv = new HashMap();", "+\t\t\tfinal HashMap creatingProblems = new HashMap();", "+\t\t\tfinal HashMap others = new HashMap();", "-\t\t\t\t\tIConfigurationElement [] configElements = extensions[j].getConfigurationElements();", "+\t\t\t\t\tIConfigurationElement[] configElements = extensions[j].getConfigurationElements();", "-\t\t\t\t\t\t\t\t\tparticipants.add(execExt);", "+\t\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "+\t\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "+\t\t\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "-\t\t\tint size = participants.size();", "+\t\t\tint size = modifyingEnv.size() + creatingProblems.size() + others.size();", "-\t\t\tparticipants.toArray(result);", "-\t\t\tfor (int i = 0; i < size; i++) {", "-\t\t\t\tfinal CompilationParticipant participant = result[i];", "-\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while configuring compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\tparticipant.configure(participants);", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t\t}", "-\t\t\tsize = participants.size();", "-\t\t\tif (size != result.length)", "-\t\t\t\tresult = new CompilationParticipant[size];", "-\t\t\tparticipants.toArray(result);", "+\t\t\tint index = 0;", "+\t\t\tindex = sortParticipants(modifyingEnv, result, index);", "+\t\t\tindex = sortParticipants(creatingProblems, result, index);", "+\t\t\tindex = sortParticipants(others, result, index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32534dd1d66047f83eec7caacd753932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseFileManager.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic boolean handleOption(String current, Iterator<String> remaining)", "signatureAfterChange": " \tpublic boolean handleOption(String current, Iterator<String> remaining)", "diff": ["-\t\t\t\t\tfinal Iterable<? extends File> bootclasspaths = getBootclasspathFrom(remaining.next());", "+\t\t\t\t\tfinal Iterable<? extends File> bootclasspaths = getPathsFrom(remaining.next());", "-\t\t\t\t\tfinal Iterable<? extends File> classpaths = getClasspathFrom(remaining.next());", "+\t\t\t\t\tfinal Iterable<? extends File> classpaths = getPathsFrom(remaining.next());", "-\t\t\t\t\tfinal Iterable<? extends File> sourcepaths = getSourcepathFrom(remaining.next());", "+\t\t\t\t\tfinal Iterable<? extends File> sourcepaths = getPathsFrom(remaining.next());", "-\t\t\tif (\"-d\".equals(current)) {//$NON-NLS-1$", "+\t\t\tif (\"-d\".equals(current)) { //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tremaining.remove();", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (\"-s\".equals(current)) { //$NON-NLS-1$", "+\t\t\t\tremaining.remove(); // remove the current option", "+\t\t\t\tif (remaining.hasNext()) {", "+\t\t\t\t\tfinal Iterable<? extends File> outputDir = getOutputDir(remaining.next());", "+\t\t\t\t\tif (outputDir != null) {", "+\t\t\t\t\t\tsetLocation(StandardLocation.SOURCE_OUTPUT, outputDir);", "+\t\t\t\t\t}", "+\t\t\t\t\tremaining.remove();", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\tif (\"-processorpath\".equals(current) || \"-cp\".equals(current)) {//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\tremaining.remove(); // remove the current option", "+\t\t\t\tif (remaining.hasNext()) {", "+\t\t\t\t\tfinal Iterable<? extends File> processorpaths = getPathsFrom(remaining.next());", "+\t\t\t\t\tif (processorpaths != null) {", "+\t\t\t\t\t\tIterable<? extends File> iterable = getLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH);", "+\t\t\t\t\t\tsetLocation(StandardLocation.ANNOTATION_PROCESSOR_PATH, ", "+\t\t\t\t\t\t\tprependFiles(iterable, processorpaths));"]}], "num": 5128}
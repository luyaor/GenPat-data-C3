{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5dafb48542aa80873ca21f78693d73ef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9132f153952542b1104a62118cefa28f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\t\t\t\tObject[] emulationPath = currentScope.getExactEmulationPath(currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT));", "-\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t\t}", "+\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecaa41db3555ea2c0e15225502081a4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\tcurrentScope.getExactEmulationPath(currentCompatibleType);", "-\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t}", "+\t\t\t\t\tcurrentScope.getEmulationPath(this.currentCompatibleType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, this.currentCompatibleType, currentScope);"]}], "num": 52647}
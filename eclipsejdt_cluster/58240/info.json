{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35c67620b00e4b8ca9650b8617678816", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30515f5f421532442df223fe2ee456fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException", "signatureAfterChange": " public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException", "diff": ["-\t}", "-\tpublic IBinaryType getBinaryInfo(org.eclipse.jdt.internal.core.ClassFile classFile, IResource resource) throws CoreException {", "-\t\tBinaryType binaryType = (BinaryType)classFile.getType();", "-\t\tif (classFile.isOpen()) {", "-\t\t\t// reuse the info from the java model cache", "-\t\t\treturn (IBinaryType)binaryType.getElementInfo();", "-\t\t} else {", "-\t\t\t// create a temporary info", "-\t\t\tIBinaryType info;", "-\t\t\ttry {", "-\t\t\t\tIJavaElement pkg = classFile.getParent();", "-\t\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)pkg.getParent();", "-\t\t\t\tif (root.isArchive()) {", "-\t\t\t\t\t// class file in a jar", "-\t\t\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "-\t\t\t\t\tString classFilePath = ", "-\t\t\t\t\t\t(pkgPath.length() > 0) ?", "-\t\t\t\t\t\t\tpkgPath + \"/\" + classFile.getElementName() : //$NON-NLS-1$", "-\t\t\t\t\t\t\tclassFile.getElementName();", "-\t\t\t\t\tZipFile zipFile = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tzipFile = ((JarPackageFragmentRoot)root).getJar();", "-\t\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(", "-\t\t\t\t\t\t\tzipFile,", "-\t\t\t\t\t\t\tclassFilePath);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// class file in a directory", "-\t\t\t\t\tString osPath = resource.getLocation().toOSString();", "-\t\t\t\t\tinfo = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(osPath);", "-\t\t\t\t}", "-\t\t\t\treturn info;", "-\t\t\t} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {", "-\t\t\t\t//e.printStackTrace();", "-\t\t\t\treturn null;", "-\t\t\t} catch (java.io.IOException e) {", "-\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t\t}", "-\t\t}", "-\t}", "+}", "+public IBinaryType getBinaryInfo(ClassFile classFile, IResource resource) throws CoreException {", "+\tBinaryType binaryType = (BinaryType) classFile.getType();", "+\tif (classFile.isOpen())", "+\t\treturn (IBinaryType) binaryType.getElementInfo(); // reuse the info from the java model cache", "+", "+\t// create a temporary info", "+\tIBinaryType info;", "+\ttry {", "+\t\tIJavaElement pkg = classFile.getParent();", "+\t\tPackageFragmentRoot root = (PackageFragmentRoot) pkg.getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\t// class file in a jar", "+\t\t\tString pkgPath = pkg.getElementName().replace('.', '/');", "+\t\t\tString classFilePath = pkgPath.length() > 0", "+\t\t\t\t? pkgPath + \"/\" + classFile.getElementName() //$NON-NLS-1$", "+\t\t\t\t: classFile.getElementName();", "+\t\t\tZipFile zipFile = null;", "+\t\t\ttry {", "+\t\t\t\tzipFile = ((JarPackageFragmentRoot) root).getJar();", "+\t\t\t\tinfo = ClassFileReader.read(zipFile, classFilePath);", "+\t\t\t} finally {", "+\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// class file in a directory", "+\t\t\tString osPath = resource.getLocation().toOSString();", "+\t\t\tinfo = ClassFileReader.read(osPath);", "+\t\t}", "+\t\treturn info;", "+\t} catch (ClassFormatException e) {", "+\t\t//e.printStackTrace();", "+\t\treturn null;", "+\t} catch (java.io.IOException e) {", "+\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71984caf0ee497309baaca581d2947f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic static long getJdkLevel(Object targetLibrary)", "signatureAfterChange": " \tpublic static long getJdkLevel(Object targetLibrary)", "diff": ["-\t\t\t\tClassFileReader reader = null;", "-\t\t\t\tif (targetLibrary instanceof IFolder) {", "-\t\t\t\t\tIFile classFile = findFirstClassFile((IFolder) targetLibrary); // only internal classfolders are allowed", "-\t\t\t\t\tif (classFile != null) {", "-\t\t\t\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(classFile);", "-\t\t\t\t\t\tIPath location = classFile.getLocation();", "-\t\t\t\t\t\treader = new ClassFileReader(bytes, location == null ? null : location.toString().toCharArray());", "+\t\t\tClassFileReader reader = null;", "+\t\t\tif (targetLibrary instanceof IFolder) {", "+\t\t\t\tIFile classFile = findFirstClassFile((IFolder) targetLibrary); // only internal classfolders are allowed", "+\t\t\t\tif (classFile != null)", "+\t\t\t\t\treader = Util.newClassFileReader(classFile);", "+\t\t\t} else {", "+\t\t\t\t// root is a jar file or a zip file", "+\t\t\t\tZipFile jar = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tIPath path = null;", "+\t\t\t\t\tif (targetLibrary instanceof IResource) {", "+\t\t\t\t\t\tpath = ((IResource)targetLibrary).getLocation();", "+\t\t\t\t\t} else if (targetLibrary instanceof File){", "+\t\t\t\t\t\tFile f = (File) targetLibrary;", "+\t\t\t\t\t\tif (!f.isDirectory()) {", "+\t\t\t\t\t\t\tpath = new Path(((File)targetLibrary).getPath());", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// root is a jar file or a zip file", "-\t\t\t\t\tZipFile jar = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tIPath path = null;", "-\t\t\t\t\t\tif (targetLibrary instanceof IResource) {", "-\t\t\t\t\t\t\tpath = ((IResource)targetLibrary).getLocation();", "-\t\t\t\t\t\t} else if (targetLibrary instanceof File){", "-\t\t\t\t\t\t\tFile f = (File) targetLibrary;", "-\t\t\t\t\t\t\tif (!f.isDirectory()) {", "-\t\t\t\t\t\t\t\tpath = new Path(((File)targetLibrary).getPath());", "+\t\t\t\t\tif (path != null) {", "+\t\t\t\t\t\tjar = JavaModelManager.getJavaModelManager().getZipFile(path);", "+\t\t\t\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "+\t\t\t\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "+\t\t\t\t\t\t\tString entryName= member.getName();", "+\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\t\t\treader = ClassFileReader.read(jar, entryName);", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tif (path != null) {", "-\t\t\t\t\t\t\tjar = JavaModelManager.getJavaModelManager().getZipFile(path);", "-\t\t\t\t\t\t\tfor (Enumeration e= jar.entries(); e.hasMoreElements();) {", "-\t\t\t\t\t\t\t\tZipEntry member= (ZipEntry) e.nextElement();", "-\t\t\t\t\t\t\t\tString entryName= member.getName();", "-\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryName)) {", "-\t\t\t\t\t\t\t\t\treader = ClassFileReader.read(jar, entryName);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t// ignore", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t} finally {", "+\t\t\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(jar);", "-\t\t\t\tif (reader != null) {", "-\t\t\t\t\treturn reader.getVersion();", "-\t\t\t\t}", "-\t\t} catch(JavaModelException e) {", "+\t\t\t}", "+\t\t\tif (reader != null) {", "+\t\t\t\treturn reader.getVersion();", "+\t\t\t}", "+\t\t} catch (CoreException e) {"]}], "num": 58240}
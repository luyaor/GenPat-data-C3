{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dda90367a4cc65083586e3bcd87e70d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6ee7e34c3161f1d43c3589e0027348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "e08c13a0c3bb4d09711ac8489d25db103dbf1d29", "commitAfterChange": "ef615d69291882d9684ed70ee76e1c7e60ee0223", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void setUpBigProject() throws CoreException", "signatureAfterChange": " private void setUpBigProject() throws CoreException", "diff": ["-//\t\tboolean linux = \"linux\".equals(System.getProperty(\"osgi.os\", \"?\"));", "+\t\tlong start = System.currentTimeMillis();", "+\t\tif (PRINT) System.out.println(\"Create project \"+BIG_PROJECT_NAME+\":\");", "+", "-//\t\tfinal int rootLength = linux ? LINUX_FOLDERS_COUNT : FOLDERS_COUNT;", "-\t\tfinal String[] sourceFolders = new String[/*rootLength*/FOLDERS_COUNT];", "-\t\tfor (int i = 0; i < /*rootLength*/FOLDERS_COUNT; i++) {", "+\t\tfinal String[] sourceFolders = new String[FOLDERS_COUNT];", "+\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\tif (PRINT) System.out.print(\"\t- create \"+FOLDERS_COUNT+\" folders and \"+PACKAGES_COUNT+\" packages...\");", "-//\t\tint packLength = linux ? LINUX_PACKAGES_COUNT : PACKAGES_COUNT;", "-\t\tfor (int i = 0; i < /*rootLength*/FOLDERS_COUNT; i++) {", "-\t\t\tfor (int j = 0; j < /*packLength*/PACKAGES_COUNT; j++) {", "+\t\tfor (int i = 0; i < FOLDERS_COUNT; i++) {", "+\t\t\tif (PRINT && ((i+1)%10)==0) System.out.print(\"\t\t+ folder src\"+i+\"...\");", "+\t\t\tlong top = System.currentTimeMillis();", "+\t\t\tfor (int j = 0; j < PACKAGES_COUNT; j++) {", "+\t\t\tif (PRINT && ((i+1)%10)==0) System.out.println(\"(\"+(System.currentTimeMillis()-top)+\"ms)\");", "+\t\t}", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t\tSystem.out.print(\"\t- add project to full source workspace...\");", "-\t\tBIG_PROJECT = (JavaProject) createJavaProject(\"BigProject\", sourceFolders, \"bin\", \"1.4\");", "+\t\tBIG_PROJECT = (JavaProject) createJavaProject(BIG_PROJECT_NAME, sourceFolders, \"bin\", \"1.4\");", "-\t\tBIG_PROJECT_TYPE_PATH = new Path(\"/BigProject/src\" + (/*rootLength*/FOLDERS_COUNT-1) + \"/org/eclipse/jdt/core/tests\" + (/*rootLength*/FOLDERS_COUNT-1) + \"/performance\" + (/*packLength*/PACKAGES_COUNT-1) + \"/TestBigProject.java\");", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t\tSystem.out.print(\"\t- Create compilation unit with secondary type...\");", "+\t\t}", "+\t\tBIG_PROJECT_TYPE_PATH = new Path(\"/BigProject/src\" + (FOLDERS_COUNT-1) + \"/org/eclipse/jdt/core/tests\" + (FOLDERS_COUNT-1) + \"/performance\" + (PACKAGES_COUNT-1) + \"/TestBigProject.java\");", "-\t\tString content = \"package org.eclipse.jdt.core.tests\" + (/*rootLength*/FOLDERS_COUNT-1) + \".performance\" + (/*packLength*/PACKAGES_COUNT-1) + \";\\n\" +", "+\t\tString content = \"package org.eclipse.jdt.core.tests\" + (FOLDERS_COUNT-1) + \".performance\" + (PACKAGES_COUNT-1) + \";\\n\" +", "+\t\tif (PRINT) {", "+\t\t\tSystem.out.println(\"(\"+(System.currentTimeMillis()-start)+\"ms)\");", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c3a8eded2dd5be76ce293a77d0d92b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic String createIndentationString(final int indentationLevel)", "signatureAfterChange": "  \tpublic String createIndentationString(final int indentationLevel)", "diff": ["-\t\tStringBuilder sb = new StringBuilder();", "-\t\tint indent = indentationLevel * this.originalOptions.indentation_size;", "-\t\tTextEditsBuilder.appendIndentationString(sb, this.originalOptions.tab_char, this.originalOptions.tab_size,", "-\t\t\t\tindent, 0);", "-\t\treturn sb.toString();", "+\t\tint tabs = 0;", "+\t\tint spaces = 0;", "+\t\tswitch(this.preferences.tab_char) {", "+\t\t\tcase DefaultCodeFormatterOptions.SPACE :", "+\t\t\t\tspaces = indentationLevel * this.preferences.tab_size;", "+\t\t\t\tbreak;", "+\t\t\tcase DefaultCodeFormatterOptions.TAB :", "+\t\t\t\ttabs = indentationLevel;", "+\t\t\t\tbreak;", "+\t\t\tcase DefaultCodeFormatterOptions.MIXED :", "+\t\t\t\tint tabSize = this.preferences.tab_size;", "+\t\t\t\tif (tabSize != 0) {", "+\t\t\t\t\tint spaceEquivalents = indentationLevel * this.preferences.indentation_size;", "+\t\t\t\t\ttabs = spaceEquivalents / tabSize;", "+\t\t\t\t\tspaces = spaceEquivalents % tabSize;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\treturn Util.EMPTY_STRING;", "+\t\t}", "+\t\tif (tabs == 0 && spaces == 0) {", "+\t\t\treturn Util.EMPTY_STRING;", "+\t\t}", "+\t\tStringBuffer buffer = new StringBuffer(tabs + spaces);", "+\t\tfor(int i = 0; i < tabs; i++) {", "+\t\t\tbuffer.append('\\t');", "+\t\t}", "+\t\tfor(int i = 0; i < spaces; i++) {", "+\t\t\tbuffer.append(' ');", "+\t\t}", "+\t\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bbc0fb67427bacb82bb012ec8755531", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "302f1877ad74fd63c3cd5c56aacc5cc510a8d88b", "commitAfterChange": "240c118718aa210b0d9c1362ebe7843e41fba8b4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["+\tlong start = System.currentTimeMillis(); // debug", "+\tint docsLength = searchDocuments.length;", "-\t\tfor (int i = 0, length = searchDocuments.length; i < length; i++)", "+\t\tfor (int i = 0; i < docsLength; i++)", "-\t", "+", "+\t// init infos for progress increasing", "+\tint n = docsLength<1000 ? Math.min(Math.max(docsLength/100, 2),4) : 5 *(docsLength/1000);", "+\tthis.progressStep = docsLength < n ? 1 : docsLength / n; // step should not be 0", "+\tthis.progressWorked = 0;", "+", "-\tfor (int i = 0, length = searchDocuments.length; i < length; i++) {", "+\tfor (int i = 0; i < docsLength; i++) {", "-\t\tint skipped = 0;", "-\t\tfor (int i = 0, l = searchDocuments.length; i < l; i++) {", "-\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tint displayed = 0; // progress worked displayed", "+\t\tfor (int i = 0; i < docsLength; i++) {", "+\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) {", "+\t\t\t}", "-\t\t\t\tskipped++;", "+\t\t\t\tif (this.progressMonitor != null) {", "+\t\t\t\t\tthis.progressWorked++;", "+\t\t\t\t\tif ((this.progressWorked%this.progressStep)==0) this.progressMonitor.worked(this.progressStep);", "+\t\t\t\t}", "+\t\t\t\tdisplayed++;", "-\t\t\t\tif (openable == null) continue; // match is outside classpath", "+\t\t\t\tif (openable == null) {", "+\t\t\t\t\tif (this.progressMonitor != null) {", "+\t\t\t\t\t\tthis.progressWorked++;", "+\t\t\t\t\t\tif ((this.progressWorked%this.progressStep)==0) this.progressMonitor.worked(this.progressStep);", "+\t\t\t\t\t}", "+\t\t\t\t\tdisplayed++;", "+\t\t\t\t\tcontinue; // match is outside classpath", "+\t\t\t\t}", "-\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "+\t\t\t\t\t\tlocateMatches(previousJavaProject, matchSet, i-displayed);", "+\t\t\t\t\t\tdisplayed = i;", "-\t\t\t\t\tif (this.progressMonitor != null)", "-\t\t\t\t\t\tthis.progressMonitor.worked(skipped);", "-\t\t\t\tskipped = 0;", "-\t\t\tskipped++;", "-\t\t\t\tlocateMatches(previousJavaProject, matchSet);", "+\t\t\t\tlocateMatches(previousJavaProject, matchSet, docsLength-displayed);", "-\t\t\tif (this.progressMonitor != null)", "-\t\t\t\tthis.progressMonitor.worked(skipped);", "-\t}\t", "+\t}", "+\t// debug", "+\tSystem.out.println(\"Time to locate \" + //$NON-NLS-1$", "+\t\t\tthis.progressWorked+", "+\t\t\t\" matches: \" + //$NON-NLS-1$", "+\t\t\t(System.currentTimeMillis() - start) +", "+\t\t\t\" ms\"); //$NON-NLS-1$", "+\t// end debug"]}], "num": 20644}
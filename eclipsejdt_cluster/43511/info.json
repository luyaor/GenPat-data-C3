{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97261cf1005108f1a2e4721fe7cbb2f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "045e084ad74f186c051606af9fd375c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "d8bba06dba65d28b4ac0590368e9ea6b313bfaa8", "commitAfterChange": "e734477cf19ee0bbdf44ea8e0b55e663163c306b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["+", "+\t\t// Signal tag missing description if necessary", "+\t\tswitch (this.tagWaitingForDescription) {", "+\t\t\tcase TAG_PARAM_VALUE:", "+\t\t\tcase TAG_THROWS_VALUE:", "+\t\t\t\tint start = (int) (this.identifierPositionStack[0] >>> 32);", "+\t\t\t\tint end = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescriptionAfterReference(start, end, this.sourceParser.modifiers);", "+\t\t\t\tbreak;", "+\t\t\tcase NO_TAG_VALUE:", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(TAG_NAMES[this.tagWaitingForDescription], this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.tagWaitingForDescription = NO_TAG_VALUE;", "-\t\tboolean alreadyParsedTag = false;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "-\t\t\t\t\t\t\t// no argument expected for @inheritedDoc tag", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\t\t\t\talreadyParsedTag = true;", "+\t\t\t\t\t\t\tthis.tagWaitingForDescription = this.tagValue;", "-\t\t\t\talreadyParsedTag = true;", "-\t\t\t\t/* verify characters after return tag (we're expecting text description)", "-\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "-\t\t\t\t\tif (this.sourceParser != null) {", "-\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "-\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t*/", "-\t\t\t\talreadyParsedTag = true;", "-\t\tif (this.tagValue != TAG_OTHERS_VALUE && ! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {", "-\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(tagName, this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "-\t\t\treturn false;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38648cae5d37087960c11ca729b5e1c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 235, "signatureBeforeChange": " protected void parse()", "signatureAfterChange": " protected void parse()", "diff": ["-\tboolean isDietParse = diet;", "+\tboolean isDietParse = this.diet;", "-\thasError = false;", "+\tthis.hasError = false;", "-\thasReportedError = false;", "+\tthis.hasReportedError = false;", "-\tstateStackTop = -1;", "-\tcurrentToken = getFirstToken();", "+\tthis.stateStackTop = -1;", "+\tthis.currentToken = getFirstToken();", "-\t\t\tstack[++stateStackTop] = act;", "+\t\t\tthis.stack[++this.stateStackTop] = act;", "-\t\t\tint oldStackLength = stack.length;", "-\t\t\tint oldStack[] = stack;", "-\t\t\tstack = new int[oldStackLength + StackIncrement];", "-\t\t\tSystem.arraycopy(oldStack, 0, stack, 0, oldStackLength);", "-\t\t\tstack[stateStackTop] = act;", "+\t\t\tint oldStackLength = this.stack.length;", "+\t\t\tint oldStack[] = this.stack;", "+\t\t\tthis.stack = new int[oldStackLength + StackIncrement];", "+\t\t\tSystem.arraycopy(oldStack, 0, this.stack, 0, oldStackLength);", "+\t\t\tthis.stack[this.stateStackTop] = act;", "-\t\tact = tAction(act, currentToken);", "+\t\tact = tAction(act, this.currentToken);", "-\t\tif (act == ERROR_ACTION || restartRecovery) {", "-\t\t\tint errorPos = scanner.currentPosition;", "-\t\t\tif (!hasReportedError){", "-\t\t\t\thasError = true;", "+\t\tif (act == ERROR_ACTION || this.restartRecovery) {", "+\t\t\tint errorPos = this.scanner.currentPosition;", "+\t\t\tif (!this.hasReportedError){", "+\t\t\t\tthis.hasError = true;", "-\t\t\t\tif (act == ERROR_ACTION) lastErrorEndPosition = errorPos;", "+\t\t\t\tif (act == ERROR_ACTION) this.lastErrorEndPosition = errorPos;", "-\t\t\t\t\tstateStackTop = -1;", "-\t\t\t\t\tcurrentToken = getFirstToken();", "+\t\t\t\t\tthis.stateStackTop = -1;", "+\t\t\t\t\tthis.currentToken = getFirstToken();", "-\t\t\t\tstateStackTop--;", "+\t\t\t\tthis.stateStackTop--;", "-\t\t\t\t\tconsumeToken(currentToken);", "-\t\t\t\t\tif (currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\t\tconsumeToken(this.currentToken);", "+\t\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\t\t\tcurrentToken = scanner.getNextToken();", "+\t\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\t\t\tif (!hasReportedError){", "+\t\t\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\t\t\thasReportedError = true;", "+\t\t\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t\t\tlastCheckPoint = scanner.currentPosition;", "-\t\t\t\t\t\trestartRecovery = true;", "+\t\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\t\t\t\tthis.restartRecovery = true;", "-\t\t\t\t\t\tconsumeToken(currentToken);", "-\t\t\t\t\t\tif (currentElement != null) this.recoveryTokenCheck();", "+\t\t\t\t\t\tconsumeToken(this.currentToken);", "+\t\t\t\t\t\tif (this.currentElement != null) this.recoveryTokenCheck();", "-\t\t\t\t\t\t\tcurrentToken = scanner.getNextToken();", "+\t\t\t\t\t\t\tthis.currentToken = this.scanner.getNextToken();", "-\t\t\t\t\t\t\tif (!hasReportedError){", "+\t\t\t\t\t\t\tif (!this.hasReportedError){", "-\t\t\t\t\t\t\t\thasReportedError = true;", "+\t\t\t\t\t\t\t\tthis.hasReportedError = true;", "-\t\t\t\t\t\t\tlastCheckPoint = scanner.currentPosition;", "-\t\t\t\t\t\t\trestartRecovery = true;", "+\t\t\t\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\t\t\t\t\tthis.restartRecovery = true;", "-\t\t\tstateStackTop -= (rhs[act] - 1);", "-\t\t\tact = ntAction(stack[stateStackTop], lhs[act]);", "+\t\t\tthis.stateStackTop -= (rhs[act] - 1);", "+\t\t\tact = ntAction(this.stack[this.stateStackTop], lhs[act]);", "-\tif(reportSyntaxErrorIsRequired && hasError) {", "+\tif(this.reportSyntaxErrorIsRequired && this.hasError) {"]}], "num": 43511}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a2e52d05158f07b4671c69adfea6bfe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad65beb9422b5561799ace551df27fec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tstatic long requiredNullTagBits(TypeBinding type, CheckMode mode)", "signatureAfterChange": " \tstatic long requiredNullTagBits(TypeBinding type, CheckMode mode)", "diff": ["-\t\t\tif (mode != CheckMode.BOUND_CHECK) // no pessimistic checks during boundcheck (we *have* the instantiation)", "-\t\t\t\treturn TagBits.AnnotationNonNull; // instantiation could require @NonNull", "+\t\t\tswitch (mode) {", "+\t\t\t\tcase BOUND_CHECK: // no pessimistic checks during boundcheck (we *have* the instantiation)", "+\t\t\t\tcase OVERRIDE_RETURN: // allow covariance", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn TagBits.AnnotationNonNull; // instantiation could require @NonNull", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa12a952cc8033e2dcc3bf5977d4090e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "8f838ccefdcacadaac662cb88a80fdb1a3657843", "commitAfterChange": "658041315da1052ce94c7e1b37be530cbc4e1f1d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tstatic long requiredNullTagBits(TypeBinding type)", "signatureAfterChange": " \tstatic long requiredNullTagBits(TypeBinding type, CheckMode mode)", "diff": ["-\tstatic long requiredNullTagBits(TypeBinding type) {", "+\tstatic long requiredNullTagBits(TypeBinding type, CheckMode mode) {", "-\t\t\treturn TagBits.AnnotationNonNull; // instantiation could require @NonNull", "+\t\t\tif (mode != CheckMode.BOUND_CHECK) // no pessimistic checks during boundcheck (we *have* the instantiation)", "+\t\t\t\treturn TagBits.AnnotationNonNull; // instantiation could require @NonNull"]}], "num": 12589}
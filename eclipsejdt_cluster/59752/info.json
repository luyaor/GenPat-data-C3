{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c00c952e99ade390fcdfdaad7aa0fad3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "047710b3cb3715e96d243e370728b50a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "e998ae10322cb7f60a31fc6c5e4772816c1fbc92", "commitAfterChange": "f3aae3085ef4d874b17441c47725356fd2afe319", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "signatureAfterChange": "\r public IClasspathEntry getRawClasspathEntry() throws JavaModelException", "diff": ["+\t\t\tcase IClasspathEntry.CPE_CONTAINER:\r", "+\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(entry.getPath(), this.getJavaProject());\r", "+\t\t\t\tif (container != null){\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\tfor (int j = 0; j < containerEntries.length; j++){\r", "+\t\t\t\t\t\tIClasspathEntry containerEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\tif (containerEntry != null && path.equals(containerEntry.getPath())) {\r", "+\t\t\t\t\t\t\treturn entry; // answer original entry\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90e426022f6853d4101a667f6e72786", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java", "commitBeforeChange": "6a618f5105b380b0a9a5dc6bfffb855693be7fab", "commitAfterChange": "93613529f4763965d02155d2aaa1cabf71be7897", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic String getKey(boolean forceOpen) throws JavaModelException", "signatureAfterChange": " \tpublic String getKey(boolean forceOpen) throws JavaModelException", "diff": ["-\t\t\tStringBuilder buf = new StringBuilder(((IMethod)this.parent).getKey());", "+\t\t\tStringBuilder buf = new StringBuilder();", "+\t\t\tif (this.parent instanceof BinaryMethod)", "+\t\t\t\tbuf.append(((BinaryMethod) this.parent).getKey(forceOpen));", "+\t\t\telse", "+\t\t\t\tbuf.append(((IMethod)this.parent).getKey());", "+\t\t\tif (this.isParameter) {", "+\t\t\t\tILocalVariable[] parameters = ((IMethod) this.parent).getParameters();", "+\t\t\t\tfor (int i = 0; i < parameters.length; i++) {", "+\t\t\t\t\tif (this.equals(parameters[i])) {", "+\t\t\t\t\t\tbuf.append(\"#0#\").append(i); // always first occurrence, followed by parameter rank //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 59752}
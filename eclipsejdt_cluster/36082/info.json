{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a36e386629cdf09bae793dd2de78aa1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cfa45e217e0e418119d1f9be6b8604e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "3255db62a2a31c2b7911a20dbb001663d6aa8d6e", "commitAfterChange": "446232cf1f35af48915a191f1c4500b94c6d46e0", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r \tpublic void test036() throws Exception", "signatureAfterChange": "\r \tpublic void test036() throws Exception", "diff": ["+\t\t\"\t                       ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"3. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "-\t\t\"3. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"4. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                       ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"5. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                 ^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"6. ERROR in X.java (at line 3)\\n\" + \r", "-\t\t\"4. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"7. ERROR in X.java (at line 3)\\n\" + \r", "+\t\t\"\tSystem.out.println(int @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                              ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"8. ERROR in X.java (at line 4)\\n\" + \r", "-\t\t\"5. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"9. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                     ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"10. ERROR in X.java (at line 4)\\n\" + \r", "-\t\t\"6. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"11. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                     ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"12. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                               ^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"13. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"----------\\n\" + \r", "+\t\t\"14. ERROR in X.java (at line 4)\\n\" + \r", "+\t\t\"\tSystem.out.println(X @NonEmpty [] [] @NonEmpty @Empty [] [] @NonEmpty[].class); // illegal!\\n\" + \r", "+\t\t\"\t                                                            ^^^^^^^^^\\n\" + \r", "+\t\t\"Only annotation types that explicitly specify TYPE_USE as a possible target element type can be applied here\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73aad8cc06e37296963aeff31fc091e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 251, "signatureBeforeChange": " \tpublic void test247()", "signatureAfterChange": " \tpublic void test247()", "diff": ["-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Object>> mx2 = new MX<Class>(); // wrong\\n\" + ", "+\t\t\t\"\t                                         ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tMX<? extends Class> mx5 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t             ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tMX<? extends Class> mx5 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tMX<? super Class> mx6 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t           ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tMX<? super Class> mx6 = new MX<Class>(); // ok\\n\" + ", "+\t\t\t\"\t                               ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Class>> mx7 = new MX<Class<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tMX<Class<? extends Class>> mx7 = new MX<Class<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                                              ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tMX<MX<? extends Class>> mx8 = new MX<MX<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tMX<MX<? extends Class>> mx8 = new MX<MX<Class>>(); // wrong\\n\" + ", "+\t\t\t\"\t                                        ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}], "num": 36082}
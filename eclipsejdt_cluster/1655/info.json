{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3dad79eccc2dfd5183aec3b4a0766a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29995ad881f9eda5273aeb5abb9825f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "030294305389e5486e7f63658830617d44acd9c2", "commitAfterChange": "3f4495ecc3a42cb049fa3e01aeaf49a7722af380", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected String evaluateRewrite(ICompilationUnit cu, ASTRewrite rewrite) throws Exception", "signatureAfterChange": " \t \tprotected String evaluateRewrite(ICompilationUnit cu, ASTRewrite rewrite) throws Exception", "diff": ["-\t\tDocument document= new Document(cu.getSource());", "-\t\tTextEdit res= rewrite.rewriteAST(document, cu.getJavaProject().getOptions(true));", "+\t\tDocument document1= new Document(cu.getSource());", "+\t\tTextEdit res= rewrite.rewriteAST(document1, cu.getJavaProject().getOptions(true));", "+\t\tres.apply(document1);", "+\t\tString content1= document1.get();", "-\t\tres.apply(document);", "-\t\treturn document.get();", "+\t\tDocument document2= new Document(cu.getSource());", "+\t\tTextEdit res2= rewrite.rewriteAST();", "+\t\tres2.apply(document2);", "+\t\tString content2= document2.get();", "+\t\t", "+\t\tassertEquals(content1, content2);", "+\t\t", "+\t\treturn content1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29be3f64cb4518bb529134672f55c491", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["+\t\t\t\tString closestParameterTypeNames = parametersAsString(problemMethod.closestMatch);", "+\t\t\t\tString parameterTypeNames = parametersAsString(method);", "+\t\t\t\tString closestParameterTypeShortNames = parametersAsShortString(problemMethod.closestMatch);", "+\t\t\t\tString parameterTypeShortNames = parametersAsShortString(method);", "+\t\t\t\tif (closestParameterTypeShortNames.equals(parameterTypeShortNames)){", "+\t\t\t\t\tclosestParameterTypeShortNames = closestParameterTypeNames;", "+\t\t\t\t\tparameterTypeShortNames = parameterTypeNames;", "+\t\t\t\t}", "-\t\t\t\t\t\tparametersAsString(problemMethod.closestMatch),", "-\t\t\t\t\t\tparametersAsString(method)},", "+\t\t\t\t\t\tclosestParameterTypeNames,", "+\t\t\t\t\t\tparameterTypeNames ", "+\t\t\t\t\t},", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tnew String(problemMethod.closestMatch.declaringClass.shortReadableName()),", "+\t\t\t\t\t\tnew String(problemMethod.closestMatch.selector),", "+\t\t\t\t\t\tclosestParameterTypeShortNames,", "+\t\t\t\t\t\tparameterTypeShortNames", "+\t\t\t\t\t},", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\tnew String(method.selector), parametersAsShortString(method)},"]}], "num": 1655}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35e24b1ae509336285d4b71e1d9d5818", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6619272e2f7f6f58e4ad135513d31dfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": " public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tif (this.codegenBinding.canBeSeenBy(receiverType, this, currentScope)) {", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\tif (this.codegenBinding.canBeSeenBy(this.receiverType, this, currentScope)) {", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);", "-\t\treceiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "+\t\tthis.receiver.generateCode(currentScope, codeStream, !(isStatic = this.codegenBinding.isStatic()));", "-\t\tcodeStream.generateConstant(postIncrement.expression.constant, implicitConversion);", "+\t\tcodeStream.generateConstant(postIncrement.expression.constant, this.implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a6e6d7ab9f3cc67d2b3d8783f0f0c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "99a320ba218a453cde9430d003d516f8202cd4ca", "commitAfterChange": "bc5d9b450540dde0f4417c6b10a04ec18aa90f94", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t// generate expression testes", "-\t\t\texpression.generateCode(currentScope, codeStream, needSwitch);", "+", "+\t\t\tfinal TypeBinding resolvedType = this.expression.resolvedType;", "+\t\t\tif (resolvedType.isEnum()) {", "+\t\t\t\tif (needSwitch) {", "+\t\t\t\t\t// go through the translation table", "+\t\t\t\t\tcodeStream.invokestatic(this.synthetic);", "+\t\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "+\t\t\t\t\t// get enum constant ordinal()", "+\t\t\t\t\tcodeStream.invokeEnumOrdinal(resolvedType.constantPoolName());", "+\t\t\t\t\tcodeStream.iaload();", "+\t\t\t\t} else {", "+\t\t\t\t\t// no need to go through the translation table", "+\t\t\t\t\texpression.generateCode(currentScope, codeStream, false);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// generate expression", "+\t\t\t\texpression.generateCode(currentScope, codeStream, needSwitch); // value required (switch without cases)", "+\t\t\t}", "-\t\t\t\t// for enum constants, actually switch on constant ordinal()", "-\t\t\t\tif (this.expression.resolvedType.isEnum()) {", "-\t\t\t\t\tcodeStream.invokeEnumOrdinal(this.expression.resolvedType.constantPoolName());", "-\t\t\t\t}"]}], "num": 50086}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a05ce17780f6bd0f60c0799d0365d58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e33e1efd4e7b1ae367dd057f7a3719b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "9c377922fe401713f5937bb475dd1fc1bedb4d8f", "commitAfterChange": "6a9a7eb1601e3179b18eecef90d5d4fdfbc52bfa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tString projectName = javaProject.getElementName();", "-\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, resolvedEntry.getPath());", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_EXCLUSION_PATTERNS, javaProject, resolvedEntry.getPath());", "-\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, resolvedEntry.getPath());", "+\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS, javaProject, resolvedEntry.getPath());", "+\t\t\t", "+\t\t\t// Build some common strings for status message", "+\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, Util.bind(\"classpath.duplicateEntryPath\", entryPath.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, Util.bind(\"classpath.duplicateEntryPath\", entryPathMsg, projectName)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInLibrary\", new String[] {entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString()})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInLibrary\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t// Build some common strings for status message", "+\t\t\tboolean epStartsWithProject = entryPath.segment(0).toString().equals(projectName);", "+\t\t\tString entryPathMsg = epStartsWithProject ? entryPath.removeFirstSegments(1).toString() : entryPath.makeRelative().toString();", "+\t", "+", "+\t\t\t\t\t// Build some common strings for status message", "+\t\t\t\t\tboolean opStartsWithProject = otherEntry.getPath().segment(0).toString().equals(projectName);", "+\t\t\t\t\tString otherPathMsg = opStartsWithProject ? otherEntry.getPath().removeFirstSegments(1).toString() : otherEntry.getPath().makeRelative().toString();", "+\t", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseDistinctSourceFolderAsOutput\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseDistinctSourceFolderAsOutput\", new String[] {entryPathMsg, otherPathMsg, projectName})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseLibraryAsOutput\", entryPath.makeRelative().toString(), otherEntry.getPath().makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotUseLibraryAsOutput\", new String[] {entryPathMsg, otherPathMsg, projectName})); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aae97813cb2cdf98242555fb371be97f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "signatureAfterChange": "  \tstatic boolean inferPolyInvocationType(InferenceContext18 inferenceContext, InvocationSite invocationSite, TypeBinding targetType, MethodBinding method)  \t\t\t\tthrows InferenceFailureException", "diff": ["-\t\t\tParameterizedTypeBinding parameterizedType = InferenceContext18.parameterizedWithWildcard(returnType);", "+\t\t\tif (inferenceContext.usesUncheckedConversion()) {", "+\t\t\t\t// spec says erasure, but we don't really have compatibility rules for erasure, use raw type instead:", "+\t\t\t\tTypeBinding erasure = inferenceContext.environment.convertToRawType(returnType, false);", "+\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(erasure, targetType, COMPATIBLE);", "+\t\t\t\treturn inferenceContext.reduceAndIncorporate(newConstraint);", "+\t\t\t}", "+\t\t\tTypeBinding rTheta = inferenceContext.substitute(returnType);", "+\t\t\tParameterizedTypeBinding parameterizedType = InferenceContext18.parameterizedWithWildcard(rTheta);", "-\t\t\t\tif (!inferenceContext.reduceAndIncorporate(newConstraint))", "-\t\t\t\t\treturn false;", "+\t\t\t\treturn inferenceContext.reduceAndIncorporate(newConstraint);", "-", "-\t\t\tif (targetType.isBaseType()) {", "-\t\t\t\tTypeBinding thetaR = inferenceContext.substitute(returnType);", "-\t\t\t\tif (thetaR instanceof InferenceVariable) {", "-\t\t\t\t\tTypeBinding wrapper = inferenceContext.currentBounds.findWrapperTypeBound((InferenceVariable)thetaR);", "-\t\t\t\t\tif (wrapper != null) {", "-\t\t\t\t\t\tif (!inferenceContext.reduceAndIncorporate(new ConstraintTypeFormula(thetaR, wrapper, ReductionResult.SAME))", "-\t\t\t\t\t\t\t|| !inferenceContext.reduceAndIncorporate(new ConstraintTypeFormula(wrapper, targetType, ReductionResult.COMPATIBLE)))", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "+\t\t\tif (rTheta instanceof InferenceVariable) {", "+\t\t\t\tInferenceVariable alpha = (InferenceVariable) rTheta;", "+\t\t\t\tboolean toResolve = false;", "+\t\t\t\tif (inferenceContext.currentBounds.condition18_5_2_bullet_3_3_1(alpha, targetType)) {", "+\t\t\t\t\ttoResolve = true;", "+\t\t\t\t} else if (inferenceContext.currentBounds.condition18_5_2_bullet_3_3_2(alpha, targetType, inferenceContext)) {", "+\t\t\t\t\ttoResolve = true;", "+\t\t\t\t} else if (targetType.isBaseType()) {", "+\t\t\t\t\tTypeBinding wrapper = inferenceContext.currentBounds.findWrapperTypeBound(alpha);", "+\t\t\t\t\tif (wrapper != null)", "+\t\t\t\t\t\ttoResolve = true;", "+\t\t\t\t}", "+\t\t\t\tif (toResolve) {", "+\t\t\t\t\tBoundSet solution = inferenceContext.solve(); // TODO: minimal resolving for only \u03b1", "+\t\t\t\t\tTypeBinding u = solution.getInstantiation(alpha).capture(inferenceContext.scope, invocationSite.sourceStart()); // TODO make position unique?", "+\t\t\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(u, targetType, COMPATIBLE);", "+\t\t\t\t\treturn inferenceContext.reduceAndIncorporate(newConstraint);", "-", "-\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(inferenceContext.substitute(returnType), targetType, COMPATIBLE);", "+\t\t\tConstraintTypeFormula newConstraint = new ConstraintTypeFormula(rTheta, targetType, COMPATIBLE);"]}], "num": 64325}
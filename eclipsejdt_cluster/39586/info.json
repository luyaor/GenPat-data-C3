{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d9c152d96e240d9977435d3ca101e45", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "030bd4b5658fb3e9a9191a4285c50bf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "945eb913d05c9d087ac6ab6e78eee774a46bbd75", "commitAfterChange": "32ce57e29f2dabec8de78773be20ab77c7edc1a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tCompilationUnit copy = (CompilationUnit)getCompilationUnit();", "-\t\t\tICompilationUnit original = copy.getPrimary();", "+\t\t\tCompilationUnit workingCopy = (CompilationUnit)getCompilationUnit();", "+\t\t\tICompilationUnit primary = workingCopy.getPrimary();", "-\t\t\t", "-\t\t\tif (!original.isOpen()) {", "+\t\t\tif (!primary.isOpen()) {", "-\t\t\t\toriginal.open(null);", "+\t\t\t\tprimary.open(null);", "-\t\t\tif (Util.isExcluded(original)) {", "+\t\t\tif (Util.isExcluded(primary)) {", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(original);", "+\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(primary);", "-\t\t\tIBuffer originalBuffer = original.getBuffer();", "-\t\t\tif (originalBuffer == null) return;", "-\t\t\tchar[] originalContents = originalBuffer.getCharacters();", "+\t\t\tIBuffer primaryBuffer = primary.getBuffer();", "+\t\t\tif (primaryBuffer == null) return;", "+\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "-\t\t\t\tIBuffer copyBuffer = copy.getBuffer();", "-\t\t\t\tif (copyBuffer == null) return;", "-\t\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());", "-\t\t\t\toriginal.save(fMonitor, fForce);", "-\t\t\t\tthis.setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "+\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "+\t\t\t\tif (workingCopyBuffer == null) return;", "+\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "+\t\t\t\tprimary.save(fMonitor, fForce);", "+\t\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "-\t\t\t\t\toriginalBuffer.setContents(originalContents);", "+\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "-\t\t\tcopy.updateTimeStamp((CompilationUnit)original);", "-\t\t\tcopy.makeConsistent(this);", "+\t\t\tworkingCopy.updateTimeStamp((CompilationUnit)primary);", "+\t\t\tworkingCopy.makeConsistent(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d22eb8b918ab1c25367f128f0c8fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "54aac0437c44b25b70bb8f51692a810dc70acaf9", "commitAfterChange": "e09428ece4109f2ed53a5b654918b21f327e1ef3", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void testNonExistingCU() throws JavaModelException", "signatureAfterChange": " public void testNonExistingCU() throws JavaModelException", "diff": ["-\tICompilationUnit cu = this.getCompilationUnit(\"P/src/x/y/NonExisting.java\");", "-\tIWorkingCopy copy = null;", "+\tICompilationUnit nonExistingCU = this.getCompilationUnit(\"P/src/x/y/NonExisting.java\");", "+\tIWorkingCopy workingCopy = null;", "-\t\tcopy = (IWorkingCopy)cu.getWorkingCopy();", "-\t\tassertSourceEquals(\"Buffer should be empty\", \"\", ((IOpenable)copy).getBuffer().getContents());", "+\t\tworkingCopy = (IWorkingCopy)nonExistingCU.getWorkingCopy();", "+\t\tassertSourceEquals(\"Buffer should be empty\", \"\", ((IOpenable)workingCopy).getBuffer().getContents());", "-\t\tassertTrue(\"Working copy should exists\", ((IJavaElement)copy).exists());", "+\t\tassertTrue(\"Working copy should exists\", ((IJavaElement)workingCopy).exists());", "-\t\tassertEquals(\"Corresponding resource should be null\", null, ((IJavaElement)copy).getCorrespondingResource());", "+\t\tassertEquals(\"Corresponding resource should be null\", null, ((IJavaElement)workingCopy).getCorrespondingResource());", "-\t\tassertEquals(\"Unexpected orginal element\", cu, copy.getOriginalElement());", "+\t\tassertEquals(\"Unexpected orginal element\", nonExistingCU, workingCopy.getOriginalElement());", "-\t\tassertEquals(\"Unexpected path\", new Path(\"/P/src/x/y/NonExisting.java\"), ((IJavaElement)copy).getPath());", "+\t\tassertEquals(\"Unexpected path\", new Path(\"/P/src/x/y/NonExisting.java\"), ((IJavaElement)workingCopy).getPath());", "-\t\tassertEquals(\"Unexpected resource\", null, ((IJavaElement)copy).getResource());", "+\t\tassertEquals(\"Unexpected resource\", null, ((IJavaElement)workingCopy).getResource());", "-\t\tassertTrue(\"Working copy should be consistent\", ((IOpenable)copy).isConsistent());", "+\t\tassertTrue(\"Working copy should be consistent\", ((IOpenable)workingCopy).isConsistent());", "-\t\t\tcopy.restore();", "+\t\t\tworkingCopy.restore();", "-\t\t((IOpenable)copy).getBuffer().setContents(", "+\t\t((IOpenable)workingCopy).getBuffer().setContents(", "-\t\tassertTrue(\"Working copy should not be consistent\", !((IOpenable)copy).isConsistent());", "-\t\t((IOpenable)copy).makeConsistent(null);", "-\t\tassertTrue(\"Working copy should be consistent\", ((IOpenable)copy).isConsistent());", "+\t\tassertTrue(\"Working copy should not be consistent\", !((IOpenable)workingCopy).isConsistent());", "+\t\t((IOpenable)workingCopy).makeConsistent(null);", "+\t\tassertTrue(\"Working copy should be consistent\", ((IOpenable)workingCopy).isConsistent());", "-\t\t((IOpenable)copy).getBuffer().setContents(", "+\t\t((IOpenable)workingCopy).getBuffer().setContents(", "-\t\t((IOpenable)copy).save(null, false);", "-\t\tassertTrue(\"Working copy should be consistent after save\", ((IOpenable)copy).isConsistent());", "-\t\tassertTrue(\"Original cu should not exist\", !cu.exists());", "+\t\t((IOpenable)workingCopy).save(null, false);", "+\t\tassertTrue(\"Working copy should be consistent after save\", ((IOpenable)workingCopy).isConsistent());", "+\t\tassertTrue(\"Original cu should not exist\", !nonExistingCU.exists());", "-\t\tcopy.commit(false, null);", "-\t\tassertTrue(\"Original cu should exist\", cu.exists());", "+\t\tworkingCopy.commit(false, null);", "+\t\tassertTrue(\"Original cu should exist\", nonExistingCU.exists());", "-\t\tassertTrue(\"Working copy should not be based on original resource\", !copy.isBasedOn(cu.getResource()));", "+\t\tassertTrue(\"Working copy should not be based on original resource\", !workingCopy.isBasedOn(nonExistingCU.getResource()));", "-\t\tif (copy != null) {", "-\t\t\tcopy.destroy();", "+\t\tif (workingCopy != null) {", "+\t\t\tworkingCopy.destroy();", "-\t\tif (cu.exists()) {", "-\t\t\tcu.delete(true, null);", "+\t\tif (nonExistingCU.exists()) {", "+\t\t\tnonExistingCU.delete(true, null);"]}], "num": 39586}
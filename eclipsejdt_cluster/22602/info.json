{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8994e547b02a37d8de29e876508deb4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e8bd05af03c0667acd1036d29eed5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "a8001f94dedfcf0ea807d46ff48ed3d0c7a3c2ef", "commitAfterChange": "7e1b661f635897c28beea613ca1b58777d8c7c7a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  private boolean hasStructuralAnnotationChanges(IBinaryAnnotation[] currentAnnotations, IBinaryAnnotation[] otherAnnotations)", "signatureAfterChange": "  private boolean hasStructuralAnnotationChanges(IBinaryAnnotation[] currentAnnotations, IBinaryAnnotation[] otherAnnotations)", "diff": ["-\t\tif (!CharOperation.equals(currentAnnotations[i].getTypeName(), otherAnnotations[i].getTypeName()))", "-\t\t\treturn true;", "-\t\tIBinaryElementValuePair[] currentPairs = currentAnnotations[i].getElementValuePairs();", "-\t\tIBinaryElementValuePair[] otherPairs = otherAnnotations[i].getElementValuePairs();", "-\t\tint currentPairsLength = currentPairs == null ? 0 : currentPairs.length;", "-\t\tint otherPairsLength = otherPairs == null ? 0 : otherPairs.length;", "-\t\tif (currentPairsLength != otherPairsLength)", "-\t\t\treturn true;", "-\t\tfor (int j = 0; j < currentPairsLength; j++) {", "-\t\t\tif (!CharOperation.equals(currentPairs[j].getName(), otherPairs[j].getName()))", "-\t\t\t\treturn true;", "-\t\t\tfinal Object value = currentPairs[j].getValue();", "-\t\t\tfinal Object value2 = otherPairs[j].getValue();", "-\t\t\tif (value instanceof Object[]) {", "-\t\t\t\tObject[] currentValues = (Object[]) value;", "-\t\t\t\tif (value2 instanceof Object[]) {", "-\t\t\t\t\tObject[] currentValues2 = (Object[]) value2;", "-\t\t\t\t\tfinal int length = currentValues.length;", "-\t\t\t\t\tif (length != currentValues2.length) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int n = 0; n < length; n++) {", "-\t\t\t\t\t\tif (!currentValues[n].equals(currentValues2[n])) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t} else if (!value.equals(value2)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "+\t\tBoolean match = matchAnnotations(currentAnnotations[i], otherAnnotations[i]);", "+\t\tif (match != null)", "+\t\t\treturn match.booleanValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d9cf228c984c0bddefbe1992e40109b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/align/Alignment.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["-\t\tString className = getClass().getName();", "-\t\tclassName = className.substring(className.lastIndexOf('.')+1);", "-\t\tbuffer", "-\t\t\t.append(className)", "-\t\t\t.append(\":<name: \")\t//$NON-NLS-1$", "-\t\t\t.append(this.name)", "-\t\t\t.append(\">\");\t//$NON-NLS-1$", "-\t\tint indentLength = className.length()+1;", "-\t\tbuffer.append('\\n');", "-\t\tfor (int i=0; i<indentLength; i++) {", "-\t\t\tbuffer.append(' ');", "+\t\treturn toString(buffer, -1);", "+\t}", "-\t\t\t.append('>');", "-\t\tif (this.enclosing != null) {", "-\t\t\tbuffer", "-\t\t\t\t.append(\"<enclosingName: \")\t//$NON-NLS-1$", "-\t\t\t\t.append(this.enclosing.name)", "-\t\t\t\t.append('>');", "-\t\t}", "-\t\tbuffer.append('\\n');", "-\t\t\t\t.append(\" - fragment \")\t//$NON-NLS-1$", "-\t\tbuffer.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "808657a6d37c027664f230cbbd952352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "signatureAfterChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "diff": ["-", "+\t\t", "-\t\t\tList allTypeAnnotationContexts = ((TypeAnnotationCodeStream) this.codeStream).allTypeAnnotationContexts;", "+\t\t\tList allTypeAnnotationContexts = new ArrayList();", "-\t\t\tfor (int i = 0, max = this.codeStream.allLocalsCounter; i < max; i++) {", "-\t\t\t\tLocalVariableBinding localVariable = this.codeStream.locals[i];", "-\t\t\t\tLocalDeclaration declaration = localVariable.declaration;", "-\t\t\t\tif (declaration == null", "-\t\t\t\t\t\t|| (declaration.isArgument() && ((declaration.bits & ASTNode.IsUnionType) == 0))", "-\t\t\t\t\t\t|| (localVariable.initializationCount == 0)", "-\t\t\t\t\t\t|| ((declaration.bits & ASTNode.HasTypeAnnotations) == 0)) {", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tdeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.LOCAL_VARIABLE, localVariable, allTypeAnnotationContexts);", "-\t\t\t}", "-\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_PARAMETER, i, allTypeAnnotationContexts);", "+\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, i, allTypeAnnotationContexts);", "-\t\t\t\t\tAnnotation[] annotations = (methodDeclaration.receiver==null?null:methodDeclaration.receiver.annotations);", "-\t\t\t\t\tif (annotations != null) {", "-\t\t\t\t\t\tfor (int i = 0, max = annotations.length; i < max; i++) {", "-\t\t\t\t\t\t\tAnnotation annotation = annotations[i];", "-\t\t\t\t\t\t\tAnnotationContext annotationContext = null;", "-\t\t\t\t\t\t\tif (annotation.isRuntimeTypeInvisible()) {", "-\t\t\t\t\t\t\t\tannotationContext = new AnnotationContext(annotation, null, AnnotationTargetTypeConstants.METHOD_RECEIVER, null, AnnotationContext.INVISIBLE, null);", "-\t\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\t} else if (annotation.isRuntimeTypeVisible()) {", "-\t\t\t\t\t\t\t\tannotationContext = new AnnotationContext(annotation, null, AnnotationTargetTypeConstants.METHOD_RECEIVER, null, AnnotationContext.VISIBLE, null);", "-\t\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (annotationContext != null) {", "-\t\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\tReceiver receiver = methodDeclaration.receiver;", "+\t\t\t\t\tif (receiver != null && (receiver.type.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\treceiver.type.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RECEIVER, allTypeAnnotationContexts);", "-\t\t\t\t\tmethodDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN_TYPE, allTypeAnnotationContexts);", "+\t\t\t\t\tmethodDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN, allTypeAnnotationContexts);", "-\t\t\t\t\t\ttypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN_TYPE, allTypeAnnotationContexts);", "+\t\t\t\t\t\ttypeReference.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_RETURN, allTypeAnnotationContexts);", "-"]}], "num": 22602}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ff7c1c385e41a007dba94bd14fb9d54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff1166205398914f6c301f5dfd35b8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-\t\tif (originalInherited.returnType != concreteMethod.returnType)", "+\t\tif (TypeBinding.notEquals(originalInherited.returnType, concreteMethod.returnType))", "-\t\t\tif ((concreteMethod.declaringClass == this.type.superclass && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))", "+\t\t\tif ((TypeBinding.equalsEquals(concreteMethod.declaringClass, this.type.superclass) && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3a130f5170171cefbfb985536c97580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "94dea0b0a877604aa792ef438f436f0ba72e87e0", "commitAfterChange": "e791dd203e0f4e6e77cef57b04e1714dbf826e73", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["+\t\t// skip generation of bridge method for current class & method if an equivalent", "+\t\t// bridge will be/would have been generated in the context of the super class since", "+\t\t// the bridge itself will be inherited. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=298362", "-\t\t\tif ((concreteMethod.declaringClass == this.type.superclass && this.type.superclass.isParameterizedType())", "+\t\t\tif ((concreteMethod.declaringClass == this.type.superclass && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))"]}], "num": 64292}
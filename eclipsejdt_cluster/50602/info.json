{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03070c6deb5373ca7d7e77b51d08bd32", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5918e7949aeb70e09bfe043358996a13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "0ce8ad5b0d44dc70bab93f6f64c0b898ece7748d", "commitAfterChange": "42f83db749431568a0412462e46b75fee51080ac", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "signatureAfterChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["-", "-\tJavaModelManager manager= JavaModelManager.getJavaModelManager();", "-\tWorkingCopyOwner workingCopyOwner = BufferFactoryWrapper.create(factory);", "-\tIPath path = getPath();", "-\tCompilationUnit workingCopy = new CompilationUnit(null/*not needed since don't create*/, path.lastSegment(), workingCopyOwner);", "-\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "-\t\tmanager.getPerWorkingCopyInfo(workingCopy, path, false/*don't create*/, false/*don't record usage*/, null/*not need since don't create*/);", "-\tif (perWorkingCopyInfo == null) return null;", "-\treturn perWorkingCopyInfo.getWorkingCopy();", "+\treturn findWorkingCopy(BufferFactoryWrapper.create(factory));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ccc4963265f38402642e989771aa127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "signatureAfterChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["-\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t// AND use the same owner.", "-\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;", "+\tJavaModelManager manager= JavaModelManager.getJavaModelManager();", "-\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(workingCopyOwner);", "-\tif (perFactoryWorkingCopies == null) return null;", "-\treturn (CompilationUnit)perFactoryWorkingCopies.get(this);", "+\tIPath path = getPath();", "+\tCompilationUnit workingCopy = new CompilationUnit(null/*not needed since don't create*/, path.lastSegment(), workingCopyOwner);", "+\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = ", "+\t\tmanager.getPerWorkingCopyInfo(workingCopy, path, false/*don't create*/, false/*don't record usage*/, null/*not need since don't create*/);", "+\tif (perWorkingCopyInfo == null) return null;", "+\treturn perWorkingCopyInfo.getWorkingCopy();"]}], "num": 50602}
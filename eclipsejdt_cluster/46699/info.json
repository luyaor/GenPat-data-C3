{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3dfef8be8f6f16b4ce047d2cc9c7342", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "404816d350af49581e8e1a3877bf7537", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "8a874a8ac5c8fa9c3a69f75fc06aa6c47112041b", "commitAfterChange": "c8908580153a9adc9cd19f06826b465d9af89a81", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r ReferenceBinding resolve(LookupEnvironment environment)", "signatureAfterChange": "\r ReferenceBinding resolve(LookupEnvironment environment)", "diff": ["-\tif (resolvedType != null)\r", "-\t\treturn resolvedType;\r", "+\tif (resolvedType != null) return resolvedType;\r", "-\tReferenceBinding environmentType;\r", "-\tif ((environmentType = environment.askForType(compoundName)) != null) {\r", "-\t\tif (environmentType != this){ // could not resolve any better, error was already reported against it\r", "-\t\t\tresolvedType = environmentType;\t\t\t\r", "-\t\t\tenvironment.updateArrayCache(this, environmentType);\r", "-\t\t\treturn environmentType; // when found, it replaces the unresolved type in the cache\r", "-\t\t}\r", "+\tReferenceBinding environmentType = fPackage.getType0(compoundName[compoundName.length - 1]);\r", "+\tif (environmentType == this)\r", "+\t\tenvironmentType = environment.askForType(compoundName);\r", "+\tif (environmentType != null && environmentType != this) { // could not resolve any better, error was already reported against it\r", "+\t\tresolvedType = environmentType;\r", "+\t\tenvironment.updateArrayCache(this, environmentType);\r", "+\t\treturn environmentType; // when found, it replaces the unresolved type in the cache\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7055462b98d4403179f76e4f36f24b91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-ReferenceBinding resolve(LookupEnvironment environment) {", "-\tif (resolvedType != null) return resolvedType;", "-", "-\tReferenceBinding environmentType = fPackage.getType0(compoundName[compoundName.length - 1]);", "-\tif (environmentType == this)", "-\t\tenvironmentType = environment.askForType(compoundName);", "-\tif (environmentType != null && environmentType != this) { // could not resolve any better, error was already reported against it", "-\t\tresolvedType = environmentType;", "-\t\tenvironment.updateArrayCache(this, environmentType);", "-\t\treturn environmentType; // when found, it replaces the unresolved type in the cache", "+ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType) {", "+    ReferenceBinding targetType = this.resolvedType;", "+\tif (targetType == null) {", "+\t\ttargetType = this.fPackage.getType0(this.compoundName[this.compoundName.length - 1]);", "+\t\tif (targetType == this)", "+\t\t\ttargetType = environment.askForType(this.compoundName);", "+\t\tif (targetType != null && targetType != this) { // could not resolve any better, error was already reported against it", "+\t\t\tsetResolvedType(targetType, environment);", "+\t\t} else {", "+\t\t\tenvironment.problemReporter.isClassPathCorrect(this.compoundName, null);", "+\t\t\treturn null; // will not get here since the above error aborts the compilation", "+\t\t}", "+\tif (convertGenericToRawType && targetType.isGenericType()) // raw reference to generic ?", "+\t    return environment.createRawType(targetType, null);", "+\treturn targetType;", "+}", "-\tenvironment.problemReporter.isClassPathCorrect(compoundName, null);", "-\treturn null; // will not get here since the above error aborts the compilation"]}], "num": 46699}
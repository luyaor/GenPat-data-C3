{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de0946970b325c1f832f0395aa4d7592", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35ecf2d5c15921f8fa16d200230a440c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ea1fe8ed052821b2b1ca5a7ad0079411db5ede64", "commitAfterChange": "a2a0577109951f3af96b6ee7e6f23d457b52d52d", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t} else {", "+\t\t\t} else if (typeReference instanceof UnionTypeReference){", "+\t\t\t} else if (typeReference instanceof IntersectionCastTypeReference) {", "+\t\t\t\tTypeReference[] typeReferences = ((IntersectionCastTypeReference) typeReference).typeReferences;", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\tcase AST.JLS3_INTERNAL :", "+\t\t\t\t\tcase AST.JLS4_INTERNAL :", "+\t\t\t\t\t\ttype = this.convertType(typeReferences[0]);", "+\t\t\t\t\t\tint start = typeReference.sourceStart;", "+\t\t\t\t\t\tint endPosition = typeReference.sourceEnd;", "+\t\t\t\t\t\tlength = endPosition - start + 1;", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// intersection type reference", "+\t\t\t\t\t\tfinal IntersectionType castType = new IntersectionType(this.ast);", "+\t\t\t\t\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "+\t\t\t\t\t\t\tcastType.types().add(this.convertType(typeReferences[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttype = castType;", "+\t\t\t\t\t\tList types = castType.types();", "+\t\t\t\t\t\tint size = types.size();", "+\t\t\t\t\t\tstart = ((Type) types.get(0)).getStartPosition();", "+\t\t\t\t\t\tType lastType = (Type) types.get(size - 1);", "+\t\t\t\t\t\tendPosition = lastType.getStartPosition() + lastType.getLength();", "+\t\t\t\t\t\tlength = endPosition - start;", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "396a4df29e855fd4186dbdae1bdbf6e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tchar[][] name = ((org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) typeReference).getTypeName();", "-\t\t\t\t\t\t\tint nameLength = name.length;", "-\t\t\t\t\t\t\tsourceStart = (int)(positions[0]>>>32);", "-\t\t\t\t\t\t\tlength = (int)(positions[nameLength - 1] & 0xFFFFFFFF) - sourceStart + 1;", "-\t\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\t\t\t\tsimpleType.setName(qualifiedName);", "-\t\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, length);", "-\t\t\t\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tchar[][] name = ((org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) typeReference).getTypeName();", "+\t\t\t\t\t\tint nameLength = name.length;", "+\t\t\t\t\t\tsourceStart = (int)(positions[0]>>>32);", "+\t\t\t\t\t\tlength = (int)(positions[nameLength - 1] & 0xFFFFFFFF) - sourceStart + 1;", "+\t\t\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(qualifiedName);", "+\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, length);", "+\t\t\t\t\t\ttype = simpleType;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "-                            int startingIndex = 0;", "-                            int endingIndex = 0;", "+\t\t\t\t\t\t\tint startingIndex = 0;", "+\t\t\t\t\t\t\tint endingIndex = 0;", "-                                    endingIndex++;", "-                                }", "+\t\t\t\t\t\t\t\t\tendingIndex++;", "+\t\t\t\t\t\t\t\t}", "-\t\t \t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-                            if (this.resolveBindings) {", "-                                recordNodes(simpleType, typeReference);", "-                                recordNodes(parameterizedType, typeReference);", "-                            }", "+\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "+\t\t\t\t\t\t\t\trecordNodes(parameterizedType, typeReference);", "+\t\t\t\t\t\t\t}", "-                                if (this.resolveBindings) {", "-                                    recordNodes(simpleName, typeReference);", "-                                    recordNodes(qualifiedType, typeReference);", "-                                }", "+\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "+\t\t\t\t\t\t\t\t}", "-\t                               \tqualifiedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "- \t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "-                                   if (this.resolveBindings) {", "-                                        recordNodes(parameterizedType2, typeReference);", "-                                    }", "+\t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\t\t\t\trecordNodes(parameterizedType2, typeReference);", "+\t\t\t\t\t\t\t\t\t}", "-                               \t\tqualifiedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\t\tqualifiedType.index = indexOfEnclosingType;", "-\t\t\t} else {", "+\t\t\t} else if (typeReference instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference) {", "+\t\t\t} else {", "+\t\t\t\tTypeReference[] typeReferences = ((org.eclipse.jdt.internal.compiler.ast.UnionTypeReference) typeReference).typeReferences;", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\t// recovery", "+\t\t\t\t\t\ttype = this.convertType(typeReferences[0]);", "+\t\t\t\t\t\tint start = typeReference.sourceStart;", "+\t\t\t\t\t\tint endPosition = typeReference.sourceEnd;", "+\t\t\t\t\t\tlength = endPosition - start + 1;", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// union type reference", "+\t\t\t\t\t\tfinal UnionType unionType = new UnionType(this.ast);", "+\t\t\t\t\t\tfor (int i = 0, max = typeReferences.length; i < max; i++) {", "+\t\t\t\t\t\t\tunionType.types().add(this.convertType(typeReferences[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttype = unionType;", "+\t\t\t\t\t\tList types = unionType.types();", "+\t\t\t\t\t\tint size = types.size();", "+\t\t\t\t\t\tstart = ((Type) types.get(0)).getStartPosition();", "+\t\t\t\t\t\tType lastType = (Type) types.get(size - 1);", "+\t\t\t\t\t\tendPosition = lastType.getStartPosition() + lastType.getLength();", "+\t\t\t\t\t\tlength = endPosition - start; /* + 1 - 1 == 0 */", "+\t\t\t\t\t\ttype.setSourceRange(start, length);", "+\t\t\t\t}", "+\t\t}", "+\t\tboolean sawDiamond = false;", "+\t\tif (typeReference instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference pstr = (ParameterizedSingleTypeReference) typeReference;", "+\t\t\tif (pstr.typeArguments == TypeReference.NO_TYPE_ARGUMENTS) {", "+\t\t\t\tsawDiamond = true;", "+\t\t\t}", "+\t\t} else if (typeReference instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference pqtr = (ParameterizedQualifiedTypeReference) typeReference;", "+\t\t\tfor (int i = 0, len = pqtr.typeArguments.length; i < len; i++) {", "+\t\t\t\tif (pqtr.typeArguments[i] == TypeReference.NO_TYPE_ARGUMENTS) {", "+\t\t\t\t\tsawDiamond = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t\tif (sawDiamond) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}"]}], "num": 22528}
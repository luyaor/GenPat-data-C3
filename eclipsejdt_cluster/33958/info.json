{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9ddcfded0fc7bd79988cefde752d21b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f8e29435dd68c60162b2e4708e6cac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileMap.java", "commitBeforeChange": "f673a1d9c7172b796dd31cfa78dd0dad32318c9f", "commitAfterChange": "bd2b202132c8d4bb0e104bd05827a1b9231c9dc5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic synchronized void writeState()", "signatureAfterChange": " \tpublic synchronized void writeState()", "diff": ["+\t\t\t", "+\t\t\t// Number of generated files with attributes", "+\t\t\tout.writeInt(_flags.size());", "+\t\t\t", "+\t\t\t// for each generated file that has attributes...", "+\t\t\tfor (Entry<IFile, Set<Flags>> entry : _flags.entrySet()) {", "+\t\t\t\t// ...generated file name", "+\t\t\t\tout.writeUTF(convertIFileToPath(entry.getKey()));", "+\t\t\t\t", "+\t\t\t\tSet<Flags> flags = entry.getValue();", "+\t\t\t\t// ...number of attributes", "+\t\t\t\tout.writeInt(flags.size());", "+\t\t\t\tfor (Flags f : flags) {", "+\t\t\t\t\t// ...attribute name", "+\t\t\t\t\tout.writeUTF(f.name());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "-\t\t\tAptPlugin.log(ioe, \"Could not serialize APT dependencies\"); //$NON-NLS-1$", "+\t\t\tAptPlugin.logWarning(ioe, \"Could not serialize APT dependencies\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d8363de3035965aacb593d37bc87be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "fea48c1ab8bc004e73a7488c630798836bc78025", "commitAfterChange": "62174cb60f573d7f957b7c7e696b97cad27f7ffe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \tMap<String,String> options;", "-    \toptions = getRawProcessorOptions(jproj);", "+    \tMap<String,String> rawOptions = getRawProcessorOptions(jproj);", "+    \t// map is large enough to also include the programmatically generated options", "+    \tMap<String, String> options = new HashMap<String, String>(rawOptions.size() + 6);", "+    \t", "+    \t// Resolve path metavariables like %ROOT%", "+    \tfor (Map.Entry<String, String> entry : rawOptions.entrySet()) {", "+    \t\tString resolvedValue = resolveVarPath(jproj, entry.getValue());", "+    \t\tString value = (resolvedValue == null) ? entry.getValue() : resolvedValue;", "+    \t\toptions.put(entry.getKey(), value);", "+    \t}", "+    \t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfadb76e8f7528b65f1fe883378755f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "8f26d11c4ba332f2be7ec8dbf571250694ed7207", "commitAfterChange": "43a0c55f94ed86f30ef95f5f1ba26a35207a73d3", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 182, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["-\t\tTestVisitor v1 = new TestVisitor();", "-\t\tb.setLength(0);", "-\t\tx1.accept(v1);", "-\t\tString result = b.toString();", "-\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t", "+\t\t// ASTVisitor() does not visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor();", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*//**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// ASTVisitor(false) does not visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor(false);", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*//**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// ASTVisitor(true) does visit doc tags", "+\t\t{", "+\t\t\tTestVisitor v1 = new TestVisitor(true);", "+\t\t\tb.setLength(0);", "+\t\t\tx1.accept(v1);", "+\t\t\tString result = b.toString();", "+\t\t\tassertTrue((\"[(JD/**?*/\"+TAG1S+\"/**?*/JD)]\").equals(result)); //$NON-NLS-1$", "+\t\t}"]}], "num": 33958}
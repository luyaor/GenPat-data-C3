{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd2ec333fdfe1dc2943884773457af42", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11375d7895aeaf3da00a7f2d9a0ee0b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["+\t\tfinal ReferenceBinding declaringClass = methodBinding.declaringClass;", "-\t\t\tproblemReporter().duplicateModifierForMethod(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().duplicateModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\tif ((methodBinding.declaringClass.modifiers & AccInterface) != 0) {", "+\t\tif ((declaringClass.modifiers & AccInterface) != 0) {", "-\t\t\t\tif ((methodBinding.declaringClass.modifiers & AccAnnotation) != 0) {", "+\t\t\t\tif ((declaringClass.modifiers & AccAnnotation) != 0)", "-\t\t\t\t} else {", "+\t\t\t\telse", "-\t\t\t\t}", "-\t\tint unexpectedModifiers =", "-\t\t\t~(", "-\t\t\t\tAccPublic", "-\t\t\t\t\t| AccPrivate", "-\t\t\t\t\t| AccProtected", "-\t\t\t\t\t| AccAbstract", "-\t\t\t\t\t| AccStatic", "-\t\t\t\t\t| AccFinal", "-\t\t\t\t\t| AccSynchronized", "-\t\t\t\t\t| AccNative", "-\t\t\t\t\t| AccStrictfp);", "+\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected", "+\t\t\t| AccAbstract | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp);", "-\t\t\tproblemReporter().illegalVisibilityModifierCombinationForMethod(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().illegalVisibilityModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\t// need to keep the less restrictive", "+\t\t\t// need to keep the less restrictive so disable Protected/Private as necessary", "+\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "+\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tint incompatibleWithAbstract =", "-\t\t\t\tAccPrivate | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp;", "+\t\t\tint incompatibleWithAbstract = AccPrivate | AccStatic | AccFinal | AccSynchronized | AccNative | AccStrictfp;", "-\t\t\t\tproblemReporter().illegalAbstractModifierCombinationForMethod(", "-\t\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\t\tproblemReporter().illegalAbstractModifierCombinationForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\t\tproblemReporter().abstractMethodInAbstractClass(", "-\t\t\t\t\t(SourceTypeBinding) methodBinding.declaringClass,", "-\t\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\t\tproblemReporter().abstractMethodInAbstractClass((SourceTypeBinding) declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\t\tproblemReporter().nativeMethodsCannotBeStrictfp(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\t\tproblemReporter().nativeMethodsCannotBeStrictfp(declaringClass, (AbstractMethodDeclaration) referenceContext);", "-\t\tif (((realModifiers & AccStatic) != 0)", "-\t\t\t&& methodBinding.declaringClass.isNestedType()", "-\t\t\t&& !methodBinding.declaringClass.isStatic())", "-\t\t\tproblemReporter().unexpectedStaticModifierForMethod(", "-\t\t\t\tmethodBinding.declaringClass,", "-\t\t\t\t(AbstractMethodDeclaration) referenceContext);", "+\t\tif (((realModifiers & AccStatic) != 0) && declaringClass.isNestedType() && !declaringClass.isStatic())", "+\t\t\tproblemReporter().unexpectedStaticModifierForMethod(declaringClass, (AbstractMethodDeclaration) referenceContext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "519bab912190da0b584a163178280250", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForField(FieldBinding fieldBinding, FieldDeclaration fieldDecl)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForField(FieldBinding fieldBinding, FieldDeclaration fieldDecl)", "diff": ["+\t\tfinal ReferenceBinding declaringClass = fieldBinding.declaringClass;", "-\t\t\tproblemReporter().duplicateModifierForField(fieldBinding.declaringClass, fieldDecl);", "+\t\t\tproblemReporter().duplicateModifierForField(declaringClass, fieldDecl);", "-\t\tif ((fieldBinding.declaringClass.modifiers  & AccInterface) != 0) {", "+\t\tif ((declaringClass.modifiers  & AccInterface) != 0) {", "-\t\t\t\tif ((fieldBinding.declaringClass.modifiers  & AccAnnotation) != 0) {", "+\t\t\t\tif ((declaringClass.modifiers  & AccAnnotation) != 0)", "-\t\t\t\t} else {", "+\t\t\t\telse", "-\t\t\t\t}", "-\t\t\t\tproblemReporter().illegalModifierForEnumConstant(fieldBinding.declaringClass, fieldDecl);", "+\t\t\t\tproblemReporter().illegalModifierForEnumConstant(declaringClass, fieldDecl);", "-\t\tint unexpectedModifiers =", "-\t\t\t~(AccPublic | AccPrivate | AccProtected | AccFinal | AccStatic | AccTransient | AccVolatile);", "+\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccFinal | AccStatic | AccTransient | AccVolatile);", "-\t\t\tproblemReporter().illegalModifierForField(fieldBinding.declaringClass, fieldDecl);", "+\t\t\tproblemReporter().illegalModifierForField(declaringClass, fieldDecl);", "-\t\t\tproblemReporter().illegalVisibilityModifierCombinationForField(", "-\t\t\t\tfieldBinding.declaringClass,", "-\t\t\t\tfieldDecl);", "+\t\t\tproblemReporter().illegalVisibilityModifierCombinationForField(declaringClass, fieldDecl);", "-\t\t\t// need to keep the less restrictive", "+\t\t\t// need to keep the less restrictive so disable Protected/Private as necessary", "+\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "+\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tproblemReporter().illegalModifierCombinationFinalVolatileForField(", "-\t\t\t\tfieldBinding.declaringClass,", "-\t\t\t\tfieldDecl);", "+\t\t\tproblemReporter().illegalModifierCombinationFinalVolatileForField(declaringClass, fieldDecl);", "-\t\tif (fieldDecl.initialization == null && (modifiers & AccFinal) != 0) {", "+\t\tif (fieldDecl.initialization == null && (modifiers & AccFinal) != 0)", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67490269c3443d3e7e5cb2e8e4e39053", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "e96689e0f6202301820331bad4a76685b7be9aca", "commitAfterChange": "0f7b96e193ddd369a9d8d9acb0d2b62a76398935", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \t\r \tprivate void checkAndSetModifiers()", "signatureAfterChange": "\r \r \tprivate void checkAndSetModifiers()", "diff": ["-\t\r", "+\r", "-\t\tif (sourceType.isMemberType()) {\r", "+\t\tReferenceBinding enclosingType = sourceType.enclosingType();\r", "+\t\tboolean isMemberType = sourceType.isMemberType();\r", "+\t\t\r", "+\t\tif (isMemberType) {\r", "-\t\t\tif (sourceType.enclosingType().isStrictfp())\r", "+\t\t\tif (enclosingType.isStrictfp())\r", "-\t\t\tif (sourceType.enclosingType().isDeprecated())\r", "+\t\t\tif (enclosingType.isDeprecated())\r", "-\t\t\tif (sourceType.enclosingType().isInterface())\r", "+\t\t\tif (enclosingType.isInterface())\r", "-\t\t\tif (sourceType.isMemberType()) {\r", "+\t\t\tif (isMemberType) {\r", "-\t\t\tif (sourceType.isMemberType()) { // includes member types defined inside local types\r", "+\t\t\tif (isMemberType) { // includes member types defined inside local types\r", "-\t\tif (sourceType.isMemberType()) {\r", "+\t\tif (isMemberType) {\r", "-\t\t\tif (sourceType.enclosingType().isInterface()) {\r", "+\t\t\tif (enclosingType.isInterface()) {\r", "-\t\t\t\tif (sourceType.enclosingType().isInterface())\r", "+\t\t\t\tif (enclosingType.isInterface())\r", "-\t\t\t\tif (!sourceType.enclosingType().isStatic())\r", "+\t\t\t\tif (!enclosingType.isStatic())\r"]}], "num": 18735}
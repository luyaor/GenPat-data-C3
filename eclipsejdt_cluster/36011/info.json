{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a70809421e50d7824d2aec2dded80dde", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3408f15e4854dc2f6f8f272f1b4d4418", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite, boolean uncheckedBoundCheck)", "diff": ["-\tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite) {", "+\tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite, boolean uncheckedBoundCheck) {", "-\t\t\t\tif (paramMethod.isUnchecked || (paramMethod.isRaw && method.hasSubstitutedParameters())) {", "+\t\t\t\tif (paramMethod.isRaw && method.hasSubstitutedParameters()) {", "-\t\t\t\t}", "-", "-\t\t\t   if (paramLength == argumentTypes.length) { // 70056", "+\t\t\t\t} ", "+\t\t\t\tif (paramLength == argLength) { // 70056", "-\t\t} else if (rawOriginalGenericMethod != null) {", "-\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method);", "+\t\t} else if (rawOriginalGenericMethod != null ", "+\t\t\t\t|| uncheckedBoundCheck", "+\t\t\t\t|| ((invocationStatus & INVOCATION_ARGUMENT_UNCHECKED) != 0 ", "+\t\t\t\t\t\t&& method instanceof ParameterizedGenericMethodBinding", "+\t\t\t\t\t\t/*&& method.returnType != scope.environment().convertToRawType(method.returnType.erasure(), true)*/)) {", "+\t\t\tinvocationSite.setUnchecked(true);", "+\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method, argumentTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cbaeafb584d41f09d55e51aae5dbd12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "d10c3a13f9bf3e38045d73a77dc467fa13aa4633", "commitAfterChange": "dc0f545f068e33d369e4afe03a62ea04b3af5d6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object convertJDTArrayToReflectionArray(Object jdtValue, TypeBinding jdtType, Class<?> expectedType)", "signatureAfterChange": " \tprivate Object convertJDTArrayToReflectionArray(Object jdtValue, TypeBinding jdtType, Class<?> expectedType)", "diff": ["-\t\tif (!jdtType.isArrayType() || !(jdtValue instanceof Object[])) {", "-\t\t\t// TODO: wrap solo element into one-length array", "+\t\tif (!jdtType.isArrayType()) {", "+\t\t\t// the compiler says that the type binding isn't an array type; this probably means", "+\t\t\t// that there's some sort of syntax error.", "+\t\tObject[] jdtArray;", "+\t\t// See bug 261969: it's legal to pass a solo element for an array-typed value", "+\t\tif (jdtValue != null && !(jdtValue instanceof Object[])) {", "+\t\t\t// Create an array of the expected type", "+\t\t\tjdtArray = (Object[]) Array.newInstance(jdtValue.getClass(), 1);", "+\t\t\tjdtArray[0] = jdtValue;", "+\t\t} else {", "+\t\t\tjdtArray = (Object[])jdtValue;", "+\t\t}", "-\t\tObject[] jdtArray = (Object[])jdtValue;"]}], "num": 36011}
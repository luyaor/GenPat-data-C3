{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef8ed3bde678213454a6119810d77a25", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a344aa3bc556069531687d74ee3ad3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\t\t\t\tint annotationsCounter = 0;", "+\t\t\t\tint convertedAnnotationCount = 0;", "-\t\t\t\t\tfinal IAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotations[i]);", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalAnnotation = internalAnnotations[i];", "+\t\t\t\t\tIAnnotationBinding annotationInstance = this.resolver.getAnnotationInstance(internalAnnotation);", "-\t\t\t\t\ttempAnnotations[annotationsCounter++] = annotationInstance;", "+\t\t\t\t\ttempAnnotations[convertedAnnotationCount++] = annotationInstance;", "-\t\t\t\tif (length != annotationsCounter) {", "-\t\t\t\t\tSystem.arraycopy(tempAnnotations, 0, (tempAnnotations = new IAnnotationBinding[annotationsCounter]), 0, annotationsCounter);", "+\t\t\t\tif (convertedAnnotationCount != length) {", "+\t\t\t\t\tif (convertedAnnotationCount == 0) {", "+\t\t\t\t\t\treturn this.annotations = AnnotationBinding.NoAnnotations;", "+\t\t\t\t\t}", "+\t\t\t\t\tSystem.arraycopy(tempAnnotations, 0, (tempAnnotations = new IAnnotationBinding[convertedAnnotationCount]), 0, convertedAnnotationCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f599cecf3f32c44bbf990b64f04868d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java", "commitBeforeChange": "21d3c1ac784a9ef78a64389e4df817ec0452ce19", "commitAfterChange": "2c4adf2736a9a7ce066a42070aabd3f4b1ddf5af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static MethodInfo createMethod(byte classFileBytes[], int offsets[], int offset)", "signatureAfterChange": "  public static MethodInfo createMethod(byte classFileBytes[], int offsets[], int offset)", "diff": ["+\tTypeAnnotationInfo[] typeAnnotations = null;", "+\t\t\t\t\tTypeAnnotationInfo[] methodTypeAnnotations = null;", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tmethodTypeAnnotations = decodeTypeAnnotations(readOffset, true, methodInfo);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tmethodTypeAnnotations = decodeTypeAnnotations(readOffset, false, methodInfo);", "+\t\t\t\t\t} else if (methodTypeAnnotations != null) {", "+\t\t\t\t\t\tif (typeAnnotations == null) {", "+\t\t\t\t\t\t\ttypeAnnotations = methodTypeAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = typeAnnotations.length;", "+\t\t\t\t\t\t\tTypeAnnotationInfo[] newAnnotations = new TypeAnnotationInfo[length + methodTypeAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(typeAnnotations, 0, newAnnotations, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(methodTypeAnnotations, 0, newAnnotations, length, methodTypeAnnotations.length);", "+\t\t\t\t\t\t\ttypeAnnotations = newAnnotations;", "+\t\t\t\t\t\t}", "+\tif (typeAnnotations != null)", "+\t\treturn new MethodInfoWithTypeAnnotations(methodInfo, annotations, parameterAnnotations, typeAnnotations);"]}], "num": 6065}
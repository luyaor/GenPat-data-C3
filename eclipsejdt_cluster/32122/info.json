{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0679137b8590eeab6a7dda18a199511", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7023cc96af5a3cc29ed07fe221edc032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected boolean parseTag()", "signatureAfterChange": " \tprotected boolean parseTag()", "diff": ["-\t\tint length = this.scanner.currentPosition-this.tagSourceStart;", "-\t\ttag.setTagName(new String(this.source, this.tagSourceStart, length));", "-\t\ttag.setSourceRange(this.tagSourceStart, length);", "-\t\tpushOnAstStack(tag, true);", "+\t\tint start = this.tagSourceStart;", "+\t\ttag.setTagName(new String(this.source, start, this.tagSourceEnd-start+1));", "+\t\tif (this.inlineTagStarted) {", "+\t\t\tstart = this.inlineTagStart;", "+\t\t\tTagElement previousTag = null;", "+\t\t\tif (this.astPtr == -1) {", "+\t\t\t\tpreviousTag = this.ast.newTagElement();", "+\t\t\t\tpreviousTag.setSourceRange(start, this.tagSourceEnd-start+1);", "+\t\t\t\tpushOnAstStack(previousTag, true);", "+\t\t\t} else {", "+\t\t\t\tpreviousTag = (TagElement) this.astStack[this.astPtr];", "+\t\t\t}", "+\t\t\tint previousStart = previousTag.getStartPosition();", "+\t\t\tpreviousTag.fragments().add(tag);", "+\t\t\tpreviousTag.setSourceRange(previousStart, this.tagSourceEnd-previousStart+1);", "+\t\t} else {", "+\t\t\tpushOnAstStack(tag, true);", "+\t\t}", "+\t\ttag.setSourceRange(start, this.tagSourceEnd-start+1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ccd5eed51cf5cb5f474990834f9aa1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "bc11b8ca976f8360b7224f086a28378398f2dfd3", "commitAfterChange": "48f756ae0727772676a244af8217d19fe8e81145", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate void verifyNameBindings(Name name)", "signatureAfterChange": " \tprivate void verifyNameBindings(Name name)", "diff": ["-\t\t\tassertNotNull(name+\" binding was not found!\", name.resolveBinding());", "+\t\t\tIBinding binding = name.resolveBinding();", "+\t\t\tif (name.toString().indexOf(\"Unknown\") > 0) {", "+\t\t\t\tassertNull(this.prefix+name+\" binding should be null!\", binding);", "+\t\t\t} else {", "+\t\t\t\tassertNotNull(this.prefix+name+\" binding was not found!\", binding);", "+\t\t\t}", "-\t\t\t\tIBinding binding = simpleName.resolveBinding();", "-\t\t\t\tassertNotNull(simpleName+\" binding was not found!\", binding);", "+\t\t\t\tbinding = simpleName.resolveBinding();", "+\t\t\t\tif (simpleName.getIdentifier().equalsIgnoreCase(\"Unknown\")) {", "+\t\t\t\t\tassertNull(this.prefix+simpleName+\" binding should be null!\", binding);", "+\t\t\t\t} else {", "+\t\t\t\t\tassertNotNull(this.prefix+simpleName+\" binding was not found!\", binding);", "+\t\t\t\t}", "-\t\t\t\t\tassertEquals(\"Wrong binding type\", IBinding.PACKAGE, binding.getKind());", "+\t\t\t\t\tassertEquals(this.prefix+\"Wrong binding type\", IBinding.PACKAGE, binding.getKind());", "-\t\t\t\tassertNotNull(name+\" binding was not found!\", binding);", "+\t\t\t\tif (name.toString().indexOf(\"Unknown\") > 0) {", "+\t\t\t\t\tassertNull(this.prefix+name+\" binding should be null!\", binding);", "+\t\t\t\t} else {", "+\t\t\t\t\tassertNotNull(this.prefix+name+\" binding was not found!\", binding);", "+\t\t\t\t}", "-\t\t\t\t\tassertEquals(\"Wrong binding type\", IBinding.PACKAGE, binding.getKind());", "+\t\t\t\t\tassertEquals(this.prefix+\"Wrong binding type\", IBinding.PACKAGE, binding.getKind());"]}], "num": 32122}
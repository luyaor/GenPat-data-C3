{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5b460a4925074a9243a81cd8dec6b28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e5dee9cd776d55dd9a89c448495c65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\tif (field.binding != null && this.scope.compilerOptions().includeFieldsInNullAnalysis", "+\t\t\t\t\t\t&& ((field.binding.modifiers & ClassFileConstants.AccFinal) != 0)) {", "+\t\t\t\t\t// we won't reset null Info for constant fields", "+\t\t\t\t\tstaticFieldInfo.updateConstantFieldsMask(field.binding);", "+\t\t\t\t}", "-\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "+\t\tUnconditionalFlowInfo staticFieldUnconditionalInfo = staticFieldInfo.unconditionalInits();", "+\t\tFlowInfo constructorInfo;", "+\t\tif (this.scope.compilerOptions().includeFieldsInNullAnalysis) {", "+\t\t\tflowInfo.addNullInfoFrom(staticFieldUnconditionalInfo.discardNonFieldInitializations());", "+\t\t\tflowInfo.addConstantFieldsMask(staticFieldUnconditionalInfo);\t// prevent resetting null info for constant fields inside methods", "+\t\t\tflowInfo.resetNullInfoForFields();\t// only preserve null info for constant fields", "+\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(flowInfo);", "+\t\t\tconstructorInfo.addConstantFieldsMask(staticFieldUnconditionalInfo); // prevent resetting null info for constant fields inside c'tor too", "+\t\t} else {", "+\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "+\t\t}", "+\t\t", "-\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\tstaticFieldUnconditionalInfo.addInitializationsFrom(outerInfo));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99bd3adb0ab18bd3d85be2c55f757667", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "commitAfterChange": "8f130374b1740d04a2a1a32967cf4d9130b4bd12", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\tif (field.binding != null && this.scope.compilerOptions().includeFieldsInNullAnalysis", "-\t\t\t\t\t\t&& ((field.binding.modifiers & ClassFileConstants.AccFinal) != 0)) {", "-\t\t\t\t\t// we won't reset null Info for constant fields", "-\t\t\t\t\tstaticFieldInfo.updateConstantFieldsMask(field.binding);", "-\t\t\t\t}", "-\t\tUnconditionalFlowInfo staticFieldUnconditionalInfo = staticFieldInfo.unconditionalInits();", "-\t\tFlowInfo constructorInfo;", "-\t\tif (this.scope.compilerOptions().includeFieldsInNullAnalysis) {", "-\t\t\tflowInfo.addNullInfoFrom(staticFieldUnconditionalInfo.discardNonFieldInitializations());", "-\t\t\tflowInfo.addConstantFieldsMask(staticFieldUnconditionalInfo);\t// prevent resetting null info for constant fields inside methods", "-\t\t\tflowInfo.resetNullInfoForFields();\t// only preserve null info for constant fields", "-\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(flowInfo);", "-\t\t\tconstructorInfo.addConstantFieldsMask(staticFieldUnconditionalInfo); // prevent resetting null info for constant fields inside c'tor too", "-\t\t} else {", "-\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-\t\t}", "-\t\t", "+\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-\t\t\t\t\t\tstaticFieldUnconditionalInfo.addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));"]}], "num": 53516}
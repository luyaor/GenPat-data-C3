{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b774431608609c89be8d26b89d0f4623", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74da58e820c079cd93f0bf34b3168565", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration node)", "diff": ["-\t\tAssert.isTrue(false, \"Modifications in nodes of type \" + node.getClass().getName() + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\tint pos= rewriteJavadoc(node, EnumDeclaration.JAVADOC_PROPERTY);", "+\t\trewriteModifiers2(node, EnumDeclaration.MODIFIERS2_PROPERTY, pos);", "+\t\tpos= rewriteRequiredNode(node, EnumDeclaration.NAME_PROPERTY);", "+\t\trewriteNodeList(node, EnumDeclaration.SUPER_INTERFACE_TYPES_PROPERTY, pos, \" implements \", \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t", "+\t\t// TODO; wait for resolve of bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=76190", "+\t\trewriteNodeList(node, EnumDeclaration.BODY_DECLARATIONS_PROPERTY, pos, \"\", \", \"); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "885d1a69f681861f0c5e4e5adc7acfda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic boolean visit(WildcardType node)", "signatureAfterChange": " \tpublic boolean visit(WildcardType node)", "diff": ["-\t\tAssert.isTrue(false, \"Modifications in nodes of type \" + node.getClass().getName() + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\ttry {", "+\t\t\tint pos= getScanner().getNextEndOffset(node.getStartPosition(), true); // pos after question mark", "+\t\t\t", "+\t\t\tPrefix prefix;", "+\t\t\tif (Boolean.TRUE.equals(getNewValue(node, WildcardType.UPPER_BOUND_PROPERTY))) {", "+\t\t\t\tprefix= this.formatter.WILDCARD_EXTENDS;", "+\t\t\t} else {", "+\t\t\t\tprefix= this.formatter.WILDCARD_SUPER;", "+\t\t\t}", "+\t\t\t", "+\t\t\tint boundKindChange= getChangeKind(node, WildcardType.UPPER_BOUND_PROPERTY);", "+\t\t\tif (boundKindChange != RewriteEvent.UNCHANGED) {", "+\t\t\t\tint boundTypeChange= getChangeKind(node, WildcardType.BOUND_PROPERTY);", "+\t\t\t\tif (boundTypeChange != RewriteEvent.INSERTED && boundTypeChange != RewriteEvent.REMOVED) {", "+\t\t\t\t\tASTNode type= (ASTNode) getOriginalValue(node, WildcardType.BOUND_PROPERTY);", "+\t\t\t\t\tString str= prefix.getPrefix(0, getLineDelimiter());", "+\t\t\t\t\tdoTextReplace(pos, type.getStartPosition() - pos, str, getEditGroup(node, WildcardType.BOUND_PROPERTY));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\trewriteNode(node, WildcardType.BOUND_PROPERTY, pos, prefix);", "+\t\t} catch (CoreException e) {", "+\t\t\thandleException(e);", "+\t\t}"]}], "num": 33205}
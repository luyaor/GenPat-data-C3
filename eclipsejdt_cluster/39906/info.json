{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64a4b0aad5b6f616b79b1657de9c583e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a21b05c2a947e24376fb283242be471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "+\t\t\t\"\t                       ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t           ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t               ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t            ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"14. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"15. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"16. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"17. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tvoid foo(AX rawAx){}\\n\" + ", "+\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc15455eb28c03c43b420484aa49adb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1438, "methodNumberAfterChange": 1438, "signatureBeforeChange": " public void test1407()", "signatureAfterChange": " public void test1407()", "diff": ["-\t\t\t\t\"\tpublic static <I> I m2(Class<I> c) { return null; }\t\\n\" + ", "-\t\t\t\t\"\t\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\t\"\t\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\t\"\t\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"1. WARNING in Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\"\t            ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Foo>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in Foo.java (at line 5)\\n\" + ", "-\t\t\t\"\tFoo l1 = m1((Class)Foo.class); //ok - unchecked conversion from Class to Class<Foo> - I inferred to be Foo\\n\" + ", "-\t\t\t\"\t             ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"1. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation m2(Class) of the generic method m2(Class<I>) of type Foo\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation m1(Class) of the generic method m1(Class<Foo>) of type Foo\\n\" + ", "-\t\t\t\"4. ERROR in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"2. ERROR in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"5. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"3. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + ", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<I>\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Foo>\\n\" + ", "-\t\t\t\"6. WARNING in Foo.java (at line 6)\\n\" + ", "-\t\t\t\"\tFoo l2 = m2((Class)Foo.class); //unchecked call, erased return type and error because Object != Foo\t\t\\n\" + ", "+\t\t\t\"4. WARNING in Foo.java (at line 4)\\n\" + ", "+\t\t\t\"\tFoo l1 = m1((Class)Foo.class);\\n\" + "]}], "num": 39906}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d33547084cd4f072912dee51a546ff4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a2aeb4c79cece4281221d720b90899", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a0827b5ed51f9fc68d50a6070897f74217550da1", "commitAfterChange": "266357791826a02f1dd87ad4cdccffd484f96fd9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "signatureAfterChange": " \tprivate BoundSet resolve(InferenceVariable[] toResolve) throws InferenceFailureException", "diff": ["-\tprivate /*@Nullable*/ BoundSet resolve() throws InferenceFailureException {", "+\tprivate /*@Nullable*/ BoundSet resolve(InferenceVariable[] toResolve) throws InferenceFailureException {", "-\t\t\twhile ((variableSet = getSmallestVariableSet(tmpBoundSet)) != null) {", "+\t\t\twhile ((variableSet = getSmallestVariableSet(tmpBoundSet, toResolve)) != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05970cfcf163393f487c838a57841c8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "1740233a8dca1d707aa9811c9f07a7ace8f5d808", "commitAfterChange": "36542264af3396595138a00ba7efc11cead3cfc1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public ITypeHierarchy newSupertypeHierarchy(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r public ITypeHierarchy newSupertypeHierarchy(\r \tIWorkingCopy[] workingCopies,\r \tIProgressMonitor monitor)\r \tthrows JavaModelException", "diff": ["-\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, SearchEngine.createWorkspaceScope(), false);\r", "+ */\r", "+public ITypeHierarchy newSupertypeHierarchy(\r", "+\tIWorkingCopy[] workingCopies,\r", "+\tIProgressMonitor monitor)\r", "+\tthrows JavaModelException {\r", "+\r", "+\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, workingCopies, SearchEngine.createWorkspaceScope(), false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e6347aafa2e8cde48e74104f80e440", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/MessagerImpl.java", "commitBeforeChange": "9bb323761257fd426141c76d64df753d88acaa39", "commitAfterChange": "4cbefd5ca0037578e5d1e6e4d5e9cc1d66230e61", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void print(APTProblem.Severity severity, String msg)", "signatureAfterChange": "      private void print(APTProblem.Severity severity, String msg, String[] arguments)", "diff": ["-    private void print(APTProblem.Severity severity, String msg)", "+    private void print(APTProblem.Severity severity, String msg, String[] arguments)", "-    \t_env.addProblem(null, 0, -1, severity, msg, 1 );  ", "+    \t_env.addProblem(null, 0, -1, severity, msg, 1, arguments );  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c48e564253deb3b8d7226f1df3c73db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] exclusionPatterns, IPath specificOutputLocation)", "signatureAfterChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] inclusionPatterns, IPath[] exclusionPatterns, IPath specificOutputLocation)", "diff": ["+\t */", "+\tpublic static IClasspathEntry newSourceEntry(IPath path, IPath[] inclusionPatterns, IPath[] exclusionPatterns, IPath specificOutputLocation) {", "+\t\t\tinclusionPatterns,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "100f7261413378be532700ce410faeae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  private void handle( \tint problemId,  \tString[] problemArguments, \tint problemStartPosition,  \tint problemEndPosition)", "signatureAfterChange": "  private void handle( \tint problemId,  \tString[] problemArguments, \tString[] messageArguments, \tint problemStartPosition,  \tint problemEndPosition)", "diff": ["+\tString[] messageArguments,", "+\t\t\tmessageArguments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ef90ff2c3629201252c025f6ebcc516", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeHierarchyOperation.java", "commitBeforeChange": "c5e80f1c468f93e1630ec38a8f65f95d6a5b6566", "commitAfterChange": "14d4d0e7e5e6e39560f2bd581f9e4cb131027dc7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public CreateTypeHierarchyOperation(IType element, IRegion region, IJavaProject project, boolean computeSubtypes) throws JavaModelException", "signatureAfterChange": " public CreateTypeHierarchyOperation(IRegion region, IJavaProject project, ICompilationUnit[] workingCopies, IType element, boolean computeSubtypes) throws JavaModelException", "diff": ["-public CreateTypeHierarchyOperation(IType element, IRegion region, IJavaProject project, boolean computeSubtypes) throws JavaModelException {", "+public CreateTypeHierarchyOperation(IRegion region, IJavaProject project, ICompilationUnit[] workingCopies, IType element, boolean computeSubtypes) throws JavaModelException {", "-\tthis.typeHierarchy = new RegionBasedTypeHierarchy(region, project, element, computeSubtypes);", "+\tthis.typeHierarchy = new RegionBasedTypeHierarchy(region, project, workingCopies, element, computeSubtypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f3a5e595885bed19d267fe7982fc9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "eaf368b1bbed77e5ac91194cb5cc62e7c3b2c07b", "commitAfterChange": "850c65069b948dc807fdf250e07cb482b9cf25c2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 15, "signatureBeforeChange": " public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String jarPath) throws IOException", "signatureAfterChange": "  public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String[] classpath, String jarPath) throws IOException", "diff": ["+", "+public static void createJar(String[] pathsAndContents, String[] extraPathsAndContents, Map options, String[] classpath, String jarPath) throws IOException {", "-\t\tcompile(pathsAndContents, options, classesPath);", "+\t\tcompile(pathsAndContents, options, classpath, classesPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25141f9280761f9657f7d76f3121495f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "          private ProcessorEnvImpl( \t\t\tfinal IFile[] files,  \t\t\tfinal IJavaProject javaProj,  \t\t\tfinal Phase phase)", "signatureAfterChange": "          private ProcessorEnvImpl( \t\t\tfinal IFile[] files, \t\t\tfinal char[][] sources, \t\t\tfinal IJavaProject javaProj, \t\t\tfinal Phase phase)", "diff": ["-\t\t\tfinal IFile[] files, ", "-\t\t\tfinal IJavaProject javaProj, ", "+\t\t\tfinal IFile[] files,", "+\t\t\tfinal char[][] sources,", "+\t\t\tfinal IJavaProject javaProj,", "+\t\t_sources = sources;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "275175a675923a4a158e22f0c89ea6ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "diff": ["-void checkInheritedMethods(MethodBinding[] methods, int length) {", "+void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden) {", "-\t\tsuper.checkInheritedMethods(methods, length);", "+\t\tsuper.checkInheritedMethods(methods, length, isOverridden);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292de61bf582d603be7b13d5a0c6debc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "diff": ["+\tString[] messageArguments,", "-\t\t\tthrow new AbortCompilation(problemId, problemArguments);", "+\t\t\tthrow new AbortCompilation(problemId, problemArguments, messageArguments);", "+\t\t\tmessageArguments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b308c81ca7c7e9d8bbd98bc38e16c2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void record(String typeLocator, char[][][] qualifiedRefs, char[][] simpleRefs, char[] mainTypeName, ArrayList typeNames)", "signatureAfterChange": "  void record(String typeLocator, char[][][] qualifiedRefs, char[][] simpleRefs, char[][] rootRefs, char[] mainTypeName, ArrayList typeNames)", "diff": ["-void record(String typeLocator, char[][][] qualifiedRefs, char[][] simpleRefs, char[] mainTypeName, ArrayList typeNames) {", "+void record(String typeLocator, char[][][] qualifiedRefs, char[][] simpleRefs, char[][] rootRefs, char[] mainTypeName, ArrayList typeNames) {", "-\t\tthis.references.put(typeLocator, new ReferenceCollection(qualifiedRefs, simpleRefs));", "+\t\tthis.references.put(typeLocator, new ReferenceCollection(qualifiedRefs, simpleRefs, rootRefs));", "-\t\tthis.references.put(typeLocator, new AdditionalTypeCollection(definedTypeNames, qualifiedRefs, simpleRefs));", "+\t\tthis.references.put(typeLocator, new AdditionalTypeCollection(definedTypeNames, qualifiedRefs, simpleRefs, rootRefs));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b864aa74e269ddfb5d3df5b62209deb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public TypeReference createParameterizedQualifiedAssistTypeReference( \t\tchar[][] tokens, TypeReference[][] typeArguments, char[] assistname, long[] positions)", "signatureAfterChange": " public TypeReference createParameterizedQualifiedAssistTypeReference( \t\tchar[][] tokens, TypeReference[][] typeArguments, char[] assistname, TypeReference[] assistTypeArguments, long[] positions)", "diff": ["-\t\tchar[][] tokens, TypeReference[][] typeArguments, char[] assistname, long[] positions) {", "-\treturn new SelectionOnParameterizedQualifiedTypeReference(tokens, assistname, typeArguments, positions);", "+\t\tchar[][] tokens, TypeReference[][] typeArguments, char[] assistname, TypeReference[] assistTypeArguments, long[] positions) {", "+\treturn new SelectionOnParameterizedQualifiedTypeReference(tokens, assistname, typeArguments, assistTypeArguments, positions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37dc3b4f45141af10295c52c255fbef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 192, "methodNumberAfterChange": 195, "signatureBeforeChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "signatureAfterChange": " public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass, TypeReference[] typeArguments)", "diff": ["-", "-public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass) {", "+public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass, TypeReference[] typeArguments) {", "-\t\t\t\t\t\t\t}    \t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f857d33febaef611a51a2e9f0b0c87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel)", "signatureAfterChange": " private void createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames)", "diff": ["-private void createMethods(IBinaryMethod[] iMethods, long sourceLevel) {", "+private void createMethods(IBinaryMethod[] iMethods, long sourceLevel, char[][][] missingTypeNames) {", "-\t\t\tMethodBinding method = createMethod(iMethods[i], sourceLevel);", "+\t\t\tMethodBinding method = createMethod(iMethods[i], sourceLevel, missingTypeNames);", "-\t\t\t\tMethodBinding method = createMethod(iMethods[i], sourceLevel);", "+\t\t\t\tMethodBinding method = createMethod(iMethods[i], sourceLevel, missingTypeNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45235a2d57383b63c55a9d3cd270b450", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "f18746495477338a9b83fca4f673d973bc3b28e9", "commitAfterChange": "b7c75d5af8ed9aa46f28be9d8bc08449dc25dc4e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "             public static ProcessorEnvImpl newProcessorEnvironmentForBuild(IFile[] files, IJavaProject javaProj )", "signatureAfterChange": " \tpublic static ProcessorEnvImpl newProcessorEnvironmentForBuild(IFile[] files, char[][] sources, IJavaProject javaProj)", "diff": ["+\t */", "+\tpublic static ProcessorEnvImpl newProcessorEnvironmentForBuild(IFile[] files, char[][] sources, IJavaProject javaProj)", "+\t{", "+\t\tassert files != null : \"missing files\"; //$NON-NLS-1$  ", "+\t\treturn new ProcessorEnvImpl(files, sources, javaProj, Phase.BUILD);", "+\t}", "-\t\treturn new ProcessorEnvImpl(files, javaProj, Phase.BUILD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5354f0b6d8c41675bf20a31b1d25096b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c44d89fd5379544a6ddb472a22f014ab5bce19e8", "commitAfterChange": "a7e924b1651a1b9026ccc6590ce8e03365836a1b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate void findInterfacesMethods( \t\tchar[] selector, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tReferenceBinding[] itsInterfaces, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findInterfacesMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tReferenceBinding[] itsInterfaces, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["+\t\tTypeBinding[] typeArgTypes,", "+\t\t\t\t\t\t\t\t\ttypeArgTypes,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536d93ff869fcda82bed4c7b8b78d414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "9e38be072cbd6b6bac28faab5c373214de7387f2", "commitAfterChange": "c564e1960f12e31734dd5abe85ed6264f27cd484", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path)", "signatureAfterChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "diff": ["-\t\tAssert.isTrue(", "-\t\t\tpath.isAbsolute(),", "-\t\t\tUtil.bind(\"classpath.needAbsolutePath\" )); //$NON-NLS-1$", "+\t */", "+\tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns) {", "+\t\t", "+\t\tAssert.isTrue(path.isAbsolute(), Util.bind(\"classpath.needAbsolutePath\" )); //$NON-NLS-1$", "+\t\t", "-\t\t\tnull,", "-\t\t\tnull,", "+\t\t\texclusionPatterns,", "+\t\t\tnull, // source attachment", "+\t\t\tnull, // source attachment root"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e1666f8ee65cc852b45768729398a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint problemStartPosition,  \tint problemEndPosition,  \tReferenceContext referenceContext,  \tCompilationResult unitResult)", "diff": ["+\tString[] messageArguments,", "+\t\tmessageArguments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c764717b711013d1cc4eb485e7552b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static AnnotationBinding createAnnotation(IBinaryAnnotation annotationInfo, LookupEnvironment env)", "signatureAfterChange": " static AnnotationBinding createAnnotation(IBinaryAnnotation annotationInfo, LookupEnvironment env, char[][][] missingTypeNames)", "diff": ["-static AnnotationBinding createAnnotation(IBinaryAnnotation annotationInfo, LookupEnvironment env) {", "+static AnnotationBinding createAnnotation(IBinaryAnnotation annotationInfo, LookupEnvironment env, char[][][] missingTypeNames) {", "-\t\tpairs[i] = new ElementValuePair(binaryPairs[i].getName(), convertMemberValue(binaryPairs[i].getValue(), env), null);", "+\t\tpairs[i] = new ElementValuePair(binaryPairs[i].getName(), convertMemberValue(binaryPairs[i].getValue(), env, missingTypeNames), null);", "-\tReferenceBinding annotationType = env.getTypeFromConstantPoolName(typeName, 1, typeName.length - 1, false);", "+\tReferenceBinding annotationType = env.getTypeFromConstantPoolName(typeName, 1, typeName.length - 1, false, missingTypeNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "604f881f9702a9c14237a05d862e872b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 297, "signatureBeforeChange": " public void newArray(TypeReference typeReference, ArrayBinding arrayBinding)", "signatureAfterChange": "  public void newArray(TypeReference typeReference, Annotation[][] annotationsOnDimensions, ArrayBinding arrayBinding)", "diff": ["+", "+public void newArray(TypeReference typeReference, Annotation[][] annotationsOnDimensions, ArrayBinding arrayBinding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63331d20d8812f8bdcca4e4dd6d6f720", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder, char[][] exclusionPatterns)", "signatureAfterChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder, char[][] inclusionPatterns, char[][] exclusionPatterns)", "diff": ["-public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder, char[][] exclusionPatterns) {", "+public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder, char[][] inclusionPatterns, char[][] exclusionPatterns) {", "-\tthis.request(new RemoveFolderFromIndex(sourceFolder, exclusionPatterns, project, this));", "+\tthis.request(new RemoveFolderFromIndex(sourceFolder, inclusionPatterns, exclusionPatterns, project, this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "656d00b23fab9d02cd0ef0b3149801fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "8975a4993759f4f0cb2d8fff2da5bbb83e0cb45e", "commitAfterChange": "cf2efa3dda03cbfe4678da60ea7973c079a8dcf8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public abstract TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] asistIdentifier, long[] positions);", "signatureAfterChange": " public abstract TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] asistIdentifier, TypeReference[] assistTypeArguments, long[] positions);", "diff": ["-public abstract TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] asistIdentifier, long[] positions);", "+public abstract TypeReference createParameterizedQualifiedAssistTypeReference(char[][] previousIdentifiers, TypeReference[][] typeArguments, char[] asistIdentifier, TypeReference[] assistTypeArguments, long[] positions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65c14d463e2aa0537ffd1e22f67e5bab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper)", "signatureAfterChange": " private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames)", "diff": ["-private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper) {", "+private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames) {", "-\t\ttype = (ReferenceBinding) environment.getTypeFromTypeSignature(wrapper, existingVariables, this);", "+\t\ttype = (ReferenceBinding) environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames);", "-\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, existingVariables, this));", "+\t\t\ttypes.add(environment.getTypeFromTypeSignature(wrapper, existingVariables, this, missingTypeNames));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "681ceb80d1c1492d14832ec11305c4ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods)", "diff": ["-void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "+void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] otherInheritedMethods) {", "+\t// no op before 1.5", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73e4bfdcb561eb2fa8db331de9934da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "55fc1d09be22c3edd63ee3458e199979c3f77613", "commitAfterChange": "84e7ccc666453bf6300ee2ec41ee2751e7c7737b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void locatePackageDeclarations(SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchParticipant participant, IJavaProject[] projects) throws CoreException", "diff": ["-public void locatePackageDeclarations(SearchParticipant participant) throws CoreException {", "-\tlocatePackageDeclarations(this.pattern, participant);", "+protected void locatePackageDeclarations(SearchParticipant participant, IJavaProject[] projects) throws CoreException {", "+\tlocatePackageDeclarations(this.pattern, participant, projects);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7959b9c9abe8f2606e3a40b426ad951b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java", "commitBeforeChange": "a790cc2a1fe344908ce312351c9762d437d04475", "commitAfterChange": "96135df97393d0f8f1ee1a690487357a43849eda", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t\tprotected DefaultContainer newContainer(final char[][] libPaths, final boolean[] areExperted)", "signatureAfterChange": " \t\tprotected DefaultContainer newContainer(final char[][] libPaths, final boolean[] areExperted, final String[] forbiddenRefrences)", "diff": ["-\t\tprotected DefaultContainer newContainer(final char[][] libPaths, final boolean[] areExperted) {", "-\t\t\treturn new DefaultContainer(libPaths, areExperted);", "+\t\tprotected DefaultContainer newContainer(final char[][] libPaths, final boolean[] areExperted, final String[] forbiddenRefrences) {", "+\t\t\treturn new DefaultContainer(libPaths, areExperted, forbiddenRefrences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3314fdacce7079622e7fa2349d2554", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "commitAfterChange": "4bc0ba437bacd2b1f452f8c7e62bbdf6cd1994b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes) throws JavaModelException", "signatureAfterChange": " public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes, ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes) throws JavaModelException {", "-\tthis(type, SearchEngine.createJavaSearchScope(new IJavaElement[] {project}), computeSubtypes);", "+public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes, ICompilationUnit[] workingCopies) throws JavaModelException {", "+\tthis(type, SearchEngine.createJavaSearchScope(new IJavaElement[] {project}), computeSubtypes, workingCopies);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1fdf2df5a23f81e6e25d7d6b80b978", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "1740233a8dca1d707aa9811c9f07a7ace8f5d808", "commitAfterChange": "36542264af3396595138a00ba7efc11cead3cfc1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public ITypeHierarchy newSupertypeHierarchy(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r public ITypeHierarchy newSupertypeHierarchy(\r \tIWorkingCopy[] workingCopies,\r \tIProgressMonitor monitor)\r \tthrows JavaModelException", "diff": ["-\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, SearchEngine.createWorkspaceScope(), false);\r", "+ */\r", "+public ITypeHierarchy newSupertypeHierarchy(\r", "+\tIWorkingCopy[] workingCopies,\r", "+\tIProgressMonitor monitor)\r", "+\tthrows JavaModelException {\r", "+\t\t\r", "+\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, workingCopies, SearchEngine.createWorkspaceScope(), false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86469c133b9a9990dc694fdcf6be6f49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "6f6bc9d0562d23a055ee9e986cf21155795a29ff", "commitAfterChange": "7f289b483e1414e7141e9f94307fbe445e3b1b34", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "          void addMarker(     \t\tfinal int start,     \t\tfinal int end,     \t\tfinal String msg,     \t\tfinal Severity severity,     \t\tfinal int line)", "signatureAfterChange": "          void addMarker(     \t\tint start,  \t\t\tint end,             Severity severity,              String msg,              int line,             String[] arguments)", "diff": ["-    \t\tfinal int start,", "-    \t\tfinal int end,", "-    \t\tfinal String msg,", "-    \t\tfinal Severity severity,", "-    \t\tfinal int line)", "+    \t\tint start, ", "+\t\t\tint end,", "+            Severity severity, ", "+            String msg, ", "+            int line,", "+            String[] arguments)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89914b387fafe4f458cc782bf0efa3d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] exclusionPatterns) throws JavaModelException {", "+static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException {", "-\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, exclusionPatterns)) ", "+\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "-\t\t\t\t\t\t\t&& (!Util.isExcluded(member, exclusionPatterns) ", "+\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cb39819d7784451487f54f1871aba4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  private void handle( \tint problemId,  \tString[] problemArguments, \tint problemStartPosition,  \tint problemEndPosition, \tCompilationResult unitResult)", "signatureAfterChange": "  private void handle( \tint problemId,  \tString[] problemArguments, \tString[] messageArguments, \tint problemStartPosition,  \tint problemEndPosition, \tCompilationResult unitResult)", "diff": ["+\tString[] messageArguments,", "+\t\t\tmessageArguments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ec1d00aad4c2a52614b7fa2d035a93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, MethodBinding[] allInherited, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "+\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, MethodBinding[] allInherited, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "-\tsuper.checkNullSpecInheritance(currentMethod, srcMethod, hasReturnNonNullDefault, hasParameterNonNullDefault, complain, inheritedMethod, scope, inheritedNonNullnessInfos);", "+\tsuper.checkNullSpecInheritance(currentMethod, srcMethod, hasReturnNonNullDefault, hasParameterNonNullDefault, complain, inheritedMethod, allInherited, scope, inheritedNonNullnessInfos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f0d2dd852c5813aafd679fe46cc239", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "1740233a8dca1d707aa9811c9f07a7ace8f5d808", "commitAfterChange": "36542264af3396595138a00ba7efc11cead3cfc1", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r public ITypeHierarchy newTypeHierarchy(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r public ITypeHierarchy newTypeHierarchy(\r \tIWorkingCopy[] workingCopies,\r \tIProgressMonitor monitor)\r \tthrows JavaModelException", "diff": ["-\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, SearchEngine.createWorkspaceScope(), true);\r", "+ */\r", "+public ITypeHierarchy newTypeHierarchy(\r", "+\tIWorkingCopy[] workingCopies,\r", "+\tIProgressMonitor monitor)\r", "+\tthrows JavaModelException {\r", "+\r", "+\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, workingCopies, SearchEngine.createWorkspaceScope(), true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a98738a925b903564ac1e3b659c4d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/MessagerImpl.java", "commitBeforeChange": "9bb323761257fd426141c76d64df753d88acaa39", "commitAfterChange": "4cbefd5ca0037578e5d1e6e4d5e9cc1d66230e61", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "          private void print(SourcePosition pos,     \t\t\t\t   APTProblem.Severity severity,     \t\t\t\t   String msg)", "signatureAfterChange": "          private void print(SourcePosition pos,     \t\t\t\t   APTProblem.Severity severity,     \t\t\t\t   String msg,     \t\t\t\t   String[] arguments)", "diff": ["-    \t\t\t\t   String msg)", "+    \t\t\t\t   String msg,", "+    \t\t\t\t   String[] arguments)", "-    \t_env.addProblem(resource, offset, -1, severity, msg, pos.line() );   ", "+    \t_env.addProblem(resource, offset, -1, severity, msg, pos.line(), arguments );   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d0690f38f2ce724a5873d78f75a695", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic WildcardBinding(ReferenceBinding genericType, int rank, TypeBinding bound, int kind, LookupEnvironment environment)", "signatureAfterChange": " \tpublic WildcardBinding(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int kind, LookupEnvironment environment)", "diff": ["-\tpublic WildcardBinding(ReferenceBinding genericType, int rank, TypeBinding bound, int kind, LookupEnvironment environment) {", "+\tpublic WildcardBinding(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int kind, LookupEnvironment environment) {", "-\t\tinitialize(genericType, bound);", "+\t\tinitialize(genericType, bound, otherBounds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bda7827e614016903bb12adf13c5ad28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "9bb323761257fd426141c76d64df753d88acaa39", "commitAfterChange": "4cbefd5ca0037578e5d1e6e4d5e9cc1d66230e61", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 71, "signatureBeforeChange": "     void addProblem(IFile resource,         \t\t        int start,      \t\t\t\tint end,                     APTProblem.Severity severity,                      String msg,                      int line)", "signatureAfterChange": "     void addProblem(IFile resource,         \t\t        int start,      \t\t\t\tint end,                     APTProblem.Severity severity,                      String msg,                      int line,                     String[] arguments)", "diff": ["-                    int line)", "+                    int line,", "+                    String[] arguments)", "-        \tnew APTProblem(getUniqueProblemId(), msg, severity, resource, start, end, line);", "+        \tnew APTProblem(msg, severity, resource, start, end, line, arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfbd2e18f4343dac73029736e4b2901d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "6138f92fd5c7abeb22a4199219b18e2107d6edbc", "commitAfterChange": "7073418b816148d53c325cad45ff5b7e93774712", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "signatureAfterChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder, char[][] exclusionPatterns)", "diff": ["-public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder) {", "+public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder, char[][] exclusionPatterns) {", "-\tthis.request(new RemoveFolderFromIndex(sourceFolder, project, this));", "+\tthis.request(new RemoveFolderFromIndex(sourceFolder, exclusionPatterns, project, this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfbd712f55d6c38ca7e611f8f36f6c3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java", "commitBeforeChange": "a790cc2a1fe344908ce312351c9762d437d04475", "commitAfterChange": "96135df97393d0f8f1ee1a690487357a43849eda", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\tpublic CompletionContainerInitializer(String projectName, String[] libPaths, boolean[] areExported)", "signatureAfterChange": " \t\tpublic CompletionContainerInitializer(String projectName, String[] libPaths, boolean[] areExported, String[] forbiddenRefrences)", "diff": ["-\t\t */", "+\t\t}", "+\t\tpublic CompletionContainerInitializer(String projectName, String[] libPaths, boolean[] areExported, String[] forbiddenRefrences) {", "-\t\t\t\tnewContainer(charLibPaths, areExported)", "+\t\t\t\tnewContainer(charLibPaths, areExported, forbiddenRefrences)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c62e290173de616940ab114611cfa388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public IProblem createProblem( \tchar[] fileName,  \tint problemId,  \tString[] problemArguments,  \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tint lineNumber, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public IProblem createProblem( \tchar[] fileName,  \tint problemId,  \tString[] problemArguments,  \tString[] messageArguments, \tint severity,  \tint problemStartPosition,  \tint problemEndPosition,  \tint lineNumber, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["+\tString[] messageArguments,", "+\t\tmessageArguments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c93a3941fe6d8361d64c9ce64d656a52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter15/src/test0028/X.java", "commitBeforeChange": "a08dcb71c251f4a65da174f08c5aedb4a1c21fbd", "commitAfterChange": "c70a62bc8ce7399e134785e02dbb98fae8410d19", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tvoid foo()", "signatureAfterChange": " \t \tvoid foo(String[] args)", "diff": ["-\tvoid foo() {", "+\tvoid foo(String[] args) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e84b906020294abad24abd7e27acc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedTypeHierarchy.java", "commitBeforeChange": "c5e80f1c468f93e1630ec38a8f65f95d6a5b6566", "commitAfterChange": "14d4d0e7e5e6e39560f2bd581f9e4cb131027dc7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public RegionBasedTypeHierarchy(IRegion region, IJavaProject project, IType type, boolean computeSubtypes) throws JavaModelException", "signatureAfterChange": " public RegionBasedTypeHierarchy(IRegion region, IJavaProject project, ICompilationUnit[] workingCopies, IType type, boolean computeSubtypes) throws JavaModelException", "diff": ["-public RegionBasedTypeHierarchy(IRegion region, IJavaProject project, IType type, boolean computeSubtypes) throws JavaModelException {", "-\tsuper(type, null/*no working copies*/, (IJavaSearchScope)null, computeSubtypes);", "+public RegionBasedTypeHierarchy(IRegion region, IJavaProject project, ICompilationUnit[] workingCopies, IType type, boolean computeSubtypes) throws JavaModelException {", "+\tsuper(type, workingCopies, (IJavaSearchScope)null, computeSubtypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1a1abb7db56369621e828d834c99b26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "diff": ["-void checkInheritedMethods(MethodBinding[] methods, int length) {", "+void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden) {", "-\t\tsuper.checkInheritedMethods(methods, length);", "+\t\tsuper.checkInheritedMethods(methods, length, isOverridden);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d224388330c12eb6bf4a286a7bc09d39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "b90626a8f6e0a122baef19254d7e1d462d97446e", "commitAfterChange": "afb20f30301e2620352c3a6eece24740efc080f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end)", "diff": ["-public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, int start, int end) {", "+public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {", "-\t\t\t\tacceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures);", "+\t\t\t\tacceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, uniqueKey);", "-\t\t\t\tacceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);", "+\t\t\t\tacceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, uniqueKey);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d95e7a1a73f596b857565e0db009984f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1369ee539fab963cb9212bc0e7728c8e7ea1581c", "commitAfterChange": "8677d75931646723a12e1b4ccafa141861462004", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  private void handle( \tint problemId,  \tString[] problemArguments, \tint severity, \tint problemStartPosition,  \tint problemEndPosition)", "signatureAfterChange": "  private void handle( \tint problemId,  \tString[] problemArguments, \tString[] messageArguments, \tint severity, \tint problemStartPosition,  \tint problemEndPosition)", "diff": ["+\tString[] messageArguments,", "+\t\t\tmessageArguments,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e085b8f9e469d1a2136d68fe6aaac0c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/AbstractAnnotationProcessorManager.java", "commitBeforeChange": "639f95fb93a85f023afe828b77bfc8cd4dbf811c", "commitAfterChange": "8a3cbdf1db434ade029724481c4ce0338046043a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic abstract void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound);", "signatureAfterChange": " \t \tpublic abstract void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound);", "diff": ["-\tpublic abstract void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound);", "+\tpublic abstract void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6806b5d4f77818413ef74e37b1b49cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods)", "diff": ["-void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length) {", "+void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods) {", "-\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod);", "+\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, otherInheritedMethods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ad8b967507707c250e2e2431615580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathLocation.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  static ClasspathLocation forSourceFolder(IContainer sourceFolder, IContainer outputFolder, char[][] exclusionPatterns)", "signatureAfterChange": "  static ClasspathLocation forSourceFolder(IContainer sourceFolder, IContainer outputFolder, char[][] inclusionPatterns, char[][] exclusionPatterns)", "diff": ["-static ClasspathLocation forSourceFolder(IContainer sourceFolder, IContainer outputFolder, char[][] exclusionPatterns) {", "-\treturn new ClasspathMultiDirectory(sourceFolder, outputFolder, exclusionPatterns);", "+static ClasspathLocation forSourceFolder(IContainer sourceFolder, IContainer outputFolder, char[][] inclusionPatterns, char[][] exclusionPatterns) {", "+\treturn new ClasspathMultiDirectory(sourceFolder, outputFolder, inclusionPatterns, exclusionPatterns);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d6b88153cd403a5b12955d3cf6657c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "fd5fe0838929e5227d1524384a37e09b34bfb15e", "commitAfterChange": "35293aa2c53e258bd9815d912253aad7aabdda8f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "signatureAfterChange": "  void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden, boolean[] isInherited)", "diff": ["-void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden) {", "+void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden, boolean[] isInherited) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa17b78dbbc4b32112e4d865b6ee130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeAnnotationProcessorManager.java", "commitBeforeChange": "a67fa7cbc880c9e9bad3f8e391aeed5f3e00392a", "commitAfterChange": "b492bcd26f25dcd86303e009ed59915c2ac84c99", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound)", "signatureAfterChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound)", "diff": ["-\tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound) {", "+\tpublic void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound) {", "-\t\t\tsuper.processAnnotations(units, isLastRound);", "+\t\t\tsuper.processAnnotations(units, binaryTypeBindings, isLastRound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed24a3a09a80a4d6ab726674e40b405b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "1740233a8dca1d707aa9811c9f07a7ace8f5d808", "commitAfterChange": "36542264af3396595138a00ba7efc11cead3cfc1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r public ITypeHierarchy newTypeHierarchy(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r public ITypeHierarchy newTypeHierarchy(\r \tIWorkingCopy[] workingCopies,\r \tIProgressMonitor monitor)\r \tthrows JavaModelException", "diff": ["-\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, SearchEngine.createWorkspaceScope(), true);\r", "+ */\r", "+public ITypeHierarchy newTypeHierarchy(\r", "+\tIWorkingCopy[] workingCopies,\r", "+\tIProgressMonitor monitor)\r", "+\tthrows JavaModelException {\r", "+\t\t\r", "+\tCreateTypeHierarchyOperation op= new CreateTypeHierarchyOperation(this, workingCopies, SearchEngine.createWorkspaceScope(), true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1ac1376ddfcccb5af4c34e366f3f616", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseAnnotationProcessorManager.java", "commitBeforeChange": "639f95fb93a85f023afe828b77bfc8cd4dbf811c", "commitAfterChange": "8a3cbdf1db434ade029724481c4ce0338046043a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound)", "signatureAfterChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound)", "diff": ["-\tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound) {", "-\t\tRoundEnvImpl roundEnv = new RoundEnvImpl(units, isLastRound, _processingEnv);", "+\tpublic void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound) {", "+\t\tRoundEnvImpl roundEnv = new RoundEnvImpl(units, binaryTypeBindings, isLastRound, _processingEnv);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2fc8c6f76b4cd31591e772ea883abbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "bfcd45867d04fefcde8c411b2c4f613fed962f2b", "commitAfterChange": "8360857ac96415dcd60ac94fbc284e7801424ade", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate APTDispatchRunnable(  \t\t\tICompilationParticipantResult[] filesWithAnnotation,  \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "signatureAfterChange": " \tprivate APTDispatchRunnable(  \t\t\tICompilationParticipantResult[] filesWithAnnotation, \t\t\tICompilationParticipantResult[] filesWithoutAnnotation, \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "diff": ["-\t\t\tICompilationParticipantResult[] filesWithAnnotation, ", "+\t\t\tICompilationParticipantResult[] filesWithAnnotation,", "+\t\t\tICompilationParticipantResult[] filesWithoutAnnotation,", "+\t\t_filesWithoutAnnotation = filesWithoutAnnotation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f58d58bdb5ea80ea19019edad073da47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "bfcd45867d04fefcde8c411b2c4f613fed962f2b", "commitAfterChange": "8360857ac96415dcd60ac94fbc284e7801424ade", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \t \tpublic static Set<AnnotationProcessorFactory> runAPTDuringBuild( \t\t\tICompilationParticipantResult[] filesWithAnnotations,  \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "signatureAfterChange": " \t \t \tpublic static Set<AnnotationProcessorFactory> runAPTDuringBuild( \t\t\tICompilationParticipantResult[] filesWithAnnotations,  \t\t\tICompilationParticipantResult[] filesWithoutAnnotations, \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "diff": ["+\t\t\tICompilationParticipantResult[] filesWithoutAnnotations,", "-\t\t APTDispatchRunnable runnable = new APTDispatchRunnable( filesWithAnnotations, aptProject, factories, dispatchedBatchFactories, isFullBuild );", "+\t\t APTDispatchRunnable runnable = ", "+\t\t\t new APTDispatchRunnable( ", "+\t\t\t\t\t filesWithAnnotations,", "+\t\t\t\t\t filesWithoutAnnotations,", "+\t\t\t\t\t aptProject, factories, ", "+\t\t\t\t\t dispatchedBatchFactories, isFullBuild );"]}], "num": 40294}
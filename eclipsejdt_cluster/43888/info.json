{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb292679187e79bdad3a49fc898cae1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0674f6e3ed813ac6ce46398cdf925942", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java", "commitBeforeChange": "504d9c930db0a7b3e061db7df86f22966a0a6152", "commitAfterChange": "21b7e8fca889a53ea1492dacfa8764858f158168", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void initializeDefaultPreferences()", "signatureAfterChange": " \tpublic void initializeDefaultPreferences()", "diff": ["-\t\tMap defaultOptionsMap = Util.getOriginalDefaultOptions(optionNames);", "+\t\tMap defaultOptionsMap = new CompilerOptions().getMap(); // compiler defaults", "+", "+\t\t// Override some compiler defaults", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_LOCAL_VARIABLE_ATTR, JavaCore.GENERATE);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_CODEGEN_UNUSED_LOCAL, JavaCore.PRESERVE);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_TAGS, JavaCore.DEFAULT_TASK_TAGS);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_PRIORITIES, JavaCore.DEFAULT_TASK_PRIORITIES);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_TASK_CASE_SENSITIVE, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);", "+", "+\t\t// Builder settings", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, JavaCore.ABORT);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE, JavaCore.WARNING);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER, JavaCore.CLEAN);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER, JavaCore.IGNORE);", "+", "+\t\t// JavaCore settings", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_ORDER, JavaCore.IGNORE);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_INCOMPLETE_CLASSPATH, JavaCore.ERROR);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_CIRCULAR_CLASSPATH, JavaCore.ERROR);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL, JavaCore.IGNORE);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, JavaCore.ENABLED);", "+", "+\t\t// encoding setting comes from resource plug-in", "+\t\toptionNames.add(JavaCore.CORE_ENCODING);", "+", "+\t\t// Formatter settings", "+\t\tMap codeFormatterOptionsMap = DefaultCodeFormatterConstants.getEclipseDefaultSettings(); // code formatter defaults", "+\t\tfor (Iterator iter = codeFormatterOptionsMap.entrySet().iterator(); iter.hasNext();) {", "+\t\t\tMap.Entry entry = (Map.Entry) iter.next();", "+\t\t\tString optionName = (String) entry.getKey();", "+\t\t\tdefaultOptionsMap.put(optionName, entry.getValue());", "+\t\t\toptionNames.add(optionName);", "+\t\t}", "+", "+\t\t// CodeAssist settings", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_DEPRECATION_CHECK, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_IMPLICIT_QUALIFICATION, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_PREFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_SUFFIXES, \"\"); //$NON-NLS-1$", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_DISCOURAGED_REFERENCE_CHECK, JavaCore.DISABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tdefaultOptionsMap.put(JavaCore.CODEASSIST_SUGGEST_STATIC_IMPORTS, JavaCore.ENABLED);", "+", "+\t\t// Time out for parameter names", "+\t\tdefaultOptionsMap.put(JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC, \"50\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523aad4a1977095a8ecf2eed81722f5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(EnumConstantDeclaration node)", "diff": ["-\t\tAssert.isTrue(false, \"Modifications in nodes of type \" + node.getClass().getName() + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\tint pos= rewriteJavadoc(node, EnumConstantDeclaration.JAVADOC_PROPERTY);", "+\t\trewriteModifiers2(node, EnumConstantDeclaration.MODIFIERS2_PROPERTY, pos);", "+\t\tpos= rewriteRequiredNode(node, EnumConstantDeclaration.NAME_PROPERTY);", "+\t\tRewriteEvent argsEvent= getEvent(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY);", "+\t\tif (argsEvent != null && argsEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\tRewriteEvent[] children= argsEvent.getChildren();", "+\t\t\ttry {", "+\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "+\t\t\t\tboolean hasParents= (nextTok == ITerminalSymbols.TokenNameLPAREN);", "+\t\t\t\tboolean isAllRemoved= hasParents && isAllOfKind(children, RewriteEvent.REMOVED);", "+\t\t\t\tString prefix= \"\"; //$NON-NLS-1$", "+\t\t\t\tif (!hasParents) {", "+\t\t\t\t\tprefix= \"(\"; //$NON-NLS-1$", "+\t\t\t\t} else if (!isAllRemoved) {", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t}", "+\t\t\t\tpos= rewriteNodeList(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, pos, prefix, \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t", "+\t\t\t\tif (!hasParents) {", "+\t\t\t\t\tdoTextInsert(pos, \")\", getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "+\t\t\t\t} else if (isAllRemoved) {", "+\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\tpos= afterClosing;", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tpos= doVisit(node, EnumConstantDeclaration.ARGUMENTS_PROPERTY, 0);", "+\t\t}", "+\t\t// 'pos' can be before brace", "+\t\t", "+\t\tRewriteEvent bodyEvent= getEvent(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY);", "+\t\tif (bodyEvent != null && bodyEvent.getChangeKind() != RewriteEvent.UNCHANGED) {", "+\t\t\tRewriteEvent[] children= bodyEvent.getChildren();", "+\t\t\ttry {", "+\t\t\t\tint nextTok= getScanner().readNext(pos, true);", "+\t\t\t\tif (nextTok == ITerminalSymbols.TokenNameRPAREN) { // ", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t\tnextTok= getScanner().readNext(pos, true);", "+\t\t\t\t}", "+\t\t\t\tboolean hasBraces= (nextTok == ITerminalSymbols.TokenNameLBRACE);", "+\t\t\t\tboolean isAllRemoved= hasBraces && isAllOfKind(children, RewriteEvent.REMOVED);", "+\t\t\t\tint startIndent= getIndent(node.getStartPosition()) + 1;", "+\t\t\t\tif (!hasBraces) {", "+\t\t\t\t\tString prefix= this.formatter.ENUM_BODY_START.getPrefix(startIndent, getLineDelimiter());", "+\t\t\t\t\tdoTextInsert(pos, prefix, getEditGroup(children[0])); //$NON-NLS-1$", "+\t\t\t\t} else if (!isAllRemoved) {", "+\t\t\t\t\tpos= getScanner().getCurrentEndOffset();", "+\t\t\t\t}", "+", "+\t\t\t\tpos= rewriteParagraphList(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, pos, startIndent, 0, 0);", "+\t\t\t\t", "+\t\t\t\tif (!hasBraces) {", "+\t\t\t\t\tString suffix= this.formatter.ENUM_BODY_END.getPrefix(startIndent, getLineDelimiter());", "+\t\t\t\t\tdoTextInsert(pos, suffix, getEditGroup(children[children.length - 1])); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tint afterClosing= getScanner().getNextEndOffset(pos, true);", "+\t\t\t\t\tif (isAllRemoved) {", "+\t\t\t\t\t\tdoTextRemove(pos, afterClosing - pos, getEditGroup(children[children.length - 1]));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\thandleException(e);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tdoVisit(node, EnumConstantDeclaration.BODY_DECLARATIONS_PROPERTY, 0);", "+\t\t}"]}], "num": 43888}
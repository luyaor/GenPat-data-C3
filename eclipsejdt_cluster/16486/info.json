{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e43169a3fd6f095c057c21cc2658b595", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1516a569db1990e47a70e5ab243cae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public NameEnvironmentAnswer readJavaFile(String filename, char[][] packageName)", "signatureAfterChange": "\r public NameEnvironmentAnswer readJavaFile(String filename, char[][] packageName)", "diff": ["+\tInputStream stream = null;\r", "-\t\tInputStreamReader reader = new InputStreamReader(zipFile.getInputStream(entry));\r", "-\t\tint length;\r", "-\t\tchar[] contents = new char[length = (int) entry.getSize()];\r", "-\t\tint len = 0;\r", "-\t\tint readSize = 0;\r", "-\t\twhile ((readSize != -1) && (len != length)) {\r", "-\t\t\treadSize = reader.read(contents, len, length - len);\r", "-\t\t\tlen += readSize;\r", "-\t\t}\r", "-\t\treader.close();\r", "+\t\tstream = new BufferedInputStream(zipFile.getInputStream(entry));\r", "+\t\tchar[] contents = Util.getInputStreamAsCharArray(stream, (int) entry.getSize());\r", "+\t} finally {\r", "+\t\tif (stream != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tstream.close();\r", "+\t\t\t} catch (IOException e) {\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5c90e08047a7ae72ba6c161026d0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeInputFileObject.java", "commitBeforeChange": "9fba4e7dd11006e339abd70df0a4cf770da6d0e9", "commitAfterChange": "33487cc981d428d38caef48b42bdb5a92d78e5bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "signatureAfterChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) \t\t\tthrows IOException", "diff": ["-\tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {", "-\t\t// Use buffer size at least as big as the default size of the", "-\t\t// BufferedReader returned by openReader(), to reduce redundant", "-\t\t// copying.  See BufferedReader.read1() for details.", "-\t\tchar[] buffer = new char[8192];", "-\t\tStringWriter w = new StringWriter();", "-\t\tReader r = openReader(ignoreEncodingErrors);", "+\tpublic CharSequence getCharContent(boolean ignoreEncodingErrors)", "+\t\t\tthrows IOException {", "-\t\t\tint read = -1;", "-\t\t\twhile ((read = r.read(buffer)) != -1) {", "-\t\t\t\tw.write(buffer, 0, read);", "-\t\t\t}", "+\t\t\tchar[] chars = Util.getResourceContentsAsCharArray(this._file);", "+\t\t\treturn new String(chars);", "+\t\t} catch (CoreException e) {", "+\t\t\tthrow new IOException(e);", "-\t\tfinally {", "-\t\t\tr.close();", "-\t\t}", "-\t\treturn w.getBuffer();"]}], "num": 16486}
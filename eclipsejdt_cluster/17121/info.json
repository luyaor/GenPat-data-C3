{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cb3c7cb53a2058fe9cec5f18162e6e8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e45011e56c870ffad60d66cc3d3a28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate void voidVisitList(List list, boolean hasRangeCopySources)", "signatureAfterChange": " \t \tprivate void voidVisitList(List list)", "diff": ["-\tprivate void voidVisitList(List list, boolean hasRangeCopySources) {", "-\t\tif (hasRangeCopySources) {", "-\t\t\t// list with copy source ranges", "-\t\t\tStack nodeRangeEndStack= new Stack();", "-\t\t\tfor (Iterator iter= list.iterator(); iter.hasNext();) {", "-\t\t\t\tASTNode curr= ((ASTNode) iter.next());", "-\t\t\t\tdoCopySourcePreVisit(this.eventStore.getRangeCopySources(curr), nodeRangeEndStack);", "-\t\t\t\tdoVisit(curr);", "-\t\t\t\tdoCopySourcePostVisit(curr, nodeRangeEndStack);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tfor (Iterator iter= list.iterator(); iter.hasNext();) {", "-\t\t\t\tdoVisit(((ASTNode) iter.next()));", "-\t\t\t}", "+\tprivate void voidVisitList(List list) {", "+\t\tfor (Iterator iter= list.iterator(); iter.hasNext();) {", "+\t\t\tdoVisit(((ASTNode) iter.next()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc287a5ac8bf668832a96155d35f90a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tprivate int doVisitList(List list, int offset, boolean hasRangeCopySources)", "signatureAfterChange": " \t \tprivate int doVisitList(List list, int offset)", "diff": ["-\tprivate int doVisitList(List list, int offset, boolean hasRangeCopySources) {", "-\t\tif (hasRangeCopySources) {", "-\t\t\t// list with copy source ranges", "-\t\t\tStack nodeRangeEndStack= new Stack();", "-\t\t\tint endPos= offset;", "-\t\t\tfor (Iterator iter= list.iterator(); iter.hasNext();) {", "-\t\t\t\tASTNode curr= ((ASTNode) iter.next());", "-\t\t\t\tdoCopySourcePreVisit(this.eventStore.getRangeCopySources(curr), nodeRangeEndStack);", "-\t\t\t\tendPos= doVisit(curr);", "-\t\t\t\tdoCopySourcePostVisit(curr, nodeRangeEndStack);", "-\t\t\t}", "-\t\t\treturn endPos;", "-\t\t} else {", "-\t\t\tint endPos= offset;", "-\t\t\tfor (Iterator iter= list.iterator(); iter.hasNext();) {", "-\t\t\t\tASTNode curr= ((ASTNode) iter.next());", "-\t\t\t\tendPos= doVisit(curr);", "-\t\t\t}", "-\t\t\treturn endPos;", "+\tprivate int doVisitList(List list, int offset) {", "+\t\tint endPos= offset;", "+\t\tfor (Iterator iter= list.iterator(); iter.hasNext();) {", "+\t\t\tASTNode curr= ((ASTNode) iter.next());", "+\t\t\tendPos= doVisit(curr);", "+\t\treturn endPos;"]}], "num": 17121}
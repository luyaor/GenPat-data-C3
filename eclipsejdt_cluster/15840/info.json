{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64904b6be7bd0d15804308a213202cf3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a565775d0f958a4b2a1243ca61960076", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void buildBindings(PotentialMatch potentialMatch)", "signatureAfterChange": " protected void buildBindings(PossibleMatch possibleMatch)", "diff": ["-protected void buildBindings(PotentialMatch potentialMatch) {", "+protected void buildBindings(PossibleMatch possibleMatch) {", "-\t\t\tSystem.out.println(\"Parsing \" + potentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Parsing \" + possibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-\t\tthis.parser.setMatchSet(potentialMatch.matchingNodeSet);", "-\t\tCompilationResult unitResult = new CompilationResult(potentialMatch, 1, 1, this.options.maxProblemsPerUnit);", "-\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(potentialMatch, unitResult);", "+\t\tthis.parser.setMatchSet(possibleMatch.matchingNodeSet);", "+\t\tCompilationResult unitResult = new CompilationResult(possibleMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(possibleMatch, unitResult);", "-\t\t\t// add the potentialMatch with its parsedUnit to matchesToProcess", "-\t\t\tpotentialMatch.parsedUnit = parsedUnit;", "+\t\t\t// add the possibleMatch with its parsedUnit to matchesToProcess", "+\t\t\tpossibleMatch.parsedUnit = parsedUnit;", "-\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PotentialMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "-\t\t\tthis.matchesToProcess[this.numberOfMatches++] = potentialMatch;", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PossibleMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = possibleMatch;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31a71ec46cedb67e17541e39d1da1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t \tprotected void addCompilationUnit( \t\tICompilationUnit sourceUnit, \t\tCompilationUnitDeclaration parsedUnit)", "signatureAfterChange": " protected void buildBindings(PotentialMatch potentialMatch)", "diff": ["-\t}\t", "-\tprotected void addCompilationUnit(", "-\t\tICompilationUnit sourceUnit,", "-\t\tCompilationUnitDeclaration parsedUnit) {", "-", "-\t\t// append the unit to the list of ones to process later on", "-\t\tint size = this.unitsToProcess.length;", "-\t\tif (this.totalUnits == size) {", "-\t\t\t// when growing reposition units starting at position 0", "-\t\t\tint newSize = size == 0 ? 1 : size * 2;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.unitsToProcess,", "-\t\t\t\t0,", "-\t\t\t\t(this.unitsToProcess = new CompilationUnitDeclaration[newSize]),", "-\t\t\t\t0,", "-\t\t\t\tthis.totalUnits);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.matchesToProcess,", "-\t\t\t\t0,", "-\t\t\t\t(this.matchesToProcess = new PotentialMatch[newSize]),", "-\t\t\t\t0,", "-\t\t\t\tthis.totalUnits);", "-\t\t}", "-\t\tif (sourceUnit instanceof PotentialMatch) {", "-\t\t\tthis.matchesToProcess[this.totalUnits] = (PotentialMatch)sourceUnit;", "-\t\t}", "-\t\tthis.unitsToProcess[this.totalUnits] = parsedUnit;", "-\t\tthis.totalUnits++;", "-\t}\t", "+ */", "+protected void buildBindings(PotentialMatch potentialMatch) {", "+\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();", "+\ttry {", "+\t\tif (SearchEngine.VERBOSE)", "+\t\t\tSystem.out.println(\"Parsing \" + potentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+", "+\t\tthis.parser.matchSet = potentialMatch.matchingNodeSet;", "+\t\tCompilationResult unitResult = new CompilationResult(potentialMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(potentialMatch, unitResult);", "+\t\tif (parsedUnit != null) {", "+\t\t\tif (!parsedUnit.isEmpty())", "+\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "+", "+\t\t\t// add the potentialMatch with its parsedUnit to matchesToProcess", "+\t\t\tpotentialMatch.parsedUnit = parsedUnit;", "+\t\t\tint size = this.matchesToProcess.length;", "+\t\t\tif (this.numberOfMatches == size)", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PotentialMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = potentialMatch;", "+", "+\t\t\tif (this.progressMonitor != null)", "+\t\t\t\tthis.progressMonitor.worked(4);", "+\t} finally {", "+\t\tthis.parser.matchSet = null;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff949730ae6522501d1f9d39dbb1954c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 55, "signatureBeforeChange": " protected void parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve)", "signatureAfterChange": " protected boolean parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve) throws CoreException", "diff": ["- */", "-protected void parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve) {", "-\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "-\t\tthrow new OperationCanceledException();", "-", "-\ttry {", "-\t\tif (BasicSearchEngine.VERBOSE)", "-\t\t\tSystem.out.println(\"Parsing \" + possibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-", "-\t\tthis.parser.nodeSet = possibleMatch.nodeSet;", "-\t\tCompilationResult unitResult = new CompilationResult(possibleMatch, 1, 1, this.options.maxProblemsPerUnit);", "-\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(possibleMatch, unitResult);", "-\t\tif (parsedUnit != null) {", "-\t\t\tif (mustResolve && !parsedUnit.isEmpty())", "-\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-", "-\t\t\t// add the possibleMatch with its parsedUnit to matchesToProcess", "-\t\t\tpossibleMatch.parsedUnit = parsedUnit;", "-\t\t\tint size = this.matchesToProcess.length;", "-\t\t\tif (this.numberOfMatches == size)", "-\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PossibleMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "-\t\t\tthis.matchesToProcess[this.numberOfMatches++] = possibleMatch;", "-\t\t}", "-\t} finally {", "-\t\tthis.parser.nodeSet = null;", "-\t}", "-}", "+ */", "+protected boolean parseAndBuildBindings(PossibleMatch possibleMatch, boolean mustResolve) throws CoreException {", "+\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();", "+", "+\ttry {", "+\t\tif (BasicSearchEngine.VERBOSE)", "+\t\t\tSystem.out.println(\"Parsing \" + possibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+", "+\t\tthis.parser.nodeSet = possibleMatch.nodeSet;", "+\t\tCompilationResult unitResult = new CompilationResult(possibleMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(possibleMatch, unitResult);", "+\t\tif (parsedUnit != null) {", "+\t\t\tif (!parsedUnit.isEmpty()) {", "+\t\t\t\tif (mustResolve) {", "+\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t}", "+\t\t\t\tif (hasAlreadyDefinedType(parsedUnit)) return false; // skip type has it is hidden so not visible", "+\t\t\t\tgetMethodBodies(parsedUnit, possibleMatch.nodeSet);", "+\t\t\t\tif (this.patternLocator.mayBeGeneric && !mustResolve && possibleMatch.nodeSet.mustResolve) {", "+\t\t\t\t\t// special case: possible match node set force resolution although pattern does not", "+\t\t\t\t\t// => we need to build types for this compilation unit", "+\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t}", "+\t\t\t}", "+\t", "+\t\t\t// add the possibleMatch with its parsedUnit to matchesToProcess", "+\t\t\tpossibleMatch.parsedUnit = parsedUnit;", "+\t\t\tint size = this.matchesToProcess.length;", "+\t\t\tif (this.numberOfMatches == size)", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PossibleMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = possibleMatch;", "+\t\t}", "+\t} finally {", "+\t\tthis.parser.nodeSet = null;", "+\t}", "+\treturn true;", "+}"]}], "num": 15840}
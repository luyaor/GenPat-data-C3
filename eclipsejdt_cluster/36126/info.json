{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6927133aa1a812e8d32e90ea77733e4b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ace8802f5b85219745cbafc186b98e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "0364a4a83fd36a50e2f640c1ff760bbc5a6d0c8e", "commitAfterChange": "d03a3f510c4024243302c43ee912819616ee9cc6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\t} else if (!this.binding.declaringClass.isInterface()", "-\t\t\t\t\t\t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "-\t\t\t\t// actually overrides, but did not claim to do so", "-\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t} else {", "+\t\t\t\t//In case of  a concrete class method, we have to check if it overrides(in 1.5 and above) OR implements a method(1.6 and above).", "+\t\t\t\t//Also check if the method has a signature that is override-equivalent to that of any public method declared in Object.", "+\t\t\t\tif (!this.binding.declaringClass.isInterface()){", "+\t\t\t\t\t\tif((bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif(complianceLevel >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t\t\t\t&& compilerOptions.reportMissingOverrideAnnotationForInterfaceMethodImplementation", "+\t\t\t\t\t\t\t\t&& this.binding.isImplementing()) {", "+\t\t\t\t\t\t\t\t\t// actually overrides, but did not claim to do so", "+\t\t\t\t\t\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotationForInterfaceMethodImplementation(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse {\t//For 1.6 and above only", "+\t\t\t\t\t//In case of a interface class method, we have to check if it overrides a method (isImplementing returns true in case it overrides)", "+\t\t\t\t\t//Also check if the method has a signature that is override-equivalent to that of any public method declared in Object.", "+\t\t\t\t\tif(complianceLevel >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t\t\t&& compilerOptions.reportMissingOverrideAnnotationForInterfaceMethodImplementation", "+\t\t\t\t\t\t\t&& (((bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) || this.binding.isImplementing())){", "+\t\t\t\t\t\t// actually overrides, but did not claim to do so", "+\t\t\t\t\t\tthis.scope.problemReporter().missingOverrideAnnotationForInterfaceMethodImplementation(this);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96521fcb9e60aa5eea526d58a11009a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "429d7df288eceadbc2bb6418c8a2cab4930645b8", "commitAfterChange": "035e81e22d7f5ffa0ef14b6015456b50ec72de9a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\t// claims to override, and doesn't actually do so", "-\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 && (this.binding.modifiers & AccOverriding) == 0) {", "+\t\t\tint bindingModifiers = this.binding.modifiers;", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 ", "+\t\t\t\t\t&& (bindingModifiers & AccOverriding) == 0) {", "+\t\t\t\t// claims to override, and doesn't actually do so", "-\t\t\t}", "-\t\t\t// actually overrides, but did not claim to do so", "-\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "-\t\t\t\t\t&& (this.binding.modifiers & AccOverriding) != 0", "-\t\t\t\t\t&& scope.environment().options.sourceLevel >= JDK1_5) {", "+\t\t\t} else\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "+\t\t\t\t\t\t&& (bindingModifiers & AccStatic) == 0", "+\t\t\t\t\t\t&& (bindingModifiers & AccOverriding) != 0", "+\t\t\t\t\t\t&& scope.environment().options.sourceLevel >= JDK1_5) {", "+\t\t\t\t// actually overrides, but did not claim to do so", "-\t\t\t\tif ((modifiers & AccSemicolonBody) != 0) {", "-\t\t\t\t\tif ((modifiers & AccNative) == 0)", "-\t\t\t\t\t\tif ((modifiers & AccAbstract) == 0)", "+\t\t\t\tif ((this.modifiers & AccSemicolonBody) != 0) {", "+\t\t\t\t\tif ((this.modifiers & AccNative) == 0)", "+\t\t\t\t\t\tif ((this.modifiers & AccAbstract) == 0)", "-\t\t\t\t\tif (((modifiers & AccNative) != 0) || ((modifiers & AccAbstract) != 0))", "+\t\t\t\t\tif (((this.modifiers & AccNative) != 0) || ((this.modifiers & AccAbstract) != 0))"]}], "num": 36126}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d179041203c752407aeac3102ff7cfb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f08e9847fdfaa2c9085868e35241ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 464, "methodNumberAfterChange": 464, "signatureBeforeChange": " \tpublic void test460()", "signatureAfterChange": " \tpublic void test460()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tClass<? extends Collection> c = param.getClass(); // ok\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tClass<? extends Collection> d = getClazz(); // ko\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"\tClass<? extends Collection> c = getClass(); // ok\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "720b18c50bcb61e50f35b84bc8dcafb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " public void test401847a()", "signatureAfterChange": " public void test401847a()", "diff": ["-\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\"The method foo(I...) in the type X is not applicable for the arguments ((true ? X::goo : X::goo))\\n\" + ", "+\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfoo(true ? X::goo : X::goo);\\n\" + ", "+\t\t\t\"\t                    ^^^^^^\\n\" + ", "+\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo(true ? x-> 1 : x->0);\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo(true ? x-> 1 : x->0);\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87460102e8145f480215c2c323e15b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": "\t\t \tpublic void test268()", "signatureAfterChange": "\t\t \tpublic void test268()", "diff": ["+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tArrayList<X> list = new ArrayList();\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tArrayList<X> list = new ArrayList();\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\treturn list.toArray(new X[list.size()]);\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}], "num": 100}
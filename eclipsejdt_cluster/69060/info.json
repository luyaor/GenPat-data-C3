{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede5d04e7680fbe5a2aaa6fe9c8617a4", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0914fb23cc2a672b64739b2e7162c244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, variableType, this.initialization);", "+\t\t\t\t\t\tif ((variableType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t\t\t\t\t// if problem already got signaled on type, do not report secondary problem", "+\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(initializationType, variableType, this.initialization, null);", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "975037d8b9acff1f279e1e8d8bb8dada", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationType, fieldType, this.initialization);", "+\t\t\t\t\tif ((fieldType.tagBits & TagBits.HasMissingType) == 0) {", "+\t\t\t\t\t\t// if problem already got signaled on type, do not report secondary problem", "+\t\t\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationType, fieldType, this.initialization, null);", "+\t\t\t\t\t}\t\t"]}], "num": 69060}
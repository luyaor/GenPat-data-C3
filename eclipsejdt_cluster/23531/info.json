{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d384bbc3f4a40f7533c5832a9f4e3936", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b031866659057dcb8a1094a4353b2de4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["-\r", "-\tswitch (setting.getID()) {\r", "-\t\tcase 1 : // insert blank line before opening brace\r", "-\t\t\tsetNewLineBeforeOpeningBraceMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 2 : // insert blank line behind keywords (ELSE, CATCH, FINALLY,...) in control statements\r", "-\t\t\tsetNewlineInControlStatementMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 3 : // flush all blank lines\r", "-\t\t\tsetClearAllBlankLinesMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 4 : // puts else if on the same line\r", "-\t\t\tsetCompactElseIfMode(setting.getCurrentValueIndex() == 0);\r", "-\t\tbreak;\r", "-\t\tcase 5 : // add a new line inside an empty block.\r", "-\t\t\tsetNewLineInEmptyBlockMode(setting.getCurrentValueIndex() == 0);\r", "-\t\tbreak;\r", "-\t\tcase 6 : // line splitting will occur when line exceeds this length (0 -> no splitting)\r", "-\t\t\tsetMaxLineLength(setting.getCurrentValueIndex());\r", "-\t\t\tbreak;\r", "-\t\tcase 7 : // if isTrue, assignments look like x= 12 (not like x = 12);\r", "-\t\t\tsetCompactAssignmentMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 9 : // should use tab or spaces to indent\r", "-\t\t\tsetIndentationUsesTab(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 10 : // amount of spaces for a tabulation\r", "-\t\t\tsetTabSize(setting.getCurrentValueIndex());\r", "-\t\t\tbreak;\r", "+\t\r", "+\tString optionID = setting.getID();\r", "+\t\r", "+\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "+\t\tsetNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "+\t\tsetNewlineInControlStatementMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_ClearAllBlankLines)){\r", "+\t\tsetClearAllBlankLinesMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "+\t\tsetCompactElseIfMode(setting.getValueIndex() == 1);\r", "+\t}else if(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "+\t\tsetNewLineInEmptyBlockMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "+\t\ttry {\r", "+\t\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "+\t\t} catch(NumberFormatException e){\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_CompactAssignment)){\r", "+\t\tsetCompactAssignmentMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_TabulationChar)){\r", "+\t\tsetIndentationUsesTab(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_TabulationSize)){\r", "+\t\ttry {\r", "+\t\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r", "+\t\t} catch(NumberFormatException e){\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e80eef99724be0dfe37c1a6fd36f9930", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["-\r", "-\tswitch (setting.getID()) {\r", "-\t\tcase 1 : // insert blank line before opening brace\r", "-\t\t\tsetNewLineBeforeOpeningBraceMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 2 : // insert blank line behind keywords (ELSE, CATCH, FINALLY,...) in control statements\r", "-\t\t\tsetNewlineInControlStatementMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 3 : // flush all blank lines\r", "-\t\t\tsetClearAllBlankLinesMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 4 : // puts else if on the same line\r", "-\t\t\tsetCompactElseIfMode(setting.getCurrentValueIndex() == 0);\r", "-\t\tbreak;\r", "-\t\tcase 5 : // add a new line inside an empty block.\r", "-\t\t\tsetNewLineInEmptyBlockMode(setting.getCurrentValueIndex() == 0);\r", "-\t\tbreak;\r", "-\t\tcase 6 : // line splitting will occur when line exceeds this length (0 -> no splitting)\r", "-\t\t\tsetMaxLineLength(setting.getCurrentValueIndex());\r", "-\t\t\tbreak;\r", "-\t\tcase 7 : // if isTrue, assignments look like x= 12 (not like x = 12);\r", "-\t\t\tsetCompactAssignmentMode(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 9 : // should use tab or spaces to indent\r", "-\t\t\tsetIndentationUsesTab(setting.getCurrentValueIndex() == 0);\r", "-\t\t\tbreak;\r", "-\t\tcase 10 : // amount of spaces for a tabulation\r", "-\t\t\tsetTabSize(setting.getCurrentValueIndex());\r", "-\t\t\tbreak;\r", "+\t\r", "+\tString optionID = setting.getID();\r", "+\t\r", "+\tif(optionID.equals(OPTION_InsertNewlineBeforeOpeningBrace)){\r", "+\t\tsetNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_InsertNewlineInControlStatement)){\r", "+\t\tsetNewlineInControlStatementMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_ClearAllBlankLines)){\r", "+\t\tsetClearAllBlankLinesMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_InsertNewLineBetweenElseAndIf)){\r", "+\t\tsetCompactElseIfMode(setting.getValueIndex() == 1);\r", "+\t}else if(optionID.equals(OPTION_InsertNewLineInEmptyBlock)){\r", "+\t\tsetNewLineInEmptyBlockMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_SplitLineExceedingLength)){\r", "+\t\ttry {\r", "+\t\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "+\t\t} catch(NumberFormatException e){\r", "+\t\t}\r", "+\t}else if(optionID.equals(OPTION_CompactAssignment)){\r", "+\t\tsetCompactAssignmentMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_TabulationChar)){\r", "+\t\tsetIndentationUsesTab(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(OPTION_TabulationSize)){\r", "+\t\ttry {\r", "+\t\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r", "+\t\t} catch(NumberFormatException e){\r", "+\t\t}\r"]}], "num": 23531}
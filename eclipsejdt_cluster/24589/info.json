{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8c9508658649ae6280f0aa8147c6f3f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d6c5f15d5ceb36c5e3212b5c639dfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic TypeBinding[] genericTypeArguments()", "diff": ["+\t */", "+\tpublic TypeBinding[] genericTypeArguments() {", "+\t\treturn null;", "+\t}", "-\tpublic void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "-\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() ", "-\t\t\t\t\t\t\t\t!= currentScope.enclosingSourceType().getPackage()))) {", "-\t\t\t\tsyntheticAccessors[READ] = ", "-\t\t\t\t\t((SourceTypeBinding)currentScope.enclosingSourceType().", "-\t\t\t\t\t\tenclosingTypeAt((bits & DepthMASK) >> DepthSHIFT)).", "-\t\t\t\t\t\t\taddSyntheticMethod(fieldBinding, true);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);", "-\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6234ca70140807e4c9a2ce73275ec85c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "07b82c9368bd10ac7ebb1046caebd6da084b537f", "commitAfterChange": "cb61394506c50bdecec5c108eded9cebfe12f3fe", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tpublic Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": " \t \tpublic Expression convertToExpression(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\t} else if (statement instanceof LocalDeclaration) {", "-\t\t\tLocalDeclaration localDeclaration = (LocalDeclaration) statement;", "-\t\t\tVariableDeclarationFragment variableDeclarationFragment = this.ast.newVariableDeclarationFragment();", "-\t\t\tSimpleName name = this.ast.newSimpleName(localDeclaration.name());", "-\t\t\tname.setSourceRange(localDeclaration.sourceStart, localDeclaration.sourceEnd - localDeclaration.sourceStart + 1);", "-\t\t\tvariableDeclarationFragment.setName(name);", "-\t\t\tvariableDeclarationFragment.setSourceRange(localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd - localDeclaration.declarationSourceStart + 1);", "-\t\t\tif (localDeclaration.initialization != null) {", "-\t\t\t\tvariableDeclarationFragment.setInitializer(convert(localDeclaration.initialization));", "-\t\t\t}", "-\t\t\tVariableDeclarationExpression variableDeclarationExpression = this.ast.newVariableDeclarationExpression(variableDeclarationFragment);", "-\t\t\tif (this.resolveBindings) {", "-\t\t\t\trecordNodes(variableDeclarationFragment, localDeclaration);", "-\t\t\t}", "-\t\t\tvariableDeclarationExpression.setSourceRange(localDeclaration.declarationSourceStart, localDeclaration.declarationSourceEnd - localDeclaration.declarationSourceStart + 1);", "-\t\t\t/**", "-\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=13233", "-\t\t\t * This handles cases where the parser built variables with invalid modifiers.", "-\t\t\t * The compilation unit is tagged as having wrong modifiers for the local.", "-\t\t\t * Only final is allowed in this case.", "-\t\t\t */", "-\t\t\ttry {", "-\t\t\t\tvariableDeclarationExpression.setModifiers(localDeclaration.modifiers);", "-\t\t\t} catch(IllegalArgumentException e) {", "-\t\t\t\tvariableDeclarationExpression.setModifiers(localDeclaration.modifiers & Modifier.FINAL);", "-\t\t\t\tvariableDeclarationExpression.setFlags(ASTNode.MALFORMED);", "-\t\t\t}", "-\t\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSource.length));", "-\t\t\tType type = convertType(localDeclaration.type);", "-\t\t\tsetTypeForVariableDeclarationExpression(variableDeclarationExpression, type, variableDeclarationFragment.getExtraDimensions());", "-\t\t\treturn variableDeclarationExpression;", "-\t\t} else {", "-\t\t\t// unsupported", "-\t\t\tthrow new IllegalArgumentException(\"Not yet implemented: convert(\" + statement.getClass() + \")\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t// unsupported", "+\t\tthrow new IllegalArgumentException(\"Not yet implemented: convert(\" + statement.getClass() + \")\");//$NON-NLS-1$//$NON-NLS-2$"]}], "num": 24589}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aba85d06b70de70ff468bfb491ad6582", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7547ffcf7a19ef5442728b3c4bfb47b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static char[] createIndexKey( \tint modifiers, \tchar[] packageName, \tchar[] typeName, \tchar[][] enclosingTypeNames, \tchar classOrInterface, \tchar[] superTypeName, \tchar superClassOrInterface)", "signatureAfterChange": "  public static char[] createIndexKey( \tint modifiers, \tchar[] packageName, \tchar[] typeName, \tchar[][] enclosingTypeNames, \tchar[][] typeParameterSignatures, \tchar classOrInterface, \tchar[] superTypeName, \tchar superClassOrInterface)", "diff": ["+\tchar[][] typeParameterSignatures,", "+\t", "+\tchar[] typeParameters = CharOperation.NO_CHAR;", "+\tint typeParametersLength = 0;", "+\tif (typeParameterSignatures != null) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tfor (int i = 0, length = typeParameterSignatures.length; i < length; i++) {", "+\t\t\tchar[] typeParameter = typeParameterSignatures[i];", "+\t\t\tbuffer.append(typeParameter);", "+\t\t\ttypeParametersLength += typeParameter.length;", "+\t\t\tif (i != length-1) {", "+\t\t\t\tbuffer.append(',');", "+\t\t\t\ttypeParametersLength++;", "+\t\t\t}", "+\t\t}", "+\t\ttypeParameters = new char[typeParametersLength];", "+\t\tbuffer.getChars(0, typeParametersLength, typeParameters, 0);", "+\t}", "-\t// superSimpleName / superQualification / simpleName / enclosingTypeName / packageName / superClassOrInterface classOrInterface modifiers", "+\t// superSimpleName / superQualification / simpleName / enclosingTypeName / typeParameters / packageName / superClassOrInterface classOrInterface modifiers", "-\tchar[] result = new char[superLength + superQLength + simpleLength + enclosingLength + packageLength + 8];", "+\tchar[] result = new char[superLength + superQLength + simpleLength + enclosingLength + typeParametersLength + packageLength + 9];", "+\t}", "+\tresult[pos++] = SEPARATOR;", "+\tif (typeParametersLength > 0) {", "+\t\tSystem.arraycopy(typeParameters, 0, result, pos, typeParametersLength);", "+\t\tpos += typeParametersLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0ab7b80d9424049ad2d55e1f754fc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "67974a3eb30390e309a10071d1a2b488bc4237aa", "commitAfterChange": "84eea0a0b501eccff0f4627ea142c6395d390a8d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": " public static char[] getClassBound(char[] formalTypeParameterSignature) throws IllegalArgumentException", "signatureAfterChange": " public static char[][] getTypeParameterBounds(char[] formalTypeParameterSignature) throws IllegalArgumentException", "diff": ["- */", "-public static char[] getClassBound(char[] formalTypeParameterSignature) throws IllegalArgumentException {", "+public static char[][] getTypeParameterBounds(char[] formalTypeParameterSignature) throws IllegalArgumentException {", "-\tint p2 = CharOperation.indexOf(C_COLON, formalTypeParameterSignature, p1 + 1);", "-\tif (p2 < 0 || p2 == p1 + 1) {", "-\t\t// no class bound", "-\t\treturn null;", "+\tif (p1 == formalTypeParameterSignature.length - 1) {", "+\t\t// no class or interface bounds", "+\t\treturn CharOperation.NO_CHAR_CHAR;", "-\treturn CharOperation.subarray(formalTypeParameterSignature, p1 + 1, p2);", "+\tint p2 = CharOperation.indexOf(C_COLON, formalTypeParameterSignature, p1 + 1);", "+\tchar[] classBound;", "+\tif (p2 < 0) {", "+\t\t// no interface bounds", "+\t\tclassBound = CharOperation.subarray(formalTypeParameterSignature, p1 + 1, formalTypeParameterSignature.length);", "+\t\treturn new char[][] {classBound};", "+\t}", "+\tif (p2 == p1 + 1) {", "+\t\t// no class bound, but 1 or more interface bounds", "+\t\tclassBound = null;", "+\t} else {", "+\t\tclassBound = CharOperation.subarray(formalTypeParameterSignature, p1 + 1, p2);", "+\t}", "+\tchar[][] interfaceBounds = CharOperation.splitOn(C_COLON, formalTypeParameterSignature, p2 + 1, formalTypeParameterSignature.length);", "+\tif (classBound == null) {", "+\t\treturn interfaceBounds;", "+\t}", "+\tint resultLength = interfaceBounds.length + 1;", "+\tchar[][] result = new char[resultLength][];", "+\tresult[0] = classBound;", "+\tSystem.arraycopy(interfaceBounds, 0, result, 1, interfaceBounds.length);", "+\treturn result;"]}], "num": 26915}
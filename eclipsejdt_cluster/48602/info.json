{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "891efe4ecc24ea47e5e342c7832106e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04366baa46452deedfa46ce09d7afced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3ef93f23afcd2f32a7f2e702fed5d9d29c70e752", "commitAfterChange": "a54ce0f1a5965500a06d345ce2b572137c5b2f38", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "\r \t\r \tpublic InfixExpression convert(InstanceOfExpression expression)", "signatureAfterChange": "\r \t\r \tpublic InstanceofExpression convert(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression expression)", "diff": ["-\tpublic InfixExpression convert(InstanceOfExpression expression) {\r", "-\t\tInfixExpression infixExpression = this.ast.newInfixExpression();\r", "+\tpublic InstanceofExpression convert(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression expression) {\r", "+\t\tInstanceofExpression instanceOfExpression = this.ast.newInstanceofExpression();\r", "-\t\t\trecordNodes(infixExpression, expression);\r", "+\t\t\trecordNodes(instanceOfExpression, expression);\r", "-\t\tinfixExpression.setLeftOperand(leftExpression);\r", "-\t\tinfixExpression.setRightOperand(convert(expression.type));\r", "-\t\tinfixExpression.setOperator(InfixExpression.Operator.INSTANCEOF);\r", "+\t\tinstanceOfExpression.setLeftOperand(leftExpression);\r", "+\t\tinstanceOfExpression.setRightOperand(convertType(expression.type));\r", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);\r", "-\t\treturn infixExpression;\r", "+\t\tinstanceOfExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);\r", "+\t\treturn instanceOfExpression;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45f07f8fafe8e5976701927f7a2955c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression)", "signatureAfterChange": "  \tpublic MarkerAnnotation convert(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation annotation)", "diff": ["-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression expression) {", "-\t\tInfixExpression infixExpression = this.ast.newInfixExpression();", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(infixExpression, expression);", "+\tpublic MarkerAnnotation convert(org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation annotation) {", "+\t\tMarkerAnnotation markerAnnotation = this.ast.newMarkerAnnotation();", "+\t\tsetTypeNameForAnnotation(annotation, markerAnnotation);", "+\t\tint start = annotation.sourceStart;", "+\t\tint end = annotation.declarationSourceEnd;", "+\t\tmarkerAnnotation.setSourceRange(start, end - start + 1);", "+\t\treturn markerAnnotation;", "+\t}", "-\t\tExpression leftExpression = convert(expression.left);", "-\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\tinfixExpression.setRightOperand(convert(expression.right));", "-\t\tinfixExpression.setOperator(InfixExpression.Operator.CONDITIONAL_AND);", "-\t\tint startPosition = leftExpression.getStartPosition();", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "-\t"]}], "num": 48602}
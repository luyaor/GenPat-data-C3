{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aea421a16c76b2db4c96453b32477de8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3244a53d2a8bfbbfa348b1ea5c3b01eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "36dbe4a61ccd2e283322ec353cff1f83cf809e44", "commitAfterChange": "7e03d9f19fb7dc123e6ae2066dc2c63cb6ac428e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic IMethodBinding[] getDeclaredMethods()", "signatureAfterChange": " \tpublic IMethodBinding[] getDeclaredMethods()", "diff": ["+\t\t\tint removeSyntheticsCounter = 0;", "-\t\t\t\tnewMethods[i] = this.resolver.getMethodBinding(methods[i]);", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding methodBinding = methods[i];", "+\t\t\t\tif (!shouldBeRemoved(methodBinding)) { ", "+\t\t\t\t\tnewMethods[removeSyntheticsCounter++] = this.resolver.getMethodBinding(methodBinding);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (removeSyntheticsCounter != length) {", "+\t\t\t\tSystem.arraycopy(newMethods, 0, (newMethods = new IMethodBinding[removeSyntheticsCounter]), 0, removeSyntheticsCounter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8e3c2f69f55f3cb2dca8a189e3292c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "80f13f589612d3209f47e541aabe6ab2c65adcfb", "commitAfterChange": "368ef540dc656f1299283391a6f5a5b30ecfed90", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "signatureAfterChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "diff": ["+\tint index = 0;\r", "-\t\tres[i] = new JarEntryFile(resNames[i], zipName);\r", "+\t\tString resName = resNames[i];\r", "+\t\t// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)\r", "+\t\tif (!resName.toLowerCase().endsWith(\".java\")) { //$NON-NLS-1$\r", "+\t\t\tres[index++] = new JarEntryFile(resName, zipName);\r", "+\t\t}\r", "+\tif (index != max) {\r", "+\t\tSystem.arraycopy(res, 0, res = new Object[index], 0, index);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "614006159c67c2871abe7c3b923004a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "21cbb8771cc00d8e13a556404fdfae59ecdb14f8", "commitAfterChange": "0899c90ae8de27e397eab6637d91f616ff022416", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource)", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource)", "diff": ["-\tfor (int i = 0, max = projects.length; i < max; i++) {", "+\tint length = projects.length;", "+\tIJavaElement[] children = new IJavaElement[length];", "+\tint index = 0;", "+\tfor (int i = 0; i < length; i++) {", "-\t\t\tinfo.addChild(getJavaProject(project));", "+\t\t\tchildren[index++] = getJavaProject(project);", "+\tif (index < length)", "+\t\tSystem.arraycopy(children, 0, children = new IJavaElement[index], 0, index);", "+\tinfo.setChildren(children);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "725ddf059afb19f0dab70f6dbf5a9470", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java", "commitBeforeChange": "2f1f19005a1b0ab28beef5d092b7adf4a87a46a5", "commitAfterChange": "a1f148826d86c9a40e11e8182d96a91f5ea114f6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public CompilationUnitDeclaration updatedCompilationUnitDeclaration()", "signatureAfterChange": "\r public CompilationUnitDeclaration updatedCompilationUnitDeclaration()", "diff": ["+\t\tint actualCount = existingCount;\r", "-\t\t\ttypeDeclarations[existingCount + i] = types[i].updatedTypeDeclaration();\r", "+\t\t\tTypeDeclaration typeDecl = types[i].updatedTypeDeclaration();\r", "+\t\t\t// filter out local types (12454)\r", "+\t\t\tif (!(typeDecl instanceof LocalTypeDeclaration)){\r", "+\t\t\t\ttypeDeclarations[actualCount++] = typeDecl;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (actualCount != typeCount){\r", "+\t\t\tSystem.arraycopy(\r", "+\t\t\t\ttypeDeclarations, \r", "+\t\t\t\t0, \r", "+\t\t\t\ttypeDeclarations = new TypeDeclaration[existingCount+actualCount], \r", "+\t\t\t\t0, \r", "+\t\t\t\texistingCount+actualCount);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3f54fb6e7fde161992052f2e03dafb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic synchronized IVariableBinding[] getDeclaredFields()", "signatureAfterChange": " \tpublic synchronized IVariableBinding[] getDeclaredFields()", "diff": ["+\t\t\t\t\tint convertedFieldCount = 0;", "-\t\t\t\t\t\tIVariableBinding variableBinding = this.resolver.getVariableBinding(fieldBindings[i]);", "+\t\t\t\t\t\tFieldBinding fieldBinding = fieldBindings[i];", "+\t\t\t\t\t\tIVariableBinding variableBinding = this.resolver.getVariableBinding(fieldBinding);", "-\t\t\t\t\t\tnewFields[i] = variableBinding;", "+\t\t\t\t\t\tnewFields[convertedFieldCount++] = variableBinding;", "+", "+\t\t\t\t\tif (convertedFieldCount != length) {", "+\t\t\t\t\t\tif (convertedFieldCount == 0) {", "+\t\t\t\t\t\t\treturn this.fields = NO_VARIABLE_BINDINGS;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tSystem.arraycopy(newFields, 0, (newFields = new IVariableBinding[convertedFieldCount]), 0, convertedFieldCount);", "+\t\t\t\t\t}\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1f8f3cbf183a0ba7993ecb2e57ffdfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "cf2e4750b0bf80acaca57190591526193389bd11", "commitAfterChange": "c8343c5add6dda54a91bc7ca5cb7fef7041d4b69", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate static IPath[] decodePatterns(Element element, String tag)", "signatureAfterChange": " \tprivate static IPath[] decodePatterns(Element element, String tag)", "diff": ["-\t\t\tif ((patternCount  = patterns.length) > 0) {", "+\t\t\tif ((patternCount = patterns.length) > 0) {", "-\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "-\t\t\t\t\tpaths[j] = new Path(new String(patterns[j]));", "+\t\t\t\tint index = 0;", "+\t\t\t\tfor (int j = 0; j < patternCount; j++) {", "+\t\t\t\t\tchar[] pattern = patterns[j];", "+\t\t\t\t\tif (pattern.length == 0) continue; // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=105581", "+\t\t\t\t\tpaths[index++] = new Path(new String(pattern));", "+\t\t\t\tif (index < patternCount)", "+\t\t\t\t\tSystem.arraycopy(paths, 0, paths = new IPath[index], 0, index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dca49109e8d3a6d3d6006e19d69228be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "bd673e70d2edbc0e521113de6223a36ce39b9f38", "commitAfterChange": "f39ebdc35f9d09bb9c2d74130f4d665ebd4bf2dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IIndex[] getIndexes()", "diff": ["+\tint count = 0;", "-\t\tindexes[i] = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t\tIIndex index = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "+\t\tif (index != null) indexes[count++] = index; // only consider indexes which are ready yet", "+\t}", "+\tif (count != length) {", "+\t\tSystem.arraycopy(indexes, 0, indexes=new IIndex[count], 0, count);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a841a02d703f85c344cf06d81c6b83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "5db1115bce054858f0e417b54c74179d7e6009d1", "commitAfterChange": "7a8c3dc423c0b39a0d91a8547c98a520bb9dee61", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "signatureAfterChange": " \t \tprivate Annotation[] convertAnnotations(JavaElement element)", "diff": ["+\t\tint recordedAnnotations = 0;", "-\t\t\tannotations[i] = (Annotation) expression;", "+\t\t\t/*", "+\t\t\t * expression can be null or not an annotation if the source has changed between", "+\t\t\t * the moment where the annotation source positions have been retrieved and the moment were", "+\t\t\t * this parsing occured.", "+\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916", "+\t\t\t */", "+\t\t\tif (expression instanceof Annotation) {", "+\t\t\t\tannotations[i] = (Annotation) expression;", "+\t\t\t\trecordedAnnotations++;", "+\t\t\t}", "+\t\t}", "+\t\tif (length != recordedAnnotations) {", "+\t\t\t// resize to remove null annotations", "+\t\t\tSystem.arraycopy(annotations, 0, (annotations = new Annotation[recordedAnnotations]), 0, recordedAnnotations);"]}], "num": 60110}
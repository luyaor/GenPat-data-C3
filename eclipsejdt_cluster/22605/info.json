{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a486fa76844261929ebb4eea5d6f31e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "275daffd902c049ec7dccdea101f1a62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionCastTypeBinding.java", "commitBeforeChange": "c1ee186c6c2310acb811595797e078d125bafaaf", "commitAfterChange": "7693b6034c5b487d7e3d22ce3120cc397666c014", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean isCompatibleWith(TypeBinding right, Scope scope)", "signatureAfterChange": " \tpublic boolean isCompatibleWith(TypeBinding right, Scope scope)", "diff": ["+", "+\t\t// easy way out?", "+\t\tif (TypeBinding.equalsEquals(this, right))", "+\t\t\treturn true;", "+", "+\t\t// need to compare two intersection types?", "+\t\tint rightKind = right.kind();", "+\t\tTypeBinding[] rightIntersectingTypes = null;", "+\t\tif (rightKind == INTERSECTION_TYPE && right.boundKind() == Wildcard.EXTENDS) {", "+\t\t\tTypeBinding allRightBounds = ((WildcardBinding) right).allBounds();", "+\t\t\tif (allRightBounds instanceof IntersectionCastTypeBinding)", "+\t\t\t\trightIntersectingTypes = ((IntersectionCastTypeBinding) allRightBounds).intersectingTypes;", "+\t\t} else if (rightKind == INTERSECTION_CAST_TYPE) {", "+\t\t\trightIntersectingTypes = ((IntersectionCastTypeBinding) right).intersectingTypes;", "+\t\t}", "+\t\tif (rightIntersectingTypes != null) {", "+\t\t\tint numRequired = rightIntersectingTypes.length;", "+\t\t\tTypeBinding[] required = new TypeBinding[numRequired];", "+\t\t\tSystem.arraycopy(rightIntersectingTypes, 0, required, 0, numRequired);", "+\t\t\tfor (int i = 0; i < this.length; i++) {", "+\t\t\t\tTypeBinding provided = this.intersectingTypes[i];", "+\t\t\t\tfor (int j = 0; j < required.length; j++) {", "+\t\t\t\t\tif (required[j] == null) continue;", "+\t\t\t\t\tif (provided.isCompatibleWith(required[j], scope)) {", "+\t\t\t\t\t\trequired[j] = null;", "+\t\t\t\t\t\tif (--numRequired == 0)", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "+", "+\t\t// normal case:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f935ffae9d5e54617762437a04e15e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "ec3141ffcff3411a0e4abbb098ed096a885f0d97", "commitAfterChange": "4eaa1f1fc9e841c11eaca436ac06f8635b8543bd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["+\t\tif (TypeBinding.equalsEquals(this, otherType))", "+\t\t\treturn true;", "-\t\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "+\t\t\t\tint length = this.upperBounds.length;", "+", "+\t\t\t\t// need to compare two intersection types? (borrowed from IntersectionType18)", "+\t\t\t\tint rightKind = otherType.kind();", "+\t\t\t\tTypeBinding[] rightIntersectingTypes = null;", "+\t\t\t\tif (rightKind == INTERSECTION_TYPE && otherType.boundKind() == Wildcard.EXTENDS) {", "+\t\t\t\t\tTypeBinding allRightBounds = ((WildcardBinding) otherType).allBounds();", "+\t\t\t\t\tif (allRightBounds instanceof IntersectionTypeBinding18)", "+\t\t\t\t\t\trightIntersectingTypes = ((IntersectionTypeBinding18) allRightBounds).intersectingTypes;", "+\t\t\t\t} else if (rightKind == INTERSECTION_TYPE18) {", "+\t\t\t\t\trightIntersectingTypes = ((IntersectionTypeBinding18) otherType).intersectingTypes;", "+\t\t\t\t}", "+\t\t\t\tif (rightIntersectingTypes != null) {", "+\t\t\t\t\tint numRequired = rightIntersectingTypes.length;", "+\t\t\t\t\tTypeBinding[] required = new TypeBinding[numRequired];", "+\t\t\t\t\tSystem.arraycopy(rightIntersectingTypes, 0, required, 0, numRequired);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tTypeBinding provided = this.upperBounds[i];", "+\t\t\t\t\t\tfor (int j = 0; j < required.length; j++) {", "+\t\t\t\t\t\t\tif (required[j] == null) continue;", "+\t\t\t\t\t\t\tif (provided.isCompatibleWith(required[j], captureScope)) {", "+\t\t\t\t\t\t\t\trequired[j] = null;", "+\t\t\t\t\t\t\t\tif (--numRequired == 0)", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\treturn super.isCompatibleWith(otherType, captureScope);", "+\t\t\treturn false;"]}], "num": 22605}
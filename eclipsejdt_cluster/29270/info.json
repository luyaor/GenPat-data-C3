{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76ef91f77367857d8593ad4df8ab9a8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de0a8b686f045a4a509a458dca1347d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "commitAfterChange": "56d8ad4b7df60e79a9ee98611feebac099c594f9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public static IStatus validateJavaTypeName(String name)", "signatureAfterChange": "\r public static IStatus validateJavaTypeName(String name)", "diff": ["-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A Java type name must not be null\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.nullName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A Java type name must not start or end with a blank.\", null);;\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.nameWithBlanks\"/*nonNLS*/), null);\r", "-\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, \"By convention, Java type names usually don't contain the $ character.\", null);\r", "+\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.dollarName\"/*nonNLS*/), null);\r", "-\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, \"By convention, Java type names usually start with an uppercase letter.\", null);\r", "+\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.lowercaseName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\", null);\r", "+\t\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\"/*nonNLS*/, null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"The type name \" + name + \" is not a valid identifier.\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.invalidName\"/*nonNLS*/, name), null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1d7f7f8e9ee729ef229c3299b216a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(Javadoc docComment, char[] source)", "diff": ["-\t\tassertTrue(\"Misplaced javadoc start\", source[start++] == '/' && source[start++] == '*' && source[start++] == '*');", "+\t\tassertTrue(this.prefix+\"Misplaced javadoc start\", source[start++] == '/' && source[start++] == '*' && source[start++] == '*');", "-\t\t\tassertEquals(\"Tag element has wrong start position\", tagStart, tagElement.getStartPosition());", "+\t\t\tassertEquals(this.prefix+\"Tag element has wrong start position\", tagStart, tagElement.getStartPosition());", "-\t\twhile (Character.isWhitespace(source[tagStart])) {", "+\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "-\t\tassertTrue(\"Misplaced javadoc end\", source[tagStart++] == '*' && source[tagStart] == '/');", "-\t\tassertEquals(\"Wrong javadoc length\", tagStart, end);", "+\t\tassertTrue(this.prefix+\"Misplaced javadoc end\", source[tagStart-1] == '*' && source[tagStart] == '/');", "+\t\tassertEquals(this.prefix+\"Wrong javadoc length\", tagStart, end);"]}], "num": 29270}
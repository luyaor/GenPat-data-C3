{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0894bab66b216e8fd7c79d848b36cd9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13259ed463d8f9ee725171ee15494849", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "-\t\t\t\t\t\tint lookAhead = 0;\r", "-\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "-\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "+\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "+\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "+\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "+\t\t\t\t\t\t\tlines.add(currentLine);\r", "+\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "-\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "+\t\t\t\t\t\tcurrentLine.add(\r", "+\t\t\t\t\t\t\tnew StringLiteral(\r", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "+\t\t\t\t\t\t\t\tstartPosition, \r", "+\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee9b0591764c10829ca15833746e211", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "-\t\t\t\t\t\tint lookAhead = 0;\r", "-\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "-\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "+\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "+\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "+\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "+\t\t\t\t\t\t\tlines.add(currentLine);\r", "+\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "-\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "+\t\t\t\t\t\tcurrentLine.add(\r", "+\t\t\t\t\t\t\tnew StringLiteral(\r", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "+\t\t\t\t\t\t\t\tstartPosition, \r", "+\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e53338b784c8f833fed22ee9e29de6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "-\t\t\t\t\t\tint lookAhead = 0;\r", "-\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "-\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "+\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "+\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "+\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "+\t\t\t\t\t\t\tlines.add(currentLine);\r", "+\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "-\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "+\t\t\t\t\t\tcurrentLine.add(\r", "+\t\t\t\t\t\t\tnew StringLiteral(\r", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "+\t\t\t\t\t\t\t\tstartPosition, \r", "+\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r"]}], "num": 33391}
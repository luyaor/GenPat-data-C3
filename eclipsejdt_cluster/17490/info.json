{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad6ff13e83d65c0ca0ae899fac392e15", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cdc6896c2094cc0f020f3dcf0960bb3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "599b7f9320007b85e54693f7e40a4ec49fdde55f", "commitAfterChange": "ffe187ffaf97e93da8eeb74a73165230892e2f7a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void runNegativeTest(String[] testFiles, ExpectedProblem[] expectedProblems, String[] classLib, boolean shouldFlushOutputDirectory)", "signatureAfterChange": " protected void runNegativeTest(String[] testFiles, String expectedProblemLog, String[] classLib, boolean shouldFlushOutputDirectory, Map customOptions, boolean generateOutput)", "diff": ["-}", "-protected void runNegativeTest(String[] testFiles, ExpectedProblem[] expectedProblems, String[] classLib, boolean shouldFlushOutputDirectory) {", "-", "-\tif (shouldFlushOutputDirectory) Util.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\tIProblemFactory problemFactory = getProblemFactory();", "-\tRequestor requestor = getRequestor(problemFactory);", "-\trequestor.expectedProblems(expectedProblems);", "-\tCompiler batchCompiler =", "-\t\tnew Compiler(", "-\t\t\tgetNameEnvironment(new String[] {}, classLib),", "-\t\t\tgetErrorHandlingPolicy(),", "-\t\t\tgetCompilerOptions(),", "-\t\t\trequestor,", "-\t\t\tproblemFactory);", "-\tbatchCompiler.compile(compilationUnits(testFiles)); // compile all files together", "-\tif (!requestor.hasErrors) {", "-\t\tString sourceFile = testFiles[0];", "-\t\t", "-\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\t", "-\t\tassertTrue(", "-\t\t\tthis.verifier.failureReason,", "-\t\t\tthis.verifier.verifyClassFiles(sourceFile, className, null, this.classpaths)", "-\t\t);", "-\t}", "-}", "+ */", "+protected void runNegativeTest(String[] testFiles, String expectedProblemLog, String[] classLib, boolean shouldFlushOutputDirectory, Map customOptions, boolean generateOutput) {", "+\tRequestor requestor = new Requestor(problemFactory, OUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, generateOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f63975a921c13869651759eb363489d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "fde095e0f0a4d97a0e65a7c6307c3d16195d07f7", "commitAfterChange": "9ea1cdb7f6499dc7c1092eeaa0da392a32816565", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void store(OutputStream output, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " @SuppressWarnings(\"unchecked\") public void store(OutputStream output, IProgressMonitor monitor) throws JavaModelException", "diff": ["+@SuppressWarnings(\"unchecked\")", "-\t\tHashtable hashtable = new Hashtable();", "-\t\tHashtable hashtable2 = new Hashtable();", "+\t\tHashtable<IType, Integer> hashtable = new Hashtable<>();", "+\t\tHashtable<Integer, IType> hashtable2 = new Hashtable<>();", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tObject t = entry.getKey();", "+\t\t\tMap.Entry<IType, IType> entry = (Map.Entry<IType, IType>) types[i];", "+\t\t\tIType t = entry.getKey();", "-\t\t\tObject superClass = entry.getValue();", "+\t\t\tIType superClass = entry.getValue();", "-\t\ttypes = this.typeToSuperInterfaces.entrySet().toArray();", "-\t\tfor (int i = 0; i < types.length; i++) {", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tObject t = entry.getKey();", "+\t\tObject[] intfs = this.typeToSuperInterfaces.entrySet().toArray();", "+\t\tfor (int i = 0; i < intfs.length; i++) {", "+\t\t\tMap.Entry<IType, IType[]> entry = (Map.Entry<IType, IType[]>) intfs[i];", "+\t\t\tIType t = entry.getKey();", "-\t\t\tObject[] sp = (Object[]) entry.getValue();", "+\t\t\tIType[] sp = entry.getValue();", "-\t\t\t\t\tObject superInterface = sp[j];", "+\t\t\t\t\tIType superInterface = sp[j];", "-\t\t\toutput.write(((String)this.missingTypes.get(i)).getBytes());", "+\t\t\toutput.write((this.missingTypes.get(i)).getBytes());", "-\t\t\tIType t = (IType)hashtable2.get(new Integer(i));", "+\t\t\tIType t = hashtable2.get(new Integer(i));", "-\t\t\toutput.write(flagsToBytes((Integer)this.typeFlags.get(t)));", "+\t\t\toutput.write(flagsToBytes(this.typeFlags.get(t)));", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tIJavaElement key = (IJavaElement) entry.getKey();", "-\t\t\tIJavaElement value = (IJavaElement) entry.getValue();", "+\t\t\tMap.Entry<IType, IType> entry = (Map.Entry<IType, IType>) types[i];", "+\t\t\tIJavaElement key = entry.getKey();", "+\t\t\tIJavaElement value = entry.getValue();", "-\t\t\toutput.write(((Integer)hashtable.get(key)).toString().getBytes());", "+\t\t\toutput.write(hashtable.get(key).toString().getBytes());", "-\t\t\toutput.write(((Integer)hashtable.get(value)).toString().getBytes());", "+\t\t\toutput.write(hashtable.get(value).toString().getBytes());", "-\t\ttypes = this.typeToSuperInterfaces.entrySet().toArray();", "-\t\tfor (int i = 0; i < types.length; i++) {", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tIJavaElement key = (IJavaElement) entry.getKey();", "-\t\t\tIJavaElement[] values = (IJavaElement[]) entry.getValue();", "+\t\tintfs = this.typeToSuperInterfaces.entrySet().toArray();", "+\t\tfor (int i = 0; i < intfs.length; i++) {", "+\t\t\tMap.Entry<IType, IType[]> entry = (Map.Entry<IType, IType[]>) intfs[i];", "+\t\t\tIJavaElement key = entry.getKey();", "+\t\t\tIJavaElement[] values = entry.getValue();", "-\t\t\t\toutput.write(((Integer)hashtable.get(key)).toString().getBytes());", "+\t\t\t\toutput.write(hashtable.get(key).toString().getBytes());", "-\t\t\t\t\toutput.write(((Integer)hashtable.get(value)).toString().getBytes());", "+\t\t\t\t\toutput.write(hashtable.get(value).toString().getBytes());"]}], "num": 17490}